With timestamps:

00:00 - If you want to add email functionality to your application, this is the course.
00:04 - Craig Dennis has created some of our most popular courses and he's back to teach this course.
00:10 - He's going to start all the way back at the invention of email and
00:14 - by the end you will know how to make your app send emails using multiple programming languages and libraries.
00:21 - (bright music)
00:25 - - Hey there.
00:26 - I'm Craig and I'm a developer.
00:27 - I'm assuming that you're
here because you want to add
00:30 - or you've been asked to
add email functionality
00:33 - to an application that you're working on.
00:35 - This is one of those things
where you're like, of course,
00:38 - adding email functionality
makes a ton of sense.
00:41 - Oh wait, how do I do that?
00:44 - Maybe you got asked to send
a confirmation email when
00:46 - someone buys something on your site.
00:48 - This is called transactional email,
00:50 - or maybe you're trying to
personalize your marketing emails
00:53 - with actual user data from the database.
00:56 - Email provides the ability to
track how receivers interact
00:59 - with your message, which opens
up a very powerful analytics
01:02 - solution that you can use
to help guide your business.
01:06 - Now, any way you look at it,
email is an important part
01:09 - of the applications that
we build, so understanding
01:12 - how it works as well as
what its limitations are
01:15 - will greatly help you
throughout your career.
01:18 - Everyone uses email.
01:19 - Email's one of those things
that we developers often take
01:22 - for granted and as you're
about to see, there is a lot
01:24 - that goes into making it work properly.
01:28 - In fact, a popular saying is this,
01:30 - sending email successfully
is more art than science.
01:35 - In this course, we're gonna
take a deep dive into email.
01:38 - We'll take a look at both
the art and the science.
01:41 - Now I'm gonna do my best
01:42 - to make this course fun and interesting.
01:45 - Now, I'll start off by showing
a little bit of its history.
01:47 - I think the only way to truly
understand its current state
01:50 - is to take a quick stroll
01:52 - through its evolution as a technology.
01:54 - There's also quite a bit
of drama in the past,
01:57 - so if you're into that sort of thing,
01:59 - it's gonna get a little juicy.
02:02 - The email world comes with
a smattering of acronyms.
02:05 - Now, you and I both know
02:06 - that those letters can make
you feel overwhelmed AF,
02:10 - my kids use that.
02:11 - I think it stands for
absolutely frustrating
02:14 - and well, I don't like feeling overwhelmed
02:16 - and y'all don't either, right?
02:19 - Where'd everybody go?
02:20 - I guess that return
02:21 - to office email ended
up in the spam folder.
02:25 - This course isn't going
to be very code heavy.
02:27 - I'll show you some code examples
02:29 - and I'll point you where
to learn more about
02:30 - what you find particularly interesting.
02:33 - We'll also take a look at
some suggested approaches
02:36 - and peruse our way
through some email APIs.
02:38 - I'll also explain what that
means if that's new to you.
02:41 - Throughout this course, I'm going to refer
02:44 - to the notes, they're
attached to this video
02:46 - and I will point you
in that direction when
02:48 - there's more to learn.
02:49 - I'd love for you to get in the habit
02:51 - of checking things out there.
02:52 - I'll document in there anything
02:54 - that's different from my
right now to your right now.
02:56 - Basically, it's gonna be a
pretty great resource for you
02:59 - during and after this course.
03:02 - Sound good?
03:03 - Okay, so to kick things
off, I'd like for you
03:06 - to try and imagine a time
03:08 - before email even existed,
03:15 - Like all great inventions.
03:16 - It's hard to imagine a time
03:17 - before that invention was created, like
03:19 - how did we even survive without it?
03:22 - Email is definitely one of those, right?
03:24 - I mean, how did we
communicate before that?
03:26 - Did we just call each other?
03:29 - Well, it turns out, yeah,
we did do that quite a bit.
03:31 - There were lots and lots of phone calls.
03:34 - In the office world,
there was this concept
03:36 - called inter-office mail
03:38 - and you would send physical
documents in large envelopes
03:41 - to specific coworkers in the office.
03:42 - There was a whole mail
room and a delivery system
03:46 - and they would manually
deliver these documents
03:48 - to employees inboxes, which
were actually physical boxes
03:51 - that you put mail in, in-box.
03:55 - Oftentimes, your job as an employee was
03:57 - to sign off on the
document that you received
04:00 - and then forward it on
along to the next person.
04:03 - Some documents even required signatures
04:06 - and if you needed to keep a copy,
04:08 - there was a technology called carbon copy
04:11 - where you would write through the page
04:13 - and it would appear on the attached page.
04:15 - Of course, that carbon copy initials are
04:18 - CC, pretty cool, right?
04:20 - So you can imagine that's what happened.
04:23 - Someone took this already
working interoffice mail system
04:26 - and digitized it or
made it more electronic.
04:30 - Electronic mail, if you will,
email for short, there is
04:34 - actually a patent filed
for the concept of email
04:37 - as we know it, and it was created
04:39 - by, are you ready for this?
04:41 - A 14-year-old boy at MIT,
his name was Shiva Ayyadurai
04:46 - and it's super impressive at
04:48 - how many concepts his project introduced
04:50 - that are still with us today.
04:52 - He wanted to create a
system that anyone could use
04:56 - and I'd say he succeeded.
04:57 - I mean, my grandfather
had an email address.
05:00 - Now, one of the reasons that
you might not have heard
05:02 - of this 14-year-old before
is because of some drama.
05:07 - There's so conflicting opinion on
05:08 - what an email actually means.
05:10 - Let's go back a little bit before 1978
05:12 - when this program was conceived,
05:14 - remember this was before the home
05:16 - computer was readily available.
05:18 - So many programmers spent
their time using a mainframe.
05:21 - Think of it kind of like
the cloud, a shared computer
05:24 - that somewhere else
would execute your code.
05:27 - It became necessary to
communicate with other users
05:29 - of the system, so there was a bit
05:31 - of a super early instant
messaging going on.
05:34 - They send a message,
05:36 - - Hey there dude, I need
05:38 - to get some cycles on the
the mainframe, you dig.
05:41 - - And the other programmer
would respond with, go for it.
05:44 - I just wrapped up check
you on the flip side.
05:46 - I'm not sure how they spoke,
but I'd imagine it was
05:48 - something like this
without emojis or anything.
05:51 - Those messages worked great,
05:52 - but they only functioned while
both parties were online,
05:56 - so a way to capture messages into a place
05:59 - that the party could pick up later
06:00 - when they logged in was created.
06:02 - Arpanet is known as the predecessor
06:05 - to the internet that we all know and love.
06:07 - It consisted of a series of machines
06:09 - that were connected
together through a network.
06:12 - A software developer named
Ray Tomlinson created a way
06:14 - to send a message to
other connected computers.
06:17 - He called it SNDMSG or send message if
06:19 - you put the missing letters back in.
06:22 - The way he did this was
by using the at sign
06:24 - to separate the user from the computer.
06:27 - Tomlinson is often noted as
the grandfather of the email
06:31 - because of this cross
computer messaging system
06:34 - and very specifically for
making use of that at sign,
06:38 - what was that symbol even used for before?
06:40 - Who knows?
06:42 - Here's where the drama comes in.
06:44 - Now, oftentimes Tomlinson is credited
06:46 - as the creator even though
06:48 - as we heard the 14-year-old Shiva created
06:51 - and patented the concept
06:52 - and as we can see added more
06:55 - of the familiar interoffice
parallels to our email world
06:58 - as we know it now, Shiva and
Ray have had a lifelong beef
07:02 - and I'll put more in the
notes for those of you
07:03 - who are into that sort of thing.
07:05 - I can think of one fantastic
way of saying this.
07:09 - - I think that my new
husband, Dr. Shiva Ayyadora
07:12 - the inventor of email.
07:15 - - That was television's own Fran Drescher.
07:19 - She was married to Shiva for a little bit
07:21 - and she definitely
convinced me the popularity
07:24 - and rapid adoption
07:25 - of the email esque application
on Arpanet is argued
07:29 - to have laid the path for
the creation of the internet.
07:32 - What it definitely did was
start another beef one that is
07:36 - so big it has its own
Wikipedia page called.
07:39 - - [Announcer] The Protocol Wars.
07:42 - - And while fascinating as well.
07:44 - I'll leave that to you to
dig into on your own time.
07:48 - Let's take a look at the winners of
07:50 - that war here in just a bit.
07:52 - As we know that at sign
was super important,
07:55 - it's almost like a rite of
passage to using the internet
07:58 - and I'm sure we can all remember
our first email address.
08:00 - Mine was very ominous
sounding, Craig2000@aol.com.
08:05 - What was yours?
08:06 - Let me know in the comments.
08:08 - Let's take a quick break and
let all that history seep in,
08:11 - but when we come back,
let's take a look at how
08:14 - that important at sign works
today in the modern internet.
08:18 - (bright music)
08:37 - An email address contains two parts.
08:39 - On the left side of that infamous
at symbol is the username
08:43 - and on the right side is the domain name.
08:45 - Now, the way the email finds
its way to you is by making use
08:49 - of that domain name portion.
08:51 - The way it's able to do that is with DNS
08:53 - or domain name system.
08:56 - Servers that are on the
internet have an IP address.
08:59 - IP stands for internet protocol.
09:01 - Now, we'll dive into
protocols here in a bit.
09:03 - An IP address traditionally
is four numbers between one
09:06 - and 255 separated by periods.
09:10 - The web browser uses DNS
to find the web server
09:13 - that hosts the webpage that
you're attempting to view.
09:15 - That URL contains the domain name
09:17 - of the place that you're looking at.
09:19 - A common analogy that's
used to explain this
09:22 - is a little dated for
years we've been teaching.
09:25 - It's like, you know,
it's like the phone book.
09:27 - You know you look up the name
09:28 - and then you get the phone number,
09:30 - but when was the last time you ever
09:32 - even used the phone book?
09:34 - Let's try this one on for size.
09:36 - You can search for a restaurant
in your maps application
09:39 - and it returns the latitude
09:41 - and longitude for you as well
as turn by turn directions.
09:44 - It translates the name of
the place that you're looking
09:46 - for into map coordinates.
09:49 - DNS does a similar sort of thing.
09:51 - It uses the domain name
to look up the IP address
09:54 - of the server you're requesting.
09:56 - The way this works is that the owners
09:58 - of a domain must create DNS records
10:01 - that associate their domain name
10:03 - with the server's IP addresses,
and I say servers here
10:06 - because there can be multiple
10:08 - and we've been talking about web servers,
10:11 - but there's also email
servers, so what happens is
10:15 - that the domain owners add
what is known as an MX record,
10:19 - a mail exchange record or records.
10:21 - Actually, you can have multiple MX records
10:24 - and you can prioritize them
so that they get checked
10:26 - for the user in order.
10:28 - Now, a thing to remember is
10:30 - that these early days,
websites were not full-blown
10:33 - applications like we have these days.
10:35 - These sites were just kind of
like informational billboards.
10:39 - They were definitely a far
way away from the concept
10:42 - of a web-based email program like Gmail.
10:45 - Now, what these early
email adopters were using
10:48 - were called email clients.
10:50 - They were actual applications
that ran on your computer
10:52 - and they're still around today.
10:54 - What you, the user of the
email client would do was
10:57 - to configure your domain and
then you could use it to send
11:00 - and receive messages.
11:02 - In early cases, messages were
downloaded to your computer
11:06 - and stored there locally, which of course,
11:08 - caused problems later when
you got a new computer,
11:11 - but we weren't there yet.
11:12 - We were here.
11:13 - You've got mail.
11:15 - AOL would send an actual
CD ROM in the mail
11:18 - and you'd install it and
it included a mail client
11:21 - and we were so, so
excited about being able
11:24 - to communicate with each other.
11:26 - These clients would use the domain name
11:27 - to find the mail exchanger, but then what?
11:30 - Great question, and I'm
glad you asked, it's time
11:33 - that we dive a little bit into the winners
11:35 - of the Protocol Wars.
11:37 - A protocol is a set of agreed upon rules
11:41 - and they aren't just
limited to technology.
11:43 - We have them in real life too.
11:45 - For instance, if we are meeting each other
11:47 - for the first time and I stick
out my hand, the protocol
11:50 - that us humans have established is
11:52 - that you would put your hand in mine
11:55 - and we would make a tight squeeze
11:57 - and we would move it up and down, right?
11:59 - A handshake.
12:00 - It's kind of weird when
you think about it,
12:01 - but a protocol nonetheless.
12:03 - Now, it'd be really strange
if I put my hand out for you
12:07 - to shake it and then you
did the chicken dance.
12:09 - I mean, I'd probably
appreciate you doing that,
12:12 - but you'll for sure be
breaking, breaking the protocol
12:14 - that we have unspoken set up.
12:16 - Here, let's do another one.
12:18 - How about the way
12:19 - that we send actual mail
like through the post office?
12:22 - Now, the protocol as I
understand it is this.
12:26 - I put the contents in an envelope
12:28 - and on that envelope I
write your name and address
12:32 - and I also put my return
contact info in the corner.
12:36 - I put a stamp, I drop this in the mailbox
12:39 - and some post office hero
comes and picks it up.
12:42 - It finds its way to you.
12:43 - You get it and you're like,
oh, hey, this is for me
12:46 - and oh look, it's from Craig.
12:48 - I wonder what it is.
12:50 - We just successfully ran a real life
12:53 - mail protocol, snail mail,
12:55 - though it's not what
we're here to talk about.
12:57 - What we're here to talk about is the
12:58 - electronic version of that.
13:01 - How did we possibly
enable everyone to be able
13:03 - to start sending emails?
13:05 - Any guesses?
13:08 - If you guessed a well-defined
protocol, you got it.
13:11 - As the internet that we know
13:12 - and love was being conceived,
it became clear that in order
13:15 - to make it open and
extensible, it was going
13:18 - to need some standards
13:20 - and the way that these
standards came into being was
13:22 - by some pretty clever group brainstorming,
13:25 - a memorandum called an RFC
13:28 - or a request for comment was created
13:31 - and that had a proposal
13:33 - and it was discussed by a group
13:34 - of people interested in building a stable
13:37 - and secure internet.
13:38 - This group that I'm talking
about specifically here
13:41 - is the IETF, the Internet
Engineering Task Force,
13:45 - which I think sounds like
a group of superheroes
13:49 - and I guess in reality, they truly are.
13:51 - I know I owe my career
13:53 - and most of my knowledge
13:55 - to their early enablement of these ideas.
13:58 - There are multiple of
these superhero groups,
14:00 - the internet cinematic
universe, if you will,
14:03 - that weigh in on these RFCs and
14:05 - after they're approved, they become known
14:07 - as internet standards.
14:09 - Now, this RFC process brought us some
14:12 - of the greatest hits, we're
hanging out in one right now.
14:14 - Check out your browser's address bar.
14:16 - The address starts with HTTP.
14:19 - That's hypertext transfer protocol
14:21 - and it was introduced as an RFC
14:24 - and it became an internet standard,
14:27 - and these are pretty detailed
14:28 - and I find them quite fascinating.
14:30 - I love learning this history,
14:32 - but I know that's not why you're here.
14:34 - Check the notes if I just nerd sniped you,
14:36 - so the internet standard that I'd love
14:39 - to dive into here is an
early hit, number 10, the one
14:42 - that enabled us to send email.
14:44 - SMTP or Simple Mail Transfer Protocol.
14:48 - You might not agree that
it is exactly simple,
14:51 - but it is the defacto way to
get your mail transferred.
14:55 - Now, conceptually, you have
a sender and a receiver.
14:58 - They introduce themselves
15:00 - and do a handshake, oh hey, just like us.
15:04 - It's a plain text protocol,
which means you can kind
15:06 - of read it with a little more information
15:08 - that there's a set of SMTP commands
15:11 - and status codes that could
come back in response.
15:14 - They help you build the envelope
15:16 - and explain what it is that you're trying
15:18 - to send and to whom.
15:20 - If you're feeling brave, you
can actually make use of this
15:23 - through a tool like Telnet,
which will allow you
15:25 - to communicate with a remote server.
15:28 - SMTP is the internet standard
used on the sending side,
15:32 - but there are also protocols
that allow mail clients
15:35 - to retrieve the email from
their mail server, POP,
15:39 - or post office protocol
often now called POP 3,
15:43 - which is the current version,
helps you as a reader
15:46 - of the email receive a copy
15:48 - of it from your server side mailbox.
15:51 - These days, it's hard to imagine,
15:53 - but there was actually a
time when we weren't always
15:56 - able to be online.
15:57 - Now, this protocol enables you
15:59 - to download messages from your mail
16:01 - server to your local mailbox.
16:04 - You wanted this so that you could deal
16:06 - with them when you were offline.
16:07 - Now, original attempts here
16:09 - actually remove the message
from the mail server
16:11 - after it was downloaded
16:12 - to the user's client site application.
16:15 - Nowadays, this can cause some issues
16:17 - because we access our
email from multiple devices
16:20 - and things can get outta
sync, which leads us to IMAP
16:24 - or the internet message access protocol.
16:27 - This allows for better synchronization
16:29 - and internal messaging,
16:31 - and while you probably aren't here
16:32 - to learn about the
receiving side of things,
16:35 - you will see both POP and IMAP
quite a bit in this space.
16:39 - Now, I don't want you to
feel like you need to be able
16:41 - to explain how these work
without looking 'em up,
16:43 - but I do want you to recognize
them when you see them.
16:47 - You'll encounter these in documentation
16:48 - and now you should have a basic
16:50 - understanding of what they are.
16:52 - Remember, if you ever want
a refresher, check the notes
16:55 - for more info.
16:56 - So now we have all these
wonderful programs.
17:00 - Anyone who implements the SMTP
protocol can send a message.
17:04 - You can actually even do this
dance from the command line on
17:07 - your computer or directly from code,
17:10 - and then of course the reason
we can't have nice things,
17:15 - the bad actors showed up.
17:16 - You guessed it.
17:17 - It's time to talk about
spamming and spoofing.
17:23 - Earlier when I asked you
17:24 - to drop your first email
address into the comments,
17:27 - I bet you had a weird
feeling about doing that.
17:29 - Something along the lines
of, if I put this in here,
17:31 - I'm pretty sure I'm gonna get
17:32 - so many emails that I don't want.
17:34 - Now, as you know, we call
those emails the ones
17:37 - that you don't want, spam.
17:39 - Why would we do this?
17:40 - Who wouldn't want this
delicious stuff, right?
17:48 - Even though this feels like some sort
17:50 - of advanced prop dad joke, the
term that we use for emails
17:53 - that we don't want is actually
rooted in this meat in a can.
17:58 - Well, sort of.
18:00 - The British comedy troupe Monty Python
18:02 - had a bunch of famous sketches
18:04 - and one of their most absurd
involves a person attempting
18:08 - to order a meal and they noticed
18:10 - that everything on the
menu had spam in it,
18:11 - and that person asks.
18:14 - - Have got anything without spam in it?
18:16 - Well, a spam egg, sausage
18:18 - and spam, it's not got much spam in it.
18:19 - - And asks.
- Why can't you have egg,
18:21 - bacon and spam and sausage?
18:23 - - That's got spam in it.
18:24 - - It's not as much as
spam egg sausage and spam.
18:27 - - Look, could I have egg, bacon, spam
18:30 - and sausage without the spam?
18:33 - - Because everything has spam,
18:34 - spam and more spam.
18:36 - Eventually, Vikings show
up and chaos ensues.
18:42 - And chaos did ensue on
the email front too.
18:46 - Spam was everywhere.
18:47 - Those well-defined
protocols worked really,
18:49 - really well at connecting people
18:51 - and bad actors as we
call them now, saw this
18:55 - as an opportunity to communicate
what they were selling
18:58 - and our inboxes were just
bombarded with offers
19:01 - for quite literally everything.
19:03 - There were email lists that were for sale
19:05 - and oh boy, if you got
on one of those lists,
19:08 - you got so much spam.
19:11 - Those lists are still for sale
by the way, don't buy them.
19:13 - It might sound like a good idea,
19:14 - but it is a very, very bad idea,
19:17 - but in the beginning,
it's important to remember
19:20 - that there were no real standards
19:22 - or even etiquette at the time,
19:23 - so everyone was probably a little guilty
19:25 - of over sending messages that
receivers didn't really want.
19:29 - There were all sorts of lawsuits,
19:31 - people actually got arrested.
19:32 - Check the notes for more.
19:33 - There's so much drama, right?
19:35 - Finally in 2003, the FTC got involved
19:39 - and get this, the act is
called Controlling the Assault
19:43 - of Non-Solicited Pornography and Marketing
19:46 - or CAN SPAM for short.
19:48 - I see what you did there FTC.
19:51 - Now this act applies
19:52 - to all commercial email
messages, not just bulk ones.
19:55 - The non-compliant penalties
can be pretty hefty,
19:58 - up to $50,000.
20:01 - These introduced some rules
that are pretty straightforward
20:03 - and really made a difference in the amount
20:05 - of spam that we were fighting.
20:06 - Let's talk through them really quick.
20:08 - Don't use false or misleading
header information.
20:11 - Now all of the information on
your email envelope must be
20:14 - accurate and identify the person
or business as the sender.
20:18 - Don't use deceptive subject lines.
20:19 - Be careful with the click bait.
20:21 - You have to make sure that
your messages is about
20:24 - what the subject claims.
20:27 - Identify the message as an ad.
20:29 - You need to let people know
that you're sending an ad.
20:31 - There are best practices here
and there's more in the notes.
20:34 - Tell recipients where you're located.
20:36 - You have to provide a
valid street address.
20:39 - Tell recipients how
20:40 - to opt out a receiving future
marketing email from you.
20:43 - You have to let your users tell you
20:45 - that they don't want any more messages
20:46 - like the one that you just sent.
20:48 - You need to do this, again,
best practices are in the notes.
20:50 - Remember that subscribers
and members can opt out
20:53 - of marketing emails too.
20:55 - If you have an app that
makes use of subscriptions
20:57 - and memberships, you
have to also make sure
21:01 - that they can opt out.
21:01 - Now, this one can be a little tricky,
21:04 - but don't forget to let
them not receive the emails.
21:07 - And honor opt-out request promptly.
21:09 - This can get a little tricky too.
21:11 - If you offer opt-out,
21:12 - it has to work for at least 30 days
21:14 - and you have to honor it
within a minimum of 10 days.
21:19 - Monitor what others are
doing on your behalf.
21:21 - The law makes clear that even
if you hire another company
21:24 - to handle your email marketing,
21:26 - you can't contract away
your legal responsibility
21:28 - to comply with the law.
21:30 - The CAN SPAM Act made a huge
dent in the emails being sent,
21:34 - but spam still maintained
a very impressive sometimes
21:38 - upwards of 70% of all email traffic.
21:41 - Now, luckily for those of
us with email addresses,
21:43 - the spam percentage is
constantly dropping.
21:45 - Our email providers are making it harder
21:48 - and harder for the bad actors
to get those bad emails
21:51 - to land in your inbox.
21:53 - Can you do me a favor?
21:54 - I want you to go and
look at your spam folder.
21:57 - Just take a quick look in there.
21:58 - Go ahead and pause me and then
21:59 - take a peek and then come back to me.
22:05 - Pretty gross right?
22:06 - Now however, did you see in there
22:08 - there's probably some messages
22:10 - that were incorrectly marked spam.
22:13 - Providers have done
the best that they can,
22:14 - but sometimes wanted messages
actually end up in there.
22:19 - As someone who is considering
getting email running
22:21 - for your application, you don't
want this to happen to you.
22:25 - Well talk through some best
practices through the rest
22:27 - of this course of how to get
your message into the inbox
22:30 - and out of the spam folder.
22:32 - This is called deliverability
and it is truly an art form.
22:37 - Now, one of the first
points in the CAN SPAM Act
22:39 - talks about not faking the sender.
22:41 - Unfortunately, SMTP doesn't
provide authentication,
22:44 - so it's relatively easy to
pretend to be someone else.
22:48 - If we flip back to our snail mail example,
22:51 - I can swap out my return
address to whatever I want
22:54 - and maybe that'd make you wanna open it.
22:56 - Well, I could do the same
thing with my email envelope.
23:00 - Pretending to be someone you
are not is called spoofing
23:03 - and it's a bummer.
23:04 - The good news is there
are ways of handling this
23:07 - and employing suggested
methods will greatly help you
23:10 - with your deliverability journey.
23:12 - Let's take a quick break
23:13 - and when we come back,
let's take a look at some
23:16 - of these authentication mechanisms.
23:24 - Mm.
23:26 - Mm.
23:27 - Mm.
23:28 - (peaceful music)
(water whooshing)
23:53 - As you can imagine, it's
important to the receivers
23:56 - of your emails that they can identify
23:58 - that the emails actually from you.
24:00 - As more and more spoofing
happened, technology was added
24:02 - to give you a little more power
in making this dream happen.
24:05 - For many years, these
techniques were known
24:07 - as a best practice.
24:09 - These days, however, they're basically
24:11 - slowly becoming required.
24:13 - Changes are happening in 2024
24:15 - that will make all senders start sending
24:17 - properly authenticated emails
to be considered trustworthy.
24:21 - The way this works is with surprise,
24:24 - a group of more acronyms.
24:25 - I apologize.
24:26 - I know that there's a lot in this space.
24:28 - Now, I want you to approach
these the same way.
24:30 - I don't want you to feel like you have
24:32 - to understand them completely,
24:34 - but it will certainly benefit you
24:36 - to be able to recognize them.
24:37 - You'll find these acronyms
and blogs and dropdown menus
24:41 - and function parameters
often without any explanation
24:44 - whatsoever, and yes, I realize
24:46 - that the more pedantically
focused learners may say
24:50 - that these are actually
initialisms and non acronyms,
24:52 - but I say any initialism
can be an acronym.
24:55 - If you try hard enough.
24:56 - SPF or SPF stands for
Sender Policy Framework.
25:01 - It can be set up by
adding an additional DNS
25:04 - record for your mail server.
25:05 - This specifies who can send messages down
25:08 - to a specific IP address.
25:10 - This makes it way more
challenging for spoofers to try
25:13 - and manipulate your envelope.
25:15 - DKIM or Domain Keys Identified
Mail is similar to SPF.
25:19 - You publish your public
key as a DNS record,
25:21 - but DKIM adds an additional layer.
25:23 - You sign each and every message.
25:26 - The receiver can use the
signature to validate
25:29 - that the message has
not been tampered with.
25:31 - Most mail clients provide a way for you
25:33 - to see the original
message as it was sent.
25:35 - For instance, in Gmail, I can
open up the additional menu
25:39 - and choose show original.
25:40 - Here you can see if the SPF check passed
25:43 - and also what happened with the DKIM
25:45 - and if you want to dig,
you can peep at all
25:48 - the headers that came across.
25:50 - DMARC or domain based message
authentication reporting
25:54 - and conformance came on the scene in 2015
25:58 - and it moves to further
take on spoofing issues.
26:01 - It extends both SPF
26:02 - and DKIM to allow the
receiving email server
26:05 - to authenticate the incoming message.
26:08 - A DNS DMARC record is added
26:11 - and in it it defines how you would like
26:13 - to handle any message that
didn't meet the specification.
26:16 - It can also specify how
strict things need to be.
26:20 - Email domain owners can
get a daily report of
26:23 - what messages failed to pass.
26:25 - More in the notes on DMARC,
again coming very soon,
26:29 - everyone will need to adhere
to these to be able to send
26:33 - to Gmail and Yahoo.
26:34 - Now, the advice is that
every other provider is going
26:37 - to follow their lead, so make
sure that you check the notes
26:40 - for how to embrace these email
authentication protocols.
26:44 - You are now armed with
the foundational knowledge
26:47 - that you need to start sending emails.
26:49 - There is a lot
26:50 - that goes into making your
email adventure successful,
26:53 - and I'm so glad that you've
dipped your toes in its history,
26:55 - the terminology and the challenges.
26:59 - You have a pretty firm handle
now on the what and the why.
27:02 - In the remainder of this course,
27:03 - we are gonna focus on the how.
27:05 - Now, remember this how
includes both science and art.
27:09 - We are gonna focus a
little bit heavier now
27:12 - on the science portion,
but keep at the top
27:15 - of your mind as we talk through things.
27:17 - I want you to have excellent
email deliverability.
27:21 - I want you hanging out in the inbox
27:23 - and avoiding the spam folder.
27:25 - Otherwise, what's it all for?
27:27 - There's a best practice surrounding email
27:29 - deliverability that I love.
27:31 - Always ask yourself this, am
I sending the right message
27:35 - to the right person at the right time
27:38 - with the right frequency?
27:40 - Now, this question applies both
to the transactional emails
27:43 - that you send as well as
the marketing messages
27:45 - that you might be considering.
27:47 - You are essentially building a reputation
27:50 - and you wanna make sure
that you make a great first
27:53 - and long lasting
impression with your users
27:56 - and the email providers.
27:58 - All right, let's check out some code.
28:01 - I've got great news for
you. You are not alone.
28:04 - As is the case in most things
28:06 - that you'll find along
your coding journey.
28:08 - Someone has been here before
28:10 - and if you're lucky, they've already
28:12 - written most of the code for you.
28:13 - Email is pretty awesome for this actually,
28:15 - there's so much email code
written for you already
28:18 - that it's almost hard to choose.
28:20 - These packaged up code bundles
28:22 - are typically called libraries.
28:24 - Someone has already taken the time
28:26 - to follow those email
protocols that we talked about
28:29 - and it's been all abstracted away for you.
28:32 - Python embraces a batteries
included approach,
28:35 - which means there's a
module included for email.
28:38 - You'll see here that you
can create an email message
28:40 - and then send it using
the SMTP live module.
28:44 - Good thing you've heard about the simple
28:46 - mail transfer protocol, right?
28:48 - One thing to point out here is
28:49 - that you can also use an SMTP command
28:53 - to encrypt your emails.
28:54 - It's called start TLS or startles
28:57 - if you're feeling cute, I've
dropped the information in the
29:00 - notes about how to use TLS.
29:03 - If you don't have access
to an SMTP server,
29:05 - check out the notes for some ideas on how
29:07 - to get your hands on some.
29:09 - Thanks to those well-defined
internet standards,
29:11 - you can pretty much guarantee
29:13 - that every programming language is going
29:16 - to have something similar.
29:17 - Check the notes for some guidance on how
29:19 - to find examples in your language.
29:22 - It'll probably help you to imagine
29:24 - how you might end up using
this in your day-to-day
29:26 - coding journey, most applications
29:28 - that have users authenticate
have some pretty
29:31 - common workflows.
29:32 - For example, there's almost always a flow
29:34 - to handle when a user
forgets their password.
29:37 - Typically, what you do here is
ask the user for their email.
29:40 - You check that it exists in your system,
29:42 - and if it does, you send an email
29:45 - with a password reset link.
29:47 - You can imagine how you
might do that right?
29:49 - In your controller, you check
the submitted email address
29:52 - to verify and then you'd
craft an email message
29:55 - and send it using your library.
29:58 - It's pretty critical
29:59 - that this specific email
makes it to your user quickly.
30:02 - You don't want this email to
end up in the spam folder.
30:05 - They'll be expecting it,
30:06 - and if they don't get it,
they're probably going
30:09 - to quickly give up on whatever
it was that they were trying
30:12 - to accomplish in your application,
30:14 - and we don't even really need
30:15 - to imagine the overarching business
30:18 - not having users being able
to log into your system
30:20 - is well, bad for business.
30:24 - While this inline solution will work,
30:26 - it's probably a good
idea to get involved with
30:28 - how your marketing messages
are being sent out.
30:31 - The IP address that you send messages from
30:33 - has its own reputation.
30:35 - A best practice worth exploring
is to keep the senders
30:39 - that you use for transactional messaging
30:41 - separate from your marketing senders.
30:44 - It's also not a great idea
to just start sending a bunch
30:47 - of emails all at once as
30:48 - that could introduce some suspicion.
30:51 - It's best to take some time
and build up your reputation
30:53 - before sending bulk messages.
30:55 - This is called IP warmup.
30:58 - Remember that the email
providers are doing their best
31:01 - to stop spam before it
reaches their customers.
31:04 - You need to make sure that they trust you.
31:07 - There is a lot that goes into
this email deliverability
31:11 - and there are entire companies
who make it their business
31:14 - to make this happen for you.
31:16 - Let's take a quick break
31:17 - and then let's take a look
at some email API services.
31:21 - (peaceful music)
31:34 - Application programming interfaces
31:35 - or APIs provide the
applications that you build
31:39 - with new functionality.
31:40 - They abstract away complexity
31:42 - and give you a straightforward way
31:44 - to achieve the impossible.
31:46 - Now, if APIs are new to
you, check the notes.
31:48 - I have a whole course on them
specifically for beginners.
31:51 - Sometimes a challenge is so big
that an entire company forms
31:56 - around the problem and it provides an API
31:59 - to help us developers
solve those problems.
32:02 - Email is one of those
challenging problems.
32:04 - Not only is the landscape
complex, but it's ever evolving.
32:08 - You definitely will benefit
from having an entire team
32:11 - of people focus on your solution.
32:13 - There are multiple email APIs
32:15 - and each one of them have their
32:17 - own strengths and weaknesses.
32:19 - One of my favorite ways
to find new products is
32:21 - to use GitHub Awesome lists.
32:24 - There are tons of lists
of solutions out there
32:27 - and folks maintain those lists.
32:29 - So here's the one for emails.
32:31 - Now, traditionally, when
presented with these options,
32:34 - I've always chosen syngrid
when my current employer Twilio
32:38 - and Syngrid merged, it
was a pleasant surprise
32:40 - and I'm so stoked that
we have an email channel
32:43 - for all of our applications.
32:45 - My appreciation for the
work they do has only gotten
32:47 - stronger, but everyone's
needs are different,
32:51 - so please don't just take my
word for it, peruse around
32:53 - and see what resonates well with you.
32:55 - There's something for everyone.
32:57 - It might turn out that you don't even want
33:00 - to choose an email API,
33:01 - and you wanna roll your
own code like we just saw.
33:04 - I do recommend taking the
time to familiarize yourself
33:06 - with the offerings that
are available to you.
33:08 - They can inspire you with ideas
33:10 - that you might not have
come up with before.
33:13 - And remember, API companies
always get better.
33:17 - There are teams of people making sure
33:19 - that you get the most up-to-date security,
33:21 - and they assist you in following
33:23 - the ever-changing best
practices, all those acronyms
33:27 - and new protocols that might crop up,
33:29 - they've got their eyes on them.
33:30 - There will be reporting and monitoring.
33:32 - You can pretty much guarantee
that due to the beauty
33:35 - of competition, the
service is going to try
33:38 - and be the best, so you're always going
33:40 - to be getting new features.
33:42 - Now, most likely, they'll
guide you through how
33:44 - to do the more detailed DNS things.
33:46 - I don't know about you, but DNS
record manipulation for some
33:50 - of the bigger companies that I've worked
33:51 - for is not something that
I've been allowed to touch.
33:54 - They don't want me in
there and I totally get it.
33:56 - No offense.
33:58 - Some of these email APIs
prepare the requests
34:01 - that you need to make and email them
34:03 - to your system administrator.
34:04 - I can't tell you how much
I appreciate this feature.
34:08 - Good email APIs will provide ways for you
34:10 - to separate your transactional
and marketing messages
34:13 - and guide you there as a best practice.
34:16 - While you now know that's
why that's important,
34:19 - it might not have been clear
to those just getting started.
34:22 - Some companies even have
deliverability experts
34:25 - that will work with you if you're having
34:27 - trouble deciding on which to choose.
34:29 - Check out their blogs.
34:30 - Are they publishing the information
34:32 - that will help you in the
art portion of emails?
34:34 - Do they have the science in
place to meet your needs?
34:38 - A feature that you'll want to take
34:39 - a close look at is templating.
34:40 - We haven't really chatted about this yet,
34:43 - but you can use HTML
in your email messages.
34:45 - This really helps with design,
34:48 - but producing an email that looks good
34:50 - and works on all those
clients, it's really tricky.
34:54 - The HTML that you can use is limited
34:56 - and it has a lot of gotchas,
34:58 - especially in those
client side applications.
35:01 - Now, a good email API will
offer you a way to edit
35:03 - and create beautiful emails.
35:06 - Most of these providers
allow for some sort of way
35:08 - to maintain a list of your contacts.
35:10 - Remember, the more engaged
your contacts get, the better.
35:14 - Keeping well-maintained
contact lists really
35:16 - helps to ensure this.
35:18 - Also, you'll probably want
to have some help dealing
35:21 - with unsubscribes.
35:22 - Remember those rules of the CAN SPAM.
35:25 - A good email API will help
you adhere to those rules
35:28 - and help you stop from making mistakes.
35:31 - It's in the company's best interest
35:32 - and yours to keep your reputation healthy.
35:36 - They want you to be able to scale
35:38 - to send millions of emails.
35:40 - Let them help you.
35:41 - One of my favorite
35:43 - analogies about using an API is to think
35:45 - of it about like a package delivery system
35:48 - like FedEx or UPS.
35:49 - You could of course get in
your car with your package
35:53 - and drive over to deliver it in person,
35:56 - and if the person doesn't
answer the doorbell,
35:58 - you probably don't wanna
just leave it there.
36:00 - Maybe you'll come back
later or give them a call.
36:03 - Maybe they want you to deliver
it to their office actually.
36:06 - Now, eventually you're
gonna get the package there,
36:08 - but probably not something
you wanna do all the time.
36:10 - I mean, especially if you
have lots of packages,
36:13 - you probably wanna use something
36:15 - more like a package delivery
service like a UPS or a FedEx.
36:18 - You know that they're the experts
36:20 - and they have ways of getting your package
36:22 - there no matter what.
36:24 - They have worked through the
workflows and are reliable.
36:27 - In fact, they'll even send status updates
36:29 - as your package is en
route to that destination.
36:32 - Oh, if you don't mind me
popping outta that analogy,
36:35 - let's talk about how rich
the events that happen are
36:38 - when you send an email.
36:41 - When an email gets sent,
36:42 - there is information that is
most likely made available
36:46 - to you via your email API of choice.
36:49 - Now, a common approach to
this is to use webhooks.
36:52 - Webhooks are like a reverse API.
36:54 - Instead of you calling the API.
36:55 - The API calls you when the event occurs.
36:58 - Now you write code that handles it.
37:00 - Email has so many great
events that you can use
37:03 - to improve your deliverability
and your engagement.
37:07 - You'll see here these delivery
events like process, dropped,
37:11 - delivered, deferred and bounced.
37:12 - They're super handy in
building reporting tools.
37:15 - You also have super
powerful engagement events
37:17 - like open and click.
37:19 - This information here shows who they are
37:22 - and even what they clicked.
37:24 - Now, this can be super
helpful if you're trying
37:26 - to attract a certain audience.
37:28 - There's all sorts of excellent information
37:30 - that you can process and if
your service provides it,
37:34 - you can actually see when
people report your email as spam
37:37 - or if they choose to unsubscribe.
37:39 - Now, most likely, your
service provides a way
37:41 - to manage this, but these
can be additionally helpful.
37:45 - I love seeing what people
build with these events.
37:48 - It really helps you to build healthy
37:50 - and reputable email campaigns.
37:52 - Now, take a moment and think about
37:54 - how this might benefit you
in whatever brought you
37:57 - to this course in the first place.
37:59 - Would it be helpful to track your
38:00 - transactional message delivery?
38:03 - What about if you're thinking about
38:04 - sending marketing emails?
38:05 - Wouldn't it be awesome to be able
38:07 - to track which message
is landing the best?
38:11 - You could test out all sorts of things.
38:12 - You could probably use this
data to answer the question,
38:15 - am I sending the right message
38:17 - to the right person at the right time
38:20 - with the right frequency?
38:22 - Now, while I got your brain activated,
38:24 - let's take things one step further.
38:28 - So not only can you write
code to handle the events
38:31 - that happen when you send a message, some
38:33 - of these email APIs
actually let you process
38:36 - incoming messages.
38:37 - I've seen some super cool
stuff built with this idea.
38:40 - One of my favorite implementations
that I can think of
38:43 - of all time is Expensify.
38:45 - I can email a photo of a
receipt into Expensify.
38:49 - It receives my message,
processes the photo using OCR
38:53 - or Optical Character Resolution,
38:56 - and because it knows who I
am from my email address,
38:59 - it can create an expense report
in a draft state filled out
39:03 - with my expense item.
39:04 - They send me back a message
with a link to the report.
39:07 - It's beautiful.
39:09 - I think with the approachability
of AI these days,
39:12 - we are going to see more
39:13 - and more of these inbound
email-based applications.
39:16 - Now, I know it's outta
the scope of this course,
39:18 - but I just wanted to share
my enthusiasm for it.
39:20 - Check the notes for more
information on this concept.
39:24 - You did it.
39:25 - You made it to the end of the course.
39:26 - I hope you had a fun time and
learned a lot about the art
39:29 - and science necessary to
make email work for you.
39:32 - This is a journey
39:34 - and I can tell you already
you're off to a great start.
39:37 - Please keep me posted on your progress.
39:39 - I take your feedback very seriously
39:42 - and I'd love to hear from you.
39:43 - Please check the notes for
how to get in touch with me.
39:46 - Thanks so much for hanging out,
and we'll see you real soon.
39:50 - (upbeat music begins)
40:09 - (upbeat music continues)
40:24 - (upbeat music ends)

Cleaned transcript:

If you want to add email functionality to your application, this is the course. Craig Dennis has created some of our most popular courses and he's back to teach this course. He's going to start all the way back at the invention of email and by the end you will know how to make your app send emails using multiple programming languages and libraries. (bright music) Hey there. I'm Craig and I'm a developer. I'm assuming that you're here because you want to add or you've been asked to add email functionality to an application that you're working on. This is one of those things where you're like, of course, adding email functionality makes a ton of sense. Oh wait, how do I do that? Maybe you got asked to send a confirmation email when someone buys something on your site. This is called transactional email, or maybe you're trying to personalize your marketing emails with actual user data from the database. Email provides the ability to track how receivers interact with your message, which opens up a very powerful analytics solution that you can use to help guide your business. Now, any way you look at it, email is an important part of the applications that we build, so understanding how it works as well as what its limitations are will greatly help you throughout your career. Everyone uses email. Email's one of those things that we developers often take for granted and as you're about to see, there is a lot that goes into making it work properly. In fact, a popular saying is this, sending email successfully is more art than science. In this course, we're gonna take a deep dive into email. We'll take a look at both the art and the science. Now I'm gonna do my best to make this course fun and interesting. Now, I'll start off by showing a little bit of its history. I think the only way to truly understand its current state is to take a quick stroll through its evolution as a technology. There's also quite a bit of drama in the past, so if you're into that sort of thing, it's gonna get a little juicy. The email world comes with a smattering of acronyms. Now, you and I both know that those letters can make you feel overwhelmed AF, my kids use that. I think it stands for absolutely frustrating and well, I don't like feeling overwhelmed and y'all don't either, right? Where'd everybody go? I guess that return to office email ended up in the spam folder. This course isn't going to be very code heavy. I'll show you some code examples and I'll point you where to learn more about what you find particularly interesting. We'll also take a look at some suggested approaches and peruse our way through some email APIs. I'll also explain what that means if that's new to you. Throughout this course, I'm going to refer to the notes, they're attached to this video and I will point you in that direction when there's more to learn. I'd love for you to get in the habit of checking things out there. I'll document in there anything that's different from my right now to your right now. Basically, it's gonna be a pretty great resource for you during and after this course. Sound good? Okay, so to kick things off, I'd like for you to try and imagine a time before email even existed, Like all great inventions. It's hard to imagine a time before that invention was created, like how did we even survive without it? Email is definitely one of those, right? I mean, how did we communicate before that? Did we just call each other? Well, it turns out, yeah, we did do that quite a bit. There were lots and lots of phone calls. In the office world, there was this concept called interoffice mail and you would send physical documents in large envelopes to specific coworkers in the office. There was a whole mail room and a delivery system and they would manually deliver these documents to employees inboxes, which were actually physical boxes that you put mail in, inbox. Oftentimes, your job as an employee was to sign off on the document that you received and then forward it on along to the next person. Some documents even required signatures and if you needed to keep a copy, there was a technology called carbon copy where you would write through the page and it would appear on the attached page. Of course, that carbon copy initials are CC, pretty cool, right? So you can imagine that's what happened. Someone took this already working interoffice mail system and digitized it or made it more electronic. Electronic mail, if you will, email for short, there is actually a patent filed for the concept of email as we know it, and it was created by, are you ready for this? A 14yearold boy at MIT, his name was Shiva Ayyadurai and it's super impressive at how many concepts his project introduced that are still with us today. He wanted to create a system that anyone could use and I'd say he succeeded. I mean, my grandfather had an email address. Now, one of the reasons that you might not have heard of this 14yearold before is because of some drama. There's so conflicting opinion on what an email actually means. Let's go back a little bit before 1978 when this program was conceived, remember this was before the home computer was readily available. So many programmers spent their time using a mainframe. Think of it kind of like the cloud, a shared computer that somewhere else would execute your code. It became necessary to communicate with other users of the system, so there was a bit of a super early instant messaging going on. They send a message, Hey there dude, I need to get some cycles on the the mainframe, you dig. And the other programmer would respond with, go for it. I just wrapped up check you on the flip side. I'm not sure how they spoke, but I'd imagine it was something like this without emojis or anything. Those messages worked great, but they only functioned while both parties were online, so a way to capture messages into a place that the party could pick up later when they logged in was created. Arpanet is known as the predecessor to the internet that we all know and love. It consisted of a series of machines that were connected together through a network. A software developer named Ray Tomlinson created a way to send a message to other connected computers. He called it SNDMSG or send message if you put the missing letters back in. The way he did this was by using the at sign to separate the user from the computer. Tomlinson is often noted as the grandfather of the email because of this cross computer messaging system and very specifically for making use of that at sign, what was that symbol even used for before? Who knows? Here's where the drama comes in. Now, oftentimes Tomlinson is credited as the creator even though as we heard the 14yearold Shiva created and patented the concept and as we can see added more of the familiar interoffice parallels to our email world as we know it now, Shiva and Ray have had a lifelong beef and I'll put more in the notes for those of you who are into that sort of thing. I can think of one fantastic way of saying this. I think that my new husband, Dr. Shiva Ayyadora the inventor of email. That was television's own Fran Drescher. She was married to Shiva for a little bit and she definitely convinced me the popularity and rapid adoption of the email esque application on Arpanet is argued to have laid the path for the creation of the internet. What it definitely did was start another beef one that is so big it has its own Wikipedia page called. [Announcer] The Protocol Wars. And while fascinating as well. I'll leave that to you to dig into on your own time. Let's take a look at the winners of that war here in just a bit. As we know that at sign was super important, it's almost like a rite of passage to using the internet and I'm sure we can all remember our first email address. Mine was very ominous sounding, Craig2000@aol.com. What was yours? Let me know in the comments. Let's take a quick break and let all that history seep in, but when we come back, let's take a look at how that important at sign works today in the modern internet. (bright music) An email address contains two parts. On the left side of that infamous at symbol is the username and on the right side is the domain name. Now, the way the email finds its way to you is by making use of that domain name portion. The way it's able to do that is with DNS or domain name system. Servers that are on the internet have an IP address. IP stands for internet protocol. Now, we'll dive into protocols here in a bit. An IP address traditionally is four numbers between one and 255 separated by periods. The web browser uses DNS to find the web server that hosts the webpage that you're attempting to view. That URL contains the domain name of the place that you're looking at. A common analogy that's used to explain this is a little dated for years we've been teaching. It's like, you know, it's like the phone book. You know you look up the name and then you get the phone number, but when was the last time you ever even used the phone book? Let's try this one on for size. You can search for a restaurant in your maps application and it returns the latitude and longitude for you as well as turn by turn directions. It translates the name of the place that you're looking for into map coordinates. DNS does a similar sort of thing. It uses the domain name to look up the IP address of the server you're requesting. The way this works is that the owners of a domain must create DNS records that associate their domain name with the server's IP addresses, and I say servers here because there can be multiple and we've been talking about web servers, but there's also email servers, so what happens is that the domain owners add what is known as an MX record, a mail exchange record or records. Actually, you can have multiple MX records and you can prioritize them so that they get checked for the user in order. Now, a thing to remember is that these early days, websites were not fullblown applications like we have these days. These sites were just kind of like informational billboards. They were definitely a far way away from the concept of a webbased email program like Gmail. Now, what these early email adopters were using were called email clients. They were actual applications that ran on your computer and they're still around today. What you, the user of the email client would do was to configure your domain and then you could use it to send and receive messages. In early cases, messages were downloaded to your computer and stored there locally, which of course, caused problems later when you got a new computer, but we weren't there yet. We were here. You've got mail. AOL would send an actual CD ROM in the mail and you'd install it and it included a mail client and we were so, so excited about being able to communicate with each other. These clients would use the domain name to find the mail exchanger, but then what? Great question, and I'm glad you asked, it's time that we dive a little bit into the winners of the Protocol Wars. A protocol is a set of agreed upon rules and they aren't just limited to technology. We have them in real life too. For instance, if we are meeting each other for the first time and I stick out my hand, the protocol that us humans have established is that you would put your hand in mine and we would make a tight squeeze and we would move it up and down, right? A handshake. It's kind of weird when you think about it, but a protocol nonetheless. Now, it'd be really strange if I put my hand out for you to shake it and then you did the chicken dance. I mean, I'd probably appreciate you doing that, but you'll for sure be breaking, breaking the protocol that we have unspoken set up. Here, let's do another one. How about the way that we send actual mail like through the post office? Now, the protocol as I understand it is this. I put the contents in an envelope and on that envelope I write your name and address and I also put my return contact info in the corner. I put a stamp, I drop this in the mailbox and some post office hero comes and picks it up. It finds its way to you. You get it and you're like, oh, hey, this is for me and oh look, it's from Craig. I wonder what it is. We just successfully ran a real life mail protocol, snail mail, though it's not what we're here to talk about. What we're here to talk about is the electronic version of that. How did we possibly enable everyone to be able to start sending emails? Any guesses? If you guessed a welldefined protocol, you got it. As the internet that we know and love was being conceived, it became clear that in order to make it open and extensible, it was going to need some standards and the way that these standards came into being was by some pretty clever group brainstorming, a memorandum called an RFC or a request for comment was created and that had a proposal and it was discussed by a group of people interested in building a stable and secure internet. This group that I'm talking about specifically here is the IETF, the Internet Engineering Task Force, which I think sounds like a group of superheroes and I guess in reality, they truly are. I know I owe my career and most of my knowledge to their early enablement of these ideas. There are multiple of these superhero groups, the internet cinematic universe, if you will, that weigh in on these RFCs and after they're approved, they become known as internet standards. Now, this RFC process brought us some of the greatest hits, we're hanging out in one right now. Check out your browser's address bar. The address starts with HTTP. That's hypertext transfer protocol and it was introduced as an RFC and it became an internet standard, and these are pretty detailed and I find them quite fascinating. I love learning this history, but I know that's not why you're here. Check the notes if I just nerd sniped you, so the internet standard that I'd love to dive into here is an early hit, number 10, the one that enabled us to send email. SMTP or Simple Mail Transfer Protocol. You might not agree that it is exactly simple, but it is the defacto way to get your mail transferred. Now, conceptually, you have a sender and a receiver. They introduce themselves and do a handshake, oh hey, just like us. It's a plain text protocol, which means you can kind of read it with a little more information that there's a set of SMTP commands and status codes that could come back in response. They help you build the envelope and explain what it is that you're trying to send and to whom. If you're feeling brave, you can actually make use of this through a tool like Telnet, which will allow you to communicate with a remote server. SMTP is the internet standard used on the sending side, but there are also protocols that allow mail clients to retrieve the email from their mail server, POP, or post office protocol often now called POP 3, which is the current version, helps you as a reader of the email receive a copy of it from your server side mailbox. These days, it's hard to imagine, but there was actually a time when we weren't always able to be online. Now, this protocol enables you to download messages from your mail server to your local mailbox. You wanted this so that you could deal with them when you were offline. Now, original attempts here actually remove the message from the mail server after it was downloaded to the user's client site application. Nowadays, this can cause some issues because we access our email from multiple devices and things can get outta sync, which leads us to IMAP or the internet message access protocol. This allows for better synchronization and internal messaging, and while you probably aren't here to learn about the receiving side of things, you will see both POP and IMAP quite a bit in this space. Now, I don't want you to feel like you need to be able to explain how these work without looking 'em up, but I do want you to recognize them when you see them. You'll encounter these in documentation and now you should have a basic understanding of what they are. Remember, if you ever want a refresher, check the notes for more info. So now we have all these wonderful programs. Anyone who implements the SMTP protocol can send a message. You can actually even do this dance from the command line on your computer or directly from code, and then of course the reason we can't have nice things, the bad actors showed up. You guessed it. It's time to talk about spamming and spoofing. Earlier when I asked you to drop your first email address into the comments, I bet you had a weird feeling about doing that. Something along the lines of, if I put this in here, I'm pretty sure I'm gonna get so many emails that I don't want. Now, as you know, we call those emails the ones that you don't want, spam. Why would we do this? Who wouldn't want this delicious stuff, right? Even though this feels like some sort of advanced prop dad joke, the term that we use for emails that we don't want is actually rooted in this meat in a can. Well, sort of. The British comedy troupe Monty Python had a bunch of famous sketches and one of their most absurd involves a person attempting to order a meal and they noticed that everything on the menu had spam in it, and that person asks. Have got anything without spam in it? Well, a spam egg, sausage and spam, it's not got much spam in it. And asks. Why can't you have egg, bacon and spam and sausage? That's got spam in it. It's not as much as spam egg sausage and spam. Look, could I have egg, bacon, spam and sausage without the spam? Because everything has spam, spam and more spam. Eventually, Vikings show up and chaos ensues. And chaos did ensue on the email front too. Spam was everywhere. Those welldefined protocols worked really, really well at connecting people and bad actors as we call them now, saw this as an opportunity to communicate what they were selling and our inboxes were just bombarded with offers for quite literally everything. There were email lists that were for sale and oh boy, if you got on one of those lists, you got so much spam. Those lists are still for sale by the way, don't buy them. It might sound like a good idea, but it is a very, very bad idea, but in the beginning, it's important to remember that there were no real standards or even etiquette at the time, so everyone was probably a little guilty of over sending messages that receivers didn't really want. There were all sorts of lawsuits, people actually got arrested. Check the notes for more. There's so much drama, right? Finally in 2003, the FTC got involved and get this, the act is called Controlling the Assault of NonSolicited Pornography and Marketing or CAN SPAM for short. I see what you did there FTC. Now this act applies to all commercial email messages, not just bulk ones. The noncompliant penalties can be pretty hefty, up to $50,000. These introduced some rules that are pretty straightforward and really made a difference in the amount of spam that we were fighting. Let's talk through them really quick. Don't use false or misleading header information. Now all of the information on your email envelope must be accurate and identify the person or business as the sender. Don't use deceptive subject lines. Be careful with the click bait. You have to make sure that your messages is about what the subject claims. Identify the message as an ad. You need to let people know that you're sending an ad. There are best practices here and there's more in the notes. Tell recipients where you're located. You have to provide a valid street address. Tell recipients how to opt out a receiving future marketing email from you. You have to let your users tell you that they don't want any more messages like the one that you just sent. You need to do this, again, best practices are in the notes. Remember that subscribers and members can opt out of marketing emails too. If you have an app that makes use of subscriptions and memberships, you have to also make sure that they can opt out. Now, this one can be a little tricky, but don't forget to let them not receive the emails. And honor optout request promptly. This can get a little tricky too. If you offer optout, it has to work for at least 30 days and you have to honor it within a minimum of 10 days. Monitor what others are doing on your behalf. The law makes clear that even if you hire another company to handle your email marketing, you can't contract away your legal responsibility to comply with the law. The CAN SPAM Act made a huge dent in the emails being sent, but spam still maintained a very impressive sometimes upwards of 70% of all email traffic. Now, luckily for those of us with email addresses, the spam percentage is constantly dropping. Our email providers are making it harder and harder for the bad actors to get those bad emails to land in your inbox. Can you do me a favor? I want you to go and look at your spam folder. Just take a quick look in there. Go ahead and pause me and then take a peek and then come back to me. Pretty gross right? Now however, did you see in there there's probably some messages that were incorrectly marked spam. Providers have done the best that they can, but sometimes wanted messages actually end up in there. As someone who is considering getting email running for your application, you don't want this to happen to you. Well talk through some best practices through the rest of this course of how to get your message into the inbox and out of the spam folder. This is called deliverability and it is truly an art form. Now, one of the first points in the CAN SPAM Act talks about not faking the sender. Unfortunately, SMTP doesn't provide authentication, so it's relatively easy to pretend to be someone else. If we flip back to our snail mail example, I can swap out my return address to whatever I want and maybe that'd make you wanna open it. Well, I could do the same thing with my email envelope. Pretending to be someone you are not is called spoofing and it's a bummer. The good news is there are ways of handling this and employing suggested methods will greatly help you with your deliverability journey. Let's take a quick break and when we come back, let's take a look at some of these authentication mechanisms. Mm. Mm. Mm. (peaceful music) (water whooshing) As you can imagine, it's important to the receivers of your emails that they can identify that the emails actually from you. As more and more spoofing happened, technology was added to give you a little more power in making this dream happen. For many years, these techniques were known as a best practice. These days, however, they're basically slowly becoming required. Changes are happening in 2024 that will make all senders start sending properly authenticated emails to be considered trustworthy. The way this works is with surprise, a group of more acronyms. I apologize. I know that there's a lot in this space. Now, I want you to approach these the same way. I don't want you to feel like you have to understand them completely, but it will certainly benefit you to be able to recognize them. You'll find these acronyms and blogs and dropdown menus and function parameters often without any explanation whatsoever, and yes, I realize that the more pedantically focused learners may say that these are actually initialisms and non acronyms, but I say any initialism can be an acronym. If you try hard enough. SPF or SPF stands for Sender Policy Framework. It can be set up by adding an additional DNS record for your mail server. This specifies who can send messages down to a specific IP address. This makes it way more challenging for spoofers to try and manipulate your envelope. DKIM or Domain Keys Identified Mail is similar to SPF. You publish your public key as a DNS record, but DKIM adds an additional layer. You sign each and every message. The receiver can use the signature to validate that the message has not been tampered with. Most mail clients provide a way for you to see the original message as it was sent. For instance, in Gmail, I can open up the additional menu and choose show original. Here you can see if the SPF check passed and also what happened with the DKIM and if you want to dig, you can peep at all the headers that came across. DMARC or domain based message authentication reporting and conformance came on the scene in 2015 and it moves to further take on spoofing issues. It extends both SPF and DKIM to allow the receiving email server to authenticate the incoming message. A DNS DMARC record is added and in it it defines how you would like to handle any message that didn't meet the specification. It can also specify how strict things need to be. Email domain owners can get a daily report of what messages failed to pass. More in the notes on DMARC, again coming very soon, everyone will need to adhere to these to be able to send to Gmail and Yahoo. Now, the advice is that every other provider is going to follow their lead, so make sure that you check the notes for how to embrace these email authentication protocols. You are now armed with the foundational knowledge that you need to start sending emails. There is a lot that goes into making your email adventure successful, and I'm so glad that you've dipped your toes in its history, the terminology and the challenges. You have a pretty firm handle now on the what and the why. In the remainder of this course, we are gonna focus on the how. Now, remember this how includes both science and art. We are gonna focus a little bit heavier now on the science portion, but keep at the top of your mind as we talk through things. I want you to have excellent email deliverability. I want you hanging out in the inbox and avoiding the spam folder. Otherwise, what's it all for? There's a best practice surrounding email deliverability that I love. Always ask yourself this, am I sending the right message to the right person at the right time with the right frequency? Now, this question applies both to the transactional emails that you send as well as the marketing messages that you might be considering. You are essentially building a reputation and you wanna make sure that you make a great first and long lasting impression with your users and the email providers. All right, let's check out some code. I've got great news for you. You are not alone. As is the case in most things that you'll find along your coding journey. Someone has been here before and if you're lucky, they've already written most of the code for you. Email is pretty awesome for this actually, there's so much email code written for you already that it's almost hard to choose. These packaged up code bundles are typically called libraries. Someone has already taken the time to follow those email protocols that we talked about and it's been all abstracted away for you. Python embraces a batteries included approach, which means there's a module included for email. You'll see here that you can create an email message and then send it using the SMTP live module. Good thing you've heard about the simple mail transfer protocol, right? One thing to point out here is that you can also use an SMTP command to encrypt your emails. It's called start TLS or startles if you're feeling cute, I've dropped the information in the notes about how to use TLS. If you don't have access to an SMTP server, check out the notes for some ideas on how to get your hands on some. Thanks to those welldefined internet standards, you can pretty much guarantee that every programming language is going to have something similar. Check the notes for some guidance on how to find examples in your language. It'll probably help you to imagine how you might end up using this in your daytoday coding journey, most applications that have users authenticate have some pretty common workflows. For example, there's almost always a flow to handle when a user forgets their password. Typically, what you do here is ask the user for their email. You check that it exists in your system, and if it does, you send an email with a password reset link. You can imagine how you might do that right? In your controller, you check the submitted email address to verify and then you'd craft an email message and send it using your library. It's pretty critical that this specific email makes it to your user quickly. You don't want this email to end up in the spam folder. They'll be expecting it, and if they don't get it, they're probably going to quickly give up on whatever it was that they were trying to accomplish in your application, and we don't even really need to imagine the overarching business not having users being able to log into your system is well, bad for business. While this inline solution will work, it's probably a good idea to get involved with how your marketing messages are being sent out. The IP address that you send messages from has its own reputation. A best practice worth exploring is to keep the senders that you use for transactional messaging separate from your marketing senders. It's also not a great idea to just start sending a bunch of emails all at once as that could introduce some suspicion. It's best to take some time and build up your reputation before sending bulk messages. This is called IP warmup. Remember that the email providers are doing their best to stop spam before it reaches their customers. You need to make sure that they trust you. There is a lot that goes into this email deliverability and there are entire companies who make it their business to make this happen for you. Let's take a quick break and then let's take a look at some email API services. (peaceful music) Application programming interfaces or APIs provide the applications that you build with new functionality. They abstract away complexity and give you a straightforward way to achieve the impossible. Now, if APIs are new to you, check the notes. I have a whole course on them specifically for beginners. Sometimes a challenge is so big that an entire company forms around the problem and it provides an API to help us developers solve those problems. Email is one of those challenging problems. Not only is the landscape complex, but it's ever evolving. You definitely will benefit from having an entire team of people focus on your solution. There are multiple email APIs and each one of them have their own strengths and weaknesses. One of my favorite ways to find new products is to use GitHub Awesome lists. There are tons of lists of solutions out there and folks maintain those lists. So here's the one for emails. Now, traditionally, when presented with these options, I've always chosen syngrid when my current employer Twilio and Syngrid merged, it was a pleasant surprise and I'm so stoked that we have an email channel for all of our applications. My appreciation for the work they do has only gotten stronger, but everyone's needs are different, so please don't just take my word for it, peruse around and see what resonates well with you. There's something for everyone. It might turn out that you don't even want to choose an email API, and you wanna roll your own code like we just saw. I do recommend taking the time to familiarize yourself with the offerings that are available to you. They can inspire you with ideas that you might not have come up with before. And remember, API companies always get better. There are teams of people making sure that you get the most uptodate security, and they assist you in following the everchanging best practices, all those acronyms and new protocols that might crop up, they've got their eyes on them. There will be reporting and monitoring. You can pretty much guarantee that due to the beauty of competition, the service is going to try and be the best, so you're always going to be getting new features. Now, most likely, they'll guide you through how to do the more detailed DNS things. I don't know about you, but DNS record manipulation for some of the bigger companies that I've worked for is not something that I've been allowed to touch. They don't want me in there and I totally get it. No offense. Some of these email APIs prepare the requests that you need to make and email them to your system administrator. I can't tell you how much I appreciate this feature. Good email APIs will provide ways for you to separate your transactional and marketing messages and guide you there as a best practice. While you now know that's why that's important, it might not have been clear to those just getting started. Some companies even have deliverability experts that will work with you if you're having trouble deciding on which to choose. Check out their blogs. Are they publishing the information that will help you in the art portion of emails? Do they have the science in place to meet your needs? A feature that you'll want to take a close look at is templating. We haven't really chatted about this yet, but you can use HTML in your email messages. This really helps with design, but producing an email that looks good and works on all those clients, it's really tricky. The HTML that you can use is limited and it has a lot of gotchas, especially in those client side applications. Now, a good email API will offer you a way to edit and create beautiful emails. Most of these providers allow for some sort of way to maintain a list of your contacts. Remember, the more engaged your contacts get, the better. Keeping wellmaintained contact lists really helps to ensure this. Also, you'll probably want to have some help dealing with unsubscribes. Remember those rules of the CAN SPAM. A good email API will help you adhere to those rules and help you stop from making mistakes. It's in the company's best interest and yours to keep your reputation healthy. They want you to be able to scale to send millions of emails. Let them help you. One of my favorite analogies about using an API is to think of it about like a package delivery system like FedEx or UPS. You could of course get in your car with your package and drive over to deliver it in person, and if the person doesn't answer the doorbell, you probably don't wanna just leave it there. Maybe you'll come back later or give them a call. Maybe they want you to deliver it to their office actually. Now, eventually you're gonna get the package there, but probably not something you wanna do all the time. I mean, especially if you have lots of packages, you probably wanna use something more like a package delivery service like a UPS or a FedEx. You know that they're the experts and they have ways of getting your package there no matter what. They have worked through the workflows and are reliable. In fact, they'll even send status updates as your package is en route to that destination. Oh, if you don't mind me popping outta that analogy, let's talk about how rich the events that happen are when you send an email. When an email gets sent, there is information that is most likely made available to you via your email API of choice. Now, a common approach to this is to use webhooks. Webhooks are like a reverse API. Instead of you calling the API. The API calls you when the event occurs. Now you write code that handles it. Email has so many great events that you can use to improve your deliverability and your engagement. You'll see here these delivery events like process, dropped, delivered, deferred and bounced. They're super handy in building reporting tools. You also have super powerful engagement events like open and click. This information here shows who they are and even what they clicked. Now, this can be super helpful if you're trying to attract a certain audience. There's all sorts of excellent information that you can process and if your service provides it, you can actually see when people report your email as spam or if they choose to unsubscribe. Now, most likely, your service provides a way to manage this, but these can be additionally helpful. I love seeing what people build with these events. It really helps you to build healthy and reputable email campaigns. Now, take a moment and think about how this might benefit you in whatever brought you to this course in the first place. Would it be helpful to track your transactional message delivery? What about if you're thinking about sending marketing emails? Wouldn't it be awesome to be able to track which message is landing the best? You could test out all sorts of things. You could probably use this data to answer the question, am I sending the right message to the right person at the right time with the right frequency? Now, while I got your brain activated, let's take things one step further. So not only can you write code to handle the events that happen when you send a message, some of these email APIs actually let you process incoming messages. I've seen some super cool stuff built with this idea. One of my favorite implementations that I can think of of all time is Expensify. I can email a photo of a receipt into Expensify. It receives my message, processes the photo using OCR or Optical Character Resolution, and because it knows who I am from my email address, it can create an expense report in a draft state filled out with my expense item. They send me back a message with a link to the report. It's beautiful. I think with the approachability of AI these days, we are going to see more and more of these inbound emailbased applications. Now, I know it's outta the scope of this course, but I just wanted to share my enthusiasm for it. Check the notes for more information on this concept. You did it. You made it to the end of the course. I hope you had a fun time and learned a lot about the art and science necessary to make email work for you. This is a journey and I can tell you already you're off to a great start. Please keep me posted on your progress. I take your feedback very seriously and I'd love to hear from you. Please check the notes for how to get in touch with me. Thanks so much for hanging out, and we'll see you real soon. (upbeat music begins) (upbeat music continues) (upbeat music ends)
