With timestamps:

00:00 - Do you wonder what it would be like to compete 
in squid game? Well now you can find out what the  
00:04 - JavaScript game you create yourself using three 
js. In this tutorial Shubho teaches you how to  
00:10 - create a game from squid game with a 3d model. 
Today I have a really exciting project for you  
00:15 - guys, we are going to create the red light green 
light game from the series quit game. So if you  
00:19 - haven't watched that series, yet, the way this 
game works is you have this doll, and you are  
00:24 - given a specific amount of time. And in that time, 
you have to move from this corner to this corner.  
00:29 - But the catch is you can only move when she's not 
looking at you. If you try to move when she looks  
00:34 - forward, you will be eliminated. So let's see 
that in action. So if I refresh the game, we'll  
00:38 - start the game has started and we can move, we can 
press arrow key to move. But if we try to move on,  
00:44 - she's looking forward. As you can see, it says we 
lost. So that's rules. Let's try to win this game.  
00:53 - And there we have won the game. So this is a 
really exciting project. I hope you're equally  
00:57 - excited as I am. So make sure you like the video 
if you haven't already yet. And let's get started.  
01:02 - Okay, to create this game, we're going to be using 
three js three. JS is a JavaScript 2d library, it  
01:07 - uses web GL to render graphics on the canvas. This 
is really powerful and easy to get started. So if  
01:12 - you have no experience with three js, don't worry, 
because we'll be doing a lot of copy pasting from  
01:16 - the documentation. And I'll be going over the 
course briefly. Okay, so let me close this window.  
01:21 - And in my file explorer, as you can see, 
I've created a folder called squid game that  
01:25 - will we'll be working on this folder. So let's 
open it up with VS code. So click on Open with  
01:29 - VS code. And now we're going to create the index 
dot HTML file. So let's say index dot HTML.  
01:37 - And we're also going to create two folder one is 
js for the JavaScript file, and one is CSS for the  
01:42 - CSS file. So CSS like so. Now in the CSS, let's 
created style dot CSS file. So let's say style  
01:50 - dot CSS, and in the JavaScript, we'd need a 
main.js file. So new file, main dot J's. So  
01:56 - now they're seeing them in our HTML. First, let's 
create the basic markup. Let me close the sidebar  
02:00 - CTRL V to close the sidebar, exclamation mark tab, 
and it will create the basic boilerplate here,  
02:06 - let's link our stylesheet. So let's say link. 
And Asia rep will be CSS for slash style dot CSS.  
02:12 - Also link our JavaScript. So let's say script 
source equals to j s forward slash main.js.  
02:18 - Like so. And let me open it up with our live 
server. So click on Open with live server.  
02:23 - And it will open in localhost colon 5500. Okay, 
now we want to use three J's in our project.  
02:29 - So let's download the three J's. So go to go to 
your chrome and search for three js GitHub. And  
02:37 - the first link will take you to the GitHub page of 
ujs. So from here, click on the Build button, and  
02:43 - then click on the three dot main dot j s. So dot 
mean basically means is the compressed version,  
02:47 - it will load faster. Now click on the roll button. 
After that, you can click CTRL S to save it.  
02:52 - And we want to save it in our project 
folder. So navigate to your project folder,  
02:56 - go to the JavaScript folder and when to save 
it as three dot main dot j, so click on save.  
03:02 - Okay, now if we if we open up our sidebar, and 
in the JavaScript folder, we'll see we have the  
03:07 - three dot main dot j. So let's let's link that 
file. So we're going to say script source equals  
03:11 - to j s four slash three dot main dot j s like so. 
Okay, now let's go to the three js documentation  
03:19 - page. And here, click on the documentation. 
And in the documentation page, you will see  
03:24 - we have a lot of course that we can copy paste 
to get started. So let me copy all this course  
03:29 - Ctrl C, and paste it CTRL V, like so. Let me close 
the sidebar again. And now if you go to our page,  
03:36 - you will see we have this blank canvas. 
So let's see what's happening. So first,  
03:40 - we're creating a new scene by saying New three 
dot scene. So scene is basically what we see.  
03:45 - To see it we need a camera. So in the second line, 
we're creating a new camera by saying New three  
03:49 - dot perspective camera. So we have many types of 
camera, the perspective camera is most basic. So  
03:55 - the documentation if we search for that, there 
is a perspective camera as you can see that the  
04:00 - perspective camera takes four arguments, the 
fob, the aspect, the near and far. So this will  
04:04 - make sense if you're into photograph graphy or 
camera. Otherwise, you can leave this default,  
04:09 - this will work just fine. Then we're creating 
a renderer. So the renderer is what is used to  
04:13 - render all the graphics in our canvas. 
Then we're saying render dot set size,  
04:18 - and passing window dot inner width 
and window inner height. So basically,  
04:21 - we're saying the renderer should be the size of 
our window. And then the rendered DOM element  
04:26 - will give us the canvas and we're appending that 
Canvas to our document body. So if we save this,  
04:31 - we get this blank canvas and but we 
have this little whitespace on left,  
04:36 - top and left. So let's try to remove that in 
the CSS. So let's say target everything. And  
04:40 - we're going to say the margin should be zero 
and padding should be zero. So margin zero,  
04:45 - and the padding can also be zero. If we save this 
as you can see, now the whitespace is gone. Okay.  
04:51 - Now let's try to add a shape in our scene. So 
let's see. Let's go back to the recommendation.  
04:55 - So if we scroll down, actually if you go back 
and then scroll down as you can We have some more  
05:00 - code. So let me copy all of them again Ctrl C ctrl 
v. So first, we're creating a box geometry. So in  
05:07 - 3d world, the shapes are basically geometric, we 
have many types of geometry, we have box geometry,  
05:13 - we have sphere geometry, you have cylinder 
geometry, we have polygon, etc. So the box is  
05:18 - the basic geometry, we use Box geometry to create 
cubes. So a geometry is made out of triangles or  
05:24 - vertices. So we need to wrap our geometry ins 
with a material. So there are many types of  
05:30 - materials. But for now, we just want to give it 
a color. So we're using the MeSH basic materials,  
05:34 - which is basically just a color. So we're 
specifying the color here. And then we're creating  
05:37 - the mesh by combining the geometry and materials 
here. And finally, we have to add that cube to  
05:42 - our scene. So we're saying scene dot add cube. 
So if you now save it, and open up the browser,  
05:46 - open up that in browser, as you can see, we can 
see that is because every time we add something  
05:51 - to our scene, or update something, we have to call 
the renderer dot render function, and we have to  
05:56 - pass the scene on camera. So now if we save it, as 
you can see, now we can see this, see the cubes.  
06:01 - Now by saying camera dot position dot z equals to 
five, we were basically specifying how far from  
06:06 - the scene should be on camera. So if I were to 
make it make the number smaller, now the camera  
06:11 - is more near to the scene, so it appears bigger 
if we're to make it bigger. Now the camera is more  
06:17 - fat, so this object appears to be smaller. So, so 
five is a good number. So let's leave it at five.  
06:23 - So every time we add a shape to our scene, 
or update anything, we have to call the  
06:27 - renderer dot render function, but manually calling 
this can be a pain, which is why we use this code,  
06:32 - this block of code. So let me copy this and then 
I will explain to you and paste it here. So first,  
06:40 - we're creating the animate function in the animate 
function, we are calling the renderer dot render,  
06:44 - and we're passing scene and camera. So let me 
just move it down. I like to, I like to put it  
06:49 - in the in the very bottom, but it doesn't matter 
really. Okay, so what is happening in the request  
06:53 - animation frame, we're passing the animate 
function. So what the request animation frame  
06:57 - will do is call the animate function again and 
again. So if I were to console log something here,  
07:01 - so whereas if I say console dot log Hello world, 
and in the browser, if I now open the console,  
07:06 - you will see hello world is being printed again 
and again. So basically, the animate function  
07:10 - will be called again and again. So now we 
don't have to manually call this function  
07:14 - called our renderer dot render function here. 
Okay, now let's look at some animations,  
07:18 - we can animate our cube, so let's try to animate 
our cube. So in the animate function, we can say  
07:23 - something like you've got rotation, cube dot 
rotation, oops, cube dot rotation, that x plus  
07:30 - equals 2.01. So basically, you keep increasing 
the rotation dot x. So if we now save it,  
07:37 - as you can see, our cube is now rotating in the x 
axis, if we were to say rotation dot y, it would  
07:42 - rotate in the Z axis, if we had to say rotation, 
but it's it, it will rotate in the Z axis. So the  
07:48 - number basically specifying how fast it should 
rotate, so if we were to make it point five,  
07:52 - now it is faster if we were to make it 
even smaller. Now it is rotating very,  
07:58 - very slowly. Okay, let me remove this group code. 
And let me remove this actual it, just comment it  
08:04 - comment this out for now, so we don't want the 
cube. Instead, what I want is the doll. So how  
08:09 - we can create the doll. So so in the SketchUp, 
I have found this 3d model of the doll. So this  
08:15 - guy created it, and he is allowing us to use it 
for free, so you just have to create an account  
08:19 - in SketchUp. After that, you can click on download 
3d model and download the glTF version. So click  
08:24 - on Download, and it will start downloading it. By 
the way, I will leave the link to this page in the  
08:28 - video description. And I'll also leave the link 
to the finished code in the video description.  
08:32 - So you will be able to get everything from 
there. So if you decide to follow along  
08:36 - and get stuck, you can refer to that code. Okay, 
let's wait for this to finish. Okay, the download  
08:40 - is now complete, so we can right click and click 
on show in folder. And then I'm going to click on  
08:46 - extract files. And let's say the folder name 
should be models. So let me rename this to models.  
08:59 - So now this the file has been 
extracted in this model folder.  
09:02 - Here we have all the files. 
So let me click on the Cut.  
09:06 - And let's put it in our project folder. So So my 
project is in www folder. And then inside duck  
09:12 - squid Game dot and I'm going to paste the folder 
here, so click on paste. And we can close the file  
09:17 - explorer now and close this tab. And if we open 
up our sidebar again, you see we have now had  
09:22 - this Models folder inside that we have the files 
for the 3d model. So now let's see how we can  
09:26 - use the 3d model with three js. Okay, if I go to 
the documentation page again and search for glTF.  
09:34 - Here you see the glTF loader click on this. 
And this again gives us some example on how  
09:40 - we can load a 3d model. So let me copy 
this, copy this line of code. So Ctrl C,  
09:47 - and Ctrl V. So first, we are creating a new glTF 
loader model. But to be able to use this glTF  
09:52 - loader, we have to first add it to our JavaScript. 
So again, go to the three js GitHub page  
10:00 - And then click, click on the examples.  
10:04 - And then the and then click on JavaScript 
folder. After that, go to the loaders.  
10:12 - And here you will see the glTF loader. So click on 
that. And again, we can click on the roll button  
10:16 - and press Ctrl S to Save it. So where to save it 
as glTF loader dot j s to save. As you can see  
10:22 - that glTF loader has been added to our project. So 
let's link it in our JavaScript also. So let's in  
10:27 - our HTML also, so let's say script source equals 
to this time it will be j s forward slash glTF  
10:34 - loader dot j s, like so. Now this lead here would 
have worked if we were to install the glTF loader  
10:41 - with NPM and imported it. But since you're using 
since we're using the regular script file, instead  
10:46 - of just saying glTF loader, we have to say 3d 
glTF loader so simply say three dot glTF loader.  
10:52 - And now this should work. Let's see what next 
we have to do. So after that, we have to call  
10:57 - the loader dot load function to load our 3d 
model. So let's do that. So we can say loader  
11:04 - loader dot load. And here we have to, we have 
to specify the path to our 3d model. So our 3d  
11:10 - models file is in the Models folder. After that, 
we have the scene dot glTF. So let's say dot dot  
11:16 - forward slash. Since we are in the JavaScript 
folder, we have to go one folder up then in the  
11:20 - Models folder. So that's why we're saying dot 
dot forward slash models. And then we're going  
11:25 - to say scene scene dot glTF. Now this loader 
dot load function will load this glTF. And once  
11:32 - the loader is loaded, we will have a callback 
function executed. So this callback function.  
11:39 - So let's create the body of this function here 
so that this callback function will receive the  
11:43 - loaded glTF. So let's call it glTF. And then we 
can say scene dot add glTF dot scene. And now if  
11:52 - we save it, and go to the project, as you can see, 
we can see nothing. Let's see, why is that let's  
11:58 - open up our console. So we don't have any error, 
but we still can see it that is because currently  
12:03 - in our scene, we don't have any light, we need 
a light to be able to see objects or models.  
12:08 - So let's add some light. So again, let's go 
to the documentation and search for light.  
12:13 - In three js, again, we have various type of light, 
but the most basic light is the ambient light. So  
12:18 - click on the ambient light. And let's copy this 
code again. And let's paste it. Let's say let's  
12:25 - paste it here. CTRL V. So first, we're creating 
a new ambient light. And then here, here, we're  
12:30 - specifying the color of our light. In CSS, you 
may have said hashtag 404040. But in JavaScript,  
12:36 - we simply say 0x, and then the code so this is the 
code and we can delete this comment, we don't need  
12:43 - it. So now if we save this, and go back, and as 
you can see, we have this doll. Okay, so let's  
12:49 - change the light color to white. So let's say FFF, 
FFF. And now we can see the doll much clearer,  
12:55 - but the doll is very big. So let's scale it 
down. So we're gonna say see glTF dot scene,  
13:04 - dot scale. So we're gonna call the scale function.  
13:10 - And we're gonna say dot scale dot set, we 
have this called the set function to set  
13:15 - the scale. Okay, now since we are in 
a 3d world, we have three dimensions.  
13:19 - And let's say we want to scale it to 0.4 on all 
dimensions, so let's say point four point 4.4  
13:27 - likes and now if we save it, it should be scaled. 
So it's the spelling is SCA. Now if we save it,  
13:34 - as you can see, now the dollar is a lot 
smaller but but one problem you'll see  
13:38 - is if I try to resize my screen, as you can 
see that square Canvas does not resize. Okay,  
13:42 - let's try to make this responsive to make this 
responsive. We're going to use this block of  
13:46 - code. So let's see what's happening. So first, 
we're saying window dot add event listener.  
13:50 - We're listening for the resize event, and 
we're calling this function. So whenever  
13:54 - we will resize our screen. So if we resize our 
screen, this function will be executed. And now  
14:00 - let's see what we're doing in this function. So 
first, we're saying camera dot aspect equals to  
14:05 - window dot inner width divided by window dot inner 
height since basically we have besides our screen,  
14:10 - now the aspect ratio of screen has been changed. 
So now we are setting the aspect ratio to the new  
14:15 - aspect to the new aspect ratio of our screen. 
And now since we have changed the aspect ratio,  
14:21 - we have to call the update projection matrix on 
the camera. And finally, we have to say render dot  
14:25 - set size and to unset the size to the new window 
dot inner width and windowed inner height or the  
14:31 - current in our width and height of our window. So 
if we now save it, and now if we resize our window  
14:37 - as you can see now that Canvas also resizes. Okay, 
now let's bring the door a bit down. So we can see  
14:45 - glTF so let's say glTF dot scene dot position dot 
set. And here we can set the position in the X,  
14:53 - Y and the Z axis so we understand the position 
in Z axis. So let's try one so if we say one,  
14:59 - it goes up but we don't need to come 
down. So instead, we can use negative one.  
15:05 - And negative one should be good enough. Now 
let's try to change the background color. So  
15:09 - to change the background color, we're going to 
say renderer. So we can oops, to do that, we can  
15:15 - say renderer dot set clear color. So set clear car 
car. And here we have to say this specify a color.  
15:22 - So I have already chosen a color, let me use 
that. So the color I have chosen is B seven,  
15:27 - C, three, f three, if we now save it, as you 
can see, now we have this bluish color. And  
15:33 - the second argument is basically the opacity of 
the color. So you add one or full opacity, okay?  
15:38 - Now, instead of just loading this loading the 
model like this, I want to create a new class  
15:42 - called doll. So we can have some methods 
inside that class and easily call them. So  
15:46 - let's create a class called doll. So we 
can say class doll. Inside that, we are  
15:55 - going to have a constructor function. So I can say 
constructor. And let me cut all this code. So cut  
16:04 - and paste it here. CTRL V. So if we 
now save this, that doll won't be  
16:09 - visible in the screen anymore. That is because 
we have to create a new doll object. So let's  
16:12 - try to create a new doll object. So let's say let 
doll equals to new doll. So now if you save it,  
16:20 - now again, we see this doll and also 
where we I want to say this dot doll.  
16:26 - It should be doll because this glTF dot 
scene so like so. So now we can have some  
16:30 - method in this class with a stick, let's 
create a method called loopback. So look,  
16:35 - back, this will make the dog look at the backside. 
So so in this function, we're gonna say dollar dot  
16:40 - rotation dot y to some value. So let's try one. 
So now if we were to say dollar dot look back,  
16:45 - so dollar dot look back, let me call the function 
and save it. And now if we look at our console,  
16:52 - you'll see we have some error that that is 
saying cannot read properties of undefined.  
16:57 - So there is two reasons for 
that. So first reason is,  
17:00 - it takes some time for our model to load. So let's 
use a set timeout. So we can say set timeout.  
17:07 - And let's say we're going to call this function,  
17:10 - we're going to call the dollar. So we're going 
to call that dollar look back after, let's say  
17:16 - one second. So 101,000 millisecond, if we save 
this, we'll see we again have some error. So it is  
17:22 - saying cannot read properties of undefined. That 
is because we have used the regular function here.  
17:26 - So if you use regular function, it creates its 
own context. So now that now inside the function,  
17:31 - we're saying dot, this dot dollar, we're 
saying this function dot ball, so we want this,  
17:35 - we want this to point to that this point to 
this class, so we can use a regular function,  
17:40 - we're going to use an arrow function, like 
so now, if we save this, after one second,  
17:46 - as you can see, that all rotates. So let's try, 
those should rotate to let's say negative one.  
17:53 - And now let's try negative two. Okay, I think 
negative 3.15 will make the doll look backward.  
18:02 - So now as you can see, if we call that look back 
function that looks at backward, so we can also  
18:07 - have a doll dot look forward function. So we 
can say look forward. We can say look forward.  
18:18 - And actually, let's call it backward, not back. 
So the look forward function will simply say this  
18:31 - dot dot dot rotation equals to zero. So now if you 
had to say dollar dot look forward, and call it,  
18:38 - as you can see, that all looks forward. And 
if we were to call doll dot look backward,  
18:43 - so look backward, that doll will look at the 
backwards backside. But now as you can see,  
18:48 - that doll rotates all of a sudden, but we want,  
18:51 - we want the doll to rotate slowly, 
gradually, or animate. So for that,  
18:54 - we are going to use an animation library called G 
SAP. So simply go to Google and search for G SAP.  
19:02 - And this is the official site of deception. So G 
serve is a really powerful animation library for  
19:07 - Java scripts. So click on the get started here. 
And from here, if we scroll down, as you can see,  
19:12 - this gives us a CDN link. So I'm going to 
copy this link Ctrl C and paste it CTRL V.  
19:20 - So again, click CTRL S to save it, so to 
save it as g sub dot main dot j s save. Okay,  
19:25 - now let's open up our sidebar again. And in the 
JavaScript folder, as you can see, now we have  
19:28 - this G said dot min dot j, so let's add it to our 
HTML also. So again, we're going to say script  
19:34 - source equals true, it will be j s forward slash 
G SAP dot mean dot j s like so if we now save it,  
19:41 - there's close this tab. We don't need it anymore. 
And let's close our sidebar by saying Ctrl B.  
19:46 - Now in the main dot j s, so here instead of saying 
dollar dot rotation dot y equals to three point,  
19:52 - negative three point something, let me comment 
this line out. And here instead of this we're  
19:56 - going to use the GCF. So here we're going to say 
G dot To the object to the object we want is the  
20:03 - dollar rotation. And the property way we want to 
animate is the y. So we're going to animate the  
20:08 - rotation dot y. So the rotation dot y should 
go from zero to negative 3.15 in one second.  
20:15 - So that's, that's what we're doing by saying G 
sub debt. So if we now save it, as you can see,  
20:21 - now, now that all enemies smoothly, so let's try 
to see point four, five, so in 450 milliseconds,  
20:30 - now it takes 450 milliseconds for the doll 
to rotate. So now let's do the same for the  
20:34 - forward function. So Ctrl C, and paste it here. 
Here we enter, animate from negative 3.15 to zero,  
20:43 - like so. So now if we open up our console, and 
call the dollar look forward function, it looks  
20:48 - forward, but it animates forward direction. 
If we were to call the look backward function,  
20:53 - it looks backward, but But it's rotating 
smoothly. So this is much better now. Okay,  
20:58 - now let's create the track that the player 
have to cross. So let's say let's create a  
21:02 - function for that. So let's say function. And 
let's call it create track. So create, track.  
21:12 - And create rec function will create the truck 
to create the trip, we are going to use cube, so  
21:17 - we're going to use like three cubes. So to create 
cubes, we know we have to do all these. So let's  
21:22 - create a utility function for that. So we're going 
to say function, create cube, so create cube.  
21:34 - In this function, we can simply copy these codes. 
So Control X and CTRL V. let me uncomment this  
21:41 - and fix the indentation, like so. Okay, now 
let's try to call this create Q function in our  
21:46 - create drag function lives. So let's 
me. So let's call that function here,  
21:50 - like so. And let's call the Create 
rec function, also create trek.  
21:56 - If we now call the function and save it, 
as you can see, now we have this cube.  
22:00 - Okay, let me comment out the code for the doll 
for now. And now if we save it, as you can see,  
22:05 - we have this cube, but we don't want the queue 
to be the size, we want to specify the size.  
22:09 - So let's see how we can do that. So let's again go 
to the box geometry, so we can say box geometry.  
22:16 - So as you can see, when creating the geometry, we 
can pass arguments so so we can pass the width,  
22:21 - the height and the depth of our cube. So 
let's do that. So in the Create your function,  
22:25 - we are going to receive argument called 
size. And when creating the box geometry,  
22:30 - we are going to pass the size dot height, we're 
going to pass the size dot w for width, size dot h  
22:37 - for height, and size dot d for the depth. Okay, 
now way we're calling the acuity function,  
22:44 - let's pass the size. So we're going to say 
the width should be the width should be,  
22:48 - let's say, point two, so it will be a skinny 
cube. And the height can be let's say, 1.5.  
22:54 - And the depth can be one. So let's say 
d equals to one. So now if we save this,  
22:59 - this is how our cube looks like. But now we want 
one cube to be on this side and one cube on this  
23:05 - side. So the function will also take a position. 
So let's say position x, and inside the function,  
23:11 - we're going to say cube dot position dot x 
equals to position x. So now in the function,  
23:16 - if we were to pass some position, 
so let's say the position,  
23:20 - x can be, let's say three. Now it is in 
this side, if we were to say negative three,  
23:27 - it will be on this side. Okay, let's create some 
global variables. So I'm going to create global  
23:33 - variables here. So let's add a comment here, 
specifying that were creating global variables  
23:37 - here. So let's say global variables. And we 
are going to have one global variable for  
23:42 - start position. So here, let's say we are 
going to have a variable called con start,  
23:48 - underscore post, underscore position. And 
let's say the start position will be three  
23:55 - and the imposition will be negative three, or we 
can say negative start pause for negative three,  
24:02 - like so. Actually, this should be in 
position, so let's say in underscore position  
24:11 - like so now where we're calling the Create 
Q function, we can pass the start position,  
24:16 - and if we save it, we got a cube on the on this 
side, and we can also call this function again,  
24:21 - the same we're gonna pass the position 
x as in position. Now we have one  
24:27 - now. Now we have one cube here, but now the 
cube is kinda rotated. So let's fix that. So  
24:32 - let's say our create Q function will also take 
a take argument called wrote x for rotation X.  
24:40 - And by default, it will be zero 
like so. So now inside the body,  
24:44 - we can also say cube dot rotation dot x equals 
to Vertex like so. So let's try to rotate it.  
24:53 - So let's try to rotate our cubes. So let's 
say the first cubes rotations would be  
24:57 - let's try point four. Okay, Okay, so it looks 
like their cube is being rotated in their own  
25:03 - axis. So let's fix that. So let's call it 
y, and we want to rotate it rotate the Y.  
25:12 - And we're going to say 
rotation dot y equals to what y  
25:18 - like so. So the saying point four is making it 
even worse. So let's say negative point four. Now  
25:26 - it's looking much better. Let's try point 
three. Let's try point three, five, actually.  
25:33 - And yeah, point three, five should be good enough 
so and for the in, and for the second cube,  
25:38 - let's copy this, and this time, it will be 
positive point three, five, like so Ctrl V,  
25:42 - and for this cube, the position x will be zero 
in so it will be in the middle. So now we have  
25:47 - this cube here. So now we have this cube in the 
middle. Let's also say rotation should be zero.  
25:53 - And for this one, let's say the width will be 
starting position, times two. So if we do this,  
26:01 - we will have a cube that spans from the side to 
the side. So let's give it a different color.  
26:05 - Okay, so let's say our creative function will 
also take a color as this argument. So let's say  
26:10 - color. And the default color will be let's say, z  
26:14 - 0x, and the hexadecimal value, so 
the color I want is F, A, B, C 851.  
26:23 - So now, here, instead of saying color equals to 
hashtag this color code, we are going to spot  
26:28 - I'm going to say this will be the color that we 
pass in the while calling the function so color.  
26:34 - If we now save it, as you can see, now our cube 
is this orange color. Okay, the cube is on top  
26:39 - of other cubes. So now create your function. Now, 
we are also going to region the created cube, so  
26:43 - we are going to say return cube, like so. Okay, so 
this is our biggest cube this one, so let me just  
26:51 - put it on top of other two. And now since we're 
returning the cube where we can say this dot  
26:57 - position dot z equals two, and let's say the 
position dot z will be negative one. So if we now  
27:04 - save it, this is how it looks. Okay, instead of 
saying point one list, instead of saying negative  
27:11 - one list ending at point A. And point negative 
point eight works perfect. And also for this one,  
27:17 - let's change the color. So there's past a color 
here. So the color I have chosen is E five is 716.  
27:26 - So this is basically a darker orange color, 
like so. So now Let's uncomment the noodle  
27:32 - function here. And it looks like the doll is 
getting overlapped with the cube. So let's say  
27:36 - so let's say the position z will be 
negative one. So if we now save it,  
27:40 - now it looks better. But now we have this gap. 
So in so whereas specifying the width, let's  
27:45 - also add some more value here. So let's say point 
two. So now it is spanning from starting position  
27:52 - to ending position like okay, now just like the 
doll, let's create a class for our player, which  
27:56 - will be just a circle. So let's create a class 
called player. So I'm going to say class player.  
28:04 - And in the constructor function, so let's 
say constructor. So for the player when  
28:10 - to create a sphere, so let's go to the 
documentation page and search for sphere.  
28:17 - And here is the sphere geometry. So let's copy the 
codes Ctrl C, and we can paste them here. And now  
28:23 - instead of box geometry, we're using the sphere 
geometry, the sphere geometry takes the radius,  
28:29 - the height segment and width segment, and 
then we're creating the sphere with them  
28:32 - geometry and material like so. So 
now let's save it go to our page.  
28:37 - Let's try to create a player so let's say const 
player. So we are going to say const player.  
28:47 - If we now save it, we still can see the sphere. 
That is because the sphere is too big. So let's  
28:52 - so let's say the radius 
should be let's try just one.  
28:56 - So here is our sphere. This is 
still too big. So let's say point  
29:01 - four. Or let's say point two. Or let's 
say point three. And point you should  
29:08 - be good for the color. Let's try the 
white color. So let's say fff FFF.  
29:15 - So now we have this white sphere. Now 
the position of the sphere should be  
29:20 - in here. So let's say sphere dot position dot x. 
So sphere, that position dot x equals to the start  
29:29 - position, like so now I want to create a function 
called Run and if we call the run function,  
29:34 - the sphere should start moving so we're 
going to create a function called Run.  
29:39 - Now before doing that, let's just say 
this dot player so this dot player  
29:45 - equals to sphere and we also want 
to know some info about the player.  
29:49 - So we are going to say these dot 
info are these are Player Info.  
29:55 - These are Player Info will be our object. So here 
we're again going to say and we're going to say  
29:59 - position x equals to start position. So basically, 
where the sphere is currently, so currently the  
30:04 - sphere is here. So by saying position at x equals 
to start position, we also want the velocity,  
30:09 - so we're going to say velocity. And we're going 
to say the velocity should be zero. So velocity  
30:14 - is basically speed. So if the velocity is zero, 
the sphere won't move. But if the velocity is one,  
30:19 - the sphere will move with a speed of one. 
So we also want a function called Update.  
30:29 - And inside this function, first, we're 
going to say this dot Player Info  
30:36 - dot position x plus equals to this dot Player 
Info dot velocity, so keep increasing the players  
30:43 - position x. And then we're also going to say this 
dot player dot position x equals to that this dot  
30:49 - equals to this dot player dot position 
x. And we have to keep calling the update  
30:54 - function. So in the animate function here, 
we were also going to say player dot update,  
30:58 - like so. But now the sphere is not moving. So 
if we were to say the velocity is point 01,  
31:06 - now the sphere moves in that direction. So instead 
of adding, let's abstract, so minus equals two.  
31:12 - And now as you can see, the 
sphere moves in that direction.  
31:16 - But initially, we want the velocity to be 
zero. And when we call the run function,  
31:20 - the velocity is, well city should increase 
so we can say so in the run function,  
31:24 - we can say this dot player dot velocity equals 
2.3. Point 03, like so. So if we save it, and then  
31:31 - if we open up the console, and call the player 
dot run, so if we were to say player dot run.  
31:39 - As you can see, the sphere is moving, but we want 
to call the run function, when we press our up  
31:44 - arrow key. So let's do that. So we are going to 
use some event handling here. So we're going to  
31:48 - say window dot add EventListener. So we're 
going to say window dot add event listener.  
31:52 - And we're going to listen for the key down event. 
And here for now, they just say alert e dot key,  
31:59 - like so. So now if I were to press some key, 
it enters the key if we press so if I were  
32:04 - to press the up arrow key, it says up arrow. 
So here inside this function, we're going to  
32:08 - check if we press the up arrow. So we're going 
to say if u dot key equals equals to arrow up.  
32:19 - If it is, then we want to call the player dot run 
function. So we're going to say player dot run. So  
32:23 - now if I save it, and now press A, press the up 
arrow, as you can see, the player starts moving,  
32:28 - but when I release my finger from the up arrow, 
we want the player to stop running. So let's  
32:32 - create a function called stop. So here is our 
question, let's create a function called stop.  
32:41 - So in this function, we are going to 
say this dot Player Info dot velocity  
32:49 - equals to zero, so we're setting the velocities to 
zero, so there is stop moving. So now we're also  
32:56 - going to listen for the key event. So copy this, 
and here we are listening for the key up. So the  
33:03 - key down is when you press down arrow, and key up 
is when you release that arrow. So inside here,  
33:08 - instead of calling the run function, we're 
going to call the Stop function like so. So  
33:11 - if we now save it, and press our arrow key, it 
starts moving. And if you release our arrow key,  
33:17 - it stops moving. Now, to make this a little bit 
more interesting, what we can do is instead of  
33:22 - making the player stop, all of a sudden, we 
can make it so it takes some time for the  
33:26 - player to stop. So we can do G sub the 
two, we can say this dot Player Info,  
33:30 - and we want to animate the velocity. And let's 
set the duration to be for now, let's say one,  
33:35 - like so. So if we press the arrow key, the ball 
starts moving. But if we release that, okay, the  
33:41 - ball moves for a while and then stop. So this will 
make the game even harder and more interesting.  
33:45 - But instead of duration to be one, one is too 
long, let's say point one, so 100 milliseconds.  
33:51 - So it will take 100 millisecond for the player 
to stop running, which will make the game a  
33:56 - little bit more interesting. And let's delete 
this comment. We don't need it. Now I want to  
34:00 - show a text here. So let's create a text. So you 
can create a text with three js as well. But I'm  
34:05 - going to use a regular HTML text. So I'm going 
to have a paragraph text with a class of text.  
34:10 - And here we can say for now we're just loading 
like so. So here is our text. Now you can see  
34:17 - the canvas is pushed down, but we want that 
text to be on top of the canvas. So we're going  
34:21 - to say our text to have a position of thing. So 
let's say dot text, to have a position of fixed.  
34:29 - And let's say they should have a 
font size of let's try 50 pixel,  
34:34 - like so. And let's also say the font family to be 
Arial. Like so let's say font weight will be bold,  
34:41 - font weight, bold, like so and Let's center it so 
we can say lift to 50%. And we're also going to  
34:48 - go into say transform, it was to translate 
X Translate X and it will be negative 50%.  
34:56 - So now if we save this, as you can see our text is 
in the center and You can see our text is in the  
35:01 - center. So let's also say that top should be 10 
pixels. So let's say top to be 10 pixels 10 pixel,  
35:08 - like So also you want some shadows. So let's say 
text shadow. So let's say it takes the shadow,  
35:13 - and it says zero pixel from the x axis to 
pixel from the y axis. dabbler can be five  
35:18 - pixel and lazy, let's use some dark colors to 
say RGBA, 000. And opacity can be let's say,  
35:25 - point three, two, now, that takes us a little 
bit more visible. Okay, now I want to create  
35:29 - a method in our doll doll class. So inside the 
doll, I'm going to create a method called Start.  
35:36 - So start, what this method will do is that 
also that all will look backward for some time,  
35:41 - then it will turn around and look forward for some 
times and again, do the same. So let's do that. So  
35:46 - in the function, first thing we're going to do is 
say look backwards. So let's say look backward,  
35:50 - so this dot look backward. And now we want the 
doll to keep facing backward for some time. So  
35:55 - we want to use some delay here, or we want the 
execution to be stopped for some some time. So  
35:59 - I'm going to create a function called delay. So 
function called delay. And what this function will  
36:05 - do is take time as its argument, and then return 
a promise that will resolve after the given time.  
36:10 - So we can use this to stop execution of our codes 
for a while. So now we can make our Start function  
36:16 - asynchronous by saying async. And here we can say 
our delay. And let's say we want to delay for one  
36:22 - second. And after one second, we want this to look 
forward to we're going to say this, look forward,  
36:26 - and then I can do a delay. So we're again going 
to say our delay, and let's say 1000 seconds also.  
36:31 - And then we're going to call the dessert start 
function. So this dot start. So as you can see,  
36:36 - this is a recursive function. Okay, so now in the 
set timeout, so why is the set timeout instead of  
36:41 - saying dollar dot look backward, we can say dollar 
dot start. So if we were to say dollar strat,  
36:46 - you'll see, that all looks backwards for a second 
then turns around and looks forward for a second,  
36:52 - like so. But instead of saying, once again, 
once again, we can use a random number. So  
36:57 - this will make the game more hard and less 
predictable. So let's do that. So let's say  
37:01 - the time should be math dot 
random, so we're going to say math.  
37:06 - So we're going to say math dot 
random, and we're going to say  
37:10 - 1000 seconds, this will give us a number 
between zero to 1000. And if we were to add,  
37:17 - and if we were to add 1000 to eight. Now we'll 
get an, we'll get a number between 1000 to  
37:25 - 2000. So that all will look backward for one 
second to two seconds. So if we now save it,  
37:32 - that all looks backward for a random amount of 
time, we can do the same for the look forward.  
37:37 - So let's copy this Ctrl C and paste 
it here. So this time, let's say 750  
37:46 - to 700, and plus 750. So this will look forward 
for 750 milliseconds to 1.5 seconds, save.  
37:59 - And now the dog looks at forward and backward for 
a random amount of time. So this is more hard and  
38:04 - predict unpredictable for the US player. So 
now our dog looks at forward and backward  
38:08 - for an amount of time, and we can press the 
arrow key to move out there. So now we're  
38:12 - ready to implement the game logic. So first, 
I'm going to create a function called init.  
38:17 - That will initialize the game. So let's create 
a function called in it. This will also be an  
38:22 - asynchronous function. So async. So here first, 
what we'll do is delay will use our delay and will  
38:29 - delay for let's say, 500 millisecond. And after 
that, that takes should say, starting in three  
38:34 - after some time that takes should settle starting 
into studying in one and then go so first,  
38:39 - let's target our texts or TextEdit class of text 
to let's create that. So let's say const text  
38:49 - equals to document dot query selector and our 
text had a class of text. So dot txt takes like  
38:54 - so now let's go to our init function. And inside 
the function, let's say takes dot inner text  
39:03 - equals two, we're going to say starting.  
39:06 - So starting in three, like so. So now 
let's call the init function. So in a save,  
39:15 - and as you can see, now it says starting in 
threes, so let me copy this three more times.  
39:19 - So after 500 milliseconds, we'll say starting in 
two, and after that, it will say starting in one,  
39:26 - and then it will say study, and then 
it will say go, so the game will start.  
39:34 - Save it as it as you can see, say starting in 
321, go and after that, we're going to call a  
39:39 - function called Start Game. So start game. 
And let's create that function. So function  
39:46 - start game. So inside that function, we're 
going to call the dollar dot start. So let's,  
39:52 - let's delete this now. And we're going to call 
the dollar start here. So we'll say dollar dot  
39:57 - start. So now if we save it, as you can see 
it says loading 321 And after that, that all  
40:02 - starts moving around or turning around whatever 
you want to say. Okay, now let's also show our  
40:06 - progress bar. So the progress bar will just be 
a cube. So I'm going to say let progress bar,  
40:11 - because we are going to again call our cue 
function. So create cube, so create cube. And for  
40:19 - the Create cube, the width will be let Fave eight, 
the height will be, let's say one. So height  
40:24 - equals to actually, let's say point one, and the 
depth will be one, like so. So if we save it,  
40:30 - we have some error. That is because you also 
have to pass a position. So let's say position  
40:34 - x should be zero, save it, okay, this should be 
d equals to one, a depth equals to one, save it.  
40:44 - So now we have this progress bar here, okay, the 
weight is too much. So let's say which, which  
40:50 - would be five. Here is our progress bar we and 
the progress bar to be in the top. So let's say.  
40:58 - So we're going to say progress bars are 
positioned at y equals 3.35. If we save it,  
41:06 - as you can see here is our progress. But now 
we need to make it functional. So as time  
41:10 - goes by, we the progress bar should decrease. 
So let's create another constant. So let's  
41:14 - go to our variables here. And let's create 
a constant. So we'll say const time limit  
41:19 - so that this will when the time limit 
for our game. So time underscore limit.  
41:25 - Let's say that time limit should be 10 Second, 
and now in the Start function, where is the start  
41:30 - function? Let's find it out. So here is our start 
function so that we can again use the G SAP so we  
41:35 - can say G SAP dot two, and we want to animate 
our progress bar, so let's say progress bar  
41:41 - dot scale, so we're going to say dot 
scale. So we're going to set the scale  
41:47 - x to zero in the time limit are in 
10 seconds. So if we now save it,  
41:52 - as you can see, the progress bar starts 
shrinking down. Also, we can specify easing  
41:57 - function here. So we can say is equals to 
none to be linear, like so. So save it.  
42:03 - And now the progress bar moves, okay, one thing 
you will notice is the player can start moving  
42:07 - even before the game is started. So like, as 
you can see, I can move before the game he has  
42:12 - started, so we don't want that. So let's create 
a variable called Game stat for game status.  
42:17 - So in our variables here, we're going to say 
const. Game stat for game status or game stat.  
42:24 - So initially, the game stat will be loading, copy 
this and let's go to our event listeners here. So  
42:30 - we are inside the if we're going to say if game 
stat to game stat is not equals to start it  
42:41 - then we don't want to do anything. 
So we're simply going to say return.  
42:46 - So now if I press the arrow key, as you can 
see, the ball does not move to inside the  
42:50 - Start function here is the start game, we can say 
game stat equals to start it. So game stat equals  
42:57 - true started. But I just realized that since we're 
reassigning to a constant, we'll it will give us  
43:01 - some error. So let's go back to our variables 
here. Instead of saying cost it will be late,  
43:06 - like so. So now once the game is started, we 
can press the arrow key to move like so. So now,  
43:12 - we pretty much have everything ready to go. Now 
we just have to implement again logic. Okay,  
43:16 - so now in the Player class, where is that so let's 
find it here is our player layer class, we were  
43:21 - going to create another function called stick. 
This will take the if the winner has crossed  
43:28 - the board or if the winner has lost. So basically, 
inside the update function, we can call the check  
43:32 - function. So let's say check this dot check. And 
since in the animation loop where keep calling  
43:38 - the update function, the check function will be 
also called again and again. So now what we want  
43:42 - to do is check if the door is facing forward 
and the velocity of our velocity of our player  
43:50 - is not equals to zero, that means the player 
was moving when the door was looking forward,  
43:54 - that means the player has lost. So let's try to 
do that. So first, we need to create a variable.  
43:59 - So let's create a variable called Create is 
looking backward, so is looking backward.  
44:05 - So by default, it could be true. So let's say 
true, it should be Easter looking backwards,  
44:09 - like so. So once that all looks backward, we want 
this to be true. Once I looked all looks forward,  
44:14 - we want this to be false. So let's see 
how we can do that. So let me copy this.  
44:18 - Inside the dual class, we have this look forward 
and look backward button. Let me delete this,  
44:22 - we don't need it. As you can see, it takes 450 
milliseconds for the URL to look backward. So we  
44:27 - can do a set timeout. So we can say set timeout. 
And we're going to run this function after  
44:33 - 450 milliseconds and after 450 millisecond what we 
can do is say is looking backward equals to true.  
44:43 - And let me copy this and let's paste it so Ctrl V, 
so here we want to say looking backward equals to  
44:50 - false. Okay, but even if the doll rotates just a 
little bit, we should be able to move so instead  
44:58 - of saying 457 Just say 150. So if the door has 
rotated just a little bit, we are free to move,  
45:04 - like so save. Now let's go to the players check 
function. So in the check function, we're going  
45:08 - to say if player, so we're going to say this dot 
Player Info, Player Info dot velocity, so velocity  
45:19 - is greater than zero. And that doll is 
looking forward. So we're going to say  
45:24 - if exclamation mark is dog looking backward. 
That means if the doll is looking forward,  
45:29 - in that case, we can say we can finally just say 
Are you lost. Okay, now let's try to play it.  
45:39 - So as you can see, when we try to move when the 
dog is looking forward, we lose so it is working.  
45:43 - And in the check function, we we also want to 
check if the player has successfully crossed  
45:47 - this line. So if the player's position 
x is greater than the ending position,  
45:51 - that means the player has won. So let's say if 
layer dot position dot x is less than Indian  
45:58 - position that then will say you want so let's 
comment this out for now. And let's try to move  
46:08 - and as you can see, it says you in 
after your position dot x is here,  
46:11 - so And because we said the balls X to one that 
the ball had to cross a little more space for  
46:17 - then the Starting Angle. So instead of saying 
we'll same position that x is less than this,  
46:21 - we can say position x is less than this 
last point for like so unless try to move.  
46:29 - So now as you can see, once we crossed 
this line, which it says you won't,  
46:33 - so now we can uncomment this, so control forward 
slash uncomment. Okay, let's try to play it.  
46:42 - Okay, it looks like we have a little bit of 
error. Let's fix that. So in this function  
46:47 - we have missed up in the loop backward function, 
this should say 150. And this one should say 456.  
46:53 - Instead, like so. So save it. 
Let's try to play it one more time.  
47:03 - It says you lose. Let's play one once more.  
47:15 - And as you can see, if we've successfully 
crossed the crack, it says you win.  
47:19 - Now instead of alert, what we want to do is, 
as you can see, if I try to see if I say okay,  
47:24 - that will keep coming. That is because that check 
function is being called again and again. So if  
47:28 - the player wins and lose wins or lose, what we're 
going to do is say game state equals two over.  
47:41 - And now let's go to the animation frame here is 
our animation stream. So we're going to say if  
47:50 - game state equals equals two, so game state 
equals equals two over, we're going to return  
47:57 - so we don't want to this function to be called 
ever again. So like so Okay, so let's save it.  
48:03 - And now let's try to run it. So once you 
lose, it says a lot zero in this and now we  
48:08 - can close it. And once you lose, you cannot move 
forward anymore. Okay, now let's make the test  
48:12 - text say you in if we and say lose if you 
lose, so let's do that. So let's go to our  
48:18 - check function. Here, we're going to say text 
dot inner text equals two. So text dot inner text  
48:28 - equals two, you lose. And here we can say, 
text dot inner text equals three, you win.  
48:33 - So let's try to run it.  
48:40 - Okay, let's delete the alerts, 
we don't need the alerts anymore.  
48:49 - As you can see, if we try to move it 
says you lose. So let's try to win now.  
49:01 - And now it says you want another thing we have to 
take a lease. But if the player runs out of time,  
49:07 - if he runs out of time when you 
say time over, so let's do that.  
49:14 - So inside the Start function, so 
let's go to the Start function.  
49:18 - Here, we're also going to do a set 
timeout. So we're going to say set timeout,  
49:22 - like so. And we're going to time run the function 
after that time limit is over. So a DC time limit,  
49:29 - times 1000. That is because our time limit is 
10, which is in second but that set timeout takes  
49:35 - time in milliseconds. That is why we were 
multiplying it with 100. So after that,  
49:39 - we're going to say we're going to say 
if the game state is not equals to over  
49:45 - that means the player have run out of time, but 
he couldn't clear this track. So we're going to  
49:50 - say x dot inner text equals to let's say you ran 
you ran out of time so you you ran out of time  
50:06 - Okay now let's see what 
happens if we run out of time  
50:19 - as you can see it says you ran 
out of time and we cannot move  
50:22 - any more we can do anything but if we refresh 
we can play again so let's try to play  
50:33 - oopsie we lost let's try to play one more time  
50:40 - we have lost again let's try one 
more time this time I'm going to win  
50:49 - Oh no, I have lost again. 
Let's try one one last time  
51:01 - and then we have won the game. 
So now everything is working  
51:05 - as intended. So now we have successfully 
created the red light green light game  
51:09 - from squeaking. I hope you enjoyed 
this video and you have created  
51:12 - yourself as well. Don't forget to like 
and subscribe and I'll see you next time.

Cleaned transcript:

Do you wonder what it would be like to compete in squid game? Well now you can find out what the JavaScript game you create yourself using three js. In this tutorial Shubho teaches you how to create a game from squid game with a 3d model. Today I have a really exciting project for you guys, we are going to create the red light green light game from the series quit game. So if you haven't watched that series, yet, the way this game works is you have this doll, and you are given a specific amount of time. And in that time, you have to move from this corner to this corner. But the catch is you can only move when she's not looking at you. If you try to move when she looks forward, you will be eliminated. So let's see that in action. So if I refresh the game, we'll start the game has started and we can move, we can press arrow key to move. But if we try to move on, she's looking forward. As you can see, it says we lost. So that's rules. Let's try to win this game. And there we have won the game. So this is a really exciting project. I hope you're equally excited as I am. So make sure you like the video if you haven't already yet. And let's get started. Okay, to create this game, we're going to be using three js three. JS is a JavaScript 2d library, it uses web GL to render graphics on the canvas. This is really powerful and easy to get started. So if you have no experience with three js, don't worry, because we'll be doing a lot of copy pasting from the documentation. And I'll be going over the course briefly. Okay, so let me close this window. And in my file explorer, as you can see, I've created a folder called squid game that will we'll be working on this folder. So let's open it up with VS code. So click on Open with VS code. And now we're going to create the index dot HTML file. So let's say index dot HTML. And we're also going to create two folder one is js for the JavaScript file, and one is CSS for the CSS file. So CSS like so. Now in the CSS, let's created style dot CSS file. So let's say style dot CSS, and in the JavaScript, we'd need a main.js file. So new file, main dot J's. So now they're seeing them in our HTML. First, let's create the basic markup. Let me close the sidebar CTRL V to close the sidebar, exclamation mark tab, and it will create the basic boilerplate here, let's link our stylesheet. So let's say link. And Asia rep will be CSS for slash style dot CSS. Also link our JavaScript. So let's say script source equals to j s forward slash main.js. Like so. And let me open it up with our live server. So click on Open with live server. And it will open in localhost colon 5500. Okay, now we want to use three J's in our project. So let's download the three J's. So go to go to your chrome and search for three js GitHub. And the first link will take you to the GitHub page of ujs. So from here, click on the Build button, and then click on the three dot main dot j s. So dot mean basically means is the compressed version, it will load faster. Now click on the roll button. After that, you can click CTRL S to save it. And we want to save it in our project folder. So navigate to your project folder, go to the JavaScript folder and when to save it as three dot main dot j, so click on save. Okay, now if we if we open up our sidebar, and in the JavaScript folder, we'll see we have the three dot main dot j. So let's let's link that file. So we're going to say script source equals to j s four slash three dot main dot j s like so. Okay, now let's go to the three js documentation page. And here, click on the documentation. And in the documentation page, you will see we have a lot of course that we can copy paste to get started. So let me copy all this course Ctrl C, and paste it CTRL V, like so. Let me close the sidebar again. And now if you go to our page, you will see we have this blank canvas. So let's see what's happening. So first, we're creating a new scene by saying New three dot scene. So scene is basically what we see. To see it we need a camera. So in the second line, we're creating a new camera by saying New three dot perspective camera. So we have many types of camera, the perspective camera is most basic. So the documentation if we search for that, there is a perspective camera as you can see that the perspective camera takes four arguments, the fob, the aspect, the near and far. So this will make sense if you're into photograph graphy or camera. Otherwise, you can leave this default, this will work just fine. Then we're creating a renderer. So the renderer is what is used to render all the graphics in our canvas. Then we're saying render dot set size, and passing window dot inner width and window inner height. So basically, we're saying the renderer should be the size of our window. And then the rendered DOM element will give us the canvas and we're appending that Canvas to our document body. So if we save this, we get this blank canvas and but we have this little whitespace on left, top and left. So let's try to remove that in the CSS. So let's say target everything. And we're going to say the margin should be zero and padding should be zero. So margin zero, and the padding can also be zero. If we save this as you can see, now the whitespace is gone. Okay. Now let's try to add a shape in our scene. So let's see. Let's go back to the recommendation. So if we scroll down, actually if you go back and then scroll down as you can We have some more code. So let me copy all of them again Ctrl C ctrl v. So first, we're creating a box geometry. So in 3d world, the shapes are basically geometric, we have many types of geometry, we have box geometry, we have sphere geometry, you have cylinder geometry, we have polygon, etc. So the box is the basic geometry, we use Box geometry to create cubes. So a geometry is made out of triangles or vertices. So we need to wrap our geometry ins with a material. So there are many types of materials. But for now, we just want to give it a color. So we're using the MeSH basic materials, which is basically just a color. So we're specifying the color here. And then we're creating the mesh by combining the geometry and materials here. And finally, we have to add that cube to our scene. So we're saying scene dot add cube. So if you now save it, and open up the browser, open up that in browser, as you can see, we can see that is because every time we add something to our scene, or update something, we have to call the renderer dot render function, and we have to pass the scene on camera. So now if we save it, as you can see, now we can see this, see the cubes. Now by saying camera dot position dot z equals to five, we were basically specifying how far from the scene should be on camera. So if I were to make it make the number smaller, now the camera is more near to the scene, so it appears bigger if we're to make it bigger. Now the camera is more fat, so this object appears to be smaller. So, so five is a good number. So let's leave it at five. So every time we add a shape to our scene, or update anything, we have to call the renderer dot render function, but manually calling this can be a pain, which is why we use this code, this block of code. So let me copy this and then I will explain to you and paste it here. So first, we're creating the animate function in the animate function, we are calling the renderer dot render, and we're passing scene and camera. So let me just move it down. I like to, I like to put it in the in the very bottom, but it doesn't matter really. Okay, so what is happening in the request animation frame, we're passing the animate function. So what the request animation frame will do is call the animate function again and again. So if I were to console log something here, so whereas if I say console dot log Hello world, and in the browser, if I now open the console, you will see hello world is being printed again and again. So basically, the animate function will be called again and again. So now we don't have to manually call this function called our renderer dot render function here. Okay, now let's look at some animations, we can animate our cube, so let's try to animate our cube. So in the animate function, we can say something like you've got rotation, cube dot rotation, oops, cube dot rotation, that x plus equals 2.01. So basically, you keep increasing the rotation dot x. So if we now save it, as you can see, our cube is now rotating in the x axis, if we were to say rotation dot y, it would rotate in the Z axis, if we had to say rotation, but it's it, it will rotate in the Z axis. So the number basically specifying how fast it should rotate, so if we were to make it point five, now it is faster if we were to make it even smaller. Now it is rotating very, very slowly. Okay, let me remove this group code. And let me remove this actual it, just comment it comment this out for now, so we don't want the cube. Instead, what I want is the doll. So how we can create the doll. So so in the SketchUp, I have found this 3d model of the doll. So this guy created it, and he is allowing us to use it for free, so you just have to create an account in SketchUp. After that, you can click on download 3d model and download the glTF version. So click on Download, and it will start downloading it. By the way, I will leave the link to this page in the video description. And I'll also leave the link to the finished code in the video description. So you will be able to get everything from there. So if you decide to follow along and get stuck, you can refer to that code. Okay, let's wait for this to finish. Okay, the download is now complete, so we can right click and click on show in folder. And then I'm going to click on extract files. And let's say the folder name should be models. So let me rename this to models. So now this the file has been extracted in this model folder. Here we have all the files. So let me click on the Cut. And let's put it in our project folder. So So my project is in www folder. And then inside duck squid Game dot and I'm going to paste the folder here, so click on paste. And we can close the file explorer now and close this tab. And if we open up our sidebar again, you see we have now had this Models folder inside that we have the files for the 3d model. So now let's see how we can use the 3d model with three js. Okay, if I go to the documentation page again and search for glTF. Here you see the glTF loader click on this. And this again gives us some example on how we can load a 3d model. So let me copy this, copy this line of code. So Ctrl C, and Ctrl V. So first, we are creating a new glTF loader model. But to be able to use this glTF loader, we have to first add it to our JavaScript. So again, go to the three js GitHub page And then click, click on the examples. And then the and then click on JavaScript folder. After that, go to the loaders. And here you will see the glTF loader. So click on that. And again, we can click on the roll button and press Ctrl S to Save it. So where to save it as glTF loader dot j s to save. As you can see that glTF loader has been added to our project. So let's link it in our JavaScript also. So let's in our HTML also, so let's say script source equals to this time it will be j s forward slash glTF loader dot j s, like so. Now this lead here would have worked if we were to install the glTF loader with NPM and imported it. But since you're using since we're using the regular script file, instead of just saying glTF loader, we have to say 3d glTF loader so simply say three dot glTF loader. And now this should work. Let's see what next we have to do. So after that, we have to call the loader dot load function to load our 3d model. So let's do that. So we can say loader loader dot load. And here we have to, we have to specify the path to our 3d model. So our 3d models file is in the Models folder. After that, we have the scene dot glTF. So let's say dot dot forward slash. Since we are in the JavaScript folder, we have to go one folder up then in the Models folder. So that's why we're saying dot dot forward slash models. And then we're going to say scene scene dot glTF. Now this loader dot load function will load this glTF. And once the loader is loaded, we will have a callback function executed. So this callback function. So let's create the body of this function here so that this callback function will receive the loaded glTF. So let's call it glTF. And then we can say scene dot add glTF dot scene. And now if we save it, and go to the project, as you can see, we can see nothing. Let's see, why is that let's open up our console. So we don't have any error, but we still can see it that is because currently in our scene, we don't have any light, we need a light to be able to see objects or models. So let's add some light. So again, let's go to the documentation and search for light. In three js, again, we have various type of light, but the most basic light is the ambient light. So click on the ambient light. And let's copy this code again. And let's paste it. Let's say let's paste it here. CTRL V. So first, we're creating a new ambient light. And then here, here, we're specifying the color of our light. In CSS, you may have said hashtag 404040. But in JavaScript, we simply say 0x, and then the code so this is the code and we can delete this comment, we don't need it. So now if we save this, and go back, and as you can see, we have this doll. Okay, so let's change the light color to white. So let's say FFF, FFF. And now we can see the doll much clearer, but the doll is very big. So let's scale it down. So we're gonna say see glTF dot scene, dot scale. So we're gonna call the scale function. And we're gonna say dot scale dot set, we have this called the set function to set the scale. Okay, now since we are in a 3d world, we have three dimensions. And let's say we want to scale it to 0.4 on all dimensions, so let's say point four point 4.4 likes and now if we save it, it should be scaled. So it's the spelling is SCA. Now if we save it, as you can see, now the dollar is a lot smaller but but one problem you'll see is if I try to resize my screen, as you can see that square Canvas does not resize. Okay, let's try to make this responsive to make this responsive. We're going to use this block of code. So let's see what's happening. So first, we're saying window dot add event listener. We're listening for the resize event, and we're calling this function. So whenever we will resize our screen. So if we resize our screen, this function will be executed. And now let's see what we're doing in this function. So first, we're saying camera dot aspect equals to window dot inner width divided by window dot inner height since basically we have besides our screen, now the aspect ratio of screen has been changed. So now we are setting the aspect ratio to the new aspect to the new aspect ratio of our screen. And now since we have changed the aspect ratio, we have to call the update projection matrix on the camera. And finally, we have to say render dot set size and to unset the size to the new window dot inner width and windowed inner height or the current in our width and height of our window. So if we now save it, and now if we resize our window as you can see now that Canvas also resizes. Okay, now let's bring the door a bit down. So we can see glTF so let's say glTF dot scene dot position dot set. And here we can set the position in the X, Y and the Z axis so we understand the position in Z axis. So let's try one so if we say one, it goes up but we don't need to come down. So instead, we can use negative one. And negative one should be good enough. Now let's try to change the background color. So to change the background color, we're going to say renderer. So we can oops, to do that, we can say renderer dot set clear color. So set clear car car. And here we have to say this specify a color. So I have already chosen a color, let me use that. So the color I have chosen is B seven, C, three, f three, if we now save it, as you can see, now we have this bluish color. And the second argument is basically the opacity of the color. So you add one or full opacity, okay? Now, instead of just loading this loading the model like this, I want to create a new class called doll. So we can have some methods inside that class and easily call them. So let's create a class called doll. So we can say class doll. Inside that, we are going to have a constructor function. So I can say constructor. And let me cut all this code. So cut and paste it here. CTRL V. So if we now save this, that doll won't be visible in the screen anymore. That is because we have to create a new doll object. So let's try to create a new doll object. So let's say let doll equals to new doll. So now if you save it, now again, we see this doll and also where we I want to say this dot doll. It should be doll because this glTF dot scene so like so. So now we can have some method in this class with a stick, let's create a method called loopback. So look, back, this will make the dog look at the backside. So so in this function, we're gonna say dollar dot rotation dot y to some value. So let's try one. So now if we were to say dollar dot look back, so dollar dot look back, let me call the function and save it. And now if we look at our console, you'll see we have some error that that is saying cannot read properties of undefined. So there is two reasons for that. So first reason is, it takes some time for our model to load. So let's use a set timeout. So we can say set timeout. And let's say we're going to call this function, we're going to call the dollar. So we're going to call that dollar look back after, let's say one second. So 101,000 millisecond, if we save this, we'll see we again have some error. So it is saying cannot read properties of undefined. That is because we have used the regular function here. So if you use regular function, it creates its own context. So now that now inside the function, we're saying dot, this dot dollar, we're saying this function dot ball, so we want this, we want this to point to that this point to this class, so we can use a regular function, we're going to use an arrow function, like so now, if we save this, after one second, as you can see, that all rotates. So let's try, those should rotate to let's say negative one. And now let's try negative two. Okay, I think negative 3.15 will make the doll look backward. So now as you can see, if we call that look back function that looks at backward, so we can also have a doll dot look forward function. So we can say look forward. We can say look forward. And actually, let's call it backward, not back. So the look forward function will simply say this dot dot dot rotation equals to zero. So now if you had to say dollar dot look forward, and call it, as you can see, that all looks forward. And if we were to call doll dot look backward, so look backward, that doll will look at the backwards backside. But now as you can see, that doll rotates all of a sudden, but we want, we want the doll to rotate slowly, gradually, or animate. So for that, we are going to use an animation library called G SAP. So simply go to Google and search for G SAP. And this is the official site of deception. So G serve is a really powerful animation library for Java scripts. So click on the get started here. And from here, if we scroll down, as you can see, this gives us a CDN link. So I'm going to copy this link Ctrl C and paste it CTRL V. So again, click CTRL S to save it, so to save it as g sub dot main dot j s save. Okay, now let's open up our sidebar again. And in the JavaScript folder, as you can see, now we have this G said dot min dot j, so let's add it to our HTML also. So again, we're going to say script source equals true, it will be j s forward slash G SAP dot mean dot j s like so if we now save it, there's close this tab. We don't need it anymore. And let's close our sidebar by saying Ctrl B. Now in the main dot j s, so here instead of saying dollar dot rotation dot y equals to three point, negative three point something, let me comment this line out. And here instead of this we're going to use the GCF. So here we're going to say G dot To the object to the object we want is the dollar rotation. And the property way we want to animate is the y. So we're going to animate the rotation dot y. So the rotation dot y should go from zero to negative 3.15 in one second. So that's, that's what we're doing by saying G sub debt. So if we now save it, as you can see, now, now that all enemies smoothly, so let's try to see point four, five, so in 450 milliseconds, now it takes 450 milliseconds for the doll to rotate. So now let's do the same for the forward function. So Ctrl C, and paste it here. Here we enter, animate from negative 3.15 to zero, like so. So now if we open up our console, and call the dollar look forward function, it looks forward, but it animates forward direction. If we were to call the look backward function, it looks backward, but But it's rotating smoothly. So this is much better now. Okay, now let's create the track that the player have to cross. So let's say let's create a function for that. So let's say function. And let's call it create track. So create, track. And create rec function will create the truck to create the trip, we are going to use cube, so we're going to use like three cubes. So to create cubes, we know we have to do all these. So let's create a utility function for that. So we're going to say function, create cube, so create cube. In this function, we can simply copy these codes. So Control X and CTRL V. let me uncomment this and fix the indentation, like so. Okay, now let's try to call this create Q function in our create drag function lives. So let's me. So let's call that function here, like so. And let's call the Create rec function, also create trek. If we now call the function and save it, as you can see, now we have this cube. Okay, let me comment out the code for the doll for now. And now if we save it, as you can see, we have this cube, but we don't want the queue to be the size, we want to specify the size. So let's see how we can do that. So let's again go to the box geometry, so we can say box geometry. So as you can see, when creating the geometry, we can pass arguments so so we can pass the width, the height and the depth of our cube. So let's do that. So in the Create your function, we are going to receive argument called size. And when creating the box geometry, we are going to pass the size dot height, we're going to pass the size dot w for width, size dot h for height, and size dot d for the depth. Okay, now way we're calling the acuity function, let's pass the size. So we're going to say the width should be the width should be, let's say, point two, so it will be a skinny cube. And the height can be let's say, 1.5. And the depth can be one. So let's say d equals to one. So now if we save this, this is how our cube looks like. But now we want one cube to be on this side and one cube on this side. So the function will also take a position. So let's say position x, and inside the function, we're going to say cube dot position dot x equals to position x. So now in the function, if we were to pass some position, so let's say the position, x can be, let's say three. Now it is in this side, if we were to say negative three, it will be on this side. Okay, let's create some global variables. So I'm going to create global variables here. So let's add a comment here, specifying that were creating global variables here. So let's say global variables. And we are going to have one global variable for start position. So here, let's say we are going to have a variable called con start, underscore post, underscore position. And let's say the start position will be three and the imposition will be negative three, or we can say negative start pause for negative three, like so. Actually, this should be in position, so let's say in underscore position like so now where we're calling the Create Q function, we can pass the start position, and if we save it, we got a cube on the on this side, and we can also call this function again, the same we're gonna pass the position x as in position. Now we have one now. Now we have one cube here, but now the cube is kinda rotated. So let's fix that. So let's say our create Q function will also take a take argument called wrote x for rotation X. And by default, it will be zero like so. So now inside the body, we can also say cube dot rotation dot x equals to Vertex like so. So let's try to rotate it. So let's try to rotate our cubes. So let's say the first cubes rotations would be let's try point four. Okay, Okay, so it looks like their cube is being rotated in their own axis. So let's fix that. So let's call it y, and we want to rotate it rotate the Y. And we're going to say rotation dot y equals to what y like so. So the saying point four is making it even worse. So let's say negative point four. Now it's looking much better. Let's try point three. Let's try point three, five, actually. And yeah, point three, five should be good enough so and for the in, and for the second cube, let's copy this, and this time, it will be positive point three, five, like so Ctrl V, and for this cube, the position x will be zero in so it will be in the middle. So now we have this cube here. So now we have this cube in the middle. Let's also say rotation should be zero. And for this one, let's say the width will be starting position, times two. So if we do this, we will have a cube that spans from the side to the side. So let's give it a different color. Okay, so let's say our creative function will also take a color as this argument. So let's say color. And the default color will be let's say, z 0x, and the hexadecimal value, so the color I want is F, A, B, C 851. So now, here, instead of saying color equals to hashtag this color code, we are going to spot I'm going to say this will be the color that we pass in the while calling the function so color. If we now save it, as you can see, now our cube is this orange color. Okay, the cube is on top of other cubes. So now create your function. Now, we are also going to region the created cube, so we are going to say return cube, like so. Okay, so this is our biggest cube this one, so let me just put it on top of other two. And now since we're returning the cube where we can say this dot position dot z equals two, and let's say the position dot z will be negative one. So if we now save it, this is how it looks. Okay, instead of saying point one list, instead of saying negative one list ending at point A. And point negative point eight works perfect. And also for this one, let's change the color. So there's past a color here. So the color I have chosen is E five is 716. So this is basically a darker orange color, like so. So now Let's uncomment the noodle function here. And it looks like the doll is getting overlapped with the cube. So let's say so let's say the position z will be negative one. So if we now save it, now it looks better. But now we have this gap. So in so whereas specifying the width, let's also add some more value here. So let's say point two. So now it is spanning from starting position to ending position like okay, now just like the doll, let's create a class for our player, which will be just a circle. So let's create a class called player. So I'm going to say class player. And in the constructor function, so let's say constructor. So for the player when to create a sphere, so let's go to the documentation page and search for sphere. And here is the sphere geometry. So let's copy the codes Ctrl C, and we can paste them here. And now instead of box geometry, we're using the sphere geometry, the sphere geometry takes the radius, the height segment and width segment, and then we're creating the sphere with them geometry and material like so. So now let's save it go to our page. Let's try to create a player so let's say const player. So we are going to say const player. If we now save it, we still can see the sphere. That is because the sphere is too big. So let's so let's say the radius should be let's try just one. So here is our sphere. This is still too big. So let's say point four. Or let's say point two. Or let's say point three. And point you should be good for the color. Let's try the white color. So let's say fff FFF. So now we have this white sphere. Now the position of the sphere should be in here. So let's say sphere dot position dot x. So sphere, that position dot x equals to the start position, like so now I want to create a function called Run and if we call the run function, the sphere should start moving so we're going to create a function called Run. Now before doing that, let's just say this dot player so this dot player equals to sphere and we also want to know some info about the player. So we are going to say these dot info are these are Player Info. These are Player Info will be our object. So here we're again going to say and we're going to say position x equals to start position. So basically, where the sphere is currently, so currently the sphere is here. So by saying position at x equals to start position, we also want the velocity, so we're going to say velocity. And we're going to say the velocity should be zero. So velocity is basically speed. So if the velocity is zero, the sphere won't move. But if the velocity is one, the sphere will move with a speed of one. So we also want a function called Update. And inside this function, first, we're going to say this dot Player Info dot position x plus equals to this dot Player Info dot velocity, so keep increasing the players position x. And then we're also going to say this dot player dot position x equals to that this dot equals to this dot player dot position x. And we have to keep calling the update function. So in the animate function here, we were also going to say player dot update, like so. But now the sphere is not moving. So if we were to say the velocity is point 01, now the sphere moves in that direction. So instead of adding, let's abstract, so minus equals two. And now as you can see, the sphere moves in that direction. But initially, we want the velocity to be zero. And when we call the run function, the velocity is, well city should increase so we can say so in the run function, we can say this dot player dot velocity equals 2.3. Point 03, like so. So if we save it, and then if we open up the console, and call the player dot run, so if we were to say player dot run. As you can see, the sphere is moving, but we want to call the run function, when we press our up arrow key. So let's do that. So we are going to use some event handling here. So we're going to say window dot add EventListener. So we're going to say window dot add event listener. And we're going to listen for the key down event. And here for now, they just say alert e dot key, like so. So now if I were to press some key, it enters the key if we press so if I were to press the up arrow key, it says up arrow. So here inside this function, we're going to check if we press the up arrow. So we're going to say if u dot key equals equals to arrow up. If it is, then we want to call the player dot run function. So we're going to say player dot run. So now if I save it, and now press A, press the up arrow, as you can see, the player starts moving, but when I release my finger from the up arrow, we want the player to stop running. So let's create a function called stop. So here is our question, let's create a function called stop. So in this function, we are going to say this dot Player Info dot velocity equals to zero, so we're setting the velocities to zero, so there is stop moving. So now we're also going to listen for the key event. So copy this, and here we are listening for the key up. So the key down is when you press down arrow, and key up is when you release that arrow. So inside here, instead of calling the run function, we're going to call the Stop function like so. So if we now save it, and press our arrow key, it starts moving. And if you release our arrow key, it stops moving. Now, to make this a little bit more interesting, what we can do is instead of making the player stop, all of a sudden, we can make it so it takes some time for the player to stop. So we can do G sub the two, we can say this dot Player Info, and we want to animate the velocity. And let's set the duration to be for now, let's say one, like so. So if we press the arrow key, the ball starts moving. But if we release that, okay, the ball moves for a while and then stop. So this will make the game even harder and more interesting. But instead of duration to be one, one is too long, let's say point one, so 100 milliseconds. So it will take 100 millisecond for the player to stop running, which will make the game a little bit more interesting. And let's delete this comment. We don't need it. Now I want to show a text here. So let's create a text. So you can create a text with three js as well. But I'm going to use a regular HTML text. So I'm going to have a paragraph text with a class of text. And here we can say for now we're just loading like so. So here is our text. Now you can see the canvas is pushed down, but we want that text to be on top of the canvas. So we're going to say our text to have a position of thing. So let's say dot text, to have a position of fixed. And let's say they should have a font size of let's try 50 pixel, like so. And let's also say the font family to be Arial. Like so let's say font weight will be bold, font weight, bold, like so and Let's center it so we can say lift to 50%. And we're also going to go into say transform, it was to translate X Translate X and it will be negative 50%. So now if we save this, as you can see our text is in the center and You can see our text is in the center. So let's also say that top should be 10 pixels. So let's say top to be 10 pixels 10 pixel, like So also you want some shadows. So let's say text shadow. So let's say it takes the shadow, and it says zero pixel from the x axis to pixel from the y axis. dabbler can be five pixel and lazy, let's use some dark colors to say RGBA, 000. And opacity can be let's say, point three, two, now, that takes us a little bit more visible. Okay, now I want to create a method in our doll doll class. So inside the doll, I'm going to create a method called Start. So start, what this method will do is that also that all will look backward for some time, then it will turn around and look forward for some times and again, do the same. So let's do that. So in the function, first thing we're going to do is say look backwards. So let's say look backward, so this dot look backward. And now we want the doll to keep facing backward for some time. So we want to use some delay here, or we want the execution to be stopped for some some time. So I'm going to create a function called delay. So function called delay. And what this function will do is take time as its argument, and then return a promise that will resolve after the given time. So we can use this to stop execution of our codes for a while. So now we can make our Start function asynchronous by saying async. And here we can say our delay. And let's say we want to delay for one second. And after one second, we want this to look forward to we're going to say this, look forward, and then I can do a delay. So we're again going to say our delay, and let's say 1000 seconds also. And then we're going to call the dessert start function. So this dot start. So as you can see, this is a recursive function. Okay, so now in the set timeout, so why is the set timeout instead of saying dollar dot look backward, we can say dollar dot start. So if we were to say dollar strat, you'll see, that all looks backwards for a second then turns around and looks forward for a second, like so. But instead of saying, once again, once again, we can use a random number. So this will make the game more hard and less predictable. So let's do that. So let's say the time should be math dot random, so we're going to say math. So we're going to say math dot random, and we're going to say 1000 seconds, this will give us a number between zero to 1000. And if we were to add, and if we were to add 1000 to eight. Now we'll get an, we'll get a number between 1000 to 2000. So that all will look backward for one second to two seconds. So if we now save it, that all looks backward for a random amount of time, we can do the same for the look forward. So let's copy this Ctrl C and paste it here. So this time, let's say 750 to 700, and plus 750. So this will look forward for 750 milliseconds to 1.5 seconds, save. And now the dog looks at forward and backward for a random amount of time. So this is more hard and predict unpredictable for the US player. So now our dog looks at forward and backward for an amount of time, and we can press the arrow key to move out there. So now we're ready to implement the game logic. So first, I'm going to create a function called init. That will initialize the game. So let's create a function called in it. This will also be an asynchronous function. So async. So here first, what we'll do is delay will use our delay and will delay for let's say, 500 millisecond. And after that, that takes should say, starting in three after some time that takes should settle starting into studying in one and then go so first, let's target our texts or TextEdit class of text to let's create that. So let's say const text equals to document dot query selector and our text had a class of text. So dot txt takes like so now let's go to our init function. And inside the function, let's say takes dot inner text equals two, we're going to say starting. So starting in three, like so. So now let's call the init function. So in a save, and as you can see, now it says starting in threes, so let me copy this three more times. So after 500 milliseconds, we'll say starting in two, and after that, it will say starting in one, and then it will say study, and then it will say go, so the game will start. Save it as it as you can see, say starting in 321, go and after that, we're going to call a function called Start Game. So start game. And let's create that function. So function start game. So inside that function, we're going to call the dollar dot start. So let's, let's delete this now. And we're going to call the dollar start here. So we'll say dollar dot start. So now if we save it, as you can see it says loading 321 And after that, that all starts moving around or turning around whatever you want to say. Okay, now let's also show our progress bar. So the progress bar will just be a cube. So I'm going to say let progress bar, because we are going to again call our cue function. So create cube, so create cube. And for the Create cube, the width will be let Fave eight, the height will be, let's say one. So height equals to actually, let's say point one, and the depth will be one, like so. So if we save it, we have some error. That is because you also have to pass a position. So let's say position x should be zero, save it, okay, this should be d equals to one, a depth equals to one, save it. So now we have this progress bar here, okay, the weight is too much. So let's say which, which would be five. Here is our progress bar we and the progress bar to be in the top. So let's say. So we're going to say progress bars are positioned at y equals 3.35. If we save it, as you can see here is our progress. But now we need to make it functional. So as time goes by, we the progress bar should decrease. So let's create another constant. So let's go to our variables here. And let's create a constant. So we'll say const time limit so that this will when the time limit for our game. So time underscore limit. Let's say that time limit should be 10 Second, and now in the Start function, where is the start function? Let's find it out. So here is our start function so that we can again use the G SAP so we can say G SAP dot two, and we want to animate our progress bar, so let's say progress bar dot scale, so we're going to say dot scale. So we're going to set the scale x to zero in the time limit are in 10 seconds. So if we now save it, as you can see, the progress bar starts shrinking down. Also, we can specify easing function here. So we can say is equals to none to be linear, like so. So save it. And now the progress bar moves, okay, one thing you will notice is the player can start moving even before the game is started. So like, as you can see, I can move before the game he has started, so we don't want that. So let's create a variable called Game stat for game status. So in our variables here, we're going to say const. Game stat for game status or game stat. So initially, the game stat will be loading, copy this and let's go to our event listeners here. So we are inside the if we're going to say if game stat to game stat is not equals to start it then we don't want to do anything. So we're simply going to say return. So now if I press the arrow key, as you can see, the ball does not move to inside the Start function here is the start game, we can say game stat equals to start it. So game stat equals true started. But I just realized that since we're reassigning to a constant, we'll it will give us some error. So let's go back to our variables here. Instead of saying cost it will be late, like so. So now once the game is started, we can press the arrow key to move like so. So now, we pretty much have everything ready to go. Now we just have to implement again logic. Okay, so now in the Player class, where is that so let's find it here is our player layer class, we were going to create another function called stick. This will take the if the winner has crossed the board or if the winner has lost. So basically, inside the update function, we can call the check function. So let's say check this dot check. And since in the animation loop where keep calling the update function, the check function will be also called again and again. So now what we want to do is check if the door is facing forward and the velocity of our velocity of our player is not equals to zero, that means the player was moving when the door was looking forward, that means the player has lost. So let's try to do that. So first, we need to create a variable. So let's create a variable called Create is looking backward, so is looking backward. So by default, it could be true. So let's say true, it should be Easter looking backwards, like so. So once that all looks backward, we want this to be true. Once I looked all looks forward, we want this to be false. So let's see how we can do that. So let me copy this. Inside the dual class, we have this look forward and look backward button. Let me delete this, we don't need it. As you can see, it takes 450 milliseconds for the URL to look backward. So we can do a set timeout. So we can say set timeout. And we're going to run this function after 450 milliseconds and after 450 millisecond what we can do is say is looking backward equals to true. And let me copy this and let's paste it so Ctrl V, so here we want to say looking backward equals to false. Okay, but even if the doll rotates just a little bit, we should be able to move so instead of saying 457 Just say 150. So if the door has rotated just a little bit, we are free to move, like so save. Now let's go to the players check function. So in the check function, we're going to say if player, so we're going to say this dot Player Info, Player Info dot velocity, so velocity is greater than zero. And that doll is looking forward. So we're going to say if exclamation mark is dog looking backward. That means if the doll is looking forward, in that case, we can say we can finally just say Are you lost. Okay, now let's try to play it. So as you can see, when we try to move when the dog is looking forward, we lose so it is working. And in the check function, we we also want to check if the player has successfully crossed this line. So if the player's position x is greater than the ending position, that means the player has won. So let's say if layer dot position dot x is less than Indian position that then will say you want so let's comment this out for now. And let's try to move and as you can see, it says you in after your position dot x is here, so And because we said the balls X to one that the ball had to cross a little more space for then the Starting Angle. So instead of saying we'll same position that x is less than this, we can say position x is less than this last point for like so unless try to move. So now as you can see, once we crossed this line, which it says you won't, so now we can uncomment this, so control forward slash uncomment. Okay, let's try to play it. Okay, it looks like we have a little bit of error. Let's fix that. So in this function we have missed up in the loop backward function, this should say 150. And this one should say 456. Instead, like so. So save it. Let's try to play it one more time. It says you lose. Let's play one once more. And as you can see, if we've successfully crossed the crack, it says you win. Now instead of alert, what we want to do is, as you can see, if I try to see if I say okay, that will keep coming. That is because that check function is being called again and again. So if the player wins and lose wins or lose, what we're going to do is say game state equals two over. And now let's go to the animation frame here is our animation stream. So we're going to say if game state equals equals two, so game state equals equals two over, we're going to return so we don't want to this function to be called ever again. So like so Okay, so let's save it. And now let's try to run it. So once you lose, it says a lot zero in this and now we can close it. And once you lose, you cannot move forward anymore. Okay, now let's make the test text say you in if we and say lose if you lose, so let's do that. So let's go to our check function. Here, we're going to say text dot inner text equals two. So text dot inner text equals two, you lose. And here we can say, text dot inner text equals three, you win. So let's try to run it. Okay, let's delete the alerts, we don't need the alerts anymore. As you can see, if we try to move it says you lose. So let's try to win now. And now it says you want another thing we have to take a lease. But if the player runs out of time, if he runs out of time when you say time over, so let's do that. So inside the Start function, so let's go to the Start function. Here, we're also going to do a set timeout. So we're going to say set timeout, like so. And we're going to time run the function after that time limit is over. So a DC time limit, times 1000. That is because our time limit is 10, which is in second but that set timeout takes time in milliseconds. That is why we were multiplying it with 100. So after that, we're going to say we're going to say if the game state is not equals to over that means the player have run out of time, but he couldn't clear this track. So we're going to say x dot inner text equals to let's say you ran you ran out of time so you you ran out of time Okay now let's see what happens if we run out of time as you can see it says you ran out of time and we cannot move any more we can do anything but if we refresh we can play again so let's try to play oopsie we lost let's try to play one more time we have lost again let's try one more time this time I'm going to win Oh no, I have lost again. Let's try one one last time and then we have won the game. So now everything is working as intended. So now we have successfully created the red light green light game from squeaking. I hope you enjoyed this video and you have created yourself as well. Don't forget to like and subscribe and I'll see you next time.
