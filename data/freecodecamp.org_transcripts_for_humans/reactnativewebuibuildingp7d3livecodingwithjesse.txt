With timestamps:

00:09 - hey everybody welcome to live coding
00:11 - with jesse i'm jesse
00:13 - and today we're going to work on the
00:16 - react native web app that
00:19 - we started
00:22 - two a couple weeks ago i don't remember
00:24 - when we started it
00:25 - um let me know
00:27 - what the stream quality is like
00:32 - last time we had really good quality but
00:34 - the time before that it was terrible so
00:36 - hoping we have good quality again
00:39 - all right and youtube's telling me that
00:42 - the quality is okay so i hope that's the
00:45 - case
00:48 - um
00:49 - all right cool so it looks like it's
00:50 - looking good
00:52 - uh hey everybody uh in the chat
00:56 - and
00:57 - all right so i'm gonna go ahead and get
00:58 - started and then i'll go back to the
01:00 - chat if you've never joined in before
01:02 - this is how it works uh i will
01:05 - do uh pomodoro sessions so let me get a
01:08 - pomodoro timer running
01:11 - um
01:12 - let's go
01:18 - this is fine
01:20 - there we go tomato timer will work
01:22 - so
01:24 - i'm going to start this pomodoro timer
01:26 - it's 25 minutes when 25 minutes is up
01:29 - i'm going to stop coding and i'm going
01:30 - to answer some questions okay we're
01:32 - going to try to get through two pomodoro
01:34 - cycles uh see how that goes uh and then
01:37 - at the end of both pomodoro cycles if
01:40 - there are any questions left i'll answer
01:41 - those
01:42 - and uh if it starts to go
01:46 - really long i will have to cut it off
01:48 - and
01:50 - so i may not be able to answer all the
01:51 - questions depending on how many
01:52 - questions we have
01:54 - because i'll have to go to my normal
01:57 - day job as a software engineer
02:01 - all right so let's check out what we
02:02 - have so far here's the actual app
02:05 - so
02:06 - this is as far as we got last time uh we
02:10 - just have a an input a button
02:13 - and a title on the page but the cool
02:16 - thing was we did all this in react
02:18 - native and it's showing up
02:20 - uh in
02:24 - in like dom primitives basically so
02:26 - these are divs right um
02:29 - so that's
02:30 - that's the idea behind react native web
02:32 - you can write in react native
02:35 - and render it
02:36 - as a web app
02:38 - and you'd be able to render it
02:41 - not only as a web app but since it's in
02:43 - react native you can render that same
02:45 - code
02:47 - uh
02:48 - you can
02:49 - i don't know if render is the right word
02:50 - when we're talking about mobile but
02:52 - uh basically that same code could be
02:54 - used to make an ios app
02:57 - and an android app and potentially other
03:00 - things as well
03:02 - um so let's go to the code
03:07 - all right hopefully that's all big
03:09 - enough for you the only thing that's
03:10 - blocked out by my face right now is just
03:13 - the uh the terminal that that actually
03:15 - is running the local server so
03:19 - not really anything there that
03:21 - would be useful to see
03:23 - let's give ourselves a little bit more
03:25 - space for code
03:28 - all right so you can see our package
03:30 - json at this point is very very basic we
03:33 - have react
03:36 - react dom and react native web react
03:39 - native web includes
03:42 - react native so that's why we don't
03:44 - actually have react native here
03:47 - in our our main dependencies
03:53 - this package json will grow as we
03:55 - continue and uh eventually if
03:58 - we we'd like to turn this into a mobile
04:00 - app as well so it it'll get a lot more
04:03 - complex but right now it's it's pretty
04:05 - simple
04:06 - and we only really have one component
04:09 - and that's app.js
04:13 - and
04:14 - it's also very very basic okay so this
04:17 - will get broken out into separate
04:19 - components but for now
04:20 - i'd like to just work on building out
04:22 - the ui a little bit
04:26 - and we this is going to be a game like
04:30 - basically a math game
04:31 - so i used to play this math game with uh
04:34 - with my oldest son when he was just
04:36 - learning basic math
04:38 - and
04:39 - uh i think we demoed it last week
04:44 - but
04:46 - the the whole idea is you have to get
04:48 - math problems correct
04:50 - to win the game right
04:53 - uh so we want to build out a basic ui
04:55 - i'm not going to worry about graphics at
04:57 - this point
04:58 - so we're probably just going to use like
05:00 - color divs to represent
05:03 - the characters in the game for right now
05:06 - and then later on i'm not really a
05:08 - graphics person so
05:10 - still have to figure out what i'm going
05:11 - to use uh for the characters but
05:14 - we just need to get something on the
05:16 - screen visually so that we can test out
05:18 - the logic
05:21 - all right so for right now the
05:23 - the input
05:24 - is there that's that's what we need
05:26 - uh
05:27 - let's get
05:30 - some
05:35 - i guess let me explain first
05:38 - what what i'm thinking at first is just
05:40 - a basic thing so
05:42 - let me make this bigger
05:45 - all right
05:46 - so
05:47 - this
05:48 - will probably just be at the top as our
05:50 - title we're gonna
05:52 - center uh this on the page uh the input
05:55 - all right so above the input there'll be
05:57 - a math problem right just for now it'll
05:59 - just be a simple addition problem you
06:01 - type your answer in here and you hit
06:03 - submit right that's basic
06:05 - but then above that
06:07 - or even on the sides depending on the
06:09 - screen size
06:10 - uh we'll have
06:12 - the hero character on one side and the
06:15 - enemies on the other side
06:17 - right and
06:19 - if you get the math problem right
06:22 - an enemy will disappear if you get it
06:24 - wrong an enemy will appear
06:26 - right so the way to win the game is to
06:28 - get so many questions right
06:30 - consecutively so that all the enemies
06:32 - disappear
06:34 - right
06:35 - um
06:36 - so that's the very basic idea level one
06:40 - simple
06:41 - um the simplest version of this game all
06:44 - right and then we could think about
06:45 - adding in some more complex things later
06:48 - maybe like
06:49 - having high scores
06:51 - being able to save um
06:54 - your your data things like that
06:56 - but for today i'd like to just get that
06:58 - basic ui uh built out
07:02 - okay
07:03 - and i see so there's some action in the
07:05 - chat so hey everybody that's uh that's
07:07 - joining us
07:10 - um if you're uh if you didn't catch the
07:12 - beginning and you're wondering why i'm
07:14 - not checking the chat just hang in there
07:16 - i have a timer going when that timer
07:17 - goes off i'm going to check the the chat
07:19 - and answer all your questions
07:21 - all right so in react native we don't
07:24 - have the concept of divs uh or spans or
07:28 - you know p tags and things like that
07:31 - we have these other primitives which are
07:33 - base the very basic is the view
07:36 - and the text
07:37 - all right so we're going to be using
07:39 - mostly views here
07:42 - so
07:44 - this main view is going to stay our our
07:46 - root view
07:48 - right
07:49 - um
07:50 - but then we're also going to make
07:53 - let's let's call this our
07:56 - oops
07:59 - i actually i wrote div again i'm
08:02 - so used to that okay so this view is
08:04 - going to be our hero view so for now
08:06 - we're just going to give it like a class
08:08 - basically a style of of hero later on
08:11 - we'll probably break these out into
08:12 - their own components but it's a lot
08:14 - easier to work with them in one place
08:16 - when we're starting out
08:19 - so we're going to say style
08:22 - hero
08:26 - and
08:28 - that's all we're going to have in that
08:29 - view
08:31 - oops view
08:42 - and this one is going to be enemy
08:45 - okay
08:46 - um
08:47 - so for now since i know there's we're
08:50 - going to start out with multiple enemies
08:52 - i'm going to make three
08:54 - okay
08:56 - we're
08:57 - obviously not gonna keep copy and
08:59 - pasting these
09:01 - you know but for now we we're just gonna
09:03 - kind of hard code
09:04 - um a demo of the layout
09:07 - so
09:08 - down here
09:10 - where we have our styles and react
09:11 - native so react native comes with this
09:13 - this style sheet
09:16 - dot create and you can put styles in
09:19 - there basically the styles are a
09:21 - javascript object
09:23 - so instead of normal css you have these
09:26 - camel case versions
09:28 - of css
09:31 - not
09:32 - all of css is available here so it's
09:35 - it's a subset of what you would could
09:37 - normally use on on a website
09:39 - so uh it'll
09:41 - your your app probably won't break but
09:43 - you'll get a little error in the console
09:45 - letting you know
09:46 - um if you're using something
09:49 - that's not supported by react native
09:54 - so for now we're gonna add so this is an
09:57 - object
09:59 - object syntax so we're gonna add a comma
10:01 - and then we're gonna add our hero
10:04 - okay and let's just give them a height a
10:06 - width and a height
10:09 - and in react native the units
10:13 - uh
10:14 - are just plain numbers right so we don't
10:17 - say pixels or em or whatever it's just
10:20 - just flat out uh a number
10:22 - right so for now uh let's keep things
10:25 - small let's just say 40
10:28 - and height
10:30 - 40. okay so we're gonna keep them at
10:33 - this point just squares right just
10:36 - really basic
10:37 - and then
10:39 - let's give it a color so
10:46 - so we're going to say background color
10:48 - and
10:50 - i don't really know x value for
10:52 - off the top of my head
10:59 - i'm just gonna put in
11:02 - i wonder if you know i've never tried
11:04 - this but i wonder if i could say just
11:06 - like blue
11:08 - i know you can do this on the web but i
11:10 - don't know if you do it react native so
11:13 - i'd like to know if you can do it so i'm
11:14 - just going to try it
11:18 - all right so i just copied and pasted
11:21 - oops
11:22 - there we go i just copied and pasted
11:24 - hero
11:26 - and we're going to call this enemy
11:32 - and let's just say red for the enemy
11:36 - and let's save that
11:38 - see what we get
11:41 - hey here we go so it actually works
11:43 - although
11:45 - i don't know about you but to me this
11:47 - blue looks purple
11:49 - maybe just because it's up against the
11:51 - red it's like
11:52 - messing with my eyes here but anyway so
11:54 - here's our hero and here's our three
11:56 - enemies
11:58 - great
11:58 - uh so i definitely learned something
12:00 - that you you can just put
12:02 - uh
12:03 - the names of colors in there
12:06 - uh so that's useful
12:08 - especially when we're trying to just
12:09 - mock things up really quickly
12:12 - all right so the positioning is an issue
12:15 - right now like we just put them on the
12:16 - page but they're not at all where we
12:18 - want them to be so let's try to get them
12:20 - positioned properly
12:25 - so
12:27 - first thing we can do
12:29 - is
12:32 - move them down below
12:35 - the title
12:41 - and
12:43 - let's add
12:46 - all right here's what i'm thinking
12:48 - probably should add a container for our
12:51 - hero
12:52 - and a container for our enemies
12:57 - so let's do that now so basically our
13:00 - we're gonna have a view
13:02 - and
13:07 - uh
13:08 - styles that
13:10 - um
13:14 - i'm gonna say container for now because
13:16 - i i suspect that these containers are
13:18 - gonna be very similar
13:21 - so that
13:22 - we'll just have this container class
13:26 - and oops we don't want to self close
13:28 - that we want to actually
13:31 - close this view
13:35 - around the hero
13:37 - and then we're gonna have another
13:39 - container
13:42 - around
13:45 - all of these and you know what i don't
13:47 - have oops there we go
13:50 - i don't have like my auto
13:52 - there we go the auto format wasn't
13:54 - working i was worried for a second i
13:56 - never had that set up
13:58 - okay so now we have containers around
14:00 - here
14:01 - we haven't given the containers any
14:02 - styles though yet
14:04 - so let's let's do that
14:06 - right now everything inside the root is
14:09 - getting this justify content a line item
14:12 - center let's let's take the root and
14:15 - make it um
14:20 - heights
14:21 - um
14:24 - i think we can do
14:26 - we can do percentage let's see if this
14:27 - will work
14:34 - and we need to put that
14:41 - all right so we're going to try height
14:42 - 100
14:43 - on that route i'm not sure if it'll work
14:45 - or not
14:47 - i can't even really tell no
14:49 - no it didn't work so
14:54 - oh actually you know what we should do
14:56 - um
14:59 - let's go with
15:01 - um
15:05 - flex one
15:08 - is this it
15:11 - let me see there's some property on flex
15:13 - that will make it take up the entire
15:17 - um
15:20 - the entire container no that's not it
15:29 - i may have to look that up now
15:33 - so our our actual
15:36 - this says id root but that's not really
15:38 - our root um
15:40 - let's just mess around in dev tools for
15:42 - a minute to try to get this right
15:45 - so
15:46 - this should have our flex
15:49 - yeah our flex grow a
15:52 - one see what this one does um
16:03 - so
16:05 - let's not do anything and are even our
16:07 - bodies on this too at least on this too
16:20 - let's just look this up i had to look
16:22 - this up for a project that i'm working
16:24 - on now
16:26 - but it was like two months ago and i've
16:28 - already forgotten so let's say uh full
16:31 - height
16:35 - view react native there we go
16:38 - uh
16:39 - is it possible to make view 100
16:42 - and react native
16:45 - yep this looks good
16:48 - all right
16:50 - so flex one
16:52 - is is suggested here which we tried
16:55 - uh
16:56 - let's do this take up the full screen
16:58 - position absolute lose two if it doesn't
17:01 - solve your problem
17:08 - okay so we can go with this position
17:10 - absolute
17:14 - we could also try to get the dimensions
17:17 - first and then set that as width and
17:18 - height okay
17:26 - okay
17:28 - looks like they're doing the flex one
17:30 - thing
17:34 - yeah i think let's just try this um
17:37 - position absolute
17:39 - that will probably be the quickest
17:41 - to test
17:46 - all right so
17:47 - i apologize if somebody already put this
17:50 - in the uh
17:51 - chat let me see
17:53 - each element inside a flex container if
17:55 - you put flex one for each of them will
17:57 - give all the same width height if it's
17:59 - flux section column okay so uh john
18:01 - hanson was talking about the flex uh
18:05 - as well
18:06 - let's try this
18:12 - and i don't want or need
18:15 - these
18:20 - all right let's see what this gives us
18:25 - yay all right
18:27 - this is is the full
18:30 - um
18:31 - the full height now
18:33 - right
18:34 - and
18:38 - okay great
18:44 - all right so now we know we have a full
18:46 - full height and with uh
18:50 - view
18:52 - uh and then
18:56 - within this view
19:01 - let's all right we're at the containers
19:02 - let's style the containers
19:04 - get sidetracked there
19:08 - we have container and
19:11 - within the containers
19:14 - um
19:15 - [Music]
19:17 - let's see how we want to do this um
19:24 - i think the normal flex
19:27 - will work
19:28 - for these containers
19:30 - because flex direction is column by
19:31 - default
19:32 - and so i believe that's what we want
19:38 - uh so um in react native flex direction
19:40 - by default is column
19:44 - okay
19:45 - um
19:46 - but here's what we want to do so
19:51 - let's take this route and say
19:57 - let's put up here
20:03 - let's check flex direction row
20:09 - and
20:10 - [Music]
20:12 - actually
20:13 - let's comment this out for now
20:18 - really could do this in dev tools okay
20:21 - so this is like
20:22 - what i mean by flex direction
20:25 - uh so
20:27 - by default on the web
20:29 - so if you're using regular react
20:32 - this is would be the layout if you set
20:35 - if you're using flexbox
20:37 - by default on
20:40 - react native in react native the flex
20:42 - direction is column which would have
20:44 - been like the first view that we saw
20:46 - all right so
20:49 - we we're going to within our views
20:51 - probably switch back and forth to get
20:53 - the layout that we want
20:55 - okay so
20:57 - we're going to pro like basically we're
20:59 - going to nest views with different
21:01 - flexbox properties
21:03 - to do our layout right so we're using
21:06 - flex uh flexbox because that's what what
21:10 - the layout stuff is for react like built
21:12 - in to react native
21:16 - right
21:17 - so
21:19 - we're going to need a um a wrapper
21:22 - around
21:24 - this
21:26 - right so we want to leave our main root
21:28 - as just flex direction column
21:30 - but then
21:31 - we'll need a wrapper around this
21:36 - to
21:36 - set these
21:38 - to flex direction row
21:40 - so these line up like this we're going
21:42 - to space them out but for now like we
21:45 - this is a better lineup okay
21:48 - let me check my time in about five
21:50 - minutes i'm gonna go to the questions uh
21:53 - the chat and answer some questions
21:56 - okay
21:59 - so let's add
22:06 - yeah let's add this
22:09 - another view
22:13 - the views are going to start to get
22:14 - crazy it'll get simplified once we split
22:16 - these out into separate components
22:18 - though
22:20 - all right so this view we're going to
22:21 - set a style
22:24 - of
22:27 - and we're gonna say this is uh
22:34 - battlefield
22:36 - all right so this is gonna contain our
22:38 - our battlefield right where our hero and
22:40 - our enemies
22:41 - um
22:42 - do their their math battling
22:48 - and this will encompass
22:52 - both of our containers for
22:55 - uh our heroes and enemies
22:59 - now
23:00 - we can go down here
23:04 - for our battlefield
23:08 - we can grab this flex direction row
23:10 - we'll remove it
23:12 - here and then just add it in down here
23:16 - and let's see if that gives us what we
23:18 - want
23:19 - i don't like that space
23:23 - oops we forgot a comma
23:28 - all right let's check it out now okay
23:30 - great so that that does give us what we
23:32 - want so the main layout remains flex
23:36 - column right flex direction column but
23:39 - then within
23:41 - this
23:42 - see if we can get
23:44 - get the outline here this div
23:49 - so within this container
23:51 - we've switched to flex
23:54 - direction row
23:55 - and then once we're outside of that
23:57 - container we're back to the normal
23:58 - normal layout again okay so
24:02 - not bad now of course we want to
24:04 - separate these
24:06 - these warring parties here
24:08 - and
24:11 - well let's while we have this open
24:14 - uh let's just add some
24:16 - styling right here so we can get
24:18 - immediate feedback
24:20 - uh so
24:24 - okay so the flex
24:26 - one here
24:27 - on this element is gonna give
24:30 - us it's gonna spread us out
24:34 - uh vertically but what we really want
24:37 - i guess here is
24:39 - let's
24:43 - see what this gives us hmm
24:52 - let's see if we can get rid of
24:57 - there we go
24:58 - okay
24:59 - so we're going to give this container
25:02 - this is our battlefield container we're
25:04 - going to give it a width of 100 percent
25:07 - i'm going to stretch out
25:09 - um
25:11 - the the battle here now i don't really
25:14 - want this to take up the full
25:17 - width of the screen
25:19 - um
25:21 - for now i'm going to add some padding on
25:23 - this one it might not be a bad idea just
25:25 - to add padding on the root but
25:27 - we can change that if we need to later
25:31 - so i'm going to say
25:34 - actually let's just we'll add the
25:35 - padding in on
25:37 - in here because it's a little bit
25:38 - different for react native at least we
25:40 - have a different option so
25:43 - our battlefield width
25:45 - is going to be
25:47 - 100
25:48 - percent
25:51 - and then we're going to say padding
25:57 - we're going to say padding horizontal
25:59 - right and then
26:02 - we can give it a a padding so i'm going
26:04 - to say 16.
26:08 - see how that looks
26:14 - okay
26:15 - so here we have 16 here and i think i
26:17 - forgot to add in
26:19 - i had added in flex
26:22 - one yeah
26:24 - so
26:29 - flex one
26:32 - when i added flex one here all right so
26:35 - this is basically what it's doing it's
26:37 - making this first one
26:39 - this first container for our hero
26:41 - the full width
26:43 - with the exception of the tiny bit of
26:44 - space that we give to our enemies
26:46 - okay so this this will actually
26:49 - achieve what we want for right now so
26:52 - i'll leave it
26:53 - but we may want to switch that up at
26:55 - some point uh because it's logically
26:58 - like
26:59 - uh it may end up being confusing for us
27:01 - because we'll expect
27:03 - there to be kind of like an even
27:05 - battlefield
27:06 - in terms of our containers
27:12 - um
27:14 - actually let's see what happens if i do
27:15 - this
27:19 - oops
27:20 - didn't want that
27:27 - all right this this actually will work
27:29 - out better uh it doesn't look better
27:31 - right now but it will in a minute
27:33 - let's add flex 1
27:35 - to both of these containers so we do get
27:37 - that middle
27:40 - that split down the middle unit
27:42 - so basically each one would be
27:44 - 50 percent
27:50 - all right
27:53 - let's verify that yep this is what we
27:55 - have now
27:57 - what we can do uh in these containers as
27:59 - well is say
28:01 - like how
28:03 - we want the elements inside to be
28:06 - displayed
28:08 - so
28:09 - flex
28:12 - let's say flex direction and then we
28:14 - have some some options right so
28:17 - oops that's not what i want
28:20 - um
28:23 - is it justify content
28:29 - all right so it's not just like content
28:31 - and then it'll be a line items
28:34 - there we go
28:36 - so
28:37 - if you're trying to like center
28:39 - something vertically or horizontally
28:41 - it's always either going to be justify
28:43 - content or align items i can never keep
28:45 - straight which one is which so i always
28:47 - just try both
28:50 - so
28:51 - this will give us
28:52 - you know what where we want them to be
28:54 - for now i think center is perfectly fine
28:57 - so
28:58 - let's add our align items
29:05 - center oops we gotta put that
29:10 - all right so we're going to add our line
29:12 - item center and then that should center
29:14 - both of them there we go so now we have
29:16 - our our little battlefield right
29:19 - uh
29:20 - now also like we we do have an issue
29:23 - with
29:23 - spacing right and we ought to justify
29:27 - our content as well so we get that
29:29 - vertical align
29:39 - we're going to center that too
29:42 - okay
29:44 - all right so now you see our hero
29:45 - centered our enemies are also centered
29:48 - we want to give some space between our
29:50 - enemies and there's there's two ways we
29:52 - could we could try to do this
29:54 - we could
29:55 - set this container to be larger
29:58 - in terms of vertical height
30:00 - and then whoops my timer went off
30:04 - all right sorry about that
30:06 - all right let's pause that for a second
30:08 - and
30:09 - let me go to the
30:11 - the chat
30:12 - and answer some questions
30:17 - all right
30:20 - okay so philip says
30:23 - philip dares me to code a program which
30:26 - makes a new random language i know it's
30:28 - possible i tried and it works
30:30 - um
30:31 - all right that's that's pretty
30:32 - interesting i don't know
30:34 - i i'm not sure how i would go about that
30:36 - but that's a good idea for a future
30:38 - project thank you
30:40 - rob says good morning
30:42 - social stock says good morning all right
30:44 - so a lot of people are saying good
30:45 - morning so i'm just gonna say good
30:46 - morning to everyone
30:48 - um
30:49 - thanks for watching
30:52 - um
30:54 - surendra asks if i can explain the
30:56 - python language
30:58 - i my experience in python is very
31:00 - limited so
31:02 - uh i'm i'm not the person to explain
31:05 - that all right if anybody else watching
31:07 - is really good with python maybe in the
31:10 - chat you could try to explain a bit uh
31:12 - the only thing i really would say about
31:14 - python is um the syntax is based on a
31:18 - lot on indentation
31:20 - so that's that's kind of all i remember
31:22 - from the brief time i spent
31:25 - learning python
31:27 - uh
31:28 - let's see koval asked about my ide my
31:32 - code editor and it is visual studio code
31:40 - uh john hanson says should the input
31:42 - type be text or number uh it's probably
31:44 - gonna it should be number so
31:47 - i don't remember what i have in there
31:49 - now i probably just copied and pasted it
31:50 - from somewhere the last time
32:03 - okay look at there are some questions
32:04 - here that i think i i actually just
32:06 - answered as i was going along so i'm
32:08 - going to skip some of those
32:17 - um
32:19 - let's see someone which i i can't
32:20 - pronounce her name because it's in
32:22 - different characters says what about
32:23 - flutter um
32:25 - flutter is really interesting and it
32:26 - would be a different way to create
32:29 - mobile apps i don't know that you can
32:31 - create a web app with flutter
32:34 - so flutter seems really interesting i
32:36 - just i don't know enough about it to do
32:38 - a stream on it yet
32:40 - but i've
32:41 - i've read a little about it and it
32:44 - it seems pretty cool
32:55 - okay
33:10 - um
33:11 - we had a question about whether this
33:13 - will be uploaded to the channel later
33:15 - yes all the live streams get
33:16 - automatically uploaded uh to the channel
33:19 - later on
33:23 - i'm gonna adjust my monitor here it's
33:25 - easier for me to read
33:27 - okay
33:30 - okay uh say the question what are we
33:32 - trying to make in the web page uh so i
33:34 - explained a little bit earlier but just
33:35 - very briefly we're gonna make a math
33:37 - game
33:38 - where the user will have to answer
33:42 - basic math problems in order to defeat
33:45 - the the enemy
33:49 - sebastian says i enjoy watching you on
33:51 - my five minute break
33:53 - that's cool
33:55 - uh i'm glad that you enjoy it i have
33:57 - another question do you use php
34:00 - uh so php i i have used it in the past
34:04 - uh i don't currently use it
34:06 - for my job
34:08 - so my php knowledge is really basic
34:11 - though so i've done just some like file
34:13 - uploading
34:15 - um
34:17 - yeah i made like a basic file uploader
34:19 - for php and then all the other php i've
34:22 - done is like wordpress plugins
34:24 - uh so
34:25 - definitely not
34:26 - a php expert you know by any means
34:32 - and
34:34 - all right
34:37 - hey i can't believe i made it through
34:38 - all the questions i think i did i made
34:40 - it through all the questions in the five
34:41 - minutes so
34:43 - let's uh
34:44 - let's start another timer
34:46 - i may have to finish up
34:48 - a little early but for now this should
34:50 - be good i'm going to check the stream
34:52 - quality really quick all right it looks
34:54 - good
34:55 - quality looks good awesome if anybody
34:58 - has any issues with the stream quality
34:59 - let me know
35:01 - um i just see a question how long will
35:02 - this stream go the stream's probably
35:04 - going to end in about a half an hour so
35:07 - another half hour you could always catch
35:08 - the the rest of it
35:11 - in the recording if you if you want to
35:13 - alright so let's go back to our app and
35:16 - let me kind of continue on with what i
35:17 - was explaining
35:19 - i got to change the song i'm listening
35:20 - to it's kind of
35:22 - i can't focus when the song is off
35:28 - okay this is better
35:32 - uh
35:33 - all right so we have two options we
35:36 - probably have more than two but
35:37 - to my mind there are two options i'm
35:39 - thinking of here we can make this
35:41 - container
35:42 - um bigger right so the the goal here is
35:45 - to space these divs out because this is
35:47 - three divs right
35:48 - uh we can make this container
35:51 - like
35:52 - larger vertically
35:54 - then we could use flexbox to space these
35:57 - out evenly within that container or we
35:59 - could just add a little bit of padding
36:02 - or i'm sorry margins
36:04 - to each one of these
36:06 - uh the easier thing to do right now i
36:08 - think is just to add the margins
36:12 - so
36:16 - i wonder
36:18 - actually not i have a different idea
36:20 - maybe for the ui we would want
36:24 - to like let's say push this down a bit
36:26 - so
36:30 - yeah i think this would be better let's
36:32 - set a standard height for this container
36:34 - uh what i'm thinking is like at some
36:36 - point when we start adding and taking
36:38 - away enemies it's going to cause this
36:40 - input to jump up and down
36:42 - right because
36:44 - it's positioned based on
36:48 - the height of this
36:50 - container above it
36:52 - so it'll be uh
36:56 - nice it'll look nicer if this doesn't
36:58 - jump up and down when the enemies do it
37:00 - so
37:01 - let's take
37:03 - these containers
37:05 - and give them
37:07 - some sort of height i wonder if we could
37:09 - do it these ones or maybe
37:12 - maybe this container
37:14 - yeah let's do it on this container
37:17 - let's try it right now and see if we can
37:19 - go
37:21 - um
37:26 - i think we tried this already let's try
37:28 - it i'm gonna try it again there we go
37:32 - i guess i didn't try it so basically
37:33 - what i'm doing here is flex one and
37:35 - we're bumping this down this looks weird
37:37 - now but we'll get down to here and and
37:39 - fix this up a little bit
37:42 - so if we have flex one here
37:45 - now when we go down to this we can say
37:51 - um
37:52 - justify content
37:58 - space around
38:00 - we could do space between we could do
38:01 - space evenly
38:03 - right space evenly looks the best to me
38:06 - so we're gonna go space evenly okay so
38:08 - we need to make two changes back here
38:11 - so on our battlefield
38:13 - we're gonna go
38:15 - flex one
38:18 - and then on our containers we're going
38:20 - to change justify content from center to
38:22 - space
38:25 - evenly and i will give a shout out to
38:27 - john hanson because he was mentioning
38:28 - this further up in the
38:30 - chat um and i skipped over because i
38:33 - knew i was just going to do it here but
38:35 - um john you were like 100 on the right
38:39 - track there uh with this so now
38:41 - we have our battlefield with our enemies
38:44 - spaced evenly uh our heroes over here
38:49 - so this is looking more like
38:53 - like what i have in my mind and with
38:55 - what the original game looked like the
38:57 - original game was really basic it's on
38:59 - my github page uh if you want to check
39:02 - it out it's it's one of my very first
39:04 - repos but the original uh page the
39:07 - original game was just built with uh
39:09 - jquery
39:11 - so
39:12 - it was in my early days of of coding
39:16 - uh so now we have this
39:19 - let's add in
39:23 - we need an actual math problem so we're
39:25 - just gonna hard code one in just to see
39:27 - how it'll look in the ui
39:29 - so the math problem will be here
39:31 - or
39:34 - yeah for now we'll put it here
39:36 - i was actually it might not be
39:38 - if we put it in the middle of the
39:39 - battlefield that might be cool too but
39:42 - let's keep it here for now
39:44 - and then
39:47 - this input definitely doesn't need to be
39:49 - this big if they're just going to put in
39:52 - a number that's probably going to be
39:54 - like two or three digits
39:56 - so we can adjust that
39:58 - and
39:59 - then put some space in here at the
40:01 - bottom so we're not right up against the
40:04 - the bottom of the window
40:05 - okay
40:07 - all right so let's put in our
40:10 - let's see view
40:13 - let's put in a container div
40:22 - so
40:23 - let's say
40:36 - let's call it math container
40:39 - uh i don't want to waste too much time
40:40 - thinking about names so
40:42 - that'll do for now
40:45 - all right so we're gonna put wrap
40:48 - uh our button our input and then our
40:52 - math problem which we're about to put in
40:54 - now
40:56 - we're going to wrap that in in that
40:58 - container
40:59 - and then we're going to have this text
41:01 - uh
41:02 - so like in react native i could never
41:04 - just type text outside of a container so
41:06 - i couldn't just have text here right
41:08 - that would throw an error it has to be
41:10 - inside this this text so let's put um
41:24 - so we're going to just put two plus two
41:26 - for now okay
41:27 - that'll be uh
41:29 - that'll be good enough i guess
41:31 - hey porter gray border
41:37 - okay
41:40 - so i'm not giving any style to this
41:42 - maybe i should
41:51 - uh let's say
41:58 - math text
41:59 - all right
42:00 - so
42:01 - we'll do some basic styles here for
42:05 - math container
42:08 - um
42:09 - we'll definitely want this to be
42:16 - hmm
42:18 - i guess we'll just give it some some
42:20 - padding for now
42:23 - uh and really we just want vertical
42:25 - padding right so we're going to do
42:26 - padding vertical
42:28 - and um
42:30 - let's say 16 as well uh just like we did
42:33 - with our other container so we're going
42:35 - to give this some vertical padding
42:38 - and then here we're going to give
42:40 - our
42:41 - math
42:42 - text oops
42:47 - math text
42:49 - um let's just say
42:54 - font size and let's make the font size i
42:57 - don't know 20 right we'll see how that
42:59 - looks
43:01 - and
43:05 - that should be okay for now just to
43:07 - give us an idea okay so we have our
43:10 - little padding here and
43:13 - we have our math problem
43:17 - we could
43:20 - if our math problems are going to be
43:21 - like this we definitely have space to
43:23 - put our input up here
43:29 - that might not be a bad idea
43:32 - i'd like to see that uh let me know what
43:33 - you think right um so just take a look
43:36 - at it like this and then we'll we'll see
43:39 - what it's going to be like when we
43:40 - switch the input to be in line here and
43:42 - then we'll see which one we like better
43:44 - okay so
43:47 - though the way we're going to do this is
43:48 - we're going to have a container just
43:50 - around here
43:51 - and we'll set the flex direction to row
43:54 - and then that should give us what we
43:55 - want here
43:57 - and we'll keep the submit button below
44:00 - and we'll we'll style that
44:03 - kind of as our next step
44:06 - alright so we need
44:10 - another view
44:18 - um
44:19 - let's say
44:26 - there's a math container let's say
44:28 - math row
44:30 - we'll call it math row
44:34 - since
44:36 - it's going to be in a row
44:38 - flex direction row
44:44 - all right that's one a a little piece of
44:46 - advice that i have is is never spend
44:49 - more than a couple seconds trying to
44:50 - name something because it's so easy to
44:52 - change the name later on
44:54 - and you may actually completely get rid
44:56 - of that view or whatever you're working
44:59 - on
45:00 - it might have different functionality
45:01 - later it might
45:02 - there's so many reasons why that name
45:04 - could change it's it's a waste of time
45:07 - trying to figure out what to name it so
45:08 - the first thing that pops in your head
45:09 - just just use that
45:11 - like i've
45:12 - i've spent
45:13 - too much time
45:15 - like wasting time on naming things and
45:17 - seeing it happen with other people it's
45:19 - it's definitely not not worth it
45:22 - so we have this math row
45:24 - and we're gonna put
45:32 - a flex direction
45:39 - of row
45:41 - on a math row
45:43 - and let's not forget the comma and let's
45:46 - see what that does for us
45:48 - hopefully what i thought it would hey
45:50 - there it is okay
45:52 - so
45:54 - that worked it doesn't look great right
45:56 - now but
45:58 - um
46:01 - yeah you know i think i'll keep it like
46:03 - this for now
46:06 - i want to make this smaller definitely
46:09 - add some padding here some some spacing
46:11 - and then make sure that this text is
46:15 - lined up
46:17 - with
46:18 - at the very least it should be
46:20 - its baseline should be the bottom of
46:22 - this input or it should be centered
46:24 - vertically
46:28 - let me check my timer and check okay
46:31 - i think we're good
46:35 - okay
46:38 - i'm gonna check i am gonna check the
46:40 - chat now that we've i've showed you both
46:42 - ways just to see what you all think as
46:44 - well
46:58 - okay i don't see anything about that in
47:00 - particular so i'm gonna go back to the
47:02 - here
47:03 - and i did see a few more questions in
47:05 - the chat so i'll get to those in a few
47:06 - minutes
47:13 - uh
47:14 - let's
47:16 - yeah let's trim this input down
47:20 - yeah so it can definitely be trimmed
47:22 - down significantly
47:32 - so i believe we have some inline styles
47:34 - on this input
47:37 - we can bring these down to
47:42 - so let's switch this up and do
47:45 - styles dot
47:48 - input
47:54 - and
47:56 - you can see i'm trying to keep my styles
47:58 - in the order uh that things are in the
48:00 - page
48:01 - uh for now
48:02 - that is helping me keep track of them
48:07 - may not be like the best way of
48:09 - organization
48:11 - maybe better ways but it's working right
48:13 - now
48:15 - oops
48:16 - i don't need that
48:20 - okay
48:21 - there we are
48:22 - uh it usually makes sense
48:25 - to put your styles down below uh
48:28 - otherwise when you start to get a lot up
48:30 - here it just it's way too cluttered to
48:32 - have your styles in line
48:34 - as well i mean i won't say never put
48:36 - them in line but
48:39 - it's
48:40 - it's definitely cleaner to put your
48:42 - styles down down below
48:48 - all right so on the input let's give it
48:50 - a
48:52 - width
48:54 - why don't we cut down the height too uh
48:56 - you know what i do i do want to leave it
48:57 - at 40 um just so it's a decent tap
49:00 - target
49:02 - for like on a touch screen
49:06 - but we can change
49:09 - the width
49:11 - and
49:13 - want it to be pretty small
49:17 - um
49:17 - [Music]
49:19 - let's go
49:21 - 80. let's see if
49:23 - if 80 works for this
49:26 - and then
49:27 - for a text
49:32 - here for our math row
49:34 - we could put
49:36 - justify content
49:39 - center
49:40 - and that should help us
49:44 - with our text there
49:48 - okay so they made it a little bit better
49:50 - it looks like
49:56 - hmm
50:00 - that's interesting
50:01 - it still didn't exactly help us with our
50:03 - alignment for our text so we'll have to
50:05 - look into that
50:11 - actually we could still go even smaller
50:13 - with this input
50:15 - so let me try that
50:22 - i'm going to go with 60.
50:26 - see how that looks
50:30 - all right that's more reasonable
50:36 - yeah 60 does seem a little more
50:38 - reasonable there
50:40 - okay
50:43 - all right let's work out some of this
50:44 - this padding
50:46 - right here in the inspector so
50:48 - um on our
50:52 - let's see what's going on here
50:59 - this comes out as a div
51:03 - with just some
51:04 - hmm
51:10 - what if we could do a line height
51:13 - whoa
51:16 - that was crazy
51:18 - um
51:22 - oh now i know why that was crazy
51:27 - there we go so if we change the line
51:29 - height we can make this go up and down
51:32 - right so
51:35 - we could do it like that
51:42 - i mean i guess that works this doesn't
51:43 - feel like the best solution but it'll
51:46 - it it'll work for now
51:53 - i could just try let's just try
51:55 - increasing the font size for now
52:00 - um
52:09 - actually i'm not i'm not like entirely
52:10 - opposed to a larger font size um
52:14 - you know this is a
52:16 - like a kids game so like the larger font
52:19 - is
52:22 - not um
52:24 - like in terms of the genre of like kids
52:26 - books and games and things usually they
52:28 - go with a larger font uh especially if
52:31 - they're just learning to recognize their
52:33 - their numbers and things it's easier if
52:35 - it's larger so
52:36 - uh let's go with this size 26 font it
52:38 - looks like it fits well with this uh 40
52:41 - pixel height for the input
52:44 - so that that'll be a good font size for
52:46 - us so we'll go with that and then
52:49 - let's add a little
52:51 - um
52:54 - so we're going to say padding
52:57 - uh let's go with our padding left
53:03 - right sorry right
53:05 - let's go with 8 pixels there we go so
53:08 - that space out a little bit
53:10 - alright i think i think that works
53:13 - so we're going to bump this up to 26 and
53:16 - then add
53:20 - a padding right
53:24 - of 8 pixels
53:26 - or eight unitless
53:30 - numbers
53:32 - uh
53:33 - all right that works that's cool uh we
53:35 - need some space in between the submit
53:38 - button and this row so we're gonna go on
53:40 - the container itself
53:44 - i don't want a huge amount of space so
53:46 - i'm going to try a padding
53:51 - bottom
53:54 - of 8.
53:56 - and we'll see how that looks
53:59 - all right great
54:03 - all right not bad
54:06 - i mean i'm not this is not gonna win any
54:08 - awards for design here but like
54:10 - uh
54:11 - it's it's good enough that's not going
54:13 - to drive me crazy to look at
54:20 - okay
54:22 - um let's see
54:27 - what else we can do i mean i'm gonna
54:29 - probably change the color of this button
54:31 - i i kind of want to leave the button
54:33 - really large too especially when we
54:35 - consider
54:36 - the um
54:39 - this running on a phone
54:41 - um if if children are going to be
54:43 - playing this game like
54:45 - uh their dexterity
54:48 - you know with their fingers probably not
54:49 - great so you want to make sure tap
54:50 - targets are like probably larger than we
54:53 - would even normally make them
54:57 - okay
54:58 - all right this is not bad
55:01 - not bad we got the basic ui
55:03 - uh i'm okay with this for right now
55:06 - right uh i think on the next stream i'd
55:08 - like to move on to some of the logic of
55:10 - what's happening maybe actually getting
55:12 - these to appear and disappear
55:14 - uh depending on what's what's put into
55:16 - here
55:17 - so
55:19 - yeah i'm okay for now uh so i'm gonna go
55:22 - to the chat right now
55:24 - and
55:26 - i know we i went a little over on the
55:28 - last pomodoro session i didn't notice
55:30 - when this was actually the timer was up
55:32 - so i'm gonna end this one a little early
55:34 - so i have time for questions
55:36 - but definitely
55:38 - want to commit this
55:40 - so that
55:42 - you all have access to the code that
55:43 - we've done today so let's do git status
55:47 - and see okay we modified app.js
55:50 - great just like we thought that's the
55:52 - only file we worked in let's do a git
55:54 - commit
55:56 - and i'm going to give it an am flag
55:58 - right which means we're adding
56:00 - and we're committing
56:02 - and we're going to add a commit message
56:04 - too so
56:06 - we're going to say i like to kind of
56:07 - prefix all my commit messages
56:10 - so that we kind of know what this is
56:11 - about so this is a new feature right
56:14 - the the addition of this ui element so
56:18 - uh if you add ui
56:26 - for
56:29 - characters
56:31 - all right so that's kind of basic we did
56:33 - we did more than that but
56:35 - essentially like what really what we
56:37 - really added the biggest part we added
56:38 - was we we have these these characters
56:41 - now on the screen
56:43 - and so now we're gonna push this up to
56:45 - github
56:46 - if you're wondering like how we set all
56:48 - this up
56:49 - uh we did do some setup in the last
56:51 - stream and then on my channel uh i go in
56:54 - depth more into like how to use get and
56:57 - set it up on your computer so uh the the
56:59 - link to my youtube channel is in the
57:01 - description if if you
57:03 - you know need a little bit of extra um
57:07 - extra help like getting up to speed on
57:09 - what we're doing here maybe check out
57:10 - some of those tutorials and that should
57:12 - should help you
57:14 - okay
57:15 - cool so all that code should now be on
57:18 - github let me show you the repo and so
57:20 - you can go to it uh
57:23 - let's give it a refresh
57:24 - right so
57:26 - here's our commit
57:28 - and i'm gonna put i forgot to put this
57:31 - in the description to the video so i'm
57:33 - gonna copy and paste it right now in the
57:35 - chat uh this is the link to the github
57:37 - repo
57:38 - i'll try to remember to put it in the
57:40 - description
57:41 - uh
57:42 - for next time
57:44 - okay
57:44 - um so i'm gonna do just uh a little bit
57:47 - more question and answer before we end
57:49 - this
57:52 - stream and let me find
57:56 - okay so
57:57 - uh samuel says uh
57:59 - i'm the newbie uh of a front-end
58:02 - engineer what language do you recommend
58:06 - except for javascript and php so you
58:08 - want a language recommendation that's
58:10 - not javascript or php and you're a
58:13 - front-end engineer
58:14 - um
58:17 - honestly like if you're doing anything
58:18 - with front-end like javascript is the
58:20 - language
58:21 - you need to know that
58:25 - now if you want to pair that with
58:27 - something back-end and that's not php
58:30 - it kind of depends on what you want to
58:32 - work on
58:34 - you could go with you could go with java
58:37 - you could go with like.net
58:39 - um
58:41 - it it just kind of depends on like
58:44 - different factors like what you already
58:46 - know
58:47 - what you're interested in
58:49 - uh if you have a certain job you really
58:51 - want like what does that company use
58:53 - you know maybe you want to go with that
58:55 - so it's it's hard to say but
58:57 - um
58:58 - you know if you want to focus on front
59:00 - end you know javascript really is uh
59:03 - necessary
59:06 - uh costa says hello is it worth learning
59:09 - django in 2019 thank you all right so
59:14 - i would say
59:16 - if something is worth learning it's just
59:18 - it is definitely dependent on your
59:20 - situation right um
59:24 - i'm gonna it's kind of me to be like the
59:25 - same thing i just said
59:28 - if you know the company you really want
59:29 - to work for the technology you really
59:31 - want to work with or whatever is is
59:33 - django based
59:35 - then it is worth it for you to learn it
59:38 - now just
59:40 - if you are just getting into
59:42 - uh you know software engineering or web
59:44 - development
59:47 - and you want to know what to learn i
59:48 - would not
59:50 - really even think of django
59:52 - as something to learn
59:55 - to be honest like
59:57 - i would say more focus on javascript
60:00 - and you could run full stack javascript
60:03 - um
60:05 - and like see where that takes you where
60:07 - you end up getting a job what your
60:08 - clients need and and then kind of decide
60:11 - like okay well all my clients are using
60:13 - django or my company's using django but
60:16 - um
60:18 - i i wouldn't
60:20 - give the advice to someone who's new to
60:22 - say like focus on django right now
60:25 - does that make sense
60:26 - hopefully i i answered your question
60:28 - um oh by the way django is um
60:32 - correct me if i'm wrong but i believe
60:34 - django is like um
60:37 - uh python based am i right
60:49 - see
60:57 - john hanson says the answer's four so
60:59 - did i defeat the anime yes you that is
61:02 - the correct answer
61:08 - let's see
61:09 - uh in empty says how to create custom
61:13 - roms uh i have no idea how to create
61:15 - custom rom so i'm sorry i don't really
61:17 - know about it
61:18 - um
61:20 - habib says is this css coming from react
61:22 - also um
61:28 - yeah so like this uh the stylesheet
61:33 - object that that we have here
61:36 - this is built into react native so this
61:38 - actually does some cool optimizations
61:40 - with your styles so if you're using
61:42 - react native i definitely recommend
61:43 - doing your styles like this it's not the
61:45 - only way but
61:47 - because it's built in with um
61:50 - i don't know how it does it all in the
61:51 - background but basically it it will
61:54 - apply these styles in
61:56 - a way that's going to be most helpful to
61:57 - your performance
62:03 - all right so peter asks why are you
62:06 - using react native for building a web ui
62:08 - is that a real scenario actually yeah
62:10 - that's a really good question because
62:11 - this concept of using react native for
62:13 - the web instead of using just regular
62:15 - react is a weird concept right
62:19 - but the idea is
62:21 - if you use react native
62:23 - to build a web app you can use that same
62:25 - code base
62:27 - for your android and ios app
62:30 - and then if you have a desktop app as
62:32 - well
62:32 - the same code base for that could be
62:34 - used right because you could use
62:36 - something like electron
62:38 - um to run your
62:40 - your react
62:42 - native web app
62:44 - on the desktop so the the idea is like
62:47 - you know you have your your team or just
62:50 - you and you don't have the resources to
62:52 - hire people who are experts in
62:56 - ios
62:57 - and separate experts and android and
62:59 - separate experts in web so you want to
63:03 - be able to
63:05 - share the code
63:07 - and be able to do more
63:09 - with
63:10 - you know your developers that you
63:12 - already have
63:14 - so it is a real scenario so i'm actually
63:16 - using react native web currently at my
63:19 - job uh my normal job and the the idea
63:22 - behind it is we want to be cross
63:24 - platform
63:25 - uh with one code base
63:36 - michael cross's views and views and
63:38 - views yeah actually it does uh
63:40 - you you definitely end up getting a lot
63:42 - of views once we break these out into
63:44 - components though it it won't be all
63:46 - these views together
63:48 - you know these will have their own names
63:50 - as components so it will it will look
63:52 - better like in terms of what gets added
63:55 - to the dom it's going to be divs and
63:56 - divs and divs but at least for the
63:59 - development of it it'll be a lot cleaner
64:07 - let's see
64:11 - all right we had another question about
64:12 - what am i building uh basically i'm
64:15 - building a a game a math game for for
64:17 - children to help them learn how to uh
64:20 - learn about math
64:31 - um
64:33 - let's see i lost my place
64:42 - okay so uh michael then adds um
64:46 - saying that the point to build it like
64:48 - is to build it like this initially but
64:50 - also be clock cross platform so yeah
64:52 - that's a good point michael i forgot
64:53 - about that too like
64:55 - it is the developer experience for
64:58 - developing a web app is
65:01 - a lot better
65:03 - than trying to develop uh on a mobile
65:05 - device or even with an emulator so
65:08 - building it like this actually is really
65:10 - fast at least like for the basics and
65:11 - then switch over to testing it on mobile
65:14 - um
65:16 - it's it's just a faster like the
65:18 - feedback loop is faster
65:20 - it's it's easier to figure out what the
65:22 - errors are
65:23 - so
65:24 - i i definitely prefer this
65:31 - uh peter says my opinion is react plus
65:34 - material ui would be more practical
65:36 - um
65:37 - yeah so i'm i'm assuming you wrote that
65:39 - before my explanation so i'm just i
65:42 - think my explanation kind of deals with
65:43 - that although i definitely love material
65:45 - ui and i really wish that i could use
65:48 - material ui with react native
65:51 - so
65:52 - i'm going to throw that out there
65:54 - material ui is awesome
66:03 - let's see
66:07 - uh uros ask when the next stream is uh
66:10 - i'm planning on friday
66:12 - so hopefully everything will go well on
66:14 - friday morning and i can get another
66:16 - stream in um so probably like 8 a.m
66:19 - eastern time again
66:21 - jarvis says love your work keep going oh
66:23 - awesome thank you so much
66:25 - um
66:26 - tarcissia says what are these clothes
66:28 - behind you
66:29 - oh this
66:30 - all right let me let me show you what's
66:32 - behind me so i'm currently in the corner
66:35 - of my basement like right next to
66:38 - my washer and dryer for for clothes
66:40 - right so in order to make this feel more
66:43 - like an office i hung up tablecloths
66:47 - from the ceiling
66:49 - to give me like walls right so this has
66:53 - the added benefit too is that when my
66:56 - kids and stuff like pass through here
66:58 - like they don't get in the the view
67:00 - because i do have um i've had in the
67:03 - past
67:04 - kids potty training and i currently have
67:05 - one kid potty training so they will at
67:08 - times run through here
67:10 - naked on their way to the bathroom so i
67:12 - can't have that on youtube so this is
67:15 - this was the cheapest way for me to have
67:18 - some walls up here so
67:19 - um
67:20 - we're right now i'm in the process of uh
67:24 - trying to buy a house another house
67:26 - where i can then have a proper office
67:29 - but for now this is like my temporary
67:31 - solution
67:33 - i know it looks really weird uh the
67:35 - people on my team make fun of me and
67:37 - says it looks like i'm in some type of
67:38 - dungeon or like fallout shelter or
67:41 - something
67:47 - yeah hello from russia and germany hey
67:49 - how's it going
67:51 - cool hey i might speak at a conference
67:53 - in russia i'm waiting to hear back to
67:55 - see if i got selected so i'm excited
67:56 - about about that uh
67:59 - and i was in germany a couple months ago
68:01 - i loved it
68:05 - all right ronald says can you tell me
68:07 - what i can learn to be a front-end
68:09 - developer and what kind of course or
68:11 - path you recommend i definitely
68:12 - recommend free code camp so check out
68:15 - freecodecamp.org and start through their
68:18 - lessons and then
68:19 - they'll also have a lot of links for
68:22 - extra information that you can go out to
68:24 - but
68:25 - if you go through the free code camp
68:26 - stuff you're definitely going to be on
68:28 - on the right track
68:34 - let's see
68:35 - uh
68:36 - md
68:40 - uh hussein says subscribe thank you so
68:42 - much
68:44 - uh julio says did you consider flutter
68:46 - uh i thought about flutter but i i'm i'm
68:49 - not
68:50 - sure
68:52 - as far as i know flutter you can't build
68:55 - a web app with flutter it's just for
68:56 - mobile apps so correct me if i'm wrong
68:59 - i probably still would have gone with
69:01 - react native because um it's been around
69:04 - longer it has a larger community
69:07 - uh there are more
69:10 - like large companies with like apps in
69:12 - production
69:14 - um
69:15 - you know they're actually live
69:17 - so i feel better about that
69:21 - but i think flutter is going to be a
69:23 - good option as it matures though
69:29 - habib says can't we use any front-end
69:31 - framework with react i think that was in
69:33 - response to like um
69:35 - using material ui uh i can't use
69:38 - material ui with react native so it was
69:40 - built for react based on dom primitives
69:43 - so it you can't use it with react native
69:46 - that has its own primitives
69:51 - uh jion says why do you have a computer
69:53 - next to your washer uh because i have a
69:55 - small house and it was the only place
69:58 - that i could go that uh wasn't already
70:00 - being used by my wife and kids
70:05 - um dr hezekiah asks what software i use
70:09 - for
70:10 - the video and screen capture
70:12 - um
70:16 - uh obs so the software is called obs
70:19 - it's free it's cross-platform so check
70:21 - that out michael creole says
70:23 - uh remember the spaghetti of the last
70:25 - project yes
70:28 - so glad that i i'm not
70:31 - i don't have to do anything more with
70:32 - that project like it was i was proud of
70:34 - it you know what what we did with that
70:36 - last one but it is kind of a relief to
70:39 - just
70:40 - uh be able to move on
70:44 - tarziu says hello from brazil uh says
70:46 - it's a really good channel ah thank you
70:48 - um yogesh says hello from india also if
70:51 - i mispronounce any of your names please
70:53 - let me know because i'd love to be able
70:54 - to pronounce them right so just
70:56 - let me know how to pronounce them
70:57 - correctly
70:59 - um vishal says what should i learn react
71:02 - to react native
71:03 - uh if you want to do mobile apps
71:06 - react native is the way to go if you're
71:08 - just interested in web apps then go with
71:10 - react
71:13 - although it's very easy um to switch
71:16 - between them like once you learn one
71:18 - it's easy to learn the other one because
71:20 - a lot of the concepts are the same
71:26 - oh okay so evidently you can create a
71:29 - web flutter project now
71:31 - um but it might be in beta so all right
71:35 - thank you for that um cool i have to
71:37 - check that out so i like i said i think
71:39 - flutter potentially could be really
71:41 - awesome but it's just it's too new for
71:44 - me to be like comfortable um and it does
71:47 - make me nervous that as far as i know
71:48 - google is not really using it for
71:50 - anything big yet
71:51 - uh so i i kind of worry like
71:55 - that google might not work on it anymore
71:58 - so they do have the reputation of like
72:00 - starting projects and then abandoning
72:02 - them uh somewhat quickly
72:04 - um
72:06 - so whereas like facebook and react like
72:09 - very significant portions of facebook
72:11 - are built with react and react native so
72:13 - um it it wouldn't they couldn't just
72:15 - drop it right it would it would have to
72:17 - be
72:18 - um
72:19 - a process to rewrite parts of facebook
72:22 - right so there's a little bit more
72:24 - security built in just because of how
72:26 - dependent facebook is on react at this
72:28 - point
72:28 - google is
72:30 - not at all dependent on flutter at this
72:32 - point for very much of anything
72:34 - so maybe that'll change
72:42 - okay
72:43 - um yeah so a
72:46 - a-o-del a a-o-del not sure to pronounce
72:49 - that that says i'm connecting all the
72:51 - way from nigeria many thanks for your
72:52 - videos i really appreciate it can
72:54 - someone who is new catch up with this
72:56 - tutorial you're working on now oh yeah
72:58 - for sure we're only on the third video
73:00 - so
73:01 - you could definitely catch up not a
73:03 - problem if you're watching the
73:04 - recordings i definitely recommend
73:05 - watching him on two-time speed uh i talk
73:09 - slow enough that i think that's doable
73:11 - and i sound way smarter on two-time
73:13 - speed because i solve all the problems
73:16 - twice as fast
73:17 - so um
73:19 - uh yeah but that'll help you get through
73:20 - them a lot quicker since they are kind
73:22 - of like an hour in length which
73:24 - actually i'm gonna have to wrap this one
73:25 - up quickly
73:27 - so let me get to these last few
73:29 - questions
73:35 - says hello from india every time i watch
73:37 - your video and follow and instagram
73:38 - please say my name there we go sumendra
73:41 - uh samandra pratrap singh
73:45 - um hello from camp so uh rhian says
73:48 - hello from cambodia can i start to learn
73:49 - react native if i'm a beginner uh
73:52 - definitely learn
73:54 - javascript like make sure you know
73:56 - javascript know like
73:58 - your basics of css
74:01 - um
74:02 - so learn that first if you already know
74:05 - some of that then yeah go into react
74:06 - native but if you're like totally new
74:08 - check out freecodecam.org and go through
74:10 - there like html css and like basic
74:14 - javascript stuff
74:15 - then they'll they'll kind of ease you
74:17 - into react and then you should be ready
74:19 - for react native
74:23 - uh
74:24 - let's see
74:31 - uh this is uh
74:33 - mahesh says what is the minimum
74:35 - requirement of react native you get a
74:36 - job i haven't started yet it it just
74:38 - entirely depends on the company really
74:41 - um you know maybe for like a junior
74:43 - position you might only need like a year
74:45 - of react native experience or whatever
74:47 - like but i mean it
74:49 - if you pick it up really fast and can
74:51 - build something awesome with it you
74:52 - could probably convince a company to
74:54 - hire you
74:55 - based on your portfolio so it's it's
74:58 - it's really hard to say
75:00 - uh vishal says what will be your next
75:02 - video on react to react native um my
75:05 - next stream will be react native my next
75:07 - video uh i'm i'm not sure
75:11 - um i might do something with graphql in
75:13 - my next video actually
75:15 - uh so
75:16 - we'll uh
75:18 - we'll see
75:19 - omar says hello is react native like
75:21 - native script uh yeah it would be in the
75:24 - same like category as as native script
75:27 - for sure
75:29 - um
75:30 - all right
75:31 - i gotta go and get to my my real job i
75:35 - was so awesome uh being able to start
75:38 - the day off with the live stream with
75:39 - you all uh thank you so much for
75:41 - watching for all your questions and and
75:43 - your advice your help
75:45 - uh hopefully i'll be back again on
75:47 - friday morning
75:49 - so friday morning eastern time uh
75:51 - definitely like check out i announce on
75:54 - instagram on twitter
75:56 - um before i do the stream so you can
75:59 - follow me on there links to those
76:00 - accounts are in the description um
76:03 - check out my youtube channel uh if if
76:06 - you're interested if you liked what i
76:08 - did here i have more like this on my
76:10 - youtube channel
76:11 - and um
76:13 - yeah have a great uh
76:16 - what day is it wednesday yeah have a
76:18 - great wednesday

Cleaned transcript:

hey everybody welcome to live coding with jesse i'm jesse and today we're going to work on the react native web app that we started two a couple weeks ago i don't remember when we started it um let me know what the stream quality is like last time we had really good quality but the time before that it was terrible so hoping we have good quality again all right and youtube's telling me that the quality is okay so i hope that's the case um all right cool so it looks like it's looking good uh hey everybody uh in the chat and all right so i'm gonna go ahead and get started and then i'll go back to the chat if you've never joined in before this is how it works uh i will do uh pomodoro sessions so let me get a pomodoro timer running um let's go this is fine there we go tomato timer will work so i'm going to start this pomodoro timer it's 25 minutes when 25 minutes is up i'm going to stop coding and i'm going to answer some questions okay we're going to try to get through two pomodoro cycles uh see how that goes uh and then at the end of both pomodoro cycles if there are any questions left i'll answer those and uh if it starts to go really long i will have to cut it off and so i may not be able to answer all the questions depending on how many questions we have because i'll have to go to my normal day job as a software engineer all right so let's check out what we have so far here's the actual app so this is as far as we got last time uh we just have a an input a button and a title on the page but the cool thing was we did all this in react native and it's showing up uh in in like dom primitives basically so these are divs right um so that's that's the idea behind react native web you can write in react native and render it as a web app and you'd be able to render it not only as a web app but since it's in react native you can render that same code uh you can i don't know if render is the right word when we're talking about mobile but uh basically that same code could be used to make an ios app and an android app and potentially other things as well um so let's go to the code all right hopefully that's all big enough for you the only thing that's blocked out by my face right now is just the uh the terminal that that actually is running the local server so not really anything there that would be useful to see let's give ourselves a little bit more space for code all right so you can see our package json at this point is very very basic we have react react dom and react native web react native web includes react native so that's why we don't actually have react native here in our our main dependencies this package json will grow as we continue and uh eventually if we we'd like to turn this into a mobile app as well so it it'll get a lot more complex but right now it's it's pretty simple and we only really have one component and that's app.js and it's also very very basic okay so this will get broken out into separate components but for now i'd like to just work on building out the ui a little bit and we this is going to be a game like basically a math game so i used to play this math game with uh with my oldest son when he was just learning basic math and uh i think we demoed it last week but the the whole idea is you have to get math problems correct to win the game right uh so we want to build out a basic ui i'm not going to worry about graphics at this point so we're probably just going to use like color divs to represent the characters in the game for right now and then later on i'm not really a graphics person so still have to figure out what i'm going to use uh for the characters but we just need to get something on the screen visually so that we can test out the logic all right so for right now the the input is there that's that's what we need uh let's get some i guess let me explain first what what i'm thinking at first is just a basic thing so let me make this bigger all right so this will probably just be at the top as our title we're gonna center uh this on the page uh the input all right so above the input there'll be a math problem right just for now it'll just be a simple addition problem you type your answer in here and you hit submit right that's basic but then above that or even on the sides depending on the screen size uh we'll have the hero character on one side and the enemies on the other side right and if you get the math problem right an enemy will disappear if you get it wrong an enemy will appear right so the way to win the game is to get so many questions right consecutively so that all the enemies disappear right um so that's the very basic idea level one simple um the simplest version of this game all right and then we could think about adding in some more complex things later maybe like having high scores being able to save um your your data things like that but for today i'd like to just get that basic ui uh built out okay and i see so there's some action in the chat so hey everybody that's uh that's joining us um if you're uh if you didn't catch the beginning and you're wondering why i'm not checking the chat just hang in there i have a timer going when that timer goes off i'm going to check the the chat and answer all your questions all right so in react native we don't have the concept of divs uh or spans or you know p tags and things like that we have these other primitives which are base the very basic is the view and the text all right so we're going to be using mostly views here so this main view is going to stay our our root view right um but then we're also going to make let's let's call this our oops i actually i wrote div again i'm so used to that okay so this view is going to be our hero view so for now we're just going to give it like a class basically a style of of hero later on we'll probably break these out into their own components but it's a lot easier to work with them in one place when we're starting out so we're going to say style hero and that's all we're going to have in that view oops view and this one is going to be enemy okay um so for now since i know there's we're going to start out with multiple enemies i'm going to make three okay we're obviously not gonna keep copy and pasting these you know but for now we we're just gonna kind of hard code um a demo of the layout so down here where we have our styles and react native so react native comes with this this style sheet dot create and you can put styles in there basically the styles are a javascript object so instead of normal css you have these camel case versions of css not all of css is available here so it's it's a subset of what you would could normally use on on a website so uh it'll your your app probably won't break but you'll get a little error in the console letting you know um if you're using something that's not supported by react native so for now we're gonna add so this is an object object syntax so we're gonna add a comma and then we're gonna add our hero okay and let's just give them a height a width and a height and in react native the units uh are just plain numbers right so we don't say pixels or em or whatever it's just just flat out uh a number right so for now uh let's keep things small let's just say 40 and height 40. okay so we're gonna keep them at this point just squares right just really basic and then let's give it a color so so we're going to say background color and i don't really know x value for off the top of my head i'm just gonna put in i wonder if you know i've never tried this but i wonder if i could say just like blue i know you can do this on the web but i don't know if you do it react native so i'd like to know if you can do it so i'm just going to try it all right so i just copied and pasted oops there we go i just copied and pasted hero and we're going to call this enemy and let's just say red for the enemy and let's save that see what we get hey here we go so it actually works although i don't know about you but to me this blue looks purple maybe just because it's up against the red it's like messing with my eyes here but anyway so here's our hero and here's our three enemies great uh so i definitely learned something that you you can just put uh the names of colors in there uh so that's useful especially when we're trying to just mock things up really quickly all right so the positioning is an issue right now like we just put them on the page but they're not at all where we want them to be so let's try to get them positioned properly so first thing we can do is move them down below the title and let's add all right here's what i'm thinking probably should add a container for our hero and a container for our enemies so let's do that now so basically our we're gonna have a view and uh styles that um i'm gonna say container for now because i i suspect that these containers are gonna be very similar so that we'll just have this container class and oops we don't want to self close that we want to actually close this view around the hero and then we're gonna have another container around all of these and you know what i don't have oops there we go i don't have like my auto there we go the auto format wasn't working i was worried for a second i never had that set up okay so now we have containers around here we haven't given the containers any styles though yet so let's let's do that right now everything inside the root is getting this justify content a line item center let's let's take the root and make it um heights um i think we can do we can do percentage let's see if this will work and we need to put that all right so we're going to try height 100 on that route i'm not sure if it'll work or not i can't even really tell no no it didn't work so oh actually you know what we should do um let's go with um flex one is this it let me see there's some property on flex that will make it take up the entire um the entire container no that's not it i may have to look that up now so our our actual this says id root but that's not really our root um let's just mess around in dev tools for a minute to try to get this right so this should have our flex yeah our flex grow a one see what this one does um so let's not do anything and are even our bodies on this too at least on this too let's just look this up i had to look this up for a project that i'm working on now but it was like two months ago and i've already forgotten so let's say uh full height view react native there we go uh is it possible to make view 100 and react native yep this looks good all right so flex one is is suggested here which we tried uh let's do this take up the full screen position absolute lose two if it doesn't solve your problem okay so we can go with this position absolute we could also try to get the dimensions first and then set that as width and height okay okay looks like they're doing the flex one thing yeah i think let's just try this um position absolute that will probably be the quickest to test all right so i apologize if somebody already put this in the uh chat let me see each element inside a flex container if you put flex one for each of them will give all the same width height if it's flux section column okay so uh john hanson was talking about the flex uh as well let's try this and i don't want or need these all right let's see what this gives us yay all right this is is the full um the full height now right and okay great all right so now we know we have a full full height and with uh view uh and then within this view let's all right we're at the containers let's style the containers get sidetracked there we have container and within the containers um let's see how we want to do this um i think the normal flex will work for these containers because flex direction is column by default and so i believe that's what we want uh so um in react native flex direction by default is column okay um but here's what we want to do so let's take this route and say let's put up here let's check flex direction row and actually let's comment this out for now really could do this in dev tools okay so this is like what i mean by flex direction uh so by default on the web so if you're using regular react this is would be the layout if you set if you're using flexbox by default on react native in react native the flex direction is column which would have been like the first view that we saw all right so we we're going to within our views probably switch back and forth to get the layout that we want okay so we're going to pro like basically we're going to nest views with different flexbox properties to do our layout right so we're using flex uh flexbox because that's what what the layout stuff is for react like built in to react native right so we're going to need a um a wrapper around this right so we want to leave our main root as just flex direction column but then we'll need a wrapper around this to set these to flex direction row so these line up like this we're going to space them out but for now like we this is a better lineup okay let me check my time in about five minutes i'm gonna go to the questions uh the chat and answer some questions okay so let's add yeah let's add this another view the views are going to start to get crazy it'll get simplified once we split these out into separate components though all right so this view we're going to set a style of and we're gonna say this is uh battlefield all right so this is gonna contain our our battlefield right where our hero and our enemies um do their their math battling and this will encompass both of our containers for uh our heroes and enemies now we can go down here for our battlefield we can grab this flex direction row we'll remove it here and then just add it in down here and let's see if that gives us what we want i don't like that space oops we forgot a comma all right let's check it out now okay great so that that does give us what we want so the main layout remains flex column right flex direction column but then within this see if we can get get the outline here this div so within this container we've switched to flex direction row and then once we're outside of that container we're back to the normal normal layout again okay so not bad now of course we want to separate these these warring parties here and well let's while we have this open uh let's just add some styling right here so we can get immediate feedback uh so okay so the flex one here on this element is gonna give us it's gonna spread us out uh vertically but what we really want i guess here is let's see what this gives us hmm let's see if we can get rid of there we go okay so we're going to give this container this is our battlefield container we're going to give it a width of 100 percent i'm going to stretch out um the the battle here now i don't really want this to take up the full width of the screen um for now i'm going to add some padding on this one it might not be a bad idea just to add padding on the root but we can change that if we need to later so i'm going to say actually let's just we'll add the padding in on in here because it's a little bit different for react native at least we have a different option so our battlefield width is going to be 100 percent and then we're going to say padding we're going to say padding horizontal right and then we can give it a a padding so i'm going to say 16. see how that looks okay so here we have 16 here and i think i forgot to add in i had added in flex one yeah so flex one when i added flex one here all right so this is basically what it's doing it's making this first one this first container for our hero the full width with the exception of the tiny bit of space that we give to our enemies okay so this this will actually achieve what we want for right now so i'll leave it but we may want to switch that up at some point uh because it's logically like uh it may end up being confusing for us because we'll expect there to be kind of like an even battlefield in terms of our containers um actually let's see what happens if i do this oops didn't want that all right this this actually will work out better uh it doesn't look better right now but it will in a minute let's add flex 1 to both of these containers so we do get that middle that split down the middle unit so basically each one would be 50 percent all right let's verify that yep this is what we have now what we can do uh in these containers as well is say like how we want the elements inside to be displayed so flex let's say flex direction and then we have some some options right so oops that's not what i want um is it justify content all right so it's not just like content and then it'll be a line items there we go so if you're trying to like center something vertically or horizontally it's always either going to be justify content or align items i can never keep straight which one is which so i always just try both so this will give us you know what where we want them to be for now i think center is perfectly fine so let's add our align items center oops we gotta put that all right so we're going to add our line item center and then that should center both of them there we go so now we have our our little battlefield right uh now also like we we do have an issue with spacing right and we ought to justify our content as well so we get that vertical align we're going to center that too okay all right so now you see our hero centered our enemies are also centered we want to give some space between our enemies and there's there's two ways we could we could try to do this we could set this container to be larger in terms of vertical height and then whoops my timer went off all right sorry about that all right let's pause that for a second and let me go to the the chat and answer some questions all right okay so philip says philip dares me to code a program which makes a new random language i know it's possible i tried and it works um all right that's that's pretty interesting i don't know i i'm not sure how i would go about that but that's a good idea for a future project thank you rob says good morning social stock says good morning all right so a lot of people are saying good morning so i'm just gonna say good morning to everyone um thanks for watching um surendra asks if i can explain the python language i my experience in python is very limited so uh i'm i'm not the person to explain that all right if anybody else watching is really good with python maybe in the chat you could try to explain a bit uh the only thing i really would say about python is um the syntax is based on a lot on indentation so that's that's kind of all i remember from the brief time i spent learning python uh let's see koval asked about my ide my code editor and it is visual studio code uh john hanson says should the input type be text or number uh it's probably gonna it should be number so i don't remember what i have in there now i probably just copied and pasted it from somewhere the last time okay look at there are some questions here that i think i i actually just answered as i was going along so i'm going to skip some of those um let's see someone which i i can't pronounce her name because it's in different characters says what about flutter um flutter is really interesting and it would be a different way to create mobile apps i don't know that you can create a web app with flutter so flutter seems really interesting i just i don't know enough about it to do a stream on it yet but i've i've read a little about it and it it seems pretty cool okay um we had a question about whether this will be uploaded to the channel later yes all the live streams get automatically uploaded uh to the channel later on i'm gonna adjust my monitor here it's easier for me to read okay okay uh say the question what are we trying to make in the web page uh so i explained a little bit earlier but just very briefly we're gonna make a math game where the user will have to answer basic math problems in order to defeat the the enemy sebastian says i enjoy watching you on my five minute break that's cool uh i'm glad that you enjoy it i have another question do you use php uh so php i i have used it in the past uh i don't currently use it for my job so my php knowledge is really basic though so i've done just some like file uploading um yeah i made like a basic file uploader for php and then all the other php i've done is like wordpress plugins uh so definitely not a php expert you know by any means and all right hey i can't believe i made it through all the questions i think i did i made it through all the questions in the five minutes so let's uh let's start another timer i may have to finish up a little early but for now this should be good i'm going to check the stream quality really quick all right it looks good quality looks good awesome if anybody has any issues with the stream quality let me know um i just see a question how long will this stream go the stream's probably going to end in about a half an hour so another half hour you could always catch the the rest of it in the recording if you if you want to alright so let's go back to our app and let me kind of continue on with what i was explaining i got to change the song i'm listening to it's kind of i can't focus when the song is off okay this is better uh all right so we have two options we probably have more than two but to my mind there are two options i'm thinking of here we can make this container um bigger right so the the goal here is to space these divs out because this is three divs right uh we can make this container like larger vertically then we could use flexbox to space these out evenly within that container or we could just add a little bit of padding or i'm sorry margins to each one of these uh the easier thing to do right now i think is just to add the margins so i wonder actually not i have a different idea maybe for the ui we would want to like let's say push this down a bit so yeah i think this would be better let's set a standard height for this container uh what i'm thinking is like at some point when we start adding and taking away enemies it's going to cause this input to jump up and down right because it's positioned based on the height of this container above it so it'll be uh nice it'll look nicer if this doesn't jump up and down when the enemies do it so let's take these containers and give them some sort of height i wonder if we could do it these ones or maybe maybe this container yeah let's do it on this container let's try it right now and see if we can go um i think we tried this already let's try it i'm gonna try it again there we go i guess i didn't try it so basically what i'm doing here is flex one and we're bumping this down this looks weird now but we'll get down to here and and fix this up a little bit so if we have flex one here now when we go down to this we can say um justify content space around we could do space between we could do space evenly right space evenly looks the best to me so we're gonna go space evenly okay so we need to make two changes back here so on our battlefield we're gonna go flex one and then on our containers we're going to change justify content from center to space evenly and i will give a shout out to john hanson because he was mentioning this further up in the chat um and i skipped over because i knew i was just going to do it here but um john you were like 100 on the right track there uh with this so now we have our battlefield with our enemies spaced evenly uh our heroes over here so this is looking more like like what i have in my mind and with what the original game looked like the original game was really basic it's on my github page uh if you want to check it out it's it's one of my very first repos but the original uh page the original game was just built with uh jquery so it was in my early days of of coding uh so now we have this let's add in we need an actual math problem so we're just gonna hard code one in just to see how it'll look in the ui so the math problem will be here or yeah for now we'll put it here i was actually it might not be if we put it in the middle of the battlefield that might be cool too but let's keep it here for now and then this input definitely doesn't need to be this big if they're just going to put in a number that's probably going to be like two or three digits so we can adjust that and then put some space in here at the bottom so we're not right up against the the bottom of the window okay all right so let's put in our let's see view let's put in a container div so let's say let's call it math container uh i don't want to waste too much time thinking about names so that'll do for now all right so we're gonna put wrap uh our button our input and then our math problem which we're about to put in now we're going to wrap that in in that container and then we're going to have this text uh so like in react native i could never just type text outside of a container so i couldn't just have text here right that would throw an error it has to be inside this this text so let's put um so we're going to just put two plus two for now okay that'll be uh that'll be good enough i guess hey porter gray border okay so i'm not giving any style to this maybe i should uh let's say math text all right so we'll do some basic styles here for math container um we'll definitely want this to be hmm i guess we'll just give it some some padding for now uh and really we just want vertical padding right so we're going to do padding vertical and um let's say 16 as well uh just like we did with our other container so we're going to give this some vertical padding and then here we're going to give our math text oops math text um let's just say font size and let's make the font size i don't know 20 right we'll see how that looks and that should be okay for now just to give us an idea okay so we have our little padding here and we have our math problem we could if our math problems are going to be like this we definitely have space to put our input up here that might not be a bad idea i'd like to see that uh let me know what you think right um so just take a look at it like this and then we'll we'll see what it's going to be like when we switch the input to be in line here and then we'll see which one we like better okay so though the way we're going to do this is we're going to have a container just around here and we'll set the flex direction to row and then that should give us what we want here and we'll keep the submit button below and we'll we'll style that kind of as our next step alright so we need another view um let's say there's a math container let's say math row we'll call it math row since it's going to be in a row flex direction row all right that's one a a little piece of advice that i have is is never spend more than a couple seconds trying to name something because it's so easy to change the name later on and you may actually completely get rid of that view or whatever you're working on it might have different functionality later it might there's so many reasons why that name could change it's it's a waste of time trying to figure out what to name it so the first thing that pops in your head just just use that like i've i've spent too much time like wasting time on naming things and seeing it happen with other people it's it's definitely not not worth it so we have this math row and we're gonna put a flex direction of row on a math row and let's not forget the comma and let's see what that does for us hopefully what i thought it would hey there it is okay so that worked it doesn't look great right now but um yeah you know i think i'll keep it like this for now i want to make this smaller definitely add some padding here some some spacing and then make sure that this text is lined up with at the very least it should be its baseline should be the bottom of this input or it should be centered vertically let me check my timer and check okay i think we're good okay i'm gonna check i am gonna check the chat now that we've i've showed you both ways just to see what you all think as well okay i don't see anything about that in particular so i'm gonna go back to the here and i did see a few more questions in the chat so i'll get to those in a few minutes uh let's yeah let's trim this input down yeah so it can definitely be trimmed down significantly so i believe we have some inline styles on this input we can bring these down to so let's switch this up and do styles dot input and you can see i'm trying to keep my styles in the order uh that things are in the page uh for now that is helping me keep track of them may not be like the best way of organization maybe better ways but it's working right now oops i don't need that okay there we are uh it usually makes sense to put your styles down below uh otherwise when you start to get a lot up here it just it's way too cluttered to have your styles in line as well i mean i won't say never put them in line but it's it's definitely cleaner to put your styles down down below all right so on the input let's give it a width why don't we cut down the height too uh you know what i do i do want to leave it at 40 um just so it's a decent tap target for like on a touch screen but we can change the width and want it to be pretty small um let's go 80. let's see if if 80 works for this and then for a text here for our math row we could put justify content center and that should help us with our text there okay so they made it a little bit better it looks like hmm that's interesting it still didn't exactly help us with our alignment for our text so we'll have to look into that actually we could still go even smaller with this input so let me try that i'm going to go with 60. see how that looks all right that's more reasonable yeah 60 does seem a little more reasonable there okay all right let's work out some of this this padding right here in the inspector so um on our let's see what's going on here this comes out as a div with just some hmm what if we could do a line height whoa that was crazy um oh now i know why that was crazy there we go so if we change the line height we can make this go up and down right so we could do it like that i mean i guess that works this doesn't feel like the best solution but it'll it it'll work for now i could just try let's just try increasing the font size for now um actually i'm not i'm not like entirely opposed to a larger font size um you know this is a like a kids game so like the larger font is not um like in terms of the genre of like kids books and games and things usually they go with a larger font uh especially if they're just learning to recognize their their numbers and things it's easier if it's larger so uh let's go with this size 26 font it looks like it fits well with this uh 40 pixel height for the input so that that'll be a good font size for us so we'll go with that and then let's add a little um so we're going to say padding uh let's go with our padding left right sorry right let's go with 8 pixels there we go so that space out a little bit alright i think i think that works so we're going to bump this up to 26 and then add a padding right of 8 pixels or eight unitless numbers uh all right that works that's cool uh we need some space in between the submit button and this row so we're gonna go on the container itself i don't want a huge amount of space so i'm going to try a padding bottom of 8. and we'll see how that looks all right great all right not bad i mean i'm not this is not gonna win any awards for design here but like uh it's it's good enough that's not going to drive me crazy to look at okay um let's see what else we can do i mean i'm gonna probably change the color of this button i i kind of want to leave the button really large too especially when we consider the um this running on a phone um if if children are going to be playing this game like uh their dexterity you know with their fingers probably not great so you want to make sure tap targets are like probably larger than we would even normally make them okay all right this is not bad not bad we got the basic ui uh i'm okay with this for right now right uh i think on the next stream i'd like to move on to some of the logic of what's happening maybe actually getting these to appear and disappear uh depending on what's what's put into here so yeah i'm okay for now uh so i'm gonna go to the chat right now and i know we i went a little over on the last pomodoro session i didn't notice when this was actually the timer was up so i'm gonna end this one a little early so i have time for questions but definitely want to commit this so that you all have access to the code that we've done today so let's do git status and see okay we modified app.js great just like we thought that's the only file we worked in let's do a git commit and i'm going to give it an am flag right which means we're adding and we're committing and we're going to add a commit message too so we're going to say i like to kind of prefix all my commit messages so that we kind of know what this is about so this is a new feature right the the addition of this ui element so uh if you add ui for characters all right so that's kind of basic we did we did more than that but essentially like what really what we really added the biggest part we added was we we have these these characters now on the screen and so now we're gonna push this up to github if you're wondering like how we set all this up uh we did do some setup in the last stream and then on my channel uh i go in depth more into like how to use get and set it up on your computer so uh the the link to my youtube channel is in the description if if you you know need a little bit of extra um extra help like getting up to speed on what we're doing here maybe check out some of those tutorials and that should should help you okay cool so all that code should now be on github let me show you the repo and so you can go to it uh let's give it a refresh right so here's our commit and i'm gonna put i forgot to put this in the description to the video so i'm gonna copy and paste it right now in the chat uh this is the link to the github repo i'll try to remember to put it in the description uh for next time okay um so i'm gonna do just uh a little bit more question and answer before we end this stream and let me find okay so uh samuel says uh i'm the newbie uh of a frontend engineer what language do you recommend except for javascript and php so you want a language recommendation that's not javascript or php and you're a frontend engineer um honestly like if you're doing anything with frontend like javascript is the language you need to know that now if you want to pair that with something backend and that's not php it kind of depends on what you want to work on you could go with you could go with java you could go with like.net um it it just kind of depends on like different factors like what you already know what you're interested in uh if you have a certain job you really want like what does that company use you know maybe you want to go with that so it's it's hard to say but um you know if you want to focus on front end you know javascript really is uh necessary uh costa says hello is it worth learning django in 2019 thank you all right so i would say if something is worth learning it's just it is definitely dependent on your situation right um i'm gonna it's kind of me to be like the same thing i just said if you know the company you really want to work for the technology you really want to work with or whatever is is django based then it is worth it for you to learn it now just if you are just getting into uh you know software engineering or web development and you want to know what to learn i would not really even think of django as something to learn to be honest like i would say more focus on javascript and you could run full stack javascript um and like see where that takes you where you end up getting a job what your clients need and and then kind of decide like okay well all my clients are using django or my company's using django but um i i wouldn't give the advice to someone who's new to say like focus on django right now does that make sense hopefully i i answered your question um oh by the way django is um correct me if i'm wrong but i believe django is like um uh python based am i right see john hanson says the answer's four so did i defeat the anime yes you that is the correct answer let's see uh in empty says how to create custom roms uh i have no idea how to create custom rom so i'm sorry i don't really know about it um habib says is this css coming from react also um yeah so like this uh the stylesheet object that that we have here this is built into react native so this actually does some cool optimizations with your styles so if you're using react native i definitely recommend doing your styles like this it's not the only way but because it's built in with um i don't know how it does it all in the background but basically it it will apply these styles in a way that's going to be most helpful to your performance all right so peter asks why are you using react native for building a web ui is that a real scenario actually yeah that's a really good question because this concept of using react native for the web instead of using just regular react is a weird concept right but the idea is if you use react native to build a web app you can use that same code base for your android and ios app and then if you have a desktop app as well the same code base for that could be used right because you could use something like electron um to run your your react native web app on the desktop so the the idea is like you know you have your your team or just you and you don't have the resources to hire people who are experts in ios and separate experts and android and separate experts in web so you want to be able to share the code and be able to do more with you know your developers that you already have so it is a real scenario so i'm actually using react native web currently at my job uh my normal job and the the idea behind it is we want to be cross platform uh with one code base michael cross's views and views and views yeah actually it does uh you you definitely end up getting a lot of views once we break these out into components though it it won't be all these views together you know these will have their own names as components so it will it will look better like in terms of what gets added to the dom it's going to be divs and divs and divs but at least for the development of it it'll be a lot cleaner let's see all right we had another question about what am i building uh basically i'm building a a game a math game for for children to help them learn how to uh learn about math um let's see i lost my place okay so uh michael then adds um saying that the point to build it like is to build it like this initially but also be clock cross platform so yeah that's a good point michael i forgot about that too like it is the developer experience for developing a web app is a lot better than trying to develop uh on a mobile device or even with an emulator so building it like this actually is really fast at least like for the basics and then switch over to testing it on mobile um it's it's just a faster like the feedback loop is faster it's it's easier to figure out what the errors are so i i definitely prefer this uh peter says my opinion is react plus material ui would be more practical um yeah so i'm i'm assuming you wrote that before my explanation so i'm just i think my explanation kind of deals with that although i definitely love material ui and i really wish that i could use material ui with react native so i'm going to throw that out there material ui is awesome let's see uh uros ask when the next stream is uh i'm planning on friday so hopefully everything will go well on friday morning and i can get another stream in um so probably like 8 a.m eastern time again jarvis says love your work keep going oh awesome thank you so much um tarcissia says what are these clothes behind you oh this all right let me let me show you what's behind me so i'm currently in the corner of my basement like right next to my washer and dryer for for clothes right so in order to make this feel more like an office i hung up tablecloths from the ceiling to give me like walls right so this has the added benefit too is that when my kids and stuff like pass through here like they don't get in the the view because i do have um i've had in the past kids potty training and i currently have one kid potty training so they will at times run through here naked on their way to the bathroom so i can't have that on youtube so this is this was the cheapest way for me to have some walls up here so um we're right now i'm in the process of uh trying to buy a house another house where i can then have a proper office but for now this is like my temporary solution i know it looks really weird uh the people on my team make fun of me and says it looks like i'm in some type of dungeon or like fallout shelter or something yeah hello from russia and germany hey how's it going cool hey i might speak at a conference in russia i'm waiting to hear back to see if i got selected so i'm excited about about that uh and i was in germany a couple months ago i loved it all right ronald says can you tell me what i can learn to be a frontend developer and what kind of course or path you recommend i definitely recommend free code camp so check out freecodecamp.org and start through their lessons and then they'll also have a lot of links for extra information that you can go out to but if you go through the free code camp stuff you're definitely going to be on on the right track let's see uh md uh hussein says subscribe thank you so much uh julio says did you consider flutter uh i thought about flutter but i i'm i'm not sure as far as i know flutter you can't build a web app with flutter it's just for mobile apps so correct me if i'm wrong i probably still would have gone with react native because um it's been around longer it has a larger community uh there are more like large companies with like apps in production um you know they're actually live so i feel better about that but i think flutter is going to be a good option as it matures though habib says can't we use any frontend framework with react i think that was in response to like um using material ui uh i can't use material ui with react native so it was built for react based on dom primitives so it you can't use it with react native that has its own primitives uh jion says why do you have a computer next to your washer uh because i have a small house and it was the only place that i could go that uh wasn't already being used by my wife and kids um dr hezekiah asks what software i use for the video and screen capture um uh obs so the software is called obs it's free it's crossplatform so check that out michael creole says uh remember the spaghetti of the last project yes so glad that i i'm not i don't have to do anything more with that project like it was i was proud of it you know what what we did with that last one but it is kind of a relief to just uh be able to move on tarziu says hello from brazil uh says it's a really good channel ah thank you um yogesh says hello from india also if i mispronounce any of your names please let me know because i'd love to be able to pronounce them right so just let me know how to pronounce them correctly um vishal says what should i learn react to react native uh if you want to do mobile apps react native is the way to go if you're just interested in web apps then go with react although it's very easy um to switch between them like once you learn one it's easy to learn the other one because a lot of the concepts are the same oh okay so evidently you can create a web flutter project now um but it might be in beta so all right thank you for that um cool i have to check that out so i like i said i think flutter potentially could be really awesome but it's just it's too new for me to be like comfortable um and it does make me nervous that as far as i know google is not really using it for anything big yet uh so i i kind of worry like that google might not work on it anymore so they do have the reputation of like starting projects and then abandoning them uh somewhat quickly um so whereas like facebook and react like very significant portions of facebook are built with react and react native so um it it wouldn't they couldn't just drop it right it would it would have to be um a process to rewrite parts of facebook right so there's a little bit more security built in just because of how dependent facebook is on react at this point google is not at all dependent on flutter at this point for very much of anything so maybe that'll change okay um yeah so a aodel a aodel not sure to pronounce that that says i'm connecting all the way from nigeria many thanks for your videos i really appreciate it can someone who is new catch up with this tutorial you're working on now oh yeah for sure we're only on the third video so you could definitely catch up not a problem if you're watching the recordings i definitely recommend watching him on twotime speed uh i talk slow enough that i think that's doable and i sound way smarter on twotime speed because i solve all the problems twice as fast so um uh yeah but that'll help you get through them a lot quicker since they are kind of like an hour in length which actually i'm gonna have to wrap this one up quickly so let me get to these last few questions says hello from india every time i watch your video and follow and instagram please say my name there we go sumendra uh samandra pratrap singh um hello from camp so uh rhian says hello from cambodia can i start to learn react native if i'm a beginner uh definitely learn javascript like make sure you know javascript know like your basics of css um so learn that first if you already know some of that then yeah go into react native but if you're like totally new check out freecodecam.org and go through there like html css and like basic javascript stuff then they'll they'll kind of ease you into react and then you should be ready for react native uh let's see uh this is uh mahesh says what is the minimum requirement of react native you get a job i haven't started yet it it just entirely depends on the company really um you know maybe for like a junior position you might only need like a year of react native experience or whatever like but i mean it if you pick it up really fast and can build something awesome with it you could probably convince a company to hire you based on your portfolio so it's it's it's really hard to say uh vishal says what will be your next video on react to react native um my next stream will be react native my next video uh i'm i'm not sure um i might do something with graphql in my next video actually uh so we'll uh we'll see omar says hello is react native like native script uh yeah it would be in the same like category as as native script for sure um all right i gotta go and get to my my real job i was so awesome uh being able to start the day off with the live stream with you all uh thank you so much for watching for all your questions and and your advice your help uh hopefully i'll be back again on friday morning so friday morning eastern time uh definitely like check out i announce on instagram on twitter um before i do the stream so you can follow me on there links to those accounts are in the description um check out my youtube channel uh if if you're interested if you liked what i did here i have more like this on my youtube channel and um yeah have a great uh what day is it wednesday yeah have a great wednesday
