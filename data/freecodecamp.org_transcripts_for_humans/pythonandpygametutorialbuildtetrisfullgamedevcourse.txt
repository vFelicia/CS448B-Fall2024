With timestamps:

00:00 - [Music]
00:06 - so this is gonna be Tetris in Python
00:09 - with PI game now this is a pretty
00:11 - advanced tutorial a lot of the stuff I
00:14 - do in here assumes that you already have
00:15 - a basic knowledge of Python and you kind
00:17 - of know some of the syntax and you're
00:19 - not a complete beginner that being said
00:21 - if you are a complete beginner feel free
00:23 - to watch through see what you might
00:24 - understand you're probably gonna learn
00:25 - something along the way it just might be
00:27 - a little bit confusing because I'm kind
00:29 - of gonna speed through a few things that
00:30 - are I would consider like trivial right
00:32 - now okay so first step for this tutorial
00:35 - series is you guys have to download and
00:37 - install Pi game because that's the
00:38 - module we're gonna be using so I will
00:40 - put a link in the description and a card
00:42 - in the top right hand corner here to go
00:44 - and do that I have a video it's pretty
00:47 - quick and it kind of goes through any
00:48 - areas you might run through when
00:49 - installing PI game so watch that first
00:51 - and then come back here okay so let just
00:53 - give a quick preview of what our game is
00:55 - going to look like so this is Tetris I
00:58 - didn't go too fancy with the graphics I
01:00 - pretty much just want to make sure that
01:02 - we get everything functional here and
01:04 - then you guys can play around and change
01:05 - stuff later on if you want to but yeah
01:08 - this is a fully functioning game you can
01:10 - see it's just like standard Tetris we
01:11 - have different colors shapes are falling
01:13 - down the screen shows us our next shape
01:14 - and there we go the road just cleared so
01:17 - that's all I'm going to show you for
01:18 - right now because I want to get into
01:20 - actually coding okay
01:22 - so pretty much what we're gonna be doing
01:26 - in this first tutorial is we're gonna be
01:28 - working a bit in the main function we're
01:30 - gonna be creating the grid we're gonna
01:32 - be talking about formatting shapes all
01:34 - the basics of just setting up for the
01:36 - rest of the tutorials so the first step
01:38 - and what I need you guys to do is you're
01:40 - gonna download kind of like a starter
01:42 - file okay and that's just because if you
01:43 - see here I scroll through my file I got
01:45 - a lot of lists I got a few things set up
01:47 - here and you know what I could go
01:48 - through and type them all out but that's
01:50 - just a waste of the video because it
01:52 - takes a long time so to save yourself
01:54 - time and to save me some time what I'm
01:56 - gonna do is just put a link in the
01:57 - description it's a pastebin link click
02:00 - that link and download this code it's
02:02 - just gonna be all this it just has all
02:03 - the functions that we're gonna need for
02:05 - this and then it has these shape formats
02:08 - which I'm going to talk about in just a
02:09 - minute so go do that if for some reason
02:11 - paceman is not working let me know in
02:12 - the comments
02:13 - and I'll find another way to give it to
02:15 - you but I'm also gonna put it in the
02:16 - pinned comment so that you can just copy
02:18 - and paste it from there as well I do
02:20 - recommend you check the indentation on
02:22 - it though because sometimes it messes up
02:24 - on paste bin and in the comments okay so
02:28 - now that you've got that downloaded
02:29 - we're working on that I'm gonna be
02:32 - working in PI term if you don't know
02:34 - about PI term don't worry about it you
02:35 - can just use ID ideally but it's just
02:37 - gonna save me a bit of time because it
02:39 - autocompletes variables it does some
02:41 - cool stuff so that's what I'm gonna be
02:42 - working in feel free to work in PyCharm
02:44 - feel free to work in whatever text
02:45 - editor you want just know that that's
02:47 - what I'm using it doesn't make a
02:48 - difference but some of the stuff I do in
02:50 - here you might not be able to do in
02:51 - ideally or sublime text or whatever you
02:53 - guys are gonna use okay so we've got
02:55 - that all the way we've got everything
02:56 - set up and now we're ready to actually
02:58 - start coding and understanding what's
02:59 - gonna be going on so tetris is a fairly
03:01 - complex game you have shapes moving down
03:03 - the screen they're rotating around
03:05 - they're moving left and right when they
03:07 - hit the bottom they freeze in whatever
03:09 - position they're in and then if you have
03:10 - a full row complete like cubes they're
03:13 - not real clear and you keep going and
03:15 - obviously you lose the game if you stack
03:18 - up too many blocks and it goes up or
03:20 - above the top of the screen
03:22 - okay so this first variable is we need
03:25 - to set up is our screen width and our
03:27 - screen height so we got eight hundred
03:28 - seven hundred here the next ones are
03:30 - play with and play height now this is
03:32 - the actual red box that you guys saw
03:35 - that's what these are representing so
03:38 - since in Tetris we have a ten by twenty
03:40 - grid we need to make sure that our play
03:42 - with is exactly half of our play height
03:44 - so that we have perfect squares right
03:46 - so doing the math here that makes it 30
03:48 - width and 30 height per block so that's
03:50 - our block size of 30 okay so now this
03:54 - top left and top left X and top left Y
03:56 - this represents the top left position of
03:59 - our actual play area that's so when we
04:03 - start drawing blocks and we start
04:04 - checking for like collision and stuff
04:06 - like that we just have these already set
04:07 - up and we don't have to deal with that
04:08 - so the math is pretty straightforward
04:10 - you guys could probably figure that out
04:12 - you don't need me to explain that okay
04:14 - shape formats so these and this is the
04:17 - longest part is why I got you guys to
04:18 - copy everything is this is what's gonna
04:20 - represent our shapes in Tetris now you
04:23 - see that I have multiple lists inside of
04:25 - lists in most case
04:26 - says this is because each shape has
04:29 - possibly more than one rotation right so
04:32 - this is the standard rotation of the S
04:34 - shape and that's actually what they're
04:36 - called in Tetris like S said I oh
04:38 - whatever
04:38 - and this is the second rotation and
04:41 - these are the only two rotations or
04:43 - whatever that s can have so that's why
04:46 - we have them in here we have a 5x5 grid
04:47 - of periods and then whatever there's a
04:50 - zero that represents where the block
04:51 - actually exists okay so Zed you can
04:54 - scroll through you can kind of look at
04:55 - them and you can see for some of them
04:56 - for example the square well it doesn't
04:58 - have any rotation if you flip it it's
05:00 - gonna look the same so we only have one
05:01 - list here for jafe however though we
05:04 - have four right because we can rotate it
05:06 - in different ways l we also have four t
05:08 - we have four as well okay after this I
05:12 - create a list and it just holds all of
05:14 - my shapes so s said I just so that that
05:17 - way I can really easily select shapes
05:19 - just by indexing them in the list like 0
05:21 - through 6 and shape colors here is the
05:24 - same thing it just corresponds like for
05:26 - example if I did shape 0 and I did shape
05:29 - color 0 then that's gonna be the color
05:30 - of shape 0 okay same thing with like 6
05:33 - so shape 6 well color list our shape
05:36 - colors 6 is the color of that shape so
05:39 - just makes it really easy we don't have
05:41 - to deal with dictionaries or anything
05:42 - like that ok alright so now we've kind
05:45 - of gone through the like starter file
05:48 - I'd say and you can scroll down here you
05:51 - can look at the function names I'm not
05:52 - gonna explain them because most of them
05:53 - are pretty straightforward and I'll talk
05:54 - about them when we start coding them
05:55 - anyways
05:56 - but we do have a class here now this
05:58 - class is gonna be the main kind of data
06:00 - structure if you want to call it for our
06:03 - game and this is gonna represent or this
06:06 - class is going to represent different
06:07 - pieces so the reason we have the class
06:09 - is because we're gonna call this a bunch
06:11 - of times and it's pretty much just gonna
06:12 - hold the information like X Y width
06:14 - height for our piece so let's actually
06:15 - start coding this now so I'm just gonna
06:17 - create my initialization function or
06:19 - method and this is actually the only
06:21 - method that I'm going to have so I need
06:23 - another underscore just butchered that
06:24 - and pretty much what this is gonna have
06:27 - is gonna have an X of Y and then it's
06:31 - gonna have a shaker okay
06:32 - and let's see on the information we need
06:34 - for this and I'll show you why so we'll
06:36 - say self-thought x equals
06:39 - self-thought Y is equal to Y self dot
06:42 - shape is equal to shape and then what
06:46 - we're gonna do here now is we want the
06:48 - color and we want the rotation so a self
06:51 - dot cover well I was already talking
06:53 - about this self-doubt color is just
06:55 - equal to whatever the index of this
06:56 - shape is in this color list so what we
07:00 - can do is we can do shape under short
07:03 - colors square brackets and then shapes
07:05 - dot index and whatever shape we were
07:08 - given so if we're given the shape s well
07:10 - let's just find it in the shape list
07:12 - whatever index that is well that's the
07:14 - color of our shape pretty
07:15 - straightforward and then we're gonna do
07:17 - a rotation so rotation this is going to
07:20 - be set default to zero and this is so
07:22 - that whenever we click the up arrow key
07:23 - we can just add one to this rotation and
07:25 - that will represent what shape were
07:28 - actually gonna be showing because again
07:30 - remember this shape list is a
07:31 - multi-dimensional list it has you can
07:33 - see here in this case four lists within
07:35 - it okay all right create grid I don't
07:40 - know if we want to do this one yet you
07:41 - know what actually let's go let's go
07:43 - ahead and do this one it's not too
07:44 - complicated so the way that I'm gonna
07:46 - represent the grid in Tetris so that ten
07:49 - by twenty grid is just by creating a
07:51 - list full of colors okay so we're gonna
07:54 - have a two dimensional list and within
07:56 - that second dimension it's gonna
07:58 - represent a bunch of colors okay so I'll
08:00 - show you just by coding and kind of
08:01 - talking about after say grid is equal to
08:04 - and then another square bracket here for
08:07 - X and range 20 and or I'll explain this
08:13 - in one second and I will save for X and
08:16 - range ten okay except here let's go to
08:21 - zero zero zero okay so what I've just
08:24 - done here this is pretty this is like
08:26 - the Python way to create list K list
08:29 - comprehension we're gonna create one
08:31 - list for every row in our grid so since
08:36 - we have 20 rows we want to create 20 sub
08:38 - lists and each of these like sub lists
08:40 - or whatever two-dimensional list is
08:42 - going to have a bunch of colors in it
08:44 - how many colors is gonna handle it's
08:46 - going to have ten colors because we have
08:47 - ten squares in each row
08:51 - we have 20 rows so that's the way it
08:52 - works these X's you could replace with
08:55 - underscores because we don't really care
08:57 - about the actual variable we just need
08:58 - to do this that many times now zero zero
09:01 - zero zero or zero zero zero
09:03 - yeah I think that's right anyways that's
09:05 - just black it stands for block and the
09:07 - way we're gonna draw the grid is simply
09:08 - by looping through this grid which we're
09:10 - going to return and just drawing each
09:12 - color so it makes it pretty
09:14 - straightforward okay now the only thing
09:16 - that we have to do here though is we
09:18 - have this locked position argument now
09:21 - locked position well right now we've
09:23 - created a blank grid what if there's
09:26 - already blocks that have been placed in
09:28 - our grades like they've already fallen
09:29 - they're static now they're not moving
09:31 - well we need to also draw those so to
09:33 - draw those we're gonna check if any of
09:36 - the positions in locked position
09:38 - are not like or whatever positions are
09:41 - in locked position we're gonna get that
09:42 - color and we're gonna change the
09:44 - corresponding value in the grid I'll
09:46 - show that just by kind of cooking it
09:48 - here so for I in range undo the length
09:52 - of grid and again this is gonna give us
09:54 - 20 because the length of grid well that
09:56 - it's 20 of these right okay so for I in
09:59 - range Len of grid for J in range and
10:03 - then we'll say the Len of grid I because
10:08 - now we're in this list so now we're
10:10 - gonna do whatever the length of that
10:11 - list is okay I say if this so if J comma
10:17 - I because J is our x value I is our Y
10:20 - value because rows are represented by I
10:22 - and the columns are represented by J in
10:25 - locked position and just you know locked
10:28 - pause it stands for locked position it's
10:31 - also a dictionary so you can see that
10:32 - it's a blank dictionary here and each
10:34 - position so like for example if I had
10:36 - like 1 1 is gonna be set equal to a
10:38 - color and the color could be something
10:40 - like 255 0 0 okay and we're gonna talk
10:42 - about that and create that later but
10:43 - that's just somebody needs to know for
10:45 - now okay so J I in locked position so if
10:47 - that key exists let's figure out what
10:49 - that key is so that key is gonna be
10:51 - equal to well locked position and what
10:55 - the value is sorry associated with that
10:56 - key ji now we're gonna change whatever
10:59 - the current grid position is here so for
11:01 - grid I
11:04 - a is equal to C okay I know this might
11:09 - seem kind of complicated but pretty much
11:10 - we're just looking through this grid and
11:11 - we're gonna find the corresponding
11:13 - position to the locked position and just
11:15 - change that color in the grid so later
11:17 - when we draw it we get an accurate grid
11:19 - okay and you guys will see how this all
11:21 - is kind of plays out later if it seems a
11:23 - bit confusing now okay and then we're
11:25 - gonna return that grid to wherever we're
11:28 - calling okay so that that's one part
11:30 - done now we can move down and we can go
11:32 - into draw window which is then actually
11:35 - let's do get shape this one's really
11:36 - easy okay so this is literally a
11:38 - one-liner return random-dot actually
11:45 - what is it called here I gotta have a
11:47 - look
11:47 - I think it's random dot choose random
11:50 - duck choice that's where this random dot
11:52 - choice and then we're gonna be given a
11:54 - shapeless so say shape actually let's
11:58 - just I'm gonna cold up here sorry guys
12:00 - shape random dot choice shapes all this
12:05 - is gonna do is is gonna pick one of
12:06 - these shapes and it's just gonna give it
12:08 - to us so that one we need to create like
12:10 - a new shape falling down the screen ever
12:13 - ever that that's all we have to do okay
12:14 - so get shape random dot choice that
12:16 - one's really easy okay next one draw a
12:19 - grid all right so what we're gonna do is
12:21 - we're gonna be passed a surface and the
12:23 - surface is obviously what we're gonna be
12:25 - drawing on so we're gonna start by just
12:26 - changing the surface surface don't win
12:28 - service-dog fill with color this case
12:31 - the color is gonna be black okay sir
12:33 - just not fill as yours ever do all right
12:35 - next thing we're gonna do is we're just
12:36 - gonna draw like a title on the thing so
12:38 - the way we have to do this we first have
12:39 - to start by initializing the font
12:41 - objects when we do that pie game font
12:44 - dot an it okay this just means we're
12:47 - setting up font and we're getting ready
12:48 - to draw to the screen we're gonna create
12:51 - a font
12:51 - it's got escape font is equal to PI game
12:54 - taunt font dot sys capital
12:58 - SOS font and then we need the font name
13:01 - I'm the Comic Sans guy so I'm gonna use
13:03 - that Comic Sans size of the font I
13:06 - believe ya size of the font Randy's
13:08 - sixty okay so the way you want to set up
13:11 - your own font you want to change this
13:12 - just change this to any font you can
13:14 - look up fonts on the PI game website
13:16 - and then just give it a size if you know
13:17 - the name of the font type it in here it
13:19 - probably exists in Impa game alright so
13:22 - now we're gonna need to set up a label
13:24 - so I say label is equal to font render
13:27 - and then in here we need the text that
13:30 - we're gonna render in this case I mean
13:31 - Cola Tetris you need our anti-aliasing
13:34 - of one and I believe we need a color in
13:36 - this case I'm gonna make it white okay
13:38 - so text anti-aliasing just set this one
13:42 - I don't know why you need to set this
13:44 - one but just set it one and then
13:46 - whatever color you want your label to be
13:47 - okay now that we've got the label we
13:49 - need to draw this label on the screen so
13:50 - lets blend it now when i'm used to
13:53 - typing when surface double it and then
13:55 - in this case we're gonna pull it the
13:56 - label where do we want to put it well
13:59 - now we want to figure out where the
14:02 - middle of the screen is so we could just
14:03 - hard code this in but if we ever want to
14:05 - change the dimensions of our screen we
14:06 - want this just automatically kind of
14:08 - adapt to that so we're gonna do top left
14:12 - X plus play with / - okay and that's
14:18 - gonna give us the middle of the screen
14:19 - if you don't understand that let me know
14:22 - and I can explain it to you in the
14:23 - comments down below okay now we're gonna
14:25 - subtract this sorry this isn't actually
14:27 - done yet by the width of the label
14:29 - because this is gonna matter
14:30 - uh-huh depending on how long that the
14:32 - label is we it's going to determine
14:34 - where we place it on the screen so we're
14:36 - gonna get the width of the label and
14:38 - we're gonna divide that by two okay so
14:40 - now we have to do the Y well the Y is
14:42 - pretty easy we can just statically type
14:44 - this in because it's from the top of the
14:46 - screen so I'm just gonna give it and
14:48 - click 50 is what I typed in 30 okay and
14:51 - that should put it in the middle the
14:53 - screen and I can explain that to any of
14:55 - you guys it might not understand it if
14:56 - you just leave a comment because I don't
14:58 - want to waste too much time because I
14:59 - love people might understand that so for
15:01 - I in range now the Len of grid because
15:05 - now we're gonna start drawing all the
15:06 - great objects onto the screen so we
15:08 - created a grid we know how that kind of
15:10 - format works we're going to say for J in
15:13 - range the Len of grid I same as before
15:19 - and we're gonna do PI game dot draw dot
15:23 - rectangle and then this guy's been drawn
15:26 - the surface and then we're gonna go
15:29 - career
15:29 - i J okay and then top underscore left I
15:38 - need to put this in what do you call it
15:40 - brackets your top underscore left so
15:43 - just need to scroll over top left
15:45 - underscore X plus j x 30 and i'll talk
15:49 - about this one in just a second how this
15:50 - works and then top left y + i' x 30
15:57 - another bracket and there we go now we
16:00 - just got to deal with this grid thing so
16:01 - that means that we just now need to past
16:03 - grid as well into our draw grid okay way
16:08 - this works we're gonna loop through
16:09 - every color within our grid so this is
16:12 - the color grid I J alright this is the
16:14 - surface we're drawing it on to you and
16:16 - this is the position in which it's being
16:18 - drawn now we also just need to add two
16:21 - things here that I realize I forgot
16:22 - because we need the XY we need a width
16:24 - and we need height so for width and
16:26 - height well that's go to the block size
16:28 - and block size once again and you know
16:31 - we can even multiply this instead of by
16:33 - 30 by block size in case we ever decide
16:35 - to change that so let's do that just to
16:37 - keep this nice and dynamic and then if
16:40 - we keep going over here the last thing
16:41 - we need is a fill so we're just going to
16:44 - put comma zero to make sure that we fill
16:46 - in the shape we don't just draw like a
16:48 - border for it okay way this works we add
16:51 - our top left X and we're gonna figure
16:52 - out wherever we are so which column were
16:55 - in multiply that by block size and
16:58 - that's our x position same thing works
17:00 - for the y with the starting Y position
17:02 - plus whatever row we're in x the block
17:06 - size will give us the correct position
17:09 - to draw our Cuban okay after we've done
17:11 - all that we just need to update the
17:13 - screen so pygame don't display the
17:16 - update and there we go so there's
17:18 - actually one last thing we want to draw
17:20 - and it's that red rectangle that you
17:22 - guys saw in that right kind of represent
17:24 - it like the play area so to draw the a
17:26 - video pie game dot draw dot rect and
17:29 - then surface and then in this case we're
17:32 - just gonna actually let's see here do we
17:35 - want do I want to dynamically type this
17:37 - in or do I want to statically draw it so
17:39 - let's give it a color first of all of
17:40 - red sea
17:41 - zero-zero okay and we're actually gonna
17:43 - type it in dynamic just in case we
17:45 - decide to change anything later so top
17:47 - left X and top left Y and then the width
17:51 - oh we actually already have all these
17:52 - variables so we have the play underscore
17:54 - width and you play underscore height and
17:57 - in this case we're gonna give it a
17:58 - border size four okay and that's all for
18:02 - drawing the grid we might come back to
18:04 - this later but for now that's it okay so
18:07 - this just draws the actual grid ah draw
18:11 - a grid and I've added this okay we're
18:14 - just gonna copy this part of you guys
18:15 - that says draw a grid so serve first up
18:17 - lit this label and I'm just gonna move
18:18 - this in because I realize I have another
18:19 - function called draw window so in draw
18:22 - window what I'm gonna do is surface top
18:25 - fill whatever okay so I take surface and
18:29 - a grid so I just copied some of it from
18:30 - there and then instead of updating the
18:32 - screen here we're gonna update the
18:35 - screen over here and we're just gonna
18:37 - call our draw grid
18:40 - what do you call function like this okay
18:43 - so now what if we want to draw the grid
18:44 - and we want to use the same another
18:46 - program we could just copy and paste
18:47 - this function we would enough to kind of
18:49 - take it out of here we have enough like
18:50 - dissected alright okay subtract rid
18:53 - again this takes surface and this takes
18:56 - grid and there we go I believe that's
18:59 - working well okay now that we've done
19:01 - that we're gonna start coding in the
19:03 - main and in main menu and this is what
19:06 - we're gonna finish off with this
19:07 - tutorial because I know we're almost at
19:08 - the 20 minute mark right so what we're
19:10 - gonna do in Maine now is we're gonna set
19:12 - up a few variables so the first variable
19:14 - we need is this locked position locked
19:16 - positions again and again this is what
19:18 - we're passing up here in to create grid
19:22 - it's equal to a blank dictionary just a
19:27 - set in case we don't pass it then we
19:28 - don't need it okay so locked positions
19:30 - equals blank we ready to say grid is now
19:33 - equal to well create grid because we
19:34 - already created that function with
19:36 - locked positions passed to it can't
19:38 - create a variable called change
19:39 - underscored piece it's gonna be equal to
19:41 - false we're gonna make run equal to true
19:45 - this is just for our while loop that
19:46 - we're gonna use we're going to say
19:47 - current piece is equal to get underscore
19:52 - shape okay we're going to say
19:54 - next piece is equal to get shape as well
20:00 - where I set up a clock object and clock
20:02 - is equal to PI game time dot clock and
20:07 - we're going to set a variable called
20:09 - fall time equal to 0 and those are all
20:11 - the variables that we need in our main
20:12 - function already coded for us ok so now
20:15 - we're gonna set up our while loop that's
20:17 - our main game like you're say well run
20:18 - first thing we need to do in our loop is
20:20 - sorry for event in in PI game dot event
20:24 - dog gets let me say if event dot type
20:28 - equals equals PI game dot quit well that
20:33 - means we need to quit the program so the
20:35 - way that we can do that just simply
20:36 - hitting run equals false it's gonna
20:38 - break us out of our raw loop and then we
20:39 - can deal with that afterwards we're also
20:41 - gonna add another event this is a
20:43 - keydown event so if event type egos
20:46 - equals PI game dot keydown like that
20:49 - then we're gonna check what specific key
20:52 - is actually hit so let's go ahead and do
20:54 - this now I can I get it over with so I'm
20:56 - just gonna type all the different keys
20:57 - and then we'll go in and code that after
21:00 - so we'll say if what do you call it PI
21:02 - game key equals equals I believe that's
21:07 - what it is art event key not probably
21:10 - ended up keep my bad guys event key
21:11 - equals equals PI game dot K underscore
21:15 - capital K okay underscore left let me
21:20 - say if event donkey equals equals PI
21:24 - game dot K underscore right like that
21:27 - and then same thing up and down so if
21:30 - events don't key equals equals I get him
21:34 - done ok hundreds go down and last one
21:38 - okay I'm screw up okay okay I don't know
21:46 - why that keeps happening
21:47 - okay okay underscore up like that okay
21:50 - so painfully after typing that left
21:53 - right down up now we can go in here and
21:55 - we can kind of code what each of these
21:56 - is gonna do so if we're hitting left we
21:58 - want to move our block left if we're
22:01 - coding right well if we're hitting right
22:02 - we want to move our block right and
22:04 - we're going down we're gonna move down
22:06 - we want to rotate our shape that's what
22:08 - the main things are gonna do in here so
22:11 - if we want to move our piece left well
22:13 - we should change the wat the x value
22:16 - left wise okay
22:18 - so the way that we can do that inside
22:20 - current piece dot X minus equals one now
22:23 - I know you guys are looking at this
22:24 - right now you're saying okay well what
22:25 - what the heck man so current piece is
22:27 - equal to get shape and that's all it's
22:30 - equal to get shape well what is get
22:32 - shape and it's just returning random
22:35 - choice shapes now this actually just
22:38 - made me realize the fact that our get
22:40 - shape thing needs to change a bit that's
22:42 - because we need to actually create a
22:44 - piece in here so we set up this lovely
22:46 - class up here we've already been using
22:48 - it so piece random dot choice shapes is
22:51 - the last argument takes it also takes an
22:53 - x and a y value right so for the X and
22:56 - the y well the Y is pretty straight
22:58 - forward is just going to be 0 the X has
23:01 - to be the middle of the screen so we're
23:02 - gonna give it 5 and for y we're gonna
23:04 - give it zero okay
23:06 - and actually for y we'll leave it 0 for
23:09 - now but we might want to make it
23:10 - negative so that it kind of starts above
23:12 - the screen and then starts falling down
23:13 - okay
23:14 - so we have let's make sure this works it
23:16 - looks right X Y shape yep okay great
23:18 - okay so that makes sense now on how we
23:21 - can change this x value same thing for
23:23 - right I'm gonna do current piece Y dot X
23:28 - plus equals one like that and for down
23:32 - we're actually just gonna take this in
23:34 - for now but this is not exactly what's
23:35 - gonna work y plus equals one to move
23:38 - downwards and for up well we need to
23:40 - rotate the shape so to rotate the shape
23:42 - this is actually pretty easy over and
23:45 - each state is current piece rotation
23:47 - plus equals one okay because when we
23:49 - change that rotation well that changes
23:51 - the actual image of the shape okay now
23:54 - this is all great but the thing is what
23:57 - if we're moving off the screen or what
23:59 - if this is not a valid position well
24:01 - that's why we have a function called
24:02 - valid space now valid space we haven't
24:07 - yet coded but I do have it in here
24:09 - somewhere valid space and what valid
24:10 - space is gonna do is it's simply in a
24:12 - return if the current position that
24:13 - we're in is a valid space so the way
24:15 - that I do since just make life a lot
24:17 - easier if we're moving left let's simply
24:20 - just
24:20 - change the pieces ex move it left one
24:22 - and then check if that's a valid
24:24 - position and if it's not well then we
24:25 - can just add one and move it back to
24:27 - where it was so I say if not and then
24:30 - valid space and valid space again take
24:33 - two arguments you can take the current
24:34 - piece it's gonna take the grid okay then
24:38 - let's just simply subtract or add one to
24:40 - our piece so all this is saying is we're
24:43 - gonna move left but if for some reason
24:45 - moving left results in not a valid space
24:48 - well let's just add one and pretend like
24:49 - we didn't even move there so we're not
24:51 - drawing it we're not changing anything
24:52 - so this is perfectly fine and it's
24:54 - actually a really easy way to check
24:56 - things so they're having two checking if
24:57 - if it's below this or above this or
24:59 - whatever okay so now next next one here
25:01 - gonna say if not valid space and same
25:06 - thing current piece with grid well now
25:10 - in here instead of adding one we're
25:11 - gonna subtract one because we were
25:12 - trying to move right and there we go
25:14 - same thing with moving down okay so
25:16 - we're literally just gonna take the
25:18 - exact same thing if not valid space
25:24 - current piece and grid well now let
25:28 - instead of adding one we're just gonna
25:29 - subtract one and this is from the Y
25:30 - value this time so it's like current
25:32 - piece dot y - equals one okay so now for
25:37 - up so when we change the rotation we are
25:41 - changing the shape okay so it doesn't
25:45 - show this yeah yeah right now like how
25:47 - we change the shape we're gonna do that
25:48 - later so we can actually just call the
25:50 - exact same thing on rotation because
25:51 - think about it if we're fully on the
25:53 - right side with like the straight piece
25:56 - and we try to rotate well that could
25:58 - result in our piece being moved to the
26:00 - left or to the right or like there could
26:02 - be positions where it's on the left or
26:04 - it's on the right and it's not in the
26:05 - grid so we do have to check for rotation
26:08 - if it is a valid space we'll say current
26:10 - piece and then what else are we doing
26:13 - great here okay
26:15 - and then in this case again we'll just
26:17 - we'll just subtract one from rotation so
26:19 - minus equals one and that should all
26:22 - work pretty well okay so after we do
26:25 - that we're gonna make sure that we
26:26 - remember to draw the grid so in this
26:28 - while loop we'll say actually draw
26:30 - window I'm gonna give it surface
26:33 - and we're gonna give it grid now this
26:37 - reminds me that I haven't yet created a
26:38 - PI game surface that's great so let's do
26:41 - that
26:42 - so here I'm gonna say win equals PI game
26:45 - dot display don't set underscore mode in
26:49 - this case I'm gonna give it what is
26:51 - their screen width and screen height so
26:53 - s width and s underscore height and
26:57 - that's it for a display you want to give
26:59 - this a caption though so we'll say a PI
27:01 - game dot display dot set
27:05 - underscore caption yep so let's just
27:07 - call this Tetris like that and now we're
27:11 - gonna just pass when into our main menu
27:14 - we'll put one here and then in main menu
27:17 - we're gonna call me okay and we'll deal
27:19 - with main menu later I don't feel like
27:21 - coding it right now and it's not really
27:22 - important to like the main functionality
27:24 - of a game so we can simply just do this
27:25 - okay
27:26 - main win like this and if I put win here
27:32 - then everything should work out this has
27:35 - surface change this to say when in low
27:40 - cases okay so now you've effectively
27:43 - done draw a grid or draw window draw a
27:46 - grid get shape create grid we've created
27:49 - a piece we've gone through what all this
27:51 - stuff and the starter file does and we
27:53 - are now at 27 minutes hey guys and
27:55 - welcome back to part two of coding
27:58 - Tetris in Python with Pi game so let's
28:00 - get right into it
28:01 - in this video we're gonna be finishing a
28:04 - few other functions we're gonna be doing
28:05 - valid space convert shape format we're
28:08 - gonna be coding a bit in the main and
28:10 - we're also gonna be fixing a small
28:12 - mistake I made in the last video so this
28:14 - code right here in draw a grid yes this
28:17 - does draw our grid but this is not what
28:19 - I intended this function to do and I
28:20 - kind of just realize this when I was
28:22 - looking over the video and looking over
28:24 - the codes we're just gonna copy this
28:25 - code from draw a grid okay delete it out
28:27 - of there and we're gonna paste it down
28:29 - here at the bottom of a draw window okay
28:32 - so now we just have this after we're
28:34 - bleeding the label we have whatever code
28:36 - we had within draw a grid okay
28:38 - because draw a grid would this actually
28:40 - was supposed to do is draw deep lines
28:42 - for the grid so I kind of got this mixed
28:45 - up while I was
28:47 - going through the tutorial so we're
28:48 - gonna finish draw a grid now and what
28:49 - this is gonna do it's gonna draw those
28:51 - grey lines over top of all of our
28:53 - different colors so we can kind of see
28:55 - where each block is that we can see the
28:56 - actual grid structure so let's get
28:58 - started with this say SX which stands
29:01 - for start X is equal to when you call it
29:04 - top left X okay and then s Phi is equal
29:09 - to top left Y like that all right and
29:12 - this is just so I don't have to keep
29:14 - typing top left X top left Y just makes
29:16 - it a little bit shorter for us okay now
29:18 - I'm just gonna say I'm going to set it
29:19 - before Luke when I say for I in range
29:21 - and this is gonna be the length of the
29:25 - grid so how many rows we have let's say
29:27 - for J in range and this one is now gonna
29:31 - be a deal n of grid I so how many
29:34 - columns in each row and then here we're
29:37 - gonna be drawing lines okay so for every
29:39 - row we're gonna draw a line so pygame
29:41 - draw dot line we need a surface give it
29:45 - a surface we need to cover this case is
29:47 - gonna be gray so gray color code
29:49 - standard is 128 128 128 and then we need
29:52 - two positions okay so the start position
29:55 - is going to be equal to SX all right and
29:59 - then sy + what do you call it I I
30:04 - believe x blocksize and I think that is
30:09 - actually correct okay now for the end
30:11 - position well it's gonna be the same
30:12 - x-value because we're just drawing or
30:15 - actually it's gonna be let me just check
30:17 - here yeah it's gonna be a x value that
30:19 - is just equal to the width so SX plus
30:21 - whatever to play with this and then the
30:24 - y value is going to be the same here
30:26 - because if you think about it we're
30:27 - gonna be at the same y value each time
30:30 - we're doing like we're drawing a
30:32 - horizontal line every horizontal lines
30:34 - can have the same two Y values and the X
30:36 - values just gonna be changed okay so I'm
30:38 - just gonna copy this and paste it in
30:41 - here now okay uh-oh all right I don't
30:44 - know why that did that but we'll just go
30:46 - back like that okay so now what we're
30:48 - gonna do is we're gonna do this K so x
30:50 - sx plus j x blocksize okay
30:54 - sy can't actually just stay like this
30:58 - okay and then for
31:00 - X same thing s x+ j x block size and js
31:05 - again as our current column and then
31:07 - this one s y plus play underscore oops
31:12 - we need a plus sign here plus play
31:14 - underscore height like that okay and
31:16 - that should be drawing us what do you
31:20 - call it xx vertical lines and then 10
31:22 - horizontal lines down the screen giving
31:24 - us a grid and kind of the way that works
31:26 - is every time we loop through a new row
31:29 - we're simply changing the Y value of
31:31 - what line we're drawing and then these X
31:33 - values are gonna stay static just at the
31:36 - left side and the right side of the
31:38 - screen and then the way that we do it
31:39 - here is we have the X values that
31:41 - constantly are changing every column and
31:43 - the y values are staying static being
31:45 - the top of the screen and the bottom of
31:47 - the screen to draw the vertical lines
31:48 - and that's what I wanted to do within
31:50 - this drunk grid function so now that's
31:52 - all kind of sorted out and we fixed like
31:55 - a small mistake don't get me wrong you
31:56 - can still have that other code up here
31:58 - it still works fine but just in terms of
32:00 - what I actually wanted to do with these
32:01 - functions that's the way we needed to
32:03 - fix it okay so now that we've done that
32:06 - what I want to start doing is getting
32:08 - into this convert shape format okay now
32:10 - this is probably the most complicated
32:12 - function I want to say within our
32:14 - program and what this is going to take
32:15 - as an argument or a parameter is just
32:17 - the shape now this is what I was talking
32:19 - about before so when we have a shape it
32:21 - looks something like this right so we
32:24 - have zeros that we have periods now this
32:26 - looks nice to us like we can tell what
32:28 - kind of shape this is but the computer
32:30 - has no idea so how can we get this into
32:32 - a form that the computer can read and
32:34 - ideally want to give it we want it to
32:36 - give us positions within the grid of
32:38 - where blocks exist and then we're not
32:41 - going to give position if the block
32:42 - doesn't exist so if there's a period
32:44 - like this okay and you'll see what I
32:45 - mean as we start coding this function
32:47 - and that's what the goal is function is
32:48 - to do to take that information and put
32:50 - it into something that's actually useful
32:51 - to us so we want a bunch of positions
32:54 - that's the goal because from these like
32:58 - lists we want to generate a list of
33:00 - positions and then based on those
33:01 - positions we can do things we can check
33:03 - them we can draw them and so on so I'm
33:05 - just gonna create a list called format
33:07 - don't worry if it's a keyword
33:08 - it'll just override it we're gonna say
33:10 - when we're giving a shape we're actually
33:11 - given a piece object
33:13 - so I don't know why I'm calling shape
33:14 - but whatever it's fine so shape dot
33:16 - shape and then we can just do is equal
33:19 - to and I'll talk about this in a second
33:21 - shape dot rotation modulus the length of
33:24 - shape dot shape
33:26 - okay so what this does is actually gives
33:28 - us the sub list that we need so needs to
33:32 - be spelled correctly I don't know how I
33:36 - butcher that so bad okay shape touch
33:37 - shape so if we look again here whenever
33:40 - we're passed a shape we're actually
33:41 - passed something like this right
33:42 - surpassed the shape object and its shape
33:44 - property so right here is look something
33:47 - like this looks like the variable T
33:48 - which would have a list full of lists so
33:51 - we want to get the actual sub list so
33:54 - which one this list right that's the one
33:56 - we want so the way we do that is by
33:59 - getting the shape rotation modulus the
34:02 - length of the shape so for example if
34:04 - our current rotation is zero like we
34:06 - haven't rotated yet then what's gonna
34:09 - happen is we're gonna have zero modulus
34:10 - the length of shape in this case the
34:12 - length would be four so we get zero so
34:14 - we're given this first shape now if we
34:17 - have one we're given this if we have two
34:18 - or given this if we have three were
34:20 - given this and if we have four then we
34:22 - go back and we get this one okay and it
34:24 - just keeps going and keeps going because
34:27 - modulus simply just gives us the
34:28 - remainder so that's how we can tell what
34:30 - the actual current shape is within that
34:33 - main list okay hope that makes sense so
34:36 - now that we've done that what we're
34:38 - going to do is want to set up a loop and
34:39 - because we want to look through every
34:41 - row and every column and then based on
34:43 - if there's a zero or a period we're
34:45 - gonna do something so we're gonna say 4i
34:47 - comma and because we want the line as
34:50 - well in enumerate right and then format
34:54 - okay because format is the list that
34:56 - contains like the actual zeros in once
35:00 - okay we're just gonna say Rho is equal
35:02 - to list of line this just gives us a
35:06 - nice list format that we can deal with
35:08 - making it easier for us I'm gonna say
35:10 - for J in or J comma column sorry in
35:15 - enumerate and now row so now every row
35:19 - we're getting the current line and then
35:21 - we're going to loop through the line and
35:22 - look for either a zero or a period I'm
35:24 - going to say if column which is going to
35:26 - be
35:27 - for example if we have some like this
35:28 - it's gonna look like zero zero okay so
35:32 - this is what our row is gonna look like
35:34 - so when we start looping J will be zero
35:37 - and column will be a period okay just
35:39 - just in case you're kind of confused
35:40 - there okay so before
35:41 - if column equals equals and it's gonna
35:44 - be string zero then we know that we've
35:46 - hit like a position like this cube
35:48 - exists here so what we want to do is
35:50 - want to add the position to our
35:51 - positions list now it's not so simple as
35:54 - just add the current I and J value we
35:57 - actually have to add something else I'll
35:59 - show you right now I'm just gonna type
36:00 - it out and kind of talk about okay so
36:02 - shape dot X plus J and then shape dot y
36:09 - plus I okay so this is our x value it's
36:13 - the current value of the shape because
36:15 - if the shape is already moving down the
36:17 - screen or moving left and right well we
36:18 - need to add that to whatever the J value
36:21 - is whatever column were in within this
36:23 - list okay and then same thing for with
36:26 - the Y value so whatever the current Y
36:28 - value is of our shape we're gonna add
36:30 - whatever column or whatever row sorry
36:32 - we're now in as for the Y value okay and
36:35 - that is the positions that we need in
36:38 - these positions list okay so now that
36:40 - we've done that we just have to modify
36:42 - these positions slightly we just have to
36:43 - give them an offset okay and I'll talk
36:45 - about why this allows you to do this so
36:47 - for I pause in enumerate positions okay
36:54 - then we're going to say positions I is
37:00 - equal to and then it's gonna be the
37:02 - current position okay so we just need to
37:05 - put this in a tuple cuz that's way we're
37:06 - gonna give it pause 0 minus 2 and pause
37:11 - 1 minus 4 okay so now let's break this
37:13 - down and kind of talk about exactly
37:15 - what's going on so we started off blank
37:17 - list positions we're just getting the
37:19 - actual shape within this list so for
37:21 - example we get something like this okay
37:23 - and then we're looping through it and
37:25 - where am i sorry and we're pretty much
37:27 - just checking if a 0 exists in each
37:30 - position of that shape okay if that
37:34 - exists then we're gonna add that
37:36 - position into our list and the way we do
37:37 - that is simply by getting
37:39 - the X plus whatever the current column
37:42 - is that we're looping through and
37:43 - whatever the current row is plus y okay
37:46 - now that we've got that the issue is
37:49 - that if we look here we're gonna get
37:52 - something like for a position list here
37:54 - we'll get something like 3 1 and then
37:58 - we'll get 3 2 we've got 3 3 and we'll
38:00 - get 3 4 ok now the issue with that is
38:04 - we're adding the current X value plus
38:07 - these two periods and the O so we need
38:09 - to remove these kind of trailing periods
38:12 - right because that's gonna result in our
38:15 - positions being offset it to the right
38:17 - by 2 much same thing with these Y values
38:19 - okay because when we're counting this
38:22 - row we're saying well this is 1 lower
38:24 - than this row so our current Y value say
38:27 - it was 0 and we're adding to it
38:29 - now instead of just adding 1 we're gonna
38:31 - be adding 2 so what's gonna everything's
38:33 - gonna be offset down so the way that we
38:34 - can kind of fix this is just by
38:36 - offsetting by constant by offsetting I'm
38:38 - just gonna take every x value that we've
38:39 - added and subtract 2 from it and every Y
38:42 - value that we've added and subtract 4
38:43 - from it now what this is gonna do is
38:45 - simply just move everything to the left
38:46 - and up so that when we are displaying it
38:49 - it's just more accurate to the screen
38:52 - okay you guys can see what's gonna
38:53 - happen if you don't offset this and
38:55 - you'll notice that you kind of run into
38:57 - a few errors so just run with me on this
38:59 - area and just kind of you should see how
39:01 - this works later on ok ok so now that
39:04 - we've converted this shape format I want
39:06 - to go in code valid space now okay so
39:08 - valid space is gonna take two parameters
39:11 - shape and grid all right now we're gonna
39:15 - check the grid to see if we're moving
39:17 - into a valid space so what I'm gonna do
39:20 - here is I'm going to create two liske
39:21 - I'm gonna say accepted how do you spell
39:24 - accepted accepted underscore pause so
39:28 - these are just gonna be the positions
39:29 - that are actually valid okay is equal to
39:32 - and just flow with me on this we'll talk
39:34 - about in a second for J I and then
39:37 - within this list for J in range 10
39:40 - system Li what we did in the last
39:42 - tutorial and then for I in range 20 okay
39:47 - so this is really similar to the way
39:48 - that we created the grid we're just
39:50 - getting every single possible position
39:52 - for a 10 by 20 grid okay and we're just
39:54 - adding it in a tupple in accepted
39:56 - position it's gay that's great but the
39:58 - thing is I want to convert this into a 1
39:59 - dimensional list so this is the way we
40:01 - can do this and make other positions but
40:03 - now how do we flatten this list so this
40:06 - is actually how you do this okay so
40:07 - accept it cause it's gonna be equal to
40:09 - and this is one way there's many J for
40:11 - sub in accepted positions and then one
40:18 - more for J in sub okay so what this is
40:22 - actually doing now is it's pretty much
40:24 - taking all the positions in our list and
40:26 - just adding it into a one dimensional
40:28 - list and we're just overriding this list
40:30 - with that so see if you guys can
40:33 - understand that if not don't worry about
40:35 - it just know that all this does is
40:36 - simply flatten this list so we go from
40:38 - looking something like this we wouldn't
40:40 - call it like 0 1 and then having another
40:42 - list embedded just trying to show an
40:46 - example here 2 3
40:47 - so we go from that to something that
40:49 - kind of looks like this and we just have
40:52 - two positions in it now so we don't have
40:53 - those sub lists and this just makes it a
40:55 - lot easier to loop through ok so now we
40:58 - just have 0 1 2 3 rather than having
41:00 - these embedded lists full of other
41:01 - tuples ok that's all we're doing with
41:03 - this line ok so after we do that what we
41:07 - want to do is we want to get all these
41:08 - positions um and we're gonna get the
41:10 - shape and we're gonna convert it into
41:12 - our positions right because remember
41:13 - whenever we get a shape it looks
41:15 - something like this it means nothing to
41:16 - us we need to first convert it into
41:17 - positions before we can compare it
41:19 - against other positions in our grid so
41:21 - we're gonna use this convert shape
41:22 - format grid our convert shape format
41:25 - we're gonna pass it to the shape and
41:27 - we're just gonna store this in a
41:28 - variable and I guess we're gonna call it
41:30 - what should we call it formatted okay
41:33 - because I guess that makes sense we
41:35 - formatted our shape so now we can use
41:37 - this and kind of compare it against
41:39 - accepted positions so here we're gonna
41:41 - have a list that looks like something
41:44 - with a bunch of positions in it and then
41:46 - this one we're gonna have a list that
41:47 - has a bunch of positions in it so you
41:49 - might see where we're going here in
41:50 - terms of how to compare these things ok
41:52 - ok so now that we've done that we've
41:54 - kind of got all our data ready to check
41:55 - this is the really easy part where I'm
41:57 - just going to say for position in format
42:00 - it and all we're gonna do now is just
42:02 - check if this position exists within
42:05 - excepted positions because accepted
42:07 - position is every position that were
42:08 - allowed to have right so we're say if
42:11 - paws not in accepted position and this
42:17 - is an important part pause one is
42:21 - greater than a negative one return false
42:24 - and then otherwise so if we make it
42:26 - through that loop that means we had all
42:28 - our positions accepted we can return
42:29 - true okay so let's talk about this
42:31 - really quickly the reason I have this if
42:34 - pause once the Y value is greater than
42:36 - negative one is because when we give
42:37 - this offset of four what ends up
42:39 - happening is we get some when we spawn
42:42 - in our shapes they're gonna spawn above
42:44 - the screen and then we actually want
42:46 - this because we don't want our shape to
42:48 - show up on the screen we want to start
42:49 - falling before it's actually seen so
42:52 - typically this means a Y position is
42:54 - going to start out like negative 1 or
42:56 - negative 2 so the thing is while it's
42:59 - falling we're checking if it's in a
43:00 - valid position right but the thing is
43:02 - it's not going to be in a valid position
43:04 - if it's negative so we just want to make
43:07 - sure that we're only asking if it's in a
43:08 - valid position if the y value is greater
43:10 - than negative 1 so greater than or equal
43:12 - to 0 okay and this is a really easy way
43:15 - to tell us well are we on the grid or
43:17 - not so let's give an example say we're
43:19 - trying to move left and we're already at
43:21 - the edge of the screen so that means
43:22 - we're gonna have an x value of negative
43:23 - 1
43:24 - well that position of negative 1
43:26 - whatever Y value is not going to be in
43:28 - this accepted position great way to code
43:30 - list so when we try this we're gonna
43:32 - return false and it's not going to allow
43:33 - us to move left and that is the whole
43:36 - point of that and now okay
43:40 - what am I doing here ok so I also just
43:43 - want to modify this part up here so I
43:46 - haven't for ji and range for J and range
43:48 - if I in range 20 I want to just change
43:52 - something here okay so what I'm gonna do
43:54 - actually let me say if grid I J equals
44:02 - equals and then the color 0 0 0 okay so
44:05 - this is an important part I was kind of
44:06 - waiting I was kind of thinking about
44:08 - this so pretty much we're only gonna add
44:10 - this position into our accepted position
44:13 - if it's empty which actually makes a lot
44:16 - of sense because think about it if we
44:18 - already have a color
44:19 - in that position then that's not a valid
44:21 - position we can't move into where a
44:23 - piece already exists so what this
44:24 - conduct condition does it says okay
44:26 - we're only adding this position now if
44:28 - this is true so if IJ is true then /
44:32 - code we can add the position if it's not
44:34 - zero zero zero that means something
44:35 - exists in there so that's why we're not
44:37 - gonna add it into our excepted positions
44:39 - okay so I know this looks kind of
44:42 - confusing so I'm doing like a bunch of
44:43 - embed in for loops this just saves us a
44:44 - few lines it's kind of a cool way to
44:46 - create a list in one-liner it's like the
44:48 - Python anyway so I figured I'd do that
44:50 - for most of the stuff in here okay so
44:53 - now that we've done that what else can
44:56 - we code well you know what while we're
44:57 - here we can code check lost all right
44:59 - this one's a really easy function this
45:01 - is just simply going to check if any of
45:03 - the positions are what do you call it
45:06 - above the screen so if we hit Y value
45:09 - zero then we know that we're above the
45:12 - screen and we've actually lost so the
45:14 - way to do this very site for pause be in
45:17 - positions because what this is gonna do
45:20 - is we're gonna pass a list of positions
45:23 - so we're gonna get every pause now in
45:24 - the position we're going to say X Y is
45:26 - equal to pause which simply you're
45:28 - splitting up the tupple because we know
45:29 - we're gonna get something looks in the
45:31 - form of like three four okay and we're
45:33 - gonna say if Y is less than one so equal
45:38 - to zero or greater then we return true
45:41 - else okay we don't even need no say
45:45 - return false down here so if every
45:47 - position is less than or greater than Y
45:51 - or whatever one then we will return
45:53 - false because we haven't lost yet
45:55 - otherwise we return true okay so we're
45:58 - almost getting there now I want to go
46:00 - down to the mean and I want to finish
46:02 - coding up some stuff in here so last
46:04 - time we kind of just left it at this
46:05 - like moving pieces around whatever but
46:08 - we have these variables okay so change
46:09 - piece next piece o'clock fall time that
46:11 - we're not using so what I'm gonna do now
46:13 - is I'm going to show you guys how we can
46:15 - actually move our shape down our screen
46:17 - at like a regular time interval so I'm
46:20 - gonna create a variable here actually
46:22 - called false speed and this is how long
46:25 - it's going to take before each shape
46:27 - starts falling okay
46:28 - so we'll talk about how to do this I'm
46:31 - gonna start coding it now so pretty much
46:33 - we're gonna say up here and I didn't do
46:35 - this before which fall along grid equals
46:37 - create grid based on locked positions
46:40 - the reason we're doing this I know we
46:42 - already created grid up here is because
46:44 - every time that we move we have a chance
46:48 - to be adding something to locked
46:49 - positions we're gonna do that later
46:50 - because for example if we hit the bottom
46:52 - of the screen will now lock the position
46:53 - it's gonna be equal to something else
46:55 - because it's gonna have a new shape in
46:56 - it shouldn't we need to constantly
46:58 - update the grid so that when we're
46:59 - drawing it to the screen we get like an
47:02 - updated version so that's why I'm doing
47:03 - that up here okay I also need to
47:06 - actually I don't think I need to do that
47:09 - here we need to add to fall time okay so
47:12 - the way we're gonna add to fall time
47:13 - because this is gonna track would he
47:16 - call it how long since like the last
47:18 - loop ran is by using this clock object
47:21 - that I set up here okay so before I add
47:23 - to that after here I'm gonna do clock
47:25 - dot tick and then I'm going to add this
47:30 - and I'll talk about this after I do it
47:31 - so clock get underscore raw time like
47:35 - that okay so the way that this works is
47:38 - this wrong time actually gets the amount
47:41 - of time since this last clock tick so
47:45 - when I first add it's gonna be zero
47:47 - because we haven't yet ticked the clock
47:48 - and the next iteration it's gonna see
47:50 - how long it took this while loop to run
47:51 - and then it's going to simply add that
47:54 - amount okay so it's actually going to
47:56 - give us real time this means this should
47:58 - technically run at the exact same speed
48:00 - on everyone's computer in every one
48:01 - machine because I know when I use fps
48:04 - FPS is dependent on kind of the speed of
48:07 - what do you call it on your actual
48:10 - computer sometimes like the way I did it
48:11 - in other games so this is a better way
48:12 - to do it
48:13 - so now what I'm gonna do is since I've
48:15 - now incremented the fall time and this
48:17 - is gonna be given to us in milliseconds
48:19 - so like one second would be a thousand
48:20 - that's that number and our fall speed is
48:22 - in well zero point two seven so what I
48:24 - need to do is I have to say if fall time
48:26 - divided by a thousand is greater than
48:30 - false speed then we're going to do is
48:33 - really reset fall time equal to zero and
48:36 - if we're going to add one to the current
48:38 - Y value so
48:39 - which means we're script we're moving
48:40 - down the piece one so this is gonna
48:42 - automatically now move our piece down
48:44 - another thing is what if our piece will
48:45 - hit the bottom the screen or what if
48:47 - it's moving into position we can't move
48:48 - into so this is the same thing we've
48:50 - kind of done in here what we're gonna do
48:51 - is going to say again if not valid
48:56 - position or valid space whatever
48:57 - given the current piece and our grid I
49:02 - believe at least grid okay then and
49:06 - actually we're gonna check one other
49:07 - condition and our current piece dot y is
49:12 - greater than zero this means that we're
49:15 - not at like the top of the screen
49:16 - because the same thing with negative
49:18 - values all right is greater than zero
49:19 - then what we're gonna do is were gonna
49:20 - subtract one from the current piece so y
49:22 - minus equal one because that means will
49:25 - we moved into an invalid position so
49:26 - let's move back up one and pretend like
49:28 - that never happened and we're just gonna
49:30 - say change piece is equal to true now
49:35 - the reason I'm setting change piece
49:36 - equal to true because think of it right
49:38 - if we're moving down and we move into
49:40 - position that's not valid well we know
49:42 - we didn't move left or right off the
49:44 - screen because we were moving down that
49:46 - means we must have either hit the bottom
49:48 - of the screen or hit another piece so in
49:51 - that instance we need to stop moving
49:52 - this piece and we need to change it and
49:54 - what changing piece is gonna do we're
49:55 - gonna do that later is simply gonna lock
49:57 - all the positions what they're currently
49:59 - in and then it's gonna make this next
50:01 - piece generate down the screen and I'll
50:03 - show you that in a second but this is
50:04 - kind of the way to check it and it's the
50:06 - easier way then you don't have to check
50:08 - like the Y values and and all that stuff
50:10 - okay alright so now that we've done that
50:12 - let's move down here to the bottom of
50:14 - main and let's start adding a few things
50:17 - ok so what I want to do down here now I
50:20 - want to say shape positions so shape
50:22 - underscore pause is equal to convert
50:25 - shape format current piece because what
50:29 - we're gonna do now is we're going to
50:30 - check all the positions of the piece
50:32 - moving down to see if what we've hit the
50:34 - ground or see if we need to lock it okay
50:36 - so and we're gonna add all that color to
50:39 - the grid so that when we're drawing it
50:41 - we actually see the piece cuz right now
50:42 - we have the piece but we don't add its
50:45 - color into the grid so we're not
50:46 - actually gonna see it show up so I mean
50:47 - first need to add it to the grid so we
50:49 - can draw it and we can see it moving so
50:50 - to do that we're gonna say for I and
50:52 - range the blend of shape positions okay
50:59 - we're going to here going to say XY
51:02 - equals shape positions of Ikes that's
51:07 - the current iteration the current one
51:08 - we're looking through and say if Y is
51:10 - greater than negative one so this means
51:14 - that we're not above the screen then we
51:15 - say grid Y x equals current piece dot
51:23 - color okay because remember the grid
51:26 - stores a bunch of different colors so
51:27 - while we're doing the greatest giving
51:28 - different colors and based on that
51:30 - position in the grid so Y X which is
51:32 - going to be this shape the all the shape
51:34 - positions we're gonna draw that color
51:36 - now the reason I'm gonna have this
51:37 - negative one is because imagine that
51:39 - we're at the top of the screen and we
51:40 - try to draw it or we're above the screen
51:42 - we have a position with a negative Y
51:44 - value so if we throw negative we're not
51:46 - actually gonna get an error in grid here
51:47 - but it's gonna end up looking like it's
51:49 - at the bottom of the screen and then
51:50 - moving to the top and it's just gonna
51:51 - look weird if you guys want to see what
51:52 - it looks like this just removed this
51:54 - condition and you'll see that why I
51:56 - haven't added in okay so now what we're
51:59 - gonna do is we're gonna check this
52:01 - change piece variable so I put it up
52:04 - here change piece this means that we've
52:07 - hit the bottom or we've hit something
52:08 - what we're gonna do now is we're gonna
52:11 - update locked positions and this one I'm
52:13 - gonna start talking about locked
52:14 - positions okay so for pause actually in
52:18 - shape positions all right we're going to
52:22 - say P is equal to posi row pause one
52:29 - alright I don't know why I do this but I
52:31 - think there's a reason for it so let's
52:32 - just run with it
52:33 - and when I said locked positions P is
52:36 - equal to current piece don't covered
52:40 - okay so what is this well locked
52:44 - positions is gonna be a dictionary in a
52:46 - form like this right it's gonna have a
52:48 - top one here that's gonna have a
52:49 - positions like 1 2 : and then we're
52:52 - gonna have a color and the color is
52:53 - gonna be another tuple but RGB values
52:55 - okay so for example to 5500 the reason
52:59 - we have this is so that when we past
53:01 - locked positions into our grid like this
53:04 - right we can get each of those positions
53:06 - in the grid and then update the color of
53:09 - great so every time that we have like a
53:12 - locked position in a locked position as
53:13 - simply means our piece is no longer
53:15 - moving it's hit the bottom of the screen
53:16 - and we're on to a new piece we can get
53:19 - the position and we can get the color
53:21 - and then we can update the grid based on
53:22 - that and we can keep that in there okay
53:24 - and that's the way that locked position
53:26 - works so it's a dictionary with the key
53:28 - of a position and the value of a color
53:30 - all right that's kind of like the data
53:32 - structure for now what we're gonna do
53:33 - after this after we update our locked
53:36 - positions and we add positions to it
53:38 - when I say current piece equals next
53:40 - piece okay so we're just gonna change
53:42 - that and now since we've said current
53:45 - piece is now equal the next piece what
53:46 - we need to update next piece so let's
53:48 - get a new shape because we're just
53:49 - moving forward with the game and now of
53:51 - course we got to say change piece equals
53:53 - false because we're on to a new piece
53:55 - that's gonna spawn at the top of the
53:56 - screen okay
53:58 - and I think that is about it what we
54:01 - also want to do actually is we're gonna
54:03 - check if we lost the game and I think I
54:07 - do this after the draw window I don't
54:08 - think it really matters but where should
54:09 - I say if check lost based on what do you
54:13 - call it locked positions okay
54:15 - so these are all the positions of the
54:16 - shapes then we're gonna say run is equal
54:20 - to false and that's gonna break us out
54:22 - of this wall up and you know what while
54:23 - we're here let's indent out nope I game
54:26 - dot what is it I think it's not display
54:30 - doc quit or something yeah don't display
54:32 - dot quit so we're actually just exiting
54:34 - out of our game now up until this point
54:36 - I actually have not tested my code now I
54:39 - know some of you probably think I'm
54:40 - insane because we've already written
54:41 - like three enter lines of code we
54:43 - haven't tested any of it the reason I
54:44 - haven't done this is because I wanted to
54:46 - test this in between videos figure out
54:49 - what the errors were so that I didn't
54:51 - waste too much time fixing all of them
54:53 - so I'm gonna go through a few errors
54:55 - that we have now and show you what
54:57 - happens when I run the code so I'm just
54:59 - complete that cuz that was the fix that
55:01 - I made and pretty much you can see it'll
55:03 - be crashed right away and we actually
55:04 - get a 4-iron range
55:06 - none type has no length now the reason
55:09 - we get this and this happens down in the
55:10 - main it's because in convert shaped
55:12 - formats somehow I managed to forget to
55:15 - return position
55:16 - this is really important because the
55:18 - whole goal of this function well was to
55:20 - generate this list of positions and we
55:22 - did that fine but we forgot to return
55:23 - them so uh pretty easy error to fix or
55:26 - return positions now again we run this
55:29 - way ok everything looks good no there's
55:31 - another issue all right so just watch if
55:33 - I try to go off the screen you can see
55:35 - that we get a unsupported operant for
55:37 - current piece because I forgot to put a
55:40 - Y or an X here so let's go down to main
55:43 - let's fix this what line are we on 260
55:45 - to 262 current px yeah that would be
55:49 - important okay now I know there's a few
55:51 - other errors so this one current piece
55:54 - mimes equals let's change this to an X
55:57 - current piece - equals wow I really
55:59 - messed up on this a lot ok dot rotation
56:03 - minus equal 1 okay so this is rotation
56:06 - and let's see anything else let's run
56:10 - the program see ok we're getting another
56:12 - issue here so if we have valid
56:14 - spacecraft ok so I just messed up and a
56:17 - bracket here so let's go
56:18 - lying 265 here we are so we're gonna
56:22 - take this quotation mark or what I'm
56:24 - saying edition might bracket and just
56:25 - put it there and all should be good now
56:29 - let's see we go down to the bottom the
56:32 - screen ok we got another and let's just
56:35 - play this for one sec see if we can run
56:36 - into any errors
56:37 - okay so we're rotating fine we can't
56:40 - move off the screen and all looks to be
56:44 - doing ok all right so that's a good sign
56:47 - for now let's leave that so it doesn't
56:50 - look like there's any issues if you find
56:51 - any I'd probably end up fixing them in
56:54 - future videos so don't stress about it
56:56 - ok so now that we've done all this what
56:59 - we need to do next is a few things
57:02 - alright so we need to deal with this
57:04 - draw next shape clear rows draw text
57:07 - middle what other functions to have and
57:08 - I think that's about it and we're also
57:10 - gonna deal with main menu kind of
57:13 - starting the game finishing the game and
57:15 - all that stuff so what I first want to
57:17 - do actually is I want to deal with draw
57:20 - next shape then I'm gonna do clear roads
57:22 - just cuz clear rows is kind of
57:23 - complicated so draw next shape what this
57:25 - is gonna do is they're just gonna draw
57:26 - the next shape kind of off the screen
57:29 - and show us what it is because in
57:30 - tetris typically it shows you like the
57:31 - next shape the next few shapes so yeah
57:34 - now this seems pretty straightforward
57:36 - like just draw the shape it's actually
57:38 - kind of long because we have to once
57:40 - again get this list turn it into
57:43 - positions that we can use and yeah it
57:48 - just it gets a bit complicated so what
57:49 - we're going to do is we're also gonna
57:50 - set up a font in here it's gonna say
57:52 - font equals PI game thought font dot sys
57:56 - font here we're gonna do Comic Sans
57:58 - again because you guys know I love Comic
58:00 - Sans Comic Sans sighs stick 30 and let's
58:06 - render this font okay so label equals
58:08 - font don't render text for this is gonna
58:12 - be next shape okay feel free to add a
58:15 - colon or something if you guys want
58:17 - anti-aliasing one text color white 255
58:20 - to productivity feel okay basically
58:22 - already been through that okay now we
58:25 - need to figure out where we're gonna
58:27 - draw this this label okay so let's see
58:29 - the same thing we've done before you say
58:31 - s X is equal to top left X plus the play
58:37 - width and I'm going to say s Y is equal
58:42 - to top left Y plus the play underscore
58:47 - Heights actually I'm gonna play a
58:49 - hundred we're gonna say play height
58:51 - divided by two okay now what we're gonna
58:53 - do is this is gonna give us like to the
58:56 - right maybe I can just run this and show
58:59 - you guys it's gonna give us where my
59:01 - mouse is right here like a position kind
59:02 - of similar to here so we are actually
59:04 - here so what we want to do is we want to
59:06 - add a constant to this so we move to the
59:07 - right a bit so this constant we're just
59:10 - gonna hard code in and we can change
59:12 - this and play with it if we want it to
59:13 - be like moved more to the right or more
59:14 - to the left so to move more to the right
59:17 - rear now add 50 and then to kind of make
59:20 - this look a little bit better where you
59:21 - can actually subtract a hundred from the
59:23 - site so we can move a bit higher up on
59:24 - the screen play with these constants if
59:26 - you guys want it to look a bit different
59:28 - okay so now we've got that what we're
59:31 - going to do is we're gonna once again
59:33 - we're gonna format are in say format is
59:36 - equal to shape.com thing we need the
59:41 - actual shape so not just like that mean
59:44 - a shape talk rotation modulus the length
59:47 - of shape dot shaped like that okay so
59:52 - this is the exact same thing that we did
59:54 - in format whatever you guys know is know
59:58 - what function I'm talking about and I've
60:00 - lost myself here okay just to get the
60:02 - actual like sub list that we need okay
60:04 - so now on you might say well what do you
60:07 - what are you doing here we already have
60:08 - like a function that does this for us
60:10 - don't worry about it just follow along
60:12 - because this is a bit different the way
60:13 - that I'm gonna do think a so I'm gonna
60:14 - say for I comma line in enumerate all
60:19 - right
60:19 - and then row or actually before I'm not
60:24 - sorry I'm gonna do the same thing here
60:26 - we're gonna convert row it into list is
60:28 - really similar to the other function
60:29 - except we're going to do one major
60:31 - change and you'll see that for row
60:32 - equals list line we're gonna say for J
60:35 - comma what do you want to call it column
60:38 - in enumerate row this time and exact
60:43 - same condition if column equals equals
60:46 - zero what we're gonna do here instead of
60:49 - adding some position to list is we're
60:51 - gonna draw something and this is why I
60:52 - didn't want to use the other function
60:54 - that gives us list of positions because
60:55 - I don't care about the position within
60:56 - the grid I just care when we should draw
60:59 - something or not because this doesn't
61:01 - matter it's not gonna be moving we just
61:02 - want to draw like a constant image on
61:04 - the right side of this or a static image
61:05 - on the right side of the screen that we
61:07 - can just look at okay so what we do here
61:10 - is we're gonna say pygame draw rect so
61:12 - don't draw rect I need surface we pass
61:16 - the surface in we need a color it's
61:18 - gonna be the shape color okay and then
61:21 - we need our position of drawings for SX
61:23 - and then in this case we're gonna have
61:27 - to since we're drawing each cube right
61:28 - we're not dressed drawing the whole
61:29 - shape plus J multiply it by 30 and then
61:33 - we're gonna do the same thing with y so
61:34 - sy + I multiplied by 30 and we actually
61:39 - just changed this to let's change the
61:40 - block size to be a bit more dynamic okay
61:43 - so it's a 30 block so it's just in case
61:45 - we decide to change the dimensions of
61:46 - our screen later on and then we new
61:48 - width and height and that is gonna be a
61:50 - block size and block size and we want
61:52 - this filled in so comma 0 okay so what
61:55 - we've done here is really similar to
61:56 - what we've already done
61:57 - we're just gonna be drawing these blocks
61:59 - according to where they show up like in
62:02 - this list based on the initial
62:05 - exposition plus like a changed kind of
62:08 - position or whatever okay anyways I
62:11 - think that's about it for this oh we
62:15 - need to actually
62:15 - blitt the label now so we created this
62:18 - label we have actually drawn on the
62:20 - screen yet so let's do this so we say
62:22 - surface dot bullets label change this to
62:28 - a period okay and then we need a
62:32 - position what's our position going to be
62:34 - well we're actually going to SX plus 10
62:36 - and sy minus 30 okay again play around
62:40 - with these constants guys if you want
62:41 - your thing to look a bit different be
62:42 - more centered whatever I again I don't
62:45 - go like too crazy on cosmetics here I
62:46 - just want everything to work and look
62:49 - decent I assume you guys can mess around
62:51 - that I right okay so now we've done that
62:53 - we've drawn the next shape well we
62:55 - actually need to call this function so
62:56 - within draw window we're gonna call draw
62:59 - next shape as well so where should we
63:02 - call this let's see what's called before
63:05 - we draw a grid draw an X shape or
63:09 - actually we can't call it in here where
63:11 - we need to call this in the main because
63:13 - we only have next shape within the main
63:14 - symbol right when we're drawing draw
63:16 - window we're actually just gonna call
63:18 - draw next shape because we need to give
63:21 - it the next shape so it's gonna be next
63:23 - piece and then the grid does that it
63:26 - takes it takes a surface yeah surface
63:28 - okay so let me just go check this to
63:31 - make sure and our surface is not called
63:33 - surfaces it it's called win okay so in
63:38 - draw next shape you haven't take a pen
63:40 - surface okay so that that should work
63:42 - fine you know what let's actually just
63:43 - test this now and see this working and
63:46 - we're not showing up we're not drawing
63:47 - this surface hmm I believe it is because
63:51 - ah draw a windowed Renick okay so
63:55 - what we need to do actually it's this
63:56 - draw next shape we're gonna draw after
63:58 - draw it now and we're just gonna update
64:00 - the display in here so pygame dot
64:01 - disability dot update and then if we go
64:05 - to draw window just remove this display
64:08 - update and this should work
64:11 - there we go so now we're getting next
64:13 - shape on the side the reason that wasn't
64:14 - working is because we were pretty much
64:15 - drawn over top of the next shape every
64:18 - time that we drew the window so now
64:21 - that's working fine we have our next
64:22 - shape showing up and what else do we
64:25 - need to do I'm really delaying trying to
64:27 - go to this clear rose function because
64:28 - it's really complicated but I think
64:30 - we're gonna have to do this next okay so
64:32 - clear rose and tetris obviously if we
64:35 - create a full row we need to clear that
64:37 - row and then so that's the only way the
64:38 - user can win obviously yeah so the way
64:41 - to do this is probably a lot easier than
64:45 - the way I'm gonna do it but try to
64:47 - follow along because this is the only
64:48 - way I could kind of get to work and this
64:49 - is probably the hardest part of the
64:51 - actual game okay so we're gonna take
64:54 - grid we're going to take locked
64:55 - positions and we're going to do is we're
64:58 - gonna set up a few things here just
64:59 - follow along if they'll try to explain
65:01 - as I go so I'm gonna say Inc which is an
65:02 - increment 0 for I in range the Len of
65:08 - grid negative 1 negative 1 ok and we're
65:14 - actually just going to subtract 1 from
65:15 - this to what this is gonna do is go loop
65:17 - through our grid backwards so it's going
65:19 - to start at the twentieth row and it's
65:20 - gonna move up to the nineteenth row okay
65:22 - I'm gonna say the current row is equal
65:24 - to grid I all right now we're going to
65:27 - say if the color zero zero zero is not
65:31 - in our row let's clear okay so we're
65:35 - gonna add one to ink don't worry I'm
65:37 - gonna explain this after that just
65:38 - follow along okay say IND equals I I'm
65:42 - going to say for J in range the length
65:47 - of row what we're gonna do is we're
65:50 - gonna try to delete locked square
65:57 - brackets current position there's gonna
65:59 - be J I and then if this doesn't work and
66:03 - I accept and continue okay okay so let's
66:09 - just talk about what I just did here
66:10 - because I kind of went fast and there's
66:12 - another part of this function door so
66:14 - the way this is gonna work these we're
66:16 - gonna say we're gonna look through the
66:18 - grid backwards we're gonna set row equal
66:21 - to every bulb row in
66:24 - agreed so what that really pig do and
66:26 - the way that we know if the bro should
66:28 - be cleared is if zero zero zero doesn't
66:30 - exists because if zero zero zero to
66:32 - success that means there's no plaque
66:33 - squares in our row which means it's
66:35 - completely filled with shapes are
66:38 - completely filled with cube objects or
66:40 - whatever okay
66:40 - so we know we can clear it so the way to
66:43 - clear it now and don't worry about these
66:45 - variables I'll talk about that a second
66:46 - is to get every position in that rail to
66:50 - do that we need to loop through J in the
66:52 - row and we're already out the current
66:54 - row so we know that I is just gonna stay
66:56 - static change J and try to delete this
66:59 - from locked positions because now what
67:01 - we're doing is the locked positions need
67:04 - to be removed
67:04 - so when mandela bees since locked
67:07 - position is a dictionary and it's
67:08 - mutable we can I should just change it
67:09 - within here and that's how we delete
67:11 - those keys and those colors from the
67:14 - grid okay so after we delete that all
67:16 - what we need to do is we need to shift
67:19 - every row so what's happening now and I
67:21 - think I'm actually just gonna pull out a
67:23 - little I have a drawing tablet and just
67:25 - start using this to kind of explain some
67:26 - things because it's pretty complex so
67:28 - just give me one second all right so
67:31 - what we need to do is we need to shift
67:33 - every row so if we delete like a the
67:35 - bottom row we every rule above that row
67:37 - needs to move down by one so if I go to
67:39 - let's see this and delete this okay so
67:44 - you can see if I have a grid alright and
67:47 - it looks something like this we're just
67:48 - gonna do like a very basic like 3x3 grid
67:50 - okay just to save us some time let's say
67:53 - that we want to clear this road down
67:54 - here so these are full of colors right
67:56 - so if we clear this row and what happens
67:58 - is we get rid of all these and that any
68:00 - positions that were above it so let's
68:02 - draw something like this now this is
68:04 - here well currently this is floating
68:05 - right because if we've cleared all these
68:08 - positions down here so we got rid of
68:11 - those this is floating so this needs to
68:12 - move down one so how can we go about
68:15 - doing that and the thing is every other
68:17 - row needs to shift down by one as well
68:19 - but now let's talk about like a
68:20 - potential issue we might run into so if
68:22 - I delete all that and let's say we have
68:24 - a grid that looks like this okay and
68:26 - there's a color here if we delete this
68:29 - row the grid actually now in our memory
68:32 - only looks like this all right it's only
68:35 - this top portion
68:38 - because we've deleted an entire row out
68:41 - of the grid so yeah we can shift
68:42 - everything down by one but now we're
68:44 - left with the grid that's one less than
68:46 - the other one so what we want to do is
68:47 - you need to add another row at the top
68:49 - here so that our grid stays the same
68:52 - size because if you delete an entire row
68:54 - well you're deleting row right so you
68:57 - need to add back the other positions at
68:59 - the top because everything's shifting
69:00 - down by one so really the way it works
69:02 - is you delete this and then this whole
69:04 - thing moves down and then you add a row
69:06 - at a talk like this okay so that you're
69:09 - back to your continual grid I hope that
69:12 - makes sense that's kind of the only way
69:14 - I can really explain it to you guys in
69:15 - terms of how we shift things and I mean
69:17 - to do it in code right okay so leave a
69:20 - comment if you guys confused about that
69:22 - cuz I'll try to explain it in a better
69:23 - way but it's just kind of like a
69:24 - confusing topic in general okay so now
69:26 - we're gonna do say if I NC is greater
69:29 - than zero okay we're going to say so
69:32 - this means that we've shifted and we've
69:34 - removed at least one row and I'll talk
69:36 - about the case in which we moved two
69:38 - rows in one second okay
69:39 - let's say four key in and just follow
69:43 - what this is this is gonna be kind of
69:45 - confusing list of locked positions so
69:49 - locked because we're just we just pass
69:51 - in Lock there okay and then when you say
69:54 - key because lambda I'll explain what
69:57 - this does in a second x x-1 and I think
70:02 - that's about it and we're actually just
70:04 - gonna reverse this negative okay
70:08 - so for every key in our sorted list of
70:14 - locked positions based on the Y value is
70:18 - what this does so given a list that
70:21 - looks like this if you have like zero
70:24 - one zero zero okay give it a this a very
70:29 - basic list this could be a of locked
70:32 - positions list okay what we're gonna do
70:34 - is want to sort this list and the way we
70:35 - sort it is based on this number here
70:37 - this Y value and this is what this key
70:39 - equals lambda x x-1 does you don't have
70:43 - to understand that this is just a really
70:44 - kind of complex way to sort of list what
70:47 - we're gonna do is we're gonna now make
70:48 - it look like this is your zero
70:51 - zero-one the way we do that is so that
70:54 - we get all the positions that have the
70:56 - same y value in like the correct order
71:01 - okay and you'll see why we need that
71:04 - when we start coding
71:05 - okay so I'm gonna say X y equals key
71:08 - because you can remember key is a tupple
71:10 - and I'm gonna say if Y is less than I
71:14 - and D we're gonna say new key is equal
71:19 - to X comma y plus AMC and then locked
71:27 - new key equals lock dot pop key okay
71:34 - let's dissect this now alright because
71:37 - this is I told you guys this was kind of
71:39 - confusing so what we're doing now if we
71:42 - want to shift every single position in
71:44 - the grid down because when we delete a
71:48 - row everything above that needs to move
71:50 - down so the first part is pretty
71:51 - straightforward okay so XY equals key so
71:54 - we're simply getting the x and y
71:55 - position of each key in locked positions
71:57 - and remember locked positions as a key
71:59 - and then a corresponding with that is a
72:01 - color okay straightforward now what
72:04 - we're gonna do is we're gonna say if Y
72:06 - is less than int and what that means is
72:09 - if Y is if the Y value of our key is
72:12 - above the current index of the row that
72:16 - we removed so if we remove for example
72:19 - row 17 then only things that are above
72:22 - that are gonna move down we don't need
72:23 - to move anything below row 17 down
72:25 - because we didn't remove anything after
72:26 - row 17 right and I'm gonna show this in
72:28 - a drawing in just a second okay so if
72:30 - that happens what we're gonna do is
72:31 - we're gonna change a key we're gonna get
72:33 - a new key we say it's igloo the current
72:35 - x value but we're gonna increment this
72:37 - by a certain value so we're gonna add I
72:39 - had to the Y value to shift it down and
72:41 - then we're gonna do is we're going to
72:44 - rewrite we're gonna create a new key in
72:47 - locked position which gonna have the
72:49 - same color value as the last key B on
72:51 - this one this gives us the lost current
72:53 - color value but it's equal to this
72:56 - position right so I'll explain why this
72:59 - works now kind of withdrawing and why I
73:01 - needed to look at this backwards okay
73:03 - because when we're looking at from
73:05 - bottom to top there's there's a reason
73:08 - for that
73:08 - alright and I might butcher the
73:09 - explanation but just kind of bear with
73:12 - me here for a second because this is
73:13 - important to understand why this works
73:14 - and this is the most complex thing and
73:16 - this is actually very useful you might
73:17 - want to use this a lot like shifting
73:19 - positions in a dictionary or in a list
73:22 - okay so if I go back to my little
73:24 - drawing thing here and I go like this
73:27 - okay so let's create a grid over here
73:30 - let's make it a few more rows this time
73:32 - just for a better explanation so one two
73:35 - three four okay I make it a four by four
73:38 - okay do you guys can see my fancy
73:42 - drawing skills let's make this a row so
73:46 - let's say we have a row like this guy so
73:48 - it's green make orange the orange didn't
73:53 - work okay so green can stay there orange
73:54 - like this like this and like this
73:59 - and then we'll add some more colors
74:00 - let's do like blue up here and up here
74:04 - okay so obviously this is the row that
74:06 - needs to be clear that my mouse going
74:08 - over right now okay so this is the road
74:10 - that needs to be clear what happens when
74:12 - we clear this room okay so we've looked
74:14 - from the bottom of the list up and we
74:17 - found if we're looking at row like for
74:19 - now looking at Row three and we say Row
74:22 - three it needs to be clear okay so it's
74:24 - cleared so we delete everything out of
74:25 - Row three right this row is now gone so
74:27 - our grid in memory just looks like this
74:30 - and this so what we need to do now seem
74:32 - to shift these position positions down
74:34 - but we don't want to shift these
74:35 - positions so that's why we're getting
74:37 - that int so we know which position push
74:40 - the positions in our grid to shift so we
74:43 - delete that row and then what we're
74:45 - doing is we're adding one and shifting
74:47 - all these positions down okay that's the
74:49 - straightforward example let's get rid of
74:50 - this and let's do this okay so let's say
74:53 - when we add our I don't know shape
74:56 - whatever to our grid we end up getting
74:59 - something that looks like this okay two
75:03 - rows that need to be shifted down now
75:06 - what we have to do is we have to delete
75:08 - this row and this row now here's the
75:11 - thing we delete this row we delete this
75:13 - row how many rows does this now need to
75:15 - move down well this needs to move down
75:17 - to Rose so how do we know how many rows
75:20 - to move this down how how many rows to
75:22 - move everything else
75:22 - above it down well that is based on our
75:27 - what do you call it increment here and
75:29 - that's why whenever we delete a row we
75:31 - add one to increment because we know
75:33 - that we have to now shifted down another
75:37 - row okay and that's kind of the way that
75:40 - this works if that makes sense
75:43 - now the reason when we go through and we
75:45 - look at things backwards so we don't
75:46 - overwrite existing rows now this is
75:49 - another complex thing okay
75:50 - you probably don't have to really
75:51 - understand this that much but anyways
75:54 - okay so let's just it's not gonna let me
75:56 - undo okay that's fine so we have this
75:58 - right now here's the thing we started
76:01 - looking at it from the top down to the
76:03 - bottom what would happen is we would so
76:07 - let's actually have to add another row
76:08 - for this example to make sense okay so
76:10 - if I add another row and I say well okay
76:14 - mmm it's out of color
76:16 - let's pick yellow all right let's say we
76:18 - have a position here and we have a
76:20 - position here alright so that means this
76:22 - position this position and this position
76:23 - I'll need to move down so here's the
76:26 - thing if I move this one down by two
76:29 - alright or if I move it down by one or
76:32 - whatever it could possibly overwrite
76:34 - this existing position and we don't want
76:36 - that to happen so why why we have to
76:39 - start looking at it from the bottom it's
76:40 - that when we start moving everything
76:42 - down we move the lowest most things down
76:44 - first so that way when we then change
76:46 - this there's no possible way we're gonna
76:48 - overwrite this right here okay because
76:52 - remember if you in a dictionary if you
76:54 - change a key and the key already exists
76:56 - well you're just gonna overwrite that
76:57 - key so that's why we started looking at
76:59 - it from the bottom if that doesn't make
77:00 - sense don't worry just that's for any of
77:02 - you that's why okay because I want to
77:04 - make sure I explain everything and you
77:05 - guys understand at least on some level
77:07 - why I'm doing what I'm doing okay so
77:09 - that's it for the explanation of clear
77:13 - rows now let's call it function so when
77:15 - are we gonna call clear rows now this is
77:17 - actually an interesting call we could
77:19 - call this function every loop but we're
77:24 - only gonna call this when our change
77:26 - piece hits the ground now the reason for
77:28 - this
77:29 - because you could possibly be moving
77:30 - down the screen and at some point the
77:34 - grid would have a full row before your
77:37 - shape actually hit the ground now we
77:39 - obviously know the way in Tetris when
77:41 - you're moving down the grid until you
77:43 - like lands or you stay static we're not
77:46 - clearing anything so that's why we're
77:47 - only gonna call this if we are about to
77:50 - change the piece so clear rows
77:52 - what does clear rows take again I'd say
77:55 - it probably takes grid and locked
77:56 - positions maybe yeah
77:57 - grand and locked positions okay so path
78:00 - of the grid will pass it lock positions
78:02 - okay so then we're checking whenever
78:05 - we're changing the piece if we should
78:06 - clear a row and this can clear multiple
78:08 - rows at once okay I'm gonna be showing
78:10 - you guys a few different things so in
78:12 - the last video I mentioned I was gonna
78:14 - be doing more cosmetic stuff so that is
78:16 - true in this video I'm gonna be showing
78:17 - you how to do the main menu screen how
78:18 - to draw text in the middle the screen
78:20 - how to make things look a little bit
78:22 - better and I'm also gonna be adding a
78:23 - little bit of functionality to the game
78:25 - in terms of making the piece fall faster
78:29 - as it moves or as time moves forward so
78:32 - obviously you want the game to get more
78:33 - difficult as time goes on so what we're
78:35 - gonna do to do that is increase the
78:37 - speed at which the piece falls down the
78:40 - screen it's pretty easy I'll show you
78:41 - how to do that I'm going to be adding
78:42 - score and we're gonna be displaying that
78:43 - score and that's probably about it for
78:46 - this game
78:49 - so the first thing I want to show you is
78:51 - how to add the piece following faster so
78:55 - to do this we need to create a variable
78:56 - in our main here and I'm just gonna make
78:58 - this equal to what are we going to say
79:01 - fall all right let's say level
79:04 - underscore time okay and this is gonna
79:07 - just represent how much time has passed
79:10 - and it's gonna be similar to full time
79:11 - and level is just because as we increase
79:13 - speed like the level is going up kind of
79:16 - whatever okay so say level time plus
79:18 - equals clock dot get underscore wrong
79:21 - time and we're gonna do exactly what we
79:23 - did with making the piece move down the
79:25 - screen except we're just gonna change
79:27 - the speed at which it moves down the
79:29 - screen so what I'm gonna do here is when
79:31 - I make another if statement I'm just
79:32 - simply going to say if level underscore
79:34 - time divided by a thousand is greater
79:38 - than and then you can put in whatever
79:39 - time you want here now I'm gonna do five
79:41 - seconds so every five seconds we
79:43 - increase the speed okay
79:45 - and then we can decide what we want to
79:47 - increase the speed by so I'm going to
79:48 - say a level underscore time we need to
79:50 - first reset this back to zero so that we
79:52 - continue to do this and then what I'm
79:54 - gonna actually do here is gonna say if
79:57 - level underscore time is greater than
80:01 - and we want to put like a terminal
80:03 - velocity here so at what speed do we
80:05 - stop increasing the time because we
80:08 - obviously we can't get to a negative
80:09 - fall speed otherwise you're just gonna
80:11 - instantly fall and we don't want it to
80:13 - get too fast that the game's unplayable
80:14 - so we need to pick a speed now a good
80:16 - speed that I kind of found was 0.12
80:19 - because anything faster than that is
80:21 - like pretty fast but I mean you guys can
80:23 - play with that and change that around
80:25 - it's really easy number just to fix
80:26 - right and then if we're greater than
80:28 - that we're just simply gonna subtract a
80:30 - value from level underscore time now
80:34 - this value the magnitude to the size of
80:36 - this value that you're subtracting is
80:37 - gonna determine like how quickly you
80:40 - increase the speed as well as obviously
80:41 - the time so I put originally 0.01 and I
80:47 - mean depending on how long it takes you
80:48 - to play a Tetris game this is pretty
80:49 - fast because that means after 50 seconds
80:53 - you're already gonna be down to zero
80:54 - point one seven which is very quick and
80:57 - almost at terminal velocity so I
80:58 - recommend you do 0.005 that means it'll
81:01 - take about
81:02 - a minute and 40 seconds before you're
81:05 - gonna be close to reaching this terminal
81:06 - velocity which might be good if you're
81:08 - playing touches for a decent amount of
81:09 - time okay so you guys can play with
81:11 - those numbers but that is going to move
81:12 - it down faster I would show you but it's
81:15 - gonna take like a decent amount of time
81:16 - for it to continue moving faster to just
81:19 - play with that okay just trust me all
81:21 - right the next thing we want to do is
81:22 - add score so we need to first create a
81:25 - score variable and as a score is equal
81:28 - to zero like that and incrementing score
81:30 - is pretty simple I'm gonna say and you
81:32 - guys can make this whatever you want
81:33 - whenever we clear a row I'm gonna add
81:35 - ten to our score because you had ten
81:37 - pieces or ten cubes or whatever that you
81:39 - cleared okay
81:40 - so actually the way that we need to do
81:43 - this is we're gonna return a value from
81:45 - clear rows which is gonna be equal to
81:46 - score now I'm gonna go to clear rows and
81:51 - in here I'm simply just gonna return i
81:53 - NC okay
81:55 - and I NC is the increment so how many
81:58 - rows that we actually ended up clearing
82:00 - so if we clear more than one row we're
82:03 - gonna get a value of two we can multiply
82:04 - that by whatever our score increments
82:06 - gonna be and then yeah we can just add
82:09 - that to the score so this is pretty
82:11 - straightforward if we go to clear rows
82:13 - we're gonna say score is equal to clear
82:17 - rows multiplied by ten all right or
82:21 - actually not equal to we're gonna have
82:23 - to say plus equal to clear rows plus ten
82:26 - now what we need to do is we need to
82:28 - display this score on the screen
82:30 - somewhere the user can see then we're
82:31 - actually gonna save this score as well
82:33 - when we lose the game okay so the way
82:36 - that we can display this is we're gonna
82:38 - have to do it in draw window but we're
82:39 - gonna have to pass this score to draw
82:41 - window so after our grid object we're
82:43 - gonna pass score like that and we're
82:45 - gonna go to draw window and we're simply
82:48 - going to add another parameter here
82:50 - score like that now I'm just gonna set
82:52 - it equal to zero as a default parameter
82:54 - so in case we call it somewhere else and
82:56 - we forget to add that score that's fine
82:58 - we don't need that so what I'm gonna do
83:00 - now is I'm actually gonna go to draw
83:02 - next shape and at draw next shape you
83:04 - can see if I run the program quickly
83:05 - here it shows us like a little text
83:07 - object okay now I want to get this
83:11 - similar text object so I'm just gonna
83:12 - copy this fall into the label SX sy and
83:15 - I'm just
83:16 - bring it down here into draw window now
83:18 - it doesn't really matter where you draw
83:19 - it I'm just gonna plop it in the middle
83:20 - here and obviously I'm gonna change this
83:22 - from next shape to be score now we need
83:26 - to obviously display what the actual
83:28 - score is so we can just say a plus STR
83:30 - score like that and that should be
83:33 - displaying for us okay so now we have SX
83:35 - and sy which is giving us the play area
83:39 - I believe or no this is actually the
83:41 - position in which we wanted to draw it
83:42 - okay so what I'm gonna do is I'm gonna
83:45 - say wind dot blitz or is it surface
83:48 - surface dog blitz
83:51 - our text object which is D label and
83:54 - then where do we want to draw it to and
83:55 - draw SX sy now I'm just gonna have a
83:57 - look up here to see where I did it here
83:59 - so SX plus 10
84:00 - sy minus 30 so what I might want to do
84:02 - is we can add +10 to this so it's
84:06 - aligned but then we're gonna subtract
84:08 - we're actually add to the Y so it's
84:10 - lower so I'm gonna add let's say like 80
84:13 - like that so let's test this out and see
84:15 - if it's working score so it's not low
84:17 - enough so we'll add this I do 120 and
84:20 - see where we're getting an escort again
84:24 - not low enough
84:24 - it's go 160 and again you guys can play
84:28 - with these numbers score equals zero
84:29 - perfect and then maybe we'll just add 10
84:31 - more pixels here so it's more in the
84:32 - center and you know whatever that's good
84:36 - enough for me okay good
84:38 - so that is working well so we've got the
84:39 - score and we were moving down faster now
84:42 - what else do we need to do what we need
84:43 - to do now is work in main menu and
84:45 - figure out what happens when we actually
84:47 - lose the game so we have this check lost
84:49 - and all this simply does is just quit
84:51 - the game for us when that happens but we
84:53 - want to do something else when we lose
84:54 - and we want to display something to the
84:56 - screen so actually before I go in main
84:58 - menu I'm gonna go up here to a function
85:01 - that I told you guys I need to get rid
85:03 - of that that I was going to finish which
85:04 - is draw a text in middle now this is
85:07 - gonna take a service text and what else
85:11 - do we want say size and color okay so
85:15 - surface text size color this way you can
85:17 - use this in another function or sorry
85:19 - and another program and you can use it
85:20 - multiple times with whatever text size
85:22 - and color you want so we're gonna set up
85:24 - a font trans a font
85:26 - equals PI game dot font dot sys fonts by
85:31 - now you probably know this I'm just
85:33 - gonna pick Comic Sans we're gonna make
85:35 - it equal to size and bold is gonna be
85:38 - equal to true now you can make this
85:41 - false if you want or just omit it
85:42 - completely and then it won't make it
85:44 - bold pretty straightforward make a label
85:46 - label is equal to again phone dot render
85:49 - and then we're gonna say text one for
85:54 - anti-aliasing and color like this okay
85:58 - now we'll just simply draw this in the
85:59 - middle of the screen so to do this will
86:01 - say surface double its label comma and
86:05 - now we're gonna do a little bit of math
86:07 - here so talk underscore left under short
86:10 - X plus play underscore width divided by
86:13 - 2 not 3 minus and we're gonna get the
86:18 - label width and the way we do this I
86:19 - don't believe I've actually done this
86:21 - yet is get underscore width I think I'm
86:24 - just gonna check yeah get width and then
86:25 - the reason I have this in brackets
86:26 - because I'm gonna divide this by 2 as
86:28 - well and this will essentially give us
86:30 - the middle position where we should be
86:32 - drawing in terms of x-coordinate okay so
86:34 - now I'm gonna give top underscore left y
86:37 - plus play underscore height divide it by
86:42 - 2
86:43 - okay and now same thing - label dot get
86:48 - underscore height in brackets and
86:52 - divided by 2 I don't know why kids tab
86:56 - over here okay
86:57 - / - and that should hopefully be working
87:01 - for us okay so we can test that in just
87:03 - a second so we've got this it's bleeding
87:05 - now whatever text we want to the screen
87:06 - so this makes it really easy for us to
87:08 - draw anything to the middle of the
87:09 - screen so the first thing I want to draw
87:12 - it to the middle of the screen is like a
87:13 - you lost message so when it says you've
87:15 - lost what I want to do is draw obviously
87:17 - you lost and tell them that so let's say
87:20 - draw text middle and then what do we
87:24 - want to draw well let's simply draw what
87:27 - surface first actually that we need so
87:29 - we'll say win and then we're going to
87:33 - pass it text and in this case we're
87:35 - gonna say you lost exclamation point
87:38 - sighs let's go
87:40 - or a and color let's go wait and you
87:45 - obviously you guys can play around that
87:46 - now after I draw that and I display the
87:49 - screen or update this screen PI games
87:52 - display update just because we haven't
87:53 - called the window yet draw window when
87:55 - we do this then what we're gonna do is
87:58 - we're just gonna delay so whereas a PI
88:00 - game dot time delay and I'm just gonna
88:04 - delay one and a half seconds just so
88:05 - once this comes up the user has a second
88:08 - to look at it because then we're gonna
88:09 - move back into our main menu screen
88:11 - which you'll see okay so I'm just gonna
88:15 - fast forward this until I lose and then
88:17 - you guys can see that it's working and
88:22 - there we go so we got you lost and then
88:24 - it's late and then just quit because I
88:25 - have this PI game dot displayed up quick
88:27 - here okay so now we're gonna move to is
88:30 - main menu everything else is working I
88:31 - told you guys it's not like super
88:33 - difficult all this stuff and in main
88:35 - menu what we're gonna do now is we're
88:37 - just gonna make it pop up whenever you
88:38 - start the game and whatever you lose and
88:40 - just gonna say hit any key to like move
88:43 - forward to continue okay so I'm just
88:45 - gonna use up another game loop in here
88:47 - so we're gonna say run it was true well
88:51 - run and this is gonna be really similar
88:52 - to the loop we've done above it's just
88:54 - up just a lot shorter we're and we're
88:56 - gonna just draw in here without using a
88:58 - different function just because we're
88:59 - not drawing very much so it's not
89:01 - important that we wouldn't call it like
89:03 - update the screen with a defined
89:04 - function so I'm just gonna fill with
89:05 - block just we kind of are getting rid of
89:07 - everything we're gonna draw text middle
89:09 - and what I'm gonna do here is I'm gonna
89:10 - say press any key to play okay and then
89:17 - we'll give this a size of 60 and a color
89:19 - of white once again okay so that's being
89:22 - drawn in the middle will update the
89:24 - display so pi end up display dot update
89:28 - like that
89:29 - and then we're gonna say for event and
89:32 - PI game dot event type gets a similar to
89:36 - what we've already typed up top we're
89:37 - gonna say if event type equals equals PI
89:41 - game dot quit we always want one of
89:42 - these not quick cue then we are simply
89:45 - going to say run
89:48 - oops run is equal to false and then we
89:53 - can tap out here and we can just make
89:54 - sure that we are actually quitting the
89:56 - display so don't quit and we'll get rid
89:59 - of this pygame dot display dot quit and
90:02 - then we're gonna add one more event and
90:04 - this event is gonna be a key down so
90:06 - whenever they press any key on the
90:07 - keyboard
90:08 - then that is going to move this forward
90:10 - and we're simply gonna call this main
90:12 - function where we'll play and I'll
90:14 - explain how this kind of flows in just a
90:16 - second because it's really nice okay so
90:18 - if event dot type equals equals PI game
90:22 - dot all capitals key down so if they hit
90:25 - any key then what we're gonna do is
90:27 - we're gonna say main like that okay and
90:30 - I believe that is about it okay
90:34 - yeah so let's see here pi game dot
90:36 - display dot quit looks correct okay so
90:39 - the way this is gonna work pretty much
90:41 - is when we run the game we start by
90:43 - running main menu so we run main menu
90:45 - and then we could go into this main loop
90:48 - where all its gonna do is just say press
90:49 - any key to play and that's gonna be
90:50 - drawn in the middle of the screen once
90:52 - that happens we're gonna check if
90:54 - they're hitting any key if they hit any
90:55 - key we're gonna call main in which case
90:57 - sir let me close this so it's easier to
90:59 - see if we hit main then we go into the
91:01 - main game loop and we go and we do this
91:04 - loop until eventually we lose once we
91:07 - lose it displays you lost on the screen
91:09 - makes this loop equal to false which
91:11 - means it brings us back into this main
91:12 - menu loop and we can play again by
91:14 - hitting any key pretty straightforward
91:16 - okay so let's test this out to make sure
91:18 - this is working draw text missing one
91:20 - potential argument color ah because I
91:23 - didn't give a surface my bad so let's
91:24 - just do win and there we go okay so
91:28 - press any key to play press space
91:31 - missing one protect mate okay sorry guys
91:33 - and this is why we test our perfect okay
91:35 - win and now let's try there we go
91:38 - and now we're playing it shows the score
91:39 - and you guys can mess around it I
91:41 - haven't actually tested the score so
91:42 - I'll just do this really quickly and see
91:43 - if I can clear row without having to
91:45 - fast forward which we may be able to do
91:49 - not use it
91:52 - okay let's see there you go and score is
91:55 - equal to 10 so the score systems working
91:57 - as well and that's relief because I
91:58 - hadn't even tested that before I put
92:00 - this in the video okay perfect
92:02 - oh when you press the X brings you to
92:03 - press any key to play you press it again
92:06 - you can do that so if we wanted to
92:07 - change it so when you hit the X key and
92:09 - the main thing and you want to close the
92:12 - game then in the main loop here sorry
92:15 - what are you gonna do is sort of saying
92:16 - run equals false just to high game
92:19 - display dot quit so you can do both you
92:21 - and say run equals false and then you
92:23 - can quit the display as well okay so
92:26 - what's next so I said we were going to
92:28 - save the score and potentially display
92:30 - that so if we want to save the score
92:32 - we're gonna have to do something when we
92:34 - lose so we're gonna have to update like
92:36 - the current score and we're gonna use a
92:37 - text file to do this so that you can
92:38 - play multiple times so what I'm gonna do
92:40 - now say new file just create a new text
92:43 - file and it's gonna call this scores dot
92:45 - txt okay and here I'm just gonna put a
92:48 - zero as a default value it's really
92:50 - important you put a default value to
92:51 - start otherwise you might run into some
92:53 - issues so just create a new text file
92:54 - make sure it's in your directory with
92:56 - the main with the script okay now what
93:00 - I'm gonna do is I'm gonna create another
93:01 - function doesn't really matter where it
93:02 - goes so I'm gonna say define update
93:05 - underscore score and we're gonna give it
93:08 - to score okay now in here what I'm gonna
93:10 - do is I'm gonna say with open and this
93:14 - is how we're gonna open our text file
93:15 - and it's like update and display with
93:17 - open scores text in our so in read mode
93:20 - and this action needs to be in quotation
93:22 - marks as well we are going to say F yeah
93:27 - I have to do this as F sorry I say F dot
93:31 - read lines like this okay and that'll be
93:35 - equal to lines is equal to F dot read
93:39 - lines so that means our score is going
93:41 - to be well the first line so score is
93:43 - equal to lines zero and we're gonna add
93:47 - this dot strip so that we remove any
93:50 - like backslash ends because if you don't
93:53 - know in a text file when you hit the
93:55 - next line the way that it actually
93:56 - tracks that you have another line is it
93:58 - puts a character that looks like this on
94:00 - the line it's invisible to you in the
94:02 - text file when you're viewing it but
94:03 - when you read it in with code you
94:04 - actually read in this character
94:05 - we just want to make sure we strip that
94:07 - off in case it is there I'm gonna say
94:09 - square equals this and then we'll just
94:11 - say okay so we've done that and since
94:13 - we're topping out now at all it's gonna
94:15 - automatically close our file what we're
94:16 - gonna do now is we are going to open the
94:18 - file again except in this time we're
94:20 - going to open it right mode which means
94:21 - we're gonna overwrite whatever is in the
94:23 - file and we're simply gonna say if score
94:27 - is I guess I'm gonna change this to end
94:31 - score standing for new score if score is
94:34 - greater than n score then we'll say F
94:38 - dot and we'll say write lines actually
94:41 - right I think and we'll simply put in
94:44 - STR of score which is this updated score
94:48 - otherwise so if that's not true we just
94:51 - have to write back the other score
94:53 - because we're clearing it when we open
94:55 - this with W mode okay so rinse it F dot
94:57 - right and then sorry this is gonna be
95:00 - what am i doing N and score yeah sorry
95:05 - so I kind of messed up in this way it
95:07 - should be the other way around but
95:08 - whatever we're just checking if the
95:10 - original score is greater than the new
95:11 - score if it is we'll write the original
95:13 - score otherwise we'll write the new
95:15 - score so this works still it just not
95:16 - the way that I was thinking about it
95:18 - when I was kind of talking about that
95:19 - okay so update score should work and
95:22 - then you know you can actually returned
95:24 - let's just return actually a naught we
95:26 - don't need to return anything so I
95:28 - haven't pre-written this yet so I'm kind
95:30 - of still just going through how I want
95:31 - it to work okay what we'll do here after
95:34 - we start round equal to false we'll say
95:35 - update score and we'll give it whatever
95:38 - the current score is and then this
95:40 - should be working in the scores dot txt
95:42 - file so let's run this I'll fast forward
95:44 - through and make sure things working
95:49 - [Music]
95:53 - okay so we got here not support it
95:56 - between instance of string and int okay
95:58 - so if score greater than end stress
96:00 - which mean we have to convert the
96:01 - student int so if we go back up to score
96:04 - and where did I make this okay
96:08 - score is going to be int score like that
96:12 - okay and that's hopefully work because
96:15 - score comes in as an int and we'll run
96:18 - it one more time one more fast forward
96:19 - sorry without guys okay and another
96:28 - issue lines zero Linda
96:31 - list index range okay I'm gonna have a
96:33 - look at this and come back okay so this
96:35 - code is actually working just fine the
96:37 - issue was that since the last time when
96:38 - I crashed we didn't end up writing
96:40 - anything into the file so we had a blank
96:42 - file and then we were going lines to
96:44 - zero where is it here and obviously
96:47 - there was no line 0 so that crashed but
96:49 - if you just add any numbers so if I add
96:51 - 0 back in here two squares dot txt and
96:53 - save it then this works fine okay so
96:55 - that's it for saving scores now we need
96:57 - to display those saved scores so I'm
96:59 - kind of gonna leave this up to you guys
97:01 - where you want to display it I don't
97:03 - really know where I want to put my saved
97:04 - score like high score maybe on the left
97:06 - side of the screen doesn't really matter
97:09 - so if I want to draw it on the left side
97:11 - of the screen then I can do something
97:13 - like we're gonna have to first get this
97:16 - max score right so I'm gonna have to
97:17 - make a new function called define max
97:21 - score or last score or whatever you want
97:24 - to call it and if you call max score
97:27 - what we're gonna do is we're just gonna
97:28 - do the exact same thing we did here so
97:30 - we can say it with open square set text
97:32 - score 0 epsilon 0 dot strip accepting
97:35 - this time we're gonna return score like
97:39 - that okay now we actually do here to is
97:41 - we could just simply replace this whole
97:44 - line with max score and just say score
97:47 - equals max score be the efficient way to
97:50 - do it and I mean feel free to do that if
97:52 - you want or leave it the other way okay
97:54 - so now we have something that's getting
97:55 - us max score so how we gonna use this
97:58 - well when we call main
97:59 - I guess when we call me or we can call
98:01 - main menu does it like you guys if you
98:03 - want to draw it in the main menu can do
98:04 - that otherwise draw it in the main to
98:06 - draw it in the main all you're gonna do
98:07 - is gonna say like last score is equal to
98:10 - u max score which is gonna be whatever
98:13 - is stored in that text file and then to
98:16 - draw this well we're gonna have to pass
98:18 - this again into when we're redrawing
98:20 - window so in draw window I'm just gonna
98:23 - say last score we can go up to draw
98:27 - window again say last underscore score
98:31 - equal to zero and you're pretty much it
98:33 - gonna copy exactly what we have here
98:35 - with this font and the split so let me
98:39 - just comment this and say this is
98:43 - current score just so I could remember
98:45 - you know how to comment and say loss
98:49 - score or high score whatever you want to
98:50 - say here and then we can just say score
98:53 - and we actually get rid of this font
98:55 - because we already defined it
98:56 - we'll say high score equals and in this
99:01 - case last underscore score okay
99:04 - draw that to the screen this is probably
99:07 - not where you want to draw it you
99:08 - probably want to draw it top left X
99:11 - minus like some value minus 30 top left
99:14 - Y maybe plus I don't know like 300 or
99:19 - something so now we can see where this
99:21 - is actually gonna draw if we check this
99:23 - out so let's run this press any key so
99:26 - it's not obviously showing up where we
99:28 - want to so we have to subtract more from
99:30 - this so let's subtract like I don't know
99:33 - 100 and then this was plus too much
99:37 - let's do plus 200 and high score so
99:41 - again like you got to move it over more
99:42 - so we'll move over 200 this time and
99:44 - hopefully this works
99:45 - okay so high score zero scores here and
99:48 - that's obviously because at the current
99:50 - moment we have no our score is just zero
99:53 - in that text file okay so I think that
99:56 - is pretty much it for this video if you
99:58 - guys have any questions any errors
100:00 - anything that I did in this video that
100:01 - you weren't sure about leave a comment
100:03 - down below we'll be sure to get back to
100:04 - you

Cleaned transcript:

so this is gonna be Tetris in Python with PI game now this is a pretty advanced tutorial a lot of the stuff I do in here assumes that you already have a basic knowledge of Python and you kind of know some of the syntax and you're not a complete beginner that being said if you are a complete beginner feel free to watch through see what you might understand you're probably gonna learn something along the way it just might be a little bit confusing because I'm kind of gonna speed through a few things that are I would consider like trivial right now okay so first step for this tutorial series is you guys have to download and install Pi game because that's the module we're gonna be using so I will put a link in the description and a card in the top right hand corner here to go and do that I have a video it's pretty quick and it kind of goes through any areas you might run through when installing PI game so watch that first and then come back here okay so let just give a quick preview of what our game is going to look like so this is Tetris I didn't go too fancy with the graphics I pretty much just want to make sure that we get everything functional here and then you guys can play around and change stuff later on if you want to but yeah this is a fully functioning game you can see it's just like standard Tetris we have different colors shapes are falling down the screen shows us our next shape and there we go the road just cleared so that's all I'm going to show you for right now because I want to get into actually coding okay so pretty much what we're gonna be doing in this first tutorial is we're gonna be working a bit in the main function we're gonna be creating the grid we're gonna be talking about formatting shapes all the basics of just setting up for the rest of the tutorials so the first step and what I need you guys to do is you're gonna download kind of like a starter file okay and that's just because if you see here I scroll through my file I got a lot of lists I got a few things set up here and you know what I could go through and type them all out but that's just a waste of the video because it takes a long time so to save yourself time and to save me some time what I'm gonna do is just put a link in the description it's a pastebin link click that link and download this code it's just gonna be all this it just has all the functions that we're gonna need for this and then it has these shape formats which I'm going to talk about in just a minute so go do that if for some reason paceman is not working let me know in the comments and I'll find another way to give it to you but I'm also gonna put it in the pinned comment so that you can just copy and paste it from there as well I do recommend you check the indentation on it though because sometimes it messes up on paste bin and in the comments okay so now that you've got that downloaded we're working on that I'm gonna be working in PI term if you don't know about PI term don't worry about it you can just use ID ideally but it's just gonna save me a bit of time because it autocompletes variables it does some cool stuff so that's what I'm gonna be working in feel free to work in PyCharm feel free to work in whatever text editor you want just know that that's what I'm using it doesn't make a difference but some of the stuff I do in here you might not be able to do in ideally or sublime text or whatever you guys are gonna use okay so we've got that all the way we've got everything set up and now we're ready to actually start coding and understanding what's gonna be going on so tetris is a fairly complex game you have shapes moving down the screen they're rotating around they're moving left and right when they hit the bottom they freeze in whatever position they're in and then if you have a full row complete like cubes they're not real clear and you keep going and obviously you lose the game if you stack up too many blocks and it goes up or above the top of the screen okay so this first variable is we need to set up is our screen width and our screen height so we got eight hundred seven hundred here the next ones are play with and play height now this is the actual red box that you guys saw that's what these are representing so since in Tetris we have a ten by twenty grid we need to make sure that our play with is exactly half of our play height so that we have perfect squares right so doing the math here that makes it 30 width and 30 height per block so that's our block size of 30 okay so now this top left and top left X and top left Y this represents the top left position of our actual play area that's so when we start drawing blocks and we start checking for like collision and stuff like that we just have these already set up and we don't have to deal with that so the math is pretty straightforward you guys could probably figure that out you don't need me to explain that okay shape formats so these and this is the longest part is why I got you guys to copy everything is this is what's gonna represent our shapes in Tetris now you see that I have multiple lists inside of lists in most case says this is because each shape has possibly more than one rotation right so this is the standard rotation of the S shape and that's actually what they're called in Tetris like S said I oh whatever and this is the second rotation and these are the only two rotations or whatever that s can have so that's why we have them in here we have a 5x5 grid of periods and then whatever there's a zero that represents where the block actually exists okay so Zed you can scroll through you can kind of look at them and you can see for some of them for example the square well it doesn't have any rotation if you flip it it's gonna look the same so we only have one list here for jafe however though we have four right because we can rotate it in different ways l we also have four t we have four as well okay after this I create a list and it just holds all of my shapes so s said I just so that that way I can really easily select shapes just by indexing them in the list like 0 through 6 and shape colors here is the same thing it just corresponds like for example if I did shape 0 and I did shape color 0 then that's gonna be the color of shape 0 okay same thing with like 6 so shape 6 well color list our shape colors 6 is the color of that shape so just makes it really easy we don't have to deal with dictionaries or anything like that ok alright so now we've kind of gone through the like starter file I'd say and you can scroll down here you can look at the function names I'm not gonna explain them because most of them are pretty straightforward and I'll talk about them when we start coding them anyways but we do have a class here now this class is gonna be the main kind of data structure if you want to call it for our game and this is gonna represent or this class is going to represent different pieces so the reason we have the class is because we're gonna call this a bunch of times and it's pretty much just gonna hold the information like X Y width height for our piece so let's actually start coding this now so I'm just gonna create my initialization function or method and this is actually the only method that I'm going to have so I need another underscore just butchered that and pretty much what this is gonna have is gonna have an X of Y and then it's gonna have a shaker okay and let's see on the information we need for this and I'll show you why so we'll say selfthought x equals selfthought Y is equal to Y self dot shape is equal to shape and then what we're gonna do here now is we want the color and we want the rotation so a self dot cover well I was already talking about this selfdoubt color is just equal to whatever the index of this shape is in this color list so what we can do is we can do shape under short colors square brackets and then shapes dot index and whatever shape we were given so if we're given the shape s well let's just find it in the shape list whatever index that is well that's the color of our shape pretty straightforward and then we're gonna do a rotation so rotation this is going to be set default to zero and this is so that whenever we click the up arrow key we can just add one to this rotation and that will represent what shape were actually gonna be showing because again remember this shape list is a multidimensional list it has you can see here in this case four lists within it okay all right create grid I don't know if we want to do this one yet you know what actually let's go let's go ahead and do this one it's not too complicated so the way that I'm gonna represent the grid in Tetris so that ten by twenty grid is just by creating a list full of colors okay so we're gonna have a two dimensional list and within that second dimension it's gonna represent a bunch of colors okay so I'll show you just by coding and kind of talking about after say grid is equal to and then another square bracket here for X and range 20 and or I'll explain this in one second and I will save for X and range ten okay except here let's go to zero zero zero okay so what I've just done here this is pretty this is like the Python way to create list K list comprehension we're gonna create one list for every row in our grid so since we have 20 rows we want to create 20 sub lists and each of these like sub lists or whatever twodimensional list is going to have a bunch of colors in it how many colors is gonna handle it's going to have ten colors because we have ten squares in each row we have 20 rows so that's the way it works these X's you could replace with underscores because we don't really care about the actual variable we just need to do this that many times now zero zero zero zero or zero zero zero yeah I think that's right anyways that's just black it stands for block and the way we're gonna draw the grid is simply by looping through this grid which we're going to return and just drawing each color so it makes it pretty straightforward okay now the only thing that we have to do here though is we have this locked position argument now locked position well right now we've created a blank grid what if there's already blocks that have been placed in our grades like they've already fallen they're static now they're not moving well we need to also draw those so to draw those we're gonna check if any of the positions in locked position are not like or whatever positions are in locked position we're gonna get that color and we're gonna change the corresponding value in the grid I'll show that just by kind of cooking it here so for I in range undo the length of grid and again this is gonna give us 20 because the length of grid well that it's 20 of these right okay so for I in range Len of grid for J in range and then we'll say the Len of grid I because now we're in this list so now we're gonna do whatever the length of that list is okay I say if this so if J comma I because J is our x value I is our Y value because rows are represented by I and the columns are represented by J in locked position and just you know locked pause it stands for locked position it's also a dictionary so you can see that it's a blank dictionary here and each position so like for example if I had like 1 1 is gonna be set equal to a color and the color could be something like 255 0 0 okay and we're gonna talk about that and create that later but that's just somebody needs to know for now okay so J I in locked position so if that key exists let's figure out what that key is so that key is gonna be equal to well locked position and what the value is sorry associated with that key ji now we're gonna change whatever the current grid position is here so for grid I a is equal to C okay I know this might seem kind of complicated but pretty much we're just looking through this grid and we're gonna find the corresponding position to the locked position and just change that color in the grid so later when we draw it we get an accurate grid okay and you guys will see how this all is kind of plays out later if it seems a bit confusing now okay and then we're gonna return that grid to wherever we're calling okay so that that's one part done now we can move down and we can go into draw window which is then actually let's do get shape this one's really easy okay so this is literally a oneliner return randomdot actually what is it called here I gotta have a look I think it's random dot choose random duck choice that's where this random dot choice and then we're gonna be given a shapeless so say shape actually let's just I'm gonna cold up here sorry guys shape random dot choice shapes all this is gonna do is is gonna pick one of these shapes and it's just gonna give it to us so that one we need to create like a new shape falling down the screen ever ever that that's all we have to do okay so get shape random dot choice that one's really easy okay next one draw a grid all right so what we're gonna do is we're gonna be passed a surface and the surface is obviously what we're gonna be drawing on so we're gonna start by just changing the surface surface don't win servicedog fill with color this case the color is gonna be black okay sir just not fill as yours ever do all right next thing we're gonna do is we're just gonna draw like a title on the thing so the way we have to do this we first have to start by initializing the font objects when we do that pie game font dot an it okay this just means we're setting up font and we're getting ready to draw to the screen we're gonna create a font it's got escape font is equal to PI game taunt font dot sys capital SOS font and then we need the font name I'm the Comic Sans guy so I'm gonna use that Comic Sans size of the font I believe ya size of the font Randy's sixty okay so the way you want to set up your own font you want to change this just change this to any font you can look up fonts on the PI game website and then just give it a size if you know the name of the font type it in here it probably exists in Impa game alright so now we're gonna need to set up a label so I say label is equal to font render and then in here we need the text that we're gonna render in this case I mean Cola Tetris you need our antialiasing of one and I believe we need a color in this case I'm gonna make it white okay so text antialiasing just set this one I don't know why you need to set this one but just set it one and then whatever color you want your label to be okay now that we've got the label we need to draw this label on the screen so lets blend it now when i'm used to typing when surface double it and then in this case we're gonna pull it the label where do we want to put it well now we want to figure out where the middle of the screen is so we could just hard code this in but if we ever want to change the dimensions of our screen we want this just automatically kind of adapt to that so we're gonna do top left X plus play with / okay and that's gonna give us the middle of the screen if you don't understand that let me know and I can explain it to you in the comments down below okay now we're gonna subtract this sorry this isn't actually done yet by the width of the label because this is gonna matter uhhuh depending on how long that the label is we it's going to determine where we place it on the screen so we're gonna get the width of the label and we're gonna divide that by two okay so now we have to do the Y well the Y is pretty easy we can just statically type this in because it's from the top of the screen so I'm just gonna give it and click 50 is what I typed in 30 okay and that should put it in the middle the screen and I can explain that to any of you guys it might not understand it if you just leave a comment because I don't want to waste too much time because I love people might understand that so for I in range now the Len of grid because now we're gonna start drawing all the great objects onto the screen so we created a grid we know how that kind of format works we're going to say for J in range the Len of grid I same as before and we're gonna do PI game dot draw dot rectangle and then this guy's been drawn the surface and then we're gonna go career i J okay and then top underscore left I need to put this in what do you call it brackets your top underscore left so just need to scroll over top left underscore X plus j x 30 and i'll talk about this one in just a second how this works and then top left y + i' x 30 another bracket and there we go now we just got to deal with this grid thing so that means that we just now need to past grid as well into our draw grid okay way this works we're gonna loop through every color within our grid so this is the color grid I J alright this is the surface we're drawing it on to you and this is the position in which it's being drawn now we also just need to add two things here that I realize I forgot because we need the XY we need a width and we need height so for width and height well that's go to the block size and block size once again and you know we can even multiply this instead of by 30 by block size in case we ever decide to change that so let's do that just to keep this nice and dynamic and then if we keep going over here the last thing we need is a fill so we're just going to put comma zero to make sure that we fill in the shape we don't just draw like a border for it okay way this works we add our top left X and we're gonna figure out wherever we are so which column were in multiply that by block size and that's our x position same thing works for the y with the starting Y position plus whatever row we're in x the block size will give us the correct position to draw our Cuban okay after we've done all that we just need to update the screen so pygame don't display the update and there we go so there's actually one last thing we want to draw and it's that red rectangle that you guys saw in that right kind of represent it like the play area so to draw the a video pie game dot draw dot rect and then surface and then in this case we're just gonna actually let's see here do we want do I want to dynamically type this in or do I want to statically draw it so let's give it a color first of all of red sea zerozero okay and we're actually gonna type it in dynamic just in case we decide to change anything later so top left X and top left Y and then the width oh we actually already have all these variables so we have the play underscore width and you play underscore height and in this case we're gonna give it a border size four okay and that's all for drawing the grid we might come back to this later but for now that's it okay so this just draws the actual grid ah draw a grid and I've added this okay we're just gonna copy this part of you guys that says draw a grid so serve first up lit this label and I'm just gonna move this in because I realize I have another function called draw window so in draw window what I'm gonna do is surface top fill whatever okay so I take surface and a grid so I just copied some of it from there and then instead of updating the screen here we're gonna update the screen over here and we're just gonna call our draw grid what do you call function like this okay so now what if we want to draw the grid and we want to use the same another program we could just copy and paste this function we would enough to kind of take it out of here we have enough like dissected alright okay subtract rid again this takes surface and this takes grid and there we go I believe that's working well okay now that we've done that we're gonna start coding in the main and in main menu and this is what we're gonna finish off with this tutorial because I know we're almost at the 20 minute mark right so what we're gonna do in Maine now is we're gonna set up a few variables so the first variable we need is this locked position locked positions again and again this is what we're passing up here in to create grid it's equal to a blank dictionary just a set in case we don't pass it then we don't need it okay so locked positions equals blank we ready to say grid is now equal to well create grid because we already created that function with locked positions passed to it can't create a variable called change underscored piece it's gonna be equal to false we're gonna make run equal to true this is just for our while loop that we're gonna use we're going to say current piece is equal to get underscore shape okay we're going to say next piece is equal to get shape as well where I set up a clock object and clock is equal to PI game time dot clock and we're going to set a variable called fall time equal to 0 and those are all the variables that we need in our main function already coded for us ok so now we're gonna set up our while loop that's our main game like you're say well run first thing we need to do in our loop is sorry for event in in PI game dot event dog gets let me say if event dot type equals equals PI game dot quit well that means we need to quit the program so the way that we can do that just simply hitting run equals false it's gonna break us out of our raw loop and then we can deal with that afterwards we're also gonna add another event this is a keydown event so if event type egos equals PI game dot keydown like that then we're gonna check what specific key is actually hit so let's go ahead and do this now I can I get it over with so I'm just gonna type all the different keys and then we'll go in and code that after so we'll say if what do you call it PI game key equals equals I believe that's what it is art event key not probably ended up keep my bad guys event key equals equals PI game dot K underscore capital K okay underscore left let me say if event donkey equals equals PI game dot K underscore right like that and then same thing up and down so if events don't key equals equals I get him done ok hundreds go down and last one okay I'm screw up okay okay I don't know why that keeps happening okay okay underscore up like that okay so painfully after typing that left right down up now we can go in here and we can kind of code what each of these is gonna do so if we're hitting left we want to move our block left if we're coding right well if we're hitting right we want to move our block right and we're going down we're gonna move down we want to rotate our shape that's what the main things are gonna do in here so if we want to move our piece left well we should change the wat the x value left wise okay so the way that we can do that inside current piece dot X minus equals one now I know you guys are looking at this right now you're saying okay well what what the heck man so current piece is equal to get shape and that's all it's equal to get shape well what is get shape and it's just returning random choice shapes now this actually just made me realize the fact that our get shape thing needs to change a bit that's because we need to actually create a piece in here so we set up this lovely class up here we've already been using it so piece random dot choice shapes is the last argument takes it also takes an x and a y value right so for the X and the y well the Y is pretty straight forward is just going to be 0 the X has to be the middle of the screen so we're gonna give it 5 and for y we're gonna give it zero okay and actually for y we'll leave it 0 for now but we might want to make it negative so that it kind of starts above the screen and then starts falling down okay so we have let's make sure this works it looks right X Y shape yep okay great okay so that makes sense now on how we can change this x value same thing for right I'm gonna do current piece Y dot X plus equals one like that and for down we're actually just gonna take this in for now but this is not exactly what's gonna work y plus equals one to move downwards and for up well we need to rotate the shape so to rotate the shape this is actually pretty easy over and each state is current piece rotation plus equals one okay because when we change that rotation well that changes the actual image of the shape okay now this is all great but the thing is what if we're moving off the screen or what if this is not a valid position well that's why we have a function called valid space now valid space we haven't yet coded but I do have it in here somewhere valid space and what valid space is gonna do is it's simply in a return if the current position that we're in is a valid space so the way that I do since just make life a lot easier if we're moving left let's simply just change the pieces ex move it left one and then check if that's a valid position and if it's not well then we can just add one and move it back to where it was so I say if not and then valid space and valid space again take two arguments you can take the current piece it's gonna take the grid okay then let's just simply subtract or add one to our piece so all this is saying is we're gonna move left but if for some reason moving left results in not a valid space well let's just add one and pretend like we didn't even move there so we're not drawing it we're not changing anything so this is perfectly fine and it's actually a really easy way to check things so they're having two checking if if it's below this or above this or whatever okay so now next next one here gonna say if not valid space and same thing current piece with grid well now in here instead of adding one we're gonna subtract one because we were trying to move right and there we go same thing with moving down okay so we're literally just gonna take the exact same thing if not valid space current piece and grid well now let instead of adding one we're just gonna subtract one and this is from the Y value this time so it's like current piece dot y equals one okay so now for up so when we change the rotation we are changing the shape okay so it doesn't show this yeah yeah right now like how we change the shape we're gonna do that later so we can actually just call the exact same thing on rotation because think about it if we're fully on the right side with like the straight piece and we try to rotate well that could result in our piece being moved to the left or to the right or like there could be positions where it's on the left or it's on the right and it's not in the grid so we do have to check for rotation if it is a valid space we'll say current piece and then what else are we doing great here okay and then in this case again we'll just we'll just subtract one from rotation so minus equals one and that should all work pretty well okay so after we do that we're gonna make sure that we remember to draw the grid so in this while loop we'll say actually draw window I'm gonna give it surface and we're gonna give it grid now this reminds me that I haven't yet created a PI game surface that's great so let's do that so here I'm gonna say win equals PI game dot display don't set underscore mode in this case I'm gonna give it what is their screen width and screen height so s width and s underscore height and that's it for a display you want to give this a caption though so we'll say a PI game dot display dot set underscore caption yep so let's just call this Tetris like that and now we're gonna just pass when into our main menu we'll put one here and then in main menu we're gonna call me okay and we'll deal with main menu later I don't feel like coding it right now and it's not really important to like the main functionality of a game so we can simply just do this okay main win like this and if I put win here then everything should work out this has surface change this to say when in low cases okay so now you've effectively done draw a grid or draw window draw a grid get shape create grid we've created a piece we've gone through what all this stuff and the starter file does and we are now at 27 minutes hey guys and welcome back to part two of coding Tetris in Python with Pi game so let's get right into it in this video we're gonna be finishing a few other functions we're gonna be doing valid space convert shape format we're gonna be coding a bit in the main and we're also gonna be fixing a small mistake I made in the last video so this code right here in draw a grid yes this does draw our grid but this is not what I intended this function to do and I kind of just realize this when I was looking over the video and looking over the codes we're just gonna copy this code from draw a grid okay delete it out of there and we're gonna paste it down here at the bottom of a draw window okay so now we just have this after we're bleeding the label we have whatever code we had within draw a grid okay because draw a grid would this actually was supposed to do is draw deep lines for the grid so I kind of got this mixed up while I was going through the tutorial so we're gonna finish draw a grid now and what this is gonna do it's gonna draw those grey lines over top of all of our different colors so we can kind of see where each block is that we can see the actual grid structure so let's get started with this say SX which stands for start X is equal to when you call it top left X okay and then s Phi is equal to top left Y like that all right and this is just so I don't have to keep typing top left X top left Y just makes it a little bit shorter for us okay now I'm just gonna say I'm going to set it before Luke when I say for I in range and this is gonna be the length of the grid so how many rows we have let's say for J in range and this one is now gonna be a deal n of grid I so how many columns in each row and then here we're gonna be drawing lines okay so for every row we're gonna draw a line so pygame draw dot line we need a surface give it a surface we need to cover this case is gonna be gray so gray color code standard is 128 128 128 and then we need two positions okay so the start position is going to be equal to SX all right and then sy + what do you call it I I believe x blocksize and I think that is actually correct okay now for the end position well it's gonna be the same xvalue because we're just drawing or actually it's gonna be let me just check here yeah it's gonna be a x value that is just equal to the width so SX plus whatever to play with this and then the y value is going to be the same here because if you think about it we're gonna be at the same y value each time we're doing like we're drawing a horizontal line every horizontal lines can have the same two Y values and the X values just gonna be changed okay so I'm just gonna copy this and paste it in here now okay uhoh all right I don't know why that did that but we'll just go back like that okay so now what we're gonna do is we're gonna do this K so x sx plus j x blocksize okay sy can't actually just stay like this okay and then for X same thing s x+ j x block size and js again as our current column and then this one s y plus play underscore oops we need a plus sign here plus play underscore height like that okay and that should be drawing us what do you call it xx vertical lines and then 10 horizontal lines down the screen giving us a grid and kind of the way that works is every time we loop through a new row we're simply changing the Y value of what line we're drawing and then these X values are gonna stay static just at the left side and the right side of the screen and then the way that we do it here is we have the X values that constantly are changing every column and the y values are staying static being the top of the screen and the bottom of the screen to draw the vertical lines and that's what I wanted to do within this drunk grid function so now that's all kind of sorted out and we fixed like a small mistake don't get me wrong you can still have that other code up here it still works fine but just in terms of what I actually wanted to do with these functions that's the way we needed to fix it okay so now that we've done that what I want to start doing is getting into this convert shape format okay now this is probably the most complicated function I want to say within our program and what this is going to take as an argument or a parameter is just the shape now this is what I was talking about before so when we have a shape it looks something like this right so we have zeros that we have periods now this looks nice to us like we can tell what kind of shape this is but the computer has no idea so how can we get this into a form that the computer can read and ideally want to give it we want it to give us positions within the grid of where blocks exist and then we're not going to give position if the block doesn't exist so if there's a period like this okay and you'll see what I mean as we start coding this function and that's what the goal is function is to do to take that information and put it into something that's actually useful to us so we want a bunch of positions that's the goal because from these like lists we want to generate a list of positions and then based on those positions we can do things we can check them we can draw them and so on so I'm just gonna create a list called format don't worry if it's a keyword it'll just override it we're gonna say when we're giving a shape we're actually given a piece object so I don't know why I'm calling shape but whatever it's fine so shape dot shape and then we can just do is equal to and I'll talk about this in a second shape dot rotation modulus the length of shape dot shape okay so what this does is actually gives us the sub list that we need so needs to be spelled correctly I don't know how I butcher that so bad okay shape touch shape so if we look again here whenever we're passed a shape we're actually passed something like this right surpassed the shape object and its shape property so right here is look something like this looks like the variable T which would have a list full of lists so we want to get the actual sub list so which one this list right that's the one we want so the way we do that is by getting the shape rotation modulus the length of the shape so for example if our current rotation is zero like we haven't rotated yet then what's gonna happen is we're gonna have zero modulus the length of shape in this case the length would be four so we get zero so we're given this first shape now if we have one we're given this if we have two or given this if we have three were given this and if we have four then we go back and we get this one okay and it just keeps going and keeps going because modulus simply just gives us the remainder so that's how we can tell what the actual current shape is within that main list okay hope that makes sense so now that we've done that what we're going to do is want to set up a loop and because we want to look through every row and every column and then based on if there's a zero or a period we're gonna do something so we're gonna say 4i comma and because we want the line as well in enumerate right and then format okay because format is the list that contains like the actual zeros in once okay we're just gonna say Rho is equal to list of line this just gives us a nice list format that we can deal with making it easier for us I'm gonna say for J in or J comma column sorry in enumerate and now row so now every row we're getting the current line and then we're going to loop through the line and look for either a zero or a period I'm going to say if column which is going to be for example if we have some like this it's gonna look like zero zero okay so this is what our row is gonna look like so when we start looping J will be zero and column will be a period okay just just in case you're kind of confused there okay so before if column equals equals and it's gonna be string zero then we know that we've hit like a position like this cube exists here so what we want to do is want to add the position to our positions list now it's not so simple as just add the current I and J value we actually have to add something else I'll show you right now I'm just gonna type it out and kind of talk about okay so shape dot X plus J and then shape dot y plus I okay so this is our x value it's the current value of the shape because if the shape is already moving down the screen or moving left and right well we need to add that to whatever the J value is whatever column were in within this list okay and then same thing for with the Y value so whatever the current Y value is of our shape we're gonna add whatever column or whatever row sorry we're now in as for the Y value okay and that is the positions that we need in these positions list okay so now that we've done that we just have to modify these positions slightly we just have to give them an offset okay and I'll talk about why this allows you to do this so for I pause in enumerate positions okay then we're going to say positions I is equal to and then it's gonna be the current position okay so we just need to put this in a tuple cuz that's way we're gonna give it pause 0 minus 2 and pause 1 minus 4 okay so now let's break this down and kind of talk about exactly what's going on so we started off blank list positions we're just getting the actual shape within this list so for example we get something like this okay and then we're looping through it and where am i sorry and we're pretty much just checking if a 0 exists in each position of that shape okay if that exists then we're gonna add that position into our list and the way we do that is simply by getting the X plus whatever the current column is that we're looping through and whatever the current row is plus y okay now that we've got that the issue is that if we look here we're gonna get something like for a position list here we'll get something like 3 1 and then we'll get 3 2 we've got 3 3 and we'll get 3 4 ok now the issue with that is we're adding the current X value plus these two periods and the O so we need to remove these kind of trailing periods right because that's gonna result in our positions being offset it to the right by 2 much same thing with these Y values okay because when we're counting this row we're saying well this is 1 lower than this row so our current Y value say it was 0 and we're adding to it now instead of just adding 1 we're gonna be adding 2 so what's gonna everything's gonna be offset down so the way that we can kind of fix this is just by offsetting by constant by offsetting I'm just gonna take every x value that we've added and subtract 2 from it and every Y value that we've added and subtract 4 from it now what this is gonna do is simply just move everything to the left and up so that when we are displaying it it's just more accurate to the screen okay you guys can see what's gonna happen if you don't offset this and you'll notice that you kind of run into a few errors so just run with me on this area and just kind of you should see how this works later on ok ok so now that we've converted this shape format I want to go in code valid space now okay so valid space is gonna take two parameters shape and grid all right now we're gonna check the grid to see if we're moving into a valid space so what I'm gonna do here is I'm going to create two liske I'm gonna say accepted how do you spell accepted accepted underscore pause so these are just gonna be the positions that are actually valid okay is equal to and just flow with me on this we'll talk about in a second for J I and then within this list for J in range 10 system Li what we did in the last tutorial and then for I in range 20 okay so this is really similar to the way that we created the grid we're just getting every single possible position for a 10 by 20 grid okay and we're just adding it in a tupple in accepted position it's gay that's great but the thing is I want to convert this into a 1 dimensional list so this is the way we can do this and make other positions but now how do we flatten this list so this is actually how you do this okay so accept it cause it's gonna be equal to and this is one way there's many J for sub in accepted positions and then one more for J in sub okay so what this is actually doing now is it's pretty much taking all the positions in our list and just adding it into a one dimensional list and we're just overriding this list with that so see if you guys can understand that if not don't worry about it just know that all this does is simply flatten this list so we go from looking something like this we wouldn't call it like 0 1 and then having another list embedded just trying to show an example here 2 3 so we go from that to something that kind of looks like this and we just have two positions in it now so we don't have those sub lists and this just makes it a lot easier to loop through ok so now we just have 0 1 2 3 rather than having these embedded lists full of other tuples ok that's all we're doing with this line ok so after we do that what we want to do is we want to get all these positions um and we're gonna get the shape and we're gonna convert it into our positions right because remember whenever we get a shape it looks something like this it means nothing to us we need to first convert it into positions before we can compare it against other positions in our grid so we're gonna use this convert shape format grid our convert shape format we're gonna pass it to the shape and we're just gonna store this in a variable and I guess we're gonna call it what should we call it formatted okay because I guess that makes sense we formatted our shape so now we can use this and kind of compare it against accepted positions so here we're gonna have a list that looks like something with a bunch of positions in it and then this one we're gonna have a list that has a bunch of positions in it so you might see where we're going here in terms of how to compare these things ok ok so now that we've done that we've kind of got all our data ready to check this is the really easy part where I'm just going to say for position in format it and all we're gonna do now is just check if this position exists within excepted positions because accepted position is every position that were allowed to have right so we're say if paws not in accepted position and this is an important part pause one is greater than a negative one return false and then otherwise so if we make it through that loop that means we had all our positions accepted we can return true okay so let's talk about this really quickly the reason I have this if pause once the Y value is greater than negative one is because when we give this offset of four what ends up happening is we get some when we spawn in our shapes they're gonna spawn above the screen and then we actually want this because we don't want our shape to show up on the screen we want to start falling before it's actually seen so typically this means a Y position is going to start out like negative 1 or negative 2 so the thing is while it's falling we're checking if it's in a valid position right but the thing is it's not going to be in a valid position if it's negative so we just want to make sure that we're only asking if it's in a valid position if the y value is greater than negative 1 so greater than or equal to 0 okay and this is a really easy way to tell us well are we on the grid or not so let's give an example say we're trying to move left and we're already at the edge of the screen so that means we're gonna have an x value of negative 1 well that position of negative 1 whatever Y value is not going to be in this accepted position great way to code list so when we try this we're gonna return false and it's not going to allow us to move left and that is the whole point of that and now okay what am I doing here ok so I also just want to modify this part up here so I haven't for ji and range for J and range if I in range 20 I want to just change something here okay so what I'm gonna do actually let me say if grid I J equals equals and then the color 0 0 0 okay so this is an important part I was kind of waiting I was kind of thinking about this so pretty much we're only gonna add this position into our accepted position if it's empty which actually makes a lot of sense because think about it if we already have a color in that position then that's not a valid position we can't move into where a piece already exists so what this conduct condition does it says okay we're only adding this position now if this is true so if IJ is true then / code we can add the position if it's not zero zero zero that means something exists in there so that's why we're not gonna add it into our excepted positions okay so I know this looks kind of confusing so I'm doing like a bunch of embed in for loops this just saves us a few lines it's kind of a cool way to create a list in oneliner it's like the Python anyway so I figured I'd do that for most of the stuff in here okay so now that we've done that what else can we code well you know what while we're here we can code check lost all right this one's a really easy function this is just simply going to check if any of the positions are what do you call it above the screen so if we hit Y value zero then we know that we're above the screen and we've actually lost so the way to do this very site for pause be in positions because what this is gonna do is we're gonna pass a list of positions so we're gonna get every pause now in the position we're going to say X Y is equal to pause which simply you're splitting up the tupple because we know we're gonna get something looks in the form of like three four okay and we're gonna say if Y is less than one so equal to zero or greater then we return true else okay we don't even need no say return false down here so if every position is less than or greater than Y or whatever one then we will return false because we haven't lost yet otherwise we return true okay so we're almost getting there now I want to go down to the mean and I want to finish coding up some stuff in here so last time we kind of just left it at this like moving pieces around whatever but we have these variables okay so change piece next piece o'clock fall time that we're not using so what I'm gonna do now is I'm going to show you guys how we can actually move our shape down our screen at like a regular time interval so I'm gonna create a variable here actually called false speed and this is how long it's going to take before each shape starts falling okay so we'll talk about how to do this I'm gonna start coding it now so pretty much we're gonna say up here and I didn't do this before which fall along grid equals create grid based on locked positions the reason we're doing this I know we already created grid up here is because every time that we move we have a chance to be adding something to locked positions we're gonna do that later because for example if we hit the bottom of the screen will now lock the position it's gonna be equal to something else because it's gonna have a new shape in it shouldn't we need to constantly update the grid so that when we're drawing it to the screen we get like an updated version so that's why I'm doing that up here okay I also need to actually I don't think I need to do that here we need to add to fall time okay so the way we're gonna add to fall time because this is gonna track would he call it how long since like the last loop ran is by using this clock object that I set up here okay so before I add to that after here I'm gonna do clock dot tick and then I'm going to add this and I'll talk about this after I do it so clock get underscore raw time like that okay so the way that this works is this wrong time actually gets the amount of time since this last clock tick so when I first add it's gonna be zero because we haven't yet ticked the clock and the next iteration it's gonna see how long it took this while loop to run and then it's going to simply add that amount okay so it's actually going to give us real time this means this should technically run at the exact same speed on everyone's computer in every one machine because I know when I use fps FPS is dependent on kind of the speed of what do you call it on your actual computer sometimes like the way I did it in other games so this is a better way to do it so now what I'm gonna do is since I've now incremented the fall time and this is gonna be given to us in milliseconds so like one second would be a thousand that's that number and our fall speed is in well zero point two seven so what I need to do is I have to say if fall time divided by a thousand is greater than false speed then we're going to do is really reset fall time equal to zero and if we're going to add one to the current Y value so which means we're script we're moving down the piece one so this is gonna automatically now move our piece down another thing is what if our piece will hit the bottom the screen or what if it's moving into position we can't move into so this is the same thing we've kind of done in here what we're gonna do is going to say again if not valid position or valid space whatever given the current piece and our grid I believe at least grid okay then and actually we're gonna check one other condition and our current piece dot y is greater than zero this means that we're not at like the top of the screen because the same thing with negative values all right is greater than zero then what we're gonna do is were gonna subtract one from the current piece so y minus equal one because that means will we moved into an invalid position so let's move back up one and pretend like that never happened and we're just gonna say change piece is equal to true now the reason I'm setting change piece equal to true because think of it right if we're moving down and we move into position that's not valid well we know we didn't move left or right off the screen because we were moving down that means we must have either hit the bottom of the screen or hit another piece so in that instance we need to stop moving this piece and we need to change it and what changing piece is gonna do we're gonna do that later is simply gonna lock all the positions what they're currently in and then it's gonna make this next piece generate down the screen and I'll show you that in a second but this is kind of the way to check it and it's the easier way then you don't have to check like the Y values and and all that stuff okay alright so now that we've done that let's move down here to the bottom of main and let's start adding a few things ok so what I want to do down here now I want to say shape positions so shape underscore pause is equal to convert shape format current piece because what we're gonna do now is we're going to check all the positions of the piece moving down to see if what we've hit the ground or see if we need to lock it okay so and we're gonna add all that color to the grid so that when we're drawing it we actually see the piece cuz right now we have the piece but we don't add its color into the grid so we're not actually gonna see it show up so I mean first need to add it to the grid so we can draw it and we can see it moving so to do that we're gonna say for I and range the blend of shape positions okay we're going to here going to say XY equals shape positions of Ikes that's the current iteration the current one we're looking through and say if Y is greater than negative one so this means that we're not above the screen then we say grid Y x equals current piece dot color okay because remember the grid stores a bunch of different colors so while we're doing the greatest giving different colors and based on that position in the grid so Y X which is going to be this shape the all the shape positions we're gonna draw that color now the reason I'm gonna have this negative one is because imagine that we're at the top of the screen and we try to draw it or we're above the screen we have a position with a negative Y value so if we throw negative we're not actually gonna get an error in grid here but it's gonna end up looking like it's at the bottom of the screen and then moving to the top and it's just gonna look weird if you guys want to see what it looks like this just removed this condition and you'll see that why I haven't added in okay so now what we're gonna do is we're gonna check this change piece variable so I put it up here change piece this means that we've hit the bottom or we've hit something what we're gonna do now is we're gonna update locked positions and this one I'm gonna start talking about locked positions okay so for pause actually in shape positions all right we're going to say P is equal to posi row pause one alright I don't know why I do this but I think there's a reason for it so let's just run with it and when I said locked positions P is equal to current piece don't covered okay so what is this well locked positions is gonna be a dictionary in a form like this right it's gonna have a top one here that's gonna have a positions like 1 2 and then we're gonna have a color and the color is gonna be another tuple but RGB values okay so for example to 5500 the reason we have this is so that when we past locked positions into our grid like this right we can get each of those positions in the grid and then update the color of great so every time that we have like a locked position in a locked position as simply means our piece is no longer moving it's hit the bottom of the screen and we're on to a new piece we can get the position and we can get the color and then we can update the grid based on that and we can keep that in there okay and that's the way that locked position works so it's a dictionary with the key of a position and the value of a color all right that's kind of like the data structure for now what we're gonna do after this after we update our locked positions and we add positions to it when I say current piece equals next piece okay so we're just gonna change that and now since we've said current piece is now equal the next piece what we need to update next piece so let's get a new shape because we're just moving forward with the game and now of course we got to say change piece equals false because we're on to a new piece that's gonna spawn at the top of the screen okay and I think that is about it what we also want to do actually is we're gonna check if we lost the game and I think I do this after the draw window I don't think it really matters but where should I say if check lost based on what do you call it locked positions okay so these are all the positions of the shapes then we're gonna say run is equal to false and that's gonna break us out of this wall up and you know what while we're here let's indent out nope I game dot what is it I think it's not display doc quit or something yeah don't display dot quit so we're actually just exiting out of our game now up until this point I actually have not tested my code now I know some of you probably think I'm insane because we've already written like three enter lines of code we haven't tested any of it the reason I haven't done this is because I wanted to test this in between videos figure out what the errors were so that I didn't waste too much time fixing all of them so I'm gonna go through a few errors that we have now and show you what happens when I run the code so I'm just complete that cuz that was the fix that I made and pretty much you can see it'll be crashed right away and we actually get a 4iron range none type has no length now the reason we get this and this happens down in the main it's because in convert shaped formats somehow I managed to forget to return position this is really important because the whole goal of this function well was to generate this list of positions and we did that fine but we forgot to return them so uh pretty easy error to fix or return positions now again we run this way ok everything looks good no there's another issue all right so just watch if I try to go off the screen you can see that we get a unsupported operant for current piece because I forgot to put a Y or an X here so let's go down to main let's fix this what line are we on 260 to 262 current px yeah that would be important okay now I know there's a few other errors so this one current piece mimes equals let's change this to an X current piece equals wow I really messed up on this a lot ok dot rotation minus equal 1 okay so this is rotation and let's see anything else let's run the program see ok we're getting another issue here so if we have valid spacecraft ok so I just messed up and a bracket here so let's go lying 265 here we are so we're gonna take this quotation mark or what I'm saying edition might bracket and just put it there and all should be good now let's see we go down to the bottom the screen ok we got another and let's just play this for one sec see if we can run into any errors okay so we're rotating fine we can't move off the screen and all looks to be doing ok all right so that's a good sign for now let's leave that so it doesn't look like there's any issues if you find any I'd probably end up fixing them in future videos so don't stress about it ok so now that we've done all this what we need to do next is a few things alright so we need to deal with this draw next shape clear rows draw text middle what other functions to have and I think that's about it and we're also gonna deal with main menu kind of starting the game finishing the game and all that stuff so what I first want to do actually is I want to deal with draw next shape then I'm gonna do clear roads just cuz clear rows is kind of complicated so draw next shape what this is gonna do is they're just gonna draw the next shape kind of off the screen and show us what it is because in tetris typically it shows you like the next shape the next few shapes so yeah now this seems pretty straightforward like just draw the shape it's actually kind of long because we have to once again get this list turn it into positions that we can use and yeah it just it gets a bit complicated so what we're going to do is we're also gonna set up a font in here it's gonna say font equals PI game thought font dot sys font here we're gonna do Comic Sans again because you guys know I love Comic Sans Comic Sans sighs stick 30 and let's render this font okay so label equals font don't render text for this is gonna be next shape okay feel free to add a colon or something if you guys want antialiasing one text color white 255 to productivity feel okay basically already been through that okay now we need to figure out where we're gonna draw this this label okay so let's see the same thing we've done before you say s X is equal to top left X plus the play width and I'm going to say s Y is equal to top left Y plus the play underscore Heights actually I'm gonna play a hundred we're gonna say play height divided by two okay now what we're gonna do is this is gonna give us like to the right maybe I can just run this and show you guys it's gonna give us where my mouse is right here like a position kind of similar to here so we are actually here so what we want to do is we want to add a constant to this so we move to the right a bit so this constant we're just gonna hard code in and we can change this and play with it if we want it to be like moved more to the right or more to the left so to move more to the right rear now add 50 and then to kind of make this look a little bit better where you can actually subtract a hundred from the site so we can move a bit higher up on the screen play with these constants if you guys want it to look a bit different okay so now we've got that what we're going to do is we're gonna once again we're gonna format are in say format is equal to shape.com thing we need the actual shape so not just like that mean a shape talk rotation modulus the length of shape dot shaped like that okay so this is the exact same thing that we did in format whatever you guys know is know what function I'm talking about and I've lost myself here okay just to get the actual like sub list that we need okay so now on you might say well what do you what are you doing here we already have like a function that does this for us don't worry about it just follow along because this is a bit different the way that I'm gonna do think a so I'm gonna say for I comma line in enumerate all right and then row or actually before I'm not sorry I'm gonna do the same thing here we're gonna convert row it into list is really similar to the other function except we're going to do one major change and you'll see that for row equals list line we're gonna say for J comma what do you want to call it column in enumerate row this time and exact same condition if column equals equals zero what we're gonna do here instead of adding some position to list is we're gonna draw something and this is why I didn't want to use the other function that gives us list of positions because I don't care about the position within the grid I just care when we should draw something or not because this doesn't matter it's not gonna be moving we just want to draw like a constant image on the right side of this or a static image on the right side of the screen that we can just look at okay so what we do here is we're gonna say pygame draw rect so don't draw rect I need surface we pass the surface in we need a color it's gonna be the shape color okay and then we need our position of drawings for SX and then in this case we're gonna have to since we're drawing each cube right we're not dressed drawing the whole shape plus J multiply it by 30 and then we're gonna do the same thing with y so sy + I multiplied by 30 and we actually just changed this to let's change the block size to be a bit more dynamic okay so it's a 30 block so it's just in case we decide to change the dimensions of our screen later on and then we new width and height and that is gonna be a block size and block size and we want this filled in so comma 0 okay so what we've done here is really similar to what we've already done we're just gonna be drawing these blocks according to where they show up like in this list based on the initial exposition plus like a changed kind of position or whatever okay anyways I think that's about it for this oh we need to actually blitt the label now so we created this label we have actually drawn on the screen yet so let's do this so we say surface dot bullets label change this to a period okay and then we need a position what's our position going to be well we're actually going to SX plus 10 and sy minus 30 okay again play around with these constants guys if you want your thing to look a bit different be more centered whatever I again I don't go like too crazy on cosmetics here I just want everything to work and look decent I assume you guys can mess around that I right okay so now we've done that we've drawn the next shape well we actually need to call this function so within draw window we're gonna call draw next shape as well so where should we call this let's see what's called before we draw a grid draw an X shape or actually we can't call it in here where we need to call this in the main because we only have next shape within the main symbol right when we're drawing draw window we're actually just gonna call draw next shape because we need to give it the next shape so it's gonna be next piece and then the grid does that it takes it takes a surface yeah surface okay so let me just go check this to make sure and our surface is not called surfaces it it's called win okay so in draw next shape you haven't take a pen surface okay so that that should work fine you know what let's actually just test this now and see this working and we're not showing up we're not drawing this surface hmm I believe it is because ah draw a windowed Renick okay so what we need to do actually it's this draw next shape we're gonna draw after draw it now and we're just gonna update the display in here so pygame dot disability dot update and then if we go to draw window just remove this display update and this should work there we go so now we're getting next shape on the side the reason that wasn't working is because we were pretty much drawn over top of the next shape every time that we drew the window so now that's working fine we have our next shape showing up and what else do we need to do I'm really delaying trying to go to this clear rose function because it's really complicated but I think we're gonna have to do this next okay so clear rose and tetris obviously if we create a full row we need to clear that row and then so that's the only way the user can win obviously yeah so the way to do this is probably a lot easier than the way I'm gonna do it but try to follow along because this is the only way I could kind of get to work and this is probably the hardest part of the actual game okay so we're gonna take grid we're going to take locked positions and we're going to do is we're gonna set up a few things here just follow along if they'll try to explain as I go so I'm gonna say Inc which is an increment 0 for I in range the Len of grid negative 1 negative 1 ok and we're actually just going to subtract 1 from this to what this is gonna do is go loop through our grid backwards so it's going to start at the twentieth row and it's gonna move up to the nineteenth row okay I'm gonna say the current row is equal to grid I all right now we're going to say if the color zero zero zero is not in our row let's clear okay so we're gonna add one to ink don't worry I'm gonna explain this after that just follow along okay say IND equals I I'm going to say for J in range the length of row what we're gonna do is we're gonna try to delete locked square brackets current position there's gonna be J I and then if this doesn't work and I accept and continue okay okay so let's just talk about what I just did here because I kind of went fast and there's another part of this function door so the way this is gonna work these we're gonna say we're gonna look through the grid backwards we're gonna set row equal to every bulb row in agreed so what that really pig do and the way that we know if the bro should be cleared is if zero zero zero doesn't exists because if zero zero zero to success that means there's no plaque squares in our row which means it's completely filled with shapes are completely filled with cube objects or whatever okay so we know we can clear it so the way to clear it now and don't worry about these variables I'll talk about that a second is to get every position in that rail to do that we need to loop through J in the row and we're already out the current row so we know that I is just gonna stay static change J and try to delete this from locked positions because now what we're doing is the locked positions need to be removed so when mandela bees since locked position is a dictionary and it's mutable we can I should just change it within here and that's how we delete those keys and those colors from the grid okay so after we delete that all what we need to do is we need to shift every row so what's happening now and I think I'm actually just gonna pull out a little I have a drawing tablet and just start using this to kind of explain some things because it's pretty complex so just give me one second all right so what we need to do is we need to shift every row so if we delete like a the bottom row we every rule above that row needs to move down by one so if I go to let's see this and delete this okay so you can see if I have a grid alright and it looks something like this we're just gonna do like a very basic like 3x3 grid okay just to save us some time let's say that we want to clear this road down here so these are full of colors right so if we clear this row and what happens is we get rid of all these and that any positions that were above it so let's draw something like this now this is here well currently this is floating right because if we've cleared all these positions down here so we got rid of those this is floating so this needs to move down one so how can we go about doing that and the thing is every other row needs to shift down by one as well but now let's talk about like a potential issue we might run into so if I delete all that and let's say we have a grid that looks like this okay and there's a color here if we delete this row the grid actually now in our memory only looks like this all right it's only this top portion because we've deleted an entire row out of the grid so yeah we can shift everything down by one but now we're left with the grid that's one less than the other one so what we want to do is you need to add another row at the top here so that our grid stays the same size because if you delete an entire row well you're deleting row right so you need to add back the other positions at the top because everything's shifting down by one so really the way it works is you delete this and then this whole thing moves down and then you add a row at a talk like this okay so that you're back to your continual grid I hope that makes sense that's kind of the only way I can really explain it to you guys in terms of how we shift things and I mean to do it in code right okay so leave a comment if you guys confused about that cuz I'll try to explain it in a better way but it's just kind of like a confusing topic in general okay so now we're gonna do say if I NC is greater than zero okay we're going to say so this means that we've shifted and we've removed at least one row and I'll talk about the case in which we moved two rows in one second okay let's say four key in and just follow what this is this is gonna be kind of confusing list of locked positions so locked because we're just we just pass in Lock there okay and then when you say key because lambda I'll explain what this does in a second x x1 and I think that's about it and we're actually just gonna reverse this negative okay so for every key in our sorted list of locked positions based on the Y value is what this does so given a list that looks like this if you have like zero one zero zero okay give it a this a very basic list this could be a of locked positions list okay what we're gonna do is want to sort this list and the way we sort it is based on this number here this Y value and this is what this key equals lambda x x1 does you don't have to understand that this is just a really kind of complex way to sort of list what we're gonna do is we're gonna now make it look like this is your zero zeroone the way we do that is so that we get all the positions that have the same y value in like the correct order okay and you'll see why we need that when we start coding okay so I'm gonna say X y equals key because you can remember key is a tupple and I'm gonna say if Y is less than I and D we're gonna say new key is equal to X comma y plus AMC and then locked new key equals lock dot pop key okay let's dissect this now alright because this is I told you guys this was kind of confusing so what we're doing now if we want to shift every single position in the grid down because when we delete a row everything above that needs to move down so the first part is pretty straightforward okay so XY equals key so we're simply getting the x and y position of each key in locked positions and remember locked positions as a key and then a corresponding with that is a color okay straightforward now what we're gonna do is we're gonna say if Y is less than int and what that means is if Y is if the Y value of our key is above the current index of the row that we removed so if we remove for example row 17 then only things that are above that are gonna move down we don't need to move anything below row 17 down because we didn't remove anything after row 17 right and I'm gonna show this in a drawing in just a second okay so if that happens what we're gonna do is we're gonna change a key we're gonna get a new key we say it's igloo the current x value but we're gonna increment this by a certain value so we're gonna add I had to the Y value to shift it down and then we're gonna do is we're going to rewrite we're gonna create a new key in locked position which gonna have the same color value as the last key B on this one this gives us the lost current color value but it's equal to this position right so I'll explain why this works now kind of withdrawing and why I needed to look at this backwards okay because when we're looking at from bottom to top there's there's a reason for that alright and I might butcher the explanation but just kind of bear with me here for a second because this is important to understand why this works and this is the most complex thing and this is actually very useful you might want to use this a lot like shifting positions in a dictionary or in a list okay so if I go back to my little drawing thing here and I go like this okay so let's create a grid over here let's make it a few more rows this time just for a better explanation so one two three four okay I make it a four by four okay do you guys can see my fancy drawing skills let's make this a row so let's say we have a row like this guy so it's green make orange the orange didn't work okay so green can stay there orange like this like this and like this and then we'll add some more colors let's do like blue up here and up here okay so obviously this is the row that needs to be clear that my mouse going over right now okay so this is the road that needs to be clear what happens when we clear this room okay so we've looked from the bottom of the list up and we found if we're looking at row like for now looking at Row three and we say Row three it needs to be clear okay so it's cleared so we delete everything out of Row three right this row is now gone so our grid in memory just looks like this and this so what we need to do now seem to shift these position positions down but we don't want to shift these positions so that's why we're getting that int so we know which position push the positions in our grid to shift so we delete that row and then what we're doing is we're adding one and shifting all these positions down okay that's the straightforward example let's get rid of this and let's do this okay so let's say when we add our I don't know shape whatever to our grid we end up getting something that looks like this okay two rows that need to be shifted down now what we have to do is we have to delete this row and this row now here's the thing we delete this row we delete this row how many rows does this now need to move down well this needs to move down to Rose so how do we know how many rows to move this down how how many rows to move everything else above it down well that is based on our what do you call it increment here and that's why whenever we delete a row we add one to increment because we know that we have to now shifted down another row okay and that's kind of the way that this works if that makes sense now the reason when we go through and we look at things backwards so we don't overwrite existing rows now this is another complex thing okay you probably don't have to really understand this that much but anyways okay so let's just it's not gonna let me undo okay that's fine so we have this right now here's the thing we started looking at it from the top down to the bottom what would happen is we would so let's actually have to add another row for this example to make sense okay so if I add another row and I say well okay mmm it's out of color let's pick yellow all right let's say we have a position here and we have a position here alright so that means this position this position and this position I'll need to move down so here's the thing if I move this one down by two alright or if I move it down by one or whatever it could possibly overwrite this existing position and we don't want that to happen so why why we have to start looking at it from the bottom it's that when we start moving everything down we move the lowest most things down first so that way when we then change this there's no possible way we're gonna overwrite this right here okay because remember if you in a dictionary if you change a key and the key already exists well you're just gonna overwrite that key so that's why we started looking at it from the bottom if that doesn't make sense don't worry just that's for any of you that's why okay because I want to make sure I explain everything and you guys understand at least on some level why I'm doing what I'm doing okay so that's it for the explanation of clear rows now let's call it function so when are we gonna call clear rows now this is actually an interesting call we could call this function every loop but we're only gonna call this when our change piece hits the ground now the reason for this because you could possibly be moving down the screen and at some point the grid would have a full row before your shape actually hit the ground now we obviously know the way in Tetris when you're moving down the grid until you like lands or you stay static we're not clearing anything so that's why we're only gonna call this if we are about to change the piece so clear rows what does clear rows take again I'd say it probably takes grid and locked positions maybe yeah grand and locked positions okay so path of the grid will pass it lock positions okay so then we're checking whenever we're changing the piece if we should clear a row and this can clear multiple rows at once okay I'm gonna be showing you guys a few different things so in the last video I mentioned I was gonna be doing more cosmetic stuff so that is true in this video I'm gonna be showing you how to do the main menu screen how to draw text in the middle the screen how to make things look a little bit better and I'm also gonna be adding a little bit of functionality to the game in terms of making the piece fall faster as it moves or as time moves forward so obviously you want the game to get more difficult as time goes on so what we're gonna do to do that is increase the speed at which the piece falls down the screen it's pretty easy I'll show you how to do that I'm going to be adding score and we're gonna be displaying that score and that's probably about it for this game so the first thing I want to show you is how to add the piece following faster so to do this we need to create a variable in our main here and I'm just gonna make this equal to what are we going to say fall all right let's say level underscore time okay and this is gonna just represent how much time has passed and it's gonna be similar to full time and level is just because as we increase speed like the level is going up kind of whatever okay so say level time plus equals clock dot get underscore wrong time and we're gonna do exactly what we did with making the piece move down the screen except we're just gonna change the speed at which it moves down the screen so what I'm gonna do here is when I make another if statement I'm just simply going to say if level underscore time divided by a thousand is greater than and then you can put in whatever time you want here now I'm gonna do five seconds so every five seconds we increase the speed okay and then we can decide what we want to increase the speed by so I'm going to say a level underscore time we need to first reset this back to zero so that we continue to do this and then what I'm gonna actually do here is gonna say if level underscore time is greater than and we want to put like a terminal velocity here so at what speed do we stop increasing the time because we obviously we can't get to a negative fall speed otherwise you're just gonna instantly fall and we don't want it to get too fast that the game's unplayable so we need to pick a speed now a good speed that I kind of found was 0.12 because anything faster than that is like pretty fast but I mean you guys can play with that and change that around it's really easy number just to fix right and then if we're greater than that we're just simply gonna subtract a value from level underscore time now this value the magnitude to the size of this value that you're subtracting is gonna determine like how quickly you increase the speed as well as obviously the time so I put originally 0.01 and I mean depending on how long it takes you to play a Tetris game this is pretty fast because that means after 50 seconds you're already gonna be down to zero point one seven which is very quick and almost at terminal velocity so I recommend you do 0.005 that means it'll take about a minute and 40 seconds before you're gonna be close to reaching this terminal velocity which might be good if you're playing touches for a decent amount of time okay so you guys can play with those numbers but that is going to move it down faster I would show you but it's gonna take like a decent amount of time for it to continue moving faster to just play with that okay just trust me all right the next thing we want to do is add score so we need to first create a score variable and as a score is equal to zero like that and incrementing score is pretty simple I'm gonna say and you guys can make this whatever you want whenever we clear a row I'm gonna add ten to our score because you had ten pieces or ten cubes or whatever that you cleared okay so actually the way that we need to do this is we're gonna return a value from clear rows which is gonna be equal to score now I'm gonna go to clear rows and in here I'm simply just gonna return i NC okay and I NC is the increment so how many rows that we actually ended up clearing so if we clear more than one row we're gonna get a value of two we can multiply that by whatever our score increments gonna be and then yeah we can just add that to the score so this is pretty straightforward if we go to clear rows we're gonna say score is equal to clear rows multiplied by ten all right or actually not equal to we're gonna have to say plus equal to clear rows plus ten now what we need to do is we need to display this score on the screen somewhere the user can see then we're actually gonna save this score as well when we lose the game okay so the way that we can display this is we're gonna have to do it in draw window but we're gonna have to pass this score to draw window so after our grid object we're gonna pass score like that and we're gonna go to draw window and we're simply going to add another parameter here score like that now I'm just gonna set it equal to zero as a default parameter so in case we call it somewhere else and we forget to add that score that's fine we don't need that so what I'm gonna do now is I'm actually gonna go to draw next shape and at draw next shape you can see if I run the program quickly here it shows us like a little text object okay now I want to get this similar text object so I'm just gonna copy this fall into the label SX sy and I'm just bring it down here into draw window now it doesn't really matter where you draw it I'm just gonna plop it in the middle here and obviously I'm gonna change this from next shape to be score now we need to obviously display what the actual score is so we can just say a plus STR score like that and that should be displaying for us okay so now we have SX and sy which is giving us the play area I believe or no this is actually the position in which we wanted to draw it okay so what I'm gonna do is I'm gonna say wind dot blitz or is it surface surface dog blitz our text object which is D label and then where do we want to draw it to and draw SX sy now I'm just gonna have a look up here to see where I did it here so SX plus 10 sy minus 30 so what I might want to do is we can add +10 to this so it's aligned but then we're gonna subtract we're actually add to the Y so it's lower so I'm gonna add let's say like 80 like that so let's test this out and see if it's working score so it's not low enough so we'll add this I do 120 and see where we're getting an escort again not low enough it's go 160 and again you guys can play with these numbers score equals zero perfect and then maybe we'll just add 10 more pixels here so it's more in the center and you know whatever that's good enough for me okay good so that is working well so we've got the score and we were moving down faster now what else do we need to do what we need to do now is work in main menu and figure out what happens when we actually lose the game so we have this check lost and all this simply does is just quit the game for us when that happens but we want to do something else when we lose and we want to display something to the screen so actually before I go in main menu I'm gonna go up here to a function that I told you guys I need to get rid of that that I was going to finish which is draw a text in middle now this is gonna take a service text and what else do we want say size and color okay so surface text size color this way you can use this in another function or sorry and another program and you can use it multiple times with whatever text size and color you want so we're gonna set up a font trans a font equals PI game dot font dot sys fonts by now you probably know this I'm just gonna pick Comic Sans we're gonna make it equal to size and bold is gonna be equal to true now you can make this false if you want or just omit it completely and then it won't make it bold pretty straightforward make a label label is equal to again phone dot render and then we're gonna say text one for antialiasing and color like this okay now we'll just simply draw this in the middle of the screen so to do this will say surface double its label comma and now we're gonna do a little bit of math here so talk underscore left under short X plus play underscore width divided by 2 not 3 minus and we're gonna get the label width and the way we do this I don't believe I've actually done this yet is get underscore width I think I'm just gonna check yeah get width and then the reason I have this in brackets because I'm gonna divide this by 2 as well and this will essentially give us the middle position where we should be drawing in terms of xcoordinate okay so now I'm gonna give top underscore left y plus play underscore height divide it by 2 okay and now same thing label dot get underscore height in brackets and divided by 2 I don't know why kids tab over here okay / and that should hopefully be working for us okay so we can test that in just a second so we've got this it's bleeding now whatever text we want to the screen so this makes it really easy for us to draw anything to the middle of the screen so the first thing I want to draw it to the middle of the screen is like a you lost message so when it says you've lost what I want to do is draw obviously you lost and tell them that so let's say draw text middle and then what do we want to draw well let's simply draw what surface first actually that we need so we'll say win and then we're going to pass it text and in this case we're gonna say you lost exclamation point sighs let's go or a and color let's go wait and you obviously you guys can play around that now after I draw that and I display the screen or update this screen PI games display update just because we haven't called the window yet draw window when we do this then what we're gonna do is we're just gonna delay so whereas a PI game dot time delay and I'm just gonna delay one and a half seconds just so once this comes up the user has a second to look at it because then we're gonna move back into our main menu screen which you'll see okay so I'm just gonna fast forward this until I lose and then you guys can see that it's working and there we go so we got you lost and then it's late and then just quit because I have this PI game dot displayed up quick here okay so now we're gonna move to is main menu everything else is working I told you guys it's not like super difficult all this stuff and in main menu what we're gonna do now is we're just gonna make it pop up whenever you start the game and whatever you lose and just gonna say hit any key to like move forward to continue okay so I'm just gonna use up another game loop in here so we're gonna say run it was true well run and this is gonna be really similar to the loop we've done above it's just up just a lot shorter we're and we're gonna just draw in here without using a different function just because we're not drawing very much so it's not important that we wouldn't call it like update the screen with a defined function so I'm just gonna fill with block just we kind of are getting rid of everything we're gonna draw text middle and what I'm gonna do here is I'm gonna say press any key to play okay and then we'll give this a size of 60 and a color of white once again okay so that's being drawn in the middle will update the display so pi end up display dot update like that and then we're gonna say for event and PI game dot event type gets a similar to what we've already typed up top we're gonna say if event type equals equals PI game dot quit we always want one of these not quick cue then we are simply going to say run oops run is equal to false and then we can tap out here and we can just make sure that we are actually quitting the display so don't quit and we'll get rid of this pygame dot display dot quit and then we're gonna add one more event and this event is gonna be a key down so whenever they press any key on the keyboard then that is going to move this forward and we're simply gonna call this main function where we'll play and I'll explain how this kind of flows in just a second because it's really nice okay so if event dot type equals equals PI game dot all capitals key down so if they hit any key then what we're gonna do is we're gonna say main like that okay and I believe that is about it okay yeah so let's see here pi game dot display dot quit looks correct okay so the way this is gonna work pretty much is when we run the game we start by running main menu so we run main menu and then we could go into this main loop where all its gonna do is just say press any key to play and that's gonna be drawn in the middle of the screen once that happens we're gonna check if they're hitting any key if they hit any key we're gonna call main in which case sir let me close this so it's easier to see if we hit main then we go into the main game loop and we go and we do this loop until eventually we lose once we lose it displays you lost on the screen makes this loop equal to false which means it brings us back into this main menu loop and we can play again by hitting any key pretty straightforward okay so let's test this out to make sure this is working draw text missing one potential argument color ah because I didn't give a surface my bad so let's just do win and there we go okay so press any key to play press space missing one protect mate okay sorry guys and this is why we test our perfect okay win and now let's try there we go and now we're playing it shows the score and you guys can mess around it I haven't actually tested the score so I'll just do this really quickly and see if I can clear row without having to fast forward which we may be able to do not use it okay let's see there you go and score is equal to 10 so the score systems working as well and that's relief because I hadn't even tested that before I put this in the video okay perfect oh when you press the X brings you to press any key to play you press it again you can do that so if we wanted to change it so when you hit the X key and the main thing and you want to close the game then in the main loop here sorry what are you gonna do is sort of saying run equals false just to high game display dot quit so you can do both you and say run equals false and then you can quit the display as well okay so what's next so I said we were going to save the score and potentially display that so if we want to save the score we're gonna have to do something when we lose so we're gonna have to update like the current score and we're gonna use a text file to do this so that you can play multiple times so what I'm gonna do now say new file just create a new text file and it's gonna call this scores dot txt okay and here I'm just gonna put a zero as a default value it's really important you put a default value to start otherwise you might run into some issues so just create a new text file make sure it's in your directory with the main with the script okay now what I'm gonna do is I'm gonna create another function doesn't really matter where it goes so I'm gonna say define update underscore score and we're gonna give it to score okay now in here what I'm gonna do is I'm gonna say with open and this is how we're gonna open our text file and it's like update and display with open scores text in our so in read mode and this action needs to be in quotation marks as well we are going to say F yeah I have to do this as F sorry I say F dot read lines like this okay and that'll be equal to lines is equal to F dot read lines so that means our score is going to be well the first line so score is equal to lines zero and we're gonna add this dot strip so that we remove any like backslash ends because if you don't know in a text file when you hit the next line the way that it actually tracks that you have another line is it puts a character that looks like this on the line it's invisible to you in the text file when you're viewing it but when you read it in with code you actually read in this character we just want to make sure we strip that off in case it is there I'm gonna say square equals this and then we'll just say okay so we've done that and since we're topping out now at all it's gonna automatically close our file what we're gonna do now is we are going to open the file again except in this time we're going to open it right mode which means we're gonna overwrite whatever is in the file and we're simply gonna say if score is I guess I'm gonna change this to end score standing for new score if score is greater than n score then we'll say F dot and we'll say write lines actually right I think and we'll simply put in STR of score which is this updated score otherwise so if that's not true we just have to write back the other score because we're clearing it when we open this with W mode okay so rinse it F dot right and then sorry this is gonna be what am i doing N and score yeah sorry so I kind of messed up in this way it should be the other way around but whatever we're just checking if the original score is greater than the new score if it is we'll write the original score otherwise we'll write the new score so this works still it just not the way that I was thinking about it when I was kind of talking about that okay so update score should work and then you know you can actually returned let's just return actually a naught we don't need to return anything so I haven't prewritten this yet so I'm kind of still just going through how I want it to work okay what we'll do here after we start round equal to false we'll say update score and we'll give it whatever the current score is and then this should be working in the scores dot txt file so let's run this I'll fast forward through and make sure things working okay so we got here not support it between instance of string and int okay so if score greater than end stress which mean we have to convert the student int so if we go back up to score and where did I make this okay score is going to be int score like that okay and that's hopefully work because score comes in as an int and we'll run it one more time one more fast forward sorry without guys okay and another issue lines zero Linda list index range okay I'm gonna have a look at this and come back okay so this code is actually working just fine the issue was that since the last time when I crashed we didn't end up writing anything into the file so we had a blank file and then we were going lines to zero where is it here and obviously there was no line 0 so that crashed but if you just add any numbers so if I add 0 back in here two squares dot txt and save it then this works fine okay so that's it for saving scores now we need to display those saved scores so I'm kind of gonna leave this up to you guys where you want to display it I don't really know where I want to put my saved score like high score maybe on the left side of the screen doesn't really matter so if I want to draw it on the left side of the screen then I can do something like we're gonna have to first get this max score right so I'm gonna have to make a new function called define max score or last score or whatever you want to call it and if you call max score what we're gonna do is we're just gonna do the exact same thing we did here so we can say it with open square set text score 0 epsilon 0 dot strip accepting this time we're gonna return score like that okay now we actually do here to is we could just simply replace this whole line with max score and just say score equals max score be the efficient way to do it and I mean feel free to do that if you want or leave it the other way okay so now we have something that's getting us max score so how we gonna use this well when we call main I guess when we call me or we can call main menu does it like you guys if you want to draw it in the main menu can do that otherwise draw it in the main to draw it in the main all you're gonna do is gonna say like last score is equal to u max score which is gonna be whatever is stored in that text file and then to draw this well we're gonna have to pass this again into when we're redrawing window so in draw window I'm just gonna say last score we can go up to draw window again say last underscore score equal to zero and you're pretty much it gonna copy exactly what we have here with this font and the split so let me just comment this and say this is current score just so I could remember you know how to comment and say loss score or high score whatever you want to say here and then we can just say score and we actually get rid of this font because we already defined it we'll say high score equals and in this case last underscore score okay draw that to the screen this is probably not where you want to draw it you probably want to draw it top left X minus like some value minus 30 top left Y maybe plus I don't know like 300 or something so now we can see where this is actually gonna draw if we check this out so let's run this press any key so it's not obviously showing up where we want to so we have to subtract more from this so let's subtract like I don't know 100 and then this was plus too much let's do plus 200 and high score so again like you got to move it over more so we'll move over 200 this time and hopefully this works okay so high score zero scores here and that's obviously because at the current moment we have no our score is just zero in that text file okay so I think that is pretty much it for this video if you guys have any questions any errors anything that I did in this video that you weren't sure about leave a comment down below we'll be sure to get back to you
