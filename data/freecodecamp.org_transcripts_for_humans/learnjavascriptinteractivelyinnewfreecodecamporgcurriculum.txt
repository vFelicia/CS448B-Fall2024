With timestamps:

00:00 - hello uh we're here on the free camp.org
00:02 - YouTube channel and we're about to
00:03 - introduce a new JavaScript curriculum
00:06 - from the from freec camp.org and I'm
00:08 - here with Jessica Wilkins who's going to
00:10 - be talking about it so Jessica could you
00:13 - start off by talking a little bit about
00:15 - yourself and your role at free camp and
00:17 - spe specifically Your Role with this
00:19 - JavaScript
00:21 - curriculum sure yeah so I'm Jessica
00:24 - Wilkins I'm a software developer based
00:25 - out of Los Angeles California work
00:27 - full-time now with Freo camp on the
00:29 - curricul development team and so we just
00:32 - launched the all new JavaScript Project
00:34 - based curriculum there so you're going
00:36 - to learn JavaScript by building projects
00:38 - and so we have some really cool projects
00:40 - that we've put together for you guys to
00:41 - learn and I've been with freeo Camp
00:44 - full-time since August of this year but
00:47 - I've been working uh with Freo Camp as a
00:49 - part-time and contributor for a few
00:52 - years now I think since like 20120 wow
00:54 - it's been a while uh but yeah that's a
00:56 - little like introduction about me okay
01:00 - yeah great so maybe you can talk even
01:03 - more about this uh JavaScript curriculum
01:05 - and what ex what is it like for for
01:07 - Learners going through
01:09 - it yeah yeah so for those of you who are
01:12 - familiar with the uh older version of
01:14 - the curriculum you learned JavaScript by
01:16 - building are you going through
01:18 - interactive challenges um but this
01:20 - curriculum is different because you're
01:21 - going to be learning JavaScript by
01:22 - building actual projects so the first
01:24 - project you're going to build is a role
01:25 - playing game and you're going to learn
01:26 - how to work with the Dom and you're
01:28 - going to learn uh the basics of
01:29 - JavaScript like working with arrays and
01:31 - objects and variables and IFL statements
01:33 - and functions and all of that and so you
01:35 - start from scratch building out a little
01:36 - bit of HTML a little bit of CSS and then
01:39 - you dive straight into the JavaScript so
01:41 - you learn how all three of those
01:42 - languages work together to build
01:44 - interactive web applications and so you
01:47 - start with that and then you keep
01:48 - building off of your knowledge you start
01:50 - learning about event listers you start
01:51 - learning about object oriented
01:52 - programming by building a platformer
01:54 - game and a dice game learning about
01:56 - algorithmic thinking there's so many
01:58 - cool things there's a lot of games
02:00 - actually in this one that I realized
02:02 - like we have a lot of games but games
02:03 - are actually really cool because there's
02:05 - so much logic behind games and there's
02:07 - so many different things you have to
02:08 - think about in terms of uh different
02:10 - scenarios that the user has to go
02:12 - through um and so I think the uh learner
02:15 - is going to have a great time just uh
02:17 - solidifying their JavaScript knowledge
02:19 - uh by going through this interactive
02:21 - Project based curriculum oh yeah it
02:23 - sounds very comprehensive like who's the
02:27 - target audience for this course who who
02:29 - you who do you think will benefit the
02:30 - most from
02:31 - it yeah so this course is intended for
02:34 - the absolute beginner so you don't have
02:36 - to have any prior programming knowledge
02:37 - or any prior knowledge of JavaScript U
02:40 - so this assumes that you have zero
02:42 - knowledge you coming from the responsive
02:44 - web design certification or maybe you
02:45 - have some brief exposure to HTML and CSS
02:48 - but we're really just going to dive
02:49 - straight into JavaScript and so you can
02:51 - see how HTML CSS and JavaScript work
02:54 - together um so only the first two
02:56 - projects will we cover a little bit of
02:57 - HTML and CSS have you write out some of
02:59 - of the steps um and then the rest of the
03:02 - projects will just Supply the HTML CSS
03:04 - for you so you can just jump straight
03:05 - into the the JavaScript and it just
03:07 - assumes that you're an absolute beginner
03:09 - you don't have to have any prior
03:11 - programming knowledge or exposure to to
03:13 - JavaScript to enjoy this
03:15 - course okay great and I assume that this
03:18 - was a a team effort to develop this
03:22 - curriculum yeah yeah it definitely took
03:24 - a lot of Us coming together it's been um
03:27 - actually maybe I think at this point
03:29 - almost years into the making from like
03:31 - just conceptualizing and building out
03:33 - the practice projects and kind of going
03:34 - back and forth of what we wanted to
03:36 - teach and which Concepts and where each
03:38 - project was going to go and and building
03:40 - out all the prototypes so we started off
03:42 - with that a lot of discussions and
03:43 - building out prototypes sharing ideas
03:45 - reviewing each other's work and then
03:47 - once we kind of solidified on those
03:48 - prototypes then we started breaking them
03:50 - down into steps and tests um and then
03:53 - just going through the flow and making
03:54 - sure all the projects work together as a
03:56 - nice like cohesive curriculum there m
03:59 - mhm well sounds pretty great so what are
04:03 - viewers going to see in this video
04:05 - here yeah so the purpose of this video
04:07 - is just give a sneak peek of each of the
04:10 - projects and so we'll start with the
04:11 - very first one which is a role playing
04:13 - game and it will just be me just kind of
04:15 - walking through the final preview
04:17 - project of what people are going to
04:18 - build and then we jump into the next
04:20 - project which is a calorie counter and
04:22 - do the same thing where we show the
04:24 - final preview of what people are going
04:25 - to build and then we keep going from
04:27 - there so the next one after that is an
04:28 - interactive music player project and
04:31 - then we have uh more projects along the
04:33 - way and then I'll also show them uh what
04:35 - they'll be building for the
04:36 - certification projects um and the we
04:38 - still have five certification projects
04:40 - just like the other uh certifications of
04:42 - free Coca but these are also going to
04:44 - have all new uis and so people uh
04:47 - Learners will get uh a lot of experience
04:50 - just building out HTML CSS and
04:52 - JavaScript so they can see how all three
04:54 - of that uh comes together there and so
04:56 - that's the whole thing is just to kind
04:57 - of give a sneak peek on like what
04:59 - they're going going to be building so
05:00 - we're not really going to be like coding
05:01 - along per se but we'll just dive
05:03 - straight into the curriculum just to
05:05 - show them like the final previews of
05:07 - each of the project just to get people
05:08 - really excited about what they're going
05:10 - to be able to
05:12 - build well that sounds great so let's
05:15 - let's get on to the the rest of the
05:16 - video
05:20 - here all right so here we are at the
05:23 - very first project of the allnew
05:24 - JavaScript curriculum so make sure you
05:26 - head over to freeco
05:28 - camp.org learn to see this brand new
05:31 - curriculum so the very first project we
05:33 - have is a role playing game this is
05:35 - where you're going to learn the basics
05:36 - of JavaScript and also just the basics
05:39 - of programming in general so learning
05:40 - how to work with functions and variables
05:42 - and IFL statements and loops and so much
05:44 - more so let's go ahead and start the
05:46 - project and this is what you're actually
05:48 - going to build it's a role playing game
05:50 - called Dragon repeller it so you can
05:54 - make certain decisions in the game like
05:55 - going to the store you can buy some
05:58 - health right here and you can see that
06:00 - it updates up here using JavaScript you
06:03 - can buy a weapon it will show you which
06:05 - weapons you have um and then if you
06:07 - don't have enough money to buy something
06:09 - then it will also show you that and so
06:11 - this is what is known as a condition and
06:12 - you're going to learn how to do that in
06:14 - JavaScript in this project and then you
06:16 - can go back you can fight a dragon and
06:19 - so you can learn how to dynamically hide
06:22 - and show HTML elements using JavaScript
06:26 - and let's see we're attacking it and
06:29 - unfortunately we didn't win we died so
06:31 - we could repl replay the game reset it
06:33 - and start all over again and so you can
06:35 - play for multiple rounds right there
06:36 - there's also a hidden secret Easter egg
06:38 - inside here and an additional game that
06:40 - you can play and so that's just a little
06:43 - preview of what you're going to be
06:44 - building for this very first project and
06:46 - so for step one you're actually going to
06:48 - start off with a complete Blank Slate as
06:50 - you can see here you're going to start
06:51 - with the HTML boilerplate code and build
06:54 - out the basic HTML structure then you're
06:57 - going to move into the CSS for styling
07:00 - then you're actually going to jump into
07:02 - the JavaScript which is around step 15
07:05 - or so and so this helps you understand
07:07 - how HTML CSS and JavaScript work
07:11 - together to build interactive web
07:13 - applications right there so that's why
07:15 - we started off with just a complete
07:17 - Blank Slate so you can connect all three
07:19 - of those languages together right there
07:21 - and so the great thing about this
07:22 - project is that there's tons of steps
07:25 - right here so this is the largest
07:26 - project that we have however that's
07:28 - actually really good thing because when
07:30 - you're learning programming you want to
07:32 - have tons of repetition in order for the
07:34 - concepts to actually stick and to feel
07:37 - comfortable executing on these Concepts
07:39 - right here so here's a sneak peek of the
07:41 - code that you're going to be writing in
07:43 - this first project right here and so
07:45 - you're going to have tons of practice
07:46 - learning how to work with objects and
07:48 - arrays and loops and variables and
07:50 - functions and so much more and you're
07:51 - going to have practice just constantly
07:53 - writing that out and that will able to
07:55 - enable you excuse me to actually feel
07:58 - more comfortable executing on these
08:00 - Concepts cuz one of the common things
08:02 - when people are First Learning is they
08:04 - learn a concept they practice it once
08:06 - and then they forget about it with this
08:08 - project and all of the projects in the
08:09 - curriculum you're constantly practicing
08:12 - you're constantly repeating yourself
08:14 - just so it really sticks with you in
08:16 - that muscle memory right there so that
08:18 - wraps it up for this very first project
08:20 - on learning basic JavaScript by building
08:23 - a role playing
08:28 - game so for the second project in the
08:31 - JavaScript curriculum is going to be the
08:33 - calorie counter project and in this
08:35 - project you're going to learn the basics
08:37 - of form validation and so often times
08:40 - when you're building out interactive web
08:42 - applications you are going to be dealing
08:43 - with some sort of user input and so this
08:46 - is a gentle introduction on how do you
08:48 - process that user input right there and
08:51 - so let's take a look at the project and
08:54 - so this is what you're actually going to
08:55 - be building so you can set a daily calor
08:59 - budget so let's just say I don't know
09:01 - 2,000 maybe and then here you have
09:04 - different fields for breakfast lunch
09:05 - dinner snacks and exercise and so what
09:08 - you could do is you can select which uh
09:11 - inputs you want so let's say I don't
09:13 - know I want to start with lunch and add
09:14 - an entry then that will uh show me the
09:17 - inputs and then I can add let's say a
09:20 - sandwich I have no clue I'll just put
09:22 - 200 and you can add as many entries as
09:25 - you like so let's say maybe a breakfast
09:26 - one and eggs
09:29 - I don't know how many calories I'm
09:31 - totally making up these numbers but you
09:32 - get the point there so you can add as
09:34 - many entries as you would like right
09:36 - there so we got chips uh 120 and then
09:41 - once you're done you can calculate the
09:44 - remaining calories and scroll down and
09:46 - it will take that daily amount that you
09:48 - entered at the beginning and do some
09:50 - basic Cal calculations there and you can
09:52 - see either you have a surplus or a
09:54 - deficit right there and then how many
09:56 - calories you've consumed and budgeted
09:58 - and burned and all that that fun stuff
09:59 - right there so you're going to learn how
10:01 - to do all of this stuff in this second
10:04 - project right here and so similar to the
10:07 - first project uh you are going to be
10:10 - writing a little bit of HTML in CSS it's
10:12 - we give you most of the HTML in CSS and
10:14 - then you're going to start by adding the
10:16 - form element um and then you're going to
10:19 - jump into the JavaScript right there and
10:21 - learn how to deal with user input how
10:24 - can you tell if a user input is valid or
10:26 - not what do you do in those situations
10:28 - how do you communicate that to the user
10:30 - Etc so this is a really cool project
10:32 - there um that will build off of your
10:34 - knowledge from the previous project and
10:35 - introduce some new Concepts uh that you
10:38 - can use in your own interactive
10:40 - JavaScript applications so that wraps it
10:42 - up for this intro to the second project
10:45 - where you learn form validation by
10:47 - building a calorie
10:53 - counter so for the very third project in
10:56 - the curriculum you're going to build
10:57 - your very own music player so I think
11:01 - this is a really cool project because
11:02 - there's so many new JavaScript Concepts
11:05 - that you're going to be learning and
11:06 - building from and so let's take a look
11:08 - at this and so you're going to build
11:10 - your very own music player and the
11:12 - playlist features the songs by none
11:14 - other than Quincy Larson so these are
11:16 - all of his original songs that he wrote
11:18 - and performed himself and has lent his
11:21 - songs over to this project so it's
11:24 - really cool because you can play for the
11:26 - very beginning and it will highlight the
11:29 - correct song that's actually playing
11:31 - you'll be able to pause the song and you
11:34 - can notice here that we have these
11:35 - yellow indicators to show if we're
11:37 - playing or pausing or if we are starting
11:40 - over if we're going to the next one
11:42 - right there you can also see that it
11:45 - correctly updates uh the song title
11:48 - right here as well as the visual
11:50 - indicator updates every single time we
11:52 - move to a new song so you're going to
11:54 - learn how to do that using JavaScript
11:58 - you can also shuffle through the
11:59 - different songs right here and so if we
12:02 - press this a few times you can see that
12:04 - the songs are correctly updating and
12:06 - shuffling around you can also remove
12:09 - songs from a playlist with this little
12:11 - red icon uh this delete icon so if we
12:14 - delete oops all the songs right here
12:17 - then you have an option to actually
12:19 - reset the playlist and when you do that
12:21 - then it just populates the playlist with
12:23 - the original songs so it's it's a really
12:25 - cool project and you're going to learn a
12:27 - ton by building this out so from this
12:30 - point forward you're no longer going to
12:33 - need to write out the HTML and CSS um
12:35 - for these projects all that's just going
12:37 - to be provided for you because we're
12:38 - going to dive straight into the
12:40 - JavaScript and so I hope you really
12:42 - enjoy this project you learn a lot from
12:44 - it and then maybe you can build from
12:47 - there and add new features and kind of
12:49 - make it your own little music player but
12:51 - that wraps it up for this introduction
12:53 - into the third project of the all new
12:56 - JavaScript
12:57 - curriculum
13:02 - so the next project you are going to
13:04 - learn how to work with the date object
13:07 - in JavaScript by building a date
13:09 - formatter so dates notoriously could be
13:12 - a little bit tricky especially in
13:14 - production level apps and you're dealing
13:16 - with time zones and so it's still really
13:18 - important though to learn the basics of
13:21 - working with javascript's date object
13:24 - and this particular object has different
13:26 - properties on it like getting the month
13:27 - and the year in hours and seconds and so
13:30 - we're going to learn how to format
13:32 - different dates using JavaScript so this
13:35 - is a preview of what we're going to be
13:37 - building here and so by default it's
13:40 - going to show you the date format um the
13:43 - current date here which is the 17th it's
13:45 - December 17th
13:47 - 2023 right there so day month year but
13:50 - then if we want to change the format to
13:52 - year month day then it will just update
13:56 - that particular format or we can change
13:58 - it and show the month day year hours and
14:01 - minutes and it will show you that format
14:05 - as well so you can kind of just toggle
14:07 - between these different options right
14:10 - here and um you're going to learn how to
14:12 - do that so this is a shorter project
14:14 - compared to the first three that we
14:16 - looked at but it's still a really good
14:18 - introduction and how to work with the
14:21 - date object and as I mentioned earlier
14:24 - all the HTML and CSS will be provided
14:26 - for you in this project so you can just
14:27 - jump straight in to the JavaScript and
14:30 - that wraps it up for this intro for the
14:32 - date formatter
14:38 - project so the next project we're going
14:40 - to take a look at is the palindrome
14:43 - Checker and this is actually the first
14:45 - certification project that we have seen
14:47 - so far in the curriculum so the first
14:49 - four projects were actually the practice
14:51 - projects and that's where you were LED
14:53 - step by step and learned new JavaScript
14:56 - Concepts but the certification projects
14:59 - right there you're building from scratch
15:01 - and you're actually going to be given a
15:03 - set of user stories that your project
15:06 - needs to include and be able to pass all
15:09 - of these tests right here um in order to
15:12 - collect the certification so there's a
15:14 - total of five certification projects and
15:16 - this is the first one we're taking a
15:17 - look at now in terms of building this
15:20 - out before we take a look at what we're
15:21 - building where should you build it you
15:24 - can either build it out inside the freeo
15:26 - camp editor or you can build it out
15:27 - locally if you have experience working
15:29 - with something like Visual Studio code
15:31 - or sublime or brackets or atom or
15:33 - webstorm or whatever so if you want to
15:35 - build it out locally that's totally cool
15:37 - as long as you just copy and paste your
15:39 - solution in here and then you're able to
15:42 - pass all of the tests right here so
15:44 - let's take a look at what we're actually
15:46 - going to be building so this is the demo
15:48 - project right here and so a palindrome
15:52 - is a word that could be spelled the same
15:55 - front and back so an example of this
15:57 - would be the word I e ye because it's
16:00 - spelled the same forwards and backwards
16:03 - so the main functionality that you need
16:05 - to implement in the certification
16:06 - project is if a user doesn't Supply any
16:09 - input and just clicks on this check
16:11 - button then an alert should show up and
16:13 - say hey you need to supply something the
16:16 - other thing is we need to be able to
16:18 - determine if a word is a palindrome and
16:21 - so they should be able to enter into a
16:23 - word and then check if it is in fact a
16:26 - palindrome and Supply that correct
16:29 - result and if it's not a palindrome like
16:31 - my name well then it should also
16:34 - correctly get that it's not a palindrome
16:36 - and so that's the main functionality for
16:39 - this certification project so a quick
16:42 - note about the Styles here a lot of
16:43 - people think that they have to copy the
16:46 - Styles exactly for all these
16:47 - certification projects and that's
16:49 - actually not true it's encouraged that
16:51 - you use your own styling so this is just
16:53 - the styling that the freeo camp team
16:55 - went with but you can style this however
16:56 - you want to the main thing is the the
16:58 - JavaScript functionality has to be there
17:01 - and so don't worry about styling if
17:03 - you're just like I don't want to use
17:04 - these Styles that's totally fine this is
17:05 - just the demo project you can use
17:07 - whatever Styles you want to as long as
17:08 - you have the core functionality that we
17:10 - just talked about right there that is
17:12 - what is required to pass the uh
17:15 - certification right there so that wraps
17:17 - it up for this project and we'll take a
17:19 - look at the next
17:25 - one for this next project we are going
17:28 - to build build out a set of football
17:30 - team cards so this project is going to
17:33 - cover Concepts like working with object
17:35 - D structuring object. freeze the map
17:38 - method and so much more so let's take a
17:41 - look at what the final project is going
17:44 - to look like so here we have some team
17:47 - stats and we have Team Argentina uh
17:50 - football or American soccer um the year
17:53 - 1986 and then the head coach right here
17:56 - and then we have a list of the players
17:58 - for that respective team and so what
18:01 - you're going to learn how to do the
18:02 - functionality where that comes in is
18:04 - actually this drop down menu so you can
18:06 - filter through the players based off of
18:09 - their nicknames or the position that
18:10 - they play on the team so if we just want
18:12 - to see players that actually have
18:13 - nicknames there then it will filter
18:16 - through that list and filter out the
18:17 - ones that don't have nicknames and only
18:19 - show the ones that do you could also
18:21 - filter by position
18:23 - forward and you can filter by position
18:27 - midfielder and
18:29 - Defender and then also uh goalkeeper
18:32 - right there and so you can just kind of
18:34 - keep filtering through all of these and
18:37 - just dynamically update the list
18:39 - depending on what you want to see and
18:42 - then you can go back to looking at all
18:44 - of the different players and so that's
18:45 - the JavaScript functionality that we are
18:47 - going to be focused on right there so
18:49 - this is a great project to kind of
18:51 - practice more working with objects and
18:53 - then how to get information from those
18:55 - objects and then also to filter through
18:58 - the the objects and dynamically display
19:01 - the different player cards on the screen
19:04 - so that wraps it up for this intro and
19:06 - then we're going to jump into the very
19:07 - next
19:12 - project so for this next project you are
19:15 - going to learn how to work with local
19:17 - storage by building a to-do application
19:20 - so local storage is a feature provided
19:23 - by the browser where you can save data
19:25 - in the browser and you can leave your
19:28 - web application and come back to it and
19:31 - that data will still be saved in there
19:33 - so you're going to learn how to work
19:34 - with the get and set methods for local
19:37 - storage and you're going to learn that
19:38 - by building a to-do application and
19:40 - to-do applications are great uh when
19:42 - you're first learning because you're
19:43 - going to learn the basics of crud
19:45 - operations and crud stands for create
19:48 - read update and delete there so let's
19:51 - take a look at the
19:54 - project so it starts off as just a blank
19:57 - slate we haven't added anything yet I
19:59 - can add a new task and just say
20:02 - recording a video I can add a date if I
20:06 - want to so here's today's date and then
20:09 - I can say something like recording a
20:12 - video today cool add task and then it
20:16 - will just save that inside the list of
20:19 - task so I have the option to edit and if
20:23 - I want to say recording an awesome video
20:28 - right now to show my excitement I can
20:31 - update that task and then it will
20:33 - actually update that um like so you can
20:36 - also delete tasks you can add multiple
20:38 - tasks and we've also have this feature
20:41 - where let's say I'm adding a task and
20:43 - then I change my mind and if I click the
20:46 - X out where there's data here it will
20:49 - ask me hey are you sure do you want to
20:51 - change uh remove this because you're
20:53 - going to lose your changes and then you
20:55 - can prompt it and say yes I'm totally
20:57 - sure
20:58 - um and so this is great and and one of
21:00 - the things here is that if I try to
21:01 - refresh the page then it will show the
21:04 - local storage that I was talking about
21:06 - where even though I did a manual refresh
21:08 - right there it still had my original
21:11 - data and so that is the local storage
21:14 - portion that I was talking about earlier
21:16 - where you can actually manually leave or
21:18 - refresh the page and come back and it's
21:20 - saved in your local storage so you're
21:21 - going to see what all of that is about
21:24 - so that's an introduction into this
21:27 - project on learning local storage by
21:29 - building a to-do
21:35 - application for this next project you
21:37 - are going to learn all about recursion
21:40 - by building out a decimal to Binary
21:42 - converter so recursion is often one of
21:45 - those topics that could be really
21:47 - confusing at first and it took me a
21:49 - really long time to kind of wrap my head
21:51 - around it because often times people
21:52 - refer to it as a function that calls
21:55 - itself and until you really understand
21:57 - what's happening with the call stack
21:59 - sometimes it's just really confusing but
22:01 - this is a popular technique used to
22:03 - break down a larger complex problem and
22:06 - break it down into smaller sub problems
22:08 - so you can solve it and so we're going
22:10 - to teach recursion by building out a
22:13 - decimal to Binary converter and so the
22:15 - decimal number system base 10 0-9
22:19 - numbers is probably the one that you're
22:20 - most familiar with but then we also have
22:22 - the binary number system which is a base
22:25 - 2 system made up of zeros and ones and
22:28 - this project goes into a little bit more
22:30 - detail on the different number systems
22:32 - as you're building out this project so
22:34 - let's take a look at the project itself
22:37 - so here if you don't provide anything
22:40 - then an alert shows up and says hey I'm
22:42 - expecting a decimal number so if I
22:44 - actually provided a number like 10 and
22:47 - convert it it's going to convert it into
22:49 - the binary representation of the decimal
22:52 - 10 so in order to see the animation here
22:56 - we actually have to test this out with
22:58 - the number five and what we've done here
23:00 - is to try to illustrate what's happening
23:02 - within the call STC when you're working
23:04 - with um recursion so I'm going to click
23:06 - on the convert
23:08 - number and it's meant to represent the
23:11 - what's happening on your call stack here
23:13 - and we're going to go into more detail
23:15 - when you actually go through this
23:17 - project what all of this text is
23:19 - actually meaning here but we wanted to
23:20 - create an animation to kind of
23:23 - illustrate what's happening when you're
23:25 - writing recursive functions and
23:28 - illustrate that on the call stack so
23:31 - that's the main purpose behind this
23:34 - particular project is to learn the
23:36 - basics of recursion and build out a
23:38 - small little animation uh to just better
23:41 - illustrate how recursion works with the
23:44 - call stack and that wraps it up for this
23:46 - introduction and we'll jump into the
23:48 - next
23:53 - project so for this next project you are
23:56 - going to build out a Roman numeral
23:58 - converter and this is actually the
24:00 - second certification project in the
24:03 - curriculum and so similar to the first
24:05 - one here you're going to be given a set
24:07 - of directions a complete Blank Slate so
24:10 - for this Roman numeral it gives you a
24:12 - quick chart here between uh popular
24:14 - Roman numerals and the Arabic numerals
24:17 - on the side right here and your job is
24:20 - that a user should be able to input um
24:23 - an Arabic uh numeral and then you
24:25 - convert it to a Roman numeral so that's
24:27 - the whole purpose of this certification
24:29 - project and there's a whole list of user
24:31 - stories that we have right here and you
24:33 - have to make sure to implement all 11
24:36 - and run the test and make sure that
24:37 - every single test is passing and then
24:40 - it's encouraged to give your own style
24:42 - so let's take a look at the demo project
24:44 - right here and so if you try to convert
24:48 - nothing it will say please enter an
24:50 - actual number we're using the number
24:52 - input here which has some basic
24:53 - validation as well so if I input the
24:56 - number 12 and convert it then it will
24:58 - convert it to a Roman numeral and if I
25:02 - do something like the number four then
25:05 - it will keep converting it and because
25:07 - we're using the number input then I
25:09 - can't input just regular um you know
25:12 - letters like my name or something like
25:14 - that because obviously that's not going
25:15 - to translate over to a Roman numeral and
25:17 - so that's the whole purpose of this
25:19 - project right here and so you have to
25:21 - design an algorithm that takes in a
25:24 - decimal number there and then converts
25:26 - it over to a Roman numeral and outputs
25:29 - it and again just like the other project
25:32 - in terms of The Styling you don't need
25:33 - to copy the styling you can use your own
25:35 - Styles it's actually encouraged for you
25:37 - to use your own Styles the main thing is
25:38 - that you have to have the functionality
25:41 - so we should be able to input a number
25:43 - and it outputs the correct Roman numeral
25:46 - so you have to design the correct
25:47 - algorithm for that and that wraps it up
25:50 - for this introduction into the Roman
25:52 - numeral
25:56 - converter
25:58 - for this next project we are going to
26:00 - learn the basics of algorithmic thinking
26:02 - and different sorting algorithms by
26:04 - building out a number sorter so in
26:07 - computer science there's a few popular
26:09 - sorting algorithms that you can use to
26:11 - sort a list of numbers and so some of
26:14 - these would include bubble sort or
26:16 - insertion sort selection sort quick sort
26:18 - and so many more so it's really
26:20 - important to start learning basic data
26:24 - structures and algorithms um to help you
26:27 - build your programs as well as being
26:30 - prepared for technical interviews when
26:32 - you get ready to apply for a job and so
26:35 - this first uh project right here on
26:37 - algorithmic thinking is going to
26:39 - introduce you to some popular sorting
26:42 - algorithms that you will run into in
26:44 - your typical intro to computer science
26:46 - class so let's take a look at the actual
26:48 - project right here and so we have a few
26:51 - different inputs of random numbers here
26:53 - and we can change uh the different
26:56 - numbers and sort them in whatever order
26:58 - we want to and when we click on the sort
27:00 - method then it will just sort it from
27:02 - smallest to largest and we can keep just
27:05 - randomly uh sorting everything and then
27:08 - it will just update right here but the
27:11 - main part for this project is that
27:13 - you're going to focus on three different
27:16 - popular sorting algorithms so the first
27:18 - one is the bubble sort algorithm and
27:20 - then you're also going to learn about
27:22 - selection sort and insertion sort so
27:25 - you're going to build out all of these
27:26 - algorithms by hand to learn how each one
27:30 - works and compare each of them and
27:32 - sorting a list of numbers from smallest
27:34 - to largest so that wraps it up for this
27:37 - introduction and I'll catch you in the
27:39 - next
27:44 - video for this next project you are
27:46 - going to learn how to work with more
27:49 - intermediate and advanced JavaScript
27:51 - methods by building out a statistics
27:53 - calculator so some of these important
27:55 - methods that you're going to be working
27:57 - with in this project are going to be the
27:59 - map and filter and reduce method in
28:02 - JavaScript so you're going to get tons
28:03 - of practice working with these different
28:05 - higher order functions and so in this
28:08 - project you're going to build out a
28:09 - statistics calculator and you're going
28:11 - to be working with different
28:12 - calculations to calculate the mode and
28:15 - the median and the variance and so much
28:17 - more and the project will go into depth
28:19 - on how to do all of that so let's take a
28:21 - look at the actual project so this is
28:25 - the final project uh that you're going
28:27 - to build out so it just gives a brief
28:29 - introduction into what all of these uh
28:32 - different calculations that you're going
28:33 - to be working with like the what a mean
28:34 - is and a median and a variance and all
28:36 - of that stuff uh but basically what
28:38 - you're going to be doing is you can
28:40 - enter in a list of numbers and calculate
28:45 - that and it will calculate the different
28:47 - you know the mean the median the mode
28:50 - range variance and standard deviation
28:54 - and so you can list in whatever numbers
28:56 - that you want want to right there and so
28:58 - if I start to change it up and let's see
29:02 - let's do a different list of numbers
29:04 - then it will update those different
29:06 - calculations right there and so this is
29:08 - a really good project to kind of wrap
29:11 - your head around more advanced U methods
29:13 - especially the reduced method I think
29:15 - for a lot of people when they're first
29:16 - being introduced to the reduced method
29:19 - sometimes they understand the basis
29:20 - basics of it but uh working a little bit
29:23 - more with it and understanding how all
29:25 - that works in combination with like map
29:27 - filter and other different methods it's
29:28 - really important to kind of wrap your
29:30 - head around some of these higher order
29:31 - functions and how you can use them
29:33 - within your program and so that's the
29:36 - whole purpose of this statistics
29:38 - calculator so that wraps it up for this
29:40 - introduction and I will see you in the
29:42 - next
29:46 - video for this next project we are going
29:49 - to learn about functional programming by
29:51 - building a spreadsheet application and
29:54 - so functional programming is an approach
29:56 - in software development where you
29:58 - organize your code by breaking it down
30:00 - into smaller functions and this approach
30:02 - is meant to help you build out more
30:05 - complex applications so it's just a
30:07 - different way of approaching than
30:09 - designing and organizing your code and
30:12 - so we're going to build out a
30:14 - functioning spreadsheet application
30:16 - where you can do a variety of
30:17 - mathematical operations and we're going
30:19 - to walk you through how to interact
30:22 - within the spreadsheet and how to
30:24 - actually execute these uh expressions
30:27 - right here so let's go ahead and take a
30:29 - look so this is actually what the
30:31 - project looks like it's just a blank
30:32 - spreadsheet uh so imagine like you know
30:35 - Google spreadsheets and stuff like that
30:37 - uh but I've actually inputed a few
30:38 - numbers here just to illustrate a few of
30:40 - the calculations that you could do and
30:42 - so to make a calculation for any of
30:44 - these cells here you could start
30:47 - prefixing it with the uh equals sign and
30:50 - if we wanted to let's say add two
30:51 - numbers from a cell let's say we wanted
30:53 - to add A3 and uh B4 so we could do A3 +
31:00 - B4 and hit enter and then it will do the
31:03 - correct calculation I've also uh added a
31:06 - couple of functions right here so we can
31:09 - check if everything within a range
31:11 - between uh A2 and A5 if that is in fact
31:15 - um all even and so if we take a look no
31:18 - we do have number 15 which is odd so
31:21 - it's going to return false right there
31:23 - and so you can do uh these different
31:26 - calculations and we're going to walk
31:27 - through every single calculation through
31:29 - the step-by-step project when you're
31:31 - building it out there and you're going
31:33 - to learn how to make this uh spreadsheet
31:36 - interactive and so when it first starts
31:39 - then it's just going to give you the
31:41 - basic uh blank spreadsheet and the HTML
31:44 - and CSS and then it's your job to add
31:46 - all of that interactive portion using
31:49 - JavaScript all right so that wraps it up
31:51 - for this intro and I'll see you in the
31:53 - next
31:56 - project
31:58 - for this next project we are going to
32:01 - learn all about regular Expressions by
32:03 - building out a spam filter so regular
32:06 - expressions or reject for short are
32:08 - patterns that you can use to match and
32:10 - search for text so sometimes when you're
32:13 - learning regular Expressions it can be a
32:15 - little bit complicated because they're
32:16 - these weird funny symbols but with
32:19 - enough practice then you start to get a
32:21 - little bit more comfortable with regular
32:22 - expressions and the good news is there's
32:24 - tons of online tools like Rex 10 one to
32:27 - help you build out your regular
32:29 - Expressions so let's take a look at the
32:31 - project that you're going to build and
32:33 - so we're going to build out a spam
32:35 - filter so there's a list of phrases that
32:38 - you are going to need to check for using
32:41 - regular Expressions so some of the
32:42 - phrases are going to be like free money
32:45 - because no one offers up free money and
32:47 - it should spit out hey this is a spam
32:49 - message but if you say something like hi
32:51 - there well that's not necessarily a Spam
32:53 - message and so it should be able to
32:55 - check the text and say say this looks
32:57 - like spam or it doesn't now this is a
32:59 - very basic spam filter um but it's just
33:03 - meant to kind of introduce you into
33:05 - regular expressions and how to start to
33:08 - work with them for matching and
33:09 - searching text right there and so
33:11 - there's going to be a list of phrases
33:13 - that you're going to need to check and
33:15 - that wraps it up for this introduction
33:17 - into regular Expressions by building a
33:20 - spam
33:25 - filter for this next project you are
33:28 - going to learn how to build out a
33:30 - telephone validator and this is actually
33:33 - the third certification project in the
33:36 - curriculum and so this is a project
33:39 - where you're going to check for a valid
33:40 - United States phone number and it gives
33:42 - a few examples of valid entries but
33:45 - basically a United States phone number
33:47 - has the country code of one followed by
33:50 - a three-digit area code followed by a 7
33:53 - digigit phone number so some valid uh
33:56 - phone numbers can have dashes some will
33:58 - have parentheses like this some will
34:00 - have a mixture of parentheses and dashes
34:03 - some could just be numbers without the
34:05 - country code so all of these are
34:06 - examples of valid numbers and your job
34:10 - is to create a telephone validator where
34:12 - a user inputs a number and then the
34:15 - output should be this is a valid Us
34:17 - number or not so let's take a look at
34:20 - the uh demo project and again you don't
34:24 - need to build out this actual style this
34:26 - is just for the demo you could use
34:28 - whatever styles that you want to for the
34:29 - certification project but uh if you were
34:32 - to not input anything then you should
34:35 - have the functionality where it alerts
34:37 - the user to say hey you need to provide
34:39 - something so we can check it and inside
34:42 - this input here you can have uh so this
34:44 - is a valid United States number you can
34:46 - check it and it should return valid Us
34:49 - number followed by the input that the
34:51 - user provided but if I provide something
34:54 - like yeah my name obviously that is not
34:56 - not a valid United States number if I
34:59 - just put in just random numbers like
35:01 - this this is not a valid United States
35:04 - number so that is the basics of this um
35:07 - project right here is that you should be
35:10 - able to check whatever the user input
35:13 - and output whether it's a valid Us
35:15 - number or clearly not a valid number and
35:19 - you can also clear the input as well and
35:21 - and add new ones so that's the basic
35:23 - functionality that you have to build out
35:25 - for this certification
35:27 - project and that wraps it up for this
35:29 - introduction and I'll see you in the
35:31 - next
35:35 - project for this next project you are
35:38 - going to learn the basics of working
35:40 - with objectoriented programming by
35:42 - building a shopping cart project so
35:46 - objectoriented programming is a way that
35:47 - you can design your code and build it
35:49 - out using a series of objects and
35:51 - classes and so that differs from the
35:53 - functional programming style where you
35:55 - build out and design your project
35:56 - objects around smaller functions and so
35:59 - we're going to learn how to work with
36:01 - classes within the con uh context of
36:04 - JavaScript we're also going to learn to
36:06 - work with the this keyword as well as um
36:09 - so many other new Concepts in this
36:12 - project so let's go ahead and start the
36:15 - project and this is what you're going to
36:16 - build and so it's a little desserts page
36:19 - and you can add certain things to the
36:21 - cart uh so up here we have our little
36:23 - shopping cart which is empty so you can
36:25 - toggle that um on and off so you're
36:27 - going to learn how to do that with
36:29 - JavaScript if you want to add something
36:31 - like let's say a French
36:33 - macaroon then you can open the cart and
36:35 - you can see that it has been added with
36:37 - the correct price um and then it will
36:39 - show you the total number of items in
36:41 - your cart as well as the subtotal the
36:44 - tax and the total and so you're going to
36:46 - build out a class right here and have
36:49 - different methods for calculating the
36:51 - total and the taxes and all that fun
36:53 - stuff and if you want to clear out your
36:54 - cart then it will ask you or are you
36:56 - sure and if so then you can clear it out
36:59 - you can hide it again uh but you can add
37:01 - so many different things to your cart
37:03 - and it will update so we have four
37:05 - chocolate macaroons and then strawberry
37:07 - ice cream and if we do show cart then
37:09 - you can see that it shows the quantity
37:11 - of four as well as the ice cream and it
37:14 - does the correct calculations right here
37:17 - and so that's the basics of this project
37:19 - and it's in your first introduction into
37:21 - working with classes in the context of
37:23 - JavaScript right there and the this
37:25 - keyword and spread operator and so much
37:28 - more so that wraps it up for this
37:30 - introduction and I'll see you in the
37:32 - next
37:37 - project for this next project you're
37:39 - going to continue working and learning
37:41 - objectoriented programming by building a
37:44 - platformer game so this is a really cool
37:47 - game to uh just kind of solidify your
37:50 - knowledge of what you learned in the
37:51 - previous project with the shopping cart
37:53 - on how to work with objectoriented
37:55 - programming and classes in inside
37:57 - JavaScript so here I've uh pulled up the
38:01 - final step and if I show the preview
38:05 - here I just want to make sure that we
38:07 - have plenty of room to work with and so
38:09 - this is our platformer game and you are
38:11 - going to build this out so it has a
38:13 - little start screen right here and when
38:15 - we click on the start screen then we can
38:18 - use the keyboard controls and we can
38:20 - move our player we can jump up and down
38:22 - um so you're going to learn how to build
38:24 - out that functionality then you can jump
38:26 - on the different Platformers you're also
38:28 - going to learn how to build out this
38:31 - kind of uh moving giving us illusion
38:34 - right here that we're moving forward and
38:35 - backwards and whatnot you're going to
38:38 - learn how to build that out and then we
38:40 - also have these like yellow uh
38:43 - checkpoints and so when you hit a
38:45 - checkpoint then a little message pops up
38:47 - and says hey cool good for you and so
38:49 - you can kind of go throughout this
38:51 - platform game hitting the different
38:53 - checkpoints using your keyboard controls
38:56 - on your computer um and then once you
38:58 - reach the final checkpoint then uh the
39:01 - game is over and so this is a great way
39:04 - for you to kind of think about different
39:05 - types of algorithms like Collision
39:07 - detection algorithms and how to move
39:09 - throughout the game how to interact with
39:11 - the different platforms and whatnot um
39:13 - and what to do when a uh the player hits
39:16 - one of the checkpoints all of that fun
39:18 - stuff you're going to learn in this game
39:22 - and this is just going to help you
39:23 - solidify your approach to
39:24 - object-oriented programming in
39:26 - JavaScript so that wraps it up for this
39:28 - introduction and I'll see you in the
39:30 - next
39:35 - project for this project you're going to
39:37 - continue to learn more about algorithmic
39:40 - thinking and game design by building a
39:42 - dice game and so some of the algorithms
39:44 - that you're going to be building are
39:45 - when the user rolls the dice um can they
39:48 - get a full house or a small or large
39:51 - straight or three of a kind and so
39:52 - you're going to be building out all of
39:54 - those different types of algorithms and
39:56 - dis displaying and awarding the correct
39:58 - points based on the type of dice that
40:00 - they rolled so let's go ahead and take a
40:02 - look at the project preview so this is
40:06 - the full project so we have this show
40:08 - and hide rules button and so you can
40:11 - actually show the rules and read through
40:13 - them and you can see what kind of points
40:15 - you can get and then you can hide them
40:17 - so you're going to learn about that
40:18 - toggle functionality and you actually
40:20 - learned about it in an earlier project
40:22 - with the shopping cart so really you're
40:24 - just going to kind of review how to talk
40:26 - on and off right there uh but basically
40:28 - the way that this game works is there's
40:30 - a total of six rounds and so you can
40:32 - roll the dice up to three times per
40:34 - round so I'm going to roll the dice here
40:36 - and you get a random list of numbers
40:38 - between one and six representing the
40:40 - typical numbers you find on a dice and
40:42 - then depending on the combination of
40:43 - numbers there you can either get a three
40:45 - of a kind four of a kind Full House
40:48 - small straight which is 1 2 3 4 or a
40:50 - large straight which is 1 2 3 4 five or
40:53 - you can get none of the above so in this
40:55 - case I didn't really get anything so I
40:57 - could roll again and in this case I got
41:00 - a small straight so I can actually
41:02 - select that and keep that score or I
41:04 - could try rolling again to see if I get
41:05 - a large straight but I'm actually going
41:07 - to keep that score and then you can move
41:09 - on to the next round and so you can
41:12 - depending on the random selection of
41:14 - numbers there then you can get one of
41:16 - these scores select which one you want
41:18 - to keep and we'll move a little bit
41:21 - quicker here so there's a total of uh
41:24 - six rounds so I'm going to keep oh
41:26 - playing and also another thing is if you
41:29 - press the button more than three times
41:31 - cuz you're only allowed three rolls per
41:33 - round then we have this little alert
41:35 - message that shows you so I didn't
41:36 - really get anything that last round uh
41:39 - but you can kind of just and this is all
41:42 - random right here just like you know in
41:44 - an actual dice game oh cool I got a
41:46 - small straight and so this is the last
41:48 - round so if I keep that score then you
41:51 - want to have that game logic to actually
41:52 - end the game after six rounds show them
41:55 - the total score when you click okay it
41:56 - automatically resets the game and you
41:58 - start all over so you're going to build
42:00 - out all of that dice game logic and
42:03 - build out your algorithmic thinking
42:06 - about what happens when the user does
42:07 - this how do I build out these different
42:09 - algorithms for the different cases like
42:12 - building a full a full house or a small
42:14 - stay or a uh three of a kind or a four
42:17 - of a kind and how do I show the correct
42:19 - uh not prices but correct scores um and
42:22 - then total all of that up at the end and
42:25 - so that's what you're really going to be
42:26 - building in this dice game project so
42:29 - that wraps it up for this introduction
42:31 - and I will see you in the next
42:37 - project for this next project you are
42:39 - going to build out a cash register and
42:42 - this is actually the fourth
42:43 - certification project in the curriculum
42:46 - so similar to the other ones you're
42:47 - going to build everything from scratch
42:48 - all the HTML CSS and JavaScript and
42:52 - we'll go into the functionality in just
42:54 - a second right here but you'll be given
42:56 - a set of directions um here's a little
42:58 - bit of a chart um as well as a demo link
43:02 - and a set of user stories that you have
43:04 - to pass in order to pass this project
43:07 - and get the certification right there
43:09 - and so let's take a look at this demo
43:11 - project and similar to all the other
43:14 - certification projects all the demo
43:16 - projects you do not need to replicate
43:17 - these Styles this is just the styles
43:19 - that the Freo Camp team came up with you
43:21 - can come up with whatever Styles you
43:23 - want to but it's important that you have
43:25 - the exact functionality because that's
43:26 - what we're going to be testing you on so
43:28 - this is the project that you are going
43:30 - to build out and the basic functionality
43:32 - is as follows is we have an item number
43:36 - right here and then we have the list of
43:39 - change inside the cash register broken
43:42 - up by the amount of pennies nickels
43:44 - dimes Etc and so I should be able to
43:48 - enter in a price let's say I don't know
43:51 - $5 and click purchase it it should give
43:55 - me back the correct amount of change
43:57 - just like in the real world I can also
44:00 - buy new items so this one is for $200 59
44:05 - and so if I do exact change $200
44:09 - 59 and click purchase then you should
44:12 - display a message saying no change due
44:14 - because I paid with exact cash just like
44:17 - in the real world and then if I try to
44:19 - be obnoxious and give um you know a
44:23 - really large amount based on you know
44:26 - $10,000 here then it should say
44:28 - insufficient funds because the you know
44:30 - this is not a bank right like the cash
44:32 - register if you try to do that at a
44:34 - grocery store that obviously wouldn't
44:35 - work if you tried to give somebody
44:37 - $10,000 paying for $82 worth of
44:40 - groceries they probably won't have
44:41 - enough cash I would imagine right and so
44:45 - you should have this insufficient funds
44:47 - message showing replicating what it
44:50 - would actually happen so if you try to
44:52 - give them too much money and they don't
44:53 - have enough change to give you that is
44:56 - is the correct Behavior right there so
44:57 - you can filter through just like the
44:59 - different items and test out those
45:01 - different scenarios but that's the basic
45:03 - functionality that you need to build for
45:06 - this certification project and so the
45:08 - key things are remembering what happens
45:10 - if the user gives you exact change what
45:12 - happens if the user gives you too much
45:14 - money do you have insufficient funds in
45:16 - your cash register and then what happens
45:18 - if the user gives you just enough and
45:21 - you need you do have enough uh change to
45:24 - give them so those are the different
45:25 - scenarios that you need to consider in
45:28 - this certification project all right so
45:30 - that wraps it up for this introduction
45:32 - and I'll see you in the next
45:39 - project for this next project you are
45:41 - going to learn how to work with the
45:43 - fetch API and you're going to learn
45:45 - about asynchronous programming in this
45:47 - project by building a free Camp
45:50 - authors's Page and so up until this
45:52 - point you've mainly been working with
45:54 - synchronous programming and this is
45:56 - going to be your first introduction in
45:58 - working with the fetch API where you're
45:59 - going to be able to fetch data um and
46:02 - display the data on the page you're
46:04 - going to deal with situation on if the
46:07 - the data that you're fetching if that
46:09 - request fails how do you handle that
46:11 - situation what is a synchronous
46:13 - programming all of that stuff will be
46:15 - covered in this project and it's really
46:17 - important to understand how to work with
46:19 - different API how to get the results how
46:22 - to display it on the page especially as
46:24 - a front-end developer um because you
46:26 - will be tested on that in your technical
46:28 - interviews and you will be doing that a
46:30 - lot um on the actual job itself so this
46:33 - is going to be your first introduction
46:34 - into working with external apis so let's
46:37 - go ahead and take a look at the actual
46:39 - project so this is the project and so we
46:42 - have a list of author cards and these
46:44 - are actual free Camp authors found on
46:47 - the freeo camp news page so we have
46:49 - Quincy we have myself um we have itara
46:52 - Jennifer colade etc etc and you can
46:56 - actually uh load more authors right here
46:59 - and so you're going to learn how to do
47:01 - that because sometimes when you're
47:02 - working with these apis you don't want
47:04 - to fetch everything and load everything
47:06 - all at once because that could be
47:07 - overwhelming what if you had thousands
47:09 - of results and so you're going to start
47:11 - to learn how to work with
47:12 - pagination and that's what that load
47:15 - more button is is that you can load the
47:17 - results and display a certain amount
47:19 - whether it's 10 at a time or 25 at a
47:21 - time instead of just displaying
47:22 - everything and so you've you've probably
47:24 - been used to working with page on
47:26 - websites especially like e-commerce
47:27 - websites and stuff like that with
47:29 - different product pages so this is an
47:31 - introduction into that and so you'll be
47:33 - able to see the different authors and
47:36 - fetch more authors and all of this data
47:39 - is being pulled from an API and you're
47:41 - going to learn exactly what an API is
47:43 - it's going to go into depth on how to
47:46 - work with that and how to work with the
47:47 - fetch API and all of that fun stuff uh
47:50 - but this is the basics of the project is
47:54 - how do you work with an API how do you
47:56 - get that information back how do you
47:58 - actually display it on the page and then
48:00 - what happens if you're not able to fetch
48:02 - the results from that API how do you
48:04 - handle those edge cases and errors um
48:07 - inside your code so that's a basic
48:10 - introduction into working with
48:12 - asynchronous programming and the fetch
48:13 - API by building out a free c-amp
48:16 - author's
48:22 - page so for this project you're going to
48:24 - continue learning about asynchronous
48:26 - programming and working with async and a
48:28 - Away by building out a free c-amp forum
48:31 - leaderboard project and so this is
48:34 - basically just a continuation from the
48:36 - previous project learning how to work
48:38 - with the fetch API learning how to get
48:40 - data in and display it on the page but
48:42 - this is just going to uh expand on your
48:45 - knowledge from the previous project here
48:48 - so let's take a look at what this
48:49 - project is all about so this is
48:51 - basically just a reproduction of the
48:53 - latest topics that you'll find on the
48:55 - actual Forum so if I go to the actual
48:57 - Forum site this is the Freo Camp Forum
49:00 - where you can ask questions and have
49:02 - discussions with other Learners and so
49:04 - you're basically just building out this
49:06 - latest post page and it pulls in the
49:08 - latest 30 post um right there in real
49:11 - time so this Maps exactly to what we're
49:14 - seeing on the actual site and so what
49:17 - we're doing is we're pulling data from
49:19 - an API and we're uh pulling in that data
49:22 - and then displaying it on the page and
49:24 - so we're pulling out only certain parts
49:25 - this data we're pulling out the topics
49:27 - here the user avatars the ones who have
49:30 - been participating in the conversations
49:32 - we can see the number of replies the
49:34 - views we can also see the last
49:37 - activities so in this case uh 33 minutes
49:40 - ago right there so you're going to learn
49:41 - how to do all of that and build out all
49:44 - the
49:44 - functionality uh as well so the uh
49:47 - Styles will be provided for you but
49:49 - you're going to learn how to pull all
49:50 - this information and then also you're
49:52 - going to be able to click on a link
49:55 - right there there um and and it will in
49:57 - theory take you to the actual Forum page
50:00 - but this is what you're going to be
50:01 - building out is you're going to learn
50:03 - how to pull information from an API how
50:05 - to display it on the page and arrange it
50:07 - in this order and it's just a
50:09 - continuation of what you've been working
50:11 - with in the previous project with the
50:13 - freeo camp authors page so that wraps it
50:16 - up in for this introduction to the
50:18 - leaderboard project and then we'll move
50:20 - on to the last and final
50:24 - project
50:29 - so for the very last project in the
50:31 - curriculum you're going to build out a
50:33 - Pokemon Search application and this is
50:35 - also the last certification project in
50:38 - the curriculum so just like all the
50:40 - other certification projects you're
50:41 - given a clean slate so you're going to
50:43 - write all the HTML CSS in JavaScript
50:46 - yourself so you're going to be given a
50:47 - list of directions a demo application
50:50 - which we'll take a look at in a second
50:52 - and then a list of user stories right
50:54 - here and you have you have to make sure
50:56 - to pass every single one of these user
50:58 - stories um and test it right here run
51:00 - the test and if everything passes then
51:03 - you're able to submit your project so
51:05 - let's take a look at the demo project so
51:08 - just like all the other certification
51:10 - projects you do not need to use the same
51:12 - Styles as the free camp demo project
51:14 - it's actually encouraged to just use
51:16 - your own Styles but you do have to have
51:18 - the same functionality so what this
51:21 - application is doing is that you're able
51:23 - to search for Pokemon a database of
51:26 - Pokemon and where all this Pokemon is
51:28 - coming from is a Pokemon API and so your
51:31 - work that you did with the fream author
51:34 - page and leaderboard projects is going
51:35 - to prepare you to do this certification
51:39 - project so you're going to be able to
51:41 - enter in a Pokemon name or an ID number
51:44 - so if I enter in Pikachu for example
51:47 - then it will search through that API and
51:49 - it will pull out the correct one and it
51:51 - will list out the name the ID um and
51:54 - certain attributes right here and there
51:57 - different stats and then you can also
52:00 - search by um ID number so let's say uh
52:03 - three and you can search and then it
52:05 - will dynamically update as you can see
52:07 - right here for Venusaur and it will just
52:10 - show their correct attributes so as long
52:13 - as you provide a valid ID or uh a PO
52:18 - Pokemon name but you should also have an
52:19 - alert so obviously I am not a Pokemon so
52:23 - then you should see an alert that says
52:25 - Pokémon not found and so what it's doing
52:27 - is it's just searching through that that
52:29 - API the list of Pokémon that it has and
52:31 - if it can't find it you should have an
52:33 - alert functionality to let the user know
52:35 - that that's not a valid um entry right
52:38 - there so we'll just go back to three
52:40 - back to Venusaur all right so that wraps
52:42 - it up for the entire JavaScript
52:45 - curriculum I hope you found this video
52:48 - helpful I hope that you are excited to
52:51 - jump into this curriculum and again this
52:54 - curriculum assumes that you're an
52:55 - absolute beginner and so I know I kind
52:57 - of went through and showed you different
52:58 - intros and there might have been points
53:00 - in this video where like oh my gosh am I
53:02 - I'm going to build that how am I going
53:03 - to know how to do that I promise you
53:05 - we're going to start off really small
53:06 - small and slow with the roleplaying game
53:10 - learning the basics and then you just
53:11 - build from there and you learn more
53:13 - intermediate in advanced concepts and
53:15 - then it will all culminate with these uh
53:17 - certification projects where you're
53:19 - going to build on your own all right
53:21 - thank you so much for watching and happy
53:24 - coding

Cleaned transcript:

hello uh we're here on the free camp.org YouTube channel and we're about to introduce a new JavaScript curriculum from the from freec camp.org and I'm here with Jessica Wilkins who's going to be talking about it so Jessica could you start off by talking a little bit about yourself and your role at free camp and spe specifically Your Role with this JavaScript curriculum sure yeah so I'm Jessica Wilkins I'm a software developer based out of Los Angeles California work fulltime now with Freo camp on the curricul development team and so we just launched the all new JavaScript Project based curriculum there so you're going to learn JavaScript by building projects and so we have some really cool projects that we've put together for you guys to learn and I've been with freeo Camp fulltime since August of this year but I've been working uh with Freo Camp as a parttime and contributor for a few years now I think since like 20120 wow it's been a while uh but yeah that's a little like introduction about me okay yeah great so maybe you can talk even more about this uh JavaScript curriculum and what ex what is it like for for Learners going through it yeah yeah so for those of you who are familiar with the uh older version of the curriculum you learned JavaScript by building are you going through interactive challenges um but this curriculum is different because you're going to be learning JavaScript by building actual projects so the first project you're going to build is a role playing game and you're going to learn how to work with the Dom and you're going to learn uh the basics of JavaScript like working with arrays and objects and variables and IFL statements and functions and all of that and so you start from scratch building out a little bit of HTML a little bit of CSS and then you dive straight into the JavaScript so you learn how all three of those languages work together to build interactive web applications and so you start with that and then you keep building off of your knowledge you start learning about event listers you start learning about object oriented programming by building a platformer game and a dice game learning about algorithmic thinking there's so many cool things there's a lot of games actually in this one that I realized like we have a lot of games but games are actually really cool because there's so much logic behind games and there's so many different things you have to think about in terms of uh different scenarios that the user has to go through um and so I think the uh learner is going to have a great time just uh solidifying their JavaScript knowledge uh by going through this interactive Project based curriculum oh yeah it sounds very comprehensive like who's the target audience for this course who who you who do you think will benefit the most from it yeah so this course is intended for the absolute beginner so you don't have to have any prior programming knowledge or any prior knowledge of JavaScript U so this assumes that you have zero knowledge you coming from the responsive web design certification or maybe you have some brief exposure to HTML and CSS but we're really just going to dive straight into JavaScript and so you can see how HTML CSS and JavaScript work together um so only the first two projects will we cover a little bit of HTML and CSS have you write out some of of the steps um and then the rest of the projects will just Supply the HTML CSS for you so you can just jump straight into the the JavaScript and it just assumes that you're an absolute beginner you don't have to have any prior programming knowledge or exposure to to JavaScript to enjoy this course okay great and I assume that this was a a team effort to develop this curriculum yeah yeah it definitely took a lot of Us coming together it's been um actually maybe I think at this point almost years into the making from like just conceptualizing and building out the practice projects and kind of going back and forth of what we wanted to teach and which Concepts and where each project was going to go and and building out all the prototypes so we started off with that a lot of discussions and building out prototypes sharing ideas reviewing each other's work and then once we kind of solidified on those prototypes then we started breaking them down into steps and tests um and then just going through the flow and making sure all the projects work together as a nice like cohesive curriculum there m mhm well sounds pretty great so what are viewers going to see in this video here yeah so the purpose of this video is just give a sneak peek of each of the projects and so we'll start with the very first one which is a role playing game and it will just be me just kind of walking through the final preview project of what people are going to build and then we jump into the next project which is a calorie counter and do the same thing where we show the final preview of what people are going to build and then we keep going from there so the next one after that is an interactive music player project and then we have uh more projects along the way and then I'll also show them uh what they'll be building for the certification projects um and the we still have five certification projects just like the other uh certifications of free Coca but these are also going to have all new uis and so people uh Learners will get uh a lot of experience just building out HTML CSS and JavaScript so they can see how all three of that uh comes together there and so that's the whole thing is just to kind of give a sneak peek on like what they're going going to be building so we're not really going to be like coding along per se but we'll just dive straight into the curriculum just to show them like the final previews of each of the project just to get people really excited about what they're going to be able to build well that sounds great so let's let's get on to the the rest of the video here all right so here we are at the very first project of the allnew JavaScript curriculum so make sure you head over to freeco camp.org learn to see this brand new curriculum so the very first project we have is a role playing game this is where you're going to learn the basics of JavaScript and also just the basics of programming in general so learning how to work with functions and variables and IFL statements and loops and so much more so let's go ahead and start the project and this is what you're actually going to build it's a role playing game called Dragon repeller it so you can make certain decisions in the game like going to the store you can buy some health right here and you can see that it updates up here using JavaScript you can buy a weapon it will show you which weapons you have um and then if you don't have enough money to buy something then it will also show you that and so this is what is known as a condition and you're going to learn how to do that in JavaScript in this project and then you can go back you can fight a dragon and so you can learn how to dynamically hide and show HTML elements using JavaScript and let's see we're attacking it and unfortunately we didn't win we died so we could repl replay the game reset it and start all over again and so you can play for multiple rounds right there there's also a hidden secret Easter egg inside here and an additional game that you can play and so that's just a little preview of what you're going to be building for this very first project and so for step one you're actually going to start off with a complete Blank Slate as you can see here you're going to start with the HTML boilerplate code and build out the basic HTML structure then you're going to move into the CSS for styling then you're actually going to jump into the JavaScript which is around step 15 or so and so this helps you understand how HTML CSS and JavaScript work together to build interactive web applications right there so that's why we started off with just a complete Blank Slate so you can connect all three of those languages together right there and so the great thing about this project is that there's tons of steps right here so this is the largest project that we have however that's actually really good thing because when you're learning programming you want to have tons of repetition in order for the concepts to actually stick and to feel comfortable executing on these Concepts right here so here's a sneak peek of the code that you're going to be writing in this first project right here and so you're going to have tons of practice learning how to work with objects and arrays and loops and variables and functions and so much more and you're going to have practice just constantly writing that out and that will able to enable you excuse me to actually feel more comfortable executing on these Concepts cuz one of the common things when people are First Learning is they learn a concept they practice it once and then they forget about it with this project and all of the projects in the curriculum you're constantly practicing you're constantly repeating yourself just so it really sticks with you in that muscle memory right there so that wraps it up for this very first project on learning basic JavaScript by building a role playing game so for the second project in the JavaScript curriculum is going to be the calorie counter project and in this project you're going to learn the basics of form validation and so often times when you're building out interactive web applications you are going to be dealing with some sort of user input and so this is a gentle introduction on how do you process that user input right there and so let's take a look at the project and so this is what you're actually going to be building so you can set a daily calor budget so let's just say I don't know 2,000 maybe and then here you have different fields for breakfast lunch dinner snacks and exercise and so what you could do is you can select which uh inputs you want so let's say I don't know I want to start with lunch and add an entry then that will uh show me the inputs and then I can add let's say a sandwich I have no clue I'll just put 200 and you can add as many entries as you like so let's say maybe a breakfast one and eggs I don't know how many calories I'm totally making up these numbers but you get the point there so you can add as many entries as you would like right there so we got chips uh 120 and then once you're done you can calculate the remaining calories and scroll down and it will take that daily amount that you entered at the beginning and do some basic Cal calculations there and you can see either you have a surplus or a deficit right there and then how many calories you've consumed and budgeted and burned and all that that fun stuff right there so you're going to learn how to do all of this stuff in this second project right here and so similar to the first project uh you are going to be writing a little bit of HTML in CSS it's we give you most of the HTML in CSS and then you're going to start by adding the form element um and then you're going to jump into the JavaScript right there and learn how to deal with user input how can you tell if a user input is valid or not what do you do in those situations how do you communicate that to the user Etc so this is a really cool project there um that will build off of your knowledge from the previous project and introduce some new Concepts uh that you can use in your own interactive JavaScript applications so that wraps it up for this intro to the second project where you learn form validation by building a calorie counter so for the very third project in the curriculum you're going to build your very own music player so I think this is a really cool project because there's so many new JavaScript Concepts that you're going to be learning and building from and so let's take a look at this and so you're going to build your very own music player and the playlist features the songs by none other than Quincy Larson so these are all of his original songs that he wrote and performed himself and has lent his songs over to this project so it's really cool because you can play for the very beginning and it will highlight the correct song that's actually playing you'll be able to pause the song and you can notice here that we have these yellow indicators to show if we're playing or pausing or if we are starting over if we're going to the next one right there you can also see that it correctly updates uh the song title right here as well as the visual indicator updates every single time we move to a new song so you're going to learn how to do that using JavaScript you can also shuffle through the different songs right here and so if we press this a few times you can see that the songs are correctly updating and shuffling around you can also remove songs from a playlist with this little red icon uh this delete icon so if we delete oops all the songs right here then you have an option to actually reset the playlist and when you do that then it just populates the playlist with the original songs so it's it's a really cool project and you're going to learn a ton by building this out so from this point forward you're no longer going to need to write out the HTML and CSS um for these projects all that's just going to be provided for you because we're going to dive straight into the JavaScript and so I hope you really enjoy this project you learn a lot from it and then maybe you can build from there and add new features and kind of make it your own little music player but that wraps it up for this introduction into the third project of the all new JavaScript curriculum so the next project you are going to learn how to work with the date object in JavaScript by building a date formatter so dates notoriously could be a little bit tricky especially in production level apps and you're dealing with time zones and so it's still really important though to learn the basics of working with javascript's date object and this particular object has different properties on it like getting the month and the year in hours and seconds and so we're going to learn how to format different dates using JavaScript so this is a preview of what we're going to be building here and so by default it's going to show you the date format um the current date here which is the 17th it's December 17th 2023 right there so day month year but then if we want to change the format to year month day then it will just update that particular format or we can change it and show the month day year hours and minutes and it will show you that format as well so you can kind of just toggle between these different options right here and um you're going to learn how to do that so this is a shorter project compared to the first three that we looked at but it's still a really good introduction and how to work with the date object and as I mentioned earlier all the HTML and CSS will be provided for you in this project so you can just jump straight in to the JavaScript and that wraps it up for this intro for the date formatter project so the next project we're going to take a look at is the palindrome Checker and this is actually the first certification project that we have seen so far in the curriculum so the first four projects were actually the practice projects and that's where you were LED step by step and learned new JavaScript Concepts but the certification projects right there you're building from scratch and you're actually going to be given a set of user stories that your project needs to include and be able to pass all of these tests right here um in order to collect the certification so there's a total of five certification projects and this is the first one we're taking a look at now in terms of building this out before we take a look at what we're building where should you build it you can either build it out inside the freeo camp editor or you can build it out locally if you have experience working with something like Visual Studio code or sublime or brackets or atom or webstorm or whatever so if you want to build it out locally that's totally cool as long as you just copy and paste your solution in here and then you're able to pass all of the tests right here so let's take a look at what we're actually going to be building so this is the demo project right here and so a palindrome is a word that could be spelled the same front and back so an example of this would be the word I e ye because it's spelled the same forwards and backwards so the main functionality that you need to implement in the certification project is if a user doesn't Supply any input and just clicks on this check button then an alert should show up and say hey you need to supply something the other thing is we need to be able to determine if a word is a palindrome and so they should be able to enter into a word and then check if it is in fact a palindrome and Supply that correct result and if it's not a palindrome like my name well then it should also correctly get that it's not a palindrome and so that's the main functionality for this certification project so a quick note about the Styles here a lot of people think that they have to copy the Styles exactly for all these certification projects and that's actually not true it's encouraged that you use your own styling so this is just the styling that the freeo camp team went with but you can style this however you want to the main thing is the the JavaScript functionality has to be there and so don't worry about styling if you're just like I don't want to use these Styles that's totally fine this is just the demo project you can use whatever Styles you want to as long as you have the core functionality that we just talked about right there that is what is required to pass the uh certification right there so that wraps it up for this project and we'll take a look at the next one for this next project we are going to build build out a set of football team cards so this project is going to cover Concepts like working with object D structuring object. freeze the map method and so much more so let's take a look at what the final project is going to look like so here we have some team stats and we have Team Argentina uh football or American soccer um the year 1986 and then the head coach right here and then we have a list of the players for that respective team and so what you're going to learn how to do the functionality where that comes in is actually this drop down menu so you can filter through the players based off of their nicknames or the position that they play on the team so if we just want to see players that actually have nicknames there then it will filter through that list and filter out the ones that don't have nicknames and only show the ones that do you could also filter by position forward and you can filter by position midfielder and Defender and then also uh goalkeeper right there and so you can just kind of keep filtering through all of these and just dynamically update the list depending on what you want to see and then you can go back to looking at all of the different players and so that's the JavaScript functionality that we are going to be focused on right there so this is a great project to kind of practice more working with objects and then how to get information from those objects and then also to filter through the the objects and dynamically display the different player cards on the screen so that wraps it up for this intro and then we're going to jump into the very next project so for this next project you are going to learn how to work with local storage by building a todo application so local storage is a feature provided by the browser where you can save data in the browser and you can leave your web application and come back to it and that data will still be saved in there so you're going to learn how to work with the get and set methods for local storage and you're going to learn that by building a todo application and todo applications are great uh when you're first learning because you're going to learn the basics of crud operations and crud stands for create read update and delete there so let's take a look at the project so it starts off as just a blank slate we haven't added anything yet I can add a new task and just say recording a video I can add a date if I want to so here's today's date and then I can say something like recording a video today cool add task and then it will just save that inside the list of task so I have the option to edit and if I want to say recording an awesome video right now to show my excitement I can update that task and then it will actually update that um like so you can also delete tasks you can add multiple tasks and we've also have this feature where let's say I'm adding a task and then I change my mind and if I click the X out where there's data here it will ask me hey are you sure do you want to change uh remove this because you're going to lose your changes and then you can prompt it and say yes I'm totally sure um and so this is great and and one of the things here is that if I try to refresh the page then it will show the local storage that I was talking about where even though I did a manual refresh right there it still had my original data and so that is the local storage portion that I was talking about earlier where you can actually manually leave or refresh the page and come back and it's saved in your local storage so you're going to see what all of that is about so that's an introduction into this project on learning local storage by building a todo application for this next project you are going to learn all about recursion by building out a decimal to Binary converter so recursion is often one of those topics that could be really confusing at first and it took me a really long time to kind of wrap my head around it because often times people refer to it as a function that calls itself and until you really understand what's happening with the call stack sometimes it's just really confusing but this is a popular technique used to break down a larger complex problem and break it down into smaller sub problems so you can solve it and so we're going to teach recursion by building out a decimal to Binary converter and so the decimal number system base 10 09 numbers is probably the one that you're most familiar with but then we also have the binary number system which is a base 2 system made up of zeros and ones and this project goes into a little bit more detail on the different number systems as you're building out this project so let's take a look at the project itself so here if you don't provide anything then an alert shows up and says hey I'm expecting a decimal number so if I actually provided a number like 10 and convert it it's going to convert it into the binary representation of the decimal 10 so in order to see the animation here we actually have to test this out with the number five and what we've done here is to try to illustrate what's happening within the call STC when you're working with um recursion so I'm going to click on the convert number and it's meant to represent the what's happening on your call stack here and we're going to go into more detail when you actually go through this project what all of this text is actually meaning here but we wanted to create an animation to kind of illustrate what's happening when you're writing recursive functions and illustrate that on the call stack so that's the main purpose behind this particular project is to learn the basics of recursion and build out a small little animation uh to just better illustrate how recursion works with the call stack and that wraps it up for this introduction and we'll jump into the next project so for this next project you are going to build out a Roman numeral converter and this is actually the second certification project in the curriculum and so similar to the first one here you're going to be given a set of directions a complete Blank Slate so for this Roman numeral it gives you a quick chart here between uh popular Roman numerals and the Arabic numerals on the side right here and your job is that a user should be able to input um an Arabic uh numeral and then you convert it to a Roman numeral so that's the whole purpose of this certification project and there's a whole list of user stories that we have right here and you have to make sure to implement all 11 and run the test and make sure that every single test is passing and then it's encouraged to give your own style so let's take a look at the demo project right here and so if you try to convert nothing it will say please enter an actual number we're using the number input here which has some basic validation as well so if I input the number 12 and convert it then it will convert it to a Roman numeral and if I do something like the number four then it will keep converting it and because we're using the number input then I can't input just regular um you know letters like my name or something like that because obviously that's not going to translate over to a Roman numeral and so that's the whole purpose of this project right here and so you have to design an algorithm that takes in a decimal number there and then converts it over to a Roman numeral and outputs it and again just like the other project in terms of The Styling you don't need to copy the styling you can use your own Styles it's actually encouraged for you to use your own Styles the main thing is that you have to have the functionality so we should be able to input a number and it outputs the correct Roman numeral so you have to design the correct algorithm for that and that wraps it up for this introduction into the Roman numeral converter for this next project we are going to learn the basics of algorithmic thinking and different sorting algorithms by building out a number sorter so in computer science there's a few popular sorting algorithms that you can use to sort a list of numbers and so some of these would include bubble sort or insertion sort selection sort quick sort and so many more so it's really important to start learning basic data structures and algorithms um to help you build your programs as well as being prepared for technical interviews when you get ready to apply for a job and so this first uh project right here on algorithmic thinking is going to introduce you to some popular sorting algorithms that you will run into in your typical intro to computer science class so let's take a look at the actual project right here and so we have a few different inputs of random numbers here and we can change uh the different numbers and sort them in whatever order we want to and when we click on the sort method then it will just sort it from smallest to largest and we can keep just randomly uh sorting everything and then it will just update right here but the main part for this project is that you're going to focus on three different popular sorting algorithms so the first one is the bubble sort algorithm and then you're also going to learn about selection sort and insertion sort so you're going to build out all of these algorithms by hand to learn how each one works and compare each of them and sorting a list of numbers from smallest to largest so that wraps it up for this introduction and I'll catch you in the next video for this next project you are going to learn how to work with more intermediate and advanced JavaScript methods by building out a statistics calculator so some of these important methods that you're going to be working with in this project are going to be the map and filter and reduce method in JavaScript so you're going to get tons of practice working with these different higher order functions and so in this project you're going to build out a statistics calculator and you're going to be working with different calculations to calculate the mode and the median and the variance and so much more and the project will go into depth on how to do all of that so let's take a look at the actual project so this is the final project uh that you're going to build out so it just gives a brief introduction into what all of these uh different calculations that you're going to be working with like the what a mean is and a median and a variance and all of that stuff uh but basically what you're going to be doing is you can enter in a list of numbers and calculate that and it will calculate the different you know the mean the median the mode range variance and standard deviation and so you can list in whatever numbers that you want want to right there and so if I start to change it up and let's see let's do a different list of numbers then it will update those different calculations right there and so this is a really good project to kind of wrap your head around more advanced U methods especially the reduced method I think for a lot of people when they're first being introduced to the reduced method sometimes they understand the basis basics of it but uh working a little bit more with it and understanding how all that works in combination with like map filter and other different methods it's really important to kind of wrap your head around some of these higher order functions and how you can use them within your program and so that's the whole purpose of this statistics calculator so that wraps it up for this introduction and I will see you in the next video for this next project we are going to learn about functional programming by building a spreadsheet application and so functional programming is an approach in software development where you organize your code by breaking it down into smaller functions and this approach is meant to help you build out more complex applications so it's just a different way of approaching than designing and organizing your code and so we're going to build out a functioning spreadsheet application where you can do a variety of mathematical operations and we're going to walk you through how to interact within the spreadsheet and how to actually execute these uh expressions right here so let's go ahead and take a look so this is actually what the project looks like it's just a blank spreadsheet uh so imagine like you know Google spreadsheets and stuff like that uh but I've actually inputed a few numbers here just to illustrate a few of the calculations that you could do and so to make a calculation for any of these cells here you could start prefixing it with the uh equals sign and if we wanted to let's say add two numbers from a cell let's say we wanted to add A3 and uh B4 so we could do A3 + B4 and hit enter and then it will do the correct calculation I've also uh added a couple of functions right here so we can check if everything within a range between uh A2 and A5 if that is in fact um all even and so if we take a look no we do have number 15 which is odd so it's going to return false right there and so you can do uh these different calculations and we're going to walk through every single calculation through the stepbystep project when you're building it out there and you're going to learn how to make this uh spreadsheet interactive and so when it first starts then it's just going to give you the basic uh blank spreadsheet and the HTML and CSS and then it's your job to add all of that interactive portion using JavaScript all right so that wraps it up for this intro and I'll see you in the next project for this next project we are going to learn all about regular Expressions by building out a spam filter so regular expressions or reject for short are patterns that you can use to match and search for text so sometimes when you're learning regular Expressions it can be a little bit complicated because they're these weird funny symbols but with enough practice then you start to get a little bit more comfortable with regular expressions and the good news is there's tons of online tools like Rex 10 one to help you build out your regular Expressions so let's take a look at the project that you're going to build and so we're going to build out a spam filter so there's a list of phrases that you are going to need to check for using regular Expressions so some of the phrases are going to be like free money because no one offers up free money and it should spit out hey this is a spam message but if you say something like hi there well that's not necessarily a Spam message and so it should be able to check the text and say say this looks like spam or it doesn't now this is a very basic spam filter um but it's just meant to kind of introduce you into regular expressions and how to start to work with them for matching and searching text right there and so there's going to be a list of phrases that you're going to need to check and that wraps it up for this introduction into regular Expressions by building a spam filter for this next project you are going to learn how to build out a telephone validator and this is actually the third certification project in the curriculum and so this is a project where you're going to check for a valid United States phone number and it gives a few examples of valid entries but basically a United States phone number has the country code of one followed by a threedigit area code followed by a 7 digigit phone number so some valid uh phone numbers can have dashes some will have parentheses like this some will have a mixture of parentheses and dashes some could just be numbers without the country code so all of these are examples of valid numbers and your job is to create a telephone validator where a user inputs a number and then the output should be this is a valid Us number or not so let's take a look at the uh demo project and again you don't need to build out this actual style this is just for the demo you could use whatever styles that you want to for the certification project but uh if you were to not input anything then you should have the functionality where it alerts the user to say hey you need to provide something so we can check it and inside this input here you can have uh so this is a valid United States number you can check it and it should return valid Us number followed by the input that the user provided but if I provide something like yeah my name obviously that is not not a valid United States number if I just put in just random numbers like this this is not a valid United States number so that is the basics of this um project right here is that you should be able to check whatever the user input and output whether it's a valid Us number or clearly not a valid number and you can also clear the input as well and and add new ones so that's the basic functionality that you have to build out for this certification project and that wraps it up for this introduction and I'll see you in the next project for this next project you are going to learn the basics of working with objectoriented programming by building a shopping cart project so objectoriented programming is a way that you can design your code and build it out using a series of objects and classes and so that differs from the functional programming style where you build out and design your project objects around smaller functions and so we're going to learn how to work with classes within the con uh context of JavaScript we're also going to learn to work with the this keyword as well as um so many other new Concepts in this project so let's go ahead and start the project and this is what you're going to build and so it's a little desserts page and you can add certain things to the cart uh so up here we have our little shopping cart which is empty so you can toggle that um on and off so you're going to learn how to do that with JavaScript if you want to add something like let's say a French macaroon then you can open the cart and you can see that it has been added with the correct price um and then it will show you the total number of items in your cart as well as the subtotal the tax and the total and so you're going to build out a class right here and have different methods for calculating the total and the taxes and all that fun stuff and if you want to clear out your cart then it will ask you or are you sure and if so then you can clear it out you can hide it again uh but you can add so many different things to your cart and it will update so we have four chocolate macaroons and then strawberry ice cream and if we do show cart then you can see that it shows the quantity of four as well as the ice cream and it does the correct calculations right here and so that's the basics of this project and it's in your first introduction into working with classes in the context of JavaScript right there and the this keyword and spread operator and so much more so that wraps it up for this introduction and I'll see you in the next project for this next project you're going to continue working and learning objectoriented programming by building a platformer game so this is a really cool game to uh just kind of solidify your knowledge of what you learned in the previous project with the shopping cart on how to work with objectoriented programming and classes in inside JavaScript so here I've uh pulled up the final step and if I show the preview here I just want to make sure that we have plenty of room to work with and so this is our platformer game and you are going to build this out so it has a little start screen right here and when we click on the start screen then we can use the keyboard controls and we can move our player we can jump up and down um so you're going to learn how to build out that functionality then you can jump on the different Platformers you're also going to learn how to build out this kind of uh moving giving us illusion right here that we're moving forward and backwards and whatnot you're going to learn how to build that out and then we also have these like yellow uh checkpoints and so when you hit a checkpoint then a little message pops up and says hey cool good for you and so you can kind of go throughout this platform game hitting the different checkpoints using your keyboard controls on your computer um and then once you reach the final checkpoint then uh the game is over and so this is a great way for you to kind of think about different types of algorithms like Collision detection algorithms and how to move throughout the game how to interact with the different platforms and whatnot um and what to do when a uh the player hits one of the checkpoints all of that fun stuff you're going to learn in this game and this is just going to help you solidify your approach to objectoriented programming in JavaScript so that wraps it up for this introduction and I'll see you in the next project for this project you're going to continue to learn more about algorithmic thinking and game design by building a dice game and so some of the algorithms that you're going to be building are when the user rolls the dice um can they get a full house or a small or large straight or three of a kind and so you're going to be building out all of those different types of algorithms and dis displaying and awarding the correct points based on the type of dice that they rolled so let's go ahead and take a look at the project preview so this is the full project so we have this show and hide rules button and so you can actually show the rules and read through them and you can see what kind of points you can get and then you can hide them so you're going to learn about that toggle functionality and you actually learned about it in an earlier project with the shopping cart so really you're just going to kind of review how to talk on and off right there uh but basically the way that this game works is there's a total of six rounds and so you can roll the dice up to three times per round so I'm going to roll the dice here and you get a random list of numbers between one and six representing the typical numbers you find on a dice and then depending on the combination of numbers there you can either get a three of a kind four of a kind Full House small straight which is 1 2 3 4 or a large straight which is 1 2 3 4 five or you can get none of the above so in this case I didn't really get anything so I could roll again and in this case I got a small straight so I can actually select that and keep that score or I could try rolling again to see if I get a large straight but I'm actually going to keep that score and then you can move on to the next round and so you can depending on the random selection of numbers there then you can get one of these scores select which one you want to keep and we'll move a little bit quicker here so there's a total of uh six rounds so I'm going to keep oh playing and also another thing is if you press the button more than three times cuz you're only allowed three rolls per round then we have this little alert message that shows you so I didn't really get anything that last round uh but you can kind of just and this is all random right here just like you know in an actual dice game oh cool I got a small straight and so this is the last round so if I keep that score then you want to have that game logic to actually end the game after six rounds show them the total score when you click okay it automatically resets the game and you start all over so you're going to build out all of that dice game logic and build out your algorithmic thinking about what happens when the user does this how do I build out these different algorithms for the different cases like building a full a full house or a small stay or a uh three of a kind or a four of a kind and how do I show the correct uh not prices but correct scores um and then total all of that up at the end and so that's what you're really going to be building in this dice game project so that wraps it up for this introduction and I will see you in the next project for this next project you are going to build out a cash register and this is actually the fourth certification project in the curriculum so similar to the other ones you're going to build everything from scratch all the HTML CSS and JavaScript and we'll go into the functionality in just a second right here but you'll be given a set of directions um here's a little bit of a chart um as well as a demo link and a set of user stories that you have to pass in order to pass this project and get the certification right there and so let's take a look at this demo project and similar to all the other certification projects all the demo projects you do not need to replicate these Styles this is just the styles that the Freo Camp team came up with you can come up with whatever Styles you want to but it's important that you have the exact functionality because that's what we're going to be testing you on so this is the project that you are going to build out and the basic functionality is as follows is we have an item number right here and then we have the list of change inside the cash register broken up by the amount of pennies nickels dimes Etc and so I should be able to enter in a price let's say I don't know $5 and click purchase it it should give me back the correct amount of change just like in the real world I can also buy new items so this one is for $200 59 and so if I do exact change $200 59 and click purchase then you should display a message saying no change due because I paid with exact cash just like in the real world and then if I try to be obnoxious and give um you know a really large amount based on you know $10,000 here then it should say insufficient funds because the you know this is not a bank right like the cash register if you try to do that at a grocery store that obviously wouldn't work if you tried to give somebody $10,000 paying for $82 worth of groceries they probably won't have enough cash I would imagine right and so you should have this insufficient funds message showing replicating what it would actually happen so if you try to give them too much money and they don't have enough change to give you that is is the correct Behavior right there so you can filter through just like the different items and test out those different scenarios but that's the basic functionality that you need to build for this certification project and so the key things are remembering what happens if the user gives you exact change what happens if the user gives you too much money do you have insufficient funds in your cash register and then what happens if the user gives you just enough and you need you do have enough uh change to give them so those are the different scenarios that you need to consider in this certification project all right so that wraps it up for this introduction and I'll see you in the next project for this next project you are going to learn how to work with the fetch API and you're going to learn about asynchronous programming in this project by building a free Camp authors's Page and so up until this point you've mainly been working with synchronous programming and this is going to be your first introduction in working with the fetch API where you're going to be able to fetch data um and display the data on the page you're going to deal with situation on if the the data that you're fetching if that request fails how do you handle that situation what is a synchronous programming all of that stuff will be covered in this project and it's really important to understand how to work with different API how to get the results how to display it on the page especially as a frontend developer um because you will be tested on that in your technical interviews and you will be doing that a lot um on the actual job itself so this is going to be your first introduction into working with external apis so let's go ahead and take a look at the actual project so this is the project and so we have a list of author cards and these are actual free Camp authors found on the freeo camp news page so we have Quincy we have myself um we have itara Jennifer colade etc etc and you can actually uh load more authors right here and so you're going to learn how to do that because sometimes when you're working with these apis you don't want to fetch everything and load everything all at once because that could be overwhelming what if you had thousands of results and so you're going to start to learn how to work with pagination and that's what that load more button is is that you can load the results and display a certain amount whether it's 10 at a time or 25 at a time instead of just displaying everything and so you've you've probably been used to working with page on websites especially like ecommerce websites and stuff like that with different product pages so this is an introduction into that and so you'll be able to see the different authors and fetch more authors and all of this data is being pulled from an API and you're going to learn exactly what an API is it's going to go into depth on how to work with that and how to work with the fetch API and all of that fun stuff uh but this is the basics of the project is how do you work with an API how do you get that information back how do you actually display it on the page and then what happens if you're not able to fetch the results from that API how do you handle those edge cases and errors um inside your code so that's a basic introduction into working with asynchronous programming and the fetch API by building out a free camp author's page so for this project you're going to continue learning about asynchronous programming and working with async and a Away by building out a free camp forum leaderboard project and so this is basically just a continuation from the previous project learning how to work with the fetch API learning how to get data in and display it on the page but this is just going to uh expand on your knowledge from the previous project here so let's take a look at what this project is all about so this is basically just a reproduction of the latest topics that you'll find on the actual Forum so if I go to the actual Forum site this is the Freo Camp Forum where you can ask questions and have discussions with other Learners and so you're basically just building out this latest post page and it pulls in the latest 30 post um right there in real time so this Maps exactly to what we're seeing on the actual site and so what we're doing is we're pulling data from an API and we're uh pulling in that data and then displaying it on the page and so we're pulling out only certain parts this data we're pulling out the topics here the user avatars the ones who have been participating in the conversations we can see the number of replies the views we can also see the last activities so in this case uh 33 minutes ago right there so you're going to learn how to do all of that and build out all the functionality uh as well so the uh Styles will be provided for you but you're going to learn how to pull all this information and then also you're going to be able to click on a link right there there um and and it will in theory take you to the actual Forum page but this is what you're going to be building out is you're going to learn how to pull information from an API how to display it on the page and arrange it in this order and it's just a continuation of what you've been working with in the previous project with the freeo camp authors page so that wraps it up in for this introduction to the leaderboard project and then we'll move on to the last and final project so for the very last project in the curriculum you're going to build out a Pokemon Search application and this is also the last certification project in the curriculum so just like all the other certification projects you're given a clean slate so you're going to write all the HTML CSS in JavaScript yourself so you're going to be given a list of directions a demo application which we'll take a look at in a second and then a list of user stories right here and you have you have to make sure to pass every single one of these user stories um and test it right here run the test and if everything passes then you're able to submit your project so let's take a look at the demo project so just like all the other certification projects you do not need to use the same Styles as the free camp demo project it's actually encouraged to just use your own Styles but you do have to have the same functionality so what this application is doing is that you're able to search for Pokemon a database of Pokemon and where all this Pokemon is coming from is a Pokemon API and so your work that you did with the fream author page and leaderboard projects is going to prepare you to do this certification project so you're going to be able to enter in a Pokemon name or an ID number so if I enter in Pikachu for example then it will search through that API and it will pull out the correct one and it will list out the name the ID um and certain attributes right here and there different stats and then you can also search by um ID number so let's say uh three and you can search and then it will dynamically update as you can see right here for Venusaur and it will just show their correct attributes so as long as you provide a valid ID or uh a PO Pokemon name but you should also have an alert so obviously I am not a Pokemon so then you should see an alert that says Pokémon not found and so what it's doing is it's just searching through that that API the list of Pokémon that it has and if it can't find it you should have an alert functionality to let the user know that that's not a valid um entry right there so we'll just go back to three back to Venusaur all right so that wraps it up for the entire JavaScript curriculum I hope you found this video helpful I hope that you are excited to jump into this curriculum and again this curriculum assumes that you're an absolute beginner and so I know I kind of went through and showed you different intros and there might have been points in this video where like oh my gosh am I I'm going to build that how am I going to know how to do that I promise you we're going to start off really small small and slow with the roleplaying game learning the basics and then you just build from there and you learn more intermediate in advanced concepts and then it will all culminate with these uh certification projects where you're going to build on your own all right thank you so much for watching and happy coding
