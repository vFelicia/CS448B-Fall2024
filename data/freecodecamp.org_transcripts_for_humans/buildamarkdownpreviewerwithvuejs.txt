With timestamps:

00:00 - a coders and welcome back to another
00:02 - view Jas tutorial where I'm going to
00:04 - show you how to build a markdown
00:05 - previewer app so just to kind of show
00:09 - you what we're building on the left here
00:11 - we have a text area where we can type
00:12 - our markdown and if you're not familiar
00:14 - with markdown basically it's a hyper
00:17 - text language where it compiles down to
00:19 - HTML and in markdown you can do a bunch
00:23 - of different stuff such as create titles
00:25 - so this is going to make an h3 title I
00:28 - do one of them is going to make an h1
00:30 - title and on the right this is kind of
00:32 - the HTML that the markdown is going to
00:34 - be rendered into after it compiles
00:39 - just show some of them we can do you
00:40 - know of course titles we can do bullet
00:42 - points so I'll say one two three we can
00:47 - do this random paragraph
00:50 - text
00:53 - copy and paste that a bunch
00:55 - of course we could do unordered lists
00:58 - here so one two three
01:03 - demonstrate links
01:06 - we could do something like this so I'll
01:07 - say Google comm and that's gonna be a
01:09 - hyperlink tool
01:10 - [Music]
01:12 - google.com fact I think I mixed that up
01:16 - let me this
01:20 - there we go that's the correct way to do
01:22 - it so you can do links you can do images
01:26 - I simply
01:29 - doing something like this and notice
01:32 - that we don't have an image here so let
01:33 - me just go to like Google Images and say
01:35 - view image
01:38 - go to images and I'm going to go here
01:40 - and just copy this image URL so copy
01:44 - images rest and then instead I'm going
01:46 - to paste this
01:49 - a view so that's just kind of showing
01:52 - off like what we're building we're not
01:54 - going to use any external markdown
01:57 - packages that exist or else this
01:59 - tutorial will probably be like five
02:00 - minutes we're going to try to create our
02:02 - own markdown directive and we're going
02:05 - to use regex to kind of PARs this text
02:07 - and re-render HTML on the right over
02:09 - here so this is a good tutorial to kind
02:12 - of practice writing directives practice
02:14 - writing view components that interact
02:16 - with each other etc so let's get started
02:19 - building out this preview I went ahead
02:20 - and just created a new project using
02:23 - view CLI origin 3 and using the
02:26 - generated code let's just go ahead and
02:28 - alter some stuff to make this work so
02:30 - inside app view I'm going to just remove
02:34 - our hello world stuff and we can just go
02:37 - ahead and get started
02:39 - one thing I will note that I already did
02:42 - is inside our index.html I went ahead
02:44 - and just brought in a Google web font in
02:47 - a bootstrap CSS file so that we can use
02:50 - the CSS grid to kind of lay out our
02:52 - application so nothing nothing too crazy
02:55 - going on in here and then also what I'm
02:59 - gonna do before we start going too much
03:01 - further is inside our assets folder I'm
03:04 - going to add a style that CSS file and
03:06 - I'm going to import that in our main J's
03:09 - file so I'm gonna say import dot assets
03:13 - style that CSS just so that we can kind
03:16 - of declare some top-level assets if we
03:18 - need them
03:20 - so with that being said let's start by
03:23 - going into app dot view
03:26 - and in order to achieve what we saw with
03:29 - what we're going to build we need to
03:31 - kind of start laying out some Styles so
03:33 - the first thing I'm going to lay out is
03:35 - I'm going to say a class is equal to
03:37 - container which is a bootstrap class and
03:40 - that basically will just make sure that
03:42 - everything is wrapped and kind of
03:44 - centered on the page
03:46 - once we have a container class lined out
03:49 - we can then do class of row
03:54 - and inside your rose that's where you
03:56 - can declare your columns so on the first
03:59 - row we're just going to make this a
04:01 - class of column so make sure it takes up
04:04 - all the 12 grid locations and we're
04:07 - going to give this an h1 of markdown
04:10 - preview and if I save this we should see
04:15 - markdown preview pop up at the top one
04:18 - thing we also have in bootstrap is a
04:20 - text align so I'm going to say text
04:21 - Center just to make sure that is aligned
04:23 - in the center
04:25 - awesome so that is our first row for our
04:28 - second row we want to split that into
04:31 - two columns so as I call em d6
04:38 - inside this each tag I'm going to say
04:41 - markdown and instead of h1 I'm gonna do
04:43 - h4 and then we're gonna have another
04:46 - column right next to that so this is our
04:48 - left column this is a right column and
04:50 - this is going to say preview
04:55 - and these are going to be text-align to
04:56 - left so these look pretty good of course
04:59 - we can do a little bit of style changes
05:00 - to make this you know have some margin
05:02 - at the top have this have some MT and -
05:06 - for for margin at the top mm-hmm
05:10 - nothing too crazy but before we start
05:14 - diving into laying out the text area in
05:17 - the preview section let's go back to
05:19 - that style dot CSS and just give the
05:21 - page a little bit more aesthetically
05:24 - pleasing styles so one I'm going to just
05:26 - copy and paste in is a linear gradient
05:29 - for the background and that is basically
05:32 - going to make it look a little bit nicer
05:33 - for background I don't know if that's a
05:35 - not a UX expert but it looks pretty nice
05:37 - I guess
05:39 - and I'm just gonna go ahead and just
05:40 - give like a hard-coded height to this
05:42 - just so that doesn't keep repeating and
05:46 - inside the body what I'm also going to
05:47 - do is I'm going to include that font
05:50 - family called libri Franklin which is
05:52 - granted from that Google web font that
05:54 - we've brought in just to make the font
05:56 - look a little bit nicer
05:58 - all right and then secondly inside the
06:01 - style I'm just gonna add a light clasp
06:02 - which is just going to be used for
06:04 - making the text white and maybe also
06:07 - adding some drop shadow to that text so
06:11 - basically light class is gonna have a
06:12 - text shadow and it's gonna be white so
06:15 - in here I could just go to all my H ones
06:17 - and just give it a class of light and
06:19 - make those look a little bit nicer cool
06:22 - so the first thing we want to do is if
06:26 - you remember in that example I showed on
06:28 - this left column we had a text area so
06:30 - let's just go ahead and add a text area
06:32 - here the user can type in their markdown
06:38 - that text area let's just go ahead and
06:40 - declare class info so we can style it
06:46 - so down at the bottom here I'm gonna say
06:48 - let's remove all the stuff was we don't
06:50 - need it time to scope this and I'm going
06:52 - to do class info and just give it a
06:55 - height of 400 pixels and a width of a
06:57 - hundred percent for now
07:00 - have a text area which again both of
07:03 - those styles are showing up
07:06 - hmm and then let's just go ahead and add
07:08 - a little bit of pasady to the background
07:12 - just so it's not so write up a white for
07:16 - the text area I don't want it to be
07:17 - resizable so resize is none and that'll
07:21 - get rid of that little resize icon at
07:22 - the bottom
07:25 - then additionally let's give it a orange
07:29 - order
07:34 - you'd be given like two pixels for that
07:36 - or something
07:38 - outline of nun
07:41 - so then we click on it's not outlined
07:44 - and I think that should be okay for the
07:48 - text area so on the right column what we
07:53 - want to do is declare a div which we're
07:55 - going to pretty much be putting our mark
07:56 - down in so I'm going to say div that's
07:59 - also going to be a class info
08:02 - I'll just in that dip right there and
08:04 - say this and we should get
08:07 - a nice-looking preview area now
08:11 - and basically what we want to do here is
08:14 - inside of this div let's just render out
08:16 - markdown and again we haven't defined
08:19 - this yet so let's go to our actual
08:22 - component script area and we're going to
08:24 - say data that's going to return a object
08:27 - that has a markdown property
08:32 - and I'll say that in basically
08:34 - it's just going to render out whatever
08:35 - markdown is
08:40 - next step is we want to kind of bind the
08:41 - text area to this markdown data property
08:44 - so what we can do is inside the text
08:47 - area a directive you can use in view is
08:50 - called v-model and I'm just going to
08:52 - pass that markdown so now basically
08:54 - whatever I type into markdown it's going
08:55 - to be rendered on the right side so if I
08:57 - type in like hello world
09:02 - you
09:04 - that okay so we're making some good
09:07 - progress little baby steps now at this
09:10 - point we haven't really touched our mark
09:12 - down directives but that's what we're
09:14 - going to be doing now so if we go back
09:16 - to our main DJ s
09:21 - let's go ahead and just pretend that we
09:23 - have a directive already declare it so
09:25 - I'm gonna say import markdown from at
09:28 - slash directive slash markdown so we
09:31 - assume that there's a file called
09:32 - markdown there and we want to define
09:35 - that inside of our view app as a
09:37 - directive called markdown
09:41 - and just go ahead and pass down that
09:42 - markdown object and say that this should
09:45 - crash because we haven't created it yet
09:47 - and basically what this is doing is
09:49 - we're just telling view if you see the
09:51 - keyword be marked down anywhere just go
09:55 - ahead and use this markdown object that
09:56 - we're gonna declare so going back to our
09:59 - code let's make that folder called
10:01 - directives and let's make that file
10:03 - called markdown j/s and then in here
10:07 - inside this markdown J's file I can just
10:09 - do export default and object save that
10:14 - and now at this point we are still
10:17 - working
10:19 - and kind of the last piece of that
10:20 - puzzle is now that we have the ability
10:21 - to use that markdown directive let's use
10:24 - the directive so very similar to this V
10:27 - model which is a directive that's built
10:29 - in the view we just made a custom
10:31 - directive which we can declare just by
10:33 - putting V markdown so now this div the
10:38 - be marked on directive is going to be
10:39 - applied to O so for those who don't
10:42 - really understand what directives are
10:43 - basically again you bind them to your
10:45 - Dom elements and they're going to run
10:48 - some code when stuff happens so one of
10:50 - the Hooksett a directive provides us is
10:52 - the bind hook so inside here basically
10:56 - when the directive is bound to the B
10:58 - node slash the Dom element it's going to
11:00 - run and this is basically only going to
11:02 - run once when the component is kind of
11:04 - like mounted so if you notice here it
11:08 - printed out this info div now that we
11:11 - have this element we can do things to
11:13 - the text of the element you kind of
11:15 - modify it and just to kind of further
11:18 - demonstrate that let's go back to our
11:19 - app table view and I'm going to add some
11:22 - markdown text so hello world with a
11:27 - newline character at the end and if I
11:29 - save that
11:30 - now notice here it's printing out hello
11:33 - world in the side of this element more
11:37 - specifically if I want to do text
11:39 - content or something like that it's
11:41 - going to print out that text content of
11:42 - hello world
11:45 - cool so what are we doing or how are we
11:48 - planning to pars this markdown language
11:51 - and print out HTML one way we can do it
11:54 - now again I don't know if this is the
11:55 - best way is we can just use regex
11:59 - so basically we declare some rules we
12:02 - declare what we need to replace those
12:05 - strings that we find width and then we
12:07 - run it once over our element
12:09 - so the kind of show you a very basic
12:11 - example let's try to process this one
12:13 - with the four hash symbols alright I'll
12:16 - just make it six hash symbols for now
12:18 - so make it six save that so inside of
12:22 - our buying component what we want to do
12:25 - is we want to get the current text so L
12:27 - dot text content and we want to build up
12:33 - some HTML so hTML is a variable equal to
12:37 - an empty string for now and we want to
12:39 - kind of replace
12:44 - text with some regex expression so I'm
12:47 - going to say hTML is equal to text out
12:49 - replace give it a regex expression and
12:51 - then also give it some string
12:55 - you
12:58 - and then I'll explain this
13:00 - and then after we have this HTML where
13:02 - we've replaced our regex with Dom
13:04 - elements we can just say Elva inner HTML
13:06 - equals the HTML in fact let's just do
13:10 - let HTML here and we just get rid of
13:13 - that middleman
13:15 - okay so for those of you who aren't that
13:18 - familiar with regex let's just go ahead
13:22 - and move on to this red X tester online
13:24 - thing where we can play around with it
13:26 - to kind of understand what we're doing
13:29 - so if we have some test string that
13:31 - looks like this fact I have too many
13:34 - hash symbols in it so let me go back and
13:36 - remove that
13:38 - well we have some test string that looks
13:41 - like this how do we grab any string that
13:43 - starts with six hash symbols and then
13:45 - replace it with something else well
13:46 - first of all we need to write regex
13:49 - which is going to find six hash symbols
13:52 - and then that regex expression is going
13:56 - to be followed by a optional space
14:02 - then what we want to do is grab and
14:04 - group everything that's after that that
14:08 - pretty much we can use a character class
14:09 - here and say everything that's not a new
14:11 - line and then group that so we can grab
14:14 - it and then followed by a new line and
14:16 - that is going to be our regex
14:19 - mmm so again notice here we have six
14:21 - hashes of space we have any character
14:24 - that's not the newline one or more which
14:27 - is this we're grouping it so that we can
14:29 - actually extract it in our replace
14:31 - method and then finally we end with a
14:33 - newline so if I were to take this and
14:35 - just plop it down into our regex here
14:38 - and save it going back to our preview er
14:41 - notice that this is now replaced
14:46 - was kind of the demonstrate we found the
14:48 - correct regex here and we replaced it
14:50 - but we want to take that group and wrap
14:54 - it in an h6 right so instead we can do
14:56 - h6
14:58 - and then inside these Dom elements or
15:01 - this at XML we could just do money sign
15:04 - one to grab the first grouping which is
15:06 - here so now when I say this
15:09 - notice that HelloWorld is printed out
15:12 - and in h6
15:14 - tag so if I were to inspect this notice
15:16 - that h6 is here inside HTML and we are
15:19 - currently processing our first markdown
15:22 - rule
15:25 - cool so now at this point
15:28 - need to declare a bunch of different
15:30 - rules to be able to process all the
15:31 - different regex or markdown rules right
15:35 - so here I'm gonna say constant rolls is
15:36 - equal to an array of arrays and that
15:40 - first entry in the array is going to be
15:42 - our reg X I take this boom and our
15:46 - second entry is going to be what we're
15:47 - replacing it with so take this and boom
15:55 - let's try get rid of those extra things
15:58 - and what we can do is just loop over all
15:59 - of our rules and do the same logic here
16:02 - on line 9 so I'm going to say rules dot
16:04 - for each
16:06 - and roll template
16:10 - this is just a raid deconstructing and
16:12 - then I could just go ahead in basically
16:14 - run the same command but instead of
16:16 - hard-coding these I'm going to say role
16:17 - templates
16:20 - cool so if I say this you should get the
16:23 - same outcome
16:24 - but now we've abstracted our rules in
16:26 - such a way that we can simply just add
16:28 - some more so if we were to go back and
16:32 - go ahead and try to add like a role for
16:34 - just one hash symbol notice that this
16:38 - reg X is not being fixed because we have
16:41 - an editor roll forward so if I go here
16:43 - and just add one hash this is going to
16:46 - be h1 with h1
16:51 - hmm notice that that it's gonna be an h1
16:53 - now so before we type out all the
16:56 - different rules which is just basically
16:57 - knowing how they do regex and I'm not
16:59 - going to probably gonna go over all
17:01 - these since some of them get a little
17:02 - bit complicated one thing I'll notice is
17:05 - that as you type different stuff
17:08 - it's not updating in the preview and
17:10 - that is because this is only calling
17:12 - once when the directive binds and the
17:14 - Dom element is put into the page so it's
17:17 - never actually going to re-render this
17:18 - stuff
17:22 - so to kind of fix that I don't know if
17:25 - this is a proper solution I'm sure
17:26 - there's a way to make our directive a
17:28 - little bit more complicated to do this
17:31 - dynamically such as like watching port
17:35 - in fact this is maybe why you may want
17:37 - to use a prop instead I mean a component
17:40 - instead but I'm not sure if you can
17:41 - access the Dom from a component but
17:45 - anyway what we can do is we want to just
17:48 - basically re render this Dom element
17:50 - anytime markdown changes right so one
17:53 - thing we could do is just bind key to
17:57 - this
17:59 - and I think we could just give it
18:00 - markdown so basically anytime markdown
18:02 - changes this is going to re-render our
18:04 - preview over here if I save this
18:09 - as I type different stuff
18:14 - notice that it's rerender on the right
18:19 - at this point we can just go ahead and
18:21 - copy and make those other rules so H
18:27 - five four three two
18:30 - then over here we can save 5 4 3 2 1
18:34 - save this
18:37 - verify that this is working one two
18:43 - three or five
18:51 - a b c e okay
18:55 - well so we have basically a preview are
18:58 - good to go
18:59 - the last step is just gonna be updating
19:01 - all these roles to UM support all the
19:03 - different markdown I don't know if I
19:05 - want to go through all the different
19:06 - rules because honestly it's just write
19:08 - checks so you may want to just take a
19:09 - tutorial on regex but it's basically
19:11 - going to be the very very similar logic
19:13 - so I'll do maybe like one or two so one
19:17 - regex you should be able to do is bold
19:21 - so what we could do here is we're gonna
19:23 - do find me a string which has stars
19:29 - let me just get rid of all this and try
19:32 - again so find me a string that has some
19:33 - stars
19:36 - inside the center of those we want any
19:38 - text that is not a star
19:41 - so slash star
19:45 - in fact I think I need to escape the
19:47 - stars and you one or more so I think
19:51 - this should work I save this and make
19:56 - sure I change this to a bold tag instead
19:58 - now and of course make sure you have the
20:01 - grouping there oh let me add that
20:03 - grouping
20:05 - you
20:08 - if I were the type stars are bold boom
20:11 - ok bulbs working now and I could easily
20:13 - just do that with like italics right so
20:15 - I'll just go and do just a single slash
20:18 - is going to be italics
20:23 - and save that file
20:27 - we have bold we have italics
20:31 - awesome
20:34 - that'd be nice to have is we want to
20:35 - make sure every newline character wrap
20:37 - something in a paragraph so if I just go
20:40 - back here and say wrap my content or my
20:44 - group in a paragraph if it is sandwiched
20:47 - between a newline character
20:50 - so I'm going to say give me the
20:53 - parentheses give me every character that
20:55 - is not a newline character like so
21:01 - give me one or more of those and then
21:02 - also give me the it has to end with the
21:04 - newline character
21:06 - and let's see that this works as indeed
21:16 - okay so basically it's going to grab
21:20 - the ends with the new line is gonna put
21:22 - on a new paragraph after it does all
21:24 - this stuff I don't know if this is the
21:26 - proper way to do it it's just one one
21:28 - solution so we could go through and
21:30 - basically do all the different styles
21:32 - but what I'm gonna do is I'm gonna I'm
21:34 - just gonna copy and paste the remaining
21:37 - roles in and we should just be able to
21:39 - kind of wrap up this tutorial cuz I
21:41 - don't wanna spend too much time doing
21:42 - regex
21:42 - in this tutorial
21:46 - hmm so now at this point we should have
21:48 - access to all those different the mark
21:51 - 10 that we saw before so as an example
21:53 - we can do
21:56 - the link
22:00 - you
22:03 - so now we have links which is this one
22:06 - down here like 20 images like we saw
22:10 - before we could do lists like we saw
22:14 - before
22:14 - [Music]
22:21 - awesome so that basically wraps up our
22:25 - markdown preview tutorial again if you
22:28 - have a better suggestion as to how I
22:30 - could be making this directive I know
22:32 - you can probably get super complicated
22:34 - using javascript and like changing Dom
22:37 - elements and whatnot but I wanted to
22:39 - keep it kind of simple as I could just
22:41 - using regex and simple binding method
22:44 - again like using this holing key maybe
22:47 - that's not the best approach to kind of
22:49 - rerender in this be sure to subscribe
22:51 - and also I'll put my Twitter link below
22:54 - which is also where I kind of give out
22:56 - updates and then the github repo is also
22:58 - going to be in the description below
23:00 - alright thank you so much for watching

Cleaned transcript:

a coders and welcome back to another view Jas tutorial where I'm going to show you how to build a markdown previewer app so just to kind of show you what we're building on the left here we have a text area where we can type our markdown and if you're not familiar with markdown basically it's a hyper text language where it compiles down to HTML and in markdown you can do a bunch of different stuff such as create titles so this is going to make an h3 title I do one of them is going to make an h1 title and on the right this is kind of the HTML that the markdown is going to be rendered into after it compiles just show some of them we can do you know of course titles we can do bullet points so I'll say one two three we can do this random paragraph text copy and paste that a bunch of course we could do unordered lists here so one two three demonstrate links we could do something like this so I'll say Google comm and that's gonna be a hyperlink tool google.com fact I think I mixed that up let me this there we go that's the correct way to do it so you can do links you can do images I simply doing something like this and notice that we don't have an image here so let me just go to like Google Images and say view image go to images and I'm going to go here and just copy this image URL so copy images rest and then instead I'm going to paste this a view so that's just kind of showing off like what we're building we're not going to use any external markdown packages that exist or else this tutorial will probably be like five minutes we're going to try to create our own markdown directive and we're going to use regex to kind of PARs this text and rerender HTML on the right over here so this is a good tutorial to kind of practice writing directives practice writing view components that interact with each other etc so let's get started building out this preview I went ahead and just created a new project using view CLI origin 3 and using the generated code let's just go ahead and alter some stuff to make this work so inside app view I'm going to just remove our hello world stuff and we can just go ahead and get started one thing I will note that I already did is inside our index.html I went ahead and just brought in a Google web font in a bootstrap CSS file so that we can use the CSS grid to kind of lay out our application so nothing nothing too crazy going on in here and then also what I'm gonna do before we start going too much further is inside our assets folder I'm going to add a style that CSS file and I'm going to import that in our main J's file so I'm gonna say import dot assets style that CSS just so that we can kind of declare some toplevel assets if we need them so with that being said let's start by going into app dot view and in order to achieve what we saw with what we're going to build we need to kind of start laying out some Styles so the first thing I'm going to lay out is I'm going to say a class is equal to container which is a bootstrap class and that basically will just make sure that everything is wrapped and kind of centered on the page once we have a container class lined out we can then do class of row and inside your rose that's where you can declare your columns so on the first row we're just going to make this a class of column so make sure it takes up all the 12 grid locations and we're going to give this an h1 of markdown preview and if I save this we should see markdown preview pop up at the top one thing we also have in bootstrap is a text align so I'm going to say text Center just to make sure that is aligned in the center awesome so that is our first row for our second row we want to split that into two columns so as I call em d6 inside this each tag I'm going to say markdown and instead of h1 I'm gonna do h4 and then we're gonna have another column right next to that so this is our left column this is a right column and this is going to say preview and these are going to be textalign to left so these look pretty good of course we can do a little bit of style changes to make this you know have some margin at the top have this have some MT and for for margin at the top mmhmm nothing too crazy but before we start diving into laying out the text area in the preview section let's go back to that style dot CSS and just give the page a little bit more aesthetically pleasing styles so one I'm going to just copy and paste in is a linear gradient for the background and that is basically going to make it look a little bit nicer for background I don't know if that's a not a UX expert but it looks pretty nice I guess and I'm just gonna go ahead and just give like a hardcoded height to this just so that doesn't keep repeating and inside the body what I'm also going to do is I'm going to include that font family called libri Franklin which is granted from that Google web font that we've brought in just to make the font look a little bit nicer all right and then secondly inside the style I'm just gonna add a light clasp which is just going to be used for making the text white and maybe also adding some drop shadow to that text so basically light class is gonna have a text shadow and it's gonna be white so in here I could just go to all my H ones and just give it a class of light and make those look a little bit nicer cool so the first thing we want to do is if you remember in that example I showed on this left column we had a text area so let's just go ahead and add a text area here the user can type in their markdown that text area let's just go ahead and declare class info so we can style it so down at the bottom here I'm gonna say let's remove all the stuff was we don't need it time to scope this and I'm going to do class info and just give it a height of 400 pixels and a width of a hundred percent for now have a text area which again both of those styles are showing up hmm and then let's just go ahead and add a little bit of pasady to the background just so it's not so write up a white for the text area I don't want it to be resizable so resize is none and that'll get rid of that little resize icon at the bottom then additionally let's give it a orange order you'd be given like two pixels for that or something outline of nun so then we click on it's not outlined and I think that should be okay for the text area so on the right column what we want to do is declare a div which we're going to pretty much be putting our mark down in so I'm going to say div that's also going to be a class info I'll just in that dip right there and say this and we should get a nicelooking preview area now and basically what we want to do here is inside of this div let's just render out markdown and again we haven't defined this yet so let's go to our actual component script area and we're going to say data that's going to return a object that has a markdown property and I'll say that in basically it's just going to render out whatever markdown is next step is we want to kind of bind the text area to this markdown data property so what we can do is inside the text area a directive you can use in view is called vmodel and I'm just going to pass that markdown so now basically whatever I type into markdown it's going to be rendered on the right side so if I type in like hello world you that okay so we're making some good progress little baby steps now at this point we haven't really touched our mark down directives but that's what we're going to be doing now so if we go back to our main DJ s let's go ahead and just pretend that we have a directive already declare it so I'm gonna say import markdown from at slash directive slash markdown so we assume that there's a file called markdown there and we want to define that inside of our view app as a directive called markdown and just go ahead and pass down that markdown object and say that this should crash because we haven't created it yet and basically what this is doing is we're just telling view if you see the keyword be marked down anywhere just go ahead and use this markdown object that we're gonna declare so going back to our code let's make that folder called directives and let's make that file called markdown j/s and then in here inside this markdown J's file I can just do export default and object save that and now at this point we are still working and kind of the last piece of that puzzle is now that we have the ability to use that markdown directive let's use the directive so very similar to this V model which is a directive that's built in the view we just made a custom directive which we can declare just by putting V markdown so now this div the be marked on directive is going to be applied to O so for those who don't really understand what directives are basically again you bind them to your Dom elements and they're going to run some code when stuff happens so one of the Hooksett a directive provides us is the bind hook so inside here basically when the directive is bound to the B node slash the Dom element it's going to run and this is basically only going to run once when the component is kind of like mounted so if you notice here it printed out this info div now that we have this element we can do things to the text of the element you kind of modify it and just to kind of further demonstrate that let's go back to our app table view and I'm going to add some markdown text so hello world with a newline character at the end and if I save that now notice here it's printing out hello world in the side of this element more specifically if I want to do text content or something like that it's going to print out that text content of hello world cool so what are we doing or how are we planning to pars this markdown language and print out HTML one way we can do it now again I don't know if this is the best way is we can just use regex so basically we declare some rules we declare what we need to replace those strings that we find width and then we run it once over our element so the kind of show you a very basic example let's try to process this one with the four hash symbols alright I'll just make it six hash symbols for now so make it six save that so inside of our buying component what we want to do is we want to get the current text so L dot text content and we want to build up some HTML so hTML is a variable equal to an empty string for now and we want to kind of replace text with some regex expression so I'm going to say hTML is equal to text out replace give it a regex expression and then also give it some string you and then I'll explain this and then after we have this HTML where we've replaced our regex with Dom elements we can just say Elva inner HTML equals the HTML in fact let's just do let HTML here and we just get rid of that middleman okay so for those of you who aren't that familiar with regex let's just go ahead and move on to this red X tester online thing where we can play around with it to kind of understand what we're doing so if we have some test string that looks like this fact I have too many hash symbols in it so let me go back and remove that well we have some test string that looks like this how do we grab any string that starts with six hash symbols and then replace it with something else well first of all we need to write regex which is going to find six hash symbols and then that regex expression is going to be followed by a optional space then what we want to do is grab and group everything that's after that that pretty much we can use a character class here and say everything that's not a new line and then group that so we can grab it and then followed by a new line and that is going to be our regex mmm so again notice here we have six hashes of space we have any character that's not the newline one or more which is this we're grouping it so that we can actually extract it in our replace method and then finally we end with a newline so if I were to take this and just plop it down into our regex here and save it going back to our preview er notice that this is now replaced was kind of the demonstrate we found the correct regex here and we replaced it but we want to take that group and wrap it in an h6 right so instead we can do h6 and then inside these Dom elements or this at XML we could just do money sign one to grab the first grouping which is here so now when I say this notice that HelloWorld is printed out and in h6 tag so if I were to inspect this notice that h6 is here inside HTML and we are currently processing our first markdown rule cool so now at this point need to declare a bunch of different rules to be able to process all the different regex or markdown rules right so here I'm gonna say constant rolls is equal to an array of arrays and that first entry in the array is going to be our reg X I take this boom and our second entry is going to be what we're replacing it with so take this and boom let's try get rid of those extra things and what we can do is just loop over all of our rules and do the same logic here on line 9 so I'm going to say rules dot for each and roll template this is just a raid deconstructing and then I could just go ahead in basically run the same command but instead of hardcoding these I'm going to say role templates cool so if I say this you should get the same outcome but now we've abstracted our rules in such a way that we can simply just add some more so if we were to go back and go ahead and try to add like a role for just one hash symbol notice that this reg X is not being fixed because we have an editor roll forward so if I go here and just add one hash this is going to be h1 with h1 hmm notice that that it's gonna be an h1 now so before we type out all the different rules which is just basically knowing how they do regex and I'm not going to probably gonna go over all these since some of them get a little bit complicated one thing I'll notice is that as you type different stuff it's not updating in the preview and that is because this is only calling once when the directive binds and the Dom element is put into the page so it's never actually going to rerender this stuff so to kind of fix that I don't know if this is a proper solution I'm sure there's a way to make our directive a little bit more complicated to do this dynamically such as like watching port in fact this is maybe why you may want to use a prop instead I mean a component instead but I'm not sure if you can access the Dom from a component but anyway what we can do is we want to just basically re render this Dom element anytime markdown changes right so one thing we could do is just bind key to this and I think we could just give it markdown so basically anytime markdown changes this is going to rerender our preview over here if I save this as I type different stuff notice that it's rerender on the right at this point we can just go ahead and copy and make those other rules so H five four three two then over here we can save 5 4 3 2 1 save this verify that this is working one two three or five a b c e okay well so we have basically a preview are good to go the last step is just gonna be updating all these roles to UM support all the different markdown I don't know if I want to go through all the different rules because honestly it's just write checks so you may want to just take a tutorial on regex but it's basically going to be the very very similar logic so I'll do maybe like one or two so one regex you should be able to do is bold so what we could do here is we're gonna do find me a string which has stars let me just get rid of all this and try again so find me a string that has some stars inside the center of those we want any text that is not a star so slash star in fact I think I need to escape the stars and you one or more so I think this should work I save this and make sure I change this to a bold tag instead now and of course make sure you have the grouping there oh let me add that grouping you if I were the type stars are bold boom ok bulbs working now and I could easily just do that with like italics right so I'll just go and do just a single slash is going to be italics and save that file we have bold we have italics awesome that'd be nice to have is we want to make sure every newline character wrap something in a paragraph so if I just go back here and say wrap my content or my group in a paragraph if it is sandwiched between a newline character so I'm going to say give me the parentheses give me every character that is not a newline character like so give me one or more of those and then also give me the it has to end with the newline character and let's see that this works as indeed okay so basically it's going to grab the ends with the new line is gonna put on a new paragraph after it does all this stuff I don't know if this is the proper way to do it it's just one one solution so we could go through and basically do all the different styles but what I'm gonna do is I'm gonna I'm just gonna copy and paste the remaining roles in and we should just be able to kind of wrap up this tutorial cuz I don't wanna spend too much time doing regex in this tutorial hmm so now at this point we should have access to all those different the mark 10 that we saw before so as an example we can do the link you so now we have links which is this one down here like 20 images like we saw before we could do lists like we saw before awesome so that basically wraps up our markdown preview tutorial again if you have a better suggestion as to how I could be making this directive I know you can probably get super complicated using javascript and like changing Dom elements and whatnot but I wanted to keep it kind of simple as I could just using regex and simple binding method again like using this holing key maybe that's not the best approach to kind of rerender in this be sure to subscribe and also I'll put my Twitter link below which is also where I kind of give out updates and then the github repo is also going to be in the description below alright thank you so much for watching
