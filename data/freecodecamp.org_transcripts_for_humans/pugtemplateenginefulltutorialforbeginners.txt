With timestamps:

00:01 - hey guys hey going my name is dumb and
00:04 - welcome to a pug tutorial so bye pug I
00:08 - don't mean the dog I actually mean the
00:10 - HTML preprocessor now this means that
00:13 - it's basically a language that will
00:16 - convert itself into native HTML code and
00:20 - you want to use Pug because it is
00:23 - arguably a lot cleaner to read and also
00:25 - code in and it features some extra
00:29 - powerful functionality such as loops
00:31 - JavaScript objects JavaScript logic
00:34 - mix-ins templates and so on so to
00:38 - actually use pug you can do so by
00:40 - installing the pug command line
00:43 - interface and this is done using NPM the
00:46 - node package manager so inside your
00:50 - terminal you want to tap out NPM and
00:53 - they install this is assuming that you
00:56 - actually have node installed on your
00:58 - machine for stopping an NPM install and
01:01 - then typing a pug - CLI the Pug
01:05 - command-line interface you can install
01:08 - poke you might want to also add the dash
01:11 - G flag to make that install globally now
01:14 - once that's done you will have Punk
01:18 - accessible via the command line by
01:21 - topping out Punk alright so in today's
01:25 - video I want to go over my directory
01:27 - structure and how I'm going to you know
01:30 - code things in the future so here I've
01:33 - got a folder called intro and I'm going
01:36 - to make a new directory inside here I'm
01:39 - gonna call this one HTML this will
01:41 - contain all the native HTML output that
01:45 - was generated by poke alright I press
01:48 - ENTER right here now I'm also going to
01:50 - create a new pug source file inside the
01:54 - root directory alright so I'm going to
01:56 - say ok new file and call this one index
01:59 - hug okay this will be translated to
02:04 - index dot HTML inside the HTML directory
02:09 - okay
02:10 - now the most basic or
02:14 - the most common pug commands you might
02:18 - see like the most common syntax is the
02:21 - doctype and in HTML and that right there
02:25 - in park will generate the doctype first
02:31 - little statement on the top of your HTML
02:36 - page all right so to actually compile
02:40 - this pug code into HTML we can start by
02:43 - using the pug command line interface so
02:46 - down here I'm inside the routes intro
02:49 - directory okay I'm gonna talk about PUC
02:52 - alright and then also add the dash W
02:56 - flag that means it's the watch flag it's
03:00 - going to watch for any file changes I
03:02 - make once I press save it's going to
03:04 - compile automatically without me doing
03:06 - anything I'm also going to watch that
03:08 - file or what are the files we're going
03:11 - to watch everything in the current
03:12 - directory so doc for slash everything in
03:14 - this root directory alright I'm also
03:18 - going to say where the output will be
03:21 - it's gonna be inside this HTML folder so
03:25 - I'm going to say - o and then say dot
03:29 - forward slash HTML so I'll put all my
03:31 - stuff inside the HTML folder okay
03:36 - I'm also gonna say - and then capital P
03:39 - and that will make the HTML code pretty
03:43 - printed with indentation line breaks and
03:46 - all that sort of stuff if I press ENTER
03:48 - right now we get it says watching
03:52 - indexed up park so I make a change is
03:55 - going to compile it's going to render
03:56 - the HTML called index.html copying the
04:01 - same file name from the pug for name
04:03 - okay so now inside this HTML folder
04:07 - I see index dot HTML I press on that and
04:10 - we get that doctype HTML you know
04:14 - statement up there okay and that is how
04:18 - you can use Park Hae you compile Park
04:20 - now you can structure your plug
04:22 - directories in the future I'm gonna make
04:23 - use of this sort of structure and
04:25 - obviously show you guys that
04:27 - to use this thing
04:31 - so in this one I want to talk about how
04:34 - to generate your own HTML tags and also
04:38 - how to insert different doctype
04:41 - declarations but first keep in mind that
04:44 - I'm using the pug watcher so when I save
04:47 - a pug file it's going to generate the
04:50 - corresponding output HTML file inside
04:53 - the HTML directory okay so it's like
04:58 - this pug file we can create or generate
05:01 - a duck type using the duck type shortcut
05:05 - so I'm going to say doctoral but that
05:09 - and then say HTML with a space and that
05:12 - what there will generate the standard
05:14 - html5 doctype declaration so if I save
05:18 - this one inside the output file we get
05:22 - that right there okay perfect
05:25 - we also got things such as XML so for
05:28 - example doctype XML we get the XML
05:32 - declaration we have also the
05:35 - transitional one save this one we get
05:38 - that right there we have strict all
05:43 - right and also a few more which you can
05:46 - see inside the private documentation so
05:48 - I'll make this back to HTML that's the
05:51 - most probably common one to see and
05:55 - probably what you're gonna work with so
05:58 - with this we're going to start creating
06:01 - some HTML tags now in regulate Simo to
06:06 - make the HTML tag you type out all right
06:09 - HTML opening and an HTML closing okay
06:12 - with bug it's literally just less than
06:16 - half this amount of coding so in pug you
06:20 - talked about HTML like that and it's
06:23 - going to generate both the opening and
06:25 - closing tag for you if the closing tag
06:28 - is required so if I save this one we get
06:32 - in the output 'html like that pretty
06:35 - cool so that's that I'm actually making
06:38 - HTML tag you just talked about boom the
06:40 - HTML tag name now to actually add a
06:44 - child elements of another parent element
06:47 - for example adding the head tag inside
06:51 - here we can do that by first indenting
06:55 - on a new line
06:57 - so press enter here and then an indent
07:00 - okay here we put the name of the child
07:05 - element or child tag so typing at head
07:08 - right here and saving this one will give
07:12 - us the desired output for example boom
07:14 - HTML and then head inside there if all
07:17 - to get rid of the Indian make that onto
07:20 - the first character yeah like that if I
07:22 - save this one we get no errors but in
07:26 - here we get them on two separate lines
07:30 - they're two separate elements not
07:31 - connected in one bit so make sure you
07:34 - use an indent for child elements it's
07:38 - very important okay
07:39 - so we'll do the same thing for the body
07:41 - tag just like that save this one and we
07:44 - get this output right there
07:46 - pretty straightforward now in the body
07:50 - I'm gonna make a few tags some h1 set
07:53 - some peas and also some unordered lists
07:55 - okay so it's right here gonna press
07:59 - ENTER and add a new indents for a child
08:03 - element I'm gonna make an h1 tag h1 save
08:08 - this one check the output and we get
08:11 - that right there now to actually put
08:13 - text inside here we can do so quite
08:16 - easily using pug we'll put a space in
08:19 - front of the tag name and then Watson
08:22 - text for example
08:23 - welcome to decode okay I'll save this
08:27 - one we get that but they're perfect now
08:32 - let's read a paragraph tag so below here
08:37 - I'm gonna make a new paragraph tag now
08:40 - if I was to say okay this is a paragraph
08:44 - tag that works fine we see that right
08:48 - there now if I want to actually have
08:50 - multiple lines of text if I tapia and
08:53 - this is a new
08:55 - save this one and we get this a bit
09:01 - funny so it's it's saying and as a as a
09:04 - tag name and playing that text inside
09:06 - there inside the and tag so to actually
09:11 - generate some multi-line text using pug
09:13 - you put a full-stop after the element
09:18 - name or the tag name like that and then
09:21 - you drop your text on to the second line
09:25 - indent it and now you have your
09:30 - multi-line text okay so now we have this
09:33 - right here if I save this one the
09:36 - airport looks like this which was our
09:39 - intention okay so you use that dot for
09:42 - multi-line and put it on the second line
09:44 - and also indents it okay
09:46 - now you might commonly see unordered
09:50 - lists or lists in general on hug
09:53 - examples or documentation so to actually
09:56 - make a list we can do so using the UL
09:59 - and order this tag and then put some
10:03 - child elements inside yeah we say oh I
10:05 - for list item yep this is item one and
10:10 - then so on okay two and then three
10:15 - we save this one and we get that right
10:18 - there okay so pretty straightforward
10:21 - stuff and quite interesting so it looks
10:24 - a bit like sass I guess there's no
10:26 - braces no you know angle brackets or
10:29 - quite clean and simple
10:34 - so in this one I want to talk about how
10:37 - to add IDs and classes to HTML elements
10:41 - so just keep in mind that I have a pug
10:43 - watcher have been run now which means
10:46 - when I saved this index park file it
10:49 - will automatically generate the output
10:51 - file inside the HTML directory under
10:53 - index dot HTML all right so let's get
10:57 - right into it we can start by making a
10:59 - simple HTML joking with a doctype at
11:02 - opening HTML tag a head tag and also a
11:06 - body tag all right so if I save this one
11:09 - we get this India all right so let's
11:13 - define a h1 header tag and give it an ID
11:17 - now we can do this using CSS selector
11:20 - syntax all right this means I can
11:23 - actually go inside here and I can say
11:25 - okay first to clear the element name for
11:28 - example h1 then a hash tag followed by
11:32 - the ID okay so I'm gonna say h1 hash tag
11:36 - and there's something like page sorry
11:39 - page title alright and did something
11:42 - like page title goes here now as the
11:47 - content so if I was to save this one in
11:51 - the output we see that paginates the h1
11:54 - with an ID of page title automatically
11:57 - for us so that's quite convenient right
11:59 - there and we can do the same thing with
12:01 - classes once again using the CSS
12:04 - selector syntax so down here I'm gonna
12:09 - make a few paragraphs and give it the
12:11 - same class name so we'll say okay P
12:13 - declare the element name followed by a
12:15 - full stop by a dot to define or declare
12:19 - this is a is gonna be a class so P dot
12:23 - and then at the class name for example
12:25 - something like big para and then some
12:28 - text so AB dot and we'll say he is some
12:33 - kicks for my big paragraph okay so now
12:39 - if I was to copy this one
12:41 - and do some more so here is some more
12:45 - text okay so now we have two paragraph
12:50 - tags with an O with a class name so if I
12:52 - saved this one in the output we get that
12:55 - right there okay once again quite
12:58 - convenient now we can also do something
13:01 - where we don't actually declare what the
13:05 - element type is okay so false to go down
13:08 - here under this paragraph Tokyo and I
13:11 - was to say something like something like
13:16 - a display box
13:17 - okay so display box as a class with no
13:21 - element here all right if I just save
13:25 - this for more quickly and check the
13:27 - output we get a div with a class of
13:31 - display box so why is that well in pug
13:35 - what it does is that actually um there
13:38 - are actually default any classes or any
13:41 - IDs that you don't specify an element
13:44 - with as a div so it knows that a div is
13:47 - a common element to use so if you talk
13:50 - about the class name with no actual you
13:52 - know yeah
13:54 - it'll make a div conveniently for you to
13:57 - try and guess what you actually meant if
13:58 - that makes sense
13:59 - you can of course just top out div and
14:01 - you'll have the same effects all right
14:03 - and the same thing works with IDs as
14:05 - well so down here I can say okay my only
14:09 - div for example if I save this one we
14:13 - get the div ID my only div alright so
14:18 - that is how you can declare classes and
14:20 - ID's on your elements using Punk
14:25 - so in this one I want to talk about how
14:28 - to add attributes to HTML elements and
14:31 - also talk about some of the advanced
14:34 - features that you'll find in pug in
14:36 - relation to attributes so I just keep in
14:40 - mind that I have the the pug command
14:43 - line tool running with the watch flag
14:45 - which means that when I save this index
14:48 - pug file it's going to generate the
14:51 - index.html file inside the HTML
14:53 - directory alright so let's start inside
14:58 - here I've got a doctype HTML tag head
15:02 - and then body
15:03 - ok so let's demonstrate attributes using
15:08 - an input element so we'll say okay buddy
15:11 - and then add an input field right there
15:13 - if I save this one and check the output
15:16 - we start with that right there so let's
15:20 - make this input field a password field
15:23 - and to give it a name so back inside
15:27 - here
15:28 - let's put braces next to the input field
15:32 - sorry input tag and then write out some
15:35 - attributes so say okay input and give it
15:39 - a type of password so this syntax is the
15:45 - same as HTML once you get inside the
15:47 - bracket so that's saying input type
15:49 - password I'll save this one and check
15:52 - the output we get that right there as
15:54 - expected okay now we can add multiple
15:57 - attributes to a HTML element by putting
16:00 - a space after that so you can say okay
16:03 - type is password and the name is INPE
16:08 - PWD so if i save this one and check the
16:13 - output we get both attributes there
16:16 - perfect
16:17 - all right now in terms of the advanced
16:22 - features of Pug with attributes one of
16:25 - them is the the use of JavaScript inside
16:29 - the attribute value so for example let's
16:33 - make a new attribute and we call this
16:35 - one data
16:36 - - jeaious or JavaScript
16:39 - you know as an example equal to now here
16:42 - we're gonna use an ECMAScript 2015
16:45 - string string literal so let's put two
16:51 - tactics down here and inside here we can
16:55 - embed we can embed an expression so put
16:59 - a dollar sign followed by two curly
17:02 - braces now inside here we can put some
17:05 - JavaScript logic or an expression so
17:07 - let's say something like this we'll say
17:10 - if five is greater than 2 then we want
17:14 - to make the data jeaious attribute value
17:16 - something like okay otherwise let's make
17:20 - the value not okay right so now if I
17:24 - save this one and check the output we
17:27 - get data jeaious is equal to okay and
17:30 - that's because five years greater than 2
17:33 - let's make this if one is greater than
17:36 - two saving this one we get it is not
17:39 - okay all right so you can add JavaScript
17:43 - expressions or logic inside your
17:46 - attribute values all right so pretty
17:49 - cool in it now now you can also add
17:53 - classes to an element all at once so
17:57 - let's go down here make a new element
18:00 - we'll make a new div tag
18:02 - okay now up here though let's define a
18:06 - new JavaScript
18:08 - let's first actually in Denmark Oh
18:10 - properly put that down there
18:13 - alright so let's create a new JavaScript
18:17 - array we can add a dash here and that
18:20 - means that this line is gonna be a
18:21 - JavaScript line that's - and they will
18:24 - say Const
18:26 - my classes is equal to a typical array
18:30 - of strings all right so let's put an
18:32 - array here inside of yo we'll put the
18:34 - few elements we can say okay plus 1 plus
18:38 - 1 plus 2 and then class 3 all right so
18:43 - here we have defined a JavaScript array
18:45 - using the - alright now we can add all
18:51 - these classes
18:52 - do this development like this we can say
18:54 - okay once again using the braces we can
18:57 - say class so the class attributes
19:00 - similar to that right there is then
19:03 - equal to simply then my classes so if I
19:08 - save this one in the output we get a div
19:11 - and a class attribute of all these
19:15 - classes but they're separated by a space
19:18 - okay so quite convenient now if else to
19:22 - go back inside here and add a class to
19:25 - the beginning of this elements the
19:27 - traditional way so div and then dot
19:29 - something like I don't know my depth
19:33 - okay if I save this one we're defining a
19:37 - class here and also more classes inside
19:41 - here like that the airport looks like
19:44 - this we keep the initial my div class so
19:47 - that means that that right there is
19:51 - going to append to the current class
19:53 - list I so keep that in mind now we can
19:56 - do a similar sort of thing with inline
19:59 - styles so down here let's make a new div
20:03 - once again and up here let's make a new
20:08 - javascript object so once again using
20:11 - the dash to signify a line of JavaScript
20:14 - we can say okay
20:15 - - and then punched my Styles inside here
20:19 - in this object we can then define the
20:23 - CSS styles using javascript objects
20:26 - syntax so we can say ok let's make the
20:29 - text color as Reds put a comma let's set
20:34 - the background color it's gonna be blue
20:37 - alright now down here we could do
20:43 - virtually the same thing we can say okay
20:44 - div and then style its equal to my stars
20:49 - alright saving this one gives us that
20:53 - right there so we have this style
20:55 - attribute and then all these CSS Styles
20:58 - formatted nice and nearly for us okay so
21:01 - once again very convenient now we
21:06 - can also do again a similar thing using
21:09 - the attributes so we can actually define
21:13 - attributes as a JavaScript object and
21:15 - then put that on the actual element
21:19 - itself so let's make once again a new
21:22 - element this time let's make it an image
21:25 - element so IMG okay come up here let's
21:29 - define a new constant okay constants my
21:34 - attributes
21:35 - once again equal to a javascript object
21:38 - so we'll say okay my attributes let's
21:41 - put the attributes as a javascript
21:44 - object so we'll say okay SRC sauce is
21:47 - gonna be my photo dot PNG the alt text
21:54 - will be pcs my photo okay now to
21:58 - actually add this to the element we can
22:01 - put an ampersand okay attributes within
22:05 - brackets and pass in my attributes right
22:08 - here so a similar thing to the above
22:10 - examples but this song were actually
22:12 - using the and attribute syntax instead
22:14 - of a you know a bracket alright now if I
22:18 - save this one what do we get well we get
22:21 - boom that right there give me sauce my
22:24 - photo alt X this is my photo perfect
22:27 - alright so once again very convenient
22:29 - now one more thing let's talk about
22:32 - boolean attributes so things such as
22:35 - input type you know text and then have
22:39 - that being disabled or something like
22:44 - input type the check box and then make
22:47 - that check so those those single word
22:51 - boolean attributes okay
22:53 - so Dan yeah let's make a new input
22:56 - fields okay Cupid eight type of you know
22:59 - just text normal and let's make that
23:02 - text field disabled we can say okay
23:07 - disabled no need for a equals and then
23:10 - something else just disabled and then
23:12 - pug will automatically add that to the
23:15 - absolutely
23:15 - let us save this one what do we get we
23:18 - get that word top text and it's disabled
23:22 - now what if I was to change the duck
23:26 - type for this document to something like
23:30 - transition I know
23:33 - transitional does not support the single
23:36 - single word attributes so if I save this
23:39 - one what happens we'll check the output
23:41 - and this time we get disabled equals
23:44 - disabled so pug is going to
23:46 - automatically make sure that the output
23:49 - is valid for the actual document type
23:52 - which is obviously quite cool you know
23:56 - what one last thing with the attributes
23:58 - you can say okay disable it then equals
24:00 - false so goes away or true so keep that
24:08 - in mind all right boom right there
24:14 - so in this one I want to talk about how
24:17 - to work with CSS within your Pug HTML
24:20 - files this includes external CSS
24:24 - internal CSS and also inline CSS so
24:28 - let's get started just keep in mind that
24:30 - I have the pug watch chart running which
24:33 - means that when I saved an index Park
24:36 - file it gets outputted inside index.html
24:39 - inside the HTML directory alright so the
24:44 - index pug file let's start by declaring
24:46 - a document type
24:47 - so we'll say all right doctype HTML
24:50 - saving this gives us that in the airport
24:54 - alright let's begin with some HTML tags
24:59 - HTML heads and also a body now to
25:07 - include an internal sorry an external
25:10 - CSS file it's the same as doing it with
25:12 - regular HTML except it actually going to
25:15 - be adding the element using poke
25:18 - so let's first create a CSS file inside
25:21 - the HTML directory so we'll say okay new
25:24 - file call this one style dot CSS let's
25:29 - give the body a background color of
25:31 - black let's give it a font size of 36
25:37 - pixels and a font color of white
25:40 - all right so now we're going to include
25:43 - this CSS file inside this index.html
25:46 - file ok so inside your head tag you want
25:52 - to make a new link element and give it a
25:56 - few attributes the first one being
25:58 - around equal to stylesheet okay make a
26:03 - second one called href equal to star CSS
26:07 - saving this one generates in HTML a
26:11 - normal link element with two attributes
26:14 - rel and a trip now inside the HTML
26:18 - directory we've got style a CSS and also
26:21 - index to HTML so this is relative to the
26:24 - actual directory right there so now this
26:27 - H
26:28 - if I was to add some text inside the
26:31 - body just say one paragraph saying this
26:34 - is an HTML file saving this one gives us
26:39 - that result right there in the browser
26:41 - we get boom that right there so
26:46 - everything works as expected
26:48 - okay so that is how you can use external
26:50 - CSS with pub now internal CSS is
26:55 - essentially the same thing as normal
26:57 - HTML internal CSS but using the pub
27:00 - syntax to create a multi-line element so
27:05 - back inside the head tag we can create a
27:09 - new style element so we'll say alright
27:11 - style okay
27:13 - then put a dot two so this is going to
27:16 - be a multi-line HTML element putting an
27:19 - enter than a tab we can now start
27:21 - declaring our CSS rules so let's add
27:26 - some more rules for a paragraph tag so
27:29 - we'll say okay P and make the text color
27:32 - as being red and give it a
27:36 - text-decoration:underline all right so
27:41 - now saving this one gives us this result
27:43 - in HTML style and then that P star block
27:47 - right there in the browser we obviously
27:50 - get boom benefits okay now for internal
27:55 - sorry inline CSS we can do once again a
27:59 - very similar thing by going inside the
28:02 - index pack file and putting an attribute
28:05 - on the actual paragraph tag this will be
28:07 - the style attribute then we can do this
28:10 - one of two ways
28:11 - we can first do it the I guess normal
28:15 - way by putting a double quote and
28:17 - putting the actual Styles inside here
28:19 - for example let's just say that will
28:22 - give the text-align:center and we'll
28:24 - also give it an upper case
28:26 - transformation so text transform and
28:29 - then upper case alright saving this
28:33 - gives us this in the HTML inside the
28:36 - actual browser we obviously get boom
28:39 - those effects right there now we can
28:41 - also do it a separate way now we can do
28:44 - this also using a JavaScript object so
28:48 - let's define a new javascript object
28:51 - within pub by putting a dash and then
28:54 - writing the JavaScript on this line
28:56 - let's make a new constant and call this
28:59 - one P stars okay that's going to be
29:03 - equal to an object literal and slightly
29:07 - we're going to give these CSS properties
29:11 - using key value pair so let's just say
29:14 - let's define a new property called
29:17 - text-align okay with the value of center
29:22 - I do the same thing for text transform
29:26 - uppercase perfect so now we have this
29:30 - javascript object we can actually insert
29:33 - this into this style attribute by
29:36 - getting rid of all this stuff including
29:38 - the double quotes and simply just saying
29:40 - key stars now pipe is going to read this
29:43 - object and then convert that into normal
29:47 - CSS so saving this one gives us that in
29:51 - the HTML we can see we get the formatted
29:55 - CSS there actually might be a problem
29:59 - yeah give me one sec okay what does it
30:02 - say unexpected token okay so got a give
30:08 - a double quote there and fix that up
30:10 - horatii
30:12 - now that is a valid object we can save
30:15 - this and now in HTML we get that
30:18 - formatted CSS the way it should be
30:21 - okay now saving this in the browser we
30:25 - get the same effect okay and that is how
30:28 - you can use CSS with your hug HTML files
30:35 - so in this one I want to talk about the
30:38 - each loop and the each loop it basically
30:41 - allows you to loop over an array or an
30:45 - object and then output 'html
30:47 - and the each loop is the same as the for
30:51 - loop except that the for loop is
30:53 - different names so each and for these
30:56 - two loops are exactly the same that it's
30:59 - got a different name okay so keep that
31:01 - in mind so let's get right into this
31:04 - I'm just keep in mind that I have the
31:06 - hugged watcher running which means that
31:08 - when I save this index POG file it's
31:11 - going to output that inside the HTML
31:14 - directory okay so if I'll start out okay
31:16 - doctype HTML then add the basic HTML
31:20 - tags head and then body saving this
31:24 - gives me this in this file right there
31:27 - okay so let's start with this H / for
31:32 - loop I'll begin with an h1 tag and we're
31:36 - just say okay for slash each loop okay
31:39 - now down here we're gonna use the each
31:41 - loop to output the numbers one two five
31:46 - I'm the actual you know in the in HTML
31:50 - so the syntax is as follows you start
31:54 - with the each keyword followed by the
31:57 - the name of the temporary variable that
32:01 - will hold H value so for example each
32:05 - and then in short for number and then
32:08 - you write out in so saying each n or
32:12 - each number in your array so we'll talk
32:16 - about one two three four and five okay
32:20 - and now inside here we'll just indent
32:24 - this and then we'll top it will make a
32:27 - new paragraph tag and just put n inside
32:31 - there okay actually near to put an equal
32:35 - sign that way we actually apples an HTML
32:37 - sorry the equals allows you to output
32:41 - the extra value instead of the number n
32:45 - so it fails to get rid of this equals
32:46 - and save this one we
32:48 - and and and and having the equals there
32:51 - means that it's gonna interpret this end
32:54 - as the actual variable up here so now
32:56 - saving this gives us that right there
32:58 - one two three four five and this is done
33:02 - only with a simple loop so obviously
33:05 - this is quite useful for you're dealing
33:08 - with the data especially okay now let's
33:12 - just um let's just also look at getting
33:16 - the value as well as the index in your
33:19 - array so we have here the actual values
33:23 - okay they also change this to the number
33:25 - 50 for example saving this gives us 50
33:29 - and then two three four so these are the
33:32 - actual values now to get the actual
33:34 - index of whatever the the item is at
33:39 - that current point in time you put a
33:42 - comma here a comma and then your
33:45 - variable for the index
33:47 - I'll just call mine I so now the current
33:51 - index is stored inside the I variable
33:54 - okay
33:55 - now this means that we can actually do
33:57 - this we can say okay in and then put a
34:00 - plus and then we can just say something
34:02 - like - and then plus I so now we're
34:07 - gonna see the value and then a - and
34:10 - then the index and now saving this gives
34:13 - us this in the output 50 at index 0 1 2
34:17 - 3 4 and so on
34:19 - so that's how to access the value and
34:22 - index now just keep in mind that this is
34:27 - basically just JavaScript here I can
34:30 - actually declare an array outside of
34:33 - them outside of this this each loop here
34:36 - so I can put a dash here and declare a
34:39 - JavaScript array for example let's just
34:41 - make a new constant and call this one
34:43 - names equal to an array of strings of
34:46 - name so for example we'll have one full
34:48 - of Dom Sofie and in marks we have we
34:53 - have three names yet you know I can
34:56 - actually go inside here and replace that
34:59 - one but
35:00 - with instead names so now it's gonna
35:03 - loop through everything in this names
35:06 - array so saving this gives us that right
35:09 - there Dom at index 0 31 and then mark
35:12 - and 2 so pretty cool stuff so that's the
35:17 - arrays this thing also actually works on
35:20 - objects as well so if else to get with
35:23 - this array here and instead let's just
35:28 - put something like maybe great so make a
35:31 - new object called greats equal to an
35:34 - object literal and put some some grades
35:38 - for your university courses inside here
35:41 - for example let's just say I will say
35:44 - for web web development web dev you've
35:49 - got a five percent for something like
35:53 - software design
35:55 - you've got 76 percent so we have two
35:59 - properties in this in this object all
36:03 - right so now if you save this we get
36:06 - okay that didn't work let's see the
36:10 - output what does it say length of under
36:14 - archive course so got to put Dre's
36:17 - inside here all right so now saving this
36:20 - one it gives us that in the airport we
36:23 - get we get the actual value and then the
36:29 - index so in this case here the index
36:32 - will be the actual property name and the
36:34 - value will be the actual value of that
36:36 - property so we're saying okay 85 web
36:39 - depth then that four suffer design all
36:42 - right so if I was to actually change
36:46 - this from each into four and save this
36:50 - we get the exact same result let's just
36:53 - change this from 85 to a hundred to
36:55 - disprove this save it again and we get
36:58 - 100 right there so the each and the fall
37:01 - are just the same thing with a different
37:03 - name
37:04 - okay now this thing actually it also
37:07 - comes with an else and the elves will
37:11 - run whenever
37:12 - there's actually no values to iterate
37:14 - the route so it falls to go down here
37:18 - and go back and just say okay apps all
37:21 - right down here let's just put a strong
37:24 - tag and inside there we'll just we'll
37:27 - just say something like no loop possible
37:31 - or maybe maybe no values okay let's get
37:35 - move those quotes well so now what's
37:39 - gonna happen is if there are no values
37:41 - to actually loop through it's gonna
37:44 - print it out no values are here let's
37:47 - just get rid of this grades all right D
37:50 - look at this grades and inside here we
37:54 - put an empty array an empty array saving
37:58 - this gives us boom that right there
38:00 - strong no values are here so it skips
38:04 - this part and just says okay we can't do
38:06 - anything so print it up no values are
38:09 - here and that is how you can use the
38:12 - four slash each loop within park
38:18 - I want to talk about conditionals in a
38:21 - pug so essentially the most common type
38:24 - of conditional is an if statement so
38:26 - with an if statement you're able to do
38:29 - things based on a certain condition
38:31 - otherwise do something else so for
38:33 - example if a user is logged in you want
38:37 - to say hi how are you welcome back if
38:40 - they're logged out you want to say hey
38:42 - going do one login so essentially you're
38:45 - able to do different things based on a
38:47 - certain condition so let's see how this
38:50 - thing works I've got a basic HTML
38:53 - template right now we have that in the
38:55 - actual output alright so inside the body
38:59 - tag let's make a new h2 tag and just say
39:02 - my web application if I save this in the
39:06 - browser we get this result right here
39:09 - all right
39:10 - quite simple now let's add a conditional
39:13 - statement to display different things if
39:17 - a user is logged in or logged out so
39:20 - let's first start by defining a
39:23 - JavaScript object to actually represent
39:26 - the user so I'll put a dash here and
39:28 - then say let user a new variable equal
39:33 - to an object this object contains three
39:36 - properties firstly the name of the
39:39 - actual user Boggs Airport Dominic
39:41 - alright and then a logged in boolean to
39:44 - represent game logged in state for now
39:46 - I'm going to say that actually not
39:48 - loggers like I said logged in equal to
39:50 - false all right the third argument or
39:53 - third sorry the third property will be
39:55 - last login
39:57 - so last login we're going to say it was
40:00 - six minutes ago so somehow using cookies
40:03 - or sessions were able to discover that
40:05 - their name is Dominic they're currently
40:08 - not logged in and their last login was
40:10 - six minutes ago all right so now with
40:13 - this object we're going to output
40:15 - different HTML and based on different
40:18 - property values so
40:20 - the first one is going to be if they're
40:22 - logged in we're gonna say hi welcome
40:25 - back and then their name so let's go
40:28 - down here and write an if statement so
40:30 - we're going to say okay if and then tap
40:33 - out user dot logged in so if the user is
40:37 - logged in then I want an output by
40:41 - indenting some HTML will make a
40:44 - paragraph tag and then indent this to
40:46 - add some child elements to this
40:48 - paragraph we're gonna say okay
40:51 - put a pipe character and say welcome
40:53 - back
40:54 - okay now this pipe character means that
40:58 - I want to ignore all this all this
41:02 - output sorry all this text and make it
41:04 - actual plain text and not an HTML tag if
41:08 - I was to remove the actual pipe then
41:10 - it's gonna make a welcome element okay
41:12 - so put a pipe to ensure that this is
41:16 - interpreted as plain text now down here
41:20 - I'm gonna put a strong tag I'm gonna say
41:23 - strong all right and then interpolate
41:26 - this and pass in user dot name okay so
41:32 - now with this we are essentially saying
41:34 - if the user is logged in then say
41:36 - welcome back and then a put their name
41:39 - in bolt okay so now I'm going to just
41:43 - actually you know what I'll change this
41:44 - logged in state to true and then save
41:48 - this and then we'll see the actual
41:49 - output right so now if I save it the
41:52 - output looks like this
41:55 - welcome back Dominic okay so we see how
41:59 - the condition works if I'll make this
42:01 - false and then say this one refresh the
42:05 - browser and we get nothing at all so
42:07 - you're seeing how it actually works here
42:10 - let's just keep it our thoughts for now
42:12 - okay now I'm gonna add an else alright
42:17 - so down here get in debt back to the
42:19 - actual if line all right and then say
42:22 - else so now this this block will execute
42:26 - when
42:28 - this is not true so we're gonna say okay
42:30 - if they're not logged in then display a
42:33 - anchor link element with an href of
42:36 - login okay and say login so now so now
42:42 - it's saying okay you're not logged in so
42:45 - display a link which links you to the
42:48 - login page and says login so now saving
42:50 - this we get this in the browser refresh
42:53 - log in okay again making this equal to
42:58 - true say this we get that
43:01 - so it's switching based on this
43:04 - condition right there is actually a is
43:09 - actually a third one quarter an else--if
43:11 - so you're able to put an else if between
43:14 - the if and the house so we're gonna use
43:18 - this last login property here to add an
43:21 - else if and say okay if the user logged
43:24 - in less than ten minutes ago then we're
43:27 - just gonna say login again so let's put
43:31 - an else if inside here okay we're gonna
43:34 - say okay else if and then put down if
43:37 - the user the last login is less than ten
43:43 - minutes ago all right we're gonna set
43:46 - okay a new paragraph tag inside here oh
43:50 - I think I'm just gonna say okay your
43:52 - last login your last login once I've
43:57 - been put down user and say minutes ago
44:02 - and then we're gonna tell them do you
44:06 - want to log in again so then say okay
44:07 - add a new paragraph tag inside here and
44:10 - make a new link tag and say H ref log in
44:12 - on last time login again so now if their
44:18 - last login was less than 10 minutes ago
44:21 - we're gonna say okay your last login was
44:24 - that value their minutes ago all right
44:27 - we're gonna say okay login again so now
44:31 - right now we're saying they're not
44:34 - logged in that were actually run
44:37 - okay then we can say okay if that's not
44:39 - true then we're gonna run this
44:42 - I'll see if last leg in this in six
44:44 - minutes ago sorry less than 10 minutes
44:46 - ago we're gonna display that right there
44:48 - so now if we save this one in the
44:50 - browser we get this right here your last
44:53 - login was six minutes ago login again
44:56 - so it's checking the first one that's
44:59 - not true then do this if that's not true
45:02 - then do this so I'll make this 11 okay
45:07 - 11 is more than 10 so now this won't
45:12 - even run and we should get this final
45:15 - else block if I save this what do we get
45:18 - refreshed we get loggia all right and
45:21 - that is how you can use conditionals in
45:23 - park
45:28 - I talked about the case statement in pug
45:31 - so essentially the case statement is
45:34 - just like the normal JavaScript switch
45:37 - statement so you're able to do different
45:40 - things based on the value of a variable
45:44 - or some sort of expression so in this
45:47 - case here with pug it's gonna be you're
45:50 - able to change some HTML based on some
45:55 - sort of comparison so let's see how this
45:58 - thing works I've got a simple HTML
46:01 - markup here with HTML tag head and body
46:05 - and a title inside the index.html we get
46:08 - that result right there so now inside
46:11 - the body we're going to use a case
46:13 - statement so we can start by defining a
46:17 - new JavaScript a constant and call this
46:21 - one order status ok now this right here
46:25 - will be the status of some sort of order
46:28 - so for example the order status might be
46:31 - pending okay and this status might be
46:35 - things such as such as pending it could
46:39 - be in transit so I'll just write these
46:42 - down we have pending it can be in
46:45 - transit and it can also be completed so
46:48 - we're going to look at these these these
46:52 - values here and then output different
46:54 - HTML based on what value the order
46:58 - status is so below here we're gonna use
47:01 - the case statement it looks like this
47:04 - you write out case followed by the thing
47:09 - to actually compare against in this case
47:11 - here we're gonna compare against or out
47:13 - of status okay and then you put a line
47:18 - break then a tab and now you write uh
47:22 - something like this you say when so
47:24 - using the when keyword you then write
47:27 - out an actual value here for example
47:31 - pending
47:34 - so it's kind of like English we're
47:36 - saying okay we're checking the order
47:39 - status when it is pending we want to do
47:42 - stuff here okay so let's say for example
47:46 - I put it um we'll do a paragraph tag and
47:50 - say your order has been placed and
47:53 - you'll be sent shortly okay we can do
47:57 - another one for the in transit value
48:02 - okay
48:03 - this one here is gonna be your order is
48:06 - on the moon you should receive it soon
48:11 - okay and then one more just will be
48:13 - completed paragraph to say your order
48:19 - your order has been completed okay so
48:24 - now we have the case statement all done
48:27 - so it's gonna check the value of order
48:30 - status and then do different things
48:31 - based on the actual value so now inside
48:35 - the outputted HTML what do we get we get
48:39 - your order has been placed and will be
48:41 - set
48:42 - shortly that's because currently the
48:45 - order status is equal to pending if I
48:48 - change this to in transit and then save
48:52 - this we now get on the move you should
48:55 - receive it soon and then obviously we
48:58 - change it to complete it we get your
49:01 - order has been completed so you can see
49:03 - how it's actually working here right now
49:05 - what if I make the value here something
49:09 - random such as random okay Brandon isn't
49:12 - in this list and it's not being compared
49:14 - down here so what happens now well if I
49:17 - save this we get nothing so we actually
49:21 - get no output from that case statement
49:23 - to actually resolve this we can use the
49:27 - default keyword and default means what
49:30 - happens when the value is not one of
49:33 - these okay so if it's not pending not in
49:37 - transit and not completed we're gonna do
49:39 - this instead okay in that case we'll
49:44 - just find out something like sorry
49:47 - we aren't sure what happens with your
49:51 - oil okay so now if we say this one sure
49:57 - enough we get that message right there
50:00 - all right and the same thing works with
50:03 - numbers just make this you know one two
50:06 - and then so on have this as two and we
50:10 - should get that one right there you see
50:12 - how it works Oh numbers strings whatever
50:14 - you want it works and that's how you can
50:17 - use the case statement in pack
50:24 - that the include keyword in pug so
50:27 - essentially the include keyword allows
50:30 - you to include other Park files inside
50:33 - your Pug file and it's very useful when
50:36 - you have multiple HTML pages that share
50:41 - the same HTML so things such as headers
50:44 - navigation bars and footers that sort of
50:47 - stuff and includes might be quite useful
50:50 - so let's see how this thing works I've
50:53 - got an index dot pod file here I'm just
50:57 - going to create a new h1 tag inside the
51:00 - body and give it something like a
51:02 - company name okay and also make a
51:06 - navigation bar with a few links inside
51:09 - here like a new 8a give it a href of
51:13 - something like index.html and have that
51:17 - be home to the same thing two more times
51:20 - for our belt that'll be about us and
51:24 - this one can be contact us but I have
51:29 - the actual hash for the ice right here
51:31 - so now if I was to save this calc file
51:34 - the output looks like this we get that
51:37 - right there in the browser we actually
51:40 - get something like this refresh and we
51:43 - get that so now this navigation bar
51:46 - company name is going to be repeated
51:49 - across multiple pages on this website so
51:51 - we're going to use and includes to
51:53 - actually do that but first I want to
51:55 - show you what it looks like if I was to
51:57 - create a new about Park file and just
52:00 - copy/paste all of this stuff into here
52:03 - and then just have something like about
52:06 - as the twaddle and just have a new
52:10 - header tag below here with about us okay
52:13 - so yeah if I save this and then check
52:16 - the browser I'll just click on this
52:18 - about link and we get that right there
52:21 - so we have the about page here back to
52:24 - home and we get that so we've got
52:27 - actually our move this section right
52:30 - here the h1 and the navigation bar into
52:33 - a separate includes file which will then
52:35 - be repeated
52:37 - across both the index page and also the
52:39 - about page all right so we can do this
52:43 - by first just making a new directory
52:46 - inside this this project book here
52:49 - can I call this directory includes okay
52:53 - I'm gonna install all my includes files
52:55 - inside here to keep things neat
52:58 - so now inside this directory gonna make
53:01 - a new pug source file and call this one
53:04 - nerve tuck okay now open this up inside
53:09 - here I'm gonna put that h1 and the
53:13 - navigation so I'll copy all this and
53:17 - then put it inside naviga
53:20 - just make that all nice and neat once
53:22 - again okay so now we have navigation
53:26 - inside here let's just put that back one
53:29 - more time okay so now navigation is
53:33 - inside here back inside the about park
53:35 - file under the body I'm going to tuck
53:39 - this yep I'm gonna say includes okay
53:42 - using that include keyword followed by
53:44 - the B path to actually include for
53:48 - example in our case it will be includes
53:50 - forward slash nav so includes the actual
53:54 - directory name and nav is the name of
53:56 - the pug farm you can do this with or
53:59 - without the dot plug extension it's up
54:03 - to you okay so now I'm gonna save that
54:06 - and do the same thing for the index page
54:09 - okay get rid of that and paste in
54:13 - include right there so now these pages
54:16 - are going to get the pug that's inside
54:19 - this nav file and just insert it right
54:22 - into place right there so now if I was
54:25 - to save this and just check the actual
54:27 - console here we get no errors oops all
54:30 - right okay now in actual in actual
54:32 - browser or so refresh this time we get
54:36 - the same result so see how the same
54:38 - thing is happening however this time
54:40 - around I can actually I can actually go
54:44 - inside the nav Park file if I make a
54:47 - change inside here it's gonna change it
54:50 - across
54:51 - all the all the HTML pages at for
54:54 - example let's say I want to add a
54:56 - different link to the actual navigation
54:59 - bar if I add a gallery to this will say
55:04 - gallery and call that gallery okay if I
55:08 - save this now we should hopefully see
55:11 - the result in the browser for refresh
55:13 - and we get gallery right there okay so
55:17 - going back to the home page now so the
55:20 - the about page we get gallery as well so
55:23 - I'm making one change and to tag files
55:27 - are being updated and that is the power
55:30 - of the include keyword alright and
55:33 - that's how you can use include in bug
55:39 - so in this one I want to talk about
55:41 - mix-ins and mixings are basically just
55:44 - reusable blocks of pub code and they
55:47 - behave like functions you can actually
55:49 - call these mixings throughout your pub
55:52 - project and even passing data as
55:55 - argument so dynamic data from your
55:58 - database or whatever you can pass it in
56:01 - as arguments and then the mixin will
56:03 - actually render the HTML with those
56:06 - arguments so they behave very similar to
56:10 - functions so let's see how this thing
56:12 - actually works we're going to use an
56:15 - example of a typical website comment so
56:19 - a comment has things such as an author a
56:21 - date and also the actual comment text
56:24 - itself and we're going to use their
56:26 - mixing to actually render a comment so
56:30 - on a post or video there might be heaps
56:33 - of comments just say 5 to 100 comments
56:36 - and you can use they mix in to to
56:39 - produce the same HTML structure for all
56:42 - those comments but have different data
56:45 - so let's first start by actually
56:48 - designing the common HTML first so
56:52 - inside the body let's create a new
56:54 - wrapper for a comment so let's make a
56:58 - div with a past 5 comment just like that
57:01 - this div has three child elements the
57:05 - first one being the comments date and
57:10 - let's just say the date was for example
57:12 - the 2nd of April okay and we can have
57:17 - one for the actual author so water so
57:21 - that class of author keep it value of
57:24 - decode me for example and also one more
57:28 - for this hits this would be the actual
57:29 - comment itself for example came a nice
57:33 - tutorial ok so now if I was to save this
57:38 - inside the HTML directory we have a new
57:40 - index.html file and the output looks
57:43 - like this if I was to go in the browser
57:46 - and refresh we get that right there
57:50 - so that is basically the structure of
57:52 - the comet designed in HTML let's just
57:56 - add some simple styles to make it look
58:00 - better all right let's make a new start
58:01 - egg up here in the head and create a new
58:05 - style I still sit for the comment class
58:09 - give it a fun family of sans-serif our
58:13 - line height of 1.5 let's give some
58:17 - padding about 10 pixels okay and a
58:21 - border of 1 pixel solid and dark gray
58:24 - and also we've got 250 pixels all right
58:28 - now for the actual dates let's make this
58:31 - a bit smaller so we'll say date a class
58:35 - of date let's give it a font size of 85%
58:38 - all right for the author let's give a
58:43 - font size of a bit larger something like
58:46 - budget in 10% and a font weight of the
58:49 - bold and also for the actual text itself
58:53 - let's just say font size 100 percent a
58:56 - little bit the default value anyway well
58:58 - that's fine if I was to save this and
59:01 - refresh the browser this time we get
59:03 - that right there so we have the comet
59:07 - structure in HTML and also some stars
59:10 - I'll just add for the date they text the
59:12 - line of the rights to get that to the
59:15 - right side say this refresh and we get
59:17 - that right there perfect so now we have
59:21 - the actual structure we can now move
59:24 - this into a mixing alright and that'll
59:28 - let us actually reuse this same
59:30 - structure for whatever values we want
59:32 - later on ok so on the top of this pug
59:36 - file let's declare a mixin we can do
59:40 - this by using the mixing keyword so
59:42 - we'll say mixing followed by a space and
59:46 - then the name of the mix itself in this
59:50 - case here let's call our mixing comments
59:54 - ok now as I said this mixing can contain
59:59 - or accept arguments extra data
60:03 - we can put these arguments inside a
60:05 - brace let's accept one argument that
60:09 - will be comment data so now we can
60:12 - reference this comment data argument as
60:15 - a typical JavaScript object within the
60:19 - actual mixing itself
60:20 - so now after an indent inside here this
60:24 - mixin we can put whatever pub code we
60:27 - want alright so for example let's render
60:30 - first the comment wrapper so I will say
60:34 - dot comment so I did with the class of
60:37 - comment okay now down here we can start
60:41 - to render some dynamic values from this
60:45 - comment data argument so inside here
60:49 - let's copy all this stuff right here so
60:53 - copy this paste it inside there and fix
60:56 - that up so now for these values right we
61:00 - can say this instead we put an equals to
61:03 - get some buffered output and we can say
61:06 - comment data dot dates all right down
61:14 - here the same thing comment data
61:19 - same thing for the bottom one equals and
61:23 - then comment data dot text okay so now
61:28 - the mixin is complete we have this
61:31 - reusable structure with some dynamic
61:33 - data coming from the argument okay so
61:37 - now both to save this and go down here
61:40 - alright and I'm gonna replace all of
61:43 - this stuff right here with a mixin call
61:46 - but first let's just declare a
61:49 - JavaScript object to actually be the
61:53 - comment data so down here let's put a
61:56 - dash right here and say make a new
61:59 - constant and call this one C equal to a
62:02 - JavaScript object let's give it some
62:05 - values we need dates author and text so
62:09 - down here let's target a
62:12 - once again we can say it was the 2nd of
62:15 - April so Oh - so I have a 402 2018 let's
62:19 - give it the author property of decode
62:23 - and the texts let's just say the same
62:27 - thing hey mate great tutorials ok
62:30 - boom so now the falls to go down here we
62:35 - can now call this mixing and you call a
62:37 - mix in by putting the plus alright
62:40 - followed by the mixing name in our case
62:42 - it'll be comical so plus and then
62:45 - comment that right there now we can pass
62:48 - in the data in this case here that will
62:51 - be C C is going to be the JavaScript
62:54 - object to pass into this comment it's
62:56 - going to be rendered up here so now if I
62:59 - was to save this and refresh the browser
63:02 - this time around we get the same thing
63:05 - with a replaced comment data okay so we
63:10 - can see how it's actually working if I
63:12 - was to go down here and make a new
63:15 - comment object and copy that right there
63:18 - paste it inside there let's change the
63:21 - date to 2020 and we'll make it something
63:24 - like this
63:25 - 2nd of July the author will be our anode
63:28 - Bruce all right and the text can be that
63:33 - was save this and then actually let's
63:37 - just call the actual mixing again so
63:39 - plus comment passing see oh let's just
63:43 - make this C 1 all right
63:45 - C 1 that was a constant so now if I was
63:48 - to save this refresh your browser boom
63:50 - we get two comments while only writing
63:54 - the HTML what so that's the advantage of
63:58 - using mix-ins now just keep in mind that
64:01 - these mixin solicit can actually contain
64:04 - any form of you know pug features so for
64:09 - example let's actually put an if
64:12 - statement within this mixin let's say
64:15 - that some comments can be posted by an
64:16 - admin user and in that case we want
64:19 - something like a message on top here
64:22 - that says this was posted by an admin so
64:25 - let's just go back you saw the code here
64:27 - and create an if statement inside this
64:29 - comment okay we can say if comment data
64:34 - got posted by admin so if it was posted
64:37 - by an admin I'm gonna render a new I
64:40 - italic Thor let's use an am so then an
64:45 - AM tag to produce italic text and give
64:49 - it the the text of posted by admin okay
64:54 - so now if this comment was posted by an
64:57 - admin render that right there so now
65:01 - within this code down here let's say the
65:04 - first comment has the posted by admin
65:07 - property with a value of true okay so
65:11 - now for us to save this one and refresh
65:14 - the browser we get hosted by admin
65:17 - within that comment there because it has
65:18 - the actual property right there so you
65:21 - can see that the mixin supports all the
65:24 - types of park features not just
65:27 - rendering HTML by itself alright and
65:30 - that is how you can use mixings
65:32 - in pug thank you for watching and I'll
65:35 - see you later

Cleaned transcript:

hey guys hey going my name is dumb and welcome to a pug tutorial so bye pug I don't mean the dog I actually mean the HTML preprocessor now this means that it's basically a language that will convert itself into native HTML code and you want to use Pug because it is arguably a lot cleaner to read and also code in and it features some extra powerful functionality such as loops JavaScript objects JavaScript logic mixins templates and so on so to actually use pug you can do so by installing the pug command line interface and this is done using NPM the node package manager so inside your terminal you want to tap out NPM and they install this is assuming that you actually have node installed on your machine for stopping an NPM install and then typing a pug CLI the Pug commandline interface you can install poke you might want to also add the dash G flag to make that install globally now once that's done you will have Punk accessible via the command line by topping out Punk alright so in today's video I want to go over my directory structure and how I'm going to you know code things in the future so here I've got a folder called intro and I'm going to make a new directory inside here I'm gonna call this one HTML this will contain all the native HTML output that was generated by poke alright I press ENTER right here now I'm also going to create a new pug source file inside the root directory alright so I'm going to say ok new file and call this one index hug okay this will be translated to index dot HTML inside the HTML directory okay now the most basic or the most common pug commands you might see like the most common syntax is the doctype and in HTML and that right there in park will generate the doctype first little statement on the top of your HTML page all right so to actually compile this pug code into HTML we can start by using the pug command line interface so down here I'm inside the routes intro directory okay I'm gonna talk about PUC alright and then also add the dash W flag that means it's the watch flag it's going to watch for any file changes I make once I press save it's going to compile automatically without me doing anything I'm also going to watch that file or what are the files we're going to watch everything in the current directory so doc for slash everything in this root directory alright I'm also going to say where the output will be it's gonna be inside this HTML folder so I'm going to say o and then say dot forward slash HTML so I'll put all my stuff inside the HTML folder okay I'm also gonna say and then capital P and that will make the HTML code pretty printed with indentation line breaks and all that sort of stuff if I press ENTER right now we get it says watching indexed up park so I make a change is going to compile it's going to render the HTML called index.html copying the same file name from the pug for name okay so now inside this HTML folder I see index dot HTML I press on that and we get that doctype HTML you know statement up there okay and that is how you can use Park Hae you compile Park now you can structure your plug directories in the future I'm gonna make use of this sort of structure and obviously show you guys that to use this thing so in this one I want to talk about how to generate your own HTML tags and also how to insert different doctype declarations but first keep in mind that I'm using the pug watcher so when I save a pug file it's going to generate the corresponding output HTML file inside the HTML directory okay so it's like this pug file we can create or generate a duck type using the duck type shortcut so I'm going to say doctoral but that and then say HTML with a space and that what there will generate the standard html5 doctype declaration so if I save this one inside the output file we get that right there okay perfect we also got things such as XML so for example doctype XML we get the XML declaration we have also the transitional one save this one we get that right there we have strict all right and also a few more which you can see inside the private documentation so I'll make this back to HTML that's the most probably common one to see and probably what you're gonna work with so with this we're going to start creating some HTML tags now in regulate Simo to make the HTML tag you type out all right HTML opening and an HTML closing okay with bug it's literally just less than half this amount of coding so in pug you talked about HTML like that and it's going to generate both the opening and closing tag for you if the closing tag is required so if I save this one we get in the output 'html like that pretty cool so that's that I'm actually making HTML tag you just talked about boom the HTML tag name now to actually add a child elements of another parent element for example adding the head tag inside here we can do that by first indenting on a new line so press enter here and then an indent okay here we put the name of the child element or child tag so typing at head right here and saving this one will give us the desired output for example boom HTML and then head inside there if all to get rid of the Indian make that onto the first character yeah like that if I save this one we get no errors but in here we get them on two separate lines they're two separate elements not connected in one bit so make sure you use an indent for child elements it's very important okay so we'll do the same thing for the body tag just like that save this one and we get this output right there pretty straightforward now in the body I'm gonna make a few tags some h1 set some peas and also some unordered lists okay so it's right here gonna press ENTER and add a new indents for a child element I'm gonna make an h1 tag h1 save this one check the output and we get that right there now to actually put text inside here we can do so quite easily using pug we'll put a space in front of the tag name and then Watson text for example welcome to decode okay I'll save this one we get that but they're perfect now let's read a paragraph tag so below here I'm gonna make a new paragraph tag now if I was to say okay this is a paragraph tag that works fine we see that right there now if I want to actually have multiple lines of text if I tapia and this is a new save this one and we get this a bit funny so it's it's saying and as a as a tag name and playing that text inside there inside the and tag so to actually generate some multiline text using pug you put a fullstop after the element name or the tag name like that and then you drop your text on to the second line indent it and now you have your multiline text okay so now we have this right here if I save this one the airport looks like this which was our intention okay so you use that dot for multiline and put it on the second line and also indents it okay now you might commonly see unordered lists or lists in general on hug examples or documentation so to actually make a list we can do so using the UL and order this tag and then put some child elements inside yeah we say oh I for list item yep this is item one and then so on okay two and then three we save this one and we get that right there okay so pretty straightforward stuff and quite interesting so it looks a bit like sass I guess there's no braces no you know angle brackets or quite clean and simple so in this one I want to talk about how to add IDs and classes to HTML elements so just keep in mind that I have a pug watcher have been run now which means when I saved this index park file it will automatically generate the output file inside the HTML directory under index dot HTML all right so let's get right into it we can start by making a simple HTML joking with a doctype at opening HTML tag a head tag and also a body tag all right so if I save this one we get this India all right so let's define a h1 header tag and give it an ID now we can do this using CSS selector syntax all right this means I can actually go inside here and I can say okay first to clear the element name for example h1 then a hash tag followed by the ID okay so I'm gonna say h1 hash tag and there's something like page sorry page title alright and did something like page title goes here now as the content so if I was to save this one in the output we see that paginates the h1 with an ID of page title automatically for us so that's quite convenient right there and we can do the same thing with classes once again using the CSS selector syntax so down here I'm gonna make a few paragraphs and give it the same class name so we'll say okay P declare the element name followed by a full stop by a dot to define or declare this is a is gonna be a class so P dot and then at the class name for example something like big para and then some text so AB dot and we'll say he is some kicks for my big paragraph okay so now if I was to copy this one and do some more so here is some more text okay so now we have two paragraph tags with an O with a class name so if I saved this one in the output we get that right there okay once again quite convenient now we can also do something where we don't actually declare what the element type is okay so false to go down here under this paragraph Tokyo and I was to say something like something like a display box okay so display box as a class with no element here all right if I just save this for more quickly and check the output we get a div with a class of display box so why is that well in pug what it does is that actually um there are actually default any classes or any IDs that you don't specify an element with as a div so it knows that a div is a common element to use so if you talk about the class name with no actual you know yeah it'll make a div conveniently for you to try and guess what you actually meant if that makes sense you can of course just top out div and you'll have the same effects all right and the same thing works with IDs as well so down here I can say okay my only div for example if I save this one we get the div ID my only div alright so that is how you can declare classes and ID's on your elements using Punk so in this one I want to talk about how to add attributes to HTML elements and also talk about some of the advanced features that you'll find in pug in relation to attributes so I just keep in mind that I have the the pug command line tool running with the watch flag which means that when I save this index pug file it's going to generate the index.html file inside the HTML directory alright so let's start inside here I've got a doctype HTML tag head and then body ok so let's demonstrate attributes using an input element so we'll say okay buddy and then add an input field right there if I save this one and check the output we start with that right there so let's make this input field a password field and to give it a name so back inside here let's put braces next to the input field sorry input tag and then write out some attributes so say okay input and give it a type of password so this syntax is the same as HTML once you get inside the bracket so that's saying input type password I'll save this one and check the output we get that right there as expected okay now we can add multiple attributes to a HTML element by putting a space after that so you can say okay type is password and the name is INPE PWD so if i save this one and check the output we get both attributes there perfect all right now in terms of the advanced features of Pug with attributes one of them is the the use of JavaScript inside the attribute value so for example let's make a new attribute and we call this one data jeaious or JavaScript you know as an example equal to now here we're gonna use an ECMAScript 2015 string string literal so let's put two tactics down here and inside here we can embed we can embed an expression so put a dollar sign followed by two curly braces now inside here we can put some JavaScript logic or an expression so let's say something like this we'll say if five is greater than 2 then we want to make the data jeaious attribute value something like okay otherwise let's make the value not okay right so now if I save this one and check the output we get data jeaious is equal to okay and that's because five years greater than 2 let's make this if one is greater than two saving this one we get it is not okay all right so you can add JavaScript expressions or logic inside your attribute values all right so pretty cool in it now now you can also add classes to an element all at once so let's go down here make a new element we'll make a new div tag okay now up here though let's define a new JavaScript let's first actually in Denmark Oh properly put that down there alright so let's create a new JavaScript array we can add a dash here and that means that this line is gonna be a JavaScript line that's and they will say Const my classes is equal to a typical array of strings all right so let's put an array here inside of yo we'll put the few elements we can say okay plus 1 plus 1 plus 2 and then class 3 all right so here we have defined a JavaScript array using the alright now we can add all these classes do this development like this we can say okay once again using the braces we can say class so the class attributes similar to that right there is then equal to simply then my classes so if I save this one in the output we get a div and a class attribute of all these classes but they're separated by a space okay so quite convenient now if else to go back inside here and add a class to the beginning of this elements the traditional way so div and then dot something like I don't know my depth okay if I save this one we're defining a class here and also more classes inside here like that the airport looks like this we keep the initial my div class so that means that that right there is going to append to the current class list I so keep that in mind now we can do a similar sort of thing with inline styles so down here let's make a new div once again and up here let's make a new javascript object so once again using the dash to signify a line of JavaScript we can say okay and then punched my Styles inside here in this object we can then define the CSS styles using javascript objects syntax so we can say ok let's make the text color as Reds put a comma let's set the background color it's gonna be blue alright now down here we could do virtually the same thing we can say okay div and then style its equal to my stars alright saving this one gives us that right there so we have this style attribute and then all these CSS Styles formatted nice and nearly for us okay so once again very convenient now we can also do again a similar thing using the attributes so we can actually define attributes as a JavaScript object and then put that on the actual element itself so let's make once again a new element this time let's make it an image element so IMG okay come up here let's define a new constant okay constants my attributes once again equal to a javascript object so we'll say okay my attributes let's put the attributes as a javascript object so we'll say okay SRC sauce is gonna be my photo dot PNG the alt text will be pcs my photo okay now to actually add this to the element we can put an ampersand okay attributes within brackets and pass in my attributes right here so a similar thing to the above examples but this song were actually using the and attribute syntax instead of a you know a bracket alright now if I save this one what do we get well we get boom that right there give me sauce my photo alt X this is my photo perfect alright so once again very convenient now one more thing let's talk about boolean attributes so things such as input type you know text and then have that being disabled or something like input type the check box and then make that check so those those single word boolean attributes okay so Dan yeah let's make a new input fields okay Cupid eight type of you know just text normal and let's make that text field disabled we can say okay disabled no need for a equals and then something else just disabled and then pug will automatically add that to the absolutely let us save this one what do we get we get that word top text and it's disabled now what if I was to change the duck type for this document to something like transition I know transitional does not support the single single word attributes so if I save this one what happens we'll check the output and this time we get disabled equals disabled so pug is going to automatically make sure that the output is valid for the actual document type which is obviously quite cool you know what one last thing with the attributes you can say okay disable it then equals false so goes away or true so keep that in mind all right boom right there so in this one I want to talk about how to work with CSS within your Pug HTML files this includes external CSS internal CSS and also inline CSS so let's get started just keep in mind that I have the pug watch chart running which means that when I saved an index Park file it gets outputted inside index.html inside the HTML directory alright so the index pug file let's start by declaring a document type so we'll say all right doctype HTML saving this gives us that in the airport alright let's begin with some HTML tags HTML heads and also a body now to include an internal sorry an external CSS file it's the same as doing it with regular HTML except it actually going to be adding the element using poke so let's first create a CSS file inside the HTML directory so we'll say okay new file call this one style dot CSS let's give the body a background color of black let's give it a font size of 36 pixels and a font color of white all right so now we're going to include this CSS file inside this index.html file ok so inside your head tag you want to make a new link element and give it a few attributes the first one being around equal to stylesheet okay make a second one called href equal to star CSS saving this one generates in HTML a normal link element with two attributes rel and a trip now inside the HTML directory we've got style a CSS and also index to HTML so this is relative to the actual directory right there so now this H if I was to add some text inside the body just say one paragraph saying this is an HTML file saving this one gives us that result right there in the browser we get boom that right there so everything works as expected okay so that is how you can use external CSS with pub now internal CSS is essentially the same thing as normal HTML internal CSS but using the pub syntax to create a multiline element so back inside the head tag we can create a new style element so we'll say alright style okay then put a dot two so this is going to be a multiline HTML element putting an enter than a tab we can now start declaring our CSS rules so let's add some more rules for a paragraph tag so we'll say okay P and make the text color as being red and give it a textdecorationunderline all right so now saving this one gives us this result in HTML style and then that P star block right there in the browser we obviously get boom benefits okay now for internal sorry inline CSS we can do once again a very similar thing by going inside the index pack file and putting an attribute on the actual paragraph tag this will be the style attribute then we can do this one of two ways we can first do it the I guess normal way by putting a double quote and putting the actual Styles inside here for example let's just say that will give the textaligncenter and we'll also give it an upper case transformation so text transform and then upper case alright saving this gives us this in the HTML inside the actual browser we obviously get boom those effects right there now we can also do it a separate way now we can do this also using a JavaScript object so let's define a new javascript object within pub by putting a dash and then writing the JavaScript on this line let's make a new constant and call this one P stars okay that's going to be equal to an object literal and slightly we're going to give these CSS properties using key value pair so let's just say let's define a new property called textalign okay with the value of center I do the same thing for text transform uppercase perfect so now we have this javascript object we can actually insert this into this style attribute by getting rid of all this stuff including the double quotes and simply just saying key stars now pipe is going to read this object and then convert that into normal CSS so saving this one gives us that in the HTML we can see we get the formatted CSS there actually might be a problem yeah give me one sec okay what does it say unexpected token okay so got a give a double quote there and fix that up horatii now that is a valid object we can save this and now in HTML we get that formatted CSS the way it should be okay now saving this in the browser we get the same effect okay and that is how you can use CSS with your hug HTML files so in this one I want to talk about the each loop and the each loop it basically allows you to loop over an array or an object and then output 'html and the each loop is the same as the for loop except that the for loop is different names so each and for these two loops are exactly the same that it's got a different name okay so keep that in mind so let's get right into this I'm just keep in mind that I have the hugged watcher running which means that when I save this index POG file it's going to output that inside the HTML directory okay so if I'll start out okay doctype HTML then add the basic HTML tags head and then body saving this gives me this in this file right there okay so let's start with this H / for loop I'll begin with an h1 tag and we're just say okay for slash each loop okay now down here we're gonna use the each loop to output the numbers one two five I'm the actual you know in the in HTML so the syntax is as follows you start with the each keyword followed by the the name of the temporary variable that will hold H value so for example each and then in short for number and then you write out in so saying each n or each number in your array so we'll talk about one two three four and five okay and now inside here we'll just indent this and then we'll top it will make a new paragraph tag and just put n inside there okay actually near to put an equal sign that way we actually apples an HTML sorry the equals allows you to output the extra value instead of the number n so it fails to get rid of this equals and save this one we and and and and having the equals there means that it's gonna interpret this end as the actual variable up here so now saving this gives us that right there one two three four five and this is done only with a simple loop so obviously this is quite useful for you're dealing with the data especially okay now let's just um let's just also look at getting the value as well as the index in your array so we have here the actual values okay they also change this to the number 50 for example saving this gives us 50 and then two three four so these are the actual values now to get the actual index of whatever the the item is at that current point in time you put a comma here a comma and then your variable for the index I'll just call mine I so now the current index is stored inside the I variable okay now this means that we can actually do this we can say okay in and then put a plus and then we can just say something like and then plus I so now we're gonna see the value and then a and then the index and now saving this gives us this in the output 50 at index 0 1 2 3 4 and so on so that's how to access the value and index now just keep in mind that this is basically just JavaScript here I can actually declare an array outside of them outside of this this each loop here so I can put a dash here and declare a JavaScript array for example let's just make a new constant and call this one names equal to an array of strings of name so for example we'll have one full of Dom Sofie and in marks we have we have three names yet you know I can actually go inside here and replace that one but with instead names so now it's gonna loop through everything in this names array so saving this gives us that right there Dom at index 0 31 and then mark and 2 so pretty cool stuff so that's the arrays this thing also actually works on objects as well so if else to get with this array here and instead let's just put something like maybe great so make a new object called greats equal to an object literal and put some some grades for your university courses inside here for example let's just say I will say for web web development web dev you've got a five percent for something like software design you've got 76 percent so we have two properties in this in this object all right so now if you save this we get okay that didn't work let's see the output what does it say length of under archive course so got to put Dre's inside here all right so now saving this one it gives us that in the airport we get we get the actual value and then the index so in this case here the index will be the actual property name and the value will be the actual value of that property so we're saying okay 85 web depth then that four suffer design all right so if I was to actually change this from each into four and save this we get the exact same result let's just change this from 85 to a hundred to disprove this save it again and we get 100 right there so the each and the fall are just the same thing with a different name okay now this thing actually it also comes with an else and the elves will run whenever there's actually no values to iterate the route so it falls to go down here and go back and just say okay apps all right down here let's just put a strong tag and inside there we'll just we'll just say something like no loop possible or maybe maybe no values okay let's get move those quotes well so now what's gonna happen is if there are no values to actually loop through it's gonna print it out no values are here let's just get rid of this grades all right D look at this grades and inside here we put an empty array an empty array saving this gives us boom that right there strong no values are here so it skips this part and just says okay we can't do anything so print it up no values are here and that is how you can use the four slash each loop within park I want to talk about conditionals in a pug so essentially the most common type of conditional is an if statement so with an if statement you're able to do things based on a certain condition otherwise do something else so for example if a user is logged in you want to say hi how are you welcome back if they're logged out you want to say hey going do one login so essentially you're able to do different things based on a certain condition so let's see how this thing works I've got a basic HTML template right now we have that in the actual output alright so inside the body tag let's make a new h2 tag and just say my web application if I save this in the browser we get this result right here all right quite simple now let's add a conditional statement to display different things if a user is logged in or logged out so let's first start by defining a JavaScript object to actually represent the user so I'll put a dash here and then say let user a new variable equal to an object this object contains three properties firstly the name of the actual user Boggs Airport Dominic alright and then a logged in boolean to represent game logged in state for now I'm going to say that actually not loggers like I said logged in equal to false all right the third argument or third sorry the third property will be last login so last login we're going to say it was six minutes ago so somehow using cookies or sessions were able to discover that their name is Dominic they're currently not logged in and their last login was six minutes ago all right so now with this object we're going to output different HTML and based on different property values so the first one is going to be if they're logged in we're gonna say hi welcome back and then their name so let's go down here and write an if statement so we're going to say okay if and then tap out user dot logged in so if the user is logged in then I want an output by indenting some HTML will make a paragraph tag and then indent this to add some child elements to this paragraph we're gonna say okay put a pipe character and say welcome back okay now this pipe character means that I want to ignore all this all this output sorry all this text and make it actual plain text and not an HTML tag if I was to remove the actual pipe then it's gonna make a welcome element okay so put a pipe to ensure that this is interpreted as plain text now down here I'm gonna put a strong tag I'm gonna say strong all right and then interpolate this and pass in user dot name okay so now with this we are essentially saying if the user is logged in then say welcome back and then a put their name in bolt okay so now I'm going to just actually you know what I'll change this logged in state to true and then save this and then we'll see the actual output right so now if I save it the output looks like this welcome back Dominic okay so we see how the condition works if I'll make this false and then say this one refresh the browser and we get nothing at all so you're seeing how it actually works here let's just keep it our thoughts for now okay now I'm gonna add an else alright so down here get in debt back to the actual if line all right and then say else so now this this block will execute when this is not true so we're gonna say okay if they're not logged in then display a anchor link element with an href of login okay and say login so now so now it's saying okay you're not logged in so display a link which links you to the login page and says login so now saving this we get this in the browser refresh log in okay again making this equal to true say this we get that so it's switching based on this condition right there is actually a is actually a third one quarter an elseif so you're able to put an else if between the if and the house so we're gonna use this last login property here to add an else if and say okay if the user logged in less than ten minutes ago then we're just gonna say login again so let's put an else if inside here okay we're gonna say okay else if and then put down if the user the last login is less than ten minutes ago all right we're gonna set okay a new paragraph tag inside here oh I think I'm just gonna say okay your last login your last login once I've been put down user and say minutes ago and then we're gonna tell them do you want to log in again so then say okay add a new paragraph tag inside here and make a new link tag and say H ref log in on last time login again so now if their last login was less than 10 minutes ago we're gonna say okay your last login was that value their minutes ago all right we're gonna say okay login again so now right now we're saying they're not logged in that were actually run okay then we can say okay if that's not true then we're gonna run this I'll see if last leg in this in six minutes ago sorry less than 10 minutes ago we're gonna display that right there so now if we save this one in the browser we get this right here your last login was six minutes ago login again so it's checking the first one that's not true then do this if that's not true then do this so I'll make this 11 okay 11 is more than 10 so now this won't even run and we should get this final else block if I save this what do we get refreshed we get loggia all right and that is how you can use conditionals in park I talked about the case statement in pug so essentially the case statement is just like the normal JavaScript switch statement so you're able to do different things based on the value of a variable or some sort of expression so in this case here with pug it's gonna be you're able to change some HTML based on some sort of comparison so let's see how this thing works I've got a simple HTML markup here with HTML tag head and body and a title inside the index.html we get that result right there so now inside the body we're going to use a case statement so we can start by defining a new JavaScript a constant and call this one order status ok now this right here will be the status of some sort of order so for example the order status might be pending okay and this status might be things such as such as pending it could be in transit so I'll just write these down we have pending it can be in transit and it can also be completed so we're going to look at these these these values here and then output different HTML based on what value the order status is so below here we're gonna use the case statement it looks like this you write out case followed by the thing to actually compare against in this case here we're gonna compare against or out of status okay and then you put a line break then a tab and now you write uh something like this you say when so using the when keyword you then write out an actual value here for example pending so it's kind of like English we're saying okay we're checking the order status when it is pending we want to do stuff here okay so let's say for example I put it um we'll do a paragraph tag and say your order has been placed and you'll be sent shortly okay we can do another one for the in transit value okay this one here is gonna be your order is on the moon you should receive it soon okay and then one more just will be completed paragraph to say your order your order has been completed okay so now we have the case statement all done so it's gonna check the value of order status and then do different things based on the actual value so now inside the outputted HTML what do we get we get your order has been placed and will be set shortly that's because currently the order status is equal to pending if I change this to in transit and then save this we now get on the move you should receive it soon and then obviously we change it to complete it we get your order has been completed so you can see how it's actually working here right now what if I make the value here something random such as random okay Brandon isn't in this list and it's not being compared down here so what happens now well if I save this we get nothing so we actually get no output from that case statement to actually resolve this we can use the default keyword and default means what happens when the value is not one of these okay so if it's not pending not in transit and not completed we're gonna do this instead okay in that case we'll just find out something like sorry we aren't sure what happens with your oil okay so now if we say this one sure enough we get that message right there all right and the same thing works with numbers just make this you know one two and then so on have this as two and we should get that one right there you see how it works Oh numbers strings whatever you want it works and that's how you can use the case statement in pack that the include keyword in pug so essentially the include keyword allows you to include other Park files inside your Pug file and it's very useful when you have multiple HTML pages that share the same HTML so things such as headers navigation bars and footers that sort of stuff and includes might be quite useful so let's see how this thing works I've got an index dot pod file here I'm just going to create a new h1 tag inside the body and give it something like a company name okay and also make a navigation bar with a few links inside here like a new 8a give it a href of something like index.html and have that be home to the same thing two more times for our belt that'll be about us and this one can be contact us but I have the actual hash for the ice right here so now if I was to save this calc file the output looks like this we get that right there in the browser we actually get something like this refresh and we get that so now this navigation bar company name is going to be repeated across multiple pages on this website so we're going to use and includes to actually do that but first I want to show you what it looks like if I was to create a new about Park file and just copy/paste all of this stuff into here and then just have something like about as the twaddle and just have a new header tag below here with about us okay so yeah if I save this and then check the browser I'll just click on this about link and we get that right there so we have the about page here back to home and we get that so we've got actually our move this section right here the h1 and the navigation bar into a separate includes file which will then be repeated across both the index page and also the about page all right so we can do this by first just making a new directory inside this this project book here can I call this directory includes okay I'm gonna install all my includes files inside here to keep things neat so now inside this directory gonna make a new pug source file and call this one nerve tuck okay now open this up inside here I'm gonna put that h1 and the navigation so I'll copy all this and then put it inside naviga just make that all nice and neat once again okay so now we have navigation inside here let's just put that back one more time okay so now navigation is inside here back inside the about park file under the body I'm going to tuck this yep I'm gonna say includes okay using that include keyword followed by the B path to actually include for example in our case it will be includes forward slash nav so includes the actual directory name and nav is the name of the pug farm you can do this with or without the dot plug extension it's up to you okay so now I'm gonna save that and do the same thing for the index page okay get rid of that and paste in include right there so now these pages are going to get the pug that's inside this nav file and just insert it right into place right there so now if I was to save this and just check the actual console here we get no errors oops all right okay now in actual in actual browser or so refresh this time we get the same result so see how the same thing is happening however this time around I can actually I can actually go inside the nav Park file if I make a change inside here it's gonna change it across all the all the HTML pages at for example let's say I want to add a different link to the actual navigation bar if I add a gallery to this will say gallery and call that gallery okay if I save this now we should hopefully see the result in the browser for refresh and we get gallery right there okay so going back to the home page now so the the about page we get gallery as well so I'm making one change and to tag files are being updated and that is the power of the include keyword alright and that's how you can use include in bug so in this one I want to talk about mixins and mixings are basically just reusable blocks of pub code and they behave like functions you can actually call these mixings throughout your pub project and even passing data as argument so dynamic data from your database or whatever you can pass it in as arguments and then the mixin will actually render the HTML with those arguments so they behave very similar to functions so let's see how this thing actually works we're going to use an example of a typical website comment so a comment has things such as an author a date and also the actual comment text itself and we're going to use their mixing to actually render a comment so on a post or video there might be heaps of comments just say 5 to 100 comments and you can use they mix in to to produce the same HTML structure for all those comments but have different data so let's first start by actually designing the common HTML first so inside the body let's create a new wrapper for a comment so let's make a div with a past 5 comment just like that this div has three child elements the first one being the comments date and let's just say the date was for example the 2nd of April okay and we can have one for the actual author so water so that class of author keep it value of decode me for example and also one more for this hits this would be the actual comment itself for example came a nice tutorial ok so now if I was to save this inside the HTML directory we have a new index.html file and the output looks like this if I was to go in the browser and refresh we get that right there so that is basically the structure of the comet designed in HTML let's just add some simple styles to make it look better all right let's make a new start egg up here in the head and create a new style I still sit for the comment class give it a fun family of sansserif our line height of 1.5 let's give some padding about 10 pixels okay and a border of 1 pixel solid and dark gray and also we've got 250 pixels all right now for the actual dates let's make this a bit smaller so we'll say date a class of date let's give it a font size of 85% all right for the author let's give a font size of a bit larger something like budget in 10% and a font weight of the bold and also for the actual text itself let's just say font size 100 percent a little bit the default value anyway well that's fine if I was to save this and refresh the browser this time we get that right there so we have the comet structure in HTML and also some stars I'll just add for the date they text the line of the rights to get that to the right side say this refresh and we get that right there perfect so now we have the actual structure we can now move this into a mixing alright and that'll let us actually reuse this same structure for whatever values we want later on ok so on the top of this pug file let's declare a mixin we can do this by using the mixing keyword so we'll say mixing followed by a space and then the name of the mix itself in this case here let's call our mixing comments ok now as I said this mixing can contain or accept arguments extra data we can put these arguments inside a brace let's accept one argument that will be comment data so now we can reference this comment data argument as a typical JavaScript object within the actual mixing itself so now after an indent inside here this mixin we can put whatever pub code we want alright so for example let's render first the comment wrapper so I will say dot comment so I did with the class of comment okay now down here we can start to render some dynamic values from this comment data argument so inside here let's copy all this stuff right here so copy this paste it inside there and fix that up so now for these values right we can say this instead we put an equals to get some buffered output and we can say comment data dot dates all right down here the same thing comment data same thing for the bottom one equals and then comment data dot text okay so now the mixin is complete we have this reusable structure with some dynamic data coming from the argument okay so now both to save this and go down here alright and I'm gonna replace all of this stuff right here with a mixin call but first let's just declare a JavaScript object to actually be the comment data so down here let's put a dash right here and say make a new constant and call this one C equal to a JavaScript object let's give it some values we need dates author and text so down here let's target a once again we can say it was the 2nd of April so Oh so I have a 402 2018 let's give it the author property of decode and the texts let's just say the same thing hey mate great tutorials ok boom so now the falls to go down here we can now call this mixing and you call a mix in by putting the plus alright followed by the mixing name in our case it'll be comical so plus and then comment that right there now we can pass in the data in this case here that will be C C is going to be the JavaScript object to pass into this comment it's going to be rendered up here so now if I was to save this and refresh the browser this time around we get the same thing with a replaced comment data okay so we can see how it's actually working if I was to go down here and make a new comment object and copy that right there paste it inside there let's change the date to 2020 and we'll make it something like this 2nd of July the author will be our anode Bruce all right and the text can be that was save this and then actually let's just call the actual mixing again so plus comment passing see oh let's just make this C 1 all right C 1 that was a constant so now if I was to save this refresh your browser boom we get two comments while only writing the HTML what so that's the advantage of using mixins now just keep in mind that these mixin solicit can actually contain any form of you know pug features so for example let's actually put an if statement within this mixin let's say that some comments can be posted by an admin user and in that case we want something like a message on top here that says this was posted by an admin so let's just go back you saw the code here and create an if statement inside this comment okay we can say if comment data got posted by admin so if it was posted by an admin I'm gonna render a new I italic Thor let's use an am so then an AM tag to produce italic text and give it the the text of posted by admin okay so now if this comment was posted by an admin render that right there so now within this code down here let's say the first comment has the posted by admin property with a value of true okay so now for us to save this one and refresh the browser we get hosted by admin within that comment there because it has the actual property right there so you can see that the mixin supports all the types of park features not just rendering HTML by itself alright and that is how you can use mixings in pug thank you for watching and I'll see you later
