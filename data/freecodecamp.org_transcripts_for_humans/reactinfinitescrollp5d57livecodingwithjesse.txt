With timestamps:

00:04 - hey everyone welcome to live coding with
00:07 - jesse
00:08 - i'm jesse
00:09 - and
00:10 - today
00:11 - [Music]
00:12 - we're going to work on the
00:14 - infinite scrolling for the search page
00:16 - and
00:18 - i am in my office but i'm on my laptop
00:20 - today every stream health seems uh seems
00:23 - pretty good uh so the networks that
00:26 - works good
00:27 - so uh hopefully everything will work out
00:29 - so
00:31 - on
00:32 - it was probably unwise with me but i
00:35 - started a an update on my imac
00:39 - and
00:40 - i i had
00:41 - i thought plenty of time for it to
00:43 - finish but it's still not finished so
00:45 - that's why i am using this laptop
00:49 - right now
00:51 - but everything looks okay
00:55 - and
00:57 - let me get i'm just trying to get
00:59 - everything in in position
01:01 - uh
01:03 - let's see
01:10 - i i have a certain setup for all my
01:13 - screens so
01:15 - i wasn't expecting to
01:18 - do this and i have different monitors
01:19 - hooked up than i normally do to my
01:21 - laptop
01:22 - okay
01:23 - looks good now hey everyone see some of
01:27 - you are in the chat also um
01:30 - i completely forgot to
01:32 - announce that i was doing this stream on
01:34 - twitter and on instagram which i
01:36 - normally do
01:37 - i
01:38 - i don't know i don't know what i was
01:39 - thinking so
01:41 - uh
01:43 - hopefully
01:44 - hopefully that won't
01:46 - be a problem i know a lot of you
01:48 - subscribe to the channel so you're
01:49 - getting the notifications anyway
01:52 - and
01:53 - let's
01:54 - let's get started
01:56 - uh was
01:58 - renato asked if this just started it did
02:00 - it just started we haven't even done any
02:01 - coding yet
02:03 - um
02:04 - let me switch over
02:07 - nope that's not the screen i want
02:10 - okay
02:11 - i'm gonna have to add another screen
02:13 - here
02:20 - and
02:27 - display capture
02:37 - there we are
02:51 - nope that's not what i wanted
02:53 - uh
02:55 - let's add one more scene sorry sorry i
02:58 - messed with this i just um
03:00 - if you're just coming in i'm on a
03:02 - different computer than i normally
03:04 - stream with in my office so
03:07 - that's why these
03:08 - it's it's a little messed up right now
03:16 - actually i think i can just change this
03:18 - one video capture
03:22 - uh display capture there we go
03:25 - let me just change this one i'll have to
03:26 - remember to change it back when i stream
03:28 - from home okay that's the right screen
03:31 - sorry about that
03:34 - i'm gonna make this a bit bigger so
03:37 - everyone can see
03:40 - oh goodness
03:46 - yeah this is
03:53 - definitely different
03:54 - on the uh sizes and stuff
03:57 - there we go okay it's all in there now
04:05 - okay so hopefully that size will be good
04:07 - for you all uh and you'll be able to see
04:10 - i see there's
04:12 - some questions already in the live chat
04:14 - i will get your questions after we do a
04:16 - little bit of coding so i'm going to set
04:18 - this uh pomodoro timer whoops
04:21 - and we're going to do one session of
04:23 - coding and then we'll take a little
04:25 - break and i'll get to the questions
04:29 - so this is our search page we haven't
04:32 - worked on this page for a while
04:34 - and um we
04:37 - we got the basic functionality working
04:40 - but there's one thing that we didn't do
04:42 - that we had talked about doing and that
04:44 - was uh having this infinite scroll
04:47 - feature
04:50 - uh so let's see
04:53 - make sure this is still working yep
04:55 - still working okay so for right now
04:58 - what we get
04:59 - uh when when we search is
05:03 - the category
05:04 - uh
05:06 - i get i should say like the post type so
05:08 - we're pulling in this data from
05:10 - wordpress so we get
05:11 - what is essentially the post type
05:14 - in wordpress and then we get the title
05:17 - of that post type
05:19 - and we also have made that into a link
05:24 - i don't think all the links work though
05:31 - and we're not going to worry about that
05:32 - today
05:34 - what we do want to do is
05:37 - make sure that once we scroll down
05:41 - we'll do another search
05:44 - and get more results
05:48 - so
05:49 - this is going to be a little bit tricky
05:51 - let me go to the code and show you how
05:53 - we're doing what we're doing
05:55 - in case you you didn't see that that
05:58 - stream it was
05:59 - at least a month ago i think
06:01 - and so show you how we're doing what
06:03 - we're doing and then what we need to do
06:05 - to get there we'll try to break it down
06:07 - into small steps and then see how many
06:10 - we can get through
06:13 - so this is something that i've done
06:15 - before on a non-react
06:18 - project um
06:20 - so this will be interesting
06:25 - to see how how we're gonna do this with
06:27 - react
06:31 - i don't think i have this yep there it
06:33 - is i did have this page open
06:36 - okay
06:37 - let's shut
06:39 - the side drawer to give us some space
06:42 - okay
06:44 - and uh if you want to
06:46 - follow along with the code
06:48 - check out the github repo the link is in
06:51 - the description
06:55 - and
06:57 - i i'll just start from the top and just
06:59 - give a very brief explanation of of
07:02 - what's going on here
07:04 - so
07:06 - we have
07:08 - this
07:09 - utility that we've made
07:13 - so
07:14 - that just basically is a wrapper around
07:17 - the uh the fetch api okay so the fetch
07:21 - api that's that's in the browser
07:25 - uh and we're pulling it in as get json
07:27 - so when you see that basically all it's
07:29 - doing is just
07:30 - using fetch to get data
07:33 - and returning it to us in json format
07:38 - so now let's go down a bit and see you
07:40 - know where
07:43 - what kind of data we're getting so
07:45 - this is what we're using to actually
07:47 - make the call this is our base url to
07:50 - our wordpress installation
07:53 - and we can reach the wordpress api
07:55 - endpoints
07:57 - uh by
07:58 - you know going to wpjson wp slash v2
08:02 - and then after that
08:04 - we have a plugin running in our
08:06 - wordpress installation called multiple
08:07 - post type which allows us to fetch data
08:10 - from multiple post types
08:13 - uh
08:14 - so
08:18 - that's what this part means
08:20 - now we set the per page to 100 that
08:23 - means we get 100
08:26 - results
08:28 - per search
08:30 - this is the maximum that you can get
08:31 - with wordpress
08:33 - i don't know
08:36 - i've never come across a way to get more
08:39 - than that
08:42 - so for now we're just going to assume
08:44 - that that is the maximum we can get in
08:46 - one go
08:47 - uh which is not bad i mean it ensures
08:49 - that there's not an overwhelming amount
08:51 - of data coming in uh so
08:54 - i can live with that for now
08:57 - and then we search for a specific term
09:03 - and we also have some filters
09:06 - right
09:08 - over what type of data we want so that
09:11 - would be these right so we can choose to
09:14 - get all the data from from every
09:18 - um
09:19 - post type
09:21 - or we can just search a particular post
09:24 - type
09:25 - okay and then we have some sorting going
09:26 - on which really isn't gonna affect what
09:28 - we're doing right now too much
09:33 - so
09:34 - what we need to do then when we scroll
09:37 - down
09:38 - to a certain point in the page
09:40 - so let let's say we've done a search and
09:43 - in reality there's there are 500 results
09:47 - we're only going to display 100 of those
09:50 - results to the user at first
09:52 - but once we scroll down to a certain
09:54 - point on the page
09:57 - we want to grab the next 100 results
10:02 - and then we scroll down more we want to
10:04 - get the next 100 results and we want
10:06 - that to happen in the background
10:10 - you're preferably in a way to where the
10:12 - user may not even realize that more data
10:15 - is is being fetched so they can just
10:17 - scroll when it's seamless
10:19 - so
10:20 - i mean we'll have to
10:22 - mess around with the timing on that
10:24 - i mean i don't want to unnecessarily
10:26 - fetch more
10:27 - so you know
10:29 - if we set it to just get the data you
10:32 - know let's say we scroll here
10:34 - maybe a little early
10:36 - but
10:37 - you know for sh
10:38 - if we wait too long then the user will
10:40 - have to wait and if they're on maybe
10:42 - they're on a slow connection
10:45 - they they won't even realize maybe
10:47 - they'll scroll back up before the date
10:48 - even comes through they don't realize
10:50 - that there's more
10:51 - so
10:52 - maybe about here is the point where we
10:55 - want to fetch new data obviously if the
10:57 - user scrolling very very quickly they're
11:00 - still going to make it to the bottom
11:01 - before that data you know appears
11:05 - but that's that's the goal
11:08 - so we're going to have to just to kind
11:11 - of break this down
11:14 - what we need to do first is be able to
11:17 - track the position on the page
11:21 - and be able to
11:23 - call a function
11:26 - when a certain position is reached
11:30 - once that happens
11:32 - what we have to do is just modify
11:36 - this fetch
11:37 - fetch search term
11:40 - function
11:41 - to be able to grab
11:43 - the next
11:45 - 100
11:47 - so
11:50 - i i think would i think we'll just
11:52 - modify this
11:54 - to do that i thought maybe we could just
11:57 - make a whole another function and we'll
11:59 - see it depends i don't want this
12:01 - function to get really huge and hard to
12:03 - to think about
12:05 - so we'll see if it does get like that
12:06 - maybe we'll break it out uh
12:08 - separately so first things first let's
12:11 - track the scroll uh and react
12:14 - so i have not
12:16 - um
12:21 - uh sorry i mean messages
12:28 - i have not uh done this i think i've
12:32 - done this in react yet
12:34 - if i have it's been a while and i don't
12:36 - don't really remember
12:42 - okay
12:43 - so
12:45 - we're using material ui
12:49 - so the first thing i want to do is see
12:51 - if material ui has any solutions for us
12:54 - built in before i go elsewhere and
12:56 - either try to find a package that does
12:58 - it or we just try to make something on
13:00 - our own
13:04 - so let's see
13:06 - scroll
13:18 - now i have these scroll buttons
13:25 - um
13:29 - no
13:31 - i was hoping that scrolls by you know
13:33 - what i remember where we've done this
13:35 - before
13:36 - let's check out one of our previous
13:38 - projects so i'm going to go into github
13:40 - here
13:41 - and
13:41 - [Music]
13:47 - running
13:50 - laptops running a bit slow
13:56 - if my main computer turns back on i
13:58 - could switch over to that if this is too
14:02 - slow i mean if it only takes a few
14:04 - minutes then
14:05 - it may be worth it
14:11 - what was it a
14:12 - resource center
14:14 - right
14:15 - yes resource center
14:17 - okay so in uh this project of the
14:20 - resource center let's bring this up
14:22 - right now
14:23 - uh just to give you an idea of what
14:25 - what's happening
14:26 - uh when we actually see that code
14:30 - so let's see
14:31 - [Music]
14:36 - i think it'd be in the views
14:46 - um
14:56 - let's see
15:02 - i think it's yep here it is okay so if
15:05 - you can see
15:06 - i know it's a little small let me zoom
15:08 - in
15:11 - so we have this menu on the side here
15:14 - and as we scroll
15:16 - things change
15:19 - uh it's hard to tell when i'm zoomed up
15:21 - it
15:23 - the zoom messes up the the scroll so as
15:26 - we scroll it changes
15:29 - to show us you know where we're at
15:32 - in the site
15:33 - and i messed up the scroll
15:37 - so and if we click somewhere
15:40 - then we can get
15:43 - the different
15:45 - two different places on the page
15:49 - which
15:52 - yeah oh wow i don't know what i did
15:54 - but
15:55 - i think all my zooming messed this up
15:58 - anyway
15:59 - this is we're going to try to adapt what
16:01 - we've done here to track the scroll
16:04 - so
16:06 - let's figure out where that's at
16:09 - resource
16:10 - planning ad that's it
16:12 - so we'll go into here and
16:15 - this is all on github it's public so you
16:17 - can check that out um
16:19 - in the fus marcom github organization
16:22 - you can go to resource center check it
16:24 - out actually why not just copy i'm going
16:26 - to copy this into the live chat now
16:29 - so you can go right there
16:31 - if you click that and you get an error
16:33 - then try copying and pasting that
16:37 - if for some reason in the live chat
16:40 - links sometimes give errors when you try
16:42 - to click on them
16:49 - all right so let's see
16:57 - this might be the component that we
17:00 - created for this so we may have to check
17:01 - out that as well let's let's see
17:06 - great okay so we are tracking scroll
17:10 - with props
17:15 - okay
17:27 - is it this
17:29 - yeah it's not mistake all
17:34 - okay so we're adding an event listener
17:37 - on the component didn't mount
17:42 - okay
17:48 - all right let's copy over
17:52 - a lot of this
17:54 - and
17:58 - then we'll adjust it as needed
18:03 - so first things first
18:17 - and this is i guess let's grab all of
18:19 - this
18:26 - these zoom out will be easier for me to
18:27 - grab it off
18:32 - okay
18:36 - all right wow this is already quite a
18:39 - large component at some point this would
18:41 - be a good candidate for uh refactoring
18:46 - so we have a lot going on in here
18:49 - all right so
18:53 - perhaps
18:57 - let's go to the bottom here
19:08 - okay so here's everything
19:14 - but obviously we're gonna we're gonna
19:16 - change this up
19:26 - because we're we're not using our
19:28 - constructor here so let's put this in
19:30 - our state that we're already using
19:36 - okay so now we have
19:55 - that's weird
19:57 - i don't know why it's giving us
19:59 - we should be able to set that to an
20:01 - empty array
20:09 - that's the state so let's get rid of
20:12 - this
20:18 - um let's see
20:29 - all right so we'll do this in a
20:30 - different way
20:32 - let me check my time here and i want to
20:34 - all right we still have about nine
20:35 - minutes
20:37 - and
20:42 - we have
20:43 - we want to throttle
20:45 - uh how we do scroll so we don't
20:47 - basically whatever we're gonna do
20:50 - uh when we track the scroll we don't
20:52 - want that to happen over and over and
20:54 - over again you know
20:56 - very quickly
20:57 - we won't throttle that
21:00 - and i believe we're already using
21:02 - throttle so
21:03 - uh let me double check
21:06 - you should be bringing okay we're using
21:09 - d-bounce
21:15 - all right
21:17 - let's see
21:20 - i
21:21 - think we should be able to bring in
21:27 - ah let's check our package json and see
21:30 - what we're bringing in
21:34 - if we just brought in yeah we just
21:37 - brought in d-bombs
21:44 - all right so i guess we can bring in
21:46 - throttle as well so let's do the yarn
21:49 - add
21:53 - low dash
21:58 - i think this would work
22:00 - we'll find out a second
22:03 - yep that's working
22:07 - okay so we're pulling in that package uh
22:10 - lowdash is like a collection of of
22:13 - helpers
22:16 - um so
22:19 - there are certain things that are
22:21 - i don't know basic things that you might
22:23 - want to do you know common things that
22:26 - instead of coming up with your own
22:27 - solution
22:28 - you know you can just pull these things
22:30 - in from low dash very helpful
22:34 - basically both d bounce i'm not going to
22:36 - get into the difference between d bounce
22:38 - and throttle right now but
22:40 - essentially
22:42 - you use them for pretty much the same
22:44 - purpose in that you you want to stop
22:47 - some a function
22:48 - from happening
22:50 - too quickly you know too many times when
22:52 - it's really unnecessary that it would
22:54 - happen that many times
22:56 - so let's change this
22:59 - throttle okay so now we will be able to
23:02 - use that
23:04 - and we
23:05 - i want to see how we're using d-bounce
23:07 - and then just follow that same pattern
23:11 - there we are the bounce search
23:14 - okay
23:15 - great so
23:21 - scroll down
23:23 - um
23:31 - there we are
23:33 - okay so we're just gonna say handle
23:35 - scroll
23:39 - and close
23:45 - let's double check that
23:53 - i need even more space
24:02 - there we are
24:10 - okay
24:11 - i thought that looked the same
24:13 - so what's our problem down here
24:44 - i'll be using this somewhere else
24:57 - uh
24:58 - okay
24:59 - that's why
25:11 - okay
25:13 - so let's do
25:16 - let's call this throttle
25:22 - throttle scroll
25:27 - right
25:51 - um
26:15 - yeah so we want to
26:23 - yeah instead of calling handle scroll
26:32 - i guess we'll call throttle scroll
26:49 - all right
26:53 - okay so let's just let's think out loud
26:56 - about this
26:57 - um
26:59 - so what we are doing
27:02 - i gotta double check we already aren't
27:04 - using component did mount somewhere but
27:06 - uh what we are doing is
27:08 - when the component mounts we're adding
27:10 - an event listener so scroll event
27:13 - listener
27:14 - and
27:15 - um on scroll we're calling
27:18 - throttle scroll
27:21 - so every time
27:23 - there's a scroll
27:26 - we are
27:31 - let's see
27:32 - there we are so every time there is a
27:34 - scroll
27:38 - hopefully this little squiggly line will
27:40 - go away
27:41 - um but every time there's a scroll
27:44 - um we're gonna we're gonna throttle
27:47 - right so we're not going to allow this
27:49 - function to go off every single time
27:51 - there's going to be a delay
27:53 - um
27:54 - [Music]
27:55 - but
27:57 - every time
27:59 - not every single you know pixel is
28:01 - scrolled but
28:02 - a reasonable amount of scrolling will
28:04 - occur and then this dot handle scroll
28:07 - will be called
28:09 - handle scroll then
28:12 - is
28:17 - going to
28:19 - give us the position
28:21 - the y position
28:23 - right and that's going to save that to
28:26 - state
28:28 - now what we don't need here is this
28:32 - active key
28:34 - right because that was telling us what
28:36 - section we were in for the scroll spy we
28:39 - don't need that
28:40 - so we can remove that
28:44 - this part of it
28:47 - and instead
28:51 - we're gonna write
28:56 - a little to do
28:59 - so we remember
29:01 - and instead what we want to do is say
29:05 - if
29:07 - scroll is
29:11 - close to bottom
29:16 - then
29:19 - search
29:22 - okay so if we're if we're a certain
29:25 - amount of time from the bottom then
29:26 - we're going to search for those next 100
29:28 - or next however many is is left right if
29:31 - it's less than 100 we're obviously going
29:33 - to get
29:34 - that lesser number
29:36 - okay so
29:39 - i haven't really tested anything yet but
29:41 - logically
29:42 - this is working so could still have
29:44 - syntax errors could potentially even
29:46 - have logic errors but that's going to be
29:48 - for the next pomodoro session so right
29:50 - now for right now my timer went off
29:54 - i'm going to take a short break
29:57 - and i'm going to answer questions
30:03 - let's see
30:05 - hey hey everyone is a lot of people
30:07 - saying hi
30:08 - i see some new names that i haven't seen
30:10 - before so welcome
30:14 - all right abby sheik says i want advice
30:15 - regarding where to start my learning
30:18 - i've completed basic javascript
30:22 - um
30:28 - abby check
30:29 - so are you
30:31 - are you then going through the free code
30:32 - camp curriculum now did you complete
30:36 - complete that basic javascript portion
30:38 - are you just saying like in general you
30:40 - have knowledge of the basics of
30:42 - javascript
30:43 - um
30:44 - i i mean i would if you aren't already
30:46 - doing it i recommend going through the
30:48 - free code camp curriculum at
30:50 - freecodecamp.org
30:54 - udacity also has some free
30:57 - online courses that are are good
31:00 - there are certainly a lot of good videos
31:02 - on youtube so free code camp has great
31:05 - you know tutorial videos uh but there
31:07 - are some other youtube channels that
31:08 - have good videos as well i know um
31:12 - learn code academy was uh a good
31:15 - resource it has been a good resource for
31:17 - me
31:19 - and um
31:20 - [Music]
31:22 - if you're in if you like books uh learn
31:25 - what is it called eloquent javascript so
31:28 - eloquent javascript is a good book and
31:31 - uh you can read that for free online
31:33 - and then you don't know js is a book
31:35 - series that you can also read for free
31:37 - online uh on github
31:43 - let's see
31:45 - fox wanted asks are you currently at
31:47 - work i am i yeah i'm in my office at
31:49 - work i work at franciscan university
31:53 - that's a small
31:55 - university in ohio
32:01 - all right
32:02 - divya says hi jesse how are you uh not
32:04 - bad not too bad
32:07 - uh how how are you doing
32:12 - broderick says learning a lot on free
32:13 - code cam awesome glad to hear it
32:18 - let's see
32:36 - all right looks like there's some
32:37 - discussion about uh someone's computer
32:40 - in here
32:41 - um
32:42 - sergio says hello jesse hope you're
32:44 - doing fine yeah not too bad not too bad
32:46 - i hope you are doing all right as well
32:49 - uh michael says gotta go to the doctor
32:52 - but i have been playing with
32:54 - implementing the search with graphql
32:56 - it's hard to it's hard due to the weird
32:58 - url structures but i'm making progress
33:00 - plus you can use fetch more for
33:02 - scrolling oh interesting
33:07 - i like that so anyway michael well
33:10 - thanks for um
33:12 - for stopping by the stream a little bit
33:13 - i hope everything's all right and uh
33:15 - good luck uh good luck at the doctor
33:20 - dmitry says hi it's nice to see you i'm
33:22 - glad to to see you in the chat too as
33:25 - well dimitri
33:26 - um
33:28 - let's see
33:30 - uh yusuf says why not install the whole
33:32 - lowdash library um yusuf basically
33:35 - because i don't i don't need
33:38 - most of what's in lodash i really don't
33:40 - need
33:41 - so i just install the pieces that i need
33:45 - if it got to the point where i was using
33:48 - most of lodash then it would probably be
33:50 - easier just to install everything but
33:52 - right now it's
33:53 - you know i just need two things from
33:55 - there
34:02 - also my stomach is growling so if you
34:05 - hear that i'm sorry
34:07 - that is
34:08 - my stomach growling i guess i need to
34:10 - eat
34:12 - uh
34:13 - pool kid says sir i have done
34:15 - intermediate development and node.js for
34:18 - back end what more could i try out for
34:20 - web apps
34:30 - i mean this there's a lot i mean it's
34:32 - kind of like a difficult question
34:33 - there's so many things that you could
34:35 - try out
34:38 - um if you want to get into more like
34:40 - database stuff
34:45 - sorry about you on you could try like uh
34:48 - sql base or nosql um databases uh maybe
34:52 - try to set up graphql
34:54 - and use that
34:56 - um
34:57 - [Music]
34:59 - if if you want to get more into front
35:01 - end then you know maybe check out a
35:03 - framework or a library like reactor view
35:06 - or angular
35:07 - so i guess it kind of really depends on
35:09 - like what direction you want to go in
35:12 - uh but
35:14 - i guess just to name a few things those
35:17 - uh those wouldn't be a bad place to uh
35:20 - to start
35:22 - um kelman asks what are the best books
35:24 - for learning python unfortunately i i am
35:27 - not that familiar with python so i don't
35:30 - really have any book recommendations
35:31 - i've i've never read any uh python books
35:34 - so if someone else watching now has some
35:36 - experience with python in particular
35:38 - with with good books for python
35:41 - please put that in the live chat now or
35:43 - in the comments if you're watching this
35:45 - later on
35:47 - okay
35:48 - so my timer is up as you all can see
35:51 - so let's do another 25-minute session
35:54 - pomodoro session and
35:57 - uh then we will
36:01 - hey cool no um no errors i was afraid
36:04 - that i had broken it like to the point
36:05 - where we wouldn't even see anything but
36:07 - i guess i haven't
36:08 - so that's cool
36:09 - um
36:11 - yeah so let's let's kind of try to test
36:13 - out what we've been doing
36:14 - and
36:15 - [Music]
36:17 - really we could probably just put a
36:19 - console log in here for now
36:22 - i don't like to to do too much without
36:24 - testing first because uh you know if you
36:27 - code a lot and then test after it's
36:30 - harder to figure out where the problem
36:32 - is
36:33 - so
36:34 - this is actually a bit more than i
36:36 - normally do before i test but since we
36:38 - copied over so much we really didn't
36:41 - have a chance to test it so i'm just
36:43 - going to do a console log
36:46 - and let's let's just say
36:49 - scroll
36:50 - we're just going to have it say scroll
36:52 - and then that way we can see so this
36:54 - stage scroll y is greater than position
36:57 - minus one
36:58 - where's position this thing needs to
37:01 - save
37:03 - okay we may be able to simplify this a
37:05 - bit more
37:18 - yeah let's get rid of this each
37:20 - i don't think we need that
37:22 - so let's take out
37:24 - uh these and then take out this each
37:29 - so
37:30 - i mean this
37:31 - simplifying and getting rid of any code
37:33 - at all in this
37:35 - huge component is is definitely a plus
37:38 - all right so now we'll just say
37:42 - um
37:43 - [Music]
37:44 - handle scroll this set state scroll y
37:47 - is going to equal window dot scroll y
37:50 - okay wonderful
37:51 - and then now
37:53 - say if
37:55 - this state scroll y is greater than
37:59 - position
38:00 - minus 1.
38:02 - so we don't really want position minus
38:04 - one
38:05 - instead what we want to get
38:07 - and
38:09 - let's let's change this up let's say um
38:13 - instead of position minus one let's say
38:15 - bottom
38:19 - minus
38:21 - uh
38:24 - i don't know let's say 500
38:30 - okay so it'd be like 500 pixels
38:34 - not really sure if that's a reasonable
38:35 - amount right now but we're we're just
38:37 - trying it out
38:39 - hey i just see ann is here hey anna
38:41 - how's it going
38:44 - thanks for watching
38:46 - okay so
38:48 - if the scroll y
38:51 - is greater than
38:55 - the bottom of the value of the bottom of
38:58 - the screen minus 500
39:01 - then we're going to console.log scroll
39:05 - also the set headers we can completely
39:08 - get rid of
39:09 - because we're not worried about the
39:11 - headers anymore
39:13 - and handle next
39:18 - i don't think we're gonna need handle
39:20 - next so let's get rid of that as well
39:25 - this feels so good to get rid of code
39:27 - you're not using
39:29 - uh
39:30 - and let's see scroll scroll throttle
39:32 - scroll okay wonderful we've gotten rid
39:34 - of that
39:36 - red line
39:38 - okay
39:39 - so that's this is going to be called
39:41 - when we scroll
39:43 - and
39:44 - let's
39:45 - change our state a bit clean it up
39:48 - because now there's things in state that
39:49 - we do not need
39:52 - so let's get rid of header positions
39:56 - and also
39:58 - active section
40:01 - but we do need
40:04 - to know
40:09 - let's see we need to know what the the
40:12 - bottom like how tall the screen is
40:16 - so
40:20 - how do we find that out
40:26 - let's see
40:27 - um
40:31 - window height
40:33 - let's just try it out let's go in the
40:35 - dev tools console and just see
40:41 - it's most definitely taking a long time
40:46 - all right come on console
40:53 - so let's see uh window
40:58 - dots
41:00 - height
41:05 - wow
41:08 - oh goodness
41:11 - oh i accidentally clicked on one of
41:12 - those links i suppose
41:16 - so that messed things up
41:19 - all right
41:21 - expected a function
41:23 - my
41:35 - ah this shouldn't it shouldn't be firing
41:38 - [Music]
41:42 - all right let's see what our problem is
42:03 - what
42:05 - like what did we even change from the
42:07 - last time
42:11 - i mean all we did was just get rid of
42:13 - things right
42:54 - hmm
43:06 - uh don xavier says try window inner
43:10 - heights okay i'll try that if i can get
43:12 - a page to load here
43:33 - hmm
43:36 - all right so
43:38 - something is messed up here
43:50 - all right let's make sure so it looks
43:52 - like
43:53 - so low dash throttle is expecting a
43:55 - function
43:56 - so you run throttle
43:58 - this handle scroll
44:02 - i mean that's that's a function right
44:04 - let's see how we're doing it up here
44:07 - i mean is it
44:11 - let's see
44:23 - [Music]
44:24 - maybe it's the uh maybe it's the order
44:27 - i will
44:28 - i guess i wouldn't have thought it would
44:29 - have mattered but
44:31 - um
44:33 - we are trying to call handle scroll
44:35 - before we get down there i don't think
44:37 - this is the problem but
44:39 - it's worth a shot
44:48 - let's save that
44:50 - and a little refresh
45:13 - uh super asks why are we using throttle
45:18 - and we are using d-bounds to add late
45:20 - api calls yes so d-bounce hey it worked
45:23 - uh yeah d-balances for the api calls to
45:26 - a delay and then
45:30 - what the heck
45:33 - no long page view is not oh i know
45:37 - yes of course log page view is not
45:39 - defined
45:42 - i i copied over stuff that we don't even
45:45 - have so we will eventually uh
45:48 - put analytics in
45:51 - but we don't have that set up right now
45:53 - so that was our other error uh and then
45:55 - yeah to answer your question to use
45:57 - throttle where we're slowing down the
45:59 - the amount of times that we
46:02 - run things on scroll
46:21 - okay
46:23 - all right cool
46:24 - no errors still errors we're good
46:26 - all right so now what we want to look
46:28 - for let's get rid of all this stuff in
46:30 - the console we want to see
46:32 - a scroll
46:35 - well let's see let's let's get some data
46:38 - here
46:39 - um
46:43 - we never set
46:45 - the value of bottom did we
46:48 - no we never said that all right let's
46:51 - set the value of bottom
46:53 - so
46:54 - what i'd like to do is set the value
46:59 - oh that's why because we were testing it
47:01 - out
47:02 - that's what happened
47:05 - [Music]
47:12 - in our heights
47:14 - nice
47:15 - okay so that's our inner height
47:18 - so this is how we can get that so let's
47:20 - go back here and let's make
47:25 - uh i guess we'll you know let's put it
47:27 - in state
47:29 - let's go
47:29 - [Music]
47:34 - window
47:35 - height
47:37 - and we'll just set it at zero for now
47:39 - and then
47:41 - after we fetch
47:45 - we reset window height after you fetch a
47:48 - search term
47:51 - you know what i
47:55 - let's get the window height on scroll
47:58 - uh so
48:00 - that way uh
48:02 - if
48:03 - i was gonna get the window height
48:05 - whenever we run the search
48:07 - but
48:09 - if a user happens to
48:12 - change their screen with
48:15 - which
48:16 - most users don't do that right i mean
48:18 - developers do that a lot because we want
48:20 - to see that but potentially
48:22 - like let's say um on a phone they could
48:25 - go from porsche to landscape which would
48:27 - definitely change the height so then
48:29 - that way like every um
48:36 - every time the user scrolls it will get
48:39 - the height again
48:41 - so i don't think that'll be too
48:43 - difficult performance wise if we notice
48:45 - there's some weirdness going on then you
48:48 - know we could always rethink that you
48:49 - know at this point we're just trying to
48:50 - get it to work we can always optimize
48:53 - later if necessary
48:58 - all right
49:00 - where is my handle scroll area
49:03 - okay so
49:04 - this states
49:07 - yeah so let's just grab this
49:19 - let's see i believe
49:21 - can we set this
49:24 - um
49:32 - and then we call this window
49:38 - nope
49:39 - window heights
49:45 - window dot
49:51 - height
49:52 - okay
49:58 - you can do that right can i set two
50:00 - different things in state in the same
50:02 - set state thing
50:05 - i'll find out in a second
50:12 - okay so since we're getting window
50:14 - height uh now we're not gonna say bottom
50:18 - right we're gonna say
50:21 - window
50:22 - this
50:23 - state
50:25 - window
50:27 - height
50:33 - we probably structure some of this we
50:35 - don't have
50:37 - to keep doing this state but
50:39 - that can happen
50:41 - when we refactor
50:43 - okay
50:48 - so let's let me make sure this is all
50:51 - loaded by refreshing
51:18 - okay this looks almost refreshed there
51:21 - we are
51:23 - there we go
51:31 - so
51:38 - let's
51:39 - search we'll do a search first
51:45 - and
51:47 - we should there we are we got a scroll
51:50 - scroll
51:52 - scroll
52:04 - okay
52:07 - maybe
52:08 - [Music]
52:11 - 500 isn't the best
52:18 - oh morton says i think you missed the
52:21 - window
52:24 - i did
52:28 - window
52:30 - window height there we are
52:34 - [Music]
52:49 - [Music]
52:56 - we have the correct
52:59 - right now
53:22 - hmm
53:28 - yeah still not acting the same um
53:31 - i'm gonna have to do a refresh again i
53:33 - hate to keep doing these refreshes
53:35 - because they take forever but
53:37 - um
53:42 - just this laptop is just slow
53:45 - how many says hey jesse how's it going
53:47 - not too bad how you doing
53:49 - thanks for joining us in the live chat
54:02 - all right
54:28 - okay
54:29 - that makes more sense
54:33 - okay
54:34 - yeah so you see we're not getting i
54:36 - don't know uh if if you can see what's
54:38 - in the console over there i know it's
54:39 - getting blocked partially by uh my face
54:43 - so
54:44 - uh
54:44 - we don't actually get the console log of
54:47 - the word scroll until we get closer to
54:50 - the bottom
54:51 - bottom of the page
54:54 - so
54:55 - that is working uh just a few
54:57 - observations here of uh problems
55:02 - that we might have is uh it's it's
55:05 - working but it's calling that like every
55:08 - single time
55:10 - uh we stop scrolling like below that
55:12 - point so
55:15 - that's not what we want
55:17 - because we then we'd be making a ton of
55:20 - api calls to fetch the same data so
55:23 - that's no good
55:28 - i wonder how
55:34 - how did i handle this
55:37 - let me check my time
55:39 - oh five minutes all right i don't have
55:41 - time to do this so
55:43 - what what i think i'm gonna do for that
55:45 - particular issue is uh i'm gonna go back
55:48 - to a project i did
55:51 - over a year ago maybe two years ago
55:54 - where i implemented some of this
55:57 - just using
55:59 - javascript jquery
56:02 - i want to see how i handled that issue
56:06 - and
56:08 - see if it could be easily adapted to our
56:10 - situation
56:12 - because i was using
56:16 - the wordpress api
56:18 - and i need to go back there and look at
56:20 - at what the correct syntax is for
56:24 - getting the next set of data anyway
56:27 - so i
56:28 - i don't have time right now in this
56:29 - pomodoro session i don't really want to
56:31 - do a lot of research during the stream
56:33 - so that's gonna be
56:35 - something that i look up and then maybe
56:37 - we'll finish uh on the next stream or
56:40 - maybe i'll just go over what what i did
56:42 - to make that work
56:45 - on the next screen
56:48 - but for now
56:55 - wow i just keep accidentally clicking
56:57 - things
56:59 - what
57:02 - i hope i didn't make the link stretch
57:05 - like all the way across the page
57:06 - inadvertently
57:09 - oh well i'll check that out later so
57:12 - um
57:14 - if the scroll is close to the bottom
57:16 - then search
57:18 - so
57:20 - what we would want to do is
57:23 - it would be a little bit of a different
57:26 - type of search right because we're we're
57:28 - going to search the same terms that we
57:31 - just had
57:32 - so the search term is actually saved in
57:34 - state so that's good
57:36 - um so we're just going to call
57:40 - fetch search term or act we're going to
57:42 - call
57:43 - debounced search
57:48 - right
57:54 - i guess we don't have to we we could
57:56 - probably call fetch search term
57:59 - directly
58:02 - either way it doesn't matter we're going
58:04 - to call that
58:06 - um
58:07 - and then it's automatically going to be
58:09 - able to get that search term
58:12 - but then what's going to need to happen
58:13 - is there needs to be some sort of check
58:16 - um
58:18 - maybe just a simple if statement or
58:20 - return area something like that that's
58:22 - going to say
58:24 - we'll probably add something else to
58:25 - state here like
58:27 - um
58:30 - should it be
58:31 - um
58:40 - scroll search
58:43 - let's just say for now i'm just kind of
58:45 - thinking of what we'll need let's say
58:46 - like scroll search false would be
58:48 - default but then once it flips to true
58:52 - uh then we know that the the search
58:55 - is going to be
59:00 - we're going to need the next set of
59:03 - values
59:07 - so perhaps
59:08 - [Music]
59:11 - maybe
59:12 - [Music]
59:13 - result
59:15 - result count
59:17 - would start at zero
59:19 - and then we would keep track of how many
59:20 - results we've already had
59:23 - okay so
59:26 - this this may change when i'm going to
59:27 - go back and check my old code
59:30 - i really don't want to reinvent the
59:32 - wheel i remember spending a lot of time
59:34 - on making this work and i i it still
59:36 - works i mean it was it's kind of
59:38 - spaghetti code jquery but it's been
59:40 - working for
59:42 - uh
59:43 - at least a year i think at this point
59:45 - more than a year
59:48 - so i know it works
59:51 - so i'm gonna grab that but we're
59:52 - definitely gonna need some way to keep
59:54 - track of like where we're at so we know
59:57 - what to search for next
59:59 - um and then we also need to know
60:02 - wait when this runs this function needs
60:04 - to know like
60:06 - okay am i just going to
60:08 - do my my normal search or like what am i
60:11 - going to need
60:12 - and so i mean that it may be as simple
60:15 - as just adding on another value here
60:19 - and if
60:20 - you know
60:22 - we can make that value instead of a true
60:24 - false it could just be the value so
60:29 - it could be an empty string
60:32 - if there's nothing or
60:34 - you know it could actually have
60:35 - something in there uh if we are going to
60:38 - do a scroll search so may be able to
60:40 - simplify that a bit
60:43 - i think my timer is about to be up yeah
60:45 - eight seconds all right so i'm gonna go
60:46 - back to the live chat i'm gonna answer
60:48 - some questions
60:50 - uh so let me scroll up a bit
61:01 - okay so
61:03 - we have a question from poolkit it says
61:06 - i have tried out some libraries and
61:08 - frameworks like react so in general some
61:11 - example of projects i could start out
61:13 - with
61:15 - okay so you'd like uh example project
61:22 - um i if i were you and just wanted some
61:25 - example projects check out
61:26 - freecodecamp.org
61:28 - and go to some of their projects
61:30 - and um try to build those projects in
61:33 - whatever framework you want so if you
61:35 - were testing different frameworks you
61:36 - could take like for instance the weather
61:39 - app project and you could try to build a
61:41 - weather app and view and build it and
61:44 - react and build it in angular it's a
61:46 - simple enough project that
61:49 - you know wouldn't take all your time to
61:51 - to build those three apps uh different
61:53 - ones just to get a feel for them or just
61:55 - practice with whatever framework
61:58 - and you can certainly build it without
61:59 - any framework at all
62:03 - but that's where i checked for projects
62:05 - because the the project ideas are there
62:07 - but then it's also like pretty detailed
62:09 - like these are the user stories that
62:12 - need to be fulfilled
62:13 - um so
62:15 - if if you're kind of just looking for
62:16 - guidance for practice that's that's very
62:19 - helpful
62:22 - uh
62:25 - uh yelukiran sorry if i'm mispronouncing
62:28 - that uh please let me know how to
62:29 - pronounce it but yellow kiran says i'm
62:31 - new to react but i can't understand
62:33 - state and props i'm being confused okay
62:35 - let's go over state and props a little
62:37 - bit then
62:38 - so
62:41 - the
62:42 - this this component does have state so i
62:45 - guess we'll start here it may be a bit
62:47 - complex
62:48 - but state
62:51 - for a component
62:53 - they're just
62:54 - basically variables
62:57 - that we're saving to that component
63:00 - that could change based on
63:04 - i mean pretty much like anything that
63:06 - could happen on a page user interactions
63:09 - or
63:10 - um
63:11 - you know whatever type of event is gonna
63:14 - it can be tracked on a page could
63:16 - potentially be you know part of state
63:18 - state could even have data in it
63:21 - like we're doing here so state changes
63:24 - in response to getting new data now the
63:26 - cool thing about state and react is that
63:28 - any time state changes
63:31 - it re-renders the component
63:34 - so we don't have to worry like
63:36 - for instance if we are using uh vanilla
63:39 - javascript or jquery or something and
63:42 - uh like let's say we make an api call we
63:45 - get back data
63:47 - then we have to
63:48 - insert that data into the page so we
63:51 - have to you know have some way to like
63:53 - okay let's wait for the data
63:55 - and then now let's you know select where
63:58 - we want that data to go and insert it
63:59 - into the page so with react we don't
64:01 - worry about that you know we just say if
64:04 - the data is there
64:06 - then render it out if it's not there
64:08 - don't do anything
64:10 - and
64:12 - every single time something in state
64:14 - change is just going to check and it's
64:16 - going to say okay do we have data no all
64:18 - right cool
64:19 - oh we do have data all right let's put
64:21 - it on the page
64:23 - so
64:25 - that's
64:26 - that's where state comes into play and
64:28 - react as opposed to props
64:32 - props are basically values that you pass
64:35 - down to a component
64:39 - and so let's let's find a good example
64:41 - of props
64:43 - let me i'd like to find somewhere that
64:47 - um would be a little bit more simple
64:51 - maybe
64:55 - in the drawer
64:58 - let's see if we have something
65:01 - draw item
65:03 - okay yeah okay so in this this is a
65:05 - parent component called drawer.js
65:08 - and we're passing down props
65:12 - right so
65:13 - we've created all these props so one of
65:15 - them is toggle drawer so we're actually
65:17 - passing down
65:19 - this value this toggle drawer value
65:22 - and i believe
65:25 - yeah that's actually a function so we're
65:26 - passing down a function as a prop which
65:30 - is really cool
65:32 - so it can be used by this child
65:33 - component
65:35 - we're passing down
65:37 - uh expand item as well
65:40 - we're passing down an id
65:42 - we're in in this case we're just passing
65:44 - down a string just a regular string
65:47 - we're passing down text
65:49 - all right and we're passing down some
65:52 - data
65:53 - right so we're passing down
65:55 - this admissions menu
65:57 - which is just an array of objects
66:00 - and then we're passing
66:02 - down uh the value for is open and this
66:06 - is going to be a boolean true or false
66:08 - so let's go into draw item and see what
66:10 - can change based on these
66:13 - so
66:15 - in drawer item
66:16 - you know we have all these props
66:20 - and let's see what what happens
66:24 - so if you see
66:26 - we can use expand item so for this list
66:29 - item on click
66:31 - it calls expand item which has been
66:33 - passed down so it'll reach up the
66:35 - component chain
66:37 - to the parent component that actually
66:38 - has that function
66:40 - and it will run
66:42 - right and it will change the state of
66:44 - that parent component and then that
66:46 - that state will be passed down
66:50 - uh and eventually change
66:53 - uh change was happening so
66:56 - we'll know whether or not like for
66:58 - instance this collapsible menu
67:02 - it'll change the state it is open right
67:04 - once we click on that from
67:07 - false to true
67:08 - now
67:09 - this collapse
67:11 - uh collapsible
67:12 - um
67:14 - list will be open
67:17 - you can see also that primary text that
67:19 - we saw we passed in as props this is
67:21 - getting passed down to props to another
67:24 - component and that's going to determine
67:25 - the actual text that users see for that
67:28 - component
67:32 - the value of the prop is open whether
67:34 - it's true or false is also going to
67:36 - determine on
67:38 - which of these components actually even
67:39 - gets rendered
67:41 - all right so these are
67:43 - um i guess i could just i could show you
67:45 - so the components that we've been
67:47 - dealing with here
67:48 - are these ones here
67:53 - so this is the state that's happening
67:55 - whether or not this is open or closed
67:57 - and which icon gets rendered
68:02 - all right and we have other examples
68:04 - here so that toggle drawer
68:08 - the toggle drawer function actually
68:11 - toggles whether or not that side drawer
68:13 - is open or closed
68:18 - and let's see
68:26 - i mean that's that's a lot of examples
68:28 - so i don't want to get
68:30 - too confusing with it
68:32 - all of this but
68:34 - um
68:36 - that's basically it so if you want to
68:38 - give a value to a component when you're
68:42 - using that component right
68:45 - that's a prop you pass in a property
68:47 - okay
68:49 - if you
68:50 - want opponent to be able to to re-render
68:55 - based on
68:56 - something based on some value
68:59 - then you use state
69:01 - when you do use state never change it
69:04 - directly
69:05 - always use set state so you can use this
69:08 - set state
69:10 - if you don't use this set state react
69:13 - will not know that state has changed and
69:16 - so you won't get that re-render and
69:17 - there'll be a discrepancy and
69:20 - so you don't want that to happen so
69:23 - always use this set state
69:26 - to change state
69:28 - it's
69:31 - if if you've come from trying to build
69:33 - something with vanilla javascript or
69:36 - jquery
69:37 - and manage state like manually
69:41 - and then come into react you can really
69:42 - appreciate
69:44 - just how nice it is
69:46 - to have things like taken care of like
69:49 - that and very organized so
69:52 - i'm not sure if that was a great
69:53 - introduction to state and props i'm sure
69:55 - i'm missing things
69:58 - so help me out in the in the live chat
70:00 - if i missed something or if i said
70:02 - something wrong but hopefully that can
70:04 - it maybe put you on the right track to
70:06 - understanding state and props a bit more
70:22 - how to meet you says jesse i see you're
70:24 - a little tired yeah actually i had a
70:26 - hard time falling asleep last night so i
70:28 - even took um like melatonin supposed to
70:30 - help you sleep
70:32 - and i still had trouble falling asleep
70:34 - so i didn't get
70:36 - my normal amount of sleep i didn't get
70:38 - to exercise this morning
70:41 - so
70:43 - yeah just a little tired i didn't i
70:45 - didn't get the breakfast so there's like
70:47 - all these things happen that contributed
70:49 - to my probably looking really tired
70:51 - right now and feeling tired
70:53 - uh
70:54 - yeah so hopefully
70:57 - i can get to bed
70:59 - at a decent hour tonight
71:02 - uh supra said is this project open
71:04 - source it sure is yeah so just check out
71:07 - the link in the github repo
71:09 - feel free to use any of the code however
71:11 - you want
71:12 - i also really enjoy it if if you all
71:15 - have uh advice open up an issue or if
71:18 - you want to open a pull request
71:20 - i'd be happy to work with you especially
71:22 - if you're new and really want to get
71:24 - your first pull request and you know let
71:25 - me know i'll i'll help you find
71:27 - something uh to work on you know check
71:29 - out the open issues already
71:32 - and i can help work you through that
71:33 - process i know it's pretty intimidating
71:35 - submitting your first pull request so
71:37 - i'd like to help you through that you
71:38 - know maybe if you submit a pull request
71:40 - or two even if it's small
71:42 - then you can kind of get used to the
71:43 - flow of it gain some confidence and
71:45 - you'll go out and work on you know some
71:48 - open source project that you you would
71:50 - really like to be a part of
71:54 - let's see
71:55 - monkey man says i'm still learning html
71:58 - well good for you keep up with it you'll
72:01 - you'll get through html and you'll
72:03 - you'll get into css and javascript
72:04 - before you know it
72:06 - um he says what are those warnings um
72:10 - when i upgraded to uh a newer version of
72:13 - material ui
72:14 - uh some of um
72:18 - uh some things the way things were named
72:20 - changed and so i'm getting warnings
72:22 - about that so i just need to switch over
72:24 - to the newer way of naming things and
72:26 - then that'll get rid of the warnings so
72:28 - that's why i'm not that worried about it
72:30 - right now i know what they are and i
72:31 - know how to fix it i just haven't gotten
72:33 - around to doing it so that's actually
72:36 - something i believe there's an issue
72:37 - open for that now so that's something
72:39 - that
72:40 - would be helpful if someone wanted to
72:42 - submit a pull request for that
72:44 - otherwise i mean i'll get around to
72:46 - fixing it at some point
72:49 - there's probably a newer version of
72:51 - material ui out that i need to upgrade
72:53 - to anyway it seems like they update very
72:55 - frequently which is great i love that
73:00 - raul says
73:02 - jesse i have a major problem my
73:03 - website's mobile version is redirecting
73:06 - into some other websites
73:09 - whoa
73:11 - uh role says do you know how to make it
73:13 - all right again please help
73:15 - um
73:16 - yeah i mean i i would definitely have to
73:18 - see the website so i don't know if you
73:20 - want to you may not want to send details
73:23 - about it in the live chat here you send
73:25 - me a dm on twitter
73:27 - uh you can find
73:29 - i think my twitter's in the description
73:31 - if not go to my youtube channel the link
73:33 - to that is in the description and i
73:35 - think my twitter's linked from there
73:37 - uh i think it's just jesse rweigle with
73:39 - my twitter handle but
73:40 - um
73:41 - send me a dm or something with the info
73:43 - because i i really have no idea without
73:46 - without seeing more of the details
73:52 - uh let's see
73:53 - john kane says
73:56 - i lost my place
73:58 - um john kane says
74:05 - are you using a sub domain for mobile or
74:07 - just media queries okay so it looks like
74:10 - uh john's trying to help out raul with
74:12 - um
74:16 - uh with the issue
74:18 - carlos says
74:21 - what framework are you using
74:23 - okay yeah so i'm gonna skip through a
74:25 - bit of this you all can check it out in
74:27 - the the chat
74:28 - in the live chat if you want
74:31 - but i'm gonna i'm gonna skip through
74:33 - here
74:34 - find some more questions
75:03 - yeah
75:04 - actually reading through some of this
75:05 - right oh yeah i think somebody got into
75:07 - your site and is
75:10 - yeah oh goodness
75:12 - um
75:21 - yeah i mean i you you have some
75:22 - malicious stuff going on uh with your
75:25 - site so
75:26 - that's that stuff's gonna need to be
75:28 - removed
75:33 - to definitely remove any plug-ins that
75:35 - you you think are are causing that
75:39 - uh i've dealt with some of this stuff
75:41 - with wordpress uh before
75:43 - uh it can be tricky to find
75:46 - where all of it is is um
75:49 - i've dealt with things where like the
75:51 - the actual
75:52 - anyway it's hard to i i don't want to
75:55 - say too much or the wrong thing because
75:57 - i know more of the details but yeah it's
76:01 - you need to get rid of uh all the
76:03 - infected files
76:05 - or that's not going to stop
76:08 - and uh you may get rid of some of it and
76:10 - it will come back
76:13 - and that means you you haven't
76:15 - really gotten like everything so it can
76:17 - be a bit tricky to find it
76:26 - carlos recommends a
76:29 - sucuri security scanner yeah that is
76:31 - that's a good scanner i've used that
76:33 - before
76:41 - okay john hanson's here hey john how's
76:43 - it going uh john says the new react get
76:45 - derived state from props lifecycle
76:48 - method
76:49 - could help build your component
76:52 - that won't cause any page data reloads
76:55 - when it calls your page scroll function
76:58 - that changes the state
77:00 - oh
77:03 - okay
77:07 - i'll have to check that out
77:14 - all right thanks for that yeah i haven't
77:16 - i haven't looked at that um
77:20 - that life cycle uh function at all
77:23 - at all yet i'll check it out uh jojo
77:26 - says how to prevent from ddos attacks uh
77:29 - so it's a distributed denial of service
77:31 - attacks
77:32 - um
77:34 - i probably the easiest way to help
77:36 - protect that is uh use like something
77:39 - like cloudflare right use a
77:42 - cdn
77:43 - um and they have a lot of built-in
77:45 - protections
77:46 - so it won't like guarantee that you'd be
77:49 - fine no matter what but
77:52 - you know if you if you don't want to you
77:54 - know try to become an expert at doing
77:57 - your own security then i would i would
77:59 - say that's
78:00 - you know use something like that
78:03 - and you know let them handle it
78:06 - so that would be my advice i mean if you
78:08 - wanted to get deeper into it
78:11 - i'm sure there's a lot of other things
78:12 - you could do on your site but
78:14 - um
78:16 - really like i just i wonder how worth it
78:18 - it is unless that's something you really
78:20 - want to learn and get into
78:28 - uh carlos says i don't think ddos
78:30 - attacks can be prevented yeah yeah for
78:32 - sure
78:33 - um
78:35 - that's a good point carlos so the
78:36 - original question was how to prevent
78:38 - ddos attacks yeah you can't you know
78:40 - prevent
78:42 - the ddos attack right somebody can try
78:44 - it
78:45 - if they want to
78:46 - but what you can do is take steps to
78:49 - make sure that if it happens it won't
78:52 - mess up your site too badly right it
78:54 - won't slow everything down
78:56 - uh to the point where your site becomes
78:57 - unusable
79:00 - and that's where something like a cdn
79:02 - would would be helpful
79:04 - hey harsha's here how's it going harshet
79:09 - uh mario says is the repo for this
79:11 - project final or a work in progress oh
79:13 - most definitely a work in progress
79:17 - um
79:19 - dell chewables
79:22 - i have heard services like cloudflare
79:24 - help prevent egos yeah for sure yeah i
79:26 - didn't i sorry i
79:28 - i didn't see that comment first uh but
79:30 - yeah yeah for sure
79:32 - um they can be helpful
79:35 - i mean if you don't have that and you
79:37 - notice you are receiving like a ddos
79:39 - attack
79:40 - you can like manually go in try to check
79:44 - what ip addresses that this is coming
79:46 - from and then block those ip addresses
79:49 - so like
79:50 - worst case scenario and it happens and
79:52 - you have no protections you can do that
79:55 - it depending on
79:57 - how big of an attack it is like it may
79:59 - or may not help
80:01 - uh it won't hurt anything to try but
80:04 - it's i've done it before and um
80:08 - you know it it lessens the severity
80:10 - depending on like how quickly you can
80:12 - keep the problem is like
80:16 - it just depends right if somebody
80:18 - wants to spend the money to be able to
80:20 - do a really big attack it could come
80:22 - from a lot of different ip addresses
80:24 - right but if somebody
80:25 - if it's a small attack it's only coming
80:27 - from a few ip addresses you may
80:29 - successfully be able to block those ip
80:31 - addresses and
80:33 - uh mitigate the the attack so
80:36 - um yeah so i mean like
80:38 - definitely like try to get hooked up
80:40 - with cloudflare or another cdn that
80:43 - offers some protection
80:45 - and then
80:47 - you know if it happens then you can try
80:49 - to manually like see where the traffic
80:52 - is coming
80:53 - and then block ip addresses
80:57 - okay
80:58 - all right well i've gotten to the end of
81:00 - the questions
81:01 - so i am going to
81:04 - uh end the stream now
81:06 - uh we we did we worked through a bit
81:08 - right we didn't get everything finished
81:10 - uh but that's all right we've uh we've
81:12 - come up with a process we have kind of
81:14 - the next steps
81:15 - already
81:16 - thought out
81:17 - uh so
81:20 - this will
81:22 - see
81:23 - we'll do this
81:24 - uh
81:25 - i'm gonna say that well i'll try to get
81:27 - this working
81:28 - if for some reason we get stuck and it's
81:31 - really taking a long time we always have
81:33 - a fallback of just use having a load
81:37 - more button at the bottom
81:39 - which is much easier to implement
81:42 - because we don't have to worry about
81:43 - scrolling we don't have to worry about
81:45 - things going off like multiple times so
81:48 - we could always implement that i think
81:50 - the infinite scroll is a little bit more
81:52 - convenient to the user they don't have
81:54 - to click
81:57 - but we have a fallback so no matter what
81:59 - some sort of way to get more search
82:01 - results will happen it will be
82:04 - implemented
82:05 - so
82:07 - i think we'll be fine i say that because
82:10 - you know we we're going to launch this
82:12 - uh on june 4th so we got to really be
82:15 - conscious of time here and like is this
82:18 - feature
82:19 - how long is it going to take to
82:20 - implement a feature and is it worth it
82:22 - you know could we do something that is
82:24 - good but not great
82:26 - just to get a feature in before launch
82:29 - right so that's kind of
82:31 - um
82:32 - what we have to think about now so i
82:34 - think this falls into that category of
82:38 - the
82:40 - infinite searches would be awesome or
82:42 - the infinite scroll would be awesome
82:44 - but we do have a fallback if it starts
82:46 - to take too long
82:49 - um jojo says thank thank you thanks all
82:52 - thank you very much you're welcome uh
82:54 - hopefully um
82:56 - uh the advice uh helps you out
82:59 - all right so
83:01 - i will see you all
83:03 - i'll probably be streaming from uh from
83:06 - home tomorrow uh so i'm not sure what
83:08 - time exactly but uh subscribe to this
83:11 - channel and you should turn on your
83:13 - notifications and you should get an
83:14 - alert before i stream uh if you also if
83:17 - you want to follow me on twitter and or
83:20 - instagram i do try to put up messages
83:23 - letting you all know when i'm going to
83:25 - stream on there as well
83:26 - so if you prefer to find out through
83:29 - through those social media channels you
83:31 - know feel feel free to follow me there
83:33 - as well
83:34 - so until tomorrow have a wonderful day

Cleaned transcript:

hey everyone welcome to live coding with jesse i'm jesse and today we're going to work on the infinite scrolling for the search page and i am in my office but i'm on my laptop today every stream health seems uh seems pretty good uh so the networks that works good so uh hopefully everything will work out so on it was probably unwise with me but i started a an update on my imac and i i had i thought plenty of time for it to finish but it's still not finished so that's why i am using this laptop right now but everything looks okay and let me get i'm just trying to get everything in in position uh let's see i i have a certain setup for all my screens so i wasn't expecting to do this and i have different monitors hooked up than i normally do to my laptop okay looks good now hey everyone see some of you are in the chat also um i completely forgot to announce that i was doing this stream on twitter and on instagram which i normally do i i don't know i don't know what i was thinking so uh hopefully hopefully that won't be a problem i know a lot of you subscribe to the channel so you're getting the notifications anyway and let's let's get started uh was renato asked if this just started it did it just started we haven't even done any coding yet um let me switch over nope that's not the screen i want okay i'm gonna have to add another screen here and display capture there we are nope that's not what i wanted uh let's add one more scene sorry sorry i messed with this i just um if you're just coming in i'm on a different computer than i normally stream with in my office so that's why these it's it's a little messed up right now actually i think i can just change this one video capture uh display capture there we go let me just change this one i'll have to remember to change it back when i stream from home okay that's the right screen sorry about that i'm gonna make this a bit bigger so everyone can see oh goodness yeah this is definitely different on the uh sizes and stuff there we go okay it's all in there now okay so hopefully that size will be good for you all uh and you'll be able to see i see there's some questions already in the live chat i will get your questions after we do a little bit of coding so i'm going to set this uh pomodoro timer whoops and we're going to do one session of coding and then we'll take a little break and i'll get to the questions so this is our search page we haven't worked on this page for a while and um we we got the basic functionality working but there's one thing that we didn't do that we had talked about doing and that was uh having this infinite scroll feature uh so let's see make sure this is still working yep still working okay so for right now what we get uh when when we search is the category uh i get i should say like the post type so we're pulling in this data from wordpress so we get what is essentially the post type in wordpress and then we get the title of that post type and we also have made that into a link i don't think all the links work though and we're not going to worry about that today what we do want to do is make sure that once we scroll down we'll do another search and get more results so this is going to be a little bit tricky let me go to the code and show you how we're doing what we're doing in case you you didn't see that that stream it was at least a month ago i think and so show you how we're doing what we're doing and then what we need to do to get there we'll try to break it down into small steps and then see how many we can get through so this is something that i've done before on a nonreact project um so this will be interesting to see how how we're gonna do this with react i don't think i have this yep there it is i did have this page open okay let's shut the side drawer to give us some space okay and uh if you want to follow along with the code check out the github repo the link is in the description and i i'll just start from the top and just give a very brief explanation of of what's going on here so we have this utility that we've made so that just basically is a wrapper around the uh the fetch api okay so the fetch api that's that's in the browser uh and we're pulling it in as get json so when you see that basically all it's doing is just using fetch to get data and returning it to us in json format so now let's go down a bit and see you know where what kind of data we're getting so this is what we're using to actually make the call this is our base url to our wordpress installation and we can reach the wordpress api endpoints uh by you know going to wpjson wp slash v2 and then after that we have a plugin running in our wordpress installation called multiple post type which allows us to fetch data from multiple post types uh so that's what this part means now we set the per page to 100 that means we get 100 results per search this is the maximum that you can get with wordpress i don't know i've never come across a way to get more than that so for now we're just going to assume that that is the maximum we can get in one go uh which is not bad i mean it ensures that there's not an overwhelming amount of data coming in uh so i can live with that for now and then we search for a specific term and we also have some filters right over what type of data we want so that would be these right so we can choose to get all the data from from every um post type or we can just search a particular post type okay and then we have some sorting going on which really isn't gonna affect what we're doing right now too much so what we need to do then when we scroll down to a certain point in the page so let let's say we've done a search and in reality there's there are 500 results we're only going to display 100 of those results to the user at first but once we scroll down to a certain point on the page we want to grab the next 100 results and then we scroll down more we want to get the next 100 results and we want that to happen in the background you're preferably in a way to where the user may not even realize that more data is is being fetched so they can just scroll when it's seamless so i mean we'll have to mess around with the timing on that i mean i don't want to unnecessarily fetch more so you know if we set it to just get the data you know let's say we scroll here maybe a little early but you know for sh if we wait too long then the user will have to wait and if they're on maybe they're on a slow connection they they won't even realize maybe they'll scroll back up before the date even comes through they don't realize that there's more so maybe about here is the point where we want to fetch new data obviously if the user scrolling very very quickly they're still going to make it to the bottom before that data you know appears but that's that's the goal so we're going to have to just to kind of break this down what we need to do first is be able to track the position on the page and be able to call a function when a certain position is reached once that happens what we have to do is just modify this fetch fetch search term function to be able to grab the next 100 so i i think would i think we'll just modify this to do that i thought maybe we could just make a whole another function and we'll see it depends i don't want this function to get really huge and hard to to think about so we'll see if it does get like that maybe we'll break it out uh separately so first things first let's track the scroll uh and react so i have not um uh sorry i mean messages i have not uh done this i think i've done this in react yet if i have it's been a while and i don't don't really remember okay so we're using material ui so the first thing i want to do is see if material ui has any solutions for us built in before i go elsewhere and either try to find a package that does it or we just try to make something on our own so let's see scroll now i have these scroll buttons um no i was hoping that scrolls by you know what i remember where we've done this before let's check out one of our previous projects so i'm going to go into github here and running laptops running a bit slow if my main computer turns back on i could switch over to that if this is too slow i mean if it only takes a few minutes then it may be worth it what was it a resource center right yes resource center okay so in uh this project of the resource center let's bring this up right now uh just to give you an idea of what what's happening uh when we actually see that code so let's see i think it'd be in the views um let's see i think it's yep here it is okay so if you can see i know it's a little small let me zoom in so we have this menu on the side here and as we scroll things change uh it's hard to tell when i'm zoomed up it the zoom messes up the the scroll so as we scroll it changes to show us you know where we're at in the site and i messed up the scroll so and if we click somewhere then we can get the different two different places on the page which yeah oh wow i don't know what i did but i think all my zooming messed this up anyway this is we're going to try to adapt what we've done here to track the scroll so let's figure out where that's at resource planning ad that's it so we'll go into here and this is all on github it's public so you can check that out um in the fus marcom github organization you can go to resource center check it out actually why not just copy i'm going to copy this into the live chat now so you can go right there if you click that and you get an error then try copying and pasting that if for some reason in the live chat links sometimes give errors when you try to click on them all right so let's see this might be the component that we created for this so we may have to check out that as well let's let's see great okay so we are tracking scroll with props okay is it this yeah it's not mistake all okay so we're adding an event listener on the component didn't mount okay all right let's copy over a lot of this and then we'll adjust it as needed so first things first and this is i guess let's grab all of this these zoom out will be easier for me to grab it off okay all right wow this is already quite a large component at some point this would be a good candidate for uh refactoring so we have a lot going on in here all right so perhaps let's go to the bottom here okay so here's everything but obviously we're gonna we're gonna change this up because we're we're not using our constructor here so let's put this in our state that we're already using okay so now we have that's weird i don't know why it's giving us we should be able to set that to an empty array that's the state so let's get rid of this um let's see all right so we'll do this in a different way let me check my time here and i want to all right we still have about nine minutes and we have we want to throttle uh how we do scroll so we don't basically whatever we're gonna do uh when we track the scroll we don't want that to happen over and over and over again you know very quickly we won't throttle that and i believe we're already using throttle so uh let me double check you should be bringing okay we're using dbounce all right let's see i think we should be able to bring in ah let's check our package json and see what we're bringing in if we just brought in yeah we just brought in dbombs all right so i guess we can bring in throttle as well so let's do the yarn add low dash i think this would work we'll find out a second yep that's working okay so we're pulling in that package uh lowdash is like a collection of of helpers um so there are certain things that are i don't know basic things that you might want to do you know common things that instead of coming up with your own solution you know you can just pull these things in from low dash very helpful basically both d bounce i'm not going to get into the difference between d bounce and throttle right now but essentially you use them for pretty much the same purpose in that you you want to stop some a function from happening too quickly you know too many times when it's really unnecessary that it would happen that many times so let's change this throttle okay so now we will be able to use that and we i want to see how we're using dbounce and then just follow that same pattern there we are the bounce search okay great so scroll down um there we are okay so we're just gonna say handle scroll and close let's double check that i need even more space there we are okay i thought that looked the same so what's our problem down here i'll be using this somewhere else uh okay that's why okay so let's do let's call this throttle throttle scroll right um yeah so we want to yeah instead of calling handle scroll i guess we'll call throttle scroll all right okay so let's just let's think out loud about this um so what we are doing i gotta double check we already aren't using component did mount somewhere but uh what we are doing is when the component mounts we're adding an event listener so scroll event listener and um on scroll we're calling throttle scroll so every time there's a scroll we are let's see there we are so every time there is a scroll hopefully this little squiggly line will go away um but every time there's a scroll um we're gonna we're gonna throttle right so we're not going to allow this function to go off every single time there's going to be a delay um but every time not every single you know pixel is scrolled but a reasonable amount of scrolling will occur and then this dot handle scroll will be called handle scroll then is going to give us the position the y position right and that's going to save that to state now what we don't need here is this active key right because that was telling us what section we were in for the scroll spy we don't need that so we can remove that this part of it and instead we're gonna write a little to do so we remember and instead what we want to do is say if scroll is close to bottom then search okay so if we're if we're a certain amount of time from the bottom then we're going to search for those next 100 or next however many is is left right if it's less than 100 we're obviously going to get that lesser number okay so i haven't really tested anything yet but logically this is working so could still have syntax errors could potentially even have logic errors but that's going to be for the next pomodoro session so right now for right now my timer went off i'm going to take a short break and i'm going to answer questions let's see hey hey everyone is a lot of people saying hi i see some new names that i haven't seen before so welcome all right abby sheik says i want advice regarding where to start my learning i've completed basic javascript um abby check so are you are you then going through the free code camp curriculum now did you complete complete that basic javascript portion are you just saying like in general you have knowledge of the basics of javascript um i i mean i would if you aren't already doing it i recommend going through the free code camp curriculum at freecodecamp.org udacity also has some free online courses that are are good there are certainly a lot of good videos on youtube so free code camp has great you know tutorial videos uh but there are some other youtube channels that have good videos as well i know um learn code academy was uh a good resource it has been a good resource for me and um if you're in if you like books uh learn what is it called eloquent javascript so eloquent javascript is a good book and uh you can read that for free online and then you don't know js is a book series that you can also read for free online uh on github let's see fox wanted asks are you currently at work i am i yeah i'm in my office at work i work at franciscan university that's a small university in ohio all right divya says hi jesse how are you uh not bad not too bad uh how how are you doing broderick says learning a lot on free code cam awesome glad to hear it let's see all right looks like there's some discussion about uh someone's computer in here um sergio says hello jesse hope you're doing fine yeah not too bad not too bad i hope you are doing all right as well uh michael says gotta go to the doctor but i have been playing with implementing the search with graphql it's hard to it's hard due to the weird url structures but i'm making progress plus you can use fetch more for scrolling oh interesting i like that so anyway michael well thanks for um for stopping by the stream a little bit i hope everything's all right and uh good luck uh good luck at the doctor dmitry says hi it's nice to see you i'm glad to to see you in the chat too as well dimitri um let's see uh yusuf says why not install the whole lowdash library um yusuf basically because i don't i don't need most of what's in lodash i really don't need so i just install the pieces that i need if it got to the point where i was using most of lodash then it would probably be easier just to install everything but right now it's you know i just need two things from there also my stomach is growling so if you hear that i'm sorry that is my stomach growling i guess i need to eat uh pool kid says sir i have done intermediate development and node.js for back end what more could i try out for web apps i mean this there's a lot i mean it's kind of like a difficult question there's so many things that you could try out um if you want to get into more like database stuff sorry about you on you could try like uh sql base or nosql um databases uh maybe try to set up graphql and use that um if if you want to get more into front end then you know maybe check out a framework or a library like reactor view or angular so i guess it kind of really depends on like what direction you want to go in uh but i guess just to name a few things those uh those wouldn't be a bad place to uh to start um kelman asks what are the best books for learning python unfortunately i i am not that familiar with python so i don't really have any book recommendations i've i've never read any uh python books so if someone else watching now has some experience with python in particular with with good books for python please put that in the live chat now or in the comments if you're watching this later on okay so my timer is up as you all can see so let's do another 25minute session pomodoro session and uh then we will hey cool no um no errors i was afraid that i had broken it like to the point where we wouldn't even see anything but i guess i haven't so that's cool um yeah so let's let's kind of try to test out what we've been doing and really we could probably just put a console log in here for now i don't like to to do too much without testing first because uh you know if you code a lot and then test after it's harder to figure out where the problem is so this is actually a bit more than i normally do before i test but since we copied over so much we really didn't have a chance to test it so i'm just going to do a console log and let's let's just say scroll we're just going to have it say scroll and then that way we can see so this stage scroll y is greater than position minus one where's position this thing needs to save okay we may be able to simplify this a bit more yeah let's get rid of this each i don't think we need that so let's take out uh these and then take out this each so i mean this simplifying and getting rid of any code at all in this huge component is is definitely a plus all right so now we'll just say um handle scroll this set state scroll y is going to equal window dot scroll y okay wonderful and then now say if this state scroll y is greater than position minus 1. so we don't really want position minus one instead what we want to get and let's let's change this up let's say um instead of position minus one let's say bottom minus uh i don't know let's say 500 okay so it'd be like 500 pixels not really sure if that's a reasonable amount right now but we're we're just trying it out hey i just see ann is here hey anna how's it going thanks for watching okay so if the scroll y is greater than the bottom of the value of the bottom of the screen minus 500 then we're going to console.log scroll also the set headers we can completely get rid of because we're not worried about the headers anymore and handle next i don't think we're gonna need handle next so let's get rid of that as well this feels so good to get rid of code you're not using uh and let's see scroll scroll throttle scroll okay wonderful we've gotten rid of that red line okay so that's this is going to be called when we scroll and let's change our state a bit clean it up because now there's things in state that we do not need so let's get rid of header positions and also active section but we do need to know let's see we need to know what the the bottom like how tall the screen is so how do we find that out let's see um window height let's just try it out let's go in the dev tools console and just see it's most definitely taking a long time all right come on console so let's see uh window dots height wow oh goodness oh i accidentally clicked on one of those links i suppose so that messed things up all right expected a function my ah this shouldn't it shouldn't be firing all right let's see what our problem is what like what did we even change from the last time i mean all we did was just get rid of things right hmm uh don xavier says try window inner heights okay i'll try that if i can get a page to load here hmm all right so something is messed up here all right let's make sure so it looks like so low dash throttle is expecting a function so you run throttle this handle scroll i mean that's that's a function right let's see how we're doing it up here i mean is it let's see maybe it's the uh maybe it's the order i will i guess i wouldn't have thought it would have mattered but um we are trying to call handle scroll before we get down there i don't think this is the problem but it's worth a shot let's save that and a little refresh uh super asks why are we using throttle and we are using dbounds to add late api calls yes so dbounce hey it worked uh yeah dbalances for the api calls to a delay and then what the heck no long page view is not oh i know yes of course log page view is not defined i i copied over stuff that we don't even have so we will eventually uh put analytics in but we don't have that set up right now so that was our other error uh and then yeah to answer your question to use throttle where we're slowing down the the amount of times that we run things on scroll okay all right cool no errors still errors we're good all right so now what we want to look for let's get rid of all this stuff in the console we want to see a scroll well let's see let's let's get some data here um we never set the value of bottom did we no we never said that all right let's set the value of bottom so what i'd like to do is set the value oh that's why because we were testing it out that's what happened in our heights nice okay so that's our inner height so this is how we can get that so let's go back here and let's make uh i guess we'll you know let's put it in state let's go window height and we'll just set it at zero for now and then after we fetch we reset window height after you fetch a search term you know what i let's get the window height on scroll uh so that way uh if i was gonna get the window height whenever we run the search but if a user happens to change their screen with which most users don't do that right i mean developers do that a lot because we want to see that but potentially like let's say um on a phone they could go from porsche to landscape which would definitely change the height so then that way like every um every time the user scrolls it will get the height again so i don't think that'll be too difficult performance wise if we notice there's some weirdness going on then you know we could always rethink that you know at this point we're just trying to get it to work we can always optimize later if necessary all right where is my handle scroll area okay so this states yeah so let's just grab this let's see i believe can we set this um and then we call this window nope window heights window dot height okay you can do that right can i set two different things in state in the same set state thing i'll find out in a second okay so since we're getting window height uh now we're not gonna say bottom right we're gonna say window this state window height we probably structure some of this we don't have to keep doing this state but that can happen when we refactor okay so let's let me make sure this is all loaded by refreshing okay this looks almost refreshed there we are there we go so let's search we'll do a search first and we should there we are we got a scroll scroll scroll okay maybe 500 isn't the best oh morton says i think you missed the window i did window window height there we are we have the correct right now hmm yeah still not acting the same um i'm gonna have to do a refresh again i hate to keep doing these refreshes because they take forever but um just this laptop is just slow how many says hey jesse how's it going not too bad how you doing thanks for joining us in the live chat all right okay that makes more sense okay yeah so you see we're not getting i don't know uh if if you can see what's in the console over there i know it's getting blocked partially by uh my face so uh we don't actually get the console log of the word scroll until we get closer to the bottom bottom of the page so that is working uh just a few observations here of uh problems that we might have is uh it's it's working but it's calling that like every single time uh we stop scrolling like below that point so that's not what we want because we then we'd be making a ton of api calls to fetch the same data so that's no good i wonder how how did i handle this let me check my time oh five minutes all right i don't have time to do this so what what i think i'm gonna do for that particular issue is uh i'm gonna go back to a project i did over a year ago maybe two years ago where i implemented some of this just using javascript jquery i want to see how i handled that issue and see if it could be easily adapted to our situation because i was using the wordpress api and i need to go back there and look at at what the correct syntax is for getting the next set of data anyway so i i don't have time right now in this pomodoro session i don't really want to do a lot of research during the stream so that's gonna be something that i look up and then maybe we'll finish uh on the next stream or maybe i'll just go over what what i did to make that work on the next screen but for now wow i just keep accidentally clicking things what i hope i didn't make the link stretch like all the way across the page inadvertently oh well i'll check that out later so um if the scroll is close to the bottom then search so what we would want to do is it would be a little bit of a different type of search right because we're we're going to search the same terms that we just had so the search term is actually saved in state so that's good um so we're just going to call fetch search term or act we're going to call debounced search right i guess we don't have to we we could probably call fetch search term directly either way it doesn't matter we're going to call that um and then it's automatically going to be able to get that search term but then what's going to need to happen is there needs to be some sort of check um maybe just a simple if statement or return area something like that that's going to say we'll probably add something else to state here like um should it be um scroll search let's just say for now i'm just kind of thinking of what we'll need let's say like scroll search false would be default but then once it flips to true uh then we know that the the search is going to be we're going to need the next set of values so perhaps maybe result result count would start at zero and then we would keep track of how many results we've already had okay so this this may change when i'm going to go back and check my old code i really don't want to reinvent the wheel i remember spending a lot of time on making this work and i i it still works i mean it was it's kind of spaghetti code jquery but it's been working for uh at least a year i think at this point more than a year so i know it works so i'm gonna grab that but we're definitely gonna need some way to keep track of like where we're at so we know what to search for next um and then we also need to know wait when this runs this function needs to know like okay am i just going to do my my normal search or like what am i going to need and so i mean that it may be as simple as just adding on another value here and if you know we can make that value instead of a true false it could just be the value so it could be an empty string if there's nothing or you know it could actually have something in there uh if we are going to do a scroll search so may be able to simplify that a bit i think my timer is about to be up yeah eight seconds all right so i'm gonna go back to the live chat i'm gonna answer some questions uh so let me scroll up a bit okay so we have a question from poolkit it says i have tried out some libraries and frameworks like react so in general some example of projects i could start out with okay so you'd like uh example project um i if i were you and just wanted some example projects check out freecodecamp.org and go to some of their projects and um try to build those projects in whatever framework you want so if you were testing different frameworks you could take like for instance the weather app project and you could try to build a weather app and view and build it and react and build it in angular it's a simple enough project that you know wouldn't take all your time to to build those three apps uh different ones just to get a feel for them or just practice with whatever framework and you can certainly build it without any framework at all but that's where i checked for projects because the the project ideas are there but then it's also like pretty detailed like these are the user stories that need to be fulfilled um so if if you're kind of just looking for guidance for practice that's that's very helpful uh uh yelukiran sorry if i'm mispronouncing that uh please let me know how to pronounce it but yellow kiran says i'm new to react but i can't understand state and props i'm being confused okay let's go over state and props a little bit then so the this this component does have state so i guess we'll start here it may be a bit complex but state for a component they're just basically variables that we're saving to that component that could change based on i mean pretty much like anything that could happen on a page user interactions or um you know whatever type of event is gonna it can be tracked on a page could potentially be you know part of state state could even have data in it like we're doing here so state changes in response to getting new data now the cool thing about state and react is that any time state changes it rerenders the component so we don't have to worry like for instance if we are using uh vanilla javascript or jquery or something and uh like let's say we make an api call we get back data then we have to insert that data into the page so we have to you know have some way to like okay let's wait for the data and then now let's you know select where we want that data to go and insert it into the page so with react we don't worry about that you know we just say if the data is there then render it out if it's not there don't do anything and every single time something in state change is just going to check and it's going to say okay do we have data no all right cool oh we do have data all right let's put it on the page so that's that's where state comes into play and react as opposed to props props are basically values that you pass down to a component and so let's let's find a good example of props let me i'd like to find somewhere that um would be a little bit more simple maybe in the drawer let's see if we have something draw item okay yeah okay so in this this is a parent component called drawer.js and we're passing down props right so we've created all these props so one of them is toggle drawer so we're actually passing down this value this toggle drawer value and i believe yeah that's actually a function so we're passing down a function as a prop which is really cool so it can be used by this child component we're passing down uh expand item as well we're passing down an id we're in in this case we're just passing down a string just a regular string we're passing down text all right and we're passing down some data right so we're passing down this admissions menu which is just an array of objects and then we're passing down uh the value for is open and this is going to be a boolean true or false so let's go into draw item and see what can change based on these so in drawer item you know we have all these props and let's see what what happens so if you see we can use expand item so for this list item on click it calls expand item which has been passed down so it'll reach up the component chain to the parent component that actually has that function and it will run right and it will change the state of that parent component and then that that state will be passed down uh and eventually change uh change was happening so we'll know whether or not like for instance this collapsible menu it'll change the state it is open right once we click on that from false to true now this collapse uh collapsible um list will be open you can see also that primary text that we saw we passed in as props this is getting passed down to props to another component and that's going to determine the actual text that users see for that component the value of the prop is open whether it's true or false is also going to determine on which of these components actually even gets rendered all right so these are um i guess i could just i could show you so the components that we've been dealing with here are these ones here so this is the state that's happening whether or not this is open or closed and which icon gets rendered all right and we have other examples here so that toggle drawer the toggle drawer function actually toggles whether or not that side drawer is open or closed and let's see i mean that's that's a lot of examples so i don't want to get too confusing with it all of this but um that's basically it so if you want to give a value to a component when you're using that component right that's a prop you pass in a property okay if you want opponent to be able to to rerender based on something based on some value then you use state when you do use state never change it directly always use set state so you can use this set state if you don't use this set state react will not know that state has changed and so you won't get that rerender and there'll be a discrepancy and so you don't want that to happen so always use this set state to change state it's if if you've come from trying to build something with vanilla javascript or jquery and manage state like manually and then come into react you can really appreciate just how nice it is to have things like taken care of like that and very organized so i'm not sure if that was a great introduction to state and props i'm sure i'm missing things so help me out in the in the live chat if i missed something or if i said something wrong but hopefully that can it maybe put you on the right track to understanding state and props a bit more how to meet you says jesse i see you're a little tired yeah actually i had a hard time falling asleep last night so i even took um like melatonin supposed to help you sleep and i still had trouble falling asleep so i didn't get my normal amount of sleep i didn't get to exercise this morning so yeah just a little tired i didn't i didn't get the breakfast so there's like all these things happen that contributed to my probably looking really tired right now and feeling tired uh yeah so hopefully i can get to bed at a decent hour tonight uh supra said is this project open source it sure is yeah so just check out the link in the github repo feel free to use any of the code however you want i also really enjoy it if if you all have uh advice open up an issue or if you want to open a pull request i'd be happy to work with you especially if you're new and really want to get your first pull request and you know let me know i'll i'll help you find something uh to work on you know check out the open issues already and i can help work you through that process i know it's pretty intimidating submitting your first pull request so i'd like to help you through that you know maybe if you submit a pull request or two even if it's small then you can kind of get used to the flow of it gain some confidence and you'll go out and work on you know some open source project that you you would really like to be a part of let's see monkey man says i'm still learning html well good for you keep up with it you'll you'll get through html and you'll you'll get into css and javascript before you know it um he says what are those warnings um when i upgraded to uh a newer version of material ui uh some of um uh some things the way things were named changed and so i'm getting warnings about that so i just need to switch over to the newer way of naming things and then that'll get rid of the warnings so that's why i'm not that worried about it right now i know what they are and i know how to fix it i just haven't gotten around to doing it so that's actually something i believe there's an issue open for that now so that's something that would be helpful if someone wanted to submit a pull request for that otherwise i mean i'll get around to fixing it at some point there's probably a newer version of material ui out that i need to upgrade to anyway it seems like they update very frequently which is great i love that raul says jesse i have a major problem my website's mobile version is redirecting into some other websites whoa uh role says do you know how to make it all right again please help um yeah i mean i i would definitely have to see the website so i don't know if you want to you may not want to send details about it in the live chat here you send me a dm on twitter uh you can find i think my twitter's in the description if not go to my youtube channel the link to that is in the description and i think my twitter's linked from there uh i think it's just jesse rweigle with my twitter handle but um send me a dm or something with the info because i i really have no idea without without seeing more of the details uh let's see john kane says i lost my place um john kane says are you using a sub domain for mobile or just media queries okay so it looks like uh john's trying to help out raul with um uh with the issue carlos says what framework are you using okay yeah so i'm gonna skip through a bit of this you all can check it out in the the chat in the live chat if you want but i'm gonna i'm gonna skip through here find some more questions yeah actually reading through some of this right oh yeah i think somebody got into your site and is yeah oh goodness um yeah i mean i you you have some malicious stuff going on uh with your site so that's that stuff's gonna need to be removed to definitely remove any plugins that you you think are are causing that uh i've dealt with some of this stuff with wordpress uh before uh it can be tricky to find where all of it is is um i've dealt with things where like the the actual anyway it's hard to i i don't want to say too much or the wrong thing because i know more of the details but yeah it's you need to get rid of uh all the infected files or that's not going to stop and uh you may get rid of some of it and it will come back and that means you you haven't really gotten like everything so it can be a bit tricky to find it carlos recommends a sucuri security scanner yeah that is that's a good scanner i've used that before okay john hanson's here hey john how's it going uh john says the new react get derived state from props lifecycle method could help build your component that won't cause any page data reloads when it calls your page scroll function that changes the state oh okay i'll have to check that out all right thanks for that yeah i haven't i haven't looked at that um that life cycle uh function at all at all yet i'll check it out uh jojo says how to prevent from ddos attacks uh so it's a distributed denial of service attacks um i probably the easiest way to help protect that is uh use like something like cloudflare right use a cdn um and they have a lot of builtin protections so it won't like guarantee that you'd be fine no matter what but you know if you if you don't want to you know try to become an expert at doing your own security then i would i would say that's you know use something like that and you know let them handle it so that would be my advice i mean if you wanted to get deeper into it i'm sure there's a lot of other things you could do on your site but um really like i just i wonder how worth it it is unless that's something you really want to learn and get into uh carlos says i don't think ddos attacks can be prevented yeah yeah for sure um that's a good point carlos so the original question was how to prevent ddos attacks yeah you can't you know prevent the ddos attack right somebody can try it if they want to but what you can do is take steps to make sure that if it happens it won't mess up your site too badly right it won't slow everything down uh to the point where your site becomes unusable and that's where something like a cdn would would be helpful hey harsha's here how's it going harshet uh mario says is the repo for this project final or a work in progress oh most definitely a work in progress um dell chewables i have heard services like cloudflare help prevent egos yeah for sure yeah i didn't i sorry i i didn't see that comment first uh but yeah yeah for sure um they can be helpful i mean if you don't have that and you notice you are receiving like a ddos attack you can like manually go in try to check what ip addresses that this is coming from and then block those ip addresses so like worst case scenario and it happens and you have no protections you can do that it depending on how big of an attack it is like it may or may not help uh it won't hurt anything to try but it's i've done it before and um you know it it lessens the severity depending on like how quickly you can keep the problem is like it just depends right if somebody wants to spend the money to be able to do a really big attack it could come from a lot of different ip addresses right but if somebody if it's a small attack it's only coming from a few ip addresses you may successfully be able to block those ip addresses and uh mitigate the the attack so um yeah so i mean like definitely like try to get hooked up with cloudflare or another cdn that offers some protection and then you know if it happens then you can try to manually like see where the traffic is coming and then block ip addresses okay all right well i've gotten to the end of the questions so i am going to uh end the stream now uh we we did we worked through a bit right we didn't get everything finished uh but that's all right we've uh we've come up with a process we have kind of the next steps already thought out uh so this will see we'll do this uh i'm gonna say that well i'll try to get this working if for some reason we get stuck and it's really taking a long time we always have a fallback of just use having a load more button at the bottom which is much easier to implement because we don't have to worry about scrolling we don't have to worry about things going off like multiple times so we could always implement that i think the infinite scroll is a little bit more convenient to the user they don't have to click but we have a fallback so no matter what some sort of way to get more search results will happen it will be implemented so i think we'll be fine i say that because you know we we're going to launch this uh on june 4th so we got to really be conscious of time here and like is this feature how long is it going to take to implement a feature and is it worth it you know could we do something that is good but not great just to get a feature in before launch right so that's kind of um what we have to think about now so i think this falls into that category of the infinite searches would be awesome or the infinite scroll would be awesome but we do have a fallback if it starts to take too long um jojo says thank thank you thanks all thank you very much you're welcome uh hopefully um uh the advice uh helps you out all right so i will see you all i'll probably be streaming from uh from home tomorrow uh so i'm not sure what time exactly but uh subscribe to this channel and you should turn on your notifications and you should get an alert before i stream uh if you also if you want to follow me on twitter and or instagram i do try to put up messages letting you all know when i'm going to stream on there as well so if you prefer to find out through through those social media channels you know feel feel free to follow me there as well so until tomorrow have a wonderful day
