With timestamps:

00:04 - hey everybody welcome to live coding
00:06 - with jesse i'm jesse and today we're
00:08 - going to keep working on our react
00:10 - native web
00:12 - math game
00:15 - uh
00:16 - before i get started with code i'm gonna
00:18 - go to live chat just say hi to everybody
00:21 - see hey
00:23 - um
00:25 - let's see
00:27 - cool just a lot of hellos no questions
00:29 - yet so that's that's cool uh if you
00:31 - haven't joined in before uh this is how
00:35 - it goes i'll set a timer
00:38 - for 25 minutes i'll do some coding and
00:41 - then after that is up i'll go to the
00:43 - live chat and answer some questions
00:46 - and then i'll just keep going back and
00:47 - forth with uh with the timer and then
00:49 - answering questions
00:51 - today it's going to be a little bit
00:52 - shorter than normal because i have a
00:54 - meeting scheduled
00:56 - uh
00:57 - 59 minutes so
01:00 - uh gotta be finished i have everything
01:02 - set up for the meeting right next to me
01:04 - on another laptop so
01:07 - we can go right up to
01:08 - that time
01:09 - uh but i can't go over so let's get
01:12 - started
01:14 - i'm gonna set my timer
01:19 - this is just a pomodoro timer
01:24 - and just want to let everybody know we
01:27 - do have a github repo for this project
01:29 - so if you want to check out the code
01:31 - it's there
01:32 - um
01:33 - i update it at the end of every stream
01:35 - i'm going to paste that into live chat
01:37 - it's also available in the description
01:42 - if you're wondering why we're using
01:43 - react native web or exactly what this
01:45 - project is about you can check out
01:48 - some of the previous streams so this is
01:51 - the fifth stream uh in the series
01:56 - okay i'm gonna start the app using
01:59 - running yarn start
02:06 - alright so right now uh basically we
02:08 - have an app and this is the
02:11 - the hero character is this
02:13 - uh
02:15 - square here and these are the enemies or
02:17 - the the red squares
02:20 - so
02:21 - you get it right
02:22 - a red square disappears if you get all
02:25 - the red squares to disappear you win uh
02:28 - if you get it wrong
02:30 - then the red squares keep appearing and
02:33 - right now it's set up to keep appearing
02:36 - until you hit six
02:38 - and then it it stops at six
02:40 - okay so
02:42 - right now we just have addition
02:46 - uh so what i'd like to add today is
02:48 - subtraction option
02:51 - so that the user could
02:53 - go onto subtraction and select
02:57 - whether or not they want addition or
02:58 - subtraction or maybe even a mix
03:01 - so let's see if if we can get that
03:03 - incorporated
03:04 - uh today
03:07 - probably what i'll do first is just add
03:09 - it in
03:11 - i'm not gonna worry about the ui element
03:13 - to select whether or not you which game
03:15 - mode you want
03:16 - let's just get the game working first
03:18 - and if we have time we can add in the uh
03:21 - the toggle or the selector
03:27 - okay
03:28 - so here's what i have so far i'm using
03:31 - visual studio code i'm going to
03:34 - try to get rid of as much as i can to
03:36 - give us room for
03:38 - for the actual code
03:42 - right now
03:46 - we're doing our
03:50 - our problem where is it
03:59 - oh there it is
04:00 - uh so we're checking if something is
04:02 - correct
04:04 - right here in our our check answer
04:06 - and we're using
04:08 - the the plus sign right
04:12 - so in order to add
04:17 - this other game
04:19 - let's see
04:20 - all right here's what i'm thinking right
04:22 - now
04:23 - we could do a switch statement
04:26 - and inside the switch statement
04:28 - we set the value
04:30 - of what correct is
04:32 - and we just change the
04:35 - um
04:36 - the the operator right the i guess
04:39 - that's what this would be called the
04:40 - math operator so from addition to
04:42 - subtraction and later on we can add
04:43 - multiplication and division
04:47 - um
04:48 - let's go with that for now
04:50 - uh maybe i'll have a better idea at some
04:53 - point but i i think that should work
04:55 - okay and i'm a big fan of the switch
04:57 - statement
04:58 - i've always liked it
05:02 - so
05:03 - um
05:10 - yeah the only other option i can think
05:11 - of is is actually making this part a
05:14 - variable
05:15 - the um
05:18 - the operator but i don't know if we can
05:20 - do that
05:24 - yeah i don't think that'll that will
05:25 - work so
05:27 - every time i do a switch statement i
05:29 - always do the same thing i go to mdn and
05:31 - i copy and paste their switch statement
05:32 - example because i don't use them often
05:34 - enough to memorize the syntax
05:41 - so
05:42 - javascript switch and
05:45 - mdn is one of the first links that comes
05:48 - up
05:49 - i just copy this
05:53 - and paste it
05:56 - here
05:59 - and then we can
06:01 - change it so let's pass in
06:06 - yeah when we do check answer let's let's
06:08 - pass in
06:11 - operator
06:12 - okay and we'll pass in
06:16 - operator into the switch statement
06:18 - so we'll have our our cases here
06:22 - would be
06:23 - if the operator is
06:26 - addition
06:28 - or subtraction
06:34 - and while we're at it let's just add
06:36 - multiplication
06:41 - okay and
06:44 - um i guess we could also add
06:47 - another case for
06:51 - division
06:59 - we're not going to actually create any
07:01 - of the logic for that
07:02 - today i don't think so
07:04 - but we'll have it there
07:06 - and then in here instead of a console
07:08 - log
07:09 - we're going to add this
07:11 - so let's say
07:14 - we're just going to define correct up
07:16 - there and then down here we'll actually
07:24 - do the
07:28 - set the value
07:29 - right so
07:37 - okay so for addition right everything's
07:40 - the same
07:43 - for
07:44 - subtraction
07:47 - we're going to copy and paste that and
07:49 - then
07:50 - we're just going to change
07:54 - the plus sign to the minus sign
07:57 - for multiplication and
08:01 - subtraction i guess or multiplication
08:04 - and division i guess we could just
08:06 - do this like
08:08 - while we're at it
08:11 - while we're in here doing this we may as
08:13 - well just put these in
08:17 - so we'll have multiplication
08:23 - and
08:24 - division
08:29 - okay and then we will have a default
08:33 - um which this will if if something gets
08:36 - passed in
08:37 - that is not covered in any of these
08:39 - cases it'll just go to the default and
08:42 - for now i'll just say
08:43 - um
08:45 - default
08:48 - i'll just say not an option this will
08:49 - just log to the console not really
08:51 - worried about what it says okay so now
08:54 - we can get rid of this
08:58 - so
08:59 - what should happen what i hope will
09:01 - happen is uh when we call check answer
09:03 - now
09:04 - we will pass in
09:06 - whether we want it to be addition
09:07 - subtraction multiplication or division
09:11 - uh and then based on that
09:15 - we will check to see what it the correct
09:17 - answer is
09:22 - sorry
09:23 - i didn't have any caffeine yet today so
09:28 - i was hoping i would get some
09:31 - automatic styling here but i'm not
09:33 - getting it so
09:34 - i'm gonna have to
09:37 - do a little this formatting myself
09:43 - uh
09:45 - that that looks terrible um
09:50 - i guess i don't have my linting set up
09:52 - correctly yet
09:54 - uh for um for this computer uh
09:57 - so
10:00 - maybe that's why either that or i have
10:02 - some sort of syntax error i guess we'll
10:03 - find out
10:08 - all right everything else should remain
10:10 - the same
10:11 - the only other thing that we
10:13 - want to change here is
10:15 - the display right so we are displaying
10:21 - the
10:21 - the math problem
10:23 - uh where do we have this
10:28 - should be
10:29 - here right
10:33 - so we definitely don't want to display
10:36 - that
10:42 - let me think
10:52 - how am i gonna do this
10:59 - all right so this is just going to be a
11:01 - string
11:02 - that's going to have the uh
11:09 - the operator okay
11:11 - um
11:12 - i guess we could say
11:17 - operator
11:18 - and then by default we'll have
11:21 - addition
11:25 - and then down here
11:27 - depending on what gets passed in we
11:29 - could set the state to a different
11:30 - operator
11:32 - so
11:33 - let's say
11:34 - this dot set state
11:39 - operator
11:41 - and
11:44 - you could say
11:47 - plus
11:53 - here we'll say
11:54 - let's just
11:56 - keep putting these in here
11:58 - cover all of our
12:00 - cases
12:01 - um so our operator here is subtraction
12:08 - well multiplication
12:13 - and
12:15 - division
12:16 - um
12:20 - yeah these these operators might be a
12:22 - little bit different than what children
12:23 - are used to seeing like in school
12:26 - they would probably see like an x
12:28 - instead of this and maybe like an actual
12:30 - division sign i'm going to leave it like
12:32 - this for now
12:33 - and
12:36 - later on we could come back and
12:38 - maybe change that out after i
12:41 - maybe test it out with with my kids and
12:43 - see if they they understand
12:45 - what's happening
12:49 - and then down here
12:52 - we can change this
12:55 - right so that now
12:56 - it will have
13:03 - this states
13:07 - operator
13:09 - all right so let's save that and just
13:11 - see if we have any errors
13:16 - all right hey no errors that i can see
13:18 - we'll do
13:19 - we'll inspect the page here
13:21 - and go to
13:24 - wow this is
13:27 - so zoomed in
13:28 - um
13:30 - let me zoom out a bit i want you all to
13:31 - be able to see it but
13:34 - i think that was a bit too big
13:37 - each child in a list should have a
13:39 - unique key prop okay so we don't have a
13:41 - unique key prop in one of our lists
13:43 - that's that's fine for now it's probably
13:45 - where we're adding
13:47 - these in
13:51 - all right so that works uh let's just
13:53 - verify that our
13:55 - um
13:56 - answer checker still works so
14:00 - four plus six should be
14:05 - ten
14:07 - not an option
14:10 - oh you know what
14:13 - we forgot to pass in
14:15 - when we call answer checker
14:19 - so
14:21 - where am i doing that
14:23 - i think i'm calling it maybe from down
14:26 - here
14:28 - yep this dot check answer let's just say
14:34 - we're gonna pass in
14:36 - edition
14:41 - actually let's let's make this a
14:45 - let's pass in this state
14:49 - dot
14:52 - um
14:59 - mode
15:01 - let's have this state mode and then
15:07 - mode for now is
15:10 - edition
15:14 - okay
15:20 - all right let's see if that works
15:31 - not an option
15:40 - did i not pass it in
15:47 - all right i see a lot of stuff in the
15:48 - chat so hang in there um we've got about
15:51 - 10 more minutes and then i'll go over to
15:52 - the chat let me check reacts quickly
15:56 - see what the value of the state
15:59 - is
16:04 - note edition
16:06 - um
16:11 - okay so it does say edition but what
16:13 - about
16:21 - all right let's put in a break point
16:23 - so i want to see what
16:25 - is coming in here is the operator
16:38 - why is it
16:40 - i put the breakpoint there
16:42 - there we go okay undefined
16:45 - oh i wonder if
16:54 - maybe i need to put this in
17:04 - all right let's
17:05 - see
17:13 - [Music]
17:18 - all right
17:19 - no that's not gonna work that's not it
17:22 - um
17:34 - what am i doing wrong here this state
17:37 - mode
17:56 - is it i think that i don't have access
17:58 - to the right this here is that my
18:01 - problem
18:09 - let's see
18:17 - okay
18:19 - i'm not sure if anybody's
18:23 - said anything about this in the chat so
18:27 - um
18:36 - let's see
18:51 - let's do
19:15 - all right if we do this and we can call
19:19 - this check answer
19:22 - this dot states dot mode
19:28 - i know
19:29 - that i have access to state here
19:34 - so i can call
19:40 - handle
19:42 - submit
19:43 - all right let's see if that works
19:49 - john hanson says you know how much
19:51 - easier this would be with react hooks
19:53 - actually you know what the um
19:56 - the react native update that has react
19:59 - uh hooks in it
20:01 - came out on
20:03 - like tuesday i think
20:06 - so we probably could use hooks uh i'll
20:09 - just need to update
20:10 - the version of react that we're using
20:14 - all right
20:15 - so maybe i'll i'll try to do that before
20:17 - the next stream
20:19 - all right but let's let's get
20:21 - well i guess we keep our break point
20:23 - just to make sure
20:25 - it's working
20:29 - okay
20:31 - all right doesn't really matter operator
20:35 - okay edition
20:50 - okay
20:53 - two plus nine
20:56 - let's unpause that
21:10 - hmm
21:30 - uh oh
21:31 - it's still not working i think maybe the
21:33 - problem was not what i thought it was
21:45 - hmm
22:15 - okay so we saw that operator
22:19 - was edition
22:23 - am i spelling edition the same way like
22:26 - let's
22:27 - let's check the basics right all right
22:30 - so
22:31 - it should be passing in the string
22:33 - edition
22:36 - let's find an add it oh i do have i have
22:39 - a typo
22:42 - ah typo and i think like everything that
22:46 - i just did was unnecessary
22:53 - it's funny how you can look at that
22:56 - and not realize that you had a typo
23:03 - all right yeah that works okay
23:07 - wow
23:12 - okay
23:15 - so that works now if if we change it
23:19 - for right now let's change it manually
23:23 - from addition to subtraction
23:30 - okay and we'll
23:32 - manually change this for now
23:39 - and
23:41 - now let's see
23:43 - we have subtraction
23:45 - so let's see if it works
23:48 - yeah it works
23:50 - awesome
23:54 - cool
23:55 - now
23:57 - addition that is pretty simple to deal
23:59 - with when we get into some of these
24:00 - other modes um
24:02 - especially for like the very basic level
24:04 - of small children or just learning math
24:07 - we might want to think about putting in
24:09 - some
24:10 - some rules into our logic that'll
24:12 - prevent things like the the last problem
24:15 - i think that popped up on the screen
24:17 - had it zero minus something right
24:21 - small children aren't going to know
24:22 - about negative numbers okay so that's
24:25 - that shouldn't be presented to them so
24:27 - we may want to have some sort of check
24:30 - uh
24:31 - you know when we generate these numbers
24:35 - that the result
24:37 - isn't a negative number
24:39 - or then when we go to division
24:41 - we might want to check to see like we
24:43 - only want
24:45 - um whole numbers
24:47 - all right we don't want decimal numbers
24:51 - so
24:52 - we'll have to keep that in mind i'm not
24:54 - going to go into that on today's stream
24:56 - but
24:57 - that's definitely going to be something
24:58 - that i think will need to be in place
25:01 - otherwise you know the game will be
25:04 - just way too hard
25:06 - uh for the target audience which is
25:09 - you know children that are just starting
25:11 - out you know learning math
25:14 - all right
25:16 - i
25:17 - got about a minute left on the timer uh
25:20 - but i'm gonna go ahead and just take the
25:22 - break now and go to the live chat and
25:24 - start answering some questions
25:29 - all right so
25:30 - i'm scrolling all the way to the top and
25:32 - just go
25:33 - as quickly as i can down through i'll
25:35 - probably skip a lot of the comments and
25:36 - just get to the questions since i'm
25:39 - running on a
25:41 - tight schedule today
25:48 - milano asked if i could fix nightbot um
25:52 - i have no idea how nightbot works so i
25:56 - don't know
26:00 - excuse me
26:02 - um
26:03 - stark asks about stark's music asks
26:06 - about a super chat option uh we don't do
26:08 - super chat uh as far as i know on the
26:10 - free kill camps channel so it's not it
26:13 - wouldn't really be up to me anyway
26:15 - um
26:17 - i am i am just one among many many
26:19 - volunteers uh for free code camp
26:26 - see
26:31 - okay daniel did confirm that you can't
26:33 - make operators variables
26:36 - daniel's also excited about switch
26:38 - statement it's awesome
26:53 - uh
26:54 - razvah says have you used adonis js for
26:58 - uh back end api i have not
27:02 - i have not i have no experience with
27:03 - adonis so
27:05 - um what
27:07 - maybe uh if anybody has any info about
27:09 - adonis and what we
27:12 - what's good about it honest why would i
27:13 - want to use adonis uh let me know
27:18 - all right john hanson has a javascript
27:20 - question
27:21 - is it better to define a variable global
27:24 - scoped or within an argument if there's
27:26 - a callback it calls another function do
27:29 - you need to pass that variable along
27:30 - with it
27:32 - um
27:33 - yeah i would say uh in general do not
27:36 - globally scope a variable unless you
27:38 - absolutely have to so the default should
27:40 - be not to globally scope things you want
27:43 - local scope
27:44 - um
27:47 - and
27:48 - if it has a callback
27:54 - whoa
27:56 - i'm sorry i'm yawning so much out of
28:00 - um yeah do you need to pass it with a
28:03 - callback i don't know i mean i'm
28:05 - thinking if like when you chain things
28:07 - with dot then you you have to pass
28:09 - things
28:12 - but now i like i i don't know if if we
28:14 - had a callback i think you would
28:17 - but i'm not 100 sure
28:21 - are like block scoped variables
28:24 - accessible to a callback function i
28:27 - guess that's the question and i'm not
28:29 - 100 sure
28:42 - john hanson says react is often thought
28:44 - of as an app or components each
28:46 - containing their own functions global or
28:47 - local scope is often my question okay
28:49 - yeah
28:50 - yeah in the in the context of react um i
28:53 - would say yeah like if
28:55 - um
28:58 - try to keep still try to keep everything
29:00 - local if you can but if it needs to be
29:02 - accessible from different components
29:04 - then
29:06 - you know then global is
29:09 - uh a way i guess to to go with that
29:32 - let's see
29:36 - um
29:38 - okay there was a question but it was
29:39 - actually for somebody else in the chat
29:41 - so i'm gonna skip over that
29:42 - uh
29:44 - let's see
29:54 - um so there's a question from jagon uh
29:57 - what is my first step to becoming a pen
29:59 - tester
30:00 - um
30:02 - i guess
30:03 - start learning how to do it and then
30:06 - do the testing on sites or or systems
30:11 - that you have permission to test on so
30:14 - uh pen test is uh penetration testing so
30:16 - it's like
30:17 - um
30:19 - almost like
30:20 - like
30:21 - hacking
30:22 - when you have permission to hack a
30:24 - company right uh so you're testing to
30:27 - see how hard it would be
30:28 - for
30:29 - or how easy it would be for hackers to
30:31 - get into their system you know basically
30:34 - so yeah i don't know a lot of the
30:37 - details about
30:38 - how to become a penetration tester but
30:41 - just
30:42 - in general i'd say like you know you
30:44 - would want to start learning about it
30:47 - and working with it
30:49 - there may be special certifications that
30:52 - you would get for that that i i don't
30:54 - know about so
30:56 - i would check into that
31:05 - jacob says i want to make a fortune
31:07 - doing bug bounties okay
31:10 - if that's your goal then you probably
31:12 - don't need to be certified just learn
31:14 - how to do it and um start trying to find
31:17 - bugs
31:22 - all right
31:23 - almost to the bottom of the chat i'm
31:24 - just going to go ahead and finish up
31:26 - with whatever questions are in here
31:27 - before we start up again
31:42 - okay there's actually no more questions
31:44 - it was just comments and uh replies to
31:46 - previous questions so if you're
31:47 - interested in
31:48 - the replies and everything you can
31:50 - certainly check out the live chat uh in
31:53 - the right now or in the recording
31:55 - um to save time i'm not gonna read them
31:58 - off
31:59 - all right cool let's
32:01 - i'm not going to set another pomodoro
32:03 - timer
32:05 - since
32:06 - i'm going to have to finish up probably
32:08 - before this timer will go off anyway
32:10 - but
32:12 - now that we have this and the ability to
32:14 - change our modes in here uh let's try to
32:17 - create some sort of um
32:21 - ui element that will allow a user to
32:23 - change the modes
32:25 - so
32:26 - remember eventually we're probably gonna
32:28 - have at least four different options
32:30 - addition subtraction multiplication
32:32 - division
32:34 - so
32:37 - we could have
32:45 - i mean we could do like uh an input
32:49 - let's let's see what react native gives
32:51 - us
32:52 - in terms of inputs
32:55 - [Music]
32:59 - there we go here's our components
33:01 - a picker let's see what
33:10 - maybe this would be the best thing
33:19 - yeah let's try that
33:21 - let's try this
33:22 - see how it looks
33:28 - so i find it helpful sometimes when i
33:30 - want to add something in react native i
33:32 - start thinking like how am i going to
33:33 - build this out
33:37 - without realizing that react native
33:39 - already comes with
33:41 - components that are like pre pre-made
33:44 - uh so
33:45 - it's good to try to go with the pre-made
33:47 - ones especially if you want to
33:50 - create these apps for different
33:52 - platforms uh because they were already
33:54 - made with with that in mind
33:57 - whereas if you were to try to build your
33:59 - own it may not work
34:01 - like you think it would work um like me
34:04 - coming from a web development background
34:07 - i would tend towards like hey i'm just
34:09 - going to build it like i would for the
34:10 - web but that might not work uh with
34:14 - android or ios or whatever else you're
34:17 - you're going to build for
34:22 - okay
34:25 - okay so this does render ios and android
34:27 - that's good because i see there's
34:28 - another one called picker ios
34:31 - but i think this is the way to go and
34:34 - it'll
34:35 - it should work for both
34:42 - all right so let's put this in here
34:45 - for now
34:46 - i'm not going to worry about where it
34:47 - goes
34:50 - i'm just going to put it in there
34:56 - uh we actually do have to import picker
34:58 - right so we can input that from react
35:00 - native
35:02 - picker
35:07 - and
35:11 - let's just see how it looks first
35:16 - cool yeah this is actually perfect i
35:18 - mean
35:19 - it's not the best looking thing ever but
35:21 - um
35:22 - it does what we want it to do so let's
35:25 - just use this as the basis and we'll
35:26 - just see if we can toggle between the
35:29 - addition and subtraction
35:37 - all right so just based on what we have
35:38 - here
35:42 - let's see so we have an on value change
35:45 - okay and we can pass in the item value
35:48 - and the item index
35:49 - okay so
35:51 - let's give this a label of
35:55 - addition
36:01 - yeah i spelled it wrong again
36:03 - a-d-d-i-t-i-o-n
36:04 - okay and let's see subtraction
36:12 - you know what let's i want to make this
36:19 - even more clear
36:21 - for children
36:23 - what it is so we're going to we're going
36:24 - to put in the little symbols here
36:27 - right
36:28 - um
36:32 - subtraction
36:34 - okay so now we're passing
36:38 - we can set state to
36:43 - yeah actually so we can
36:46 - let's set mode
36:47 - to
36:49 - be the item value
36:53 - and
36:55 - hmm
37:08 - all right so this works for item value
37:13 - and then are we setting
37:16 - okay good so we're we're setting
37:20 - what this is gonna be
37:25 - here
37:34 - all right i don't know if this is
37:36 - put it to the update
37:38 - um
37:43 - we're gonna have a problem let me let me
37:44 - just do it and that way everybody will
37:46 - see the problem if you don't already see
37:47 - it but
37:48 - uh
37:50 - let's save it
37:57 - all right so right now we have addition
38:00 - and
38:04 - subtraction
38:06 - so let's check our state right now and
38:08 - just see what happens
38:11 - um
38:14 - i need to
38:17 - all right okay you should be able to see
38:19 - it now
38:20 - all right so here's our state our mode
38:22 - of subtraction now our mode is addition
38:25 - all right but the problem is right now
38:26 - like it doesn't change this
38:28 - right so
38:30 - um would it
38:33 - so we need to
38:37 - make sure that the operator also changes
38:44 - so let's go
38:46 - back here and say
38:56 - there we go
38:58 - there it is okay um
39:04 - i really want to be able to pass in like
39:06 - another value let's go back to the react
39:09 - the yeah the easiest way to do this
39:11 - would be if i could pass in both values
39:14 - and set the
39:16 - the mode there
39:19 - so let's go to the documentation and
39:21 - just see what options we have
39:27 - so
39:28 - on
39:29 - on value change
39:31 - now it looks like we just have
39:34 - it just has two parameters
39:36 - um item values the value prop
39:41 - i wonder what the value could be though
39:45 - like
39:46 - let's try this all right uh does the
39:49 - value actually have to be
39:52 - a string
39:53 - i don't know let's see if we can make it
39:56 - something else
39:58 - okay so
40:00 - maybe we can make the value
40:04 - um an object right
40:09 - it's worth a shot
40:10 - right
40:11 - so
40:12 - we could say
40:14 - mode
40:15 - addition
40:20 - operator
40:24 - plus
40:25 - all right let's save that
40:28 - see what we get
40:29 - uh and we and if that is the case
40:32 - we can then say operator
40:37 - um equals item
40:39 - value
40:42 - oops i have value
40:45 - dot
40:46 - operator and this would be item value
40:49 - dot
40:51 - um
40:54 - mode
40:59 - and i should probably
41:03 - copy and paste that otherwise we'll
41:05 - definitely get an error because it'll be
41:07 - looking for these
41:08 - and
41:10 - obviously won't be there
41:15 - subtraction
41:17 - let's give it a minus sign all right
41:24 - okay
41:26 - each listening key
41:28 - invalid prop value supplied to pick your
41:30 - item okay
41:32 - so
41:33 - you can't pass
41:35 - an object i guess it has to be
41:40 - a string
41:42 - yeah we could see
41:43 - um
41:45 - right it's it's not it's not working
41:46 - it's not passing that
41:49 - okay
41:53 - let's see
41:55 - all right so let's forget that idea
41:59 - is with a shot now i know
42:02 - that you can't pass that
42:08 - so i do have another idea i was just
42:10 - kind of hoping that i wouldn't
42:13 - have to do this
42:14 - um
42:19 - okay that's all back to normal
42:23 - so we say on value change we are for
42:26 - sure changing
42:27 - uh
42:28 - the the mode oops
42:31 - not back to normal completely
42:34 - there we go
42:35 - okay so we're for sure changing um
42:40 - the mode
42:42 - we joined this says state mode
42:44 - item value
42:46 - but also
42:52 - what we could do is
42:56 - all right we can make
43:04 - handle
43:06 - mode
43:09 - handle mode
43:10 - picker
43:12 - and then in that case we could
43:15 - have
43:17 - pass in a value
43:20 - to this
43:21 - and within here
43:24 - we could
43:25 - have another switch statement which this
43:28 - is why i didn't want to do this because
43:29 - it's it's getting a little ridiculous
43:31 - with all these switch statements
43:33 - but
43:34 - this will work
43:37 - at some point this is definitely going
43:39 - to
43:42 - uh it'll be worth it to say maybe like
43:45 - do a refactor
43:46 - but basically like we already have all
43:48 - the logic we need in here
43:50 - to do what we want to do
43:56 - we can just take this out
43:59 - right and
44:02 - we're setting the state of
44:06 - sending a state here and we could say um
44:11 - mode
44:17 - and the mode is equal to val right the
44:19 - value that we're passing in
44:23 - and
44:24 - i forget the other part of the arrow
44:27 - function
44:28 - right um
44:31 - we're not
44:34 - there we go
44:35 - okay surpassing in val here and
44:43 - right so this is
44:45 - this is really all we would need to do
44:48 - to make that work
44:52 - and
44:53 - if it works i'll explain it more about
44:55 - what's happening but let's wait and see
44:57 - if it actually works first
45:00 - uh
45:01 - so
45:02 - will call
45:07 - this dot handle mode picker and we'll
45:11 - pass it
45:12 - item value
45:16 - all right let's check it out now
45:20 - okay
45:21 - so
45:23 - uh we do need to handle like what what
45:25 - is going to be
45:30 - the default when we well i guess we'll
45:32 - just change the fallback to addition all
45:33 - right so we got subtraction now let's
45:37 - let's try addition first see if that
45:39 - works
45:40 - okay that worked properly
45:42 - um one minus two
45:45 - is uh
45:47 - negative one
45:50 - min and then let's try something that
45:53 - doesn't work for sure
45:54 - let's go back to addition
45:59 - nine
46:02 - okay cool so this does work
46:05 - i do want to go back and change the
46:07 - default
46:08 - to match
46:09 - what the default would
46:11 - be um
46:14 - in our picker
46:20 - okay so here's what i did and here's why
46:22 - it works
46:23 - so
46:26 - before
46:27 - let's see
46:31 - so we had it working so that it would
46:33 - change the mode
46:34 - uh but we really needed to change the
46:36 - mode and the operator right because
46:39 - otherwise the user would not be able to
46:41 - see the correct operator on the the
46:45 - problem like they would
46:46 - potentially they could like select
46:48 - subtraction but it would still show
46:50 - addition down here right so that would
46:52 - be very confusing so that's why we we
46:54 - couldn't just
46:55 - change the state
46:56 - you know right from
46:58 - from our picker
47:00 - right the first attempt was to try to
47:02 - use an object here you can't uh it's
47:06 - the
47:08 - the type assigned to this in by react
47:11 - native is evidently just string
47:16 - so that's why we had to go up here
47:19 - and create a method to handle
47:22 - what to do whenever the user changes
47:25 - that input so
47:27 - in this case
47:29 - we're setting the state of the mode
47:33 - and
47:34 - operator
47:36 - so hopefully that makes sense
47:38 - uh let's see how much time we have okay
47:40 - i'm gonna go back to the chat now so
47:42 - essentially we we have uh accomplished
47:45 - what uh
47:46 - we we said we were going to at the
47:48 - beginning
47:49 - uh which is we put in another mode
47:51 - subtraction
47:53 - it works the logic works it's not
47:55 - perfect yet right remember we we want to
47:57 - make it so that negative numbers uh
48:00 - would never be an answer
48:02 - so we still need to add that in
48:04 - uh but we also and i wasn't sure we get
48:06 - this far we also added a ui element so
48:11 - that a user could select
48:14 - which
48:15 - mode they they wanted to use okay
48:18 - so not bad and we've already set up
48:20 - most of what we need for the other modes
48:23 - for multiplication and division
48:26 - so really it wouldn't be
48:30 - it wouldn't be that much more difficult
48:32 - to do that we pretty much just have to
48:34 - add
48:35 - some more
48:37 - values to the picker and
48:39 - we would then have multiplication and
48:42 - division
48:43 - so
48:45 - not not too bad in fact i want to try
48:47 - that out really because i think we did
48:49 - put everything in that we need
48:51 - uh so let's let's try that
48:54 - so all we need to do here
48:57 - is just
48:59 - we'll copy and paste that and change a
49:01 - few things
49:07 - multiplication
49:20 - and
49:27 - division
49:46 - okay
49:47 - let's check it out
49:49 - all right cool multiplication
49:51 - this should be zero
49:54 - yay
49:55 - let's put in a wrong answer okay let's
49:59 - try division
50:00 - all right definitely not
50:03 - this is gonna be harder
50:05 - uh till i get one that
50:07 - is really easy
50:10 - oh
50:11 - what happened here
50:13 - oh i see
50:14 - um since we added this element in the
50:17 - screen is kind of compressed so we're
50:18 - not getting those lines in between
50:21 - um
50:24 - one that i could do in my head
50:26 - uh
50:28 - five divided by two
50:30 - can i do this one is this like point
50:35 - uh
50:40 - 20 40
50:41 - is this point four
50:46 - five five
50:48 - one
50:54 - oh i don't know what i
50:56 - i was thinking of the percentage that
50:59 - five is of two never mind
51:00 - uh
51:01 - okay all right so we we did get one
51:04 - right so it division works
51:07 - so all of them do work
51:10 - so we've actually added
51:13 - three modes um
51:16 - and really it wasn't that much extra
51:17 - work
51:18 - cool all right let me
51:20 - check
51:23 - we'll do a git commit and we'll check
51:25 - this into the repo and then i'll go to
51:27 - the chat so i want to make sure you all
51:29 - have access to this code
51:31 - so let's get status to see what's
51:33 - changed
51:35 - make sure it was just what we wanted
51:37 - which
51:37 - like i thought just one file because we
51:39 - are only just working in one file right
51:41 - now
51:43 - we'll do a git commit
51:45 - we use am as the flag so we'll add
51:48 - and commit at the same time and then
51:50 - we'll also have a message to put in
51:52 - so
51:53 - add modes
51:56 - i'm not going to spell out everything
52:01 - add um
52:04 - modes and
52:06 - ui mode
52:09 - selector
52:12 - all right that works
52:15 - and i'm gonna push that
52:20 - and now all that code is available on
52:22 - github so check that out we'll do a
52:26 - little refresh
52:27 - see we have five commits now
52:29 - right so latest commit was 18 seconds
52:33 - ago that's our commit so all our code's
52:35 - here you can check it out in the github
52:37 - repo and here it is
52:41 - feel free to submit a pull request if
52:43 - you think that there's something you
52:45 - really want to do or
52:47 - submit an issue
52:48 - if there if you don't want to actually
52:50 - code it but you just want to give me
52:52 - some
52:53 - something you think should be added to
52:54 - the project
52:56 - i added one earlier that's just
52:58 - a reminder like hey i need to add a
53:00 - readme instead of this default thing
53:03 - that comes with
53:04 - um create react app
53:07 - so
53:08 - anyway
53:10 - that's it for the coding let me try to
53:12 - answer as many questions as i can in the
53:13 - next uh two minutes or so
53:20 - okay
53:35 - okay
53:43 - all right uh john asks uh john kill kill
53:46 - ad killer diddies i don't know how to
53:48 - say that i'm sorry john
53:50 - um says
53:52 - uh
53:53 - that they're new and where would be a
53:55 - good place to begin i definitely say try
53:58 - freecodecamp.org um
54:00 - i
54:01 - learned so much when i was starting out
54:03 - and i i still
54:05 - um go to freecodecam.org so
54:11 - let's try that out
54:15 - um
54:16 - all right michael noticed that uh the
54:18 - edition label was spelled wrong so
54:20 - thanks for noticing uh too bad i didn't
54:22 - look over and see that
54:24 - um
54:26 - john says that picker needs some css
54:28 - style yeah it definitely does
54:33 - yeah john says jesse can't spell his
54:35 - only weakness
54:37 - if only that was my only weakness that i
54:39 - would i would be okay with that
54:45 - all right i'm skipping through and just
54:47 - trying to find questions right now so if
54:50 - i don't see your comment
54:52 - apologies
54:58 - let's see
55:00 - um so we have a question why do you
55:02 - prefer vs code over for example webstorm
55:05 - i don't know i've never used webstorm so
55:08 - maybe i would like it if i tried it but
55:10 - i i've never tried it so i do i really
55:12 - like visual studio code though
55:17 - also i had a question does he actually
55:19 - read the chat yes in fact i do
55:23 - uh michael asked if i could pass an
55:25 - array actually that would have been good
55:26 - to try so but
55:28 - i i don't know maybe we can try that at
55:31 - some point
55:42 - michael says you can send a comma
55:44 - delimited string and then split it
55:49 - that that also could have been an option
55:52 - that would have worked
55:54 - i should have looked over at the chat
55:56 - then
55:58 - uh john says does react native allow the
56:00 - use of ref uh yeah i you you can use ref
56:04 - um
56:05 - at at least in the web
56:08 - i've gotten it to work in the web
56:09 - version of
56:11 - react native web so i've not tried to
56:14 - use it one like an emulator for ios or
56:17 - anything like that
56:25 - okay
56:37 - i have a question tyler says is
56:39 - javascript your language of choice
56:41 - um yeah yeah javascript is my primary
56:44 - language although i i
56:47 - have used other languages before
56:50 - uh and i'm currently learning more about
56:52 - c-sharp because the back end of the
56:55 - project i'm working on at my normal job
56:59 - is
57:00 - written in c sharp so
57:03 - but definitely javascript is my go-to if
57:05 - you told me to build an app as fast as i
57:08 - could i would use javascript
57:10 - uh tyler also said and follow up to that
57:12 - do you need coffee yeah for sure um
57:16 - michael says edition is actually still
57:18 - spelled wrong
57:20 - oh seriously
57:24 - did i still spell it wrong what the heck
57:27 - is wrong with me
57:28 - why can't i spell
57:31 - all right
57:33 - it's spelled wrong right there no
57:37 - oh man
57:39 - all right somebody open an issue and
57:41 - tell me to learn how to spell
57:43 - um
57:44 - or just fix it
57:47 - we'll get to that next time
57:49 - i can't believe i can't spell edition
57:52 - but anyway so i um
57:54 - so for for those of you who may be uh
57:57 - catholic you know that is lent right now
57:59 - and if you're not familiar with that
58:01 - it's a time where uh we usually like
58:03 - make some sort of sacrifice
58:05 - so
58:06 - i decided that i would only be drinking
58:09 - water
58:10 - for lent and so that means no coffee for
58:13 - me so it's been pretty hard it's been
58:16 - over a week now
58:18 - and uh i have i have still a long time
58:21 - to go
58:22 - uh
58:23 - but
58:25 - i feel okay it is like it's rough in the
58:27 - mornings it is really but
58:30 - anyway
58:32 - um
58:34 - all right
58:35 - okay i have one minute till my meeting
58:37 - starts so
58:38 - i have to go now thank you all so much
58:41 - for uh for watching and uh for all your
58:44 - advice in the chat i'll try to pay more
58:45 - attention to it next time
58:47 - and uh
58:49 - i don't know this is good we did uh we
58:51 - did a good job even though i couldn't
58:53 - spell i think uh i'm happy with how much
58:56 - we get done uh on the stream today so
58:59 - anyway i appreciate you all being here
59:00 - again thank you so much and uh have a
59:03 - great weekend

Cleaned transcript:

hey everybody welcome to live coding with jesse i'm jesse and today we're going to keep working on our react native web math game uh before i get started with code i'm gonna go to live chat just say hi to everybody see hey um let's see cool just a lot of hellos no questions yet so that's that's cool uh if you haven't joined in before uh this is how it goes i'll set a timer for 25 minutes i'll do some coding and then after that is up i'll go to the live chat and answer some questions and then i'll just keep going back and forth with uh with the timer and then answering questions today it's going to be a little bit shorter than normal because i have a meeting scheduled uh 59 minutes so uh gotta be finished i have everything set up for the meeting right next to me on another laptop so we can go right up to that time uh but i can't go over so let's get started i'm gonna set my timer this is just a pomodoro timer and just want to let everybody know we do have a github repo for this project so if you want to check out the code it's there um i update it at the end of every stream i'm going to paste that into live chat it's also available in the description if you're wondering why we're using react native web or exactly what this project is about you can check out some of the previous streams so this is the fifth stream uh in the series okay i'm gonna start the app using running yarn start alright so right now uh basically we have an app and this is the the hero character is this uh square here and these are the enemies or the the red squares so you get it right a red square disappears if you get all the red squares to disappear you win uh if you get it wrong then the red squares keep appearing and right now it's set up to keep appearing until you hit six and then it it stops at six okay so right now we just have addition uh so what i'd like to add today is subtraction option so that the user could go onto subtraction and select whether or not they want addition or subtraction or maybe even a mix so let's see if if we can get that incorporated uh today probably what i'll do first is just add it in i'm not gonna worry about the ui element to select whether or not you which game mode you want let's just get the game working first and if we have time we can add in the uh the toggle or the selector okay so here's what i have so far i'm using visual studio code i'm going to try to get rid of as much as i can to give us room for for the actual code right now we're doing our our problem where is it oh there it is uh so we're checking if something is correct right here in our our check answer and we're using the the plus sign right so in order to add this other game let's see all right here's what i'm thinking right now we could do a switch statement and inside the switch statement we set the value of what correct is and we just change the um the the operator right the i guess that's what this would be called the math operator so from addition to subtraction and later on we can add multiplication and division um let's go with that for now uh maybe i'll have a better idea at some point but i i think that should work okay and i'm a big fan of the switch statement i've always liked it so um yeah the only other option i can think of is is actually making this part a variable the um the operator but i don't know if we can do that yeah i don't think that'll that will work so every time i do a switch statement i always do the same thing i go to mdn and i copy and paste their switch statement example because i don't use them often enough to memorize the syntax so javascript switch and mdn is one of the first links that comes up i just copy this and paste it here and then we can change it so let's pass in yeah when we do check answer let's let's pass in operator okay and we'll pass in operator into the switch statement so we'll have our our cases here would be if the operator is addition or subtraction and while we're at it let's just add multiplication okay and um i guess we could also add another case for division we're not going to actually create any of the logic for that today i don't think so but we'll have it there and then in here instead of a console log we're going to add this so let's say we're just going to define correct up there and then down here we'll actually do the set the value right so okay so for addition right everything's the same for subtraction we're going to copy and paste that and then we're just going to change the plus sign to the minus sign for multiplication and subtraction i guess or multiplication and division i guess we could just do this like while we're at it while we're in here doing this we may as well just put these in so we'll have multiplication and division okay and then we will have a default um which this will if if something gets passed in that is not covered in any of these cases it'll just go to the default and for now i'll just say um default i'll just say not an option this will just log to the console not really worried about what it says okay so now we can get rid of this so what should happen what i hope will happen is uh when we call check answer now we will pass in whether we want it to be addition subtraction multiplication or division uh and then based on that we will check to see what it the correct answer is sorry i didn't have any caffeine yet today so i was hoping i would get some automatic styling here but i'm not getting it so i'm gonna have to do a little this formatting myself uh that that looks terrible um i guess i don't have my linting set up correctly yet uh for um for this computer uh so maybe that's why either that or i have some sort of syntax error i guess we'll find out all right everything else should remain the same the only other thing that we want to change here is the display right so we are displaying the the math problem uh where do we have this should be here right so we definitely don't want to display that let me think how am i gonna do this all right so this is just going to be a string that's going to have the uh the operator okay um i guess we could say operator and then by default we'll have addition and then down here depending on what gets passed in we could set the state to a different operator so let's say this dot set state operator and you could say plus here we'll say let's just keep putting these in here cover all of our cases um so our operator here is subtraction well multiplication and division um yeah these these operators might be a little bit different than what children are used to seeing like in school they would probably see like an x instead of this and maybe like an actual division sign i'm going to leave it like this for now and later on we could come back and maybe change that out after i maybe test it out with with my kids and see if they they understand what's happening and then down here we can change this right so that now it will have this states operator all right so let's save that and just see if we have any errors all right hey no errors that i can see we'll do we'll inspect the page here and go to wow this is so zoomed in um let me zoom out a bit i want you all to be able to see it but i think that was a bit too big each child in a list should have a unique key prop okay so we don't have a unique key prop in one of our lists that's that's fine for now it's probably where we're adding these in all right so that works uh let's just verify that our um answer checker still works so four plus six should be ten not an option oh you know what we forgot to pass in when we call answer checker so where am i doing that i think i'm calling it maybe from down here yep this dot check answer let's just say we're gonna pass in edition actually let's let's make this a let's pass in this state dot um mode let's have this state mode and then mode for now is edition okay all right let's see if that works not an option did i not pass it in all right i see a lot of stuff in the chat so hang in there um we've got about 10 more minutes and then i'll go over to the chat let me check reacts quickly see what the value of the state is note edition um okay so it does say edition but what about all right let's put in a break point so i want to see what is coming in here is the operator why is it i put the breakpoint there there we go okay undefined oh i wonder if maybe i need to put this in all right let's see all right no that's not gonna work that's not it um what am i doing wrong here this state mode is it i think that i don't have access to the right this here is that my problem let's see okay i'm not sure if anybody's said anything about this in the chat so um let's see let's do all right if we do this and we can call this check answer this dot states dot mode i know that i have access to state here so i can call handle submit all right let's see if that works john hanson says you know how much easier this would be with react hooks actually you know what the um the react native update that has react uh hooks in it came out on like tuesday i think so we probably could use hooks uh i'll just need to update the version of react that we're using all right so maybe i'll i'll try to do that before the next stream all right but let's let's get well i guess we keep our break point just to make sure it's working okay all right doesn't really matter operator okay edition okay two plus nine let's unpause that hmm uh oh it's still not working i think maybe the problem was not what i thought it was hmm okay so we saw that operator was edition am i spelling edition the same way like let's let's check the basics right all right so it should be passing in the string edition let's find an add it oh i do have i have a typo ah typo and i think like everything that i just did was unnecessary it's funny how you can look at that and not realize that you had a typo all right yeah that works okay wow okay so that works now if if we change it for right now let's change it manually from addition to subtraction okay and we'll manually change this for now and now let's see we have subtraction so let's see if it works yeah it works awesome cool now addition that is pretty simple to deal with when we get into some of these other modes um especially for like the very basic level of small children or just learning math we might want to think about putting in some some rules into our logic that'll prevent things like the the last problem i think that popped up on the screen had it zero minus something right small children aren't going to know about negative numbers okay so that's that shouldn't be presented to them so we may want to have some sort of check uh you know when we generate these numbers that the result isn't a negative number or then when we go to division we might want to check to see like we only want um whole numbers all right we don't want decimal numbers so we'll have to keep that in mind i'm not going to go into that on today's stream but that's definitely going to be something that i think will need to be in place otherwise you know the game will be just way too hard uh for the target audience which is you know children that are just starting out you know learning math all right i got about a minute left on the timer uh but i'm gonna go ahead and just take the break now and go to the live chat and start answering some questions all right so i'm scrolling all the way to the top and just go as quickly as i can down through i'll probably skip a lot of the comments and just get to the questions since i'm running on a tight schedule today milano asked if i could fix nightbot um i have no idea how nightbot works so i don't know excuse me um stark asks about stark's music asks about a super chat option uh we don't do super chat uh as far as i know on the free kill camps channel so it's not it wouldn't really be up to me anyway um i am i am just one among many many volunteers uh for free code camp see okay daniel did confirm that you can't make operators variables daniel's also excited about switch statement it's awesome uh razvah says have you used adonis js for uh back end api i have not i have not i have no experience with adonis so um what maybe uh if anybody has any info about adonis and what we what's good about it honest why would i want to use adonis uh let me know all right john hanson has a javascript question is it better to define a variable global scoped or within an argument if there's a callback it calls another function do you need to pass that variable along with it um yeah i would say uh in general do not globally scope a variable unless you absolutely have to so the default should be not to globally scope things you want local scope um and if it has a callback whoa i'm sorry i'm yawning so much out of um yeah do you need to pass it with a callback i don't know i mean i'm thinking if like when you chain things with dot then you you have to pass things but now i like i i don't know if if we had a callback i think you would but i'm not 100 sure are like block scoped variables accessible to a callback function i guess that's the question and i'm not 100 sure john hanson says react is often thought of as an app or components each containing their own functions global or local scope is often my question okay yeah yeah in the in the context of react um i would say yeah like if um try to keep still try to keep everything local if you can but if it needs to be accessible from different components then you know then global is uh a way i guess to to go with that let's see um okay there was a question but it was actually for somebody else in the chat so i'm gonna skip over that uh let's see um so there's a question from jagon uh what is my first step to becoming a pen tester um i guess start learning how to do it and then do the testing on sites or or systems that you have permission to test on so uh pen test is uh penetration testing so it's like um almost like like hacking when you have permission to hack a company right uh so you're testing to see how hard it would be for or how easy it would be for hackers to get into their system you know basically so yeah i don't know a lot of the details about how to become a penetration tester but just in general i'd say like you know you would want to start learning about it and working with it there may be special certifications that you would get for that that i i don't know about so i would check into that jacob says i want to make a fortune doing bug bounties okay if that's your goal then you probably don't need to be certified just learn how to do it and um start trying to find bugs all right almost to the bottom of the chat i'm just going to go ahead and finish up with whatever questions are in here before we start up again okay there's actually no more questions it was just comments and uh replies to previous questions so if you're interested in the replies and everything you can certainly check out the live chat uh in the right now or in the recording um to save time i'm not gonna read them off all right cool let's i'm not going to set another pomodoro timer since i'm going to have to finish up probably before this timer will go off anyway but now that we have this and the ability to change our modes in here uh let's try to create some sort of um ui element that will allow a user to change the modes so remember eventually we're probably gonna have at least four different options addition subtraction multiplication division so we could have i mean we could do like uh an input let's let's see what react native gives us in terms of inputs there we go here's our components a picker let's see what maybe this would be the best thing yeah let's try that let's try this see how it looks so i find it helpful sometimes when i want to add something in react native i start thinking like how am i going to build this out without realizing that react native already comes with components that are like pre premade uh so it's good to try to go with the premade ones especially if you want to create these apps for different platforms uh because they were already made with with that in mind whereas if you were to try to build your own it may not work like you think it would work um like me coming from a web development background i would tend towards like hey i'm just going to build it like i would for the web but that might not work uh with android or ios or whatever else you're you're going to build for okay okay so this does render ios and android that's good because i see there's another one called picker ios but i think this is the way to go and it'll it should work for both all right so let's put this in here for now i'm not going to worry about where it goes i'm just going to put it in there uh we actually do have to import picker right so we can input that from react native picker and let's just see how it looks first cool yeah this is actually perfect i mean it's not the best looking thing ever but um it does what we want it to do so let's just use this as the basis and we'll just see if we can toggle between the addition and subtraction all right so just based on what we have here let's see so we have an on value change okay and we can pass in the item value and the item index okay so let's give this a label of addition yeah i spelled it wrong again addition okay and let's see subtraction you know what let's i want to make this even more clear for children what it is so we're going to we're going to put in the little symbols here right um subtraction okay so now we're passing we can set state to yeah actually so we can let's set mode to be the item value and hmm all right so this works for item value and then are we setting okay good so we're we're setting what this is gonna be here all right i don't know if this is put it to the update um we're gonna have a problem let me let me just do it and that way everybody will see the problem if you don't already see it but uh let's save it all right so right now we have addition and subtraction so let's check our state right now and just see what happens um i need to all right okay you should be able to see it now all right so here's our state our mode of subtraction now our mode is addition all right but the problem is right now like it doesn't change this right so um would it so we need to make sure that the operator also changes so let's go back here and say there we go there it is okay um i really want to be able to pass in like another value let's go back to the react the yeah the easiest way to do this would be if i could pass in both values and set the the mode there so let's go to the documentation and just see what options we have so on on value change now it looks like we just have it just has two parameters um item values the value prop i wonder what the value could be though like let's try this all right uh does the value actually have to be a string i don't know let's see if we can make it something else okay so maybe we can make the value um an object right it's worth a shot right so we could say mode addition operator plus all right let's save that see what we get uh and we and if that is the case we can then say operator um equals item value oops i have value dot operator and this would be item value dot um mode and i should probably copy and paste that otherwise we'll definitely get an error because it'll be looking for these and obviously won't be there subtraction let's give it a minus sign all right okay each listening key invalid prop value supplied to pick your item okay so you can't pass an object i guess it has to be a string yeah we could see um right it's it's not it's not working it's not passing that okay let's see all right so let's forget that idea is with a shot now i know that you can't pass that so i do have another idea i was just kind of hoping that i wouldn't have to do this um okay that's all back to normal so we say on value change we are for sure changing uh the the mode oops not back to normal completely there we go okay so we're for sure changing um the mode we joined this says state mode item value but also what we could do is all right we can make handle mode handle mode picker and then in that case we could have pass in a value to this and within here we could have another switch statement which this is why i didn't want to do this because it's it's getting a little ridiculous with all these switch statements but this will work at some point this is definitely going to uh it'll be worth it to say maybe like do a refactor but basically like we already have all the logic we need in here to do what we want to do we can just take this out right and we're setting the state of sending a state here and we could say um mode and the mode is equal to val right the value that we're passing in and i forget the other part of the arrow function right um we're not there we go okay surpassing in val here and right so this is this is really all we would need to do to make that work and if it works i'll explain it more about what's happening but let's wait and see if it actually works first uh so will call this dot handle mode picker and we'll pass it item value all right let's check it out now okay so uh we do need to handle like what what is going to be the default when we well i guess we'll just change the fallback to addition all right so we got subtraction now let's let's try addition first see if that works okay that worked properly um one minus two is uh negative one min and then let's try something that doesn't work for sure let's go back to addition nine okay cool so this does work i do want to go back and change the default to match what the default would be um in our picker okay so here's what i did and here's why it works so before let's see so we had it working so that it would change the mode uh but we really needed to change the mode and the operator right because otherwise the user would not be able to see the correct operator on the the problem like they would potentially they could like select subtraction but it would still show addition down here right so that would be very confusing so that's why we we couldn't just change the state you know right from from our picker right the first attempt was to try to use an object here you can't uh it's the the type assigned to this in by react native is evidently just string so that's why we had to go up here and create a method to handle what to do whenever the user changes that input so in this case we're setting the state of the mode and operator so hopefully that makes sense uh let's see how much time we have okay i'm gonna go back to the chat now so essentially we we have uh accomplished what uh we we said we were going to at the beginning uh which is we put in another mode subtraction it works the logic works it's not perfect yet right remember we we want to make it so that negative numbers uh would never be an answer so we still need to add that in uh but we also and i wasn't sure we get this far we also added a ui element so that a user could select which mode they they wanted to use okay so not bad and we've already set up most of what we need for the other modes for multiplication and division so really it wouldn't be it wouldn't be that much more difficult to do that we pretty much just have to add some more values to the picker and we would then have multiplication and division so not not too bad in fact i want to try that out really because i think we did put everything in that we need uh so let's let's try that so all we need to do here is just we'll copy and paste that and change a few things multiplication and division okay let's check it out all right cool multiplication this should be zero yay let's put in a wrong answer okay let's try division all right definitely not this is gonna be harder uh till i get one that is really easy oh what happened here oh i see um since we added this element in the screen is kind of compressed so we're not getting those lines in between um one that i could do in my head uh five divided by two can i do this one is this like point uh 20 40 is this point four five five one oh i don't know what i i was thinking of the percentage that five is of two never mind uh okay all right so we we did get one right so it division works so all of them do work so we've actually added three modes um and really it wasn't that much extra work cool all right let me check we'll do a git commit and we'll check this into the repo and then i'll go to the chat so i want to make sure you all have access to this code so let's get status to see what's changed make sure it was just what we wanted which like i thought just one file because we are only just working in one file right now we'll do a git commit we use am as the flag so we'll add and commit at the same time and then we'll also have a message to put in so add modes i'm not going to spell out everything add um modes and ui mode selector all right that works and i'm gonna push that and now all that code is available on github so check that out we'll do a little refresh see we have five commits now right so latest commit was 18 seconds ago that's our commit so all our code's here you can check it out in the github repo and here it is feel free to submit a pull request if you think that there's something you really want to do or submit an issue if there if you don't want to actually code it but you just want to give me some something you think should be added to the project i added one earlier that's just a reminder like hey i need to add a readme instead of this default thing that comes with um create react app so anyway that's it for the coding let me try to answer as many questions as i can in the next uh two minutes or so okay okay all right uh john asks uh john kill kill ad killer diddies i don't know how to say that i'm sorry john um says uh that they're new and where would be a good place to begin i definitely say try freecodecamp.org um i learned so much when i was starting out and i i still um go to freecodecam.org so let's try that out um all right michael noticed that uh the edition label was spelled wrong so thanks for noticing uh too bad i didn't look over and see that um john says that picker needs some css style yeah it definitely does yeah john says jesse can't spell his only weakness if only that was my only weakness that i would i would be okay with that all right i'm skipping through and just trying to find questions right now so if i don't see your comment apologies let's see um so we have a question why do you prefer vs code over for example webstorm i don't know i've never used webstorm so maybe i would like it if i tried it but i i've never tried it so i do i really like visual studio code though also i had a question does he actually read the chat yes in fact i do uh michael asked if i could pass an array actually that would have been good to try so but i i don't know maybe we can try that at some point michael says you can send a comma delimited string and then split it that that also could have been an option that would have worked i should have looked over at the chat then uh john says does react native allow the use of ref uh yeah i you you can use ref um at at least in the web i've gotten it to work in the web version of react native web so i've not tried to use it one like an emulator for ios or anything like that okay i have a question tyler says is javascript your language of choice um yeah yeah javascript is my primary language although i i have used other languages before uh and i'm currently learning more about csharp because the back end of the project i'm working on at my normal job is written in c sharp so but definitely javascript is my goto if you told me to build an app as fast as i could i would use javascript uh tyler also said and follow up to that do you need coffee yeah for sure um michael says edition is actually still spelled wrong oh seriously did i still spell it wrong what the heck is wrong with me why can't i spell all right it's spelled wrong right there no oh man all right somebody open an issue and tell me to learn how to spell um or just fix it we'll get to that next time i can't believe i can't spell edition but anyway so i um so for for those of you who may be uh catholic you know that is lent right now and if you're not familiar with that it's a time where uh we usually like make some sort of sacrifice so i decided that i would only be drinking water for lent and so that means no coffee for me so it's been pretty hard it's been over a week now and uh i have i have still a long time to go uh but i feel okay it is like it's rough in the mornings it is really but anyway um all right okay i have one minute till my meeting starts so i have to go now thank you all so much for uh for watching and uh for all your advice in the chat i'll try to pay more attention to it next time and uh i don't know this is good we did uh we did a good job even though i couldn't spell i think uh i'm happy with how much we get done uh on the stream today so anyway i appreciate you all being here again thank you so much and uh have a great weekend
