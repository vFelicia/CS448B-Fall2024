With timestamps:

00:00 - [Music]
00:03 - so uh next up we have jessica lord i'm
00:05 - so excited that jessica could come and
00:07 - come and speak here today traveling all
00:09 - the way across the country from new york
00:11 - um even though she did you know used to
00:13 - reside here
00:14 - back in the day uh when jessica worked
00:16 - at github um chances are you've you've
00:20 - used uh some application that you know
00:23 - jessica's sticky fingers were involved
00:25 - in making along the way jessica uh
00:28 - let the electron team uh or started the
00:30 - electron team uh github and so you know
00:33 - if you've been working on anything
00:35 - that's had
00:36 - been built as a desktop application that
00:37 - uses javascript html css all of those
00:40 - good things uh has been packaged up and
00:42 - used on the desktop app there are lots
00:44 - of them around um
00:46 - are we going to oh we're going to lunch
00:47 - okay
00:48 - thank you
00:50 - thanks for your talk jessica
00:54 - so yes you may well have encountered
00:55 - jessica's work already also um jessica
00:58 - now works in new york at a company
01:00 - called splice uh who do um kind of
01:02 - tooling and resources for musicians uh
01:05 - heard it described as
01:06 - github for musicians so uh the mind kind
01:09 - of boggles there i've seen jessica talk
01:12 - a bunch of times before and always
01:14 - really enjoy her take on like culture
01:16 - and the uh like the way teams work
01:19 - together uh and so i'm very very excited
01:22 - to be able to welcome here to stack uh
01:25 - conference uh please make it very very
01:27 - welcome jessica lord
01:29 - thank you
01:32 - thank you so much phil
01:34 - um
01:35 - yeah thank you
01:37 - that's full seven my name is jessica
01:38 - lord i work at
01:40 - a company called splice in new york city
01:43 - i work on the back end and a bunch of
01:45 - very not jammy stuff
01:48 - at all
01:49 - and
01:50 - but i'm so i'm not talking about any of
01:52 - that today today i'm going to share some
01:54 - stories about very jammy things
01:58 - i worked on when i github and i code for
02:01 - america and github is a code sharing
02:04 - site and code for america if you don't
02:06 - know is a nonprofit based here in san
02:08 - francisco
02:10 - for
02:11 - writing open source software for city
02:13 - governments that city governments can
02:15 - use and
02:16 - be better at governing
02:19 - but first i want to
02:21 - go into
02:23 - this statement and and really why i'm
02:26 - thrilled to be here and a part of the
02:28 - jams.conf and really love this area of
02:31 - the web
02:32 - the most and excites me is because i
02:35 - really truly believe that everyone is a
02:37 - developer that everyone could be a
02:40 - developer
02:41 - that everyone might be a developer they
02:44 - might be on their way they will be a
02:46 - developer soon or they actually already
02:48 - are a developer but they're afraid to
02:50 - call themselves that
02:52 - our profession is really
02:54 - special that way for those of us who do
02:57 - this professionally
02:59 - it's it's different that we actually
03:01 - have people not doing it professionally
03:03 - doing the stuff that we do
03:04 - professionally
03:06 - that's different it's not like rocket
03:08 - science or heart surgery and i don't
03:11 - mean in terms of complexity right
03:14 - because that's not to say that the work
03:16 - we do isn't important revolutionary
03:19 - remarkable it is
03:20 - um and that's what's really exciting for
03:23 - me about it and it's not to say that
03:25 - there aren't really brilliant people
03:27 - doing amazing things but you don't need
03:29 - to be on the bleeding edge fringe of web
03:31 - development
03:32 - to make something meaningful and
03:34 - empowering and
03:36 - there aren't heart surgery hobbyists
03:39 - there actually might be and it's
03:41 - definitely illegal
03:45 - but it's it's one of these ways in which
03:48 - our profession is different than other
03:50 - people's and i might really regret this
03:51 - metaphor later so
03:53 - we'll see
03:54 - um
03:55 - because unlike heart surgery the web is
03:58 - bigger than what we do professionally
04:01 - and
04:02 - unlike heart surgery the web is better
04:04 - when it's approachable for more
04:07 - people
04:08 - the work we do every day is also done by
04:11 - tinkerers by activists by people on
04:14 - their weekends by people teaching
04:15 - themselves
04:17 - by community leaders all these people
04:20 - who aren't considering themselves a
04:22 - professional developer they're still
04:24 - using the tools that we have built and
04:26 - contributed and
04:28 - are using
04:30 - but
04:31 - i think it's important that when we
04:34 - build the tools we do and create the
04:37 - environments we do for web development
04:39 - we think about these tools in the
04:40 - context not just of other developers
04:42 - exactly like us but
04:44 - for people not developers um
04:48 - but aren't developers people yes
04:51 - but they're a subset of people who could
04:54 - would and should be
04:56 - developing and so for me and why i love
05:00 - the jam stack and
05:03 - a lot of the work i do is because i want
05:05 - to build things so that there's more
05:07 - people building things and i think
05:10 - it's it inflates everyone it is better
05:13 - experience on the web when more people
05:15 - can use the web
05:17 - there's this quote i love from anil dash
05:19 - who is the ceo of glitch formerly far
05:23 - creek but now fully in on glitch um it
05:26 - seems more important than ever to
05:27 - encourage a diverse community of
05:29 - creators to experiment with their
05:31 - broadest set of ideas i think that's
05:35 - so
05:36 - true and
05:37 - to me
05:38 - it's really important because coding is
05:40 - a powerful literacy and
05:43 - and it's not just
05:44 - the broadest people out there who
05:47 - might be developers or who aren't
05:48 - developers but i mean it's also the
05:50 - people you work with because you
05:52 - probably work with people who aren't
05:54 - developers or people who haven't been
05:56 - developers their whole lives or people
05:58 - who are developers but came from a
06:00 - totally different stack than what you're
06:01 - working on now and so
06:03 - i think
06:05 - it's really important that we don't
06:07 - think of a professional developer as the
06:10 - only kind of developer and that everyone
06:12 - can benefit from building things on the
06:14 - web
06:16 - because html cms and javascript they
06:18 - still work and
06:20 - like monica showed us browsers do
06:23 - amazing things like we have these tools
06:25 - already
06:26 - and it kind of doesn't need to be more
06:28 - complex than that um
06:31 - so
06:32 - where's my screen um i have
06:34 - this kind of scale of web things
06:38 - where if you imagine the two extremes of
06:40 - a single page site and then a really big
06:44 - web app
06:47 - i think we focus on this far end and we
06:50 - make it seem like this is web
06:51 - development this is where you need to be
06:53 - to be putting stuff online
06:55 - and it's just not true
06:57 - there's all this spot in space in the
07:00 - middle
07:01 - and i've actually used this diagram
07:03 - before
07:04 - but now it's really clear to me that
07:07 - this is the jam
07:09 - spot
07:11 - of things and so this is the area full
07:15 - of
07:16 - things you can do that don't have to be
07:19 - super complex and i
07:21 - want there to be more activity here
07:25 - because sometimes our projects make it
07:27 - out into the world and other people
07:29 - interface with them and those other
07:31 - people need less overhead and then
07:33 - sometimes a project doesn't it stays
07:35 - internal but your teammates need less
07:38 - overhead too
07:40 - um so
07:42 - all right the first part is
07:44 - the story of making an electron a thing
07:47 - electron is a library that github
07:50 - maintains that is for building desktop
07:52 - apps that work on mac windows and linux
07:55 - using web technology
07:58 - but it used to be called adam shell
08:00 - and it was a dependency in adam which is
08:03 - github's text editor and it lived there
08:06 - and github didn't want to do anything
08:09 - with it there was no vision for it there
08:10 - was no plan and
08:12 - i had been at github and
08:14 - recently had moved on to the atom team
08:17 - and as i dove deeper into the atom
08:20 - code and onboarded
08:22 - and learned that the thing making
08:24 - everything happen was this thing called
08:27 - adam shell
08:28 - i started to think it was actually
08:31 - more game changing than adam itself i
08:33 - think adam is a great text editor
08:36 - but adam schell felt really changing to
08:39 - me and so
08:41 - i started to
08:42 - fight for it um and you might be
08:45 - surprised that there was pushback
08:47 - because there was really no vision for
08:49 - this to ever be anything like adam was
08:51 - the dream and
08:53 - there was just
08:54 - like
08:55 - no there was no plan for this and i kept
08:58 - pushing and i wrote up
09:00 - road plans and reasons why it should be
09:03 - its own thing and i finally as the first
09:05 - step got the okay to spend my full time
09:08 - working on electron stuff and the stuff
09:11 - that i had put on my road map and so
09:14 - adam shell
09:15 - the core library that is now electron
09:18 - was built and maintained by a guy named
09:21 - chang and so he still worked on the core
09:22 - library and then i
09:24 - worked on all this other stuff that i
09:26 - had put on my road map as a sort of like
09:29 - prove to github that electron could be a
09:31 - thing that was worthy and stand on its
09:34 - own and the first thing i started with
09:37 - was documentation i wanted there to be
09:40 - one source of truth and luckily there
09:42 - was already pretty good documentation in
09:44 - the electron project
09:46 - but i didn't want to over complicate
09:48 - that i wanted there to be one source of
09:50 - truth for documentation i wanted to
09:52 - standardize it with a style guide
09:54 - because
09:55 - it needed standardizing
09:58 - and i want to make the most of markdown
10:00 - and css and html i've been on projects
10:03 - that have
10:05 - like adam where documentation is this
10:07 - whole other thing it lives in another
10:09 - repo it's dependent on
10:11 - a whole other tool chain for
10:13 - documentation and a whole other
10:15 - templating library and there's a whole
10:17 - other hurdle into onboarding
10:20 - just to fix the documentation and i
10:22 - wanted to make the most of what exists
10:25 - now which i felt was good enough
10:28 - and then of course a static site
10:30 - generator
10:31 - i was at github so i used jekyll and
10:35 - what i ended up doing was the electron
10:38 - documentation lives inside of electron
10:40 - the repo
10:42 - and so whenever you
10:44 - download electron you get a copy of the
10:46 - documentation it's all marked down um
10:49 - and so i want to start from there that
10:50 - is the one source of truth all changes
10:53 - to documentation happen there and then
10:56 - so i never
10:58 - learned ruby at github so i put a bunch
11:00 - of node scripts into my jekyll site that
11:02 - basically
11:04 - took the tar file from an electron
11:07 - release would stream out the docs folder
11:10 - read the file path read the content of
11:12 - it which had now been standardized so it
11:14 - was predictable
11:16 - and then generate the front matter and
11:18 - all the things that jekyll needed so
11:20 - that it could then take all of those
11:22 - things stream them out of the repo and
11:24 - then put them nicely into a jekyll site
11:27 - in the way that jekyll wants them
11:30 - and
11:31 - so yeah like i mentioned the style guide
11:34 - was really important so that the format
11:37 - of the documentation could be
11:38 - predictable
11:40 - so that incoming changes could
11:42 - maintain this name the same
11:45 - format and also
11:47 - because of wanting to make the most of
11:50 - css knowing that i was going to be
11:52 - putting it on this jekyll site
11:54 - and i would have the benefit of css so
11:57 - it could make
11:58 - the legibility of the documentation a
12:00 - little bit better than just reading the
12:02 - markdown files and so
12:04 - the
12:05 - style of all the documentation had to be
12:07 - really thought through and predictable
12:11 - and so
12:12 - on the documentation on the site there's
12:14 - also a few things that are a little bit
12:16 - electron specific but
12:19 - because it's pulling the docs from the
12:23 - releases of electron we get to have
12:25 - versioned
12:27 - documentation on the site and then
12:29 - there's a tldr line on all of the pages
12:32 - because i feel like documentation often
12:34 - times you go to the page and you have to
12:36 - read through two long paragraphs to even
12:38 - figure out if you're on the right page
12:40 - or not so i wanted people to have
12:42 - right at the start a place to go and
12:44 - know if they're in the wrong place or
12:47 - not
12:48 - and then
12:49 - electron blurs the lines between what's
12:51 - front-end and what's back-end
12:54 - and then introduces new complexity with
12:57 - having two processes and so there's a
12:59 - main process and a renderer process and
13:01 - so
13:02 - each of the documentation
13:04 - tells what process it belongs to
13:07 - and then because
13:08 - when we're on the site and we have the
13:10 - power
13:11 - of css to improve readability we can do
13:13 - things like
13:15 - make it more clear when a method or an
13:17 - event is something that only happens on
13:20 - a mac system or a windows system
13:23 - but it's really important to do this
13:25 - without forsaking the original markdown
13:28 - because i didn't want to do something so
13:30 - that it looked good on the site but then
13:33 - was horrible to read as markdown because
13:36 - the markdown is the source of truth and
13:38 - it's what ships with every
13:40 - download of electron and so everything
13:43 - that had to be done like pushing the
13:45 - limits of
13:46 - mark down and thinking about how i'm
13:48 - going to style this
13:50 - in css but have it not look terrible in
13:54 - the markdown
13:56 - and so that was
13:57 - the bulk of the documentation
13:59 - the next thing i worked on was what was
14:02 - going to be people's first electron app
14:04 - and
14:05 - there are some other people at work were
14:06 - like of course we'll do an electron in
14:09 - it and it should be a scaffolding system
14:11 - and i pushed back on that
14:13 - first of all electron apps can be
14:15 - anything they can be
14:17 - a menu bar app that does one tiny thing
14:20 - with a window this big that i mean that
14:23 - tells you the time or the weather
14:25 - it can also be slack so there's a huge
14:28 - gulf in the kind of electron apps you
14:29 - can build
14:30 - not to mention you can pick your flavor
14:33 - of front-end framework and all of this
14:35 - stuff and so i felt like that's a huge
14:38 - undertaking to build a scaffolding tool
14:40 - that's going to support all these
14:42 - permeations of
14:45 - an electron app and even if it doesn't
14:47 - support all of them then who are we to
14:49 - say like well we think you should use
14:51 - react we don't and if you have a tiny
14:53 - menu bar app like you don't need any
14:55 - framework at all and so
14:57 - i went with the keep it simple approach
15:00 - and you clone it it's a bare bones
15:02 - electron app with an almost empty
15:05 - starting window you clone the repo you
15:07 - npm install you npm start
15:10 - and you get an almost blank electron app
15:13 - you can open up the dev tools and you
15:14 - can start to poke around in it and you
15:17 - can
15:18 - especially i wanted to think about
15:20 - people who weren't coming
15:22 - from
15:23 - the desktop app space because people who
15:26 - are already in this space who are maybe
15:28 - working at a startup that used like
15:30 - chromium embedded framework and things
15:32 - like this they already got it so i don't
15:34 - care about them like i care about the
15:36 - people who were front-end developers or
15:38 - people who didn't think that they could
15:41 - ever build a desktop app i wanted people
15:43 - to know that in electron it's html you
15:45 - can open it up you can use
15:48 - the
15:48 - chrome dev tools like you're used to and
15:51 - start doing the things that you already
15:52 - know how to do and so
15:55 - with this little
15:57 - easy to clone and launch app you like
16:00 - very instantly almost instantly nothing
16:03 - it's not that instant
16:05 - you can start digging around and
16:07 - changing an electron up
16:11 - but i wanted to go beyond that because
16:13 - it still was really hard to get across
16:15 - to people what is electron why would i
16:17 - use it what are the kind of things that
16:19 - i can do with it and so
16:22 - the next thing i did was
16:25 - build an electron app that demos the
16:27 - electron api
16:29 - um
16:30 - and i think it worked out really great
16:33 - it was actually a really good tool for
16:35 - this
16:36 - so that you can
16:38 - you can
16:39 - download this app and you can go through
16:41 - it and you can view the demos of the
16:44 - different kind of common things that you
16:45 - would do interfacing with the different
16:48 - desktop system uis and
16:51 - demo things like opening a new window
16:53 - and so that it makes really clear like
16:55 - what this stuff
16:56 - means like what what's a dialogue if
16:58 - you're not coming from the desktop
17:00 - application world like
17:02 - what you might not know exactly what a
17:04 - native dialogue is so this app lets you
17:07 - go in and start actually seeing these
17:09 - things
17:11 - in real time and i
17:14 - also wanted this app to be a learning
17:16 - tool inside and out and so
17:19 - the code itself is structured in a way
17:21 - where everything is organized and named
17:24 - so that you can match it up so when i
17:25 - mentioned earlier about there being the
17:27 - two processes
17:29 - an electron here when you open up
17:31 - the code for the app you can
17:34 - find exactly the name the matching name
17:37 - for a feature that happened and find the
17:39 - corresponding renderer and main process
17:42 - files
17:44 - and because
17:45 - it's an electron app
17:46 - and because we have node available in
17:50 - our html
17:51 - what each page does is actually uses
17:54 - all of the sample code the app gives you
17:57 - is the code itself
17:59 - so we use node to read the file and then
18:03 - append it to the dom and so there's also
18:05 - one source of truth here so once you
18:07 - update the app's code the demo app is
18:09 - updated there's not they're not ever
18:11 - going to be out of sync and so that was
18:14 - huge for me being one person doing a
18:17 - bunch of the stuff and so
18:20 - that is
18:21 - essentially all of the ground work that
18:23 - was done and
18:24 - to me
18:26 - this the jam stack was essential like
18:29 - keeping it simple from the start was
18:31 - essential so that i could advocate for
18:33 - the project so i could actually build
18:35 - these things so that i could maintain
18:36 - these things and it was easy to onboard
18:39 - people once it became a real team and we
18:41 - got more people on it it was easy to
18:43 - grow from there
18:46 - um
18:47 - you might find yourself in a position
18:49 - like this too so it's not it's not
18:52 - always an altruistic thing of like i'm
18:54 - doing this for the good of humankind but
18:57 - you might find yourself in a position
18:59 - where you need to maintain less and
19:01 - onboard people faster
19:04 - all right so the second part is about
19:06 - spreadsheets something i love to talk
19:08 - about
19:11 - and this goes back to
19:14 - my background is actually urban design
19:15 - and architecture and i was an urban
19:18 - designer at the city of boston in the
19:20 - urban design technology group
19:22 - and from there i went to do the code for
19:25 - america fellowship which i mentioned
19:27 - earlier for building open source
19:28 - software for city governments and
19:31 - something i took with me from city hall
19:33 - into this fellowship was
19:36 - a real desire to make it so that people
19:39 - could edit their own content so that
19:41 - there wasn't this bottleneck places
19:43 - where it had to do everything because i
19:45 - felt like
19:46 - the web was further than that the web
19:48 - was at a place where people shouldn't be
19:50 - so afraid to edit their own content
19:53 - and so
19:55 - after that year
19:56 - and a grant from mozilla i ended up with
19:58 - a little library called sheet cjs for
20:01 - visualizing
20:04 - google spreadsheets on a website um but
20:06 - i'm not going to go into sheetzy really
20:08 - i just want to talk about how great
20:10 - spreadsheets are
20:13 - and so back to this diagram again and i
20:16 - think this space is such a great space
20:18 - for spreadsheets because
20:20 - spreadsheets are a database with no
20:23 - setup that almost everyone already knows
20:26 - how to use
20:28 - and if you just sit with that for a
20:29 - second
20:31 - like how many libraries like we talk
20:33 - about the hurdles of learning the modern
20:35 - web stack and
20:37 - all the tool chains and all of this
20:39 - stuff and even if you're already a
20:40 - developer
20:42 - you have to onboard into a new system
20:44 - and learn how everything works and so
20:46 - something that exists with no setup
20:49 - and you don't have to teach people how
20:51 - to use it
20:52 - that's amazing
20:54 - um
20:55 - and so i am mostly talking about google
20:58 - spreadsheets here when i say
20:59 - spreadsheets but really a lot of the
21:01 - stuff you could do
21:03 - if you're i mean if your spreadsheet is
21:04 - in
21:06 - microsoft office on excel like if you
21:08 - can get it to json you can still do a
21:10 - lot of these things um
21:13 - so websites
21:14 - they have problems and so even if you're
21:18 - a professional developer who
21:20 - knows how to do all of this stuff there
21:22 - are certain projects where these become
21:24 - hurdles even for you and they're hurdles
21:26 - for people who aren't
21:28 - full-time developers and spreadsheets
21:31 - make a lot of this easier or not a
21:33 - problem at all especially when you think
21:35 - about are am i going to have a
21:37 - collaborator am i going to be working
21:38 - with someone who's not a developer
21:42 - and that's one of my favorite things
21:43 - about spreadsheets is
21:45 - because they are so approachable that
21:47 - people are using them to do radical
21:50 - awesome things in the very scary times
21:52 - in which we live and so
21:54 - i think there's so much untapped
21:56 - potential about what we can do
21:59 - that involves so many people with
22:01 - spreadsheets
22:04 - okay one library i want to talk about is
22:06 - called tabletop js and tabletop
22:08 - basically gives you the data you would
22:10 - expect from the google api which the
22:12 - google api doesn't give you
22:15 - if you try to if you use it directly to
22:17 - get your spreadsheet stuff you get a
22:19 - bunch of extra stuff that you don't want
22:21 - and so tabletop
22:23 - clears cleans that all up for you and
22:25 - returns your columns and your cells to
22:28 - you
22:28 - as json in a way that seems reasonable
22:32 - and it's on npm you can also just use a
22:34 - client side it's on a cdn
22:37 - and it's pretty simple but it has
22:39 - some few some options so you can use
22:41 - multiple sheets if your spreadsheet has
22:43 - multiple sheets you can also only use
22:45 - some of the sheets if you have multiple
22:47 - sheets
22:48 - you can use an auth key so you don't
22:50 - necessarily have to make your
22:51 - spreadsheet public for everybody you can
22:54 - use proxies
22:56 - and so it is a great and handy library
22:59 - and i loved that that's because
23:02 - sometimes i feel like i'm just the
23:04 - spreadsheet loving person in my own
23:06 - corner
23:08 - and the docs
23:10 - for tabletops say like imagine it's a
23:12 - read-only javascript cms that you can
23:14 - edit through google docs it's like
23:16 - christmas or any other gif giving
23:19 - celebration
23:20 - up in here and that's how i feel at
23:22 - least
23:25 - and i want to be clear that i'm not
23:27 - talking about
23:28 - using a spreadsheet to just make a
23:30 - website that's a better design table or
23:32 - a grid of
23:34 - cells
23:35 - because once you have it as json all
23:38 - your data you can go wild with your css
23:41 - and do whatever you want and represent
23:43 - it in really cool ways so this
23:46 - for example is a
23:48 - tool lending library site
23:52 - and if you use a google form
23:55 - you also
23:56 - can
23:57 - one prevent people from messing up your
23:59 - spreadsheet if that's a concern
24:03 - but you can also
24:04 - make it even more approachable to people
24:06 - if you don't want people to have to look
24:08 - at a spreadsheet a google form will feed
24:10 - into a spreadsheet and then you can hook
24:12 - that spreadsheet up to a website
24:15 - and there's also no deploying like any
24:17 - time someone visits your site they're
24:18 - getting the latest from the spreadsheet
24:22 - and that's fantastic
24:25 - you can do mapping you can turn your
24:27 - spreadsheet data if you have if you have
24:30 - latin long data in your spreadsheet you
24:33 - can turn it to geojson which sheets you
24:36 - will do for you you can also go to
24:38 - geojson.io if you want to learn more
24:40 - about that format but then you can
24:43 - feed your spreadsheet data into mapbox
24:46 - maps or use leaflet or
24:48 - google maps
24:51 - you can also just avoid other libraries
24:53 - altogether and just
24:55 - use query strings and this isn't just
24:57 - for mapping but
24:59 - anybody that has a query string that
25:02 - matches the data you have you can start
25:04 - using
25:07 - and then you can do totally static data
25:10 - too which i have done for projects if
25:12 - you have a spreadsheet that isn't going
25:14 - to change that often
25:15 - and doesn't have that many editors you
25:17 - might want to do this you can
25:19 - use the version of tabletop and node to
25:22 - pull down the spreadsheet json write it
25:24 - to a file and then use it as static data
25:26 - with your site and you can also use it
25:28 - to backup things
25:30 - that way
25:32 - there's also a site called if this then
25:35 - that that lets you turn like almost
25:37 - anything you do today into data on a
25:40 - spreadsheet and i
25:42 - what i like the most is that you can
25:44 - kind of have your own
25:46 - copy of your data essentially and like
25:49 - there could be another discussion
25:50 - because technically it's like on google
25:52 - and i don't know the legalities of that
25:54 - but in a way you have your own data and
25:58 - so you can do things like
26:01 - totally
26:02 - display your social media in the way
26:03 - that you want and or just archive it
26:06 - like you will have a copy of everything
26:09 - you've done
26:12 - and
26:13 - a space that i think is also really
26:15 - interesting and to me could just expand
26:18 - is the spreadsheet as a cms right like
26:22 - a spreadsheet can be a cms you could
26:24 - write blog posts in a spreadsheet you
26:26 - could have css properties saved in a
26:29 - spreadsheet and it can all feed and
26:32 - alter to a website
26:35 - and lastly i wanted to
26:38 - just mention the site glitch which
26:40 - monica mentioned too if you have not
26:42 - played around with glitch
26:44 - it is a great way to put
26:46 - your projects in a space where people
26:48 - can avoid a dev setup can just go
26:51 - straight into your code start playing
26:53 - with it and making their own version of
26:56 - it and so it's a really approachable
26:58 - onboarding experience for people i have
27:01 - the spreadsheet url on glitch
27:04 - so that's mine um but check out glitch
27:09 - and
27:10 - lastly i hope that these have been some
27:13 - interesting ideas and that
27:16 - you think about keeping it simple from
27:18 - the start because you might be in a
27:20 - position where it benefits you to keep
27:22 - it simple from the start it will benefit
27:25 - your teammates and it will benefit the
27:28 - people
27:29 - outside too as we grow this space for
27:31 - all the people who don't think they are
27:33 - developers but they are because everyone
27:35 - is a developer
27:37 - so thank you
27:44 - [Music]
27:47 - [Applause]
27:52 - [Music]
27:56 - you

Cleaned transcript:

so uh next up we have jessica lord i'm so excited that jessica could come and come and speak here today traveling all the way across the country from new york um even though she did you know used to reside here back in the day uh when jessica worked at github um chances are you've you've used uh some application that you know jessica's sticky fingers were involved in making along the way jessica uh let the electron team uh or started the electron team uh github and so you know if you've been working on anything that's had been built as a desktop application that uses javascript html css all of those good things uh has been packaged up and used on the desktop app there are lots of them around um are we going to oh we're going to lunch okay thank you thanks for your talk jessica so yes you may well have encountered jessica's work already also um jessica now works in new york at a company called splice uh who do um kind of tooling and resources for musicians uh heard it described as github for musicians so uh the mind kind of boggles there i've seen jessica talk a bunch of times before and always really enjoy her take on like culture and the uh like the way teams work together uh and so i'm very very excited to be able to welcome here to stack uh conference uh please make it very very welcome jessica lord thank you thank you so much phil um yeah thank you that's full seven my name is jessica lord i work at a company called splice in new york city i work on the back end and a bunch of very not jammy stuff at all and but i'm so i'm not talking about any of that today today i'm going to share some stories about very jammy things i worked on when i github and i code for america and github is a code sharing site and code for america if you don't know is a nonprofit based here in san francisco for writing open source software for city governments that city governments can use and be better at governing but first i want to go into this statement and and really why i'm thrilled to be here and a part of the jams.conf and really love this area of the web the most and excites me is because i really truly believe that everyone is a developer that everyone could be a developer that everyone might be a developer they might be on their way they will be a developer soon or they actually already are a developer but they're afraid to call themselves that our profession is really special that way for those of us who do this professionally it's it's different that we actually have people not doing it professionally doing the stuff that we do professionally that's different it's not like rocket science or heart surgery and i don't mean in terms of complexity right because that's not to say that the work we do isn't important revolutionary remarkable it is um and that's what's really exciting for me about it and it's not to say that there aren't really brilliant people doing amazing things but you don't need to be on the bleeding edge fringe of web development to make something meaningful and empowering and there aren't heart surgery hobbyists there actually might be and it's definitely illegal but it's it's one of these ways in which our profession is different than other people's and i might really regret this metaphor later so we'll see um because unlike heart surgery the web is bigger than what we do professionally and unlike heart surgery the web is better when it's approachable for more people the work we do every day is also done by tinkerers by activists by people on their weekends by people teaching themselves by community leaders all these people who aren't considering themselves a professional developer they're still using the tools that we have built and contributed and are using but i think it's important that when we build the tools we do and create the environments we do for web development we think about these tools in the context not just of other developers exactly like us but for people not developers um but aren't developers people yes but they're a subset of people who could would and should be developing and so for me and why i love the jam stack and a lot of the work i do is because i want to build things so that there's more people building things and i think it's it inflates everyone it is better experience on the web when more people can use the web there's this quote i love from anil dash who is the ceo of glitch formerly far creek but now fully in on glitch um it seems more important than ever to encourage a diverse community of creators to experiment with their broadest set of ideas i think that's so true and to me it's really important because coding is a powerful literacy and and it's not just the broadest people out there who might be developers or who aren't developers but i mean it's also the people you work with because you probably work with people who aren't developers or people who haven't been developers their whole lives or people who are developers but came from a totally different stack than what you're working on now and so i think it's really important that we don't think of a professional developer as the only kind of developer and that everyone can benefit from building things on the web because html cms and javascript they still work and like monica showed us browsers do amazing things like we have these tools already and it kind of doesn't need to be more complex than that um so where's my screen um i have this kind of scale of web things where if you imagine the two extremes of a single page site and then a really big web app i think we focus on this far end and we make it seem like this is web development this is where you need to be to be putting stuff online and it's just not true there's all this spot in space in the middle and i've actually used this diagram before but now it's really clear to me that this is the jam spot of things and so this is the area full of things you can do that don't have to be super complex and i want there to be more activity here because sometimes our projects make it out into the world and other people interface with them and those other people need less overhead and then sometimes a project doesn't it stays internal but your teammates need less overhead too um so all right the first part is the story of making an electron a thing electron is a library that github maintains that is for building desktop apps that work on mac windows and linux using web technology but it used to be called adam shell and it was a dependency in adam which is github's text editor and it lived there and github didn't want to do anything with it there was no vision for it there was no plan and i had been at github and recently had moved on to the atom team and as i dove deeper into the atom code and onboarded and learned that the thing making everything happen was this thing called adam shell i started to think it was actually more game changing than adam itself i think adam is a great text editor but adam schell felt really changing to me and so i started to fight for it um and you might be surprised that there was pushback because there was really no vision for this to ever be anything like adam was the dream and there was just like no there was no plan for this and i kept pushing and i wrote up road plans and reasons why it should be its own thing and i finally as the first step got the okay to spend my full time working on electron stuff and the stuff that i had put on my road map and so adam shell the core library that is now electron was built and maintained by a guy named chang and so he still worked on the core library and then i worked on all this other stuff that i had put on my road map as a sort of like prove to github that electron could be a thing that was worthy and stand on its own and the first thing i started with was documentation i wanted there to be one source of truth and luckily there was already pretty good documentation in the electron project but i didn't want to over complicate that i wanted there to be one source of truth for documentation i wanted to standardize it with a style guide because it needed standardizing and i want to make the most of markdown and css and html i've been on projects that have like adam where documentation is this whole other thing it lives in another repo it's dependent on a whole other tool chain for documentation and a whole other templating library and there's a whole other hurdle into onboarding just to fix the documentation and i wanted to make the most of what exists now which i felt was good enough and then of course a static site generator i was at github so i used jekyll and what i ended up doing was the electron documentation lives inside of electron the repo and so whenever you download electron you get a copy of the documentation it's all marked down um and so i want to start from there that is the one source of truth all changes to documentation happen there and then so i never learned ruby at github so i put a bunch of node scripts into my jekyll site that basically took the tar file from an electron release would stream out the docs folder read the file path read the content of it which had now been standardized so it was predictable and then generate the front matter and all the things that jekyll needed so that it could then take all of those things stream them out of the repo and then put them nicely into a jekyll site in the way that jekyll wants them and so yeah like i mentioned the style guide was really important so that the format of the documentation could be predictable so that incoming changes could maintain this name the same format and also because of wanting to make the most of css knowing that i was going to be putting it on this jekyll site and i would have the benefit of css so it could make the legibility of the documentation a little bit better than just reading the markdown files and so the style of all the documentation had to be really thought through and predictable and so on the documentation on the site there's also a few things that are a little bit electron specific but because it's pulling the docs from the releases of electron we get to have versioned documentation on the site and then there's a tldr line on all of the pages because i feel like documentation often times you go to the page and you have to read through two long paragraphs to even figure out if you're on the right page or not so i wanted people to have right at the start a place to go and know if they're in the wrong place or not and then electron blurs the lines between what's frontend and what's backend and then introduces new complexity with having two processes and so there's a main process and a renderer process and so each of the documentation tells what process it belongs to and then because when we're on the site and we have the power of css to improve readability we can do things like make it more clear when a method or an event is something that only happens on a mac system or a windows system but it's really important to do this without forsaking the original markdown because i didn't want to do something so that it looked good on the site but then was horrible to read as markdown because the markdown is the source of truth and it's what ships with every download of electron and so everything that had to be done like pushing the limits of mark down and thinking about how i'm going to style this in css but have it not look terrible in the markdown and so that was the bulk of the documentation the next thing i worked on was what was going to be people's first electron app and there are some other people at work were like of course we'll do an electron in it and it should be a scaffolding system and i pushed back on that first of all electron apps can be anything they can be a menu bar app that does one tiny thing with a window this big that i mean that tells you the time or the weather it can also be slack so there's a huge gulf in the kind of electron apps you can build not to mention you can pick your flavor of frontend framework and all of this stuff and so i felt like that's a huge undertaking to build a scaffolding tool that's going to support all these permeations of an electron app and even if it doesn't support all of them then who are we to say like well we think you should use react we don't and if you have a tiny menu bar app like you don't need any framework at all and so i went with the keep it simple approach and you clone it it's a bare bones electron app with an almost empty starting window you clone the repo you npm install you npm start and you get an almost blank electron app you can open up the dev tools and you can start to poke around in it and you can especially i wanted to think about people who weren't coming from the desktop app space because people who are already in this space who are maybe working at a startup that used like chromium embedded framework and things like this they already got it so i don't care about them like i care about the people who were frontend developers or people who didn't think that they could ever build a desktop app i wanted people to know that in electron it's html you can open it up you can use the chrome dev tools like you're used to and start doing the things that you already know how to do and so with this little easy to clone and launch app you like very instantly almost instantly nothing it's not that instant you can start digging around and changing an electron up but i wanted to go beyond that because it still was really hard to get across to people what is electron why would i use it what are the kind of things that i can do with it and so the next thing i did was build an electron app that demos the electron api um and i think it worked out really great it was actually a really good tool for this so that you can you can download this app and you can go through it and you can view the demos of the different kind of common things that you would do interfacing with the different desktop system uis and demo things like opening a new window and so that it makes really clear like what this stuff means like what what's a dialogue if you're not coming from the desktop application world like what you might not know exactly what a native dialogue is so this app lets you go in and start actually seeing these things in real time and i also wanted this app to be a learning tool inside and out and so the code itself is structured in a way where everything is organized and named so that you can match it up so when i mentioned earlier about there being the two processes an electron here when you open up the code for the app you can find exactly the name the matching name for a feature that happened and find the corresponding renderer and main process files and because it's an electron app and because we have node available in our html what each page does is actually uses all of the sample code the app gives you is the code itself so we use node to read the file and then append it to the dom and so there's also one source of truth here so once you update the app's code the demo app is updated there's not they're not ever going to be out of sync and so that was huge for me being one person doing a bunch of the stuff and so that is essentially all of the ground work that was done and to me this the jam stack was essential like keeping it simple from the start was essential so that i could advocate for the project so i could actually build these things so that i could maintain these things and it was easy to onboard people once it became a real team and we got more people on it it was easy to grow from there um you might find yourself in a position like this too so it's not it's not always an altruistic thing of like i'm doing this for the good of humankind but you might find yourself in a position where you need to maintain less and onboard people faster all right so the second part is about spreadsheets something i love to talk about and this goes back to my background is actually urban design and architecture and i was an urban designer at the city of boston in the urban design technology group and from there i went to do the code for america fellowship which i mentioned earlier for building open source software for city governments and something i took with me from city hall into this fellowship was a real desire to make it so that people could edit their own content so that there wasn't this bottleneck places where it had to do everything because i felt like the web was further than that the web was at a place where people shouldn't be so afraid to edit their own content and so after that year and a grant from mozilla i ended up with a little library called sheet cjs for visualizing google spreadsheets on a website um but i'm not going to go into sheetzy really i just want to talk about how great spreadsheets are and so back to this diagram again and i think this space is such a great space for spreadsheets because spreadsheets are a database with no setup that almost everyone already knows how to use and if you just sit with that for a second like how many libraries like we talk about the hurdles of learning the modern web stack and all the tool chains and all of this stuff and even if you're already a developer you have to onboard into a new system and learn how everything works and so something that exists with no setup and you don't have to teach people how to use it that's amazing um and so i am mostly talking about google spreadsheets here when i say spreadsheets but really a lot of the stuff you could do if you're i mean if your spreadsheet is in microsoft office on excel like if you can get it to json you can still do a lot of these things um so websites they have problems and so even if you're a professional developer who knows how to do all of this stuff there are certain projects where these become hurdles even for you and they're hurdles for people who aren't fulltime developers and spreadsheets make a lot of this easier or not a problem at all especially when you think about are am i going to have a collaborator am i going to be working with someone who's not a developer and that's one of my favorite things about spreadsheets is because they are so approachable that people are using them to do radical awesome things in the very scary times in which we live and so i think there's so much untapped potential about what we can do that involves so many people with spreadsheets okay one library i want to talk about is called tabletop js and tabletop basically gives you the data you would expect from the google api which the google api doesn't give you if you try to if you use it directly to get your spreadsheet stuff you get a bunch of extra stuff that you don't want and so tabletop clears cleans that all up for you and returns your columns and your cells to you as json in a way that seems reasonable and it's on npm you can also just use a client side it's on a cdn and it's pretty simple but it has some few some options so you can use multiple sheets if your spreadsheet has multiple sheets you can also only use some of the sheets if you have multiple sheets you can use an auth key so you don't necessarily have to make your spreadsheet public for everybody you can use proxies and so it is a great and handy library and i loved that that's because sometimes i feel like i'm just the spreadsheet loving person in my own corner and the docs for tabletops say like imagine it's a readonly javascript cms that you can edit through google docs it's like christmas or any other gif giving celebration up in here and that's how i feel at least and i want to be clear that i'm not talking about using a spreadsheet to just make a website that's a better design table or a grid of cells because once you have it as json all your data you can go wild with your css and do whatever you want and represent it in really cool ways so this for example is a tool lending library site and if you use a google form you also can one prevent people from messing up your spreadsheet if that's a concern but you can also make it even more approachable to people if you don't want people to have to look at a spreadsheet a google form will feed into a spreadsheet and then you can hook that spreadsheet up to a website and there's also no deploying like any time someone visits your site they're getting the latest from the spreadsheet and that's fantastic you can do mapping you can turn your spreadsheet data if you have if you have latin long data in your spreadsheet you can turn it to geojson which sheets you will do for you you can also go to geojson.io if you want to learn more about that format but then you can feed your spreadsheet data into mapbox maps or use leaflet or google maps you can also just avoid other libraries altogether and just use query strings and this isn't just for mapping but anybody that has a query string that matches the data you have you can start using and then you can do totally static data too which i have done for projects if you have a spreadsheet that isn't going to change that often and doesn't have that many editors you might want to do this you can use the version of tabletop and node to pull down the spreadsheet json write it to a file and then use it as static data with your site and you can also use it to backup things that way there's also a site called if this then that that lets you turn like almost anything you do today into data on a spreadsheet and i what i like the most is that you can kind of have your own copy of your data essentially and like there could be another discussion because technically it's like on google and i don't know the legalities of that but in a way you have your own data and so you can do things like totally display your social media in the way that you want and or just archive it like you will have a copy of everything you've done and a space that i think is also really interesting and to me could just expand is the spreadsheet as a cms right like a spreadsheet can be a cms you could write blog posts in a spreadsheet you could have css properties saved in a spreadsheet and it can all feed and alter to a website and lastly i wanted to just mention the site glitch which monica mentioned too if you have not played around with glitch it is a great way to put your projects in a space where people can avoid a dev setup can just go straight into your code start playing with it and making their own version of it and so it's a really approachable onboarding experience for people i have the spreadsheet url on glitch so that's mine um but check out glitch and lastly i hope that these have been some interesting ideas and that you think about keeping it simple from the start because you might be in a position where it benefits you to keep it simple from the start it will benefit your teammates and it will benefit the people outside too as we grow this space for all the people who don't think they are developers but they are because everyone is a developer so thank you you
