With timestamps:

00:00 - in this course you will improve your
00:01 - python skills by creating a snake game
00:03 - using the pygame library this course was
00:06 - developed by deval patel from the
00:08 - popular code basics youtube channel
00:11 - we will be building famous snake and
00:14 - april game using python and pi game
00:16 - module in this python project series as
00:19 - a prerequisite all you need to know
00:21 - is basic python anyone can do it i am
00:25 - going to simplify
00:26 - a lot of concepts and this will be
00:28 - multiple video series so we'll go over
00:30 - step by step on different pi game
00:32 - concepts and we'll build a complete game
00:36 - so you're not only learning python pi
00:39 - game but you're also learning how to
00:41 - build a complete end-to-end project in
00:44 - python in the end i also have an
00:46 - exercise for you to work on so you can
00:49 - use the knowledge that you learn in
00:50 - these videos and then you can customize
00:52 - the game as part of that exercise and i
00:54 - have the solution as well so this will
00:56 - be not just you are just watching a
00:58 - video it will be interactive learning so
01:00 - it will be very very useful
01:02 - let's first talk about the things that
01:04 - you need to install
01:05 - very first thing is obvious python
01:07 - installation you need to have
01:09 - python installed on your computer
01:11 - then you need to install a pi game
01:13 - module which you can do it by running
01:16 - pep install buy game
01:18 - i already have it installed so that's
01:20 - why it's showing this part you need to
01:22 - run this step
01:23 - and i use pycharm community editor you
01:26 - can just google pycharm community
01:28 - download it if you like using vs code
01:30 - that's okay too
01:32 - i went ahead and created this snake
01:34 - underscore game directory
01:36 - to store my code so you just go ahead
01:39 - create some directory and then open that
01:42 - directory in pycharm
01:44 - by going to file open
01:46 - so when i did this
01:48 - it was showing me this thing now in this
01:51 - directory
01:52 - i have already put some useful things so
01:55 - first you need main dot pi so main dot
01:57 - pi the main file it is empty right now
02:02 - i also have resources folder which will
02:04 - have different resources that we will
02:07 - need for our project for example it has
02:10 - an image of an apple
02:13 - uh some background some
02:16 - block image and all that okay you can
02:18 - download all this code by looking at the
02:21 - code link in the video description below
02:24 - here
02:25 - our first objective is to
02:28 - write the first program which uses
02:31 - pygame
02:32 - and it
02:34 - draws a simple game window
02:37 - okay so at the end of this session all
02:39 - you're getting is a simple pie game
02:41 - window with some background so
02:45 - let's uh
02:47 - let me just close this and go into
02:52 - zen mode
02:53 - so pyjam has this nice feature called
02:55 - enters and mode
02:57 - where you can
02:59 - have a full screen experience okay
03:01 - so here
03:04 - i will say import python
03:07 - i'll make it a little bigger control
03:08 - scroll
03:10 - and then
03:12 - i always use uh if underscore underscore
03:16 - name
03:17 - is equal to underscore underscore main
03:19 - this is the main routine in python okay
03:23 - uh
03:24 - and in this routine what we're going to
03:26 - do
03:27 - is
03:28 - initiate the pygame dot
03:32 - in it so
03:34 - so let's look at the pie game
03:35 - documentation by the way so if you look
03:37 - at
03:39 - pie game documentation here
03:42 - you can go to the pie game website look
03:44 - at all the tutorials and kind of explore
03:46 - it but in this tutorial
03:49 - uh
03:51 - whenever you're using pi game you have
03:52 - to use this dot in method it will kind
03:55 - of initialize that whole
03:57 - uh module
03:59 - okay and
04:01 - once you have that
04:02 - next thing will be creating a surface so
04:05 - what is surface so you will say pi game
04:07 - dot
04:09 - display dot set mode
04:14 - okay
04:16 - so what is set mode so let's look at the
04:19 - documentation so pi game
04:24 - set mode
04:28 - generally i google it okay and when you
04:30 - google it you can directly go to that
04:32 - so here
04:34 - you are saying set mode so set mode is
04:37 - initializing your game window
04:40 - this is the very basic step that you
04:42 - have to do in
04:43 - all pi game program
04:45 - and see the first argument is the size
04:47 - of the window
04:48 - how big is your window size okay
04:51 - so i will say my window size is maybe
04:55 - what 500 by 500
04:57 - this is like 500 by 500 pixel okay
05:01 - and
05:02 - you can now
05:03 - say that
05:07 - so let's just
05:09 - maybe run this program and see what
05:11 - happens
05:14 - see window came
05:16 - and it disappeared because the program
05:18 - finished so i will just
05:20 - maybe
05:23 - put some timer so that you can actually
05:25 - see you know i will put a timer for five
05:27 - seconds so you at least see what's going
05:29 - on
05:31 - so okay my window unfortunately came in
05:34 - the
05:36 - in a different screen actually yeah
05:39 - see you get this window 500 by 500 if
05:42 - you have
05:43 - 1000 you will get a bigger window
05:46 - see
05:48 - so that's what
05:49 - this is doing
05:51 - now the window background is black
05:53 - i want to
05:55 - change it okay so you'll say surface dot
05:58 - fill
06:00 - so this fill function
06:03 - will
06:04 - fill the background with some color now
06:06 - any color is rgb
06:08 - so red green blue
06:10 - and these colors have values from 0 to
06:12 - 255 so if you want white color
06:15 - you will say
06:18 - like 255 three times
06:21 - see this did not work because whenever
06:24 - you
06:25 - update your surface you have to say
06:29 - uh
06:31 - buy game dot display
06:34 - dot either update or flip
06:38 - so flip is saying that
06:41 - whatever code you have written here
06:44 - you are just
06:47 - you're just updating your screen with it
06:49 - so you say control f5 now your screen is
06:52 - white okay
06:54 - if you're not sure about which
06:57 - color you want to pick up not
06:59 - no rgb values so then you can do
07:02 - rgb color picker
07:05 - so the google google has rgb color
07:07 - picker so you can decide your color okay
07:10 - which color do you want
07:12 - maybe i want this color as a background
07:15 - what is rgb 92 2584
07:21 - you put that here
07:24 - and see you get this color so getting
07:26 - that color is is not a big deal so i'm
07:28 - just going to use some color
07:31 - you can use a different color up to you
07:34 - okay
07:36 - all right so now your window is set up
07:40 - next thing i want to do
07:42 - is
07:45 - see i i had to use timer which is
07:47 - something i don't like
07:49 - i want to do something where the window
07:51 - stays
07:53 - and when i hit escape
07:55 - or cancel
07:57 - then only window disappears
08:00 - so i'm going to remove this
08:02 - sleep statement
08:03 - so how do you do that so in
08:06 - any ui application
08:08 - you have a thing called event loop
08:12 - event loop is waiting for the user input
08:14 - when you are working on any screen
08:17 - it is waiting for mouse input or
08:19 - keyboard input so you have to run that
08:22 - event loop event loop is fundamental to
08:25 - any ui programming it doesn't matter pie
08:27 - game any ui you take you need to have an
08:30 - event loop
08:31 - an event loop will be something like
08:35 - it's a while loop
08:36 - so you will say okay
08:38 - running is false
08:41 - or maybe running is true actually so
08:43 - running is true and while running
08:48 - do something so now see this is an
08:51 - infinite loop
08:52 - we need to exit it somewhere right
08:54 - but the fundamentals of ui programming
08:56 - is you are running this infinite loop
08:59 - but
09:00 - on certain keystrokes such as if you hit
09:02 - a cancel or escape you want to exit your
09:06 - game
09:07 - so how do you do that
09:09 - well
09:09 - pi game has this thing called
09:12 - event so
09:14 - pygame
09:15 - dot event
09:17 - dot get
09:20 - so for event in pygame.even get
09:27 - do something
09:29 - so what is this
09:31 - well
09:32 - this will give you all the keyboard
09:34 - mouse all kind of events okay and you
09:36 - can read the documentation online
09:39 - but this events will have type so if
09:42 - event
09:43 - dot type
09:46 - is equal to what
09:47 - for that i need to import certain local
09:50 - so
09:51 - i will say import
09:54 - pi game
09:56 - dot locals
09:58 - uh
09:59 - from
10:01 - i will just do this
10:03 - import star
10:06 - so this is going to
10:07 - import certain global variables which
10:09 - will be useful to us such as
10:12 - key down
10:15 - see this key down
10:17 - this one came from this
10:20 - okay
10:21 - so if you want to read more about it you
10:23 - can just say buy game
10:30 - locals and that will tell you
10:34 - all the locals right so
10:36 - [Music]
10:37 - event so for event you will have
10:39 - different locals and so
10:42 - see for event these are the event sites
10:44 - so p down is something we use there is
10:47 - another event called quit
10:49 - which will be called when you hit the
10:51 - cancel window
10:52 - so i will say okay if
10:55 - even dot type is key down then do
10:58 - something lf
11:01 - event.type
11:04 - is equal to quit
11:06 - okay
11:08 - then okay so if user clicks on cancel
11:11 - what do you want to do
11:12 - well you just set your running variable
11:16 - to false
11:20 - you might have read about
11:23 - while loop before or if you have
11:25 - followed my python tutorials you know
11:27 - about while loop while loop is like it
11:28 - goes
11:29 - in iteration
11:31 - until this condition is true
11:33 - so running is true all the time
11:36 - except
11:37 - when we have a quit event okay
11:39 - so let's try this so quit event is
11:41 - generated when
11:43 - when you click on cancel see now your
11:46 - program exited
11:48 - otherwise your pro that window will not
11:50 - exit okay
11:52 - also let's say
11:54 - i want to quit when i hit escape key so
11:57 - you can say if
11:59 - event dot key
12:02 - if event dot e is equal to
12:06 - escape
12:09 - then also
12:11 - running is false
12:14 - so when i run it now
12:16 - and see i'm not using mouse i'm hitting
12:19 - escape key
12:20 - and my program exited
12:23 - okay so this understanding of this whole
12:25 - event loop in pi game is very essential
12:28 - and it will be useful
12:30 - when you're doing ui programming with
12:32 - any language any framework
12:34 - all right
12:35 - so far
12:37 - it is looking good
12:39 - now the next step i have some reference
12:42 - content here so that i can do my videos
12:45 - properly
12:46 - so the next thing i want to do is
12:49 - i want to draw a block okay so that
12:52 - block you saw here
12:55 - so i have this block here
12:57 - so this image i want to just draw on my
12:59 - screen somewhere
13:01 - all right so how do you do that
13:04 - well
13:05 - for that
13:06 - you need to
13:08 - load that image
13:10 - uh and the way you load that image
13:13 - is by
13:15 - doing this
13:17 - so pygame has this image module you can
13:19 - just say load
13:20 - and resources block.image and dot
13:23 - convert this is a method of
13:25 - loading the image and once you have the
13:27 - image
13:28 - in this block variable
13:30 - you can see
13:33 - let's look at load documentation
13:36 - see this is the load documentation okay
13:38 - and block
13:40 - you can uh paint on a surface so your
13:43 - background screen is this surface we
13:46 - will say surface you know surface is
13:49 - your background your main window
13:51 - on that if you you want to draw a block
13:53 - so for that there is a function called
13:55 - blit
13:58 - so this blade function is nothing but
14:00 - draw this image and what do you want to
14:02 - draw well block
14:05 - where do you want to draw
14:07 - these are the dimensions
14:08 - so
14:11 - maybe 100 hundred
14:15 - you see 100 is drawing here
14:18 - if you do 0 0
14:20 - this is x and y so if you do 0 0 it will
14:23 - draw at the very left so this is x and y
14:28 - okay so i will just assign some variable
14:33 - for the dimension so i will say block
14:36 - x is 100 let's say
14:39 - and block
14:40 - y is also 100
14:44 - okay
14:45 - and then
14:51 - block x
14:53 - block y
14:57 - all right
14:58 - now
14:59 - next thing i want to do is i want to
15:01 - move this block okay so when i move this
15:05 - block
15:06 - using my maybe key like one of the
15:08 - common things in any game is using the
15:11 - up down left right keys okay
15:13 - when i
15:14 - press those keys
15:16 - i want to move the block around
15:19 - so how do i do that well first let me
15:21 - write a function which draws this block
15:24 - so i'm going to write a python function
15:27 - which is drawing the block okay
15:29 - so it's the same code
15:31 - see this code i have just put it in a
15:33 - function
15:35 - so i put
15:36 - one two
15:39 - and three these three lines
15:42 - into a function
15:44 - so when i call that function it will
15:47 - just draw a block
15:49 - so now how do i move that block all
15:51 - right so let's think about that so here
15:53 - we are getting this event site
15:55 - so if event dot key
16:00 - is equal to let's say up
16:06 - see when you press up key
16:08 - what you're doing is
16:11 - your block is at a position x
16:13 - okay
16:14 - so let me just
16:16 - draw it so that you understand
16:24 - so when you are
16:26 - let's say this is your screen
16:27 - okay on this screen you have a block so
16:30 - this is your block
16:32 - and block is at the position x comma y
16:37 - so it's a
16:39 - it's a coordinate system x and y
16:42 - okay
16:43 - so
16:44 - let's say this x is 100 right now
16:49 - so x is 100 and y is also 100 okay
16:52 - so
16:53 - when you move up key
16:55 - the y remains the x remains same but
16:58 - you're changing your y
17:00 - your y is 100 and now you are moving it
17:02 - up so maybe you're changing it by some
17:04 - amount
17:06 - when you move it down again you're
17:08 - changing y but when you move this block
17:11 - see when you have this block
17:14 - and when you move it like this
17:16 - your x remains same because x is this
17:20 - but you are no your y remains same but
17:23 - your x will change so see
17:25 - your y
17:29 - so this y
17:31 - is this axis
17:33 - okay
17:34 - and this x
17:36 - is this particular axis you might have
17:38 - learned about
17:39 - basic coordinate system in your
17:42 - mathematics class
17:43 - so it is this x
17:46 - so when you have left and right movement
17:48 - you are
17:49 - playing with x
17:50 - up and down movement you are playing
17:52 - with y
17:53 - so when your key is up
17:55 - what i want to do is
17:58 - whatever y i have
18:01 - maybe i want to subtract 10 from y
18:04 - this is same as doing this
18:08 - okay
18:10 - they both are same
18:13 - and when you
18:15 - have let's say
18:18 - down
18:19 - you want to increment
18:21 - y by 10
18:24 - and if you have
18:29 - let's say left
18:31 - when you press on a left key
18:33 - you want to
18:35 - update your
18:37 - x actually
18:41 - and if your
18:46 - event key
18:49 - is
18:58 - this is all probably very
19:00 - easy to understand
19:02 - you're just changing your coordinate now
19:03 - when you're having up key you're not
19:05 - changing your x because x remains the
19:07 - same
19:08 - and when that happens you are just after
19:10 - after changing your coordinate you are
19:12 - calling draw block function
19:15 - because draw block needs to draw it now
19:18 - let's look at draw block function
19:21 - so in draw block function by the way
19:22 - when you are moving drop your block up
19:25 - and down
19:26 - uh
19:27 - let me comment this line i'll tell you
19:28 - why that line is needed let's first do
19:30 - it without that line
19:32 - so
19:33 - you're uploading block x and y
19:36 - and using that
19:37 - you are
19:38 - drawing that block again
19:41 - and you have to call this flip method
19:43 - otherwise it will not show you what
19:45 - you've done right
19:47 - you can also call
19:49 - update method
19:50 - okay so i'm just calling there is some
19:52 - minor difference you can read about that
19:54 - online so if i do ctrl f5 now see
19:58 - when i'm pressing right key it's moving
20:00 - right and when i'm pressing
20:02 - down it's moving down
20:04 - and then moving left but
20:06 - the previous block are still there
20:10 - i don't want those blocks when i move
20:12 - the block block should just move
20:14 - and for that reason you need this line
20:17 - so before drawing the block you are
20:19 - clearing your screen
20:22 - so when you have this line
20:24 - now see
20:25 - you do up
20:27 - left
20:28 - right
20:29 - whatever and block moves smoothly
20:33 - congress you have a very first basic buy
20:36 - game program working for you you did an
20:38 - awesome job
20:40 - when i'm i'm teaching you on video
20:42 - tutorials make sure you have your code
20:44 - editor open and you do coding along with
20:46 - me because that will give you effective
20:48 - learning in the next session we'll
20:51 - continue with this but in this session i
20:54 - have only this much
20:56 - you just build a
20:58 - screen and a block which can move around
21:01 - all right
21:07 - so far our code looks good
21:10 - but
21:11 - the code is not very readable so in this
21:14 - session
21:15 - we are going to make it
21:17 - object-oriented programming so there is
21:19 - a thing called object-oriented
21:20 - programming or oops
21:22 - so we are going to make it such that it
21:24 - follows the oops principle which is
21:26 - basically
21:28 - converting this into
21:30 - classes and objects
21:33 - so let's get started here
21:37 - you see a huge block of code in your
21:39 - main function itself usually when you're
21:41 - working on proper python projects you
21:44 - don't rather write so much code in your
21:46 - main entry point
21:48 - so you would have things like
21:51 - all right what if i have
21:53 - a class called game
21:55 - okay and this is how you define class if
21:58 - you don't know about classes and objects
21:59 - you can follow my
22:01 - python video on classes and objects and
22:03 - you will get an understanding that's
22:05 - like a prerequisite
22:07 - here this is a constructor so we'll
22:09 - write constructor
22:11 - but
22:12 - what if
22:13 - in my main method here
22:16 - i have only two line of code
22:19 - and that code will be
22:21 - you create an object of a game
22:24 - and you just say dot run
22:26 - okay
22:27 - and here
22:28 - of course you will have a run function
22:31 - and we'll implement all these functions
22:33 - but this is my idea
22:36 - i want to have only two line of code in
22:39 - my main method
22:40 - and everything else should be classes
22:42 - and objects
22:43 - all right
22:44 - so
22:46 - let's start moving
22:48 - all of this code into your classes
22:51 - so
22:53 - the pie game in it of course
22:55 - this will go into
22:56 - your game initialization
23:00 - then
23:01 - the next thing you have
23:03 - is a surface
23:05 - so this surface will also go into your
23:09 - game initialization and i will make this
23:11 - surface a class
23:13 - member
23:14 - and when you do
23:15 - self.something
23:17 - you're making that
23:19 - a
23:20 - class member so that
23:22 - later on the surface is available here
23:24 - as well okay so that's the idea
23:27 - all right so we moved that
23:31 - okay we have block which we will look
23:34 - into
23:35 - little later
23:38 - but let's see if there is anything else
23:40 - nope that's it all right so
23:43 - so far
23:44 - game looks good
23:45 - now the block
23:48 - is
23:49 - something we are building to build our
23:51 - snake ultimately
23:54 - so then
23:56 - how about we build
23:58 - a class called snake
24:02 - okay
24:03 - and that class
24:07 - this class will have that block object
24:12 - so let me move all this here
24:16 - so again i will just say self.block
24:19 - and then
24:21 - um
24:23 - self.x is hundreds of dot y is hundred
24:27 - all right
24:30 - so this way i get rid of
24:33 - that that code so see
24:35 - you now kind of get a
24:38 - get a feel of this process where you
24:40 - have written some experimental code and
24:43 - when it works
24:45 - you want to convert it into a
24:47 - object oriented code
24:49 - and this is how you do it
24:52 - all right
24:53 - now when you see this is like drawing
24:55 - the block so i want to draw the block
24:58 - so in my snake method maybe i can add
25:02 - draw function you know
25:04 - so when you say snakesnake.draw it will
25:06 - just draw that snake so right now a
25:09 - snake is just one block
25:11 - okay
25:12 - here i need
25:15 - a parent surface
25:16 - but i don't have that
25:18 - so generally when you're doing class
25:20 - programming you want to pass
25:22 - that surface as an argument into this
25:25 - function
25:26 - or the other option you have
25:28 - is you store it as a class member so i'm
25:31 - just going to call that surface a parent
25:34 - screen
25:35 - and i will store it in a
25:37 - new class member called parent screen
25:41 - okay
25:43 - and when i draw it
25:44 - i will say self dot
25:46 - apparent screen dot
25:48 - blit
25:50 - and this block has to be self dot block
25:52 - and this x and y has to be
25:55 - self.x
25:59 - self.y
26:02 - all right
26:03 - okay
26:06 - so
26:08 - now
26:10 - you know this game
26:13 - see this game is kind of the main object
26:15 - and game is having a snake inside it so
26:18 - you have a game game has a snake
26:21 - so for that for that reason i will
26:23 - create a snake inside my game class
26:28 - so i created a snake
26:30 - inside my game class
26:32 - now snake
26:33 - constructor expects parent screen so
26:36 - what is my parent screen self dot
26:38 - surface
26:42 - okay
26:43 - and once that is done
26:45 - i want to
26:47 - draw the snake
26:53 - all right
26:54 - so this looks good so far
26:57 - so by the way
26:58 - when you draw this
27:00 - you're drawing this
27:02 - so you're kind of replacing this
27:05 - so that draw function is exactly this
27:08 - draw
27:09 - so there were two more things that we
27:11 - wanted to do which is fill
27:14 - and
27:16 - see this this line will come in the
27:17 - middle okay
27:19 - and this will be self dot surface dot
27:21 - fill
27:23 - and this will be
27:25 - pi game dot display
27:28 - so
27:29 - when you have snake and when you say
27:30 - snake dot draw
27:32 - it will draw the snake or a block
27:35 - on the surface
27:37 - so now we remove this function as well
27:40 - okay what is left now
27:44 - okay a main event loop is left so this
27:47 - main event loop
27:54 - i will copy this
27:55 - in a run function
27:59 - okay because that run function is kind
28:00 - of the main function
28:03 - so we are running the event
28:05 - let's look at it
28:07 - okay here i don't have access of block x
28:09 - and
28:10 - draw block etc right
28:13 - so what do we do
28:14 - but we have access of snake object so
28:18 - so snake all right so let's do this so
28:21 - when you
28:22 - click
28:23 - when you do left click
28:25 - you want to
28:26 - move
28:27 - the snake to left
28:29 - so what if we have a function called
28:32 - move left
28:33 - so that i don't have to worry about all
28:35 - this
28:37 - when you say move left it should move
28:39 - left
28:40 - when you press right key it should move
28:43 - right
28:46 - releasing this will be amazing it will
28:48 - make code so much
28:50 - readable
28:53 - so move right
28:54 - i'm just typing these methods they don't
28:56 - exist but i am going to write them
29:00 - this is how you do
29:02 - object
29:03 - oriented programming
29:05 - move down
29:07 - okay
29:10 - so i need to write all these methods in
29:13 - my snake class now so let's write
29:17 - that method
29:19 - to move left
29:23 - okay what do you do when you move left
29:26 - we saw in a previous session
29:28 - moving left means you are just changing
29:30 - a position of x because your y is same
29:33 - so i will just do
29:35 - self
29:36 - dot x -10
29:38 - you know subtract 10 pixels from your x
29:41 - so that
29:42 - your block moves on the left hand side
29:45 - once it is subtracted
29:47 - you want to draw it
29:49 - and for drawing
29:51 - there is a method so you can see your
29:54 - code is becoming more readable it kind
29:56 - of makes sense in your brain right
29:58 - moving left is subtracting by 10 and
30:00 - then drawing it
30:02 - previously code was little cryptic
30:05 - and similarly you can uh
30:09 - you can maybe implement the rest of the
30:11 - method see move right move up and down
30:15 - okay
30:16 - so it's very
30:17 - very easy very easy to understand now so
30:19 - when you read your code
30:21 - see you're starting your to your python
30:24 - program
30:25 - first you're creating game game says run
30:27 - okay what does run do
30:30 - run is running your event loop in the
30:32 - event loop you are having snake you're
30:34 - moving left and right so code is more
30:36 - readable now and when you right click
30:39 - and run this
30:41 - okay
30:42 - snake object doesn't have an attribute
30:45 - self dot surface
30:48 - yeah it doesn't have self-drive so it
30:49 - has self the parent screen actually
30:55 - so
30:56 - i'm pressing left and right and the
30:58 - block is moving i did not make any
31:01 - functionality change but in this session
31:04 - we did an amazing thing which is
31:05 - converted a programming to object
31:07 - oriented programming
31:09 - this is needed if you want to
31:11 - become a good programmer
31:14 - a good programmer can
31:16 - program write
31:17 - object oriented programming method
31:20 - and
31:21 - the code is readable maintainable you
31:24 - know when you work for big companies the
31:26 - code bases are very big
31:29 - so when new person joins
31:30 - already there are million lines
31:32 - so if code is readable like see right
31:34 - now code is more readable
31:36 - then it helps
31:37 - so
31:38 - oops or object oriented programming
31:40 - concepts makes you a better programmer
31:42 - that's why that's why i think this
31:44 - session is very very important so i hope
31:46 - you all learned all these lessons
31:52 - till now
31:53 - we are moving this block manually using
31:56 - left and right keys
31:58 - in this session i want to move this
32:00 - block automatically you might have seen
32:02 - games where
32:04 - blocks are falling planes are flying you
32:07 - don't know anything and they keep on
32:09 - moving
32:10 - so i will do the same thing with this
32:12 - block so that if i'm not touching any
32:14 - key and if it's going down it keeps on
32:16 - going down when i touch right key let's
32:19 - say it will just change the direction
32:21 - but it will just keep on moving on its
32:23 - own
32:24 - so for that
32:26 - what i need to do here is
32:29 - introduce a timer
32:31 - seen this while loop
32:34 - this code is handling all key events but
32:37 - outside this block you know
32:39 - like here
32:41 - i need to
32:43 - maybe put a timer so here
32:46 - i will put some timer
32:49 - and on that event so
32:51 - let's say i have some method called
32:55 - for dot
32:57 - uh
32:59 - so if i have a method called self dot
33:02 - snake dot walk so snake i have right
33:06 - so that's hypothetium we don't have this
33:08 - method but just hypothetically think
33:11 - that on this method
33:13 - snake walks on its own without you
33:15 - placing a key
33:17 - now this rule loop is running very fast
33:20 - so if you do this snake will move really
33:22 - really fast so you need to introduce
33:23 - some delay
33:25 - and you can use
33:27 - time module for that
33:32 - so we'll introduce some sleep time
33:34 - so here
33:36 - we'll say
33:37 - time to sleep
33:39 - let's say point two second
33:43 - so every two sec point two second it
33:45 - moves on its own point two second moves
33:47 - point two second moves
33:49 - and
33:50 - [Music]
33:53 - in this walk function
33:55 - we need to
33:58 - implement here so let me just
34:00 - implement block function here
34:02 - so walk
34:04 - okay what do we do in walk
34:07 - well
34:08 - of course in walk function now you will
34:09 - be drawing uh the snake and
34:13 - based on the direction based on the
34:15 - current direction
34:16 - at given point of time snake could be
34:19 - moving left right top bottom
34:22 - so based on the direction you need to
34:24 - increase the x and y coordinates okay so
34:27 - we need to have this direction parameter
34:29 - which i'll add here
34:31 - so self dot direction let's say
34:33 - initially
34:35 - you're making a direction up
34:37 - or down
34:41 - it could be anything i'm just randomly
34:43 - selecting
34:44 - and
34:45 - based on that direction so let me do
34:48 - this so if
34:49 - self.direction
34:51 - is up
34:52 - so if it is up what do you do
34:54 - well
34:55 - we saw previously that if it is up you
34:58 - only
35:00 - reduce yc we are reducing y
35:04 - and
35:05 - if the direction is
35:08 - let me just copy paste just to save some
35:10 - time here
35:13 - if it is right of course
35:15 - you are more manipulating only x if it
35:18 - is up y and so on
35:20 - this is something we already went
35:22 - through when we are looking at this
35:23 - function
35:25 - and you draw it so now what will happen
35:27 - is
35:29 - even if you're not press your any key in
35:32 - your while loop based on a direction
35:34 - snake will
35:36 - keep on moving on its own
35:39 - now what happens when you press any key
35:42 - let's say if you press left key you call
35:44 - move left which is fine
35:46 - but on this move left you don't want to
35:48 - change anything you want to change only
35:50 - the direction
35:52 - okay
35:53 - so i will say
35:55 - move left my direction is left
35:59 - if it is move right
36:01 - my direction is
36:04 - right
36:05 - move up
36:08 - direction up
36:11 - move down direction down
36:14 - looks good i think now let me try it so
36:17 - just to go world
36:19 - on while loop
36:20 - when you call this function you are just
36:22 - changing a direction
36:24 - and even if you have not press any key
36:27 - on walk function based on the direction
36:29 - you are moving the
36:31 - snake
36:32 - so
36:34 - say i'm not pressing any key now using
36:36 - my hands and block is moving when i
36:38 - press right key just change the
36:39 - direction up key change the direction
36:42 - left key chain the direction
36:44 - all right looks great it already looks
36:46 - like a game don't you think so
36:49 - in moving blocks games this is what they
36:51 - do
36:52 - so congratulations you just implemented
36:56 - a nice
36:57 - version of a little small stupid game
37:00 - uh
37:01 - in the next video
37:04 - or in the next session
37:05 - we will convert this block into a
37:08 - full-fledged snake
37:14 - in this session we will be building a
37:16 - snake out of a block see right now the
37:18 - there is only one block it is moving on
37:20 - its own uh this is actually a snake with
37:24 - length one
37:25 - if i put let's say
37:27 - five six blocks let's say if i put six
37:29 - blocks then this becomes a snake
37:32 - so we'll introduce a length parameter in
37:35 - our snake class and if let's say length
37:37 - is
37:38 - 5 then it will look like this so instead
37:40 - of one block we have five blocks
37:43 - so the first thing i'm going to do now
37:46 - is
37:47 - enter my zen mode you know i'm doing a
37:50 - meditation
37:51 - the snack and apple meditation
37:54 - so here i will introduce a parameter of
37:57 - length
38:00 - lngth
38:02 - so self dot
38:04 - land is equal to length
38:08 - and now i don't have a one x and y
38:12 - because when you have a snake with size
38:14 - five
38:16 - essentially
38:17 - you have five x and y c one x and y is
38:20 - nothing but a
38:21 - left top coordinate of a block
38:26 - so if your five blocks you should have
38:28 - five x and y and how do you do that
38:31 - well in python this is easy
38:34 - you can do something like
38:39 - length
38:40 - okay
38:41 - so this will initialize an empty
38:44 - array
38:46 - of
38:47 - size length if you want to verify it
38:51 - what i do usually is i go to python
38:53 - console
38:55 - so exit the same mode i go to python
38:58 - console here
39:00 - and if you do something like
39:03 - let's say this file
39:05 - oh this is not working okay i need to
39:06 - given um
39:08 - some value so let's say if i do 67
39:13 - see
39:14 - if i do five it's creating an array of
39:17 - five
39:18 - if i do
39:20 - three
39:21 - it will create an array of three
39:22 - elements so that's exactly i do this
39:24 - python console is a useful feature you
39:26 - can use it
39:29 - so
39:30 - now
39:31 - i will just initialize it with size 40
39:35 - so by the way i will just
39:37 - create
39:38 - a
39:40 - variable call size is equal to 40
39:43 - and this size is nothing but the size of
39:45 - a block actually
39:47 - the actual length of the
39:49 - snake is this length and
39:53 - see if you look at my block
39:56 - dot jpg right this is the image we are
39:58 - using
39:59 - if you look look at the dimension of it
40:02 - it is 40 by 40. so that's why
40:06 - uh i want to
40:07 - put initial position to be
40:10 - let's say 40 40 it could be 80 it could
40:13 - be 120
40:15 - and then
40:16 - um
40:17 - i want to
40:19 - just
40:21 - implement my move logic now before i
40:23 - implement my move logic
40:25 - i need to
40:28 - change the draw function
40:30 - because draw function
40:32 - is just drawing 1 x and y now we have
40:34 - multiple x and y so instead of this i
40:37 - will have a poor look and i will say
40:41 - you know go till the length
40:44 - and
40:46 - do
40:51 - draw x and y basically
40:54 - okay
40:56 - now initially
40:58 - i initialized my entire array let's say
41:00 - if you have a snake length of two so
41:01 - let's do that
41:03 - so here when you create your snake
41:07 - let's say i have a
41:08 - size little bit two
41:12 - you would ask me
41:13 - why do you have bought the blocks at
41:15 - same position
41:17 - ideally you should have it at different
41:18 - position
41:20 - but my move logic will take care of it
41:23 - it will unwrap my snake you know as i
41:25 - move so how would i change my move logic
41:27 - then
41:28 - well before i do anything let me just
41:30 - run it just for the sake of it
41:35 - oh yeah it's not working because when
41:37 - you walk you are changing this x and
41:39 - this x is an array now
41:42 - okay so we have to implement this walk
41:45 - function okay how does walk work
41:47 - well
41:48 - let's see
41:51 - so when you have a snake like this
41:53 - okay and let's see if i move it in a
41:55 - right direction i put a right key what's
41:59 - happening is let me mark this line see
42:01 - this is my head
42:03 - right this particular block when i move
42:05 - it to right
42:06 - the block will move to right okay
42:09 - so my block move to right
42:11 - perfect
42:12 - the logic for this
42:14 - is
42:15 - what we saw already
42:17 - if you're moving right
42:18 - increase x by some amount
42:21 - moving up increase y by some amount
42:24 - but what do you do with this other
42:26 - blocks well
42:27 - my second block comes at the position of
42:30 - my first block
42:33 - my third block comes at the position of
42:36 - my second block
42:37 - and so on so every block is taking a
42:41 - position of its previous block
42:45 - now writing this logic becomes very easy
42:47 - because
42:49 - here when you are changing a direction
42:51 - of course
42:52 - the logic remains same for the first
42:54 - block which is your head of the snake
42:57 - okay so this remains same
43:00 - but we have more blocks
43:02 - so for those blocks you need to put them
43:05 - at the position of previous block so how
43:07 - do you do that well you have to run a
43:10 - or loop in a reverse direction so you
43:13 - start with the last block so fifth block
43:15 - you put at fourth fourth you put at
43:17 - three
43:19 - and in order to do that
43:21 - you can just do this
43:23 - self.length minus one
43:25 - okay
43:26 - go all the way till
43:29 - uh
43:31 - zero
43:33 - in a range by the way it will not
43:35 - consider zero so actually you are going
43:36 - till one
43:38 - and minus one is a step size so step
43:40 - size means you are going in a reverse so
43:42 - this for loop is nothing but going in a
43:44 - reverse direction you start with 5 4 3 2
43:47 - and so on
43:50 - and
43:52 - the current x position will be
43:55 - your previous block's position
43:57 - okay
43:58 - and you do the same thing with your y
44:07 - all right
44:10 - let's see
44:15 - see
44:16 - now actually it's a snake with two
44:18 - blocks but see the the distance between
44:20 - the blocks is very minimal it's it's
44:23 - like 10 pixel
44:25 - so i need to make it size which is a 40
44:28 - so that you know the size of block is 40
44:31 - so you want to keep them 40 pixel apart
44:38 - so
44:39 - yes i size size size sizes
44:45 - great see
44:47 - i move it up let down
44:49 - my screen now is a little smaller so i
44:52 - want to increase the size here to let's
44:54 - say thousand eight hundred
44:56 - and also
45:00 - that
45:01 - just increasing the timer so that is not
45:03 - moving very fast see
45:06 - so this is how the snake with
45:09 - length 2 looks like if you have let's
45:11 - snake with length 6.
45:16 - this is how it looks like see when i
45:18 - move left up down etc
45:24 - now that my snake is kind of ready i
45:26 - want to now draw
45:28 - apple so for apple
45:31 - so the purpose of the game is snack is
45:34 - eating an apple
45:35 - apple goes at random position and as
45:38 - snake eats apple the length of the snake
45:40 - will increase
45:43 - if you are not sure about this i have
45:44 - all the source code in the video
45:46 - description below so just take the final
45:48 - version of the source code and try to
45:50 - run and play the game so you get an idea
45:53 - so here
45:54 - now
45:55 - i need to create
45:57 - an apple class so see in object oriented
45:59 - programming
46:01 - whatever objects you have
46:03 - you create classes for those objects so
46:06 - we have snake we have apple so we
46:08 - created classes for both of it
46:11 - now apple is
46:13 - also an image so if you look at this
46:16 - image
46:17 - this is also 40 by 40 pixel image
46:20 - so i need to load that image first right
46:23 - and we have already seen how you load
46:24 - the image
46:26 - like the same code i just copy paste it
46:28 - here
46:29 - and
46:32 - people also needs a parent screen here
46:35 - see how you have a parent screen i'm
46:37 - just going to change this
46:40 - we need a parent screen so that apple
46:42 - can be painted on that
46:46 - parent screen
46:47 - okay
46:49 - and what else do we need
46:52 - yeah x and y
46:54 - because apple has a position right
46:57 - and
46:58 - this position will also be in the
47:00 - multiple of 40 so i'm gonna keep it 120
47:03 - so like 120 by 120
47:08 - see if i put it 20 then snake and april
47:12 - will not align it has to be multiple of
47:13 - 40. so just to make it generic
47:16 - you can do something like this also
47:22 - and of course you need our draw function
47:25 - to
47:26 - draw
47:28 - the apple
47:29 - and how does it draw work well it will
47:31 - be i can just copy paste this code
47:36 - so there is no for loop of course
47:41 - so here instead of solves that lot i'm
47:43 - just saying self.image
47:45 - and x and y i'm
47:48 - painting here
47:51 - i probably don't need fill here because
47:53 - fill i will do it in a snake draw
47:55 - function
47:56 - okay
47:58 - all right so now i have my apple here
48:02 - now apple i need to initialize in my
48:03 - game class okay
48:05 - how i initialize snake
48:07 - so i will just say
48:11 - this is my apple
48:14 - and the parent screen you need to pass
48:17 - and then you need to say draw
48:22 - now when you are running
48:24 - this event loop see here you are saying
48:27 - self.snake.work so here also you need to
48:31 - draw your apple otherwise what happens
48:33 - is in the walk function
48:35 - you are uh in a draw function you are
48:37 - clearing the screen so it will clear the
48:39 - apple so that's why we need to do this
48:42 - so see ice
48:44 - i see the apple now
48:47 - which is good
48:49 - um
48:51 - okay
48:52 - now one thing i noticed was
48:54 - right now i have two objects
48:56 - if you have like four or five ten
48:58 - objects and you have to keep on doing
49:00 - things as object.draw
49:02 - so
49:03 - just to
49:04 - modularize my code
49:06 - i will
49:08 - write a method called play in my game
49:10 - class
49:11 - and this method
49:14 - play
49:15 - will have
49:18 - those two methods
49:20 - and then it's just working the same but
49:22 - at least
49:23 - code wise when you read it
49:26 - it's like
49:27 - in your full loop okay in your while
49:29 - loop play and play is doing all the
49:33 - drawing
49:34 - okay
49:38 - so far we are moving over snake
49:42 - and there is an apple
49:44 - but there is no actual game logic which
49:47 - is if snake eats the apple it should
49:50 - increase the length and then april
49:53 - should move to a different position so
49:55 - in this video we are going to implement
49:57 - that logic now collision detection is a
50:00 - very common thing in any
50:03 - of any video game
50:04 - so we are going to implement that
50:06 - concept so first
50:08 - we will write
50:10 - a function
50:12 - in our game okay so what do we want to
50:14 - do just think about it when snake's head
50:18 - hits
50:19 - the apple
50:20 - we want to increase the score
50:23 - so how do you detect that so just just
50:25 - think about it so
50:26 - let me open
50:28 - uh paint and kind of
50:30 - go over that a little bit so let's say
50:32 - your this is your
50:34 - application screen
50:37 - and
50:38 - let's say this is your
50:40 - name
50:41 - this is your snake right so it's just uh
50:44 - like a couple of blocks i'm just going
50:47 - to make it bigger
50:50 - and
50:50 - [Music]
50:52 - it is just uh
50:55 - list of blocks nothing else right
50:57 - okay so
50:59 - let's say
51:01 - this is my snake
51:03 - and
51:04 - let's say this is my apple
51:08 - now
51:09 - the apple also has a bounding box so
51:12 - apple is actually
51:13 - a circle it's an icon that you're
51:15 - showing so it will be like this
51:17 - and when you
51:19 - hit that apple what's happening is
51:23 - let's say this snake
51:25 - comes here for example
51:27 - [Music]
51:28 - this guy here
51:30 - let's say comes into this area let's see
51:32 - this is collision right
51:34 - so here what happened is
51:36 - actually the
51:38 - the y
51:39 - the x of both of these are same the
51:42 - snake is moving up
51:43 - but what has changed is
51:46 - the y so just think about why so
51:49 - this is your y
51:52 - correct
51:53 - y one let's say this is for apple
51:56 - and this is your
52:00 - y two
52:01 - for your
52:03 - head of the snake right so this is the
52:05 - axis that i'm referring to and for y one
52:08 - this is the point that we're referring
52:10 - to
52:11 - now what happens is
52:13 - when they collide
52:15 - see y one plus size is what
52:18 - so y1 plus size will be this much see y1
52:22 - plus size is basically this much
52:25 - size is the height of the apple
52:27 - so now what happens is
52:29 - y2b y2 is
52:31 - in that boundary it is in y1
52:34 - plus psi so if you do
52:36 - let's say y1
52:39 - plus size
52:42 - this y2 now is in that boundary
52:45 - you got it
52:46 - so my y2
52:48 - is now less than
52:50 - y1 plus size so this is how you can
52:52 - detect
52:53 - the vertical collision same thing with
52:57 - x okay so we are going to implement
53:00 - that method as per that logic which i
53:04 - just explained
53:07 - so in the collision always
53:10 - you're trying to decide if two
53:12 - rectangles are colliding so then you
53:14 - will always have x1 y1
53:17 - x2 y2
53:19 - okay
53:20 - and if
53:22 - x1
53:23 - is less than equal to x1 plus size see
53:28 - the width and height of both
53:31 - apple as well as the snake
53:33 - block is 40 so that's what we have
53:36 - initialized size to be 40.
53:38 - so
53:43 - x1 is less than that and
53:48 - actually x1 is uh so the logic will be
53:52 - x1 is
53:53 - greater than equal to
53:56 - x2
54:06 - let's think about y first okay so
54:09 - why here
54:11 - your y2 is less than y1 plus size
54:16 - okay so similar logic you can apply for
54:18 - x1 as well so x1 is greater than equal
54:20 - to x2 and
54:22 - x1
54:24 - is less than equal to x2
54:27 - plus size
54:29 - and the same
54:30 - logic applies for y1 and i'll go to the
54:33 - diagram and explain you in a bit
54:36 - but if the same logic for y if both of
54:41 - these conditions are true
54:43 - then you return true saying that there
54:44 - is a collision this means there is a
54:46 - collision otherwise there is not
54:47 - according
54:49 - okay
54:50 - so let's let's understand this y1
54:52 - greater than equal to y2 and y1 less
54:55 - than equal to y2 plus size okay
54:58 - so here
55:04 - so here this is being my y one so let me
55:09 - just uh
55:11 - here in my code at least see i have this
55:15 - as y2
55:17 - and this
55:18 - as y1
55:20 - so what's happening is
55:22 - see let's look at this logic here
55:31 - so that logic will go here this is the
55:34 - logic we have right what this means is
55:38 - let me just put it in a bigger window
55:41 - what this means is
55:43 - uh my y1
55:45 - is less than y2 plus psi so we you
55:48 - already saw this y1 okay
55:51 - is less than
55:52 - of y2
55:55 - plus size
55:57 - okay
55:58 - and
56:00 - ah your y1 is greater than equal to y2
56:03 - so y1 is greater than equal to y2
56:06 - okay so you can just debug the code and
56:08 - kind of
56:10 - figure out what it means here actually
56:12 - hold on y 1 is greater than equal to y 1
56:14 - is actually less than so i think
56:17 - previously what i was doing is correct
56:20 - which is
56:22 - see it can be either way like so i think
56:24 - this is y1
56:27 - and this is y2
56:29 - okay
56:33 - this is white and this is y1 plus size
56:36 - so if you look at this let's say if you
56:37 - think about this as a y axis so y axis
56:39 - starts from zero first right
56:41 - so it will be zero here
56:46 - then it will be
56:48 - whatever
56:50 - like maybe 5 here
56:54 - and
56:57 - 20 and so on so it is increasing in this
56:58 - direction so if you think from that
57:01 - perspective
57:03 - the y1 is greater than equal to y2 right
57:06 - so this condition is met and
57:09 - y1
57:10 - is less than equal to y 2 plus psi so if
57:13 - you have y 2 here and if you do y 2 plus
57:16 - size which is 4 t
57:18 - so this block
57:21 - so y 2 plus psi so y 2 plus size is this
57:23 - much right so y y1 is less than that
57:26 - that's why this collision logic works so
57:28 - just debug it you figure it out this is
57:30 - a simple logic now
57:32 - when
57:33 - snake
57:34 - hits
57:35 - uh the apple you want to increase the
57:38 - length okay so here
57:41 - in the
57:43 - play section
57:44 - if
57:45 - self dot is collision
57:48 - okay and you you want to check the
57:51 - impact with only snakes head actually
57:54 - because you don't need to check it with
57:55 - the body
57:58 - so snake's head is
58:00 - the position
58:01 - zero
58:03 - and then
58:04 - you will say
58:06 - this apple
58:08 - dot
58:09 - y
58:10 - so checking the coordinate of
58:12 - apple and snake's head which is at
58:15 - element number zero
58:18 - and if you find a collision
58:20 - you will say
58:22 - this print
58:25 - collision
58:26 - occur
58:27 - right now just do let's do this much
58:30 - uh just to make sure things are working
58:32 - okay
58:34 - and
58:37 - uh after that
58:41 - let's see if we have anything pending so
58:42 - you're doing collision
58:44 - okay let's run it
58:53 - so
58:54 - you see that
58:56 - you see this collision occurred message
58:59 - right so that means
59:01 - the collision happened
59:02 - and now
59:04 - we can
59:05 - whenever collision happens what we want
59:08 - to do is
59:09 - we want to move the apple to a different
59:12 - position different random position so
59:14 - let's write the code for that
59:16 - so we'll say apple
59:22 - dot move
59:24 - so this means
59:26 - once
59:27 - snake apple hits the apple we move apple
59:31 - to a random position and for that you
59:33 - can come to this class here apple
59:36 - and write this method called move
59:39 - so here
59:41 - you will move uh
59:43 - this two to a random position okay now
59:47 - how do you do that so there is a model
59:49 - called random which you can import here
59:52 - and i'll show you see if you do idle
59:55 - uh
59:56 - i'll just quickly show you how random
59:58 - works so random has this function called
60:00 - rand end
60:01 - so if you give lesson 1 and 10 it will
60:04 - give you a random number between 1 and
60:06 - 10. see
60:08 - every time you run
60:10 - it gives number between 1 and 10.
60:12 - now our
60:14 - window is
60:16 - thousand thousand by 800 correct
60:20 - and
60:21 - apple's size is 40.
60:24 - so if you do little calculation
60:28 - thousand
60:29 - okay divided by 40
60:31 - you get like 25 increments
60:35 - and if you do
60:37 - 800 divided by 40
60:40 - you get 20 so you get like this
60:43 - horizontally 25 increment of 40 and
60:46 - vertically 20 increment of 40. so what i
60:49 - can do is
60:50 - here i can say random dot random okay
60:54 - give me a number between 0 and 25
60:56 - so horizontally i have 25 increment into
60:59 - size
61:02 - so what will happen here is if you look
61:05 - at idle
61:08 - let's say between
61:10 - you know like 1 and 25 i'll just do one
61:12 - because
61:15 - or 0 is also fine
61:18 - and size is 40.
61:19 - so see every time it
61:21 - gives me a number
61:23 - which is always gonna be less than
61:25 - thousand so we don't go out of our
61:27 - window boundary and the number will be
61:29 - divided by 14.
61:32 - it will be a multiple of 40
61:35 - and i did the same thing with pi so for
61:38 - y with 800 height you can get 20
61:40 - increments okay
61:42 - so you
61:43 - after the collision
61:45 - you move it so let's run this
61:50 - see
61:51 - after i'm colliding so my collision
61:53 - detection is happening perfectly
61:56 - okay and the snake is moving
62:01 - okay now
62:02 - on collision you want to increase the
62:04 - size of the snake so that will be a
62:06 - score
62:07 - so
62:09 - in the initial phase i will maybe i'll
62:11 - start with the snake size of 10 2
62:14 - or maybe one
62:16 - and then
62:19 - i just keep on incrementing the length
62:21 - okay so on collision
62:23 - you want to increment the length so here
62:27 - okay where is my collision yeah here
62:30 - you want to say
62:33 - length you want to increment right
62:35 - but
62:37 - you have to do something else as well
62:40 - which is when you increment your length
62:43 - see
62:44 - you need to add one more block in this x
62:46 - and y
62:48 - because x and y is an array
62:51 - it is holding the position of the new
62:53 - block
62:54 - so for that reason
62:56 - i will just write a new method here
62:59 - called
63:00 - increase length
63:04 - okay where you first of course you first
63:07 - increase the length but then
63:09 - you want to
63:10 - add something into x and y so this is
63:13 - how you add a new element into an array
63:17 - and i'm
63:19 - adding -1 as a value you can always
63:22 - tackle this in your
63:24 - walk function in your work function
63:26 - we'll put a right
63:29 - coordinates of x and y that's why we can
63:32 - just start with some random value here
63:35 - so here
63:40 - i will say increase length
63:44 - and let's run this
63:47 - see now after it hit it it the size of
63:49 - snake is 2
63:51 - now see it is 2 and if i hit it again it
63:53 - will become 3
63:55 - you will watch it
64:01 - deny it become 4.
64:12 - pi and so on
64:15 - okay
64:19 - i think i noticed something weird
64:23 - ah see if it moves even near
64:27 - near
64:28 - say i'm not going through apple if i go
64:31 - even above apple
64:33 - this is fine
64:42 - if i'm going even from near apple it is
64:44 - increasing the weight and i think that's
64:45 - because of this less than equal i think
64:47 - this should be probably less than
64:57 - see now it's working as expected so now
65:00 - it increase the length
65:03 - and so on so here also apple moved to a
65:07 - very far position so i want to restrict
65:09 - it so i'll just say 40 this is 90
65:15 - on 0 0 position is probably okay
65:28 - all right so this is looking pretty good
65:31 - so now next thing i want to do is
65:33 - display the score
65:35 - okay
65:36 - so in my game function
65:38 - i will write a method called displace
65:40 - code
65:45 - and this should just display the score
65:47 - at the maybe top right you know i will
65:50 - choose top right to dis for displaying
65:52 - the score
65:53 - and pi game has this
65:56 - font module
65:58 - so i'm using the system font which is
66:01 - area
66:02 - with the 30 font size you can increase
66:04 - it as well
66:05 - and then uh this font i will store
66:10 - into a variable called score so this is
66:12 - how you do it
66:14 - and here the score is nothing but the
66:16 - snake's length okay
66:19 - so i'm using python format string
66:21 - storing it uh storing the score there
66:24 - and
66:26 - in render function this is uh your color
66:29 - so if you do like 255 to 55 255 it will
66:32 - be white color
66:34 - so you can choose whatever color you
66:36 - like
66:36 - and then
66:39 - you know we always have a surface so
66:41 - whenever you want to show anything on
66:43 - the surface you have to use blit
66:45 - function
66:47 - and then what are the coordinates well
66:51 - let's say 810 so that there will be top
66:54 - right corner
66:56 - and once you do that
66:59 - here i can display the score
67:03 - and after displaying score of course you
67:06 - have to do
67:07 - buy game dot display dot flip
67:13 - so you see the score at the top here
67:15 - okay
67:16 - so now
67:17 - [Music]
67:19 - ah c score increase two
67:22 - score is equal to the length of my
67:24 - snakes three zero i'm doing good
67:29 - wonderful my game is coming up so nice
67:32 - guys
67:37 - so in last session we calculated the
67:40 - score by finding out the collision
67:43 - between a snake
67:44 - and an apple
67:46 - in this session we will work on a game
67:48 - over logic which is if the snake
67:51 - is curling around and if it hits its own
67:54 - body then the game is over
67:56 - so
67:57 - for that again we are going to use this
67:59 - is collision function right so here let
68:03 - me just
68:04 - run it and tell you what exactly i'm
68:06 - trying to do
68:08 - so here let's say you have a snake
68:11 - of size seven
68:12 - when you run it
68:14 - ah see if you get into this situation
68:17 - you see like when snake is crossing
68:19 - itself then we want to exit the game
68:24 - so this was a
68:26 - logic of snake colliding with apple
68:30 - now we are writing a logic of snake oh
68:35 - gliding with
68:37 - and for that
68:39 - you know snake has
68:41 - a
68:42 - number of blocks right so you can just
68:45 - do for i in range
68:48 - 0 to self dot length
68:56 - now
68:57 - what type of collision you're trying to
68:59 - find well you want to find out if the
69:02 - head of the snake which is x0 collides
69:05 - with itself or not so if you look at
69:09 - whatever this diagram that we have
69:11 - let me just clean it all
69:15 - so here
69:17 - let's say this is my snake
69:20 - okay and let's say it's moving moving
69:22 - moving
69:25 - and it makes a ton like this
69:27 - and it makes it turn like this
69:29 - and then it again goes here then that's
69:32 - collision so then that's when you should
69:34 - die so
69:35 - this guy is the head so you want to
69:38 - find a collision of head with remaining
69:42 - blocks
69:43 - so
69:45 - you will say if self dot is collision
69:48 - okay position of what self dot snake dot
69:52 - x sub zero
69:56 - set dot snake of
69:58 - y zero because x zero and y zero is
70:00 - ahead with remaining
70:03 - blocks
70:05 - so
70:07 - x of i
70:09 - and
70:13 - y of y
70:14 - now since we are finding a collision
70:16 - with x0 we can start with one
70:20 - okay
70:21 - now let's think about it
70:23 - even
70:24 - we can optimize later later so this head
70:28 - of the snake will never collide with the
70:30 - next part
70:31 - you agree
70:33 - no matter what happens it will never
70:35 - ever collide with this
70:37 - and i think same thing will happen with
70:39 - the third block can it collide with
70:41 - third block no so 0 1 2 so maybe you can
70:44 - start with 3 directly
70:46 - so here we can start with 3
70:49 - and if there is a college collision
70:53 - for now let's say
70:55 - you want to exit the game
70:58 - you'll say game over and exit it
71:03 - okay
71:08 - okay i don't know what happened it went
71:10 - out of the boundary
71:13 - see when it when it hit itself
71:17 - it
71:19 - it is exiting with that
71:22 - game over
71:24 - message
71:25 - so logic wise is working fine but what i
71:27 - want to do is when that thing happens
71:31 - i want to show a nice message saying
71:33 - that the game is over
71:35 - and um
71:37 - also if they want to replay
71:39 - then we should give some them some
71:41 - option of replaying let's say if
71:43 - game is over if they hit enter then we
71:45 - want to uh
71:47 - give them that
71:48 - option okay so
71:50 - first of all
71:52 - i'll remove this
71:53 - and instead of that i will raise an
71:55 - exception see exception means
71:58 - so
71:59 - exception raising exception means
72:01 - something unusual happen and you want to
72:03 - go out of the game
72:06 - and you're throwing an exception and
72:08 - here you have to catch that acceptance
72:10 - and this is how you do it if you don't
72:11 - know about this
72:13 - again follow my basic python videos
72:17 - and you will get an idea on this
72:18 - exception
72:19 - and
72:20 - here all right
72:22 - what do you want to do here
72:24 - i want to
72:26 - maybe show a game over
72:30 - message
72:31 - okay
72:32 - and that
72:35 - game over message
72:37 - uh let's see what do we want to do
72:41 - so in the game over message here
72:46 - show
72:47 - game over
72:48 - here in this method
72:52 - i want to
72:53 - display a nice text in the middle saying
72:55 - that the game is over
72:57 - uh and
72:59 - for that first you need to clear clear
73:01 - the surface right
73:03 - because
73:04 - uh
73:05 - whatever you have you want to wipe out
73:07 - you just show a message
73:08 - so here for fill which color did we use
73:12 - well we use this
73:13 - i'm going to store this
73:16 - in a variable called background color
73:22 - okay so background color is equal to
73:25 - this
73:27 - and i will
73:28 - see whenever in programming language
73:30 - when you are using
73:31 - something
73:33 - more than multiple time more than one
73:34 - time it's better you create a variable
73:45 - okay and
73:46 - once the screen is wiped out now you can
73:49 - render your text so but that will use
73:52 - the
73:53 - this thing like font
73:55 - your lead we already show the
73:57 - score
73:58 - so we can use the same thing here
74:04 - and
74:06 - okay
74:07 - so i'll say line one spawn dot render
74:09 - something so what is our
74:11 - score so we want to show the score to a
74:13 - user and then
74:15 - we want to
74:16 - exit the game so you see score this one
74:20 - so i'm just copy pasting the same thing
74:25 - and
74:26 - i'm showing it in white color you can
74:28 - change this this color this is rgb
74:31 - and self dot surface dot grid and
74:34 - anytime you want to show anything on a
74:36 - surface this is what you call
74:39 - and i am showing an x and y's is 200 200
74:42 - 300 which is in the middle of the screen
74:46 - i want to also show another message
74:49 - saying that
74:50 - to play the game again
74:53 - you can hit
74:54 - enter maybe
74:59 - and
75:01 - i will just show line two
75:05 - and 350 name
75:08 - okay so show game over let's see what
75:11 - happens
75:22 - okay something is not right so show game
75:25 - ever is here
75:30 - okay
75:33 - so let's turn
75:41 - so i realized this was happening because
75:43 - i did not have flip in the shoe gaming
75:45 - work so whenever you are making any ui
75:48 - changes you have to call
75:50 - pygame.display.flip so ui is ref this is
75:53 - like refreshing your ui
75:55 - so now
75:58 - see so game over message is showing up
76:01 - but then it's again restarting the
76:03 - message i restarting the the the game
76:07 - and why is that happening
76:09 - well that is happening
76:11 - because
76:13 - just think about it you show this
76:15 - message okay
76:16 - after that you wait point two second
76:18 - you're again going into this loop
76:21 - see
76:22 - again processing all those keystrokes so
76:27 - we have to
76:28 - implement a pause mechanism here
76:32 - so we'll say okay pause is false
76:35 - and
76:37 - when the game is over
76:40 - pause becomes true
76:42 - and when the game is paused by the way
76:46 - i don't want to uh process
76:50 - all of this right so game is paused here
76:54 - yeah if the game is paused i don't want
76:56 - to process even left right all these
76:58 - keystrokes or
77:00 - yeah this one
77:01 - if not pause i don't play the game if
77:04 - if it is paused
77:06 - correct
77:07 - so this is something you don't want to
77:09 - do
77:10 - also
77:10 - okay
77:11 - let's let's run just this and see what
77:13 - happens
77:16 - the game is over
77:17 - now
77:18 - now i hit anything and it's not go it's
77:20 - not restarting so we said to play again
77:23 - press enter so if you press enter you
77:25 - want to unpause it so how do you do that
77:28 - well here
77:31 - you can say if event dot key is equal to
77:35 - k
77:36 - enter is basically return
77:38 - and here you will say pause is true
77:42 - okay so
77:45 - pause is false actually
77:51 - so here
77:54 - okay game exited okay
77:57 - i'm pressing keys nothing is happening
78:00 - and when i hit enter
78:04 - say game started again also just to make
78:07 - it safe you don't want to process even
78:09 - left right keys if the game is pauses
78:12 - pause guys you don't want to do anything
78:16 - so don't process all these keystrokes if
78:18 - the game is paused simple enough
78:20 - all right
78:22 - now let's see what's remaining so after
78:26 - the game is paused
78:29 - see my score is right now
78:32 - let's say eight
78:35 - nine score
78:36 - and game exits my score is nine
78:39 - if i hit escape i go out
78:41 - but i want to play this game again so
78:43 - when i hit enter
78:45 - see it is starting with score 9 again
78:48 - so that is bad because you are not
78:50 - resetting the game so here you need to
78:53 - reset the game so you will call
78:55 - self-loath reset method
78:58 - and reset method is something you will
78:59 - implement here so you will say reset
79:03 - okay how do you reset the game well
79:06 - whatever
79:08 - snake and apple you have you just
79:10 - reinitialize those two
79:15 - and i'll initialize it with one
79:17 - okay so
79:20 - when the i have scored seven and when
79:22 - the game is
79:24 - over when i hit enter see i start fresh
79:27 - with score one
79:30 - okay
79:31 - so i think you get an idea and by the
79:33 - way
79:34 - i don't want to start with like score
79:36 - seven in the beginning as well so here
79:39 - also i do want so that way you know you
79:42 - always start with one block then it
79:44 - increases ah my apple moved out see my
79:47 - apple is moving out where is it
79:50 - yeah this is happening because we have
79:53 - we need to reduce this limit maybe yeah
79:57 - because it's probably moving too fast so
79:59 - that's why i'm reducing the limit
80:02 - and i hope
80:03 - it works now
80:06 - yeah
80:11 - so far our project is working fine it is
80:14 - functionally correct but it doesn't look
80:16 - very fancy because it doesn't have any
80:19 - music the background is dull so in this
80:22 - uh session we are going to add
80:24 - background music as well as the
80:25 - background texture or to this game
80:28 - for this what we'll do is
80:31 - whenever snake is eating an apple
80:33 - will play some music like ding or
80:35 - something
80:36 - when the snake collides with itself
80:39 - we'll play another music and then in the
80:41 - background also we'll keep on playing
80:43 - some music so first let's take a
80:46 - snack eating apple scenario so you need
80:48 - a short
80:50 - music clip first of all so for that
80:54 - i did some google found this nice
80:55 - website pre-sounds library
80:57 - which has this ding sound so see if you
81:00 - play this link sound
81:03 - see chin
81:05 - so we'll play that
81:08 - when snake it apple so in the resources
81:11 - directory i downloaded that file so say
81:13 - ding.mp3
81:16 - and for collision crash
81:19 - so when it collides with this we will
81:21 - play this music okay
81:23 - now when you do google on pi game pi
81:26 - game play sound you will find this class
81:29 - in pi game called mixture
81:31 - which has a sound element to it
81:34 - okay
81:35 - so we'll be using pi game mixture for
81:38 - playing music and in that you first need
81:40 - to do pygame dot mixture dot in it so
81:42 - let's do that it will initialize the
81:46 - mixture model
81:47 - so let me just first go into my
81:49 - meditative zen mode all right so no
81:52 - distraction now
81:53 - you go away buddy
81:55 - all right so here in the init
81:59 - i will say
82:02 - pygame dot mixture dot in it so
82:05 - my
82:06 - sound module is initialized
82:09 - now when i have a collision
82:12 - or let's say
82:16 - yeah
82:17 - when i sneak eat
82:19 - apple i want to play the music so how do
82:21 - you play that so you will just say
82:23 - simply by game dot mixture dot sound
82:27 - okay
82:28 - and in the sound
82:29 - you will use resources
82:32 - i will use ding music
82:36 - and let's store this in a variable
82:38 - called sound
82:39 - and then you can just say pie game dot
82:42 - mixture dot sound dot play
82:45 - so that
82:46 - plays the sound
82:50 - so i'll right click run it
82:54 - see
82:55 - when snake hits apple it will play the
82:58 - music c
82:59 - listen carefully
83:01 - see ding
83:03 - okay
83:04 - and when it collides you'll be playing
83:06 - the crash music so here
83:10 - i'll just say
83:12 - crash
83:14 - so let's taste that as well
83:18 - putting guys working okay
83:22 - see
83:23 - your game is over your score is three so
83:26 - that sound that you just saw now
83:30 - whenever in
83:32 - your big program you find that
83:34 - you are repeating the lines of code it's
83:37 - better to put them in a function
83:39 - here
83:40 - between these two line and these two
83:42 - line
83:42 - the only difference is this
83:45 - name of the sound so what i can do is i
83:47 - can put these two
83:49 - into a function
83:51 - called play sound let's say
83:54 - you know
83:57 - and we can
83:58 - supply the name of the sound as well
84:00 - actually so here see
84:02 - here i can do self
84:05 - dot play sound
84:07 - but i need to tell this function that it
84:09 - needs to play ding
84:11 - so i will just say ding here
84:13 - which i can get that as an input sound
84:18 - and here
84:19 - i can maybe convert it to python format
84:21 - string
84:22 - and here
84:24 - if you have
84:25 - sound variable so whatever you pass here
84:27 - it will try to load that dot mp3 file
84:32 - so here in this case it will be crash
84:38 - okay
84:40 - and
84:42 - now tomorrow if you want to play 10 more
84:44 - sounds you just call that function with
84:46 - the name of the file if you don't want
84:48 - to use name of the file then you can
84:49 - just check here like if sound is equal
84:52 - to ding
84:53 - then that's your file okay
84:55 - all right
84:57 - so you can run it it will work okay
85:00 - now i want to play background music as
85:02 - well while the game is being played you
85:04 - know you want to hear nice music so i
85:06 - have downloaded this
85:08 - background music from
85:10 - youtube audio library
85:15 - so that music i will play in the
85:17 - background so again i will define a
85:19 - function called
85:20 - play background music here
85:25 - in here i will be playing that music so
85:29 - now
85:30 - this time instead of sound
85:33 - i will use music
85:35 - so the difference between the music and
85:39 - sound is that sound is just one time
85:41 - like dingo crash
85:42 - music is like a long music which you use
85:45 - generally as a background music
85:48 - and
85:49 - resources
85:53 - okay
85:54 - and then
85:56 - buy game dot
85:58 - make sure
85:59 - music dot play
86:02 - so that will play the music and you want
86:04 - to call this function when the game
86:05 - starts right there itself
86:08 - you want to start playing the music okay
86:11 - so
86:15 - okay
86:16 - initially there was one or two second
86:18 - pause because the game itself the music
86:20 - itself has a pause
86:23 - okay
86:24 - now
86:25 - once this is done what you want to do is
86:29 - see when the
86:31 - the game pauses for example when you
86:34 - hit
86:35 - like when you hit snake body
86:39 - okay
86:40 - you want to stop the music
86:42 - [Music]
86:45 - so let me show you what i mean
86:48 - [Music]
87:01 - see music is still playing i want to
87:03 - stop music and when you restart then
87:05 - maybe start the music so
87:09 - when you have
87:10 - game over scenario here
87:13 - game over right here
87:15 - during this time
87:17 - maybe i can call
87:19 - pygame dot mixture dot music dot pause
87:23 - so it has a nice method called pause so
87:26 - it will just pause the background music
87:27 - okay
87:28 - and
87:30 - uh you want to resume it when user hits
87:32 - enter so when this is when you are
87:35 - unpausing it so here you can say
87:38 - pygame dot make sure dot music dot on
87:42 - pause
87:43 - okay
87:44 - and now it will
87:46 - pause and pause easily
87:50 - [Music]
87:52 - the music stop now
87:54 - and
87:55 - when you start again
87:58 - it will
87:59 - uh restart the music again
88:02 - now i want to change the
88:04 - background of our game so for that i
88:07 - have downloaded this nice texture
88:10 - so this looks like you know grass field
88:12 - on which snake is moving around
88:14 - so i will set this as a background in
88:17 - our
88:18 - game
88:19 - so for this purpose i will here
88:22 - define a new function called render
88:25 - background
88:26 - you know
88:29 - and
88:30 - you know like
88:32 - like image you can load easily by
88:34 - calling pygame dot image dot load
88:38 - and here
88:40 - you can load this background image
88:45 - and if you want to show this image you
88:48 - know that that you have to use this blit
88:51 - function
88:52 - okay so
88:53 - try game dot
88:57 - actually sell
89:02 - where you specify where you want to draw
89:04 - the image on your surface
89:06 - and x and y so we want to
89:08 - render this background from
89:10 - zero zero corner all the way right now
89:14 - this background
89:15 - size
89:16 - is actually you see 1920 by 1080 and our
89:20 - window size is thousand by 800
89:22 - so it will work okay
89:25 - now this render background
89:27 - i will do
89:30 - why should i call this function
89:32 - you know what
89:33 - we are doing this background color so
89:36 - wherever we are calling this function
89:38 - you have to replace that with rendered
89:41 - background so here
89:43 - self dot
89:48 - okay now this is weight so this is
89:50 - different class actually
89:52 - so here you're drawing it right so
89:54 - you're drawing snakes so where do i
89:56 - where do i draw snake here
90:01 - here yes here so here
90:04 - i have to say
90:06 - render background
90:08 - because you draw apple and everything so
90:10 - just before that you have to render the
90:12 - background
90:13 - okay where else did we use oh show game
90:16 - over so here also self dot
90:18 - render background
90:22 - so now see
90:23 - nice background you know it looks looks
90:25 - pretty good
90:28 - so you can play with the background the
90:30 - apple image the score fonts
90:32 - and make your game little more fancy
90:37 - the code for this entire project is
90:39 - available here i have python projects
90:41 - directory where i will be uploading more
90:43 - python projects so please keep an eye
90:47 - right now it's just one project snake
90:49 - game and if you go to that project by
90:51 - clicking here
90:54 - by the way my next project is gonna be
90:55 - document text extension using ocr and
90:58 - there'll be different projects that i'll
90:59 - be covering but for this project i have
91:02 - an exercise for you
91:04 - so if you scroll down
91:07 - the exercise is whenever snake hits the
91:11 - left or right or bottom boundary or top
91:13 - boundary you want to exit the game okay
91:16 - so game should remain in the field if it
91:19 - goes out of the field then game is over
91:20 - so you need to add that logic
91:23 - second thing you need to do is increase
91:24 - the
91:25 - game speed you know in the game whenever
91:28 - you go to next level the challenge the
91:30 - difficulty level increases so that's
91:32 - what you're trying to do here
91:34 - once you
91:35 - develop your own solution then you can
91:37 - click on my solution by clicking on this
91:39 - link but please try to work on your own
91:42 - first
91:43 - before you click on this solution
91:49 - now that your game is ready you want to
91:51 - convert python file into exe file exe
91:55 - file is an executable file which you
91:58 - might have used it for different
91:59 - programs so this is something you can
92:02 - give it to your friends and your friend
92:04 - can just
92:05 - use the exe and run the game so this
92:08 - completes the whole game development
92:10 - cycle when i google convert python to
92:13 - exe i found this nice module on pi pi so
92:16 - just do pip install this particular
92:19 - module on your computer to install it so
92:22 - if you do
92:25 - this
92:26 - it will just install that particular
92:29 - module and once it is installed
92:32 - you can run this command on your command
92:34 - prompt and it will
92:36 - open a nice user interface where you
92:39 - specify your file that you want to
92:41 - convert into
92:43 - exa so this is the final
92:45 - file path so i supply that
92:49 - second option is either you want to
92:51 - create the whole directory or just one
92:53 - executable file now you would probably
92:56 - prefer this because it just creates one
92:58 - exe file so you can do that
93:00 - but
93:01 - right now i'm having some python 3.8
93:04 - incompatibility issue so for me it is
93:06 - not working as of today but you just try
93:09 - it it might work for you so i will just
93:11 - go with one directory
93:14 - in the additional files i want to
93:16 - specify add folder
93:18 - because i want to specify all the
93:19 - resources the resources has background
93:21 - music and everything if you don't do
93:23 - this the it will not work so this is a
93:25 - very important step
93:27 - and then you just click on this command
93:29 - say convert
93:31 - that to exe
93:33 - so internally
93:35 - this tool
93:36 - is taking your python file and
93:39 - generating the binary or the dot exe
93:41 - file
93:42 - for you
93:43 - i selected the directory options
93:46 - so it will create a big directory but if
93:48 - you choose one file option it will
93:50 - create just one file for you
93:53 - once this is done
93:55 - click on open output folder because
93:57 - that's where your
93:59 - exe file is so
94:02 - okay since i created directory it it has
94:04 - created the whole directory here okay
94:07 - see this is what i got and if you click
94:10 - on this exe now
94:12 - see my game is playing
94:15 - this is my game guys
94:21 - now you can right click this and you can
94:24 - say send to desktop
94:26 - and when you do that it will create a
94:28 - shortcut on desktop so let me show you
94:31 - so it created this shortcut
94:33 - and now see
94:34 - whenever i log into computer i want to
94:36 - play the game
94:37 - i double click say it's like just any
94:39 - other program
94:41 - you see
94:43 - so now you can take this folder zip it
94:46 - or there is an option to convert it into
94:49 - installer as well you can convert it to
94:51 - installer
94:52 - and
94:53 - um
94:54 - give it to your friends and you can be
94:56 - now proud about yourself because you
94:58 - build the complete game
95:00 - you can
95:01 - use these learnings
95:03 - that you did in all these videos and
95:05 - maybe make a different game maybe you
95:07 - can make tic tac toe or different type
95:09 - of games so now you are capable of
95:12 - building full-fledged game in python so
95:15 - i hope you like this series if you did
95:18 - please uh share this project with your
95:21 - friends
95:22 - i have complete source code available
95:24 - here along with exercise the solution
95:26 - everything
95:27 - so all you need is
95:29 - a laptop and internet and a little bit
95:32 - willpower to learn this thing these
95:34 - things are super easy
95:36 - these uh this project is perfect for
95:39 - even kids you know if you are in fifth
95:41 - grade fourth grade
95:42 - you learn a little bit python from my
95:44 - videos and then you do this and you will
95:46 - be able to build cool games so i hope
95:49 - you liked all these videos and thank you
95:51 - very much for watching

Cleaned transcript:

in this course you will improve your python skills by creating a snake game using the pygame library this course was developed by deval patel from the popular code basics youtube channel we will be building famous snake and april game using python and pi game module in this python project series as a prerequisite all you need to know is basic python anyone can do it i am going to simplify a lot of concepts and this will be multiple video series so we'll go over step by step on different pi game concepts and we'll build a complete game so you're not only learning python pi game but you're also learning how to build a complete endtoend project in python in the end i also have an exercise for you to work on so you can use the knowledge that you learn in these videos and then you can customize the game as part of that exercise and i have the solution as well so this will be not just you are just watching a video it will be interactive learning so it will be very very useful let's first talk about the things that you need to install very first thing is obvious python installation you need to have python installed on your computer then you need to install a pi game module which you can do it by running pep install buy game i already have it installed so that's why it's showing this part you need to run this step and i use pycharm community editor you can just google pycharm community download it if you like using vs code that's okay too i went ahead and created this snake underscore game directory to store my code so you just go ahead create some directory and then open that directory in pycharm by going to file open so when i did this it was showing me this thing now in this directory i have already put some useful things so first you need main dot pi so main dot pi the main file it is empty right now i also have resources folder which will have different resources that we will need for our project for example it has an image of an apple uh some background some block image and all that okay you can download all this code by looking at the code link in the video description below here our first objective is to write the first program which uses pygame and it draws a simple game window okay so at the end of this session all you're getting is a simple pie game window with some background so let's uh let me just close this and go into zen mode so pyjam has this nice feature called enters and mode where you can have a full screen experience okay so here i will say import python i'll make it a little bigger control scroll and then i always use uh if underscore underscore name is equal to underscore underscore main this is the main routine in python okay uh and in this routine what we're going to do is initiate the pygame dot in it so so let's look at the pie game documentation by the way so if you look at pie game documentation here you can go to the pie game website look at all the tutorials and kind of explore it but in this tutorial uh whenever you're using pi game you have to use this dot in method it will kind of initialize that whole uh module okay and once you have that next thing will be creating a surface so what is surface so you will say pi game dot display dot set mode okay so what is set mode so let's look at the documentation so pi game set mode generally i google it okay and when you google it you can directly go to that so here you are saying set mode so set mode is initializing your game window this is the very basic step that you have to do in all pi game program and see the first argument is the size of the window how big is your window size okay so i will say my window size is maybe what 500 by 500 this is like 500 by 500 pixel okay and you can now say that so let's just maybe run this program and see what happens see window came and it disappeared because the program finished so i will just maybe put some timer so that you can actually see you know i will put a timer for five seconds so you at least see what's going on so okay my window unfortunately came in the in a different screen actually yeah see you get this window 500 by 500 if you have 1000 you will get a bigger window see so that's what this is doing now the window background is black i want to change it okay so you'll say surface dot fill so this fill function will fill the background with some color now any color is rgb so red green blue and these colors have values from 0 to 255 so if you want white color you will say like 255 three times see this did not work because whenever you update your surface you have to say uh buy game dot display dot either update or flip so flip is saying that whatever code you have written here you are just you're just updating your screen with it so you say control f5 now your screen is white okay if you're not sure about which color you want to pick up not no rgb values so then you can do rgb color picker so the google google has rgb color picker so you can decide your color okay which color do you want maybe i want this color as a background what is rgb 92 2584 you put that here and see you get this color so getting that color is is not a big deal so i'm just going to use some color you can use a different color up to you okay all right so now your window is set up next thing i want to do is see i i had to use timer which is something i don't like i want to do something where the window stays and when i hit escape or cancel then only window disappears so i'm going to remove this sleep statement so how do you do that so in any ui application you have a thing called event loop event loop is waiting for the user input when you are working on any screen it is waiting for mouse input or keyboard input so you have to run that event loop event loop is fundamental to any ui programming it doesn't matter pie game any ui you take you need to have an event loop an event loop will be something like it's a while loop so you will say okay running is false or maybe running is true actually so running is true and while running do something so now see this is an infinite loop we need to exit it somewhere right but the fundamentals of ui programming is you are running this infinite loop but on certain keystrokes such as if you hit a cancel or escape you want to exit your game so how do you do that well pi game has this thing called event so pygame dot event dot get so for event in pygame.even get do something so what is this well this will give you all the keyboard mouse all kind of events okay and you can read the documentation online but this events will have type so if event dot type is equal to what for that i need to import certain local so i will say import pi game dot locals uh from i will just do this import star so this is going to import certain global variables which will be useful to us such as key down see this key down this one came from this okay so if you want to read more about it you can just say buy game locals and that will tell you all the locals right so event so for event you will have different locals and so see for event these are the event sites so p down is something we use there is another event called quit which will be called when you hit the cancel window so i will say okay if even dot type is key down then do something lf event.type is equal to quit okay then okay so if user clicks on cancel what do you want to do well you just set your running variable to false you might have read about while loop before or if you have followed my python tutorials you know about while loop while loop is like it goes in iteration until this condition is true so running is true all the time except when we have a quit event okay so let's try this so quit event is generated when when you click on cancel see now your program exited otherwise your pro that window will not exit okay also let's say i want to quit when i hit escape key so you can say if event dot key if event dot e is equal to escape then also running is false so when i run it now and see i'm not using mouse i'm hitting escape key and my program exited okay so this understanding of this whole event loop in pi game is very essential and it will be useful when you're doing ui programming with any language any framework all right so far it is looking good now the next step i have some reference content here so that i can do my videos properly so the next thing i want to do is i want to draw a block okay so that block you saw here so i have this block here so this image i want to just draw on my screen somewhere all right so how do you do that well for that you need to load that image uh and the way you load that image is by doing this so pygame has this image module you can just say load and resources block.image and dot convert this is a method of loading the image and once you have the image in this block variable you can see let's look at load documentation see this is the load documentation okay and block you can uh paint on a surface so your background screen is this surface we will say surface you know surface is your background your main window on that if you you want to draw a block so for that there is a function called blit so this blade function is nothing but draw this image and what do you want to draw well block where do you want to draw these are the dimensions so maybe 100 hundred you see 100 is drawing here if you do 0 0 this is x and y so if you do 0 0 it will draw at the very left so this is x and y okay so i will just assign some variable for the dimension so i will say block x is 100 let's say and block y is also 100 okay and then block x block y all right now next thing i want to do is i want to move this block okay so when i move this block using my maybe key like one of the common things in any game is using the up down left right keys okay when i press those keys i want to move the block around so how do i do that well first let me write a function which draws this block so i'm going to write a python function which is drawing the block okay so it's the same code see this code i have just put it in a function so i put one two and three these three lines into a function so when i call that function it will just draw a block so now how do i move that block all right so let's think about that so here we are getting this event site so if event dot key is equal to let's say up see when you press up key what you're doing is your block is at a position x okay so let me just draw it so that you understand so when you are let's say this is your screen okay on this screen you have a block so this is your block and block is at the position x comma y so it's a it's a coordinate system x and y okay so let's say this x is 100 right now so x is 100 and y is also 100 okay so when you move up key the y remains the x remains same but you're changing your y your y is 100 and now you are moving it up so maybe you're changing it by some amount when you move it down again you're changing y but when you move this block see when you have this block and when you move it like this your x remains same because x is this but you are no your y remains same but your x will change so see your y so this y is this axis okay and this x is this particular axis you might have learned about basic coordinate system in your mathematics class so it is this x so when you have left and right movement you are playing with x up and down movement you are playing with y so when your key is up what i want to do is whatever y i have maybe i want to subtract 10 from y this is same as doing this okay they both are same and when you have let's say down you want to increment y by 10 and if you have let's say left when you press on a left key you want to update your x actually and if your event key is this is all probably very easy to understand you're just changing your coordinate now when you're having up key you're not changing your x because x remains the same and when that happens you are just after after changing your coordinate you are calling draw block function because draw block needs to draw it now let's look at draw block function so in draw block function by the way when you are moving drop your block up and down uh let me comment this line i'll tell you why that line is needed let's first do it without that line so you're uploading block x and y and using that you are drawing that block again and you have to call this flip method otherwise it will not show you what you've done right you can also call update method okay so i'm just calling there is some minor difference you can read about that online so if i do ctrl f5 now see when i'm pressing right key it's moving right and when i'm pressing down it's moving down and then moving left but the previous block are still there i don't want those blocks when i move the block block should just move and for that reason you need this line so before drawing the block you are clearing your screen so when you have this line now see you do up left right whatever and block moves smoothly congress you have a very first basic buy game program working for you you did an awesome job when i'm i'm teaching you on video tutorials make sure you have your code editor open and you do coding along with me because that will give you effective learning in the next session we'll continue with this but in this session i have only this much you just build a screen and a block which can move around all right so far our code looks good but the code is not very readable so in this session we are going to make it objectoriented programming so there is a thing called objectoriented programming or oops so we are going to make it such that it follows the oops principle which is basically converting this into classes and objects so let's get started here you see a huge block of code in your main function itself usually when you're working on proper python projects you don't rather write so much code in your main entry point so you would have things like all right what if i have a class called game okay and this is how you define class if you don't know about classes and objects you can follow my python video on classes and objects and you will get an understanding that's like a prerequisite here this is a constructor so we'll write constructor but what if in my main method here i have only two line of code and that code will be you create an object of a game and you just say dot run okay and here of course you will have a run function and we'll implement all these functions but this is my idea i want to have only two line of code in my main method and everything else should be classes and objects all right so let's start moving all of this code into your classes so the pie game in it of course this will go into your game initialization then the next thing you have is a surface so this surface will also go into your game initialization and i will make this surface a class member and when you do self.something you're making that a class member so that later on the surface is available here as well okay so that's the idea all right so we moved that okay we have block which we will look into little later but let's see if there is anything else nope that's it all right so so far game looks good now the block is something we are building to build our snake ultimately so then how about we build a class called snake okay and that class this class will have that block object so let me move all this here so again i will just say self.block and then um self.x is hundreds of dot y is hundred all right so this way i get rid of that that code so see you now kind of get a get a feel of this process where you have written some experimental code and when it works you want to convert it into a object oriented code and this is how you do it all right now when you see this is like drawing the block so i want to draw the block so in my snake method maybe i can add draw function you know so when you say snakesnake.draw it will just draw that snake so right now a snake is just one block okay here i need a parent surface but i don't have that so generally when you're doing class programming you want to pass that surface as an argument into this function or the other option you have is you store it as a class member so i'm just going to call that surface a parent screen and i will store it in a new class member called parent screen okay and when i draw it i will say self dot apparent screen dot blit and this block has to be self dot block and this x and y has to be self.x self.y all right okay so now you know this game see this game is kind of the main object and game is having a snake inside it so you have a game game has a snake so for that for that reason i will create a snake inside my game class so i created a snake inside my game class now snake constructor expects parent screen so what is my parent screen self dot surface okay and once that is done i want to draw the snake all right so this looks good so far so by the way when you draw this you're drawing this so you're kind of replacing this so that draw function is exactly this draw so there were two more things that we wanted to do which is fill and see this this line will come in the middle okay and this will be self dot surface dot fill and this will be pi game dot display so when you have snake and when you say snake dot draw it will draw the snake or a block on the surface so now we remove this function as well okay what is left now okay a main event loop is left so this main event loop i will copy this in a run function okay because that run function is kind of the main function so we are running the event let's look at it okay here i don't have access of block x and draw block etc right so what do we do but we have access of snake object so so snake all right so let's do this so when you click when you do left click you want to move the snake to left so what if we have a function called move left so that i don't have to worry about all this when you say move left it should move left when you press right key it should move right releasing this will be amazing it will make code so much readable so move right i'm just typing these methods they don't exist but i am going to write them this is how you do object oriented programming move down okay so i need to write all these methods in my snake class now so let's write that method to move left okay what do you do when you move left we saw in a previous session moving left means you are just changing a position of x because your y is same so i will just do self dot x 10 you know subtract 10 pixels from your x so that your block moves on the left hand side once it is subtracted you want to draw it and for drawing there is a method so you can see your code is becoming more readable it kind of makes sense in your brain right moving left is subtracting by 10 and then drawing it previously code was little cryptic and similarly you can uh you can maybe implement the rest of the method see move right move up and down okay so it's very very easy very easy to understand now so when you read your code see you're starting your to your python program first you're creating game game says run okay what does run do run is running your event loop in the event loop you are having snake you're moving left and right so code is more readable now and when you right click and run this okay snake object doesn't have an attribute self dot surface yeah it doesn't have selfdrive so it has self the parent screen actually so i'm pressing left and right and the block is moving i did not make any functionality change but in this session we did an amazing thing which is converted a programming to object oriented programming this is needed if you want to become a good programmer a good programmer can program write object oriented programming method and the code is readable maintainable you know when you work for big companies the code bases are very big so when new person joins already there are million lines so if code is readable like see right now code is more readable then it helps so oops or object oriented programming concepts makes you a better programmer that's why that's why i think this session is very very important so i hope you all learned all these lessons till now we are moving this block manually using left and right keys in this session i want to move this block automatically you might have seen games where blocks are falling planes are flying you don't know anything and they keep on moving so i will do the same thing with this block so that if i'm not touching any key and if it's going down it keeps on going down when i touch right key let's say it will just change the direction but it will just keep on moving on its own so for that what i need to do here is introduce a timer seen this while loop this code is handling all key events but outside this block you know like here i need to maybe put a timer so here i will put some timer and on that event so let's say i have some method called for dot uh so if i have a method called self dot snake dot walk so snake i have right so that's hypothetium we don't have this method but just hypothetically think that on this method snake walks on its own without you placing a key now this rule loop is running very fast so if you do this snake will move really really fast so you need to introduce some delay and you can use time module for that so we'll introduce some sleep time so here we'll say time to sleep let's say point two second so every two sec point two second it moves on its own point two second moves point two second moves and in this walk function we need to implement here so let me just implement block function here so walk okay what do we do in walk well of course in walk function now you will be drawing uh the snake and based on the direction based on the current direction at given point of time snake could be moving left right top bottom so based on the direction you need to increase the x and y coordinates okay so we need to have this direction parameter which i'll add here so self dot direction let's say initially you're making a direction up or down it could be anything i'm just randomly selecting and based on that direction so let me do this so if self.direction is up so if it is up what do you do well we saw previously that if it is up you only reduce yc we are reducing y and if the direction is let me just copy paste just to save some time here if it is right of course you are more manipulating only x if it is up y and so on this is something we already went through when we are looking at this function and you draw it so now what will happen is even if you're not press your any key in your while loop based on a direction snake will keep on moving on its own now what happens when you press any key let's say if you press left key you call move left which is fine but on this move left you don't want to change anything you want to change only the direction okay so i will say move left my direction is left if it is move right my direction is right move up direction up move down direction down looks good i think now let me try it so just to go world on while loop when you call this function you are just changing a direction and even if you have not press any key on walk function based on the direction you are moving the snake so say i'm not pressing any key now using my hands and block is moving when i press right key just change the direction up key change the direction left key chain the direction all right looks great it already looks like a game don't you think so in moving blocks games this is what they do so congratulations you just implemented a nice version of a little small stupid game uh in the next video or in the next session we will convert this block into a fullfledged snake in this session we will be building a snake out of a block see right now the there is only one block it is moving on its own uh this is actually a snake with length one if i put let's say five six blocks let's say if i put six blocks then this becomes a snake so we'll introduce a length parameter in our snake class and if let's say length is 5 then it will look like this so instead of one block we have five blocks so the first thing i'm going to do now is enter my zen mode you know i'm doing a meditation the snack and apple meditation so here i will introduce a parameter of length lngth so self dot land is equal to length and now i don't have a one x and y because when you have a snake with size five essentially you have five x and y c one x and y is nothing but a left top coordinate of a block so if your five blocks you should have five x and y and how do you do that well in python this is easy you can do something like length okay so this will initialize an empty array of size length if you want to verify it what i do usually is i go to python console so exit the same mode i go to python console here and if you do something like let's say this file oh this is not working okay i need to given um some value so let's say if i do 67 see if i do five it's creating an array of five if i do three it will create an array of three elements so that's exactly i do this python console is a useful feature you can use it so now i will just initialize it with size 40 so by the way i will just create a variable call size is equal to 40 and this size is nothing but the size of a block actually the actual length of the snake is this length and see if you look at my block dot jpg right this is the image we are using if you look look at the dimension of it it is 40 by 40. so that's why uh i want to put initial position to be let's say 40 40 it could be 80 it could be 120 and then um i want to just implement my move logic now before i implement my move logic i need to change the draw function because draw function is just drawing 1 x and y now we have multiple x and y so instead of this i will have a poor look and i will say you know go till the length and do draw x and y basically okay now initially i initialized my entire array let's say if you have a snake length of two so let's do that so here when you create your snake let's say i have a size little bit two you would ask me why do you have bought the blocks at same position ideally you should have it at different position but my move logic will take care of it it will unwrap my snake you know as i move so how would i change my move logic then well before i do anything let me just run it just for the sake of it oh yeah it's not working because when you walk you are changing this x and this x is an array now okay so we have to implement this walk function okay how does walk work well let's see so when you have a snake like this okay and let's see if i move it in a right direction i put a right key what's happening is let me mark this line see this is my head right this particular block when i move it to right the block will move to right okay so my block move to right perfect the logic for this is what we saw already if you're moving right increase x by some amount moving up increase y by some amount but what do you do with this other blocks well my second block comes at the position of my first block my third block comes at the position of my second block and so on so every block is taking a position of its previous block now writing this logic becomes very easy because here when you are changing a direction of course the logic remains same for the first block which is your head of the snake okay so this remains same but we have more blocks so for those blocks you need to put them at the position of previous block so how do you do that well you have to run a or loop in a reverse direction so you start with the last block so fifth block you put at fourth fourth you put at three and in order to do that you can just do this self.length minus one okay go all the way till uh zero in a range by the way it will not consider zero so actually you are going till one and minus one is a step size so step size means you are going in a reverse so this for loop is nothing but going in a reverse direction you start with 5 4 3 2 and so on and the current x position will be your previous block's position okay and you do the same thing with your y all right let's see see now actually it's a snake with two blocks but see the the distance between the blocks is very minimal it's it's like 10 pixel so i need to make it size which is a 40 so that you know the size of block is 40 so you want to keep them 40 pixel apart so yes i size size size sizes great see i move it up let down my screen now is a little smaller so i want to increase the size here to let's say thousand eight hundred and also that just increasing the timer so that is not moving very fast see so this is how the snake with length 2 looks like if you have let's snake with length 6. this is how it looks like see when i move left up down etc now that my snake is kind of ready i want to now draw apple so for apple so the purpose of the game is snack is eating an apple apple goes at random position and as snake eats apple the length of the snake will increase if you are not sure about this i have all the source code in the video description below so just take the final version of the source code and try to run and play the game so you get an idea so here now i need to create an apple class so see in object oriented programming whatever objects you have you create classes for those objects so we have snake we have apple so we created classes for both of it now apple is also an image so if you look at this image this is also 40 by 40 pixel image so i need to load that image first right and we have already seen how you load the image like the same code i just copy paste it here and people also needs a parent screen here see how you have a parent screen i'm just going to change this we need a parent screen so that apple can be painted on that parent screen okay and what else do we need yeah x and y because apple has a position right and this position will also be in the multiple of 40 so i'm gonna keep it 120 so like 120 by 120 see if i put it 20 then snake and april will not align it has to be multiple of 40. so just to make it generic you can do something like this also and of course you need our draw function to draw the apple and how does it draw work well it will be i can just copy paste this code so there is no for loop of course so here instead of solves that lot i'm just saying self.image and x and y i'm painting here i probably don't need fill here because fill i will do it in a snake draw function okay all right so now i have my apple here now apple i need to initialize in my game class okay how i initialize snake so i will just say this is my apple and the parent screen you need to pass and then you need to say draw now when you are running this event loop see here you are saying self.snake.work so here also you need to draw your apple otherwise what happens is in the walk function you are uh in a draw function you are clearing the screen so it will clear the apple so that's why we need to do this so see ice i see the apple now which is good um okay now one thing i noticed was right now i have two objects if you have like four or five ten objects and you have to keep on doing things as object.draw so just to modularize my code i will write a method called play in my game class and this method play will have those two methods and then it's just working the same but at least code wise when you read it it's like in your full loop okay in your while loop play and play is doing all the drawing okay so far we are moving over snake and there is an apple but there is no actual game logic which is if snake eats the apple it should increase the length and then april should move to a different position so in this video we are going to implement that logic now collision detection is a very common thing in any of any video game so we are going to implement that concept so first we will write a function in our game okay so what do we want to do just think about it when snake's head hits the apple we want to increase the score so how do you detect that so just just think about it so let me open uh paint and kind of go over that a little bit so let's say your this is your application screen and let's say this is your name this is your snake right so it's just uh like a couple of blocks i'm just going to make it bigger and it is just uh list of blocks nothing else right okay so let's say this is my snake and let's say this is my apple now the apple also has a bounding box so apple is actually a circle it's an icon that you're showing so it will be like this and when you hit that apple what's happening is let's say this snake comes here for example this guy here let's say comes into this area let's see this is collision right so here what happened is actually the the y the x of both of these are same the snake is moving up but what has changed is the y so just think about why so this is your y correct y one let's say this is for apple and this is your y two for your head of the snake right so this is the axis that i'm referring to and for y one this is the point that we're referring to now what happens is when they collide see y one plus size is what so y1 plus size will be this much see y1 plus size is basically this much size is the height of the apple so now what happens is y2b y2 is in that boundary it is in y1 plus psi so if you do let's say y1 plus size this y2 now is in that boundary you got it so my y2 is now less than y1 plus size so this is how you can detect the vertical collision same thing with x okay so we are going to implement that method as per that logic which i just explained so in the collision always you're trying to decide if two rectangles are colliding so then you will always have x1 y1 x2 y2 okay and if x1 is less than equal to x1 plus size see the width and height of both apple as well as the snake block is 40 so that's what we have initialized size to be 40. so x1 is less than that and actually x1 is uh so the logic will be x1 is greater than equal to x2 let's think about y first okay so why here your y2 is less than y1 plus size okay so similar logic you can apply for x1 as well so x1 is greater than equal to x2 and x1 is less than equal to x2 plus size and the same logic applies for y1 and i'll go to the diagram and explain you in a bit but if the same logic for y if both of these conditions are true then you return true saying that there is a collision this means there is a collision otherwise there is not according okay so let's let's understand this y1 greater than equal to y2 and y1 less than equal to y2 plus size okay so here so here this is being my y one so let me just uh here in my code at least see i have this as y2 and this as y1 so what's happening is see let's look at this logic here so that logic will go here this is the logic we have right what this means is let me just put it in a bigger window what this means is uh my y1 is less than y2 plus psi so we you already saw this y1 okay is less than of y2 plus size okay and ah your y1 is greater than equal to y2 so y1 is greater than equal to y2 okay so you can just debug the code and kind of figure out what it means here actually hold on y 1 is greater than equal to y 1 is actually less than so i think previously what i was doing is correct which is see it can be either way like so i think this is y1 and this is y2 okay this is white and this is y1 plus size so if you look at this let's say if you think about this as a y axis so y axis starts from zero first right so it will be zero here then it will be whatever like maybe 5 here and 20 and so on so it is increasing in this direction so if you think from that perspective the y1 is greater than equal to y2 right so this condition is met and y1 is less than equal to y 2 plus psi so if you have y 2 here and if you do y 2 plus size which is 4 t so this block so y 2 plus psi so y 2 plus size is this much right so y y1 is less than that that's why this collision logic works so just debug it you figure it out this is a simple logic now when snake hits uh the apple you want to increase the length okay so here in the play section if self dot is collision okay and you you want to check the impact with only snakes head actually because you don't need to check it with the body so snake's head is the position zero and then you will say this apple dot y so checking the coordinate of apple and snake's head which is at element number zero and if you find a collision you will say this print collision occur right now just do let's do this much uh just to make sure things are working okay and uh after that let's see if we have anything pending so you're doing collision okay let's run it so you see that you see this collision occurred message right so that means the collision happened and now we can whenever collision happens what we want to do is we want to move the apple to a different position different random position so let's write the code for that so we'll say apple dot move so this means once snake apple hits the apple we move apple to a random position and for that you can come to this class here apple and write this method called move so here you will move uh this two to a random position okay now how do you do that so there is a model called random which you can import here and i'll show you see if you do idle uh i'll just quickly show you how random works so random has this function called rand end so if you give lesson 1 and 10 it will give you a random number between 1 and 10. see every time you run it gives number between 1 and 10. now our window is thousand thousand by 800 correct and apple's size is 40. so if you do little calculation thousand okay divided by 40 you get like 25 increments and if you do 800 divided by 40 you get 20 so you get like this horizontally 25 increment of 40 and vertically 20 increment of 40. so what i can do is here i can say random dot random okay give me a number between 0 and 25 so horizontally i have 25 increment into size so what will happen here is if you look at idle let's say between you know like 1 and 25 i'll just do one because or 0 is also fine and size is 40. so see every time it gives me a number which is always gonna be less than thousand so we don't go out of our window boundary and the number will be divided by 14. it will be a multiple of 40 and i did the same thing with pi so for y with 800 height you can get 20 increments okay so you after the collision you move it so let's run this see after i'm colliding so my collision detection is happening perfectly okay and the snake is moving okay now on collision you want to increase the size of the snake so that will be a score so in the initial phase i will maybe i'll start with the snake size of 10 2 or maybe one and then i just keep on incrementing the length okay so on collision you want to increment the length so here okay where is my collision yeah here you want to say length you want to increment right but you have to do something else as well which is when you increment your length see you need to add one more block in this x and y because x and y is an array it is holding the position of the new block so for that reason i will just write a new method here called increase length okay where you first of course you first increase the length but then you want to add something into x and y so this is how you add a new element into an array and i'm adding 1 as a value you can always tackle this in your walk function in your work function we'll put a right coordinates of x and y that's why we can just start with some random value here so here i will say increase length and let's run this see now after it hit it it the size of snake is 2 now see it is 2 and if i hit it again it will become 3 you will watch it deny it become 4. pi and so on okay i think i noticed something weird ah see if it moves even near near say i'm not going through apple if i go even above apple this is fine if i'm going even from near apple it is increasing the weight and i think that's because of this less than equal i think this should be probably less than see now it's working as expected so now it increase the length and so on so here also apple moved to a very far position so i want to restrict it so i'll just say 40 this is 90 on 0 0 position is probably okay all right so this is looking pretty good so now next thing i want to do is display the score okay so in my game function i will write a method called displace code and this should just display the score at the maybe top right you know i will choose top right to dis for displaying the score and pi game has this font module so i'm using the system font which is area with the 30 font size you can increase it as well and then uh this font i will store into a variable called score so this is how you do it and here the score is nothing but the snake's length okay so i'm using python format string storing it uh storing the score there and in render function this is uh your color so if you do like 255 to 55 255 it will be white color so you can choose whatever color you like and then you know we always have a surface so whenever you want to show anything on the surface you have to use blit function and then what are the coordinates well let's say 810 so that there will be top right corner and once you do that here i can display the score and after displaying score of course you have to do buy game dot display dot flip so you see the score at the top here okay so now ah c score increase two score is equal to the length of my snakes three zero i'm doing good wonderful my game is coming up so nice guys so in last session we calculated the score by finding out the collision between a snake and an apple in this session we will work on a game over logic which is if the snake is curling around and if it hits its own body then the game is over so for that again we are going to use this is collision function right so here let me just run it and tell you what exactly i'm trying to do so here let's say you have a snake of size seven when you run it ah see if you get into this situation you see like when snake is crossing itself then we want to exit the game so this was a logic of snake colliding with apple now we are writing a logic of snake oh gliding with and for that you know snake has a number of blocks right so you can just do for i in range 0 to self dot length now what type of collision you're trying to find well you want to find out if the head of the snake which is x0 collides with itself or not so if you look at whatever this diagram that we have let me just clean it all so here let's say this is my snake okay and let's say it's moving moving moving and it makes a ton like this and it makes it turn like this and then it again goes here then that's collision so then that's when you should die so this guy is the head so you want to find a collision of head with remaining blocks so you will say if self dot is collision okay position of what self dot snake dot x sub zero set dot snake of y zero because x zero and y zero is ahead with remaining blocks so x of i and y of y now since we are finding a collision with x0 we can start with one okay now let's think about it even we can optimize later later so this head of the snake will never collide with the next part you agree no matter what happens it will never ever collide with this and i think same thing will happen with the third block can it collide with third block no so 0 1 2 so maybe you can start with 3 directly so here we can start with 3 and if there is a college collision for now let's say you want to exit the game you'll say game over and exit it okay okay i don't know what happened it went out of the boundary see when it when it hit itself it it is exiting with that game over message so logic wise is working fine but what i want to do is when that thing happens i want to show a nice message saying that the game is over and um also if they want to replay then we should give some them some option of replaying let's say if game is over if they hit enter then we want to uh give them that option okay so first of all i'll remove this and instead of that i will raise an exception see exception means so exception raising exception means something unusual happen and you want to go out of the game and you're throwing an exception and here you have to catch that acceptance and this is how you do it if you don't know about this again follow my basic python videos and you will get an idea on this exception and here all right what do you want to do here i want to maybe show a game over message okay and that game over message uh let's see what do we want to do so in the game over message here show game over here in this method i want to display a nice text in the middle saying that the game is over uh and for that first you need to clear clear the surface right because uh whatever you have you want to wipe out you just show a message so here for fill which color did we use well we use this i'm going to store this in a variable called background color okay so background color is equal to this and i will see whenever in programming language when you are using something more than multiple time more than one time it's better you create a variable okay and once the screen is wiped out now you can render your text so but that will use the this thing like font your lead we already show the score so we can use the same thing here and okay so i'll say line one spawn dot render something so what is our score so we want to show the score to a user and then we want to exit the game so you see score this one so i'm just copy pasting the same thing and i'm showing it in white color you can change this this color this is rgb and self dot surface dot grid and anytime you want to show anything on a surface this is what you call and i am showing an x and y's is 200 200 300 which is in the middle of the screen i want to also show another message saying that to play the game again you can hit enter maybe and i will just show line two and 350 name okay so show game over let's see what happens okay something is not right so show game ever is here okay so let's turn so i realized this was happening because i did not have flip in the shoe gaming work so whenever you are making any ui changes you have to call pygame.display.flip so ui is ref this is like refreshing your ui so now see so game over message is showing up but then it's again restarting the message i restarting the the the game and why is that happening well that is happening because just think about it you show this message okay after that you wait point two second you're again going into this loop see again processing all those keystrokes so we have to implement a pause mechanism here so we'll say okay pause is false and when the game is over pause becomes true and when the game is paused by the way i don't want to uh process all of this right so game is paused here yeah if the game is paused i don't want to process even left right all these keystrokes or yeah this one if not pause i don't play the game if if it is paused correct so this is something you don't want to do also okay let's let's run just this and see what happens the game is over now now i hit anything and it's not go it's not restarting so we said to play again press enter so if you press enter you want to unpause it so how do you do that well here you can say if event dot key is equal to k enter is basically return and here you will say pause is true okay so pause is false actually so here okay game exited okay i'm pressing keys nothing is happening and when i hit enter say game started again also just to make it safe you don't want to process even left right keys if the game is pauses pause guys you don't want to do anything so don't process all these keystrokes if the game is paused simple enough all right now let's see what's remaining so after the game is paused see my score is right now let's say eight nine score and game exits my score is nine if i hit escape i go out but i want to play this game again so when i hit enter see it is starting with score 9 again so that is bad because you are not resetting the game so here you need to reset the game so you will call selfloath reset method and reset method is something you will implement here so you will say reset okay how do you reset the game well whatever snake and apple you have you just reinitialize those two and i'll initialize it with one okay so when the i have scored seven and when the game is over when i hit enter see i start fresh with score one okay so i think you get an idea and by the way i don't want to start with like score seven in the beginning as well so here also i do want so that way you know you always start with one block then it increases ah my apple moved out see my apple is moving out where is it yeah this is happening because we have we need to reduce this limit maybe yeah because it's probably moving too fast so that's why i'm reducing the limit and i hope it works now yeah so far our project is working fine it is functionally correct but it doesn't look very fancy because it doesn't have any music the background is dull so in this uh session we are going to add background music as well as the background texture or to this game for this what we'll do is whenever snake is eating an apple will play some music like ding or something when the snake collides with itself we'll play another music and then in the background also we'll keep on playing some music so first let's take a snack eating apple scenario so you need a short music clip first of all so for that i did some google found this nice website presounds library which has this ding sound so see if you play this link sound see chin so we'll play that when snake it apple so in the resources directory i downloaded that file so say ding.mp3 and for collision crash so when it collides with this we will play this music okay now when you do google on pi game pi game play sound you will find this class in pi game called mixture which has a sound element to it okay so we'll be using pi game mixture for playing music and in that you first need to do pygame dot mixture dot in it so let's do that it will initialize the mixture model so let me just first go into my meditative zen mode all right so no distraction now you go away buddy all right so here in the init i will say pygame dot mixture dot in it so my sound module is initialized now when i have a collision or let's say yeah when i sneak eat apple i want to play the music so how do you play that so you will just say simply by game dot mixture dot sound okay and in the sound you will use resources i will use ding music and let's store this in a variable called sound and then you can just say pie game dot mixture dot sound dot play so that plays the sound so i'll right click run it see when snake hits apple it will play the music c listen carefully see ding okay and when it collides you'll be playing the crash music so here i'll just say crash so let's taste that as well putting guys working okay see your game is over your score is three so that sound that you just saw now whenever in your big program you find that you are repeating the lines of code it's better to put them in a function here between these two line and these two line the only difference is this name of the sound so what i can do is i can put these two into a function called play sound let's say you know and we can supply the name of the sound as well actually so here see here i can do self dot play sound but i need to tell this function that it needs to play ding so i will just say ding here which i can get that as an input sound and here i can maybe convert it to python format string and here if you have sound variable so whatever you pass here it will try to load that dot mp3 file so here in this case it will be crash okay and now tomorrow if you want to play 10 more sounds you just call that function with the name of the file if you don't want to use name of the file then you can just check here like if sound is equal to ding then that's your file okay all right so you can run it it will work okay now i want to play background music as well while the game is being played you know you want to hear nice music so i have downloaded this background music from youtube audio library so that music i will play in the background so again i will define a function called play background music here in here i will be playing that music so now this time instead of sound i will use music so the difference between the music and sound is that sound is just one time like dingo crash music is like a long music which you use generally as a background music and resources okay and then buy game dot make sure music dot play so that will play the music and you want to call this function when the game starts right there itself you want to start playing the music okay so okay initially there was one or two second pause because the game itself the music itself has a pause okay now once this is done what you want to do is see when the the game pauses for example when you hit like when you hit snake body okay you want to stop the music so let me show you what i mean see music is still playing i want to stop music and when you restart then maybe start the music so when you have game over scenario here game over right here during this time maybe i can call pygame dot mixture dot music dot pause so it has a nice method called pause so it will just pause the background music okay and uh you want to resume it when user hits enter so when this is when you are unpausing it so here you can say pygame dot make sure dot music dot on pause okay and now it will pause and pause easily the music stop now and when you start again it will uh restart the music again now i want to change the background of our game so for that i have downloaded this nice texture so this looks like you know grass field on which snake is moving around so i will set this as a background in our game so for this purpose i will here define a new function called render background you know and you know like like image you can load easily by calling pygame dot image dot load and here you can load this background image and if you want to show this image you know that that you have to use this blit function okay so try game dot actually sell where you specify where you want to draw the image on your surface and x and y so we want to render this background from zero zero corner all the way right now this background size is actually you see 1920 by 1080 and our window size is thousand by 800 so it will work okay now this render background i will do why should i call this function you know what we are doing this background color so wherever we are calling this function you have to replace that with rendered background so here self dot okay now this is weight so this is different class actually so here you're drawing it right so you're drawing snakes so where do i where do i draw snake here here yes here so here i have to say render background because you draw apple and everything so just before that you have to render the background okay where else did we use oh show game over so here also self dot render background so now see nice background you know it looks looks pretty good so you can play with the background the apple image the score fonts and make your game little more fancy the code for this entire project is available here i have python projects directory where i will be uploading more python projects so please keep an eye right now it's just one project snake game and if you go to that project by clicking here by the way my next project is gonna be document text extension using ocr and there'll be different projects that i'll be covering but for this project i have an exercise for you so if you scroll down the exercise is whenever snake hits the left or right or bottom boundary or top boundary you want to exit the game okay so game should remain in the field if it goes out of the field then game is over so you need to add that logic second thing you need to do is increase the game speed you know in the game whenever you go to next level the challenge the difficulty level increases so that's what you're trying to do here once you develop your own solution then you can click on my solution by clicking on this link but please try to work on your own first before you click on this solution now that your game is ready you want to convert python file into exe file exe file is an executable file which you might have used it for different programs so this is something you can give it to your friends and your friend can just use the exe and run the game so this completes the whole game development cycle when i google convert python to exe i found this nice module on pi pi so just do pip install this particular module on your computer to install it so if you do this it will just install that particular module and once it is installed you can run this command on your command prompt and it will open a nice user interface where you specify your file that you want to convert into exa so this is the final file path so i supply that second option is either you want to create the whole directory or just one executable file now you would probably prefer this because it just creates one exe file so you can do that but right now i'm having some python 3.8 incompatibility issue so for me it is not working as of today but you just try it it might work for you so i will just go with one directory in the additional files i want to specify add folder because i want to specify all the resources the resources has background music and everything if you don't do this the it will not work so this is a very important step and then you just click on this command say convert that to exe so internally this tool is taking your python file and generating the binary or the dot exe file for you i selected the directory options so it will create a big directory but if you choose one file option it will create just one file for you once this is done click on open output folder because that's where your exe file is so okay since i created directory it it has created the whole directory here okay see this is what i got and if you click on this exe now see my game is playing this is my game guys now you can right click this and you can say send to desktop and when you do that it will create a shortcut on desktop so let me show you so it created this shortcut and now see whenever i log into computer i want to play the game i double click say it's like just any other program you see so now you can take this folder zip it or there is an option to convert it into installer as well you can convert it to installer and um give it to your friends and you can be now proud about yourself because you build the complete game you can use these learnings that you did in all these videos and maybe make a different game maybe you can make tic tac toe or different type of games so now you are capable of building fullfledged game in python so i hope you like this series if you did please uh share this project with your friends i have complete source code available here along with exercise the solution everything so all you need is a laptop and internet and a little bit willpower to learn this thing these things are super easy these uh this project is perfect for even kids you know if you are in fifth grade fourth grade you learn a little bit python from my videos and then you do this and you will be able to build cool games so i hope you liked all these videos and thank you very much for watching
