With timestamps:

00:00 - in this course you will learn how to
00:01 - integrate a react application with a.net
00:04 - API component Gavin Lon teaches this
00:07 - course Gavin is a freako camp team
00:09 - member and one of the creators of our
00:12 - popular full react course
00:14 - hi and welcome I'm Gavin long
00:17 - in this video we are going to build a
00:19 - basic react front end that queries a web
00:22 - API component written in C sharp so by
00:26 - going through this video you'll learn
00:28 - one of the easiest ways to create a
00:30 - react application that leverages a.net
00:33 - web API component
00:35 - we'll code this application using visual
00:37 - studio 2022 Community Edition which can
00:40 - be downloaded free of charge
00:43 - I've included a link in the description
00:45 - of this video that points to where you
00:47 - are able to download visual studio 2022
00:50 - Community Edition for both Windows and
00:53 - Mac OS platforms the function of this
00:56 - basic application enables users to rank
00:59 - items by dragging and dropping the
01:01 - relevant items for example well-known
01:04 - movies
01:05 - onto a grid each cell in the ranking
01:08 - grid denotes a ranking value
01:12 - so basically the item that has been
01:14 - dragged to the top left ranking cell is
01:17 - ranked number one
01:19 - the item to the immediate right of the
01:22 - top left ranking cell denotes a ranking
01:24 - value of two and so on
01:27 - the worst possible ranking is 16.
01:30 - denoted by the cell in the bottom right
01:32 - cell of the ranking grid
01:35 - this is of course not an original app
01:37 - but I thought this would be a great way
01:39 - to demonstrate writing a basic react
01:41 - front end that leverages a web API
01:44 - component
01:45 - that runs on.net 6. okay so as you can
01:49 - see I got myself a green screen
01:51 - the only problem that I can think of
01:53 - about having a green screen is that you
01:55 - run the risk of getting carried away
01:59 - okay so I'm glad I got that out of my
02:01 - system let's get into this video
02:14 - let's fire up visual studio 2022
02:19 - the project template that we want to use
02:21 - for this project is named asp.net core
02:24 - with react.js
02:48 - so let's select this item and press the
02:50 - next button
02:51 - let's name our project ranking app
02:57 - let's press the next button
02:59 - as you can see we are going to build
03:01 - the.net part of this application on.net
03:03 - 6. let's press the create button
03:07 - great let's take a brief look at the
03:09 - project structure that has been
03:11 - automatically generated for US based on
03:13 - the project template that we have chosen
03:17 - to access the client-side code we can
03:19 - open the client app folder here
03:22 - then we can look at the react components
03:24 - that have been automatically generated
03:27 - within the SRC slash components folder
03:31 - we have the counter component the fetch
03:33 - data component and the home component
03:38 - then to look at the auto-generated
03:39 - service site.net code we can open the
03:43 - controllers folder here
03:45 - we have the weather forecast controller
03:48 - class
03:48 - which contains code for a.net web API
03:51 - component
03:53 - if we look here we have the get action
03:55 - method that represents the get verb
03:58 - pertaining to a HTTP get request
04:04 - this method returns an array containing
04:06 - made-up weather forecast related data
04:10 - this code has been generated for us
04:12 - through the use of the relevant project
04:14 - template to give us an example of how
04:17 - the interaction between the front-end
04:19 - react code and the.net backend web API
04:23 - code can be implemented in our project
04:26 - the react client component named fetch
04:29 - data calls the weather forecast.net web
04:31 - API component and displays the weather
04:34 - forecast data returned from the get
04:36 - request to the browser the counter
04:39 - component demonstrates basic react
04:40 - functionality
04:42 - but when we click the fetch data menu
04:44 - option
04:45 - the code within the fetch data react
04:48 - component is invoked and calls the
04:50 - weather forecast
04:51 - server-side.net web API component and
04:53 - displays the data that is returned as an
04:55 - array to the client on the user's
04:58 - browser
05:00 - you can see that the asp.net core with
05:03 - react.js project template automatically
05:06 - generates code for us to facilitate the
05:09 - integration of a.net web API component
05:12 - with the client-side code implemented
05:14 - using react.js
05:17 - so let's create a folder here named
05:18 - models
05:33 - let's add a c-sharp class to the models
05:35 - folder and let's name our class item
05:38 - model
05:38 - in this video we are going to develop a
05:41 - basic application that enables a user to
05:43 - rank movies and albums we'll first
05:46 - create the code whereby a user can use
05:48 - our application to rank a collection of
05:50 - movies
05:51 - but we want our model class to be
05:53 - generic so the item model class can also
05:57 - be used to represent for example albums
05:59 - or other types of items we want users to
06:02 - be able to rank using our application
06:05 - so the item model class can represent
06:07 - any type of item that we may wish to
06:10 - integrate into our application so this
06:12 - helps our application to be extensible
06:14 - let's include an ID Auto implemented
06:17 - property of type integer let's include a
06:19 - string property named title
06:22 - let's include an integer property named
06:24 - image ID each item will have an
06:28 - Associated image our application will
06:30 - contain a collection of images that are
06:32 - uniquely identifiable so each item will
06:35 - be associated with one specific image an
06:38 - item has a one-to-one relationship with
06:40 - an image in the system you'll clearly
06:42 - see how this works as we progress with
06:44 - the creation of this application let's
06:47 - include an integer property named
06:48 - ranking
06:50 - this property represents the ranking
06:53 - value that a user can assign to a
06:55 - particular item let's include an item
06:58 - type property of type integer in this
07:01 - application we are going to allow for
07:03 - the user to rank a collection of movies
07:05 - as well as albums
07:08 - so we are going to assign movies the
07:10 - item type identifier value of one and
07:14 - albums the item type identifier value of
07:17 - 2. so item types have a one-to-many
07:19 - relationship with the items in our
07:21 - system this will be clarified as we
07:24 - progress with the development of the
07:25 - application
07:27 - so let's create our controller class
07:29 - within the controllers folder let's add
07:31 - a class and name it item controller this
07:34 - class will contain an action method that
07:37 - will service HTTP get requests from
07:39 - clients when a valid request is made to
07:42 - the relevant get action method the
07:44 - action method will query a collection of
07:46 - items and return an array of items for a
07:49 - specific item type to the appropriate
07:52 - react client component so for example
07:55 - if a client requests an array of items
07:58 - that have an item type of one
08:00 - an array of items representative of
08:02 - movies will be returned to the client so
08:05 - to make our class a controller class
08:07 - let's first make our item control across
08:09 - inherit from the controller Base Class
08:16 - let's press Ctrl period and bring in the
08:20 - microsoft.asp.netcore.mvc namespace the
08:23 - next step in making our class controller
08:25 - class is to decorate the item controller
08:27 - class with the API controller attribute
08:32 - in order to declare appropriate routing
08:34 - information for our controller class
08:36 - let's appropriately decorate our item
08:39 - controller class with the root attribute
08:41 - let's pass in the text controller
08:43 - wrapped in square brackets as an
08:45 - argument to the Constructor of the root
08:47 - attribute
08:48 - so I want to keep the server-side web
08:50 - API component code really basic because
08:53 - the focus of this tutorial
08:55 - is how to easily Implement interaction
08:57 - functionality between a react client and
09:00 - server-side web API code implemented
09:02 - using.net
09:03 - so for the sake of this basic example we
09:06 - are going to implement the data on the
09:08 - server side as a static collection
09:10 - rather than for example storing the
09:12 - relevant data in a SQL Server database
09:14 - in a database table if this was a real
09:17 - world application of course we'd want to
09:19 - persist the relevant data and for
09:21 - example a relational database storage
09:23 - facility black SQL server or perhaps a
09:26 - nosql storage facility like mongodb
09:30 - we could then use for example Entity
09:32 - framework core to interact with
09:34 - whichever storage facility we have
09:36 - chosen
09:37 - So within our item controller class
09:39 - let's create a private static read-only
09:41 - Eye enumerable collection that is
09:43 - strongly typed with our user-defined
09:45 - type item model
09:47 - let's name our collection items note
09:50 - that rather than follow me here tapping
09:52 - away at the keyboard to declare and
09:54 - populate our items collection you can
09:57 - copy the relevant code from this URL
09:59 - that points to an appropriate GitHub
10:01 - webpage
11:23 - so you can see here we have in our
11:26 - collection references to well-known
11:28 - movies The Godfather Highlander
11:30 - Highlander 2 The Last of the Mohicans
11:34 - Police Academy 6.
11:37 - rear window Road House
11:40 - the Shawshank Redemption Star Trek 4 the
11:43 - return home and Superman 4.
11:54 - so this get action method accepts an
11:56 - argument of type integer named item type
12:02 - let's create a link query that queries
12:04 - our collection of items in order to
12:06 - filter the items collection based on the
12:08 - item type value passed in from the code
12:10 - that we'll write a bit later within a
12:13 - react component note that at the moment
12:15 - the items in our collection denote
12:17 - movies so only one type of item is
12:20 - currently stored within our collection
12:22 - later on we'll extend our code whereby
12:25 - albums will be stored within this
12:27 - collection
12:29 - so in order to tell.net as it were that
12:32 - this get method pertains to a HTTP get
12:34 - request we must decorate our get action
12:37 - method with the HTTP get attribute we
12:40 - must also pass in this text denoting
12:42 - that an argument of type int must be
12:45 - passed as an argument when the relevant
12:47 - get request is made from the client
12:52 - let's create a react component
13:14 - let's name this file rankitems.js
13:27 - for those of you who wish to learn the
13:29 - basics of react or wish to refresh your
13:31 - knowledge I've recently contributed to a
13:34 - project-based react for beginners course
13:36 - for freecodecamp.org I've included a
13:39 - link to this course Below in the
13:41 - description of this video
13:51 - I'm really happy to have contributed to
13:53 - this course along with two other
13:55 - instructors John smilga and sanjif Theo
13:59 - garajan
14:01 - John and Sanjeev are both excellent
14:03 - instructors and very well known I've
14:06 - included links to their YouTube channels
14:08 - Below in the description of this video
14:14 - let's write the code to import the use
14:16 - statehook and the use effect hook into
14:19 - our rank items component
14:41 - let's create a basic structure for our
14:44 - functional component
15:08 - let's write the code to return some
15:09 - basic jsx code from our component
15:21 - let's write code to implement the use
15:23 - State hook so that react can track the
15:26 - state of the items collection returned
15:29 - from the server through the code that we
15:32 - have just implemented for our item
15:33 - controller class
15:35 - so you can see here we have a
15:37 - destructured array returned from the use
15:39 - statehook the first variable returned
15:42 - pertains to the items collection data
15:44 - that will be initially retrieved from
15:46 - our server-side code and the second
15:49 - variable pertains to a function that can
15:51 - be used in our react component to change
15:53 - the state of the item's variable
15:57 - we'll appropriately implement the code
15:59 - to change the state of the items array
16:01 - in just a bit
16:03 - note that at the moment we are setting
16:06 - the items array to an empty array by
16:08 - default this is denoted by the empty
16:10 - square brackets we are currently passing
16:13 - in as an argument to the use State hook
16:16 - here
16:17 - so when our rank items component first
16:20 - loads we want our codes to call the
16:22 - appropriate web API component in order
16:24 - to retrieve the relevant items
16:26 - collection data from the server and then
16:28 - we want our code to change the state of
16:30 - the items array
16:32 - we are able to implement code that
16:34 - executes when our component first loads
16:36 - by using the use effect hook in a
16:39 - specific way
16:40 - to achieve this we need to pass a
16:42 - function as the first arguments to the
16:45 - use effect hook and pass empty square
16:47 - brackets denoting an empty array as the
16:50 - second argument to the use effect hook
16:52 - let's write code for an anonymous
16:55 - function that we are passing as an
16:57 - arguments to the first parameter of the
16:59 - use effect hook
17:01 - so we want our code to return a
17:03 - collection of movie data from our web
17:05 - API component
17:07 - we can use javascript's fetch method to
17:10 - make an appropriate HTTP get request to
17:13 - the relevant endpoint
17:15 - we need to pass a value denoting the
17:17 - item type value to the server
17:19 - in the rules of our application a value
17:21 - of 1 for the item type argument means we
17:24 - want to return a collection containing
17:26 - data for movies
17:28 - a value of 2 for the item type argument
17:30 - means that we want the collection to
17:33 - contain data for a collection of albums
17:35 - we haven't yet added the data to our
17:38 - server-side code for the collection of
17:39 - albums but we'll start by testing the
17:42 - code for retrieving a collection of
17:43 - movie data so the data type variable on
17:46 - the client has been initialized to one
17:49 - which means the relevant web API
17:51 - server-side code should return a
17:53 - collection of items with an item type of
17:56 - one movie data the data is returned in
17:59 - Json format if our code gets to this
18:01 - point and a valid collection of movie
18:03 - data has been successfully returned from
18:06 - our web API component we can use the set
18:09 - items function to change the state of
18:11 - our items variable when a variable
18:14 - status tracked through the use of the
18:16 - use statehook and its status changed
18:18 - this means that the state of the
18:20 - component has changed when the state of
18:22 - a react component changes the react
18:25 - component is re-rendered
18:28 - so the code within the returned jsx code
18:30 - is transpiled into code that a web
18:33 - browser understands before it is
18:36 - re-rendered inside the user's browser
18:38 - window the code is appropriately
18:40 - re-rendered really fast which is what
18:42 - makes react such a great choice for
18:44 - implementing user interactive front-end
18:46 - code for the web
19:19 - so we have now created basic code for
19:22 - our rank items component that retrieves
19:24 - appropriate data from the server then
19:26 - changes the state of our component which
19:28 - results in our component being
19:30 - appropriately re-rendered the next step
19:33 - is to appropriately modify the app
19:35 - root.js file let's open the approots.js
19:39 - file
19:54 - let's modify the app Roots array in
19:56 - order to add a new route that points to
19:59 - our rank items component as it were
20:21 - we must of course also write code to
20:23 - import the rank items component into our
20:25 - approot component
20:32 - great
20:34 - so we have told react as it were about
20:37 - how to access the rank items component
20:39 - through the code that we have just
20:42 - written within the app Roots component
20:45 - the next step is to include the relevant
20:48 - link within the nav menu component
20:51 - to provide a way for the user to
20:53 - navigate to the rank items component as
20:56 - it were
20:57 - let's open the file named navmenu.js
21:10 - let's appropriately include a nav item
21:13 - element and include a nav link child
21:15 - element within the nav item parent
21:17 - element
21:20 - let's ensure that the path that we have
21:22 - appropriately included for the rank
21:24 - items component within the app Roots
21:25 - array is appropriately included within
21:28 - our new nav link element
21:31 - we can do this by appropriately
21:32 - assigning the relevant path to the rank
21:35 - items component to the two property of
21:38 - the nav link element
21:55 - let's run our code and test whether we
21:57 - can invoke the rank items component by
22:00 - clicking the appropriate navigation link
22:01 - that we have just created
22:30 - okay so why has that not worked
22:35 - by using the asp.net core with react.js
22:39 - project template to create our project
22:42 - code has been automatically included
22:44 - within our project to make the
22:45 - interaction between the react client
22:47 - code and the server-side.net code easy
22:50 - for us to implement
22:51 - so all we need to do is tell our client
22:54 - react code as it were about our
22:57 - server-side controller class and we can
22:59 - do this by simply including a reference
23:01 - to item our item controller class in the
23:05 - context array like this
23:07 - you can see here by default the context
23:10 - array includes an item denoting the
23:12 - weather forecast controller class that
23:14 - is used by the fetch data react
23:16 - component to retrieve weather forecast
23:19 - data from the server that can then be
23:21 - rendered through the fetch data
23:23 - component
23:25 - so we can include a new entry into the
23:28 - context array that tells our client-side
23:30 - code as it were about the items
23:32 - controller code on the server
23:42 - let's run the code
23:54 - and you can see that our break point has
23:57 - been hit within the get action method
23:59 - within the item controller class
24:01 - excellent our rank items react component
24:04 - is now successfully communicating as it
24:06 - were with the appropriate server-side
24:08 - web API code
24:10 - and each movie title is rendered to the
24:12 - screen when our rank items component is
24:14 - re-rendered after the movie data is
24:16 - successfully retrieved from the server
24:18 - and the set items client-side function
24:21 - is called to appropriately update the
24:23 - items array with the movie data
24:25 - retrieved from the server this of course
24:27 - changes the state of the rank items
24:29 - component and the relevant front-end
24:30 - code is appropriately re-rendered to the
24:33 - browser
24:48 - excellent
24:50 - so if our code was retrieving a large
24:52 - amount of data from the server it would
24:55 - be a good idea to show a loading
24:57 - indicator to the user while the data is
24:59 - being delivered from the server to the
25:01 - client
25:02 - providing such status information to the
25:04 - user provides a better ux user
25:07 - experience so to simulate that a large
25:09 - amount of data is being sent from server
25:11 - to client let's create an artificial
25:13 - delay on the server like this
25:29 - so you can see here that an empty array
25:32 - is currently set by default in the
25:34 - relevant use State hook
25:35 - so of course the array will never be
25:37 - null
25:39 - so in the return code here
25:41 - instead of checking for a null value
25:43 - let's check the number of items in the
25:45 - array so while the array is empty I.E
25:48 - has not yet been brought down from the
25:50 - server we want a loading indicator to be
25:53 - displayed to the user
26:19 - great
26:21 - so instead of just displaying the movie
26:23 - titles to the user's browser we want the
26:26 - poster images for each of the movies to
26:27 - be displayed in a list
26:29 - to do this let's first create a new
26:32 - react component that has the
26:34 - responsibility of importing Movie images
26:36 - into our application
26:54 - let's name the relevant react component
26:57 - with the images.js
26:59 - before we write the code for this
27:01 - component let's create a folder within
27:04 - the SRC folder named images
27:09 - I've prepared the movie images for our
27:11 - application and they can be downloaded
27:13 - from this location on GitHub
27:16 - so let's create a folder within the
27:17 - images folder named movies
27:31 - and let's ensure that the images that we
27:34 - have downloaded from the relevant GitHub
27:36 - repository resides within this movies
27:39 - folder
27:52 - let's write the code to import the
27:54 - images from the movies folder
27:57 - we can do this by including the
27:58 - appropriate import statements at the top
28:00 - of our movie images.js react component
28:03 - like this
28:18 - if you like this video please give this
28:20 - video a thumbs up and please feel free
28:22 - to share this video with anyone you feel
28:24 - May benefit from its content
28:27 - please also consider subscribing to the
28:29 - channel and hit the Bell icon so that
28:31 - you'll be notified of future content
29:20 - let's create an array to store these
29:23 - imported images
29:51 - then let's write the code to export our
29:54 - array so that other components can use
29:56 - the array
30:34 - within the div element that will wrap
30:36 - the list of movie images that we want
30:39 - displayed from within the rank items
30:41 - component let's reference a CSS class
30:44 - that we'll write in just a bit named
30:46 - items Dash not Dash ranked
31:01 - then let's write the jsx code to Output
31:04 - each of the images to the screen from
31:07 - within our rank items component
31:27 - note that each item that our code
31:30 - traverses has a property named image ID
31:32 - which corresponds to an ID property of
31:36 - an object stored in the movie image
31:38 - error array let's write code that uses
31:42 - the JavaScript find method to find the
31:45 - appropriate image for each item
32:30 - great but the images are of course too
32:32 - big so we must style our images
32:34 - appropriately let's first create a div
32:37 - container element for each of the
32:39 - relevant image elements
32:52 - let's include a reference to our CSS
32:55 - class for each of our div container
32:57 - elements let's call our CSS class
32:59 - unranked-cell
33:02 - let's open the custom.css file and
33:05 - create the appropriate styling code
33:07 - so firstly let's create the appropriate
33:09 - CSS code for the items Dash not Dash
33:12 - ranked class
33:26 - let's then create the appropriate CSS
33:28 - code for the unranked Dash cell clause
34:03 - and let's also create the appropriate
34:05 - CSS code for the IMG elements that are
34:07 - housed within the div container elements
34:09 - that reference the unranked Dash cell
34:12 - CSS class
34:41 - excellent and we are now presented with
34:43 - a list of movie images each of these
34:45 - images denotes an unranked movie item
34:50 - so we have now created the functionality
34:52 - for displaying the movies we want our
34:54 - users to rank in a list
34:57 - so the way in which we want our users to
34:58 - rank the items is by dragging the
35:01 - relevant images onto a grid
35:03 - the position to where the user drags an
35:05 - image will result in a unique ranking
35:09 - value that corresponds to each cell
35:11 - within the ranking grid being allocated
35:13 - to the relevant item I.E the dragged
35:16 - image item which represents a movie so
35:19 - for example when a user drags the image
35:21 - representing the movie The Godfather to
35:24 - the top left position in the grid the
35:26 - ranking grid this means that the item is
35:29 - ranked number one so the item's ranking
35:32 - value is one
35:33 - so each cell in the ranking grid denotes
35:36 - a ranking value
35:38 - except for the cells in the leftmost
35:41 - column these cells are used for labeling
35:44 - purposes
35:45 - so each cell in the ranking grid denotes
35:47 - a ranking value
35:49 - the ranking value is positioned for each
35:52 - ranking cell progressing from left to
35:54 - right and top to bottom by a value of 1
35:56 - from 1 to 16. so the top left item
36:00 - denotes a ranking value of one the item
36:03 - to the immediate right of the cell that
36:05 - denotes a ranking value of one denotes a
36:08 - value of 2 and the bottom right item
36:10 - denotes a ranking value of 16. so our UI
36:14 - will give the user a great ux where the
36:17 - user can simply drag the image
36:19 - representing an unranked item to the
36:21 - chosen position on the ranking Grid in
36:23 - order to allocate an appropriate ranking
36:25 - value to the relevant item
36:28 - a ranking value of 1 denotes the most
36:30 - highly ranked item and a ranking value
36:33 - of 16 denotes the lowest possible
36:35 - ranking value
36:37 - great so let's create a react component
36:40 - responsible for outputting a grid to the
36:42 - screen that will denote our ranking grid
36:45 - let's create a component named ranking
36:47 - grid.js
37:08 - let's first create the basic structure
37:10 - for a react functional component
37:24 - so we are using de-structuring here for
37:26 - the props that the rank items component
37:29 - will pass down to our ranking grid
37:31 - component the rank items component is
37:33 - the parent component of the ranking grid
37:36 - child component
37:37 - so here the items array and the image
37:40 - array are passed down as props to our
37:42 - ranking grid component so we are going
37:45 - to create the code for the Grid in this
37:47 - component dynamically
37:49 - through appropriately coded JavaScript
37:52 - methods what I mean by this will become
37:54 - clearer as we develop the code for this
37:57 - component
37:58 - so firstly let's declare five JavaScript
38:00 - arrays
38:01 - these arrays will be used to build
38:04 - relevant jsx code that can be outputted
38:07 - from our component
38:09 - the ranking grid array will store an
38:11 - array of elements that make up the
38:13 - entire ranking grid the cell collection
38:16 - top array will store the elements that
38:19 - represent the top row in the ranking
38:22 - grid the cell collection middle array
38:24 - will store the elements that represent
38:26 - the middle row in the ranking grid the
38:29 - cell collection bottom array will store
38:31 - the elements that represent the second
38:33 - most bottom row in the ranking grid the
38:37 - cell collection worst array will store
38:39 - the elements that represent the very
38:41 - bottom where all the worst ranked items
38:44 - will reside as it were after being
38:46 - ranked by the user
38:51 - let's create the code to return the
38:54 - relevant jsx code
38:57 - let's write codes to call a JavaScript
38:59 - method named create ranking grid that is
39:01 - responsible for outputting the jsx code
39:04 - for our ranking grid
39:06 - in the create ranking grid method a call
39:09 - to a method that we have not yet written
39:11 - is made named create cells for rows this
39:15 - code is returning the returned value
39:17 - from a method that we'll write next
39:19 - named create rows for grid
39:27 - so let's work backwards as it were and
39:30 - create the code for the create rows for
39:32 - grid method
39:34 - so you can see that this code simply
39:36 - pushes jsx elements
39:38 - into a JavaScript array the first item
39:41 - in the array represents the top row for
39:43 - the ranking grid the second item in the
39:46 - array represents the middle row in the
39:48 - ranking grid the third item in the array
39:50 - represents the second to bottom row in
39:53 - the ranking grid the fourth item in the
39:56 - array represents the very bottom row and
39:59 - the ranking grid
40:25 - let's create the code for the method
40:28 - named create cells for rows
40:43 - so here our code is looping four times
40:45 - IE one for each row in the ranking grid
40:49 - within the loop a call to a method named
40:52 - create cells for row is made
40:54 - this method is responsible for creating
40:57 - each cell for a particular row
41:00 - let's create the code for the create
41:02 - cells for row method
41:26 - so each row will contain five cells so
41:30 - let's create code to Loop five times
41:32 - each iteration of the loop creates a
41:35 - cell for the relevant row
41:37 - the first cell in each row does not have
41:41 - a corresponding ranking value and is
41:44 - used to label the relevant row this
41:47 - means we must avoid assigning a ranking
41:50 - value to cells used for labeling
41:52 - purposes
42:04 - let's create an if else if ladder as it
42:08 - were to assign relevant values for each
42:11 - row
42:41 - then let's write code to appropriately
42:44 - call a method that we'll write next
42:46 - named push cell markup to error
43:13 - let's create the push sell markup to our
43:15 - method
44:08 - so the code for this method
44:10 - appropriately populates the cell arrays
44:13 - that we declared earlier on at the top
44:15 - of our code
44:17 - so if the rank num variable is greater
44:21 - than zero we know the cell pertains to a
44:24 - cell that denotes a ranking position in
44:26 - the grid
44:27 - if the value of the rank num variable is
44:30 - not greater than zero this means that
44:33 - the cell is used for labeling purposes
44:35 - and must not be assigned a ranking
44:37 - number
44:38 - so the markup for a cell that is used
44:41 - for labeling purposes is different to a
44:43 - cell that is used for ranking purposes
44:47 - you can see that a cell used for ranking
44:49 - purposes has an ID property that is
44:52 - assigned a value with the rank literal
44:55 - text followed by a dash prefix
44:58 - and this is followed by the cell's
45:01 - ranking value
45:03 - this is how our code will know as it
45:05 - were how to rank an item with an
45:07 - appropriate ranking value once the item
45:10 - has been dragged and dropped into the
45:12 - relevant ranking cell on the ranking
45:14 - grid
45:40 - so let's open the rank items react
45:42 - component
45:44 - and write code to import the ranking
45:48 - grid component into the rank items
45:50 - component
46:02 - let's include the code to call the
46:04 - ranking grid component from within the
46:07 - code responsible for outputting UI
46:08 - related code from the rank items
46:11 - component
46:24 - note that we are passing down the
46:26 - appropriate prop values to the ranking
46:28 - grid component here
46:38 - let's run the code
46:56 - great but in order for the ranking grid
46:59 - to display appropriately we must include
47:01 - the appropriate CSS code within the
47:03 - custom.css file so let's do that
49:27 - great and that is starting to look
49:29 - pretty good let's add code to our
49:32 - custom.css code so that the output of
49:35 - our components aligned centrally on the
49:37 - horizontal axis
50:13 - great
50:15 - so at this point
50:17 - we have a list of items that the user
50:20 - can rank
50:21 - we have also created the functionality
50:23 - for the ranking grid
50:25 - the user ranks an item by dragging and
50:28 - dropping an item onto the appropriate
50:30 - cell on the ranking grid each cell with
50:33 - the exception of the cells used for
50:36 - labeling each row in the ranking grid
50:38 - serves as a ranking position
50:40 - so if a user drags an item onto the top
50:45 - left-hand ranking cell
50:47 - that item's ranking value will be 1. if
50:51 - the user drags an item to the immediate
50:53 - right adjacent top left hand ranking
50:56 - cell the relevant item's ranking value
50:59 - will be assigned a value of 2 and so on
51:02 - the bottom right cell and the ranking
51:05 - grid denotes a ranking value of 16. okay
51:09 - so we want to provide the user with a
51:11 - great user experience so drag and drop
51:13 - functionality will provide the user with
51:16 - an easy and fun way to rank the relevant
51:18 - items so let's create a code to
51:21 - facilitate this functionality note that
51:23 - the code we are about to create
51:25 - unfortunately will not work for touch
51:27 - screens I.E a user will not be able to
51:29 - drag the relevant item by touching the
51:32 - item on the screen and then dragging the
51:34 - item
51:35 - we'll look at how to create drag and
51:37 - drop functionality using a touchscreen
51:39 - device in an upcoming tutorial
51:42 - so the functionality we are providing
51:44 - here allows the user to select the item
51:47 - with the user's Mouse pointer and to
51:49 - drag the item by moving the mouse
51:51 - Pointer while keeping the left Mouse
51:53 - button suppressed and dropping the item
51:56 - into the desired cell by dropping the
51:59 - item at the desired location which is
52:01 - done by releasing the left Mouse button
52:03 - when the mouse pointer is hovered over
52:05 - the relevant ranking cell
52:07 - so to achieve the desired drag and drop
52:10 - functionality let's first create a
52:12 - method named drag
52:29 - the code for this method is just one
52:31 - simple line of code this line of code
52:34 - simply stores the ID value of the item
52:36 - that is being dragged
52:39 - we'll look at how we are able to
52:41 - retrieve this value in just a bit when
52:44 - we discuss the method responsible for
52:46 - the drop functionality okay let's create
52:49 - a function named allow drop so in this
52:52 - method our code EV dot prevent default
52:54 - indicates that the default event that
52:57 - would ordinarily be fired should be
52:59 - canceled for the Target element so with
53:02 - this code we are indicating that we are
53:04 - overriding the default Behavior here
53:07 - so let's write the event handler
53:09 - function for the drop method
53:12 - let's name the method drop
53:21 - so firstly we are writing code to cancel
53:23 - the default event our code then
53:25 - references the target element I.E the
53:28 - element where we wish to drop the
53:30 - dragged element so if an image element
53:32 - already exists as a child element within
53:35 - the target element I.E where we are
53:38 - attempting to drop an item we want to
53:40 - disallow this action so if the user is
53:43 - attempting to drop an item onto an
53:45 - already existing
53:46 - image element we want code to execute in
53:50 - this case to return control back to the
53:53 - calling code without executing any
53:55 - further code in our drop method so let's
53:58 - appropriately include return false here
54:01 - then let's also check to see if the
54:03 - target element contains any child
54:05 - elements we only want the drop
54:07 - functionality to be performed
54:09 - successfully if the target element does
54:11 - not contain any child elements
54:14 - so for example this logic prevents the
54:16 - user from dragging an element over an
54:18 - already existing image in the relevant
54:21 - ranking cell
54:24 - if the target element does not contain
54:27 - any child elements we want code to fire
54:29 - that will cause the relevant item in the
54:31 - items array to be changed accordingly so
54:34 - we want the ranking property of the
54:37 - relevant item to be changed to the
54:39 - ranking value denoted by the cell into
54:42 - which the user is dropping the relevant
54:44 - item we are managing State for the items
54:47 - array by appropriately using the use
54:49 - State hook
54:51 - so the change in value of the ranking
54:54 - property of the relevant item will then
54:57 - trigger our rank items components to be
54:59 - re-rendered which means the image
55:01 - element that the user has dragged onto
55:04 - the ranking grid will remain in the
55:06 - appropriate cell on the ranking grid
55:50 - so once the code has run
55:53 - to change the item's ranking property
55:55 - accordingly
55:57 - we must use the set items method to set
56:00 - the state of the items array like this
56:09 - as discussed the execution of this line
56:12 - of code will trigger the ranking items
56:14 - component to re-render
56:16 - so let's include code within the rank
56:19 - items return section of the component to
56:23 - pass down references to the methods that
56:25 - we have just created as props to the
56:27 - ranking grid component
57:03 - thank you
57:33 - let's appropriately wire up the relevant
57:36 - drag and drop methods to the cells that
57:39 - represent a ranking position on the
57:41 - ranking grid
57:49 - let's include code that adds the
57:52 - relevant image as a child element within
57:54 - the target cell the image represents an
57:57 - item that has its ranking property set
58:00 - to the ranking value denoted by the
58:03 - appropriate grid cell I.E the target
58:05 - cell within the ranking grid
58:07 - remember of course each cell represents
58:10 - a ranking value from 1 to 16.
59:10 - let's open the ranking items JS file and
59:14 - include the relevant drag functionality
59:17 - for the image elements that represent
59:20 - items that the user can Rank by dragging
59:22 - and dropping the items to an appropriate
59:24 - position on the ranking grid
60:02 - so let's test the code
60:33 - okay so that did work but clearly the
60:36 - IMG element is way too large within the
60:39 - relevant ranking cell
60:53 - so let's ensure that we include the
60:56 - appropriate styling code within the
60:58 - custom.css file so that the image
61:01 - element takes up 100 of the height and
61:04 - 100 of the width of its parent cell
61:07 - within the ranking grid
61:21 - let's try that again
61:47 - great
61:49 - but when we drag and drop an item from
61:52 - the item list onto the ranking grid we
61:55 - want the relevant item to disappear from
61:57 - the item list denoting that the relevant
62:00 - item has been ranked it's not currently
62:02 - doing this so we can achieve what we
62:05 - want here by simply including an if
62:08 - condition that checks that only unranked
62:12 - items are included within the item list
62:14 - here
62:15 - all ranked items should appear within
62:18 - the ranking grid so our if condition
62:20 - checks the ranking property for each
62:23 - item
62:24 - if the checked item has a ranking value
62:27 - that is greater than zero then it should
62:29 - appear in the ranking grid and not the
62:32 - item list conversely If an item has a
62:36 - ranking property with a value of zero it
62:38 - should be included within the item list
62:41 - and not appear in the ranking grid
63:18 - so of course one of the great things
63:20 - about modern front-end Technologies like
63:22 - react Blazer or angular is that we are
63:25 - easily able to neatly wrap our code in
63:28 - components
63:29 - I can see within the rank items
63:31 - component an opportunity to further
63:34 - rationalize our code so let's create two
63:36 - more components from the code
63:38 - that we currently have within The Return
63:41 - part of our rank items component
63:44 - so we can abstract the rendering
63:46 - functionality for each item in our items
63:48 - list within its own component we can
63:51 - also abstract the code that traverses
63:54 - each item within the item array into its
63:57 - own component so let's create a
63:58 - component named item that denotes an
64:01 - item within the items array
64:54 - let's create a component named item
64:57 - collection
64:58 - that is responsible for traversing each
65:00 - item in the items array let's write code
65:03 - to import the item component into the
65:05 - item collection component
65:18 - let's write code that traverses each
65:20 - item in the item array in order to
65:22 - appropriately display each item in the
65:25 - user's browser
66:50 - let's write code to import the item
66:52 - collection component into the rank items
66:55 - component
67:05 - and let's write code to call the item
67:07 - collection component from within The
67:09 - Return part of our rank items component
69:40 - so we have now provided functionality so
69:43 - that a user can rank a set of movies by
69:46 - dragging an image from a list of items
69:48 - to a position on a grid that we can
69:51 - refer to as the ranking grid so we have
69:53 - facilitated a drag and drop mechanism
69:56 - for the user that can be utilized to
69:58 - rank the items in the items list so we
70:01 - are able to rank movies at the moment
70:04 - what if we wanted to extend the
70:06 - functionality of our application to
70:08 - enable the ranking of other items for
70:10 - example albums
70:12 - so we are able to easily extend our
70:14 - application so that a user can rank
70:17 - other types of items because we have
70:19 - written our code in such a way that it
70:22 - is extensible we can reuse our
70:24 - components for the purpose of ranking
70:26 - other item types so let's prove this and
70:30 - write code so that a user can rank
70:32 - albums
70:33 - let's first open the item controller
70:36 - class
70:36 - and includes these well-known albums
70:39 - that we'd like the user to rank
70:41 - I've selected a group of well-known
70:43 - albums for this example let's include
70:45 - the relevant albums in our collection of
70:48 - item model objects here
71:44 - notice that the item type property is
71:47 - set to 2 for albums and the item type
71:49 - property for items that represent movies
71:51 - remains one
71:53 - so the item type property in our example
71:56 - distinguishes the types of items stored
71:59 - in our collection on the server
72:02 - if you don't feel like tapping out the
72:04 - code like I'm doing here please feel
72:06 - free to copy the relevant code from this
72:08 - GitHub webpage
72:33 - so the next step is to write code that
72:36 - Imports the images for our albums into
72:39 - our react application
72:41 - so to do this let's first make a copy of
72:43 - the movie images.js file
73:02 - let's rename the copy of the movie
73:04 - images.js file Album images dot Js
73:09 - you can download these Album images from
73:12 - this GitHub webpage
73:14 - we can then copy the relevant downloaded
73:17 - images
73:17 - to a sensible location within our
73:20 - projects
73:30 - we can then appropriately modify our
73:33 - album images.js file
73:35 - so that the images that we have just
73:37 - downloaded are appropriately imported
73:40 - into our react application
75:28 - excellent
75:31 - so we want the user to be able to
75:33 - navigate to the appropriate path where
75:36 - the user can rank the albums
75:38 - so let's first include an appropriate
75:40 - route in the app Root array for this
75:42 - purpose let's open the approot.js file
75:49 - let's modify our code so that two
75:51 - distinct routes are created
75:53 - one route denotes a path relevant to
75:56 - ranking movies The other route defines a
75:59 - path relevant to ranking albums
76:02 - both paths point to a component that we
76:05 - are going to write in just a bit named
76:08 - rank items container
76:10 - this component will be the parent
76:12 - component for the rank items component
76:15 - for the rank movies path we want
76:17 - specific prompt values to be passed down
76:20 - to the rank items contain a component
76:22 - for example the data type prop is
76:25 - appropriately set to 1. now the date
76:27 - type prop on the client is equivalent to
76:29 - the item type property for an item that
76:33 - we have added to a collection on the
76:35 - server
76:37 - so when this route is accessed the state
76:41 - of our application is such that a user
76:44 - can rank movies
76:55 - a value of 2 is being passed down to the
76:58 - rank items container for the rank album
77:00 - path
77:02 - so that the application will be in a
77:04 - state where users can rank albums
77:07 - the user will be able to put the
77:10 - application in these states through
77:11 - clicking the appropriate top menu items
77:14 - on the UI we'll create the code for
77:17 - these navigation menu items in just a
77:19 - bit
77:22 - if you are not clear on the significance
77:24 - of the prop values we are passing down
77:27 - to the rank items container component
77:29 - for each root path don't worry this will
77:32 - become clearer as we progress with the
77:34 - development of this part of the
77:36 - application
77:37 - note that we are passing in the relevant
77:39 - image arrays for each of the relevant
77:42 - paths so we must write code to import
77:45 - the relevant image arrays
77:47 - let's open the file that denotes the nav
77:50 - menu component and appropriately include
77:52 - the relevant nav menu items
77:55 - these items map to the appropriate parts
77:57 - that we have defined within the
78:00 - approot.js file
78:27 - let's create a new file for our rank
78:30 - items container.js functional component
79:07 - in this part of the application we are
79:10 - going to write code to store the state
79:12 - of each collection of items one for
79:15 - movies and one for albums in local
79:17 - storage in the user's browser
79:19 - so at the top we are creating two consts
79:22 - one stores the local storage key for the
79:26 - album collection and the other stores
79:28 - the local storage key for the movie
79:30 - collection
79:51 - let's use the use State hook twice once
79:54 - to track the state of the album
79:56 - collection and the other for tracking
79:58 - the state of the movie collection
80:23 - So based on the dates type value passed
80:26 - into this component we want to set
80:28 - appropriate variables to the appropriate
80:31 - collection and the function that is used
80:34 - for changing the state of the relevant
80:36 - collection
80:37 - the local storage key variable is also
80:40 - set based on the relevant data type
80:42 - value
80:44 - so this if condition is used for
80:46 - altering the state of the application
80:48 - based on the navigation menu item that
80:51 - the user selects IE to rank movies or to
80:54 - rank albums
80:55 - so if the user selects the movies
80:57 - navigation menu item the data type
81:00 - variable will be set to 1. if the user
81:03 - selects the album's navigation menu item
81:06 - the data type variable will be set to 2.
81:10 - a switch between these two values
81:12 - appropriately changes the state of the
81:15 - application
81:16 - I.E for ranking movies or for ranking
81:20 - albums depending on what the user wishes
81:22 - to do
81:53 - in The Return part of the rank items
81:55 - container.js file
81:57 - we can return the rank items component
81:59 - that is being passed the appropriate
82:02 - props
82:26 - we must of course ensure that the rank
82:29 - items component is appropriately
82:31 - imported into the rank items container
82:33 - component
83:12 - let's write code to appropriately
83:13 - destructure the relevant props
84:16 - so we need to modify the use effect hook
84:18 - code here so that the API is a
84:21 - appropriately called when the data type
84:23 - prop value changes
84:25 - the change to the data type prop value
84:28 - means that the user has clicked a
84:30 - navigation menu item to Signal the
84:32 - user's intention to rank items of a
84:35 - different type to the type of items that
84:37 - are currently being ranked or have just
84:39 - been ranked so to do this instead of
84:41 - empty square brackets being passed as
84:43 - the second arguments to our use effect
84:45 - hook we can pass in the data type
84:48 - variable wrapped in square brackets
84:49 - instead like this
84:53 - we can also include another use effect
84:55 - hook so that we can save the state of
84:58 - the relevant collection to local storage
84:59 - every time the relevant item collections
85:02 - State changes in memory
85:44 - we need to check if the relevant items
85:46 - collection is null in the return code
85:49 - here like this
85:51 - note that we are no longer passing in an
85:53 - empty array to the use State hook
85:58 - so if the relevant items collection does
86:01 - not exist in local storage the relevant
86:03 - items collection will be null so the
86:06 - array will be null
86:23 - we also need to check to see if our
86:25 - items collection is null before its new
86:28 - state is written to local storage here
87:57 - let's also abstract a call to the API
88:00 - into its own function like this
88:19 - we only want to call our API if the
88:21 - items collection is null
88:23 - so if the items collection is null call
88:26 - the API to bring down the relevant items
88:28 - collection from the server
88:30 - it is a good idea to clear the items
88:32 - from local storage before we test this
88:34 - code
88:51 - excellent we have now ranked two
88:52 - different types of item sets movies
88:56 - and albums
88:59 - so a user may wish to clear the ranking
89:01 - grid and start the whole ranking process
89:04 - again during a session while ranking the
89:06 - relevant items
89:08 - so this clearing functionality would
89:10 - involve removing all of the items from
89:13 - the ranking grid and all items being
89:15 - loaded back into the non-ranked items
89:17 - list as it were
89:19 - so let's implement the code for this by
89:22 - providing a button that the user can
89:24 - click to reset the items so that if
89:27 - relevant items have been ranked these
89:29 - items will have their ranking values set
89:31 - back to zero
89:34 - to do this we can force our components
89:36 - to make an API call
89:39 - to return the relevant items collection
89:41 - to the client in its original state
89:43 - where none of the items have been ranked
89:46 - so let's add a button to The Return part
89:49 - of the rank items component and let's
89:52 - give our button the caption of reload
90:37 - let's ensure that we are importing the
90:40 - use State hook into this component so
90:43 - two variables are returned from the use
90:45 - statehook the first variable will be
90:47 - used for storing a Boolean value
90:50 - that when set to True means the user has
90:53 - clicked the reload button meaning that
90:56 - the user wishes to reload the relevant
90:58 - items in their original unranked State
91:02 - as discussed this button-click action
91:05 - will force the rank items component to
91:07 - make a call to the API to refresh the
91:10 - items collection from the server
91:18 - so let's Implement code whereby a call
91:21 - is made to the API when the reload
91:23 - variable State changes to true
91:35 - we must also write code to set the
91:37 - reload variable to false when the state
91:40 - of the items collection changes
91:42 - we can of course do this by calling the
91:45 - set reload function appropriately like
91:47 - this
92:18 - let's make our reload button look a
92:20 - little bit better
92:21 - so let's go to this website find a CSS
92:24 - style that we like for our button
92:27 - and let's integrate the copied CSS code
92:29 - you can copy the code simply by clicking
92:31 - on one of the buttons here into our
92:34 - application by including the relevant
92:36 - CSS code in our custom.css file
92:57 - foreign
93:05 - [Music]
93:24 - foreign
93:25 - [Music]
93:51 - and I think that looks pretty great
93:54 - I just want to make a quick Point Sharon
93:56 - this is something that's very easy to
93:58 - forget
93:59 - you should always include a key
94:01 - attribute for elements that are uniquely
94:03 - identifiable in a list of elements this
94:06 - helps react identify changes regarding
94:08 - rendering the relevant component
94:10 - [Music]
94:48 - if you like this video please give this
94:50 - video a thumbs up and please feel free
94:53 - to share this video with anyone you feel
94:55 - May benefit from its content
94:57 - please also consider subscribing to the
94:59 - channel and hit the Bell icon so that
95:01 - you'll be notified of future content
95:23 - I look forward to seeing you soon thank
95:26 - you and take care

Cleaned transcript:

in this course you will learn how to integrate a react application with a.net API component Gavin Lon teaches this course Gavin is a freako camp team member and one of the creators of our popular full react course hi and welcome I'm Gavin long in this video we are going to build a basic react front end that queries a web API component written in C sharp so by going through this video you'll learn one of the easiest ways to create a react application that leverages a.net web API component we'll code this application using visual studio 2022 Community Edition which can be downloaded free of charge I've included a link in the description of this video that points to where you are able to download visual studio 2022 Community Edition for both Windows and Mac OS platforms the function of this basic application enables users to rank items by dragging and dropping the relevant items for example wellknown movies onto a grid each cell in the ranking grid denotes a ranking value so basically the item that has been dragged to the top left ranking cell is ranked number one the item to the immediate right of the top left ranking cell denotes a ranking value of two and so on the worst possible ranking is 16. denoted by the cell in the bottom right cell of the ranking grid this is of course not an original app but I thought this would be a great way to demonstrate writing a basic react front end that leverages a web API component that runs on.net 6. okay so as you can see I got myself a green screen the only problem that I can think of about having a green screen is that you run the risk of getting carried away okay so I'm glad I got that out of my system let's get into this video let's fire up visual studio 2022 the project template that we want to use for this project is named asp.net core with react.js so let's select this item and press the next button let's name our project ranking app let's press the next button as you can see we are going to build the.net part of this application on.net 6. let's press the create button great let's take a brief look at the project structure that has been automatically generated for US based on the project template that we have chosen to access the clientside code we can open the client app folder here then we can look at the react components that have been automatically generated within the SRC slash components folder we have the counter component the fetch data component and the home component then to look at the autogenerated service site.net code we can open the controllers folder here we have the weather forecast controller class which contains code for a.net web API component if we look here we have the get action method that represents the get verb pertaining to a HTTP get request this method returns an array containing madeup weather forecast related data this code has been generated for us through the use of the relevant project template to give us an example of how the interaction between the frontend react code and the.net backend web API code can be implemented in our project the react client component named fetch data calls the weather forecast.net web API component and displays the weather forecast data returned from the get request to the browser the counter component demonstrates basic react functionality but when we click the fetch data menu option the code within the fetch data react component is invoked and calls the weather forecast serverside.net web API component and displays the data that is returned as an array to the client on the user's browser you can see that the asp.net core with react.js project template automatically generates code for us to facilitate the integration of a.net web API component with the clientside code implemented using react.js so let's create a folder here named models let's add a csharp class to the models folder and let's name our class item model in this video we are going to develop a basic application that enables a user to rank movies and albums we'll first create the code whereby a user can use our application to rank a collection of movies but we want our model class to be generic so the item model class can also be used to represent for example albums or other types of items we want users to be able to rank using our application so the item model class can represent any type of item that we may wish to integrate into our application so this helps our application to be extensible let's include an ID Auto implemented property of type integer let's include a string property named title let's include an integer property named image ID each item will have an Associated image our application will contain a collection of images that are uniquely identifiable so each item will be associated with one specific image an item has a onetoone relationship with an image in the system you'll clearly see how this works as we progress with the creation of this application let's include an integer property named ranking this property represents the ranking value that a user can assign to a particular item let's include an item type property of type integer in this application we are going to allow for the user to rank a collection of movies as well as albums so we are going to assign movies the item type identifier value of one and albums the item type identifier value of 2. so item types have a onetomany relationship with the items in our system this will be clarified as we progress with the development of the application so let's create our controller class within the controllers folder let's add a class and name it item controller this class will contain an action method that will service HTTP get requests from clients when a valid request is made to the relevant get action method the action method will query a collection of items and return an array of items for a specific item type to the appropriate react client component so for example if a client requests an array of items that have an item type of one an array of items representative of movies will be returned to the client so to make our class a controller class let's first make our item control across inherit from the controller Base Class let's press Ctrl period and bring in the microsoft.asp.netcore.mvc namespace the next step in making our class controller class is to decorate the item controller class with the API controller attribute in order to declare appropriate routing information for our controller class let's appropriately decorate our item controller class with the root attribute let's pass in the text controller wrapped in square brackets as an argument to the Constructor of the root attribute so I want to keep the serverside web API component code really basic because the focus of this tutorial is how to easily Implement interaction functionality between a react client and serverside web API code implemented using.net so for the sake of this basic example we are going to implement the data on the server side as a static collection rather than for example storing the relevant data in a SQL Server database in a database table if this was a real world application of course we'd want to persist the relevant data and for example a relational database storage facility black SQL server or perhaps a nosql storage facility like mongodb we could then use for example Entity framework core to interact with whichever storage facility we have chosen So within our item controller class let's create a private static readonly Eye enumerable collection that is strongly typed with our userdefined type item model let's name our collection items note that rather than follow me here tapping away at the keyboard to declare and populate our items collection you can copy the relevant code from this URL that points to an appropriate GitHub webpage so you can see here we have in our collection references to wellknown movies The Godfather Highlander Highlander 2 The Last of the Mohicans Police Academy 6. rear window Road House the Shawshank Redemption Star Trek 4 the return home and Superman 4. so this get action method accepts an argument of type integer named item type let's create a link query that queries our collection of items in order to filter the items collection based on the item type value passed in from the code that we'll write a bit later within a react component note that at the moment the items in our collection denote movies so only one type of item is currently stored within our collection later on we'll extend our code whereby albums will be stored within this collection so in order to tell.net as it were that this get method pertains to a HTTP get request we must decorate our get action method with the HTTP get attribute we must also pass in this text denoting that an argument of type int must be passed as an argument when the relevant get request is made from the client let's create a react component let's name this file rankitems.js for those of you who wish to learn the basics of react or wish to refresh your knowledge I've recently contributed to a projectbased react for beginners course for freecodecamp.org I've included a link to this course Below in the description of this video I'm really happy to have contributed to this course along with two other instructors John smilga and sanjif Theo garajan John and Sanjeev are both excellent instructors and very well known I've included links to their YouTube channels Below in the description of this video let's write the code to import the use statehook and the use effect hook into our rank items component let's create a basic structure for our functional component let's write the code to return some basic jsx code from our component let's write code to implement the use State hook so that react can track the state of the items collection returned from the server through the code that we have just implemented for our item controller class so you can see here we have a destructured array returned from the use statehook the first variable returned pertains to the items collection data that will be initially retrieved from our serverside code and the second variable pertains to a function that can be used in our react component to change the state of the item's variable we'll appropriately implement the code to change the state of the items array in just a bit note that at the moment we are setting the items array to an empty array by default this is denoted by the empty square brackets we are currently passing in as an argument to the use State hook here so when our rank items component first loads we want our codes to call the appropriate web API component in order to retrieve the relevant items collection data from the server and then we want our code to change the state of the items array we are able to implement code that executes when our component first loads by using the use effect hook in a specific way to achieve this we need to pass a function as the first arguments to the use effect hook and pass empty square brackets denoting an empty array as the second argument to the use effect hook let's write code for an anonymous function that we are passing as an arguments to the first parameter of the use effect hook so we want our code to return a collection of movie data from our web API component we can use javascript's fetch method to make an appropriate HTTP get request to the relevant endpoint we need to pass a value denoting the item type value to the server in the rules of our application a value of 1 for the item type argument means we want to return a collection containing data for movies a value of 2 for the item type argument means that we want the collection to contain data for a collection of albums we haven't yet added the data to our serverside code for the collection of albums but we'll start by testing the code for retrieving a collection of movie data so the data type variable on the client has been initialized to one which means the relevant web API serverside code should return a collection of items with an item type of one movie data the data is returned in Json format if our code gets to this point and a valid collection of movie data has been successfully returned from our web API component we can use the set items function to change the state of our items variable when a variable status tracked through the use of the use statehook and its status changed this means that the state of the component has changed when the state of a react component changes the react component is rerendered so the code within the returned jsx code is transpiled into code that a web browser understands before it is rerendered inside the user's browser window the code is appropriately rerendered really fast which is what makes react such a great choice for implementing user interactive frontend code for the web so we have now created basic code for our rank items component that retrieves appropriate data from the server then changes the state of our component which results in our component being appropriately rerendered the next step is to appropriately modify the app root.js file let's open the approots.js file let's modify the app Roots array in order to add a new route that points to our rank items component as it were we must of course also write code to import the rank items component into our approot component great so we have told react as it were about how to access the rank items component through the code that we have just written within the app Roots component the next step is to include the relevant link within the nav menu component to provide a way for the user to navigate to the rank items component as it were let's open the file named navmenu.js let's appropriately include a nav item element and include a nav link child element within the nav item parent element let's ensure that the path that we have appropriately included for the rank items component within the app Roots array is appropriately included within our new nav link element we can do this by appropriately assigning the relevant path to the rank items component to the two property of the nav link element let's run our code and test whether we can invoke the rank items component by clicking the appropriate navigation link that we have just created okay so why has that not worked by using the asp.net core with react.js project template to create our project code has been automatically included within our project to make the interaction between the react client code and the serverside.net code easy for us to implement so all we need to do is tell our client react code as it were about our serverside controller class and we can do this by simply including a reference to item our item controller class in the context array like this you can see here by default the context array includes an item denoting the weather forecast controller class that is used by the fetch data react component to retrieve weather forecast data from the server that can then be rendered through the fetch data component so we can include a new entry into the context array that tells our clientside code as it were about the items controller code on the server let's run the code and you can see that our break point has been hit within the get action method within the item controller class excellent our rank items react component is now successfully communicating as it were with the appropriate serverside web API code and each movie title is rendered to the screen when our rank items component is rerendered after the movie data is successfully retrieved from the server and the set items clientside function is called to appropriately update the items array with the movie data retrieved from the server this of course changes the state of the rank items component and the relevant frontend code is appropriately rerendered to the browser excellent so if our code was retrieving a large amount of data from the server it would be a good idea to show a loading indicator to the user while the data is being delivered from the server to the client providing such status information to the user provides a better ux user experience so to simulate that a large amount of data is being sent from server to client let's create an artificial delay on the server like this so you can see here that an empty array is currently set by default in the relevant use State hook so of course the array will never be null so in the return code here instead of checking for a null value let's check the number of items in the array so while the array is empty I.E has not yet been brought down from the server we want a loading indicator to be displayed to the user great so instead of just displaying the movie titles to the user's browser we want the poster images for each of the movies to be displayed in a list to do this let's first create a new react component that has the responsibility of importing Movie images into our application let's name the relevant react component with the images.js before we write the code for this component let's create a folder within the SRC folder named images I've prepared the movie images for our application and they can be downloaded from this location on GitHub so let's create a folder within the images folder named movies and let's ensure that the images that we have downloaded from the relevant GitHub repository resides within this movies folder let's write the code to import the images from the movies folder we can do this by including the appropriate import statements at the top of our movie images.js react component like this if you like this video please give this video a thumbs up and please feel free to share this video with anyone you feel May benefit from its content please also consider subscribing to the channel and hit the Bell icon so that you'll be notified of future content let's create an array to store these imported images then let's write the code to export our array so that other components can use the array within the div element that will wrap the list of movie images that we want displayed from within the rank items component let's reference a CSS class that we'll write in just a bit named items Dash not Dash ranked then let's write the jsx code to Output each of the images to the screen from within our rank items component note that each item that our code traverses has a property named image ID which corresponds to an ID property of an object stored in the movie image error array let's write code that uses the JavaScript find method to find the appropriate image for each item great but the images are of course too big so we must style our images appropriately let's first create a div container element for each of the relevant image elements let's include a reference to our CSS class for each of our div container elements let's call our CSS class unrankedcell let's open the custom.css file and create the appropriate styling code so firstly let's create the appropriate CSS code for the items Dash not Dash ranked class let's then create the appropriate CSS code for the unranked Dash cell clause and let's also create the appropriate CSS code for the IMG elements that are housed within the div container elements that reference the unranked Dash cell CSS class excellent and we are now presented with a list of movie images each of these images denotes an unranked movie item so we have now created the functionality for displaying the movies we want our users to rank in a list so the way in which we want our users to rank the items is by dragging the relevant images onto a grid the position to where the user drags an image will result in a unique ranking value that corresponds to each cell within the ranking grid being allocated to the relevant item I.E the dragged image item which represents a movie so for example when a user drags the image representing the movie The Godfather to the top left position in the grid the ranking grid this means that the item is ranked number one so the item's ranking value is one so each cell in the ranking grid denotes a ranking value except for the cells in the leftmost column these cells are used for labeling purposes so each cell in the ranking grid denotes a ranking value the ranking value is positioned for each ranking cell progressing from left to right and top to bottom by a value of 1 from 1 to 16. so the top left item denotes a ranking value of one the item to the immediate right of the cell that denotes a ranking value of one denotes a value of 2 and the bottom right item denotes a ranking value of 16. so our UI will give the user a great ux where the user can simply drag the image representing an unranked item to the chosen position on the ranking Grid in order to allocate an appropriate ranking value to the relevant item a ranking value of 1 denotes the most highly ranked item and a ranking value of 16 denotes the lowest possible ranking value great so let's create a react component responsible for outputting a grid to the screen that will denote our ranking grid let's create a component named ranking grid.js let's first create the basic structure for a react functional component so we are using destructuring here for the props that the rank items component will pass down to our ranking grid component the rank items component is the parent component of the ranking grid child component so here the items array and the image array are passed down as props to our ranking grid component so we are going to create the code for the Grid in this component dynamically through appropriately coded JavaScript methods what I mean by this will become clearer as we develop the code for this component so firstly let's declare five JavaScript arrays these arrays will be used to build relevant jsx code that can be outputted from our component the ranking grid array will store an array of elements that make up the entire ranking grid the cell collection top array will store the elements that represent the top row in the ranking grid the cell collection middle array will store the elements that represent the middle row in the ranking grid the cell collection bottom array will store the elements that represent the second most bottom row in the ranking grid the cell collection worst array will store the elements that represent the very bottom where all the worst ranked items will reside as it were after being ranked by the user let's create the code to return the relevant jsx code let's write codes to call a JavaScript method named create ranking grid that is responsible for outputting the jsx code for our ranking grid in the create ranking grid method a call to a method that we have not yet written is made named create cells for rows this code is returning the returned value from a method that we'll write next named create rows for grid so let's work backwards as it were and create the code for the create rows for grid method so you can see that this code simply pushes jsx elements into a JavaScript array the first item in the array represents the top row for the ranking grid the second item in the array represents the middle row in the ranking grid the third item in the array represents the second to bottom row in the ranking grid the fourth item in the array represents the very bottom row and the ranking grid let's create the code for the method named create cells for rows so here our code is looping four times IE one for each row in the ranking grid within the loop a call to a method named create cells for row is made this method is responsible for creating each cell for a particular row let's create the code for the create cells for row method so each row will contain five cells so let's create code to Loop five times each iteration of the loop creates a cell for the relevant row the first cell in each row does not have a corresponding ranking value and is used to label the relevant row this means we must avoid assigning a ranking value to cells used for labeling purposes let's create an if else if ladder as it were to assign relevant values for each row then let's write code to appropriately call a method that we'll write next named push cell markup to error let's create the push sell markup to our method so the code for this method appropriately populates the cell arrays that we declared earlier on at the top of our code so if the rank num variable is greater than zero we know the cell pertains to a cell that denotes a ranking position in the grid if the value of the rank num variable is not greater than zero this means that the cell is used for labeling purposes and must not be assigned a ranking number so the markup for a cell that is used for labeling purposes is different to a cell that is used for ranking purposes you can see that a cell used for ranking purposes has an ID property that is assigned a value with the rank literal text followed by a dash prefix and this is followed by the cell's ranking value this is how our code will know as it were how to rank an item with an appropriate ranking value once the item has been dragged and dropped into the relevant ranking cell on the ranking grid so let's open the rank items react component and write code to import the ranking grid component into the rank items component let's include the code to call the ranking grid component from within the code responsible for outputting UI related code from the rank items component note that we are passing down the appropriate prop values to the ranking grid component here let's run the code great but in order for the ranking grid to display appropriately we must include the appropriate CSS code within the custom.css file so let's do that great and that is starting to look pretty good let's add code to our custom.css code so that the output of our components aligned centrally on the horizontal axis great so at this point we have a list of items that the user can rank we have also created the functionality for the ranking grid the user ranks an item by dragging and dropping an item onto the appropriate cell on the ranking grid each cell with the exception of the cells used for labeling each row in the ranking grid serves as a ranking position so if a user drags an item onto the top lefthand ranking cell that item's ranking value will be 1. if the user drags an item to the immediate right adjacent top left hand ranking cell the relevant item's ranking value will be assigned a value of 2 and so on the bottom right cell and the ranking grid denotes a ranking value of 16. okay so we want to provide the user with a great user experience so drag and drop functionality will provide the user with an easy and fun way to rank the relevant items so let's create a code to facilitate this functionality note that the code we are about to create unfortunately will not work for touch screens I.E a user will not be able to drag the relevant item by touching the item on the screen and then dragging the item we'll look at how to create drag and drop functionality using a touchscreen device in an upcoming tutorial so the functionality we are providing here allows the user to select the item with the user's Mouse pointer and to drag the item by moving the mouse Pointer while keeping the left Mouse button suppressed and dropping the item into the desired cell by dropping the item at the desired location which is done by releasing the left Mouse button when the mouse pointer is hovered over the relevant ranking cell so to achieve the desired drag and drop functionality let's first create a method named drag the code for this method is just one simple line of code this line of code simply stores the ID value of the item that is being dragged we'll look at how we are able to retrieve this value in just a bit when we discuss the method responsible for the drop functionality okay let's create a function named allow drop so in this method our code EV dot prevent default indicates that the default event that would ordinarily be fired should be canceled for the Target element so with this code we are indicating that we are overriding the default Behavior here so let's write the event handler function for the drop method let's name the method drop so firstly we are writing code to cancel the default event our code then references the target element I.E the element where we wish to drop the dragged element so if an image element already exists as a child element within the target element I.E where we are attempting to drop an item we want to disallow this action so if the user is attempting to drop an item onto an already existing image element we want code to execute in this case to return control back to the calling code without executing any further code in our drop method so let's appropriately include return false here then let's also check to see if the target element contains any child elements we only want the drop functionality to be performed successfully if the target element does not contain any child elements so for example this logic prevents the user from dragging an element over an already existing image in the relevant ranking cell if the target element does not contain any child elements we want code to fire that will cause the relevant item in the items array to be changed accordingly so we want the ranking property of the relevant item to be changed to the ranking value denoted by the cell into which the user is dropping the relevant item we are managing State for the items array by appropriately using the use State hook so the change in value of the ranking property of the relevant item will then trigger our rank items components to be rerendered which means the image element that the user has dragged onto the ranking grid will remain in the appropriate cell on the ranking grid so once the code has run to change the item's ranking property accordingly we must use the set items method to set the state of the items array like this as discussed the execution of this line of code will trigger the ranking items component to rerender so let's include code within the rank items return section of the component to pass down references to the methods that we have just created as props to the ranking grid component thank you let's appropriately wire up the relevant drag and drop methods to the cells that represent a ranking position on the ranking grid let's include code that adds the relevant image as a child element within the target cell the image represents an item that has its ranking property set to the ranking value denoted by the appropriate grid cell I.E the target cell within the ranking grid remember of course each cell represents a ranking value from 1 to 16. let's open the ranking items JS file and include the relevant drag functionality for the image elements that represent items that the user can Rank by dragging and dropping the items to an appropriate position on the ranking grid so let's test the code okay so that did work but clearly the IMG element is way too large within the relevant ranking cell so let's ensure that we include the appropriate styling code within the custom.css file so that the image element takes up 100 of the height and 100 of the width of its parent cell within the ranking grid let's try that again great but when we drag and drop an item from the item list onto the ranking grid we want the relevant item to disappear from the item list denoting that the relevant item has been ranked it's not currently doing this so we can achieve what we want here by simply including an if condition that checks that only unranked items are included within the item list here all ranked items should appear within the ranking grid so our if condition checks the ranking property for each item if the checked item has a ranking value that is greater than zero then it should appear in the ranking grid and not the item list conversely If an item has a ranking property with a value of zero it should be included within the item list and not appear in the ranking grid so of course one of the great things about modern frontend Technologies like react Blazer or angular is that we are easily able to neatly wrap our code in components I can see within the rank items component an opportunity to further rationalize our code so let's create two more components from the code that we currently have within The Return part of our rank items component so we can abstract the rendering functionality for each item in our items list within its own component we can also abstract the code that traverses each item within the item array into its own component so let's create a component named item that denotes an item within the items array let's create a component named item collection that is responsible for traversing each item in the items array let's write code to import the item component into the item collection component let's write code that traverses each item in the item array in order to appropriately display each item in the user's browser let's write code to import the item collection component into the rank items component and let's write code to call the item collection component from within The Return part of our rank items component so we have now provided functionality so that a user can rank a set of movies by dragging an image from a list of items to a position on a grid that we can refer to as the ranking grid so we have facilitated a drag and drop mechanism for the user that can be utilized to rank the items in the items list so we are able to rank movies at the moment what if we wanted to extend the functionality of our application to enable the ranking of other items for example albums so we are able to easily extend our application so that a user can rank other types of items because we have written our code in such a way that it is extensible we can reuse our components for the purpose of ranking other item types so let's prove this and write code so that a user can rank albums let's first open the item controller class and includes these wellknown albums that we'd like the user to rank I've selected a group of wellknown albums for this example let's include the relevant albums in our collection of item model objects here notice that the item type property is set to 2 for albums and the item type property for items that represent movies remains one so the item type property in our example distinguishes the types of items stored in our collection on the server if you don't feel like tapping out the code like I'm doing here please feel free to copy the relevant code from this GitHub webpage so the next step is to write code that Imports the images for our albums into our react application so to do this let's first make a copy of the movie images.js file let's rename the copy of the movie images.js file Album images dot Js you can download these Album images from this GitHub webpage we can then copy the relevant downloaded images to a sensible location within our projects we can then appropriately modify our album images.js file so that the images that we have just downloaded are appropriately imported into our react application excellent so we want the user to be able to navigate to the appropriate path where the user can rank the albums so let's first include an appropriate route in the app Root array for this purpose let's open the approot.js file let's modify our code so that two distinct routes are created one route denotes a path relevant to ranking movies The other route defines a path relevant to ranking albums both paths point to a component that we are going to write in just a bit named rank items container this component will be the parent component for the rank items component for the rank movies path we want specific prompt values to be passed down to the rank items contain a component for example the data type prop is appropriately set to 1. now the date type prop on the client is equivalent to the item type property for an item that we have added to a collection on the server so when this route is accessed the state of our application is such that a user can rank movies a value of 2 is being passed down to the rank items container for the rank album path so that the application will be in a state where users can rank albums the user will be able to put the application in these states through clicking the appropriate top menu items on the UI we'll create the code for these navigation menu items in just a bit if you are not clear on the significance of the prop values we are passing down to the rank items container component for each root path don't worry this will become clearer as we progress with the development of this part of the application note that we are passing in the relevant image arrays for each of the relevant paths so we must write code to import the relevant image arrays let's open the file that denotes the nav menu component and appropriately include the relevant nav menu items these items map to the appropriate parts that we have defined within the approot.js file let's create a new file for our rank items container.js functional component in this part of the application we are going to write code to store the state of each collection of items one for movies and one for albums in local storage in the user's browser so at the top we are creating two consts one stores the local storage key for the album collection and the other stores the local storage key for the movie collection let's use the use State hook twice once to track the state of the album collection and the other for tracking the state of the movie collection So based on the dates type value passed into this component we want to set appropriate variables to the appropriate collection and the function that is used for changing the state of the relevant collection the local storage key variable is also set based on the relevant data type value so this if condition is used for altering the state of the application based on the navigation menu item that the user selects IE to rank movies or to rank albums so if the user selects the movies navigation menu item the data type variable will be set to 1. if the user selects the album's navigation menu item the data type variable will be set to 2. a switch between these two values appropriately changes the state of the application I.E for ranking movies or for ranking albums depending on what the user wishes to do in The Return part of the rank items container.js file we can return the rank items component that is being passed the appropriate props we must of course ensure that the rank items component is appropriately imported into the rank items container component let's write code to appropriately destructure the relevant props so we need to modify the use effect hook code here so that the API is a appropriately called when the data type prop value changes the change to the data type prop value means that the user has clicked a navigation menu item to Signal the user's intention to rank items of a different type to the type of items that are currently being ranked or have just been ranked so to do this instead of empty square brackets being passed as the second arguments to our use effect hook we can pass in the data type variable wrapped in square brackets instead like this we can also include another use effect hook so that we can save the state of the relevant collection to local storage every time the relevant item collections State changes in memory we need to check if the relevant items collection is null in the return code here like this note that we are no longer passing in an empty array to the use State hook so if the relevant items collection does not exist in local storage the relevant items collection will be null so the array will be null we also need to check to see if our items collection is null before its new state is written to local storage here let's also abstract a call to the API into its own function like this we only want to call our API if the items collection is null so if the items collection is null call the API to bring down the relevant items collection from the server it is a good idea to clear the items from local storage before we test this code excellent we have now ranked two different types of item sets movies and albums so a user may wish to clear the ranking grid and start the whole ranking process again during a session while ranking the relevant items so this clearing functionality would involve removing all of the items from the ranking grid and all items being loaded back into the nonranked items list as it were so let's implement the code for this by providing a button that the user can click to reset the items so that if relevant items have been ranked these items will have their ranking values set back to zero to do this we can force our components to make an API call to return the relevant items collection to the client in its original state where none of the items have been ranked so let's add a button to The Return part of the rank items component and let's give our button the caption of reload let's ensure that we are importing the use State hook into this component so two variables are returned from the use statehook the first variable will be used for storing a Boolean value that when set to True means the user has clicked the reload button meaning that the user wishes to reload the relevant items in their original unranked State as discussed this buttonclick action will force the rank items component to make a call to the API to refresh the items collection from the server so let's Implement code whereby a call is made to the API when the reload variable State changes to true we must also write code to set the reload variable to false when the state of the items collection changes we can of course do this by calling the set reload function appropriately like this let's make our reload button look a little bit better so let's go to this website find a CSS style that we like for our button and let's integrate the copied CSS code you can copy the code simply by clicking on one of the buttons here into our application by including the relevant CSS code in our custom.css file foreign foreign and I think that looks pretty great I just want to make a quick Point Sharon this is something that's very easy to forget you should always include a key attribute for elements that are uniquely identifiable in a list of elements this helps react identify changes regarding rendering the relevant component if you like this video please give this video a thumbs up and please feel free to share this video with anyone you feel May benefit from its content please also consider subscribing to the channel and hit the Bell icon so that you'll be notified of future content I look forward to seeing you soon thank you and take care
