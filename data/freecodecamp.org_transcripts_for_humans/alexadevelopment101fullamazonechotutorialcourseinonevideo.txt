With timestamps:

00:02 - hi this is steve with dabble lab welcome
00:04 - to the course this is amazon alexa
00:07 - development 101 and i'll be the voice
00:09 - behind the videos and the guy that you
00:11 - can ask questions to as you work your
00:12 - way through the lessons the goal of this
00:14 - course is to give you an introduction to
00:16 - building skills for amazon alexa and to
00:19 - do that as quickly as possible but
00:21 - without moving so fast that you don't
00:23 - get a solid understanding of what you're
00:25 - doing
00:26 - this is an introductory level course so
00:28 - if you have experience programming
00:30 - that's great but if you've never written
00:31 - a line of code in your life that is okay
00:33 - too there is absolutely no prior
00:35 - experience necessary that said to make
00:38 - the best use of our time i will make
00:40 - some assumptions for example i'll assume
00:42 - that you're familiar with what alexa is
00:44 - from a user perspective and that you
00:47 - have some basic computing skills
00:50 - the course is broken down into a
00:52 - collection of short videos all of them
00:53 - are under 10 minutes but most are around
00:55 - 5 minutes also there are a lot of really
00:58 - great resources online that complement
01:00 - this course so i'll mention some of
01:02 - those as we go and provide links finally
01:05 - all of my demos will be done on a mac
01:07 - but if you're using windows or linux you
01:10 - should be able to follow along just fine
01:13 - okay that's it for my introduction to
01:15 - kick things off in the next video we'll
01:17 - talk about getting started with alexa
01:20 - development and how alexa works from a
01:22 - high level technical perspective
01:27 - so the jumping off point for getting
01:29 - started with alexa development is the
01:31 - amazon developer portal and it's located
01:33 - at developer.amazon.com
01:35 - and to get started you'll want to spend
01:37 - some time browsing through the public
01:38 - pages there especially the alexa section
01:41 - of the site what you'll quickly learn
01:43 - when you do that is that alexa is way
01:45 - more than just the brand and the brains
01:47 - behind the amazon echo alexa is also a
01:50 - service from amazon that makes it
01:51 - possible for anybody to extend alexa's
01:54 - capabilities or incorporate alexa into
01:56 - smart devices and software
01:59 - for developers the amazon alexa service
02:02 - provides the alexa skills kit and the
02:04 - alexa voice service the skills kit lets
02:07 - you add new capabilities that make alexa
02:09 - smarter these are called skills so if
02:13 - alexa doesn't do something now that
02:14 - you'd like her to do you can teach her
02:16 - how by creating a skill the alexa voice
02:18 - service on the other hand is used for
02:20 - adding alexa to new devices or software
02:23 - so for example if you wanted to create a
02:25 - voice enabled toaster with alexa
02:27 - embedded in it you'd use the alexa voice
02:29 - service to do that our topic in this
02:31 - course is building skills so we're going
02:33 - to be taking a closer look at the alexa
02:36 - skills kit
02:38 - the alexa skills kit is a collection of
02:40 - resources to make it easier for
02:42 - developers to create new skills and the
02:44 - skills kit includes documentation
02:46 - software development kits application
02:49 - programming interfaces and example code
02:51 - and we'll be
02:52 - talking about these in more detail later
02:55 - in the course
02:57 - using the skills kit is completely free
02:59 - in fact most of what you are going to be
03:02 - doing uh you should shouldn't have to
03:04 - pay for that's building publishing and
03:07 - hosting skills and certainly nothing
03:09 - that we're doing in this course should
03:11 - cost you anything
03:13 - at a very high level there are two
03:14 - things that you're going to need to do
03:15 - to create skills you'll need to tell the
03:18 - amazon alexa service about your skill
03:21 - and you'll need to build a skill service
03:23 - that provides your skills functionality
03:25 - the first part is done through the
03:26 - amazon developer portal and it doesn't
03:28 - require any coding but it does require
03:30 - an understanding of how alexa works from
03:32 - a technical perspective and we'll be
03:34 - covering that
03:36 - building a skill service is a bit more
03:37 - technical and does require coding
03:39 - however even if you've never coded
03:41 - anything before in your life you can
03:43 - build a skill service using amazon web
03:46 - services pretty easily and that's what
03:47 - we'll be doing in this course we'll talk
03:49 - more about skill services in a minute
03:51 - but first let's take a closer look at
03:53 - the skill setup
03:55 - skill configuration settings tell the
03:58 - amazon alexa service about your skill so
04:00 - alexa knows how to recognize when users
04:02 - are requesting your skill and the
04:04 - functionality that
04:05 - it provides
04:06 - new skills are set up through the amazon
04:08 - developer portal at
04:10 - developer.amazon.com and when you set up
04:12 - a new skill you define how users enable
04:15 - and interact with it and how the alexa
04:17 - service will communicate with your skill
04:19 - service that's going to provide the
04:20 - skills functionality the developer
04:22 - portal is also where you provide details
04:25 - about your skill for users and where you
04:28 - submit your skill to be published for
04:30 - anybody to use we'll talk about that in
04:33 - more detail later on in the course
04:36 - your skills service provides your skills
04:38 - functionality and this is the code that
04:41 - you're going to write to take action on
04:44 - and respond to user requests
04:46 - amazon doesn't care how you create your
04:48 - skill service you can use any
04:50 - programming language or technology stack
04:52 - as long as it can properly communicate
04:54 - with the alexa service that said the
04:57 - easiest and the recommended way to build
04:59 - skills is by using amazon web services
05:02 - or aws and that's what we'll be doing
05:06 - so to wrap up let me summarize how alexa
05:09 - works with custom skills first a user
05:12 - speaks to an amazon
05:15 - echo or an alexa enabled device and the
05:18 - audio is streamed from the device to the
05:21 - alexa service
05:23 - next the alexa service converts the
05:26 - voice stream to text and determines if
05:28 - the request is for a skill by looking at
05:31 - skill configuration information that the
05:33 - developer set up
05:35 - if the request is for a skill the alexa
05:37 - service sends the request to a skill
05:39 - service that's set up to provide the
05:41 - skills functionality and the skills
05:43 - service takes action on the request and
05:45 - generates a response that's sent back to
05:48 - amazon alexa through the alexa skills
05:51 - kit api
05:52 - from there the alexa service responds
05:54 - back to the user
05:56 - and the process is complete okay
06:00 - so that is it for our high level
06:02 - technical overview in the next video
06:04 - we'll set up a skill in the amazon
06:07 - developer portal
06:12 - so in the last lesson you learned that
06:14 - there are two things that you need to do
06:15 - as a developer to create a new skill you
06:18 - need to set up your skill in the amazon
06:20 - developer portal and then you need to
06:22 - build a skill service to provide your
06:24 - skills functionality in this lesson
06:27 - we're going to set up our skill in the
06:29 - developer portal the bare minimum
06:30 - requirements
06:32 - and to do that you're going to need to
06:33 - have an amazon developer account and you
06:37 - can get that by going over to
06:39 - developer.amazon.com if you're not
06:41 - already there
06:42 - and signing up i'm not going to walk
06:44 - through the signup process because it's
06:46 - pretty straightforward the one point
06:48 - that i do want to make however is that
06:50 - when you're signing up if you're
06:52 - creating a developer account you want to
06:55 - use the email address that you use with
06:57 - your primary amazon account so if you've
06:59 - got an amazon prime account or an
07:02 - account that you use for your echo
07:04 - if you have an echo which incidentally
07:07 - another point i don't think i made is
07:08 - that you don't need to have an echo to
07:10 - do development and i'll get into that
07:13 - a little bit later but
07:15 - point here is that you want to use the
07:17 - email address that you use with your
07:19 - primary amazon account it'll make
07:20 - testing a whole lot easier when you sign
07:23 - up
07:23 - if you don't have an amazon account of
07:26 - course you can create one as you go
07:29 - through the the sign up process and
07:30 - there's no charge to create a developer
07:33 - account that's that's free
07:35 - and once you've created your account you
07:37 - can go ahead and log in and when you log
07:39 - in you'll be
07:41 - at the developer council and the
07:43 - dashboard is where it drops you by
07:45 - default and from here what you want to
07:47 - do is you want to go over to the alexa
07:50 - menu
07:54 - and then under the alexa menu you've got
07:56 - two options the skills kit and the voice
07:58 - service we talked about what those were
08:00 - in an earlier uh lesson and
08:03 - we're dealing with skills so we're gonna
08:05 - get started with the skills kit
08:08 - and when you come in here if you haven't
08:11 - created skills yet you're going to see
08:13 - what i'm looking at right now which is
08:15 - just a blank list there's no skills
08:17 - created at this point
08:18 - and we're going to add a new skill by
08:21 - clicking the add new skill button here
08:24 - and we're just setting up the bare
08:25 - basics for our skill and so
08:28 - there's
08:29 - a number of pieces of information that
08:31 - we're going to provide there's no coding
08:33 - in here so everything that we're going
08:35 - to do
08:36 - in the developer portal is really going
08:37 - to be configuration information so no no
08:40 - coding here we're going to do that in in
08:42 - a little bit
08:43 - but there is quite a few pieces of
08:44 - information that we need to provide it
08:46 - it looks intimidating when you first
08:48 - kind of start poking through this but
08:50 - it's actually not too bad the skill
08:52 - information is where it all starts you
08:54 - um can leave most of the defaults so
08:57 - we're going to stick with the custom
08:59 - interaction model and this is going to
09:01 - provide us with the most flexibility
09:03 - when we're creating skills there are
09:05 - different skill types we're not going to
09:07 - cover these other skill types in this
09:10 - course but if you're curious about what
09:12 - they are you can learn more by clicking
09:14 - this link
09:16 - the language is
09:18 - we're going to also in
09:21 - this case in my case i'm going to use
09:22 - u.s english and and that's my default
09:25 - but alexa supports u.s english uk
09:28 - english and german and actually when you
09:31 - create a skill you can create the skill
09:33 - to support multiple languages that's
09:36 - also outside what we're going to cover
09:38 - in this course so i'm going to leave the
09:39 - default as u.s english the
09:42 - defaults were also going to leave down
09:44 - here under the glo global field so the
09:46 - audio player video app and rendered
09:48 - templates we're not going to be covering
09:49 - those in this course so you can leave
09:51 - those all as no
09:54 - what we do need however is our skill
09:57 - name and the invocation name and we're
09:59 - going to use
10:00 - hello world for both the skill name and
10:03 - the invocation name
10:05 - and the skill name is the name that
10:08 - users are going to use to find our skill
10:11 - both in the
10:13 - alexa companion app that's on your
10:15 - iphone or your android phone and then
10:19 - also they're going to use that to
10:21 - enable the skills so
10:23 - if you're familiar with how alexa works
10:25 - you enable skills by saying alexa enable
10:28 - skill name and then you work with skills
10:31 - or you
10:33 - invoke the functionality of skills by
10:35 - using the invocation name so after i had
10:38 - enabled my skill i would say alexa ask
10:41 - hello world something or alexa tell
10:44 - hello world something as an example and
10:46 - then my skill would
10:48 - understand the user's intent which we're
10:50 - going to get into in the next video
10:53 - based on what they say and then provide
10:56 - or act on the user's request
10:59 - at that point
11:00 - and so right now we just need hello
11:03 - world for our name and hello world for
11:05 - our invocation name and we'll be all set
11:09 - we can use just about anything while
11:11 - we're developing for the skill name and
11:13 - the invocation name but when you get
11:15 - ready to publish your skill there are
11:17 - guidelines for the invocation name that
11:19 - you need to follow so that your
11:21 - invocation name doesn't collide with or
11:23 - conflict with existing skill
11:26 - functionality or alexa native
11:28 - functionality and so you want to review
11:30 - those guidelines when you get ready to
11:32 - publish your skill we're going to cover
11:34 - that later we'll get into that but if
11:36 - you're curious you can certainly click
11:38 - on the
11:39 - link here to read more about that but at
11:41 - this point
11:42 - all we need to do is click save and we
11:46 - have
11:47 - uh
11:48 - created the bare minimum for settings
11:50 - that are required to uh to to get our
11:54 - skill going we'll need to
11:56 - finish up the configuration with our
12:00 - interaction model
12:01 - we'll need to tell our skill
12:03 - how to pass information and get
12:06 - information back from our skill service
12:10 - which we do under the configuration
12:11 - settings and then there's an area to
12:13 - test our skill
12:14 - and then we uh submit our skill for
12:17 - publishing here
12:18 - and there's some privacy and compliance
12:22 - information that we need to provide on
12:24 - this last section here it looks like a
12:26 - lot
12:27 - we're going to walk through all of it
12:29 - it's actually not too bad but for right
12:31 - now that is where we're going to leave
12:33 - it and then in the next lesson we're
12:34 - going to talk more about the interaction
12:36 - model and get into intents and slots
12:47 - in the last lesson we set up our hello
12:49 - world skill in the developer portal with
12:52 - the bare minimum settings so in this
12:54 - lesson we're going to pick up where we
12:56 - left off and we're going to set up an
12:58 - interaction model for our skill an
13:00 - interaction model let's
13:02 - the amazon alexa service know how users
13:05 - are going to interact with our skill
13:08 - the interaction model is essentially
13:09 - configuration information that's
13:11 - provided in a structured format that the
13:14 - alexa service can understand and to get
13:16 - a bit more technical the interaction
13:18 - model is
13:19 - structured as json or javascript object
13:22 - notation and if you're familiar with
13:23 - json that's great
13:25 - but if not no worries because there is a
13:29 - tool that you can use to create an
13:32 - interaction model and you don't need to
13:33 - know anything about jason to use it and
13:35 - this is new it is um still in beta but
13:38 - it's pretty nice and we're going to use
13:40 - it to create our interaction model here
13:42 - so we'll just go in and launch the
13:46 - skill builder
13:48 - so
13:49 - interaction models can get pretty
13:51 - complex depending on what your skill
13:53 - does but
13:54 - the two most important things that you
13:56 - need to know about are intents and slots
13:59 - and intense
14:01 - represent the actions your skill can
14:04 - perform based on what users say
14:06 - and by defining intents and what users
14:09 - might say that's associated with those
14:11 - intents that lets uh the alexa service
14:14 - know how to uh process the
14:17 - what the user's saying and
14:19 - what users want and how to pass that on
14:22 - to our skill service so that the skills
14:25 - service can respond
14:26 - intents might also have arguments and
14:29 - those are called slots so slots are used
14:32 - to extract specific pieces of
14:33 - information from what users say for
14:36 - example if you wanted a skill that was
14:39 - able to address a user by name our skill
14:42 - might prompt the user by saying what's
14:44 - your name to that the user might respond
14:47 - by saying my name is steve so to get the
14:50 - value steve from a user's response we'd
14:52 - use a slot and we'll take a look at
14:55 - slots in more detail in a later video
14:57 - but for now we're just going to set up a
15:00 - simple intent named general greeting
15:03 - that our skill can respond to when a
15:06 - user says hello and to do that we go in
15:10 - over here and we're going to add an
15:11 - intent
15:12 - and there are two types of intents
15:14 - there's custom intents and built-in
15:16 - intents
15:17 - um
15:18 - for right now we're just going to set up
15:20 - a custom intent and again the name of
15:23 - that intent is going to be general
15:26 - greeting
15:28 - we'll spell that right
15:32 - like that and we'll create that intent
15:35 - and
15:36 - the
15:38 - our skill is going to respond when a
15:39 - user says hello so
15:41 - that
15:43 - is going to when a user says hello
15:45 - that's going to tell our skill to
15:47 - um
15:48 - act on the
15:49 - general greeting and that is what we're
15:53 - going to end with for now so we'll save
15:55 - our model
15:57 - and then we'll build our model which
15:58 - will take a minute
16:00 - okay that is it for this lesson we have
16:03 - our skills set up with a basic
16:05 - interaction model and now it's time to
16:07 - start building our skill service and
16:10 - we're going to dive into that in our
16:12 - next lesson
16:18 - so at this point we have our skill set
16:20 - up and we have a basic interaction model
16:23 - that has one custom intent named general
16:25 - greeting and that intent handles a case
16:27 - where a user says hello
16:29 - now we need a skill service to actually
16:32 - do something with an intent request and
16:35 - since skills extend alexa's capability
16:38 - and can be created by anybody the logic
16:41 - for a skill lives outside of the amazon
16:44 - alexa service so we need to build and
16:46 - host our skill service and then tell
16:49 - alexa where that service is located and
16:51 - we do that in the configuration section
16:53 - of the alexa skill here
16:55 - i mentioned earlier that amazon doesn't
16:58 - really care where your skill exists or
17:01 - how it was created in terms of like the
17:03 - programming language or the technology
17:05 - stack just so long as it can communicate
17:07 - with the alexa service but the easiest
17:09 - and recommended way to create and host a
17:11 - skill service is by using lambda
17:14 - functions through amazon web services or
17:16 - aws and that's what we're going to do so
17:19 - you're going to select the aws lambda
17:22 - arn option here
17:24 - and then we're going to need an arn
17:27 - which is an amazon resource name which
17:29 - is the identifier for the lambda
17:32 - function so to get that and to set up
17:34 - the
17:35 - lambda function you need to head over to
17:38 - aws.amazon.com
17:41 - [Music]
17:43 - and create an account there if you don't
17:46 - have one already
17:48 - make sure that you use the same email
17:50 - address that you used when you created
17:52 - your account on the amazon developer
17:54 - portal the sign up process is straight
17:57 - forward so i'm not going to walk through
17:59 - that the one point i will make however
18:01 - is that in the aws sign-up process you
18:04 - will get prompted for a credit card i
18:06 - mentioned earlier that nothing that
18:08 - we're doing in this course is going to
18:10 - cost anything
18:11 - because
18:13 - aws provides a free tier
18:15 - and you can see that here the first
18:17 - million requests per month are free so
18:19 - as long as you don't go over that we are
18:21 - good
18:22 - uh but if you want to learn more about
18:24 - the pricing just go to
18:26 - aws.amazon.com
18:28 - pricing and you can see how the the
18:30 - pricing works
18:32 - after you've created your account go
18:34 - ahead and log into the management
18:35 - console i'm logged in right now
18:38 - once you log in you want to go to the
18:40 - services menu
18:42 - up here and then you want to under the
18:44 - compute section you want to go to lambda
18:46 - here
18:49 - okay and before i create a lambda
18:52 - function i just want to talk for a
18:54 - minute about what this is so lambda
18:56 - functions are referred to as uh
18:59 - serverless functions so it's a platform
19:02 - that allows you to create
19:06 - services software services
19:08 - without having to worry about setting up
19:10 - and creating the server which is where
19:12 - that serverless name comes from of
19:14 - course there are servers behind it but
19:16 - we don't have to think about any of that
19:17 - stuff we can just jump right in and
19:20 - write our code and it's a really nice
19:22 - and easy way to uh to do it because
19:25 - just a lot of the um a lot of the
19:28 - complexity is
19:30 - not something that you have to worry
19:31 - about in terms of the the hosting and
19:33 - the infrastructure so we just jump in
19:35 - and start working in the code so what
19:37 - we're going to do here is we're going to
19:39 - create a function
19:40 - and amazon provides
19:43 - some templates they call them blueprints
19:45 - that you can use as a starting point and
19:48 - lambda can be used for lots of different
19:50 - things not just creating alexa skills
19:53 - but if you
19:54 - search for
19:55 - alexa
19:57 - alex alexa that works you'll see some of
20:00 - the the blueprints that are provided
20:02 - we're going to use one of these
20:04 - blueprints uh to get started but i'm not
20:06 - gonna talk through what the the
20:08 - blueprint is doing the reason that we're
20:10 - gonna pick one of the alexa blueprints
20:12 - is
20:12 - because
20:13 - the
20:14 - alexa skills kit has an sdk or a
20:18 - software development kit that makes it
20:20 - easier to communicate back and forth
20:22 - with the alexa service we're going to be
20:24 - coding our skill and node and when you
20:27 - use the blueprint the alexa sdk is
20:30 - included with it so just select any one
20:33 - of the node
20:34 - js sdks and i'm going to choose this
20:37 - alexa skills kit sdk for fax skill
20:41 - the next screen what we're going to do
20:43 - is we're going to
20:45 - set it up so that it is triggered when a
20:48 - request comes in from the alexa skills
20:50 - kit so we do that by selecting alexa
20:53 - skills kit here
20:56 - and then we move on and we give our
20:59 - function a name so i'm going to call
21:01 - this hello
21:03 - world
21:04 - alexa skill
21:07 - [Music]
21:08 - like that and i'm going to get rid of
21:10 - the description here you don't have to
21:12 - do that but and then you can see the
21:15 - the template code here that's provided
21:17 - again i'm not going to get into this
21:19 - right now we will come back and talk
21:20 - about that a little bit but this is a
21:23 - a skill service for a space fax skill so
21:27 - uh the the only other thing that you
21:29 - need to do to get the the skill service
21:31 - code set up is select a an execution
21:35 - role and this is what gives the
21:37 - lambda function permission to run and if
21:40 - you're just getting set up and you have
21:43 - not done this before
21:45 - you're going to want to
21:46 - select from here
21:48 - create a custom role and when you do
21:50 - that
21:51 - a window will pop up that will walk you
21:54 - through the process it'll
21:56 - create a role named lambda underscore
21:58 - basic execution by default you don't
22:00 - need to change any here thing here you
22:02 - just choose allow
22:04 - and then that will pop you back over
22:06 - here and that role will be selected and
22:08 - that's all you need to do for for this
22:10 - example you choose next
22:12 - and then create function
22:17 - and that is it so we have our um we have
22:21 - our skill
22:23 - service set up as a lambda function now
22:27 - the only thing left to do is to
22:30 - let the
22:32 - skill in the developer council know
22:35 - the arn or the amazon resource name
22:37 - which is this up here so we just want to
22:39 - copy that and then go back to
22:42 - the alexa developer or the amazon
22:45 - developer portal and to our alexa
22:47 - configuration and then we want to go
22:50 - ahead and paste in that arn and so when
22:53 - we do that
22:54 - and click save
22:57 - now
22:58 - we have our settings
23:01 - connected to our backend skill service
23:04 - and we can test that real quick and this
23:07 - is where we're going to end up
23:09 - or this is where we're going to end this
23:10 - lesson but we'll come back and we'll
23:11 - talk about testing in more detail we'll
23:13 - test it by just saying
23:15 - uh open
23:16 - hello
23:18 - world and we should get a response back
23:27 - and we did so this is the request that
23:31 - the alexa service sent to our skill
23:34 - service and our skill service got that
23:37 - our skill service again our lambda
23:39 - function got that and generated this
23:42 - response and you can see it's a response
23:44 - that is
23:45 - uh having to do with space facts and you
23:47 - can listen to it here if you want to
23:49 - hear here's your fact a year on mercury
23:51 - is just 88 days long
23:53 - okay so now we we have at this point a
23:57 - functioning
23:59 - custom skill we're gonna go talk about
24:01 - what's going on here and modify it in
24:04 - the next lesson
24:10 - so now that we have a fully functional
24:12 - skill let's take a closer look at what's
24:14 - going on in
24:15 - the code for the skill service that we
24:17 - set up in the last lesson so head over
24:20 - to
24:20 - aws.amazon.com and log into the
24:22 - management council if you're not already
24:24 - logged in and then from there go to
24:27 - the lambda section of the management
24:29 - console and again you can get there by
24:31 - going to the services menu and then to
24:33 - lambda
24:35 - and now in your function list you should
24:38 - see the function that we created in the
24:40 - last lesson the hello world alexa skill
24:43 - and you want to go into that and we're
24:45 - gonna talk about the the code here that
24:47 - was provided as part of the
24:51 - uh blueprint that we selected so the
24:53 - blueprint that we selected was for a
24:54 - skill that provides space facts and if
24:57 - you wanted a space fact skill we are are
25:00 - done at at this point
25:02 - aside from maybe adding some additional
25:04 - facts or changing these ones
25:06 - uh for that matter if you wanted a fact
25:08 - skill for any topic you could go in here
25:10 - and just change these facts and and
25:12 - you'd be done
25:13 - we're gonna um we're gonna move beyond
25:16 - that and we're not gonna talk a whole
25:18 - lot about what this
25:20 - uh this blueprint provides and in fact
25:23 - we we don't need any of that stuff so
25:25 - we're gonna ignore that for right now
25:27 - the what i do want to do however is i
25:29 - want to talk about what's going on in
25:31 - here at a higher level and then talk
25:33 - about how we can make some uh changes
25:35 - that will allow functionality that we
25:38 - are going to define ourselves uh more
25:40 - specifically how to deal with the
25:43 - general greeting intent that we defined
25:45 - as part of our interaction model we're
25:46 - going to do that here but first of all
25:49 - all of this code is written in
25:51 - javascript and
25:54 - it is run in the context of nodejs and
25:58 - so node.js is an environment that allows
26:01 - javascript to be run on the server
26:03 - and this lambda function is using
26:06 - node.js to allow us to execute this code
26:09 - in here which is
26:11 - javascript so
26:13 - you don't need to know javascript or or
26:15 - node.js for this course but if you
26:17 - wanted a
26:18 - a really deep understanding of what's
26:20 - going on in here that would require
26:22 - uh an understanding of both javascript
26:24 - and node but what i will tell you is
26:27 - that
26:28 - the alexa skills kit makes doing a lot
26:30 - of this very very simple so if you are
26:33 - not
26:34 - a coder or are not familiar with
26:36 - javascript you don't need to be
26:38 - intimidated
26:40 - there might look like there's a lot
26:41 - going on here but actually it's it's
26:43 - pretty straightforward and it's pretty
26:45 - simple and that is because of this right
26:47 - here the
26:48 - alexa skills kit provides an sdk which
26:52 - is a wrapper for the
26:55 - api that makes sending and receiving the
26:58 - messages back and forth between your
27:00 - skill service and the alexa service
27:03 - really straightforward and so let me
27:05 - show you how that works so the the first
27:08 - thing i want to point out is what the
27:10 - skill is doing by default or this skill
27:13 - service and then how we're going to
27:14 - change that up so if we go into our
27:18 - service simulator and we looked at that
27:20 - real quickly last lesson and and uh we
27:23 - just say open hello world we're gonna
27:26 - see now that the skill service responds
27:29 - with a space fact because that's how
27:31 - it's set up right now and we can see
27:34 - that if we go back over here
27:36 - the launch request is the intent that is
27:40 - going to get called when
27:43 - the skill is opened without any
27:45 - utterances that are associated with
27:48 - another intent and so when you just say
27:51 - open skill or open hello world in this
27:53 - case
27:55 - this launch request is is what is going
27:58 - to pick up so in this case
28:01 - this launch request is calling this
28:03 - getfact function down here and that's
28:07 - what's replying with our
28:10 - space fact and we're going to change
28:11 - that to do something different
28:14 - and we've got
28:15 - some functionality that's provided as
28:17 - part of the
28:18 - sdk that makes that really easy
28:20 - this ask and tell down here allow us to
28:23 - prompt the user for a response or to
28:27 - just speak back a statement and we're
28:29 - going to prompt them by
28:31 - using this
28:32 - ask option up here so we'll go like this
28:36 - and then we're going to what are we
28:37 - going to ask them we're going to say
28:39 - [Music]
28:41 - welcome
28:42 - [Music]
28:44 - can you say
28:46 - hello
28:49 - and then we're if they don't respond
28:51 - we're gonna reprompt so after five
28:54 - seconds if they don't say anything we're
28:55 - gonna ask them again can you say hello
28:58 - [Music]
29:00 - okay so now when we save this
29:04 - and the user just opens the skill
29:07 - our skill should respond now with uh
29:12 - this
29:13 - welcome can you say hello and then can
29:15 - you say hello and let's see
29:17 - we'll test so open hello world
29:20 - and there we get our new response
29:22 - welcome can you say
29:24 - hello okay but
29:27 - when the user responds with hello
29:31 - well
29:34 - with hello
29:35 - our service responds with an error and
29:38 - the reason that it's responding with an
29:40 - error is because right now the
29:44 - skill service doesn't know how to deal
29:46 - with
29:47 - that
29:48 - intent so the intent
29:51 - let's take a look here so over here the
29:53 - alexa service
29:55 - sent
29:56 - this request over and this is the the
29:59 - json the the structured information that
30:02 - the service
30:03 - alexa service is sending to our skill
30:05 - service
30:06 - and it's um asking the skill service or
30:10 - telling the skill service that the user
30:12 - is looking for
30:14 - this general greeting intent here
30:17 - but we don't have code in our skill
30:20 - service that understands
30:22 - what to do with that and so we need to
30:25 - change that up to make it work
30:27 - and the
30:28 - names here
30:30 - map to intents that we've defined in our
30:32 - interaction model or should
30:34 - and so we don't have this get new intent
30:37 - in our interaction model so we'll just
30:38 - change this up to be
30:41 - general greeting
30:44 - like that
30:46 - and we're going to say we're going to
30:48 - respond back with tell
30:51 - and then
30:52 - [Music]
30:55 - nice to meet you
30:57 - okay so now when we save this
31:00 - now
31:01 - what should happen is we should
31:05 - when we open
31:07 - the skill
31:09 - alexa will prompt us prompt the user to
31:11 - say can you say hello when the user says
31:14 - hello
31:15 - alexa is going to respond with nice to
31:17 - meet you so let's give that a try so we
31:20 - will do open again
31:25 - and don't have to test it
31:28 - again but welcome can you say hello we
31:32 - will and now we say hello
31:34 - [Music]
31:37 - nice to meet you
31:39 - okay so
31:42 - there it is that is uh wiring up our
31:46 - intents that are defined in the
31:47 - interaction model with the code in the
31:51 - skill service so that the skill service
31:53 - can prompt and respond in the next
31:56 - lesson we're going to go a little bit
31:58 - deeper but we're going to start by
32:00 - talking more about testing and then
32:02 - we'll move on from there
32:04 - [Music]
32:07 - so up to this point we've been doing all
32:08 - of our testing using the service
32:10 - simulator in the developer portal but
32:11 - now we're going to take a look at a few
32:13 - other options when it comes to testing
32:16 - during the development process
32:18 - the service simulator is usually the
32:19 - first place that you're going to start
32:20 - but you'll also want to test your skills
32:23 - using voice interactions so you'll
32:24 - either need an amazon echo or some other
32:27 - alexa enabled device or software to do
32:29 - that and you don't need to go buy an
32:31 - echo but if you have one and it's
32:32 - configured with the same email address
32:34 - as your developer portal account you can
32:36 - start using your echo for testing
32:38 - without doing anything else and that is
32:40 - because
32:42 - when you're developing skills your
32:44 - skills are automatically enabled for
32:47 - your account and you can see that using
32:49 - your alexa companion app or i'm logged
32:52 - in here at uh if you go to
32:54 - alexa.amazon.com and log in and then go
32:56 - to skills and then your skills you'll
32:59 - see that your hello world skill is
33:01 - enabled so you can just say alexa open
33:04 - hello world and your hello world skill
33:06 - will respond if you're using an echo
33:09 - you can also test with any other alexa
33:11 - enabled device or software so if you
33:14 - don't have an echo there are a growing
33:16 - number of options to choose from but
33:18 - here's a few suggestions my first
33:20 - suggestion is to get the amazon shopping
33:23 - app and this is alexa enabled and
33:25 - available for both ios
33:28 - and android and so once you install the
33:30 - app there's a little microphone icon
33:33 - that you can tap and then you can talk
33:35 - to alexa just as though you were using
33:37 - an echo and this is a great option for
33:41 - for developing
33:42 - the next is
33:45 - an app called reverb and reverb is also
33:48 - available for ios and android and it is
33:52 - also got a native app for
33:55 - the mac so if you're using uh the mac
33:57 - you can install reverb and i've got it
34:00 - installed
34:01 - and with reverb installed you can click
34:03 - and hold and say
34:05 - alexa open hello world
34:10 - welcome can you say hello
34:14 - hello
34:15 - nice to meet you
34:17 - and so that is reverb this is a great
34:19 - option again if you don't have an echo
34:21 - but the the clicking and holding is uh
34:25 - maybe not uh not not ideal but works
34:28 - well
34:29 - the last option is
34:31 - called echo sim io
34:34 - and if you
34:35 - don't have an ios
34:38 - device or an android device
34:40 - or a macintosh you can install
34:43 - echo sim or actually you don't need to
34:45 - install it it's just browser-based and
34:48 - all you need for echo sim is a computer
34:50 - with a browser and a microphone so
34:53 - if you don't have any other options this
34:55 - is available for you and it works like
34:57 - the reverb app you click and hold and
35:00 - you can talk to
35:02 - alexa
35:04 - the last thing that i want to talk about
35:07 - is um testing
35:09 - the lambda functions in the aws
35:11 - management portal so uh
35:16 - this is a topic that is uh
35:19 - a bit more technical and something that
35:21 - i'll cover in more detail in a more
35:23 - advanced course but i wanted to show you
35:25 - real quickly how this works and so when
35:28 - you have lambda functions and um
35:33 - you want to start testing them uh you
35:36 - there's a test tool that's built in
35:38 - to aws for lambda and what what you're
35:42 - going to need to do to test this tool
35:45 - is configure it with the json message
35:49 - that's going to be sent to the function
35:51 - to get a response back
35:53 - and so if you don't have the the right
35:57 - request here you will
35:59 - just get an error because the
36:03 - um
36:04 - the lambda function isn't getting the uh
36:07 - the message format that it's expecting
36:09 - but it's it's really easy to get the
36:11 - right message format if you go into
36:13 - your
36:15 - test
36:16 - service simulator over here when you're
36:18 - doing testing here this service request
36:20 - is the format that you need so if you
36:23 - copy that
36:25 - and go back over to the lambda function
36:28 - here and configure and test and just
36:31 - paste that in
36:33 - if you save and test now
36:36 - you will see a successful response so
36:39 - just like being in the the service
36:42 - simulator and again this is a more um
36:44 - advanced
36:45 - topic but sometimes when you're testing
36:48 - in the service simulator if your lambda
36:50 - function is generating an error all
36:54 - you'll see is that there's an error over
36:55 - here and you don't get any details about
36:58 - what might be causing that error if you
37:00 - take the service request from over here
37:03 - into
37:04 - the the test
37:07 - test console within aws and run the test
37:10 - you'll get a lot more details about what
37:12 - might be going on and why your lambda
37:15 - function is erroring out over here and
37:17 - again uh more a little more technical
37:19 - but wanted to show you that so now you
37:22 - have a few more options for testing
37:24 - while you're in your development process
37:26 - and next we'll discuss skill design and
37:30 - planning
37:34 - as you spend more time creating skills
37:36 - you'll quickly realize that there is a
37:38 - lot more to it than just coding in fact
37:41 - you may even spend more time planning
37:43 - and designing your skill than you do
37:45 - actually building it and the topic of
37:47 - skill design and planning is one that we
37:49 - could easily dedicate an entire course
37:51 - to maybe even a few courses so in this
37:54 - lesson we're just going to scratch the
37:56 - surface and talk through
37:58 - the skill that we'll be building in the
38:00 - next lesson mostly
38:02 - okay so when you're planning a skill the
38:04 - first step is to come up with a concept
38:07 - and for this course we're going to be
38:09 - building a skill that gives users
38:10 - recommendations or suggestions for
38:12 - something and it can be whatever
38:14 - interests you so for example it could be
38:16 - recommendations for scary movies to see
38:18 - or places to visit or foods to try again
38:21 - whatever you're interested in i like
38:23 - craft beer so for my example i'm going
38:25 - to use a skill that i created called
38:27 - suggest a beer and after you've come up
38:30 - with your general concept the next step
38:33 - is to do a little research to see if
38:35 - there are any existing skills that are
38:37 - similar and to do that you can go to
38:40 - alexa.amazon.com and log in
38:42 - and
38:43 - once you've logged in you go to skills
38:45 - and then just search for your some
38:48 - keywords that would be related to your
38:51 - concept and in my case i just searched
38:53 - for beer
38:55 - and quickly realized that there are
38:57 - quite a few
38:59 - beer related skills and so i started
39:01 - browsing through those skills and
39:03 - enabling some of them uh especially the
39:05 - ones that sounded similar to my original
39:07 - concept and originally suggested beer
39:09 - was just going to be a simple skill that
39:12 - would suggest a random beer so you would
39:14 - just ask alexa to suggest a beer and you
39:17 - would get a beer suggestion back and
39:19 - what i realized is that there was a
39:21 - handful you know three or four i think
39:22 - other skills that did exactly that and
39:25 - so um that's not uncommon there's a lot
39:28 - of skills in the skill store and so if
39:30 - you if you run into that with your
39:32 - concept you just want to think about how
39:34 - your skill could be different and
39:36 - hopefully a little bit better so what i
39:38 - did is i enabled the skills that were
39:41 - closest to the the suggestion concept
39:44 - that i had
39:45 - and i realized that none of those skills
39:47 - allowed users to get beer suggestions
39:50 - for local craft beers and so i thought
39:53 - it'd be cool if somebody could suggest a
39:55 - beer
39:56 - based on their state or suggest a beer
39:59 - based on a style which is something else
40:01 - that i didn't see in any of the existing
40:03 - skills so the concept was still the same
40:05 - it's a skill for suggestion suggesting
40:07 - beers but the uh the difference was that
40:10 - i was gonna build a skill that would
40:12 - allow users to get beer suggestions for
40:15 - local craft beers
40:16 - and again so if you
40:18 - if you search your uh concept and you
40:21 - see that there's other skills that are
40:23 - doing something similar don't get
40:24 - discouraged just spend some time looking
40:26 - at those skills and figure out how you
40:27 - can make your skill a little bit
40:29 - different and uh and better
40:32 - okay so once you have locked in your
40:37 - general skill concept the next thing you
40:39 - want to do
40:40 - is start sketching out some sample
40:43 - dialogues and mapping out your your
40:45 - skill and i just do that in a
40:48 - in a google doc and uh there
40:51 - is uh
40:53 - a lot more work in planning and design
40:56 - than you um tend to think there is when
40:58 - you first get into it but i start
41:01 - with a name for the the skill and for
41:04 - the beer suggestions example i that was
41:06 - the name that i came up with beer
41:08 - suggestions
41:09 - but as i was thinking about the user
41:11 - actually interacting and the possible
41:13 - invocation requests i realized that um
41:17 - the way that i wanted it to work
41:19 - the beer suggestions name wasn't the
41:21 - right name
41:23 - for the invocation name so i used
41:25 - suggested beer as the invocation name
41:28 - and the reason that i did that is
41:30 - because i really wanted this first and
41:33 - so um in
41:35 - the uh uh alexa environment you can say
41:38 - alexa and then just reference the
41:40 - invocation name and so i made the
41:42 - invocation name
41:43 - sound like an utterance so it's alexa
41:46 - suggest a beer is the first possible
41:49 - invocation request example and that's
41:51 - really what i was most interested in and
41:54 - why i used that as the invocation name
41:56 - rather than beer suggestions so if i had
41:58 - used beer suggestions the invocation
42:00 - would have been something more like
42:02 - alexa ask beer suggestions to suggest a
42:04 - beer and i was just trying to shorten it
42:07 - to simplify it
42:09 - after you've
42:10 - thought through some possible invocation
42:13 - request examples
42:14 - and as you're thinking through these it
42:16 - doesn't necessarily mean that out of the
42:18 - gate you want to support all of these
42:19 - but you do want to spend some time
42:21 - thinking through the the different
42:22 - possible ways that a user will begin to
42:25 - interact with the skill and after you've
42:27 - done that you want to sketch out a
42:28 - couple of the simplest dialogues
42:31 - so in the shortest case what does the
42:36 - dialogue look like and for the suggested
42:38 - beer example a user would say alexa
42:41 - suggest a beer and then alexa would say
42:43 - okay do you prefer loggers or ales the
42:46 - style and then the user would respond
42:48 - logger in this example and then alexa
42:50 - would provide the suggestion in this
42:53 - case i suggest a motorworks v-twin
42:55 - vienna logger i hope you enjoy it in the
42:59 - second dialog
43:00 - i've added the
43:02 - the ability to filter or select by
43:06 - state and so the user would start the
43:10 - interaction with the skill by saying
43:12 - alexa suggest a beer from florida or
43:14 - whatever state and then alexa would say
43:16 - okay what style beer do you like and the
43:19 - user would respond logger and then
43:22 - alexa would respond with the suggestion
43:24 - in this case i'd suggest a v-twin
43:26 - vienna lager from motorworks brewing in
43:28 - bradenton florida so i'm really just
43:30 - providing the brewer and the the
43:33 - location back in this case so
43:36 - these are two really simple dialogues
43:38 - when you start thinking about this i
43:40 - mean there can be lots and lots of them
43:42 - so
43:43 - start out simple and then start thinking
43:46 - about after you've thought through the
43:47 - dialogues and also
43:49 - when you when you do the dialogues
43:51 - and sketch them out after you've thought
43:54 - through them and sketched them out
43:55 - yourself test them out with friends or
43:57 - family and you can do a little role
43:59 - playing you can pretend to be alexa ask
44:01 - your friend or family member to pretend
44:03 - to be the user tell them what the skill
44:06 - is gonna do but don't show them the
44:08 - dialogues just see what they say
44:10 - and that will go a long way to helping
44:13 - you refine your your dialogues and make
44:16 - sure that you're you're on the right
44:17 - track in terms of how the interactions
44:20 - might go
44:21 - after you've gone through that exercise
44:23 - you can start or what i like to do is
44:25 - bullet point the key features and then
44:28 - prioritize them into like key features
44:31 - which are the features that i want to
44:32 - make available
44:34 - as soon as possible and likely as soon
44:36 - as i uh publish the skill for the very
44:39 - first time and then secondary features
44:41 - are kind of backlog features that i
44:44 - might someday want to add as i as i get
44:46 - time
44:48 - so the primary features in this case are
44:51 - features that um i selected because they
44:53 - weren't available in other skills that
44:55 - were similar so that's why they were my
44:57 - primary features
44:59 - and then from there i start mapping out
45:02 - the intents that will be included in the
45:05 - skill and i am just focused on the
45:06 - custom intents here and in this skill
45:09 - it's a simple skill so we're just going
45:11 - to have one intent make a suggestion and
45:14 - then we want to think about the slot
45:16 - values that are going to be required to
45:18 - make that suggestion and so in the case
45:21 - of my um suggest a beer skill i wanted
45:24 - the state and the style in this case of
45:28 - your skill you might choose different
45:30 - slots that that you need to let the user
45:33 - filter for your suggestion
45:36 - the utterances are the last thing that i
45:38 - think about and this list can get very
45:40 - very long so
45:42 - as you start thinking through all of the
45:44 - different ways that a user could make
45:46 - requests or
45:48 - statements or ask questions or provide
45:50 - information to your skill which are all
45:52 - referred to as utterances like we talked
45:54 - about earlier there are lots and lots of
45:56 - different variations so start out with
45:59 - some simple ones and then start building
46:02 - your list out and with the suggested
46:04 - beer
46:05 - skill
46:06 - this list got well over 50 very very
46:09 - fast so that list will grow quickly but
46:12 - the more
46:13 - utterances that you provide the smarter
46:15 - your skill is going to be and the better
46:16 - the user experience is going to be so
46:18 - it's worth spending the time to to do
46:20 - that
46:21 - okay so
46:23 - like i mentioned in the beginning of
46:25 - this lesson there's a lot to know when
46:26 - it comes to planning and designing
46:28 - skills and we've covered some of the
46:30 - basics but you'll also want to check out
46:32 - the alexa voice design guide and you'll
46:34 - also want to read through the developer
46:36 - documentation about understanding how
46:38 - users invoke custom skills and i've
46:41 - included links to both of those
46:43 - resources in the course notes
46:45 - okay now we are ready to start building
46:48 - our skill and we'll get started on that
46:51 - in the next
46:54 - lesson okay so now it's time to take
46:58 - everything that we've learned so far and
46:59 - pull it all together to create a
47:01 - complete skill end to end and we're
47:03 - going to be creating the skill that we
47:04 - talked about in the last lesson the
47:06 - suggestion or recommendation skill and
47:08 - i'm going to use the local craft beer
47:10 - example
47:12 - and it's going to be a skill that lets
47:14 - users get a local craft beer suggestion
47:16 - for a beer
47:18 - brewed in a given state
47:20 - we'll start by creating our skill or
47:22 - setting it up in the developer portal
47:24 - and then we'll head over to
47:26 - aws and we will create our lambda
47:29 - function
47:31 - i have included a link to
47:33 - the code that i'm going to be using for
47:36 - this lesson i put it in github so you
47:38 - can use that as a reference so let's go
47:42 - into the developer console first and add
47:45 - our new skill here and i'm going to call
47:47 - this one beer suggestions
47:51 - [Music]
47:52 - and i'm going to use beer suggestions
47:54 - also for the invocation name
47:59 - and
48:02 - and for the interaction model this time
48:04 - rather than using the skill builder beta
48:07 - we're just going to add an intent schema
48:10 - and some sample utterances and i have
48:13 - those that you can use as a starting
48:16 - point
48:17 - on github and so i'm going to take that
48:20 - and add my intent schema here there's
48:23 - just one custom intent in this intent
48:25 - schema called make suggestion and a slot
48:28 - for this example which is the state slot
48:31 - to hold the state that we're going to
48:32 - get the beer suggestion for
48:35 - and then
48:36 - we've got some built-in intents that are
48:39 - required for the cancel intent the help
48:41 - intent and the stop intent
48:43 - we also need some utterances and we are
48:46 - going to use some examples here and
48:50 - build from those or you would want to
48:51 - build from those as you
48:54 - build out a complete skill so i'm just
48:56 - going to include three so the user can
48:59 - suggest a beer from state or say alexa
49:02 - ask beer suggestions to suggest a beer
49:05 - from state
49:06 - and a couple of different variations of
49:08 - that so go next
49:12 - and while that's building we will head
49:14 - over to the
49:17 - aws management console and we'll add our
49:19 - lambda function so we'll go create a
49:21 - function here
49:23 - we're going to select the
49:25 - skills kit for node again but we're not
49:28 - using any of that code this time so it
49:31 - will include the
49:33 - boilerplate code that comes with the
49:35 - blueprint but we're going to get rid of
49:37 - all of this but first we're going to
49:38 - give it a name so i'll say
49:41 - we'll call it beer
49:43 - suggestions
49:46 - alexa skill
49:51 - okay we'll get rid of that and
49:54 - down here
49:55 - we're going to start with a just a bare
49:59 - bones
50:00 - [Music]
50:02 - hello world skill here all this
50:05 - skill service does
50:09 - is and you can type that in for practice
50:12 - uh but um
50:14 - all this does here is includes some
50:18 - handlers for built-in intents to help
50:20 - cancel and stop intent and then an
50:22 - unhandled uh intent handler here so if
50:26 - the skill doesn't know what to do with
50:27 - the request that comes in this is going
50:30 - to respond and then the launch request
50:33 - just right now responds so when you go
50:36 - alexa open
50:37 - in our case beer suggestions it's just
50:40 - right now i'm gonna say hello world so
50:41 - it's not doing a whole lot there we're
50:42 - gonna build from that
50:44 - and then we just select the execution
50:46 - role and
50:48 - we say next and then create function
50:52 - and
50:54 - now we have our arn here so we've got
50:57 - our lambda function
51:00 - and
51:01 - the arn is going to be used back over
51:03 - here in the developer console
51:06 - as our endpoint so i'm going to paste
51:08 - that in just like that
51:13 - and now
51:14 - i just need to
51:16 - test to make sure that
51:18 - everything is working up to this point
51:20 - so i'll say uh open
51:23 - uh beer suggestions
51:26 - that see if we get a response back
51:30 - and we do and as you can see it's just
51:31 - saying hello world now so not doing a
51:34 - whole lot
51:35 - so what we're going to do
51:36 - at this point is we're going to go back
51:38 - over here and we're going to go to our
51:41 - code
51:42 - and we're going to change it up so that
51:44 - users can ask for a beer suggestion by
51:48 - state and you can expand this here which
51:50 - makes it easier in a future course we're
51:52 - also
51:53 - going to take a look at some different
51:57 - code editors that you would maybe use in
51:59 - your local environment so if you use mac
52:01 - or windows and if you're making a more
52:04 - involved skill you'll definitely want to
52:06 - use a code editor this is great for just
52:09 - getting started and doing simple skills
52:11 - in the browser but
52:12 - uh not probably ideal for anything
52:15 - beyond something that's pretty simple
52:17 - like what we're doing okay so let's go
52:19 - back over here i've got the um
52:22 - the code that we're going to use for for
52:24 - my example here you'll want to modify
52:26 - this if you're picking a different topic
52:30 - but it's going to work for the most part
52:32 - the same way so we're going to start
52:34 - with this here
52:36 - which is uh the data that's going to
52:39 - hold our
52:41 - suggestions and so in this case here
52:44 - this is a
52:45 - a javascript object and it's providing
52:49 - in my case just
52:51 - three um
52:53 - three
52:55 - objects within the the object so that so
52:57 - this is actually a an array of objects
53:01 - and there's three objects in here
53:04 - you can kind of think of this like an
53:05 - excel spreadsheet each one of these
53:07 - would be rows and then
53:09 - for each one of the rows we've got two
53:11 - different cells with values so we've got
53:14 - state or columns and suggestion
53:17 - and then a value for each one so what
53:19 - we're going to need to do is we're going
53:20 - to need to when the user requests a
53:23 - suggestion for for example florida here
53:26 - we're going to need to loop through
53:28 - these find florida and then read back
53:30 - the suggestion and i see a typo here too
53:32 - so this is supposed to be georgia
53:37 - that
53:38 - okay so the next thing that we're going
53:40 - to do is we're going to
53:43 - provide the code that is going to do the
53:46 - looping and
53:47 - searching for the response
53:49 - and this is outside of what we've talked
53:52 - about up to this point but i want to
53:55 - show you what's going on anyhow so that
53:57 - now this is
53:58 - just a a little code snippet that i
54:01 - wrote in javascript that we're using in
54:04 - here
54:05 - and i'll tell you what it's doing so
54:06 - this is a javascript function that's
54:09 - going to loop through this data and find
54:12 - the uh the value for whatever is passed
54:15 - in as the property name and the value
54:17 - here so the property name in this case
54:19 - we're going to use state and then the
54:21 - value is going to be whatever the user
54:23 - has asked for and that gets passed over
54:26 - as
54:27 - the value of the state slot from the
54:30 - alexa service
54:32 - okay so next so i've got my data and
54:36 - i've got a way to search through my data
54:38 - here so now i want to go in here and i
54:40 - want to
54:42 - add a handler to do that searching so
54:46 - i'm going to go over here
54:48 - and i've got just one handler function
54:51 - for my one custom intent which is my uh
54:55 - make suggestion intent so i'm gonna grab
54:58 - that and i'll tell you what is going on
55:01 - here also um
55:04 - okay so we're
55:07 - setting the state slot
55:10 - variable value to the value that comes
55:13 - over with the request for the state so
55:17 - the alexa services making the request
55:19 - and within that request the slot
55:22 - state value is what we're setting to the
55:25 - value of this
55:26 - uh variable that we're creating here
55:30 - and now down here we want to respond
55:33 - back with
55:34 - the
55:36 - data
55:37 - suggestion or the suggestion from our
55:39 - data up here so
55:41 - that's where we use our get suggestion
55:44 - function that we created earlier here so
55:46 - we're responding back calling this
55:48 - function get suggestion
55:50 - passing in our data which is
55:53 - all of this here that we call skill data
55:57 - and setting the
55:59 - property name
56:01 - which is state
56:03 - and the value that that function needs
56:07 - we are taking from here that's being set
56:10 - to what the alexa service passed over
56:13 - and then i am setting that to uppercase
56:16 - to ensure that it matches my data here
56:19 - and then when it finds that it will
56:24 - reply back or provide back the uh the
56:28 - object with the information that we need
56:31 - with the suggestion and so
56:34 - i pull the suggestion from that object
56:36 - to
56:37 - write back or to to respond back to the
56:40 - user
56:41 - okay the only other thing that needs to
56:43 - happen here is we just need to change up
56:46 - the launch request so that when the user
56:48 - opens the
56:50 - skill uh we're telling them what to do
56:53 - and so
56:55 - i've got this here
56:58 - and i'll grab this let's see
57:01 - [Music]
57:03 - and we
57:05 - are gonna
57:06 - paste that in so now
57:08 - when the skills open
57:10 - alexa says i can suggest a beer from any
57:13 - state in the united states what state
57:15 - would you like a beer suggestion for and
57:17 - then the re-prompt asks them to uh
57:20 - to give a state if they don't respond
57:23 - within a few seconds
57:25 - okay at this point we have everything
57:28 - that we need for the skill service
57:30 - and
57:31 - i'm going to go ahead and save that
57:38 - and if you're creating a skill using a a
57:41 - different topic which you probably are
57:43 - you can change up the slot name here
57:46 - you could also if you want to expand it
57:48 - a little bit you can add some additional
57:50 - values and and use those in your
57:54 - response as well down here
57:56 - but at this point i've got my skill
57:58 - service built out now i just want to go
58:01 - test it so i'll go back over to the
58:04 - developer
58:06 - console here and go into the service
58:09 - simulator and uh start by opening
58:13 - your suggestions again to make sure that
58:15 - that is working and now i just want to
58:19 - try like
58:21 - one of my utterances
58:24 - and i'll say from florida
58:28 - and that is working so my suggestion for
58:32 - florida and if i go back over here just
58:34 - to verify yes that's what it's supposed
58:36 - to be responding with of course when i
58:38 - finish this up i want to add all 50
58:40 - states and i'll want to add a real
58:42 - suggestion for each one of the states
58:44 - whatever
58:45 - beer i want to respond back with i don't
58:47 - think i've had a beer from all 50 states
58:49 - but that's
58:51 - maybe something i can put on my to-do
58:53 - list
58:54 - okay so let me just test with one other
58:56 - state
58:57 - [Music]
58:59 - i'll test with alabama
59:02 - and okay it is working so at this point
59:06 - i've got my
59:07 - skill end to end set up i've got my
59:10 - interaction model i've got my skill
59:12 - service
59:13 - i'm testing it everything seems to be
59:15 - working and now we
59:18 - are ready to polish it finish it and
59:20 - then
59:21 - submit it for
59:23 - certification so we'll talk about that
59:26 - in the next lesson
59:32 - so after you have finished coding up
59:34 - your skill you want to
59:36 - test it and retest it and test again
59:38 - testing is is super important we talked
59:41 - about it in an earlier different ways of
59:43 - testing in an earlier lesson and you
59:44 - really want to spend time going through
59:46 - and considering different utterances and
59:49 - testing those utterances and uh in
59:51 - polishing the the skill and once you've
59:53 - gotten to the point where you feel
59:55 - pretty good about it you've tested it in
59:58 - all the different ways that you think a
60:00 - user might use it and all of the
60:02 - utterances that you've provided
60:04 - then you want to start getting your
60:06 - skill ready to go through the
60:08 - certification process so that you can
60:09 - get it out there and make it public and
60:12 - available for everybody else to use and
60:14 - that's what we're going to talk about in
60:15 - this lesson
60:16 - if you go to the the the test tab for
60:19 - your skill or the test section there's a
60:22 - link all the way at the bottom
60:24 - c certification requirements in our
60:26 - technical documentation
60:28 - you'll want to read through this
60:31 - we'll talk through some of this stuff
60:33 - but you want to be familiar with the
60:34 - certification process and the
60:36 - requirements especially the guidelines
60:38 - around the um
60:41 - uh
60:42 - invocation name you'll want to take a
60:45 - look at the invocation name guidelines
60:47 - and just make sure that you've dotted
60:48 - all your eyes and and crossed all your
60:50 - keys before you uh submit for the
60:53 - certification process but once you've
60:54 - done that you fully tested it yourself
60:57 - then you would go
60:58 - to the publishing information here and
61:02 - complete the required information here
61:03 - which is pretty straightforward so
61:05 - you're going to pick a category that
61:06 - your skill will be classified in and for
61:10 - the beer suggestion example i'm gonna
61:12 - use food and drink and
61:14 - wine and beverage and then testing
61:15 - instructions um i'm gonna just say no no
61:18 - special
61:24 - it's just there's nothing special about
61:26 - the the testing here but you it does
61:28 - require you to provide something so i'm
61:30 - going to add that in there
61:32 - let the skill i'm going to let it be
61:33 - available for any country even though it
61:35 - only gives suggestions for states in the
61:37 - united states right now maybe somebody's
61:39 - traveling and wants to try a local beer
61:41 - then you would provide a description a
61:43 - description for the skill um
61:45 - [Music]
61:47 - find
61:49 - local
61:52 - beer by state
61:55 - and you probably want to come up with
61:59 - something a little bit better for your
62:00 - skill and
62:02 - for the skill description something
62:04 - that's going to get people excited about
62:06 - wanting to try your skill but just to
62:08 - walk through this i'm going to go with
62:09 - something simple and then you want to
62:11 - provide some example phrases and this is
62:13 - going to
62:14 - let users know how they're going to use
62:16 - your skills so it might say alexa
62:20 - ask
62:21 - beer suggestions
62:27 - to
62:29 - suggest
62:31 - a beer
62:33 - from florida
62:37 - maybe we'll say alexa
62:39 - open
62:41 - beer suggestions
62:45 - and
62:46 - suggest a beer
62:50 - from
62:52 - [Music]
62:54 - something like that so you want to
62:56 - fill these out in
62:58 - ways that would show your user how to
63:01 - use your skill
63:02 - and then provide some keywords down here
63:05 - these are optional but i'll do beer
63:09 - [Music]
63:13 - craft brewing
63:15 - something like that
63:16 - and then you want to provide some uh
63:18 - some icons so these they do need to be
63:20 - the the right size so 108
63:23 - by 108 pixels for the small icon and 512
63:26 - by 512 for the larger icon and i've got
63:28 - some created that i'll use here so this
63:30 - is my small icon
63:37 - and my large icon here
63:44 - okay and from here you need to go on and
63:50 - uh
63:51 - answer some questions about privacy and
63:53 - compliance so does the skill allow users
63:56 - to make purchases or spend money and in
63:58 - my case no
63:59 - does it collect personal information no
64:02 - does it target children under 13 no and
64:05 - then you'll want to read the export
64:07 - compliance and agree to that
64:09 - and then last does it contain any
64:11 - advertising and no and then this down
64:14 - here you do need to provide a privacy
64:16 - url and a terms of you use url so
64:20 - i've got those on my site
64:27 - [Music]
64:28 - and they do check these so
64:30 - at least they make sure that there's
64:32 - something there so you do need to
64:33 - provide this
64:35 - and i've got the other one is called
64:37 - terms
64:38 - [Music]
64:40 - and then once you have this you can hit
64:43 - save
64:44 - and at this point we're ready for
64:47 - certification so i
64:49 - could just click submit for
64:51 - certification and this would go through
64:53 - the certification at this point there's
64:55 - also an option
64:56 - before you certify to test your skill
65:00 - with other users beta users so if you
65:02 - want to do that
65:03 - you would provide email addresses for
65:06 - the users that that you want to test
65:09 - and then it would uh send out an info
65:12 - like a link for them to to try it and
65:15 - if they approve then they would be able
65:17 - to test your skill that way before you
65:20 - certified it so that's uh that's an
65:22 - option
65:23 - the certification process the the
65:26 - um experiences that i've had it's you
65:27 - know a day or two it's pretty quick and
65:30 - if you uh if it doesn't get approved for
65:33 - whatever reason the response back is is
65:36 - very clear on what you'll need to do to
65:38 - to fix it and uh once you fix whatever
65:40 - the issue is and resubmit it uh the the
65:43 - process goes goes pretty quickly it's
65:45 - still you know the last time
65:47 - i had one that wasn't approved it was i
65:49 - think it's just a few hours later after
65:51 - i fixed it and they reapproved it so
65:53 - goes pretty pretty quickly but at this
65:56 - point
65:57 - you have a complete skill that's ready
65:59 - to go and ready to uh ready to be
66:02 - certified and
66:04 - from there it will be live for anybody
66:07 - to to use it so
66:09 - that is our last lesson we will review
66:13 - in the next lesson and talk about some
66:15 - next steps from there
66:20 - so congratulations you've completed the
66:22 - course
66:23 - you should now have a solid introductory
66:25 - level understanding of how to build
66:26 - custom alexa skills and hopefully you
66:28 - should be really close to having your
66:30 - first skill published
66:33 - from here you'll want to practice what
66:35 - you've learned thus far and then move on
66:37 - to some more advanced topics here's some
66:39 - suggestions for possible next steps
66:42 - first subscribe to the dabble lab
66:44 - channel on youtube i publish a new video
66:46 - there every friday and most of those
66:49 - will be related
66:50 - next
66:52 - get a code editor coding in the browser
66:54 - like we did for this course is fine for
66:56 - getting started but not for developing
66:58 - more advanced skills i use an open
67:00 - source editor called atom i like it a
67:02 - lot it works on mac linux or windows and
67:05 - best of all it is free
67:08 - consider taking a javascript course if
67:11 - you want to build more advanced alexa
67:12 - skills at least with node.js most of
67:15 - what you'll need to know is javascript
67:18 - we talked about javascript at a very
67:20 - high level but you'll want to dive
67:21 - deeper there for sure
67:24 - you'll also want to learn more about
67:26 - nodejs
67:28 - learning node mostly involves learning
67:30 - javascript but understanding how node
67:32 - works and how to use node modules can
67:34 - make your life as a coder much much
67:37 - easier
67:38 - the node module you'll want to be most
67:40 - familiar with at least for alexa
67:42 - development is the alexa skills kit sdk
67:45 - for node you can learn more about that
67:47 - by going to github.com
67:50 - alexa and while you're there dig into
67:53 - the sample code in the alexa cookbook
67:57 - well that's it i really hope you enjoyed
67:59 - the course and i also hope that if there
68:02 - is anything that you think i can do to
68:04 - make it better that you will let me know
68:06 - and if you have any questions about
68:09 - anything that we've covered
68:11 - please don't hesitate to leave a comment
68:13 - and i'll respond just as quickly as
68:14 - possible
68:16 - thanks again for taking the course i
68:18 - hope to see you in a future course
68:27 - you

Cleaned transcript:

hi this is steve with dabble lab welcome to the course this is amazon alexa development 101 and i'll be the voice behind the videos and the guy that you can ask questions to as you work your way through the lessons the goal of this course is to give you an introduction to building skills for amazon alexa and to do that as quickly as possible but without moving so fast that you don't get a solid understanding of what you're doing this is an introductory level course so if you have experience programming that's great but if you've never written a line of code in your life that is okay too there is absolutely no prior experience necessary that said to make the best use of our time i will make some assumptions for example i'll assume that you're familiar with what alexa is from a user perspective and that you have some basic computing skills the course is broken down into a collection of short videos all of them are under 10 minutes but most are around 5 minutes also there are a lot of really great resources online that complement this course so i'll mention some of those as we go and provide links finally all of my demos will be done on a mac but if you're using windows or linux you should be able to follow along just fine okay that's it for my introduction to kick things off in the next video we'll talk about getting started with alexa development and how alexa works from a high level technical perspective so the jumping off point for getting started with alexa development is the amazon developer portal and it's located at developer.amazon.com and to get started you'll want to spend some time browsing through the public pages there especially the alexa section of the site what you'll quickly learn when you do that is that alexa is way more than just the brand and the brains behind the amazon echo alexa is also a service from amazon that makes it possible for anybody to extend alexa's capabilities or incorporate alexa into smart devices and software for developers the amazon alexa service provides the alexa skills kit and the alexa voice service the skills kit lets you add new capabilities that make alexa smarter these are called skills so if alexa doesn't do something now that you'd like her to do you can teach her how by creating a skill the alexa voice service on the other hand is used for adding alexa to new devices or software so for example if you wanted to create a voice enabled toaster with alexa embedded in it you'd use the alexa voice service to do that our topic in this course is building skills so we're going to be taking a closer look at the alexa skills kit the alexa skills kit is a collection of resources to make it easier for developers to create new skills and the skills kit includes documentation software development kits application programming interfaces and example code and we'll be talking about these in more detail later in the course using the skills kit is completely free in fact most of what you are going to be doing uh you should shouldn't have to pay for that's building publishing and hosting skills and certainly nothing that we're doing in this course should cost you anything at a very high level there are two things that you're going to need to do to create skills you'll need to tell the amazon alexa service about your skill and you'll need to build a skill service that provides your skills functionality the first part is done through the amazon developer portal and it doesn't require any coding but it does require an understanding of how alexa works from a technical perspective and we'll be covering that building a skill service is a bit more technical and does require coding however even if you've never coded anything before in your life you can build a skill service using amazon web services pretty easily and that's what we'll be doing in this course we'll talk more about skill services in a minute but first let's take a closer look at the skill setup skill configuration settings tell the amazon alexa service about your skill so alexa knows how to recognize when users are requesting your skill and the functionality that it provides new skills are set up through the amazon developer portal at developer.amazon.com and when you set up a new skill you define how users enable and interact with it and how the alexa service will communicate with your skill service that's going to provide the skills functionality the developer portal is also where you provide details about your skill for users and where you submit your skill to be published for anybody to use we'll talk about that in more detail later on in the course your skills service provides your skills functionality and this is the code that you're going to write to take action on and respond to user requests amazon doesn't care how you create your skill service you can use any programming language or technology stack as long as it can properly communicate with the alexa service that said the easiest and the recommended way to build skills is by using amazon web services or aws and that's what we'll be doing so to wrap up let me summarize how alexa works with custom skills first a user speaks to an amazon echo or an alexa enabled device and the audio is streamed from the device to the alexa service next the alexa service converts the voice stream to text and determines if the request is for a skill by looking at skill configuration information that the developer set up if the request is for a skill the alexa service sends the request to a skill service that's set up to provide the skills functionality and the skills service takes action on the request and generates a response that's sent back to amazon alexa through the alexa skills kit api from there the alexa service responds back to the user and the process is complete okay so that is it for our high level technical overview in the next video we'll set up a skill in the amazon developer portal so in the last lesson you learned that there are two things that you need to do as a developer to create a new skill you need to set up your skill in the amazon developer portal and then you need to build a skill service to provide your skills functionality in this lesson we're going to set up our skill in the developer portal the bare minimum requirements and to do that you're going to need to have an amazon developer account and you can get that by going over to developer.amazon.com if you're not already there and signing up i'm not going to walk through the signup process because it's pretty straightforward the one point that i do want to make however is that when you're signing up if you're creating a developer account you want to use the email address that you use with your primary amazon account so if you've got an amazon prime account or an account that you use for your echo if you have an echo which incidentally another point i don't think i made is that you don't need to have an echo to do development and i'll get into that a little bit later but point here is that you want to use the email address that you use with your primary amazon account it'll make testing a whole lot easier when you sign up if you don't have an amazon account of course you can create one as you go through the the sign up process and there's no charge to create a developer account that's that's free and once you've created your account you can go ahead and log in and when you log in you'll be at the developer council and the dashboard is where it drops you by default and from here what you want to do is you want to go over to the alexa menu and then under the alexa menu you've got two options the skills kit and the voice service we talked about what those were in an earlier uh lesson and we're dealing with skills so we're gonna get started with the skills kit and when you come in here if you haven't created skills yet you're going to see what i'm looking at right now which is just a blank list there's no skills created at this point and we're going to add a new skill by clicking the add new skill button here and we're just setting up the bare basics for our skill and so there's a number of pieces of information that we're going to provide there's no coding in here so everything that we're going to do in the developer portal is really going to be configuration information so no no coding here we're going to do that in in a little bit but there is quite a few pieces of information that we need to provide it it looks intimidating when you first kind of start poking through this but it's actually not too bad the skill information is where it all starts you um can leave most of the defaults so we're going to stick with the custom interaction model and this is going to provide us with the most flexibility when we're creating skills there are different skill types we're not going to cover these other skill types in this course but if you're curious about what they are you can learn more by clicking this link the language is we're going to also in this case in my case i'm going to use u.s english and and that's my default but alexa supports u.s english uk english and german and actually when you create a skill you can create the skill to support multiple languages that's also outside what we're going to cover in this course so i'm going to leave the default as u.s english the defaults were also going to leave down here under the glo global field so the audio player video app and rendered templates we're not going to be covering those in this course so you can leave those all as no what we do need however is our skill name and the invocation name and we're going to use hello world for both the skill name and the invocation name and the skill name is the name that users are going to use to find our skill both in the alexa companion app that's on your iphone or your android phone and then also they're going to use that to enable the skills so if you're familiar with how alexa works you enable skills by saying alexa enable skill name and then you work with skills or you invoke the functionality of skills by using the invocation name so after i had enabled my skill i would say alexa ask hello world something or alexa tell hello world something as an example and then my skill would understand the user's intent which we're going to get into in the next video based on what they say and then provide or act on the user's request at that point and so right now we just need hello world for our name and hello world for our invocation name and we'll be all set we can use just about anything while we're developing for the skill name and the invocation name but when you get ready to publish your skill there are guidelines for the invocation name that you need to follow so that your invocation name doesn't collide with or conflict with existing skill functionality or alexa native functionality and so you want to review those guidelines when you get ready to publish your skill we're going to cover that later we'll get into that but if you're curious you can certainly click on the link here to read more about that but at this point all we need to do is click save and we have uh created the bare minimum for settings that are required to uh to to get our skill going we'll need to finish up the configuration with our interaction model we'll need to tell our skill how to pass information and get information back from our skill service which we do under the configuration settings and then there's an area to test our skill and then we uh submit our skill for publishing here and there's some privacy and compliance information that we need to provide on this last section here it looks like a lot we're going to walk through all of it it's actually not too bad but for right now that is where we're going to leave it and then in the next lesson we're going to talk more about the interaction model and get into intents and slots in the last lesson we set up our hello world skill in the developer portal with the bare minimum settings so in this lesson we're going to pick up where we left off and we're going to set up an interaction model for our skill an interaction model let's the amazon alexa service know how users are going to interact with our skill the interaction model is essentially configuration information that's provided in a structured format that the alexa service can understand and to get a bit more technical the interaction model is structured as json or javascript object notation and if you're familiar with json that's great but if not no worries because there is a tool that you can use to create an interaction model and you don't need to know anything about jason to use it and this is new it is um still in beta but it's pretty nice and we're going to use it to create our interaction model here so we'll just go in and launch the skill builder so interaction models can get pretty complex depending on what your skill does but the two most important things that you need to know about are intents and slots and intense represent the actions your skill can perform based on what users say and by defining intents and what users might say that's associated with those intents that lets uh the alexa service know how to uh process the what the user's saying and what users want and how to pass that on to our skill service so that the skills service can respond intents might also have arguments and those are called slots so slots are used to extract specific pieces of information from what users say for example if you wanted a skill that was able to address a user by name our skill might prompt the user by saying what's your name to that the user might respond by saying my name is steve so to get the value steve from a user's response we'd use a slot and we'll take a look at slots in more detail in a later video but for now we're just going to set up a simple intent named general greeting that our skill can respond to when a user says hello and to do that we go in over here and we're going to add an intent and there are two types of intents there's custom intents and builtin intents um for right now we're just going to set up a custom intent and again the name of that intent is going to be general greeting we'll spell that right like that and we'll create that intent and the our skill is going to respond when a user says hello so that is going to when a user says hello that's going to tell our skill to um act on the general greeting and that is what we're going to end with for now so we'll save our model and then we'll build our model which will take a minute okay that is it for this lesson we have our skills set up with a basic interaction model and now it's time to start building our skill service and we're going to dive into that in our next lesson so at this point we have our skill set up and we have a basic interaction model that has one custom intent named general greeting and that intent handles a case where a user says hello now we need a skill service to actually do something with an intent request and since skills extend alexa's capability and can be created by anybody the logic for a skill lives outside of the amazon alexa service so we need to build and host our skill service and then tell alexa where that service is located and we do that in the configuration section of the alexa skill here i mentioned earlier that amazon doesn't really care where your skill exists or how it was created in terms of like the programming language or the technology stack just so long as it can communicate with the alexa service but the easiest and recommended way to create and host a skill service is by using lambda functions through amazon web services or aws and that's what we're going to do so you're going to select the aws lambda arn option here and then we're going to need an arn which is an amazon resource name which is the identifier for the lambda function so to get that and to set up the lambda function you need to head over to aws.amazon.com and create an account there if you don't have one already make sure that you use the same email address that you used when you created your account on the amazon developer portal the sign up process is straight forward so i'm not going to walk through that the one point i will make however is that in the aws signup process you will get prompted for a credit card i mentioned earlier that nothing that we're doing in this course is going to cost anything because aws provides a free tier and you can see that here the first million requests per month are free so as long as you don't go over that we are good uh but if you want to learn more about the pricing just go to aws.amazon.com pricing and you can see how the the pricing works after you've created your account go ahead and log into the management console i'm logged in right now once you log in you want to go to the services menu up here and then you want to under the compute section you want to go to lambda here okay and before i create a lambda function i just want to talk for a minute about what this is so lambda functions are referred to as uh serverless functions so it's a platform that allows you to create services software services without having to worry about setting up and creating the server which is where that serverless name comes from of course there are servers behind it but we don't have to think about any of that stuff we can just jump right in and write our code and it's a really nice and easy way to uh to do it because just a lot of the um a lot of the complexity is not something that you have to worry about in terms of the the hosting and the infrastructure so we just jump in and start working in the code so what we're going to do here is we're going to create a function and amazon provides some templates they call them blueprints that you can use as a starting point and lambda can be used for lots of different things not just creating alexa skills but if you search for alexa alex alexa that works you'll see some of the the blueprints that are provided we're going to use one of these blueprints uh to get started but i'm not gonna talk through what the the blueprint is doing the reason that we're gonna pick one of the alexa blueprints is because the alexa skills kit has an sdk or a software development kit that makes it easier to communicate back and forth with the alexa service we're going to be coding our skill and node and when you use the blueprint the alexa sdk is included with it so just select any one of the node js sdks and i'm going to choose this alexa skills kit sdk for fax skill the next screen what we're going to do is we're going to set it up so that it is triggered when a request comes in from the alexa skills kit so we do that by selecting alexa skills kit here and then we move on and we give our function a name so i'm going to call this hello world alexa skill like that and i'm going to get rid of the description here you don't have to do that but and then you can see the the template code here that's provided again i'm not going to get into this right now we will come back and talk about that a little bit but this is a a skill service for a space fax skill so uh the the only other thing that you need to do to get the the skill service code set up is select a an execution role and this is what gives the lambda function permission to run and if you're just getting set up and you have not done this before you're going to want to select from here create a custom role and when you do that a window will pop up that will walk you through the process it'll create a role named lambda underscore basic execution by default you don't need to change any here thing here you just choose allow and then that will pop you back over here and that role will be selected and that's all you need to do for for this example you choose next and then create function and that is it so we have our um we have our skill service set up as a lambda function now the only thing left to do is to let the skill in the developer council know the arn or the amazon resource name which is this up here so we just want to copy that and then go back to the alexa developer or the amazon developer portal and to our alexa configuration and then we want to go ahead and paste in that arn and so when we do that and click save now we have our settings connected to our backend skill service and we can test that real quick and this is where we're going to end up or this is where we're going to end this lesson but we'll come back and we'll talk about testing in more detail we'll test it by just saying uh open hello world and we should get a response back and we did so this is the request that the alexa service sent to our skill service and our skill service got that our skill service again our lambda function got that and generated this response and you can see it's a response that is uh having to do with space facts and you can listen to it here if you want to hear here's your fact a year on mercury is just 88 days long okay so now we we have at this point a functioning custom skill we're gonna go talk about what's going on here and modify it in the next lesson so now that we have a fully functional skill let's take a closer look at what's going on in the code for the skill service that we set up in the last lesson so head over to aws.amazon.com and log into the management council if you're not already logged in and then from there go to the lambda section of the management console and again you can get there by going to the services menu and then to lambda and now in your function list you should see the function that we created in the last lesson the hello world alexa skill and you want to go into that and we're gonna talk about the the code here that was provided as part of the uh blueprint that we selected so the blueprint that we selected was for a skill that provides space facts and if you wanted a space fact skill we are are done at at this point aside from maybe adding some additional facts or changing these ones uh for that matter if you wanted a fact skill for any topic you could go in here and just change these facts and and you'd be done we're gonna um we're gonna move beyond that and we're not gonna talk a whole lot about what this uh this blueprint provides and in fact we we don't need any of that stuff so we're gonna ignore that for right now the what i do want to do however is i want to talk about what's going on in here at a higher level and then talk about how we can make some uh changes that will allow functionality that we are going to define ourselves uh more specifically how to deal with the general greeting intent that we defined as part of our interaction model we're going to do that here but first of all all of this code is written in javascript and it is run in the context of nodejs and so node.js is an environment that allows javascript to be run on the server and this lambda function is using node.js to allow us to execute this code in here which is javascript so you don't need to know javascript or or node.js for this course but if you wanted a a really deep understanding of what's going on in here that would require uh an understanding of both javascript and node but what i will tell you is that the alexa skills kit makes doing a lot of this very very simple so if you are not a coder or are not familiar with javascript you don't need to be intimidated there might look like there's a lot going on here but actually it's it's pretty straightforward and it's pretty simple and that is because of this right here the alexa skills kit provides an sdk which is a wrapper for the api that makes sending and receiving the messages back and forth between your skill service and the alexa service really straightforward and so let me show you how that works so the the first thing i want to point out is what the skill is doing by default or this skill service and then how we're going to change that up so if we go into our service simulator and we looked at that real quickly last lesson and and uh we just say open hello world we're gonna see now that the skill service responds with a space fact because that's how it's set up right now and we can see that if we go back over here the launch request is the intent that is going to get called when the skill is opened without any utterances that are associated with another intent and so when you just say open skill or open hello world in this case this launch request is is what is going to pick up so in this case this launch request is calling this getfact function down here and that's what's replying with our space fact and we're going to change that to do something different and we've got some functionality that's provided as part of the sdk that makes that really easy this ask and tell down here allow us to prompt the user for a response or to just speak back a statement and we're going to prompt them by using this ask option up here so we'll go like this and then we're going to what are we going to ask them we're going to say welcome can you say hello and then we're if they don't respond we're gonna reprompt so after five seconds if they don't say anything we're gonna ask them again can you say hello okay so now when we save this and the user just opens the skill our skill should respond now with uh this welcome can you say hello and then can you say hello and let's see we'll test so open hello world and there we get our new response welcome can you say hello okay but when the user responds with hello well with hello our service responds with an error and the reason that it's responding with an error is because right now the skill service doesn't know how to deal with that intent so the intent let's take a look here so over here the alexa service sent this request over and this is the the json the the structured information that the service alexa service is sending to our skill service and it's um asking the skill service or telling the skill service that the user is looking for this general greeting intent here but we don't have code in our skill service that understands what to do with that and so we need to change that up to make it work and the names here map to intents that we've defined in our interaction model or should and so we don't have this get new intent in our interaction model so we'll just change this up to be general greeting like that and we're going to say we're going to respond back with tell and then nice to meet you okay so now when we save this now what should happen is we should when we open the skill alexa will prompt us prompt the user to say can you say hello when the user says hello alexa is going to respond with nice to meet you so let's give that a try so we will do open again and don't have to test it again but welcome can you say hello we will and now we say hello nice to meet you okay so there it is that is uh wiring up our intents that are defined in the interaction model with the code in the skill service so that the skill service can prompt and respond in the next lesson we're going to go a little bit deeper but we're going to start by talking more about testing and then we'll move on from there so up to this point we've been doing all of our testing using the service simulator in the developer portal but now we're going to take a look at a few other options when it comes to testing during the development process the service simulator is usually the first place that you're going to start but you'll also want to test your skills using voice interactions so you'll either need an amazon echo or some other alexa enabled device or software to do that and you don't need to go buy an echo but if you have one and it's configured with the same email address as your developer portal account you can start using your echo for testing without doing anything else and that is because when you're developing skills your skills are automatically enabled for your account and you can see that using your alexa companion app or i'm logged in here at uh if you go to alexa.amazon.com and log in and then go to skills and then your skills you'll see that your hello world skill is enabled so you can just say alexa open hello world and your hello world skill will respond if you're using an echo you can also test with any other alexa enabled device or software so if you don't have an echo there are a growing number of options to choose from but here's a few suggestions my first suggestion is to get the amazon shopping app and this is alexa enabled and available for both ios and android and so once you install the app there's a little microphone icon that you can tap and then you can talk to alexa just as though you were using an echo and this is a great option for for developing the next is an app called reverb and reverb is also available for ios and android and it is also got a native app for the mac so if you're using uh the mac you can install reverb and i've got it installed and with reverb installed you can click and hold and say alexa open hello world welcome can you say hello hello nice to meet you and so that is reverb this is a great option again if you don't have an echo but the the clicking and holding is uh maybe not uh not not ideal but works well the last option is called echo sim io and if you don't have an ios device or an android device or a macintosh you can install echo sim or actually you don't need to install it it's just browserbased and all you need for echo sim is a computer with a browser and a microphone so if you don't have any other options this is available for you and it works like the reverb app you click and hold and you can talk to alexa the last thing that i want to talk about is um testing the lambda functions in the aws management portal so uh this is a topic that is uh a bit more technical and something that i'll cover in more detail in a more advanced course but i wanted to show you real quickly how this works and so when you have lambda functions and um you want to start testing them uh you there's a test tool that's built in to aws for lambda and what what you're going to need to do to test this tool is configure it with the json message that's going to be sent to the function to get a response back and so if you don't have the the right request here you will just get an error because the um the lambda function isn't getting the uh the message format that it's expecting but it's it's really easy to get the right message format if you go into your test service simulator over here when you're doing testing here this service request is the format that you need so if you copy that and go back over to the lambda function here and configure and test and just paste that in if you save and test now you will see a successful response so just like being in the the service simulator and again this is a more um advanced topic but sometimes when you're testing in the service simulator if your lambda function is generating an error all you'll see is that there's an error over here and you don't get any details about what might be causing that error if you take the service request from over here into the the test test console within aws and run the test you'll get a lot more details about what might be going on and why your lambda function is erroring out over here and again uh more a little more technical but wanted to show you that so now you have a few more options for testing while you're in your development process and next we'll discuss skill design and planning as you spend more time creating skills you'll quickly realize that there is a lot more to it than just coding in fact you may even spend more time planning and designing your skill than you do actually building it and the topic of skill design and planning is one that we could easily dedicate an entire course to maybe even a few courses so in this lesson we're just going to scratch the surface and talk through the skill that we'll be building in the next lesson mostly okay so when you're planning a skill the first step is to come up with a concept and for this course we're going to be building a skill that gives users recommendations or suggestions for something and it can be whatever interests you so for example it could be recommendations for scary movies to see or places to visit or foods to try again whatever you're interested in i like craft beer so for my example i'm going to use a skill that i created called suggest a beer and after you've come up with your general concept the next step is to do a little research to see if there are any existing skills that are similar and to do that you can go to alexa.amazon.com and log in and once you've logged in you go to skills and then just search for your some keywords that would be related to your concept and in my case i just searched for beer and quickly realized that there are quite a few beer related skills and so i started browsing through those skills and enabling some of them uh especially the ones that sounded similar to my original concept and originally suggested beer was just going to be a simple skill that would suggest a random beer so you would just ask alexa to suggest a beer and you would get a beer suggestion back and what i realized is that there was a handful you know three or four i think other skills that did exactly that and so um that's not uncommon there's a lot of skills in the skill store and so if you if you run into that with your concept you just want to think about how your skill could be different and hopefully a little bit better so what i did is i enabled the skills that were closest to the the suggestion concept that i had and i realized that none of those skills allowed users to get beer suggestions for local craft beers and so i thought it'd be cool if somebody could suggest a beer based on their state or suggest a beer based on a style which is something else that i didn't see in any of the existing skills so the concept was still the same it's a skill for suggestion suggesting beers but the uh the difference was that i was gonna build a skill that would allow users to get beer suggestions for local craft beers and again so if you if you search your uh concept and you see that there's other skills that are doing something similar don't get discouraged just spend some time looking at those skills and figure out how you can make your skill a little bit different and uh and better okay so once you have locked in your general skill concept the next thing you want to do is start sketching out some sample dialogues and mapping out your your skill and i just do that in a in a google doc and uh there is uh a lot more work in planning and design than you um tend to think there is when you first get into it but i start with a name for the the skill and for the beer suggestions example i that was the name that i came up with beer suggestions but as i was thinking about the user actually interacting and the possible invocation requests i realized that um the way that i wanted it to work the beer suggestions name wasn't the right name for the invocation name so i used suggested beer as the invocation name and the reason that i did that is because i really wanted this first and so um in the uh uh alexa environment you can say alexa and then just reference the invocation name and so i made the invocation name sound like an utterance so it's alexa suggest a beer is the first possible invocation request example and that's really what i was most interested in and why i used that as the invocation name rather than beer suggestions so if i had used beer suggestions the invocation would have been something more like alexa ask beer suggestions to suggest a beer and i was just trying to shorten it to simplify it after you've thought through some possible invocation request examples and as you're thinking through these it doesn't necessarily mean that out of the gate you want to support all of these but you do want to spend some time thinking through the the different possible ways that a user will begin to interact with the skill and after you've done that you want to sketch out a couple of the simplest dialogues so in the shortest case what does the dialogue look like and for the suggested beer example a user would say alexa suggest a beer and then alexa would say okay do you prefer loggers or ales the style and then the user would respond logger in this example and then alexa would provide the suggestion in this case i suggest a motorworks vtwin vienna logger i hope you enjoy it in the second dialog i've added the the ability to filter or select by state and so the user would start the interaction with the skill by saying alexa suggest a beer from florida or whatever state and then alexa would say okay what style beer do you like and the user would respond logger and then alexa would respond with the suggestion in this case i'd suggest a vtwin vienna lager from motorworks brewing in bradenton florida so i'm really just providing the brewer and the the location back in this case so these are two really simple dialogues when you start thinking about this i mean there can be lots and lots of them so start out simple and then start thinking about after you've thought through the dialogues and also when you when you do the dialogues and sketch them out after you've thought through them and sketched them out yourself test them out with friends or family and you can do a little role playing you can pretend to be alexa ask your friend or family member to pretend to be the user tell them what the skill is gonna do but don't show them the dialogues just see what they say and that will go a long way to helping you refine your your dialogues and make sure that you're you're on the right track in terms of how the interactions might go after you've gone through that exercise you can start or what i like to do is bullet point the key features and then prioritize them into like key features which are the features that i want to make available as soon as possible and likely as soon as i uh publish the skill for the very first time and then secondary features are kind of backlog features that i might someday want to add as i as i get time so the primary features in this case are features that um i selected because they weren't available in other skills that were similar so that's why they were my primary features and then from there i start mapping out the intents that will be included in the skill and i am just focused on the custom intents here and in this skill it's a simple skill so we're just going to have one intent make a suggestion and then we want to think about the slot values that are going to be required to make that suggestion and so in the case of my um suggest a beer skill i wanted the state and the style in this case of your skill you might choose different slots that that you need to let the user filter for your suggestion the utterances are the last thing that i think about and this list can get very very long so as you start thinking through all of the different ways that a user could make requests or statements or ask questions or provide information to your skill which are all referred to as utterances like we talked about earlier there are lots and lots of different variations so start out with some simple ones and then start building your list out and with the suggested beer skill this list got well over 50 very very fast so that list will grow quickly but the more utterances that you provide the smarter your skill is going to be and the better the user experience is going to be so it's worth spending the time to to do that okay so like i mentioned in the beginning of this lesson there's a lot to know when it comes to planning and designing skills and we've covered some of the basics but you'll also want to check out the alexa voice design guide and you'll also want to read through the developer documentation about understanding how users invoke custom skills and i've included links to both of those resources in the course notes okay now we are ready to start building our skill and we'll get started on that in the next lesson okay so now it's time to take everything that we've learned so far and pull it all together to create a complete skill end to end and we're going to be creating the skill that we talked about in the last lesson the suggestion or recommendation skill and i'm going to use the local craft beer example and it's going to be a skill that lets users get a local craft beer suggestion for a beer brewed in a given state we'll start by creating our skill or setting it up in the developer portal and then we'll head over to aws and we will create our lambda function i have included a link to the code that i'm going to be using for this lesson i put it in github so you can use that as a reference so let's go into the developer console first and add our new skill here and i'm going to call this one beer suggestions and i'm going to use beer suggestions also for the invocation name and and for the interaction model this time rather than using the skill builder beta we're just going to add an intent schema and some sample utterances and i have those that you can use as a starting point on github and so i'm going to take that and add my intent schema here there's just one custom intent in this intent schema called make suggestion and a slot for this example which is the state slot to hold the state that we're going to get the beer suggestion for and then we've got some builtin intents that are required for the cancel intent the help intent and the stop intent we also need some utterances and we are going to use some examples here and build from those or you would want to build from those as you build out a complete skill so i'm just going to include three so the user can suggest a beer from state or say alexa ask beer suggestions to suggest a beer from state and a couple of different variations of that so go next and while that's building we will head over to the aws management console and we'll add our lambda function so we'll go create a function here we're going to select the skills kit for node again but we're not using any of that code this time so it will include the boilerplate code that comes with the blueprint but we're going to get rid of all of this but first we're going to give it a name so i'll say we'll call it beer suggestions alexa skill okay we'll get rid of that and down here we're going to start with a just a bare bones hello world skill here all this skill service does is and you can type that in for practice uh but um all this does here is includes some handlers for builtin intents to help cancel and stop intent and then an unhandled uh intent handler here so if the skill doesn't know what to do with the request that comes in this is going to respond and then the launch request just right now responds so when you go alexa open in our case beer suggestions it's just right now i'm gonna say hello world so it's not doing a whole lot there we're gonna build from that and then we just select the execution role and we say next and then create function and now we have our arn here so we've got our lambda function and the arn is going to be used back over here in the developer console as our endpoint so i'm going to paste that in just like that and now i just need to test to make sure that everything is working up to this point so i'll say uh open uh beer suggestions that see if we get a response back and we do and as you can see it's just saying hello world now so not doing a whole lot so what we're going to do at this point is we're going to go back over here and we're going to go to our code and we're going to change it up so that users can ask for a beer suggestion by state and you can expand this here which makes it easier in a future course we're also going to take a look at some different code editors that you would maybe use in your local environment so if you use mac or windows and if you're making a more involved skill you'll definitely want to use a code editor this is great for just getting started and doing simple skills in the browser but uh not probably ideal for anything beyond something that's pretty simple like what we're doing okay so let's go back over here i've got the um the code that we're going to use for for my example here you'll want to modify this if you're picking a different topic but it's going to work for the most part the same way so we're going to start with this here which is uh the data that's going to hold our suggestions and so in this case here this is a a javascript object and it's providing in my case just three um three objects within the the object so that so this is actually a an array of objects and there's three objects in here you can kind of think of this like an excel spreadsheet each one of these would be rows and then for each one of the rows we've got two different cells with values so we've got state or columns and suggestion and then a value for each one so what we're going to need to do is we're going to need to when the user requests a suggestion for for example florida here we're going to need to loop through these find florida and then read back the suggestion and i see a typo here too so this is supposed to be georgia that okay so the next thing that we're going to do is we're going to provide the code that is going to do the looping and searching for the response and this is outside of what we've talked about up to this point but i want to show you what's going on anyhow so that now this is just a a little code snippet that i wrote in javascript that we're using in here and i'll tell you what it's doing so this is a javascript function that's going to loop through this data and find the uh the value for whatever is passed in as the property name and the value here so the property name in this case we're going to use state and then the value is going to be whatever the user has asked for and that gets passed over as the value of the state slot from the alexa service okay so next so i've got my data and i've got a way to search through my data here so now i want to go in here and i want to add a handler to do that searching so i'm going to go over here and i've got just one handler function for my one custom intent which is my uh make suggestion intent so i'm gonna grab that and i'll tell you what is going on here also um okay so we're setting the state slot variable value to the value that comes over with the request for the state so the alexa services making the request and within that request the slot state value is what we're setting to the value of this uh variable that we're creating here and now down here we want to respond back with the data suggestion or the suggestion from our data up here so that's where we use our get suggestion function that we created earlier here so we're responding back calling this function get suggestion passing in our data which is all of this here that we call skill data and setting the property name which is state and the value that that function needs we are taking from here that's being set to what the alexa service passed over and then i am setting that to uppercase to ensure that it matches my data here and then when it finds that it will reply back or provide back the uh the object with the information that we need with the suggestion and so i pull the suggestion from that object to write back or to to respond back to the user okay the only other thing that needs to happen here is we just need to change up the launch request so that when the user opens the skill uh we're telling them what to do and so i've got this here and i'll grab this let's see and we are gonna paste that in so now when the skills open alexa says i can suggest a beer from any state in the united states what state would you like a beer suggestion for and then the reprompt asks them to uh to give a state if they don't respond within a few seconds okay at this point we have everything that we need for the skill service and i'm going to go ahead and save that and if you're creating a skill using a a different topic which you probably are you can change up the slot name here you could also if you want to expand it a little bit you can add some additional values and and use those in your response as well down here but at this point i've got my skill service built out now i just want to go test it so i'll go back over to the developer console here and go into the service simulator and uh start by opening your suggestions again to make sure that that is working and now i just want to try like one of my utterances and i'll say from florida and that is working so my suggestion for florida and if i go back over here just to verify yes that's what it's supposed to be responding with of course when i finish this up i want to add all 50 states and i'll want to add a real suggestion for each one of the states whatever beer i want to respond back with i don't think i've had a beer from all 50 states but that's maybe something i can put on my todo list okay so let me just test with one other state i'll test with alabama and okay it is working so at this point i've got my skill end to end set up i've got my interaction model i've got my skill service i'm testing it everything seems to be working and now we are ready to polish it finish it and then submit it for certification so we'll talk about that in the next lesson so after you have finished coding up your skill you want to test it and retest it and test again testing is is super important we talked about it in an earlier different ways of testing in an earlier lesson and you really want to spend time going through and considering different utterances and testing those utterances and uh in polishing the the skill and once you've gotten to the point where you feel pretty good about it you've tested it in all the different ways that you think a user might use it and all of the utterances that you've provided then you want to start getting your skill ready to go through the certification process so that you can get it out there and make it public and available for everybody else to use and that's what we're going to talk about in this lesson if you go to the the the test tab for your skill or the test section there's a link all the way at the bottom c certification requirements in our technical documentation you'll want to read through this we'll talk through some of this stuff but you want to be familiar with the certification process and the requirements especially the guidelines around the um uh invocation name you'll want to take a look at the invocation name guidelines and just make sure that you've dotted all your eyes and and crossed all your keys before you uh submit for the certification process but once you've done that you fully tested it yourself then you would go to the publishing information here and complete the required information here which is pretty straightforward so you're going to pick a category that your skill will be classified in and for the beer suggestion example i'm gonna use food and drink and wine and beverage and then testing instructions um i'm gonna just say no no special it's just there's nothing special about the the testing here but you it does require you to provide something so i'm going to add that in there let the skill i'm going to let it be available for any country even though it only gives suggestions for states in the united states right now maybe somebody's traveling and wants to try a local beer then you would provide a description a description for the skill um find local beer by state and you probably want to come up with something a little bit better for your skill and for the skill description something that's going to get people excited about wanting to try your skill but just to walk through this i'm going to go with something simple and then you want to provide some example phrases and this is going to let users know how they're going to use your skills so it might say alexa ask beer suggestions to suggest a beer from florida maybe we'll say alexa open beer suggestions and suggest a beer from something like that so you want to fill these out in ways that would show your user how to use your skill and then provide some keywords down here these are optional but i'll do beer craft brewing something like that and then you want to provide some uh some icons so these they do need to be the the right size so 108 by 108 pixels for the small icon and 512 by 512 for the larger icon and i've got some created that i'll use here so this is my small icon and my large icon here okay and from here you need to go on and uh answer some questions about privacy and compliance so does the skill allow users to make purchases or spend money and in my case no does it collect personal information no does it target children under 13 no and then you'll want to read the export compliance and agree to that and then last does it contain any advertising and no and then this down here you do need to provide a privacy url and a terms of you use url so i've got those on my site and they do check these so at least they make sure that there's something there so you do need to provide this and i've got the other one is called terms and then once you have this you can hit save and at this point we're ready for certification so i could just click submit for certification and this would go through the certification at this point there's also an option before you certify to test your skill with other users beta users so if you want to do that you would provide email addresses for the users that that you want to test and then it would uh send out an info like a link for them to to try it and if they approve then they would be able to test your skill that way before you certified it so that's uh that's an option the certification process the the um experiences that i've had it's you know a day or two it's pretty quick and if you uh if it doesn't get approved for whatever reason the response back is is very clear on what you'll need to do to to fix it and uh once you fix whatever the issue is and resubmit it uh the the process goes goes pretty quickly it's still you know the last time i had one that wasn't approved it was i think it's just a few hours later after i fixed it and they reapproved it so goes pretty pretty quickly but at this point you have a complete skill that's ready to go and ready to uh ready to be certified and from there it will be live for anybody to to use it so that is our last lesson we will review in the next lesson and talk about some next steps from there so congratulations you've completed the course you should now have a solid introductory level understanding of how to build custom alexa skills and hopefully you should be really close to having your first skill published from here you'll want to practice what you've learned thus far and then move on to some more advanced topics here's some suggestions for possible next steps first subscribe to the dabble lab channel on youtube i publish a new video there every friday and most of those will be related next get a code editor coding in the browser like we did for this course is fine for getting started but not for developing more advanced skills i use an open source editor called atom i like it a lot it works on mac linux or windows and best of all it is free consider taking a javascript course if you want to build more advanced alexa skills at least with node.js most of what you'll need to know is javascript we talked about javascript at a very high level but you'll want to dive deeper there for sure you'll also want to learn more about nodejs learning node mostly involves learning javascript but understanding how node works and how to use node modules can make your life as a coder much much easier the node module you'll want to be most familiar with at least for alexa development is the alexa skills kit sdk for node you can learn more about that by going to github.com alexa and while you're there dig into the sample code in the alexa cookbook well that's it i really hope you enjoyed the course and i also hope that if there is anything that you think i can do to make it better that you will let me know and if you have any questions about anything that we've covered please don't hesitate to leave a comment and i'll respond just as quickly as possible thanks again for taking the course i hope to see you in a future course you
