With timestamps:

00:00 - welcome to the start of a new tutorial
00:02 - series and this is called teach me Jenga
00:05 - which is a project built with Jenga and
00:07 - react showing you how you can work with
00:09 - multiple users in a kind of mock online
00:12 - system where you can create assignments
00:15 - fold them in and see the results of
00:17 - those assignments on your profile and so
00:19 - this is the finished product of that
00:21 - project and what I'm going to do is just
00:22 - walk you through what it looks like so
00:24 - you get an idea of what we're actually
00:25 - working towards in this tutorial series
00:28 - so I'm gonna go ahead and login and I
00:31 - really have a user created for this and
00:33 - we don't have any assignments just yet
00:36 - so we'll go ahead and create one so
00:38 - we'll give it a title as this is the
00:41 - first assignment we'll set the question
00:45 - to be is this cool also the answer is
00:49 - yes and then we'll add a choice where
00:51 - the first one can be yes and the second
00:53 - one can be no and then we can add a
00:56 - question and I'll say this one is Django
00:59 - is awesome
01:01 - we'll say the answer is true then the
01:04 - choices are true and false and then we
01:07 - can submit this and now we have our
01:11 - assignments an assignment that is loaded
01:15 - here and we can click on it and we see
01:17 - we get the questions yeah and we've only
01:18 - got two questions so we've got is this
01:21 - cool
01:21 - we'll say yes go to the next one we'll
01:24 - see Django is awesome and let's say I
01:27 - want to go back and I'm actually going
01:29 - to change my line so we'll say no this
01:30 - isn't cool go forward Django is awesome
01:32 - we'll say true and we can click Submit
01:34 - and if we head over to our profile you
01:38 - can see we got 50% for that assignment
01:40 - and that's because we said that Django
01:42 - is not cool whereas the answer was yes
01:44 - it actually is cool and so before
01:47 - judging how complete this project is in
01:49 - terms of validation and seeing detail
01:52 - views and thinking there's a lot more
01:53 - stuff to be displayed and that this is
01:55 - really just too basic you'll be
01:57 - surprised as to how much actually goes
01:59 - on in the backend to get this to work
02:00 - and so we're going to be jumping into a
02:03 - whole lot of customization of
02:05 - serializers and and a lot of react as
02:07 - well so this is what we're going to be
02:09 - building in this project where the two
02:11 - different kinds of users were looking at
02:12 - our students
02:14 - and teachers only teachers can actually
02:17 - create these assignments and only
02:20 - students in theory should be allowed to
02:22 - answer these assignments and so we're
02:25 - going to walk you through the process of
02:26 - creating this multiple user system and
02:28 - let's get started with it now so to get
02:42 - started you're going to want to open up
02:44 - vs code I've got absolutely nothing here
02:46 - an empty directory which we'll use to
02:48 - store all the project content and to get
02:51 - started we're actually going to clone
02:52 - something from our github page and this
02:55 - is a boilerplate project that we created
02:57 - for getting started with Django and
03:00 - react and that is here the Django react
03:02 - boilerplate and this is just to help
03:05 - getting started with adding projects
03:07 - that are built with Django and react
03:09 - because it seems we're going to be doing
03:10 - this for quite a while so I'm just going
03:13 - to grab this URL here and we're going to
03:17 - clone into this repository so we'll just
03:19 - say git clone and that will bring this
03:23 - repository into this folder and so there
03:26 - we have it we've got the vs code project
03:29 - settings we've got a home directory
03:31 - which is basically our Django project
03:33 - and we are currently using three
03:36 - different settings files depending on
03:39 - whether you're in production or
03:40 - development and then we have a source
03:42 - folder which has a basic react project
03:45 - setup as well
03:46 - now I'll link a video showing you
03:49 - everything that's contained inside this
03:51 - project which we covered in one of our
03:53 - videos showing you how to set up
03:55 - authentication between Django and react
03:58 - so everything in that video we basically
04:00 - took and just compiled it into a
04:02 - boilerplate repository so that we could
04:04 - just pull that easily so we don't have
04:07 - to keep on repeating ourselves that way
04:10 - we already have a nice setup to get
04:12 - started with and we can get working from
04:14 - here so what I'm going to do is just
04:16 - bring all of the folder contents inside
04:18 - this directory that I'm working with and
04:20 - there we go now I'll just clear out the
04:23 - terminal
04:24 - and we can take a look at what we've got
04:26 - we've got the EVs code settings which
04:29 - basically is just setting pilant
04:32 - and the Python path virtual environment
04:34 - path and some files to exclude in RVs
04:37 - code editor we've got the home directory
04:39 - which has a base settings for all the
04:42 - installed apps middleware templates and
04:45 - some other things that we'll need for
04:47 - both development and production and then
04:50 - in development you've got the allowed
04:52 - hosts being our local host debug being
04:54 - true the wsgi application for
04:57 - development and ADB sqlite3 database
05:00 - setup with the local host of 3000 being
05:04 - in our course origin whitelist and then
05:07 - in production we've got our domain which
05:08 - we would need to add the different wsgi
05:11 - application for production a database
05:14 - setup for Postgres which we don't
05:17 - actually have those credentials set up
05:19 - just yet but we've got the configuration
05:22 - there we've got both password validators
05:24 - and the static files storage for when we
05:27 - use white noise and this is all with the
05:30 - intention to eventually post this on
05:33 - Heroku that's why we have a proc file
05:35 - here but we'll get into that towards the
05:38 - end so we also have the source folder
05:41 - which currently has our App J's which is
05:44 - auto trying to sign up we're using react
05:48 - redux hence these maps data props and
05:51 - map dispatch methods that we're
05:53 - connecting to our app we've got a
05:56 - higher-order component which basically
05:57 - returns the children of the props that
06:00 - are passed in and we've just got a
06:03 - layout a login and the signup container
06:06 - which again also comes from that video
06:09 - tutorial on authentication with Django
06:12 - and react and so what we want to achieve
06:14 - in this video is basically to set up the
06:17 - Django rest framework rest auth which is
06:20 - what we're going to use to authenticate
06:22 - users on the backend but we're going to
06:23 - need to customize that if we want to
06:25 - actually have our own custom user so
06:28 - we're going to create our user we're
06:29 - going to create the serializers for that
06:31 - user and show you how you can customize
06:33 - the rest off to allow for those users so
06:37 - we'll get started
06:38 - by opening up the terminal and just
06:39 - creating ourselves a virtual environment
06:41 - which we'll just name virtually envy and
06:44 - there it is we can then activate that
06:47 - and we'll say pip install - our
06:50 - requirements txt and we'll open up
06:53 - another terminal here to install our
06:56 - node dependencies so just run NPM I and
06:59 - we can get started with creating
07:01 - ourselves a user's app and this is where
07:04 - we're going to create our custom user so
07:06 - I'll say Python managed up I start app
07:08 - and we'll say the name is users and we
07:11 - can go into our home directory to
07:14 - settings base top high and inside the
07:18 - installed apps we can scroll down and
07:19 - add our users and with that we can close
07:24 - base top pie and we'll go into our users
07:27 - app here and we'll go into the models
07:30 - and what we're going to do is import the
07:32 - abstract user which comes from Django's
07:35 - contrib earth models so we'll say from
07:38 - Django
07:39 - but contrib all top models import the
07:43 - abstract user now see you get two types
07:46 - of users that are prompted one is the
07:48 - base use and ones the abstract user now
07:51 - the abstract base user will require a
07:54 - lot more configuration I've also covered
07:56 - this in another video where we actually
07:58 - use the abstract base user to create our
08:00 - own custom user and show you how you can
08:02 - link that up to be the default user of
08:05 - your site whereas if you use the
08:07 - abstract user it's actually a lot
08:08 - simpler so we're going to go ahead and
08:11 - use that
08:11 - we'll add class here and call this the
08:14 - user which inherits from the abstract
08:16 - user and basically what this means is
08:18 - that it has all those attributes like
08:21 - user name password email all of that
08:23 - configuration is done for you except now
08:26 - you can add the fields that you
08:28 - particularly want to actually add that
08:30 - will make your users that much more
08:32 - unique now in our case we're going to
08:34 - store two kinds of users we're going to
08:36 - have a student and a teacher you could
08:39 - be both at the same time but we're not
08:40 - too worried about that and so the way
08:43 - that we're going to handle that is by
08:44 - adding two fields on the user and these
08:46 - are going to be boolean fields so we're
08:48 - going to have the is student
08:51 - which will be models boolean field so
08:55 - either true or false and then we'll have
08:57 - the is teacher which is also a models
09:00 - boolean field so that means is that when
09:03 - we create the user we're going to need
09:05 - to pass in whether this user is a
09:07 - student so either true or false and we
09:09 - need to pass in if it's a teacher and
09:12 - then we'll just say define the string
09:15 - method which takes himself and we'll say
09:18 - return self dot username because
09:21 - remember this does inherit from the
09:22 - abstract user that is our base user and
09:25 - that is what we'll be using when we
09:28 - create our users now what I'm also going
09:31 - to do is define another class here which
09:33 - is the student and this will just be a
09:35 - model stub model and all we're doing is
09:37 - basically assigning a one-to-one field
09:39 - with the user so that instead of working
09:42 - with the base user that we created here
09:44 - will work with the student model when we
09:46 - need to refer to an actual student and
09:48 - we're not going to add too much
09:50 - configuration to this model but it's
09:52 - just a little bit more convenient
09:54 - because here on the student you could
09:56 - then pass in a lot more other fields
09:58 - like what classrooms they belong to what
10:01 - grade they're in etc you could do a
10:03 - whole bunch of things like that
10:04 - we as the user you just want to define
10:08 - whether that user is a student or a
10:09 - teacher that's the whole purpose of this
10:11 - model here we'll just say that the user
10:13 - equals to a one-to-one field with the
10:17 - user that we just created here and we'll
10:21 - say on the needs equals two models
10:23 - cascade so that if the user is deleted
10:27 - then their student is deleted as well
10:29 - and then we'll just say define string
10:31 - which takes in self and say return self
10:34 - dot user dot email for example or user
10:38 - name we could do as well and so with
10:40 - that we then need to go and tell Django
10:42 - that our default user is actually inside
10:45 - out users app so we're going to go into
10:48 - the home directory to settings based our
10:51 - pie and we go all the way to the bottom
10:54 - here and we'll just say that the auth
10:56 - user
10:58 - model equals to users dot user so
11:06 - basically what it's saying is look
11:08 - inside users dub models and find the
11:10 - user model that is our default orth user
11:13 - model to use when authenticating users
11:16 - and I'm also going to add one more
11:18 - setting here which is for unique emails
11:20 - so we'll say that the account unique
11:23 - email equals to true basically this will
11:29 - ensure that we don't get any duplicate
11:32 - emails of our users and like that we can
11:35 - now try and make migrations so we'll
11:38 - just bring it up to terminal will say
11:40 - manager PI make migrations and we see we
11:43 - get create model user and create model
11:45 - student and then we'll say manage the PI
11:48 - migrate to actually migrate those and we
11:52 - also get the base migrations for the
11:54 - entire project and now if we were to try
11:58 - and create a super user then you'll see
12:00 - that you'll actually run into an error
12:02 - because it's going to use our custom
12:04 - user which has two extra fields on it so
12:07 - it's going to tell you that is student
12:09 - cannot be null and his teacher cannot be
12:11 - null in that user so to create an admin
12:14 - user we're going to need to create it
12:16 - through the Python shell
12:18 - so we'll say Python manager pie shell
12:21 - and here we'll say from users table
12:25 - models import user will say that a
12:28 - equals to a user will say that a dot
12:31 - user name equals to admin a dot password
12:35 - equals to let's say dude one two three
12:38 - we'll say a dot is staff equals to true
12:42 - so that it's a staff member and a dot is
12:44 - a super user equals true as well
12:47 - and then just say dot save and you see
12:50 - that it gives us the users user that
12:53 - your student cannot be null so we say a
12:56 - dot is student let's set it equal to
12:58 - false and we'll say a dot is teacher
13:01 - equals to true and now we can say a dot
13:04 - save and now it's correctly saving and
13:07 - if we were to say user objects dot all
13:10 - then you can
13:11 - yet a query said responds with the user
13:13 - of admin so we'll exit out of that now
13:17 - and let's call Python manage the pi run
13:19 - server so we can actually run the server
13:21 - and view it in the browser this is what
13:27 - we have by default because we already
13:30 - have a build directory appear in our
13:34 - project we have the build directory
13:36 - which is what's being referenced inside
13:38 - our based settings to use as static
13:41 - files so we could actually come here to
13:43 - the login and let's try and login with
13:45 - our user will say admin and pass in dude
13:48 - one two three and it seems that that
13:51 - didn't work
13:52 - let's check the console and we get a
13:55 - server responded with the status of 400
13:58 - a bad request and if we take a look at
14:00 - the server here it's not giving us any
14:02 - information it's just saying that the
14:04 - post to this URL wasn't successful it
14:07 - was a bad request and the reason for
14:09 - this is purely because we haven't set up
14:12 - rest auth to understand our new custom
14:15 - user because the custom user is trying
14:17 - to see the default Django user that it's
14:20 - used to but we're not using the default
14:22 - user we're using our own custom user so
14:25 - we need to go into our base type I I
14:27 - mean we need to configure the rest or
14:30 - serializers and the rest or three just
14:33 - of serializers and you can check this in
14:36 - their documentation if you just search
14:37 - for custom Django rest or then here the
14:41 - first link is a configuration for Django
14:44 - rest or zero point nine point three so
14:45 - if we check that out in here you can see
14:48 - it says you can define your custom
14:50 - serializers for each end point without
14:51 - overwriting urls and views by adding
14:54 - rest or serializers dictionary in your
14:56 - Django settings possible key values are
14:58 - the login serializer that token
15:00 - serializer the user details serializer
15:03 - and all these so for example it says the
15:06 - rest auth serializers is a dictionary
15:08 - where the login serializer is a path to
15:11 - a custom login serializer and the same
15:13 - thing for the token serializer
15:15 - and it also says you you can define your
15:17 - custom serializers for registration
15:19 - however note the custom register
15:22 - serializer must define a
15:24 - define save method that returns a user
15:28 - model instance and that's extremely
15:29 - important if we want to get this right
15:31 - so first let's copy this default
15:33 - configuration there come back into base
15:36 - add it there and we don't need the token
15:38 - sterilizer we just need the user details
15:42 - serializer
15:43 - that's basically to tell rest off that
15:45 - this is the user model that we're using
15:47 - and that is the specific serializer for
15:50 - that model so we'll copy that user
15:53 - details serializer
15:54 - let's copy that paste that there and
15:56 - obviously the path will sort out in a
15:58 - second and we can also specify the rest
16:02 - or register serializers which is also
16:05 - important because we're going to need to
16:07 - handle the kind of registration for our
16:10 - custom user meaning when the user signs
16:12 - up they need to say whether they're a
16:13 - student or a teacher which means that
16:16 - our registration process is going to be
16:18 - different as well so we'll open up a
16:20 - dictionary here and in here we need to
16:23 - specify the register serializer so we'll
16:27 - add it there and we'll just leave this
16:29 - blank for now and what we need to do is
16:31 - go back to our users app and actually
16:35 - add a serializer inside it so we'll just
16:38 - say new file which will be serializers
16:42 - dot pi how I got this to work is purely
16:46 - just by googling what is required and
16:50 - and so this is primarily focusing on
16:52 - showing you how it comes to work but the
16:56 - model of the story is that when you
16:57 - don't understand something and you're
17:00 - trying to figure out what to do google
17:02 - it and keep looking for examples of
17:05 - where other people have done it and try
17:07 - to apply that to what you're doing now
17:09 - the first serializer that we're going to
17:11 - create is the user serializer
17:13 - and this is the one that we've defined
17:15 - here for the user details serializer
17:18 - so we're going to specify the path here
17:20 - to be users dot serializers dot user
17:25 - serializer and we'll take that name come
17:29 - back into our serializers and we'll just
17:31 - say class user serializer
17:34 - that inherits from the serializers
17:37 - and we need to import that so say from
17:40 - rest framework import serializers and
17:45 - we're going to inherit the model
17:48 - serializer and if we need to use that
17:52 - we're going to need our model so we'll
17:53 - say from dot models import user and here
17:58 - we'll specify the class Mehta and say
18:01 - the model is a user and then we'll need
18:04 - to specify the fields and the fields is
18:06 - just a list of fields on our model that
18:09 - we want to include in the serializer now
18:12 - normally you would have things like the
18:14 - email you would have the username and in
18:17 - our case we're going to also need to
18:19 - pass in the extra fields that we created
18:21 - so we'll add in password as well and
18:24 - we're going to add in our is student and
18:28 - our is teacher and that's it that's our
18:33 - custom user serializer that rest auth
18:36 - now we'll use when serializing our user
18:40 - and now we need to handle the register
18:42 - serializer so we'll do the same kind of
18:45 - concept
18:46 - we'll say class custom register
18:49 - serializer
18:52 - just so that we don't have a really long
18:54 - name and this is going to inherit from
18:56 - the register serializer and we can see
18:59 - here in the register serialize of class
19:01 - it's from rest or third registration dot
19:04 - views register view and then rest all
19:07 - the registration serializers dot
19:09 - register serializer now you can either
19:11 - create your own custom serializer and
19:12 - handle it as well or you can inherit
19:14 - from this rest register serializer
19:17 - and do it that way so that's how I
19:18 - decided to do it so we're going to need
19:21 - to import that so we'll just come back
19:23 - in here and we'll go to the top and say
19:26 - from rest auth and we can actually
19:29 - remove that so we're saying from rest or
19:32 - registration serializers import the
19:35 - register serializer
19:36 - and we'll install these of course now
19:40 - that we have those installed we've got
19:41 - our register serializer
19:43 - and we're going to inherit that in our
19:46 - custom register serializer
19:47 - and this is very similar to a model
19:49 - serializer we can all
19:50 - specify a class meta and the fields so
19:54 - I'm going to do that as well or copy all
19:56 - of that right there however I'm going to
19:59 - add two fields here as well so the first
20:01 - one will be the is student and the
20:03 - second one will be the is teacher and
20:06 - this will just inherit from the
20:08 - serializers boolean field and that'll
20:12 - also be for the each student and now
20:16 - let's actually jump into the front end a
20:17 - little bit to handle that form so I'm
20:20 - actually going to close the models and
20:21 - we'll go into the source to our
20:25 - containers and let's go to the sign-up
20:28 - so here we have signup jeaious
20:31 - and we've got our registration form and
20:33 - basically what we want to do is just
20:35 - come all the way down here to the end of
20:38 - the form where we have the submit button
20:41 - and we want to add another form item
20:43 - inside here which is basically going to
20:45 - be a select field with two options the
20:48 - first option will be student and the
20:49 - second one will be teacher so we'll add
20:52 - a form item and I'm actually just going
20:56 - to copy the get field decorator and just
20:59 - paste it in there and inside here we'll
21:02 - want to add our select so we'll just say
21:04 - select like that and we need to go to
21:07 - the top and import this from and D and
21:10 - we'll specify the get field decorator to
21:14 - be user type so that's how we're going
21:16 - to access it from the forms values and
21:18 - we'll say please select a user and we'll
21:24 - get rid of the validator here as well
21:26 - and inside the select we need to add an
21:30 - option and inside there will be student
21:34 - and the second one will be teacher we'll
21:38 - set the value of the first one to be
21:41 - student and the value of the second one
21:45 - to be teacher and then we can say that
21:49 - the placeholder of the select is select
21:53 - a user type
21:56 - now we need to import option as well so
21:58 - input option there and now we just need
22:01 - to make sure that we handle receiving
22:03 - the value of the option that's currently
22:06 - selected in the form so we'll go up to
22:08 - the top here and we'll say let is
22:11 - student equal to false initially and
22:14 - then we'll just grab the user type from
22:17 - the values because that's how we're
22:18 - doing it currently we have values of
22:20 - username and email etc so we'll say if
22:23 - values dot user type equals to student
22:29 - then we'll say is student equals to true
22:32 - and then here in the on earth where we
22:36 - basically register the user will add
22:38 - another field here which will be is
22:40 - student and this will get passed into
22:43 - the on auth dispatch method so if we go
22:45 - to the bottom here we have on earth and
22:48 - we just need to make sure we pass that
22:49 - in as a fifth argument so this will be
22:52 - is student and that gets passed into the
22:55 - earth sign up which is inside our
22:58 - actions and we'll add it as another
23:00 - argument there as well just like that
23:02 - and now we just need to make sure that
23:04 - we handle that in the store so if you go
23:07 - to store actions auth then here if we
23:09 - scroll down to the auth sign up we need
23:13 - to make sure that we grab that argument
23:14 - coming in which is the is student so
23:17 - like that and what I'm actually going to
23:19 - do is create a constant user and this
23:22 - user is going to have the username the
23:25 - email the password one password two and
23:29 - it's going to have is student which is
23:32 - coming through as an argument day and
23:35 - I'm also going to set the is teacher to
23:40 - be the opposite of his student so that
23:43 - means the student is true then teacher
23:46 - is false then here when we post to the
23:48 - registration URL we can instead of
23:51 - passing this user that only has an email
23:54 - password one and pass or two we're going
23:56 - to pass the entire object that we just
23:58 - created up here which is the user object
24:00 - so we can delete all of that and just
24:03 - pass in user as the object and what
24:07 - we're going to do is actually change the
24:08 - local store
24:09 - handling so that instead of setting the
24:11 - item of a token and an expiration date
24:13 - we're rather just going to set an entire
24:15 - user which will hold the token username
24:18 - and all the details about that user so
24:21 - that way we can store whether they're a
24:23 - student or a teacher as well so what I'm
24:27 - going to do is actually get rid of these
24:29 - local storage commands here but before
24:31 - we do that we'll create another constant
24:33 - here which will be our user and this is
24:36 - going to be the user object that we
24:38 - store in the local storage so it's going
24:41 - to have the token which will be the
24:44 - response data key and just need to
24:46 - reference it with a colon we're then
24:48 - also going to pass in the user name
24:50 - which will be basically the user name
24:52 - that we passed in to the dispatch method
24:55 - so we don't need to pass a code on there
24:58 - we'll then also going to pass in is
25:00 - student and we'll pass in is teacher as
25:03 - well and then we'll set the expiration
25:05 - date here to be a new date just like how
25:07 - we created it over here and just use a
25:10 - colon as well and there we have our user
25:13 - so we can get rid of these commands here
25:15 - and then we'll say set the item of user
25:18 - to be JSON dot stringify the user and we
25:23 - can get rid of the expiration date call
25:25 - there and instead of calling all
25:28 - successive a token we'll pass in a user
25:30 - instead and handle that in a second but
25:32 - basically now we're storing this entire
25:35 - user in the local storage which will
25:38 - come in handy later on as well and so
25:40 - let's go to the auth success method here
25:42 - which is all the way up top here and
25:45 - we'll change it to receive a user
25:47 - instead of a token and then that user
25:49 - will pass in as the argument here and we
25:52 - can remove that there and then we just
25:54 - need to handle that in the reducer so
25:56 - we'll open up the reducers auth we'll go
25:59 - to the auth success and we will actually
26:02 - need to add some new status so for
26:04 - example the user name will now be null
26:06 - as well we'll have is student which will
26:10 - be null and we'll have is teacher which
26:13 - will be null as well and then we can
26:15 - come down here to the old success and
26:16 - and instead of this coming from action
26:19 - token this will be action dot user token
26:22 - we'll take the user name
26:23 - which will be action dot user username
26:26 - will have is student which will be
26:29 - action dot user dot is student and the
26:34 - same kind of concept for is teacher and
26:37 - we just need to make sure that in the
26:39 - action when calling all success we make
26:42 - sure that for example here in the old
26:45 - Czech State method that when we call all
26:47 - the success we pass in a user and not a
26:50 - token so instead up top here we'll say
26:53 - constant user equals to get item user
26:56 - and we're going to need to pass that
26:58 - source adjacent pass the local storage
27:01 - user and that's because this is an
27:02 - object so we need to pass that into an
27:05 - object and then we'll say if the user is
27:09 - undefined all the user is null then
27:15 - dispatch logout otherwise we'll create
27:18 - an expiration date where instead of
27:21 - grabbing this from the local storage
27:22 - this will now come from user dot
27:25 - expiration date where users what we just
27:28 - grabbed over here and we're saying if
27:30 - the expression that is less than new
27:32 - date then logout otherwise we will
27:34 - dispatch all success which will take in
27:36 - the user and we'll just save that and if
27:40 - we go to the logout method as well then
27:43 - instead of removing the expiration and
27:45 - token we can just say remove user we can
27:48 - also open up the terminal to run the
27:51 - front end so let's just clear some of
27:53 - these terminals out here and we've got
27:56 - the package is installed so say npm
27:58 - start so we'll take a look here and it
28:01 - says in actions all we have is teachers
28:03 - undefined and that we just need to set
28:06 - to the opposite of is student and it
28:10 - says that the sign of jeaious doesn't
28:13 - contain an export named options so let's
28:15 - go to sign up and this is because our
28:19 - option inherits from the select so we
28:24 - just need to say constant option equals
28:26 - to select
28:29 - dot option now if we check it out now we
28:34 - can login let's click login and click on
28:36 - sign up and we have a user name email
28:39 - password password and if we click select
28:41 - the user type and when we click the drop
28:43 - down here we see student and teacher as
28:45 - the options for the user type and let's
28:48 - inspect this here and let's see what
28:50 - happens if we try sign up so we'll pass
28:53 - in a username pass in an email and a
28:56 - password and we'll pass in a select use
29:00 - the type of let's say student and if I
29:02 - click sign up we see that gave us a
29:06 - error connection refused and let's take
29:09 - a look as to why that is and it says in
29:12 - serializers get the register serializer
29:15 - yet got not enough values to unpack
29:18 - expected to but got one now this is
29:21 - because of a very silly error which is
29:24 - that we didn't actually add a comma here
29:27 - at the end all and even pass in our path
29:31 - to the register serializer so let's add
29:34 - this Parthia in our serializers and this
29:36 - is users serializers dot custom register
29:41 - serializer just like that now let's come
29:45 - back and try login or signup brother
29:48 - again and if i click student and click
29:50 - sign up now we get a 500 internal server
29:53 - error so let's go back and see and it
29:56 - says your integrity error not null
29:58 - constraint failed users dot user dot is
30:01 - student so basically what this is
30:04 - telling us is that when the user's being
30:05 - created it's not being passed in the is
30:08 - student and the is teacher as well now
30:12 - the reason for that is because the
30:14 - default save method to actually save a
30:17 - user does not involve using the is
30:21 - student or there is teacher fields so
30:23 - what we need to do is override the save
30:25 - method so what I'm going to do is just
30:27 - define the save method here and we're
30:30 - going to say itself and request and all
30:33 - I'm going to do here is just say print
30:35 - the request so we actually see it come
30:37 - through and so with that let's open up
30:40 - the terminal again and
30:41 - we'll go to the signup page but let's
30:44 - actually get rid of the re-routing yes
30:47 - so if we go to the handle submit will
30:50 - not push ourselves to this URL so that
30:53 - way we can continuously test this and
30:55 - from this point here overriding the save
30:59 - method involves using an adapter which
31:02 - comes from Django's all off so if we
31:05 - search for adapter Django all off and we
31:09 - can just click on this first one here
31:10 - then here talks about the advanced usage
31:13 - of creating custom user models and
31:15 - basically creating and populating user
31:19 - instances and here it says all off
31:22 - account adapter default account adapter
31:24 - that is what's used to create an
31:27 - instance of a user and we can actually
31:31 - navigate to Django's rest or and if we
31:34 - go to the introduction let's go to edit
31:37 - on github and we'll just go to Django
31:39 - restore and if we click on rest auth and
31:42 - then we can click on registration and
31:44 - then serializers dot pi and here you can
31:49 - see it has an import from all off that
31:51 - account that adapter import the get
31:53 - adapter and if you scroll down you'll
31:57 - see the different types of serializers
31:59 - so they've got the social account the
32:01 - social login and if we keep going we see
32:05 - we eventually come across the register
32:07 - serializer and you can see all of the
32:09 - fields on it you can see the user name
32:11 - the email password one and two and then
32:14 - these validation methods the get clean
32:17 - data and the save method and here you
32:21 - can see it's saying adapter equals to
32:22 - get adapter and then it uses that
32:25 - adapter from Django Olaf to create a new
32:28 - user using the request then uses the
32:31 - adapter to save the user by passing in
32:34 - the request and the user and then it
32:37 - just add some extra custom stuff here
32:39 - for the custom signup and setting up the
32:41 - user email so what I'm going to do is
32:43 - copy all of that the save method plus
32:46 - the define get clean data and we'll come
32:48 - back in here override the save method
32:51 - and we're going to need to import the
32:53 - adapter so let's go all the way
32:55 - the top year of the file and we'll say
32:58 - from all of that account that adapter
33:02 - import the get adapter and we're
33:06 - basically going to use their logic we're
33:07 - going to get the adapter we're then
33:09 - going to use that to create a new user
33:11 - with the request we'll assign the the
33:15 - cleaned data to self by calling the get
33:19 - cleaned data and what that does is
33:21 - called the method on this class which
33:23 - grabs the validated data and grabs the
33:27 - user name and all these fields from that
33:29 - then using the clean data
33:32 - it saves the user by passing in that new
33:36 - user and we can then get rid of the
33:38 - custom signup and the set up user email
33:42 - and essentially what we want to do is
33:45 - not only grab a username password one
33:47 - and email
33:48 - well actually want to copy password 1 so
33:50 - we have password to that we can see as
33:52 - well and we actually also want to get to
33:55 - other fields which are the is student
33:57 - and the is teacher so now when we call
34:01 - get clean data we're going to get
34:03 - everything that we need to create our
34:05 - own custom user within assigning it to
34:08 - self doc clean data and before we go
34:11 - ahead and save the user we then need to
34:14 - just assign the is student field and the
34:17 - is teacher field to our user so we'll
34:21 - say user dot is student equals to self
34:24 - dot clean data is student and do the
34:29 - same thing for is teacher and then at
34:31 - the end of that we can call user dot
34:33 - save and this is very important this
34:37 - command yeah user dot save so now we
34:41 - then use the adapter to save the user
34:43 - and return that user at the end that's
34:45 - also very important whenever you
34:46 - override the save method you need to
34:48 - return an instance of whatever you're
34:50 - saving so we return the user and now
34:53 - let's actually see how this works out
34:55 - we'll open up the terminal and we see we
34:58 - get one area here which is just the
35:00 - commas so let's add some commas there
35:03 - and now everything's working so if we
35:07 - come back to the boilerplate and this is
35:10 - actually on the localhost let's go to
35:12 - port 3000 and click sign up and look at
35:17 - that it was a successful post request
35:20 - and we got a status of 201 which means
35:22 - that our user was created and if you
35:25 - come back here you can see that it's now
35:27 - saying logout which means that our users
35:29 - actually logged in and that means we can
35:31 - actually go and login to our admin so if
35:34 - we go to admin we're not going to be
35:36 - able to actually log in with our super
35:38 - user that we created earlier and so
35:41 - let's rather just go ahead and use the
35:42 - user that we just created now and create
35:46 - them as a super user so we'll go back in
35:48 - here and actually add a new terminal and
35:51 - we'll say Python managed our pie shell
35:54 - will say from users table models import
35:58 - user will say Matt equals to users that
36:02 - objects get username equal to Matt and
36:07 - let's just change that that's meant to
36:09 - be a user and if we check what Matt
36:12 - looks like there it is and if I say Matt
36:14 - dot is super user equals true and Matt
36:20 - dot is staff equal true and then save we
36:27 - can then exit and if we come back let's
36:31 - refresh this and we can sign in with
36:35 - Matt and there we go we're now logged in
36:39 - and we can actually add our custom user
36:42 - into the admin so let's do that so we'll
36:45 - just go here to admin and we'll say from
36:48 - dot models import user and then say
36:53 - admin dot site dot register user and
36:57 - we'll also want to unregister this
37:01 - groups here
37:03 - so we'll say from janga dot Concha both
37:09 - the models import the group and then
37:14 - we'll say admin dot site dot unregister
37:18 - group now let's come back and refresh
37:21 - this and then we have our users at the
37:25 - bottom and if we click on it we have
37:27 - Matt and if we go all the way down you
37:30 - can see that we have our is student and
37:32 - is teacher fields where is T student is
37:36 - set to true and so let's actually create
37:39 - one more user here will log out and just
37:41 - refresh this and say username equals to
37:44 - test test app Gmail and we'll set the
37:48 - user type to be a teacher and if we
37:50 - click sign up we're now logged in let's
37:53 - go here go back to users we have tests
37:57 - scroll all the way down and teacher is
37:59 - set to true and that basically confirms
38:03 - that our signup is correctly working
38:06 - we've got a custom user that is able to
38:09 - be successfully created on our front end
38:11 - and in the backend and so now what we
38:14 - want to do is actually confirm that
38:17 - logging in works so let's log out here
38:19 - and we're here on the login page and
38:22 - let's try and login with let's say Matt
38:24 - for example and if I click login then we
38:28 - get success as well
38:33 - so in the last one we finished working
38:35 - on logging in and creating our own
38:38 - custom user in the front-end and
38:40 - customizing our serializer with Django's
38:43 - rest auth package to handle that in the
38:46 - backend and in this one we're just going
38:48 - to finish off the user by adding in a
38:50 - view set to allow us to actually view
38:53 - all our users and also to view each
38:55 - user's profile and while we're at it
38:57 - we'll work on creating the assignment
39:00 - serializer as well which will allow us
39:02 - to create assignments so if you'd like
39:05 - to follow along with this tutorial you
39:07 - can just go to github and navigate to
39:09 - our teach me django repository so here
39:13 - it is
39:13 - teach me django and then you can just
39:15 - follow to these commits here to see
39:17 - which commits you'd like to continue
39:19 - from we'll also add a description of
39:22 - these commits inside the project readme
39:25 - file to help point out which commits
39:27 - where the starting code for each
39:29 - tutorial and so once you've got all the
39:31 - code set up and you're ready to go
39:33 - then let's get started
39:40 - [Music]
39:46 - so let's head into the users app and
39:49 - we're going to go to the admin now while
39:52 - I want to work in the admin is because
39:53 - we're going to customize the way that
39:56 - the admin works in terms of these users
39:58 - and how they display everything on this
40:01 - form now we can actually override this
40:04 - entire form we can change it to be our
40:06 - own custom form and that's what we're
40:08 - going to do so what we need to do is
40:10 - first import the user admin which comes
40:14 - from the admin module so we'll say from
40:18 - Django doc contrib dot admin import the
40:22 - user admin and going to say as the base
40:26 - user admin so that we can inherit from
40:29 - this and here we'll say class user admin
40:34 - inherits from the base user admin and
40:37 - then we'll register that with our custom
40:39 - user and recently we posted a video on
40:43 - how to actually customize and improve
40:46 - your Django admin so I advise watching
40:49 - that video before actually continuing
40:52 - with this because in that video we
40:53 - explain everything that we're about to
40:55 - do right now so instead I'm actually
40:57 - just going to go through this rather
41:00 - quickly so we'll add the add field sets
41:03 - and this is basically just a tuple and
41:07 - the first one I'm going to say the name
41:10 - is none and then we'll set up the fields
41:16 - to be email username we'll add is
41:21 - student is teacher and we'll add the
41:26 - password one and we'll add password to
41:29 - and this is basically the fields that
41:34 - are going to display on the add user
41:37 - form well then add the second one here
41:40 - which will be the permissions so that's
41:42 - the name of what we're adding and then
41:44 - the fields are going to be is super user
41:49 - is staff and then we'll add the field
41:52 - sets and this is also going to be a list
41:55 - of tuples I'm gonna copy this first one
41:58 - here however instead of it being
42:00 - password one and two in this case it's
42:03 - just password because now this is the
42:07 - display of the user once it's actually
42:09 - created and then we'll also add the
42:12 - permissions here and I'm also going to
42:17 - add some other options such as the list
42:19 - display and the the list display is
42:23 - going to take in the email it's going to
42:25 - take in the user name it's going to take
42:29 - in is a student and is teacher and then
42:33 - I'm also going to add the search field
42:35 - and this is a list of fields that we can
42:39 - search by so I'll just add email and
42:41 - username and then we'll just say
42:44 - ordering equals to email and if we check
42:48 - the server then we see we're getting
42:49 - this import error and that's because
42:52 - this comes from auth admin so now that's
42:56 - working and if we come back in here and
42:58 - we refresh this page now you can see it
43:01 - looks a little bit different because
43:03 - we're only showing the fields that we
43:04 - want to show and of course you could
43:06 - leave it as the default view but I think
43:08 - this looks a little bit cleaner and you
43:10 - could also go back to users here and you
43:13 - can see the list display is a lot nicer
43:15 - we've got his student and his teacher
43:16 - showing you've got a filter here you've
43:19 - got a search bar and let's add our
43:21 - admins email here we'll just say for
43:23 - example admin at gmail.com and if we
43:30 - click to add a user then you can see all
43:32 - the fields that are required for adding
43:35 - a user which is very convenient as well
43:37 - and so now let's just go ahead and
43:40 - create an API for our user model so that
43:43 - we can fetch users and that'll be useful
43:47 - so that we can come in here and add a
43:49 - profile link and then that would take
43:51 - you to for example slash profile slash
43:54 - one to actually see the profile of that
43:57 - user and we're going to show in that
43:59 - profile are the graded assignments
44:02 - so let's go here to the views and we'll
44:06 - first import our user so you have to say
44:09 - from dart models import user and then
44:17 - we're also going to need our serializers
44:18 - so we'll just say from dot serializers
44:22 - import the user serializer and we'll
44:26 - make this a view set so that it's not a
44:28 - lot of code so I'll say from rest
44:30 - framework import view sets and then
44:34 - we'll just create a class a user view
44:36 - set that will inherit from the view sets
44:39 - model view set and all we need to do
44:42 - there is specify the serializer class
44:44 - which is our user serializer and specify
44:48 - the query set which will just be user
44:52 - objects all and then we can take the
44:55 - user view set and use that inside our
44:59 - own urls da so we'll create one inside
45:02 - the user's model so we'll create one
45:05 - inside the users app and so here we'll
45:08 - just say from rest framework
45:10 - Reuters import the default Rueter and
45:15 - then we'll say from that views import
45:18 - our view set and we'll say our ruta
45:22 - equals to the default Reuter and then
45:25 - we'll say rooted register the regular
45:29 - expression with an empty string like
45:31 - this and we'll say this is the user view
45:35 - set and I'll say the base name equals to
45:38 - users and then set our URL patterns
45:41 - which is what Django looks for equal to
45:44 - the root or URLs then we can just go
45:48 - into our home directory into the URLs
45:52 - our pie and then in here we'll just add
45:55 - a path to the users path
45:58 - so we'll say path users and say include
46:02 - users dot URLs and now if we also just
46:07 - make sure we add a comma there now we
46:10 - can see we're not getting any errors
46:12 - and we should be able to also check this
46:15 - out in our localhost so if we go to
46:17 - slash users then we can see we get the
46:21 - Bolton Django rest framework displaying
46:23 - the user list and if we went to for
46:26 - example users one and put a slash on the
46:28 - end of as well then we get the instance
46:31 - of this user so now what we want to do
46:33 - is translate that into the equivalent
46:35 - display of a user's profile here in the
46:39 - front end and so let's go and close all
46:43 - of this out here and basically where we
46:46 - want to work is inside the source and
46:48 - we'll get started by adding a new root
46:51 - here and this root is going to go to
46:53 - slash profile and then have an ID at the
46:57 - end of that and we're going to create a
46:59 - component to called profile to handle
47:01 - that and we'll just say import profile
47:05 - from containers slash profile and then
47:10 - that means the inside containers we need
47:12 - to create the profile dot J's
47:15 - and we'll get started by creating a
47:17 - class called profile which extends from
47:20 - react and this time we'll use a pure
47:23 - component and we'll say render and then
47:27 - return some JSX
47:30 - and we'll need to import react for this
47:33 - so say import react from react and at
47:37 - the end of this year we'll then create
47:39 - our map dispatch to props and map state
47:41 - to props which will connect to the
47:44 - component so we'll say import from react
47:49 - redux and this is connect
47:55 - and he will say constant map state two
47:59 - props which takes in the state and
48:03 - returns an object and will first grab
48:06 - this token which comes from state author
48:09 - token will grab the user name which
48:12 - comes from state auth dot user name and
48:16 - then will start the map dispatch to prop
48:19 - so it will say map
48:21 - dispatch to props which takes an eight
48:25 - dispatch and returns an object and here
48:29 - we basically want to list out the
48:32 - dispatch methods to actually receive the
48:35 - user's graded assignments however we
48:37 - don't have that functionality yet so
48:39 - we'll just add a comment there and only
48:42 - work with us once we actually have it
48:44 - and then we'll just say export default
48:48 - connect and we'll pass in the map
48:54 - state to props and pass in the profile
48:57 - and if we take a look at this we
49:00 - basically just need to fill in some
49:03 - content here in the return statement so
49:05 - we'll just add a div and say hi and then
49:09 - just say this dot props username and if
49:13 - we take a look at this let's first log
49:15 - in and let's go to slash profile slash
49:22 - one and if we try / - and we don't get
49:26 - the username showing now the reason why
49:29 - we're not actually getting the username
49:31 - showing is because our login method did
49:34 - not save the user into the local storage
49:37 - we still need to configure that so let's
49:40 - head back here and what we want to do is
49:42 - go to the store and to our actions of
49:45 - Earth and here with the auth login
49:48 - method we basically just want to kind of
49:51 - do the same thing as what we did here
49:52 - where we created a user and then store
49:55 - that user in the local storage so we'll
49:57 - just copy that and we'll do that right
50:00 - after we get a response where the token
50:02 - is the response data ducky the username
50:05 - is the username the is student is going
50:08 - to come from
50:09 - the dart as well so i say response table
50:11 - data dot user type dot is student and
50:16 - then will pass the same thing for is
50:19 - teacher and the expiration date is the
50:23 - same as well and then we just want to
50:25 - get rid of these constants here and set
50:29 - the user to a json stringify of the user
50:32 - object and then say or success of that
50:35 - user and so now if we go and try that
50:39 - again and we get a bad request here on
50:42 - the server so let's see why that's
50:45 - happening if we go here to the python
50:47 - 3.6 it just gives us a bad request it
50:50 - doesn't actually tell us anything about
50:52 - it and so basically what we want to do
50:55 - is go back to our serializers and
50:58 - actually configure how we receive a
51:01 - token from the server so let's head back
51:04 - to the users app and if we go to
51:08 - serializers now the reason for this
51:11 - custom serializers so that when we login
51:13 - we receive not only the key from django
51:17 - resteth meaning the token but we also
51:20 - want to actually get the user type and
51:23 - that being either a student or a teacher
51:25 - and we also want to get the user ID and
51:29 - the reason for that is so that we can
51:30 - store that idea now user object and only
51:34 - navigate to our profile and so basically
51:36 - what this means is that we're going to
51:37 - override the token serializer that
51:40 - Django rest all the users so we can just
51:44 - say class token serializer and again you
51:48 - can find this in their documentation as
51:50 - we showed last time and this is going to
51:53 - just be a normal model serializer and
51:55 - I'm going to set the user type to be a
51:59 - serializer method field so serializer
52:03 - method field now a serializer method
52:07 - field allows you to specify a method on
52:10 - the serializer
52:11 - that will return the data that you're
52:14 - looking for so in our case all we need
52:16 - to do is say define get and then
52:19 - underscore the name of the field you
52:21 - created
52:22 - so in our case get user type and it's
52:25 - going to take himself and an object and
52:27 - I'll say that the serialized data equals
52:32 - two now in this case this is going to be
52:35 - the user serializer because we want to
52:38 - get information regarding the user and
52:41 - then return that information and that
52:43 - being the user type so what we pass into
52:47 - it we pass in the object ID user so this
52:50 - is the instance that we pass into the
52:52 - serializer and then we just say dot data
52:56 - so basically we're getting the
52:58 - equivalent JSON object of that data and
53:02 - then we can just say is student equals
53:05 - to the serializer data that get is
53:09 - student and the same thing for is
53:13 - teacher and then we just have to return
53:16 - a dictionary with the keys and values
53:19 - corresponding to what we want so in our
53:22 - case we want the is student to be a
53:24 - student and we want is teacher to be is
53:28 - teacher
53:29 - so this get user type is going to return
53:34 - this dictionary on our serializer and
53:37 - now all we need to do is just specify
53:40 - the fields of our token serializer so
53:44 - we'll say class meta and we'll set the
53:47 - model equals to a token which will
53:50 - import in a second and then we'll say
53:52 - that the fields are the key the user and
53:57 - then our user type that we specified
54:00 - right there and so now we just need to
54:02 - go and import this token which comes
54:05 - from
54:05 - Django's rest framework so we'll say
54:08 - from rest framework dot auth token dot
54:14 - models import token and we can check the
54:19 - server and it's still running and now
54:21 - let's actually bring this to the left
54:23 - here and inside our birthday s we'll
54:28 - just come here and say console dot log
54:29 - the response data
54:32 - and we'll come back here and we'll login
54:36 - and say login with let's say Matt for
54:38 - example and you can see that currently
54:41 - we are only getting the key but now we
54:43 - want to get all those extra fields so we
54:47 - just need to bring our token serializer
54:50 - and take this into our home settings
54:55 - base type I and then here in our wrist
54:58 - or serializers we're just going to add
55:01 - the token serializer
55:04 - and this is going to come from users dot
55:08 - serializers dot token serializer and now
55:11 - let's try it again
55:12 - we'll go login and you can see that
55:16 - currently the error was cannot read
55:18 - property is student of undefined and
55:20 - that's because here in our earth we're
55:24 - reading it from user type which is
55:27 - something that's going to come back here
55:29 - as the user type field on the token
55:33 - serializer so now let's go and login
55:36 - with Matt and now you can see that we
55:38 - get the key we get the user which is the
55:41 - user ID and we get the user type which
55:44 - is specifying is student to be true and
55:46 - is teacher to be false and now you can
55:48 - see that we logged in as well and if i
55:50 - refresh the page we're still logged in
55:52 - which means that we are storing our
55:55 - object correctly in the local storage
55:58 - and now that's just going to add a link
56:00 - here which will take us to our profile
56:03 - so we'll just come back here and we can
56:06 - close our serializer and base up pi and
56:10 - we want to go into the layout so we'll
56:14 - go to containers layout and we already
56:18 - have connected imported which will allow
56:20 - us to access these map dispatch and map
56:23 - state to props from react redux and
56:26 - basically what we want to do is just add
56:28 - another breadcrumb item so we can
56:30 - actually remove the list item here and
56:32 - we'll just make this profile and this is
56:35 - just going to take us to profiles and
56:37 - then an ID so we'll make this output
56:41 - dynamically and
56:43 - use string substitution and this will be
56:47 - this stop props dot user ID then the
56:50 - user ID we can just define in a constant
56:53 - of map state two props which takes in
56:56 - the state and then just returns an
56:58 - object we will say the user ID equals
57:01 - two states auth dot user ID and then
57:05 - that means that we need to store that
57:07 - inside our earth j/s Redux reducer so
57:12 - one we need to make sure that we get it
57:13 - on the login method and the sign up
57:17 - method so we'll come here and say that
57:18 - the user ID equals to the response tab
57:22 - data user remember when we saw that when
57:25 - we logged out the user response in the
57:28 - console and we'll just copy that and go
57:31 - down into the old sign up and also pass
57:37 - it here in this object user so that in
57:40 - both instances we will grab the user ID
57:43 - and that means that inside our reducer
57:48 - we'll need to pass in user ID as the
57:51 - action dot user dot user ID and install
57:57 - this in the state as well and we'll
58:00 - initialize it as null and now that means
58:03 - that we just need to log out and just to
58:06 - refresh this and if we login with let's
58:10 - say mat and if we click on profile
58:13 - currently it takes us to profiles and
58:16 - slash undefined and so if we see why
58:19 - that is we can close this reducer and
58:22 - that's because we didn't put map state
58:25 - two props in our connect method like
58:27 - that
58:28 - so let's come back here and we'll just
58:31 - go back to home and if we click profile
58:33 - now it takes us to slash profiles / 2
58:36 - and so that ends this tutorial basically
58:39 - just confirming that our users are able
58:42 - to actually log in and we're able to
58:44 - store the user ID and the type of user
58:46 - that they are inside our local storage
58:49 - which will allow us to actually do some
58:51 - interesting things in terms of
58:52 - displaying certain links for example if
58:55 - they are a teacher then
58:57 - you could add a create link here to
58:59 - display which will allow them to create
59:02 - assignments and so we'll get started
59:04 - with that in the next one
59:08 - so we're going to do in this one is
59:11 - we're going to start with the
59:12 - assignments and so this is basically
59:14 - going to be like our API where users
59:16 - will be able to create assignments and
59:18 - those users will have to be teachers
59:20 - they'll create the assignments and then
59:22 - we can see them here in the home view
59:24 - which will list all those assignments
59:26 - out so if you'd like to follow along
59:28 - with this tutorial you can just go to
59:29 - github and navigate to our teach me
59:32 - django repository so here it is teach me
59:35 - django and then you can just follow to
59:38 - these commits here to see which commit
59:40 - you'd like to continue from we'll also
59:43 - add a description of these commits
59:45 - inside the project readme file to help
59:48 - point out which commits where the
59:50 - starting code for each tutorial and so
59:52 - once you've got all the code set up and
59:54 - you're ready to go then let's get
59:56 - started
60:02 - [Music]
60:08 - so let's head over here and I'm going to
60:11 - stop the server and just call Python
60:13 - managers up I start SAP and we'll call
60:16 - it API and inside API we can go to the
60:19 - models to get started with this and so
60:22 - we're going to create three models we're
60:23 - going to create an assignment and so now
60:25 - let's think about the kinds of models
60:27 - that we're going to create we've already
60:28 - mentioned that we're going to create an
60:30 - assignment so let's just add assignment
60:32 - here and if we think about the fields on
60:35 - an assignment we could give it a title
60:37 - and this would just be like the title of
60:40 - the assignment so like midterm exam or
60:42 - something like that and then there would
60:44 - have to be a teacher that's assigned to
60:46 - that title because that's the person
60:48 - that actually created the assignment and
60:50 - we would also have to reference the
60:52 - questions on each assignment I'm not
60:54 - going to do it as a many-to-many field
60:57 - of questions on the assignment instead
60:59 - what I'm going to do is create a
61:01 - question model and each question is
61:04 - going to have its question which will be
61:07 - kind of like the title of the question
61:10 - there will then be choices so these will
61:13 - be the actual answer choices to the
61:15 - question and then we'll also have to
61:17 - assign which of those is the actual
61:19 - answer and we could do this in quite a
61:21 - number of ways we could just make it a
61:23 - character field or we could make it a
61:24 - select field where the choices are equal
61:27 - to the choices of the question but I
61:29 - think the character field is just the
61:30 - simplest way to do it and then we also
61:32 - have the assignment and this is the
61:35 - assignment object that we created here
61:37 - so this will be a foreign key and this
61:40 - will allow us to then assign the
61:41 - question to each assignment we'll then
61:44 - also give each question and order and
61:46 - this is so that we can actually order
61:47 - them on the assignment and the reason
61:50 - why we're creating that instead of using
61:51 - the ID is because if you use the
61:54 - question ID we could have for example
61:56 - question 12 and 13 on assignment 2 and
62:00 - we want to reference those questions in
62:02 - terms of their ID relevant to the
62:05 - assignment so meaning question 12 would
62:08 - actually be question 1 on on assignment
62:10 - 2 or whichever assignment it is so that
62:13 - way by creating an
62:14 - order which would just be an integer
62:16 - field we can assign the order of each
62:18 - question on the assignment and then
62:20 - lastly we have these choices here and
62:22 - what I'm going to do is actually make
62:24 - this a many-to-many filled with a choice
62:29 - object and this will actually also be
62:32 - the answer field as well where this will
62:35 - be a foreign key and in the choice model
62:38 - with simply just going to have the title
62:40 - so basically this just means that will
62:43 - create a choice and then assign those
62:45 - choices to each question and so those
62:48 - are the basic models and what we're also
62:51 - going to create is a graded assignment
62:52 - now the graded assignment is kind of
62:55 - like an in-between model between the
62:57 - assignment and the student and the
63:00 - reason for this is we could just add a
63:02 - field here which would be like graded
63:04 - and this could be like a boolean field
63:06 - so basically meaning that we set it to
63:08 - false when it's initially created and
63:10 - then we set it to true when it's been
63:11 - graded but I think a better approach to
63:14 - this would be creating a graded
63:16 - assignment model so we say graded
63:20 - assignment and these fields are simply
63:22 - just going to be the student who
63:23 - actually completed the assignment we're
63:26 - then going to have the assignment that
63:28 - was completed so a foreign key on that
63:31 - assignment and then we'll have the grade
63:33 - and so that way when a user actually
63:37 - completes the assignment it will create
63:39 - a completely new instance that relates
63:42 - entirely just to the fact that it was
63:44 - graded and I think that's a much better
63:46 - way of managing it let's create these
63:48 - models we'll get started with the
63:49 - assignment so we'll say a class
63:51 - assignment and it comes from models dub
63:54 - model will say that the title is a
63:57 - character field and we'll just set the
63:59 - max length to be 50 and we'll say that
64:02 - the teacher is a foreign key on the user
64:07 - model and that means we need to import
64:09 - the user so we'll say from the users our
64:13 - models import user and then we just need
64:17 - to specify the on delete which will be
64:19 - models cascade and then we'll just
64:22 - define the string method here and say
64:25 - this is self and then just say returns
64:27 - self
64:27 - that title and we can delete those notes
64:31 - there then we have the graded assignment
64:33 - so we'll say class graded assignment
64:36 - which comes from model stop model we'll
64:39 - say that the student is a foreign key on
64:42 - the user as well and we'll also say on
64:45 - delete equals two models cascade will
64:48 - say that the assignment equals to a
64:51 - foreign key with the assignment and will
64:56 - say undelete equals two models dot set
65:00 - null and we'll say that blank and null
65:03 - are true and the reason for that is just
65:05 - because if the assignment was deleted
65:08 - maybe you actually do want to keep
65:09 - record of previous assignments that were
65:11 - completed so that way you can just say
65:14 - set null and basically the assignment
65:17 - will just be null and of course you
65:18 - could just make this models cascade if
65:20 - you want to be simple and then we'll
65:22 - have grade equals two models float
65:24 - filled so that we can handle decimals
65:27 - and then we'll just say define string
65:29 - which takes itself and we'll just say
65:32 - return the self dot student died
65:35 - username so that's the graded assignment
65:38 - we then have the question and the choice
65:40 - and I'm actually gonna bring the choice
65:41 - above here so that we can reference it
65:44 - in side the question model so we'll say
65:47 - class choice from models that model and
65:49 - we'll just give it a title which is a
65:51 - character field and just say the maximum
65:53 - length equals 250 and then define string
65:57 - just like this one and then we have the
66:00 - question model
66:01 - so we'll say class question comes from
66:04 - model step model will then say that the
66:07 - question equals two models dot character
66:10 - field and this could be like max length
66:12 - of 200 remember this is the actual
66:15 - question that they're asking then you
66:17 - have the choices and this is going to be
66:19 - a mini to mini field with the choice
66:22 - model and we just created up here will
66:25 - then have the answer which is going to
66:27 - be a foreign key with the choice and
66:31 - we'll say that on delete equals two
66:33 - models dot cascade and we're going to
66:36 - have to pass in the related name because
66:38 - we're referencing the choice twice
66:41 - so we'll say that the related name is
66:42 - the answer will then say that the
66:45 - assignment that this question belongs to
66:47 - is a foreign key to the assignment model
66:50 - and we'll set undelete equal to models
66:53 - cascade will then create the order which
66:57 - is an integer field and actually we
66:59 - could make that a small integer field
67:00 - because it's not going to get too large
67:03 - and then we can add the define string
67:05 - method and we'll just say return self
67:08 - dot question and there we go so I can
67:11 - delete that and now we have our models
67:13 - assignment graded assignment choice and
67:15 - question and we can go ahead and make
67:18 - those migrations after we add the API
67:21 - into our installed apps so we'll just
67:23 - add it here and there we go
67:25 - so we'll just bring up the terminal here
67:27 - and we'll say manage stop I make
67:29 - migrations and there we have the models
67:32 - created and now we can say and it
67:34 - stopped I migrated there we go
67:36 - and let's run the server now and I'm
67:41 - just gonna bring that down and now
67:43 - inside the API what I'm going to do is
67:45 - create two folders the one folder is
67:47 - going to handle the URLs for the
67:49 - assignment view set and then the second
67:53 - folder is going to handle the URLs for
67:55 - the graded assignment view set so we'll
67:57 - just create assignments and then we'll
68:00 - also create the graded assignments and
68:03 - then inside each one we'll just create a
68:06 - URL stop I and there we go and so now we
68:10 - can go to our home and we'll go to the
68:13 - URLs here and then we'll add a path and
68:16 - we'll say path to assignments which will
68:20 - be the API URL to the assignments views
68:24 - it and we'll just say include API
68:27 - assignments dot URLs and we'll do the
68:32 - same sort of thing for graded
68:33 - assignments like that and this will be
68:36 - API dot graded assignments URLs and we
68:41 - can close that and actually come inside
68:43 - these URLs here and what we want to do
68:46 - is actually the same thing as what we
68:48 - did in the user's app so let's go back
68:50 - to users and down to URLs and I'm
68:54 - just going to copy all of that and we'll
68:56 - go all the way back into the assignments
68:59 - URLs so we're importing the route oh the
69:02 - default router and then we're going to
69:05 - import the view set so we don't have
69:07 - that we create the default tutor and
69:09 - then we register it using that view set
69:13 - which again we haven't created yet
69:14 - and then we assign it to those URLs so
69:17 - we have all of that and we can do the
69:19 - same thing for the graded assignment
69:21 - URLs and so we don't need to focus on
69:23 - the graded assignments for now but it's
69:25 - just so that we can get that set up for
69:27 - the time being and we can then work
69:29 - inside the assignments URLs so we're
69:32 - going to need to work on the assignment
69:33 - view set now so let's go here into the
69:36 - API views and we're just going to create
69:39 - a class assignment view set and actually
69:43 - we can use the same thing as what we did
69:45 - in the users model so let's actually
69:48 - copy everything here and then we'll
69:50 - paste this there and we don't need to
69:52 - render shortcut and in this case we're
69:54 - importing the assignment model and we're
69:57 - going to need to create a serializer
69:59 - file with an assignment serializer so
70:01 - let's do that
70:02 - so just create serializers dot pi just
70:07 - for the time being and then we'll call
70:09 - this the assignment view set which uses
70:12 - the assignment serializer
70:14 - and the query set is the assignment
70:16 - objects level and now we can just handle
70:19 - the serializer so we'll need to import
70:22 - the rest framework serializers so we'll
70:24 - say from rest framework import the
70:27 - serializers and then we'll create a
70:30 - class assignment serializer which
70:34 - inherits from serializers dot
70:36 - model serializer and that means that
70:39 - we'd need our model as well so there's
70:42 - that and then here we can just specify
70:44 - the class matter where the model is the
70:48 - assignment and then the fields will just
70:51 - say equals to double underscore all so
70:55 - basically just pass in all the fields of
70:57 - the assignment and everything is working
70:59 - so let's go actually to the localhost to
71:05 - slash assignments
71:07 - and we see that we get the default
71:09 - Django rest framework list view and
71:11 - let's head into the admin and we can
71:13 - actually add those models into the admin
71:16 - as well
71:16 - so we'll say from table models import
71:19 - the choice question assignment and
71:23 - created assignment and then we'll just
71:26 - say admin dot site dot register each of
71:30 - these and there we go now let's come
71:32 - back and refresh this there we go let's
71:34 - go to the assignments and let's just
71:36 - create one here we'll say the assignment
71:39 - is a test assignment and the teacher is
71:42 - that same admin we'll click Save and if
71:45 - we come back here and refresh this then
71:48 - we aren't getting a come through just
71:49 - yet and actually in the URLs is where we
71:52 - needed to bring in our view set so we've
71:55 - got the assignment view set now and we
71:58 - can put that in our Reuter and the base
72:00 - name is assignments and we're actually
72:03 - getting an area here saying there's no
72:05 - module named API assignments views and
72:08 - that's actually because this comes from
72:10 - API dot views so if we come back and
72:13 - reload this now we can see our
72:16 - assignments being loaded there cool so
72:18 - now we can go to the front-end and
72:20 - actually pull those assignments into a
72:23 - list view to display here so let's just
72:26 - close all of this stuff for the time
72:29 - being and we'll go into the front end
72:31 - into source containers and we're going
72:35 - to create our assignment list jeaious
72:38 - and we'll say import react for our react
72:42 - and we're actually going to need to go
72:44 - to and D now so let's go to and D and we
72:48 - want to find the list which is here and
72:52 - the data display and this first one here
72:54 - is good enough so we'll just copy the
72:57 - code and we'll come in here and paste it
73:00 - and we don't need that mounting there
73:03 - and actually all we want is the large
73:06 - size so we'll delete everything else and
73:09 - then we'll just create a class called
73:12 - assignment list which will say extends
73:16 - from react dot P or component and then
73:20 - say R in
73:21 - and return and we're going to return
73:26 - everything here and just paste that in
73:29 - there and then we'll say export the
73:31 - default as the assignment list and then
73:35 - this assignment list we want to bring
73:37 - into our router so let's go to the
73:40 - routes here and we'll say import the
73:44 - assignment list from containers
73:46 - assignment list and we're just going to
73:49 - add another route on the end of this and
73:51 - we can actually just copy one of these
73:52 - and we'll just paste it here and it's
73:55 - not going to go to any specific path
73:57 - except just slash and we can just add
74:00 - the component as the assignment list and
74:03 - if we come back now we can see it
74:05 - displaying there and of course this is
74:07 - dummy data for now so what we want to do
74:09 - is actually get that data and display it
74:12 - here so we're going to use react Redux
74:14 - to handle that for us so let's go into
74:17 - the store into actions and we'll create
74:20 - a new file which we'll call assignments
74:23 - Jas and this is very similar to what
74:27 - we're already doing here with these
74:29 - actions so we're going to basically need
74:32 - everything from there and just paste it
74:35 - so we've got all fail all success and
74:37 - all the start but of course we'll rename
74:40 - those so let's call this first one the
74:43 - get assignment list start and I'll just
74:47 - copy that but there and that will be get
74:50 - assignment list success and get
74:52 - assignment list to fail and we're going
74:54 - to need to go to the action types and
74:56 - add our actions in here so I just added
74:58 - some actions which just say get
75:01 - assignment let's start get assignment
75:02 - this fail and success and using these we
75:05 - can then import them into the
75:07 - assignments and reference them here so
75:10 - we'll say this is get assignment list
75:12 - start and get assignment list success
75:16 - and get assignment list fail and now we
75:19 - just need to add the assignment or
75:23 - assignments rather into the get
75:25 - assignment the success action so we
75:27 - passed those assignments in there and
75:29 - now we need to create our function to
75:32 - actually get those assignments
75:34 - and so we'll just call this the get
75:36 - assignments which we'll have to take in
75:40 - a token to authenticate the user and
75:42 - we'll just return a dispatch and the
75:46 - first dispatch is going to be the get
75:48 - assignment list start which we define up
75:51 - top there and then we'll set the Axios
75:53 - default start headers to have the
75:56 - content type as application and JSON and
76:00 - then we set authorization to be token
76:05 - and then the token that's being passed
76:08 - into the function and then we can say
76:11 - access get and this is going to be HTTP
76:15 - one two seven zero zero one to our
76:18 - localhost and then to port 8000 to the
76:22 - assignments and then we'll just say dot
76:24 - then with the response that we get from
76:27 - the server will say that the assignments
76:30 - equal to response dot data and then we
76:34 - will dispatch the get assignment list
76:37 - success and pass in those assignments
76:39 - and otherwise we'll catch any errors and
76:43 - just say dispatch the get assignment
76:47 - list fail and that's our method action
76:51 - so we basically just need to handle this
76:52 - in the reducer and then add that reducer
76:55 - to the route reducer so let's go to
76:57 - reducers and we'll add assignments
77:00 - jeaious and this is actually going to be
77:02 - similar to the earth so we'll just copy
77:04 - and paste everything in there except now
77:08 - we don't have any of that stuff so we
77:11 - have assignments which will sit as an
77:14 - empty list to get started and if we go
77:17 - back to the actions let's just copy this
77:21 - name so this first one will be get
77:24 - assignment list start
77:27 - and then we'll copy these two as well so
77:32 - we'll copy that and that paste that
77:34 - there and when we get the list success
77:38 - all we're getting are the assignments so
77:42 - this will be assignments is action
77:44 - assignments and everything else is
77:47 - actually good we can delete the author
77:50 - log out and we can delete that case
77:53 - there as well so now the action type is
77:56 - going to be get list start which will be
77:59 - get assignment left start and then the
78:03 - same thing for success and fail so just
78:07 - like that and that actually should do it
78:09 - for the reducer so let's go into our
78:12 - index.js file and here we'll copy this
78:16 - and just say this is the assignment
78:20 - reducer which comes from assignments and
78:23 - we'll say that assignments is the
78:28 - assignment reducer so now we can access
78:30 - the assignments via the assignments with
78:33 - user and we can close that now and close
78:37 - the assignments and action types and now
78:41 - we just need to connect our assignment
78:43 - list to the store which comes from react
78:46 - redux so this is connect we'll come down
78:50 - to the bottom here and say connect the
78:52 - assignment list and let's go and grab
78:56 - those constants like this so we don't
79:00 - have to repeat ourselves and we've got
79:03 - map states of props and map dispatch
79:05 - which we'll pass in here and we'll
79:08 - change those methods of course so we
79:10 - don't need the user ID but we are going
79:13 - to need the token so we can authenticate
79:14 - so this is going to be state auth token
79:17 - and then we're going to need the get
79:20 - assignments which will come from action
79:23 - start get assignments so let's go and
79:25 - say import star as actions from and then
79:30 - go all the way back to the store to
79:32 - actions assignments
79:35 - and we'll say actions dot get
79:39 - assignments and this is going to take in
79:42 - a token which we pass in there and we
79:45 - can get rid of the dotted list there now
79:47 - and instead what I'm actually going to
79:49 - do is pass in the assignments here which
79:53 - will come from state dot assignments dot
79:57 - assignments and then this is what the
80:00 - data will be as the data source so that
80:03 - this will be the star props dot
80:05 - assignments and if we come back now you
80:08 - just have no data and I'm going to get
80:11 - rid of the header and footer and there
80:13 - we go so that's what it looks like so
80:14 - far
80:15 - and we can said that this is the
80:17 - assignment list and we can actually pass
80:20 - in the loading which will be a state dot
80:24 - assignments dot loading and what I'm
80:27 - going to do is use the skeleton from
80:30 - Andy which is all the way down here to
80:33 - feedback so if you click on skeleton
80:35 - basically it just gives you like a
80:37 - loading screen that isn't just a spinner
80:41 - it's like as if the data is there it's
80:43 - just not showing you it so this is
80:45 - simply just importing skeleton from
80:47 - empty so simple enough just import it
80:51 - there and we can import our higher-order
80:54 - component so we'll say import hoc from
80:58 - hoc hoc and here inside the return
81:01 - statement we're going to say if this dot
81:05 - props then we're going to return the
81:08 - skeleton and say active and then
81:11 - otherwise we will return the div with
81:13 - the data source and the reason why it's
81:16 - not correct right now is because we
81:18 - can't return a dynamic output we have to
81:21 - wrap this with some within something so
81:23 - when you're going to return it inside an
81:25 - hoc so that we don't create a div
81:28 - unnecessarily and there we go now if we
81:32 - come back obviously it's still going to
81:34 - say no data but it's working we just now
81:36 - need to say when we have the token send
81:40 - a request to get the data and so we'll
81:44 - add a method here this one will be the
81:46 - component did mount and basically we'll
81:48 - just say
81:49 - if the stop prop star token is not
81:54 - undefined and it's also not null then we
82:00 - are going to call the star props dot get
82:03 - assignments and pass in the star pop
82:05 - star token and with the same kind of
82:08 - concept we'll do that in the component
82:09 - will receive props this isn't the best
82:13 - method to use right now because it is
82:15 - going to be removed but we're not too
82:17 - worried about that for now so basically
82:19 - we're just going to say if the new prop
82:22 - star token is not equal to the current
82:24 - token then we will say the same thing as
82:28 - what we did here and instead of passing
82:31 - the star pop star token this is the new
82:35 - pop star token and we can actually
82:38 - change that as well so that it's new
82:41 - prop star token is not undefined and new
82:43 - pop star token is not null now if we
82:46 - come back we get new props is undefined
82:48 - so it's added there we're not getting
82:51 - any data come through so let's login now
82:53 - so that's actually going login and I'll
82:56 - inspect this here so we'll login with
82:59 - Matt and let's see we get an error here
83:01 - it says objects are not valid which is
83:05 - basically happening inside the
83:07 - assignment list it says line 34 and
83:09 - that's because we're rendering out just
83:12 - the item so basically it is rendering
83:14 - out an object and to think ahead what we
83:18 - also will need to do is create a detail
83:19 - view for the assignment so what I'm
83:21 - going to do is create a method here that
83:23 - will return each list item but with an
83:27 - avalanche inside it so this will just be
83:30 - render item and it will take an item and
83:34 - we'll just say return this here but
83:37 - we'll import the nav link
83:38 - so we'll say import from react rooted um
83:43 - which is nav linked and we will put that
83:46 - inside like that and this is the link
83:51 - component so there you got the link and
83:54 - we're just going to wrap the link
83:58 - around our list item and here we'll
84:01 - specify the to property to just be like
84:04 - for example assignments one just for now
84:06 - and here instead of being item this will
84:09 - be item dot title because remember each
84:11 - assignment has a title and the teacher
84:13 - so in our case we want to display it
84:15 - using the title and if we come back now
84:18 - we just need to use the render item
84:20 - method by calling this render item of
84:24 - item and there we go you can see that
84:27 - the loading skeleton displayed for a
84:30 - little bit and now we have the
84:31 - assignment list where we also have this
84:33 - test assignment which is the first
84:36 - assignment here cool so the assignment
84:39 - list is working and now we can get the
84:42 - assignment detail working so like if I
84:44 - click on assignment one then you see it
84:46 - takes us to this link here so we
84:48 - basically want to add a route to handle
84:50 - that so let's go back here to route and
84:53 - we're going to just copy that one and
84:56 - say this is the assignment detail which
84:58 - will create in a second and basically
85:00 - we're just gonna copy this here and say
85:03 - when you go to assignments and then an
85:06 - ID then it's going to take you to the
85:08 - assignment detail and now we can come
85:11 - back into the containers and we'll add
85:14 - assignment detail DOJ's and basically
85:17 - what we want to do in here is just
85:18 - create a card so if we check out the
85:22 - cards here from ND which are here under
85:25 - the data display and we can just come
85:28 - down a little bit and see this one here
85:30 - which has an inner card that's quite
85:32 - nice so i'm going to copy that code and
85:36 - we'll say import react from react paste
85:41 - that there and so we have a card which
85:44 - has some inner card stuff and you can
85:47 - actually get rid of the second one and I
85:51 - think we will also get rid of the group
85:53 - title so that we basically have a card
85:57 - and an inner card and then we'll just
85:59 - say class assignment detail extends the
86:04 - react component and we'll say render
86:08 - which will return all of this stuff here
86:12 - and then we can say export the default
86:17 - to be assignment detail and if we come
86:21 - back in here now you can see you get
86:23 - this card with an inner card displaying
86:26 - and basically what we can do is change
86:28 - the card title to be the title of the
86:31 - assignment and then for each question we
86:35 - could add a card here or we could be a
86:38 - little bit more fancy and use some other
86:41 - components from Andy to create this
86:44 - effect of showing one question and then
86:46 - when you answer that question you can go
86:48 - to the next one and etc so that's what
86:51 - we're going to do so we're not going to
86:52 - list through all of them and replicate
86:55 - the card title here so let's just come
86:58 - back in here and we can get rid of the
87:00 - extra there as well and so we basically
87:02 - want to go back to the store and inside
87:05 - our assignments actions and reducers we
87:09 - need to handle getting an assignment
87:12 - detail so what I'm actually just going
87:14 - to do is copy all of this here and we're
87:18 - going to now handle the methods to get
87:21 - the assignment detail so let's go up
87:24 - here and this one will be get assignment
87:27 - details start this will get assignment
87:31 - details success and detail fail and then
87:35 - this will be get assignments detail and
87:37 - in this case we want to you pass in the
87:40 - token and the ID of the assignment that
87:42 - we want to get then we will dispatch the
87:46 - get assignment detail start and get
87:49 - assignment
87:49 - detail success and get assignment detail
87:52 - fail and in this case the assignment is
87:56 - what we will get from the response data
87:58 - and we want to change the get request to
88:01 - be assignments and impasse in the ID and
88:04 - the remember to put a slash at the end
88:06 - of that then the assignment we can pass
88:08 - into the get assignment detail success
88:10 - dispatch and change that as well to be
88:14 - an assignment that's passed in there
88:16 - and we also need to update our action
88:19 - types so you can just do something like
88:22 - this get assignment detail start fail
88:24 - and success same kind of concept as
88:27 - before and then we just need to change
88:30 - this here for these methods so this will
88:32 - be get assignment details start get
88:35 - assignment details success and get
88:37 - assignment detail fail and everything is
88:42 - pretty much good to go so we can
88:45 - actually close that or in fact we can
88:48 - actually copy those methods for the
88:50 - reducer and we actually don't need these
88:52 - to be exported same as the list ones so
88:56 - we'll just grab these three here and
88:58 - then we can come into the store reducers
89:02 - assignment and we'll come down to the
89:05 - bottom and right above the reducer we'll
89:08 - just paste these here and instead we
89:10 - need to basically do exactly what these
89:13 - ones are doing where they're passed in
89:14 - the state so this will be like that and
89:18 - for start we'll set it to this and we
89:22 - can actually come out top here and set
89:24 - the current assignment to be an object
89:28 - which will store the current assignments
89:29 - properties and there and then for
89:32 - getting the detail success then we will
89:37 - pass this or like that and this will be
89:39 - assignment and we'll set the current
89:42 - assignment to be the assignment that's
89:43 - being passed in and then for the fail
89:46 - this will update in the same way and now
89:50 - we just need to add three more cases in
89:52 - here to handle those so we've got get
89:55 - assignment detail start which will get
89:58 - assignment detail start get assignment
90:00 - details success and failure just like
90:04 - that and it's just check is the server
90:07 - happy and it is so now what we need to
90:10 - do is basically just call these methods
90:13 - here inside the assignment detail so
90:15 - we're going to basically do the same
90:17 - thing here we're going to need the
90:19 - connect method and we're going to wrap
90:21 - it around the assignment detail and I'll
90:23 - actually just go to the bottom and copy
90:25 - all of this here and then just rename
90:27 - this to be assign and detail
90:29 - and we'll import just the function we
90:34 - need from the store so this comes from
90:36 - store actions assignments and this is
90:41 - the get assignment detail and that's
90:43 - what we'll plus in there as well and we
90:46 - know that it takes in a token and an ID
90:49 - so we pass the token and the ID in there
90:51 - and instead of having assignments will
90:54 - have the current assignment which is
90:58 - from State assignments and just fix this
91:02 - dispatch there and what we want to do
91:04 - now is the same thing as what we did
91:06 - with component did mount and component
91:09 - will receive props so we'll copy that
91:11 - paste that they accept this will be get
91:14 - assignment detail and we'll put that one
91:18 - there as well and we need to pass in the
91:21 - parameter coming from our URL so that
91:24 - would be the stop props match params dot
91:29 - ID and we can actually just copy that
91:31 - whole line and there we go so if we come
91:35 - back seems like everything's good we'll
91:37 - just come here and instead of the title
91:41 - being card title we'll output this
91:43 - dynamically and say that this is the
91:46 - title which will come here and say
91:48 - constant title equals to the stop props
91:52 - current assignment and if we come back
91:55 - we're getting an unauthorized error and
91:58 - that might be because of our settings so
92:00 - if we go to home settings based up PI
92:03 - and go all the way down here and we can
92:07 - actually change this to be is
92:08 - authenticated and I'll remove the
92:11 - session and basic authentication classes
92:13 - and let's come back and refresh this
92:17 - and let's close that and come back here
92:21 - to the detail view and that's because
92:23 - we're not passing in new props star
92:26 - token so let's get rid of that and try
92:29 - this again
92:30 - and there we go we see the test
92:32 - assignment title coming through there
92:34 - and so now let's go back to Andy and
92:38 - we're going to take a look at the step
92:40 - component now the step you can find here
92:44 - under the navigation and this is
92:46 - basically what it looks like it's just
92:48 - like navigating through some kind of
92:51 - step by step task and the way that we
92:54 - want to display this is kind of similar
92:56 - to this one so we're just going to copy
92:59 - that code and let's actually go into
93:03 - containers and we'll create another one
93:05 - which will be called questions jeaious
93:07 - and this is going to basically render
93:10 - out a step by step display of our
93:13 - questions so let's just paste that all
93:15 - there and we can come to the top and
93:17 - we'll rename this app to be called
93:19 - questions and go to the bottom and say
93:21 - export default questions and we're going
93:25 - to need react so we'll say import react
93:27 - from react and I'm gonna get rid of the
93:30 - constructor and just say this state is
93:35 - like that and we can actually just take
93:38 - these questions and bring this into the
93:41 - assignment detail so let's go over here
93:44 - and we'll say import questions from
93:47 - questions and we'll take that and we
93:50 - will display that inside the inner
93:52 - content like that and let's take a look
93:57 - and this is what it looks like now it's
94:00 - not displaying this thing here because
94:01 - we didn't copy the CSS which looks like
94:06 - that but I don't think we actually want
94:08 - to either but instead what I'll do is if
94:11 - we come back here and go back into
94:13 - questions we'll just go up to the top
94:16 - here and this div will say that these
94:19 - style has a height
94:22 - of 100% but what we'll do is we'll make
94:28 - sure that this content actually does
94:30 - have some padding on it and it'll look
94:32 - better once they actually are questions
94:33 - inside there and we don't want to
94:35 - display these large balls here like
94:38 - first second third etc we're just going
94:41 - to have little dots instead so we can do
94:43 - that if we actually just close that
94:47 - there then you can see it looks like
94:49 - this and the way that you do that is
94:52 - just by putting in progress dot like
94:55 - that and bring it into the steps and if
94:58 - we say that now it looks like that and
95:01 - that looks a little bit better and I
95:03 - think we can actually get rid of the
95:04 - inner cart title as well we can get rid
95:07 - of the whole inner card and just display
95:08 - these steps so let's go back to
95:12 - assignment detail and I'm just gonna cut
95:15 - out that card and place it like that
95:18 - and we can actually import the skeleton
95:21 - as well from an T so bring the skeleton
95:25 - in and we have the loading as well so
95:29 - we'll also bring in our higher-order
95:31 - component like we did here in the
95:34 - assignment list and we'll return the
95:37 - higher-order component and inside it
95:40 - will do the same kind of thing and say
95:42 - if this doc props tarting then we'll
95:45 - return the skeleton and say active and
95:48 - otherwise we will return the card like
95:52 - that cool and save and and actually I'm
95:59 - realizing that we will need the inner
96:01 - card so that we can display the question
96:03 - number so we'll just create that card
96:06 - again and just bring the questions in
96:08 - there you will say type equals to you
96:11 - know and what I'll do is say title
96:13 - equals two and let's just take a look
96:17 - again also we haven't given it a title
96:21 - we could specify the title here but what
96:25 - we want to do now is we want to
96:26 - basically grab the questions off of the
96:30 - assignment so when we grabbed it here
96:32 - from the server we want these questions
96:36 - to be passed into the assignment detail
96:37 - and I think what we'll do is we'll pass
96:39 - them in as props into the question
96:42 - component here and then inside these
96:45 - questions here we'll then loop through
96:47 - them and display however many questions
96:50 - they are so basically the number of dots
96:54 - here will depend on the number of
96:56 - questions that's basically what we're
96:57 - aiming for so let's go back in here and
97:00 - what we'll do is we'll say questions and
97:03 - inside there will say that the questions
97:05 - equal to the current assignment which
97:08 - we've got up here and we can actually
97:11 - just say constant equals to the stop
97:16 - props and then say title equals to
97:19 - current assignment and in like that we
97:22 - can pass that into here and say current
97:25 - assignment dot questions and we actually
97:28 - can just put it like that and what we
97:32 - can actually do is return a card by
97:35 - mapping through the questions we can
97:36 - return a card for each question and pass
97:38 - basically a list of components into the
97:41 - questions and that way when it comes
97:43 - through in the questions here the
97:45 - component that will render will not just
97:47 - be this over here the start in the steps
97:50 - it'll actually be a component and so
97:52 - let's just see how this will be done
97:54 - we'll say dot map and we'll say for each
97:56 - question we're going to return a card
98:00 - and we can actually just cut that out
98:02 - and say that there when we do that we're
98:05 - going to need to specify the key which
98:06 - will be the question ID and the title of
98:10 - the question is going to be the question
98:13 - order and we can actually then put the
98:16 - question next to it so what we'll do is
98:17 - we'll output it in strings and just
98:21 - reference it with substitution so
98:24 - question order dot and then question
98:28 - question and that looks a bit better and
98:31 - now inside the questions component we
98:34 - need to handle that
98:35 - so let's first get rid of the steps we
98:38 - don't need that and the logic here of
98:41 - the current is correct we'll keep that
98:42 - will keep next and previous and render
98:46 - but then here we'll say that the
98:48 - constant
98:49 - questions equal to the stop props
98:52 - because we're going to receive it as
98:53 - props so this will be questions and
98:56 - these questions here will loop through
98:59 - inside the steps so now instead of using
99:02 - the steps that was defined up top there
99:04 - we're now going to use the questions and
99:06 - say dub map for each question and we can
99:10 - also use the index to use it as a key so
99:14 - for each question we're going to create
99:16 - a step where the key is going to be
99:19 - equal to the index so basically the
99:22 - index of the element in the list and we
99:24 - don't need a title either we're
99:26 - basically just creating a step we can
99:28 - remove these class names because you
99:30 - don't actually have the CSS for that and
99:32 - this stuff here is rendering out what
99:36 - used to be steps of the current step but
99:40 - now we want to change steps to be
99:41 - questions so that it will render out the
99:43 - question according to the index of that
99:47 - question within the list of questions
99:49 - we've passed down so we can remove
99:51 - content as well and if we take a look at
99:54 - this we've got steps as undefined in
99:57 - line 33 and we can change that to be
100:00 - questions lengths and questions the
100:02 - length and let's take a look now and
100:04 - we're getting a cannot read property map
100:07 - of undefined and the reason for this is
100:09 - because of our serializer
100:11 - so let's jump back into the back end and
100:14 - go all the way to API and then to
100:18 - serializers now the issue is that we
100:22 - have a nested component questions are
100:24 - referenced by a foreign key in the
100:26 - question model and so that's why we're
100:29 - not seeing it come through and so we're
100:31 - going to actually do the same kind of
100:33 - thing as what we did in the users if we
100:36 - go back to the user serializer we used a
100:38 - serializer method field where we defined
100:41 - the method to actually get the starter
100:45 - or we're going to do the same thing here
100:46 - for our questions so let's just close
100:49 - that and we'll say that the questions
100:52 - equals to serializers dot serializer
100:56 - method field and then here we just add a
100:58 - method and say define get
101:01 - questions and say it takes self and
101:04 - object now in order to get the questions
101:07 - we need to actually use another
101:09 - serializer and that serializer will be
101:12 - the question model serializer and so
101:15 - let's just go here and say class
101:18 - question serializer and nothing funny is
101:21 - going to happen here we'll just say
101:22 - serializers dot model serializer will
101:26 - set the class meta to have a model of
101:29 - question which will import for our
101:33 - models and then we'll just say that
101:34 - fields equal to all like the previous
101:39 - one and this question serializer is
101:42 - going to be used to serialize the
101:44 - question objects and so we can say that
101:47 - the questions equal to question
101:50 - serializer where we're passing in the
101:51 - object
101:52 - remember this object is an assignment so
101:55 - we pass in the assignment but we want to
101:57 - access the questions off of that
102:00 - assignment and we can do that because if
102:02 - we took a look at the models again the
102:06 - assignment doesn't have a questions
102:08 - field on it but if you go back to the
102:11 - question model we specified the question
102:13 - to have an assignment that was a foreign
102:17 - key of the assignment model and
102:19 - basically what we need to do to make
102:21 - this work really simply is just by
102:24 - adding a related name so we'll just add
102:26 - related name and this is going to be
102:28 - questions now when we do that this
102:32 - allows us to come into the serializer
102:33 - and say get object questions dot all
102:36 - even though we don't have the field on
102:39 - the assignment the fact that we have the
102:40 - foreign key with a related name allows
102:42 - us to make that kind of query and we
102:44 - actually need to make a migration for
102:46 - that
102:46 - so we'll say make migrations and then we
102:51 - can say migrate and then we can run the
102:54 - server again and we can close the models
102:56 - and now using the question serializer
102:59 - we're passing in the objects questions
103:02 - by using the related name
103:04 - and we want to set many equal to true
103:07 - and that's basically saying almost like
103:10 - there are going to be many questions
103:12 - that we need to pass because this is a
103:15 - nested serializer and then we'll just
103:18 - say dot data to get the data from the
103:21 - serializer and then just say return the
103:24 - questions and so now if we take a look
103:28 - at this and refresh it
103:29 - we're still getting undefined so let's
103:31 - go into the assignments here and we'll
103:35 - just say console dot log the assignment
103:38 - to see what's going on and to basically
103:42 - get around this with a dirty trick what
103:45 - we can do is go into our assignment
103:47 - detail and here right above the
103:49 - higher-order component will just say
103:52 - object keys of the current assignment
103:57 - and say dot length and if it is greater
104:01 - than 0 then we will do all of this here
104:04 - so let's just cut all of that and bring
104:09 - it there otherwise just return null and
104:13 - that means that we also need to wrap all
104:15 - of that inside a higher-order component
104:16 - as well so we'll just cut that out bring
104:19 - that there and now we're basically
104:22 - saying if the current assignment we have
104:24 - from the props has more than one key
104:29 - inside it then return the stuff
104:31 - otherwise return null so now we can see
104:33 - at least that's being displayed and it
104:36 - allows us to actually let the component
104:39 - will receive props take place and then
104:42 - you can see here we're getting a
104:43 - response in the assignments which has an
104:45 - ID of one and we're getting a questions
104:48 - array and you see it each question has
104:49 - an ID and as the question field the
104:51 - order the answer etc and we also get the
104:54 - teacher but it's only returning one so
104:57 - that doesn't help too much and for the
105:00 - choices we also only get one and two so
105:04 - we basically what we want to do is
105:05 - convert any time that we see something
105:08 - that shouldn't be returned as an integer
105:11 - or writable or returned by its ID we
105:14 - want to view it as a string we want to
105:15 - see what what does its define string
105:18 - method
105:18 - because that in that case what it's
105:21 - going to do is for the choices it's
105:22 - going to return the actual text the
105:25 - title of each choice instead and the
105:28 - user will be returned by their username
105:30 - and not by their ID and we can nail that
105:32 - pretty quickly if we just go back to our
105:35 - serializer we can use a string
105:37 - serializer so we can just say class
105:40 - string serializer and say this inherits
105:44 - from sterilizers dot string related
105:46 - field and this requires one method which
105:49 - is the two internal value and it takes
105:54 - in self and a value and then we just say
105:58 - return value then what you can do is you
106:01 - can use the string serializer
106:03 - to convert fields in your other
106:06 - serializers into a string so for example
106:09 - on the question serializer we have these
106:12 - choices that's a field on the question
106:15 - model so we can say choices equal to
106:17 - string serializer where many equals true
106:21 - because there are many choices for each
106:23 - question and then we can return that
106:26 - here inside the fields and if you wanted
106:29 - to return the teachers well let's say
106:31 - you wanted to return the teacher's name
106:33 - and put in the top right hand corner
106:34 - then you could do the same thing and say
106:37 - teacher equals to string serializer
106:40 - where main equals false but we don't
106:42 - have that on the question so we'll just
106:44 - leave it as it is and we'll change the
106:46 - fields to be ID choices question and
106:50 - order and then we can come down to the
106:52 - assignment serializer here and we'll say
106:55 - that the teacher is here because that's
106:57 - where it is and again we'll use the
106:59 - string serializer and pass in many
107:03 - equals to false and cool we'll just
107:07 - leave this as all because we pretty much
107:08 - are returning all the fields so now if
107:10 - we come back here and refresh this now
107:13 - you can see the ID you can see the
107:15 - questions and each question has two
107:17 - choices you can see cool and not cool
107:20 - you can see the question with its title
107:24 - you can see the teacher by its username
107:27 - of admin and that's really convenient so
107:30 - now what we want to do
107:32 - is add the choices for each question
107:34 - inside the question so what we'll do is
107:38 - we'll go back into our source folder and
107:42 - here we're going to create a new folder
107:45 - inside there which is going to be called
107:46 - the components folder and this is going
107:49 - to hold the choices and make sure this
107:51 - is choices j/s because we're basically
107:55 - just going to pass the state down into
107:57 - it we're not going to make this a
107:58 - container and so we'll start by
108:00 - importing react from react and how we
108:04 - want to do this is to use the radio and
108:07 - this is part of forms so if you go up
108:10 - here you can see this vertical drop down
108:13 - of radio options we'll just copy that
108:15 - and we'll change this to be class called
108:19 - choices and then say export default
108:23 - choices and we can get rid of the last
108:26 - radio item and we'll remove the radio
108:29 - style to be outside of the class and
108:33 - let's take this choices component and
108:36 - we'll remove the input there and we're
108:38 - going to take this component into the
108:40 - assignment detail and we'll say import
108:43 - choices from components choices and what
108:48 - we want to do is render the choices
108:50 - inside the card all right that makes
108:53 - sense so we're passing the cards as
108:56 - components into the question but each
108:59 - component card but each card that we
109:02 - pass in has answers inside it so if we
109:07 - go all the way down here to the card we
109:11 - basically want to pass these choices
109:14 - inside it so like that will say choices
109:17 - and we'll just do it like that for now
109:20 - and let's see what this looks like and
109:22 - now you can see get back option ABC for
109:25 - the questions and what we can also do is
109:28 - come up top and just to find some
109:30 - styling which we'll just say is the card
109:33 - style and all we're doing is just making
109:36 - the margin top of 20 pixels
109:40 - and the margin of bottom of 20 pixels as
109:46 - well you can come and bring that card
109:48 - style down inside here so we'll say
109:51 - style equals to card style and let's
109:55 - check this out and now it's a little bit
109:57 - more spaced out and looks a bit better
109:59 - and you can select those different
110:00 - options as well and let's go and
110:03 - actually create another question and
110:05 - we'll add an answer and say let's say
110:08 - it's true and if we refresh this
110:11 - we've got true there we'll say choose
110:14 - the answer and I'll add another choice
110:15 - which is false
110:17 - we'll say this is question to the
110:20 - assignment is test assignment the orders
110:22 - too and if we come back here and refresh
110:25 - this now you can see there's two dots
110:28 - and if you go from next to the next one
110:33 - you're going from question two to
110:36 - question one and back and that's pretty
110:38 - cool so now all we need to do is just
110:40 - pass in the options or that rather the
110:43 - choices of each question as the actual
110:45 - choices to this radio group here and so
110:50 - we already have the choices component
110:54 - that we're passing into the card so
110:56 - inside there we can add some props and
110:57 - say this is equal to the questions
110:59 - choices alright because we're getting
111:02 - the choices off of each question and
111:04 - that way when we go back into choices
111:06 - here we can just come down here and
111:09 - instead of rendering out these
111:11 - components over and over we will output
111:14 - them by mapping through the choices that
111:17 - came through as props so we'll say this
111:19 - table props dot choices dub map and
111:22 - we'll just say for each choice and pass
111:27 - in index we will return a radio item
111:32 - like that and we'll say that the value
111:35 - equals to C where C is the choice that
111:38 - came through and the text that goes
111:41 - inside there is the actual value of C as
111:45 - well and we'll say that the key is equal
111:48 - to the index that was used to loop
111:51 - through in
111:52 - map so now if we come back and so we're
111:55 - getting a warning here which is saying
111:57 - that we're getting a unique key property
111:59 - error and we actually want to remove
112:02 - this value statement there that's coming
112:05 - from the state so what we'll do is
112:08 - remove the state there and what I'm
112:10 - going to do is take the on change and
112:11 - bring this back into the assignment
112:13 - detail we'll put it over here and
112:15 - instead of the value being now coming
112:18 - from the state
112:18 - well how we're going to manage this is
112:20 - pass the question ID into the choices
112:24 - and so that way we can basically store
112:27 - inside the assignment detail the answer
112:30 - to each question inside a dictionary or
112:33 - an object where each key is the question
112:36 - ID and then the value of that question
112:39 - ID is the answer that the users chosen
112:41 - and that's very easy to update in the
112:44 - state so basically what we're doing is
112:46 - at the top here we're just going to say
112:48 - that these state equals to this object
112:51 - that has let's call it user answers
112:54 - which is an object and then in the
112:56 - unchanged we're not only going to take
113:00 - in an event but we're going to take in
113:02 - the question ID that was changed and so
113:04 - we'll grab the users answers via the
113:07 - state and say this equals to the start
113:10 - state and then we'll say user answers of
113:13 - that question ID so we're setting the
113:16 - key in the dictionary equal to the event
113:19 - target value and then we can just say
113:22 - this dot set state of users answers and
113:25 - now we just need to pass the on change
113:28 - inside our choices so what we'll do is
113:31 - we'll say change equals to this dot on
113:35 - change and then we can handle the change
113:38 - property here and say when unchanged
113:41 - takes place then we'll say this takes in
113:43 - an event and a question ID and say it's
113:47 - an anonymous function that calls the
113:49 - stop props dot change where we pass in
113:52 - the event and then we need to pass in
113:55 - the question ID which we'll grab by
113:57 - passing down as well so we'll come into
114:01 - assignment detail and we'll say that the
114:04 - question
114:05 - ID equals to Q dot ID and in that
114:10 - question idea here we can access you in
114:13 - the render
114:13 - so we'll say constant question ID equals
114:16 - to the stock props and then pass in that
114:21 - inside our prop star change and what we
114:24 - can also do is pass in the user's
114:26 - answers so Racha above the return
114:31 - statement will say that the constant
114:33 - user's answers equal to the state and
114:37 - we'll just wrap this 2d structure it and
114:40 - we'll pass that down into the choices as
114:44 - well where it equals to users answers
114:46 - and in fact the question ID should
114:49 - actually be referenced with the order
114:51 - because otherwise we'll get the actual
114:53 - ID of the question which could be like
114:54 - 12 13 14 etc where you only have two
114:58 - questions and it's gonna say question
115:00 - one is number 13 so that doesn't make
115:02 - sense it's actually meant to be the
115:03 - order like how we were displaying it in
115:05 - the title and so what the users answers
115:08 - being passed down into the choices we
115:10 - can now say that the value that's
115:11 - currently selected in the radio group is
115:13 - equal to the value that's in the state
115:16 - so basically what we'll do is say if
115:18 - users answers in which you can actually
115:21 - grab up top here say constant users
115:23 - answers equals to the stock props and
115:26 - say if the users answers are not equal
115:31 - to null and basically just check if the
115:34 - question ID that's coming from the users
115:37 - answers is not undefined and it's also
115:41 - not null
115:45 - so if that's true then we will say that
115:48 - the answer is the the value of the
115:51 - question I'd be inside the users answers
115:53 - and otherwise it is null so basically
115:58 - that's what it looks like and so if we
116:00 - take a look here we'll need to login and
116:03 - if we go to test assignment now you have
116:05 - the first question there and you've got
116:08 - its answers showing you've got cool and
116:10 - not cool and if you go to next you got
116:12 - true and false and now if we select cool
116:15 - and go click Next and go back you can
116:18 - see that that state was preserved
116:20 - meaning the answer that we selected is
116:23 - still there and if you go forward you
116:25 - can click false or whatever go back and
116:27 - forth and there we go so it's preserving
116:30 - the states in the questions and
116:32 - basically what this means is that all we
116:34 - need to do is just add our questions in
116:36 - the back end however many questions you
116:39 - add it doesn't matter because those
116:40 - questions will be looped through to give
116:43 - you the answers to those questions
116:44 - inside each card component and each card
116:48 - component is being passed in inside each
116:50 - question
116:54 - so in the last one we added our
116:56 - assignment list and detailed views to
116:59 - this project and so if you'd like to
117:01 - follow along in this tutorial you can
117:03 - just go to get up to our repositories
117:05 - and you can go to the teach me django
117:08 - repository and then you can just
117:11 - navigate to the commits to see which
117:12 - commits you'd like to navigate to so
117:15 - currently we're on this third commit
117:17 - which is the assignment list and detail
117:19 - views added and so you can just clone
117:22 - this repository and navigate back to
117:24 - those commits and so once you have
117:27 - everything cloned what we're going to do
117:28 - in this tutorial is basically just add
117:30 - the form to create the assignments and
117:33 - also handle the graded assignments so
117:36 - we're going to try and tackle both of
117:37 - those in this video so once you've got
117:39 - everything up and running and let's get
117:41 - started so we have the front end and the
117:54 - back end servers running and we can
117:56 - check this here in our boiler plate and
117:58 - so this is what the assignment looks
118:00 - like you can just select the answers and
118:02 - when you click done then it gives you
118:04 - this processing complete which is
118:06 - basically just a message that displays
118:07 - when you click the done button so you
118:10 - see a get message dot success and so
118:13 - what we want to do is handle the
118:15 - creating of a graded assignment when a
118:17 - user is finished answering all the
118:19 - questions so basically we'll submit the
118:21 - users answers to each question and then
118:24 - on the server we'll evaluate whether the
118:26 - answer they selected was the correct
118:27 - answer and then create a graded
118:30 - assignment object which will hold the
118:32 - grade of that users assignment so we'll
118:35 - get to that in a second but what we
118:36 - actually want to do first is handle the
118:38 - form that will allow us to create
118:40 - assignments and this will only be
118:43 - allowed for users that are teachers so
118:46 - they have that use teacher property
118:47 - being true and so we're just going to
118:49 - come back in here and we can actually
118:51 - close off a lot of this over here and
118:53 - we're going to go inside the containers
118:56 - and create the assignment create jeaious
119:02 - and we'll just copy that name near
119:05 - and let's just import react from react
119:10 - and what we want is actually a form that
119:13 - will allow us to add more fields to it
119:15 - so here and and D we can just go to the
119:19 - form and if you scroll down then we're
119:22 - looking for this one here which shows
119:25 - that you can add a field and you can
119:27 - also remove those fields so we'll just
119:30 - copy all of that code and we'll come
119:33 - back in here and it's actually quite a
119:36 - long one and I'm actually going to
119:39 - remove the comments as well and I'm
119:44 - going to remove these form item layout
119:47 - objects and the labels as well we're not
119:49 - interested in that and so let's just
119:51 - take a look at what this looks like we
119:53 - don't also don't need the react on
119:54 - render and you'll say export default and
119:57 - let's call this the wrapped assignment
120:01 - create and export that is the default
120:06 - and then just make this the assignment
120:08 - create like that and then we'll come
120:11 - into our routes and we're going to
120:15 - import it so we'll say import assignment
120:17 - create from containers slash assignment
120:21 - create and we want to create a new path
120:24 - here which will be when we go to slash
120:27 - create and this will be the assignment
120:30 - create component that will handle it and
120:33 - let's see what errors we get so we get
120:37 - that form item layout problem and we can
120:41 - just sort that out so we can just get
120:44 - rid of that there and all of the form
120:47 - item layout with label rules let's check
120:51 - out now and let's go to slash create
120:55 - then we get this form and we can add
120:57 - fields and remove them as well and so
121:00 - let's add a link here in the breadcrumbs
121:02 - of our layout so that we can navigate
121:04 - there so inside the layout component we
121:08 - can go to the breadcrumbs
121:10 - and we'll add another one here and we
121:13 - already have the user ID in the state
121:16 - and let's actually add the token so this
121:20 - will be state auth token and we're also
121:24 - going to add is teacher which will come
121:28 - from state auth dot is teacher and then
121:33 - with the breadcrumbs what we want to do
121:34 - is actually we don't want to display
121:36 - this link if we aren't authenticated so
121:39 - we'll add a check here and say if this
121:42 - dot props token is not null then we will
121:47 - show that link otherwise just return
121:52 - null and actually we can put that
121:55 - outside the breadcrumb and in the same
121:58 - kind of concept for the next one so
122:01 - we'll just copy this entire thing here
122:02 - and we're saying if the token is not
122:05 - null and the stuff props that is teacher
122:09 - is not false or in other words we could
122:13 - say and the star prop star is teacher so
122:17 - meaning it is true then we will return a
122:20 - link that takes us to slash create and
122:24 - we can actually output that like this
122:30 - and we'll say this is create and there
122:34 - we go
122:34 - now let's come back and if we refresh
122:38 - this and we see a little area let's get
122:43 - rid of that they we have to say and this
122:46 - stuff prop study is teacher and we get
122:49 - profile showing in brackets so let's get
122:51 - rid of those brackets there and there we
122:55 - go okay so let's go into the admin here
122:58 - and we're gonna go change this math user
123:00 - to be a teacher so we'll just select
123:03 - that to be true save and continue come
123:07 - back here refresh it and we'll actually
123:10 - need to log out and login and there we
123:12 - go and just getting those brackets again
123:14 - so let's remove those and there we go
123:18 - and if I click on create and it takes us
123:20 - to that form name and so let's go back
123:23 - in here and we can close the layout and
123:26 - the routes and what we're going to do in
123:28 - the assignment create is we're going to
123:30 - manage the questions themselves so here
123:34 - how we're adding a field this is like
123:36 - going to be adding a question and we're
123:37 - going to manage those questions here on
123:40 - this component and we're going to create
123:42 - another container which will be the
123:44 - question form
123:45 - so basically we're creating like a form
123:47 - set and what we'll do is we'll just
123:50 - render the question form over and over
123:52 - depending on how many questions we want
123:54 - to add and we'll again
123:56 - manage the number of questions here
123:59 - inside the assignment create and then
124:01 - the question form will actually be very
124:03 - similar to what we have here we can
124:04 - actually pretty much copy everything in
124:06 - this file and paste it in the question
124:08 - form and then we'll just rename
124:11 - everything here so this will be wrapped
124:14 - question form and in fact actually we're
124:17 - not even going to create a form using nd
124:21 - because what we're going to do is rather
124:22 - create form items and then pass those
124:25 - form items inside the general form that
124:29 - we have here so inside this form and so
124:34 - instead we can get rid of that call
124:36 - there and we'll just call this the
124:37 - question form and then this is the class
124:40 - question form
124:42 - and so everything here is pretty much
124:43 - going to remain the same we can actually
124:46 - make this a little bit shorter and so
124:50 - each question form will manage the keys
124:52 - of that form whereas the handle submit
124:56 - we're not going to handle on the
124:58 - question form that will rather be on the
125:00 - assignment create view so we can get rid
125:02 - of that and now we have the render
125:04 - method and so the label of this form
125:07 - item will not be the passengers but
125:10 - instead this will be the choices so
125:13 - inside the question form will manage the
125:17 - choices of each question and in the
125:19 - assignment create form if we just scroll
125:21 - up passengers will rather be questioned
125:26 - and so let's actually go into the
125:28 - assignment create and think about the
125:30 - form items that we want to have inside
125:33 - the main form so we're going to have
125:36 - this button which will and asked to add
125:39 - a question
125:40 - so let's rather make this add question
125:43 - and this will be the submit button but
125:46 - instead of making this a dashed we'll
125:48 - make this type secondary and we'll
125:51 - actually get rid of the with style and
125:55 - if we take a look at this now you've got
125:57 - add question and submit there and what
126:00 - we also want is a field to pass in the
126:02 - title of the assignment so we'll just
126:05 - create another form item here and we'll
126:09 - set the label of this format and equal
126:12 - to something like title like that and
126:17 - then we're going to need to use the get
126:19 - field decorator like this one so that we
126:22 - can actually give it a name which will
126:26 - access it by so we just paste everything
126:28 - in there and we'll keep all of those
126:31 - rules there except for whitespace and
126:34 - the message here we can just say is
126:36 - please input a title and then inside
126:41 - here these braces where we actually pass
126:44 - the component to input is going to be an
126:47 - input which we already have over there
126:49 - and we can take a look at this one as an
126:52 - example so we'll just bring that
126:54 - inside there and this input will have a
126:57 - placeholder of add a title and we can
127:00 - get rid of the styling as well so now if
127:03 - we take a look
127:04 - you see K is not defined and that's the
127:08 - gate field decorate a name so we're
127:10 - going to change that to be title and if
127:13 - you come back here now you've got the
127:15 - add a title field and add a question and
127:18 - we'll also add an h1 above here and then
127:21 - they will just say create an assignment
127:24 - and then these form items which we're
127:27 - basically mapping through the keys what
127:31 - we're going to do here is rather just
127:33 - store a count of the number of question
127:36 - forms and then create a question form to
127:39 - pass in based on the number of counts so
127:42 - actually this constant form items will
127:45 - just change two questions and initially
127:48 - this is actually going to be an empty
127:49 - list and we can get rid of everything
127:52 - right here inside this method
127:59 - so everything up till there we can get
128:02 - rid of the keys we can get rid of this
128:05 - get for your decorator there and can get
128:07 - rid of that because we're not using it
128:08 - and then let's just go up here we have
128:11 - the handle submit which will keep us
128:14 - this for now we've got the add method
128:17 - and instead of using this get filled
128:19 - value of keys which doesn't exist
128:21 - anymore we can basically just get rid of
128:23 - all of that we've got the state that we
128:26 - need to define up here so we'll say
128:27 - state equals to this object here which
128:30 - has a form count and you'll say the form
128:33 - count initially is one and we can also
128:35 - remove the ID from up top there and then
128:37 - everything here and the remove we can
128:40 - also get rid of that and we'll just make
128:42 - this an anonymous function as well so
128:45 - inside the add method what we want to do
128:48 - is grab the form count from the state
128:50 - and then set the state to just be that
128:52 - form count plus one so basically that
128:54 - you're just adding one to the form count
128:56 - so we'll say constant form count equals
129:00 - to the start state and then we'll say
129:03 - this set state and pass in the form
129:06 - count to be form count plus one and then
129:11 - the same kind of thing here in the
129:12 - remove method where this will just now
129:15 - be minus one so this is a very basic way
129:17 - of doing it maybe you won't be removing
129:20 - the exact question that you wanted to
129:22 - remove but all the time being it's it's
129:25 - good enough and then we can just come
129:27 - down here and what we want to do is loop
129:29 - through the form count in the state and
129:33 - create ourselves a question form based
129:34 - on the number in the form count so we'll
129:37 - say for let I equals zero and where I
129:43 - smaller than the start state dot form
129:46 - count and then just say I plus equals
129:49 - one then here we will push a component
129:53 - into the questions array and then render
129:55 - those questions here like this
130:00 - and so what we want to push inside here
130:03 - is going to be the question form so
130:06 - let's actually make sure we've imported
130:08 - that so say import question form from
130:13 - question form and then over here we will
130:19 - just push that inside like that and so
130:23 - let's take a look we see we've got get
130:25 - filled decorator of undefined inside
130:27 - question form and that's because we took
130:30 - away the method here to create an ant
130:32 - deform so what we want to do is pass in
130:35 - the props of this component which is
130:38 - being created using the ant deform
130:40 - inside our question form so that it
130:43 - inherits those props so we'll just say
130:44 - pass in the stuff props now if we come
130:48 - back cool now we can see it's kind of
130:50 - taking shape except you've got a submit
130:51 - button there so let's come down here and
130:54 - remove this form item and that's
130:57 - starting to look a little bit better but
130:59 - now we're getting this each child in the
131:01 - array should have a unique key property
131:03 - and so if we come back in here to the
131:05 - assignment create we could say that the
131:08 - key equals to I and if we come back now
131:12 - we're just getting a nesting problem
131:14 - which is basically that we can't return
131:16 - a form itself so we're going to need to
131:19 - remove the form there and these form
131:22 - items we're basically going to need to
131:25 - wrap this inside a higher-order
131:26 - components so let's say import Hoc from
131:32 - hoc and they will take this and just
131:36 - wrap it around everything we have here
131:40 - and so we've got add a field here so
131:44 - let's make this add an answer choice and
131:47 - what we also need to do is specify the
131:49 - actual answer itself so we're going to
131:52 - need to create another form item above
131:55 - it so that the user can specify what the
131:57 - answer is and again you could get
132:00 - creative and maybe add like a checkbox
132:03 - next to each answer choice which if you
132:05 - selected that one would make it the
132:07 - answer but just to get this thing to
132:09 - work let's just copy
132:12 - some of the stuff we have here so we'll
132:14 - just make another form item and then
132:17 - we'll need the get filled decorator as
132:19 - well so let's just copy that and if we
132:24 - just save that so you can see the get
132:25 - filled decorator has the strange syntax
132:28 - of names of Kay and basically what
132:31 - that's doing is allowing each form item
132:33 - to have a unique name that you can grab
132:36 - its value from and so we'll need to play
132:39 - around with that to get this to work so
132:41 - for the timing let's just add a label
132:43 - here and make this answer and we'll say
132:48 - please input and answer to this question
132:53 - and if you come back here we've got K is
132:57 - undefined and that's basically this
132:59 - problem here so for the time being let's
133:01 - just put in answers and if we come back
133:04 - we've got a cannot read property props
133:08 - of undefined and that's because of the
133:11 - answers that we have here now basically
133:14 - what we need to do is ensure that every
133:16 - question form has a unique gate field
133:18 - decorator not only within the form but
133:21 - compared to other question forms because
133:23 - let's say we render out five question
133:26 - forms that all have a gate field
133:27 - decorative answers and it's basically
133:30 - going to set the value of each field in
133:33 - those five questions to be the same
133:35 - thing because it's got the same gate
133:37 - field decorated property so basically
133:39 - what we need to do is pass in the
133:40 - question ID from the assignment create
133:43 - component here and using that that
133:47 - question ID we can then differentiate
133:48 - each question form from the next one so
133:51 - basically here we'll use that same
133:53 - syntax debated where you basically pass
133:56 - in like a square brackets to access the
133:58 - index of to access an element by its
134:00 - index and we'll just say this
134:07 - docprops/custom.xml create it and we'll
134:09 - set ID equal to I because I is just one
134:14 - way of incrementing through it and so if
134:17 - we refresh this we're still getting that
134:19 - error and so let's go back into the
134:22 - question form and we can also remove
134:23 - whitespace from there
134:25 - and we also need to pass in the actual
134:28 - form component Enya which is actually
134:31 - going to be an input so we can just grab
134:34 - this one here and put that in there as
134:37 - well and this is going to be the actual
134:39 - answer to the question well in this case
134:43 - the choices basically so we'll have you
134:47 - the placeholder as what is the answer
134:51 - and we'll remove the style and let's
134:56 - come back and see and there we go now
134:58 - it's working and we've got add a title
135:01 - we've got what is the answer we can add
135:04 - an answer choice and we're still getting
135:06 - those passengers coming through and
135:08 - that's just coming from inside here and
135:11 - so we're going to need to kind of do the
135:13 - same thing with the get filled decorator
135:15 - of the choices so this this is going to
135:19 - be choices here and we'll set the get
135:22 - filled decorator to be choices of the
135:25 - stuff props ID and we'll say please
135:29 - input a choice to the question and then
135:33 - the placeholder here will be the answer
135:36 - choice and then we can get rid of the
135:38 - style there so let's just take a look at
135:40 - what we've got here we've got one form
135:42 - item which is the choices and that's
135:45 - being looped through based on the keys
135:47 - count which is what we had by default
135:49 - from Andy and we're using the ID of each
135:53 - question to differentiate the choices of
135:55 - each form and we can get rid of that
135:58 - required false there we don't need that
136:00 - and each choice that's being looped
136:03 - through has its own input which says
136:06 - answer choice and if the key length is
136:09 - greater than one then it's going to show
136:10 - the icon which will allow you to remove
136:12 - that answer choice then we're returning
136:16 - a bunch of form items the first one is
136:18 - going to be the actual answer to the
136:20 - question so it's going to say what is
136:21 - the answer so he input what the actual
136:23 - answer is then it's going to give you
136:25 - the choices to input and then a button
136:28 - to add another answer so if we take a
136:30 - look at Beth you've got the title the
136:33 - answer add an answer choice and add a
136:36 - question now what we need is a field
136:38 - that says what
136:39 - is the question and so if we come back
136:41 - in here where that can go is actually
136:43 - just right here above the answer for
136:46 - madam so we'll just copy that paste it
136:49 - there and this will be question and then
136:53 - this here the get filled decorate we're
136:55 - going to use as question to
136:57 - differentiate and call this top prop
137:00 - star ID and we'll say please input a
137:02 - question and then here this will be add
137:07 - a question and if we save that and check
137:10 - it out now you've got one form showing
137:12 - which asks you for question the answer
137:15 - to the question and then the choices as
137:17 - answers to that question and if we add a
137:20 - question you can see that the exact same
137:23 - form was repeated you've got add a
137:25 - question what is the answer and the
137:26 - answer choice and you can add an answer
137:29 - choice to each one and so to kind of
137:33 - help differentiate the forms from each
137:35 - other we'll just add a divide between
137:37 - them so let's go back to the answer
137:39 - create and we'll wrap this around with
137:43 - an hoc which will actually need to
137:46 - import so we'll say import a chassis
137:49 - from hoc and then here we will wrap this
137:55 - around like that and then we'll pass in
137:59 - a divide and a divider basically comes
138:02 - from and D which is another one of their
138:04 - components and then we can just simply
138:07 - just add it like this and so now we need
138:11 - to pass the key inside the higher-order
138:14 - component and if we check this out you
138:17 - can just refresh this now you've got
138:19 - that divide there and if I had a
138:21 - question then at least that divide is
138:24 - kind of separating them you could make
138:25 - that thicker as well and so we'll also
138:29 - add a little icon next to the question
138:31 - to remove that question so just like how
138:34 - they do here where they say if Keys dot
138:37 - length is greater than 1 then return an
138:39 - icon like this and we'll grab that there
138:42 - come here and here where they're pushing
138:46 - each high order component we're adding a
138:48 - question form and a divider and so I'll
138:51 - just put it right there and
138:53 - say if questions dot length is greater
138:57 - than 1 then written an icon and we're
138:59 - disabled is where questions dot length
139:02 - equals one and unclick will just say
139:05 - this dot remove like that so let's see
139:08 - what this looks like and if we add a
139:09 - question then we're seeing no icon yet
139:13 - so let's go back here and say yeah if
139:16 - it's greater than zero and disabled as
139:18 - if it's equal to zero and if I click add
139:21 - question then there's little icon to
139:24 - remove that question and that's actually
139:26 - try and add it above the question form
139:30 - and see what this looks like so if I add
139:34 - a question then there's a little icon
139:36 - and if you press it then it removes the
139:38 - question cool so let's actually add that
139:40 - question and let's just pass in a title
139:43 - and just say test we basically just want
139:45 - to see what the data looks like when we
139:46 - submit it and we'll say this is question
139:48 - one say this is answer 1 we'll add an
139:51 - answer choice and make that answer too
139:54 - and the question here will be question 2
139:57 - the answer will just be answer two and
140:00 - just some choices and we can make that
140:04 - one and okay so we're seeing that this
140:06 - is giving us the same answer inside the
140:09 - choices so let's go back here to the
140:12 - question form and so the problem is
140:15 - basically happening here inside this
140:16 - gate field decorator we're calling
140:18 - choices of this type props that ID but
140:20 - this should actually rather be choices
140:23 - of K like it was and outside here we're
140:27 - going to pass in questions of this type
140:30 - props that ID and so now if we check
140:34 - this out and we'll add an answer choice
140:37 - there then you can see that those values
140:40 - are now different they're unique
140:42 - so let's fill in the rest of the form if
140:45 - we click Submit
140:46 - we've got received values we've got
140:48 - answers are a and B the keys are 1 & 3
140:53 - because we deleted one of those keys
140:55 - we've got a question which is question 1
140:58 - in question 2 where those are the names
141:00 - of the questions we have here and then
141:03 - we have the questions arrays which are
141:06 - the array of choices to each question so
141:10 - we've got empty and then a and basically
141:14 - Bieber and then you've got the second
141:17 - one here B and that so that's how the
141:20 - dots is coming through and okay as we
141:22 - also have the title day so we want to
141:24 - basically take that data format a little
141:26 - bit and send that through to the back
141:28 - end where the server will basically
141:30 - create the form and so let's go and add
141:33 - the functionality inside the submit
141:36 - method yeah so here you've got handles
141:38 - submit and so basically the format's of
141:41 - how we want to submit this is going to
141:43 - be an assignment object so we'll say the
141:46 - assignment equals to an object and it's
141:49 - going to have a teacher right because we
141:51 - know when we create an assignment it has
141:53 - to have a teacher and it has to have a
141:55 - title so those are two easy properties
141:58 - that title just simply comes from values
142:01 - title and then the teacher is going to
142:04 - be the star props that username and we
142:06 - should have that at the bottom here so
142:08 - we'll just go and copy that from the
142:11 - assignment detail so let's just grab
142:13 - everything there and paste that so we
142:18 - need the username which is going to be
142:20 - state auth dot username and we'll pass
142:23 - in the wrapped assignment create inside
142:29 - that Connect method there just save that
142:32 - and we're going to need to import
142:34 - connect from react redux and then we'll
142:38 - also add the actions in the store to
142:42 - handle creating the assignment so we'll
142:44 - get to that in a second but let's just
142:47 - get this object sorted in our handle
142:49 - submit so we've got the teacher and
142:52 - we've got the title but we also want to
142:54 - pass in the questions for that
142:56 - assignment and I think the easiest is
142:59 - just to simply add in questions like
143:01 - that and this questions key is going to
143:04 - be a list of question objects and each
143:07 - question object has to have a title it
143:09 - has to have the choices and it has to
143:11 - have the answer so basically we're going
143:14 - to loop through the props in our form
143:19 - push each question that will create as
143:22 - an object into a list of questions which
143:24 - will then be passed here into the
143:25 - assignment object so we'll start with
143:28 - the questions which is going to be an
143:30 - empty list and then we'll say for that I
143:34 - equal to 0 where I is smaller than the
143:39 - values questions dot length so basically
143:42 - the length of questions and then we'll
143:44 - say I plus equals 1 and every time we
143:49 - loop through we're going to say push and
143:51 - we're going to push an object inside
143:52 - there where each question has a title
143:55 - it's going to have the choices and it's
143:58 - going to have the answer and so the
144:01 - title is simply just going to be the
144:04 - value inside the list of the questions
144:07 - so this is just going to be values like
144:10 - questions of I and actually for the time
144:13 - being let's just comment all of that out
144:16 - and this is meant to be a colon there so
144:21 - let's just go down and comment out the
144:24 - get assignment detail and I'll just add
144:27 - some dummy dot here yeah you've got the
144:29 - question which is a list of question
144:33 - titles and then you've got the questions
144:35 - which is a list of the choices to that
144:37 - question so basically what we need to do
144:40 - is make sure that we don't pass in the
144:42 - empty values in those rights you can see
144:45 - you have empty and then on send
144:47 - incorrect you want to get rid of those
144:49 - empty values so what we're going to do
144:52 - is let's just go back up here we're
144:54 - going to set the choices to be values
144:57 - dot questions and actually this first
145:00 - one should be question of Aya's question
145:03 - has an array of question titles they
145:07 - were asking where's questions has a list
145:10 - of objects that have choices inside them
145:13 - so we're going to say questions of I to
145:17 - grab each instance from that list and
145:20 - then we say dot choices to access the
145:22 - choices of that object and then we need
145:26 - to filter that where we don't want any
145:29 - null values so basically we're just
145:30 - saying we're
145:32 - is not equal to null and then the answer
145:37 - is just going to be values dot answers
145:41 - all right and we just need to put a
145:44 - comma at the end of that call so now
145:46 - we've pushed the object into the
145:48 - questions array and we've passed those
145:50 - questions into the assignment and now we
145:53 - just need to create the actions in the
145:56 - store to handle the logic of pushing
145:59 - that to the server so let's go and do
146:02 - that now we're going go into the store
146:04 - here into assignments and all the way at
146:08 - the bottom here we're going to need to
146:09 - actually just basically copy all of this
146:11 - again and change this to be the
146:13 - assignment create logic so this will
146:16 - just call create assignment start and
146:19 - then this one will be create assignment
146:22 - success and create a Sun detail or
146:26 - create assignment fail rather and then
146:30 - this one will be just create assignment
146:33 - when we create the assignment we're
146:35 - going to take in a token to authorize
146:36 - the user and then we're going to pass in
146:39 - the actual assignment when it's created
146:42 - so here in the assignment create this
146:44 - object will pass into this method and
146:46 - will dispatch get or rather create
146:50 - assignment start and then here we don't
146:54 - need to console that art we can just say
146:56 - dispatch create assignment success and
146:59 - create assignment fail and we're going
147:03 - to need to change this to be a post
147:04 - request where we'll post it just to this
147:07 - URL because it does handle post requests
147:09 - and we're not going to get anything back
147:11 - from the response we're just going to
147:13 - basically just dispatch the create a
147:15 - sign of success if it was if it did
147:17 - receive a response and if there was an
147:19 - error then we just dispatch the fail and
147:21 - now we need to go and add those action
147:24 - types in here so something like this
147:26 - create assignment start fail and success
147:28 - and you can take those and bring them
147:31 - into these actions so this will be
147:33 - create assignment start create
147:36 - assignment success and create assignment
147:38 - fail and in the assignment here we need
147:42 - to post
147:43 - as the object that's being posted and
147:45 - that's pretty much it that's the whole
147:47 - method handled so we can bring this here
147:50 - into the assignment create and we'll say
147:52 - import create assignment from the store
147:59 - and then that create assignment we will
148:03 - pass in over here which takes in
148:06 - assignment
148:07 - dispatch that method which takes in that
148:09 - assignment and then we will call here
148:13 - this props dot create assignment of the
148:18 - start prop start token and the
148:20 - assignment so like that and let's see if
148:24 - we've got any errors so we're getting
148:26 - assignment in line 113 so we come here
148:31 - and that's because we don't need to pass
148:33 - that into the create assignment success
148:35 - cool so let's add a title title test
148:39 - question 1 the answer will be yes and
148:42 - the choice will be yes or no and I'll
148:46 - just say submit and of course we get a
148:48 - 500 internal server error because we
148:52 - just aren't handling the creation of
148:54 - these assignments the way that we need
148:56 - to be doing that so we can go and close
148:59 - the assignments there and question form
149:02 - and actually we didn't actually do the
149:04 - reducers yet so let's go inside here so
149:07 - we'll basically just copy all of this
149:10 - stuff here the assignment details start
149:12 - and all the way up to the success and
149:15 - I'll just copy and paste that there and
149:17 - this will be the create assignments
149:22 - thought this will be create assignment
149:24 - success and then create assignment fail
149:27 - and then here we'll add in three more
149:30 - cases the way this one will be create
149:33 - assignments start and we'll say create
149:36 - assignment start and this will be create
149:39 - assignment success which will be create
149:42 - assignments exists and the fail one and
149:45 - let's just go handle what happens there
149:47 - it's pretty much going to be the same
149:49 - thing
149:50 - except we don't get any assignment
149:53 - action there and pretty much that's it
149:57 - there so we can close the reducer and
149:58 - we'll go into our back-end now so let's
150:01 - go to API and we're going to need to go
150:05 - to our views here we have the assignment
150:08 - view set and so basically you can
150:11 - actually override the methods on a view
150:14 - set and you can check that in the
150:16 - documentation of the Django rest
150:18 - framework so for example if you wanted
150:20 - to override the create method you could
150:22 - just say define create which takes in
150:24 - self and a request and the basic logic
150:27 - that proceeds when the create method is
150:29 - executed is that it uses the serialize
150:32 - it so the assignment serializer in this
150:34 - case which is in serialize of pi so it
150:37 - would take the serializer
150:39 - and we would pass in the request data
150:41 - into the serializer
150:43 - then we would say if the serializer is
150:45 - valid then using the serializer
150:47 - creates an assignment because that's
150:50 - what the serializer basically does
150:51 - converts the JSON into an object and
150:53 - then return a response which is either
150:55 - an HTTP 201 that means it's created or
150:58 - returned an HTTP 400 which means it's a
151:01 - bad request so basically we will say
151:03 - that the serializer
151:04 - equals to the assignment serializer this
151:06 - one here and we say that the data equals
151:09 - to the request data which is coming here
151:13 - inside the create method and then we
151:16 - just say if the serialize ODOT is valid
151:19 - then proceed otherwise you can just call
151:22 - it like this you have to do that
151:23 - otherwise it won't let you move on and
151:26 - then we'll just say that the assignment
151:28 - object equals to serializer dot create
151:31 - the request remember this will only
151:34 - happen if it's valid and we can actually
151:36 - just do that if serializer is valid and
151:39 - we'll say if there is an assignment then
151:42 - we will return a response and the
151:44 - response we can import from the rest
151:46 - framework so we just say from rest
151:48 - framework dot response import response
151:53 - and then we'll import some statuses as
151:56 - well we'll say from rest framework
151:59 - that status import and we're going to
152:04 - need the 201 which is created and we're
152:08 - going to need the 400 bad request and
152:11 - then we'll just grab that there and say
152:13 - return response where the status equals
152:16 - to HTTP 201 created otherwise return a
152:20 - response where the status equals to the
152:24 - HTTP 400 bad request and you can put
152:30 - that like that cool so this assignment
152:33 - serializer dot create this is a method
152:36 - on the serializer so if you come here to
152:39 - the Syrian laser we can actually define
152:41 - that create method and that's gonna be
152:44 - quite handy because the data that we're
152:46 - getting in in the serializer is really
152:49 - just not going to match what the
152:51 - serialize is expecting so we're going to
152:53 - override the create method on the
152:55 - serializer
152:55 - to pass all that data into exactly how
152:58 - we need it to be passed and then create
153:01 - the objects that need to need to be
153:03 - created so for example the choices and
153:05 - then assign the choices to the questions
153:07 - assign the questions to the assignment
153:09 - and return the assignment basically
153:10 - that's what we're doing and so it is
153:13 - quite a long method so we'll say define
153:15 - create and it's going to take himself
153:17 - and request and remember this request is
153:21 - what's being passed in here this request
153:24 - there so we get access to the request up
153:26 - data so we'll say request that data
153:28 - equals to that data and we can actually
153:31 - print it out as well so let's test it
153:34 - out we'll add a title will say question
153:36 - one answer is yes choice yes and no
153:40 - click Submit and let's see inside the
153:45 - terminal and here you get the teacher is
153:48 - Matt titled as title questions is a list
153:51 - of objects where we've got title as
153:53 - question one choices is yes or no and
153:55 - the answer is yes cool so with this data
154:00 - we basically just need to think about
154:02 - what we need to create in terms of
154:03 - models so so far we've got the
154:05 - assignment to the question and we need
154:07 - the choice as well and so we'll start by
154:10 - creating the assignment so we'll say the
154:12 - assignment
154:13 - equals to an assignment object like that
154:16 - and we're going to need to assign the
154:19 - teacher and the title to the assignment
154:21 - so we'll say the teacher equals two
154:24 - user objects get where the username
154:27 - equals two data of teacher remember
154:32 - teacher is Matt in this case so we're
154:36 - getting the user object that corresponds
154:38 - to that username and we're going to need
154:41 - user imported so say from user dog
154:44 - models
154:45 - import user and if we come back down
154:49 - here then we can say that the assignment
154:52 - teacher equals to teacher or say the
154:56 - assignment title equals to data of title
155:00 - and then we say assignment dot Save cool
155:04 - so that is the assignment being created
155:07 - now we need to create the questions and
155:10 - the way that we're going to do that is
155:12 - just by looping through this list of
155:15 - questions and accessing these properties
155:18 - inside that dictionary so we'll say for
155:21 - question Q in data of questions and
155:26 - that's going to return a list then we'll
155:29 - say that the new question equals to a
155:30 - question object because remember we have
155:33 - to create a new object every time we
155:34 - loop through this and we'll say that the
155:36 - new question title or rather the
155:39 - question actually because that's what it
155:41 - is on the model equals to Q of title so
155:45 - that's the actual question that's being
155:46 - asked and then we'll say that the order
155:49 - equals to some kind of integer which
155:52 - will loop through over here we'll say
155:53 - order equals one for the first one and
155:56 - we'll say that equals to order and then
155:59 - we can say new question that's save and
156:00 - we'll increment the order at the end of
156:03 - the for loop so there's the new question
156:06 - now we need to assign the choices to
156:09 - that question so we'll say for choice in
156:12 - question of choices we'll say the new
156:17 - choice equals to a choice object
156:20 - and that new choice title will be equal
156:23 - to C which is what we're looping through
156:26 - and then we can just save the choice and
156:30 - then add the choice to the new questions
156:34 - choices so say dot choices add the new
156:39 - choice like that and then we just need
156:42 - to add the answer to the question as
156:44 - well so we'll say new question answer
156:46 - equals to the choice object that we
156:48 - created we don't want to create another
156:50 - choice object we can basically just
156:52 - fetch the one that was already created
156:53 - so we'll say choice
156:55 - objects get where the title equals to q
157:00 - of answer and then we can assign the
157:05 - assignment of this question equal to the
157:09 - assignment that was created at the
157:10 - beginning of this create method so this
157:14 - assignment here and then we can save our
157:17 - question and then tally our order by
157:20 - saying order plus equals to 1 and at the
157:23 - end of all that we can say return the
157:26 - assignment so there we go that's our
157:29 - create method and if we come back and
157:31 - click Submit it seems you've got an
157:33 - error connection refused so let's see
157:35 - why that is we assumed got from user dot
157:38 - model so this is meant to be from users
157:41 - and let's try that again
157:43 - click Submit and this time we get a 401
157:47 - unauthorized and that's because we're
157:49 - not logged in so we'll just log in and
157:51 - we actually might just need to refresh
157:53 - the page here so we'll log in again and
157:56 - let's click on create we'll add a
157:58 - question now let's check that it wasn't
158:00 - created here and I guess I wasn't so
158:03 - that's good so this will be the first
158:07 - real assignment and we'll say this is is
158:11 - this cool so the answer is yes choices
158:16 - are yes and no and we'll add another
158:20 - question yeah and say does this work the
158:24 - answer is yes choices are yes and no
158:27 - submit we get a 500 error again let's
158:31 - see and it's telling us that there's a
158:33 - not null constraint which is the answer
158:36 - ID so let's go back here back down this
158:40 - is most likely happening because by
158:42 - default the serializer is expecting us
158:45 - to pass in an ID so let's just try and
158:48 - go to the models here and what I'm going
158:51 - to do here is say blank and null equal
158:54 - true and it's just to stop the server
158:57 - here and we'll just say make migrations
158:59 - and then say migrate and it's just runs
159:04 - over here and if we come back and submit
159:07 - this I'm getting the same issue on the
159:12 - API question assignment ID so again
159:15 - let's just add the blank and null equal
159:18 - true to that and this is obviously a
159:21 - temporary fix this is not something that
159:22 - actually makes sense
159:24 - so let's try it again now we'll submit
159:28 - it another 500 and now we're just
159:31 - getting get returned more than one
159:33 - choice so that means that it was
159:34 - actually created so let's go back into
159:36 - here and refresh this okay so we've got
159:39 - first the first three real assignment is
159:42 - created three times so let's just delete
159:44 - those there and let's see what we need
159:46 - to get rid of let's just get rid of all
159:49 - those yes or knows and did that and then
159:52 - we can go to the questions you've got
159:55 - does this work on question two okay so
159:58 - now let's click Submit
160:01 - and okay we're returning to again so
160:03 - that's that's delete everything okay
160:06 - cool now let's try it again or click
160:08 - Submit and okay I can understand why
160:13 - this is happening now
160:14 - it's because we're passing in the
160:16 - choices as yes and no for both of these
160:18 - questions so what's happening in the
160:20 - serializer is that it's creating those
160:22 - without even checking if they are
160:24 - actually existing so another way to do
160:27 - this would just be to use the get or
160:29 - create method but what I'm going to do
160:31 - is just for the time being we will just
160:33 - delete those and change the answers that
160:36 - we're submitting so we can come back
160:39 - here into this and we'll say does this
160:44 - work on so let's just make it true and
160:46 - we'll say choices are true and false and
160:51 - if we click Submit now we didn't get any
160:53 - errors there and maybe a post request
160:57 - returned to o1 and if we go back to the
161:01 - home view there's the first real
161:03 - assignment and okay so we've got this
161:06 - navigation error let's go fix that and
161:08 - we can navigate into source and then the
161:13 - assignment list you can just close that
161:15 - there and this is not meant to go there
161:19 - this should rather go to the ID there so
161:23 - we'll just change this to be item dot ID
161:28 - and that should work so let's go back
161:31 - home here and I'll click on now and it
161:34 - takes me to number seven cool there we
161:36 - go so we've implemented the create form
161:40 - pretty much correctly there's one or two
161:43 - problems that exist and I'm sure those
161:46 - can be fixed but I'm not really too
161:48 - worried about exactly how functional
161:50 - that is we can always tweak that later
161:52 - and the bottom line is that we were able
161:54 - to get this form to work so now you can
161:57 - create these assignments here on the
161:59 - front end and see them in this list
162:03 - display meaning that they are created in
162:05 - the back end
162:09 - so now we're able to create assignments
162:12 - and what we want to do to finish off is
162:14 - to add some functionality to create a
162:16 - graded assignment so if we take a look
162:19 - at the API models we originally created
162:22 - these four models and one of them is the
162:24 - graded assignment which basically is
162:27 - just created once somebody actually
162:29 - takes this assignment and actually just
162:32 - fills in the answers and clicks to
162:34 - submit the assignment so what we want to
162:37 - do is just add functionality to handle
162:38 - that in the back end and also display
162:41 - the person's created assignments on
162:43 - their profile and so if you'd like to
162:44 - follow along you can go to get up to our
162:47 - teach me django repository and head over
162:49 - to the commits the last one was this
162:52 - assignment creation working commit where
162:54 - we finished creating the assignment
162:57 - logic on creating those assignments in
163:00 - the backend and so this is where we'll
163:02 - be continuing in this one so once you've
163:05 - got everything ready and your editor
163:07 - then let's get started
163:13 - [Music]
163:19 - so what we're going to do to get started
163:21 - is create a graded assignment list view
163:23 - which will inherit from the list API
163:26 - view from the Django rest framework and
163:29 - so what we'll just do is come to the
163:31 - bottom here off to the view set and
163:33 - we'll just create a class and call this
163:35 - the graded assignment list view and
163:42 - we're going to import from Django's
163:44 - generics to handle that so we'll say
163:47 - from the rest framework that generics
163:50 - import the list API view
163:53 - so we'll inherit from that list API view
163:57 - here and that means all we need to do is
163:59 - to specify the serializer class which
164:02 - will be the graded assignment serializer
164:05 - so we don't have that yet so we'll just
164:09 - go and create it now and so we'll just
164:11 - call this the graded assignment
164:13 - serializer let's just copy that right
164:16 - there and we actually need to import
164:18 - this modelled in so this will be the
164:21 - graded assignment serializer which will
164:23 - just inherit from the model serializers
164:26 - and again we'll specify the class meta
164:30 - where we will specify the model as the
164:32 - graded assignment and will say that the
164:34 - fields are all the fields and so if we
164:38 - think about what all those fields are it
164:41 - would be the student the assignment and
164:44 - the grade now just like how we have in
164:47 - the assignment we have the teacher which
164:49 - is using the string serializer
164:52 - to display the user via its username so
164:55 - I'm going to do the same thing for the
164:57 - student because otherwise we're going to
164:58 - get the student ID and that's not useful
165:00 - so we'll just say student equals to
165:02 - string serializer many equals false and
165:05 - so now we just take that graded
165:07 - assignment serializer
165:08 - and we just imported here so from dot
165:12 - serializers and we specify that is the
165:14 - serializer class and we can also set the
165:17 - query set to be the graded assignment
165:20 - objects that all
165:24 - and so this assignment ListView actually
165:28 - will need to import the model day as
165:30 - well we'll take that ListView and we're
165:32 - going to go into the graded assignment
165:34 - URLs and currently we have the default
165:37 - routes a but we're not going to use the
165:39 - Rooter instead we'll use just our custom
165:41 - views so we'll just create a list there
165:44 - and we can get rid of that and say from
165:48 - API dot views import graded assignment
165:51 - list view and we'll say from Django dot
165:54 - URLs import path and then here we'll
165:57 - create a path which goes to just this
166:01 - empty string and then use the graded
166:03 - assignment list view dot as view and we
166:07 - can get rid of that day as well
166:09 - cool so everything seems to be working
166:11 - and we can head over to the localhost
166:15 - and if we go to graded assignments then
166:19 - we're going to be asked for
166:20 - authentication credentials so let's
166:23 - create the logic here on the profile to
166:26 - display a list of graded assignments so
166:29 - we'll come back here and go to source
166:32 - and then into containers and to the
166:35 - profile and so we need to actually make
166:38 - sure that we're being sent to the
166:40 - correct URL because it's meant to be
166:42 - profile
166:43 - / - and now we see that username there
166:45 - so let's just go to the layout and this
166:49 - is meant to go to profile that link
166:51 - there and there we go
166:53 - and so we basically just want to return
166:57 - a list of items so we'll just go here to
167:01 - list from nd and we'll take the same
167:05 - thing we used earlier so we'll copy all
167:08 - that and just come down and paste that
167:11 - beer
167:14 - and all we need is this large size there
167:17 - and we can go and delete all of that
167:20 - there and then what we'll do is inside
167:24 - the stove well then just paste all of
167:26 - that there and we'll make sure that we
167:29 - wrap that inside an h1 and actually just
167:36 - get rid of that h3 there as well and the
167:39 - data source I'll just make an empty list
167:41 - for now we can remove the header and the
167:42 - footer and we need to make sure that we
167:45 - import this list here at the top so
167:48 - we'll just paste that there and there we
167:50 - go now let's check it over here cool so
167:54 - that now we're just getting no data
167:55 - coming through and we want to use a
167:58 - component here which is basically like a
168:01 - progress component so if we just go down
168:04 - you'll see this here and a feedback and
168:07 - we get different kinds of progress
168:09 - components I'm just going to use the
168:11 - mini circular progress bar and it's very
168:15 - simple to use we'll just copy that and
168:18 - we'll just go into the components and
168:21 - return a result jeaious component here
168:24 - we'll say import react from react and
168:28 - we'll say that our constant result takes
168:30 - in props and then just returns a
168:34 - progress item so that's import that at
168:37 - the top like this and all we want is one
168:40 - progress item and we can actually just
168:43 - use parentheses like this so it's going
168:47 - to return a progress item like that and
168:50 - the percent is going to be equal to
168:53 - props grade which will pass into the
168:56 - component and the width we can keep
168:58 - there just like that and I'll just say
169:01 - export default result and then that
169:04 - result we can take into the profile here
169:06 - and say import result from
169:11 - that components result and we will
169:16 - render each item to be a result instead
169:19 - of being a list item so this will be
169:22 - result and this will just say is a
169:28 - assignment so for each assignment we'll
169:30 - return a result where the key equals to
169:32 - the assignment ID well graded assignment
169:35 - ID and the grade is equal to the
169:38 - assignment dot grade like that and now
169:42 - we just need to pass in the data source
169:43 - as the information that we get as the
169:46 - dot we get from the back end so we're
169:49 - going to go and create a new reducer to
169:51 - handle all of that so inside the store
169:53 - we've got the assignments and we'll just
169:56 - create another one here which will be
169:57 - the graded assignments j/s and it's
170:03 - going to be similar to the assignments
170:04 - that we have you already so I'm just
170:05 - going to get everything from the get
170:12 - assignment list and paste that all in
170:14 - there so we've got get assignment list
170:18 - start and we're going to need to add new
170:21 - action types in here as well and this
170:24 - could be just something like this get
170:25 - graded assignment list start fail and
170:27 - success and then we can use this here in
170:30 - our graded assignments actions so we'll
170:33 - call this one the get graded assignment
170:36 - list start and then get graded
170:39 - assignment list success and get graded
170:41 - assignment list fail and then this will
170:44 - be get graded assignments and we're
170:47 - going to need to take in the user name
170:49 - as well we could also filter the users
170:52 - by the token but we'll just pass in the
170:54 - user name to make it easier and instead
170:56 - of getting assignments this is going to
170:59 - go to graded assignments instead and we
171:04 - will do the same kind of thing here will
171:06 - dispatch the get graded assignment goes
171:11 - to start and get greater Simon to
171:13 - success and get graded assignment list
171:16 - fail and just pass in the error there
171:20 - cool so that's the methods that look to
171:23 - be taken care of
171:24 - and we just need to do the same thing in
171:27 - our reducers now so we'll create graded
171:30 - assignments jeaious and this will be the
171:35 - same sort of thing as what we have here
171:37 - in the assignments so everything from
171:41 - there I'll just paste that there and
171:44 - then we need the reducer here so we'll
171:46 - copy that paste that there we don't need
171:51 - a lot of these here so let's get rid of
171:53 - all of that there so we only have these
171:55 - three and we don't need the current
171:59 - assignment either those will be
172:01 - assignments this will be get graded
172:04 - assignment list and there and there and
172:07 - this will be get graded assignment list
172:11 - start which will dispatch this one and
172:15 - then we'll just put the rest of them in
172:16 - yeah
172:25 - and there we go that's pretty much our
172:28 - reducers taken care of there and our
172:31 - actions so we can close that one there
172:35 - and I'm just going to keep this one open
172:37 - for now so we'll head over to the
172:41 - profile and here we're going to use the
172:44 - same kind of logic as we did in the
172:46 - assignment detail we'll just copy the
172:48 - component did mount and will receive
172:50 - props and then we'll add those methods
172:53 - in there and we are giving the token
172:56 - already so if the token is undefined oh
172:58 - it's not undefined rather then we're
173:01 - going to dispatch a method and we're
173:04 - going to import that from our graded
173:06 - assignments so this comes from store
173:10 - actions graded assignments and this is
173:14 - the get graded assignments so we'll say
173:18 - this stuff props get graded assignments
173:23 - which we'll take in this dot props
173:26 - username and the token and then the same
173:33 - thing here dispatch get graded
173:34 - assignments with new props username and
173:38 - new prop star token and we've got both
173:46 - of those in the state there and then we
173:48 - just need to pass in the get graded
173:51 - assignments method here which will take
173:54 - in username and token and we will
173:57 - dispatch get graded assignments of the
174:00 - username and the token just like that
174:04 - then we pass our map dispatch to props
174:08 - inside the connected
174:11 - and let's see what this looks like so
174:13 - let's just refresh that there and cool
174:18 - so now we just need to pass the graded
174:21 - assignments into our state with state
174:25 - dot graded assignments dot assignments
174:29 - and we need to get that reducer in there
174:33 - as well so let's go to the index.js file
174:36 - and we'll just copy this one and make
174:39 - this the graded assignment reducer and
174:44 - make sure that this comes from graded
174:47 - assignments and then this will be graded
174:50 - assignments which is the grade an
174:53 - assignment reducer cool so we've got
174:56 - that set up and now we can access that
174:58 - via the state and now we just need to
175:04 - pass this as the data source and list so
175:09 - like that and this is actually min to
175:12 - either stop prop stop graded assignment
175:18 - and cool so now let's go into the admin
175:22 - and we'll create a graded assignment so
175:26 - just add one day we'll say the student
175:28 - is math assignment is the first real one
175:31 - and we'll say 50 is the grade now if we
175:34 - come back here and refresh that and we
175:37 - just needed to add the correct action
175:40 - names here or action types rather and
175:43 - now if we check if it works cool there
175:49 - we go and we can actually get rid of the
175:52 - bordered in this table
175:57 - and if we come back here there we go
176:01 - and lastly we can also add the loading
176:05 - here which will come from States dot
176:08 - graded assignments dot loading and we'll
176:12 - just come in here and say if this dot
176:14 - props dot loading then we'll return a
176:17 - skeleton so let's grab the skeleton from
176:20 - there and we'll just say turn the
176:23 - skeleton with active otherwise all this
176:30 - stuff will be rendered out and we'll
176:33 - need to get a higher-order component in
176:35 - this I'll say import the hoc which comes
176:39 - from hoc and this is just hoc like that
176:46 - and we'll just wrap it like that instead
176:49 - of the div and we'll also return it
176:54 - around this as well cool
176:58 - now we come back and there we go
177:05 - now the only issue is that instead of
177:07 - returning the graded assignments for the
177:10 - user Matt we're returning all of the
177:12 - graded assignments and that's not what
177:15 - we want to do we win what we want to do
177:17 - is actually filter this inside our view
177:21 - so let's go back to the API and then
177:25 - views and here in the graded assignment
177:28 - list view we're saying that the query
177:30 - set is equal to greater designed objects
177:32 - at all so that means that for every
177:34 - single person who uses the ListView
177:37 - they're going to get all the graded
177:38 - assignments back and that's obviously
177:39 - not what you want you want the
177:41 - assignments that you have completed so
177:43 - what you can say is define get query set
177:48 - and this just takes in self and then
177:52 - we'll start off by saying that the query
177:54 - set is equal to all the objects but then
177:58 - we will get the user name from the URL
178:01 - so basically what we'll do is we'll
178:04 - query instead of graded assignment let's
178:06 - just find this here in our actions
178:10 - instead of querying it like this we're
178:12 - going to pass in an extra parameter here
178:14 - which will be username equals two and
178:17 - then we'll just output this dynamically
178:21 - and that will be the username that's
178:24 - being entered in the function here so
178:25 - this kind of query is what we'll look
178:28 - for in our view so over here we'll say
178:31 - that the username equals to self dot
178:33 - request query parameters dot get the
178:37 - username or none and we'll say if the
178:42 - username is not none then we'll say the
178:45 - query set equals to the query said we
178:48 - currently have and then fall to that
178:50 - where the student double underscore
178:53 - username so basically the users username
178:56 - is equal to the user name and then we'll
179:00 - just say return the query set whichever
179:02 - that may be so now if we come back we're
179:06 - obviously going to get the one that we
179:08 - created but let's go back to it and
179:11 - change this to be the test user and if
179:14 - we refresh this now now we don't get
179:16 - that data coming through
179:17 - and okay we're not logged in either so
179:19 - let's login as well so let's go to
179:22 - profile and now we see hi Matt and no
179:25 - data coming through because this one is
179:27 - not for the user Matt so now we know
179:31 - that that's working and we're retrieving
179:33 - the graded assignments that are for that
179:36 - specific user so now all we need to do
179:38 - is just whenever we complete an
179:40 - assignment like this one then once we
179:43 - click that submit button here all this
179:46 - done will actually change that button
179:47 - name so we'll just go to the source
179:50 - containers and then assignment detail
179:53 - and let's just go down here and this is
179:56 - going to be inside the the questions
179:59 - so let's go to containers questions and
180:02 - then this will just be submit like that
180:05 - and if you click Next now the button
180:08 - says submit and when you click Submit it
180:09 - will process this in the backend so
180:13 - that's also instead of saying message
180:16 - success like that what we can do is just
180:19 - handle this here will say handle submit
180:24 - and what we'll do is just grab that
180:29 - there and call this dot handle submit
180:33 - and come back in here say paste that
180:38 - there and then we'll do the rest of the
180:40 - logic there and actually instead of
180:43 - handing the submit here we already have
180:47 - most of the logic on the assignment
180:50 - details so I'm going to cut that out and
180:52 - paste that there and then here when we
180:56 - click the submit button will call this
181:00 - docprops/meta.xmlpk ándale submit and we
181:12 - can actually just make sure that we call
181:15 - this function like that and we'll do the
181:19 - same thing here so when we handle submit
181:22 - we're going to say message dot success
181:24 - so that comes from Andi so we'll import
181:27 - it like this so now we have it here
181:30 - so we'll say submitting your assignment
181:36 - and so now we just need to handle the
181:38 - logic in the store where we will create
181:41 - a graded assignment so we'll just go to
181:43 - the store assignments and I'm just going
181:47 - to copy the create assignment method
181:49 - here I'm not going to handle all of the
181:52 - reducer stuff so we'll just go in to
181:55 - graded assignments like this and just
181:57 - create our function like that and this
182:00 - will be create graded assignment which
182:02 - will take in a token and assignment and
182:04 - it will post to graded assignments like
182:07 - that and we won't dispatch any method
182:10 - cyclist either so basically we're just
182:13 - posting to the server and we'll just say
182:17 - console.log success if it went through
182:22 - correctly and so our assignment needs to
182:26 - actually have a few things it needs to
182:28 - have the assignment ID that it
182:31 - corresponds to it needs to have the
182:33 - answers that the user provided so that
182:36 - we can verify that on the server and it
182:39 - needs to have the username of the person
182:41 - that created the assignment and we're
182:43 - going to bring this into the assignment
182:46 - detail so it will just import it here
182:56 - and then we'll take this graded
182:57 - assignment here and we'll say this props
183:01 - create graded assignment and come all
183:04 - the way to the bottom and add our method
183:06 - here which we'll say takes a token and
183:09 - assignment and say dispatch create
183:12 - graded assignment of the token and the
183:17 - assignment and so now when we call this
183:20 - method over here we're going to need to
183:22 - pass in this dot props token and then a
183:27 - assignment as well so the assignment we
183:30 - can just say constant assignment equals
183:33 - to an object and we'll say that the user
183:36 - name is this dot props the user name and
183:40 - then we need the assignment ID and we'll
183:45 - also need the answers so our way answers
183:50 - are the user's answers to the assignment
183:52 - and the way that we can pass in the
183:55 - assignment ID is just by accessing this
183:57 - dot props dot current assignment dot ID
184:02 - where the current assignment is here in
184:06 - the state already and then the answers
184:09 - we'll need to somehow store which we
184:12 - already are we're storing that in the
184:14 - state we have the user answers like that
184:17 - so we'll just pass that in as the user
184:19 - answers like this and then just say
184:23 - create the graded assignment with the
184:25 - token and the assignment like that and
184:28 - so let's see if we've got any errors
184:29 - you've got user answers so this is meant
184:32 - to be a clone of that so we'll just say
184:35 - constant user answers equals to this dot
184:39 - state and there we go so let's just
184:44 - select this is this cool and does this
184:46 - work true click Submit and we get method
184:50 - not allowed on graded assignments and
184:53 - that's correct because we haven't set up
184:55 - a path to handle that yet so let's bring
184:58 - this to the front there and currently we
185:01 - only have the assignment list view
185:03 - so let's import the create API view as
185:06 - well
185:07 - and then we'll say class graded
185:10 - assignment create view which inherits
185:15 - from the create API view we'll say the
185:18 - serializer class equals to the graded
185:20 - assignment serializer and we'll set to
185:23 - the query set equal to the graded
185:26 - assignment objects dot all and so we're
185:29 - going to need to override the method of
185:31 - creating the graded assignment because
185:34 - we're passing in data that it's not
185:36 - really understanding or knowing how to
185:38 - handle so if we take a look at the
185:40 - serializer then here we have the graded
185:43 - assignments serializer and we can close
185:46 - questions and graded assignments for bit
185:49 - so just like how we overrode the create
185:54 - method on the assignments you realize
185:55 - we're basically going to do the same
185:57 - thing here for the graded assignment so
185:59 - we'll just copy that there and paste
186:02 - this there and we'll go to the view here
186:06 - and we're going to override the method
186:08 - of creating on this create API view and
186:12 - the way that you do that is just by
186:13 - overriding the post method so we say
186:15 - define post which takes himself and
186:17 - basically we're doing the same thing as
186:20 - what we did here in the assignment view
186:22 - set so let's just take all of that there
186:25 - and paste that there so again we're
186:28 - taking a serializer in this case it's
186:31 - the graded assignment serializer pass in
186:34 - the request data if the serialize is
186:37 - valid then we'll say that the graded
186:40 - assignment equals to serialized dot
186:43 - create the request where we'll handle
186:45 - the create method here and if there is a
186:49 - graded assignment then return an HTTP to
186:51 - a-1 and otherwise that and now we just
186:54 - need to work on the logic here and so
186:57 - for the time being let's just go and
186:58 - print out the data so that we can see it
187:00 - come through
187:01 - so we'll say submit and if we come back
187:04 - here to the terminal then we're getting
187:09 - that method not allowed right so let's
187:12 - open up the store again just to fix that
187:15 - URL and we'll say that this goes to
187:18 - slash create
187:20 - and then you know URLs will create a
187:25 - path here which goes to slash create
187:27 - which will be the graded assignment
187:30 - create view which will handle this for
187:32 - you like that cool so we can close that
187:35 - and now if we come back here and do it
187:39 - again now it's just a bad request so if
187:43 - we check that and so let's just go back
187:45 - to the view here and we see we are using
187:49 - the graded assignments serializer we're
187:51 - passing in the request data and let's
187:56 - just create a print here to say print
188:00 - the request data like that now if we
188:04 - come back click Submit so we see
188:07 - assignment ID is 7 and then we get the
188:10 - answers as one being yes to being false
188:14 - however we're not getting the username
188:17 - which is the stock prop start username
188:20 - so if we come down here let's just add
188:22 - that one in there
188:23 - use name is state dot or dot username
188:29 - now if we come back here we'll submit it
188:34 - again and if we come back here now we've
188:37 - got the username coming through there
188:39 - and so let's try and handle this in the
188:43 - create method now so basically what we
188:46 - want to do is grab the assignment that
188:49 - has an ID of 7 so let's make sure we
188:52 - have everything imported here we do so
188:56 - we'll say that the assignment equals to
188:58 - assignment objects dot get with ID
189:03 - equals to the data of assignment ID and
189:10 - then we also want to get the student
189:12 - corresponding to the username source a
189:14 - student equals to user dot objects get
189:20 - where the username equals to data of
189:24 - username
189:26 - and now we want to create a graded
189:29 - assignment source a graded assignment
189:31 - equals to a graded assignment like that
189:34 - and we'll assign the assignment as the
189:37 - assignment we just grabbed like that and
189:40 - let's just bring us down a bit we also
189:44 - want to assign the student equal to the
189:48 - student that we grabbed here as well and
189:50 - now basically we want to compare each
189:52 - questions answers to the answer that the
189:55 - user selected and basically to store
189:57 - like a like a count of how many they've
190:00 - gotten right and then compute how many
190:02 - they got right as the percentage of how
190:04 - many questions they were and assign that
190:06 - as the grade so what I'm going to do is
190:09 - say that the questions equals to a list
190:13 - of questions for all the questions in
190:16 - the assignment so this assignment that
190:18 - we grabbed here we're going to say this
190:20 - is equal to Q for Q in assignment
190:24 - questions all so that will basically
190:29 - take all of those question objects and
190:32 - store them in this list and then the
190:36 - next thing we're going to do is grab the
190:37 - answers from the request status answers
190:42 - so if we look at this object again
190:45 - answers is an object with the keys being
190:48 - 1 & 2 & etc so one way that we could do
190:53 - this is by saying that the answers
190:55 - equals to a list of data answers of
191:01 - let's say a for a in data of answers
191:08 - basically what we're doing is were
191:10 - saying for every key inside data of
191:12 - answers get the value that's why we pass
191:16 - in a inside the list to index the key
191:19 - from data of answers remember data of
191:22 - answers is a dictionary so we get all
191:25 - the keys from the dictionary and then
191:27 - get the value of the key from inside the
191:31 - dictionary and we're basically creating
191:32 - a list of values from the dictionary and
191:35 - then what we just do now is just compare
191:38 - the answer for
191:40 - question compared to the answer inside
191:43 - the answers list so we could just say
191:45 - for I in range of length of questions so
191:49 - we'll perform the loop however many
191:52 - questions they are and say if questions
191:55 - of I to access that first element of the
191:58 - questions list dot answer that title is
192:02 - equal to answers of I so what that means
192:07 - is that if the answer of the question we
192:11 - just checked in the list is equal to the
192:13 - user's answer then we'll add one to the
192:17 - users count so we'll just say that the
192:19 - answered correct count equals zero and
192:24 - then here we'll say onto the correct
192:26 - count plus equals one and in here we'll
192:29 - just increment the counter I to loop
192:33 - through the next item in the list so
192:35 - it'll go through all the items in the
192:37 - list and then you have an on-set correct
192:39 - count which will be how many they got
192:41 - right and the length of questions is how
192:45 - many questions they are so we just say
192:47 - that the grade equals to the answered
192:49 - quick count divided by length of
192:52 - questions and then we'll just say that
192:54 - the graded assignment grade equals to
192:58 - the grade that we just calculated and
193:01 - then we'll just say graded assignment
193:04 - let's save and return that graded
193:08 - assignment and there we go that's our
193:11 - method of creating the graded assignment
193:15 - so if we check everything is still
193:20 - working
193:21 - so let's come back here and click Submit
193:24 - and we're still getting a bad request on
193:27 - this URL and that's most likely because
193:31 - we don't have a student that corresponds
193:34 - to the user that just submitted this so
193:37 - let's go back to home and we actually
193:41 - haven't registered that model in the
193:43 - database so let's go to users and then
193:47 - admin
193:48 - and we'll import the student and then at
193:51 - the bottom here we'll just copy this one
193:55 - here and say this is the student and
194:00 - come back here and refresh this now
194:04 - you've got the students there and of
194:06 - course we don't have the student format
194:08 - so let's just create a student day and
194:11 - save this as Matt and now if we submit
194:15 - it we're getting another one here so
194:18 - let's go back to the assignment and see
194:21 - why this is and so what I'm going to do
194:24 - is actually just get rid of the if
194:25 - statement here because most likely the
194:28 - serializer is not valid so we only just
194:31 - need to call that so let's just do it
194:33 - like that and if we come back in here
194:38 - and submit this now we get success so if
194:42 - we take a look in the admin and go to
194:45 - graded assignments now we can see to
194:48 - come through there and this first one is
194:50 - worth 50% and let's just see why that is
194:55 - if we go back here we said isn't is this
194:58 - cool yes does this work false let's say
195:01 - this is true and submit it now and if we
195:04 - go back here and check the latest one
195:06 - now we get one and what we can actually
195:09 - do here in the serializer is if we come
195:12 - down we can say that the grade equals to
195:16 - this times 100 so that now if we submit
195:20 - that come back to graded assignments now
195:25 - it's 100 and we can go to our profile
195:28 - and yeah so that's why we were getting
195:31 - 0.5 percent 0.5 and 1 percent whereas it
195:34 - should be a hundred percent cool so now
195:37 - those methods are finally working and
195:40 - we've basically completed everything
195:42 - that we set up from the moment we demoed
195:46 - the application which was the ability to
195:48 - create custom users to actually get that
195:51 - data in the front end store everything
195:53 - with authentication to create
195:55 - assignments and I know we're not adding
195:58 - too many validation checks to see if the
196:00 - user actually is
196:01 - each or not but those are small things
196:03 - that you can add in to complete
196:05 - everything and then lastly we added the
196:07 - functionality to create a graded
196:09 - assignment which is very cool so all you
196:11 - do is just fill in the answers to the
196:13 - assignment and there you go it creates
196:15 - the graded assignment for you yes you
196:17 - can fill in that form as many times as
196:19 - you want it's not actually checking
196:20 - whether you've done it before so again
196:22 - there aren't many validation checks in
196:24 - place but that's besides the point it's
196:27 - more to show you how you can create the
196:28 - different users and get that data across
196:31 - into the front-end because that's really
196:32 - the biggest effort is it's in learning
196:35 - how to customize those serializers
196:37 - learning the methods that you can
196:39 - override and it gets really tricky when
196:41 - you have nested relationships and
196:43 - foreign keys so learning about
196:46 - serializers can actually be quite
196:48 - beneficial as we've seen so that ends
196:51 - off this tutorial series for the time
196:53 - being if you enjoyed this video make
196:54 - sure to leave a comment down below and
196:56 - let us know what you thought about the
196:57 - series and if there are any other things
196:59 - that you think we should be adding into
197:01 - it or concerns that you have and other
197:03 - than that thanks for watching don't
197:05 - forget to subscribe and we'll see you in
197:07 - the next one

Cleaned transcript:

welcome to the start of a new tutorial series and this is called teach me Jenga which is a project built with Jenga and react showing you how you can work with multiple users in a kind of mock online system where you can create assignments fold them in and see the results of those assignments on your profile and so this is the finished product of that project and what I'm going to do is just walk you through what it looks like so you get an idea of what we're actually working towards in this tutorial series so I'm gonna go ahead and login and I really have a user created for this and we don't have any assignments just yet so we'll go ahead and create one so we'll give it a title as this is the first assignment we'll set the question to be is this cool also the answer is yes and then we'll add a choice where the first one can be yes and the second one can be no and then we can add a question and I'll say this one is Django is awesome we'll say the answer is true then the choices are true and false and then we can submit this and now we have our assignments an assignment that is loaded here and we can click on it and we see we get the questions yeah and we've only got two questions so we've got is this cool we'll say yes go to the next one we'll see Django is awesome and let's say I want to go back and I'm actually going to change my line so we'll say no this isn't cool go forward Django is awesome we'll say true and we can click Submit and if we head over to our profile you can see we got 50% for that assignment and that's because we said that Django is not cool whereas the answer was yes it actually is cool and so before judging how complete this project is in terms of validation and seeing detail views and thinking there's a lot more stuff to be displayed and that this is really just too basic you'll be surprised as to how much actually goes on in the backend to get this to work and so we're going to be jumping into a whole lot of customization of serializers and and a lot of react as well so this is what we're going to be building in this project where the two different kinds of users were looking at our students and teachers only teachers can actually create these assignments and only students in theory should be allowed to answer these assignments and so we're going to walk you through the process of creating this multiple user system and let's get started with it now so to get started you're going to want to open up vs code I've got absolutely nothing here an empty directory which we'll use to store all the project content and to get started we're actually going to clone something from our github page and this is a boilerplate project that we created for getting started with Django and react and that is here the Django react boilerplate and this is just to help getting started with adding projects that are built with Django and react because it seems we're going to be doing this for quite a while so I'm just going to grab this URL here and we're going to clone into this repository so we'll just say git clone and that will bring this repository into this folder and so there we have it we've got the vs code project settings we've got a home directory which is basically our Django project and we are currently using three different settings files depending on whether you're in production or development and then we have a source folder which has a basic react project setup as well now I'll link a video showing you everything that's contained inside this project which we covered in one of our videos showing you how to set up authentication between Django and react so everything in that video we basically took and just compiled it into a boilerplate repository so that we could just pull that easily so we don't have to keep on repeating ourselves that way we already have a nice setup to get started with and we can get working from here so what I'm going to do is just bring all of the folder contents inside this directory that I'm working with and there we go now I'll just clear out the terminal and we can take a look at what we've got we've got the EVs code settings which basically is just setting pilant and the Python path virtual environment path and some files to exclude in RVs code editor we've got the home directory which has a base settings for all the installed apps middleware templates and some other things that we'll need for both development and production and then in development you've got the allowed hosts being our local host debug being true the wsgi application for development and ADB sqlite3 database setup with the local host of 3000 being in our course origin whitelist and then in production we've got our domain which we would need to add the different wsgi application for production a database setup for Postgres which we don't actually have those credentials set up just yet but we've got the configuration there we've got both password validators and the static files storage for when we use white noise and this is all with the intention to eventually post this on Heroku that's why we have a proc file here but we'll get into that towards the end so we also have the source folder which currently has our App J's which is auto trying to sign up we're using react redux hence these maps data props and map dispatch methods that we're connecting to our app we've got a higherorder component which basically returns the children of the props that are passed in and we've just got a layout a login and the signup container which again also comes from that video tutorial on authentication with Django and react and so what we want to achieve in this video is basically to set up the Django rest framework rest auth which is what we're going to use to authenticate users on the backend but we're going to need to customize that if we want to actually have our own custom user so we're going to create our user we're going to create the serializers for that user and show you how you can customize the rest off to allow for those users so we'll get started by opening up the terminal and just creating ourselves a virtual environment which we'll just name virtually envy and there it is we can then activate that and we'll say pip install our requirements txt and we'll open up another terminal here to install our node dependencies so just run NPM I and we can get started with creating ourselves a user's app and this is where we're going to create our custom user so I'll say Python managed up I start app and we'll say the name is users and we can go into our home directory to settings base top high and inside the installed apps we can scroll down and add our users and with that we can close base top pie and we'll go into our users app here and we'll go into the models and what we're going to do is import the abstract user which comes from Django's contrib earth models so we'll say from Django but contrib all top models import the abstract user now see you get two types of users that are prompted one is the base use and ones the abstract user now the abstract base user will require a lot more configuration I've also covered this in another video where we actually use the abstract base user to create our own custom user and show you how you can link that up to be the default user of your site whereas if you use the abstract user it's actually a lot simpler so we're going to go ahead and use that we'll add class here and call this the user which inherits from the abstract user and basically what this means is that it has all those attributes like user name password email all of that configuration is done for you except now you can add the fields that you particularly want to actually add that will make your users that much more unique now in our case we're going to store two kinds of users we're going to have a student and a teacher you could be both at the same time but we're not too worried about that and so the way that we're going to handle that is by adding two fields on the user and these are going to be boolean fields so we're going to have the is student which will be models boolean field so either true or false and then we'll have the is teacher which is also a models boolean field so that means is that when we create the user we're going to need to pass in whether this user is a student so either true or false and we need to pass in if it's a teacher and then we'll just say define the string method which takes himself and we'll say return self dot username because remember this does inherit from the abstract user that is our base user and that is what we'll be using when we create our users now what I'm also going to do is define another class here which is the student and this will just be a model stub model and all we're doing is basically assigning a onetoone field with the user so that instead of working with the base user that we created here will work with the student model when we need to refer to an actual student and we're not going to add too much configuration to this model but it's just a little bit more convenient because here on the student you could then pass in a lot more other fields like what classrooms they belong to what grade they're in etc you could do a whole bunch of things like that we as the user you just want to define whether that user is a student or a teacher that's the whole purpose of this model here we'll just say that the user equals to a onetoone field with the user that we just created here and we'll say on the needs equals two models cascade so that if the user is deleted then their student is deleted as well and then we'll just say define string which takes in self and say return self dot user dot email for example or user name we could do as well and so with that we then need to go and tell Django that our default user is actually inside out users app so we're going to go into the home directory to settings based our pie and we go all the way to the bottom here and we'll just say that the auth user model equals to users dot user so basically what it's saying is look inside users dub models and find the user model that is our default orth user model to use when authenticating users and I'm also going to add one more setting here which is for unique emails so we'll say that the account unique email equals to true basically this will ensure that we don't get any duplicate emails of our users and like that we can now try and make migrations so we'll just bring it up to terminal will say manager PI make migrations and we see we get create model user and create model student and then we'll say manage the PI migrate to actually migrate those and we also get the base migrations for the entire project and now if we were to try and create a super user then you'll see that you'll actually run into an error because it's going to use our custom user which has two extra fields on it so it's going to tell you that is student cannot be null and his teacher cannot be null in that user so to create an admin user we're going to need to create it through the Python shell so we'll say Python manager pie shell and here we'll say from users table models import user will say that a equals to a user will say that a dot user name equals to admin a dot password equals to let's say dude one two three we'll say a dot is staff equals to true so that it's a staff member and a dot is a super user equals true as well and then just say dot save and you see that it gives us the users user that your student cannot be null so we say a dot is student let's set it equal to false and we'll say a dot is teacher equals to true and now we can say a dot save and now it's correctly saving and if we were to say user objects dot all then you can yet a query said responds with the user of admin so we'll exit out of that now and let's call Python manage the pi run server so we can actually run the server and view it in the browser this is what we have by default because we already have a build directory appear in our project we have the build directory which is what's being referenced inside our based settings to use as static files so we could actually come here to the login and let's try and login with our user will say admin and pass in dude one two three and it seems that that didn't work let's check the console and we get a server responded with the status of 400 a bad request and if we take a look at the server here it's not giving us any information it's just saying that the post to this URL wasn't successful it was a bad request and the reason for this is purely because we haven't set up rest auth to understand our new custom user because the custom user is trying to see the default Django user that it's used to but we're not using the default user we're using our own custom user so we need to go into our base type I I mean we need to configure the rest or serializers and the rest or three just of serializers and you can check this in their documentation if you just search for custom Django rest or then here the first link is a configuration for Django rest or zero point nine point three so if we check that out in here you can see it says you can define your custom serializers for each end point without overwriting urls and views by adding rest or serializers dictionary in your Django settings possible key values are the login serializer that token serializer the user details serializer and all these so for example it says the rest auth serializers is a dictionary where the login serializer is a path to a custom login serializer and the same thing for the token serializer and it also says you you can define your custom serializers for registration however note the custom register serializer must define a define save method that returns a user model instance and that's extremely important if we want to get this right so first let's copy this default configuration there come back into base add it there and we don't need the token sterilizer we just need the user details serializer that's basically to tell rest off that this is the user model that we're using and that is the specific serializer for that model so we'll copy that user details serializer let's copy that paste that there and obviously the path will sort out in a second and we can also specify the rest or register serializers which is also important because we're going to need to handle the kind of registration for our custom user meaning when the user signs up they need to say whether they're a student or a teacher which means that our registration process is going to be different as well so we'll open up a dictionary here and in here we need to specify the register serializer so we'll add it there and we'll just leave this blank for now and what we need to do is go back to our users app and actually add a serializer inside it so we'll just say new file which will be serializers dot pi how I got this to work is purely just by googling what is required and and so this is primarily focusing on showing you how it comes to work but the model of the story is that when you don't understand something and you're trying to figure out what to do google it and keep looking for examples of where other people have done it and try to apply that to what you're doing now the first serializer that we're going to create is the user serializer and this is the one that we've defined here for the user details serializer so we're going to specify the path here to be users dot serializers dot user serializer and we'll take that name come back into our serializers and we'll just say class user serializer that inherits from the serializers and we need to import that so say from rest framework import serializers and we're going to inherit the model serializer and if we need to use that we're going to need our model so we'll say from dot models import user and here we'll specify the class Mehta and say the model is a user and then we'll need to specify the fields and the fields is just a list of fields on our model that we want to include in the serializer now normally you would have things like the email you would have the username and in our case we're going to also need to pass in the extra fields that we created so we'll add in password as well and we're going to add in our is student and our is teacher and that's it that's our custom user serializer that rest auth now we'll use when serializing our user and now we need to handle the register serializer so we'll do the same kind of concept we'll say class custom register serializer just so that we don't have a really long name and this is going to inherit from the register serializer and we can see here in the register serialize of class it's from rest or third registration dot views register view and then rest all the registration serializers dot register serializer now you can either create your own custom serializer and handle it as well or you can inherit from this rest register serializer and do it that way so that's how I decided to do it so we're going to need to import that so we'll just come back in here and we'll go to the top and say from rest auth and we can actually remove that so we're saying from rest or registration serializers import the register serializer and we'll install these of course now that we have those installed we've got our register serializer and we're going to inherit that in our custom register serializer and this is very similar to a model serializer we can all specify a class meta and the fields so I'm going to do that as well or copy all of that right there however I'm going to add two fields here as well so the first one will be the is student and the second one will be the is teacher and this will just inherit from the serializers boolean field and that'll also be for the each student and now let's actually jump into the front end a little bit to handle that form so I'm actually going to close the models and we'll go into the source to our containers and let's go to the signup so here we have signup jeaious and we've got our registration form and basically what we want to do is just come all the way down here to the end of the form where we have the submit button and we want to add another form item inside here which is basically going to be a select field with two options the first option will be student and the second one will be teacher so we'll add a form item and I'm actually just going to copy the get field decorator and just paste it in there and inside here we'll want to add our select so we'll just say select like that and we need to go to the top and import this from and D and we'll specify the get field decorator to be user type so that's how we're going to access it from the forms values and we'll say please select a user and we'll get rid of the validator here as well and inside the select we need to add an option and inside there will be student and the second one will be teacher we'll set the value of the first one to be student and the value of the second one to be teacher and then we can say that the placeholder of the select is select a user type now we need to import option as well so input option there and now we just need to make sure that we handle receiving the value of the option that's currently selected in the form so we'll go up to the top here and we'll say let is student equal to false initially and then we'll just grab the user type from the values because that's how we're doing it currently we have values of username and email etc so we'll say if values dot user type equals to student then we'll say is student equals to true and then here in the on earth where we basically register the user will add another field here which will be is student and this will get passed into the on auth dispatch method so if we go to the bottom here we have on earth and we just need to make sure we pass that in as a fifth argument so this will be is student and that gets passed into the earth sign up which is inside our actions and we'll add it as another argument there as well just like that and now we just need to make sure that we handle that in the store so if you go to store actions auth then here if we scroll down to the auth sign up we need to make sure that we grab that argument coming in which is the is student so like that and what I'm actually going to do is create a constant user and this user is going to have the username the email the password one password two and it's going to have is student which is coming through as an argument day and I'm also going to set the is teacher to be the opposite of his student so that means the student is true then teacher is false then here when we post to the registration URL we can instead of passing this user that only has an email password one and pass or two we're going to pass the entire object that we just created up here which is the user object so we can delete all of that and just pass in user as the object and what we're going to do is actually change the local store handling so that instead of setting the item of a token and an expiration date we're rather just going to set an entire user which will hold the token username and all the details about that user so that way we can store whether they're a student or a teacher as well so what I'm going to do is actually get rid of these local storage commands here but before we do that we'll create another constant here which will be our user and this is going to be the user object that we store in the local storage so it's going to have the token which will be the response data key and just need to reference it with a colon we're then also going to pass in the user name which will be basically the user name that we passed in to the dispatch method so we don't need to pass a code on there we'll then also going to pass in is student and we'll pass in is teacher as well and then we'll set the expiration date here to be a new date just like how we created it over here and just use a colon as well and there we have our user so we can get rid of these commands here and then we'll say set the item of user to be JSON dot stringify the user and we can get rid of the expiration date call there and instead of calling all successive a token we'll pass in a user instead and handle that in a second but basically now we're storing this entire user in the local storage which will come in handy later on as well and so let's go to the auth success method here which is all the way up top here and we'll change it to receive a user instead of a token and then that user will pass in as the argument here and we can remove that there and then we just need to handle that in the reducer so we'll open up the reducers auth we'll go to the auth success and we will actually need to add some new status so for example the user name will now be null as well we'll have is student which will be null and we'll have is teacher which will be null as well and then we can come down here to the old success and and instead of this coming from action token this will be action dot user token we'll take the user name which will be action dot user username will have is student which will be action dot user dot is student and the same kind of concept for is teacher and we just need to make sure that in the action when calling all success we make sure that for example here in the old Czech State method that when we call all the success we pass in a user and not a token so instead up top here we'll say constant user equals to get item user and we're going to need to pass that source adjacent pass the local storage user and that's because this is an object so we need to pass that into an object and then we'll say if the user is undefined all the user is null then dispatch logout otherwise we'll create an expiration date where instead of grabbing this from the local storage this will now come from user dot expiration date where users what we just grabbed over here and we're saying if the expression that is less than new date then logout otherwise we will dispatch all success which will take in the user and we'll just save that and if we go to the logout method as well then instead of removing the expiration and token we can just say remove user we can also open up the terminal to run the front end so let's just clear some of these terminals out here and we've got the package is installed so say npm start so we'll take a look here and it says in actions all we have is teachers undefined and that we just need to set to the opposite of is student and it says that the sign of jeaious doesn't contain an export named options so let's go to sign up and this is because our option inherits from the select so we just need to say constant option equals to select dot option now if we check it out now we can login let's click login and click on sign up and we have a user name email password password and if we click select the user type and when we click the drop down here we see student and teacher as the options for the user type and let's inspect this here and let's see what happens if we try sign up so we'll pass in a username pass in an email and a password and we'll pass in a select use the type of let's say student and if I click sign up we see that gave us a error connection refused and let's take a look as to why that is and it says in serializers get the register serializer yet got not enough values to unpack expected to but got one now this is because of a very silly error which is that we didn't actually add a comma here at the end all and even pass in our path to the register serializer so let's add this Parthia in our serializers and this is users serializers dot custom register serializer just like that now let's come back and try login or signup brother again and if i click student and click sign up now we get a 500 internal server error so let's go back and see and it says your integrity error not null constraint failed users dot user dot is student so basically what this is telling us is that when the user's being created it's not being passed in the is student and the is teacher as well now the reason for that is because the default save method to actually save a user does not involve using the is student or there is teacher fields so what we need to do is override the save method so what I'm going to do is just define the save method here and we're going to say itself and request and all I'm going to do here is just say print the request so we actually see it come through and so with that let's open up the terminal again and we'll go to the signup page but let's actually get rid of the rerouting yes so if we go to the handle submit will not push ourselves to this URL so that way we can continuously test this and from this point here overriding the save method involves using an adapter which comes from Django's all off so if we search for adapter Django all off and we can just click on this first one here then here talks about the advanced usage of creating custom user models and basically creating and populating user instances and here it says all off account adapter default account adapter that is what's used to create an instance of a user and we can actually navigate to Django's rest or and if we go to the introduction let's go to edit on github and we'll just go to Django restore and if we click on rest auth and then we can click on registration and then serializers dot pi and here you can see it has an import from all off that account that adapter import the get adapter and if you scroll down you'll see the different types of serializers so they've got the social account the social login and if we keep going we see we eventually come across the register serializer and you can see all of the fields on it you can see the user name the email password one and two and then these validation methods the get clean data and the save method and here you can see it's saying adapter equals to get adapter and then it uses that adapter from Django Olaf to create a new user using the request then uses the adapter to save the user by passing in the request and the user and then it just add some extra custom stuff here for the custom signup and setting up the user email so what I'm going to do is copy all of that the save method plus the define get clean data and we'll come back in here override the save method and we're going to need to import the adapter so let's go all the way the top year of the file and we'll say from all of that account that adapter import the get adapter and we're basically going to use their logic we're going to get the adapter we're then going to use that to create a new user with the request we'll assign the the cleaned data to self by calling the get cleaned data and what that does is called the method on this class which grabs the validated data and grabs the user name and all these fields from that then using the clean data it saves the user by passing in that new user and we can then get rid of the custom signup and the set up user email and essentially what we want to do is not only grab a username password one and email well actually want to copy password 1 so we have password to that we can see as well and we actually also want to get to other fields which are the is student and the is teacher so now when we call get clean data we're going to get everything that we need to create our own custom user within assigning it to self doc clean data and before we go ahead and save the user we then need to just assign the is student field and the is teacher field to our user so we'll say user dot is student equals to self dot clean data is student and do the same thing for is teacher and then at the end of that we can call user dot save and this is very important this command yeah user dot save so now we then use the adapter to save the user and return that user at the end that's also very important whenever you override the save method you need to return an instance of whatever you're saving so we return the user and now let's actually see how this works out we'll open up the terminal and we see we get one area here which is just the commas so let's add some commas there and now everything's working so if we come back to the boilerplate and this is actually on the localhost let's go to port 3000 and click sign up and look at that it was a successful post request and we got a status of 201 which means that our user was created and if you come back here you can see that it's now saying logout which means that our users actually logged in and that means we can actually go and login to our admin so if we go to admin we're not going to be able to actually log in with our super user that we created earlier and so let's rather just go ahead and use the user that we just created now and create them as a super user so we'll go back in here and actually add a new terminal and we'll say Python managed our pie shell will say from users table models import user will say Matt equals to users that objects get username equal to Matt and let's just change that that's meant to be a user and if we check what Matt looks like there it is and if I say Matt dot is super user equals true and Matt dot is staff equal true and then save we can then exit and if we come back let's refresh this and we can sign in with Matt and there we go we're now logged in and we can actually add our custom user into the admin so let's do that so we'll just go here to admin and we'll say from dot models import user and then say admin dot site dot register user and we'll also want to unregister this groups here so we'll say from janga dot Concha both the models import the group and then we'll say admin dot site dot unregister group now let's come back and refresh this and then we have our users at the bottom and if we click on it we have Matt and if we go all the way down you can see that we have our is student and is teacher fields where is T student is set to true and so let's actually create one more user here will log out and just refresh this and say username equals to test test app Gmail and we'll set the user type to be a teacher and if we click sign up we're now logged in let's go here go back to users we have tests scroll all the way down and teacher is set to true and that basically confirms that our signup is correctly working we've got a custom user that is able to be successfully created on our front end and in the backend and so now what we want to do is actually confirm that logging in works so let's log out here and we're here on the login page and let's try and login with let's say Matt for example and if I click login then we get success as well so in the last one we finished working on logging in and creating our own custom user in the frontend and customizing our serializer with Django's rest auth package to handle that in the backend and in this one we're just going to finish off the user by adding in a view set to allow us to actually view all our users and also to view each user's profile and while we're at it we'll work on creating the assignment serializer as well which will allow us to create assignments so if you'd like to follow along with this tutorial you can just go to github and navigate to our teach me django repository so here it is teach me django and then you can just follow to these commits here to see which commits you'd like to continue from we'll also add a description of these commits inside the project readme file to help point out which commits where the starting code for each tutorial and so once you've got all the code set up and you're ready to go then let's get started so let's head into the users app and we're going to go to the admin now while I want to work in the admin is because we're going to customize the way that the admin works in terms of these users and how they display everything on this form now we can actually override this entire form we can change it to be our own custom form and that's what we're going to do so what we need to do is first import the user admin which comes from the admin module so we'll say from Django doc contrib dot admin import the user admin and going to say as the base user admin so that we can inherit from this and here we'll say class user admin inherits from the base user admin and then we'll register that with our custom user and recently we posted a video on how to actually customize and improve your Django admin so I advise watching that video before actually continuing with this because in that video we explain everything that we're about to do right now so instead I'm actually just going to go through this rather quickly so we'll add the add field sets and this is basically just a tuple and the first one I'm going to say the name is none and then we'll set up the fields to be email username we'll add is student is teacher and we'll add the password one and we'll add password to and this is basically the fields that are going to display on the add user form well then add the second one here which will be the permissions so that's the name of what we're adding and then the fields are going to be is super user is staff and then we'll add the field sets and this is also going to be a list of tuples I'm gonna copy this first one here however instead of it being password one and two in this case it's just password because now this is the display of the user once it's actually created and then we'll also add the permissions here and I'm also going to add some other options such as the list display and the the list display is going to take in the email it's going to take in the user name it's going to take in is a student and is teacher and then I'm also going to add the search field and this is a list of fields that we can search by so I'll just add email and username and then we'll just say ordering equals to email and if we check the server then we see we're getting this import error and that's because this comes from auth admin so now that's working and if we come back in here and we refresh this page now you can see it looks a little bit different because we're only showing the fields that we want to show and of course you could leave it as the default view but I think this looks a little bit cleaner and you could also go back to users here and you can see the list display is a lot nicer we've got his student and his teacher showing you've got a filter here you've got a search bar and let's add our admins email here we'll just say for example admin at gmail.com and if we click to add a user then you can see all the fields that are required for adding a user which is very convenient as well and so now let's just go ahead and create an API for our user model so that we can fetch users and that'll be useful so that we can come in here and add a profile link and then that would take you to for example slash profile slash one to actually see the profile of that user and we're going to show in that profile are the graded assignments so let's go here to the views and we'll first import our user so you have to say from dart models import user and then we're also going to need our serializers so we'll just say from dot serializers import the user serializer and we'll make this a view set so that it's not a lot of code so I'll say from rest framework import view sets and then we'll just create a class a user view set that will inherit from the view sets model view set and all we need to do there is specify the serializer class which is our user serializer and specify the query set which will just be user objects all and then we can take the user view set and use that inside our own urls da so we'll create one inside the user's model so we'll create one inside the users app and so here we'll just say from rest framework Reuters import the default Rueter and then we'll say from that views import our view set and we'll say our ruta equals to the default Reuter and then we'll say rooted register the regular expression with an empty string like this and we'll say this is the user view set and I'll say the base name equals to users and then set our URL patterns which is what Django looks for equal to the root or URLs then we can just go into our home directory into the URLs our pie and then in here we'll just add a path to the users path so we'll say path users and say include users dot URLs and now if we also just make sure we add a comma there now we can see we're not getting any errors and we should be able to also check this out in our localhost so if we go to slash users then we can see we get the Bolton Django rest framework displaying the user list and if we went to for example users one and put a slash on the end of as well then we get the instance of this user so now what we want to do is translate that into the equivalent display of a user's profile here in the front end and so let's go and close all of this out here and basically where we want to work is inside the source and we'll get started by adding a new root here and this root is going to go to slash profile and then have an ID at the end of that and we're going to create a component to called profile to handle that and we'll just say import profile from containers slash profile and then that means the inside containers we need to create the profile dot J's and we'll get started by creating a class called profile which extends from react and this time we'll use a pure component and we'll say render and then return some JSX and we'll need to import react for this so say import react from react and at the end of this year we'll then create our map dispatch to props and map state to props which will connect to the component so we'll say import from react redux and this is connect and he will say constant map state two props which takes in the state and returns an object and will first grab this token which comes from state author token will grab the user name which comes from state auth dot user name and then will start the map dispatch to prop so it will say map dispatch to props which takes an eight dispatch and returns an object and here we basically want to list out the dispatch methods to actually receive the user's graded assignments however we don't have that functionality yet so we'll just add a comment there and only work with us once we actually have it and then we'll just say export default connect and we'll pass in the map state to props and pass in the profile and if we take a look at this we basically just need to fill in some content here in the return statement so we'll just add a div and say hi and then just say this dot props username and if we take a look at this let's first log in and let's go to slash profile slash one and if we try / and we don't get the username showing now the reason why we're not actually getting the username showing is because our login method did not save the user into the local storage we still need to configure that so let's head back here and what we want to do is go to the store and to our actions of Earth and here with the auth login method we basically just want to kind of do the same thing as what we did here where we created a user and then store that user in the local storage so we'll just copy that and we'll do that right after we get a response where the token is the response data ducky the username is the username the is student is going to come from the dart as well so i say response table data dot user type dot is student and then will pass the same thing for is teacher and the expiration date is the same as well and then we just want to get rid of these constants here and set the user to a json stringify of the user object and then say or success of that user and so now if we go and try that again and we get a bad request here on the server so let's see why that's happening if we go here to the python 3.6 it just gives us a bad request it doesn't actually tell us anything about it and so basically what we want to do is go back to our serializers and actually configure how we receive a token from the server so let's head back to the users app and if we go to serializers now the reason for this custom serializers so that when we login we receive not only the key from django resteth meaning the token but we also want to actually get the user type and that being either a student or a teacher and we also want to get the user ID and the reason for that is so that we can store that idea now user object and only navigate to our profile and so basically what this means is that we're going to override the token serializer that Django rest all the users so we can just say class token serializer and again you can find this in their documentation as we showed last time and this is going to just be a normal model serializer and I'm going to set the user type to be a serializer method field so serializer method field now a serializer method field allows you to specify a method on the serializer that will return the data that you're looking for so in our case all we need to do is say define get and then underscore the name of the field you created so in our case get user type and it's going to take himself and an object and I'll say that the serialized data equals two now in this case this is going to be the user serializer because we want to get information regarding the user and then return that information and that being the user type so what we pass into it we pass in the object ID user so this is the instance that we pass into the serializer and then we just say dot data so basically we're getting the equivalent JSON object of that data and then we can just say is student equals to the serializer data that get is student and the same thing for is teacher and then we just have to return a dictionary with the keys and values corresponding to what we want so in our case we want the is student to be a student and we want is teacher to be is teacher so this get user type is going to return this dictionary on our serializer and now all we need to do is just specify the fields of our token serializer so we'll say class meta and we'll set the model equals to a token which will import in a second and then we'll say that the fields are the key the user and then our user type that we specified right there and so now we just need to go and import this token which comes from Django's rest framework so we'll say from rest framework dot auth token dot models import token and we can check the server and it's still running and now let's actually bring this to the left here and inside our birthday s we'll just come here and say console dot log the response data and we'll come back here and we'll login and say login with let's say Matt for example and you can see that currently we are only getting the key but now we want to get all those extra fields so we just need to bring our token serializer and take this into our home settings base type I and then here in our wrist or serializers we're just going to add the token serializer and this is going to come from users dot serializers dot token serializer and now let's try it again we'll go login and you can see that currently the error was cannot read property is student of undefined and that's because here in our earth we're reading it from user type which is something that's going to come back here as the user type field on the token serializer so now let's go and login with Matt and now you can see that we get the key we get the user which is the user ID and we get the user type which is specifying is student to be true and is teacher to be false and now you can see that we logged in as well and if i refresh the page we're still logged in which means that we are storing our object correctly in the local storage and now that's just going to add a link here which will take us to our profile so we'll just come back here and we can close our serializer and base up pi and we want to go into the layout so we'll go to containers layout and we already have connected imported which will allow us to access these map dispatch and map state to props from react redux and basically what we want to do is just add another breadcrumb item so we can actually remove the list item here and we'll just make this profile and this is just going to take us to profiles and then an ID so we'll make this output dynamically and use string substitution and this will be this stop props dot user ID then the user ID we can just define in a constant of map state two props which takes in the state and then just returns an object we will say the user ID equals two states auth dot user ID and then that means that we need to store that inside our earth j/s Redux reducer so one we need to make sure that we get it on the login method and the sign up method so we'll come here and say that the user ID equals to the response tab data user remember when we saw that when we logged out the user response in the console and we'll just copy that and go down into the old sign up and also pass it here in this object user so that in both instances we will grab the user ID and that means that inside our reducer we'll need to pass in user ID as the action dot user dot user ID and install this in the state as well and we'll initialize it as null and now that means that we just need to log out and just to refresh this and if we login with let's say mat and if we click on profile currently it takes us to profiles and slash undefined and so if we see why that is we can close this reducer and that's because we didn't put map state two props in our connect method like that so let's come back here and we'll just go back to home and if we click profile now it takes us to slash profiles / 2 and so that ends this tutorial basically just confirming that our users are able to actually log in and we're able to store the user ID and the type of user that they are inside our local storage which will allow us to actually do some interesting things in terms of displaying certain links for example if they are a teacher then you could add a create link here to display which will allow them to create assignments and so we'll get started with that in the next one so we're going to do in this one is we're going to start with the assignments and so this is basically going to be like our API where users will be able to create assignments and those users will have to be teachers they'll create the assignments and then we can see them here in the home view which will list all those assignments out so if you'd like to follow along with this tutorial you can just go to github and navigate to our teach me django repository so here it is teach me django and then you can just follow to these commits here to see which commit you'd like to continue from we'll also add a description of these commits inside the project readme file to help point out which commits where the starting code for each tutorial and so once you've got all the code set up and you're ready to go then let's get started so let's head over here and I'm going to stop the server and just call Python managers up I start SAP and we'll call it API and inside API we can go to the models to get started with this and so we're going to create three models we're going to create an assignment and so now let's think about the kinds of models that we're going to create we've already mentioned that we're going to create an assignment so let's just add assignment here and if we think about the fields on an assignment we could give it a title and this would just be like the title of the assignment so like midterm exam or something like that and then there would have to be a teacher that's assigned to that title because that's the person that actually created the assignment and we would also have to reference the questions on each assignment I'm not going to do it as a manytomany field of questions on the assignment instead what I'm going to do is create a question model and each question is going to have its question which will be kind of like the title of the question there will then be choices so these will be the actual answer choices to the question and then we'll also have to assign which of those is the actual answer and we could do this in quite a number of ways we could just make it a character field or we could make it a select field where the choices are equal to the choices of the question but I think the character field is just the simplest way to do it and then we also have the assignment and this is the assignment object that we created here so this will be a foreign key and this will allow us to then assign the question to each assignment we'll then also give each question and order and this is so that we can actually order them on the assignment and the reason why we're creating that instead of using the ID is because if you use the question ID we could have for example question 12 and 13 on assignment 2 and we want to reference those questions in terms of their ID relevant to the assignment so meaning question 12 would actually be question 1 on on assignment 2 or whichever assignment it is so that way by creating an order which would just be an integer field we can assign the order of each question on the assignment and then lastly we have these choices here and what I'm going to do is actually make this a manytomany filled with a choice object and this will actually also be the answer field as well where this will be a foreign key and in the choice model with simply just going to have the title so basically this just means that will create a choice and then assign those choices to each question and so those are the basic models and what we're also going to create is a graded assignment now the graded assignment is kind of like an inbetween model between the assignment and the student and the reason for this is we could just add a field here which would be like graded and this could be like a boolean field so basically meaning that we set it to false when it's initially created and then we set it to true when it's been graded but I think a better approach to this would be creating a graded assignment model so we say graded assignment and these fields are simply just going to be the student who actually completed the assignment we're then going to have the assignment that was completed so a foreign key on that assignment and then we'll have the grade and so that way when a user actually completes the assignment it will create a completely new instance that relates entirely just to the fact that it was graded and I think that's a much better way of managing it let's create these models we'll get started with the assignment so we'll say a class assignment and it comes from models dub model will say that the title is a character field and we'll just set the max length to be 50 and we'll say that the teacher is a foreign key on the user model and that means we need to import the user so we'll say from the users our models import user and then we just need to specify the on delete which will be models cascade and then we'll just define the string method here and say this is self and then just say returns self that title and we can delete those notes there then we have the graded assignment so we'll say class graded assignment which comes from model stop model we'll say that the student is a foreign key on the user as well and we'll also say on delete equals two models cascade will say that the assignment equals to a foreign key with the assignment and will say undelete equals two models dot set null and we'll say that blank and null are true and the reason for that is just because if the assignment was deleted maybe you actually do want to keep record of previous assignments that were completed so that way you can just say set null and basically the assignment will just be null and of course you could just make this models cascade if you want to be simple and then we'll have grade equals two models float filled so that we can handle decimals and then we'll just say define string which takes itself and we'll just say return the self dot student died username so that's the graded assignment we then have the question and the choice and I'm actually gonna bring the choice above here so that we can reference it in side the question model so we'll say class choice from models that model and we'll just give it a title which is a character field and just say the maximum length equals 250 and then define string just like this one and then we have the question model so we'll say class question comes from model step model will then say that the question equals two models dot character field and this could be like max length of 200 remember this is the actual question that they're asking then you have the choices and this is going to be a mini to mini field with the choice model and we just created up here will then have the answer which is going to be a foreign key with the choice and we'll say that on delete equals two models dot cascade and we're going to have to pass in the related name because we're referencing the choice twice so we'll say that the related name is the answer will then say that the assignment that this question belongs to is a foreign key to the assignment model and we'll set undelete equal to models cascade will then create the order which is an integer field and actually we could make that a small integer field because it's not going to get too large and then we can add the define string method and we'll just say return self dot question and there we go so I can delete that and now we have our models assignment graded assignment choice and question and we can go ahead and make those migrations after we add the API into our installed apps so we'll just add it here and there we go so we'll just bring up the terminal here and we'll say manage stop I make migrations and there we have the models created and now we can say and it stopped I migrated there we go and let's run the server now and I'm just gonna bring that down and now inside the API what I'm going to do is create two folders the one folder is going to handle the URLs for the assignment view set and then the second folder is going to handle the URLs for the graded assignment view set so we'll just create assignments and then we'll also create the graded assignments and then inside each one we'll just create a URL stop I and there we go and so now we can go to our home and we'll go to the URLs here and then we'll add a path and we'll say path to assignments which will be the API URL to the assignments views it and we'll just say include API assignments dot URLs and we'll do the same sort of thing for graded assignments like that and this will be API dot graded assignments URLs and we can close that and actually come inside these URLs here and what we want to do is actually the same thing as what we did in the user's app so let's go back to users and down to URLs and I'm just going to copy all of that and we'll go all the way back into the assignments URLs so we're importing the route oh the default router and then we're going to import the view set so we don't have that we create the default tutor and then we register it using that view set which again we haven't created yet and then we assign it to those URLs so we have all of that and we can do the same thing for the graded assignment URLs and so we don't need to focus on the graded assignments for now but it's just so that we can get that set up for the time being and we can then work inside the assignments URLs so we're going to need to work on the assignment view set now so let's go here into the API views and we're just going to create a class assignment view set and actually we can use the same thing as what we did in the users model so let's actually copy everything here and then we'll paste this there and we don't need to render shortcut and in this case we're importing the assignment model and we're going to need to create a serializer file with an assignment serializer so let's do that so just create serializers dot pi just for the time being and then we'll call this the assignment view set which uses the assignment serializer and the query set is the assignment objects level and now we can just handle the serializer so we'll need to import the rest framework serializers so we'll say from rest framework import the serializers and then we'll create a class assignment serializer which inherits from serializers dot model serializer and that means that we'd need our model as well so there's that and then here we can just specify the class matter where the model is the assignment and then the fields will just say equals to double underscore all so basically just pass in all the fields of the assignment and everything is working so let's go actually to the localhost to slash assignments and we see that we get the default Django rest framework list view and let's head into the admin and we can actually add those models into the admin as well so we'll say from table models import the choice question assignment and created assignment and then we'll just say admin dot site dot register each of these and there we go now let's come back and refresh this there we go let's go to the assignments and let's just create one here we'll say the assignment is a test assignment and the teacher is that same admin we'll click Save and if we come back here and refresh this then we aren't getting a come through just yet and actually in the URLs is where we needed to bring in our view set so we've got the assignment view set now and we can put that in our Reuter and the base name is assignments and we're actually getting an area here saying there's no module named API assignments views and that's actually because this comes from API dot views so if we come back and reload this now we can see our assignments being loaded there cool so now we can go to the frontend and actually pull those assignments into a list view to display here so let's just close all of this stuff for the time being and we'll go into the front end into source containers and we're going to create our assignment list jeaious and we'll say import react for our react and we're actually going to need to go to and D now so let's go to and D and we want to find the list which is here and the data display and this first one here is good enough so we'll just copy the code and we'll come in here and paste it and we don't need that mounting there and actually all we want is the large size so we'll delete everything else and then we'll just create a class called assignment list which will say extends from react dot P or component and then say R in and return and we're going to return everything here and just paste that in there and then we'll say export the default as the assignment list and then this assignment list we want to bring into our router so let's go to the routes here and we'll say import the assignment list from containers assignment list and we're just going to add another route on the end of this and we can actually just copy one of these and we'll just paste it here and it's not going to go to any specific path except just slash and we can just add the component as the assignment list and if we come back now we can see it displaying there and of course this is dummy data for now so what we want to do is actually get that data and display it here so we're going to use react Redux to handle that for us so let's go into the store into actions and we'll create a new file which we'll call assignments Jas and this is very similar to what we're already doing here with these actions so we're going to basically need everything from there and just paste it so we've got all fail all success and all the start but of course we'll rename those so let's call this first one the get assignment list start and I'll just copy that but there and that will be get assignment list success and get assignment list to fail and we're going to need to go to the action types and add our actions in here so I just added some actions which just say get assignment let's start get assignment this fail and success and using these we can then import them into the assignments and reference them here so we'll say this is get assignment list start and get assignment list success and get assignment list fail and now we just need to add the assignment or assignments rather into the get assignment the success action so we passed those assignments in there and now we need to create our function to actually get those assignments and so we'll just call this the get assignments which we'll have to take in a token to authenticate the user and we'll just return a dispatch and the first dispatch is going to be the get assignment list start which we define up top there and then we'll set the Axios default start headers to have the content type as application and JSON and then we set authorization to be token and then the token that's being passed into the function and then we can say access get and this is going to be HTTP one two seven zero zero one to our localhost and then to port 8000 to the assignments and then we'll just say dot then with the response that we get from the server will say that the assignments equal to response dot data and then we will dispatch the get assignment list success and pass in those assignments and otherwise we'll catch any errors and just say dispatch the get assignment list fail and that's our method action so we basically just need to handle this in the reducer and then add that reducer to the route reducer so let's go to reducers and we'll add assignments jeaious and this is actually going to be similar to the earth so we'll just copy and paste everything in there except now we don't have any of that stuff so we have assignments which will sit as an empty list to get started and if we go back to the actions let's just copy this name so this first one will be get assignment list start and then we'll copy these two as well so we'll copy that and that paste that there and when we get the list success all we're getting are the assignments so this will be assignments is action assignments and everything else is actually good we can delete the author log out and we can delete that case there as well so now the action type is going to be get list start which will be get assignment left start and then the same thing for success and fail so just like that and that actually should do it for the reducer so let's go into our index.js file and here we'll copy this and just say this is the assignment reducer which comes from assignments and we'll say that assignments is the assignment reducer so now we can access the assignments via the assignments with user and we can close that now and close the assignments and action types and now we just need to connect our assignment list to the store which comes from react redux so this is connect we'll come down to the bottom here and say connect the assignment list and let's go and grab those constants like this so we don't have to repeat ourselves and we've got map states of props and map dispatch which we'll pass in here and we'll change those methods of course so we don't need the user ID but we are going to need the token so we can authenticate so this is going to be state auth token and then we're going to need the get assignments which will come from action start get assignments so let's go and say import star as actions from and then go all the way back to the store to actions assignments and we'll say actions dot get assignments and this is going to take in a token which we pass in there and we can get rid of the dotted list there now and instead what I'm actually going to do is pass in the assignments here which will come from state dot assignments dot assignments and then this is what the data will be as the data source so that this will be the star props dot assignments and if we come back now you just have no data and I'm going to get rid of the header and footer and there we go so that's what it looks like so far and we can said that this is the assignment list and we can actually pass in the loading which will be a state dot assignments dot loading and what I'm going to do is use the skeleton from Andy which is all the way down here to feedback so if you click on skeleton basically it just gives you like a loading screen that isn't just a spinner it's like as if the data is there it's just not showing you it so this is simply just importing skeleton from empty so simple enough just import it there and we can import our higherorder component so we'll say import hoc from hoc hoc and here inside the return statement we're going to say if this dot props then we're going to return the skeleton and say active and then otherwise we will return the div with the data source and the reason why it's not correct right now is because we can't return a dynamic output we have to wrap this with some within something so when you're going to return it inside an hoc so that we don't create a div unnecessarily and there we go now if we come back obviously it's still going to say no data but it's working we just now need to say when we have the token send a request to get the data and so we'll add a method here this one will be the component did mount and basically we'll just say if the stop prop star token is not undefined and it's also not null then we are going to call the star props dot get assignments and pass in the star pop star token and with the same kind of concept we'll do that in the component will receive props this isn't the best method to use right now because it is going to be removed but we're not too worried about that for now so basically we're just going to say if the new prop star token is not equal to the current token then we will say the same thing as what we did here and instead of passing the star pop star token this is the new pop star token and we can actually change that as well so that it's new prop star token is not undefined and new pop star token is not null now if we come back we get new props is undefined so it's added there we're not getting any data come through so let's login now so that's actually going login and I'll inspect this here so we'll login with Matt and let's see we get an error here it says objects are not valid which is basically happening inside the assignment list it says line 34 and that's because we're rendering out just the item so basically it is rendering out an object and to think ahead what we also will need to do is create a detail view for the assignment so what I'm going to do is create a method here that will return each list item but with an avalanche inside it so this will just be render item and it will take an item and we'll just say return this here but we'll import the nav link so we'll say import from react rooted um which is nav linked and we will put that inside like that and this is the link component so there you got the link and we're just going to wrap the link around our list item and here we'll specify the to property to just be like for example assignments one just for now and here instead of being item this will be item dot title because remember each assignment has a title and the teacher so in our case we want to display it using the title and if we come back now we just need to use the render item method by calling this render item of item and there we go you can see that the loading skeleton displayed for a little bit and now we have the assignment list where we also have this test assignment which is the first assignment here cool so the assignment list is working and now we can get the assignment detail working so like if I click on assignment one then you see it takes us to this link here so we basically want to add a route to handle that so let's go back here to route and we're going to just copy that one and say this is the assignment detail which will create in a second and basically we're just gonna copy this here and say when you go to assignments and then an ID then it's going to take you to the assignment detail and now we can come back into the containers and we'll add assignment detail DOJ's and basically what we want to do in here is just create a card so if we check out the cards here from ND which are here under the data display and we can just come down a little bit and see this one here which has an inner card that's quite nice so i'm going to copy that code and we'll say import react from react paste that there and so we have a card which has some inner card stuff and you can actually get rid of the second one and I think we will also get rid of the group title so that we basically have a card and an inner card and then we'll just say class assignment detail extends the react component and we'll say render which will return all of this stuff here and then we can say export the default to be assignment detail and if we come back in here now you can see you get this card with an inner card displaying and basically what we can do is change the card title to be the title of the assignment and then for each question we could add a card here or we could be a little bit more fancy and use some other components from Andy to create this effect of showing one question and then when you answer that question you can go to the next one and etc so that's what we're going to do so we're not going to list through all of them and replicate the card title here so let's just come back in here and we can get rid of the extra there as well and so we basically want to go back to the store and inside our assignments actions and reducers we need to handle getting an assignment detail so what I'm actually just going to do is copy all of this here and we're going to now handle the methods to get the assignment detail so let's go up here and this one will be get assignment details start this will get assignment details success and detail fail and then this will be get assignments detail and in this case we want to you pass in the token and the ID of the assignment that we want to get then we will dispatch the get assignment detail start and get assignment detail success and get assignment detail fail and in this case the assignment is what we will get from the response data and we want to change the get request to be assignments and impasse in the ID and the remember to put a slash at the end of that then the assignment we can pass into the get assignment detail success dispatch and change that as well to be an assignment that's passed in there and we also need to update our action types so you can just do something like this get assignment detail start fail and success same kind of concept as before and then we just need to change this here for these methods so this will be get assignment details start get assignment details success and get assignment detail fail and everything is pretty much good to go so we can actually close that or in fact we can actually copy those methods for the reducer and we actually don't need these to be exported same as the list ones so we'll just grab these three here and then we can come into the store reducers assignment and we'll come down to the bottom and right above the reducer we'll just paste these here and instead we need to basically do exactly what these ones are doing where they're passed in the state so this will be like that and for start we'll set it to this and we can actually come out top here and set the current assignment to be an object which will store the current assignments properties and there and then for getting the detail success then we will pass this or like that and this will be assignment and we'll set the current assignment to be the assignment that's being passed in and then for the fail this will update in the same way and now we just need to add three more cases in here to handle those so we've got get assignment detail start which will get assignment detail start get assignment details success and failure just like that and it's just check is the server happy and it is so now what we need to do is basically just call these methods here inside the assignment detail so we're going to basically do the same thing here we're going to need the connect method and we're going to wrap it around the assignment detail and I'll actually just go to the bottom and copy all of this here and then just rename this to be assign and detail and we'll import just the function we need from the store so this comes from store actions assignments and this is the get assignment detail and that's what we'll plus in there as well and we know that it takes in a token and an ID so we pass the token and the ID in there and instead of having assignments will have the current assignment which is from State assignments and just fix this dispatch there and what we want to do now is the same thing as what we did with component did mount and component will receive props so we'll copy that paste that they accept this will be get assignment detail and we'll put that one there as well and we need to pass in the parameter coming from our URL so that would be the stop props match params dot ID and we can actually just copy that whole line and there we go so if we come back seems like everything's good we'll just come here and instead of the title being card title we'll output this dynamically and say that this is the title which will come here and say constant title equals to the stop props current assignment and if we come back we're getting an unauthorized error and that might be because of our settings so if we go to home settings based up PI and go all the way down here and we can actually change this to be is authenticated and I'll remove the session and basic authentication classes and let's come back and refresh this and let's close that and come back here to the detail view and that's because we're not passing in new props star token so let's get rid of that and try this again and there we go we see the test assignment title coming through there and so now let's go back to Andy and we're going to take a look at the step component now the step you can find here under the navigation and this is basically what it looks like it's just like navigating through some kind of step by step task and the way that we want to display this is kind of similar to this one so we're just going to copy that code and let's actually go into containers and we'll create another one which will be called questions jeaious and this is going to basically render out a step by step display of our questions so let's just paste that all there and we can come to the top and we'll rename this app to be called questions and go to the bottom and say export default questions and we're going to need react so we'll say import react from react and I'm gonna get rid of the constructor and just say this state is like that and we can actually just take these questions and bring this into the assignment detail so let's go over here and we'll say import questions from questions and we'll take that and we will display that inside the inner content like that and let's take a look and this is what it looks like now it's not displaying this thing here because we didn't copy the CSS which looks like that but I don't think we actually want to either but instead what I'll do is if we come back here and go back into questions we'll just go up to the top here and this div will say that these style has a height of 100% but what we'll do is we'll make sure that this content actually does have some padding on it and it'll look better once they actually are questions inside there and we don't want to display these large balls here like first second third etc we're just going to have little dots instead so we can do that if we actually just close that there then you can see it looks like this and the way that you do that is just by putting in progress dot like that and bring it into the steps and if we say that now it looks like that and that looks a little bit better and I think we can actually get rid of the inner cart title as well we can get rid of the whole inner card and just display these steps so let's go back to assignment detail and I'm just gonna cut out that card and place it like that and we can actually import the skeleton as well from an T so bring the skeleton in and we have the loading as well so we'll also bring in our higherorder component like we did here in the assignment list and we'll return the higherorder component and inside it will do the same kind of thing and say if this doc props tarting then we'll return the skeleton and say active and otherwise we will return the card like that cool and save and and actually I'm realizing that we will need the inner card so that we can display the question number so we'll just create that card again and just bring the questions in there you will say type equals to you know and what I'll do is say title equals two and let's just take a look again also we haven't given it a title we could specify the title here but what we want to do now is we want to basically grab the questions off of the assignment so when we grabbed it here from the server we want these questions to be passed into the assignment detail and I think what we'll do is we'll pass them in as props into the question component here and then inside these questions here we'll then loop through them and display however many questions they are so basically the number of dots here will depend on the number of questions that's basically what we're aiming for so let's go back in here and what we'll do is we'll say questions and inside there will say that the questions equal to the current assignment which we've got up here and we can actually just say constant equals to the stop props and then say title equals to current assignment and in like that we can pass that into here and say current assignment dot questions and we actually can just put it like that and what we can actually do is return a card by mapping through the questions we can return a card for each question and pass basically a list of components into the questions and that way when it comes through in the questions here the component that will render will not just be this over here the start in the steps it'll actually be a component and so let's just see how this will be done we'll say dot map and we'll say for each question we're going to return a card and we can actually just cut that out and say that there when we do that we're going to need to specify the key which will be the question ID and the title of the question is going to be the question order and we can actually then put the question next to it so what we'll do is we'll output it in strings and just reference it with substitution so question order dot and then question question and that looks a bit better and now inside the questions component we need to handle that so let's first get rid of the steps we don't need that and the logic here of the current is correct we'll keep that will keep next and previous and render but then here we'll say that the constant questions equal to the stop props because we're going to receive it as props so this will be questions and these questions here will loop through inside the steps so now instead of using the steps that was defined up top there we're now going to use the questions and say dub map for each question and we can also use the index to use it as a key so for each question we're going to create a step where the key is going to be equal to the index so basically the index of the element in the list and we don't need a title either we're basically just creating a step we can remove these class names because you don't actually have the CSS for that and this stuff here is rendering out what used to be steps of the current step but now we want to change steps to be questions so that it will render out the question according to the index of that question within the list of questions we've passed down so we can remove content as well and if we take a look at this we've got steps as undefined in line 33 and we can change that to be questions lengths and questions the length and let's take a look now and we're getting a cannot read property map of undefined and the reason for this is because of our serializer so let's jump back into the back end and go all the way to API and then to serializers now the issue is that we have a nested component questions are referenced by a foreign key in the question model and so that's why we're not seeing it come through and so we're going to actually do the same kind of thing as what we did in the users if we go back to the user serializer we used a serializer method field where we defined the method to actually get the starter or we're going to do the same thing here for our questions so let's just close that and we'll say that the questions equals to serializers dot serializer method field and then here we just add a method and say define get questions and say it takes self and object now in order to get the questions we need to actually use another serializer and that serializer will be the question model serializer and so let's just go here and say class question serializer and nothing funny is going to happen here we'll just say serializers dot model serializer will set the class meta to have a model of question which will import for our models and then we'll just say that fields equal to all like the previous one and this question serializer is going to be used to serialize the question objects and so we can say that the questions equal to question serializer where we're passing in the object remember this object is an assignment so we pass in the assignment but we want to access the questions off of that assignment and we can do that because if we took a look at the models again the assignment doesn't have a questions field on it but if you go back to the question model we specified the question to have an assignment that was a foreign key of the assignment model and basically what we need to do to make this work really simply is just by adding a related name so we'll just add related name and this is going to be questions now when we do that this allows us to come into the serializer and say get object questions dot all even though we don't have the field on the assignment the fact that we have the foreign key with a related name allows us to make that kind of query and we actually need to make a migration for that so we'll say make migrations and then we can say migrate and then we can run the server again and we can close the models and now using the question serializer we're passing in the objects questions by using the related name and we want to set many equal to true and that's basically saying almost like there are going to be many questions that we need to pass because this is a nested serializer and then we'll just say dot data to get the data from the serializer and then just say return the questions and so now if we take a look at this and refresh it we're still getting undefined so let's go into the assignments here and we'll just say console dot log the assignment to see what's going on and to basically get around this with a dirty trick what we can do is go into our assignment detail and here right above the higherorder component will just say object keys of the current assignment and say dot length and if it is greater than 0 then we will do all of this here so let's just cut all of that and bring it there otherwise just return null and that means that we also need to wrap all of that inside a higherorder component as well so we'll just cut that out bring that there and now we're basically saying if the current assignment we have from the props has more than one key inside it then return the stuff otherwise return null so now we can see at least that's being displayed and it allows us to actually let the component will receive props take place and then you can see here we're getting a response in the assignments which has an ID of one and we're getting a questions array and you see it each question has an ID and as the question field the order the answer etc and we also get the teacher but it's only returning one so that doesn't help too much and for the choices we also only get one and two so we basically what we want to do is convert any time that we see something that shouldn't be returned as an integer or writable or returned by its ID we want to view it as a string we want to see what what does its define string method because that in that case what it's going to do is for the choices it's going to return the actual text the title of each choice instead and the user will be returned by their username and not by their ID and we can nail that pretty quickly if we just go back to our serializer we can use a string serializer so we can just say class string serializer and say this inherits from sterilizers dot string related field and this requires one method which is the two internal value and it takes in self and a value and then we just say return value then what you can do is you can use the string serializer to convert fields in your other serializers into a string so for example on the question serializer we have these choices that's a field on the question model so we can say choices equal to string serializer where many equals true because there are many choices for each question and then we can return that here inside the fields and if you wanted to return the teachers well let's say you wanted to return the teacher's name and put in the top right hand corner then you could do the same thing and say teacher equals to string serializer where main equals false but we don't have that on the question so we'll just leave it as it is and we'll change the fields to be ID choices question and order and then we can come down to the assignment serializer here and we'll say that the teacher is here because that's where it is and again we'll use the string serializer and pass in many equals to false and cool we'll just leave this as all because we pretty much are returning all the fields so now if we come back here and refresh this now you can see the ID you can see the questions and each question has two choices you can see cool and not cool you can see the question with its title you can see the teacher by its username of admin and that's really convenient so now what we want to do is add the choices for each question inside the question so what we'll do is we'll go back into our source folder and here we're going to create a new folder inside there which is going to be called the components folder and this is going to hold the choices and make sure this is choices j/s because we're basically just going to pass the state down into it we're not going to make this a container and so we'll start by importing react from react and how we want to do this is to use the radio and this is part of forms so if you go up here you can see this vertical drop down of radio options we'll just copy that and we'll change this to be class called choices and then say export default choices and we can get rid of the last radio item and we'll remove the radio style to be outside of the class and let's take this choices component and we'll remove the input there and we're going to take this component into the assignment detail and we'll say import choices from components choices and what we want to do is render the choices inside the card all right that makes sense so we're passing the cards as components into the question but each component card but each card that we pass in has answers inside it so if we go all the way down here to the card we basically want to pass these choices inside it so like that will say choices and we'll just do it like that for now and let's see what this looks like and now you can see get back option ABC for the questions and what we can also do is come up top and just to find some styling which we'll just say is the card style and all we're doing is just making the margin top of 20 pixels and the margin of bottom of 20 pixels as well you can come and bring that card style down inside here so we'll say style equals to card style and let's check this out and now it's a little bit more spaced out and looks a bit better and you can select those different options as well and let's go and actually create another question and we'll add an answer and say let's say it's true and if we refresh this we've got true there we'll say choose the answer and I'll add another choice which is false we'll say this is question to the assignment is test assignment the orders too and if we come back here and refresh this now you can see there's two dots and if you go from next to the next one you're going from question two to question one and back and that's pretty cool so now all we need to do is just pass in the options or that rather the choices of each question as the actual choices to this radio group here and so we already have the choices component that we're passing into the card so inside there we can add some props and say this is equal to the questions choices alright because we're getting the choices off of each question and that way when we go back into choices here we can just come down here and instead of rendering out these components over and over we will output them by mapping through the choices that came through as props so we'll say this table props dot choices dub map and we'll just say for each choice and pass in index we will return a radio item like that and we'll say that the value equals to C where C is the choice that came through and the text that goes inside there is the actual value of C as well and we'll say that the key is equal to the index that was used to loop through in map so now if we come back and so we're getting a warning here which is saying that we're getting a unique key property error and we actually want to remove this value statement there that's coming from the state so what we'll do is remove the state there and what I'm going to do is take the on change and bring this back into the assignment detail we'll put it over here and instead of the value being now coming from the state well how we're going to manage this is pass the question ID into the choices and so that way we can basically store inside the assignment detail the answer to each question inside a dictionary or an object where each key is the question ID and then the value of that question ID is the answer that the users chosen and that's very easy to update in the state so basically what we're doing is at the top here we're just going to say that these state equals to this object that has let's call it user answers which is an object and then in the unchanged we're not only going to take in an event but we're going to take in the question ID that was changed and so we'll grab the users answers via the state and say this equals to the start state and then we'll say user answers of that question ID so we're setting the key in the dictionary equal to the event target value and then we can just say this dot set state of users answers and now we just need to pass the on change inside our choices so what we'll do is we'll say change equals to this dot on change and then we can handle the change property here and say when unchanged takes place then we'll say this takes in an event and a question ID and say it's an anonymous function that calls the stop props dot change where we pass in the event and then we need to pass in the question ID which we'll grab by passing down as well so we'll come into assignment detail and we'll say that the question ID equals to Q dot ID and in that question idea here we can access you in the render so we'll say constant question ID equals to the stock props and then pass in that inside our prop star change and what we can also do is pass in the user's answers so Racha above the return statement will say that the constant user's answers equal to the state and we'll just wrap this 2d structure it and we'll pass that down into the choices as well where it equals to users answers and in fact the question ID should actually be referenced with the order because otherwise we'll get the actual ID of the question which could be like 12 13 14 etc where you only have two questions and it's gonna say question one is number 13 so that doesn't make sense it's actually meant to be the order like how we were displaying it in the title and so what the users answers being passed down into the choices we can now say that the value that's currently selected in the radio group is equal to the value that's in the state so basically what we'll do is say if users answers in which you can actually grab up top here say constant users answers equals to the stock props and say if the users answers are not equal to null and basically just check if the question ID that's coming from the users answers is not undefined and it's also not null so if that's true then we will say that the answer is the the value of the question I'd be inside the users answers and otherwise it is null so basically that's what it looks like and so if we take a look here we'll need to login and if we go to test assignment now you have the first question there and you've got its answers showing you've got cool and not cool and if you go to next you got true and false and now if we select cool and go click Next and go back you can see that that state was preserved meaning the answer that we selected is still there and if you go forward you can click false or whatever go back and forth and there we go so it's preserving the states in the questions and basically what this means is that all we need to do is just add our questions in the back end however many questions you add it doesn't matter because those questions will be looped through to give you the answers to those questions inside each card component and each card component is being passed in inside each question so in the last one we added our assignment list and detailed views to this project and so if you'd like to follow along in this tutorial you can just go to get up to our repositories and you can go to the teach me django repository and then you can just navigate to the commits to see which commits you'd like to navigate to so currently we're on this third commit which is the assignment list and detail views added and so you can just clone this repository and navigate back to those commits and so once you have everything cloned what we're going to do in this tutorial is basically just add the form to create the assignments and also handle the graded assignments so we're going to try and tackle both of those in this video so once you've got everything up and running and let's get started so we have the front end and the back end servers running and we can check this here in our boiler plate and so this is what the assignment looks like you can just select the answers and when you click done then it gives you this processing complete which is basically just a message that displays when you click the done button so you see a get message dot success and so what we want to do is handle the creating of a graded assignment when a user is finished answering all the questions so basically we'll submit the users answers to each question and then on the server we'll evaluate whether the answer they selected was the correct answer and then create a graded assignment object which will hold the grade of that users assignment so we'll get to that in a second but what we actually want to do first is handle the form that will allow us to create assignments and this will only be allowed for users that are teachers so they have that use teacher property being true and so we're just going to come back in here and we can actually close off a lot of this over here and we're going to go inside the containers and create the assignment create jeaious and we'll just copy that name near and let's just import react from react and what we want is actually a form that will allow us to add more fields to it so here and and D we can just go to the form and if you scroll down then we're looking for this one here which shows that you can add a field and you can also remove those fields so we'll just copy all of that code and we'll come back in here and it's actually quite a long one and I'm actually going to remove the comments as well and I'm going to remove these form item layout objects and the labels as well we're not interested in that and so let's just take a look at what this looks like we don't also don't need the react on render and you'll say export default and let's call this the wrapped assignment create and export that is the default and then just make this the assignment create like that and then we'll come into our routes and we're going to import it so we'll say import assignment create from containers slash assignment create and we want to create a new path here which will be when we go to slash create and this will be the assignment create component that will handle it and let's see what errors we get so we get that form item layout problem and we can just sort that out so we can just get rid of that there and all of the form item layout with label rules let's check out now and let's go to slash create then we get this form and we can add fields and remove them as well and so let's add a link here in the breadcrumbs of our layout so that we can navigate there so inside the layout component we can go to the breadcrumbs and we'll add another one here and we already have the user ID in the state and let's actually add the token so this will be state auth token and we're also going to add is teacher which will come from state auth dot is teacher and then with the breadcrumbs what we want to do is actually we don't want to display this link if we aren't authenticated so we'll add a check here and say if this dot props token is not null then we will show that link otherwise just return null and actually we can put that outside the breadcrumb and in the same kind of concept for the next one so we'll just copy this entire thing here and we're saying if the token is not null and the stuff props that is teacher is not false or in other words we could say and the star prop star is teacher so meaning it is true then we will return a link that takes us to slash create and we can actually output that like this and we'll say this is create and there we go now let's come back and if we refresh this and we see a little area let's get rid of that they we have to say and this stuff prop study is teacher and we get profile showing in brackets so let's get rid of those brackets there and there we go okay so let's go into the admin here and we're gonna go change this math user to be a teacher so we'll just select that to be true save and continue come back here refresh it and we'll actually need to log out and login and there we go and just getting those brackets again so let's remove those and there we go and if I click on create and it takes us to that form name and so let's go back in here and we can close the layout and the routes and what we're going to do in the assignment create is we're going to manage the questions themselves so here how we're adding a field this is like going to be adding a question and we're going to manage those questions here on this component and we're going to create another container which will be the question form so basically we're creating like a form set and what we'll do is we'll just render the question form over and over depending on how many questions we want to add and we'll again manage the number of questions here inside the assignment create and then the question form will actually be very similar to what we have here we can actually pretty much copy everything in this file and paste it in the question form and then we'll just rename everything here so this will be wrapped question form and in fact actually we're not even going to create a form using nd because what we're going to do is rather create form items and then pass those form items inside the general form that we have here so inside this form and so instead we can get rid of that call there and we'll just call this the question form and then this is the class question form and so everything here is pretty much going to remain the same we can actually make this a little bit shorter and so each question form will manage the keys of that form whereas the handle submit we're not going to handle on the question form that will rather be on the assignment create view so we can get rid of that and now we have the render method and so the label of this form item will not be the passengers but instead this will be the choices so inside the question form will manage the choices of each question and in the assignment create form if we just scroll up passengers will rather be questioned and so let's actually go into the assignment create and think about the form items that we want to have inside the main form so we're going to have this button which will and asked to add a question so let's rather make this add question and this will be the submit button but instead of making this a dashed we'll make this type secondary and we'll actually get rid of the with style and if we take a look at this now you've got add question and submit there and what we also want is a field to pass in the title of the assignment so we'll just create another form item here and we'll set the label of this format and equal to something like title like that and then we're going to need to use the get field decorator like this one so that we can actually give it a name which will access it by so we just paste everything in there and we'll keep all of those rules there except for whitespace and the message here we can just say is please input a title and then inside here these braces where we actually pass the component to input is going to be an input which we already have over there and we can take a look at this one as an example so we'll just bring that inside there and this input will have a placeholder of add a title and we can get rid of the styling as well so now if we take a look you see K is not defined and that's the gate field decorate a name so we're going to change that to be title and if you come back here now you've got the add a title field and add a question and we'll also add an h1 above here and then they will just say create an assignment and then these form items which we're basically mapping through the keys what we're going to do here is rather just store a count of the number of question forms and then create a question form to pass in based on the number of counts so actually this constant form items will just change two questions and initially this is actually going to be an empty list and we can get rid of everything right here inside this method so everything up till there we can get rid of the keys we can get rid of this get for your decorator there and can get rid of that because we're not using it and then let's just go up here we have the handle submit which will keep us this for now we've got the add method and instead of using this get filled value of keys which doesn't exist anymore we can basically just get rid of all of that we've got the state that we need to define up here so we'll say state equals to this object here which has a form count and you'll say the form count initially is one and we can also remove the ID from up top there and then everything here and the remove we can also get rid of that and we'll just make this an anonymous function as well so inside the add method what we want to do is grab the form count from the state and then set the state to just be that form count plus one so basically that you're just adding one to the form count so we'll say constant form count equals to the start state and then we'll say this set state and pass in the form count to be form count plus one and then the same kind of thing here in the remove method where this will just now be minus one so this is a very basic way of doing it maybe you won't be removing the exact question that you wanted to remove but all the time being it's it's good enough and then we can just come down here and what we want to do is loop through the form count in the state and create ourselves a question form based on the number in the form count so we'll say for let I equals zero and where I smaller than the start state dot form count and then just say I plus equals one then here we will push a component into the questions array and then render those questions here like this and so what we want to push inside here is going to be the question form so let's actually make sure we've imported that so say import question form from question form and then over here we will just push that inside like that and so let's take a look we see we've got get filled decorator of undefined inside question form and that's because we took away the method here to create an ant deform so what we want to do is pass in the props of this component which is being created using the ant deform inside our question form so that it inherits those props so we'll just say pass in the stuff props now if we come back cool now we can see it's kind of taking shape except you've got a submit button there so let's come down here and remove this form item and that's starting to look a little bit better but now we're getting this each child in the array should have a unique key property and so if we come back in here to the assignment create we could say that the key equals to I and if we come back now we're just getting a nesting problem which is basically that we can't return a form itself so we're going to need to remove the form there and these form items we're basically going to need to wrap this inside a higherorder components so let's say import Hoc from hoc and they will take this and just wrap it around everything we have here and so we've got add a field here so let's make this add an answer choice and what we also need to do is specify the actual answer itself so we're going to need to create another form item above it so that the user can specify what the answer is and again you could get creative and maybe add like a checkbox next to each answer choice which if you selected that one would make it the answer but just to get this thing to work let's just copy some of the stuff we have here so we'll just make another form item and then we'll need the get filled decorator as well so let's just copy that and if we just save that so you can see the get filled decorator has the strange syntax of names of Kay and basically what that's doing is allowing each form item to have a unique name that you can grab its value from and so we'll need to play around with that to get this to work so for the timing let's just add a label here and make this answer and we'll say please input and answer to this question and if you come back here we've got K is undefined and that's basically this problem here so for the time being let's just put in answers and if we come back we've got a cannot read property props of undefined and that's because of the answers that we have here now basically what we need to do is ensure that every question form has a unique gate field decorator not only within the form but compared to other question forms because let's say we render out five question forms that all have a gate field decorative answers and it's basically going to set the value of each field in those five questions to be the same thing because it's got the same gate field decorated property so basically what we need to do is pass in the question ID from the assignment create component here and using that that question ID we can then differentiate each question form from the next one so basically here we'll use that same syntax debated where you basically pass in like a square brackets to access the index of to access an element by its index and we'll just say this docprops/custom.xml create it and we'll set ID equal to I because I is just one way of incrementing through it and so if we refresh this we're still getting that error and so let's go back into the question form and we can also remove whitespace from there and we also need to pass in the actual form component Enya which is actually going to be an input so we can just grab this one here and put that in there as well and this is going to be the actual answer to the question well in this case the choices basically so we'll have you the placeholder as what is the answer and we'll remove the style and let's come back and see and there we go now it's working and we've got add a title we've got what is the answer we can add an answer choice and we're still getting those passengers coming through and that's just coming from inside here and so we're going to need to kind of do the same thing with the get filled decorator of the choices so this this is going to be choices here and we'll set the get filled decorator to be choices of the stuff props ID and we'll say please input a choice to the question and then the placeholder here will be the answer choice and then we can get rid of the style there so let's just take a look at what we've got here we've got one form item which is the choices and that's being looped through based on the keys count which is what we had by default from Andy and we're using the ID of each question to differentiate the choices of each form and we can get rid of that required false there we don't need that and each choice that's being looped through has its own input which says answer choice and if the key length is greater than one then it's going to show the icon which will allow you to remove that answer choice then we're returning a bunch of form items the first one is going to be the actual answer to the question so it's going to say what is the answer so he input what the actual answer is then it's going to give you the choices to input and then a button to add another answer so if we take a look at Beth you've got the title the answer add an answer choice and add a question now what we need is a field that says what is the question and so if we come back in here where that can go is actually just right here above the answer for madam so we'll just copy that paste it there and this will be question and then this here the get filled decorate we're going to use as question to differentiate and call this top prop star ID and we'll say please input a question and then here this will be add a question and if we save that and check it out now you've got one form showing which asks you for question the answer to the question and then the choices as answers to that question and if we add a question you can see that the exact same form was repeated you've got add a question what is the answer and the answer choice and you can add an answer choice to each one and so to kind of help differentiate the forms from each other we'll just add a divide between them so let's go back to the answer create and we'll wrap this around with an hoc which will actually need to import so we'll say import a chassis from hoc and then here we will wrap this around like that and then we'll pass in a divide and a divider basically comes from and D which is another one of their components and then we can just simply just add it like this and so now we need to pass the key inside the higherorder component and if we check this out you can just refresh this now you've got that divide there and if I had a question then at least that divide is kind of separating them you could make that thicker as well and so we'll also add a little icon next to the question to remove that question so just like how they do here where they say if Keys dot length is greater than 1 then return an icon like this and we'll grab that there come here and here where they're pushing each high order component we're adding a question form and a divider and so I'll just put it right there and say if questions dot length is greater than 1 then written an icon and we're disabled is where questions dot length equals one and unclick will just say this dot remove like that so let's see what this looks like and if we add a question then we're seeing no icon yet so let's go back here and say yeah if it's greater than zero and disabled as if it's equal to zero and if I click add question then there's little icon to remove that question and that's actually try and add it above the question form and see what this looks like so if I add a question then there's a little icon and if you press it then it removes the question cool so let's actually add that question and let's just pass in a title and just say test we basically just want to see what the data looks like when we submit it and we'll say this is question one say this is answer 1 we'll add an answer choice and make that answer too and the question here will be question 2 the answer will just be answer two and just some choices and we can make that one and okay so we're seeing that this is giving us the same answer inside the choices so let's go back here to the question form and so the problem is basically happening here inside this gate field decorator we're calling choices of this type props that ID but this should actually rather be choices of K like it was and outside here we're going to pass in questions of this type props that ID and so now if we check this out and we'll add an answer choice there then you can see that those values are now different they're unique so let's fill in the rest of the form if we click Submit we've got received values we've got answers are a and B the keys are 1 & 3 because we deleted one of those keys we've got a question which is question 1 in question 2 where those are the names of the questions we have here and then we have the questions arrays which are the array of choices to each question so we've got empty and then a and basically Bieber and then you've got the second one here B and that so that's how the dots is coming through and okay as we also have the title day so we want to basically take that data format a little bit and send that through to the back end where the server will basically create the form and so let's go and add the functionality inside the submit method yeah so here you've got handles submit and so basically the format's of how we want to submit this is going to be an assignment object so we'll say the assignment equals to an object and it's going to have a teacher right because we know when we create an assignment it has to have a teacher and it has to have a title so those are two easy properties that title just simply comes from values title and then the teacher is going to be the star props that username and we should have that at the bottom here so we'll just go and copy that from the assignment detail so let's just grab everything there and paste that so we need the username which is going to be state auth dot username and we'll pass in the wrapped assignment create inside that Connect method there just save that and we're going to need to import connect from react redux and then we'll also add the actions in the store to handle creating the assignment so we'll get to that in a second but let's just get this object sorted in our handle submit so we've got the teacher and we've got the title but we also want to pass in the questions for that assignment and I think the easiest is just to simply add in questions like that and this questions key is going to be a list of question objects and each question object has to have a title it has to have the choices and it has to have the answer so basically we're going to loop through the props in our form push each question that will create as an object into a list of questions which will then be passed here into the assignment object so we'll start with the questions which is going to be an empty list and then we'll say for that I equal to 0 where I is smaller than the values questions dot length so basically the length of questions and then we'll say I plus equals 1 and every time we loop through we're going to say push and we're going to push an object inside there where each question has a title it's going to have the choices and it's going to have the answer and so the title is simply just going to be the value inside the list of the questions so this is just going to be values like questions of I and actually for the time being let's just comment all of that out and this is meant to be a colon there so let's just go down and comment out the get assignment detail and I'll just add some dummy dot here yeah you've got the question which is a list of question titles and then you've got the questions which is a list of the choices to that question so basically what we need to do is make sure that we don't pass in the empty values in those rights you can see you have empty and then on send incorrect you want to get rid of those empty values so what we're going to do is let's just go back up here we're going to set the choices to be values dot questions and actually this first one should be question of Aya's question has an array of question titles they were asking where's questions has a list of objects that have choices inside them so we're going to say questions of I to grab each instance from that list and then we say dot choices to access the choices of that object and then we need to filter that where we don't want any null values so basically we're just saying we're is not equal to null and then the answer is just going to be values dot answers all right and we just need to put a comma at the end of that call so now we've pushed the object into the questions array and we've passed those questions into the assignment and now we just need to create the actions in the store to handle the logic of pushing that to the server so let's go and do that now we're going go into the store here into assignments and all the way at the bottom here we're going to need to actually just basically copy all of this again and change this to be the assignment create logic so this will just call create assignment start and then this one will be create assignment success and create a Sun detail or create assignment fail rather and then this one will be just create assignment when we create the assignment we're going to take in a token to authorize the user and then we're going to pass in the actual assignment when it's created so here in the assignment create this object will pass into this method and will dispatch get or rather create assignment start and then here we don't need to console that art we can just say dispatch create assignment success and create assignment fail and we're going to need to change this to be a post request where we'll post it just to this URL because it does handle post requests and we're not going to get anything back from the response we're just going to basically just dispatch the create a sign of success if it was if it did receive a response and if there was an error then we just dispatch the fail and now we need to go and add those action types in here so something like this create assignment start fail and success and you can take those and bring them into these actions so this will be create assignment start create assignment success and create assignment fail and in the assignment here we need to post as the object that's being posted and that's pretty much it that's the whole method handled so we can bring this here into the assignment create and we'll say import create assignment from the store and then that create assignment we will pass in over here which takes in assignment dispatch that method which takes in that assignment and then we will call here this props dot create assignment of the start prop start token and the assignment so like that and let's see if we've got any errors so we're getting assignment in line 113 so we come here and that's because we don't need to pass that into the create assignment success cool so let's add a title title test question 1 the answer will be yes and the choice will be yes or no and I'll just say submit and of course we get a 500 internal server error because we just aren't handling the creation of these assignments the way that we need to be doing that so we can go and close the assignments there and question form and actually we didn't actually do the reducers yet so let's go inside here so we'll basically just copy all of this stuff here the assignment details start and all the way up to the success and I'll just copy and paste that there and this will be the create assignments thought this will be create assignment success and then create assignment fail and then here we'll add in three more cases the way this one will be create assignments start and we'll say create assignment start and this will be create assignment success which will be create assignments exists and the fail one and let's just go handle what happens there it's pretty much going to be the same thing except we don't get any assignment action there and pretty much that's it there so we can close the reducer and we'll go into our backend now so let's go to API and we're going to need to go to our views here we have the assignment view set and so basically you can actually override the methods on a view set and you can check that in the documentation of the Django rest framework so for example if you wanted to override the create method you could just say define create which takes in self and a request and the basic logic that proceeds when the create method is executed is that it uses the serialize it so the assignment serializer in this case which is in serialize of pi so it would take the serializer and we would pass in the request data into the serializer then we would say if the serializer is valid then using the serializer creates an assignment because that's what the serializer basically does converts the JSON into an object and then return a response which is either an HTTP 201 that means it's created or returned an HTTP 400 which means it's a bad request so basically we will say that the serializer equals to the assignment serializer this one here and we say that the data equals to the request data which is coming here inside the create method and then we just say if the serialize ODOT is valid then proceed otherwise you can just call it like this you have to do that otherwise it won't let you move on and then we'll just say that the assignment object equals to serializer dot create the request remember this will only happen if it's valid and we can actually just do that if serializer is valid and we'll say if there is an assignment then we will return a response and the response we can import from the rest framework so we just say from rest framework dot response import response and then we'll import some statuses as well we'll say from rest framework that status import and we're going to need the 201 which is created and we're going to need the 400 bad request and then we'll just grab that there and say return response where the status equals to HTTP 201 created otherwise return a response where the status equals to the HTTP 400 bad request and you can put that like that cool so this assignment serializer dot create this is a method on the serializer so if you come here to the Syrian laser we can actually define that create method and that's gonna be quite handy because the data that we're getting in in the serializer is really just not going to match what the serialize is expecting so we're going to override the create method on the serializer to pass all that data into exactly how we need it to be passed and then create the objects that need to need to be created so for example the choices and then assign the choices to the questions assign the questions to the assignment and return the assignment basically that's what we're doing and so it is quite a long method so we'll say define create and it's going to take himself and request and remember this request is what's being passed in here this request there so we get access to the request up data so we'll say request that data equals to that data and we can actually print it out as well so let's test it out we'll add a title will say question one answer is yes choice yes and no click Submit and let's see inside the terminal and here you get the teacher is Matt titled as title questions is a list of objects where we've got title as question one choices is yes or no and the answer is yes cool so with this data we basically just need to think about what we need to create in terms of models so so far we've got the assignment to the question and we need the choice as well and so we'll start by creating the assignment so we'll say the assignment equals to an assignment object like that and we're going to need to assign the teacher and the title to the assignment so we'll say the teacher equals two user objects get where the username equals two data of teacher remember teacher is Matt in this case so we're getting the user object that corresponds to that username and we're going to need user imported so say from user dog models import user and if we come back down here then we can say that the assignment teacher equals to teacher or say the assignment title equals to data of title and then we say assignment dot Save cool so that is the assignment being created now we need to create the questions and the way that we're going to do that is just by looping through this list of questions and accessing these properties inside that dictionary so we'll say for question Q in data of questions and that's going to return a list then we'll say that the new question equals to a question object because remember we have to create a new object every time we loop through this and we'll say that the new question title or rather the question actually because that's what it is on the model equals to Q of title so that's the actual question that's being asked and then we'll say that the order equals to some kind of integer which will loop through over here we'll say order equals one for the first one and we'll say that equals to order and then we can say new question that's save and we'll increment the order at the end of the for loop so there's the new question now we need to assign the choices to that question so we'll say for choice in question of choices we'll say the new choice equals to a choice object and that new choice title will be equal to C which is what we're looping through and then we can just save the choice and then add the choice to the new questions choices so say dot choices add the new choice like that and then we just need to add the answer to the question as well so we'll say new question answer equals to the choice object that we created we don't want to create another choice object we can basically just fetch the one that was already created so we'll say choice objects get where the title equals to q of answer and then we can assign the assignment of this question equal to the assignment that was created at the beginning of this create method so this assignment here and then we can save our question and then tally our order by saying order plus equals to 1 and at the end of all that we can say return the assignment so there we go that's our create method and if we come back and click Submit it seems you've got an error connection refused so let's see why that is we assumed got from user dot model so this is meant to be from users and let's try that again click Submit and this time we get a 401 unauthorized and that's because we're not logged in so we'll just log in and we actually might just need to refresh the page here so we'll log in again and let's click on create we'll add a question now let's check that it wasn't created here and I guess I wasn't so that's good so this will be the first real assignment and we'll say this is is this cool so the answer is yes choices are yes and no and we'll add another question yeah and say does this work the answer is yes choices are yes and no submit we get a 500 error again let's see and it's telling us that there's a not null constraint which is the answer ID so let's go back here back down this is most likely happening because by default the serializer is expecting us to pass in an ID so let's just try and go to the models here and what I'm going to do here is say blank and null equal true and it's just to stop the server here and we'll just say make migrations and then say migrate and it's just runs over here and if we come back and submit this I'm getting the same issue on the API question assignment ID so again let's just add the blank and null equal true to that and this is obviously a temporary fix this is not something that actually makes sense so let's try it again now we'll submit it another 500 and now we're just getting get returned more than one choice so that means that it was actually created so let's go back into here and refresh this okay so we've got first the first three real assignment is created three times so let's just delete those there and let's see what we need to get rid of let's just get rid of all those yes or knows and did that and then we can go to the questions you've got does this work on question two okay so now let's click Submit and okay we're returning to again so that's that's delete everything okay cool now let's try it again or click Submit and okay I can understand why this is happening now it's because we're passing in the choices as yes and no for both of these questions so what's happening in the serializer is that it's creating those without even checking if they are actually existing so another way to do this would just be to use the get or create method but what I'm going to do is just for the time being we will just delete those and change the answers that we're submitting so we can come back here into this and we'll say does this work on so let's just make it true and we'll say choices are true and false and if we click Submit now we didn't get any errors there and maybe a post request returned to o1 and if we go back to the home view there's the first real assignment and okay so we've got this navigation error let's go fix that and we can navigate into source and then the assignment list you can just close that there and this is not meant to go there this should rather go to the ID there so we'll just change this to be item dot ID and that should work so let's go back home here and I'll click on now and it takes me to number seven cool there we go so we've implemented the create form pretty much correctly there's one or two problems that exist and I'm sure those can be fixed but I'm not really too worried about exactly how functional that is we can always tweak that later and the bottom line is that we were able to get this form to work so now you can create these assignments here on the front end and see them in this list display meaning that they are created in the back end so now we're able to create assignments and what we want to do to finish off is to add some functionality to create a graded assignment so if we take a look at the API models we originally created these four models and one of them is the graded assignment which basically is just created once somebody actually takes this assignment and actually just fills in the answers and clicks to submit the assignment so what we want to do is just add functionality to handle that in the back end and also display the person's created assignments on their profile and so if you'd like to follow along you can go to get up to our teach me django repository and head over to the commits the last one was this assignment creation working commit where we finished creating the assignment logic on creating those assignments in the backend and so this is where we'll be continuing in this one so once you've got everything ready and your editor then let's get started so what we're going to do to get started is create a graded assignment list view which will inherit from the list API view from the Django rest framework and so what we'll just do is come to the bottom here off to the view set and we'll just create a class and call this the graded assignment list view and we're going to import from Django's generics to handle that so we'll say from the rest framework that generics import the list API view so we'll inherit from that list API view here and that means all we need to do is to specify the serializer class which will be the graded assignment serializer so we don't have that yet so we'll just go and create it now and so we'll just call this the graded assignment serializer let's just copy that right there and we actually need to import this modelled in so this will be the graded assignment serializer which will just inherit from the model serializers and again we'll specify the class meta where we will specify the model as the graded assignment and will say that the fields are all the fields and so if we think about what all those fields are it would be the student the assignment and the grade now just like how we have in the assignment we have the teacher which is using the string serializer to display the user via its username so I'm going to do the same thing for the student because otherwise we're going to get the student ID and that's not useful so we'll just say student equals to string serializer many equals false and so now we just take that graded assignment serializer and we just imported here so from dot serializers and we specify that is the serializer class and we can also set the query set to be the graded assignment objects that all and so this assignment ListView actually will need to import the model day as well we'll take that ListView and we're going to go into the graded assignment URLs and currently we have the default routes a but we're not going to use the Rooter instead we'll use just our custom views so we'll just create a list there and we can get rid of that and say from API dot views import graded assignment list view and we'll say from Django dot URLs import path and then here we'll create a path which goes to just this empty string and then use the graded assignment list view dot as view and we can get rid of that day as well cool so everything seems to be working and we can head over to the localhost and if we go to graded assignments then we're going to be asked for authentication credentials so let's create the logic here on the profile to display a list of graded assignments so we'll come back here and go to source and then into containers and to the profile and so we need to actually make sure that we're being sent to the correct URL because it's meant to be profile / and now we see that username there so let's just go to the layout and this is meant to go to profile that link there and there we go and so we basically just want to return a list of items so we'll just go here to list from nd and we'll take the same thing we used earlier so we'll copy all that and just come down and paste that beer and all we need is this large size there and we can go and delete all of that there and then what we'll do is inside the stove well then just paste all of that there and we'll make sure that we wrap that inside an h1 and actually just get rid of that h3 there as well and the data source I'll just make an empty list for now we can remove the header and the footer and we need to make sure that we import this list here at the top so we'll just paste that there and there we go now let's check it over here cool so that now we're just getting no data coming through and we want to use a component here which is basically like a progress component so if we just go down you'll see this here and a feedback and we get different kinds of progress components I'm just going to use the mini circular progress bar and it's very simple to use we'll just copy that and we'll just go into the components and return a result jeaious component here we'll say import react from react and we'll say that our constant result takes in props and then just returns a progress item so that's import that at the top like this and all we want is one progress item and we can actually just use parentheses like this so it's going to return a progress item like that and the percent is going to be equal to props grade which will pass into the component and the width we can keep there just like that and I'll just say export default result and then that result we can take into the profile here and say import result from that components result and we will render each item to be a result instead of being a list item so this will be result and this will just say is a assignment so for each assignment we'll return a result where the key equals to the assignment ID well graded assignment ID and the grade is equal to the assignment dot grade like that and now we just need to pass in the data source as the information that we get as the dot we get from the back end so we're going to go and create a new reducer to handle all of that so inside the store we've got the assignments and we'll just create another one here which will be the graded assignments j/s and it's going to be similar to the assignments that we have you already so I'm just going to get everything from the get assignment list and paste that all in there so we've got get assignment list start and we're going to need to add new action types in here as well and this could be just something like this get graded assignment list start fail and success and then we can use this here in our graded assignments actions so we'll call this one the get graded assignment list start and then get graded assignment list success and get graded assignment list fail and then this will be get graded assignments and we're going to need to take in the user name as well we could also filter the users by the token but we'll just pass in the user name to make it easier and instead of getting assignments this is going to go to graded assignments instead and we will do the same kind of thing here will dispatch the get graded assignment goes to start and get greater Simon to success and get graded assignment list fail and just pass in the error there cool so that's the methods that look to be taken care of and we just need to do the same thing in our reducers now so we'll create graded assignments jeaious and this will be the same sort of thing as what we have here in the assignments so everything from there I'll just paste that there and then we need the reducer here so we'll copy that paste that there we don't need a lot of these here so let's get rid of all of that there so we only have these three and we don't need the current assignment either those will be assignments this will be get graded assignment list and there and there and this will be get graded assignment list start which will dispatch this one and then we'll just put the rest of them in yeah and there we go that's pretty much our reducers taken care of there and our actions so we can close that one there and I'm just going to keep this one open for now so we'll head over to the profile and here we're going to use the same kind of logic as we did in the assignment detail we'll just copy the component did mount and will receive props and then we'll add those methods in there and we are giving the token already so if the token is undefined oh it's not undefined rather then we're going to dispatch a method and we're going to import that from our graded assignments so this comes from store actions graded assignments and this is the get graded assignments so we'll say this stuff props get graded assignments which we'll take in this dot props username and the token and then the same thing here dispatch get graded assignments with new props username and new prop star token and we've got both of those in the state there and then we just need to pass in the get graded assignments method here which will take in username and token and we will dispatch get graded assignments of the username and the token just like that then we pass our map dispatch to props inside the connected and let's see what this looks like so let's just refresh that there and cool so now we just need to pass the graded assignments into our state with state dot graded assignments dot assignments and we need to get that reducer in there as well so let's go to the index.js file and we'll just copy this one and make this the graded assignment reducer and make sure that this comes from graded assignments and then this will be graded assignments which is the grade an assignment reducer cool so we've got that set up and now we can access that via the state and now we just need to pass this as the data source and list so like that and this is actually min to either stop prop stop graded assignment and cool so now let's go into the admin and we'll create a graded assignment so just add one day we'll say the student is math assignment is the first real one and we'll say 50 is the grade now if we come back here and refresh that and we just needed to add the correct action names here or action types rather and now if we check if it works cool there we go and we can actually get rid of the bordered in this table and if we come back here there we go and lastly we can also add the loading here which will come from States dot graded assignments dot loading and we'll just come in here and say if this dot props dot loading then we'll return a skeleton so let's grab the skeleton from there and we'll just say turn the skeleton with active otherwise all this stuff will be rendered out and we'll need to get a higherorder component in this I'll say import the hoc which comes from hoc and this is just hoc like that and we'll just wrap it like that instead of the div and we'll also return it around this as well cool now we come back and there we go now the only issue is that instead of returning the graded assignments for the user Matt we're returning all of the graded assignments and that's not what we want to do we win what we want to do is actually filter this inside our view so let's go back to the API and then views and here in the graded assignment list view we're saying that the query set is equal to greater designed objects at all so that means that for every single person who uses the ListView they're going to get all the graded assignments back and that's obviously not what you want you want the assignments that you have completed so what you can say is define get query set and this just takes in self and then we'll start off by saying that the query set is equal to all the objects but then we will get the user name from the URL so basically what we'll do is we'll query instead of graded assignment let's just find this here in our actions instead of querying it like this we're going to pass in an extra parameter here which will be username equals two and then we'll just output this dynamically and that will be the username that's being entered in the function here so this kind of query is what we'll look for in our view so over here we'll say that the username equals to self dot request query parameters dot get the username or none and we'll say if the username is not none then we'll say the query set equals to the query said we currently have and then fall to that where the student double underscore username so basically the users username is equal to the user name and then we'll just say return the query set whichever that may be so now if we come back we're obviously going to get the one that we created but let's go back to it and change this to be the test user and if we refresh this now now we don't get that data coming through and okay we're not logged in either so let's login as well so let's go to profile and now we see hi Matt and no data coming through because this one is not for the user Matt so now we know that that's working and we're retrieving the graded assignments that are for that specific user so now all we need to do is just whenever we complete an assignment like this one then once we click that submit button here all this done will actually change that button name so we'll just go to the source containers and then assignment detail and let's just go down here and this is going to be inside the the questions so let's go to containers questions and then this will just be submit like that and if you click Next now the button says submit and when you click Submit it will process this in the backend so that's also instead of saying message success like that what we can do is just handle this here will say handle submit and what we'll do is just grab that there and call this dot handle submit and come back in here say paste that there and then we'll do the rest of the logic there and actually instead of handing the submit here we already have most of the logic on the assignment details so I'm going to cut that out and paste that there and then here when we click the submit button will call this docprops/meta.xmlpk ándale submit and we can actually just make sure that we call this function like that and we'll do the same thing here so when we handle submit we're going to say message dot success so that comes from Andi so we'll import it like this so now we have it here so we'll say submitting your assignment and so now we just need to handle the logic in the store where we will create a graded assignment so we'll just go to the store assignments and I'm just going to copy the create assignment method here I'm not going to handle all of the reducer stuff so we'll just go in to graded assignments like this and just create our function like that and this will be create graded assignment which will take in a token and assignment and it will post to graded assignments like that and we won't dispatch any method cyclist either so basically we're just posting to the server and we'll just say console.log success if it went through correctly and so our assignment needs to actually have a few things it needs to have the assignment ID that it corresponds to it needs to have the answers that the user provided so that we can verify that on the server and it needs to have the username of the person that created the assignment and we're going to bring this into the assignment detail so it will just import it here and then we'll take this graded assignment here and we'll say this props create graded assignment and come all the way to the bottom and add our method here which we'll say takes a token and assignment and say dispatch create graded assignment of the token and the assignment and so now when we call this method over here we're going to need to pass in this dot props token and then a assignment as well so the assignment we can just say constant assignment equals to an object and we'll say that the user name is this dot props the user name and then we need the assignment ID and we'll also need the answers so our way answers are the user's answers to the assignment and the way that we can pass in the assignment ID is just by accessing this dot props dot current assignment dot ID where the current assignment is here in the state already and then the answers we'll need to somehow store which we already are we're storing that in the state we have the user answers like that so we'll just pass that in as the user answers like this and then just say create the graded assignment with the token and the assignment like that and so let's see if we've got any errors you've got user answers so this is meant to be a clone of that so we'll just say constant user answers equals to this dot state and there we go so let's just select this is this cool and does this work true click Submit and we get method not allowed on graded assignments and that's correct because we haven't set up a path to handle that yet so let's bring this to the front there and currently we only have the assignment list view so let's import the create API view as well and then we'll say class graded assignment create view which inherits from the create API view we'll say the serializer class equals to the graded assignment serializer and we'll set to the query set equal to the graded assignment objects dot all and so we're going to need to override the method of creating the graded assignment because we're passing in data that it's not really understanding or knowing how to handle so if we take a look at the serializer then here we have the graded assignments serializer and we can close questions and graded assignments for bit so just like how we overrode the create method on the assignments you realize we're basically going to do the same thing here for the graded assignment so we'll just copy that there and paste this there and we'll go to the view here and we're going to override the method of creating on this create API view and the way that you do that is just by overriding the post method so we say define post which takes himself and basically we're doing the same thing as what we did here in the assignment view set so let's just take all of that there and paste that there so again we're taking a serializer in this case it's the graded assignment serializer pass in the request data if the serialize is valid then we'll say that the graded assignment equals to serialized dot create the request where we'll handle the create method here and if there is a graded assignment then return an HTTP to a1 and otherwise that and now we just need to work on the logic here and so for the time being let's just go and print out the data so that we can see it come through so we'll say submit and if we come back here to the terminal then we're getting that method not allowed right so let's open up the store again just to fix that URL and we'll say that this goes to slash create and then you know URLs will create a path here which goes to slash create which will be the graded assignment create view which will handle this for you like that cool so we can close that and now if we come back here and do it again now it's just a bad request so if we check that and so let's just go back to the view here and we see we are using the graded assignments serializer we're passing in the request data and let's just create a print here to say print the request data like that now if we come back click Submit so we see assignment ID is 7 and then we get the answers as one being yes to being false however we're not getting the username which is the stock prop start username so if we come down here let's just add that one in there use name is state dot or dot username now if we come back here we'll submit it again and if we come back here now we've got the username coming through there and so let's try and handle this in the create method now so basically what we want to do is grab the assignment that has an ID of 7 so let's make sure we have everything imported here we do so we'll say that the assignment equals to assignment objects dot get with ID equals to the data of assignment ID and then we also want to get the student corresponding to the username source a student equals to user dot objects get where the username equals to data of username and now we want to create a graded assignment source a graded assignment equals to a graded assignment like that and we'll assign the assignment as the assignment we just grabbed like that and let's just bring us down a bit we also want to assign the student equal to the student that we grabbed here as well and now basically we want to compare each questions answers to the answer that the user selected and basically to store like a like a count of how many they've gotten right and then compute how many they got right as the percentage of how many questions they were and assign that as the grade so what I'm going to do is say that the questions equals to a list of questions for all the questions in the assignment so this assignment that we grabbed here we're going to say this is equal to Q for Q in assignment questions all so that will basically take all of those question objects and store them in this list and then the next thing we're going to do is grab the answers from the request status answers so if we look at this object again answers is an object with the keys being 1 & 2 & etc so one way that we could do this is by saying that the answers equals to a list of data answers of let's say a for a in data of answers basically what we're doing is were saying for every key inside data of answers get the value that's why we pass in a inside the list to index the key from data of answers remember data of answers is a dictionary so we get all the keys from the dictionary and then get the value of the key from inside the dictionary and we're basically creating a list of values from the dictionary and then what we just do now is just compare the answer for question compared to the answer inside the answers list so we could just say for I in range of length of questions so we'll perform the loop however many questions they are and say if questions of I to access that first element of the questions list dot answer that title is equal to answers of I so what that means is that if the answer of the question we just checked in the list is equal to the user's answer then we'll add one to the users count so we'll just say that the answered correct count equals zero and then here we'll say onto the correct count plus equals one and in here we'll just increment the counter I to loop through the next item in the list so it'll go through all the items in the list and then you have an onset correct count which will be how many they got right and the length of questions is how many questions they are so we just say that the grade equals to the answered quick count divided by length of questions and then we'll just say that the graded assignment grade equals to the grade that we just calculated and then we'll just say graded assignment let's save and return that graded assignment and there we go that's our method of creating the graded assignment so if we check everything is still working so let's come back here and click Submit and we're still getting a bad request on this URL and that's most likely because we don't have a student that corresponds to the user that just submitted this so let's go back to home and we actually haven't registered that model in the database so let's go to users and then admin and we'll import the student and then at the bottom here we'll just copy this one here and say this is the student and come back here and refresh this now you've got the students there and of course we don't have the student format so let's just create a student day and save this as Matt and now if we submit it we're getting another one here so let's go back to the assignment and see why this is and so what I'm going to do is actually just get rid of the if statement here because most likely the serializer is not valid so we only just need to call that so let's just do it like that and if we come back in here and submit this now we get success so if we take a look in the admin and go to graded assignments now we can see to come through there and this first one is worth 50% and let's just see why that is if we go back here we said isn't is this cool yes does this work false let's say this is true and submit it now and if we go back here and check the latest one now we get one and what we can actually do here in the serializer is if we come down we can say that the grade equals to this times 100 so that now if we submit that come back to graded assignments now it's 100 and we can go to our profile and yeah so that's why we were getting 0.5 percent 0.5 and 1 percent whereas it should be a hundred percent cool so now those methods are finally working and we've basically completed everything that we set up from the moment we demoed the application which was the ability to create custom users to actually get that data in the front end store everything with authentication to create assignments and I know we're not adding too many validation checks to see if the user actually is each or not but those are small things that you can add in to complete everything and then lastly we added the functionality to create a graded assignment which is very cool so all you do is just fill in the answers to the assignment and there you go it creates the graded assignment for you yes you can fill in that form as many times as you want it's not actually checking whether you've done it before so again there aren't many validation checks in place but that's besides the point it's more to show you how you can create the different users and get that data across into the frontend because that's really the biggest effort is it's in learning how to customize those serializers learning the methods that you can override and it gets really tricky when you have nested relationships and foreign keys so learning about serializers can actually be quite beneficial as we've seen so that ends off this tutorial series for the time being if you enjoyed this video make sure to leave a comment down below and let us know what you thought about the series and if there are any other things that you think we should be adding into it or concerns that you have and other than that thanks for watching don't forget to subscribe and we'll see you in the next one
