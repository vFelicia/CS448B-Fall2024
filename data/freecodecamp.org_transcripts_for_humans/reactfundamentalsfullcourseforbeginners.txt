With timestamps:

00:00 - hi
00:01 - my name is ed and i'll be your
00:02 - instructor for this reacts fundamentals
00:04 - course
00:05 - in this series we'll be creating a
00:07 - simple react bar single page application
00:09 - which will allow us to search and
00:11 - investigate through popular tv series
00:13 - we will cover such topics as gsx
00:16 - components and containers state props
00:19 - conditional rendering react router and
00:21 - much much more
00:23 - what you'll need is some knowledge of
00:24 - javascript html and css
00:27 - the course will contain some es6 and es7
00:30 - syntax but don't worry i'll explain
00:32 - everything along the way
00:34 - i will not be assuming that you know
00:36 - anything about react so each and every
00:38 - line of code will be explained with
00:39 - great detail
00:41 - in this course you will not only learn
00:42 - how to write react code but you'll also
00:45 - find out how to maintain and organize
00:47 - your code base to keep your code as
00:48 - clean and readable as possible so pick
00:51 - up your id and try to code this app from
00:53 - scratch along with me in this reacts
00:55 - fundamentals course
01:00 - we will be using an official react
01:02 - boilerplate created by facebook's team
01:04 - you also need to install
01:06 - node.js on your local machine i already
01:09 - have it so i'll skip the installation
01:11 - part but you can download it on
01:13 - nodejs.org
01:15 - let's go back to the github page and
01:17 - first of all what you need to do is you
01:18 - need to npm install
01:21 - create react app with the global flag
01:25 - and this will take a few seconds
01:29 - now that we have it installed uh you can
01:31 - go back to create react app github page
01:34 - scroll down a little bit and here you
01:36 - can see the quick overview
01:38 - um i don't need to use this npx
01:41 - so i'll just copy create react app
01:45 - paste it in
01:46 - and the first argument is the folder
01:48 - name i can actually show you if i
01:51 - remove
01:52 - the folder name if i press enter
01:55 - it will say that i need to specify the
01:57 - project directory
01:59 - for example create react app my react
02:01 - app
02:02 - and i'll do just that and i'll name
02:05 - my app tv series app
02:10 - so this will probably take a while
02:12 - a minute or two
02:15 - now that our app has successfully been
02:17 - created
02:18 - i'll change directories
02:22 - to
02:23 - the tv series app and i'll type in npm
02:27 - start
02:29 - press enter and this should spin up
02:32 - the development server
02:35 - if you're spinning it up for the first
02:36 - time it will probably take a while
02:38 - and congratulations on setting up your
02:41 - react environment
02:48 - what you're seeing right now is the
02:50 - boilerplate that create react app
02:51 - provides us let's open up the code
02:54 - editor and see what's inside
02:57 - i'll be using adam but any other ide
02:59 - will work just fine
03:01 - the gold for your app lives inside the
03:03 - src folder so we will be spending the
03:05 - majority of our time here
03:07 - the main file is syntax.js so let's open
03:09 - that up
03:11 - and here we can find find five imports
03:14 - let's talk about each and every one of
03:16 - them
03:16 - the first one is the react library
03:19 - itself without it you wouldn't be able
03:20 - to create react elements
03:23 - the second import is reactdom which
03:25 - initially was part of react library but
03:28 - was split into its own eventually
03:31 - it works as glue between
03:33 - react elements and the dom and usually
03:36 - you will just use it to render your app
03:38 - as we're doing here
03:40 - the third import is an index.css file
03:45 - so nothing too interesting going on here
03:46 - just a simple css file uh fourth import
03:50 - is the app component which we're
03:52 - currently rendering
03:53 - you can open that up don't worry if you
03:55 - don't understand
03:57 - what's going on here
03:59 - eventually you will after
04:01 - a couple of lessons
04:04 - and the last import is a service worker
04:06 - which will
04:07 - let the app load faster on subsequent
04:10 - visits in production
04:11 - we won't be looking into it as it's out
04:13 - of the scope of this course but i will
04:15 - provide a link below and you can read
04:18 - about it if you like
04:20 - so let's talk about reactdom rounder
04:23 - method it can take up to three arguments
04:26 - the first one is the react element
04:28 - that we want to render
04:30 - the second one is the dom container in
04:32 - which we want to render our react
04:33 - element
04:34 - and the third one is an optional
04:36 - argument you can provide a callback
04:39 - function to it
04:40 - we won't be doing that but there you can
04:42 - store whatever logic
04:45 - you want
04:46 - and if you're wondering where this
04:49 - root element lives it's under the public
04:52 - folder
04:53 - index.html file i've already changed the
04:57 - title to tv series app you can do that
04:59 - if you like and here you can find
05:02 - the root element
05:04 - i mean the div element with the id of
05:07 - root so let's close index.html
05:13 - and let's try to create our
05:15 - own react element and render it
05:18 - to the dom
05:19 - so i'll create a variable
05:22 - with the name of greeting
05:27 - and all assigned
05:30 - create
05:32 - element
05:33 - to it
05:34 - and also this
05:36 - method takes up three arguments the
05:39 - first one is the tag that we want to use
05:42 - i will be using an h1 tag
05:45 - oops
05:46 - the second argument
05:49 - is the props that you want to provide to
05:52 - your element
05:53 - don't worry if you don't know what props
05:56 - mean
05:57 - you will find out in later lessons but
05:59 - for now i'll only provide an empty
06:01 - object
06:02 - and that will work just fine
06:04 - and the third argument is the string
06:07 - that we want to use inside our h1 tags
06:12 - and
06:12 - i'll just say hello world
06:19 - take
06:21 - the greeting variable
06:23 - pass it into the render method
06:26 - save index.js
06:30 - and now we're seeing
06:32 - our newly created
06:33 - react element with hello world
06:37 - greeting attached
06:43 - inside app.js we're seeing a different
06:45 - kind of syntax
06:47 - this bit of code also creates a react
06:49 - element but it's using a syntax
06:51 - extension to javascript which is called
06:54 - gsx
06:55 - as you can probably tell this looks a
06:57 - lot cleaner and readable so let's
07:00 - refactor our newly created
07:03 - react element to use jsx
07:07 - syntax wise it's really similar to plain
07:10 - javascript so just open up h1 tags
07:14 - and type in hello world
07:17 - save it
07:19 - and the result on our page hasn't
07:23 - changed one bit
07:26 - under the hood create react app
07:29 - is transpiling jsx element
07:32 - to react elements
07:34 - with the help of transpiler called babel
07:37 - if you're interested how the transpiling
07:40 - works
07:42 - i will provide a link below and you can
07:45 - read more about it if you like
07:49 - gsx also fully supports javascript so
07:52 - you can embed expressions inside of it
07:56 - let's create a
07:57 - simple function
07:59 - which will just return
08:01 - the
08:02 - current date
08:06 - inside of it create a data object
08:14 - and let's just return
08:16 - the
08:17 - current date
08:26 - okay so we can refer to
08:28 - this function inside our greeting
08:31 - variable
08:32 - um jsx uses a special kind of syntax
08:36 - which let the gsx parser know that it
08:39 - needs to interpret javascript
08:41 - expressions instead of a string
08:44 - and
08:45 - let's just type in current date and use
08:48 - this special
08:50 - syntax which is just the curly braces
08:55 - and let's refer to the function here
09:00 - save it
09:03 - and our
09:04 - page is
09:06 - now rendering
09:07 - the current date awesome
09:10 - also if you're
09:12 - interested
09:13 - uh this is just known as an arrow
09:16 - function so essentially
09:18 - it's
09:19 - identical
09:20 - to
09:21 - this kind of syntax
09:27 - again the end result hasn't changed at
09:30 - all so congratulations on using jsx the
09:33 - first time
09:40 - we already have an example component
09:42 - created for us by create react app let's
09:46 - render it back inside index.js file
09:50 - we can delete the code that we've
09:52 - written in the previous lessons we will
09:54 - be using it anymore
09:57 - and let's refer to the app component
09:59 - inside our
10:01 - render method
10:04 - now if you're wondering why we're using
10:06 - a different kind of syntax which looks
10:08 - more similar just to
10:10 - regular html
10:13 - that's because we're rendering a fully
10:16 - functional react component
10:18 - instead of just a simple variable with
10:21 - some gsx assigned
10:23 - so save index
10:25 - dot js file
10:28 - go back to your page check if everything
10:30 - is working correctly and it is
10:32 - so let's open up back the app.js file
10:37 - and we can see that we have
10:40 - a class created with the name of app
10:42 - which is extending
10:44 - uh class component provided
10:48 - for us by
10:49 - react
10:50 - and inside this class we have just one
10:53 - render method which is returning
10:56 - the jsx that will render inside our page
11:01 - so nothing too much difficult is
11:03 - happening here and we can easily make
11:06 - the changes to fit our needs so first of
11:08 - all let's delete the
11:11 - image
11:13 - and we can also remove the import here
11:17 - save it go back to our page
11:20 - and the image was successfully removed
11:22 - but we have a big
11:24 - gap
11:26 - under
11:27 - the title so
11:29 - open up app.css
11:31 - and find
11:33 - app header class
11:35 - and change the height instead of
11:38 - 150 pixels change it to 60 pixels save
11:42 - it
11:45 - this looks much better okay
11:50 - let's change our title to
11:53 - tv series
11:55 - list
11:57 - and instead of this intro text
12:00 - we will be creating our own
12:03 - first
12:05 - component
12:07 - so let's create a variable with the name
12:09 - of
12:10 - intro
12:12 - and assign the
12:14 - arrow function to it
12:17 - which
12:18 - for now
12:19 - will just only return
12:22 - this
12:23 - copied jsx here
12:26 - so be sure to add one argument with the
12:29 - name of props
12:30 - which is sure for properties
12:33 - in the upcoming lesson you will
12:35 - understand what that
12:36 - is and change the text
12:41 - to
12:42 - our
12:43 - first
12:44 - functional
12:47 - component
12:49 - and refer it
12:51 - here
12:54 - save app.gs
12:58 - and we have created our first functional
13:01 - component
13:04 - so both intro and app are identical from
13:08 - react's point of view although app has
13:11 - additional features
13:13 - since it's
13:15 - extending the component class
13:18 - provided by react
13:20 - we will discuss those additional
13:22 - features in the upcoming lessons
13:25 - functional components are called
13:28 - functional because they are literally
13:30 - just javascript functions which return a
13:34 - react element in our case we're just
13:36 - returning a
13:38 - simple
13:39 - gsx
13:41 - it's really important to have your own
13:42 - custom component capitalized
13:45 - since
13:46 - that's the
13:47 - syntax convention that gsx uses
13:51 - lowercase names will refer to built-in
13:54 - components so it will be just considered
13:57 - as
13:58 - simple html tags
14:01 - and capitalized names will refer to your
14:04 - custom components
14:12 - now that we have written our own react
14:14 - component we can make app.js a bit
14:16 - cleaner and create a separate file for
14:19 - the intro component
14:21 - under the src folder
14:23 - create a folder with the name of
14:25 - components
14:28 - inside the components folder create a
14:30 - folder with the name of intro
14:34 - and inside the intro folder create a
14:36 - file with the name of index.js
14:40 - let's copy our
14:42 - intro component from app.js
14:47 - pass it back here
14:48 - and remember to
14:51 - import react library since we're
14:55 - creating react elements inside this file
14:58 - all that we need to do is export
15:02 - the intro
15:04 - component
15:06 - and we're good to go
15:08 - by the way if you're wondering why we're
15:10 - using a sort of different syntax here
15:12 - this is just known as a shorthand syntax
15:15 - for arrow functions so what goes after
15:17 - the parentheses
15:19 - is returned from this arrow function
15:22 - and also one good thing to know is that
15:24 - if you're passing only one argument into
15:26 - your arrow function you can delete the
15:29 - additional parentheses
15:31 - here
15:32 - save it
15:33 - go back to app.js
15:36 - and let's import
15:39 - intro from
15:40 - components
15:44 - intro
15:46 - save app.js
15:49 - and nothing has changed
15:51 - on our
15:52 - page but what happens if we
15:56 - want to
15:57 - use a different message inside intro
16:00 - component ideally we want to reuse this
16:02 - component but right now it will always
16:04 - return just the same message
16:06 - that's where properties get in
16:08 - think of them just as functional
16:10 - arguments to your components
16:12 - so inside index.js we have one argument
16:14 - passing in into the intro component
16:18 - and here we can
16:20 - use those custom properties with the
16:22 - help of the props
16:25 - object so props is just a simple
16:27 - javascript object with all of your
16:29 - custom properties combined
16:32 - inside that
16:33 - app.js
16:34 - let's create a custom property to our
16:38 - intro component with the name of message
16:41 - and here we will add a string which
16:44 - we'll say here you can find
16:49 - can find
16:51 - all of your most
16:53 - loved series
16:57 - save up.gs
16:59 - and inside the intro component let's
17:02 - delete this string
17:04 - and just access
17:06 - the message property inside our
17:09 - props
17:10 - object
17:14 - save
17:17 - and as you can see we are rendering our
17:19 - intro component with uh custom property
17:26 - by the way you can pass anything you'd
17:28 - like so not only a string works you can
17:30 - pass in a boolean a number
17:33 - array or even functions
17:40 - it's time to start adding additional
17:42 - functionality to our app component
17:44 - components that extend react component
17:47 - class have additional features and one
17:49 - of them is state
17:51 - but what is state think of it just as
17:53 - plain javascript object to which your
17:55 - component reacts and renders whatever is
17:58 - needed
17:59 - let's create our state object
18:02 - and add a property to it
18:05 - with the name of series and for now this
18:07 - will only be just an empty array
18:11 - we can access the series array inside
18:14 - the render function by simply getting it
18:17 - from our state object so just to be sure
18:20 - that everything is working fine
18:22 - let's print out
18:26 - the length of series array
18:30 - to our page
18:31 - this state dot
18:34 - series dot length
18:38 - save app.js
18:42 - and the length of our series array is
18:44 - rendering to the page which is zero and
18:47 - that is correct
18:49 - so just to keep our
18:51 - project a bit more organized we already
18:54 - have components folder created so let's
18:56 - add another folder to it with the name
18:59 - of app
19:01 - and move everything that is connected to
19:03 - the app component to this folder so
19:05 - app.css
19:07 - app.js and app.test.js
19:12 - since we moved it to a different folder
19:14 - we need to change the directory for our
19:17 - app
19:18 - component
19:19 - so
19:20 - just like that
19:23 - also we need to change the name of our
19:27 - app component since we already have a
19:29 - folder name for it so just to make it
19:32 - easier i'll just rename it to index.js
19:35 - that way we can import it
19:38 - just like our intro component and we
19:40 - don't need to specify
19:42 - the additional
19:45 - javascript
19:46 - file
19:49 - okay so everything is done inside our
19:52 - app folder so
19:54 - what's left is just to change
19:56 - the import inside index.js
20:00 - so since we move this to components
20:03 - folder
20:04 - let's add components
20:07 - save index.js
20:10 - and we have the same page rendering once
20:13 - again
20:19 - react class components have accessed the
20:21 - so-called life cycle hooks which you can
20:23 - wind your code when a particular
20:25 - component mounts unmounts receive new
20:27 - props and many other situations
20:30 - let's take a look into a method called
20:33 - component that mount
20:38 - it will be immediately invoked after the
20:40 - component has been rendered what do we
20:42 - do inside this method is completely up
20:44 - to us but for now let's create an
20:46 - additional array with the name of series
20:49 - which will hold only
20:50 - two elements for now and the first one
20:52 - will be let's say vikings
20:55 - the second one will be game of thrones
21:00 - let's use a set timeout function
21:03 - which will take two arguments the first
21:04 - one is just a function
21:06 - and the second one is the delay
21:10 - after which your function will be
21:11 - invoked
21:14 - inside the function let's use a set
21:16 - state method
21:19 - which will take an object
21:22 - as its first argument
21:24 - so what setstate does it tells react
21:28 - that this component and its children
21:30 - need to be re-rendered with the updated
21:32 - state
21:34 - so let's take
21:35 - the
21:36 - series property of our state object
21:39 - and assign to it our newly created
21:42 - series right
21:45 - save index.js
21:47 - go back to your page
21:49 - and the length of the series changed
21:52 - after 2 seconds
21:55 - let's go back to index.js and i want to
21:58 - show you a trick
22:00 - so inside your object if you're using
22:03 - the same names of your property you can
22:05 - actually
22:07 - delete this bit of code
22:09 - and this will just take the series
22:12 - properly and assign
22:15 - our newly created series array to it so
22:18 - save index.js go back to your page
22:22 - refresh it and the length of the series
22:24 - should be
22:25 - two after two seconds
22:33 - in order to send requests to the server
22:36 - first of all we need to install a
22:37 - library which will let us do it there
22:40 - are a lot of options out there but i
22:41 - personally love to use fetch
22:43 - we can install fetch with
22:45 - node package manager
22:47 - i'll just copy this bit of code and pass
22:50 - it into
22:51 - the command line
22:53 - press enter
22:57 - okay after installing fetch let's open
22:59 - up our app again by typing in npm
23:02 - start
23:08 - okay so we have our app running back
23:10 - again so let's go to the code editor and
23:12 - open up index.js file inside
23:15 - our app component and let's import
23:18 - fetch
23:22 - and let's just send out the request to
23:24 - the api whenever our app component
23:26 - renders uh obviously we want to do that
23:28 - inside component.mod method let's get
23:31 - rid of this bit of code and type in
23:33 - fetch
23:35 - which will take a url as its first
23:38 - argument
23:39 - we will be using a service called tv
23:42 - maze api which will let us obtain
23:44 - different kind of information for
23:47 - various tv series right here i'm just
23:49 - searching for tv series with the name of
23:52 - vikings
23:54 - and fetch returns a promise so obviously
23:56 - we need to resolve it and in order to do
23:58 - that we'll need to chain in that method
24:02 - which takes up a function as its first
24:05 - argument and inside this function we
24:07 - will have access to the response object
24:11 - so for now let's just console.log
24:16 - the response object
24:19 - and go back to our page
24:22 - open the console
24:24 - and here we can see that we're getting
24:26 - back the response object
24:28 - what we need to do right now is parse
24:31 - the results
24:33 - and get the json
24:35 - from this object
24:38 - it's really easy to do so what we need
24:41 - to type in is
24:43 - response
24:44 - json and this will just return
24:48 - the json from the
24:50 - response
24:51 - object obviously
24:53 - so what's great about
24:56 - promises is that we can chain
24:59 - that methods
25:01 - and
25:02 - what we're returning from
25:03 - [Music]
25:05 - this line will get back here so we'll
25:09 - get back the json and
25:12 - let's for now also just
25:14 - console login
25:18 - okay save it
25:21 - and we're getting back
25:22 - uh 10 items
25:24 - and
25:26 - let's
25:27 - take a look into few of them
25:29 - so
25:30 - the show id
25:31 - uh the url and the name of the series
25:34 - and we have a lot more going on inside
25:37 - the show object
25:39 - um
25:41 - so what we can do inside
25:44 - this method
25:45 - is that we can actually
25:48 - set the state
25:49 - of our app
25:51 - so let's use
25:53 - this set state
25:55 - and
25:57 - let's
26:01 - add in
26:03 - our series
26:05 - to the series property of our state save
26:08 - index.js go back to the page and we're
26:11 - getting back the length of series
26:13 - already 10.
26:15 - okay that's exactly what we wanted and
26:17 - just to be sure let's refresh it one
26:19 - more time
26:20 - and yes we're getting back the response
26:23 - from the api
26:30 - right now we launch an api request every
26:32 - time our app component renders but if
26:34 - you think about it does the app
26:36 - component really need to know about the
26:38 - tv series array or when and how the call
26:40 - will be launched the answer is
26:42 - definitely not we want to keep our app
26:44 - as modular and as simple as possible
26:47 - that means creating separate components
26:49 - when it's logical to do so
26:51 - in react there is a common pattern used
26:53 - known as presentational components and
26:54 - container components the idea is very
26:57 - simple inside your presentational
26:59 - components you would be concentrated on
27:01 - how things look you wouldn't specify how
27:03 - the data is loaded or manipulated and
27:06 - inside containers you would have all of
27:08 - your functionality that means how things
27:10 - would work how data is fetched and
27:12 - manipulated most of the time containers
27:15 - will be stateful that means they will
27:17 - use state to serve data to our
27:19 - presentational components
27:21 - okay so let's create a containers folder
27:23 - under the src folder
27:30 - inside the containers folder let's also
27:32 - add another folder with the name of
27:34 - series
27:36 - and inside the series folder let's add
27:39 - an index.js file
27:43 - import react
27:45 - component
27:48 - from react
27:51 - create a class with the name of series
27:55 - which extends component
27:57 - and let's render
28:02 - for now only a dev
28:05 - let's type in series container
28:09 - export default
28:12 - series
28:13 - okay
28:15 - inside our app component
28:17 - let's import
28:20 - series from
28:21 - [Music]
28:23 - container series
28:26 - and let's render it under
28:28 - our the length of all right
28:33 - message
28:35 - save index.js
28:37 - go back to the page and we're rendering
28:39 - the series container okay
28:41 - so what we need to do right now is we
28:44 - actually need to copy
28:47 - this code
28:50 - and let's paste it
28:52 - into the
28:54 - series component
28:57 - and we also need to
29:01 - get this message
29:03 - let's also
29:06 - paste it inside our
29:09 - div here
29:11 - let's save the series
29:14 - file
29:15 - then the component file and let's go
29:18 - back to our page once again
29:20 - and nothing has changed so we're seeing
29:23 - exactly the same result as we had at the
29:25 - start of the lesson but
29:27 - now we have divided the logic between
29:29 - separate components in the next lesson
29:32 - we will introduce a series list
29:34 - presentational component which will list
29:36 - our series inside an unordered list
29:45 - now that we have our series array return
29:47 - from the api call it's time for us to
29:49 - create the series list component which
29:51 - will render the tv series so under the
29:54 - components folder create a series list
29:56 - folder
29:59 - inside that folder let's add the
30:02 - index.js file
30:04 - import
30:07 - import react from react
30:11 - for now let's just create a functional
30:13 - component
30:15 - which will
30:18 - return
30:21 - uh just the div
30:24 - side that div let's type in series list
30:27 - component
30:30 - let's export defaulted
30:34 - and that way we can import it inside our
30:38 - series
30:40 - container
30:47 - okay
30:48 - now that we have that let's render it
30:50 - under the message of our series story
30:54 - length
30:55 - and i'll add in
30:58 - the list property
31:00 - to the component we'll get this
31:03 - list properly inside our props
31:07 - so i'll just pass in this state series
31:11 - uh
31:12 - here
31:13 - save index.js
31:15 - go back to the page see if everything is
31:17 - rendering accordingly and it is so let's
31:21 - go back to the series list
31:24 - component
31:25 - and we can delete this message
31:28 - let's
31:30 - add an unordered list
31:34 - inside that list now that we have our
31:36 - list property
31:38 - let's type in props
31:41 - list
31:42 - and we'll use a map function
31:47 - inside that function let's get
31:49 - the series
31:52 - and let's
31:54 - return
31:57 - a list item
31:58 - and inside that left side and what we
32:00 - want to do is show
32:03 - the name
32:05 - of our series so save that go back to
32:08 - your page
32:10 - and we're getting
32:12 - every single show name
32:14 - from our series all right good
32:17 - um so we want of course uh to look a
32:20 - little bit better we don't want these
32:22 - dots around flowing out here
32:24 - so what we can do is
32:27 - add
32:28 - class name
32:30 - and let's
32:31 - type in series
32:33 - list
32:36 - inside the series list folder we can
32:38 - create a
32:40 - index.css
32:42 - file
32:43 - and let's
32:45 - type in series list
32:49 - and
32:49 - [Music]
32:51 - less style type
32:54 - none now that we have that we of course
32:58 - also need to import it
33:00 - here
33:01 - so import
33:05 - index.css
33:08 - save that
33:10 - and we're not seeing the dots floating
33:12 - around on the left side also i don't
33:15 - like the padding on the left so i'll
33:17 - just remove that as well
33:20 - now this looks centered awesome
33:23 - one thing that's left to talk about is
33:26 - we're actually getting uh this warning
33:28 - from react so it says that each child in
33:30 - array or iterator should have a unique
33:33 - key prop
33:34 - so what we need to do is
33:38 - on our list item we need to add a
33:40 - property
33:42 - with the name of key
33:44 - and let's type in series
33:49 - shell
33:50 - id
33:52 - just to make a little bit
33:54 - cleaner
33:56 - okay save that
33:59 - uh open up the console and we're not
34:02 - seeing the warning anymore so what we
34:04 - did is we add a key to our
34:07 - list item so keys help react identify
34:10 - which items have changed or have been
34:12 - added or removed so the best way to pick
34:15 - a key is to use a string that
34:17 - uniquely identifies a list item harmonic
34:20 - siblings
34:22 - most often you will have an id for that
34:25 - to use your
34:26 - data as key but when you don't have a
34:29 - stable id for your rendered items you
34:31 - may want to use an index as a key just
34:33 - as the last resort
34:35 - just know that it's not recommended and
34:37 - you should always try to use
34:39 - an id
34:41 - that's unique for your list item
34:51 - it is possible to create additional
34:53 - components inside a component which will
34:55 - not be available outside of it this
34:57 - makes your code a little bit more
34:59 - readable and a little bit more semantic
35:01 - and
35:02 - it's just a good practice to use so
35:05 - let's create a
35:07 - a new variable with the name of series
35:10 - list item
35:12 - we'll of course pass props to it
35:16 - and let's return
35:21 - whatever we have inside our series list
35:24 - on order lists item
35:28 - and right here we can return
35:30 - series
35:32 - list item
35:37 - now let's pass
35:39 - series
35:41 - to it
35:45 - by the way we can also destructurize our
35:48 - props
35:50 - variable inside our series list item so
35:53 - we can just
35:54 - open up parentheses
35:56 - and type in series this will just take
35:59 - all of the properties whichever you want
36:02 - from your crops object so i'll save
36:05 - index.js
36:06 - go back to our page
36:09 - and literally nothing has changed
36:12 - so for now it may seem redundant that
36:14 - we're creating just a new
36:17 - component for a list item but later on
36:20 - in upcoming lessons we will be adding a
36:22 - little bit more information to it and
36:25 - then it'll be just a lot cleaner and
36:27 - simpler to understand
36:33 - in the previous lesson we were factoring
36:35 - series list component what we forgot to
36:38 - do is add the keep property to the newly
36:41 - created component let's go back to our
36:43 - code editor and copy
36:45 - the key property from the list item and
36:48 - paste it into the series list item
36:51 - component
36:52 - save index.js
36:56 - and the error is gone
36:58 - let's open up
37:00 - containers series index.js
37:03 - and right now we're only fetching series
37:06 - with the name of vikings but of course
37:08 - we want to make this process a little
37:10 - bit more dynamic
37:12 - under the length of series every message
37:14 - i'll open up a diff and inside of it
37:17 - i'll create an
37:19 - input
37:20 - with the type of
37:22 - text
37:24 - and i'll also assign an unchange handler
37:27 - to it
37:28 - so what this handler does is that
37:30 - whenever our
37:33 - input value changes it will fire an
37:35 - event to whatever method we assign to it
37:38 - i'll create a method inside the
37:40 - component
37:42 - with the name of on series input change
37:46 - we will be getting an
37:49 - event object from the
37:51 - unchanged
37:53 - handler
37:55 - and i'll cancel that log the event
37:57 - object and i'll also console.log
38:01 - the value of our input let's take on
38:05 - series input change and assign
38:08 - it to our input
38:11 - save index.js
38:14 - and let's type in something so i'll type
38:17 - in game of thrones
38:20 - and i'm getting
38:22 - the value of our input and i'm also
38:24 - getting the event object
38:28 - what we can do with that is we can
38:29 - actually
38:31 - copy the code from component and mount
38:34 - and let's paste it into the on series
38:37 - input change
38:39 - essentially what we want to do is make
38:41 - this part dynamic we can do that with
38:44 - the help of string interpolation
38:47 - inside
38:49 - javascript
38:50 - it's
38:51 - used with a very interesting symbol
38:54 - called grave accent it looks like this
38:58 - and i agree the naming is
39:00 - a little bit weird
39:03 - we need to wrap our url
39:08 - inside
39:10 - these
39:12 - symbols and let's take out
39:16 - the vikings the hard coded series name
39:19 - and what you want to do later is
39:23 - type in a dollar sign open up curly
39:26 - braces
39:27 - and let's copy
39:30 - the value
39:31 - of our input
39:33 - and paste it
39:35 - to the fetch url
39:38 - save index.js
39:40 - we're not getting anything from our
39:43 - series array and that is because
39:46 - uh we remove the component and mount
39:47 - method
39:48 - so if i type anything into the input
39:52 - let's say i'll type in the same vikings
39:56 - we're getting the same length of our
39:58 - array and we're getting
40:00 - the series dynamically
40:06 - it's time to add some conditional
40:08 - rendering to the page we only want a
40:10 - lawyer spinning up
40:12 - under the input whenever i type in
40:14 - something and we also want a friendly
40:16 - message which will say
40:18 - that no tv series have been found if the
40:21 - api does not give back any results with
40:24 - the given value of the input
40:27 - let's open up series container and we
40:30 - need to add
40:32 - a few more properties to the state
40:34 - the first one will be series name
40:38 - i'll just assign an empty string to it
40:40 - and it will just help keep track of
40:42 - whatever we have inside the input
40:45 - because currently we're not doing that
40:47 - and i'll also
40:50 - add an is is-fetching property and i'll
40:52 - set it
40:53 - to false
40:54 - and this will help us
40:56 - know whenever we're fetching something
40:59 - from the api
41:02 - let's get
41:03 - all of these
41:05 - properties
41:06 - inside
41:08 - the render method
41:11 - i'll just get those from this state
41:16 - and the first thing that i want to do is
41:18 - i want to set the value
41:21 - of our input
41:23 - to the series name so right now it will
41:26 - only be an empty string
41:29 - i'll also make it look a bit better
41:31 - let's save index.js
41:34 - go back to the page
41:36 - and now whenever i type something
41:39 - into the input it will show the results
41:42 - but it shouldn't show anything inside
41:44 - the input and that is because i'm not
41:47 - actually setting
41:48 - the value
41:50 - and we need to do that inside the on
41:52 - series input change method
41:55 - let's type in this set state
41:58 - and i'll set the state of series name
42:01 - to the target value and i'll also
42:06 - make the fetching true
42:11 - and of course after the actual fetching
42:14 - is done let's set this fetching
42:18 - to false
42:21 - now that we have
42:22 - all of our state management done we can
42:25 - actually go to the page and check
42:28 - if everything is working fine
42:30 - and let's go back to the render method
42:34 - and we can now actually add
42:36 - the conditional rendering to the render
42:38 - method uh first of all let's remove uh
42:41 - the length of series array message we
42:44 - don't need that anymore
42:46 - and just under
42:47 - the second diff
42:49 - i'll open up curly braces
42:53 - and here i want to check if the series
42:57 - length
42:59 - is
43:00 - zero then we will know that no series
43:03 - have been returned
43:05 - from
43:06 - the api
43:07 - and if
43:09 - the series
43:11 - name
43:12 - string i'll also trim it
43:15 - is equal to an empty string
43:21 - now we know that
43:23 - nothing has been typed in and the
43:26 - series
43:28 - all right is equal to zero so we don't
43:30 - have anything to show to the user
43:33 - so then we can type please enter
43:37 - series name into the input
43:42 - and let's open the second
43:46 - curly braces and whenever the series
43:49 - length is also equal to zero
43:52 - but we actually typed something in
43:56 - into the input
44:02 - then we know
44:04 - that
44:06 - nothing has been fetched
44:08 - from the api
44:10 - and we can tell that no tv series have
44:14 - been found with this name
44:19 - let's save index.js go back to the page
44:23 - let's double check to see if everything
44:25 - is working correctly so we're seeing the
44:27 - the message right now and if i type
44:28 - something into it
44:30 - the message is gone and let's type some
44:32 - gibberish
44:34 - and we're getting that no tv series have
44:36 - been found with this name good
44:38 - um okay
44:40 - so last thing that i want to do is i
44:41 - want to check whether we're fetching
44:44 - um
44:46 - something from the api
44:48 - so let's open up the curly braces again
44:50 - and i'll type in
44:52 - if is fetching
44:55 - is true
44:57 - then for now let's just show
45:01 - a loading message
45:03 - and if
45:06 - fetching is false
45:09 - i'll just show the series list
45:15 - again save
45:16 - index.js go back to the page and we
45:20 - should get the loading message whenever
45:22 - we type something into it
45:25 - and yeah we're actually getting it
45:28 - it's just fairly hard to see because
45:32 - the response from the api is fairly
45:34 - quick
45:38 - in the previous lesson we left a little
45:39 - bug whenever i type something into
45:43 - the input
45:44 - even though i'm still waiting for
45:46 - response from the api
45:48 - i'm already getting uh the message that
45:50 - no tv series have been found
45:54 - and that is because
45:56 - uh we didn't specify
45:58 - that we actually
46:00 - shouldn't be fetching
46:03 - whenever we want to show this message
46:06 - and the same goes for
46:09 - the message above
46:11 - save index.js
46:15 - and we're not getting that bug anymore
46:19 - the last thing that i want to show you
46:21 - is how to add an image
46:24 - with react so i'll create a folder with
46:27 - the name of
46:28 - loader
46:30 - inside of it i'll just add index
46:33 - gs
46:34 - import react
46:37 - create the loader component
46:45 - export it
46:48 - and i already have a loader gif
46:51 - inside
46:53 - my assets folder you can use whatever
46:55 - loader icon you'd like it doesn't really
46:58 - matter
47:00 - so what you need to do is you need to
47:02 - get the
47:03 - source
47:04 - of
47:06 - the loader
47:08 - and i'll just name it loader src from
47:13 - assets
47:15 - lower gif
47:17 - so essentially you're just importing the
47:19 - source
47:21 - and what i want to do
47:23 - here is create
47:26 - an image
47:29 - and i'll add in the src
47:35 - like this
47:36 - and we also want to provide an
47:38 - alternative property because react will
47:41 - give up warnings if you don't do that
47:43 - i'll just type in
47:45 - loader icon
47:49 - save your newly created component
47:52 - go back to the series container and
47:54 - let's import it
47:59 - from
48:00 - loader
48:05 - whenever we're loading we're not
48:10 - showing that old message anymore
48:13 - we want to show the loader component
48:16 - save index.js
48:18 - go back to the page and
48:21 - we're actually seeing
48:24 - the loader
48:26 - popping up
48:27 - inside our page
48:29 - i also want to do it
48:31 - make it a little bit smaller because
48:33 - right now it's really big
48:35 - and
48:37 - i want to show you how you might want to
48:39 - do that on an element level maybe you
48:42 - don't want to create a new
48:44 - style sheet for that
48:47 - yeah it gives you an ability to add
48:49 - styles
48:50 - to an element and you want to provide
48:53 - an object to it
48:56 - i'll say width
48:57 - will be
48:59 - 75 pixels
49:02 - and i'll save
49:04 - the loader component
49:06 - go back to my page
49:08 - and the loader icon is looking a lot
49:11 - better
49:19 - react router is the standard routing
49:21 - library for react
49:23 - i i've opened up the mpm page for react
49:26 - router and here we have a short
49:28 - explanation how we need to install this
49:31 - library into our app so it's saying that
49:34 - if we're writing an application that
49:36 - will run in the browser uh you should
49:38 - install instead react router dom
49:42 - so let's do that
49:44 - open up your command line and let's type
49:47 - in npm install
49:50 - of course we want to save it
49:52 - react router
49:54 - dom
49:59 - now that we have rack router dom
50:01 - installed on our application open up
50:04 - index.js and import
50:08 - browser
50:10 - router
50:12 - from react
50:14 - router dom
50:16 - and we need to wrap around our app
50:18 - component
50:24 - inside
50:27 - this component
50:36 - and this will keep track
50:39 - of your ui in sync
50:41 - with the url
50:44 - save index.js
50:46 - and let's open
50:48 - our containers
50:51 - series index
50:53 - and what i want to do next is copy
50:58 - the intro code
51:01 - i'll just delete it from our app
51:03 - component
51:06 - and paste it into the series component
51:11 - just above the input
51:13 - of course don't forget to import
51:17 - intro from
51:20 - intro
51:24 - save
51:26 - series container
51:28 - close it
51:29 - and we don't need the intro anymore
51:33 - here as well
51:36 - save that we're seeing the same result
51:38 - but we just made our app component a
51:41 - little bit cleaner and move the intro
51:43 - component into the series container okay
51:47 - the next step is to create
51:50 - an additional component we'll call it
51:52 - main and here we'll have all of our
51:57 - routes
51:59 - so i need to import react from react
52:04 - i also need to import
52:07 - the switch component and also the route
52:10 - component
52:12 - from
52:12 - react router down
52:16 - then i'll create
52:19 - the main
52:21 - component
52:22 - passive props
52:24 - and i'll return the switch
52:27 - and inside that switch for now i'll have
52:30 - only one route
52:31 - exact
52:34 - path
52:37 - and the component will be
52:39 - series
52:44 - let's export the main
52:47 - component and of course i also need to
52:50 - import the series container
52:54 - from
52:58 - from series container okay
53:01 - save index.js
53:04 - and inside our app
53:08 - component
53:09 - uh let's delete the series container so
53:12 - we won't be actually
53:14 - rendering it
53:16 - inside the app component
53:18 - but it will render the main component
53:23 - from
53:26 - main okay
53:28 - and i'll copy and paste it here
53:32 - save the app component
53:35 - go back to the page and nothing has
53:37 - changed um but right now we're actually
53:40 - using react router dom to
53:43 - render our
53:45 - series
53:47 - container and in the next lesson we'll
53:50 - add an additional page
53:53 - and then you'll see how
53:55 - we can render
53:57 - different pages with react router dom
54:06 - we want to show multiple pages on our
54:07 - application
54:09 - but right now we only have one container
54:11 - so i need to create another one i'll
54:12 - call it single series
54:16 - this container will show
54:18 - a
54:20 - series with a little bit more
54:21 - information than what we have on our
54:23 - series container
54:25 - and for that i'll need react and this
54:27 - will be a
54:30 - class component so i'll need component
54:33 - class single series
54:35 - extends component
54:38 - render
54:40 - return
54:41 - diff
54:43 - and i'll just type in single series
54:47 - inside the paragraph
54:49 - and export default
54:53 - great
54:55 - go back to
54:56 - the main component
54:58 - and import single
55:00 - series from
55:02 - containers single series
55:06 - and we want to add an additional route
55:10 - the path will be
55:12 - series
55:13 - and
55:14 - an id
55:16 - this idea will represent the idea of the
55:19 - series that we want to show
55:21 - and
55:22 - of course it will be dynamic well we
55:24 - will be getting it from the series
55:26 - container
55:27 - and i also need to add in the component
55:30 - to the route and it will be single
55:32 - series
55:35 - save index.js
55:38 - let's try and go to our newly created
55:41 - container so i need to write series and
55:43 - let's say one two three
55:45 - we're getting back the single series
55:47 - message that we just created
55:50 - it would be nice of course to get
55:53 - this id
55:54 - and we can try
55:58 - and look inside the props
56:04 - save that
56:05 - open up the console
56:07 - and what i'm looking for is the match
56:09 - property
56:10 - and inside the match property we have
56:12 - another object
56:14 - and it's called params and here we have
56:16 - the id
56:19 - that we want to show
56:22 - so i can actually just
56:26 - type in
56:28 - the show id will be
56:31 - this props
56:34 - and if i recall it correctly match
56:36 - params id
56:38 - match params id
56:42 - save that we don't need this anymore
56:46 - and we're getting back the id from our
56:49 - url
56:57 - whenever i type something in into
57:00 - our input
57:01 - i'm getting back the results that i want
57:04 - but i want the results to be linkable
57:06 - and i just show up as a simple string
57:09 - and for that we need to open up series
57:12 - list component
57:14 - we need to import link
57:16 - from react
57:19 - router dom
57:22 - and
57:22 - we need to add the link
57:25 - into the series list item
57:27 - and as the name implies this component
57:30 - that works just as
57:32 - a simple link
57:33 - and i want to link it to
57:38 - series
57:40 - series show
57:42 - id
57:43 - i'm just making uh
57:45 - the link dynamic and it will always show
57:48 - the correct id and link to the correct
57:51 - show
57:52 - with the id attached
57:54 - of the shell so save that
57:57 - go back to the page
57:59 - and i'll type in
58:00 - same series vikings
58:03 - and click on that
58:05 - and i'm getting the single series result
58:07 - with the id that i want
58:10 - with help of that id i can go back to
58:14 - the single series container and we will
58:16 - be fetching the series from the api with
58:18 - the id
58:20 - and since we will be fetching something
58:22 - i want to have the loader
58:28 - and i want to create
58:31 - state for the single series
58:35 - add one property to it it will be show
58:39 - and i want to
58:43 - fetch
58:44 - the show
58:45 - from the api i'll just copy the fetch
58:49 - from single or sorry from the series
58:52 - container
58:54 - and
58:56 - i want to
58:58 - fetch it to a different url of course
59:01 - because i will be getting only a single
59:04 - tv show
59:05 - and this is the dynamic part so this is
59:08 - the id that i want to use for my
59:11 - route
59:12 - i can get it back
59:14 - from the props
59:16 - i'll create an additional
59:18 - variable id
59:21 - and i'll destructurize the match params
59:24 - object get the id back
59:30 - and paste it into the url
59:34 - of course i also want to change the set
59:37 - state method because i don't have series
59:40 - or fetching properties anymore i want to
59:43 - have
59:44 - it set state to show to be json
59:48 - and now whenever our component mounts we
59:50 - will be getting back
59:52 - the show to our container
59:56 - uh so the first thing i want to do
59:58 - inside the render
59:59 - method i want to get the shell
60:03 - from the state
60:06 - and whenever the show
60:09 - is equal to null
60:13 - i want to be showing
60:15 - the loader
60:17 - and whenever the show
60:19 - is not no
60:25 - for now i'll just show a message that
60:29 - show
60:30 - has been loaded
60:35 - add it into paragraph tags
60:41 - and i'll also
60:42 - console.log the show for now just to see
60:45 - what it have
60:52 - it says that the show has been loaded
60:54 - and i'm actually getting back the object
60:55 - from the api
60:57 - um
60:59 - i'll reload it one more time so they can
61:00 - see the loader popping up
61:03 - yeah it's there just not showing
61:06 - um
61:07 - for a
61:08 - more lengthy amount of time
61:10 - okay
61:11 - so
61:13 - now that we have the show
61:16 - object
61:17 - we can start
61:19 - and
61:20 - showing the information that we want
61:21 - into the page so i will be showing
61:25 - the show name
61:30 - then i also want to show
61:34 - the premiere
61:38 - that will be inside shell
61:41 - premiered
61:44 - then i want to show the rating
61:48 - i'll be showing the rating average
61:54 - then
61:55 - episodes
62:00 - and that is
62:01 - a little bit more difficult one
62:04 - it's living inside the embedded
62:07 - property
62:09 - ah
62:11 - so hard to copy
62:13 - show
62:14 - embedded episodes length so i'm just
62:17 - showing the length
62:18 - of the array and that will be the count
62:20 - of the episodes and lastly i want to
62:23 - show the image
62:26 - alternative will be
62:29 - show
62:32 - and the source for that will be
62:35 - show image
62:37 - and i think that i want to get the
62:38 - medium sized one
62:42 - medium
62:44 - save that
62:47 - go back to the page and we're getting
62:49 - back
62:50 - the info that we want and just to be
62:52 - sure that it works okay
62:54 - uh let's go back to the
62:58 - main page and type in game of thrones
63:01 - which is also an awesome series
63:05 - so click that and we're getting back the
63:07 - results that we want
63:10 - we can close the console
63:12 - and if we are thinking that you can
63:15 - create an additional component for this
63:18 - html you're probably right but i won't
63:21 - be doing that and i encourage you to try
63:23 - it yourself
63:25 - this is the last lesson
63:26 - and i hope that you really like the
63:29 - series and
63:31 - i'm waiting for your feedback and please
63:33 - tell me if something was wrong
63:35 - and
63:36 - if you love the series just leave a good
63:39 - rating
63:40 - thanks and good luck
63:42 - working with react

Cleaned transcript:

hi my name is ed and i'll be your instructor for this reacts fundamentals course in this series we'll be creating a simple react bar single page application which will allow us to search and investigate through popular tv series we will cover such topics as gsx components and containers state props conditional rendering react router and much much more what you'll need is some knowledge of javascript html and css the course will contain some es6 and es7 syntax but don't worry i'll explain everything along the way i will not be assuming that you know anything about react so each and every line of code will be explained with great detail in this course you will not only learn how to write react code but you'll also find out how to maintain and organize your code base to keep your code as clean and readable as possible so pick up your id and try to code this app from scratch along with me in this reacts fundamentals course we will be using an official react boilerplate created by facebook's team you also need to install node.js on your local machine i already have it so i'll skip the installation part but you can download it on nodejs.org let's go back to the github page and first of all what you need to do is you need to npm install create react app with the global flag and this will take a few seconds now that we have it installed uh you can go back to create react app github page scroll down a little bit and here you can see the quick overview um i don't need to use this npx so i'll just copy create react app paste it in and the first argument is the folder name i can actually show you if i remove the folder name if i press enter it will say that i need to specify the project directory for example create react app my react app and i'll do just that and i'll name my app tv series app so this will probably take a while a minute or two now that our app has successfully been created i'll change directories to the tv series app and i'll type in npm start press enter and this should spin up the development server if you're spinning it up for the first time it will probably take a while and congratulations on setting up your react environment what you're seeing right now is the boilerplate that create react app provides us let's open up the code editor and see what's inside i'll be using adam but any other ide will work just fine the gold for your app lives inside the src folder so we will be spending the majority of our time here the main file is syntax.js so let's open that up and here we can find find five imports let's talk about each and every one of them the first one is the react library itself without it you wouldn't be able to create react elements the second import is reactdom which initially was part of react library but was split into its own eventually it works as glue between react elements and the dom and usually you will just use it to render your app as we're doing here the third import is an index.css file so nothing too interesting going on here just a simple css file uh fourth import is the app component which we're currently rendering you can open that up don't worry if you don't understand what's going on here eventually you will after a couple of lessons and the last import is a service worker which will let the app load faster on subsequent visits in production we won't be looking into it as it's out of the scope of this course but i will provide a link below and you can read about it if you like so let's talk about reactdom rounder method it can take up to three arguments the first one is the react element that we want to render the second one is the dom container in which we want to render our react element and the third one is an optional argument you can provide a callback function to it we won't be doing that but there you can store whatever logic you want and if you're wondering where this root element lives it's under the public folder index.html file i've already changed the title to tv series app you can do that if you like and here you can find the root element i mean the div element with the id of root so let's close index.html and let's try to create our own react element and render it to the dom so i'll create a variable with the name of greeting and all assigned create element to it and also this method takes up three arguments the first one is the tag that we want to use i will be using an h1 tag oops the second argument is the props that you want to provide to your element don't worry if you don't know what props mean you will find out in later lessons but for now i'll only provide an empty object and that will work just fine and the third argument is the string that we want to use inside our h1 tags and i'll just say hello world take the greeting variable pass it into the render method save index.js and now we're seeing our newly created react element with hello world greeting attached inside app.js we're seeing a different kind of syntax this bit of code also creates a react element but it's using a syntax extension to javascript which is called gsx as you can probably tell this looks a lot cleaner and readable so let's refactor our newly created react element to use jsx syntax wise it's really similar to plain javascript so just open up h1 tags and type in hello world save it and the result on our page hasn't changed one bit under the hood create react app is transpiling jsx element to react elements with the help of transpiler called babel if you're interested how the transpiling works i will provide a link below and you can read more about it if you like gsx also fully supports javascript so you can embed expressions inside of it let's create a simple function which will just return the current date inside of it create a data object and let's just return the current date okay so we can refer to this function inside our greeting variable um jsx uses a special kind of syntax which let the gsx parser know that it needs to interpret javascript expressions instead of a string and let's just type in current date and use this special syntax which is just the curly braces and let's refer to the function here save it and our page is now rendering the current date awesome also if you're interested uh this is just known as an arrow function so essentially it's identical to this kind of syntax again the end result hasn't changed at all so congratulations on using jsx the first time we already have an example component created for us by create react app let's render it back inside index.js file we can delete the code that we've written in the previous lessons we will be using it anymore and let's refer to the app component inside our render method now if you're wondering why we're using a different kind of syntax which looks more similar just to regular html that's because we're rendering a fully functional react component instead of just a simple variable with some gsx assigned so save index dot js file go back to your page check if everything is working correctly and it is so let's open up back the app.js file and we can see that we have a class created with the name of app which is extending uh class component provided for us by react and inside this class we have just one render method which is returning the jsx that will render inside our page so nothing too much difficult is happening here and we can easily make the changes to fit our needs so first of all let's delete the image and we can also remove the import here save it go back to our page and the image was successfully removed but we have a big gap under the title so open up app.css and find app header class and change the height instead of 150 pixels change it to 60 pixels save it this looks much better okay let's change our title to tv series list and instead of this intro text we will be creating our own first component so let's create a variable with the name of intro and assign the arrow function to it which for now will just only return this copied jsx here so be sure to add one argument with the name of props which is sure for properties in the upcoming lesson you will understand what that is and change the text to our first functional component and refer it here save app.gs and we have created our first functional component so both intro and app are identical from react's point of view although app has additional features since it's extending the component class provided by react we will discuss those additional features in the upcoming lessons functional components are called functional because they are literally just javascript functions which return a react element in our case we're just returning a simple gsx it's really important to have your own custom component capitalized since that's the syntax convention that gsx uses lowercase names will refer to builtin components so it will be just considered as simple html tags and capitalized names will refer to your custom components now that we have written our own react component we can make app.js a bit cleaner and create a separate file for the intro component under the src folder create a folder with the name of components inside the components folder create a folder with the name of intro and inside the intro folder create a file with the name of index.js let's copy our intro component from app.js pass it back here and remember to import react library since we're creating react elements inside this file all that we need to do is export the intro component and we're good to go by the way if you're wondering why we're using a sort of different syntax here this is just known as a shorthand syntax for arrow functions so what goes after the parentheses is returned from this arrow function and also one good thing to know is that if you're passing only one argument into your arrow function you can delete the additional parentheses here save it go back to app.js and let's import intro from components intro save app.js and nothing has changed on our page but what happens if we want to use a different message inside intro component ideally we want to reuse this component but right now it will always return just the same message that's where properties get in think of them just as functional arguments to your components so inside index.js we have one argument passing in into the intro component and here we can use those custom properties with the help of the props object so props is just a simple javascript object with all of your custom properties combined inside that app.js let's create a custom property to our intro component with the name of message and here we will add a string which we'll say here you can find can find all of your most loved series save up.gs and inside the intro component let's delete this string and just access the message property inside our props object save and as you can see we are rendering our intro component with uh custom property by the way you can pass anything you'd like so not only a string works you can pass in a boolean a number array or even functions it's time to start adding additional functionality to our app component components that extend react component class have additional features and one of them is state but what is state think of it just as plain javascript object to which your component reacts and renders whatever is needed let's create our state object and add a property to it with the name of series and for now this will only be just an empty array we can access the series array inside the render function by simply getting it from our state object so just to be sure that everything is working fine let's print out the length of series array to our page this state dot series dot length save app.js and the length of our series array is rendering to the page which is zero and that is correct so just to keep our project a bit more organized we already have components folder created so let's add another folder to it with the name of app and move everything that is connected to the app component to this folder so app.css app.js and app.test.js since we moved it to a different folder we need to change the directory for our app component so just like that also we need to change the name of our app component since we already have a folder name for it so just to make it easier i'll just rename it to index.js that way we can import it just like our intro component and we don't need to specify the additional javascript file okay so everything is done inside our app folder so what's left is just to change the import inside index.js so since we move this to components folder let's add components save index.js and we have the same page rendering once again react class components have accessed the socalled life cycle hooks which you can wind your code when a particular component mounts unmounts receive new props and many other situations let's take a look into a method called component that mount it will be immediately invoked after the component has been rendered what do we do inside this method is completely up to us but for now let's create an additional array with the name of series which will hold only two elements for now and the first one will be let's say vikings the second one will be game of thrones let's use a set timeout function which will take two arguments the first one is just a function and the second one is the delay after which your function will be invoked inside the function let's use a set state method which will take an object as its first argument so what setstate does it tells react that this component and its children need to be rerendered with the updated state so let's take the series property of our state object and assign to it our newly created series right save index.js go back to your page and the length of the series changed after 2 seconds let's go back to index.js and i want to show you a trick so inside your object if you're using the same names of your property you can actually delete this bit of code and this will just take the series properly and assign our newly created series array to it so save index.js go back to your page refresh it and the length of the series should be two after two seconds in order to send requests to the server first of all we need to install a library which will let us do it there are a lot of options out there but i personally love to use fetch we can install fetch with node package manager i'll just copy this bit of code and pass it into the command line press enter okay after installing fetch let's open up our app again by typing in npm start okay so we have our app running back again so let's go to the code editor and open up index.js file inside our app component and let's import fetch and let's just send out the request to the api whenever our app component renders uh obviously we want to do that inside component.mod method let's get rid of this bit of code and type in fetch which will take a url as its first argument we will be using a service called tv maze api which will let us obtain different kind of information for various tv series right here i'm just searching for tv series with the name of vikings and fetch returns a promise so obviously we need to resolve it and in order to do that we'll need to chain in that method which takes up a function as its first argument and inside this function we will have access to the response object so for now let's just console.log the response object and go back to our page open the console and here we can see that we're getting back the response object what we need to do right now is parse the results and get the json from this object it's really easy to do so what we need to type in is response json and this will just return the json from the response object obviously so what's great about promises is that we can chain that methods and what we're returning from this line will get back here so we'll get back the json and let's for now also just console login okay save it and we're getting back uh 10 items and let's take a look into few of them so the show id uh the url and the name of the series and we have a lot more going on inside the show object um so what we can do inside this method is that we can actually set the state of our app so let's use this set state and let's add in our series to the series property of our state save index.js go back to the page and we're getting back the length of series already 10. okay that's exactly what we wanted and just to be sure let's refresh it one more time and yes we're getting back the response from the api right now we launch an api request every time our app component renders but if you think about it does the app component really need to know about the tv series array or when and how the call will be launched the answer is definitely not we want to keep our app as modular and as simple as possible that means creating separate components when it's logical to do so in react there is a common pattern used known as presentational components and container components the idea is very simple inside your presentational components you would be concentrated on how things look you wouldn't specify how the data is loaded or manipulated and inside containers you would have all of your functionality that means how things would work how data is fetched and manipulated most of the time containers will be stateful that means they will use state to serve data to our presentational components okay so let's create a containers folder under the src folder inside the containers folder let's also add another folder with the name of series and inside the series folder let's add an index.js file import react component from react create a class with the name of series which extends component and let's render for now only a dev let's type in series container export default series okay inside our app component let's import series from container series and let's render it under our the length of all right message save index.js go back to the page and we're rendering the series container okay so what we need to do right now is we actually need to copy this code and let's paste it into the series component and we also need to get this message let's also paste it inside our div here let's save the series file then the component file and let's go back to our page once again and nothing has changed so we're seeing exactly the same result as we had at the start of the lesson but now we have divided the logic between separate components in the next lesson we will introduce a series list presentational component which will list our series inside an unordered list now that we have our series array return from the api call it's time for us to create the series list component which will render the tv series so under the components folder create a series list folder inside that folder let's add the index.js file import import react from react for now let's just create a functional component which will return uh just the div side that div let's type in series list component let's export defaulted and that way we can import it inside our series container okay now that we have that let's render it under the message of our series story length and i'll add in the list property to the component we'll get this list properly inside our props so i'll just pass in this state series uh here save index.js go back to the page see if everything is rendering accordingly and it is so let's go back to the series list component and we can delete this message let's add an unordered list inside that list now that we have our list property let's type in props list and we'll use a map function inside that function let's get the series and let's return a list item and inside that left side and what we want to do is show the name of our series so save that go back to your page and we're getting every single show name from our series all right good um so we want of course uh to look a little bit better we don't want these dots around flowing out here so what we can do is add class name and let's type in series list inside the series list folder we can create a index.css file and let's type in series list and less style type none now that we have that we of course also need to import it here so import index.css save that and we're not seeing the dots floating around on the left side also i don't like the padding on the left so i'll just remove that as well now this looks centered awesome one thing that's left to talk about is we're actually getting uh this warning from react so it says that each child in array or iterator should have a unique key prop so what we need to do is on our list item we need to add a property with the name of key and let's type in series shell id just to make a little bit cleaner okay save that uh open up the console and we're not seeing the warning anymore so what we did is we add a key to our list item so keys help react identify which items have changed or have been added or removed so the best way to pick a key is to use a string that uniquely identifies a list item harmonic siblings most often you will have an id for that to use your data as key but when you don't have a stable id for your rendered items you may want to use an index as a key just as the last resort just know that it's not recommended and you should always try to use an id that's unique for your list item it is possible to create additional components inside a component which will not be available outside of it this makes your code a little bit more readable and a little bit more semantic and it's just a good practice to use so let's create a a new variable with the name of series list item we'll of course pass props to it and let's return whatever we have inside our series list on order lists item and right here we can return series list item now let's pass series to it by the way we can also destructurize our props variable inside our series list item so we can just open up parentheses and type in series this will just take all of the properties whichever you want from your crops object so i'll save index.js go back to our page and literally nothing has changed so for now it may seem redundant that we're creating just a new component for a list item but later on in upcoming lessons we will be adding a little bit more information to it and then it'll be just a lot cleaner and simpler to understand in the previous lesson we were factoring series list component what we forgot to do is add the keep property to the newly created component let's go back to our code editor and copy the key property from the list item and paste it into the series list item component save index.js and the error is gone let's open up containers series index.js and right now we're only fetching series with the name of vikings but of course we want to make this process a little bit more dynamic under the length of series every message i'll open up a diff and inside of it i'll create an input with the type of text and i'll also assign an unchange handler to it so what this handler does is that whenever our input value changes it will fire an event to whatever method we assign to it i'll create a method inside the component with the name of on series input change we will be getting an event object from the unchanged handler and i'll cancel that log the event object and i'll also console.log the value of our input let's take on series input change and assign it to our input save index.js and let's type in something so i'll type in game of thrones and i'm getting the value of our input and i'm also getting the event object what we can do with that is we can actually copy the code from component and mount and let's paste it into the on series input change essentially what we want to do is make this part dynamic we can do that with the help of string interpolation inside javascript it's used with a very interesting symbol called grave accent it looks like this and i agree the naming is a little bit weird we need to wrap our url inside these symbols and let's take out the vikings the hard coded series name and what you want to do later is type in a dollar sign open up curly braces and let's copy the value of our input and paste it to the fetch url save index.js we're not getting anything from our series array and that is because uh we remove the component and mount method so if i type anything into the input let's say i'll type in the same vikings we're getting the same length of our array and we're getting the series dynamically it's time to add some conditional rendering to the page we only want a lawyer spinning up under the input whenever i type in something and we also want a friendly message which will say that no tv series have been found if the api does not give back any results with the given value of the input let's open up series container and we need to add a few more properties to the state the first one will be series name i'll just assign an empty string to it and it will just help keep track of whatever we have inside the input because currently we're not doing that and i'll also add an is isfetching property and i'll set it to false and this will help us know whenever we're fetching something from the api let's get all of these properties inside the render method i'll just get those from this state and the first thing that i want to do is i want to set the value of our input to the series name so right now it will only be an empty string i'll also make it look a bit better let's save index.js go back to the page and now whenever i type something into the input it will show the results but it shouldn't show anything inside the input and that is because i'm not actually setting the value and we need to do that inside the on series input change method let's type in this set state and i'll set the state of series name to the target value and i'll also make the fetching true and of course after the actual fetching is done let's set this fetching to false now that we have all of our state management done we can actually go to the page and check if everything is working fine and let's go back to the render method and we can now actually add the conditional rendering to the render method uh first of all let's remove uh the length of series array message we don't need that anymore and just under the second diff i'll open up curly braces and here i want to check if the series length is zero then we will know that no series have been returned from the api and if the series name string i'll also trim it is equal to an empty string now we know that nothing has been typed in and the series all right is equal to zero so we don't have anything to show to the user so then we can type please enter series name into the input and let's open the second curly braces and whenever the series length is also equal to zero but we actually typed something in into the input then we know that nothing has been fetched from the api and we can tell that no tv series have been found with this name let's save index.js go back to the page let's double check to see if everything is working correctly so we're seeing the the message right now and if i type something into it the message is gone and let's type some gibberish and we're getting that no tv series have been found with this name good um okay so last thing that i want to do is i want to check whether we're fetching um something from the api so let's open up the curly braces again and i'll type in if is fetching is true then for now let's just show a loading message and if fetching is false i'll just show the series list again save index.js go back to the page and we should get the loading message whenever we type something into it and yeah we're actually getting it it's just fairly hard to see because the response from the api is fairly quick in the previous lesson we left a little bug whenever i type something into the input even though i'm still waiting for response from the api i'm already getting uh the message that no tv series have been found and that is because uh we didn't specify that we actually shouldn't be fetching whenever we want to show this message and the same goes for the message above save index.js and we're not getting that bug anymore the last thing that i want to show you is how to add an image with react so i'll create a folder with the name of loader inside of it i'll just add index gs import react create the loader component export it and i already have a loader gif inside my assets folder you can use whatever loader icon you'd like it doesn't really matter so what you need to do is you need to get the source of the loader and i'll just name it loader src from assets lower gif so essentially you're just importing the source and what i want to do here is create an image and i'll add in the src like this and we also want to provide an alternative property because react will give up warnings if you don't do that i'll just type in loader icon save your newly created component go back to the series container and let's import it from loader whenever we're loading we're not showing that old message anymore we want to show the loader component save index.js go back to the page and we're actually seeing the loader popping up inside our page i also want to do it make it a little bit smaller because right now it's really big and i want to show you how you might want to do that on an element level maybe you don't want to create a new style sheet for that yeah it gives you an ability to add styles to an element and you want to provide an object to it i'll say width will be 75 pixels and i'll save the loader component go back to my page and the loader icon is looking a lot better react router is the standard routing library for react i i've opened up the mpm page for react router and here we have a short explanation how we need to install this library into our app so it's saying that if we're writing an application that will run in the browser uh you should install instead react router dom so let's do that open up your command line and let's type in npm install of course we want to save it react router dom now that we have rack router dom installed on our application open up index.js and import browser router from react router dom and we need to wrap around our app component inside this component and this will keep track of your ui in sync with the url save index.js and let's open our containers series index and what i want to do next is copy the intro code i'll just delete it from our app component and paste it into the series component just above the input of course don't forget to import intro from intro save series container close it and we don't need the intro anymore here as well save that we're seeing the same result but we just made our app component a little bit cleaner and move the intro component into the series container okay the next step is to create an additional component we'll call it main and here we'll have all of our routes so i need to import react from react i also need to import the switch component and also the route component from react router down then i'll create the main component passive props and i'll return the switch and inside that switch for now i'll have only one route exact path and the component will be series let's export the main component and of course i also need to import the series container from from series container okay save index.js and inside our app component uh let's delete the series container so we won't be actually rendering it inside the app component but it will render the main component from main okay and i'll copy and paste it here save the app component go back to the page and nothing has changed um but right now we're actually using react router dom to render our series container and in the next lesson we'll add an additional page and then you'll see how we can render different pages with react router dom we want to show multiple pages on our application but right now we only have one container so i need to create another one i'll call it single series this container will show a series with a little bit more information than what we have on our series container and for that i'll need react and this will be a class component so i'll need component class single series extends component render return diff and i'll just type in single series inside the paragraph and export default great go back to the main component and import single series from containers single series and we want to add an additional route the path will be series and an id this idea will represent the idea of the series that we want to show and of course it will be dynamic well we will be getting it from the series container and i also need to add in the component to the route and it will be single series save index.js let's try and go to our newly created container so i need to write series and let's say one two three we're getting back the single series message that we just created it would be nice of course to get this id and we can try and look inside the props save that open up the console and what i'm looking for is the match property and inside the match property we have another object and it's called params and here we have the id that we want to show so i can actually just type in the show id will be this props and if i recall it correctly match params id match params id save that we don't need this anymore and we're getting back the id from our url whenever i type something in into our input i'm getting back the results that i want but i want the results to be linkable and i just show up as a simple string and for that we need to open up series list component we need to import link from react router dom and we need to add the link into the series list item and as the name implies this component that works just as a simple link and i want to link it to series series show id i'm just making uh the link dynamic and it will always show the correct id and link to the correct show with the id attached of the shell so save that go back to the page and i'll type in same series vikings and click on that and i'm getting the single series result with the id that i want with help of that id i can go back to the single series container and we will be fetching the series from the api with the id and since we will be fetching something i want to have the loader and i want to create state for the single series add one property to it it will be show and i want to fetch the show from the api i'll just copy the fetch from single or sorry from the series container and i want to fetch it to a different url of course because i will be getting only a single tv show and this is the dynamic part so this is the id that i want to use for my route i can get it back from the props i'll create an additional variable id and i'll destructurize the match params object get the id back and paste it into the url of course i also want to change the set state method because i don't have series or fetching properties anymore i want to have it set state to show to be json and now whenever our component mounts we will be getting back the show to our container uh so the first thing i want to do inside the render method i want to get the shell from the state and whenever the show is equal to null i want to be showing the loader and whenever the show is not no for now i'll just show a message that show has been loaded add it into paragraph tags and i'll also console.log the show for now just to see what it have it says that the show has been loaded and i'm actually getting back the object from the api um i'll reload it one more time so they can see the loader popping up yeah it's there just not showing um for a more lengthy amount of time okay so now that we have the show object we can start and showing the information that we want into the page so i will be showing the show name then i also want to show the premiere that will be inside shell premiered then i want to show the rating i'll be showing the rating average then episodes and that is a little bit more difficult one it's living inside the embedded property ah so hard to copy show embedded episodes length so i'm just showing the length of the array and that will be the count of the episodes and lastly i want to show the image alternative will be show and the source for that will be show image and i think that i want to get the medium sized one medium save that go back to the page and we're getting back the info that we want and just to be sure that it works okay uh let's go back to the main page and type in game of thrones which is also an awesome series so click that and we're getting back the results that we want we can close the console and if we are thinking that you can create an additional component for this html you're probably right but i won't be doing that and i encourage you to try it yourself this is the last lesson and i hope that you really like the series and i'm waiting for your feedback and please tell me if something was wrong and if you love the series just leave a good rating thanks and good luck working with react
