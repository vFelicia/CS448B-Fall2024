With timestamps:

00:01 - hey everyone this is utsab i'm a teacher
00:04 - for free code camp and the goal of this
00:07 - video tutorial series is to learn the
00:09 - skills of a senior software developer
00:12 - so in each video
00:14 - we'll be chatting with a senior
00:16 - developer
00:17 - and will walk through a specific
00:19 - challenge that he or she faced
00:22 - and he'll walk through all the steps
00:23 - that they went through how they reasoned
00:25 - through to the solution
00:27 - and finally there will be a call to
00:29 - action at the end of the video where
00:31 - i'll explain how to translate the skills
00:34 - you see in this video into a solid thing
00:37 - that you can build for your portfolio
00:40 - so today we're here with the senior
00:42 - developer at front row ed
00:45 - front row is an adaptive learning
00:47 - software that's used in over 30 percent
00:50 - of schools in the country their users
00:52 - include over 200 000 teachers and 4
00:55 - million students
00:56 - so we'll be chatting with alexander
00:58 - kerlin who is the cto of front row
01:03 - you're about to see the part of the
01:04 - conversation where he dives deep into
01:07 - the topic of trade-offs
01:10 - so trade-offs alex
01:12 - explains is one of the key skills that
01:14 - distinguishes senior software developers
01:17 - and what that means is the ability to
01:18 - look at many different solutions to a
01:20 - problem understand the pros and cons of
01:22 - each one and then pick the one that's
01:24 - most appropriate for the specific
01:26 - situation that you're in so alex is
01:28 - going to walk us through a challenge
01:30 - that he faced at front row where their
01:32 - old technology stack and language which
01:35 - was closure wasn't
01:37 - it it wasn't serving them very well they
01:38 - were facing some challenges and so we
01:41 - had to decide whether to stay with that
01:43 - or move to a new
01:44 - language which was haskell and so he
01:46 - walks us through kind of like how he
01:49 - reasoned through the trade-offs of each
01:51 - solution and why he picked one over the
01:53 - other
01:55 - and in case you're wondering this in the
01:57 - background uh this is their mascot jt
02:00 - the piggy that stands for justin
02:02 - timberlake and this is me
02:06 - so alex i want to zero in on one of the
02:08 - points you mentioned yeah
02:10 - trade-offs yeah
02:12 - i'm wondering if there's a decision
02:15 - that you could walk us through where you
02:17 - had to weigh different trade-offs like
02:19 - maybe
02:20 - something like the technology you chose
02:22 - stack why did you pick hassle for
02:25 - example sure
02:27 - now um
02:30 - that's a nuanced and uh
02:32 - large question which i get asked
02:34 - actually very frequently because that's
02:36 - i think very interesting to a lot of
02:37 - people whenever you do something outside
02:39 - of the norm and that's that's something
02:41 - you will be asked about
02:43 - and in our cases we started with a
02:44 - dynamically typed language which was
02:46 - closure back in the day
02:48 - and
02:49 - you can think of it as yes it's
02:51 - functional but the dynamically type
02:53 - portion is very similar to what you
02:54 - would experience in javascript in a ruby
02:56 - in python which is you're not specifying
02:59 - the types of the variables
03:01 - that you're using you're just
03:03 - you're specifying essentially the shapes
03:05 - of them and then those can be changed
03:07 - over time and there's nothing statically
03:09 - so at compilation time telling you
03:12 - whoa these two things do not match
03:16 - i want to go over some of the jargon
03:19 - that alex is talking about here dynamic
03:22 - typing static typing shapes variables
03:24 - runtime compilation time what do all
03:26 - these things mean
03:28 - so let's take a look at a dynamically
03:30 - typed language javascript alex was
03:33 - referring to
03:35 - closure as a dynamically typed language
03:37 - but the same concepts apply to
03:38 - javascript
03:40 - so notice we're passing these three
03:42 - things
03:43 - a
03:44 - date a number
03:47 - and an undefined value
03:51 - all into the same
03:53 - function print date and javascript
03:55 - allows this the key thing is this as
03:57 - long as each of these whatever you pass
03:59 - in as long as it has a two string
04:02 - property
04:03 - javascript will handle it just fine
04:06 - and this is what alex meant by the
04:07 - shapes
04:08 - of variables
04:09 - instead of the actual type
04:12 - now one of these types causes the
04:15 - program to crash because the undefined
04:17 - doesn't have a tostring property
04:20 - and uh we'll see how that plays out so
04:22 - when we run the program in the browser
04:24 - we see
04:25 - oh there's an error
04:27 - the undefined
04:28 - value doesn't have a property to string
04:31 - and notice that we don't find out about
04:32 - the error until we run the program in
04:36 - the browser that's called a runtime
04:37 - error
04:39 - all right now let's look at an example
04:41 - of static typing
04:42 - we're using a framework called flow
04:45 - which allows us to declare types for our
04:47 - variables and here we're
04:49 - giving today a type of date
04:52 - now again alex was referring to a
04:54 - different language haskell as a
04:56 - statically typed
04:57 - example but same concepts apply here to
04:59 - flow
05:01 - so now
05:02 - with a statically typed language we can
05:04 - compile our program before we run it
05:08 - and it'll check for certain errors and
05:10 - it fine and it tells us that hey you
05:12 - can't pass in a number or an undefined
05:15 - value into print date
05:16 - all right so
05:18 - next alex goes into some of the details
05:20 - of the situation in front row which um
05:24 - and we'll kind of compare which of these
05:25 - is was better for his situation
05:28 - the project was getting progressively
05:30 - larger and larger so it was it started
05:33 - with just me developing it and then it
05:35 - spilled into
05:37 - two or three different products so we
05:38 - had a
05:40 - we have a student product a teacher
05:41 - product a parent product a school
05:43 - product
05:44 - and um
05:45 - there was a lot of code reuse between
05:47 - the different products because you don't
05:49 - want to
05:50 - don't repeat yourself dry is one of the
05:52 - uh core tenants and principles of
05:55 - solid software engineering and so
05:59 - being able to reuse code
06:01 - is actually quite challenging
06:07 - so the project was getting larger at
06:10 - front row and they were developing
06:11 - multiple products so they had a teacher
06:15 - product
06:17 - student
06:18 - product a school product
06:22 - and a parent product
06:24 - and they were all trying to reuse code
06:28 - so in our simple example here
06:31 - we are gonna have one
06:33 - shared method
06:35 - that is going to be shared by two
06:37 - products the teacher and the student
06:39 - product
06:41 - so here we have our shared module
06:44 - it has the function is holiday which
06:45 - takes a month and a day and just returns
06:48 - whether that date corresponds to a
06:49 - holiday
06:50 - the student product has this function
06:52 - write reminder email which will
06:54 - construct a special message if the
06:56 - current day is a holiday
06:58 - the teacher product will
07:01 - prevent the teacher from declaring
07:02 - office hours on a date that happens to
07:04 - be a holiday
07:06 - so let's see this in action here i'm
07:07 - loading both of our products here in
07:09 - node
07:10 - and
07:12 - i'm going to call
07:18 - the right reminder email
07:20 - function and give it a holiday and we
07:22 - see it gives that special holiday
07:24 - message
07:25 - if i do the teacher product and try to
07:27 - declare office hours on a date with the
07:29 - holiday
07:31 - we again get that special failure
07:33 - message
07:34 - so notice that this example here is
07:36 - dynamically typed
07:38 - and next alex explains some of the
07:40 - challenges that he faced at front row
07:42 - with their dynamically typed setup
07:45 - so i want to rewind to the moment when
07:48 - you started noticing this problem
07:51 - what was the first time you got the
07:53 - sense that you know what these shared
07:55 - modules are getting out of hand we need
07:57 - to switch to a
07:59 - statically typed language
08:01 - sure
08:03 - what
08:03 - what was happening is that i would
08:05 - change one of these uh internal modules
08:08 - i would change the interfaces
08:10 - and uh
08:12 - and uh i had to put in a lot of extra
08:14 - work there was a lot of overhead work
08:16 - that was was not really
08:18 - a good use of my time to
08:20 - uh
08:21 - update all the unit tests that were
08:23 - there in place to make sure that let's
08:25 - say these four products were using this
08:27 - shared functionality all correctly at
08:28 - the same time so now instead of
08:31 - just being immediately told
08:33 - does make sense this doesn't make sense
08:35 - i have to go in there
08:36 - first of all make sure that those tests
08:38 - exist
08:39 - which is time consuming this is not time
08:40 - you're spending on working on your
08:42 - product this is your time you're
08:43 - validating that the product is same
08:46 - and
08:47 - as your product gets bigger and bigger
08:48 - and the permutations become more and
08:50 - more that's more testy you have to write
08:52 - and you're essentially doubling the work
08:54 - of the compiler
08:55 - but um i was doing more and more of this
08:57 - overhead and that was not adding any
08:59 - value to the product it was just me
09:01 - doing something very very tedious and
09:02 - menial got it
09:07 - so alex talked about the specific
09:09 - symptom he started noticing about the
09:11 - problem the the cue that let him know
09:13 - that there was a problem
09:16 - whenever he would change the interface
09:18 - for a shared module bad things would
09:20 - happen so things would break you'd have
09:23 - to update a lot of unit tests
09:26 - so let's walk through this what do we
09:27 - mean by that changing the interface
09:30 - so an interface is
09:32 - whatever you need to know about an
09:34 - object
09:35 - in order to interact with it
09:39 - so for example
09:41 - what do you need to know about a
09:42 - computer in order to interact with it
09:44 - really just how to use the keyboard so
09:46 - that's the interface
09:51 - when it comes to code what's the
09:53 - interface for our shared module
09:56 - well what the student and teacher need
09:58 - to know about
10:01 - is holiday in order to use it
10:03 - it needs to know the
10:05 - the name of the method and the
10:07 - parameters so that's the interface
10:09 - let's go ahead and change our interface
10:11 - instead of
10:12 - taking a month and day as parameters
10:14 - we'll just take
10:16 - a date object and then it'll extract the
10:19 - month and date like this
10:21 - and now notice what happens when
10:24 - we run the program
10:27 - when we run student product we get an
10:28 - error
10:29 - so this is called a runtime error
10:31 - because it
10:32 - the error happens as we're running the
10:34 - program
10:35 - can we do better than that can be some
10:37 - can we somehow find out sooner
10:39 - than this that there's going to be a
10:41 - problem and the answer is yes yes we can
10:44 - with the help of unit tests so unit test
10:47 - will
10:48 - simulate what might happen as we're
10:50 - running the program so notice here we're
10:54 - writing these method calls passing in
10:56 - some parameters and we're checking to
10:58 - see that the output makes sense we have
11:00 - unit tests for both the student product
11:03 - and the teacher product
11:05 - okay notice what happens when we run
11:08 - our unit tests
11:12 - everything breaks all four tests break
11:14 - and this happens before we run the
11:15 - program and therefore we can find out
11:17 - that hey something's broken we can
11:20 - well we can fix that by by updating our
11:23 - code
11:24 - so we'll update our um
11:26 - students
11:29 - method
11:30 - and our
11:33 - the way we pass in the shared module
11:37 - and then we also need to change our unit
11:40 - tests
11:42 - so this is going to take in a date
11:44 - object
11:54 - okay and we would we would change all
11:56 - these unit tests
11:59 - so
12:00 - this is the
12:01 - symptom that you would look for in your
12:03 - own code as you're updating shared
12:06 - modules
12:07 - if you notice whether you have to
12:10 - update a lot of unit tests
12:12 - so next i
12:13 - i explain why it's important for you to
12:16 - be aware of this symptom
12:18 - so the reason i'm asking this is i'm
12:20 - wondering as the audience
12:22 - what can they look for in their code
12:25 - base
12:26 - to let them know like this is the cue
12:27 - this is the same trigger that alex
12:29 - noticed
12:30 - and so what i'm hearing is
12:32 - if
12:33 - you're ever find yourself doing this
12:35 - very thing in order to write one feature
12:37 - you have to now inspect the unit tests
12:39 - across many other
12:41 - use cases that might have nothing to do
12:43 - with what you're
12:45 - writing
12:46 - at that point
12:48 - you might reason as alex did that maybe
12:51 - a statically typed
12:53 - solution or language yeah would would
12:56 - solve that headache yeah i would say
12:58 - there were two um
13:00 - two big red flags here is one you're
13:03 - having to re-implement almost the same
13:05 - test
13:06 - over and over again for different
13:07 - products
13:08 - and uh two things are maybe you don't
13:11 - have those tests and things are
13:13 - continuously breaking when you're
13:15 - editing these shared modules so you
13:17 - edited it maybe you fix one part of the
13:19 - project you deployed to production
13:22 - you discover a few hours later or maybe
13:24 - a day later that something else broke
13:25 - and you went oh i totally forgot that we
13:28 - have this thing there
13:29 - well that means you don't have enough
13:31 - test coverage but now we go back to is
13:33 - writing an infinite amount of tests
13:35 - really good use of your business time so
13:37 - alex mentioned that
13:39 - with the dynamically typed language they
13:41 - were using
13:42 - closure
13:43 - he had to maintain lots of unit tests
13:46 - for shared modules as the product got
13:48 - bigger
13:49 - and aesthetically typed solution
13:52 - haskell
13:53 - solved these challenges for him so let's
13:56 - take a look at how that might happen for
13:57 - our example
13:59 - we're using flow in javascript to allow
14:01 - for static type checking
14:03 - notice it types on the variables
14:06 - and notice we have a lack of unit tests
14:10 - that's because our flow compiler will
14:13 - detect for the same types of things that
14:16 - our unit tests we're checking for
14:18 - and we
14:20 - see we have no errors
14:22 - now
14:23 - that doesn't mean we'll never have to
14:24 - write unit tests we just won't have to
14:26 - write unit tests specifically for
14:28 - detecting when interfaces change
14:30 - on your shared module so let's go ahead
14:32 - and try to change an interface here
14:36 - and see that we get an error
14:40 - so we find out right away that things
14:42 - are broken and next alex explains why
14:44 - this was important to him
14:46 - the the principle is you want to
14:48 - anticipate problems
14:50 - you want to
14:52 - detect problems as early as possible in
14:53 - the process because fixing a problem
14:56 - once it's a production is very expensive
14:58 - fixing it once you said okay compile the
15:00 - code i just wrote
15:02 - very cheap it's it's literally like
15:05 - several orders of magnitude cheaper to
15:07 - do it sooner than later
15:09 - so we've talked about the skill of
15:10 - understanding trade-offs and we've seen
15:13 - alex demonstrate this skill as he thinks
15:16 - through the trade-offs of haskell versus
15:18 - closure which one is right for front row
15:21 - and their situation there
15:23 - i'd like to give a call to action for
15:26 - each of you to put this into practice
15:28 - i'd like for
15:29 - each of you to have a project that
15:31 - you've personally built that was
15:33 - challenging where you had to think
15:34 - through the trade-offs of different
15:36 - solutions and then pick the one that's
15:38 - right for your situation
15:40 - now one of the best ways to con to
15:42 - practice is to contribute to an open
15:44 - source project
15:46 - free code camp is an exciting project
15:48 - they have lots of things that they would
15:50 - love your help with to build on their
15:53 - map and of course i'm biased because i'm
15:56 - also a contributor to free code camp
15:58 - but they're a very respected project
16:00 - they've served hundreds of thousands of
16:02 - people and they're the most starred
16:04 - project on github
16:07 - i will even offer a free session to help
16:09 - you get started and i'll
16:11 - help you find a specific feature
16:13 - on free codecamp's roadmap that's
16:16 - challenging that would require you to
16:18 - think through the trade-offs of
16:20 - different
16:20 - solutions and here's how to get in touch
16:23 - with me you can set up an appointment
16:25 - directly on my calendar
16:27 - or
16:28 - reach out to me over email i love
16:30 - talking about coding happy to answer any
16:32 - questions you have
16:34 - all right hope you enjoyed and until
16:36 - next time

Cleaned transcript:

hey everyone this is utsab i'm a teacher for free code camp and the goal of this video tutorial series is to learn the skills of a senior software developer so in each video we'll be chatting with a senior developer and will walk through a specific challenge that he or she faced and he'll walk through all the steps that they went through how they reasoned through to the solution and finally there will be a call to action at the end of the video where i'll explain how to translate the skills you see in this video into a solid thing that you can build for your portfolio so today we're here with the senior developer at front row ed front row is an adaptive learning software that's used in over 30 percent of schools in the country their users include over 200 000 teachers and 4 million students so we'll be chatting with alexander kerlin who is the cto of front row you're about to see the part of the conversation where he dives deep into the topic of tradeoffs so tradeoffs alex explains is one of the key skills that distinguishes senior software developers and what that means is the ability to look at many different solutions to a problem understand the pros and cons of each one and then pick the one that's most appropriate for the specific situation that you're in so alex is going to walk us through a challenge that he faced at front row where their old technology stack and language which was closure wasn't it it wasn't serving them very well they were facing some challenges and so we had to decide whether to stay with that or move to a new language which was haskell and so he walks us through kind of like how he reasoned through the tradeoffs of each solution and why he picked one over the other and in case you're wondering this in the background uh this is their mascot jt the piggy that stands for justin timberlake and this is me so alex i want to zero in on one of the points you mentioned yeah tradeoffs yeah i'm wondering if there's a decision that you could walk us through where you had to weigh different tradeoffs like maybe something like the technology you chose stack why did you pick hassle for example sure now um that's a nuanced and uh large question which i get asked actually very frequently because that's i think very interesting to a lot of people whenever you do something outside of the norm and that's that's something you will be asked about and in our cases we started with a dynamically typed language which was closure back in the day and you can think of it as yes it's functional but the dynamically type portion is very similar to what you would experience in javascript in a ruby in python which is you're not specifying the types of the variables that you're using you're just you're specifying essentially the shapes of them and then those can be changed over time and there's nothing statically so at compilation time telling you whoa these two things do not match i want to go over some of the jargon that alex is talking about here dynamic typing static typing shapes variables runtime compilation time what do all these things mean so let's take a look at a dynamically typed language javascript alex was referring to closure as a dynamically typed language but the same concepts apply to javascript so notice we're passing these three things a date a number and an undefined value all into the same function print date and javascript allows this the key thing is this as long as each of these whatever you pass in as long as it has a two string property javascript will handle it just fine and this is what alex meant by the shapes of variables instead of the actual type now one of these types causes the program to crash because the undefined doesn't have a tostring property and uh we'll see how that plays out so when we run the program in the browser we see oh there's an error the undefined value doesn't have a property to string and notice that we don't find out about the error until we run the program in the browser that's called a runtime error all right now let's look at an example of static typing we're using a framework called flow which allows us to declare types for our variables and here we're giving today a type of date now again alex was referring to a different language haskell as a statically typed example but same concepts apply here to flow so now with a statically typed language we can compile our program before we run it and it'll check for certain errors and it fine and it tells us that hey you can't pass in a number or an undefined value into print date all right so next alex goes into some of the details of the situation in front row which um and we'll kind of compare which of these is was better for his situation the project was getting progressively larger and larger so it was it started with just me developing it and then it spilled into two or three different products so we had a we have a student product a teacher product a parent product a school product and um there was a lot of code reuse between the different products because you don't want to don't repeat yourself dry is one of the uh core tenants and principles of solid software engineering and so being able to reuse code is actually quite challenging so the project was getting larger at front row and they were developing multiple products so they had a teacher product student product a school product and a parent product and they were all trying to reuse code so in our simple example here we are gonna have one shared method that is going to be shared by two products the teacher and the student product so here we have our shared module it has the function is holiday which takes a month and a day and just returns whether that date corresponds to a holiday the student product has this function write reminder email which will construct a special message if the current day is a holiday the teacher product will prevent the teacher from declaring office hours on a date that happens to be a holiday so let's see this in action here i'm loading both of our products here in node and i'm going to call the right reminder email function and give it a holiday and we see it gives that special holiday message if i do the teacher product and try to declare office hours on a date with the holiday we again get that special failure message so notice that this example here is dynamically typed and next alex explains some of the challenges that he faced at front row with their dynamically typed setup so i want to rewind to the moment when you started noticing this problem what was the first time you got the sense that you know what these shared modules are getting out of hand we need to switch to a statically typed language sure what what was happening is that i would change one of these uh internal modules i would change the interfaces and uh and uh i had to put in a lot of extra work there was a lot of overhead work that was was not really a good use of my time to uh update all the unit tests that were there in place to make sure that let's say these four products were using this shared functionality all correctly at the same time so now instead of just being immediately told does make sense this doesn't make sense i have to go in there first of all make sure that those tests exist which is time consuming this is not time you're spending on working on your product this is your time you're validating that the product is same and as your product gets bigger and bigger and the permutations become more and more that's more testy you have to write and you're essentially doubling the work of the compiler but um i was doing more and more of this overhead and that was not adding any value to the product it was just me doing something very very tedious and menial got it so alex talked about the specific symptom he started noticing about the problem the the cue that let him know that there was a problem whenever he would change the interface for a shared module bad things would happen so things would break you'd have to update a lot of unit tests so let's walk through this what do we mean by that changing the interface so an interface is whatever you need to know about an object in order to interact with it so for example what do you need to know about a computer in order to interact with it really just how to use the keyboard so that's the interface when it comes to code what's the interface for our shared module well what the student and teacher need to know about is holiday in order to use it it needs to know the the name of the method and the parameters so that's the interface let's go ahead and change our interface instead of taking a month and day as parameters we'll just take a date object and then it'll extract the month and date like this and now notice what happens when we run the program when we run student product we get an error so this is called a runtime error because it the error happens as we're running the program can we do better than that can be some can we somehow find out sooner than this that there's going to be a problem and the answer is yes yes we can with the help of unit tests so unit test will simulate what might happen as we're running the program so notice here we're writing these method calls passing in some parameters and we're checking to see that the output makes sense we have unit tests for both the student product and the teacher product okay notice what happens when we run our unit tests everything breaks all four tests break and this happens before we run the program and therefore we can find out that hey something's broken we can well we can fix that by by updating our code so we'll update our um students method and our the way we pass in the shared module and then we also need to change our unit tests so this is going to take in a date object okay and we would we would change all these unit tests so this is the symptom that you would look for in your own code as you're updating shared modules if you notice whether you have to update a lot of unit tests so next i i explain why it's important for you to be aware of this symptom so the reason i'm asking this is i'm wondering as the audience what can they look for in their code base to let them know like this is the cue this is the same trigger that alex noticed and so what i'm hearing is if you're ever find yourself doing this very thing in order to write one feature you have to now inspect the unit tests across many other use cases that might have nothing to do with what you're writing at that point you might reason as alex did that maybe a statically typed solution or language yeah would would solve that headache yeah i would say there were two um two big red flags here is one you're having to reimplement almost the same test over and over again for different products and uh two things are maybe you don't have those tests and things are continuously breaking when you're editing these shared modules so you edited it maybe you fix one part of the project you deployed to production you discover a few hours later or maybe a day later that something else broke and you went oh i totally forgot that we have this thing there well that means you don't have enough test coverage but now we go back to is writing an infinite amount of tests really good use of your business time so alex mentioned that with the dynamically typed language they were using closure he had to maintain lots of unit tests for shared modules as the product got bigger and aesthetically typed solution haskell solved these challenges for him so let's take a look at how that might happen for our example we're using flow in javascript to allow for static type checking notice it types on the variables and notice we have a lack of unit tests that's because our flow compiler will detect for the same types of things that our unit tests we're checking for and we see we have no errors now that doesn't mean we'll never have to write unit tests we just won't have to write unit tests specifically for detecting when interfaces change on your shared module so let's go ahead and try to change an interface here and see that we get an error so we find out right away that things are broken and next alex explains why this was important to him the the principle is you want to anticipate problems you want to detect problems as early as possible in the process because fixing a problem once it's a production is very expensive fixing it once you said okay compile the code i just wrote very cheap it's it's literally like several orders of magnitude cheaper to do it sooner than later so we've talked about the skill of understanding tradeoffs and we've seen alex demonstrate this skill as he thinks through the tradeoffs of haskell versus closure which one is right for front row and their situation there i'd like to give a call to action for each of you to put this into practice i'd like for each of you to have a project that you've personally built that was challenging where you had to think through the tradeoffs of different solutions and then pick the one that's right for your situation now one of the best ways to con to practice is to contribute to an open source project free code camp is an exciting project they have lots of things that they would love your help with to build on their map and of course i'm biased because i'm also a contributor to free code camp but they're a very respected project they've served hundreds of thousands of people and they're the most starred project on github i will even offer a free session to help you get started and i'll help you find a specific feature on free codecamp's roadmap that's challenging that would require you to think through the tradeoffs of different solutions and here's how to get in touch with me you can set up an appointment directly on my calendar or reach out to me over email i love talking about coding happy to answer any questions you have all right hope you enjoyed and until next time
