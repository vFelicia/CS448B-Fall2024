With timestamps:

03:00 - foreign
03:04 - hi everyone
03:06 - welcome back to another vojs stream
03:08 - i hope you're doing well i took a couple
03:10 - weeks off
03:12 - and i'm excited to be able to do this
03:14 - stream on vjs testing
03:17 - this is the app i'm going to be working
03:19 - on
03:20 - so
03:22 - it's called regex breakfast i worked on
03:24 - it on my channel
03:25 - which if you don't know it's faraday
03:27 - academy it's linked in the description
03:29 - below
03:30 - and i basically do lots of django and
03:34 - view content between twitch and youtube
03:37 - so
03:37 - this is a app that i'm in the process of
03:41 - redesigning but i figured it would be
03:43 - good to add
03:44 - some tests to it and go ahead and
03:46 - install just today
03:48 - so if you're here feel free to say hi in
03:51 - the chat and keep a conversation going
03:55 - if you have any questions or you want to
03:57 - give input
03:59 - which is the whole point of a live
04:00 - stream so feel free to do that
04:04 - i do have
04:05 - some bad allergies today so if i take
04:07 - myself off
04:09 - camera for a second that's why
04:12 - um yeah so
04:15 - let me go to the project board on this
04:17 - github repo
04:22 - and
04:24 - let's go to the testing board
04:29 - okay and so these are the steps and the
04:32 - different areas of the application that
04:33 - i'm going to test
04:35 - starting with setting up the view cli
04:38 - plugin for jest
04:40 - and which will install again installs um
04:44 - view test utils and some other things
04:47 - so let's take a look at the app
04:50 - and give me one second here
05:18 - okay i'm back
05:20 - um yeah so this is the app i'm working
05:21 - on
05:22 - so before you say anything um we were
05:25 - trying out some different designs uh
05:27 - trying to get this to be a retro
05:30 - kind of
05:32 - diner theme
05:33 - um
05:35 - yeah and so it was a couple developers
05:38 - on my stream we were trying to design it
05:40 - obviously it didn't turn out that good
05:42 - so
05:43 - i hired one designer and now i'm working
05:46 - with another designer trying to get this
05:48 - to where it looks good the point of the
05:50 - app is basically to help people learn
05:53 - regex through going through these
05:54 - different challenges
05:56 - kind of like the game css sushi
05:59 - if you've played that it's similar
06:01 - except you're learning regex here
06:04 - so basically i get a hint down here or
06:08 - challenge instructions i guess
06:10 - and i'm supposed to
06:12 - match the characters here
06:15 - and then i hit enter and then it gets
06:18 - more complicated and you start
06:22 - yeah using flags and different patterns
06:25 - and stuff like that
06:27 - so i'm going to be writing tests for
06:29 - this app today
06:31 - and the first thing
06:33 - is setting up the
06:35 - just plugin so let me go to my terminal
06:39 - i'll stop
06:40 - my server
06:43 - my view server
06:45 - since this is already this application's
06:47 - already set up
06:48 - so it already has
06:51 - a lot of
06:52 - i guess components it also has a router
06:55 - not really going to be testing that
06:56 - today i might get into store testing
06:59 - with the view x store and then the rest
07:02 - are just regular
07:03 - views and components vue.js components
07:07 - okay
07:09 - but i don't have any testing at all
07:10 - right now
07:11 - so what i'm going to do is
07:15 - i'm just going to add it from the
07:16 - terminal so i'm going to do view add
07:20 - and then
07:23 - just let me make sure that's right so
07:27 - let me go to
07:29 - the docs
07:32 - for
07:35 - okay this is this is the cookbook for
07:38 - unit testing in view
07:41 - and i don't think they actually have
07:43 - how to install it
07:46 - just the just docs just have how to
07:48 - install just
07:49 - plainly
07:50 - so before i do this let me actually just
07:53 - open the view ui
07:55 - and that way i can search for the right
07:57 - plugin for jest
08:03 - okay it opened in the wrong place let me
08:06 - copy this
08:11 - okay
08:12 - so here's the view ui
08:15 - it's basically a ui interface
08:18 - um
08:19 - that i can use instead of the cli
08:22 - and let's see
08:28 - let me zoom out so i can see the sidebar
08:31 - okay so
08:33 - um nw view okay that's the different app
08:36 - i was doing before so let me jump to
08:39 - the correct application
08:42 - import
08:45 - let's see it's in projects
08:48 - and
08:50 - i need to find
08:52 - regex breakfast
08:58 - are
08:59 - you see regex breakfast here it is
09:02 - frederick's breakfast
09:03 - and rojak's breakfast front there is no
09:06 - back end it's just front
09:08 - i just called it front so okay i'm going
09:10 - to import this folder
09:12 - and now i can install plugins inside of
09:14 - this folder and it shows me what plugins
09:16 - i already have i designed it with
09:18 - viewify and i used all these other
09:20 - plugins
09:21 - so i'm going to search for
09:24 - actually i have to click on add plugin
09:27 - and now i can search for
09:30 - just
09:34 - so it's giving me view cli plug-in just
09:37 - puppeteer
09:39 - cli plug-in unit jest and it says
09:41 - official here so i'm going to grab this
09:43 - one
09:45 - and let's see
09:47 - if i hover over this
09:49 - the plug-in has a generator okay
09:52 - so i'm going to click on this and
09:54 - install
09:55 - ucli plug-in unit jest
10:00 - okay
10:01 - so that's uh
10:02 - taking a while to install oh
10:06 - sassy sorry i think i forgot to say hi
10:09 - um yeah i'm doing well
10:13 - i've been meaning to put
10:15 - testing in some of these apps for a
10:17 - while so i figured now is a good time to
10:18 - do it
10:22 - okay
10:23 - i'm not sure how long this is going to
10:24 - take
10:26 - um
10:27 - anyone else in the chat i know only
10:30 - subscribers can chat but if anyone else
10:33 - is there and
10:35 - is a subscriber or can subscriber to
10:37 - help or can subscribe to help support
10:39 - free code camp
10:40 - it would be awesome to get to talk to
10:42 - you
10:46 - okay
10:48 - it's going to take
10:49 - another minute i guess
10:52 - um after this it should create some
10:54 - setup files
10:56 - for me
10:57 - there's no configuration that i need to
10:59 - do for it so i'll do finish installation
11:05 - all right
11:08 - so it's invoking invoking here
11:11 - this means it's invoking the generator
11:14 - which might be creating files or
11:17 - updating commands or something it might
11:19 - have added a testing command to my
11:21 - package.json here
11:24 - yeah it did so it added this command
11:26 - which is test unit
11:29 - that i'm going to be using to run the
11:30 - tests because this will run the
11:33 - just plug-in oh it added this testing
11:35 - folder too
11:38 - and one example test
11:41 - okay but this test won't work
11:43 - because there is no more hello world
11:44 - component it's just adding a default
11:46 - test
11:49 - all right
11:52 - um
11:53 - let's see
11:57 - continue okay so now that's installed
12:00 - now sometimes here let me zoom back out
12:03 - sometimes you can go to configuration
12:06 - and
12:07 - okay i guess just doesn't have
12:09 - configuration options here that's fine
12:11 - i'm going to get out of the view ui
12:15 - and now i can run my app again now that
12:17 - that's set up
12:18 - so npm runs serve
12:22 - to run the vgs app
12:24 - and oh no wait
12:26 - i don't want to run the app i think
12:28 - because
12:29 - i want to
12:31 - go ahead and run the tests
12:33 - oh it also created this
12:35 - just config file for me
12:38 - with the preset okay
12:42 - um yeah so it's all set up so i should
12:44 - be able to just do
12:47 - and actually
12:48 - one more thing i'm going to
12:50 - run this
12:51 - testing command
12:54 - or
12:55 - no i'm going to change the testing
12:57 - command so instead of test unit i don't
12:59 - have end to end test or anything else
13:01 - so i'm just going to change this to test
13:03 - so i can use the shorthand
13:07 - all right
13:08 - and i'm going to get out of this build
13:11 - it doesn't want to exit the build
13:13 - so it might take a second
13:16 - control c is not working
13:28 - okay
13:29 - it's almost done with the build anyway
13:31 - so i'll just wait a second
13:35 - there we go
13:36 - all right and i'm actually going to move
13:38 - my terminal so i'm not switching back
13:39 - and forth across the browser for it
13:42 - so i'm going to do
13:44 - okay regex breakfast front now i can do
13:47 - npm
13:48 - test
13:50 - or there's also the shorthand npm t that
13:52 - i can use
13:54 - and that runs my test command
13:57 - and
13:58 - it's running that one example test that
14:00 - i have
14:03 - okay and it's failing obviously because
14:07 - it is
14:11 - trying to import
14:13 - this component which doesn't exist
14:16 - so what i'm going to do in here i have
14:18 - test slash unit
14:20 - i'm going to start adding folders that
14:22 - kind of match
14:25 - my components actually i don't have a
14:28 - very complicated folder structure here
14:29 - because it's only five so i'm just gonna
14:31 - add a views folder and a components
14:33 - folder
14:34 - and test those
14:37 - so let me add those folders
14:39 - i'm gonna add
14:40 - what about the hour tracking app
14:43 - i'm going to be working on that more on
14:46 - my channel so
14:48 - i want to get this app done and the
14:51 - curriculum app and i'm going to finish
14:52 - up the hour app
14:54 - after that
14:55 - um
14:56 - yeah uh it's i want to work on it more
15:00 - on this channel but a lot of people if
15:02 - i'm working on the same project too many
15:03 - streams a lot of people drop off
15:05 - and
15:07 - there's not as much viewership so i'm
15:09 - gonna i think i'm gonna finish working
15:11 - on that on my twitch channel
15:13 - um yeah plus i'm gonna be taking a break
15:15 - from these dreams after today so i just
15:18 - wanted to get in one kind of different
15:20 - stream on here and then take a break
15:24 - um
15:25 - mostly because i have a lot of other
15:27 - stuff i have to work on
15:29 - okay so i added a views folder and a
15:32 - components
15:34 - folder
15:35 - okay
15:37 - um
15:39 - let's see
15:43 - okay
15:45 - yeah let me start with components
15:47 - because those are easier so i have body
15:49 - draw and top bar
15:52 - and let me go back to
15:54 - my list of things so i set up the just
15:57 - plugin that's done
15:59 - and
16:00 - i need to implement snapshot testing
16:04 - so
16:06 - let me do that real quick just these
16:08 - three components
16:10 - and if you don't know what snapshot
16:12 - testing is it basically is a rendered
16:15 - version of your component that you can
16:17 - see in a second because it shouldn't
16:19 - take me that long to set it up and then
16:22 - over time you compare different versions
16:25 - of your component
16:27 - and you make you basically make sure you
16:28 - haven't created unintended side effects
16:31 - that affect your rendered html
16:34 - so it can be useful in that way
16:36 - uh so let me do
16:38 - body and then
16:39 - i need to put a dot spec suggest we'll
16:42 - find this i think you can use like dot
16:44 - test or dot spec
16:46 - but just automatically picks up files
16:49 - and runs tests against them if they're
16:51 - if they're called dot spec if they have
16:53 - a dot spec in them
16:55 - um
16:57 - okay draw and top bar
17:00 - uh
17:02 - draw.spec.js
17:05 - and
17:09 - top
17:10 - bar
17:12 - yeah top bar
17:14 - dot spec dot js okay i have those three
17:17 - components
17:19 - and then i have views
17:22 - i'll leave those alone for right now so
17:24 - let me start with
17:26 - this body
17:30 - and basically what i want to do
17:33 - is
17:34 - mount this component and then create a
17:36 - snapshot from it which is like a
17:39 - stringify html
17:41 - of the component
17:43 - so
17:44 - uh let me
17:45 - go to
17:48 - um so just actually has
17:51 - um the just testing suite has a lot of
17:53 - things like an inspect library
17:56 - and it does
17:58 - snapshots
17:59 - it takes care of snapshots for you it
18:01 - has like a two html
18:03 - method or something but i think it's
18:06 - um
18:08 - or view test utils oh wait here it is
18:11 - view test utils adds a lot of methods so
18:13 - it's better
18:14 - to
18:16 - instead of using the html functions of
18:19 - jest you can mount it with view test
18:22 - utils and then create a snapshot
18:25 - and the view test details basically
18:27 - gives you a lot of
18:28 - methods for handling view components
18:31 - um so
18:34 - installation so it's already it should
18:36 - be installed with the just plug-in
18:39 - um
18:40 - [Music]
18:41 - let's see
18:45 - mount let me go to mount
18:48 - so i need to import mount
18:50 - from view test details
18:54 - and
18:56 - okay and then it imports the specific
18:58 - component that i want to mount
19:00 - so
19:01 - in this case i want to map body so be
19:03 - import
19:05 - and
19:07 - import body from
19:10 - i think i can do at which represents
19:13 - source
19:14 - i think i can use that in my test
19:17 - and then slash components
19:20 - slash body
19:23 - and then okay dot view
19:26 - and let's see if that works
19:29 - let me write a quick test
19:31 - so
19:32 - this is from just the syntax so describe
19:36 - um which is going to wrap all of my
19:39 - tests for this component
19:41 - so i'm just going to put
19:43 - describe
19:44 - body.view for right now
19:47 - and then i need to pass a function
19:50 - so let me pass
19:52 - just an arrow function there
19:55 - and now i can write tests inside instead
19:58 - of it i really don't like the it syntax
20:01 - that much
20:03 - um i'm going to use the test function
20:05 - which is the exact same i think one is
20:07 - alias to the other but i can't remember
20:09 - which one
20:11 - okay so i test and then i write
20:13 - a short description about
20:16 - what what the test is about
20:19 - um and then i can
20:22 - mount the component
20:24 - and i'm actually going to do a snapshot
20:26 - instead of
20:28 - some other kind of test here
20:30 - so
20:35 - um
20:36 - yeah so this is the same syntax i need
20:39 - to pass a string
20:40 - and
20:42 - i'm gonna test
20:44 - uh snapshot
20:48 - yeah i'll just put snapshot and then
20:52 - another function
20:54 - and now inside of this test i'm going to
20:57 - mount the component
20:58 - which mount the body component
21:03 - and
21:04 - now i can do
21:08 - wrapper
21:12 - oh wait i need to do expect
21:14 - i'm going to look up the syntax in a
21:15 - second so something like expect wrapper
21:19 - to
21:19 - match snapshot
21:22 - and then the first time i run this it
21:24 - creates a snapshot for me and then
21:26 - future times it compares
21:28 - any updates to the old snapshot
21:32 - um okay
21:34 - so let me search for that so snap
21:37 - shot
21:41 - um
21:43 - to match oh i think i need to look in
21:45 - the
21:46 - just docks for that
21:48 - snow
21:53 - so here it is because it's a method on
21:55 - me on the just expect library
21:59 - so basically here expect
22:02 - whatever component to match snapshot
22:04 - which is the same thing i have here
22:06 - because i've mounted my body component
22:08 - and now i can expect it to match the
22:10 - snapshot so let me try running this now
22:12 - it might complain that i have these
22:15 - three
22:16 - these two files empty but let me see
22:21 - let me run my test again
22:25 - and see if it works
22:34 - four failed okay
22:37 - draw body top bar
22:43 - example.spec.js oh i need to delete that
22:45 - file let me delete that example file
22:48 - i don't need that
22:52 - okay so
22:55 - um and let me
22:58 - actually if this one's failing let me
23:00 - see why that one's failing
23:03 - um
23:04 - you're trying to use
23:07 - sass oh node sas is missing
23:11 - um
23:13 - okay i don't know if i've run into that
23:15 - before but
23:18 - um
23:19 - i have
23:20 - i have sas installed in my project but
23:23 - it's a peer dependency
23:28 - through
23:31 - i have sas and sas loader yeah
23:35 - but basically view set up sas for me so
23:38 - i can use it inside my components or
23:40 - import it into my
23:43 - main view file
23:46 - um okay let me just try installing it
23:49 - like it recommends
23:50 - is the dev dependency
23:55 - and see if that works
24:00 - can you see the bottom yeah
24:02 - sometimes these stream tools cut off the
24:05 - bottom of my screen
24:16 - all right
24:23 - okay maybe note task is going to take a
24:25 - minute
24:27 - and then
24:29 - i don't know if there's any config i
24:31 - guess i'll see if there's any config
24:33 - that i need to do with sas and
24:38 - the project but i don't think there
24:40 - should be
24:41 - let me do npm test again
24:47 - all right
24:53 - cannot read property getters okay good
24:56 - good good good
24:58 - so now i'm getting actual errors with
25:00 - the component
25:02 - which is good
25:04 - um
25:07 - so
25:08 - and let me just run that one test file
25:11 - so i think i can do npm
25:15 - let me look back up through
25:20 - my commands
25:22 - yeah so then i just pass the component
25:24 - name to it
25:26 - so
25:27 - i can do npm
25:30 - t and then pass the component name
25:33 - so i'll do
25:34 - um
25:36 - body body is my first one so i'll do
25:39 - mpmt
25:40 - body and then
25:43 - i think it will just run that one test
25:45 - now
25:47 - yeah good
25:49 - so i just wanted to run that one
25:52 - and cannot read
25:54 - property getters of undefined so let me
25:56 - see if i have to
25:58 - um
26:00 - do something with that so let me open
26:02 - that file
26:06 - body dot view
26:08 - okay i'm using
26:10 - a couple
26:12 - um utility methods
26:17 - getters
26:18 - oh i think
26:19 - um let me let me search for this getters
26:23 - yeah so i think i'll have to mock
26:25 - getters here
26:27 - um
26:29 - let's see i have to create a local view
26:31 - store
26:32 - ux store
26:34 - and let me look up
26:36 - the syntax for that
26:38 - so i think actually it's
26:41 - um wait part of you test utils so let me
26:45 - look up local
26:48 - not local
26:50 - view okay this is a section on
26:56 - testing view x
27:00 - new view x dot store
27:06 - all right i
27:08 - i import a create local view
27:11 - and then i create
27:14 - um a new view x store
27:16 - basically
27:18 - all right
27:20 - so let me try this let me
27:24 - and then i'm gonna have to import
27:28 - these at the top
27:30 - and see
27:31 - um
27:35 - and actually these are
27:37 - absolute imports so
27:39 - i should put them here
27:43 - their library imports
27:46 - okay
27:48 - oh cool that's awesome when i save
27:50 - because i set up eslint auto fixing so
27:53 - it actually fixed all my imports too
27:55 - i didn't see that before all right so
27:57 - now i need to create a local view
27:59 - instance
28:00 - and i could actually create
28:04 - a regular view instance by importing
28:07 - just few
28:09 - but this way i'm not
28:10 - polluting any global state or anything
28:14 - um
28:17 - so let me see i have
28:21 - store i don't think i need i don't think
28:23 - i have any separate store config here i
28:26 - might import my state
28:28 - clone deep
28:32 - um
28:33 - yeah so
28:34 - let me do
28:35 - i need to create a new local view
28:38 - and then do local view dot use view x
28:41 - and i'm going to do that here
28:45 - um
28:47 - i might create a before each for this
28:50 - later
28:52 - now i need to create a new store so
28:55 - let me create a new store
29:00 - and
29:04 - all right
29:06 - so
29:11 - i think i'll just pass an empty object
29:12 - for right now oops
29:15 - and let's see
29:18 - expect
29:20 - um
29:21 - store okay and then i can make
29:22 - expectations on the store
29:24 - but
29:27 - i think i need to
29:30 - when i mount this component
29:32 - i think i can
29:33 - um
29:35 - let's see
29:36 - pass in an options object and pass the
29:39 - store into the component so that way i
29:41 - have access to
29:43 - getters
29:44 - so
29:45 - um
29:46 - yeah let me see if i can
29:49 - or i might have to mock the getters but
29:51 - let's see
29:53 - so i've created my
29:56 - store
29:59 - and oh yeah i need to look at the
30:01 - options that i can pass in
30:04 - so let me go to mount
30:07 - the mount function
30:12 - and see
30:15 - okay so
30:17 - i can pass in props data
30:19 - um does it have the whole api for this
30:23 - component options
30:27 - okay the first argument is the component
30:29 - the second is
30:31 - uh any number of options
30:34 - so i have mock stubs i can pass in local
30:37 - view which is what i want to do
30:40 - um
30:41 - yeah because that will have
30:45 - where is it yeah local view here so that
30:47 - will have
30:48 - the store because i'm doing view oops
30:53 - view.use view x
30:55 - actually wait i need to
31:00 - i think i need to put passing the store
31:02 - too let me see
31:09 - uh config.box store
31:14 - i wonder if this is this is better to
31:16 - just mock the store
31:23 - like stubs because then i can mock the
31:24 - getters
31:25 - the store.getters
31:28 - so actually i think this is what i want
31:29 - to do and then i'm going to save this
31:32 - local view because i'm going to need
31:34 - that in other tests as well
31:36 - so
31:38 - let me actually
31:40 - i think here i can define mocks
31:43 - but
31:45 - um oh yeah and for the local view i'm
31:47 - going to need that for my beautify setup
31:50 - as well because i think i'm going to get
31:52 - some errors about this after i fix this
31:54 - error
31:55 - but
31:56 - yeah so
31:59 - let's see
32:02 - let me set this up real quick
32:06 - um
32:11 - all right
32:12 - so config.mox
32:15 - dot store
32:18 - um
32:18 - [Music]
32:19 - i think actually what i'm going to do
32:21 - here
32:23 - is
32:25 - oops i can do
32:29 - or let me do i don't know let me just
32:31 - call this
32:33 - store moc
32:35 - this is just an object oh wait this is
32:39 - not proper javascript
32:41 - right and then on here
32:43 - i can also do a getters
32:46 - object
32:49 - and then
32:50 - put getters on there
32:53 - and then
32:59 - um
33:01 - config.mox
33:02 - [Music]
33:03 - um
33:07 - oh yeah this will be mocking it for all
33:09 - the components not just the
33:12 - but i just want to do it for
33:14 - the mount so let me look for mount again
33:18 - go back to
33:21 - mount
33:24 - let's see
33:28 - and
33:30 - where is it
33:36 - um here are mocks
33:40 - so
33:41 - yeah so i can create a mock and just
33:43 - pass it in
33:45 - to a mox object
33:47 - so i'm gonna do that here so i'm gonna
33:50 - create an object here
33:52 - and then i'm going to pass in
33:54 - i guess the syntax it wants me to use is
33:57 - dollar sign
33:59 - so let me go ahead and do that and i'm
34:02 - just going to take this and put it
34:03 - inside of the test as well so
34:07 - in here
34:11 - okay
34:16 - and now i can pass in this store mock so
34:19 - let me take that
34:25 - and
34:28 - store is not defined
34:33 - store here
34:35 - oh that's right
34:36 - so let me do let's store
34:40 - okay fine
34:42 - um
34:44 - and now getters
34:46 - so
34:48 - in my body
34:50 - i have this current challenge getter
34:54 - um
34:55 - which
34:56 - gets back an object of the current
34:58 - challenge and then i pull the name off
35:00 - of that
35:01 - so
35:04 - what i'm going to do is just mock that
35:07 - so the current challenge
35:10 - which
35:11 - will be
35:12 - a function that returns
35:15 - in object
35:19 - oh wait to return an object i have to
35:21 - wrap it so
35:23 - okay
35:25 - all right that should
35:27 - work
35:28 - but i'm going to be getting some more
35:29 - errors before this actually works
35:32 - so let me
35:34 - try this out
35:38 - okay npm test that body component
35:44 - and
35:47 - yeah so now it's complaining about the
35:49 - snack bar which is because i'm using the
35:52 - beautify component library
35:55 - and it doesn't recognize that
35:57 - so
36:01 - oh the snapshot actually passed so let
36:03 - me look at the snapshot
36:06 - it makes this so inside every folder
36:09 - where i create snapshots it creates this
36:10 - dunder snapshots folder
36:13 - and then
36:16 - it basically rendered
36:18 - yeah the
36:20 - output html
36:22 - but um it's using these beautify
36:24 - components because it doesn't know what
36:26 - they're supposed to be because
36:29 - just can't see beautify so i need to set
36:32 - up beautify
36:33 - to work with just
36:37 - and let me
36:39 - i'm just going to set this up in this
36:40 - file for right now
36:42 - on a local view instance
36:45 - and i think it's in the
36:48 - what is it the beautify
36:51 - beautify
36:53 - library
36:54 - and then they have like a
36:57 - just
36:58 - unit testing
37:00 - section
37:08 - oh wait no no
37:10 - oops
37:14 - here it is
37:22 - on
37:24 - all right it's taking a minute to load
37:26 - there we go
37:37 - um go to new docs okay
37:39 - i just need to set up just
37:42 - so bootstrappingvedify
37:46 - that's fine
37:50 - test runner setup okay i'll just click
37:52 - on just
37:57 - all right and now
38:03 - okay
38:05 - um
38:06 - oh wait this is the actual vcli plugin
38:09 - just get rid of that
38:11 - um so it's just linking me away but i
38:13 - need to know with beautify specifically
38:18 - okay here it is
38:21 - so it's saying
38:23 - to create a local view which is what i
38:26 - already did
38:28 - and now
38:30 - okay running before each to create new
38:33 - beautify
38:35 - um
38:38 - and before each basically runs before
38:40 - every test in the file
38:43 - so
38:44 - let me do this and last time i set this
38:46 - up i did it as a global
38:50 - beautify setup because i needed it in so
38:52 - many different tests
38:53 - but i think it's just easier here just
38:55 - to
38:57 - uh
38:58 - oops set it up
39:01 - in here
39:04 - just in the testing file
39:07 - of course i have to do it in each
39:08 - testing file but let me do it this way
39:10 - first
39:12 - okay and then when i map components i
39:14 - need to pass in
39:15 - local view and
39:18 - beautify
39:20 - so
39:21 - i need to pass it in here so let me do
39:23 - that
39:26 - above mox some passing in local view and
39:28 - beautify
39:30 - and
39:32 - uh one second let me go into my vs code
39:34 - setup because for some reason it's
39:38 - yeah it's doing
39:40 - four spaces instead of two
39:43 - um usually it auto finds it but
39:46 - in debt spaces so let me do two
39:49 - okay
39:51 - um
39:53 - let's see
39:54 - do you unit test all your projects i
39:55 - would like to say that i do but i don't
39:58 - especially if they're personal projects
40:01 - hi tom
40:02 - um
40:03 - companies i've worked for often off and
40:06 - on some of them
40:07 - have full testing suites unit testing
40:11 - integration testing
40:13 - you know end-to-end testing and then
40:14 - some of them just
40:16 - say they want testing and then never get
40:18 - around to testing because
40:20 - they say features are more important um
40:24 - yeah so
40:25 - i don't test i would like to test all my
40:28 - projects and so i want to get faster at
40:30 - testing because it feels like every
40:32 - every time i start testing
40:34 - an app which is almost always for a
40:36 - client
40:38 - i have to
40:40 - re-look up all this stuff because it's
40:42 - off and on when i test
40:43 - so i want to start testing all my
40:45 - personal projects so that i just get
40:47 - better at testing in general
40:51 - um yeah so
40:54 - let's see
40:56 - i was into tdd a couple years ago
40:59 - i was trying to tdd everything
41:02 - like i don't know 2016 or something
41:05 - and then
41:06 - i think i got out of it because the
41:08 - other developers around me weren't
41:11 - or it's very hard to convince people
41:14 - to
41:14 - write so many tests i think i went
41:16 - overboard with it so there's a balance
41:18 - between
41:20 - you know testing and
41:23 - yeah going too far
41:27 - okay beautify
41:30 - beautify okay i did the beautify that's
41:32 - good
41:33 - now it's
41:34 - coming into
41:35 - i'm well i'm passing it in as options in
41:38 - the wrapper
41:41 - so
41:43 - let me run that test again
41:53 - one failed
41:54 - all right
41:55 - um
42:00 - so let me
42:01 - wow that's a lot of failure
42:04 - um
42:05 - unknown custom element
42:07 - v row
42:11 - uh so these are all the beautify
42:12 - components so it should be
42:16 - it should know about these i mean i
42:18 - could technically stub them
42:21 - um
42:22 - so
42:24 - uh was it jess or
42:27 - um
42:28 - you test utils
42:30 - lets you stub things
42:33 - so then i could say
42:36 - what is it v row like v
42:39 - row
42:41 - and
42:43 - just say div or something
42:46 - um but that wouldn't render any nested
42:49 - components i'm avoiding that
42:52 - um
42:53 - and then i could also do
42:56 - a shallow mount
42:58 - where is it instead of a full mount
43:00 - because of shallow mount automatically
43:04 - stubs child components and a full mount
43:07 - um
43:09 - doesn't basically
43:10 - but i want to do a full mount so i get
43:12 - more of an idea of everything that's
43:14 - going to be rendered on the page
43:17 - so i have to figure out why it's not
43:19 - recognizing these beautify components
43:24 - uh so let me see
43:29 - expect
43:31 - rapper
43:35 - um
43:37 - okay
43:39 - great local view i got those
43:44 - am i importing
43:46 - wait i might need to import so here i'm
43:48 - importing
43:51 - oh that was really dumb i'm not
43:54 - importing
43:55 - uh
43:57 - beautify and view so let me import those
44:01 - there
44:03 - um i think i need view even though i'm
44:06 - not
44:08 - necessarily using it i think i need it
44:10 - in the scope
44:12 - um
44:14 - maybe let's see
44:15 - okay running a test one more time
44:22 - all right
44:23 - let's see if it's the same error
44:33 - okay well the
44:34 - snapshot passed but that's because the
44:37 - snapshot's not changing because i'm
44:39 - getting these errors
44:41 - did i register the component correctly
44:44 - it's saying that i didn't
44:49 - is before each
44:51 - running
44:53 - so let me see
44:59 - and here it's doing wrapper.html
45:04 - which is that
45:06 - jest
45:08 - which is the jest function
45:10 - the html but since i am
45:14 - mounting this with view test utils i
45:16 - shouldn't need to do that
45:19 - um
45:21 - so let's see beautify
45:26 - creating a new beautify
45:29 - i wonder if i need
45:32 - shouldn't need any options
45:38 - i'm mounting
45:44 - let's see
45:47 - mounting
45:48 - creating a local view
45:55 - um
45:57 - local view dot use let me just comment
45:59 - these out because
46:02 - it's because i'm not using them right
46:03 - now
46:06 - so
46:08 - let me run this one more time i don't
46:10 - know if that's going to do anything
46:12 - but i'm just getting rid of anything
46:13 - extra here
46:16 - let's see
46:18 - state getters
46:21 - wrapper
46:29 - yeah unknown custom element all of these
46:33 - vcard recall the text field all of the
46:35 - vidify components are still
46:39 - unknown
46:41 - um so let me take a look at this let me
46:44 - go to
46:50 - beautify um
46:58 - props describe mount function
47:01 - [Music]
47:04 - okay
47:05 - mocking beautify
47:10 - blang
47:12 - okay i shouldn't need to mock keep in
47:15 - mind you only need to stub the surfaces
47:17 - that are being used such as laying our
47:19 - application
47:20 - you can also import these services
47:23 - manually
47:26 - um
47:29 - i'm just i'm gonna look at one of my
47:31 - other projects because i think i'm a
47:32 - little stuck here
47:34 - unless anyone in the chat has an idea of
47:37 - what i should be doing
47:40 - i just can't remember the exact
47:42 - setup steps that i did for beautify
47:46 - so let me go to this app
47:52 - and
47:54 - okay
47:56 - so the curriculum let's see tests
48:01 - so unit tests
48:03 - and
48:04 - i do have this set up so this
48:06 - in this project i have a setup file
48:09 - for viewify
48:11 - and
48:13 - um
48:14 - yeah i basically
48:15 - [Music]
48:18 - set up vuedify and then
48:21 - [Music]
48:23 - have this imported into my just config
48:28 - so my just config is has a lot more
48:30 - stuff in it here
48:32 - um
48:34 - so let me just copy this because
48:37 - actually a lot of this was set up
48:39 - because i
48:41 - installed just
48:43 - yeah no ideas
48:45 - because i installed just
48:47 - with the regular setup of the app
48:49 - because in the vcli you know when it
48:51 - asks you
48:52 - if you want to set up testing right away
48:55 - so it set up some of these things and
48:57 - then i added a couple
48:59 - and i added this set up files and
49:01 - basically this setup files this file
49:04 - runs before every test
49:07 - so i can get
49:10 - viewify
49:11 - wait let me just copy this whole thing
49:16 - copy that and now i'm going to put it
49:19 - into my just config
49:23 - and
49:28 - wait undo because i want to save the
49:33 - plug-in there
49:36 - or preset
49:38 - um
49:50 - okay
49:51 - that's fine
49:54 - uh
49:55 - module extension okay so now i have this
49:58 - test unit setup test file
50:01 - so i'm going to
50:03 - go ahead and copy that file as well and
50:05 - that file is basically doing almost the
50:07 - same thing i'm already doing
50:10 - in that one component
50:12 - except it runs before every single test
50:16 - so i don't think i need the export here
50:18 - but i'm just going to copy the whole
50:20 - thing
50:21 - and let me go into
50:23 - my tests
50:25 - new file
50:26 - setup
50:28 - tests
50:29 - dot js
50:37 - okay so i set that up import view
50:40 - viewify view.use vidify
50:47 - um
50:49 - okay i am doing view dot use here
50:52 - i think that made it
50:54 - globally available and then i created a
50:57 - local view
51:02 - yeah that's weird what was i doing so i
51:04 - do view.use vidify
51:08 - but then i create a new view and use it
51:11 - with a local view instance i'll have to
51:13 - look at what i was doing there
51:15 - because it seems like i'm using a global
51:18 - view dot use and then i'm using a local
51:20 - view.use beautify
51:22 - and
51:26 - okay
51:27 - but there were a lot of errors i was
51:29 - getting with
51:31 - the jest setup so maybe i did it to
51:34 - alleviate one of those errors
51:38 - okay and then let me just go to one of
51:40 - my tests let me
51:42 - look at
51:44 - i don't know what's the easy test
51:47 - home test
51:50 - let me look at
51:52 - this is just in like a standard html
51:55 - section
51:56 - okay so it's just mounting
51:58 - and that's it i am using a full mount
52:01 - here
52:01 - and
52:02 - um let me make sure that the snapshots
52:05 - aren't rendering
52:07 - with
52:09 - the v dash yeah it's not it's rendering
52:11 - as actual divs actually how it would
52:13 - render out in the dom which is what i
52:15 - want
52:16 - okay so now i have this setup file
52:21 - um
52:24 - i wonder if i have the serializer
52:26 - installed
52:28 - um i think i must
52:30 - i think that comes with
52:33 - jest when i add it as a plug-in
52:37 - okay anyway i don't need
52:40 - local viewer view to fi now
52:43 - so let me take this out
52:48 - um
52:50 - i will i might still need it for
52:53 - a store maybe
52:56 - so
52:58 - i'm testing the snapshot
53:01 - i am mocking the store because
53:03 - i still need to do that since this is a
53:05 - full mount let me delete these two
53:07 - imports at the top
53:09 - don't need those
53:11 - okay let me try this and see where it's
53:13 - at
53:15 - npm test body
53:21 - okay
53:26 - setup files option was not found
53:30 - um root directory
53:34 - projects regex breakfast
53:38 - okay
53:40 - tess
53:42 - unit
53:44 - setup
53:45 - oh set up tests.js did i spell it right
53:51 - oh it's outside of the unit folder so
53:53 - let me put it inside of the unit folder
53:57 - because if i do other tests in here i'd
54:00 - have an end to end folder and other
54:01 - folders
54:02 - and the js setup would only be for unit
54:05 - testing
54:07 - so let me try one more time
54:11 - okay now it must have found the file
54:13 - because it's running the test
54:16 - oh and it failed
54:18 - oh this is a good failure though because
54:21 - now
54:22 - cool
54:23 - um now see how it has v row here well
54:26 - now it's rendering it as a div with
54:28 - class of row which is actually how it
54:30 - renders out in the dom so
54:32 - that is very very good
54:35 - okay
54:36 - so it's failing because it doesn't match
54:38 - my current snapshot
54:40 - so i have to tell it to update the
54:42 - snapshot
54:43 - because the new one is what i want to
54:45 - save as the snapshot
54:48 - so let me tell it to update here so i'll
54:52 - do
54:53 - npm
54:54 - or mpmt
54:56 - and then
54:58 - i need to pass it
54:59 - past the command to u dash u is for
55:02 - update snapshot
55:06 - um
55:08 - oh i forgot i forgot to run just that
55:11 - one file
55:12 - okay but now i can copy paste these into
55:14 - the other files
55:16 - two failed one passed so my body one
55:18 - passed and the snapshot is updated
55:22 - um
55:23 - okay let me get rid of that
55:30 - oh let me take a look at the snapshot
55:32 - yeah now it's rendering all the divs
55:35 - everything is rendering out correctly
55:41 - um what is this
55:43 - v snack oh that's a transition i can
55:45 - stub transitions
55:47 - which
55:48 - uh i'm not going to worry about it i
55:51 - think it automatically stubbed the
55:53 - transition for me so if i want it to
55:56 - be different like not be automatically
55:58 - stubbed
55:59 - i might want to
56:00 - put something else in there
56:03 - but that's okay
56:05 - i'm happy about that
56:06 - let me go to draw
56:10 - and
56:13 - okay the draw menu
56:15 - is
56:18 - so
56:20 - app bar
56:25 - toolbar so this is the top
56:28 - um
56:30 - nav bar
56:33 - the menu v
56:35 - now why is this
56:37 - let me look at this
56:41 - navigation i think draw i'm not even
56:44 - using right now
56:45 - this is very strange because all draw is
56:48 - is an app bar which is a top nav bar
56:51 - and
56:53 - okay so let me just delete draw i'm not
56:55 - going to worry about that for right now
56:57 - um
57:00 - so let me go to top bar and test the top
57:02 - navigation bar that would be more useful
57:05 - so let me get rid of draw i think i just
57:07 - didn't separate the components yet
57:09 - that's what i didn't do
57:11 - i created the draw component was going
57:13 - to put the draw in there and then i
57:14 - didn't
57:15 - so i'm going to
57:18 - test this top bar
57:21 - and
57:23 - where is it
57:27 - topbar.spec.js
57:29 - so let me
57:31 - i'm just going to grab this whole thing
57:33 - because first i'm going to be testing
57:35 - the snapshot
57:36 - and
57:37 - i actually don't know if i need
57:41 - the state yet
57:43 - um
57:45 - oh i will need to mock the store because
57:47 - i do need
57:48 - the state
57:50 - some state off of the
57:52 - store um
57:56 - let's see
58:00 - challenge and challenges
58:05 - yeah i definitely need some state here
58:07 - so let me actually undo that
58:13 - oops
58:17 - and
58:22 - redo
58:23 - i'm gonna get rid of these for right now
58:30 - okay
58:31 - and i need to import the top bar
58:33 - component so let me import top bar
58:37 - and
58:39 - yeah it's much cleaner without setting
58:41 - up view to find every single file
58:44 - that was a better decision
58:46 - okay so now top bar so i'm going to
58:48 - describe top bar dot view here
58:51 - i'm still doing the snapshot first
58:54 - i'm going to mock the store here i don't
58:55 - need any getters
58:59 - but in state
59:01 - i do need to i don't know why i have the
59:04 - id here actually
59:06 - i think that was just the
59:09 - default thing that i had
59:10 - so in state i need to mock
59:14 - um
59:16 - oh wait i do need the percent done okay
59:18 - never mind
59:19 - so i will need to create getters
59:22 - percent done
59:25 - um
59:26 - [Music]
59:31 - yeah i'm gonna have to mock that
59:33 - getter correctly later
59:35 - um but for right now i'll return like a
59:37 - zero or something
59:40 - okay so
59:42 - uh let me
59:43 - do
59:44 - getters which is an object and i'll do
59:49 - percent done
59:51 - and then
59:55 - return
59:57 - zero
60:00 - for right now
60:02 - and then in state what do i want to mock
60:04 - and state so
60:05 - i need to mock the challenges which is
60:07 - an array and current index
60:10 - which is a number
60:16 - um
60:19 - yeah challenges let me do challenges and
60:22 - current index
60:24 - so
60:25 - challenges
60:27 - in array
60:29 - and then and actually i'm going to be
60:30 - importing the challenges at some point
60:33 - so because i have a challenges
60:36 - dot js file here with a list of all the
60:39 - challenges so i can just import those in
60:41 - my tests and test off the actual
60:43 - challenges
60:44 - so
60:47 - let me do what was the other thing
60:50 - it was current index
60:52 - so
60:54 - current index i'll put this at zero as
60:56 - well
60:59 - okay so i've mocked the store
61:03 - so let me create a snapshot for the top
61:06 - bar let's see
61:09 - times it's just after 11. it's been
61:11 - about an hour
61:13 - um
61:16 - do npm test
61:18 - run both my tests
61:22 - all right maybe testing is a is a dry
61:26 - topic
61:27 - there's not much chat about it
61:32 - cannot read property
61:35 - small and down
61:36 - oh right um i might need to mock that
61:42 - because
61:43 - let me see small
61:47 - and i thought i was using it here
61:53 - let me see if i'm using it small and
61:57 - no
61:58 - then why is it doing that that's a so
62:00 - that's um
62:01 - a break point
62:04 - um
62:05 - property that i get from beautify
62:09 - for small and down but why is it saying
62:12 - it can't mock it here
62:16 - that's weird
62:17 - i'm not using it i'm not specifically
62:20 - referencing small and down
62:23 - so
62:25 - why is it saying that i might look this
62:27 - up
62:31 - oh maybe beautify is undefined here
62:35 - so
62:36 - there are some weird things in testing
62:38 - vidify like i had some issues with the
62:40 - modal testing the modal because it
62:42 - renders an extra
62:45 - specific component
62:47 - inside the modal
62:50 - so yeah let me see
62:54 - so this component i'm not doing anything
63:00 - different importing that
63:08 - um
63:12 - oh wait let me do medium no okay so yeah
63:15 - let me search for this and see if anyone
63:17 - else has this
63:19 - problem with
63:21 - beautify
63:27 - okay
63:31 - yep it seems like someone else had this
63:33 - same problem from this year
63:35 - i'm trying to solve this issue but i
63:37 - can't
63:38 - oh this is very poorly formatted
63:42 - okay
63:43 - everyone render type error cannot read
63:45 - property small and
63:48 - down of undefined
63:53 - um
63:55 - surely you'll be loading beautify as a
63:58 - plug-in that's where the error comes
64:00 - from to solve this issue
64:04 - delete it from plug-ins and load it as
64:06 - follows
64:11 - um
64:13 - nope that doesn't really i don't know
64:15 - why
64:16 - this person is giving this advice
64:18 - i don't think that's very good advice
64:22 - testing done by the clients in real time
64:24 - yeah
64:24 - as everything crashes and burns
64:28 - um
64:30 - unfortunately that's how it's done a lot
64:32 - of the time
64:35 - actually with this
64:37 - [Music]
64:38 - i don't want to say too much but this
64:39 - django app i'm working on
64:41 - i've been dying to write tests for it
64:43 - for a while
64:45 - and
64:46 - the client is testing it and
64:49 - some business people are testing it so
64:51 - hopefully i can write a test suite at
64:54 - some point
64:55 - i would love to
64:57 - i just haven't gotten around to it yet
65:00 - um
65:01 - beautify js
65:04 - at least like the finicky parts of the
65:06 - app
65:07 - like that's you know a minimum for
65:09 - testing
65:12 - let's see
65:16 - um i want to look at their github
65:18 - actually
65:20 - how to specifically
65:24 - ajs warn
65:26 - yeah i don't know
65:28 - okay this is the same thing
65:30 - after install view to find my webpack i
65:32 - have this message in the console
65:37 - yeah let me just look at their github
65:39 - and see
65:42 - if
65:45 - they have okay they have foreclosed
65:47 - issues
65:48 - on this same topic it seems
65:53 - causes type error
65:57 - using webpack
65:59 - error with apple actually i am using app
66:02 - bar so this is probably the error i'm
66:04 - getting
66:05 - because
66:07 - the error is in
66:10 - this app bar component so i oh okay so
66:13 - i'm guessing that beautify renders this
66:16 - under the hood beautifies using small
66:18 - and down because the app bar is very
66:20 - specific to the screen size
66:23 - and since i am collapsing it adding a
66:26 - draw
66:27 - at
66:28 - different screen sizes so this appears
66:31 - on x small
66:32 - and on every other
66:34 - screen size it shows all of the things
66:36 - in the top
66:37 - oh no actually on this app this appears
66:38 - on every screen size because this is
66:40 - where the challenges are listed
66:43 - okay but i'm guessing it is a problem
66:45 - with the v app bar
66:47 - so
66:51 - okay so this person
66:54 - isn't writing entirely in english
66:57 - but he's saying he has a problem with
66:59 - the app bar
67:03 - um
67:04 - [Music]
67:05 - okay
67:13 - they're saying if you switch to beautify
67:14 - 2.0 there's probably a problem with that
67:18 - um
67:20 - yeah i've been using vidify 2.0 for a
67:22 - long time so it's not an issue with that
67:25 - but
67:26 - let me just rethink how i'm
67:29 - doing this app bar i'm guessing
67:34 - so
67:35 - let let's see if i did
67:38 - oops
67:40 - shallow i'm gonna try some different
67:42 - things so shallow mount
67:45 - um which will stub all of the beautify i
67:48 - think every single beautify component
67:50 - actually will get stubbed
67:51 - but
67:52 - let me
67:54 - try this um
67:57 - oops i do undo
68:03 - okay
68:04 - um
68:07 - where's that oh yeah mount that was it
68:10 - it's like where was i okay
68:11 - shallow amount
68:13 - um
68:16 - let me
68:20 - do a shallow mount
68:21 - so npm test
68:23 - and just that component so top
68:26 - i don't know why i called it top bar
68:28 - seems like it should be top nav
68:31 - or just nav because
68:34 - well the draw is going to go in a
68:35 - different component but yeah nav might
68:36 - have been better um
68:39 - right now actually it's only
68:42 - mostly one page so maybe top bar is okay
68:45 - yeah
68:46 - just thinking out loud
68:48 - okay so
68:50 - invalid prop type check for value
68:52 - expected number
68:56 - um oh yeah i have to mock the props on
68:58 - this too
69:02 - and i think i do that with
69:06 - props
69:08 - props data
69:11 - since i'm passing props into this
69:13 - component
69:14 - and let me see
69:18 - what the props are
69:22 - oh no
69:24 - i guess there aren't any props okay
69:26 - uh
69:28 - so
69:28 - i do need to mock
69:30 - so i guess that's just data maybe it was
69:32 - data i'm confused
69:35 - uh type check failed for prop value
69:37 - expected number
69:39 - oh on the progress bar
69:42 - got string
69:44 - so let me see what the progress
69:48 - b progress linear value okay so store
69:52 - dot getters dot percent done
70:00 - expected number got string
70:06 - i mean it is returning
70:09 - a zero
70:10 - not sure why it thinks that's a number
70:15 - um
70:17 - okay well
70:20 - i'm fighting with my own unit test right
70:22 - now good jared maybe you can help me
70:25 - with mine take a break from yours
70:28 - okay so
70:31 - all right so i'm
70:33 - i'm over an hour through the stream i'm
70:34 - actually gonna push what i did so far
70:37 - um
70:38 - just because it makes it easier if
70:40 - anyone wants to take a look at it and it
70:42 - only takes a second so
70:44 - get status
70:49 - um
70:51 - store index
70:54 - uh this match does not match
70:57 - let me look at those files i didn't
70:58 - think i updated them does match
71:09 - um
71:15 - okay i wonder what the diff is for that
71:18 - so let me look at the diff for these
71:21 - so get diff
71:23 - and
71:25 - i know i'm just
71:27 - uh
71:27 - not part of testing but
71:29 - i'm just curious because i didn't think
71:31 - i updated these files and now it's
71:33 - saying they're updated
71:35 - so
71:38 - let
71:39 - oh i know what happened
71:41 - uh my
71:43 - automatic eslint changed some things
71:45 - like it changed lint or change let to
71:48 - const because i'm not
71:50 - updating this variable anywhere okay
71:53 - uh that's fine i'm guessing if i diff
71:56 - the
71:57 - does
71:58 - not match file
71:59 - yeah it turned let to const okay
72:02 - that's fine
72:03 - i'm just gonna
72:05 - add everything then
72:08 - uh
72:09 - code from
72:11 - live stream on what's today
72:15 - uh august 21st
72:19 - august
72:20 - 21st
72:22 - uh 2020
72:25 - part one
72:30 - okay i'm just gonna push
72:32 - oh rejected oh i know i know why
72:36 - um
72:38 - yeah because of these dependencies
72:40 - dependabot
72:42 - updated some outdated dependencies
72:45 - oh merge conflict and package lock.json
72:49 - let me look at the merge conflict
72:51 - real quick
72:57 - um
72:58 - i don't see it let me see
73:01 - here we
73:02 - go uh i don't know
73:06 - there's
73:08 - a command supposed to be able to fix
73:09 - this i can't remember off the top of my
73:11 - head
73:14 - let's see
73:18 - except
73:20 - except both
73:35 - oops
73:41 - okay
73:42 - i think i fixed it we'll see
73:54 - all right let me put fixed not fixing
73:57 - fixed merge conflicts
74:01 - okay this took a lot longer than i
74:03 - thought just to push the code
74:08 - okay now let me do
74:10 - in mpmi
74:13 - locally because i did update those
74:14 - dependencies
74:18 - uh
74:22 - yeah it doesn't have to convert lead to
74:23 - const but i think i'm not stopping it oh
74:26 - unexpected token
74:28 - uh what should i do this i mean this is
74:30 - a live stream
74:32 - i'm just gonna delete my package lock
74:35 - um
74:36 - because i already updated it and
74:37 - committed it
74:39 - and
74:41 - i'm not too worried
74:42 - but
74:43 - yeah
74:44 - don't do that at work
74:47 - okay
74:49 - um
74:52 - you missed free code camp what do you
74:54 - mean i missed free code camp
75:00 - are you telling
75:01 - i don't know
75:02 - i think i missed that because it's
75:04 - probably been 30 seconds since you sent
75:05 - that message
75:09 - okay now it's creating a new package
75:11 - lock for me
75:14 - which is unfortunate that i messed it up
75:17 - but
75:18 - it should be okay in this project
75:21 - let's see
75:22 - npm run surf yeah i think if you don't
75:26 - stop
75:27 - the automatic
75:29 - uh
75:30 - like
75:31 - what is it
75:32 - prettier and
75:34 - um
75:36 - beautiful
75:38 - beautifier or something and then there's
75:40 - the eslint one which is the one i use
75:42 - the auto eslint i think if you don't
75:44 - stop it from doing things then it's just
75:46 - gonna do all of its default
75:49 - things
75:50 - okay mpm run serve which is change
75:52 - everything to const unless you're
75:53 - redefining it somewhere
75:58 - oh wait i don't need to surf because i'm
75:59 - testing
76:00 - actually let me make sure the app is
76:02 - still running after that
76:05 - let me try to run it
76:08 - all right
76:14 - so how is everyone doing with the
76:16 - testing
76:18 - is this uh too dry of a topic
76:23 - for a live stream
76:24 - seems
76:26 - maybe hard to chat about
76:28 - i just wrote my own eslint rules
76:30 - yesterday for just and even added in
76:33 - auto fixes for them oh nice
76:36 - which repo is that in
76:39 - do you have it in your
76:41 - i know you do your
76:42 - uh whatever
76:44 - uh
76:45 - what is it yes
76:47 - lint
76:49 - or no tjw right tjw lint
76:52 - on github
76:54 - so
76:55 - uh
76:56 - everyone else who might not be in the
76:57 - inside of this conversation jared runs a
77:01 - vue.js group
77:02 - and
77:03 - um
77:04 - yeah does a lot of
77:06 - open source and has a bunch of open
77:08 - source libraries
77:10 - for
77:11 - linting
77:12 - and
77:13 - uh yeah all good all different kinds of
77:15 - stuff on github
77:17 - so that's why i know about them and he
77:20 - has this group of libraries called like
77:21 - tjw lint
77:23 - um
77:24 - with different linting options
77:28 - okay so the app is running let me go to
77:30 - the browser
77:33 - and see
77:34 - don't look at the app jared it's very
77:36 - very ugly
77:40 - okay yeah everything's working fine so i
77:42 - didn't break anything that's good
77:44 - there's
77:45 - a bug in here
77:48 - um
77:50 - i was going to submit the rules to the
77:52 - official
77:53 - just islip plugin but it's written in
77:55 - typescript so okay
77:57 - so they're adding in an extra layer of
77:59 - difficulty for you
78:01 - um
78:02 - you could always raise an issue and say
78:04 - hey i have all of these rules does
78:06 - someone want to convert them make it
78:08 - typescript friendly for me
78:11 - um
78:12 - what was i doing oh yeah so get rid of
78:15 - that
78:16 - i just
78:18 - uh deleted my package lock reinstalled
78:20 - it seems to be working okay
78:22 - and now
78:24 - oh yeah the whole reason behind that was
78:27 - to
78:28 - um
78:29 - push my code live so that everyone can
78:32 - see the code so if you joined i don't
78:35 - know if this is in the description of
78:36 - the video but that's the repo that i'm
78:38 - writing tests for today and i did just
78:40 - push some tests
78:42 - um
78:44 - now
78:45 - wow it changed like
78:47 - uh every single folder oh that's because
78:49 - of the auto eslint so i added linting
78:53 - accidentally with the testing but that's
78:55 - okay
78:56 - and now for projects
79:00 - i have the testing project
79:03 - implement snapshots didn't quite finish
79:04 - that although i should have a checklist
79:06 - for this let me turn this into an issue
79:10 - so that i can add a checklist here
79:12 - so
79:15 - um body dot view component
79:18 - and let me go ahead and check this off
79:20 - because it marked down because i already
79:23 - did it so
79:24 - i do need to test the
79:27 - was it top bar dot view component
79:32 - and then
79:33 - i might test other
79:35 - other things for snapshot testing i
79:37 - think i'll leave snapshot testing it
79:38 - here today and try to get to some other
79:40 - testing in five time
79:42 - but
79:43 - so now because i convert it into an
79:45 - issue i can have
79:46 - a checklist in here so i have
79:50 - yeah so i can check them off as they go
79:51 - which is cool
79:53 - so
79:55 - let's see
79:58 - get rid of that
80:00 - okay so top bar
80:02 - let me run the test again now
80:07 - and see where i'm at
80:14 - okay so
80:16 - it's still complaining about
80:18 - value
80:21 - um expected number string got oh it got
80:24 - function
80:26 - okay
80:28 - this was
80:29 - um
80:31 - percent done okay
80:34 - so
80:35 - i'm just gonna
80:37 - all right i'm just gonna put a zero
80:38 - there because it's returning a function
80:41 - to call and
80:43 - yeah anyway
80:44 - let me see if that works
80:51 - okay now i get a new error
80:54 - which is
80:57 - oh yeah this is just updating the
80:58 - snapshot so
81:01 - let me
81:02 - just
81:03 - update the snapshot real quick
81:08 - and that should pass yeah so that passed
81:11 - but the only issue is
81:13 - i'm doing a shallow mount not a full
81:15 - mount and i want to be doing a full
81:17 - mount
81:18 - but here's the top bar so basically it's
81:21 - stubbing
81:23 - um
81:24 - so because
81:28 - sorry because i'm doing a shallow amount
81:32 - it's stubbing all of the
81:34 - components inside
81:37 - um
81:38 - these auto stub which is really ugly and
81:41 - doesn't help me out a lot so
81:44 - i'm going to
81:46 - now try to mount this
81:48 - so let me see if i can mount it
81:53 - actually i don't need this props data i
81:55 - didn't need that because there aren't
81:56 - any props i thought for a second there
81:57 - were but there aren't
81:59 - okay so now let me run this with a full
82:01 - mount oh wait wait stop stop stop
82:04 - without the dash u because that will
82:06 - automatically update my
82:08 - snapshot that would destroy the point of
82:11 - snapshots
82:12 - okay
82:13 - failed again
82:18 - what is this doing you cannot read
82:19 - property with the fun to find well this
82:21 - is good this is a new error
82:25 - it's complaining about the v navigation
82:27 - draw
82:31 - i cannot read property width of
82:32 - undefined
82:39 - uh oh yeah and it's also complaining
82:41 - about this
82:42 - so
82:44 - aaron getting watcher computed height
82:46 - typo yeah it's the same error
82:49 - plus the other errors that it's getting
82:51 - so i think for right now
82:54 - um because i have like 30 minutes left
82:56 - on the stream
82:57 - i am going to just
83:01 - leave it at shallow mount
83:03 - and try to fix it later let me put it to
83:06 - do in here
83:09 - to do
83:11 - get because most of the issues are with
83:14 - vidify
83:15 - and i need to actually be able to sit
83:18 - down and debug vidify on this
83:20 - so
83:22 - get
83:25 - this to
83:27 - to work with a full
83:30 - mount
83:34 - okay
83:35 - so
83:37 - let me run all the tests now npm test
83:47 - the full mount is working in body it's
83:49 - just not working in top bar
83:52 - okay and i'm gonna
83:55 - um check this off here
83:59 - so
84:02 - yeah
84:04 - okay so i'm gonna check that off and i'm
84:06 - gonna add
84:07 - um
84:10 - let's see
84:11 - update
84:13 - just like it to do for the future so
84:15 - update top
84:17 - bar
84:19 - note update top bar
84:21 - snap shot
84:23 - test to use
84:26 - full
84:27 - mount
84:31 - okay so i'll put that there
84:33 - um
84:34 - now i want to do some
84:36 - component testing so
84:40 - let's see so test
84:43 - that it moves to the next challenge when
84:45 - correct challenge is input
84:48 - so let me run the app real quick so npm
84:50 - run serve
84:53 - and i'm going to open the
84:56 - challenges file
84:59 - and so each challenge object has all of
85:01 - these attributes
85:06 - it has the
85:09 - correct pattern
85:11 - any forbidden patterns like you can't
85:14 - use the period
85:16 - because
85:17 - um
85:18 - it's too easy it matches any character
85:20 - you're supposed to learn how to do this
85:23 - you know just as it is
85:25 - so i have some forbidden patterns
85:27 - i have
85:29 - um
85:30 - flags
85:32 - the
85:33 - name of the challenge which
85:36 - which you don't have to match the full
85:37 - text is this part of the text you have
85:40 - to match
85:41 - and then info is what appears in that
85:43 - info box below the challenge
85:46 - so
85:47 - let me go here
85:50 - all right
85:51 - um
85:52 - so here it's telling me to
85:55 - match the whole word just by typing out
85:57 - the letters for the first challenge and
86:00 - then i can hit enter so there's no like
86:02 - submit button here so when i test it i'm
86:04 - going to have to test that
86:06 - enter that once the enter key
86:11 - is pressed that it moves to the next
86:14 - challenge
86:17 - so
86:18 - um
86:20 - let's see
86:23 - and that would be in the
86:25 - body component
86:28 - yeah
86:29 - because this is where it shows all of
86:31 - the current challenge
86:33 - the current challenge here
86:36 - so i'm going to have to set the current
86:38 - challenge
86:41 - in the mock to
86:44 - one of these challenges so i need to
86:46 - import that so let
86:48 - me test
86:51 - let's see
86:56 - and just have these three open okay
86:58 - so let me import the challenges here
87:02 - and right now i'll get rid of these
87:06 - although i do want to fix my view x
87:09 - set up in a bit
87:11 - so
87:13 - let me but now i'm just like
87:16 - doing a very basic mock here
87:18 - so
87:19 - i'm going to
87:21 - import
87:23 - challenges and let me do that from here
87:26 - so import
87:29 - challenges
87:30 - from
87:32 - at
87:34 - no at
87:35 - data
87:36 - slash
87:38 - challenges
87:41 - and now
87:44 - current challenge here
87:46 - is i'm just going to
87:50 - let's see
87:52 - i'm just going to
87:54 - set it equal let's say challenge zero
88:00 - so um
88:03 - okay uh
88:05 - yeah this will change the mock-up
88:07 - actually or this will change the
88:11 - um
88:12 - what do i call it the snapshot
88:15 - actually so let me run this oh no i'm
88:18 - still running the app
88:19 - um
88:22 - so oh yeah i don't think i need to be
88:24 - running the app because i already know
88:26 - like the flow of it how it's supposed to
88:28 - move from challenge to challenge and i
88:30 - need to be testing that in my tests so i
88:32 - can stop the app
88:34 - here
88:35 - and now let me do
88:38 - um
88:39 - let me run mpm test again
88:46 - and see
88:50 - okay didn't match the snapshot i already
88:52 - know this
88:53 - because it's actually
88:59 - rendering
89:00 - you know a real challenge
89:04 - so what i'm going to do is actually just
89:06 - i think i'm going to update the snapshot
89:08 - so let me just update that snapshot real
89:11 - quick
89:13 - um
89:16 - dash u
89:19 - because i want it to because it's never
89:21 - going to be an empty object in real life
89:23 - or it's never going to be an empty
89:24 - object it's always going to be an actual
89:26 - challenge
89:28 - um
89:29 - so i think that's good
89:33 - and i'm going to move this
89:39 - out to before each actually so i'm going
89:42 - to do before
89:45 - each
89:49 - and
89:51 - i'm going to define this store here
89:53 - outside of it so i'll do let
89:56 - dollar sign store
89:59 - um
89:59 - [Music]
90:02 - yeah i just want to
90:04 - initialize it as an object
90:07 - and then i'm going to redefine it before
90:09 - each test as this object
90:12 - okay and now i need to write a second
90:14 - test down here so let me do
90:17 - test
90:19 - and this time i'm going to be testing
90:21 - that
90:24 - challenges
90:26 - advanced
90:34 - okay and
90:37 - now i need to mount so i'm going to
90:39 - mount this again
90:41 - mount the component
90:44 - and i have the mock which is the store
90:47 - and
90:48 - let's see
90:50 - i can write expect statements now so
90:55 - what do i expect to happen at first
90:58 - so i expect um
91:02 - and let me actually look at
91:04 - this body.view component
91:06 - so there's no props but i do have a lot
91:09 - of data here that i'm not
91:11 - um
91:12 - locking
91:16 - let's see
91:25 - um
91:26 - yeah there's a lot going on in here with
91:28 - the regex testing and stuff
91:31 - and then
91:32 - i also want to test if the snack bars
91:35 - show up
91:37 - so
91:39 - i don't need to test too much about
91:42 - the dom traversal
91:44 - so i feel like that's for end-to-end
91:46 - testing
91:47 - where i get to render this in an actual
91:49 - browser
91:51 - um
91:53 - but who knows when i'll write run
91:54 - end-to-end testing for this
91:56 - so
91:57 - okay so i've mounted this and now i want
91:59 - to test
92:00 - that
92:03 - let's see currentchallenge
92:10 - currentchallenge.name
92:11 - currentchallenge.info
92:13 - and then in the middle
92:15 - i can see that
92:18 - well let me go back to
92:21 - i need to test that it moves to the next
92:23 - challenge when correct challenge is
92:25 - entered so let me step through that
92:28 - and here
92:30 - i'm gonna do
92:33 - okay so
92:36 - i'm gonna have to enter
92:38 - uh correct
92:40 - answer
92:42 - into input
92:44 - so i'm gonna have to grab the input and
92:46 - then enter the correct answer
92:48 - and then i'm going to have to
92:52 - um
92:55 - yeah i'm gonna have to
92:58 - press enter
93:00 - to
93:01 - to submit the challenge and then i'm
93:02 - gonna have to
93:04 - check
93:05 - that chat
93:08 - uh challenge
93:09 - advanced
93:11 - to
93:12 - second challenge
93:15 - okay so those are the steps i need to do
93:18 - and
93:20 - um let's see
93:22 - let me first grab the input
93:26 - so that's the first thing i need to do
93:29 - and i can do that
93:31 - let's see if
93:32 - i don't uh remember the syntax for it so
93:37 - let me
93:44 - see if it's in here
93:49 - or else i don't need wrapper
93:52 - functions
93:56 - i actually just need
93:59 - um
94:01 - to grab the input which i think will is
94:03 - just from just
94:06 - i mean yeah it's
94:07 - yeah uh
94:09 - okay so i don't need this is just a vgs
94:12 - unit testing cookbook that's not helpful
94:14 - with what i'm looking for
94:16 - so i'm going to
94:19 - um
94:23 - let's see
94:27 - uh dom manipulation
94:30 - i just need to grab
94:32 - dom elements
94:37 - and i can't remember exactly
94:47 - expect has assertions
94:49 - um dom manipulation
94:54 - okay so that's a jquery document.body
94:57 - require
94:58 - okay um
95:00 - it's not helpful
95:02 - let me see
95:05 - uh i wish
95:07 - i wish more people could chat on this
95:10 - um
95:12 - let's see
95:22 - um
95:27 - okay let me look for
95:32 - ingest
95:35 - oh yeah this is easy
95:37 - uh sorry i had a brain fart there okay
95:40 - so
95:41 - uh rapper dot find and then i find
95:44 - divs i think this will return
95:47 - in
95:48 - array or maybe the first div
95:52 - a first dom node
95:54 - okay that matches
95:57 - um how many inputs do i have on this
95:59 - page
96:00 - let's see
96:05 - input
96:11 - um
96:15 - what would it be oh it's oh that's right
96:18 - i was like why isn't it called input
96:20 - it's a beautify component so it's called
96:22 - like v text
96:24 - field
96:26 - okay
96:27 - so v text field
96:30 - and
96:32 - that will render
96:34 - since this is fully mounted that will
96:36 - render as an input so i should be able
96:38 - to find that
96:39 - as an input
96:41 - and
96:46 - yeah i only have one v text field so one
96:48 - input
96:50 - um oh no i have two
96:53 - because i have
96:57 - um i have this one
96:59 - and then i have
97:03 - the other one on the page which is for
97:06 - flags which should be disabled so i need
97:08 - to check that also that's
97:10 - disabled
97:13 - when basically what happens is it's
97:16 - disabled for all challenges
97:19 - unless
97:23 - yeah no flags here unless they need
97:25 - flags
97:27 - so some of the later challenges use the
97:30 - global flag like this one yeah these use
97:32 - the global flags so then it's not
97:34 - disabled
97:35 - basically but
97:37 - if they don't if the challenge doesn't
97:38 - need flags then that input field is
97:40 - disabled
97:42 - yeah i know i need to use
97:45 - oh thanks jared i don't know why i
97:46 - didn't see chat um wrapper.find thanks
97:51 - uh
97:55 - data.testtoken
97:58 - datatest yeah i need to do use
98:00 - that definitely so let me do
98:02 - wrapper.find
98:08 - let's see
98:09 - and i need to put that on my component
98:12 - to reference it so here's the text field
98:15 - that i want to
98:17 - reference
98:20 - and i don't know
98:24 - this is weird i don't know why
98:26 - the other text field isn't rendering
98:31 - like why is there only
98:34 - one text field here
98:38 - placeholder enter regex
98:41 - where let me look for enter flags
98:45 - what happened
98:46 - where's the enter flags did i
98:48 - accidentally delete it
98:51 - wait i need to
98:54 - see this now
98:57 - run my development server i might have
98:59 - accidentally done something
99:08 - so i might have to put that back
99:10 - either way yeah i do want to use the
99:12 - data test thanks
99:14 - i'm going to put that in as soon as i
99:15 - figure out what i did to my other input
99:22 - all right
99:27 - the chat's so quiet how are all of you
99:32 - i don't know if anyone can sit through
99:33 - two hours of
99:34 - watching someone
99:36 - figure out testing
99:41 - but kudos to any of you who are
99:49 - wow um
99:52 - yeah so let me look through my whole app
99:56 - and
100:02 - enter flags did this just appear
100:05 - this wasn't here before and now it's
100:07 - here and now i'm confused
100:09 - okay um anyway so i have this one and
100:12 - now i have this one and let me put add a
100:15 - data test here i'm just going to add it
100:17 - to the top
100:19 - data
100:20 - test um
100:25 - and let's see what should i call this
100:28 - um
100:30 - yeah i'll just call it
100:34 - regex okay and now i can reference that
100:37 - here
100:38 - so i can do
100:39 - [Music]
100:40 - what is it data
100:43 - data test
100:44 - equals
100:45 - projects
100:48 - i think so
100:51 - this would be better on twitch yeah so
100:54 - i'll have
100:56 - a stream so i have a stream on sunday on
100:58 - twitch every sunday and wednesday i do
101:01 - stream on twitch and sometimes like
101:03 - other random streams
101:05 - but
101:06 - yeah this is a good way basically for
101:08 - free code camp to earn money
101:10 - um and help support free code camp
101:13 - and having millions of followers
101:15 - basically their chat gets out of control
101:18 - if they
101:21 - don't have
101:22 - or if they don't have some stipulations
101:25 - on the chat
101:26 - so
101:28 - yeah
101:29 - so i don't fault them for making a
101:32 - premium chat
101:34 - if i had millions of followers i don't
101:35 - know maybe i would need to do that but
101:38 - uh the two of you yeah jared and i have
101:41 - collaborated i've had inter i've
101:43 - interviewed him on my channel as well
101:46 - you can find over on my channel faraday
101:47 - academy i've interviewed jared about vjs
101:51 - and i don't think we talked about
101:53 - testing maybe we'll do a testing one
101:55 - coming up that would be fun
101:57 - um
101:58 - okay so
102:00 - let me do const
102:02 - input equals
102:05 - this input that i just found
102:08 - and now
102:11 - i need to do
102:13 - let's see input
102:16 - dot value
102:18 - something like input
102:20 - dot value and then i can change the
102:22 - value i'm not sure if this is the exact
102:24 - syntax
102:26 - but
102:27 - cool
102:28 - um
102:29 - yeah jared maybe we can do a testing
102:32 - collab
102:33 - if you're free at some point
102:37 - um
102:39 - i did a views on view podcast where i
102:41 - led a discussion on unit testing oh yeah
102:43 - that was a really good podcast episode
102:46 - um if you're interested views on view is
102:48 - a view podcast
102:50 - and jared did an episode about testing
102:53 - on there and i listened to that um i
102:56 - think twice so yeah it was really good
102:58 - so input that that value and then i need
103:02 - to put
103:04 - the
103:06 - um
103:07 - value of this
103:09 - challenge of the solved challenge which
103:13 - i am just going to take from here
103:15 - so dot pattern
103:18 - and i'm going to put that in here
103:19 - because that's the solution
103:22 - so dot
103:23 - pattern
103:25 - and so i'll change the input value to
103:27 - that and let me just see if that's the
103:29 - correct syntax
103:33 - uh let me search see if they have input
103:35 - here
103:40 - okay so you can set checked
103:44 - um
103:48 - check box input you can trigger click
103:53 - i do need to trigger but i'm going to
103:54 - trigger an enter
103:57 - so
103:59 - set value here's what i want set value
104:02 - of the input
104:03 - so
104:05 - this will be
104:07 - oh episode 99 cool
104:10 - um
104:10 - [Music]
104:12 - input okay
104:13 - it's not okay so i do set value so let
104:16 - me do this
104:18 - i guess it's asynchronous so i can make
104:20 - this function a sync
104:25 - and
104:25 - [Music]
104:26 - now i'm going to do
104:29 - this input
104:34 - input dot set value and the value will
104:36 - be this so
104:38 - let me do that
104:40 - and get rid of that
104:43 - so enter the correct answer to the input
104:46 - now i need to press enter so
104:48 - they had some examples here where it's
104:52 - man i can't even remember now trigger
104:54 - trigger trigger so i need to do
104:58 - there's
104:59 - no wait okay so i need to do input dot
105:04 - uh trigger
105:06 - and then the event so i need to trigger
105:10 - um
105:12 - what is it key
105:16 - i guess key press dot enter
105:20 - and i think this will work
105:23 - um
105:25 - check that the challenge advanced and
105:26 - here's where i actually write my expect
105:29 - to test it so
105:31 - expect
105:36 - let's see
105:37 - expect
105:39 - uh
105:44 - oh what was it i just had a brain fart
105:46 - okay
105:47 - uh expect that
105:50 - the challenge has advanced
105:55 - so
105:59 - what metric would i be able to test that
106:01 - with
106:04 - um i could spy on the function so
106:07 - i probably should write a spy for the
106:09 - function
106:11 - and make sure that next challenge has
106:14 - been called
106:15 - because when i hit enter it should call
106:17 - next challenge
106:20 - and then
106:26 - um
106:34 - and then oh i couldn't check that
106:37 - the store
106:39 - that this gets called navigate to
106:41 - challenge
106:42 - and i could check also that the snack
106:45 - bar
106:46 - shows up
106:50 - maybe the snack bar stuff is better for
106:52 - end-to-end testing i think so yeah
106:56 - okay so next challenge
106:58 - i'm going to spy on this somehow
107:02 - so let's see
107:05 - check that
107:09 - uh
107:09 - next challenge has
107:12 - been called
107:15 - so i have like 10 minutes left
107:18 - uh let let me see
107:21 - should i do spy
107:24 - um
107:25 - i wonder if they have
107:27 - any spying docks in
107:29 - you test you tills
107:34 - call your test runner to spy on it
107:38 - set methods
107:40 - deprecation warning set methods is
107:41 - deprecated will be removed there's no
107:43 - clear path to replace that methods
107:45 - because it depends on your previous
107:47 - usage
107:49 - flaky tests okay so
107:52 - whatever
107:54 - that is i'm not going to be using it let
107:56 - me look
107:58 - for spy again
108:05 - um
108:06 - detecting styles
108:14 - okay um i think i'll have better luck in
108:17 - here i was just seeing if there was
108:19 - something in there okay keeping track of
108:21 - usage spying on a mock
108:24 - so i basically need to run this just.fn
108:29 - yeah i know i just thought they might
108:30 - have an example in the v test details
108:32 - that uses it specifically with view
108:35 - but
108:37 - i guess i can just
108:40 - do
108:41 - um
108:42 - yeah
108:45 - let's see i need to set that as a spy
108:48 - so
108:50 - where would i put that i guess i would
108:52 - put it
108:54 - in
108:57 - let's see because i need to i need to
108:59 - set it on the component
109:02 - so i have access to
109:04 - let's see
109:06 - if i have a wrapper here i have access
109:08 - to i think
109:10 - the vm
109:12 - so
109:14 - and then i have access to the methods on
109:16 - the component so
109:17 - now i can do
109:19 - um
109:19 - next oh wait
109:21 - uh next
109:23 - challenge
109:26 - and
109:28 - here i can do
109:30 - i think this is how i do it i set
109:33 - this particular
109:35 - function
109:37 - as a spy and then i can see if it's been
109:39 - called
109:43 - let's see
109:47 - respect usage of the mocked class okay
109:53 - is that how i use
109:54 - it um
109:58 - i can't remember exactly
110:00 - let me look in
110:02 - just search for it so
110:04 - let's see view
110:08 - just spies
110:12 - see if someone has a quick example
110:21 - tips for unit testing
110:24 - the just object
110:30 - installation view test details the
110:32 - beginner friendly guide to
110:35 - unit testing in view
110:38 - let me see if this has spies in it
110:42 - it's taking a while to load the page
110:47 - all right
110:51 - let me search
110:53 - the page for
110:55 - spy
110:57 - expect spy
110:58 - to have been called
111:00 - okay get rid of that um
111:07 - okay that's fine
111:10 - so
111:11 - rapper dot vm dot on rubber dot find
111:14 - just a function map okay
111:18 - oh did you send me
111:20 - an example of how to use it so basically
111:23 - they're
111:24 - expecting the spy to have been called
111:28 - um
111:29 - but i don't know if they give an example
111:31 - of
111:33 - writing the spy
111:34 - but basically i just want to spy on
111:37 - that function
111:38 - maybe i'll open discord
111:40 - let me see where did you post it
111:45 - okay
111:46 - you posted it in javascript so if you
111:49 - don't know everyone this is my discord
111:50 - channel
111:52 - you're welcome to join it's a
111:54 - public channel
111:56 - and so
111:58 - jared just posted
112:00 - an example of how to use this
112:04 - um
112:05 - so i'm going to copy paste this into my
112:07 - code so i can zoom in on it
112:09 - let me see
112:12 - so
112:13 - body dot spec let me just put it down
112:15 - here for now okay so he's doing just.spy
112:18 - on
112:19 - wrapper.vm.router dot push okay see i
112:23 - can spy on the method i'm not using the
112:26 - spying on the router method but
112:28 - that's just the example that he sent me
112:31 - uh
112:33 - okay
112:33 - expect
112:36 - rapper.vm.router.push to have been
112:37 - called
112:39 - with
112:40 - these options basically so let me keep
112:42 - this down here
112:44 - and
112:46 - so i guess
112:48 - i had this function all wrong
112:51 - so
112:52 - i'm going to do this
112:56 - dot vm
112:59 - i'm going to
113:02 - yeah get rid of that
113:05 - i'm going to spy
113:07 - on
113:11 - um
113:11 - [Music]
113:14 - i guess it's
113:16 - rapper dog oh wait i have to spy on
113:19 - would this be on methods
113:22 - oh wait wait
113:27 - would this be on methods so if i did
113:30 - methods
113:32 - yeah
113:33 - um
113:34 - or no this is the this
113:37 - context
113:38 - right so
113:43 - yeah because you're just doing dot
113:45 - router
113:47 - so
113:49 - no it's not a yeah okay
113:51 - so i guess this is how it would be so
113:54 - wrapper spinewrapper.vm the next
113:56 - challenge method
113:59 - this.methods.thing yeah it makes sense
114:03 - um so expect
114:05 - that this method
114:08 - to have been called
114:10 - and
114:11 - because i have five minutes i'm going to
114:14 - take out the two have been called with
114:17 - and just do two have been called
114:20 - and see if this passes real quick
114:23 - april.vm is the same as this yeah thanks
114:25 - so that's just this context
114:28 - cool thanks for the help um
114:32 - keypress dot enter
114:34 - i also i'm pretty sure that this will
114:36 - work
114:38 - let me
114:40 - stop running that and do mpm
114:44 - test
114:46 - and i'm going to test
114:47 - just the body component
114:51 - that looks right good
114:56 - oh it failed what failed
114:59 - syntax error
115:04 - just encountered an unexpected token
115:08 - you're trying to import a file which
115:10 - just cannot parse
115:12 - it's not plain javascript i don't think
115:14 - that's the problem
115:17 - um
115:20 - syntax error unexpected token
115:23 - uh unit components body.spec.js
115:28 - [Music]
115:29 - 570 um okay well
115:37 - that's weird
115:38 - oh wait i must not be closing something
115:40 - there
115:42 - let's see what am i not closing
115:46 - um
115:49 - because now it's it's complaining about
115:51 - this closing bracket
115:54 - so i must have
115:55 - deleted something or done something
115:57 - wrong
116:01 - but it seems like i have closing
116:04 - methods for everything
116:06 - so
116:07 - let me look at this
116:10 - oh okay i'm not closing my inner test
116:12 - okay
116:13 - i see i see
116:16 - so i think that that's right
116:19 - clear that
116:21 - try running the test again
116:28 - okay snapshot failed
116:31 - and
116:31 - [Music]
116:35 - that's because
116:37 - wait
116:38 - um
116:40 - yeah i don't know why the snapshot
116:41 - failed
116:44 - oh um underscores not defined
116:47 - my
116:49 - um
116:50 - lowdash library
116:53 - must be because there's no
116:56 - semicolons
116:59 - i don't think so
117:06 - must be because there's no semicolons i
117:09 - don't understand why the test would fail
117:11 - on that
117:17 - right now it's complaining
117:20 - that
117:27 - received number of calls zero
117:30 - and expected number of calls
117:34 - oh he's teasing me okay
117:38 - okay i get it
117:40 - i'm not very good with jokes obviously
117:43 - um
117:44 - expected number of calls
117:48 - makes you a stronger developer oh
117:51 - because you're using your
117:52 - pinky more
117:56 - let's see that's a very opinionated
117:58 - statement
118:00 - so it's not calling it so i think that's
118:02 - a problem
118:03 - not with this
118:05 - spy but
118:06 - with um
118:08 - my key press dot enter if that's
118:10 - actually triggering here
118:12 - so man i have like one minute uh let me
118:16 - search for next challenge here and make
118:17 - sure that that is
118:19 - what's getting called
118:21 - yeah so
118:23 - when i press enter it should be calling
118:25 - this next challenge method
118:28 - and
118:29 - let's see why is it not calling the next
118:31 - challenge method
118:37 - let me look up this key press syntax
118:39 - because that might be what's wrong input
118:41 - dot trigger key press
118:44 - i don't actually know let me get out of
118:46 - that
118:47 - i don't actually know if
118:49 - that's the right
118:54 - syntax for it
118:56 - testing key mouse and other dom events
119:02 - so let me look for keyboard
119:04 - keyboard example
119:06 - here we go
119:08 - um
119:09 - component under test this component
119:11 - allows to increment decrement the
119:13 - quantity using various keys
119:17 - okay so it's capturing a key down event
119:21 - and let me make sure that my
119:28 - commit i don't know lol
119:30 - okay
119:31 - thanks
119:34 - um
119:35 - let me see i'm doing key press here
119:41 - so
119:43 - yeah i'm triggering the key press here
119:45 - so that's good
119:49 - now i'm testing it
119:52 - and
119:54 - yeah they're doing
119:55 - wrapper dot trigger key down
119:58 - and then the name of the key so it's the
120:00 - up arrow key
120:03 - um
120:04 - okay
120:06 - mount
120:09 - yeah so why isn't it
120:11 - triggering
120:13 - that function
120:16 - assuming that it's getting the correct
120:18 - input
120:20 - and it's setting that input
120:23 - i mean can i log out
120:27 - i think do i have to set a just option
120:29 - to be able to do console.logs from tess
120:32 - um
120:33 - so console.log and then
120:36 - input
120:38 - yeah let me see what that is
120:42 - uh let's see
120:50 - all right
120:53 - uh
120:54 - tests
120:55 - okay i'm not worried about that other
120:57 - one
121:00 - expect just a function to have to be
121:03 - called
121:04 - or two have been called
121:06 - to match snapshot
121:08 - oh this one changed
121:13 - um
121:15 - slightly
121:18 - oh because i messed up this before so i
121:22 - think i do need let me just update that
121:24 - snapshot real quick because
121:26 - that was just a mistake that i made why
121:28 - the snapshot is different
121:34 - okay so
121:37 - now i can
121:38 - just test the body and now it should be
121:40 - just this one failing test
121:44 - so there won't be a lot of other noise
121:49 - selector
121:52 - um
121:55 - okay
121:57 - um so maybe
121:59 - expect it to have been called
122:01 - this is a
122:03 - reference error underscore is not
122:04 - defined
122:06 - and that's because i think i'm importing
122:09 - yeah lowdash here
122:13 - is defined but never used
122:18 - okay then i just don't need it
122:20 - oh yeah because that's right because i
122:21 - moved it into these other files here
122:25 - so
122:27 - um does match does not match
122:34 - let's see i got rid of that
122:37 - but
122:41 - so i wonder because it's trying to call
122:43 - this whole function here
122:46 - i think
122:48 - maybe it's throwing an error because the
122:50 - function does a whole bunch of things
122:52 - and
122:53 - maybe i'm just not
122:55 - mocking everything that i need to be
122:58 - mocking for this function to run
123:02 - okay the stream died anyway so
123:05 - um
123:07 - this test
123:08 - isn't quite passing i'm getting the
123:11 - correct input
123:13 - um
123:14 - i don't think this
123:17 - the function is having some errors
123:20 - uh so i need to figure out why it's
123:23 - having this particular error
123:25 - and i think it's because
123:27 - saying reference error underscore is not
123:29 - defined which is only when i call
123:34 - some external functions
123:37 - like does match and does not match
123:40 - so i think that's the issue
123:44 - is in those files somehow
123:48 - um
123:49 - yeah maybe i need to stub that function
123:51 - or something
123:53 - or you know make a mock of it
123:56 - but
123:57 - yeah i am out of time now so
124:00 - uh thanks for joining me i'm just going
124:02 - to take a few minutes here
124:04 - and
124:06 - make sure everything is pushed to github
124:09 - i did get some things done like i got
124:11 - all the testing set up
124:13 - i got a couple
124:15 - uh
124:16 - snapshots done and then i started to
124:18 - test the other components
124:21 - you think the input trigger might be
124:23 - wrong
124:25 - in the docs it said oh where is it
124:28 - in the docs it said input.trigger
124:33 - and then i could do
124:35 - keypress dot enter
124:38 - um
124:39 - i don't know if i need stop
124:41 - because
124:43 - that's what it is in the dom here
124:46 - okay let me let me run this one more
124:48 - time
124:49 - although the error didn't seem to have
124:51 - anything to do with stop
124:53 - but i can just run it and see
124:58 - oops
125:01 - yeah it
125:04 - failed again all right so yeah i am
125:07 - going to
125:10 - uh
125:11 - just add those files
125:14 - commit um
125:16 - code from
125:18 - live stream on
125:21 - august
125:23 - what's today
125:25 - uh august 21st
125:28 - on august 21st
125:30 - 2020 this is part
125:33 - two
125:35 - okay and then i'll push that
125:38 - yeah so like i said i have a youtube
125:40 - channel that's in the description below
125:43 - and i also have a twitch channel which
125:46 - is also
125:47 - faraday academy if you want to check it
125:50 - out and that's where i do my coding live
125:52 - streams from twitch i do other
125:55 - coding related videos and sometimes
125:56 - interviews here on youtube
126:00 - so
126:00 - i'll be live on sunday if you want to
126:03 - see some view and django coding
126:06 - the input trigger needs to be a native
126:09 - js element
126:11 - like click or key up wait key press
126:14 - isn't made of js
126:17 - i thought key press was
126:20 - um
126:23 - because
126:25 - where is it here
126:28 - oh i'm taking more time uh
126:31 - let's see
126:33 - keypress.enter.nextchallenge
126:37 - i mean i could do key down
126:39 - i guess
126:40 - so
126:42 - um i can't remember why exactly i have
126:45 - key up and key press
126:48 - to do the
126:50 - validate oh because i wanted to run
126:52 - validation after this i guess
127:04 - oh
127:05 - okay that's interesting
127:09 - so
127:11 - [Music]
127:14 - key press but it is
127:18 - key press dot whatever
127:21 - um i don't know because key down here so
127:24 - key key down dot down
127:26 - works
127:28 - in triggering so i think it can be a
127:30 - view event
127:32 - because these work
127:35 - um
127:37 - yeah
127:40 - keydown.escape
127:43 - you can even pass in the key as
127:46 - in an options object
127:48 - which key you want to trigger
127:52 - i guess they change it and view test
127:53 - details okay
127:55 - yeah so i really don't know exactly
127:57 - what's wrong but
127:58 - i did just push the code so if you're
128:00 - interested
128:02 - in the code
128:04 - i didn't quite finish this challenge but
128:06 - i started working on that test
128:08 - then here's the repo i've been working
128:10 - on
128:12 - yeah thanks for the help jared thanks
128:14 - for tuning in everyone
128:16 - and yeah like jared said i have a
128:19 - youtube channel check me out on twitch
128:21 - and if you want to continue the
128:22 - conversation you're welcome to join me
128:25 - on discord otherwise i will see you
128:28 - later thanks for
128:30 - a fun stream today

Cleaned transcript:

foreign hi everyone welcome back to another vojs stream i hope you're doing well i took a couple weeks off and i'm excited to be able to do this stream on vjs testing this is the app i'm going to be working on so it's called regex breakfast i worked on it on my channel which if you don't know it's faraday academy it's linked in the description below and i basically do lots of django and view content between twitch and youtube so this is a app that i'm in the process of redesigning but i figured it would be good to add some tests to it and go ahead and install just today so if you're here feel free to say hi in the chat and keep a conversation going if you have any questions or you want to give input which is the whole point of a live stream so feel free to do that i do have some bad allergies today so if i take myself off camera for a second that's why um yeah so let me go to the project board on this github repo and let's go to the testing board okay and so these are the steps and the different areas of the application that i'm going to test starting with setting up the view cli plugin for jest and which will install again installs um view test utils and some other things so let's take a look at the app and give me one second here okay i'm back um yeah so this is the app i'm working on so before you say anything um we were trying out some different designs uh trying to get this to be a retro kind of diner theme um yeah and so it was a couple developers on my stream we were trying to design it obviously it didn't turn out that good so i hired one designer and now i'm working with another designer trying to get this to where it looks good the point of the app is basically to help people learn regex through going through these different challenges kind of like the game css sushi if you've played that it's similar except you're learning regex here so basically i get a hint down here or challenge instructions i guess and i'm supposed to match the characters here and then i hit enter and then it gets more complicated and you start yeah using flags and different patterns and stuff like that so i'm going to be writing tests for this app today and the first thing is setting up the just plugin so let me go to my terminal i'll stop my server my view server since this is already this application's already set up so it already has a lot of i guess components it also has a router not really going to be testing that today i might get into store testing with the view x store and then the rest are just regular views and components vue.js components okay but i don't have any testing at all right now so what i'm going to do is i'm just going to add it from the terminal so i'm going to do view add and then just let me make sure that's right so let me go to the docs for okay this is this is the cookbook for unit testing in view and i don't think they actually have how to install it just the just docs just have how to install just plainly so before i do this let me actually just open the view ui and that way i can search for the right plugin for jest okay it opened in the wrong place let me copy this okay so here's the view ui it's basically a ui interface um that i can use instead of the cli and let's see let me zoom out so i can see the sidebar okay so um nw view okay that's the different app i was doing before so let me jump to the correct application import let's see it's in projects and i need to find regex breakfast are you see regex breakfast here it is frederick's breakfast and rojak's breakfast front there is no back end it's just front i just called it front so okay i'm going to import this folder and now i can install plugins inside of this folder and it shows me what plugins i already have i designed it with viewify and i used all these other plugins so i'm going to search for actually i have to click on add plugin and now i can search for just so it's giving me view cli plugin just puppeteer cli plugin unit jest and it says official here so i'm going to grab this one and let's see if i hover over this the plugin has a generator okay so i'm going to click on this and install ucli plugin unit jest okay so that's uh taking a while to install oh sassy sorry i think i forgot to say hi um yeah i'm doing well i've been meaning to put testing in some of these apps for a while so i figured now is a good time to do it okay i'm not sure how long this is going to take um anyone else in the chat i know only subscribers can chat but if anyone else is there and is a subscriber or can subscriber to help or can subscribe to help support free code camp it would be awesome to get to talk to you okay it's going to take another minute i guess um after this it should create some setup files for me there's no configuration that i need to do for it so i'll do finish installation all right so it's invoking invoking here this means it's invoking the generator which might be creating files or updating commands or something it might have added a testing command to my package.json here yeah it did so it added this command which is test unit that i'm going to be using to run the tests because this will run the just plugin oh it added this testing folder too and one example test okay but this test won't work because there is no more hello world component it's just adding a default test all right um let's see continue okay so now that's installed now sometimes here let me zoom back out sometimes you can go to configuration and okay i guess just doesn't have configuration options here that's fine i'm going to get out of the view ui and now i can run my app again now that that's set up so npm runs serve to run the vgs app and oh no wait i don't want to run the app i think because i want to go ahead and run the tests oh it also created this just config file for me with the preset okay um yeah so it's all set up so i should be able to just do and actually one more thing i'm going to run this testing command or no i'm going to change the testing command so instead of test unit i don't have end to end test or anything else so i'm just going to change this to test so i can use the shorthand all right and i'm going to get out of this build it doesn't want to exit the build so it might take a second control c is not working okay it's almost done with the build anyway so i'll just wait a second there we go all right and i'm actually going to move my terminal so i'm not switching back and forth across the browser for it so i'm going to do okay regex breakfast front now i can do npm test or there's also the shorthand npm t that i can use and that runs my test command and it's running that one example test that i have okay and it's failing obviously because it is trying to import this component which doesn't exist so what i'm going to do in here i have test slash unit i'm going to start adding folders that kind of match my components actually i don't have a very complicated folder structure here because it's only five so i'm just gonna add a views folder and a components folder and test those so let me add those folders i'm gonna add what about the hour tracking app i'm going to be working on that more on my channel so i want to get this app done and the curriculum app and i'm going to finish up the hour app after that um yeah uh it's i want to work on it more on this channel but a lot of people if i'm working on the same project too many streams a lot of people drop off and there's not as much viewership so i'm gonna i think i'm gonna finish working on that on my twitch channel um yeah plus i'm gonna be taking a break from these dreams after today so i just wanted to get in one kind of different stream on here and then take a break um mostly because i have a lot of other stuff i have to work on okay so i added a views folder and a components folder okay um let's see okay yeah let me start with components because those are easier so i have body draw and top bar and let me go back to my list of things so i set up the just plugin that's done and i need to implement snapshot testing so let me do that real quick just these three components and if you don't know what snapshot testing is it basically is a rendered version of your component that you can see in a second because it shouldn't take me that long to set it up and then over time you compare different versions of your component and you make you basically make sure you haven't created unintended side effects that affect your rendered html so it can be useful in that way uh so let me do body and then i need to put a dot spec suggest we'll find this i think you can use like dot test or dot spec but just automatically picks up files and runs tests against them if they're if they're called dot spec if they have a dot spec in them um okay draw and top bar uh draw.spec.js and top bar yeah top bar dot spec dot js okay i have those three components and then i have views i'll leave those alone for right now so let me start with this body and basically what i want to do is mount this component and then create a snapshot from it which is like a stringify html of the component so uh let me go to um so just actually has um the just testing suite has a lot of things like an inspect library and it does snapshots it takes care of snapshots for you it has like a two html method or something but i think it's um or view test utils oh wait here it is view test utils adds a lot of methods so it's better to instead of using the html functions of jest you can mount it with view test utils and then create a snapshot and the view test details basically gives you a lot of methods for handling view components um so installation so it's already it should be installed with the just plugin um let's see mount let me go to mount so i need to import mount from view test details and okay and then it imports the specific component that i want to mount so in this case i want to map body so be import and import body from i think i can do at which represents source i think i can use that in my test and then slash components slash body and then okay dot view and let's see if that works let me write a quick test so this is from just the syntax so describe um which is going to wrap all of my tests for this component so i'm just going to put describe body.view for right now and then i need to pass a function so let me pass just an arrow function there and now i can write tests inside instead of it i really don't like the it syntax that much um i'm going to use the test function which is the exact same i think one is alias to the other but i can't remember which one okay so i test and then i write a short description about what what the test is about um and then i can mount the component and i'm actually going to do a snapshot instead of some other kind of test here so um yeah so this is the same syntax i need to pass a string and i'm gonna test uh snapshot yeah i'll just put snapshot and then another function and now inside of this test i'm going to mount the component which mount the body component and now i can do wrapper oh wait i need to do expect i'm going to look up the syntax in a second so something like expect wrapper to match snapshot and then the first time i run this it creates a snapshot for me and then future times it compares any updates to the old snapshot um okay so let me search for that so snap shot um to match oh i think i need to look in the just docks for that snow so here it is because it's a method on me on the just expect library so basically here expect whatever component to match snapshot which is the same thing i have here because i've mounted my body component and now i can expect it to match the snapshot so let me try running this now it might complain that i have these three these two files empty but let me see let me run my test again and see if it works four failed okay draw body top bar example.spec.js oh i need to delete that file let me delete that example file i don't need that okay so um and let me actually if this one's failing let me see why that one's failing um you're trying to use sass oh node sas is missing um okay i don't know if i've run into that before but um i have i have sas installed in my project but it's a peer dependency through i have sas and sas loader yeah but basically view set up sas for me so i can use it inside my components or import it into my main view file um okay let me just try installing it like it recommends is the dev dependency and see if that works can you see the bottom yeah sometimes these stream tools cut off the bottom of my screen all right okay maybe note task is going to take a minute and then i don't know if there's any config i guess i'll see if there's any config that i need to do with sas and the project but i don't think there should be let me do npm test again all right cannot read property getters okay good good good good so now i'm getting actual errors with the component which is good um so and let me just run that one test file so i think i can do npm let me look back up through my commands yeah so then i just pass the component name to it so i can do npm t and then pass the component name so i'll do um body body is my first one so i'll do mpmt body and then i think it will just run that one test now yeah good so i just wanted to run that one and cannot read property getters of undefined so let me see if i have to um do something with that so let me open that file body dot view okay i'm using a couple um utility methods getters oh i think um let me let me search for this getters yeah so i think i'll have to mock getters here um let's see i have to create a local view store ux store and let me look up the syntax for that so i think actually it's um wait part of you test utils so let me look up local not local view okay this is a section on testing view x new view x dot store all right i i import a create local view and then i create um a new view x store basically all right so let me try this let me and then i'm gonna have to import these at the top and see um and actually these are absolute imports so i should put them here their library imports okay oh cool that's awesome when i save because i set up eslint auto fixing so it actually fixed all my imports too i didn't see that before all right so now i need to create a local view instance and i could actually create a regular view instance by importing just few but this way i'm not polluting any global state or anything um so let me see i have store i don't think i need i don't think i have any separate store config here i might import my state clone deep um yeah so let me do i need to create a new local view and then do local view dot use view x and i'm going to do that here um i might create a before each for this later now i need to create a new store so let me create a new store and all right so i think i'll just pass an empty object for right now oops and let's see expect um store okay and then i can make expectations on the store but i think i need to when i mount this component i think i can um let's see pass in an options object and pass the store into the component so that way i have access to getters so um yeah let me see if i can or i might have to mock the getters but let's see so i've created my store and oh yeah i need to look at the options that i can pass in so let me go to mount the mount function and see okay so i can pass in props data um does it have the whole api for this component options okay the first argument is the component the second is uh any number of options so i have mock stubs i can pass in local view which is what i want to do um yeah because that will have where is it yeah local view here so that will have the store because i'm doing view oops view.use view x actually wait i need to i think i need to put passing the store too let me see uh config.box store i wonder if this is this is better to just mock the store like stubs because then i can mock the getters the store.getters so actually i think this is what i want to do and then i'm going to save this local view because i'm going to need that in other tests as well so let me actually i think here i can define mocks but um oh yeah and for the local view i'm going to need that for my beautify setup as well because i think i'm going to get some errors about this after i fix this error but yeah so let's see let me set this up real quick um all right so config.mox dot store um i think actually what i'm going to do here is oops i can do or let me do i don't know let me just call this store moc this is just an object oh wait this is not proper javascript right and then on here i can also do a getters object and then put getters on there and then um config.mox um oh yeah this will be mocking it for all the components not just the but i just want to do it for the mount so let me look for mount again go back to mount let's see and where is it um here are mocks so yeah so i can create a mock and just pass it in to a mox object so i'm gonna do that here so i'm gonna create an object here and then i'm going to pass in i guess the syntax it wants me to use is dollar sign so let me go ahead and do that and i'm just going to take this and put it inside of the test as well so in here okay and now i can pass in this store mock so let me take that and store is not defined store here oh that's right so let me do let's store okay fine um and now getters so in my body i have this current challenge getter um which gets back an object of the current challenge and then i pull the name off of that so what i'm going to do is just mock that so the current challenge which will be a function that returns in object oh wait to return an object i have to wrap it so okay all right that should work but i'm going to be getting some more errors before this actually works so let me try this out okay npm test that body component and yeah so now it's complaining about the snack bar which is because i'm using the beautify component library and it doesn't recognize that so oh the snapshot actually passed so let me look at the snapshot it makes this so inside every folder where i create snapshots it creates this dunder snapshots folder and then it basically rendered yeah the output html but um it's using these beautify components because it doesn't know what they're supposed to be because just can't see beautify so i need to set up beautify to work with just and let me i'm just going to set this up in this file for right now on a local view instance and i think it's in the what is it the beautify beautify library and then they have like a just unit testing section oh wait no no oops here it is on all right it's taking a minute to load there we go um go to new docs okay i just need to set up just so bootstrappingvedify that's fine test runner setup okay i'll just click on just all right and now okay um oh wait this is the actual vcli plugin just get rid of that um so it's just linking me away but i need to know with beautify specifically okay here it is so it's saying to create a local view which is what i already did and now okay running before each to create new beautify um and before each basically runs before every test in the file so let me do this and last time i set this up i did it as a global beautify setup because i needed it in so many different tests but i think it's just easier here just to uh oops set it up in here just in the testing file of course i have to do it in each testing file but let me do it this way first okay and then when i map components i need to pass in local view and beautify so i need to pass it in here so let me do that above mox some passing in local view and beautify and uh one second let me go into my vs code setup because for some reason it's yeah it's doing four spaces instead of two um usually it auto finds it but in debt spaces so let me do two okay um let's see do you unit test all your projects i would like to say that i do but i don't especially if they're personal projects hi tom um companies i've worked for often off and on some of them have full testing suites unit testing integration testing you know endtoend testing and then some of them just say they want testing and then never get around to testing because they say features are more important um yeah so i don't test i would like to test all my projects and so i want to get faster at testing because it feels like every every time i start testing an app which is almost always for a client i have to relook up all this stuff because it's off and on when i test so i want to start testing all my personal projects so that i just get better at testing in general um yeah so let's see i was into tdd a couple years ago i was trying to tdd everything like i don't know 2016 or something and then i think i got out of it because the other developers around me weren't or it's very hard to convince people to write so many tests i think i went overboard with it so there's a balance between you know testing and yeah going too far okay beautify beautify okay i did the beautify that's good now it's coming into i'm well i'm passing it in as options in the wrapper so let me run that test again one failed all right um so let me wow that's a lot of failure um unknown custom element v row uh so these are all the beautify components so it should be it should know about these i mean i could technically stub them um so uh was it jess or um you test utils lets you stub things so then i could say what is it v row like v row and just say div or something um but that wouldn't render any nested components i'm avoiding that um and then i could also do a shallow mount where is it instead of a full mount because of shallow mount automatically stubs child components and a full mount um doesn't basically but i want to do a full mount so i get more of an idea of everything that's going to be rendered on the page so i have to figure out why it's not recognizing these beautify components uh so let me see expect rapper um okay great local view i got those am i importing wait i might need to import so here i'm importing oh that was really dumb i'm not importing uh beautify and view so let me import those there um i think i need view even though i'm not necessarily using it i think i need it in the scope um maybe let's see okay running a test one more time all right let's see if it's the same error okay well the snapshot passed but that's because the snapshot's not changing because i'm getting these errors did i register the component correctly it's saying that i didn't is before each running so let me see and here it's doing wrapper.html which is that jest which is the jest function the html but since i am mounting this with view test utils i shouldn't need to do that um so let's see beautify creating a new beautify i wonder if i need shouldn't need any options i'm mounting let's see mounting creating a local view um local view dot use let me just comment these out because it's because i'm not using them right now so let me run this one more time i don't know if that's going to do anything but i'm just getting rid of anything extra here let's see state getters wrapper yeah unknown custom element all of these vcard recall the text field all of the vidify components are still unknown um so let me take a look at this let me go to beautify um props describe mount function okay mocking beautify blang okay i shouldn't need to mock keep in mind you only need to stub the surfaces that are being used such as laying our application you can also import these services manually um i'm just i'm gonna look at one of my other projects because i think i'm a little stuck here unless anyone in the chat has an idea of what i should be doing i just can't remember the exact setup steps that i did for beautify so let me go to this app and okay so the curriculum let's see tests so unit tests and i do have this set up so this in this project i have a setup file for viewify and um yeah i basically set up vuedify and then have this imported into my just config so my just config is has a lot more stuff in it here um so let me just copy this because actually a lot of this was set up because i installed just yeah no ideas because i installed just with the regular setup of the app because in the vcli you know when it asks you if you want to set up testing right away so it set up some of these things and then i added a couple and i added this set up files and basically this setup files this file runs before every test so i can get viewify wait let me just copy this whole thing copy that and now i'm going to put it into my just config and wait undo because i want to save the plugin there or preset um okay that's fine uh module extension okay so now i have this test unit setup test file so i'm going to go ahead and copy that file as well and that file is basically doing almost the same thing i'm already doing in that one component except it runs before every single test so i don't think i need the export here but i'm just going to copy the whole thing and let me go into my tests new file setup tests dot js okay so i set that up import view viewify view.use vidify um okay i am doing view dot use here i think that made it globally available and then i created a local view yeah that's weird what was i doing so i do view.use vidify but then i create a new view and use it with a local view instance i'll have to look at what i was doing there because it seems like i'm using a global view dot use and then i'm using a local view.use beautify and okay but there were a lot of errors i was getting with the jest setup so maybe i did it to alleviate one of those errors okay and then let me just go to one of my tests let me look at i don't know what's the easy test home test let me look at this is just in like a standard html section okay so it's just mounting and that's it i am using a full mount here and um let me make sure that the snapshots aren't rendering with the v dash yeah it's not it's rendering as actual divs actually how it would render out in the dom which is what i want okay so now i have this setup file um i wonder if i have the serializer installed um i think i must i think that comes with jest when i add it as a plugin okay anyway i don't need local viewer view to fi now so let me take this out um i will i might still need it for a store maybe so i'm testing the snapshot i am mocking the store because i still need to do that since this is a full mount let me delete these two imports at the top don't need those okay let me try this and see where it's at npm test body okay setup files option was not found um root directory projects regex breakfast okay tess unit setup oh set up tests.js did i spell it right oh it's outside of the unit folder so let me put it inside of the unit folder because if i do other tests in here i'd have an end to end folder and other folders and the js setup would only be for unit testing so let me try one more time okay now it must have found the file because it's running the test oh and it failed oh this is a good failure though because now cool um now see how it has v row here well now it's rendering it as a div with class of row which is actually how it renders out in the dom so that is very very good okay so it's failing because it doesn't match my current snapshot so i have to tell it to update the snapshot because the new one is what i want to save as the snapshot so let me tell it to update here so i'll do npm or mpmt and then i need to pass it past the command to u dash u is for update snapshot um oh i forgot i forgot to run just that one file okay but now i can copy paste these into the other files two failed one passed so my body one passed and the snapshot is updated um okay let me get rid of that oh let me take a look at the snapshot yeah now it's rendering all the divs everything is rendering out correctly um what is this v snack oh that's a transition i can stub transitions which uh i'm not going to worry about it i think it automatically stubbed the transition for me so if i want it to be different like not be automatically stubbed i might want to put something else in there but that's okay i'm happy about that let me go to draw and okay the draw menu is so app bar toolbar so this is the top um nav bar the menu v now why is this let me look at this navigation i think draw i'm not even using right now this is very strange because all draw is is an app bar which is a top nav bar and okay so let me just delete draw i'm not going to worry about that for right now um so let me go to top bar and test the top navigation bar that would be more useful so let me get rid of draw i think i just didn't separate the components yet that's what i didn't do i created the draw component was going to put the draw in there and then i didn't so i'm going to test this top bar and where is it topbar.spec.js so let me i'm just going to grab this whole thing because first i'm going to be testing the snapshot and i actually don't know if i need the state yet um oh i will need to mock the store because i do need the state some state off of the store um let's see challenge and challenges yeah i definitely need some state here so let me actually undo that oops and redo i'm gonna get rid of these for right now okay and i need to import the top bar component so let me import top bar and yeah it's much cleaner without setting up view to find every single file that was a better decision okay so now top bar so i'm going to describe top bar dot view here i'm still doing the snapshot first i'm going to mock the store here i don't need any getters but in state i do need to i don't know why i have the id here actually i think that was just the default thing that i had so in state i need to mock um oh wait i do need the percent done okay never mind so i will need to create getters percent done um yeah i'm gonna have to mock that getter correctly later um but for right now i'll return like a zero or something okay so uh let me do getters which is an object and i'll do percent done and then return zero for right now and then in state what do i want to mock and state so i need to mock the challenges which is an array and current index which is a number um yeah challenges let me do challenges and current index so challenges in array and then and actually i'm going to be importing the challenges at some point so because i have a challenges dot js file here with a list of all the challenges so i can just import those in my tests and test off the actual challenges so let me do what was the other thing it was current index so current index i'll put this at zero as well okay so i've mocked the store so let me create a snapshot for the top bar let's see times it's just after 11. it's been about an hour um do npm test run both my tests all right maybe testing is a is a dry topic there's not much chat about it cannot read property small and down oh right um i might need to mock that because let me see small and i thought i was using it here let me see if i'm using it small and no then why is it doing that that's a so that's um a break point um property that i get from beautify for small and down but why is it saying it can't mock it here that's weird i'm not using it i'm not specifically referencing small and down so why is it saying that i might look this up oh maybe beautify is undefined here so there are some weird things in testing vidify like i had some issues with the modal testing the modal because it renders an extra specific component inside the modal so yeah let me see so this component i'm not doing anything different importing that um oh wait let me do medium no okay so yeah let me search for this and see if anyone else has this problem with beautify okay yep it seems like someone else had this same problem from this year i'm trying to solve this issue but i can't oh this is very poorly formatted okay everyone render type error cannot read property small and down of undefined um surely you'll be loading beautify as a plugin that's where the error comes from to solve this issue delete it from plugins and load it as follows um nope that doesn't really i don't know why this person is giving this advice i don't think that's very good advice testing done by the clients in real time yeah as everything crashes and burns um unfortunately that's how it's done a lot of the time actually with this i don't want to say too much but this django app i'm working on i've been dying to write tests for it for a while and the client is testing it and some business people are testing it so hopefully i can write a test suite at some point i would love to i just haven't gotten around to it yet um beautify js at least like the finicky parts of the app like that's you know a minimum for testing let's see um i want to look at their github actually how to specifically ajs warn yeah i don't know okay this is the same thing after install view to find my webpack i have this message in the console yeah let me just look at their github and see if they have okay they have foreclosed issues on this same topic it seems causes type error using webpack error with apple actually i am using app bar so this is probably the error i'm getting because the error is in this app bar component so i oh okay so i'm guessing that beautify renders this under the hood beautifies using small and down because the app bar is very specific to the screen size and since i am collapsing it adding a draw at different screen sizes so this appears on x small and on every other screen size it shows all of the things in the top oh no actually on this app this appears on every screen size because this is where the challenges are listed okay but i'm guessing it is a problem with the v app bar so okay so this person isn't writing entirely in english but he's saying he has a problem with the app bar um okay they're saying if you switch to beautify 2.0 there's probably a problem with that um yeah i've been using vidify 2.0 for a long time so it's not an issue with that but let me just rethink how i'm doing this app bar i'm guessing so let let's see if i did oops shallow i'm gonna try some different things so shallow mount um which will stub all of the beautify i think every single beautify component actually will get stubbed but let me try this um oops i do undo okay um where's that oh yeah mount that was it it's like where was i okay shallow amount um let me do a shallow mount so npm test and just that component so top i don't know why i called it top bar seems like it should be top nav or just nav because well the draw is going to go in a different component but yeah nav might have been better um right now actually it's only mostly one page so maybe top bar is okay yeah just thinking out loud okay so invalid prop type check for value expected number um oh yeah i have to mock the props on this too and i think i do that with props props data since i'm passing props into this component and let me see what the props are oh no i guess there aren't any props okay uh so i do need to mock so i guess that's just data maybe it was data i'm confused uh type check failed for prop value expected number oh on the progress bar got string so let me see what the progress b progress linear value okay so store dot getters dot percent done expected number got string i mean it is returning a zero not sure why it thinks that's a number um okay well i'm fighting with my own unit test right now good jared maybe you can help me with mine take a break from yours okay so all right so i'm i'm over an hour through the stream i'm actually gonna push what i did so far um just because it makes it easier if anyone wants to take a look at it and it only takes a second so get status um store index uh this match does not match let me look at those files i didn't think i updated them does match um okay i wonder what the diff is for that so let me look at the diff for these so get diff and i know i'm just uh not part of testing but i'm just curious because i didn't think i updated these files and now it's saying they're updated so let oh i know what happened uh my automatic eslint changed some things like it changed lint or change let to const because i'm not updating this variable anywhere okay uh that's fine i'm guessing if i diff the does not match file yeah it turned let to const okay that's fine i'm just gonna add everything then uh code from live stream on what's today uh august 21st august 21st uh 2020 part one okay i'm just gonna push oh rejected oh i know i know why um yeah because of these dependencies dependabot updated some outdated dependencies oh merge conflict and package lock.json let me look at the merge conflict real quick um i don't see it let me see here we go uh i don't know there's a command supposed to be able to fix this i can't remember off the top of my head let's see except except both oops okay i think i fixed it we'll see all right let me put fixed not fixing fixed merge conflicts okay this took a lot longer than i thought just to push the code okay now let me do in mpmi locally because i did update those dependencies uh yeah it doesn't have to convert lead to const but i think i'm not stopping it oh unexpected token uh what should i do this i mean this is a live stream i'm just gonna delete my package lock um because i already updated it and committed it and i'm not too worried but yeah don't do that at work okay um you missed free code camp what do you mean i missed free code camp are you telling i don't know i think i missed that because it's probably been 30 seconds since you sent that message okay now it's creating a new package lock for me which is unfortunate that i messed it up but it should be okay in this project let's see npm run surf yeah i think if you don't stop the automatic uh like what is it prettier and um beautiful beautifier or something and then there's the eslint one which is the one i use the auto eslint i think if you don't stop it from doing things then it's just gonna do all of its default things okay mpm run serve which is change everything to const unless you're redefining it somewhere oh wait i don't need to surf because i'm testing actually let me make sure the app is still running after that let me try to run it all right so how is everyone doing with the testing is this uh too dry of a topic for a live stream seems maybe hard to chat about i just wrote my own eslint rules yesterday for just and even added in auto fixes for them oh nice which repo is that in do you have it in your i know you do your uh whatever uh what is it yes lint or no tjw right tjw lint on github so uh everyone else who might not be in the inside of this conversation jared runs a vue.js group and um yeah does a lot of open source and has a bunch of open source libraries for linting and uh yeah all good all different kinds of stuff on github so that's why i know about them and he has this group of libraries called like tjw lint um with different linting options okay so the app is running let me go to the browser and see don't look at the app jared it's very very ugly okay yeah everything's working fine so i didn't break anything that's good there's a bug in here um i was going to submit the rules to the official just islip plugin but it's written in typescript so okay so they're adding in an extra layer of difficulty for you um you could always raise an issue and say hey i have all of these rules does someone want to convert them make it typescript friendly for me um what was i doing oh yeah so get rid of that i just uh deleted my package lock reinstalled it seems to be working okay and now oh yeah the whole reason behind that was to um push my code live so that everyone can see the code so if you joined i don't know if this is in the description of the video but that's the repo that i'm writing tests for today and i did just push some tests um now wow it changed like uh every single folder oh that's because of the auto eslint so i added linting accidentally with the testing but that's okay and now for projects i have the testing project implement snapshots didn't quite finish that although i should have a checklist for this let me turn this into an issue so that i can add a checklist here so um body dot view component and let me go ahead and check this off because it marked down because i already did it so i do need to test the was it top bar dot view component and then i might test other other things for snapshot testing i think i'll leave snapshot testing it here today and try to get to some other testing in five time but so now because i convert it into an issue i can have a checklist in here so i have yeah so i can check them off as they go which is cool so let's see get rid of that okay so top bar let me run the test again now and see where i'm at okay so it's still complaining about value um expected number string got oh it got function okay this was um percent done okay so i'm just gonna all right i'm just gonna put a zero there because it's returning a function to call and yeah anyway let me see if that works okay now i get a new error which is oh yeah this is just updating the snapshot so let me just update the snapshot real quick and that should pass yeah so that passed but the only issue is i'm doing a shallow mount not a full mount and i want to be doing a full mount but here's the top bar so basically it's stubbing um so because sorry because i'm doing a shallow amount it's stubbing all of the components inside um these auto stub which is really ugly and doesn't help me out a lot so i'm going to now try to mount this so let me see if i can mount it actually i don't need this props data i didn't need that because there aren't any props i thought for a second there were but there aren't okay so now let me run this with a full mount oh wait wait stop stop stop without the dash u because that will automatically update my snapshot that would destroy the point of snapshots okay failed again what is this doing you cannot read property with the fun to find well this is good this is a new error it's complaining about the v navigation draw i cannot read property width of undefined uh oh yeah and it's also complaining about this so aaron getting watcher computed height typo yeah it's the same error plus the other errors that it's getting so i think for right now um because i have like 30 minutes left on the stream i am going to just leave it at shallow mount and try to fix it later let me put it to do in here to do get because most of the issues are with vidify and i need to actually be able to sit down and debug vidify on this so get this to to work with a full mount okay so let me run all the tests now npm test the full mount is working in body it's just not working in top bar okay and i'm gonna um check this off here so yeah okay so i'm gonna check that off and i'm gonna add um let's see update just like it to do for the future so update top bar note update top bar snap shot test to use full mount okay so i'll put that there um now i want to do some component testing so let's see so test that it moves to the next challenge when correct challenge is input so let me run the app real quick so npm run serve and i'm going to open the challenges file and so each challenge object has all of these attributes it has the correct pattern any forbidden patterns like you can't use the period because um it's too easy it matches any character you're supposed to learn how to do this you know just as it is so i have some forbidden patterns i have um flags the name of the challenge which which you don't have to match the full text is this part of the text you have to match and then info is what appears in that info box below the challenge so let me go here all right um so here it's telling me to match the whole word just by typing out the letters for the first challenge and then i can hit enter so there's no like submit button here so when i test it i'm going to have to test that enter that once the enter key is pressed that it moves to the next challenge so um let's see and that would be in the body component yeah because this is where it shows all of the current challenge the current challenge here so i'm going to have to set the current challenge in the mock to one of these challenges so i need to import that so let me test let's see and just have these three open okay so let me import the challenges here and right now i'll get rid of these although i do want to fix my view x set up in a bit so let me but now i'm just like doing a very basic mock here so i'm going to import challenges and let me do that from here so import challenges from at no at data slash challenges and now current challenge here is i'm just going to let's see i'm just going to set it equal let's say challenge zero so um okay uh yeah this will change the mockup actually or this will change the um what do i call it the snapshot actually so let me run this oh no i'm still running the app um so oh yeah i don't think i need to be running the app because i already know like the flow of it how it's supposed to move from challenge to challenge and i need to be testing that in my tests so i can stop the app here and now let me do um let me run mpm test again and see okay didn't match the snapshot i already know this because it's actually rendering you know a real challenge so what i'm going to do is actually just i think i'm going to update the snapshot so let me just update that snapshot real quick um dash u because i want it to because it's never going to be an empty object in real life or it's never going to be an empty object it's always going to be an actual challenge um so i think that's good and i'm going to move this out to before each actually so i'm going to do before each and i'm going to define this store here outside of it so i'll do let dollar sign store um yeah i just want to initialize it as an object and then i'm going to redefine it before each test as this object okay and now i need to write a second test down here so let me do test and this time i'm going to be testing that challenges advanced okay and now i need to mount so i'm going to mount this again mount the component and i have the mock which is the store and let's see i can write expect statements now so what do i expect to happen at first so i expect um and let me actually look at this body.view component so there's no props but i do have a lot of data here that i'm not um locking let's see um yeah there's a lot going on in here with the regex testing and stuff and then i also want to test if the snack bars show up so i don't need to test too much about the dom traversal so i feel like that's for endtoend testing where i get to render this in an actual browser um but who knows when i'll write run endtoend testing for this so okay so i've mounted this and now i want to test that let's see currentchallenge currentchallenge.name currentchallenge.info and then in the middle i can see that well let me go back to i need to test that it moves to the next challenge when correct challenge is entered so let me step through that and here i'm gonna do okay so i'm gonna have to enter uh correct answer into input so i'm gonna have to grab the input and then enter the correct answer and then i'm going to have to um yeah i'm gonna have to press enter to to submit the challenge and then i'm gonna have to check that chat uh challenge advanced to second challenge okay so those are the steps i need to do and um let's see let me first grab the input so that's the first thing i need to do and i can do that let's see if i don't uh remember the syntax for it so let me see if it's in here or else i don't need wrapper functions i actually just need um to grab the input which i think will is just from just i mean yeah it's yeah uh okay so i don't need this is just a vgs unit testing cookbook that's not helpful with what i'm looking for so i'm going to um let's see uh dom manipulation i just need to grab dom elements and i can't remember exactly expect has assertions um dom manipulation okay so that's a jquery document.body require okay um it's not helpful let me see uh i wish i wish more people could chat on this um let's see um okay let me look for ingest oh yeah this is easy uh sorry i had a brain fart there okay so uh rapper dot find and then i find divs i think this will return in array or maybe the first div a first dom node okay that matches um how many inputs do i have on this page let's see input um what would it be oh it's oh that's right i was like why isn't it called input it's a beautify component so it's called like v text field okay so v text field and that will render since this is fully mounted that will render as an input so i should be able to find that as an input and yeah i only have one v text field so one input um oh no i have two because i have um i have this one and then i have the other one on the page which is for flags which should be disabled so i need to check that also that's disabled when basically what happens is it's disabled for all challenges unless yeah no flags here unless they need flags so some of the later challenges use the global flag like this one yeah these use the global flags so then it's not disabled basically but if they don't if the challenge doesn't need flags then that input field is disabled yeah i know i need to use oh thanks jared i don't know why i didn't see chat um wrapper.find thanks uh data.testtoken datatest yeah i need to do use that definitely so let me do wrapper.find let's see and i need to put that on my component to reference it so here's the text field that i want to reference and i don't know this is weird i don't know why the other text field isn't rendering like why is there only one text field here placeholder enter regex where let me look for enter flags what happened where's the enter flags did i accidentally delete it wait i need to see this now run my development server i might have accidentally done something so i might have to put that back either way yeah i do want to use the data test thanks i'm going to put that in as soon as i figure out what i did to my other input all right the chat's so quiet how are all of you i don't know if anyone can sit through two hours of watching someone figure out testing but kudos to any of you who are wow um yeah so let me look through my whole app and enter flags did this just appear this wasn't here before and now it's here and now i'm confused okay um anyway so i have this one and now i have this one and let me put add a data test here i'm just going to add it to the top data test um and let's see what should i call this um yeah i'll just call it regex okay and now i can reference that here so i can do what is it data data test equals projects i think so this would be better on twitch yeah so i'll have a stream so i have a stream on sunday on twitch every sunday and wednesday i do stream on twitch and sometimes like other random streams but yeah this is a good way basically for free code camp to earn money um and help support free code camp and having millions of followers basically their chat gets out of control if they don't have or if they don't have some stipulations on the chat so yeah so i don't fault them for making a premium chat if i had millions of followers i don't know maybe i would need to do that but uh the two of you yeah jared and i have collaborated i've had inter i've interviewed him on my channel as well you can find over on my channel faraday academy i've interviewed jared about vjs and i don't think we talked about testing maybe we'll do a testing one coming up that would be fun um okay so let me do const input equals this input that i just found and now i need to do let's see input dot value something like input dot value and then i can change the value i'm not sure if this is the exact syntax but cool um yeah jared maybe we can do a testing collab if you're free at some point um i did a views on view podcast where i led a discussion on unit testing oh yeah that was a really good podcast episode um if you're interested views on view is a view podcast and jared did an episode about testing on there and i listened to that um i think twice so yeah it was really good so input that that value and then i need to put the um value of this challenge of the solved challenge which i am just going to take from here so dot pattern and i'm going to put that in here because that's the solution so dot pattern and so i'll change the input value to that and let me just see if that's the correct syntax uh let me search see if they have input here okay so you can set checked um check box input you can trigger click i do need to trigger but i'm going to trigger an enter so set value here's what i want set value of the input so this will be oh episode 99 cool um input okay it's not okay so i do set value so let me do this i guess it's asynchronous so i can make this function a sync and now i'm going to do this input input dot set value and the value will be this so let me do that and get rid of that so enter the correct answer to the input now i need to press enter so they had some examples here where it's man i can't even remember now trigger trigger trigger so i need to do there's no wait okay so i need to do input dot uh trigger and then the event so i need to trigger um what is it key i guess key press dot enter and i think this will work um check that the challenge advanced and here's where i actually write my expect to test it so expect let's see expect uh oh what was it i just had a brain fart okay uh expect that the challenge has advanced so what metric would i be able to test that with um i could spy on the function so i probably should write a spy for the function and make sure that next challenge has been called because when i hit enter it should call next challenge and then um and then oh i couldn't check that the store that this gets called navigate to challenge and i could check also that the snack bar shows up maybe the snack bar stuff is better for endtoend testing i think so yeah okay so next challenge i'm going to spy on this somehow so let's see check that uh next challenge has been called so i have like 10 minutes left uh let let me see should i do spy um i wonder if they have any spying docks in you test you tills call your test runner to spy on it set methods deprecation warning set methods is deprecated will be removed there's no clear path to replace that methods because it depends on your previous usage flaky tests okay so whatever that is i'm not going to be using it let me look for spy again um detecting styles okay um i think i'll have better luck in here i was just seeing if there was something in there okay keeping track of usage spying on a mock so i basically need to run this just.fn yeah i know i just thought they might have an example in the v test details that uses it specifically with view but i guess i can just do um yeah let's see i need to set that as a spy so where would i put that i guess i would put it in let's see because i need to i need to set it on the component so i have access to let's see if i have a wrapper here i have access to i think the vm so and then i have access to the methods on the component so now i can do um next oh wait uh next challenge and here i can do i think this is how i do it i set this particular function as a spy and then i can see if it's been called let's see respect usage of the mocked class okay is that how i use it um i can't remember exactly let me look in just search for it so let's see view just spies see if someone has a quick example tips for unit testing the just object installation view test details the beginner friendly guide to unit testing in view let me see if this has spies in it it's taking a while to load the page all right let me search the page for spy expect spy to have been called okay get rid of that um okay that's fine so rapper dot vm dot on rubber dot find just a function map okay oh did you send me an example of how to use it so basically they're expecting the spy to have been called um but i don't know if they give an example of writing the spy but basically i just want to spy on that function maybe i'll open discord let me see where did you post it okay you posted it in javascript so if you don't know everyone this is my discord channel you're welcome to join it's a public channel and so jared just posted an example of how to use this um so i'm going to copy paste this into my code so i can zoom in on it let me see so body dot spec let me just put it down here for now okay so he's doing just.spy on wrapper.vm.router dot push okay see i can spy on the method i'm not using the spying on the router method but that's just the example that he sent me uh okay expect rapper.vm.router.push to have been called with these options basically so let me keep this down here and so i guess i had this function all wrong so i'm going to do this dot vm i'm going to yeah get rid of that i'm going to spy on um i guess it's rapper dog oh wait i have to spy on would this be on methods oh wait wait would this be on methods so if i did methods yeah um or no this is the this context right so yeah because you're just doing dot router so no it's not a yeah okay so i guess this is how it would be so wrapper spinewrapper.vm the next challenge method this.methods.thing yeah it makes sense um so expect that this method to have been called and because i have five minutes i'm going to take out the two have been called with and just do two have been called and see if this passes real quick april.vm is the same as this yeah thanks so that's just this context cool thanks for the help um keypress dot enter i also i'm pretty sure that this will work let me stop running that and do mpm test and i'm going to test just the body component that looks right good oh it failed what failed syntax error just encountered an unexpected token you're trying to import a file which just cannot parse it's not plain javascript i don't think that's the problem um syntax error unexpected token uh unit components body.spec.js 570 um okay well that's weird oh wait i must not be closing something there let's see what am i not closing um because now it's it's complaining about this closing bracket so i must have deleted something or done something wrong but it seems like i have closing methods for everything so let me look at this oh okay i'm not closing my inner test okay i see i see so i think that that's right clear that try running the test again okay snapshot failed and that's because wait um yeah i don't know why the snapshot failed oh um underscores not defined my um lowdash library must be because there's no semicolons i don't think so must be because there's no semicolons i don't understand why the test would fail on that right now it's complaining that received number of calls zero and expected number of calls oh he's teasing me okay okay i get it i'm not very good with jokes obviously um expected number of calls makes you a stronger developer oh because you're using your pinky more let's see that's a very opinionated statement so it's not calling it so i think that's a problem not with this spy but with um my key press dot enter if that's actually triggering here so man i have like one minute uh let me search for next challenge here and make sure that that is what's getting called yeah so when i press enter it should be calling this next challenge method and let's see why is it not calling the next challenge method let me look up this key press syntax because that might be what's wrong input dot trigger key press i don't actually know let me get out of that i don't actually know if that's the right syntax for it testing key mouse and other dom events so let me look for keyboard keyboard example here we go um component under test this component allows to increment decrement the quantity using various keys okay so it's capturing a key down event and let me make sure that my commit i don't know lol okay thanks um let me see i'm doing key press here so yeah i'm triggering the key press here so that's good now i'm testing it and yeah they're doing wrapper dot trigger key down and then the name of the key so it's the up arrow key um okay mount yeah so why isn't it triggering that function assuming that it's getting the correct input and it's setting that input i mean can i log out i think do i have to set a just option to be able to do console.logs from tess um so console.log and then input yeah let me see what that is uh let's see all right uh tests okay i'm not worried about that other one expect just a function to have to be called or two have been called to match snapshot oh this one changed um slightly oh because i messed up this before so i think i do need let me just update that snapshot real quick because that was just a mistake that i made why the snapshot is different okay so now i can just test the body and now it should be just this one failing test so there won't be a lot of other noise selector um okay um so maybe expect it to have been called this is a reference error underscore is not defined and that's because i think i'm importing yeah lowdash here is defined but never used okay then i just don't need it oh yeah because that's right because i moved it into these other files here so um does match does not match let's see i got rid of that but so i wonder because it's trying to call this whole function here i think maybe it's throwing an error because the function does a whole bunch of things and maybe i'm just not mocking everything that i need to be mocking for this function to run okay the stream died anyway so um this test isn't quite passing i'm getting the correct input um i don't think this the function is having some errors uh so i need to figure out why it's having this particular error and i think it's because saying reference error underscore is not defined which is only when i call some external functions like does match and does not match so i think that's the issue is in those files somehow um yeah maybe i need to stub that function or something or you know make a mock of it but yeah i am out of time now so uh thanks for joining me i'm just going to take a few minutes here and make sure everything is pushed to github i did get some things done like i got all the testing set up i got a couple uh snapshots done and then i started to test the other components you think the input trigger might be wrong in the docs it said oh where is it in the docs it said input.trigger and then i could do keypress dot enter um i don't know if i need stop because that's what it is in the dom here okay let me let me run this one more time although the error didn't seem to have anything to do with stop but i can just run it and see oops yeah it failed again all right so yeah i am going to uh just add those files commit um code from live stream on august what's today uh august 21st on august 21st 2020 this is part two okay and then i'll push that yeah so like i said i have a youtube channel that's in the description below and i also have a twitch channel which is also faraday academy if you want to check it out and that's where i do my coding live streams from twitch i do other coding related videos and sometimes interviews here on youtube so i'll be live on sunday if you want to see some view and django coding the input trigger needs to be a native js element like click or key up wait key press isn't made of js i thought key press was um because where is it here oh i'm taking more time uh let's see keypress.enter.nextchallenge i mean i could do key down i guess so um i can't remember why exactly i have key up and key press to do the validate oh because i wanted to run validation after this i guess oh okay that's interesting so key press but it is key press dot whatever um i don't know because key down here so key key down dot down works in triggering so i think it can be a view event because these work um yeah keydown.escape you can even pass in the key as in an options object which key you want to trigger i guess they change it and view test details okay yeah so i really don't know exactly what's wrong but i did just push the code so if you're interested in the code i didn't quite finish this challenge but i started working on that test then here's the repo i've been working on yeah thanks for the help jared thanks for tuning in everyone and yeah like jared said i have a youtube channel check me out on twitch and if you want to continue the conversation you're welcome to join me on discord otherwise i will see you later thanks for a fun stream today
