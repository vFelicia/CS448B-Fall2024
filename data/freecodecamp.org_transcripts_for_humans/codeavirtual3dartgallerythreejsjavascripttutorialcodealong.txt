With timestamps:

00:00 - unlock the world of 3D web experiences
00:02 - with this beginner-friendly 3js tutorial
00:05 - you will learn how to create an
00:07 - interactive 3D art gallery to Showcase
00:09 - your portfolio in a dynamic engaging way
00:12 - this course will cover all you need to
00:14 - know about 3js fundamentals such as
00:17 - scene camera renderer geometry materials
00:20 - and more amelon created this course and
00:22 - he will provide you with Hands-On
00:24 - lessons on animation meshing user
00:27 - interaction and utilizing a gooey bugger
00:30 - for real-time configuration all designed
00:32 - to empower you to bring your Creative
00:34 - Visions to life on the
00:36 - web hello everyone in the next 8 hours
00:40 - we are diving into the world of 3js to
00:43 - craft an interactive 3D art gallery this
00:46 - is what we are going to
00:51 - [Music]
00:58 - build
01:07 - [Music]
01:39 - so
01:40 - usually I go in Windows plus air write
01:45 - CMD open on the terminal here in the
01:48 - terminal CD desktop so I will create my
01:52 - project in the
01:55 - desktop then
01:57 - [Music]
01:58 - MK
02:01 - deer this creates a folder in the
02:05 - desktop and the name of the project
02:08 - so Art
02:12 - Gallery
02:14 - simply okay we created the folder let's
02:19 - get into this folder CD
02:23 - Art
02:25 - Gallery okay and now let's open it in
02:29 - our vs code we usually use vs code is
02:34 - the
02:35 - best editor out there so code and
02:42 - Dot okay we are in the vs code we have
02:46 - this
02:48 - folder now we need to create some files
02:51 - that we need usually we need uh HTML
02:55 - file uh of course a CSS file for the
02:58 - styles and also the
03:02 - functionality that is the JS file with
03:05 - JavaScript
03:07 - okay uh if you don't know we
03:10 - are working with this project we will
03:13 - work with this with
03:15 - 3js
03:19 - okay 3js is a cross browser JavaScript
03:22 - library and application programming
03:24 - interface used to create and display
03:27 - animated 3D computer Graphics in a way
03:29 - web browser using
03:31 - webgl okay uh the source code is on
03:35 - GitHub it's open source so it's a very
03:40 - nice Library I really like it I am a fan
03:44 - of 3D usually I I used to work with
03:47 - unity Unity
03:49 - 3D in my opinion Unity is the
03:52 - best ever tool out there for me but I
03:57 - really like also 3js if you want to
04:00 - create Games Etc Unity is is like the
04:04 - best tool for me also unreal but I am a
04:07 - Unity Fanboy but if you want to work in
04:11 - a browser with 3D models or you know 3D
04:16 - programming for web applications 3js is
04:20 - the best choice there is also
04:23 - babylonjs it's also great and it's
04:26 - maintained from
04:28 - Microsoft but yeah I think 3js it's
04:32 - very uh easy I mean very easy it's like
04:38 - let's say easy compared to you know
04:42 - other Frameworks that has a very steep
04:45 - learning Cur but 3js if you know
04:47 - JavaScript it's very easy to get into if
04:51 - you are a JavaScript developer okay so
04:55 - no more
04:57 - talking let's create let's create first
05:01 - uh an HTML file okay we need an HTML
05:06 - file so
05:10 - index.html
05:12 - okay let's create the template so you
05:16 - just simply write the
05:19 - exclam uh I don't know in English but I
05:23 - think it's called like
05:25 - that okay so we have the template right
05:31 - let's create uh immediately the other
05:35 - files so we have the
05:37 - structure you know the structure of the
05:40 - project and so slowly we can build the
05:45 - project okay so the index HTML create
05:48 - one let's create a folder so it's better
05:52 - to keep the files on folders with a
05:57 - specific name so JS for example we have
06:02 - here the files uh JavaScript files that
06:06 - there might be many files or only one
06:09 - file one main file maybe we can create
06:12 - everything inside one file but we might
06:16 - need other files so let's create a
06:18 - folder JS let's create the CSS folder
06:24 - also oh it's created inside oh
06:28 - sorry
06:32 - come
06:34 - on delete permanently
06:38 - okay CSS
06:41 - folder
06:43 - okay let's also create the file so
06:47 - style.
06:50 - CSS okay and also a main JS file
06:57 - main.js all right so we have have
07:01 - here uh what is important and I think we
07:05 - can do it since the beginning we should
07:08 - import the module of
07:12 - 3js so we need a
07:15 - module uh by 3js you can go to
07:20 - Google and uh simply search
07:24 - 3js GitHub module or something like that
07:29 - and here you will see this is the Mr
07:32 - dup it's the maintainer and creator of
07:37 - 3js and you can download the file here
07:40 - if you are familiar with GitHub you
07:42 - already know if you're not familiar with
07:44 - GitHub uh here in the green
07:48 - button click the green
07:51 - button uh download the zip file and
07:56 - inside what we really need we don't need
07:59 - everything here actually so now it's
08:03 - uh it's not very light it's like there
08:07 - are many files here many files but what
08:10 - we need is inside inside the build okay
08:14 - inside the build folder so after you
08:15 - download it I already have it that's why
08:18 - I'm I don't have a problem I already
08:21 - have it if you don't want to go through
08:23 - this I will I will post this project the
08:28 - whole project on my GitHub so you can
08:30 - simply go and copy the file in my GitHub
08:34 - if you want to know this because maybe
08:37 - you will need it with other projects
08:40 - that you will create yourself so it's
08:43 - good to know we you will do this every
08:46 - every time you will need this inside the
08:49 - build folder you will need this three.js
08:52 - file or
08:54 - 3.
08:56 - MJS it's a mini ified version so the
09:00 - minified version or the 3js this is for
09:04 - modules it's like you if you are
09:06 - familiar with es6 Etc it's like built uh
09:11 - but for now you you just need this one
09:13 - 3js or the minified version I will go
09:17 - with the this file
09:19 - 3js okay so here code download I have it
09:25 - here so I go and will copy it
09:30 - so three file let me go to this
09:35 - folder so reveal in file
09:44 - explorer I will put it here all
09:48 - right I am not using the minified
09:51 - version but the minified is
09:54 - lighter anyway this is just a propose of
09:57 - a tutorial
10:01 - let's go back so we have the 3js here
10:05 - okay let's create if you want to take a
10:08 - look inside
10:10 - maybe it's you know it has classes
10:14 - Etc about every everything you see is
10:17 - pretty pretty big it's there
10:20 - are there are a lot of classes methods
10:25 - functions and every everything about 3js
10:30 - that we will need to to to
10:34 - create and do 3D programming okay but
10:39 - let's leave this for the advanced
10:43 - guys so let's go to our HTML
10:47 - files let's change the title
10:50 - First Art
10:53 - Gallery okay maybe let's add the CSS
10:58 - file
10:59 - so let's edit now and uh we will need it
11:06 - later
11:07 - so
11:09 - uh here about add
11:15 - link okay Styles sheet so HRA it will be
11:21 - in this folder
11:23 - CSS so CSS style CSS okay
11:30 - great so let's build the file maybe
11:33 - first let's open this in our
11:36 - [Music]
11:38 - browser so go live here go
11:42 - live go live or click the right and then
11:47 - open with live server or the shortcut
11:50 - alt plus L all alt plus
11:55 - o
11:57 - okay so here is
11:59 - our
12:01 - project it's here on
12:05 - this uh
12:07 - address in our
12:09 - local we don't see anything because we
12:12 - don't have anything so let's create some
12:15 - files here so we can see what we will
12:19 - need we will need you know the we will
12:22 - need the background the main background
12:26 - that we'll have I don't know we have the
12:28 - scene
12:29 - of our project then another it will be a
12:33 - div so then another div inside will be a
12:37 - main container
12:39 - maybe uh then an
12:42 - H1 we will make like uh we will make
12:46 - like a menu when we first click uh our
12:50 - project it will open up a menu with some
12:55 - information you know the title Art
12:57 - Gallery Etc
12:59 - and maybe some instructions or you know
13:03 - it's up to you actually it's up to you
13:06 - but let's make a very easy
13:09 - one a very simple
13:12 - one so let's create a main div and let's
13:17 - give it a class name of background or
13:20 - background menu so if you want to be if
13:24 - you want to have
13:25 - some shortcuts to be a good developer if
13:29 - you don't know maybe many of you already
13:32 - know these things you know so don't bear
13:36 - with me maybe some others are beginners
13:39 - and they would like to know these
13:40 - shortcuts to be fast and you know Pro
13:45 - tips so if you want to create a
13:49 - div not going to div and then give it a
13:52 - class you know so div then go and class
13:57 - and then add the class name menu Etc
14:00 - there are some Pro tips so you can be
14:05 - quicker and faster so dot and the name
14:09 - of the class the name of the class will
14:11 - be for example background menu so do
14:16 - background menu enter this is the EMT
14:20 - abbreviation and you see it's quick and
14:25 - it's fast it's a nice shortcut or
14:31 - it's my oh my God it's myal okay
14:37 - so again you will make you will create
14:40 - another div with another class the same
14:43 - thing so dot and put the name of the
14:47 - class it will create a div with a class
14:50 - name ready okay so go with these things
14:56 - and you are quicker or if you don't want
14:59 - the class but you want maybe an ID
15:04 - so this uh sign of the ID and then put
15:09 - the the name of the ID that you want and
15:13 - enter it will create the div with ID
15:17 - menu
15:19 - okay what we need and
15:23 - then inside this menu we will inside we
15:28 - we will add the title uh maybe we will
15:32 - add an image okay we want a nice image
15:36 - they want to show this Gallery before
15:40 - and maybe click button like uh
15:43 - explore explore the gallery or enter the
15:47 - gallery uh Etc so we have menu div let's
15:52 - add
15:53 - the yeah let's add an an image let's
15:58 - create a div with uh image container so
16:04 - ID and uh
16:09 - image container
16:14 - okay and inside let's set an
16:20 - image okay this will be the source I
16:24 - will let the image now and you know just
16:28 - menu pick doesn't
16:31 - matter
16:33 - okay uh let's add the the
16:38 - picture yeah let's set the
16:45 - picture oh this is my pictures
16:48 - [Music]
16:50 - don't where do I have those pictures I
16:53 - have some okay I want to add this the
16:56 - stay night that's why
17:01 - maybe create a folder for this yeah
17:05 - let's create a folder for
17:08 - this
17:12 - image let's set it
17:16 - inside
17:19 - okay let's set the
17:23 - source so image ster
17:27 - night great let's change the AL
17:32 - here
17:35 - night
17:37 - good okay we see something here in our
17:42 - browser so what else what else we
17:47 - need uh yeah we need the title you know
17:51 - the menu we need the title so a title
17:55 - and description Maybe
18:04 - yeah title and the
18:08 - description okay so title image uh
18:12 - description what else we may need we may
18:15 - need like uh or maybe let's keep it
18:18 - simple yeah let's keep it simple for now
18:22 - let's set maybe an image a title and uh
18:26 - a description okay
18:30 - so this is for the
18:34 - title and
18:37 - uh yeah let's keep it for
18:41 - now ID this is will be the
18:46 - content the
18:48 - content and yeah and each
18:52 - one that will be hard
18:57 - color
19:00 - okay and uh it will also have the
19:07 - description and
19:14 - uh inside let's create a P A P tag with
19:19 - a
19:20 - description this is an
19:24 - interactive uh 3D gallery
19:30 - okay uh
19:33 - description maybe some other description
19:36 - if you want made with
19:39 - love and
19:44 - 3js and
19:46 - 3js
19:48 - okay what
19:52 - else yeah we see something
19:55 - here what else what else
19:59 - uh yeah
20:01 - maybe we will
20:03 - need
20:05 - like some instructions how to move what
20:09 - we will do etc etc
20:14 - right
20:17 - okay
20:19 - so instructions maybe bet
20:22 - [Music]
20:25 - always
20:27 - instructions here B tag again move left
20:30 - or right it doesn't matter Arrow so
20:34 - arrows and look
20:39 - around look
20:43 - around with mouse
20:49 - yeah uh let's set maybe a
20:51 - bom to start to
20:57 - play it's like
20:59 - just play
21:07 - Enter
21:09 - G
21:13 - okay let's give an ID to this
21:17 - one play
21:21 - button
21:24 - okay
21:27 - okay
21:30 - it is
21:34 - something
21:37 - also also we
21:40 - need the
21:42 - scripts okay we also need the scripts we
21:45 - will add here the 3js script so and you
21:50 - have you should keep in mind something
21:53 - here a the script and here in the script
22:00 - SRC we will put our 3js
22:05 - okay you should keep in mind always
22:08 - always uh add the 3js script before
22:14 - everything else okay so above all at the
22:19 - top you add this script of 3js and Below
22:23 - you add the MJS file etc etc okay so
22:28 - like this it will
22:31 - be uh JS you don't need the dot and you
22:36 - know so simply
22:38 - JS no main JS it's
22:43 - threejs so JS
22:46 - 3js okay this is
22:50 - it another
22:53 - script okay you see how I cop it you can
22:58 - put you can press shift alt and the down
23:05 - arrow and you copy like
23:08 - this
23:10 - okay so shift alt and the arrow
23:15 - down let's change this one this is for
23:18 - the main Js
23:20 - Js M Jaz
23:24 - okay uh so we have pretty much much
23:28 - everything here for the HTML maybe we
23:31 - should add the Styles and then we can
23:34 - work for the real project with
23:37 - JavaScript and create everything set up
23:40 - 3js set up the canvas the camera
23:45 - render objects and you will see yourself
23:50 - everything
23:51 - else
23:53 - okay so
23:56 - styles
23:58 - let's set some Styles maybe if you don't
24:01 - want to follow along about Styles it
24:04 - this really doesn't interest you the
24:07 - HTML ex you can look uh the final result
24:11 - or just grab and copy and paste from my
24:13 - GitHub so just don't don't worry or just
24:20 - forward I will add some Styles here
24:23 - there is nothing to really
24:25 - explain so we'll add this style so why
24:28 - is
24:33 - Skip okay there are also some shortcuts
24:37 - shortcuts for for the CSS if you don't
24:40 - know those are our beginners so for
24:43 - example I want the width 100% so not
24:47 - going width and then 100 I can simply
24:52 - write uh W and 100 enter and very very
24:58 - quick the same
25:00 - age
25:02 - 100 quickly for the font size F uh s and
25:08 - the 12
25:10 - size you have the font style or font or
25:13 - sorry it's font style I need the font
25:16 - size okay
25:19 - whatever but yeah there are this
25:23 - shortcuts
25:26 - also called color let's give it like I
25:30 - have
25:30 - [Music]
25:35 - some this is the result of the
25:38 - CSS style you can copy this in my
25:42 - [Music]
25:47 - GitHub so let's leave the CSS and uh
25:51 - let's open our jsjs file and here it
25:55 - starts the 3js
26:00 - project so we want to click this enter
26:02 - the
26:04 - gallery after clicking it U the menu
26:08 - will
26:10 - hidden and we will see this 3D object
26:14 - where we can interact and move
26:17 - around we will
26:19 - put a big
26:21 - box there you know we will
26:25 - put M the floor we will put the walls
26:31 - and then
26:32 - create create you know the paintings
26:35 - that will be
26:37 - some some planes and we can put there
26:41 - attach uh a
26:44 - texter and let's see together but first
26:47 - of all we need some Main and important
26:51 - things when we create a 3js project that
26:55 - pretty much you will do a every single
26:58 - time these are the main Concepts and the
27:02 - main things you would need in a
27:05 - 3js
27:07 - project so everything you will work here
27:10 - in this file you will work by using this
27:15 - file here 3js that inside it has
27:19 - everything and if you want to check it
27:22 - yourself you can console log this big
27:25 - object because this is an object
27:28 - it's a very big object if you want you
27:31 - can console log it and see
27:35 - yourself and
27:37 - inside uh the three so
27:42 - uppercase three oh
27:46 - sorry
27:55 - sorry okay
28:00 - three let's
28:04 - check let's conso
28:11 - log f
28:22 - r three is now defined okay let's see
28:25 - let's see here
28:29 - I think it's a problem
28:34 - here CJs 3js s
28:40 - CJs M
28:43 - JS okay guys I stopped the video for a
28:47 - moment I went and I drank some
28:51 - water I changed my
28:54 - t-shirt
28:56 - I have my piggy blinders hat
29:00 - and got
29:02 - myself a cup of
29:05 - coffee uh no I don't drink coffee I take
29:09 - tea my dear like the song by Sting
29:13 - actually it's Jin sank not a
29:16 - coffee uh for
29:19 - my brain
29:21 - my small
29:24 - brain okay so this uh we had this
29:30 - error and it's it's just a stupid error
29:33 - actually it's usually when you see this
29:36 - error like
29:39 - uh you cannot get the 3js and because
29:43 - execute because it's my typ ET ET this
29:46 - just most probably we just uh mistyped
29:51 - here the
29:53 - [Music]
29:55 - source uh what's happened here I don't
29:57 - on tell
29:58 - script okay so it's just here the
30:02 - problem maybe
30:06 - we uh have a wrong path or mistype or
30:11 - maybe you
30:12 - are uh directing a path that it's not a
30:16 - JS script but it's like a CSS or Json or
30:21 - etc for example I just make this stupid
30:26 - errors sometimes so I didn't see
30:29 - that uh 3js is inside the JS folder and
30:35 - I thought is inside but not it's not
30:37 - inside it's outside as you can see so
30:42 - let's put it inside the JS
30:45 - folder because you see the path JS
30:48 - 3js okay it's inside it should uh work
30:53 - now and the should okay it's gone is
30:57 - gone U I
30:59 - was showing you before these
31:03 - three object let's give it a
31:14 - name
31:17 - okay let's take a look here console log
31:20 - you
31:21 - see three object here and this is very
31:26 - very big object it has like everything
31:30 - inside you know everything that we might
31:33 - need to
31:35 - work you see if I go and click on any of
31:39 - these you there are a lot of
31:42 - things uh inside of
31:45 - that okay
31:47 - so the three Library this file that we
31:53 - imported
31:55 - uh contains most most of the classes and
31:58 - properties that usually we might need on
32:02 - a classic project with 3js okay but but
32:09 - sometimes not every class that we might
32:14 - need is inside of this but we will talk
32:18 - about it maybe later when we will go
32:22 - through that problem okay because
32:25 - sometimes we need some other classes
32:27 - that are not inside this three and we
32:30 - should import it from another source
32:34 - okay but for now let's leave it so
32:38 - comment this
32:40 - one so guys we have the HTML file okay
32:46 - here we have like the Styles you can
32:50 - copy the CSS Styles if uh just don't
32:54 - worry about that just copy and paste the
32:57 - Styles uh we are not here to learn CSS
33:00 - but we are here to to do something with
33:04 - 3js and 3D
33:07 - okay so we have HTML we have the Styles
33:11 - now we want to add the interactivity the
33:15 - functionality with JavaScript or more
33:18 - exactly with 3js
33:21 - library and uh where to start where to
33:26 - start we will start by creating the
33:32 - canvas and then we will add a camera
33:37 - like in a movie scene okay because the
33:40 - canvas there is the scene we will need a
33:44 - camera like in a movie scene and then we
33:47 - will need a renderer so we will create
33:51 - the renderer to render the scene and the
33:54 - camera uh we may have have lights uh
33:58 - shadows and
34:00 - everything also in our scene we want to
34:04 - add the 3D
34:07 - models okay so our Gallery uh cubes uh
34:13 - and every kind of shapes that
34:17 - 3js
34:19 - has the possibility
34:22 - to to work with with with those
34:25 - geometries okay so first of all the
34:28 - first thing let's create the scene the
34:31 - most important thing and the first thing
34:34 - we should do create the
34:37 - scene okay so for that we just
34:42 - normally uh we just create a variable
34:46 - with the with the S okay and
34:50 - just save it there there are different
34:54 - methods to work here we can just work by
34:58 - creating the variables the functions uh
35:01 - Etc or we can create
35:05 - a an object and put everything inside
35:09 - this object
35:11 - okay it's like replicating the name
35:15 - space in C okay if someone of you uh is
35:20 - using C especially with game development
35:23 - you create like a
35:25 - namespace uh JavaScript doesn't have an
35:29 - mpace it's something that it's called G
35:33 - object okay where you put all your
35:37 - variables functions that then are
35:40 - methods Etc okay but let's keep it
35:43 - simple because I think we can do
35:45 - everything inside one single file in
35:49 - inside this main JS okay so we are not
35:53 - going through that you know pattern of
35:56 - object oriented Etc with objects just we
36:00 - can simply create
36:02 - so let scene or const SC because the
36:07 - scene usually you will not change it so
36:11 - it's a constant so const
36:19 - scene equal and here the keyword new to
36:24 - create a new scene this is you have to
36:28 - be familiar with objectoriented
36:30 - programming because you have classes and
36:33 - then you instantiate a new object with
36:37 - the properties of the the class
36:40 - so in this case we are just keep it
36:44 - simple for this kind of explanations new
36:48 - think about it just a
36:50 - new a new thing that we are creating
36:53 - okay with some properties that it has uh
36:56 - uh with itself in this case we are
36:59 - creating a new scene new let's call
37:03 - three okay and then with that oh sorry
37:06 - it's just my
37:09 - sorry
37:12 - new three okay and then with that
37:16 - operator oh my God why is this
37:22 - calling three and then SC with that
37:25 - operator we
37:28 - access uh the properties inside this
37:31 - this this class the the main class of
37:34 - three it may have other classes it may
37:36 - have you know uh functions methods
37:40 - properties and everything else okay so
37:43 - three. sin and parenthesis and that's it
37:48 - this is our
37:50 - scene let's put some comments I will let
37:53 - some comments during the the tutorial so
37:56 - when you get the code uh on GitHub you
38:00 - also have it commented so if you forget
38:03 - or you know it's just for the beginners
38:05 - is easier so create the scene this
38:11 - one what else as we said we need the
38:15 - camera so let's create a new camera like
38:19 - in a movie set you know we have the
38:21 - scene imagine imagine this scene to to
38:26 - to see this scene we need a camera to to
38:30 - to look and because when we render it
38:33 - will be through uh you know the eye of
38:36 - our
38:38 - camera okay so the same thing as we did
38:43 - with the the the Sim to to create a new
38:47 - a new
38:48 - camera we simply go by
38:52 - just const camera because it will be
38:55 - again a constant so const camera and
38:59 - with the specific class from three
39:04 - library that it's called perspective
39:07 - camera and I will explain it now okay so
39:14 - const camera equal it so again
39:19 - new and again three from the three
39:23 - Library we are accessing this three
39:29 - here this
39:31 - time we are accessing perspective
39:39 - camera
39:41 - okay and it accepts
39:45 - some parameters that I will explain now
39:50 - but con camera new three perspective
39:55 - camera the camera uh actually is not uh
40:00 - visible we cannot see this camera it's
40:04 - more like a a point of
40:07 - view okay so when we will do the render
40:11 - later of our Scene It will be from this
40:15 - point of view so from the camera's point
40:18 - of view we will render the scene of
40:22 - course like in a movie scene there are
40:24 - different types of camera
40:27 - and maybe we will talk about it later if
40:32 - we will need it not for now for now we
40:35 - will simply use uh this one the
40:38 - perspective camera it's like the
40:40 - perspective it's like making close
40:43 - objects look more prominent than the
40:47 - than the far objects the objects that
40:50 - are far okay so that's it to create you
40:54 - use this one
40:57 - one
40:59 - uh using this class perspective camera
41:04 - there are two main parameters that we
41:08 - need to provide inside there is the
41:10 - field of view and there is the aspect
41:15 - ratio I think you may know what the
41:18 - aspect ratio is it's like width
41:21 - divide by height okay width divide
41:26 - height you sa the the aspect
41:30 - ratio the field of view is uh how large
41:35 - our vision angle is so for instance if
41:40 - we use a very large angle we will be
41:44 - able to see in every direction at once
41:50 - but it will be with much Distortion okay
41:55 - because there result will be drawn in
41:58 - small rectangle but okay leave it for
42:01 - now if we use a small angle things will
42:05 - look zoomed
42:08 - in so the field of
42:10 - view is uh expressed in degrees and uh
42:15 - it corresponds to to the vertical Vision
42:20 - angle so here for instance we will give
42:26 - this
42:29 - parameters
42:34 - so
42:37 - 75 okay and this is the field of
42:43 - view it's like you know what I found
42:47 - that it's it's it's it's the correct
42:49 - let's say but you can play with this
42:52 - depending on the
42:54 - project so the the field of view and we
42:58 - also said a few moments ago we have the
43:03 - aspect ratio so the aspect ratio is
43:07 - width divide height in this
43:12 - case uh what we are dividing here the
43:16 - width of what the the width of the the
43:21 - the canas that we have the same so in
43:23 - this case we want it we don't want to to
43:27 - to put
43:29 - sizes okay we we will get the width of
43:33 - the window so the width of the whole
43:35 - window divide by the width the height of
43:40 - the whole window so we keep that ratio
43:43 - but using the window object that is the
43:49 - uh the window object of of the browser
43:52 - okay so
43:54 - window Dot inner
43:59 - width if you click the dot it you will
44:02 - show you know the properties divide by
44:07 - window do inner
44:10 - height okay and that's
44:12 - it a comment here so you have it clear
44:17 - uh aspect
44:20 - ratio okay then you as a third parameter
44:25 - and other parameters you can also add if
44:29 - you want depending on the project but
44:32 - this is for
44:34 - example
44:37 - 0.1
44:39 - it's for the near clipping plane and
44:44 - also the
44:46 - far that I can put here
44:49 - 1,000
44:51 - okay far and
44:54 - near
44:56 - and that's it for the
44:58 - camera that's it for the camera we don't
45:01 - see anything because we don't have
45:04 - anything in our scene we added the cam
45:07 - because the camera is not
45:11 - visible but anyway uh we created the
45:14 - camera but we always need when we create
45:19 - an object or when we create something in
45:22 - our canvas we need to add this to our
45:26 - scene so for that we have scene. ADD
45:32 - okay and as a parameter we add the
45:37 - camera
45:40 - this
45:41 - okay let's put some comments
45:45 - here
45:50 - s camera so we
45:54 - divided some kind categories if you want
45:57 - also to search and you
46:02 - easier
46:04 - okay we have the camera uh there is
46:09 - something that
46:10 - uh we you should not forget you should
46:14 - not
46:14 - forget for example if we have something
46:17 - in our scene
46:19 - we we cannot see it because we the
46:24 - camera when you create the camera by
46:26 - default the camera is in you know it's
46:30 - it's in the
46:32 - zero axis so we cannot see it it's like
46:35 - the camera is it's it's near the the the
46:39 - renderer so to to to make it possible to
46:42 - to look at the things we need to pull it
46:46 - back a little okay so the position of
46:49 - the camera in the Z axis will we will
46:53 - pull it back to to be able to to to see
46:56 - it's not a problem now because we don't
46:59 - have anything but it will
47:01 - be an issue let later so camera.
47:06 - position so we get the position property
47:10 - and then Z in the Z
47:13 - axis and a number five for
47:18 - example okay and this
47:21 - move the camera back five
47:29 - units good and this is
47:33 - done what's the next
47:36 - step the next step is the renderer we
47:40 - need a
47:42 - renderer also the
47:45 - canvas there are usually two ways
47:49 - someone will create a canvas
47:52 - here create a
47:54 - canas
47:56 - okay and then uh this canvas then access
48:01 - uh the canvas with a property like
48:03 - document that gets element by ID or by
48:08 - class you give you give a class or ID to
48:12 - to the canvas here in the
48:16 - HTML and access
48:18 - that and save it in a variable or you
48:22 - can simply create the renderer as we
48:25 - will do now
48:27 - without uh creating the canvas there and
48:30 - access it
48:31 - with
48:33 - document get element by ID okay so let's
48:38 - go for it and let's explain some basic
48:42 - things about the the renderer we will
48:47 - ask the renderer to render our scene
48:52 - from the camera point of view as we
48:54 - mentioned before and the result will
48:59 - be drawn into the
49:03 - conas okay so we mentioned that we can
49:07 - create the canvas by ourselves or let
49:11 - the renderer generated and then add it
49:15 - to our page so to our
49:18 - document uh body
49:21 - HTML to create the renderer we use the
49:25 - web GL renderer class as we did before
49:29 - with perspective camera class uh this
49:32 - time we will use the webgl render class
49:35 - with one parameter and that one
49:37 - parameter is an object you will see
49:41 - now
49:45 - render letter const
49:50 - render oh
49:54 - no
50:00 - always
50:01 - [Music]
50:03 - new
50:06 - three and we mentioned we will use the
50:10 - webg renderer
50:14 - class okay so to create the
50:17 - renderer we use this class webgl
50:22 - renderer okay and it accepts one
50:25 - parameter that it's an object okay and
50:30 - that's it let's just just just this one
50:36 - uh if we created the canvas here as we
50:40 - said before we will pass the canvas
50:43 - inside the renderer okay or let the
50:46 - renderer create that
50:49 - commer okay in this case in this case I
50:52 - didn't create a canvas in our HTML so
50:57 - I'm just leaving like that with the
51:00 - empty object
51:01 - inside this accept some other properties
51:05 - for example like
51:07 - ATI
51:11 - Alias okay I will explain uh what it
51:19 - is and this is for antialias means for
51:24 - smooth aging
51:29 - for the geometrist it will give like
51:31 - Smooth
51:33 - edges later when we we will let some
51:37 - geometries
51:40 - okay so we have the scene we have the
51:44 - camera and we have the
51:47 - renderer but we are not finished with
51:50 - the renderer uh we just created a new
51:54 - instance
51:55 - but we will set the size of the renderer
52:00 - okay so to set the
52:04 - size render do set
52:10 - size and again for the aspect ratio we
52:16 - will use window. inner width and
52:21 - uh window inner height so we will give
52:24 - this two parameters as the the size to
52:28 - set the size it sets the size of the
52:30 - render in this case the size will be the
52:33 - width of the window and the height of
52:35 - the
52:36 - window
52:38 - okay I hope it's clear window. uh inner
52:46 - width and
52:49 - window that inner height
52:53 - okay perfect
52:56 - we set the size of the
53:00 - render you can also
53:03 - add a B background color for the render
53:09 - for the
53:10 - canvas you can do it now or you can do
53:13 - it later doesn't matter but yeah since
53:18 - we are here we can
53:19 - give like a white simple
53:24 - and
53:26 - um the property to to to change the the
53:29 - color is
53:31 - set
53:33 - clear color it's not very intuitive but
53:38 - anyway and there are some ways to to
53:41 - change this to give a color you can give
53:45 - it like with quotes like blue red Etc or
53:52 - hexad decimal and you know you know
53:55 - those things so let's give it zero X and
53:59 - f f f f f is just
54:03 - for the white
54:06 - one and this is the background
54:13 - color and this is done the last thing
54:17 - you should not
54:19 - forget as we mentioned before we will
54:23 - add this renderer to our
54:27 - HTML for that
54:30 - doent
54:32 - body
54:34 - dot a pen
54:36 - child okay and inside
54:41 - renderer uh render yes
54:45 - render
54:46 - dot Dom
54:49 - element D
54:52 - element okay and that's it
54:56 - let's add a comment here so add the
55:01 - [Music]
55:04 - render to our
55:08 - HTML and this is
55:10 - [Music]
55:11 - done what else we can
55:14 - do we are still not seeing anything
55:17 - because we don't have geometries we
55:20 - don't have anything in our scene so our
55:23 - movie scene has no Act
55:25 - has no nothing it's like empty we only
55:30 - have the camera and we are looking to an
55:32 - empty
55:36 - SC we can also add the lights let there
55:40 - be light okay we can add like spotlights
55:44 - ambient lights all these lights have
55:47 - some properties like uh one has the
55:51 - property it lights the scene uh as a sun
55:56 - another one has some spotlights or Point
55:59 - lights we have different lights
56:03 - uh the lights we can create a whole uh
56:08 - new tutorial only about lights and
56:13 - shadows it's very interesting actually
56:16 - but for this tutorial we need just one
56:19 - or two simple
56:22 - lights two to to light the
56:30 - same
56:32 - lights let there be
56:40 - light one light that we mentioned it is
56:44 - the the ambient light the ambient light
56:48 - is like a soft light but that lights
56:52 - everything all the objects in the same
56:55 - but equally
56:57 - okay so let ambient light equal again I
57:04 - think now you are used to it new new
57:08 - keyword again three colum
57:12 - three ambient
57:18 - light uh why it's not suggesting me this
57:22 - I think it should suggest me the keyword
57:27 - normally but anyway we give
57:32 - a a color to the light it's like zero in
57:37 - this case just 0 1 0 one Z 1 Z okay also
57:50 - 1.0 this is for the color the first
57:55 - parameter for
57:59 - intensity okay again you also have some
58:02 - other parameters like distance and Decay
58:06 - but we are not using it if you just want
58:10 - to distance
58:13 - and okay but
58:15 - yeah okay so we have our ambient
58:20 - light also we can as we did with the
58:24 - camera we can give this light a position
58:28 - where we want to to to to put this this
58:31 - this where we want to put to put this
58:34 - ambient light in this
58:37 - case uh we
58:39 - can put it in the position of the camera
58:43 - where is the camera we want that light
58:45 - the camera moves it update lights with
58:48 - the position of the camera okay so
58:52 - ambient light our variable
58:55 - do position I think you guessed
58:58 - it position uh equal in this case
59:04 - camera.
59:06 - position
59:08 - okay and that's it again some
59:11 - comments
59:13 - light follows camera on
59:17 - Instagram okay so lights follows
59:21 - camera and uh I think many of you
59:26 - didn't forget that when we create
59:29 - something in our scene we should not
59:32 - forget to add
59:34 - this things to our scene with the with
59:39 - the add property so
59:42 - same.
59:44 - add inside ambient
59:49 - light
59:52 - okay and the light
59:55 - is
59:58 - created we can add not only the ambient
60:03 - light uh we also have some we have
60:07 - different lights but we can add at least
60:11 - another one the directional light and
60:16 - the directional light is a light source
60:19 - that act acts like the
60:21 - sun like you know in the in the real
60:25 - life it TS like the sun that it
60:28 - illuminates all objects in the scene
60:30 - equally you know from specific
60:34 - Direction okay so the directional light
60:36 - it it's it's like the sun and it it
60:40 - shines through and lights in a specific
60:44 - direction that we we are using it
60:53 - okay
60:55 - [Music]
61:08 - so let uh let's call it sun
61:13 - sunlight again new you are getting used
61:16 - to it okay so the more you practice the
61:20 - more you just get also in in in
61:23 - intuitive way okay even if you have not
61:28 - clear the the objectoriented programming
61:32 - pattern
61:34 - so you just you just get it I'm creating
61:38 - something new here and you know it's the
61:41 - new
61:42 - keyword so new again three accessing the
61:47 - three library and uh here
61:52 - directional light
61:55 - again we give it some color and
61:58 - intensity one two 3 four
62:01 - five and intensity
62:08 - 1.0
62:10 - color
62:14 - intensity and we are done with the
62:17 - lights but of course you didn't forget
62:20 - again that we will always add this
62:25 - objects this things in our scene okay so
62:30 - again
62:32 - sin. uh
62:37 - sunlight now it's
62:40 - done we can also give some position
62:44 - since we said that this is a directional
62:47 - light we
62:48 - can give some position to it in this
62:51 - case since it's a a sum we will give a
62:57 - position in the Y
62:59 - AIS okay so it's like like this up and
63:03 - down like the sun it's like we give it a
63:07 - direction in this axis the y
63:11 - axis uh we will do it before adding it
63:15 - so
63:17 - sunlight. position you you see that it's
63:21 - very intuitive it's like not saying easy
63:24 - but you you you you can get through it
63:27 - if you know
63:29 - JavaScript it's that's why I like 3js
63:32 - it's intuitive
63:34 - it's it's it's a nice
63:38 - Library so sunlight do
63:44 - positiony in the y
63:46 - axis let's uh give it
63:51 - 15 so we have seen with camera we have
63:56 - the renderer added to our
63:59 - HTML and we have the lights in the end
64:05 - uh we want we want to to to to add the
64:10 - scene and the camera to to the render we
64:14 - need a render because the render is like
64:18 - the screenshot
64:20 - okay for the screenshot we need the
64:23 - camera
64:26 - and the SC that we are taking that
64:29 - screenshot okay so
64:32 - camera and scene that we are taking that
64:36 - screenshot like a
64:38 - screenshot so we need the
64:41 - render and to get the render we access
64:45 - the renderer variable that we created
64:48 - here above this
64:50 - one
64:53 - so
64:56 - render and for this
64:59 - renderer do render yeah it's
65:02 - a
65:05 - wordplay uh with the parameters same and
65:09 - camera because as we said to take the
65:12 - render to take that screenshot we need
65:15 - the camera and the scene that we
65:19 - are we are
65:21 - screenshotting okay uh something things
65:24 - to remember maybe if you don't see
65:27 - nothing after you create objects in the
65:31 - scene you we you should take in mind
65:34 - that uh you should
65:36 - specify the position of the
65:40 - objects or the position of our camera
65:45 - so we should not forget the camera it
65:48 - should be like pulled back a little so
65:52 - we can see things because if not out
65:54 - it's like I I I I go near the the the
65:59 - the camera of my laptop so I cannot see
66:01 - anything or reading the book it's like
66:04 - going like this so of course I canot see
66:07 - anything so I just need to put my eyes
66:11 - my field of view a little bit back so
66:14 - pulling
66:16 - back later when we will create the the
66:19 - objects you should also keep in mind to
66:21 - see the position of the objects if you
66:23 - are not seen anything render in the
66:27 - scene okay so we need to move things uh
66:31 - many times with
66:34 - 3js and that's it for now that's it for
66:39 - the main things
66:43 - the the main concepts of of of the scene
66:47 - of the canvas of 3js now we are going to
66:50 - do add some objects and we want to see
66:54 - something because we still don't see
66:57 - something this is just HTML it doesn't
66:59 - have nothing to do with the canas it has
67:02 - nothing to do with the three 3D World
67:05 - and
67:06 - 3js okay so we we created this lines of
67:11 - code oh that's why
67:15 - uh oh look look look I didn't see this
67:18 - maybe this was the reason
67:22 - I Your Parts was like the it's the old
67:26 - syntax of node but
67:30 - uh I don't need to import it if we use
67:34 - the server if we use webpac and express
67:38 - sometimes you need to import the three
67:40 - like import three from three it's like
67:44 - in react if you are used like you import
67:47 - a module that's why I was talking about
67:50 - modules uh before so if you use use a
67:54 - server Etc we will use it maybe in
67:56 - another
67:57 - project usually you import this three
68:00 - Library here the whole thing it's like
68:04 - import
68:06 - Asterix S3 from three like import
68:10 - everything from three but not in this
68:13 - case we just have it here in the
68:16 - scripts okay we
68:18 - are pointing to this path and we are
68:22 - just simply using it
68:26 - okay so we want to add some objects
68:30 - right we want to see something
68:32 - so like all our effort means something
68:37 - because now we don't need we we are not
68:41 - seeing anything but let me drink a
68:42 - little bit of some Gin
68:50 - sck uh also my cup are made of you know
68:54 - art this is like paintings I have a
68:57 - collection with different paintings this
69:00 - one is
69:03 - OS
69:05 - M okay I have
69:08 - like many of this with different
69:11 - paintings and pieces of art
69:15 - anyways so let's go for
69:19 - this object for the objects it's usually
69:23 - like we other 3D programming tools
69:26 - usually you create a cube you know the
69:28 - basic one the basic geometry we love the
69:32 - cubes we always start with a
69:35 - cube if we use um any other 3D software
69:40 - you know that you always start with a
69:42 - cube or you always start by deleting the
69:45 - cube the poor default Cube for example
69:49 - in blender those who use blender or work
69:52 - with blender they know that they open
69:54 - the program and the first thing they
69:56 - delete the the
69:58 - poor default
70:02 - Cube okay so we will create a cube just
70:06 - to see because later this Cube will be a
70:09 - box for our Gallery but since we are
70:14 - here for the
70:16 - beginners we need to explain a bit
70:19 - things step by step so bear with me
70:22 - please and also if you think that my
70:25 - English sucks at times I know it's not
70:29 - my native language and you know I can
70:33 - speak well at times you know but when
70:37 - you are live and explaining something
70:40 - technical it's you know you may have
70:42 - some problems so please uh understand
70:46 - this I know it can be frustrating maybe
70:49 - the accent or you know when someone
70:52 - doesn't speak very well their native
70:57 - language but okay
71:01 - anyway let's create this this this
71:05 - geometry uh yeah in the end
71:12 - here let
71:15 - geometry you see guys that now I see
71:18 - this I was wondering why I was not
71:21 - seeing any suggestion it was weird for
71:24 - me I added that line of code I don't
71:27 - know why I just it was the shortcuts I
71:29 - should delete some shortcuts actually
71:31 - sometimes they are a good thing
71:33 - sometimes they confuse you sometimes you
71:36 - don't even know that you created a line
71:38 - but you created it by by your shortcut
71:40 - or like GitHub copilot it it is great
71:44 - many times but sometimes if you don't
71:48 - know what you're are doing or you know
71:50 - just clicking you can add some line of
71:53 - code and get
71:56 - confused so first of all to create a 3D
72:01 - object what we
72:03 - do we create a geometry and we create a
72:09 - material then we create a mesh and we
72:14 - add this geometry and material inside
72:17 - this
72:19 - mesh seems confusing don't worry it's
72:23 - not it's uh pretty basic concept that
72:27 - the moment that you write it
72:29 - yourself you will just get it if not the
72:33 - first time just the second time it's I I
72:36 - will assure you that you will get it and
72:40 - it will become a second nature to
72:43 - you so let geometry again you know it
72:47 - now without my help
72:50 - new
72:52 - three and then uh do what I added
72:56 - something new you see that I added
72:59 - this I don't need
73:02 - this uh geometry new three for the
73:06 - geometry we need a class that is called
73:09 - box
73:16 - geometry box geometry and it accept some
73:19 - parameters
73:21 - uh for
73:23 - the three
73:25 - axis x y
73:29 - z it's like you give the size of
73:34 - it one one one simple one a small
73:40 - box
73:43 - box
73:45 - geometry is the shape of the
73:48 - [Music]
73:49 - object so we have the
73:52 - shape
73:54 - we need the class mesh basic
73:58 - material and uh the material is nothing
74:01 - else than the color so inside to add the
74:05 - color we we put the curly brackets the
74:11 - an
74:15 - object and inside this object we add
74:18 - properties in this case the property is
74:22 - color
74:25 - uh this is the color of of of of of
74:37 - it and in the end we create a
74:43 - mesh again
74:45 - [Music]
74:52 - new
75:01 - uh new three uh
75:05 - mesh as the name suggests and inside
75:08 - this mesh we put two parameters geometry
75:11 - and
75:13 - material geometry and
75:17 - material this creates the
75:22 - object
75:23 - okay
75:28 - great so we have it uh I think you know
75:32 - now what we should do right you know I'm
75:36 - sure you know we will add this Mash to a
75:40 - scene scene.
75:43 - add
75:44 - Mash this MH has the material and the
75:50 - geometry so this match is basically the
75:54 - object uh we can try and test it but I
75:59 - want to to to maybe
76:03 - explain maybe explain some basic
76:06 - concepts here
76:09 - so to to
76:12 - to reflect again what we
76:16 - did a vis visible
76:20 - object um like a cube to create it we
76:25 - need to
76:28 - create uh this type of object named
76:32 - mesh okay and
76:35 - mesh what is mesh it's uh simply a
76:39 - combination of the
76:42 - geometry
76:44 - okay and the the
76:48 - material the geometry is the shape I've
76:52 - added the comment here and the material
76:55 - is how it looks the color in this case
76:58 - but later we will add you know
77:01 - texter uh there are some other things
77:05 - but it it's how it looks the color in
77:09 - this in this case
77:12 - so you start with this geometry that is
77:15 - the Box geometry class okay that has
77:19 - three
77:20 - parameters that corresponds to the size
77:23 - the size of the Box the
77:26 - geometry
77:28 - okay uh for the
77:31 - material for the material we use the
77:33 - class mesh basic
77:36 - material uh it has one parameter and
77:40 - this parameter is an object okay
77:44 - containing all the options so the class
77:47 - mesh basic material with one uh
77:50 - parameter that is an object with all the
77:53 - options inside we have the property
77:57 - color so then I think you might know
78:01 - that to specify a color in 3js or in in
78:06 - JavaScript uh we can add hexad
78:10 - decimal uh
78:13 - number uh we can we can add the simple
78:17 - string like uh you
78:19 - know we can add it like this or uh as a
78:24 - string uh to to to to Ed it as a string
78:29 - we
78:31 - sorry we had the sign how is it called
78:36 - this sign I totally forgot English you
78:38 - know the ID sign
78:41 - anyway okay so there are these different
78:45 - ways to to or you can simply call it
78:49 - red like
78:51 - this
78:54 - okay for further information you you you
78:57 - get it in the internet so the final uh
79:02 - the final thing is the mesh so to create
79:05 - the final mesh we use the mesh class
79:08 - this
79:09 - one that we send inside as a parameters
79:13 - the geometry and the
79:16 - material
79:18 - okay and that's it in the end you add it
79:22 - to the scene
79:23 - let's see if we have any errors because
79:26 - yeah Art Gallery yeah I sorry it's the
79:32 - the the
79:37 - audio three has already been yeah of
79:40 - course of
79:42 - course that main JS has already been
79:45 - declared okay again this one that
79:48 - I sorry guys for
79:51 - this let's see
79:55 - okay 3. sin is not a
80:03 - Constructor having errors is normal you
80:06 - know it
80:20 - right see that's in
80:29 - yes looks
80:37 - okay okay so this sors is just a
80:42 - small back insignificant because it's
80:46 - just a
80:47 - typo it's not scene but seen uppercase
80:53 - okay so let's check it's
80:58 - normal I will not cut and edit these
81:01 - videos I will leave this mistakes and
81:05 - errors so yeah you maybe you you can
81:09 - learn from from this errors so I will
81:12 - not edit you know and cut the the parts
81:15 - of the video where I make
81:18 - mistakes oh okay we have another error
81:23 - uh what's this one cannot read
81:24 - properties of undefined
81:27 - render why let's
81:32 - check and Define render render render
81:35 - render render oh why I have this three
81:39 - here it is not needed so it's just
81:43 - renderer do render without three I don't
81:47 - know I have no idea why I wrote that but
81:53 - okay let's
81:56 - check okay finally no more
82:01 - errors
82:03 - uh it's good to know that we don't have
82:06 - errors
82:08 - but uh we want to see the object that we
82:12 - created right we created
82:16 - uh where is it we created here where is
82:22 - it okay we created the cube so we want
82:25 - to see that Cube so geometry and
82:28 - material added to a mesh as parameters
82:32 - to create this Cube so maybe here
82:35 - instead of
82:37 - mesh instead of
82:40 - mesh uh let's call it Q it's yeah
82:49 - it's let's call it Cube
82:57 - so this is the cube created with MH that
83:01 - accepts geometry and material but we
83:03 - don't see it we have just
83:07 - this uh HTML element we have no Cube but
83:12 - uh actually the cube should be behind
83:15 - this element because the canvas is
83:18 - behind this so we are covering it
83:23 - I think so let's hide
83:28 - it let's hide the
83:30 - whole element inside the body and we
83:34 - should see it
83:36 - now
83:38 - oops we don't see
83:41 - it uh let's check if any
83:45 - errors no errors no bugs but we don't
83:51 - see the cube
83:54 - why okay guys I am not uh cutting and
83:58 - editing this Parts uh where I have
84:03 - some some bugs so yeah let's find it
84:07 - together where is this problem I think
84:10 - it's it looks okay in correct so we have
84:16 - the
84:17 - geometry new three box geometry we give
84:20 - the size of the geometry
84:22 - okay this is
84:24 - correct we have the material we create a
84:28 - new mesh basic material
84:32 - inside an object with this property of
84:35 - color and this is also
84:38 - correct I don't see anything any typo
84:42 - but if we had a typo we would have an
84:45 - error here we don't have any error so
84:48 - this is
84:49 - like those cases that you have a problem
84:54 - but you don't have you know an error so
84:58 - it's like a hidden bug okay and yeah we
85:02 - shoot the bug and find it if we
85:06 - can I don't know guys if you see
85:10 - something wrong here I don't see it
85:14 - Cube It's a new mesh with geometry and
85:17 - material okay this is also correct and
85:20 - we add the cube
85:23 - to our scene we render it with scene and
85:26 - Camera this is correct
85:29 - guys this is correct let's
85:33 - see maybe the camera we pulled it back
85:36 - the
85:37 - camera uh the problem that we talk we
85:39 - talked about so let's check the position
85:42 - of the caram
85:44 - yeah yes here we move the camera back of
85:49 - five units so we should be able to see
85:52 - see it it's not
85:54 - this where is the
85:56 - problem render is okay the camera the
86:01 - camera the position of the cube did we
86:03 - move the cube the position no we
86:07 - didn't perspective field of view oh oh
86:11 - oh I got it I got it I got it okay
86:14 - that's why okay that's why you see here
86:17 - the perspective camera I told you that
86:20 - we need the two main parameters the
86:23 - field of view and the aspect ratio so we
86:25 - have the field of view we have the the
86:27 - aspect ratio and then I I I said that we
86:31 - can add the two other parameters for
86:33 - near and far okay but this one here I
86:37 - have no idea what it's doing there this
86:39 - zero so it's like it's like the third
86:43 - parameter it's like this is the
86:46 - near okay and this is the far so it's
86:50 - zero so yeah I I think this should be
86:54 - this is the
86:57 - buck okay so we have one for
87:02 - uh
87:04 - 0.1 for the near and 1,000 for for far
87:09 - so it was like a third parameter I I
87:12 - don't
87:12 - know let's check let's
87:15 - check should be okay perspective
87:20 - field and com pull it
87:23 - back yes let's
87:26 - check okay great we see it our small
87:32 - cube our little cute
87:36 - cute
87:38 - Cube okay it was like somehow
87:42 - hidden
87:47 - we okay so we have this object guys and
87:52 - we created it uh maybe we
87:56 - can make a small
88:00 - animation okay of it we can make a small
88:03 - animation and this is
88:05 - [Music]
88:06 - the yeah this is the the time to talk
88:09 - about the
88:11 - animations what are the
88:13 - animations yeah you know what are the
88:15 - animations but what are the animations
88:18 - in 3js and the case is that that we we
88:22 - do here so let's do something and let's
88:26 - explain
88:27 - it uh a
88:29 - bit okay so we are
88:33 - here for the animation actually we need
88:35 - to create the render this one here uh we
88:41 - need to create a function like a
88:45 - loop and this Loop will make possible to
88:49 - to to show this animation
88:52 - so for each frame I will explain it now
88:56 - in detail so we need the we need a
89:00 - function first so let's call it uh let
89:04 - render Loop or something like
89:08 - that okay
89:10 - so I will explain it like in detail
89:14 - because this is a cool thing it's
89:18 - something you know it's uh nice to to to
89:22 - to learn and to and to
89:24 - to to play with it
89:28 - maybe so a function render
89:31 - Loop function and
89:35 - then
89:37 - okay uh first let's put this
89:43 - inside to move this hold line you can uh
89:48 - press alt and the
89:50 - arrow the error up and down okay alt and
89:54 - error up and down just another
89:59 - shortcut uh okay we don't have a
90:01 - parenthesis here
90:04 - okay yeah I'm making many mistakes
90:07 - today uh so about the animations what we
90:12 - want I want to to to to rotate this this
90:16 - this Cube and to rotate this Cube uh I
90:20 - need to change the position
90:22 - of the cube right so this one
90:26 - here and to change the position we will
90:29 - change uh sorry not the position in this
90:33 - case because we will change the rotation
90:36 - sorry so the position we we
90:40 - moved uh
90:42 - before uh the camera Etc but in this
90:45 - case we need to to change the
90:47 - rotation so Cube Dot
90:53 - rotation
90:55 - okay uh rotation. X in the
91:01 - xaxis equal cube.
91:05 - rotation do X
91:08 - plus uh let's give it like a very uh
91:13 - very slow motion to rotate so it should
91:17 - be okay like
91:20 - 0.01 okay
91:22 - let's do the same for the Y
91:25 - AIS okay I cop it here and let's change
91:29 - only the
91:31 - y y here and Y
91:35 - here
91:37 - okay so this is what we need to rotate
91:42 - the cube in the in
91:44 - the X and in the Y AIS but if we check
91:51 - now
91:53 - we will see that nothing happened
91:56 - uh let's see this
91:59 - error no error but okay we need to call
92:07 - this yeah we need to call this render
92:11 - Loop let's call it only
92:20 - render
92:22 - okay so rotation and render as the see
92:26 - in the
92:28 - camera
92:30 - okay now we are back but again we don't
92:34 - see the the rotation we don't see any
92:38 - change as you can see it's it's it's the
92:41 - same why because we need something
92:44 - else we need something
92:47 - else and I want to explain uh something
92:51 - uh at this point
92:54 - so about the the animations the the
92:57 - animations when we use
93:00 - 3js uh they work like you have uh the
93:05 - idea of the stop motion yeah that's it
93:09 - uh we move the object and then we do a
93:13 - render and then again we move the
93:18 - object something more and we do another
93:22 - render Etc and so on the more we move
93:27 - the objects in the scene between these
93:30 - renders the faster they will appear to
93:34 - move okay yeah it's seems a little bit
93:38 - complicated like explaining it but the
93:42 - idea is the screen we are looking uh
93:46 - runs at a specific frequency okay so we
93:50 - call that uh a frame rate and you have
93:53 - heard about the frame rate I'm sure the
93:57 - frame rate mostly
93:59 - on on the
94:03 - screen but
94:05 - uh it depends on the screen and the
94:09 - computer itself has some limitations
94:12 - okay most screens run at 60 frames per
94:18 - second okay some screens can run much
94:22 - faster you know it depends on the
94:25 - computer some computers are faster some
94:28 - are slower and so on and when the
94:32 - computer has uh these difficulties
94:37 - processing uh things it will run of
94:40 - course more
94:42 - slowly uh in our case uh for the
94:45 - animations we want to execute uh a
94:48 - function this function here the render
94:52 - function that will move these objects
94:56 - and do the render on each frame but
95:00 - regardless of the frame rate so
95:03 - regardless of the frame rate that one
95:05 - computer has it you know regardless of
95:09 - it we want this function to to to do the
95:12 - render on each
95:14 - frame in
95:17 - JavaScript not only 3js but in
95:19 - JavaScript uh the way of doing this is
95:22 - by
95:23 - using uh request animation frame we can
95:27 - search for it
95:31 - together request
95:34 - animation
95:37 - frame okay is from the window
95:41 - object okay this
95:43 - one from MDM window. request animation
95:50 - frame
95:52 - uh the window request animation frame
95:53 - method tells the browser that you wish
95:56 - to perform an animation and request that
95:59 - the browser calls a specified function
96:03 - that we talked about to update an
96:05 - animation before the next repaint the
96:09 - method takes a call back as an argument
96:12 - to be invoked before the
96:16 - repaint okay let's leave for now the
96:18 - documents you have it here you can read
96:21 - it uh more in depth but let's do it
96:25 - because things uh you can understand
96:29 - things only by doing it and by a
96:32 - practical
96:36 - example so let's set this request
96:39 - animation frame that uh we we we saw so
96:44 - request animation frame and we pass here
96:48 - as an argument the function itself the
96:53 - render
96:55 - okay let's let's see
96:58 - now okay you see you see we now have
97:04 - this
97:05 - animation a small one we can change the
97:08 - speed here of
97:10 - course but yes we did it we have this
97:13 - animation thanks to
97:17 - this request animation
97:20 - frame
97:22 - okay and uh this
97:25 - is um it's
97:28 - simple uh here we can refactor a little
97:30 - bit our code instead of
97:34 - this we
97:35 - can you know just a shortcut another
97:40 - shortcut we we like
97:42 - shortcuts you
97:45 - just delete this and add a
97:49 - plus like this
97:52 - is here
97:55 - plus and delete this one it's the same
97:59 - thing okay it's the same thing so it's
98:02 - like saying uh plus equal it's like
98:06 - saying Cube rotation. x equal Cube
98:10 - rotation. X plus uh the number so it's
98:15 - the same thing let's check okay yeah
98:18 - nothing
98:19 - changed it's
98:22 - cleaner so we also made the
98:27 - animation what else we can do now uh I
98:31 - think we can add the movement so we can
98:34 - move this
98:36 - this little guy here our Cube we can
98:39 - move it you know at the controls left
98:43 - right up and
98:45 - down okay it would be cool to to to
98:48 - learn also this
98:51 - let's find a
98:53 - way a place here and uh let's set this
98:59 - one uh
99:02 - control controls okay and here we we
99:07 - also need to to explain some some other
99:10 - things but of course for beginners for
99:14 - those of you you can just keep this
99:16 - Parts those who are Advanced and just
99:19 - are interested in in seeing the final
99:22 - result you know the advanced things
99:25 - about to create the the the art gallery
99:28 - but for the beginners uh stay with
99:32 - me so to add the the controls uh what we
99:36 - what we will do we need to press a key
99:40 - of course uh the
99:42 - errors on our keyboard when we press the
99:47 - left uh Arrow we want to move to to the
99:50 - left left we press the right arrow we
99:53 - want to move to the right or not only
99:56 - the errors but yeah uh in most cases
100:00 - when we play a game we move with a D and
100:03 - W it's the same thing uh for this uh we
100:08 - need an event listener those of you that
100:12 - know JavaScript of course they know what
100:14 - an event listener is uh for those that
100:18 - don't know you maybe should check Google
100:22 - event listeners and learn about it a
100:25 - little bit but we will make things very
100:28 - simple here and even if you don't know
100:31 - you will understand it the moment that I
100:33 - will write it down okay so yeah I think
100:37 - you will understand it just by looking
100:39 - at the code and this is the the thing
100:43 - that we need to to to to always
100:47 - do write a code that it's very
100:52 - readable so let's add this event
100:55 - listener that when we press the keys uh
101:00 - it will listen to to this keys and then
101:03 - we'll make you know an
101:06 - action uh comment controls so in this
101:10 - case uh event
101:15 - listener when the when we press the
101:19 - keys
101:22 - we press the
101:24 - G
101:26 - okay uh we will create
101:30 - also this event listener with a function
101:33 - I will explain it in a bit so
101:38 - document. add event
101:42 - listener
101:44 - okay parenthesis it accepts as you can
101:48 - read
101:49 - here
101:51 - listener document event it will
101:55 - accept the kind of uh event it is a key
102:00 - down okay it is a key down and a
102:05 - function as a second parameter and this
102:09 - function we will create it to make
102:12 - possible you know to register this key
102:16 - press Etc let's call it
102:19 - on key
102:21 - usually when we create this kind of
102:23 - function we we call it on and the name
102:25 - of you know the action or the function
102:28 - that we want to do so on
102:31 - down always C
102:33 - case uh it
102:37 - has it has three
102:39 - parameters
102:42 - so yeah the key down the type key down
102:47 - listener
102:48 - uh also the function and uh options that
102:54 - is a bullan yeah let's leave it false
102:59 - the
103:01 - options okay so we have this event
103:04 - listener Kida let's create this function
103:07 - here on
103:12 - kidal
103:18 - function
103:19 - uh when a key is
103:27 - pressed execute this
103:30 - function
103:34 - okay
103:36 - function
103:38 - an
103:40 - okay a parenthesis it accepts a
103:43 - parameter that is the
103:48 - event if you want to to to to know more
103:53 - in depth about uh event listeners go and
103:57 - check mdn or the other
104:00 - resources so we have an event here as a
104:04 - parameter and this event uh will make us
104:08 - possible to access you know the event
104:11 - which we are triggering in this case our
104:14 - keys when we press the
104:17 - keys for this let's create a
104:21 - because we need to to to get what keys
104:24 - are we pressing how do we know we want
104:27 - to
104:27 - know uh from the code that this Keys
104:33 - have every key has a code in
104:37 - JavaScript okay so let's create a
104:40 - variable first uh key code let's call it
104:43 - key code and this variable key code will
104:49 - be event this one that we are accessing
104:54 - that which what is this this is to make
104:58 - possible to get the codes of each key
105:02 - let's search Google for these codes
105:04 - because I don't know I don't remember I
105:08 - cannot remember
105:10 - so key code
105:15 - tables
105:17 - yeah okay yeah I have clicked before
105:22 - for uh here we have all the key codes so
105:26 - as you as you can see enter is 13 uh
105:31 - shift uh
105:33 - Etc okay we need this one the errors so
105:37 - 37 38
105:39 - 39 and 40 so we need this we want to
105:43 - move the cube or the
105:47 - camera uh left and right so so we need
105:51 - this
105:52 - one these are the codes that
105:55 - uh do the work for
105:59 - us so we saved it in a variable evan.
106:04 - ttch and here we need the ni statement
106:08 - to to make possible to you know to get
106:14 - this the first one the key code which
106:18 - one uh 30 30 30 37 and 39 okay so 37 39
106:26 - the right and the left the right is uh
106:30 - 30
106:33 - 39
106:37 - right
106:39 - arrow
106:42 - okay let's uh make an if statement
106:49 - if key
106:52 - code this one here so if evan. which and
106:57 - this uh gets the code of all the keys
107:02 - okay so if key
107:05 - code
107:06 - equal
107:13 - 37 what's 37 was right
107:16 - [Music]
107:18 - or yeah it was left
107:23 - okay or let's start from the
107:27 - right if key code equal
107:31 - 39 so if the key is the the right arrow
107:37 - what we want to do we want to to to
107:39 - change the position of the cube or we
107:42 - can do another thing we can change the
107:47 - position of the camera we move the
107:49 - camera
107:51 - because when we will have the the player
107:54 - the player when we will enter the
107:56 - gallery inside uh we will not have a
108:00 - cube but actually we will uh like we
108:03 - have
108:05 - a a first
108:07 - person uh player that will enter the
108:11 - gallery and it will move around you know
108:15 - so for that we can use the camera so as
108:19 - a camera we can go like a PO view so we
108:22 - can move
108:24 - around so
108:26 - camera dot translate
108:32 - X
108:36 - okay uh let's move it a bit like
108:43 - uh like it should be positive for the
108:48 - right it should be positive yeah so
108:54 - 0.05
108:57 - okay camera.
109:09 - translate it
109:11 - works it works but as you can see uh I
109:16 - press the right
109:18 - key but it goes
109:20 - it goes to the
109:22 - left uh why
109:25 - because uh it's not the cube that is
109:29 - moving so it's uh the positive number is
109:33 - the right if it was the cube but since
109:36 - we are moving the camera so we move the
109:39 - camera on the right we will see the cube
109:43 - on our left all right there it's logic
109:46 - so that's why so let's change it here
109:49 - negative number so we move the camera in
109:53 - this case on the left and by moving on
109:56 - the left the cube will go to the right
109:59 - or we will look like it moves but
110:03 - actually it's the camera moving not the
110:06 - cube let's let's try it
110:09 - again so press the arrow okay great so
110:13 - we press the right arrow key and it
110:17 - moves nice so the the same thing for the
110:22 - left uh error it was
110:30 - 37 so another uh another if so else
110:38 - if oh why a
110:41 - comment okay let's set comment for left
110:45 - AR
110:47 - key left AR key L
110:51 - if elif in this case elsf key
110:57 - code =
111:01 - 37 again
111:05 - comma uh camera. X because we are always
111:09 - uh on the x
111:12 - axis translate
111:16 - X and this time will be a positive
111:22 - so
111:24 - 0.05 Let's test
111:28 - it press the left we go to the left even
111:33 - though the negative is the left and
111:37 - positive the right but we are moving the
111:39 - camera as we said it is working until
111:41 - now so it's good sign we are having no
111:45 - more
111:46 - errors uh what else uh yeah up and down
111:50 - so the y y axis let's check for the the
111:56 - up
112:00 - arrow is
112:02 - 38 and then the down
112:05 - is uh 40 so 38
112:09 - and uh
112:14 - 40
112:16 - um up right yes up up Arrow
112:21 - key another else
112:25 - if if key
112:29 - code
112:31 - is 30 oh my God I I forgot in in a
112:35 - second and I forgot uh 38
112:43 - okay again
112:47 - camera. Translate not X but Y in this
112:53 - case and the same Movement
112:57 - by
113:01 - 0.05
113:04 - okay
113:07 - and
113:09 - for the down
113:18 - keyy another else
113:22 - if if key
113:25 - code equal 40 if I'm not
113:33 - wrong yes
113:37 - 40
113:39 - camera. Translate
113:42 - Y acccept this time is negative
113:48 - 0.05
113:50 - Let's test
113:52 - it so
113:54 - up okay I press up and it goes down so
113:58 - it's
113:59 - uh it's the other way
114:02 - around so here negative
114:04 - number and here
114:07 - positive
114:09 - okay press up okay goes up press
114:14 - down okay it goes down great it works so
114:18 - for now I think it's it's it's the same
114:21 - thing we can do with rotations yeah as
114:24 - we did uh yeah this is the
114:28 - idea uh I promised you that even if you
114:32 - don't know about uh event listeners you
114:35 - would
114:37 - understand in intuitive way right I hope
114:42 - so so pretty much is this uh we have
114:45 - this function on key
114:47 - down we call this function function in
114:50 - this event
114:52 - listener okay so we get access to this
114:56 - function to this event event. wit this
115:01 - event. wit gets the the code of this
115:04 - keys that we press and we call this
115:08 - function every time there is some
115:11 - trigger every time we like we have a
115:15 - listener there like it's like the name
115:17 - listener we have a listener what we want
115:20 - to listen we want to listen every
115:23 - time uh
115:26 - someone
115:28 - uh presses a key in this case because we
115:31 - are listening to a key down event so we
115:34 - are staying there and looking who is
115:39 - pressing the keys we will catch it okay
115:42 - so you are pressing the keys we are
115:46 - listening to
115:47 - you and every time you the the evant
115:53 - triggers uh we call this function onal
115:56 - when we call this function when we
115:58 - execute this function what we do if the
116:02 - key was 39 we move it to the right if
116:05 - the key was 37 we move it so every time
116:08 - we execute this function this
116:12 - is uh the idea I hope and I think it's
116:18 - easy to understand
116:21 - as I promised at the beginning so as you
116:24 - see until now 3js if you know a bit
116:28 - JavaScript it's not that hard let's say
116:32 - it's very
116:34 - intuitive the the names of the classes
116:38 - the names of the properties are you know
116:41 - are they tell something what they do so
116:45 - you can have an idea when you use
116:50 - those classes functions methods and
116:55 - properties uh I think uh we can stop
116:59 - here uh the
117:03 - [Music]
117:07 - moment so this is the code that
117:11 - we we wrote the last time we don't have
117:16 - much
117:17 - here we only have like a
117:22 - cube uh okay this one we only have this
117:27 - Cube I hide
117:30 - it the
117:32 - HTML
117:34 - here because I wanted to to show the
117:37 - cube last
117:41 - time okay so this is the the
117:45 - interface with this vangog painting
117:51 - some
117:53 - description information about the
117:55 - gallery and that's it for now I will
117:59 - hide it since okay this is an HTML
118:02 - element it's
118:05 - hiding the scene in
118:07 - 3D later we will do it uh dynamically
118:12 - when we click when we start we want to
118:15 - show the the gallery then when we pause
118:19 - or when we press a key we want to return
118:24 - to to the main menu okay like play or
118:29 - false
118:30 - [Music]
118:32 - so let's hide it
118:37 - again go at our main file
118:41 - [Music]
118:42 - so uh I will start with the floor the
118:47 - plane okay so we need the plane the
118:53 - ground and
118:56 - uh we will apply some texter to it to
118:59 - make it look
119:02 - nice and let's see let's see maybe then
119:06 - the walls uh the sailing let's see
119:09 - together so let's find a place where
119:12 - we where to start the new
119:17 - code okay so here we have the controls
119:22 - Keys let's let's start here above the
119:26 - controls keys so wait
119:32 - this okay so let's start with the
119:40 - floor create the
119:42 - floor it will be a plane floor
119:47 - plane come on
119:53 - it's
119:54 - my my co co-pilot it wants to suggest
120:01 - okay uh the floor so to create the floor
120:04 - if you remember in the last video we
120:07 - created the cube and for the cube we
120:10 - created first the the geometry of the
120:14 - cube we created a box geometry here it
120:17 - is so geometry new three box
120:21 - geometry and uh you have the
120:24 - comment here box geometry is the shape
120:27 - of the object then we created the
120:30 - material and the material is the color
120:34 - of the object the look okay then we
120:37 - create a mesh we called it Cube so this
120:42 - mesh accepts two parameters the geometry
120:45 - and the material like it creates this uh
120:51 - new object 3D object that has the
120:55 - geometry and material like merged okay
121:00 - so we will do the same thing with the
121:02 - plane with just small
121:06 - difference so L
121:10 - let uh plane
121:14 - geometry okay I think you remember here
121:18 - what we we should right so new always
121:22 - new for a new instance of the class that
121:26 - we are going to to to take so three uh
121:31 - this time not box geometry but we want
121:34 - the plane
121:38 - geometry intuitive right so
121:42 - Lane G geometry
121:47 - okay and it accepts two parameters we
121:50 - can go to Google and check if you
121:54 - want
121:56 - so 3. plane
122:00 - geometry okay here's the
122:05 - documentation a class for generating
122:07 - plane geometries yeah what we need code
122:11 - example yeah this is what we wanted to
122:14 - do create the geometry first then create
122:16 - the material then the plane that is a
122:20 - mesh that accepts geometry and material
122:23 - okay easy peasy then add this plane to
122:26 - the scene the same as we did with a cube
122:30 - that we have here in the scene okay so
122:34 - yeah we can copy this but we want to do
122:37 - it ourselves it's always good practice
122:43 - to always write down manually not copy
122:47 - past it of course copy pasting is
122:49 - helpful of
122:51 - course we need it sometimes we need to
122:54 - be quick but when we are
122:58 - learning who who for those who are
123:01 - beginners but even for those that has
123:06 - experience they are always learning
123:08 - something new at the point so when you
123:12 - are learn learning something new always
123:15 - write down the code it it creates this
123:19 - habit it then after a while it it it it
123:22 - becomes a second
123:24 - nature okay when you write it by hand by
123:28 - typing because when you make it a habit
123:31 - like to copy paste the code or you know
123:33 - use some kind of just a syntax
123:36 - help uh yeah it's very easy to forget
123:40 - even the most basic things like oh I
123:44 - need a map how to write the map or I
123:46 - need a function how to write the
123:47 - function or how to write the the
123:49 - component in reactor you know for
123:52 - everything it's it's normal it's normal
123:55 - I think it happens to everyone so
123:58 - without much talking let's create this
124:01 - habit of writing
124:03 - down but yeah the idea is this I wanted
124:06 - just to check for the parameters uh what
124:09 - parameters I see there are two
124:11 - parameters here I think it's wide and
124:14 - width and height let's check so width
124:19 - uh height width segments and height
124:23 - segments so it accepts four parameters
124:26 - this two should be
124:28 - optional yes they are optional so the
124:32 - first two that are important the width
124:35 - and the height okay let's do
124:41 - this okay let plane geometry new three
124:44 - plane geometry two parameters we we set
124:47 - so I don't know one was the default
124:51 - one yeah was the default one let's put
124:55 - it 50 for now who cares uh let's leave
124:59 - the optional parameters for the width
125:02 - segments and the height
125:05 - segments uh so in case you forget I will
125:10 - always write down the comments soof
125:15 - box
125:17 - geometry is the
125:20 - shape of the object okay so we have the
125:25 - geometry I think you remember now when
125:28 - you make this Habit to repeat the things
125:32 - again and again and again it will become
125:35 - hopefully a second nature so we need the
125:38 - material now so
125:40 - let uh plain
125:43 - material uh equal new always new every
125:47 - time you create a new object a new
125:50 - geometry
125:51 - material uh you
125:54 - know you will have this keyword new new
125:58 - instance of that class it's a new object
126:02 - uh don't care for now about the object
126:04 - oriented programming what's happening
126:06 - inside that uh you know parent and the
126:12 - classes you know three etc etc that we
126:15 - are instantiating don't care about that
126:18 - just
126:19 - think about a new I want to create a new
126:21 - geometry I want to create a new material
126:24 - and that's it for now at
126:27 - least uh so new three uh material right
126:32 - for material we see here it's mesh basic
126:37 - material okay so this
126:40 - one yeah I said we don't copy okay
126:44 - Mash
126:46 - basic uh okay suggesting yes we accept
126:50 - the
126:51 - suggestions so meas basic material it
126:55 - has uh the parameter an object and
126:58 - inside this object uh we put some
127:03 - properties key
127:05 - values right so open parenthesis and
127:09 - this object inside this object it will
127:13 - accept some
127:15 - properties uh for the material we said
127:17 - that it's the look
127:19 - of the object so the color this the
127:22 - simple color we will learn uh now in
127:26 - this video about
127:29 - uh
127:31 - other uh look of the object so not only
127:35 - the color the simple material but also
127:37 - adding the texture so you know
127:41 - customized
127:43 - uh look so we will give some image that
127:48 - we have
127:50 - etc for now let's create this uh
127:54 - plane that will be the floor of the
127:58 - gallery with a simple color just to to
128:01 - see that object in our scene just to
128:04 - render
128:05 - it so for that I think
128:09 - you you had in mind that we need color
128:13 - and let's give it a color like
128:17 - green
128:20 - okay uh another parameter it's here yeah
128:24 - it's optional but it's side and the
128:28 - side it's double side okay double
128:35 - side I will explain what it
128:39 - is this is to render both sides of the
128:43 - plane so yeah we created uh the geometry
128:48 - and and the plain material
128:50 - right so I want to ask you again I mean
128:55 - ask you you know just stop the video and
128:58 - maybe try to to to do it
129:00 - yourself what what what we need we said
129:04 - before when we create a new new 3D
129:07 - object we create the geometry and the
129:09 - material then in the end stop the video
129:13 - if you want without checking and uh try
129:16 - to
129:17 - remember
129:18 - if you create it that you
129:24 - know that habit so we need the mesh the
129:27 - mesh that we we pass the parameters of
129:31 - material and
129:33 - geometry so for that
129:36 - uh let floor or floor
129:42 - plane okay equal new always
129:46 - new three
129:50 - mesh parenthesis and it
129:54 - accepts
129:56 - the plane
129:58 - geometry and the plane
130:01 - material
130:04 - right plane
130:07 - geometry plane
130:11 - material that's it
130:14 - yeah uh yeah
130:19 - I would like to ask you again do you
130:20 - know what we forgot here what else do we
130:25 - need do we
130:28 - see
130:33 - uh no we don't see
130:38 - anything we forgot to add this floor
130:44 - plane that
130:46 - contains the geometry on the material to
130:48 - the scene for that simply writing
130:53 - scene. open parentheses
130:56 - and floor plane right that's it let's
131:04 - check if we can see anything yes we see
131:07 - it you
131:08 - see it looks like a background really
131:11 - not really of the floor of our
131:16 - Gallery it has
131:19 - nothing to do with the floor but yeah we
131:22 - will we
131:23 - will we will go there we will go there
131:27 - for now it looks like the background we
131:30 - added just a simple material a GRE one
131:35 - okay uh to give it a better
131:41 - look I mentioned before that there are
131:44 - no not only simple materials but we also
131:48 - have the
131:49 - chter okay so for chter we can add let's
131:53 - say
131:55 - something ourselves an image texter that
131:59 - we we have because texter are images
132:04 - that will cover the surface of our
132:08 - geometry okay and uh many many types of
132:13 - these textures can have different
132:16 - effects on the appearance of our
132:20 - geometry so it it is not always a simple
132:25 - material simple color we have like
132:29 - different types of of
132:32 - texures we have uh the color one or
132:36 - albo sign 3D softwares you will see
132:40 - albo the albo text is the the the most
132:45 - simple one it's you know it only chees
132:49 - uh the pixels you know and apply to to
132:53 - to the geometry uh then we have some
132:56 - other types like Alpha I think you also
133:00 - know Alpha part from albo that is the
133:04 - gray scale image and uh you know for the
133:08 - transparency it it it where white will
133:12 - be visible and black will not be visible
133:17 - then we have
133:18 - some more complex cheers uh we have the
133:24 - height
133:25 - Checker the high
133:28 - chter will move the vertices to to to
133:33 - create some some relief uh but yeah I
133:37 - will not stop here at the height we also
133:40 - have the
133:42 - normal uh that is also common
133:45 - used uh the normal cheers we add small
133:49 - details in the texter you know we it
133:53 - won't move the vertices okay but it will
133:57 - create
133:58 - the this feeling of of the light
134:02 - thinking that is is is the face is
134:05 - oriented
134:07 - differently so they are very useful and
134:10 - they are used uh often to add these
134:14 - details and yeah give that look
134:19 - of performance
134:22 - uh 3D
134:24 - object uh yeah we also have some other
134:28 - Checkers that I think you also know or
134:31 - heard or you s somewhere that is the the
134:37 - met the metal the metalness chter you
134:40 - know is
134:42 - that gives that look of uh metallic you
134:47 - know there is also the roughness that
134:52 - again we use it to to to to make the
134:56 - part
134:58 - rough and it's like with white and black
135:02 - the white will will give the part that
135:04 - is rough and the black will make
135:08 - it the part
135:11 - smooth yeah there is much to learn about
135:16 - cheers I invite you to go and check the
135:21 - documentation do your research it's
135:25 - interesting uh but yeah we will not stop
135:29 - here maybe there is to mention the PBR
135:34 - that I want to mention PBR because PBR
135:39 - now is you know it's everywhere in the
135:43 - most advanced uh 3D softwares because
135:46 - now PBR
135:48 - is becoming the standard for very
135:51 - realistic renders so Unity engine which
135:56 - I love my favorite
135:59 - uh tool ever Unreal Engine that is also
136:04 - great uh blender and many other so they
136:10 - they are all using PBR now as a standard
136:15 - you know for realistic render
136:19 - for now let's add a simple Checkers that
136:23 - will be a
136:26 - checker yeah that we find somewhere on
136:30 - Google or you have it I don't know I
136:34 - already have I think the Checker I
136:38 - yes I have the Checker here is this one
136:42 - you know a text her about the the
136:46 - floor
136:48 - uh yeah we want this in our Gallery you
136:51 - have seen the video so you know this you
136:54 - have seen
136:56 - it let's try to add this
136:59 - one how to do it let's
137:02 - see where we left where we left okay
137:06 - create the floor plane we are here so we
137:10 - need to replace this color with a
137:15 - checker not a simple mag material like
137:18 - color maybe above or okay
137:24 - here for the
137:28 - texter uh we need to use another class
137:33 - that is called texter
137:35 - loader this texter
137:39 - loader makes make it possible to to to
137:42 - to load an image that we we have like in
137:46 - this case our our image that we have in
137:48 - this folder
137:50 - here okay so the class is Checker
137:54 - loader we can Google about
137:58 - it we can Google about
138:01 - it
138:03 - 3 texter
138:09 - loader let's check the
138:12 - documentation class for loading a texter
138:16 - this uses the image loader internally
138:19 - okay okay so the syntax is const tter
138:24 - new three Checker loader. load or we can
138:28 - create a variable here for
138:33 - this
138:35 - separated so text loader let or con
138:39 - texter loader this uh new three then
138:44 - texter loader. load you know to have a
138:47 - cleaner code let's let's do
138:50 - it
138:54 - here
138:56 - uh so we we will go we will go
139:00 - for for what I said
139:09 - for
139:11 - texter of the
139:13 - floor
139:16 - okay
139:21 - so
139:22 - let texter
139:27 - loader new
139:30 - three let's check again was
139:34 - it new three checks the loader
139:39 - okay
139:42 - three check the loader was it lower
139:46 - case no it was other
139:50 - case you see this small
139:56 - erors okay now that we have this
139:59 - variable Checker loader we can
140:03 - access uh yeah this do load and add our
140:08 - image right it's just the same thing but
140:11 - yeah we keep it let's say cleaner with
140:15 - variables so text load
140:19 - do load
140:22 - right
140:28 - and check to load that load and we have
140:32 - Checkers and the
140:35 - path of uh of
140:40 - it
140:45 - uh the path is
140:51 - IMG then
140:54 - floor let's
140:58 - try
141:01 - IMG floor.
141:07 - J right should be okay I think
141:14 - so I don't see
141:16 - anything
141:20 - let's see the console
141:25 - look consider using plain buffer
141:28 - geometry for lower memory footprint okay
141:31 - yeah because now three have this buffer
141:35 - geometries maybe I I will explain it
141:38 - later the difference it's the same thing
141:41 - but yeah it was the
141:43 - old use was using you know without
141:46 - buffer now everything is buffer because
141:49 - yeah it it's a better performance for
141:53 - memory
141:55 - Etc
141:57 - with buffer you cannot manipulate you
142:02 - can but it's uh more difficult to
142:06 - manipulate vertices Etc but I won't talk
142:10 - about it
142:12 - now but uh I have nothing I don't see
142:16 - nothing
142:18 - okay yeah we don't have any error I
142:19 - think we can add it to we can yeah I
142:22 - think the that is not an N is just a
142:26 - warning about this plane yeah
142:29 - let's buffer let's see if it
142:33 - is okay it is not anymore there okay
142:36 - guys I was talking about before about
142:41 - the geometry and buffer
142:44 - geometry okay that I mentioned before
142:47 - that I changed here the plane from plane
142:50 - geometry to plane buffer geometry they
142:52 - are the same
142:55 - thing not the same thing but you know we
142:58 - will
142:59 - do the
143:00 - work but they have some difference let's
143:05 - say the difference is that buffer
143:08 - geometry not just
143:11 - geometry is the newer one in the 3js
143:16 - library
143:18 - okay with there is some years that we
143:23 - 3js had this update with buffer geometry
143:26 - and I will explain the difference now
143:27 - and I will explain why this bug that we
143:31 - couldn't see I think I got it
143:34 - why but I will show you you know to have
143:38 - this process thought to
143:42 - to to catch the errors because yeah this
143:46 - is our job to deal with with bugs and
143:51 - errs so what's the difference okay let's
143:53 - see this one I already checked this so I
143:58 - think so the guy here on stock overflow
144:00 - is is asking what is difference between
144:03 - box buffer geometry versus box geometry
144:07 - in
144:07 - 3js the question that we also
144:11 - have so the geometry
144:15 - classes are manipulated
144:19 - friendly memory
144:22 - unfriendly all JS geometry classes okay
144:26 - they are memory unfriendly we we learned
144:31 - that uh this means that each piece of
144:35 - data that defines this geometry is
144:37 - stored as an instance of some classes
144:40 - Vector 3 Vector 2
144:42 - Etc these
144:44 - come with convenience methods so you can
144:48 - dot a Vertex with some other Vector
144:51 - translate vertices modify Etc something
144:56 - that I wanted to do before this project
144:59 - and that's why now I have some problems
145:01 - I will explain better please don't uh
145:04 - get confused I will explain
145:07 - everything but it has overhead in memory
145:10 - and performance creating all these
145:13 - instances and storing them okay so B4
145:18 - 3js has these classes of geometry only
145:23 - geometry not the buffer
145:26 - geometry now now it's been
145:29 - a a while I don't know how how many
145:34 - years but I don't know two or I don't
145:37 - know now everything is replaced replaced
145:41 - not really replaced you can still use
145:45 - this with older version
145:48 - but now 3js has updated to buffer
145:51 - geometry and buffer geometry classes are
145:55 - performance friendly geometry classes
145:58 - that rely on typed arrays to store the
146:03 - data okay in a webgl friendly format so
146:07 - they will use a float 32
146:10 - array
146:12 - okay the guy here explains the
146:15 - difference what this means that vertices
146:18 - instead of being an array of vector
146:20 - three they are typed
146:23 - arrays okay they are typed
146:26 - arrays and they are much more efficient
146:30 - yes sure they are much more efficient
146:31 - but much harder to
146:33 - manipulate something that I wanted to do
146:35 - with vertices I wanted to manipulate and
146:39 - I I had the new classes of buffer
146:42 - geometry
146:44 - I I had no information about this thing
146:47 - that with buffer geometry I couldn't
146:49 - manipulate Vector three and vertices so
146:53 - I was having some problems I didn't have
146:56 - the information you see the difference
146:59 - look at the difference here so I will I
147:02 - was used with
147:04 - this method with the geometry without
147:09 - buffer to get vertex five and have
147:12 - access to its you know this is what you
147:18 - do and this is what you do with buffer
147:23 - geometry you see now the
147:25 - difference okay this is a problem that I
147:28 - had with another
147:30 - project and uh there was a
147:35 - discussion uh by the guys the that
147:39 - created
147:41 - 3js I think it's
147:45 - here yeah the upcoming
147:49 - release has this potentially breaking
147:52 - change the class geometry will been a
147:55 - longer part of the core and yeah it was
147:57 - deprecated in this
148:00 - geometry but as I said since I wanted to
148:03 - to manipulate this vertices with another
148:08 - project I uh uploaded the older version
148:13 - without the buffer so only with geometry
148:16 - so the older
148:18 - three object you know
148:22 - this the older
148:25 - one that has also geometry not only
148:29 - buffer geometry okay because I wanted to
148:32 - to do something else with
148:35 - vertices and yeah uh why so much uh
148:40 - explanation because here I think is the
148:44 - problem since I had this other version
148:47 - to use geometry
148:50 - instead I think this class uh three
148:54 - Checker
148:56 - loader wasn't in the in this let me
149:00 - check something
149:02 - else image
149:05 - yours okay and I have this one this now
149:09 - is deprecated with the new version this
149:14 - three that image youtil
149:17 - was used before this texter loader so
149:20 - you see in the 3js modules the big
149:25 - object in the source code of
149:28 - fjs there is this this class of image
149:33 - UTS and now this is duplicated since I
149:36 - have it here that's why the problem let
149:38 - me try just forget this
149:41 - guys I think I found
149:45 - uh the
149:47 - problem just forget about this don't get
149:51 - confused so instead of instead of where
149:57 - was it Checker the Checker okay
150:02 - here let me try
150:15 - something
150:19 - I want to try something
150:21 - else
150:25 - three image toils
150:29 - okay this is the class that I just
150:33 - showed you not it's not parentheses let
150:35 - me check again
150:38 - please three source
150:42 - code uh you don't have to do this you
150:45 - don't have to dig in the source code of
150:47 - 3js three image
150:54 - TOS okay three IM major deals
150:59 - load
151:01 - texter now we have the the the
151:04 - parenthesis for the path of our
151:08 - image so the path is
151:12 - IMG uh
151:15 - Slash
151:18 - l.jpg
151:20 - okay so new free image yours load
151:26 - texter I want to try this floor texter M
151:30 - floor texter I want to try this let's
151:36 - hope yes
151:40 - AA a Rea we found the bug it was a
151:45 - hidden bug
151:47 - it back but yeah this was the reason
151:50 - guys why I had all that talking before
151:54 - about buffer geometry and you know since
151:57 - I wanted to to create something else I
152:01 - wanted to
152:04 - to to manipulate the vertices Etc you
152:07 - know you you you saw here in the stock
152:09 - overflow the guy that was talking about
152:12 - that is much harder to manipulate it
152:14 - with this buffer geometry you see it is
152:18 - much more performant and memory friendly
152:22 - but it's harder for you know some other
152:27 - manipulation and it's it was easier with
152:29 - geometry that why I
152:32 - changed the I changed this uh source
152:36 - code of three I got
152:38 - this because yeah I could yeah sometimes
152:42 - with
152:43 - three you
152:45 - can play play yourself a
152:49 - bit so now no more talking about this we
152:53 - found this problem you just forget if
152:55 - you are using the
152:58 - new
153:00 - version uh download it from from GitHub
153:04 - if you are using the newer version you
153:06 - should have this one so this class
153:10 - Checker loader so you you can use this
153:15 - code here so I'm leaving it here okay I
153:18 - will add a comment
153:20 - here uh image utils is
153:25 - deprecated in the newer
153:34 - versions of 3js okay I'm leaving it for
153:37 - now because yeah I want it this
153:40 - way I want it this way
153:44 - so it's not a problem in the end so I I
153:47 - I will use this image utils but usually
153:51 - you know you you can use with a newer
153:54 - version Checker loader is the same
153:57 - thing so don't get
154:00 - confused again we
154:02 - have uh this floor that we created the
154:05 - geometry and material in then create the
154:08 - mesh that takes the geometry and
154:11 - materials and create this floor plane
154:17 - but to not have a simple color green
154:20 - that we had before but to have a custom
154:26 - image
154:27 - texter we created this texter that for
154:31 - to create the texture you need to create
154:34 - a new instance of this class texture
154:37 - loader or in my case image TS okay guys
154:43 - I hope it's not confusing
154:47 - I will leave the code like
154:49 - this the good news is that we can see we
154:54 - can see
154:55 - this our text are even though it's
154:58 - blurred and you know we cannot see but
155:02 - we see something that's a good
155:06 - news
155:08 - now let's try to to to modify
155:13 - and correct things
155:16 - with this new Checker and with this new
155:20 - plane that has this
155:24 - Checker okay we have addited in our
155:29 - scene no
155:31 - before here
155:34 - before uh we want to move
155:38 - this floor because you see it's
155:43 - very blurred and
155:47 - it doesn't look good we want like you
155:50 - know in
155:53 - the vertical axis like you know just the
155:56 - ground and we we we see it that
156:01 - way okay let's try to to do
156:05 - that so we need to rotate a bit this
156:08 - this
156:10 - uh this floor and to rotate there are
156:14 - some
156:18 - mathematics but
156:20 - uh don't worry we will not do Advance
156:26 - math we will use uh some internal
156:30 - methods that will do the the calculation
156:34 - for us okay so
156:39 - no advanced
156:42 - math for that to to to rotate the FL
156:46 - Flor floor plane do
156:50 - access
156:52 - rotation rotation do X we want to move
156:56 - it in the x
156:59 - axis
157:04 - oh that x
157:07 - uh I want to try to move it like 90
157:11 - degrees okay and how you do that how you
157:16 - can move 90 degrees you cannot like
157:19 - write 90
157:23 - here to do that we will use
157:29 - the the math.
157:33 - piy
157:35 - internal
157:37 - method okay so math.
157:41 - by divide it by
157:44 - two
157:46 - add the
157:48 - comment uh
157:51 - this is 90°
157:55 - rotation so if you want to to to to
157:58 - rotate something 90° use this formula uh
158:04 - formula math Pi ided by two
158:09 - okay uh let's see if we
158:12 - have we don't see anything now but we
158:16 - don't have any errors
158:20 - right no no errors but we don't see
158:25 - it uh let's
158:27 - uh floor plane do
158:33 - rotation. ya AIS this time and uh to
158:38 - rotate it in the y axis so not the the X
158:43 - but the Y we will rotate
158:47 - it uh
158:50 - 180
158:52 - degrees okay so if you see that divided
158:57 - by two is
158:59 - 90° we can assume that for 180 de it's
159:05 - just
159:06 - math. Pi not divided by two
159:13 - right M that P
159:16 - this
159:18 - is uh
159:25 - 80° we don't see
159:44 - anything
159:46 - yeah I love errors I love when I have
159:49 - errors you
159:53 - know I forgot something
159:56 - here four plane four plane four plane
159:59 - where is four plane okay four plane it's
160:13 - correct okay the problem was the
160:21 - rotation I think I
160:23 - got the the AR where is the problem I
160:27 - think so so FL floor plane rotation
160:31 - X it was correct actually math. Pi
160:35 - that's
160:36 - it I made it's just a
160:40 - small
160:44 - mistake that's why I am not seeing the
160:49 - four so
160:53 - again
160:56 - y
160:57 - math.
160:59 - p okay so this was before and we didn't
161:04 - see
161:05 - anything
161:07 - okay the problem here was just a small
161:11 - detail for the y- axis not rotation but
161:14 - position
161:19 - AA position let's check
161:24 - now okay we see it finally even though
161:28 - it's upside down but we
161:33 - can correct it quickly so since it's
161:37 - upside down let's put a minus
161:40 - sign so
161:44 - minus
161:47 - 180°
161:50 - okay okay
161:52 - finally and that's it
161:56 - AA I finished this part here I had in
162:00 - mind to to continue with the walls but I
162:04 - think for this part I am finishing here
162:09 - okay and that's it we have
162:14 - our
162:17 - floor you see now we miss only the
162:22 - walls the ceiling and then we can
162:26 - modify the shape of this Gallery wide or
162:31 - you
162:31 - know then we can think about uh the
162:36 - paintings and give that
162:39 - very looking
162:42 - good that we have in the video okay
162:47 - that was the
162:49 - problem we couldn't see it because it
162:54 - wasn't
162:56 - I I finish this video now I will try to
163:01 - upload the other parts upload I mean I
163:04 - will make the tutorial and upload I will
163:07 - try to to to do it as soon as possible
163:11 - so you can finish this
163:14 - project so thank you very much for being
163:18 - with
163:18 - me and let's see in the next video
163:24 - [Music]
163:28 - bye and this time we will try to create
163:31 - the gallery
163:32 - walls uh as we did the floor last
163:38 - time uh okay I have opened my visual
163:42 - studio so without wasting time we
163:47 - [Music]
163:49 - can start by creating the
163:53 - walls so here is the code that
163:58 - finishes okay floor
164:04 - plane we created the floor here
164:07 - so
164:10 - below below we
164:12 - can start the code about
164:18 - our so let's add a common
164:22 - create the
164:24 - walls
164:27 - right for the
164:29 - walls uh since we we are going to create
164:33 - more than one wall so we need the front
164:37 - wall of the gallery we need the left
164:40 - wall the right wall and also the back
164:45 - wall and in the end we also need the
164:48 - ceiling we have the floor we also need
164:51 - the
164:51 - ceiling so since we need more than one
164:56 - wall we can create a group of
165:02 - objects uh
165:05 - 3js has this class of group when we want
165:10 - to
165:12 - create a group of objects that
165:15 - we know that they will be in this group
165:18 - you know to manipulate them together or
165:21 - we just want to recognize them you know
165:24 - for like in this example the walls like
165:27 - front wall left wall right wall and back
165:30 - wall there will be in this group so
165:33 - let's start by creating a
165:36 - group of objects
165:40 - okay uh I notice here
165:44 - I
165:45 - I used let and const so maybe we should
165:49 - be consistent and use yeah const for
165:52 - this thing the things
165:55 - that that aren't going to change like
165:58 - these variables for example yeah
166:01 - renderer cameras saying they are not
166:03 - going to change geometry also it is
166:09 - not yeah we can use const here but just
166:13 - to be consistent
166:26 - const
166:32 - cost
166:34 - okay yeah
166:38 - Sal andent
166:42 - light
166:44 - okay
166:51 - so this is our current scene what we
166:55 - what we have
166:58 - you notice that we can move the scene
167:01 - right we are actually moving the camera
167:04 - because at the beginning when we didn't
167:06 - have the
167:07 - floor we had the impression that the
167:11 - cube was
167:13 - moving okay we
167:16 - press the right arrow and the left Arrow
167:22 - the cube goes that way but now that we
167:26 - have the floor we can we don't have this
167:29 - impression anymore so we see that it's
167:32 - the scene moving actually it's the
167:34 - camera moving
167:38 - okay later we will change this and we
167:44 - will move the
167:47 - player the the person that is
167:50 - going to is entering the gallery
167:55 - okay let's go back to our
168:03 - code we are here create the
168:07 - walls make some
168:10 - space so let's create a group of walls
168:17 - const Wall
168:23 - Group
168:27 - equal
168:29 - three.
168:34 - group
168:41 - parenthesis uh leave a comment
168:43 - here
168:46 - create a
168:50 - group to hold the
168:54 - walls
168:57 - okay let's add immediately this group to
169:01 - the scene so we don't forget later so
169:05 - let's add this group to the scene scene.
169:10 - add you already know I hope this by now
169:16 - to add things to to the scene after we
169:18 - create something we add it later to the
169:20 - scene so scene. add Wall Group and this
169:24 - is done now let's start by creating the
169:28 - single walls so let's start with the
169:32 - front wall we enter the gallery we have
169:35 - the floor we will have a front wall in
169:39 - the end
169:41 - okay so comment
169:48 - front
169:53 - wall and
169:55 - again uh what what we'll choose for for
169:59 - the walls we
170:02 - used we use the plane for for the floor
170:05 - the plane
170:07 - geometry you might think that we can
170:10 - also use the plane geometry for for for
170:13 - the walls
170:15 - but we can use a simple box geometry
170:20 - that we already used many times right
170:24 - now
170:26 - so box geometry and also a simple
170:30 - material to give a color to it just to
170:32 - recognize in the scene the the wall okay
170:36 - we will create this box geometry but you
170:38 - would think that the Box geometry will
170:40 - be like you know like a box we need the
170:43 - wall but yeah but we will create the box
170:47 - with the width and with height but you
170:50 - know on
170:52 - the on the Z axis we will make it like
170:56 - thin thin very thin okay so it will be a
171:02 - wall am
171:04 - I explaining
171:07 - myself
171:10 - so
171:12 - const front wall
171:17 - equal new always new keyword to create
171:22 - something new
171:25 - three uh we can create like we did the
171:28 - last times we create a variable for the
171:33 - geometry we create a variable for the
171:36 - material and then we create a variable
171:40 - for the 3D object that is a mesh
171:45 - geometry that has inside the variables
171:50 - of geometry and material or we can use
171:54 - it in
171:57 - a code
172:01 - block so we can use a single code block
172:05 - to like this just to to to make things
172:09 - different so you you get used to to it
172:12 - to this idea you can use it like up
172:15 - above with creating a variable for the
172:18 - geometry creating a variable for
172:20 - material and another variable for the
172:22 - mesh that
172:23 - contains geometry and material
172:26 - or directly create the mesh having
172:30 - inside the
172:32 - parameters okay and with a
172:35 - main variable like this
172:38 - directly let's see it in action so front
172:42 - wall new 3. mesh
172:45 - okay
172:46 - parenthesis now let's create the
172:48 - geometry and the material so
172:52 - new
172:55 - three. box
172:57 - geometry okay open parenthesis and the
173:01 - parameters are the the three parameters
173:05 - for X for y and for Z the you know width
173:09 - height and depth and you
173:12 - know so
173:15 - let's give it like
173:17 - uh
173:20 - 50
173:22 - 20 and yeah we want this thin very
173:27 - thin we just want to to to have it you
173:31 - know the width and the height but thin
173:35 - not like a box so
173:40 - 0.01 or
173:43 - 001 let let's see
173:47 - it
173:50 - okay comma and now we will add the
173:53 - material you see they are in a single
173:57 - block of code not by creating three
174:00 - variables you can use it either one
174:03 - or how you prefer but I want to show you
174:06 - you know to get used to
174:08 - it
174:10 - new 3. MH basic mat
174:16 - iial uh parenthesis and this accepts an
174:21 - object with some properties that we can
174:25 - add so object inside this object we have
174:29 - the key value of
174:32 - [Music]
174:34 - color green red blue okay
174:37 - so the property of
174:41 - color and the value of uh
174:46 - let's make uh each wall a different
174:50 - color so we can separate and recognize
174:55 - that because if you if we make like red
174:57 - red red you know we don't see
175:01 - the the borders you know so let's make
175:05 - every each wall different color let's
175:08 - start by
175:12 - Green okay
175:16 - and we created the
175:18 - mesh of the front
175:22 - wall do you remember what we
175:26 - need after we create the geometry and
175:29 - the material and the MCH containing this
175:32 - geometry and
175:34 - material uh I think you you remember it
175:38 - we always need to to add
175:42 - this to to our scene okay do not forget
175:46 - because if not you will not see it in
175:50 - the scene but also we need to to
175:52 - position somehow this wall because we
175:54 - want to see it you know but
175:58 - first first uh let's try
176:04 - to add to the scene so to add to the
176:06 - scene we will not use scene that at in
176:09 - this case since okay you see
176:12 - here we already
176:15 - added this wall group to the scene okay
176:19 - so the group containing these
176:23 - child okay these
176:26 - walls will be added to the scene since
176:29 - we added the group
176:32 - there okay so if we say for example W
176:38 - group. add and we add here the front
176:42 - wall then we will have the left wall
176:46 - right wall etc etc so since we are
176:50 - adding this front wall to the group Wall
176:53 - Group here it will
176:57 - be automatically add the to the SC since
177:00 - we added to the scene the Wall Group I
177:04 - hope I am explaining
177:07 - myself uh yeah we can we can try and
177:10 - experiment
177:13 - live
177:15 - okay let's see what's the
177:17 - [Music]
177:19 - error 3D object. add object not an
177:23 - instance of three objects 3D
177:28 - undefined okay
177:31 - okay let's
177:36 - check so Wall Group
177:39 - 3. group uh first of all we created this
177:43 - this this group okay and seeing that add
177:48 - Wall Group we added uh the Wall Group to
177:52 - the
177:53 - same we are okay
177:57 - here
178:01 - then then we want to add this front
178:04 - wall to the Wall
178:07 - Group okay so wall group. add front
178:12 - wall and is this one
178:18 - here
178:27 - okay uh I forgot the keyword new that's
178:31 - why it's not an instance
178:33 - of okay forget it so it should work
178:38 - now
178:42 - yes okay okay so we have the front
178:45 - wall but we have it you know to Too
178:51 - Close
178:53 - and but we have
178:56 - it so we are
178:59 - there uh very easy very easy now we can
179:04 - change the position
179:06 - [Music]
179:07 - you I hope you know by now to to change
179:11 - the position and have clear this idea to
179:16 - to change the the position in different
179:19 - axis on the x axis y AIS and Z
179:25 - AIS so in this case the front wall it's
179:29 - in front of us okay so if we move the
179:33 - position in the X AIS it will be still
179:37 - there to close but just moving left and
179:41 - right if we move it on the y axis we
179:45 - will move it up and down so what we need
179:49 - in this case with the front wall is just
179:53 - push
179:55 - it and you know give it some space we
179:59 - want to push it forward and that is the
180:04 - Z axis okay so the depth we want to push
180:09 - it forward so let's change the position
180:13 - on the Z axis because I think the left
180:17 - and right so the X and the
180:20 - Y let be on the Zero you know this the
180:23 - by default we are not going to change it
180:26 - we just need to change the Z axis let's
180:32 - try so here front
180:36 - wall that
180:39 - position Z we said and give it a value
180:46 - of so as you know for the x
180:52 - axis uh positive number is right side
180:57 - negative number is the left side okay
181:01 - zero is the center so if we give a value
181:04 - of positive number uh the object will
181:09 - move will translate the position to the
181:13 - right if we give it a value of negative
181:16 - number we will move
181:18 - it to to the
181:21 - left so the same with Y and the same
181:25 - with Z in this case if we give a
181:28 - positive number we will have it to close
181:33 - so in this case let's try with a
181:36 - negative
181:37 - number
181:39 - okay and the negative number of uh I
181:44 - don't
181:45 - know 10 let's try
181:52 - it okay 10 looks looks
181:56 - great because maybe I think we gave
182:02 - the of the floor we give the same value
182:05 - of 20 as the height or you know whatever
182:10 - 20 20 is is uh
182:15 - looks looks okay so we have
182:19 - this front wall of the
182:22 - Galler of course we can change the
182:27 - values for the width it looks
182:31 - perfect for the width it looks okay we
182:36 - will match it uh with the width of the
182:39 - floor we will check but I think it's
182:42 - 5050 because I I remember that the floor
182:46 - was
182:47 - uh
182:51 - 50 as the value so
182:54 - also this wall here is 50 and it it
183:01 - matches uh for the Y it looks okay maybe
183:05 - higher I don't know but it looks okay
183:09 - for
183:11 - now higher will be to much maybe I don't
183:14 - know we can always
183:16 - turn turn back
183:19 - later let's leave it like this we added
183:23 - the front
183:24 - wall let's start with the other wall the
183:27 - other
183:28 - wall
183:30 - yeah the left
183:37 - wall left
183:42 - wall so
183:44 - again like with this method above create
183:47 - a mesh that has inside geometry and
183:51 - material or
183:53 - create separate variables for the
183:57 - geometry separate variable for the
184:00 - material and then the variable of mesh
184:04 - containing this as you prefer I'm trying
184:08 - to do things differently so you get used
184:12 - to to like the
184:16 - idea so
184:18 - const uh variable left
184:22 - wall and this variable will have this
184:26 - instance of the class
184:30 - mesh from
184:33 - three this is uppercase three is always
184:38 - uppercase three do mesh parenthesis
184:42 - accepting two parameters
184:43 - the geometry don't forget the keyword
184:46 - new as I had the problem
184:49 - before when you instantiate a
184:52 - new instance
184:55 - you you you you need the keyword new
184:59 - because you know from object oriented
185:01 - programming for example this mesh class
185:04 - uh in
185:05 - [Music]
185:07 - the you know in the back scene would
185:11 - have a con Constructor with some
185:15 - properties you know we get some
185:18 - properties from this class okay but they
185:23 - these properties of the Constructor are
185:26 - Dynamic so they have a
185:30 - [Music]
185:31 - key that we can give a dynamic value to
185:34 - it for example so the mesh has some
185:37 - properties defined there and we can just
185:41 - give new values every time time we
185:43 - create a new instance of it so for
185:46 - example this mesh class would I think
185:51 - would have a Constructor normally it has
185:53 - a Constructor with some properties
185:55 - defined
185:57 - there
185:59 - uh we can give to these variables these
186:03 - properties uh Dynamic values every time
186:06 - we create a new instance so that's why
186:09 - knew this and knew that okay we just
186:12 - create
186:14 - a new instance of this mesh
186:17 - class that was defined there with its
186:20 - properties okay but every time we create
186:24 - a different instance with different
186:26 - variables we get a new one a dynamic
186:29 - value for these
186:31 - properties okay without confusing anyone
186:36 - let's continue with new uh yeah the
186:41 - geometry right yeah geometry new
186:44 - three uh do box geometry again
186:49 - parenthesis uh let's give this value
186:52 - again
186:54 - for front and from from
186:58 - left let's try it with the same values
187:01 - the same width and the height and the Z
187:06 - axis so 50 20 and
187:12 - 0.1
187:15 - comma don't forget comma here and the
187:18 - next parameter which is the material
187:23 - new
187:25 - three do mesh basic material it's the
187:31 - simple
187:33 - material
187:35 - parenthesis it accepts an object inside
187:39 - and inside this object we can put some
187:43 - key
187:45 - value like color red color green Etc we
187:49 - have green the front wall let's give it
187:54 - another color so red
187:57 - color
188:00 - red okay and now after creating this uh
188:06 - I think you you know by now we need to
188:10 - add to the scene so left wall add to the
188:15 - C and it should be okay okay we need to
188:19 - position it but let's see
188:23 - first yes we have
188:25 - this
188:27 - left
188:30 - wall but as you can see here and as you
188:34 - can imagine as with the front wall it is
188:39 - again in front of us with front wall we
188:44 - did nothing but just pushed it forward
188:48 - in the Z axis okay but what we can do
188:53 - for the left wall because the left wall
188:56 - we need it like this you know like in a
189:00 - vertical axis so we need to rotate this
189:04 - this wall from here we need to rotate it
189:06 - like
189:08 - this okay so like
189:11 - this so we need to manipulate the
189:16 - rotation in this
189:19 - case uh not the position we need to just
189:23 - manipulate the the rotation of course
189:26 - the position also we we we will give
189:29 - that value but most important here is
189:31 - the rotation so from here here is like n
189:36 - sorry it's 180 80 degrees
189:39 - okay so no
189:43 - yeah from here here we need to move it
189:48 - no sorry it's 90 degrees actually yeah
189:51 - here it's 90 degrees because 180 deges
189:54 - will be like the floor turning again
189:57 - okay so it's
190:00 - half half this the the the sphere so we
190:04 - we need just 90° in this case and 90° if
190:08 - you remember the the last tutorial for
190:12 - for the 90° we can uh we can
190:17 - use math. Pi ided by two formula
190:23 - okay when we want
190:27 - 180° we use math.
190:32 - Pi
190:34 - 90° is math. pi divided by 2 so
190:38 - 180 ided by two let's try
190:41 - that
190:48 - okay here left
190:51 - wall left wall do
190:56 - uh
191:00 - rotation
191:01 - [Music]
191:05 - rotation okay so
191:10 - rotation in the Y AIS
191:17 - right's
191:19 - try so math. Pi Pi is uh
191:28 - uppercase uh divided by
191:34 - two this is
191:40 - 90° let's see what happen what's
191:43 - happening we cannot see it okay because
191:46 - we we we rotate it but we cannot see it
191:48 - it's not in the scene we rotated in the
191:51 - y axis it's not in the scene let's move
191:54 - it let's move it
191:57 - uh let's move it in the xaxis I think we
192:01 - cannot see it because let's move it in
192:03 - the x-axis don't
192:06 - don't don't get discouraged guys we will
192:09 - get
192:11 - there so let's move it in the x axis
192:16 - okay left
192:18 - wall.
192:19 - x.
192:24 - position position.
192:27 - x equal uh in this
192:30 - case if we said the positive number is
192:35 - the right and negative number is
192:39 - minus okay so negative is left positive
192:42 - is right so we have the left wall
192:46 - negative negative negative again
192:49 - negative
192:50 - 20 let's see what's
192:54 - happening oh
192:56 - error
192:58 - okay cannot read properties of undefined
193:01 - reading position when you see an error
193:04 - like this usually it's
193:06 - like the property that has this
193:10 - position doesn't exist or there is some
193:14 - problem there is some error with it okay
193:17 - so we cannot read the properties of
193:20 - undefined so position is a property of
193:24 - this undefined what is this
193:28 - undefined this undefined is X of course
193:33 - because you see position of undefined
193:36 - undefined here is the x that I don't
193:39 - know why I wrote
193:40 - that it's left wall. position. X not
193:44 - left wall. x. position. X okay but yeah
193:47 - you you should get used to understand
193:51 - the errors what they mean really you get
193:54 - used to it when you get often bugs and
193:56 - errors like me I I get a lot as you can
193:59 - see I make mistakes but I hope that I
194:02 - also learn from them but you should get
194:06 - used to the meaning of this errors it's
194:09 - like those very important things
194:13 - in programming
194:15 - and for
194:18 - developers yeah it has some meaning so
194:21 - it was undefined yeah we see the wall
194:24 - and it's perfectly fitted
194:27 - we okay that's
194:32 - great that's
194:34 - great you see we also have the left wall
194:39 - and this property here was perfectly
194:43 - I just want to try not math that uh pi
194:47 - divided by two
194:50 - but 180 degrees and you see as I said
194:56 - one math.
194:59 - Pi like make a
195:03 - rotation
195:06 - 180° okay so it will turn again from the
195:09 - other
195:10 - part okay like back in this case we need
195:14 - just a 90° from
195:17 - here here
195:21 - 90° okay it's like
195:25 - this I think you have this clear but you
195:29 - can always play you
195:31 - know if you have problems in other
195:35 - projects so divide it by
195:39 - two and the position was the the
195:44 - because if we try this not negative but
195:47 - positive you will see it now at the
195:50 - right the same thing that we will do
195:52 - with the next wall so okay you see it's
195:56 - on the right
195:57 - side but since we named this uh left
196:01 - wall we need it with negative number now
196:04 - we can easy peasy create the right wall
196:08 - because it's the same thing here we can
196:11 - just copy it but we said that we don't
196:14 - copy we manually type because we want to
196:18 - create this practice and
196:21 - habit so it becomes with practice second
196:24 - nature to to not forget how
196:28 - we write code call things functions
196:32 - methods Etc
196:35 - properties left wall now comment right
196:40 - wall and con
196:44 - again right
196:50 - wall equal new
196:54 - instance three main
196:58 - object mesh class parentheses and mesh
197:04 - class has these options that we get from
197:08 - it ready
197:11 - made
197:13 - it's properties that we give a dynamic
197:15 - value every time we create one we we we
197:18 - can give another value different value
197:22 - so the first one is the parameter for
197:26 - the
197:27 - geometry so box
197:32 - geometry uh new oh new okay you see this
197:37 - small errors but they can create a bu
197:41 - three. point
197:42 - geometry all the geometries are are
197:48 - always from the main object three okay
197:52 - so three is the main
197:56 - object I will I will show you
197:59 - here this is the source code of
198:03 - three you see there are how many
198:10 - lines okay we have like more
198:15 - than 355,000
198:18 - lines okay full of this
198:22 - classes methods Etc so VAR three this is
198:28 - the main
198:31 - object and then inside this object we
198:35 - create
198:36 - classes with Constructors with some
198:39 - properties that we have defined there
198:42 - that we can give new values every time
198:45 - we instantiate and create
198:47 - new instance of this
198:50 - classes and this uh classes may also
198:54 - have methods that aren't anything else
198:59 - that simple functions so methods are
199:03 - functions declared inside an object and
199:06 - we access them we access them like mesh
199:10 - dot. function so it is called the
199:14 - method and yeah you know three is the
199:16 - main object here that has inside all
199:18 - these classes like
199:20 - mesh that has these parameters that we
199:25 - can pass
199:28 - geometry uh value again 50
199:33 - 20 and uh
199:39 - 0.001 comma don't forget
199:42 - and
199:44 - new uh three again mesh basic
199:49 - material parenthesis it has an object
199:53 - inside this object has some properties
199:56 - like
199:57 - color with value uh yellow this time we
200:02 - want
200:04 - to differentiate those
200:07 - colors yellow good so this one is easy
200:12 - peasy because it's the same with the
200:13 - left wall so but we don't
200:20 - copy left wall. rotation again the same
200:24 - thing
200:26 - oops
200:28 - rotation Y is it y or yes
200:31 - y math. Pi
200:36 - formula to rotate we will always use
200:40 - this formula oh my God this word is so
200:43 - difficult for
200:45 - me we we will always use this formula
200:48 - for rotation 90° or
200:53 - 180° 180 Dees is math. pi 90° is math.
200:58 - pi divided by
200:59 - two we want this 90° so math. pi divided
201:03 - by
201:04 - two and again I will leave a comment
201:07 - every time so it will stick in your
201:09 - mind this is 90°
201:15 - I want to make it stick in your mind and
201:18 - position left w.
201:22 - position
201:24 - uhx equal not minus 20 but 20 positive
201:29 - number positive is
201:32 - right and what else here guys yes you
201:36 - know we add it to the
201:39 - scene and we don't do scene. add we do
201:44 - WG group. add because Wall Group is
201:46 - already on the scene so we we just need
201:50 - to add the Wall Group on the scene and
201:53 - the Wall Group will add everything that
201:55 - has inside as parameters pass
201:58 - here right wall and we don't have any
202:02 - more
202:04 - errors
202:07 - no okay we have again the wall but I
202:11 - changed the position position
202:16 - why um
202:20 - rotation y
202:23 - ma ided by
202:27 - two and position is 20 then
202:34 - why what this happening
202:40 - here do
202:44 - 20 are
203:09 - okay where wall
203:12 - right wall Warrior you are on the
203:16 - front what am I missing here guys I
203:20 - think
203:21 - you you
203:22 - [Music]
203:23 - are quicker than me to find the arrows
203:27 - I'm
203:29 - sure left that position that
203:36 - Tak oh my
203:39 - God okay
203:42 - okay I you you I I
203:45 - am
203:48 - completely sure that you of course you
203:52 - you saw this this this stupid error from
203:55 - me right I wrote here I changed again
203:59 - the position of the left wall the same
204:02 - thing I did here it's the right
204:07 - wall
204:10 - right
204:13 - that's why but yeah we learn from the
204:18 - errors let's check okay good we see
204:23 - it we have different colors you know we
204:27 - will in the end we will give White Walls
204:29 - to this but if I make it white we we
204:34 - cannot see the difference because also
204:35 - the background is
204:37 - white and we cannot see we just see just
204:42 - a big
204:45 - white well okay looks looks good until
204:49 - now so what's left it's just the sailing
204:54 - right we just need the sailing
204:58 - now let's set the
205:03 - sailing
205:05 - right and the sailing for the
205:10 - sailing
205:11 - [Music]
205:13 - uh do we need to create for the
205:17 - sailing in the same group here that we
205:20 - have this guys here the walls no because
205:26 - the sailing will
205:27 - be separated from this as it is
205:30 - separated the floor the floor was a
205:33 - plane
205:34 - geometry right so it was not in this
205:38 - group of walls so also for the sailing
205:41 - we will create a separate 3D object okay
205:48 - and not a box geometry but this time
205:51 - again like with with the floor we we
205:55 - will create a plain
205:59 - geometry So Below
206:08 - this okay sailing
206:15 - so again the old method we create a
206:19 - variable for the geometry we create a
206:21 - variable from for the
206:24 - material and then we create a variable
206:27 - for the mesh that contains this final
206:32 - object okay or you can use again mesh
206:36 - inside let's keep things different so
206:39 - you get used to it
206:43 - once you get used to the idea how it
206:46 - works behind the scene you have it
206:50 - easier to to develop
206:53 - things so again with the old method with
206:57 - variables so con uh the
207:00 - geometry
207:02 - sailing
207:05 - geometry equal
207:08 - new three
207:13 - that uh this time plain
207:15 - geometry and plain buffer as we said
207:18 - buffer has is memory friendly so has
207:23 - better performance
207:25 - uh is better for the memory and you know
207:28 - it's the new new
207:32 - 3js new plane buffer
207:36 - geometry uh we had 50 here for the width
207:42 - 50 for the
207:45 - width so the sailing will have also 50
207:49 - for the whe
207:51 - but yeah
207:53 - also 50 for the y axis let's do it
207:59 - 5050
208:03 - 5050 okay I will I will not get
208:08 - charred on writing comments I I will
208:11 - repeat the same comment every time we
208:14 - create a geometry every time we create a
208:16 - material it will stick to you I'm
208:20 - always uh referring to beginners guys so
208:24 - if you are someone who has
208:26 - experience uh don't laugh at me that I
208:29 - repeat these things again or don't get
208:33 - bored because okay I know that maybe you
208:37 - are uh good developer you don't need
208:40 - these things to
208:41 - to be repeated 100 times but uh actually
208:47 - I'm refering to beginners because yeah
208:51 - this tutorial was let's say for
208:54 - beginners not only but yeah so bear with
208:59 - me some passions when I repeat things so
209:05 - box geraty is the shape of the the
209:10 - object
209:13 - now let's create the
209:17 - material
209:20 - sink
209:23 - material new three object main object
209:29 - and mesh basic material
209:34 - class uh for material for uh the sailing
209:39 - we used the red green
209:44 - and yellow red green
209:47 - yellow let's use
209:50 - blue for the
209:52 - ceiling so do you remember inside the
209:57 - mesh basic material we have an object
210:01 - and then we have this properties of
210:03 - color
210:08 - or blue Double D dou do
210:16 - okay we created the
210:21 - sailing what
210:23 - else we didn't create the sailing
210:26 - because to create the
210:27 - sailing you create it with a
210:31 - mesh so const
210:37 - saling
210:38 - linke equal new
210:42 - three main
210:44 - object mesh
210:47 - class and uh pass here sailing
210:53 - geometry and sailing
210:57 - material okay now we created the
211:00 - sing but we cannot see
211:04 - it of course we cannot see it because we
211:08 - should add it to the scene as we always
211:13 - do so seeing that
211:18 - that uh what's the
211:21 - name sailing
211:27 - plane okay now we should see it but
211:32 - again we need to position this sailing
211:35 - because yeah I think we will see it
211:37 - again in front of us yes we see it again
211:40 - in front of us so yeah it's another
211:45 - object that we see in front of us
211:47 - because we need to position it so for
211:50 - the
211:52 - other
211:54 - geometries we
211:57 - rotate
211:58 - 90° like this or 90° like this so 90°
212:05 - and then position it to the Y axis minus
212:08 - 20
212:09 - or positive
212:12 - 20 this time we need to rotate it up
212:17 - above so we need the sailing like like
212:19 - this rotate like this so can you guess
212:25 - how how we can do it want to try it
212:27 - yourself
212:29 - maybe okay how we want to to to to to
212:35 - rotate this on the Y
212:39 - AIS uh not not in the y axis because in
212:42 - the Y AIS we did with
212:48 - the with the
212:50 - walls so it should be in the x-axis
212:54 - let's try let's
212:56 - try I hope I'm not wrong on the x
213:01 - axis but yeah let's try let's
213:07 - try so ciling plan uh rotation mod
213:13 - by ceiling
213:16 - plane do
213:18 - rotation that let's want to try y maybe
213:22 - first I think it's X but well let's try
213:26 - how we see it with with with Y
213:30 - AIS uh sailing plan rotation. y math.
213:36 - Pi Pi is always
213:39 - uppercase divided by two
214:03 - 90° this
214:05 - blue hurts the
214:09 - eyes that by oh
214:14 - oh I was seeing that is like a bit
214:17 - rotated and I was wondering why uh you
214:20 - see but uh yeah
214:24 - I divide it by two not by
214:29 - 90 we cannot see it
214:33 - because it's not uh there inside the the
214:38 - scene Let's uh move it a bit in the y y
214:44 - AIS so we see
214:49 - it sailing plane.
214:53 - position. x
214:56 - uh let's try
215:01 - 20 we cannot see
215:07 - anything
215:09 - 50
215:11 - we cannot see
215:12 - anything
215:15 - 20 10 we cannot see
215:19 - anything
215:21 - so we rotated it in the
215:24 - y
215:26 - axis so let's try x
215:32 - axis so 90 Dees in the x
215:37 - axis again we cannot see anything
215:46 - 15 I cannot see
215:51 - anything
215:53 - Rotation byid by two oh we have
215:58 - x x you see the RO the rotation will be
216:06 - y not where around so the rotation will
216:10 - be Y
216:13 - [Music]
216:15 - and no not y y was for the walls the
216:21 - rotation should be X and the position
216:25 - should be
216:30 - y okay we see
216:35 - it we should move it uh
216:38 - down so in the Y
216:44 - axis
216:46 - so
216:48 - 40
216:50 - no
216:53 - 13
216:56 - no
217:00 - 12 okay
217:02 - fit
217:05 - perfect we also have the
217:08 - sailing we complete this looks
217:13 - nice
217:15 - yeah but one thing I want to
217:18 - do I want to do something because uh
217:22 - later when we will will create the
217:26 - player and the player will go around the
217:32 - gallery when we
217:34 - go near the wall we want to have a
217:38 - collision we cannot pass through the the
217:40 - wall okay we cannot break them through
217:43 - to the other side we want to have a
217:46 - collision and stop there because we are
217:49 - not ghost we cannot
217:51 - go uh through through through the walls
217:55 - so for that we will add the collision
217:59 - and to to add the
218:01 - Collision uh there are some ways and
218:05 - they are different
218:08 - from program to program from 3js or
218:11 - Unity or in real but the idea is to add
218:14 - the
218:15 - collider the collider is you know like
218:19 - uh bounding box that it's the
218:24 - same as the object that we want to add
218:28 - that collider okay so when we go near
218:32 - that object we collide with this box
218:37 - collider and so we will stop there
218:42 - by adding some other coat okay but the
218:45 - idea is to add this
218:48 - collider so later when we will create
218:51 - the player and the controls to
218:54 - move right and
218:57 - left we want to to stop when
218:59 - [Music]
219:01 - we go near the walls so for the walls
219:06 - here to create this bounding box first
219:09 - of all let's loop loop through through
219:12 - this walls because we want to add to
219:15 - each wall this bounding box
219:19 - okay so here let's
219:23 - Loop through each
219:31 - wall and create the bounding
219:39 - box
219:46 - okay so a for
219:53 - Loop uh array. length it will be not
219:57 - array. length but it will be W
220:00 - group W group. children. length so the W
220:06 - group that we have that has the children
220:09 - that are all the walls left right and
220:12 - the
220:14 - front so Wall
220:20 - Group do
220:24 - children length
220:34 - Okay so we are looping through through
220:38 - this walls
220:42 - and to add the bounding
220:44 - box we
220:46 - access this B
220:50 - box B box 3G that is
220:55 - okay so equal so w group children I that
221:01 - is the element each element that b box
221:07 - equal
221:09 - new
221:13 - three boox
221:18 - 3 okay this
221:22 - creates
221:26 - this again we need W
221:31 - group.
221:35 - children I
221:38 - element we will will use another method
221:45 - here we will use another method here
221:48 - that is called set from
221:59 - object and this set from
222:02 - object will pass this W
222:07 - group.
222:08 - children I
222:15 - let's switch
222:38 - this
222:51 - yeah this set prom object is to compute
222:53 - the bounding box of the children
222:59 - inside including it children so so to
223:02 - create the bounding box not of only one
223:06 - object like with B box three but when we
223:10 - have a group of objects we want to
223:13 - create a bounding box for each of the
223:17 - children in this group of objects for
223:21 - this we use this method set from object
223:26 - okay that's
223:30 - it and here it is we also have this
223:33 - bounding
223:35 - box for now we leave it
223:38 - here because we we will have to do with
223:41 - it later when we will collide the player
223:45 - with this walls but yeah this is for
223:49 - now we can finish this tutorial and see
223:53 - in the next one when we we add the
223:57 - paintings and yeah we will modify our
224:00 - scene make it look
224:03 - better okay see you in the next video
224:07 - and thank you for being with me
224:09 - [Music]
224:14 - uh the main
224:16 - changes uh before we we we we begin
224:21 - where we left uh is that I updated
224:25 - 3js uh with the latest
224:28 - release okay so now we have the latest
224:32 - release of
224:35 - 3js which is a good thing we always want
224:38 - to have the newest updates from
224:43 - 3js also I added a build tool which is
224:49 - uh V or vit I don't know
224:52 - how it's spelled but
224:56 - it's lighting fast you know if you know
225:01 - Vite Vite is a build tool and it's uh
225:05 - lighting fast to build uh the server to
225:09 - run our project so we don't have to you
225:12 - know go live here with the option or
225:15 - have the three file downloaded and uh
225:20 - have it here on our local as we we we
225:23 - had it
225:25 - before uh we will download three from
225:29 - mpm as a package I'll show you so search
225:34 - on
225:35 - Google uh 3js
225:38 - installation
225:46 - click on
225:48 - it as you can
225:51 - see uh here it says that we need the
225:54 - projects structure and first of all we
225:58 - need an HTML file which we we already
226:03 - have main JS file which again we we
226:08 - have uh then we can
226:12 - import uh import uh Star as three from
226:16 - three so import everything as three from
226:20 - the three
226:22 - package uh we also May create a public
226:26 - folder which is also sometimes called uh
226:32 - static uh here we have like all the
226:34 - files like the media files uh the 3D
226:37 - models uh assets
226:40 - uh and
226:43 - everything um then you need to to to run
226:48 - this commands so install three with mpm
226:52 - so mpm install D- save three it's to
226:56 - save this uh in the package Json
227:00 - dependencies uh and also for Vite or VD
227:04 - npm install uh
227:06 - VD
227:07 - run this command
227:10 - okay I already have
227:12 - it that's why I'm not running it now
227:16 - but you can find it on documentation and
227:20 - run this after
227:22 - installing
227:24 - mpm install three and V you will see you
227:29 - will have the a package
227:33 - Json okay and in this packet Json uh you
227:37 - will have
227:38 - this
227:40 - section here dependencies and Dev
227:42 - dependencies where you will see the
227:44 - version of three which is the latest one
227:48 - okay and also for
227:50 - V if you have any problem you can simply
227:55 - go uh on my GitHub check the link in the
228:01 - description uh copy this file package
228:05 - Json or download the whole project but
228:07 - if you want to follow along just copy
228:10 - this package Json edit it here in the
228:14 - root at the root level
228:17 - okay and then you can simply run mpm I
228:23 - mpm install and it will install the
228:25 - dependencies that I have here in the
228:29 - package as if you have any
228:32 - problem now we will start the features
228:36 - that we want to add this
228:38 - time uh if you remember we left it the
228:42 - last time we
228:45 - created the floor the four walls the
228:50 - ceiling and then we said that we want to
228:53 - create the paintings on the
228:56 - wall and also the camera movement like a
229:01 - user enters the gallery and moves around
229:06 - in an immersive uh experience way
229:11 - with a camera movement we will do
229:14 - that and also have the menu like we
229:19 - click the start the play button you
229:23 - know and then we can
229:27 - pause we'll see we'll see
229:30 - together first of all uh what what we
229:34 - would
229:35 - need first we need to import for the
229:38 - movement
229:40 - let's go to main JS oh also I forgot I
229:43 - also I I changed the structure of the
229:46 - folder now you see the not modules of
229:49 - course because we installed three
229:53 - invite so you will see not
229:55 - modules uh I added this structure uh
230:00 - folder
230:02 - SRC inside
230:05 - SRC you will see the folder public which
230:08 - we mention is for the assets
230:13 - media models
230:17 - Etc the HTML file of course the MJS for
230:22 - our script and yeah this
230:27 - CSS so and that's it you can yeah take a
230:31 - look here and uh follow as well this
230:36 - folder structure to be you know to have
230:38 - the same
230:40 - the same project or you can download
230:43 - from from
230:44 - GitHub okay uh as we saw in the
230:50 - documentation the first thing
230:53 - first
230:54 - after
230:57 - importing uh after installing three
231:01 - invite uh we need to add this yeah
231:05 - import Star S3 from three
231:11 - so here we don't need anymore this cono
231:14 - log okay we import everything at three
231:17 - from three and we will access it
231:20 - here okay so now
231:24 - this variable here
231:28 - three will be accesses everywhere here
231:33 - okay then uh we need to import the the
231:37 - controls for the
231:40 - controls we don't import them from the
231:45 - main three
231:48 - class main three object
231:51 - actually but from another import and I
231:56 - will show you we are talking about about
231:59 - Pointer log controls okay it's what we
232:04 - need pointer
232:06 - lock controls from
232:10 - three
232:13 - STD leap
232:16 - Library you need to you need to download
232:21 - this okay to
232:23 - install I have it here on my package
232:27 - Json installed you need to run
232:31 - mpm SD lib here okay run the command and
232:38 - uh
232:39 - install it or as I said copy the Packa
232:44 - Json that I have on my GitHub and simply
232:47 - run mpmi it will install all the
232:51 - dependencies after having
232:54 - this and importing it
232:58 - here we will use it
233:01 - later uh for the
233:05 - controls something else I I I I changed
233:10 - it's
233:11 - I I want to replace the deprecated image
233:16 - utils with texter loader I left a
233:20 - comment uh in my
233:23 - code there uh let's
233:26 - see image
233:33 - details okay it's
233:35 - here you see for the texture of the
233:41 - floor I left a comment
233:44 - here image yours is deprecated in the
233:48 - newer versions of 3GS now we have the
233:52 - newer version of 3GS we have the newest
233:56 - one okay so we will delete this image
234:00 - utils which is duplicated and we'll
234:03 - replace it with another class of three
234:07 - which is texter
234:09 - loader I will show
234:12 - you so here delete
234:15 - this part
234:18 - okay and instead okay
234:24 - up and instead create a variable Checker
234:31 - loader Checker
234:35 - loer equal new as you remember we always
234:41 - create a new instance of that class so
234:45 - new
234:48 - three uh textor
234:52 - loader
234:55 - okay it's a
234:58 - method so now create another another
235:02 - variable const floor
235:07 - texter
235:14 - and assign it to texter
235:19 - loader.
235:21 - load
235:22 - okay and here pass the path or the the
235:28 - URL of the image for the floor for the
235:32 - floor we we add an image here in Public
235:37 - Image floor.
235:40 - jpeg okay so here with v we
235:46 - use
235:49 - uh this way we
235:52 - don't uh type oh
235:55 - sorry we don't type here public Etc but
236:02 - we simply add come
236:07 - on simply at
236:11 - EMG
236:13 - slash
236:15 - floor.
236:17 - jpack okay of course it's a
236:25 - string like
236:28 - this not the absolute path like SRC
236:33 - public etc etc simply
236:35 - add IMG floor plane jpeg
236:40 - Etc
236:42 - okay and that's
236:44 - it now we
236:46 - have with the newest version of three we
236:50 - are using the texter loader and not any
236:52 - more image
236:54 - utils and this is
236:58 - fixed uh what
237:00 - else uh yeah we want to to to add the
237:05 - paintings okay so let's create the the
237:09 - paintings for the
237:14 - paintings we will create uh a painting
237:18 - mesh with a given image URL okay so a
237:24 - mesh with a image
237:28 - URL and
237:31 - also it's
237:33 - dimensions and also its position okay
237:38 - okay so let's create this function that
237:42 - will accept this
237:46 - parameters uh let's create it
237:51 - somewhere yeah maybe
237:54 - here after the the sailing and
237:59 - before the function for the
238:03 - movement
238:05 - okay so function uh create
238:12 - painting create painting
238:16 - okay and as I mentioned it will accept
238:21 - uh
238:23 - some
238:24 - arguments that we will pass which
238:28 - are image
238:32 - URL
238:34 - okay
238:36 - uh with
238:41 - also
238:44 - height uh
238:47 - position
238:49 - which are things that we need for our
238:53 - image
238:56 - okay open curly brackets and
238:59 - here we will create the logic for
239:04 - creating these paintings okay so inside
239:07 - this function
239:09 - we load the image texture and create a
239:14 - painting mesh so the complete function
239:18 - will look like this with this
239:24 - logic first of all we need uh a texture
239:29 - loader again so for that as we did with
239:34 - the the
239:36 - floor uh a few moment
239:40 - ago uh create a variable
239:42 - const textor
239:47 - loader
239:50 - okay uh as always new
239:56 - three text
239:59 - loader
240:05 - okay
240:06 - then we will create a
240:09 - variable for the painting texture so
240:17 - con painting
240:20 - texture
240:22 - okay that will be with using the load
240:29 - method from texter loader
240:32 - okay this is uh warning me that okay
240:36 - it's
240:37 - uppercase
240:40 - so painting texter will be texter
240:46 - loader.
240:48 - load okay
240:52 - and as a
240:54 - parameter here we will pass the image
240:58 - URL which one this one here that will be
241:03 - passed dynamically every time we will
241:06 - use this function you will see
241:09 - so here pass image
241:12 - URL and this is
241:16 - done now we create the
241:20 - material
241:21 - const
241:23 - painting
241:25 - material equal
241:28 - new three mesh basic
241:33 - material I think you remember the mesh
241:36 - basic material that we we we covered in
241:40 - the other videos
241:43 - basically we have an object
241:46 - inside and we use
241:49 - map
241:51 - okay and we pass the painting
241:59 - texture if you remember you should be
242:03 - familiar by now with
242:07 - this and
242:10 - also we create the geometry for this uh
242:16 - paintings so const
242:20 - painting
242:23 - geometry
242:25 - okay and the
242:27 - geometry is
242:29 - made using a class from three in this
242:33 - case it will be what kind of geometry it
242:36 - will be a plain geometry
242:38 - because yeah it's a
242:42 - plane so uh
242:45 - new 3. plane
242:49 - geometry okay this plane geometry we
242:53 - will pass two parameters width and
242:57 - height of
242:58 - course so width and
243:02 - height
243:04 - so yeah we will create the mesh now we
243:08 - have uh the texture we have the material
243:12 - uh we created the geometry and now we
243:15 - will create yeah the painting because
243:18 - the painting will be as if you remember
243:23 - from the previous videos you know that
243:26 - the
243:27 - mesh
243:29 - is
243:31 - made with the geometry and the material
243:37 - okay
243:38 - so in this case con
243:42 - painting equal
243:45 - new three
243:48 - mesh it's a mesh what we
243:53 - want and we
243:56 - pass as we said the geometry and also
244:00 - the material the geomet is the variable
244:03 - here painting
244:07 - geometry
244:09 - painting
244:10 - geometry and the material is this one
244:12 - painting
244:16 - material
244:19 - okay and this is
244:21 - done yeah we we have this function we
244:25 - need to return this function of course
244:28 - because we will use this function so it
244:32 - it should return what it should return
244:35 - this painting Okay so so return
244:41 - painting and this is done maybe
244:45 - maybe yeah of course we also we said
244:48 - yeah we we want to use also the position
244:51 - when we create uh the painting every
244:54 - time we will use this function to create
244:57 - a new
244:58 - painting we will
245:01 - also use the position we will pass a
245:04 - position for it okay so
245:09 - here before returning
245:13 - U painting that
245:18 - position and in this case the position
245:21 - will be uh first we will use set to set
245:24 - the position and the position will be
245:29 - this value that we will pass
245:35 - position uh that X position y position.
245:39 - z position.
245:42 - x
245:47 - positiony
245:52 - position Z
245:56 - okay and that's it uh for for this
246:01 - function create
246:06 - painting we created this function so
246:11 - what
246:12 - else with this function let's add the
246:16 - paintings to our
246:18 - scene to call every time this function
246:21 - we want to to create one okay so we will
246:25 - create for example two paintings now
246:28 - with different images and different
246:34 - positions so to do that we create create
246:38 - a variable for let's say painting
246:42 - one const painting one
246:49 - okay and we will call this function that
246:52 - we just created create
246:57 - painting
247:00 - and here we will pass first the path or
247:05 - the URL of the image
247:08 - uh I already have here a folder
247:12 - artworks with all the works by vangog so
247:19 - let's
247:21 - use some of
247:23 - them it's uh simply artworks without SRC
247:29 - public
247:30 - Etc artworks okay and then um yeah zero.
247:36 - jpeg
247:46 - Z
247:48 - okay the first uh
247:52 - parameter uh the second
247:56 - one width and uh
248:00 - height and also the position I will
248:06 - give
248:09 - 10 five here okay let's see and for the
248:15 - position we will create uh a new Vector
248:19 - 3 class for the position so we will uh
248:23 - create a new instance of vector three so
248:27 - new uh
248:30 - three dot Vector
248:33 - three okay and we'll pass
248:38 - uh the values for as you see here X Y
248:45 - and Z
248:48 - okay I don't know let's give some random
248:51 - one in this case uh but yeah for the X
248:57 - let's say just 10 minus 10 for the left
249:01 - for the
249:02 - Y uh positive
249:06 - five and uh uh for the
249:10 - Z let's give
249:13 - it 20 negative
249:18 - 20
249:20 - okay painting one also let's create
249:23 - another
249:25 - painting we will put
249:27 - it at the front
249:30 - wall so
249:35 - const painting two
249:40 - call the function create painting
249:44 - again every time we will create a
249:46 - painting we will call this function okay
249:49 - it's it's very useful as you will see so
249:53 - create painting and again pass the
249:56 - arguments in this case the first one is
249:58 - the
249:59 - URL yeah
250:03 - artworks art
250:06 - works then one. JP
250:12 - okay also here slash I
250:19 - think uh the same thing but this time
250:22 - not negative but
250:24 - 10 okay five and
250:27 - also minus
250:30 - 20 should be
250:33 - okay and again for the position new
250:37 - three
250:38 - do Vector
250:41 - 3 and pass
250:43 - here uh the values for the
250:50 - position in this case again not minus
250:54 - but positive number it will
250:57 - be uh left and
251:00 - right so 10 5
251:04 - andus
251:06 - 20 it should be
251:10 - okay now that we created these two
251:15 - painting if you
251:17 - remember every time we create an object
251:20 - a 3D
251:21 - object we need to add it to the scene
251:24 - because if not we will not be able to to
251:27 - to see it okay
251:30 - so I think you remember this scene. add
251:33 - to add the things to to the scene and
251:36 - pass paint painting one and painting
251:40 - two oh we should be able to see
251:43 - something I
251:49 - think okay we might have some
251:54 - errors cannot assign to read only
251:58 - property position of
252:01 - object
252:06 - 24
252:08 - Let's
252:09 - see we don't need actually this line so
252:13 - we can remove
252:15 - it let's see
252:19 - yeah now we see something we have
252:21 - another error but yeah we can fix
252:23 - that we can see
252:26 - yeah we can see the
252:29 - scene we don't see the paintings okay we
252:34 - have a problem use them
252:37 - and we had another
252:40 - arrow
252:43 - uh okay let's fix this one first of all
252:47 - let's fix this plane buffer geometry has
252:50 - been renamed to plane
252:54 - geometry three module
252:57 - okay PL buffer geometry let's fix that
253:05 - first okay
253:08 - it's been renamed to plane geometry
253:10 - right plane geometry yes because now we
253:13 - are using the latest three
253:17 - JS so remove the buffer one okay Lane
253:23 - geometry okay this is
253:27 - fixed uh not found so yeah maybe the
253:33 - title is
253:36 - wrong floor plane yeah it's wrong it's
253:46 - floor okay now we see the
253:51 - floor okay but we don't see the
253:55 - paintings
253:57 - yet let's
254:02 - check oh yeah maybe
254:06 - it's
254:09 - let's
254:09 - try
254:12 - 18
254:14 - yes so let's use
254:18 - [Music]
254:19 - 90 because I remember 20 was okay you
254:23 - can see
254:29 - 1999 yeah 20 is the limit
254:34 - okay also here
254:44 - can we see the other one we don't see
254:47 - the other one
254:51 - why
254:53 - artwork it's okay width height oh this
254:57 - one what is
254:59 - this it's not the this
255:04 - parameter it should be okay
255:07 - yes
255:09 - okay as you can see guys you see the
255:12 - paintings on the
255:14 - wall it works and we can use that
255:18 - function every time we want to create
255:21 - another
255:22 - painting we use the same method so
255:26 - painting three painting four painting
255:28 - five you know you can call every time
255:31 - just create painting function and create
255:34 - as many paintings as you wish we can of
255:38 - course create like function
255:42 - like to create like 50 paintings uh at
255:47 - once without like calling and creating
255:52 - manually you know painting one 2 3 4 of
255:56 - course we can do also that but we still
255:58 - don't know how many paintings we want to
256:01 - have for now for the sake of this
256:03 - tutorial we I will leave it here just
256:08 - these two paintings okay it's the same
256:10 - logic so maybe you have it as a small
256:14 - challenge yourself
256:16 - to
256:18 - populate uh all the scene with with
256:22 - other paintings okay so it's up to
256:27 - you in the end if always if you have any
256:30 - problem of course I will I will do
256:34 - it we don't have any errors right
256:40 - no we don't have any errors we are good
256:43 - to
256:45 - go
256:47 - so we want to create now uh the
256:52 - movement because we don't really want
256:54 - this
256:56 - movement you see I press the right arrow
257:01 - and I go
257:03 - left I press the left arrow and go right
257:09 - this is because initially we were moving
257:13 - the
257:15 - camera and had the feeling when
257:18 - everything was empty the scene we had
257:22 - the feeling
257:23 - that the cube was moving right and it
257:27 - made this idea we were moving right too
257:31 - but no not that we have other objects of
257:34 - reference we see that I press the right
257:39 - the cube
257:41 - is moving to the right but we are
257:46 - actually moving to the
257:49 - left so we will change that also I will
257:53 - have to add the keys W S A and D to move
258:00 - not only the
258:03 - errors but you will see that I
258:07 - will add this pointer lock controls
258:11 - basically you move the mouse and you
258:13 - move
258:15 - around in the direction of of of the
258:18 - mouse uh why we need that we need that
258:21 - because it will be
258:23 - smoother movement because I move the
258:26 - mouse I like look around and then I can
258:30 - move with the arrows or
258:32 - wsda a I can move the mouse and then
258:36 - move forward or in any direction it will
258:38 - be smoother and a better experience you
258:43 - will
258:45 - see so let's go back
258:48 - here so we imported at the top the
258:52 - pointer lock controls okay you installed
258:57 - this now uh let's use this uh pointer
259:01 - lck controls
259:03 - okay we create we will create an
259:07 - instance of pointer lck controls and
259:10 - connect it to our
259:12 - camera and the document body or
259:18 - maybe let me think a
259:23 - second because that's how pointer lock
259:26 - controls
259:28 - works we need to
259:30 - click at
259:33 - something and it will activate the lock
259:36 - so we click and then let's say the
259:40 - controls start okay then we
259:46 - presses in the keyboard and the control
259:50 - locks unlock meaning they are
259:52 - deactivated we cannot move anymore what
259:55 - we want
259:57 - is click the play
260:00 - button uh enter the gallery then we can
260:04 - move so we want to add an event listener
260:08 - to the play
260:10 - button to lock to start the controls
260:15 - okay and
260:16 - then uh n
260:19 - listener when we press ask they will be
260:24 - deactivated okay and in this logic we
260:28 - want
260:29 - to hide the menu after clicking the play
260:33 - button we want to start the controls but
260:37 - also hide the menu because we will enter
260:40 - the gallery but as soon as we press the
260:44 - ask
260:46 - key we will deactivate the
260:50 - controls
260:52 - and display again the menu so we will
260:55 - have the chance to
260:58 - play uh the button again you know so
261:01 - like play or not
261:03 - play let's see let's see
261:07 - uh for
261:10 - this so let me find a a way where we can
261:14 - add
261:19 - this maybe here yeah
261:23 - here before before the the function on Q
261:27 - down okay we can add that so
261:34 - uh control
261:37 - okay create the variable
261:44 - controls and always new the new keyword
261:49 - to create a new instance of pointer
261:52 - controls pointer log
261:55 - controls and pointer log
261:58 - controls we will attach the camera to it
262:02 - okay so camera and also the document
262:09 - body document
262:14 - body okay so we will click and we will
262:18 - uh activate this so we need to create
262:22 - function for that okay to start the the
262:27 - game the game it's not the game but to
262:30 - start our journey
262:33 - our tour okay let's call it experience
262:38 - so let's create a function uh let's call
262:41 - it start experience
262:45 - okay lock uh lock the
262:50 - pointer I will
262:53 - explain log the pointer uh meaning uh
262:58 - controls are
263:02 - activated
263:04 - okay and hide the menu when the
263:07 - experience
263:18 - starts to start the experience we'll
263:21 - create a function called start
263:25 - experience uh that locks the pointer and
263:28 - hides the menu locks the pointer
263:32 - meaning activate the controls okay and
263:36 - we'll also add an event listener to the
263:38 - play button to start this experience
263:42 - so
263:45 - function
263:47 - start
263:48 - experience
263:52 - okay and
263:54 - [Music]
263:55 - here we will add our
263:59 - logic then as we
264:02 - said we use this function start
264:05 - experience
264:07 - that inside will
264:10 - hide the
264:12 - menu hide the menu and
264:17 - here
264:19 - lock the pointer
264:23 - okay and we said that we'll also add an
264:27 - N listener to the play button to start
264:31 - this
264:32 - experience okay because this is the
264:34 - function but we want to add
264:37 - it to to to to the button and the button
264:41 - is
264:43 - uh okay the ID play play
264:47 - button is this one yeah is this
264:51 - one okay so create a variable for this
264:55 - play button play
264:59 - button and it is
265:03 - document uh this is pure JavaScript
265:08 - okay uh get element by ID get element by
265:13 - ID okay it was play
265:18 - button play button I think underscore
265:23 - yeah play button score
265:26 - okay okay so we have this play button
265:29 - bar uh variable and now let's uh use it
265:33 - play
265:35 - button
265:37 - that add event listener we add an event
265:40 - listener to it okay so when we click we
265:43 - will we will use this function stat
265:46 - experience we click this button we fire
265:50 - this function okay for this it's always
265:54 - JavaScript it's not
265:57 - 3js click the name of the event okay
266:01 - it's the name speaks for
266:04 - itself and the second uh argument is the
266:08 - function that we will fire start
266:12 - experience okay so on click fire this
266:16 - function that we will finish here the
266:20 - logic so we said we want to lock the
266:24 - pointer inside the start experience
266:27 - function we will add uh the lock pointer
266:30 - and hide the menu as we have the
266:32 - comments here for that for the lock of
266:35 - the pointer we
266:38 - simply uh add here controls. loock yeah
266:43 - simple as
266:44 - that simple as that and for hideen
266:48 - [Music]
266:50 - menu yeah let's create a new function
266:53 - make the code clearer so uh create a new
266:56 - function let's call it hi hide menu
266:59 - because we will then later also show it
267:03 - yeah we we'll create two function hide
267:06 - menu and show menu so hide
267:09 - menu
267:12 - okay created here this function hide
267:16 - menu to hide the menu it's always
267:20 - JavaScript and to show the menu the same
267:24 - thing hide
267:30 - menu
267:32 - function hide
267:34 - menu
267:39 - okay we will grab the menu because what
267:43 - what we will hide what menu this one
267:48 - uh okay this one with ID menu It's the
267:52 - whole
267:55 - element so const menu again we
268:00 - will refer to to do this document
268:09 - javascript. get element by
268:14 - ID and it was simply menu
268:19 - right menu
268:22 - yeah now that we have this
268:25 - uh uh variable menu we can hide it menu.
268:32 - style uh menu. Style do.
268:37 - displayed
268:39 - and as we said
268:42 - none we hide it simple as that okay so
268:48 - this function is used here in our start
268:52 - experience we also want to show it
268:56 - later so show
269:00 - menu it's pretty much the same
269:04 - thing show
269:12 - menu we can
269:14 - just copy
269:18 - this
269:20 - okay the only
269:25 - difference is not none but
269:32 - block
269:34 - okay so we have these two two
269:39 - functions uh we are not using the show
269:41 - menu yet
269:44 - [Music]
269:47 - because What's Happening
269:51 - Here document okay
269:54 - typo document where are you where are
269:58 - you document okay
270:04 - here
270:07 - another okay uh cannot read properties
270:11 - of
270:16 - null
270:18 - oh yes of course it's n okay oh because
270:23 - I commented out this I commented this
270:26 - this of course it's null because display
270:29 - button doesn't exist here it's
270:32 - null yeah simple as that
270:38 - yeah uh you
270:42 - see I click this button nothing happens
270:46 - but I activated the
270:51 - controls I press ask it stops I click
270:58 - but okay it's working like it's
271:01 - triggering the controls when I click
271:04 - click ask it stops but the
271:08 - menu is not
271:11 - hiding let's
271:15 - check okay okay guys
271:19 - I I saw the arrow as always I sometimes
271:24 - make stupid mistakes so bear with me
271:28 - yeah it happens very
271:31 - often
271:32 - uh I don't know why I just forgot the
271:37 - syntax uh the basic syntax of this we
271:41 - just assign to
271:45 - n okay and
271:47 - also sorry here's
271:50 - block and here is none but we assign To
271:56 - None don't pass it as a parameter okay
272:01 - okay just a stupid error it should work
272:04 - now
272:08 - we click HIDs okay
272:11 - great presses it will show again and
272:14 - stop we
272:16 - click controls are activated and the
272:19 - menu is hidden
272:22 - presses okay controls are deactivated
272:25 - and the menu is back okay it's done
272:28 - everything
272:34 - correctly
272:39 - okay I have up and down but I don't have
272:41 - the forward and backward movement I will
272:46 - add
272:47 - it we'll add that
272:50 - now and we are done I think with that
272:56 - feature let's Ed
273:02 - it here we have the key codes
273:06 - and we just need to to add the forward
273:08 - the backward uh
273:11 - movement uh yeah also add for
273:15 - w and
273:17 - uh D A and S keywords okay so here uh we
273:23 - will modify this the right uh the right
273:27 - arrow key 39 is for the right arrow
273:33 - key uh I also know that here we can add
273:37 - [Music]
273:40 - for uh the right is d right yeah is D
273:44 - here we can
273:45 - do or if key code equal 39 which in the
273:50 - table we showed the
273:53 - last the last time we showed the table
273:56 - that every key has this key code okay
273:59 - and
274:00 - for the keyword D is 68 so if key code
274:06 - equal 39 or key
274:10 - code uh uh equal
274:16 - 68
274:18 - okay uh in this case we will not use
274:23 - translate X or Translate Y we will
274:29 - use uh also we will not use the camera
274:33 - movement here but we will use for
274:35 - smoother you will see we will use the
274:38 - controls movement okay so here uh
274:42 - instead of camera.
274:45 - translate uh X
274:48 - Etc remove
274:50 - it and add
274:53 - controls. move right simple as
274:57 - that and pass uh
275:01 - Z
275:03 - Point add more speed uh let's try
275:08 - eight
275:12 - 0.08 let's try the
275:17 - left okay
275:20 - yeah yeah you see it's
275:25 - better
275:30 - okay uh we'll do the same thing for for
275:33 - the others okay
275:37 - so also here that we have camera done
275:41 - translate
275:43 - x uh controls that move right okay but
275:48 - we'll also add here
275:52 - uh this is left so if key code equal 37
275:58 - or key
276:00 - code sorry
276:04 - or key
276:07 - code equal 60 60 uh
276:14 - 65 is for for the the button
276:18 - a controls uh move
276:23 - uh move
276:26 - right yeah but we can add the negative
276:30 - here
276:33 - okay or move left left let's
276:39 - try should work
276:42 - also I
276:49 - think
276:51 - okay uh this doesn't
276:54 - work yeah this doesn't
276:57 - work works
277:02 - okay
277:04 - um
277:06 - move right but add negative
277:15 - here right Works left works yeah
277:19 - perfect okay great
277:23 - so use controls that move right but use
277:28 - the negative for negative for left and
277:31 - positive for
277:32 - right okay
277:37 - so up C and down so I don't want this y
277:42 - camera I Want U controls forward and
277:46 - controls backward okay for that uh we
277:51 - will
277:52 - use again the controls but first if key
277:57 - code equal 38 and
278:01 - also
278:03 - uh
278:06 - uh key
278:08 - code uh
278:10 - equal uh 80
278:15 - 87 yeah 87 is for for for
278:21 - W uh
278:24 - controls. move
278:28 - forward and here again
278:33 - 0.08
278:39 - okay the same the the same speed you can
278:42 - change the speed uh As You
278:47 - Wish Al here also here as with move
278:53 - right that we changed the negative for
278:56 - moving left the same thing to move
278:59 - backward use move forward but just add
279:03 - negative uh negative value here okay so
279:07 - negative it will move
279:11 - backward but for the down uh which is
279:15 - the the
279:18 - S
279:20 - key if key code is equal uh
279:24 - 40 or if key code is
279:30 - equal
279:33 - 83
279:37 - which is
279:39 - uh the
279:41 - S
279:43 - key move backward okay because we have
279:46 - the negative here let's
279:48 - test it should be
279:53 - correct yeah it should be
279:58 - correct click activate controls we move
280:03 - around and let's let's try to move
280:05 - forward okay forward works like a
280:08 - charm backward works like a
280:13 - charm left and right okay it works so
280:18 - for example I want to go this way you
280:22 - see that it's smoother nicer because I
280:24 - can move the
280:26 - mouse and yeah just by you
280:32 - know it's better like
280:43 - this okay guys that's it we we did
280:50 - it I will leave like this small uh
280:55 - challenge let's say for the beginners of
280:58 - course to adjust yourself the scene to
281:02 - add more paintings
281:05 - on the left and the right
281:10 - walls uh the movements are are okay you
281:13 - don't
281:15 - really have to do anything about it you
281:18 - can change you know the colors because
281:20 - we have
281:23 - this strange colors for an art
281:26 - gallery but if you remember I added
281:30 - these colors just to differentiate you
281:33 - know and see
281:35 - uh the walls and the
281:38 - ceiling uh in the next tutorial I will
281:41 - try to optimize this of course make it
281:45 - realistic I will try to play with the
281:47 - lights I will try to to optimize the
281:51 - chter we want to see the walls as real
281:55 - walls uh yeah optimize it make it look
282:01 - much better maybe okay if you did it
282:08 - yourself at the
282:11 - time for the paintings I mean if
282:14 - you are doing it yourself uh it's
282:18 - great uh if not I will do it so you can
282:25 - check if you had any issues with
282:28 - positioning the paintings on the wall
282:31 - but maybe we can add like I don't know a
282:33 - better way to
282:36 - display okay so see you in the next
282:40 - tutorial thank you for following
282:42 - me
282:47 - [Music]
282:50 - bye in the last tutorial we built the
282:53 - foundation of 3D art gallery setting up
282:57 - the walls the sailing the floors adding
282:59 - like a simple Cube we also implemented a
283:03 - basic movement
283:05 - controls uh Etc since then uh our
283:09 - gallery has had a major upgrade and this
283:12 - time uh I added real artwork implemented
283:16 - Checkers to make our Gallery look even
283:19 - more
283:20 - realistic uh yeah I'm sure you can find
283:23 - better
283:25 - texter very high definition out there so
283:29 - yeah feel free to find even better
283:33 - textures
283:36 - and yeah we even added a dynamic
283:38 - lighting system to set the mood a
283:42 - bit uh I will show
283:45 - you uh but yeah I improved some other
283:49 - things like movement I got feedback from
283:53 - someone commenting on my
283:56 - channel uh so now we have a
284:00 - better movement controls it is smoother
284:03 - now I fixed those
284:08 - things but I've also worked on user
284:11 - interaction and now when you approach a
284:14 - painting an info card will appear
284:16 - displaying details about the artwork
284:20 - okay I will show
284:21 - you so you see the textur on the walls
284:27 - now the walls and the gallery looks
284:30 - better as I said we can find better
284:34 - textures of course but I didn't want to
284:36 - use like very high definition textures
284:39 - because yeah the
284:40 - performance uh will be you
284:44 - know you see also the angles the borders
284:49 - uh it's they are better defined now
284:53 - because the Shadows are showing better
284:56 - and the lights so
284:59 - you now it really looks like a gallery
285:03 - you know like a r
285:06 - but I want to show you
285:08 - the the new feature that uh we have
285:16 - now okay you see we have an info card it
285:19 - will show yeah the title the description
285:21 - Etc when you get close to to the artwork
285:25 - you go away it will
285:27 - disappear you get close it will show if
285:30 - you change to another
285:32 - one it will show show information about
285:36 - the other one and it's a nice thing this
285:39 - is a feature that
285:41 - many many people requested me even
285:45 - writing me on private so not only on
285:48 - this tutorial but
285:50 - also in the other tutorials uh this I I
285:54 - saw that this was a feature that was
285:57 - nice to have from many of few so yeah I
286:01 - addit it and we will go through it how
286:04 - to implement it step by step and I
286:08 - also am commenting every single line in
286:13 - the code on GitHub so for those of you
286:17 - that are you know are not beginners uh
286:20 - please bear with me I know it's not the
286:23 - best thing to have like comments on
286:26 - every line but for the sake of our
286:30 - tutorial for the people that uh really
286:32 - want to learn the basics and they really
286:36 - want to understand every step not only
286:39 - like look at me I'm doing this look at
286:42 - me I'm doing this oh now we have this
286:44 - and you just code there you know there
286:46 - are many tutorials when the guys just
286:48 - code and you follow and copy paste and
286:51 - yeah you get the project but in the end
286:54 - you are not really sure if you really
286:58 - understood the things and the next time
287:02 - that you want something you will always
287:05 - rely on that YouTube
287:07 - tutorial so the secret actually is that
287:13 - uh those who makes tutorials they want
287:16 - this they don't really want you to you
287:20 - know to learn how to do things yourself
287:25 - or uh they don't really want you to to
287:29 - create things yourself to to to to teach
287:33 - you
287:34 - how to do it why you are doing this okay
287:38 - so uh like uh you create a variable why
287:42 - you are creating this variable how did
287:45 - you know that you need this variable how
287:49 - did you know that you need this function
287:51 - why this function what does it mean you
287:55 - know how can I know that oh I would need
288:00 - this function how to to to to make the
288:02 - the you know the problem
288:05 - solving how to debug things how to solve
288:10 - problems so this actually are the most
288:13 - important things to to learn for
288:16 - everyone not only for the beginners but
288:19 - yeah we know that uh many
288:22 - tutorials they
288:24 - just you know teach you how to rely
288:29 - always on those tutorials so you will
288:31 - always come back to
288:34 - to their channel to their tutorials and
288:37 - yeah copy paste and follow the video
288:42 - they are like spoon fitting tutorials
288:46 - okay this is why I will explain every
288:49 - step I will comment every line of code
288:53 - on GitHub so those who are experts
288:58 - please bear with me just ignore the
289:00 - comments you know but I think for other
289:04 - people uh the comments will be very very
289:07 - helpful even if you understand it now
289:09 - maybe you will get stuck and you will
289:13 - forget okay and you can turn back at the
289:16 - code and see okay this is about this
289:21 - this has this function this means that
289:26 - etc etc etc okay I hope it will be
289:29 - helpful if not please tell me or if you
289:31 - have any ideas if you have have any
289:34 - suggestion what you'd like to have you
289:38 - know what you'd like to explain more or
289:40 - what you would like to just stop it
289:42 - amilon just stop with this blah blah
289:44 - blah and just go and code
289:49 - okay uh I also changed a bit the menu
289:53 - you have you you see there are
289:56 - some slow
289:59 - animations um yeah the fonts and
290:02 - everything yeah the pencil the the mouse
290:04 - now the pointer is this
290:07 - pencil and there is
290:09 - this transition when you go back this
290:13 - slow
290:15 - animation you see it's
290:18 - nicer of course we can do even better
290:21 - with the Styles and I'm sure many of you
290:27 - are more know
290:29 - knowledgeable in CSS than me you are
290:34 - better than me in styling I'm sure many
290:38 - of you I'm sure they are so if
290:41 - you can do better yeah please do it if
290:45 - you want also to share just Fork uh the
290:48 - GitHub repository and yeah send a pool
290:51 - request if you have something very nice
290:54 - or cool that you think would be nice to
290:57 - share with other people's if the design
291:00 - is better than
291:02 - mine and yeah I know there there are
291:05 - guys that are doing better with the
291:07 - design than I did uh okay what else I I
291:13 - in the future I have some ideas with
291:16 - this tutorial yeah I would like to to to
291:19 - to continue this this project we can do
291:22 - I think very cool things with this
291:25 - project it can really
291:27 - expand so I think we would love to
291:31 - explore more advanced features okay we
291:35 - can move on with more advanced stuff I
291:38 - think for example imagine an audio guide
291:43 - providing you details about each artwork
291:46 - as you approach them okay artwork or
291:50 - your designs or
291:52 - your links to project you know you want
291:56 - to showcase your project or your own
291:59 - portfolio it will be your personal
292:01 - portfolio to show to recruiters in very
292:04 - nice way it would be like very nice if
292:07 - you have a personal portfolio like that
292:09 - and I'm sure recruiters would love it to
292:12 - see
292:13 - it and yeah why not if
292:16 - someone uh is looking for a new job it
292:19 - will
292:20 - help but yeah imagine that
292:24 - uh we had this audio guide you move uh
292:29 - through the
292:31 - gallery you approach this projects and
292:35 - artworks and an audio will start playing
292:39 - explaining you know the project or the
292:42 - artwork in this case explaining van Go's
292:47 - art I think it would be very nice or you
292:50 - can add for example your voice your
292:53 - audio recording explaining your project
292:56 - this is my project I work with this
292:58 - company I did this and I did that and
293:01 - that's it now let's start with our
293:04 - tutorial and let's create this new
293:06 - features oh I forgot the most important
293:09 - things and yes that is the most
293:11 - important thing I refactored the whole
293:15 - code so we had the previous uh project
293:20 - we had like one file MJS file now I
293:24 - restructured and refactored the whole
293:27 - code it is cleaner better it is modular
293:32 - it has the best practices and yeah we
293:35 - have a file for every
293:38 - functionality lights
293:42 - walls the colliding system oh I didn't
293:45 - show you we will also add the colliding
293:50 - system you see now we cannot go through
293:54 - the
293:55 - walls you see there are
294:00 - some Physics like I want to use the
294:05 - physics
294:07 - engine but I thought it would be too
294:10 - much only for the colliding system so I
294:14 - used a very simple trick to do this
294:19 - colliding okay because there were some
294:22 - options do it with a physics engine like
294:24 - ammo JS or Canon
294:26 - JS do it with Ray casting also but I
294:31 - found an even easier solution so why do
294:36 - something complex when you really can do
294:39 - it in an easy way of course we will
294:42 - explore the physics I don't know if we
294:45 - can
294:46 - add like I don't know features that
294:50 - involves physics for this project but
294:53 - yeah maybe we can do it in in the future
294:57 - okay yeah let's start thank you for
295:01 - being here and please follow this
295:03 - tutorial
295:07 - okay so I want to show you the
295:11 - changes and the first thing that I want
295:14 - to
295:15 - show is uh some fixes for example fixing
295:21 - the movement someone reported that they
295:24 - were having problems like they had
295:28 - this
295:29 - lagging
295:31 - experience uh it was not smooth when
295:35 - they move and this is because uh this
295:40 - issue uh that uh someone described in
295:44 - the comments is because the movement
295:46 - isn't in sync with the frame updates
295:49 - every computer has different frame
295:52 - updates because depending on the
295:54 - computer how powerful etc
295:57 - etc so this is the issue and that's why
296:02 - sometimes we use uh a Delta time for
296:05 - this and I will show you I fixed it in
296:10 - this
296:12 - way so this is the function that is
296:15 - responsible for the
296:17 - movement and uh
296:20 - yeah we were like uh
296:23 - checking uh now it's uh the code is
296:26 - changed I will show you but yeah we were
296:29 - checking the inputs from the users what
296:32 - key they were
296:34 - pressing and based on that code number
296:38 - we updated and you know we moved left or
296:41 - right
296:42 - Etc
296:44 - now what I added here what I
296:48 - changed uh it seems that that movement
296:51 - uh is only being processed once for each
296:55 - key
296:56 - press so this is because the key down
297:00 - event listener is only called once per
297:03 - key
297:05 - press so the key
297:08 - down this one event listeners that we
297:12 - had
297:12 - previously is uh is only called once per
297:16 - ke press to continuously update the
297:19 - movement while the key is
297:23 - pressed okay we should separate events
297:26 - for key down and key
297:29 - up and maintain a state for the key is
297:34 - when being
297:36 - pressed okay don't be confused please
297:39 - because I will explain and for that okay
297:42 - we will use an object to track the state
297:45 - of the Pressed keys I created this
297:48 - object to hold the key pressed so Arrow
297:52 - up arrow down arrow left Arrow right and
297:56 - yeah you know w a s
297:59 - d so this object uh is to track the
298:04 - state of the Pressed
298:07 - keys so we will use this object
298:10 - here after creating uh this object what
298:16 - happens uh in this code that we have you
298:18 - see we have an event listener for key
298:22 - down okay and an event listener for key
298:26 - up we have
298:28 - two uh these event listeners are used to
298:31 - update the key press
298:33 - object this one we will update this key
298:38 - pressed object with this event
298:42 - listeners uh the update movement then
298:45 - the update movement function will be
298:48 - called on every frame so
298:52 - our function that is responsible to to
298:57 - handle the movement will be updated on
299:01 - each frame and we will use this Delta I
299:03 - will explain in a second okay but we
299:06 - will call this function in our render
299:10 - function so to call it on every frame
299:14 - which checks the state of these
299:17 - keys in the key
299:21 - pressed checks the states of these keys
299:25 - and moves the camera accordingly okay so
299:29 - this should provide a smoother and
299:31 - continuous movement
299:33 - as long as the keys are are
299:36 - pressed okay so I will explain we have
299:40 - this object to hold the keys
299:44 - pressed then we create this event
299:47 - listener key down this is when we press
299:53 - the
299:54 - keys so event listener key down key down
299:59 - is an event that fires when a key is
300:01 - pressed we pass the parameter event
300:08 - from and if event. key in key
300:12 - pressed check if the key pressed is in
300:16 - the key pressed object so the key we
300:21 - pressed the user pressed check if that
300:24 - key that the user pressed is in here on
300:27 - this object Arrow up arrow down Etc so
300:30 - if the user presses for example narrow
300:33 - down
300:35 - check uh if it is if this uh key pressed
300:41 - by the user it is on this object set the
300:45 - value to true if the user for example
300:48 - press the error right from
300:52 - false it will turn to True set the value
300:55 - to True okay if not if the key that you
301:00 - know the user pressed like he pressed
301:02 - like and I don't know another letter or
301:05 - doesn't matter set it to fults Like It
301:08 - Is by default the same for the other
301:12 - event listener key up in this case so
301:16 - event listener for when we release the
301:20 - key so key up is an event that fires
301:24 - when the key is
301:26 - released pass in the event
301:29 - parameter uh check if the same thing
301:32 - check if the key released this time not
301:36 - the key pressed but check if the key
301:39 - released is in this key press object
301:44 - this is to make you know continuously
301:47 - this updates not only with key
301:50 - down check if this is there if it is not
301:54 - if it is set the value to to true if it
301:57 - is not sell the value to false okay so
302:02 - if
302:04 - what the user is
302:05 - releasing is here set to true if not set
302:09 - to
302:10 - false
302:12 - okay now for the Delta
302:15 - time okay because we we discussed the
302:20 - Delta time one solution is to use this
302:23 - Delta Time by using Delta time we can
302:26 - Ure that the movement speed is
302:29 - consistent regardless of the frame rate
302:33 - it doesn't matter if my computer has
302:35 - another frame rate another computer has
302:38 - another frame rate so it if we have like
302:41 - another
302:42 - calculation uh I will see it differently
302:45 - another computer will be different
302:48 - because we have different frame rates so
302:52 - Delta time has this function by using
302:55 - Delta time we can ensure that this
302:57 - movement is consistent regardless of the
303:00 - frame rates and regardless of what kind
303:02 - kind of computer you have okay
303:07 - so uh there are several ways to to
303:09 - handle this but the easiest one and you
303:12 - know is using this clock from from from
303:16 - 3js it's a
303:18 - built-in okay this creates a clock to
303:21 - keep track of the of the time between
303:25 - frames between these
303:28 - frames so the
303:30 - clock keeps tracks of this time time
303:32 - between
303:34 - frames and so here in our update
303:37 - movement that we updated the
303:40 - code we create this move speed equal to
303:46 - five
303:50 - five per Delta time so move speed is the
303:54 - distance the camera will move in 1
303:58 - second we multiply by Delta to make the
304:02 - movement frame rate independent you know
304:06 - independent from the frame rates this
304:08 - means that the movement will be the same
304:11 - regardless of the frame rate as I
304:13 - mentioned and this is important because
304:16 - uh if the frame rate is low the movement
304:19 - will be slow and if the frame rate is
304:22 - high the movement will be very fast so
304:26 - this is not what we want we don't want
304:28 - different performance in different
304:30 - computers we want the movement to be at
304:32 - the same regardless of the frame rate we
304:34 - want that speed we don't want like the
304:38 - car to move 300
304:42 - kilometers per hour and in in
304:45 - another computer move like just slowly
304:49 - very
304:50 - slowly and then we create this variable
304:54 - previous
304:56 - position the previous position equal to
304:58 - camera. position. clone what is this
305:02 - clone the camera position before the
305:06 - movement so before the movement we clone
305:10 - the position before that Movement we
305:13 - clone it so this is the variable
305:15 - previous
305:16 - position we want
305:19 - this then we
305:21 - check if key pressed that error right
305:24 - key pressed is the object do Arrow right
305:29 - is this key here this property so key
305:33 - press. Arrow right key press. Arrow up
305:36 - key press. W Etc we access you know the
305:41 - keys inside this
305:44 - object if key press this error right or
305:47 - key press dot d it's the same because we
305:52 - will use error right or the letter D to
305:55 - move
305:59 - right uh
306:01 - controls. move right and we pass the
306:04 - parameter move speed okay so controls
306:08 - that uh we have we are using controls
306:13 - from here
306:16 - the
306:18 - uh okay controls it's the pointer locks
306:22 - that we did in the last
306:25 - tutorial so okay if we press uh error
306:29 - right or D controls. move right and we
306:34 - pass the move speed we want to move with
306:37 - that
306:38 - [Music]
306:39 - speed which is five multiplied by Delta
306:43 - time and the same if left or a or if
306:47 - Arrow up or W etc etc we move
306:53 - accordingly and
306:55 - here we will check for the Collision
306:58 - because uh as I said uh I added the
307:01 - Collision
307:03 - so I'm I will collide with the walls and
307:06 - I cannot go through break them through
307:08 - to the other side so I will stay in the
307:10 - room as you
307:12 - know uh as in a real Gallery we cannot
307:15 - pass through walls like a ghost but I
307:19 - will explain in a bit this check
307:21 - Collision but I wanted to explain this
307:23 - movement first so I hope you are clear
307:26 - with it and this update function in the
307:30 - end after creating the CL clock that
307:33 - keeps track of time between frame rates
307:37 - after creating the variable move speed
307:38 - to move at this speit multiplying by
307:41 - Delta time we call it in the render
307:45 - function you know the render function is
307:47 - the method that you know this will be
307:51 - called uh again and again and again and
307:54 - again these are also the animation so
307:57 - this is a
307:58 - loop and so yeah with this
308:03 - we are sure that we will call on on on
308:05 - every frame okay I hope you are clear
308:09 - with this I hope
308:11 - uh who commented about this issue and
308:15 - now it's
308:16 - fixed and I will explain now uh the
308:21 - Collision that I added how we did uh the
308:26 - Collision
308:28 - system it could have been very comp
308:30 - complex actually if we use like physics
308:33 - for that like ammo JS or Canon
308:38 - JS but yeah we could have used R casting
308:42 - also I choose to to use the simplest way
308:47 - for this because yeah why not why not so
308:52 - check
308:56 - Collision okay this I will show you in
308:58 - the browser in a
309:00 - second how it works
309:03 - I go
309:08 - back okay I cannot move
309:11 - anymore I go right to the
309:14 - wall I cannot move
309:19 - anymore sometimes you may find that I
309:21 - cannot move like you know here because
309:24 - maybe we
309:27 - are very at the limit and maybe the
309:30 - painting or something it's it's blocking
309:33 - us because yeah it
309:35 - recognizes as a bounding box so just
309:40 - move and try it
309:43 - yourself but yeah it works so how we did
309:50 - this check
309:52 - Collision okay here I created uh this
309:55 - function check
309:57 - collision and in this
310:00 - function uh we will check if the player
310:03 - the user will intersect with this walls
310:08 - or this solid things that we might have
310:14 - but in this case we only have walls no
310:16 - other
310:18 - obstacles and uh I create inside this
310:21 - function check Collision I create this
310:24 - variable player bounding box okay this
310:28 - is created with uh creating a new
310:30 - instance of box three so new 3. boox 3
310:36 - and what is this this is to create a
310:38 - bounding box for the player so we have
310:40 - the player which is the
310:43 - camera we create like a bounding box for
310:46 - this to have it with us so that bounding
310:49 - box will serve as you know to find the
310:54 - intersection then I create a variable
310:57 - camer World position that it's an
311:00 - instance from just a Vector three this
311:03 - creates a vector to hold the camera
311:06 - position then this camera we access get
311:10 - World
311:11 - position to get the camera position and
311:15 - and store it in this Vector
311:18 - okay so we get the the camera position
311:21 - of this uh the camera represents the
311:25 - player position in this case Okay
311:28 - because the camera position is the
311:30 - player we move we with a c you
311:35 - know
311:37 - then from this player bounding box which
311:40 - is the Box three which is bounding box
311:44 - we just
311:46 - created I access this set from Center
311:51 - and size what is this and I passes
311:56 - parameters the camera position in the
311:58 - world and this vector with these
312:04 - coordinates so this uh set from Center
312:08 - and size is a method that checkes the
312:12 - center and size of this box okay and we
312:17 - set the players bounding box size and
312:20 - Center it in the camera
312:23 - position okay so basically it's just to
312:26 - to
312:28 - uh takes this and Center it and uh size
312:33 - it uh of the
312:36 - box and uh put it in the Camera World
312:40 - position we pass it here the
312:43 - parameter so it will Center on this
312:46 - camera
312:48 - position then I create uh a loop why I
312:52 - create this Loop for the walls we have
312:55 - the Wall Group
312:58 - we uh did this in the
313:02 - last tutorial that we created the walls
313:05 - we created a group of walls and now we
313:09 - look through it you know what the loop
313:11 - is right
313:15 - so w group. children because the group
313:19 - in three JS
313:22 - has the children
313:26 - inside
313:28 - so World group. children. length
313:32 - i++ so look through this uh children
313:37 - inside the wall the single wall
313:41 - is wall group. children I the element
313:44 - that is looping through iterating so is
313:48 - you know to get the wall the single wall
313:50 - is the the eye that is iterating because
313:54 - I is zero then I is one lies to it
313:56 - iterates on each wall on each children
313:59 - inside this group of 3jm
314:04 - and uh if player bounding
314:06 - box with this method intercepts box we
314:10 - pass the wall that bounding box so each
314:16 - wall has this bounding
314:19 - box okay check if the player bounding
314:23 - box intersects with any of the wall
314:27 - bounding boxes okay so if our bounding
314:31 - box the player intersects with this
314:34 - walls left front back you know all the
314:38 - walls bounding boxes because we have a
314:41 - bounding box also the wall have bounding
314:45 - box if it intersects return it true if
314:49 - not return it
314:50 - false so this is the function check
314:55 - Collision to check if the player's
314:57 - bounding box intersects with the
315:00 - bounding box of the walls around us I
315:04 - hope it's
315:05 - clear that's why I commanded every
315:10 - step and okay
315:14 - so this function where I call it I
315:18 - created this function to check and where
315:20 - I call it I call it in this update
315:23 - movement function where we move okay the
315:27 - user press keys it checks this object
315:32 - here if it's here return it to true so
315:36 - it means that we press one of those keys
315:41 - that is in the object we turn it to true
315:44 - and then if we then Al return to true we
315:48 - move it right with the speed that
315:54 - we defined here five multiply by data
315:58 - time okay so here in this update
316:01 - movement
316:02 - we pass this uh function check collision
316:06 - and here inside we have camera.
316:10 - position. copy and pass previous
316:14 - position if you remember previous
316:16 - position is the position of the camera
316:19 - before the movement so without getting
316:22 - confused after the movement is applied
316:25 - we press a key we move left or right or
316:28 - forward or backward after the movement
316:31 - is applied we check for collisions we
316:34 - move check for collisions do we have
316:36 - anything no continue moving move again
316:40 - move again with the speed of five
316:43 - multiplied by Delta time
316:46 - okay so we check for collision by
316:49 - calling this function here in the update
316:52 - move and check Collision move and check
316:54 - Collision if the Collision is detected
316:57 - at some
316:58 - points we will revert the camera to the
317:01 - previous position okay that is why we
317:04 - needed this variable here previous
317:06 - position and the previous position is
317:10 - karma. position. clone so the previous
317:12 - position we cloned the previous position
317:15 - where we were so we are here okay we are
317:19 - here this will be the previous position
317:21 - when we move so when we move that was
317:25 - the previous position okay I'm here I
317:29 - move one unit one matter forward I move
317:33 - one matter forward we check for
317:35 - collision with the function check
317:37 - Collision am I colliding with the wall I
317:41 - am not continue moving another
317:45 - meter
317:47 - forward check for Collision do I have
317:50 - any wall in front of me yes I have okay
317:54 - the check Collision finds that I'm
317:57 - intersecting with with with the wall
317:59 - what happens in the case if I find this
318:02 - checkol and returns that I am uh
318:05 - colliding return me to the previous
318:08 - position that we get it with this clone
318:12 - method okay so and that's it this resets
318:17 - the camer position which is the player
318:20 - to the previous position if I am
318:23 - intersecting with the wall
318:25 - okay and that's it uh if you just maybe
318:30 - might sign bit confusing I don't know
318:33 - maybe is just easy as it as it is but if
318:39 - you find a bit confusing just you
318:42 - know go back again just two times and
318:45 - I'm sure you will you will have no
318:49 - problems so this is for now
318:53 - for uh the movement update that is fixed
318:57 - and for the
319:00 - Collision
319:02 - this was the changes that I made for
319:07 - this what else I also added the checkers
319:11 - as you can
319:12 - see as you can see the checkers has like
319:16 - these
319:18 - Checkers wall texter like it's more
319:22 - realistic that the white material the
319:25 - simple
319:27 - material I found on internet you know
319:30 - here here on
319:32 - public you can check yourself I just put
319:37 - there some some textures that I found
319:40 - you can experiment and you know
319:44 - try all of this if you
319:48 - like another texter use whatever you
319:51 - want or I'm sure you can find better
319:54 - Checkers for the walls on internet on
319:58 - Google on Bing I use Bing now I don't
320:02 - use Google anymore but
320:06 - whatever
320:08 - uh you can use whatever you prefer and
320:11 - it's here let's find uh World texter if
320:15 - I'm not yeah World
320:18 - texter look at the comments that I edit
320:22 - okay uh yeah I will edit the at least
320:24 - the first time maybe we will delete it
320:26 - later to clean it but I will leave it
320:28 - because I know what it will be useful
320:32 - helpful for for
320:34 - someone so I changed here where we have
320:38 - the text loader. load that we explained
320:41 - the last time that it's the loader for
320:45 - the
320:47 - Checker uh I add this uh IMG white
320:51 - texture jpeg you can use you can try the
320:55 - others but I found this the best one
320:59 - from this one you know
321:02 - I didn't very you know deep research so
321:05 - you can find better texter you find it
321:08 - just please tell me on GitHub we can
321:11 - maybe change
321:12 - it free texter of course because yeah we
321:17 - we care about
321:19 - copyrights uh yeah you know this the
321:22 - world texter uh rap s equal to this
321:26 - repeat wrapping what is this confusing
321:29 - uh variable and I added the comment here
321:32 - W S and W T are properties of a texter
321:35 - that Define how the texter should be
321:39 - repeated in the X like left and right or
321:45 - you know in the y direction so we have a
321:47 - Tex first how we want to repeat this you
321:51 - know in the x axis or in the Y
321:56 - AIS uh these
321:58 - directions uh RS is the horizontal
322:02 - Direction the uh the X and r t is the
322:07 - vertical Direction the Y and this repeat
322:11 - wrapping that we get from three is one
322:15 - of the available wrapping modes and it's
322:19 - like you know it's the default usually
322:21 - wrapping mode for for
322:24 - chter okay so this means that the texes
322:28 - will be repeated in this specified
322:32 - Direction in this case w s which is the
322:36 - horizontal and again w t
322:40 - in you
322:42 - know the vertical the Y and this W texor
322:47 - repeat. set it sets you know to repeat
322:50 - uh
322:51 - property which is a vector two that
322:54 - defines how many times the texter should
322:57 - be repeated in this horizontal and
323:00 - vertical oh sorry uh
323:03 - directions and if we yeah if we choose
323:07 - uh one this means that the text will
323:10 - will not be repeated it will only be
323:13 - displayed once on the material etc
323:20 - etc okay so I changed also the texter
323:24 - here
323:26 - so that is for the wall texter but I
323:31 - want to show also something else uh
323:34 - another comment asked
323:38 - me how to rotate the paintings I'll show
323:41 - you here uh they have a
323:45 - problem they had a problem with the
323:49 - positioning this right and left wall
323:53 - paintings okay like position it uh the
323:56 - correct way because I suppose and they
324:00 - confirmed to me that they had this
324:03 - problem that the paintings were showing
324:06 - in front of us not you know so they
324:12 - wanted to know how to rotate these
324:15 - paintings that they adapt to the left
324:18 - and right walls I'll show
324:24 - you so where are our
324:29 - paintings yeah you see this code it's be
324:34 - it's becoming a bit hard to
324:37 - read I know you thought about it and
324:41 - that's why that's why I refactored the
324:44 - whole code and now we have like every
324:49 - functionality has a separate file you
324:51 - will see and uh I
324:54 - really uh advise you to follow that part
324:58 - a bit later I will do it
325:01 - later uh it took me some hours actually
325:06 - to to make that
325:08 - refactor uh but I advise you to follow
325:11 - because that is very important maybe one
325:14 - of the most important things in you know
325:18 - when you have a big project you need to
325:21 - follow
325:23 - this uh you know patterns and uh best
325:27 - practices uh make the code cleaner and
325:31 - modular and readable maintainable etc
325:36 - etc so yeah I advise you to to to check
325:40 - that that part
325:43 - later so we were in the paintings right
325:47 - so we want the painting where is the
325:52 - painting create
325:56 - painting here we
325:58 - are so in the last tutorial we had only
326:02 - two
326:03 - paintings so painting one and painting
326:09 - two
326:11 - that we pass here as a parameter to this
326:14 - function create painting which is here
326:17 - we have the image URL the width height
326:21 - and the position as parameters to create
326:24 - every chel here we created the texture
326:27 - the
326:28 - material the geometry and the mesh so
326:31 - basically we create this plane geometry
326:35 - for the paintings and every time we want
326:38 - to create a new painting we call this
326:41 - function create painting So painting one
326:44 - equal to create painting and we pass
326:47 - this parameters
326:51 - here custom parameters as we
326:55 - wish so I pass this zero J back the
327:00 - width 10 five height and this Vector
327:04 - three for the coordinates in X X Y and
327:09 - Z for the painting two the same thing uh
327:13 - now for the painting three and painting
327:16 - four for the left and the uh for the
327:19 - right and the left walls that was this
327:23 - issue of this plane in front of us
327:25 - instead of adapting to to to the wall so
327:29 - what I did here to fix that uh small
327:33 - issue so painting through here the same
327:36 - thing we pass the image URL we pass the
327:39 - width we pass the height the coordinates
327:42 - for the vector three X Y and Z and here
327:46 - uh to fix it we rotate this
327:50 - painting and in this case so painting
327:53 - three rotation. y we rotate on the y
327:58 - axis math. Pi ided by
328:03 - 2 and we mentioned math. Pi in previous
328:08 - tutorials if you remember but if you
328:10 - don't remember math. Pi is
328:15 - 180
328:17 - Dees okay so this is degrees in radians
328:21 - so math that Pi is
328:24 - 180° is
328:27 - half half the circle
328:31 - okay so math. Pi / 2 is
328:37 - 19° so I left the comment is if we don't
328:40 - rotate this it will show up in the front
328:42 - of us instead of
328:45 - line correctly on the
328:49 - wall okay this is the small fix small
328:54 - trick uh the same for painting
328:58 - four but the only thing the difference
329:02 - is that it's negative here okay so the
329:05 - same as above but
329:07 - negative just negative for for the other
329:13 - wall and yeah I also add added the the
329:17 - walls for the walls the paintings for
329:20 - the back
329:22 - wall so Al no I added two in the right
329:27 - wall two in the left wall and two at the
329:30 - back wall and that's why we have in
329:33 - total
329:36 - eight eight
329:39 - uh
329:40 - paintings and here you will see the same
329:44 - thing for the painting I8 which is the
329:48 - painting in the back wall I rotated it
329:53 - 180 degrees in the y axis because if I
329:57 - don't do that we cannot see
330:00 - the paintings from behind it like we if
330:04 - we if we see it here like we have the
330:07 - painting of the back wall so this is the
330:10 - palm of my hand is the
330:12 - painting if I am here I can see the
330:15 - painting but if I am here I cannot see
330:18 - anything I will not see it will be the
330:21 - texture will be visible only from if we
330:25 - have it in front of us okay so if I have
330:28 - the the painting here I will rotate it
330:32 - 180° to be able to see it okay this you
330:37 - could have run in this small bug if you
330:41 - did it yourself so yeah this
330:45 - is and these are some of the changes uh
330:49 - for the menu that you see a small
330:52 - animation and other things I'm not going
330:54 - to make the tutorial for that for CSS
330:57 - because we are not here you know to make
331:02 - a tutorial for about CSS but for 3js and
331:06 - 3D programming so but you will find this
331:09 - uh
331:11 - Styles in the
331:13 - CSS file here copy everything if you
331:18 - want to check how I did it Etc you can
331:21 - check you can check uh here because I
331:25 - dided some you know I added some key
331:27 - frames for the animations so it's
331:30 - interesting maybe for for
331:34 - someone so check here and copy it's in
331:37 - the GitHub or something else I had like
331:40 - a comment I uh on my GitHub uh someone
331:45 - opened an issue in the repository on
331:48 - GitHub because they were were having a
331:51 - problem with a project
331:54 - so the problem was that they were trying
331:59 - to
332:00 - make the project go live by you know
332:05 - clicking this go live here or you know
332:08 - usually how you do with HTML
332:13 - uh open on live server you know on
332:18 - HTML they open on live open with live
332:22 - server so open with live server but this
332:26 - doesn't work like that uh in the last
332:30 - last tutorial I think I didn't mention
332:32 - this so sorry if I didn't
332:35 - mention I think I did I don't remember
332:38 - but yeah to run the the project every
332:42 - time when you are on the GitHub
332:45 - repository click the button the green
332:47 - button there which is
332:52 - uh can I find just a second just a
332:58 - second let me do I have it
333:06 - here I'll show you I updated also the RM
333:11 - file so you have it everything explained
333:14 - here okay so we have everything
333:17 - explained here of course the first thing
333:20 - first uh you need uh okay download it
333:24 - here you see this green button code you
333:27 - can clone it with Git clone and pass
333:30 - this URL here
333:33 - so create a folder open the terminal and
333:37 - G clone
333:39 - URL or just download zip and open with
333:44 - visual Visual
333:47 - Studio okay I remember someone like
333:50 - corrected me like for the wrong spelling
333:55 - because I say visual but yeah Visual
333:58 - Studio whatever and uh G clone or
334:02 - download
334:05 - zip after you have this project on your
334:07 - computer of course you need no JS you
334:11 - should know this but yeah if you don't
334:14 - know you need no JS environment because
334:17 - JavaScript will run on the
334:20 - browsers supported by you know the
334:24 - browsers but locally we need nodejs to
334:28 - have the environment to be able to run
334:30 - JavaScript because not JS it's not a
334:34 - programming language
334:37 - okay
334:39 - uh of course you need Visual Studio here
334:42 - are the links to download and then after
334:45 - cloning or download the zip
334:48 - here clone or
334:50 - download you in the
334:54 - root in the root
334:56 - folder just run mpmi or mpm in it will
335:00 - install the not modules all the
335:03 - dependencies this big guy here this not
335:07 - modules that has like you know it's
335:09 - heavy as a black hole so it will install
335:13 - this I think because we as we said I
335:16 - mentioned we never never post this on
335:19 - GitHub they are too
335:22 - heavy uh after installing the
335:24 - dependencies we run CD SRC here
335:36 - okay stop the server okay from the
335:38 - beginning as let's say I'm from the
335:41 - beginning I have the git bar so I
335:43 - usually do p WD to to
335:48 - check the path but uh you can do uh CD
335:54 - if you don't use G bash but you use
335:58 - Powershell you use CD it will show the
336:03 - path I do
336:05 - PWD to check the path and I am on SRC
336:13 - folder okay I did CD uh dot dot to go
336:17 - back One
336:20 - Directory so now I am you know at the
336:26 - this 3D art gallery the root folder
336:30 - here you do mpm install or mpm I after
336:33 - installing the not modules you run CD
336:38 - SRC with CD SRC you go inside this SRC
336:43 - folder here because it's here that you
336:46 - should run the next command to run the
336:49 - project
336:51 - live look I'm here now on SRC you
336:55 - see and here just
336:58 - npx Vite run Vite which is the build
337:04 - tool we use to run our
337:09 - project locally
337:13 - okay our local server MPX V that's in
337:19 - just a second less than a second you
337:23 - will see this address here local or
337:27 - press h for help but
337:30 - just click here and you have the project
337:34 - live okay if you need help for you know
337:39 - press h r to restart the
337:43 - server uh you to show server
337:48 - URL o to opening browser C to clear the
337:53 - console yeah you clear
337:56 - everything and uh yeah and Q to to quit
338:00 - just to quit okay it stopped so you need
338:03 - to run it again if you
338:07 - stop V is very nice V is very nice now I
338:12 - only use V I don't want to see anymore
338:17 - create react up for example for those of
338:20 - you who use cact up I think is is going
338:23 - to die and I think it's is dying no I
338:26 - don't know if anybody uses
338:30 - anymore um I think neither is his
338:34 - creator likes it anymore but yeah V is
338:37 - very very cool it's the creator of Vue
338:40 - vuejs that uh created and I love VI by
338:44 - the way lately I'm not using react but
338:47 - I'm using view for my work and
338:50 - also
338:52 - whatever so this is the problem
338:56 - that someone opened an issue on GitHub
338:59 - for this so keep in mind node.js you
339:02 - need the editor of course after
339:05 - installing nodejs and nodejs is pretty
339:08 - straightforward to just download install
339:10 - it will do
339:12 - automatically uh open on vs code and you
339:15 - know follow these steps that we just uh
339:20 - mentioned okay for now is this uh The
339:24 - Next Step will be
339:27 - to to refect Factor this whole code okay
339:34 - and we will
339:37 - create file for every functionality okay
339:41 - it will have uh it's not so simple
339:44 - because yeah it's a mass with a big uh
339:49 - very long code and so I advise you to
339:53 - follow this part too
339:56 - okay I will do it in a second Maybe I
339:59 - will go and you know drink a glass of of
340:04 - water because
340:06 - yeah I'm talking too
340:13 - much okay now I will show you how to
340:16 - create the info
340:18 - card so the feature here that we get
340:23 - close to the artworks and we show the
340:28 - information
340:33 - so it's a nice feature to have not only
340:36 - for this project but also for other
340:40 - projects that you might
340:42 - create in the future
340:44 - so it would be good to to to learn
340:49 - it let's get back to our code and here
340:53 - as you can
340:54 - see there is a lot of changes because as
340:58 - I said I I refactored all the code and
341:02 - now we have this
341:05 - structured folders you see for every
341:10 - functionality we have a separate
341:13 - file and it's very clean now you see now
341:17 - this is our main JS it was like 500
341:24 - 600 uh lines of code before I refactored
341:30 - and now is just you
341:31 - know some line of codes and everything
341:35 - is uh
341:38 - cleaner I will explain this later but
341:41 - for now I just want to to to show you
341:44 - how I did the info card and then I will
341:48 - I will show you more in detail about the
341:52 - refactoring okay so for the info card I
341:57 - created a separate file because okay
341:59 - after refactoring the code I created
342:02 - everything like you see bounding box
342:05 - saling event listeners floor lighting
342:09 - menu movement painting data painting GI
342:12 - paintings rendering scene etc etc etc so
342:15 - for the info card is this component here
342:20 - this
342:21 - module painting info
342:24 - okay and uh here in painting gifo I
342:28 - create two two
342:30 - functions display painting info and hide
342:35 - painting info one function is to display
342:37 - and one one is responsible to to hide
342:42 - the card so this function first of all
342:45 - we create a variable info element and
342:47 - this variable is just to you know to get
342:49 - the reference to to the Dom to this
342:52 - element with ID painting info which is
342:55 - this one here in the in the HTML so this
342:59 - ID here we get a reference to this
343:02 - because inside
343:04 - here we want to create you know that
343:07 - element to show or
343:10 - hide
343:12 - so after creating this info
343:16 - element uh we set the content inside and
343:21 - to create the content inside this is
343:23 - Javascript it's nothing to do with 3js
343:26 - is vanilia Javascript vanilia van you
343:30 - know JavaScript plain
343:33 - JavaScript uh to
343:36 - create content inside we use inner HTML
343:39 - so info
343:41 - element. inner HTML equal to first we
343:46 - create a
343:47 - title and this title is from
343:50 - info. title and this info
343:53 - is an argument passed here I will
343:57 - explain that where we get it
344:01 - from so info. title uh info. artist
344:05 - info. description and the year okay so
344:08 - we have this element here and to
344:12 - display we use this class list. add and
344:18 - the class show this is to show to to add
344:22 - the the the class show here so to this
344:25 - element here we had the class show
344:29 - because we want to point to that
344:33 - later the same thing with this function
344:36 - hide painting info we create this info
344:38 - element to get the reference to that ID
344:42 - painting
344:43 - info and then we just remove the class
344:48 - show so here we have this class show and
344:51 - here we remove this class show and
344:54 - that's it two functions hide and display
345:00 - then
345:01 - when when we will use this and
345:04 - where here in the
345:07 - rendering as you can see now this
345:10 - rendering is now
345:13 - extracted here in a separate file but
345:16 - this was you remember in the last part
345:18 - of MJS there was the function render
345:22 - which is you know uh the animate uh
345:26 - function to Loop and render the scene
345:29 - and do the other stuff that will okay
345:32 - render on every
345:35 - frame because yeah in this render we
345:38 - call this request animation frame which
345:41 - calls the random function again so it
345:43 - runs over and over and over so this is
345:46 - the function to render things but yeah I
345:48 - refactored so it's not in MJS it's
345:51 - everything here so I import three here I
345:54 - import this displayed painting info and
345:57 - height P painting info from painting
345:59 - info JS this one that we
346:02 - were exploring together to export this
346:06 - functions from one module to another
346:09 - module again this is
346:11 - Javascript uh you add this
346:16 - export at the at the start okay so
346:19 - export function display function etc etc
346:23 - you can also make it an nrow function
346:26 - like
346:27 - export con
346:30 - display info
346:38 - equal okay so
346:42 - now now this is an nrow function yeah we
346:46 - can make it like
346:49 - that even here export
346:52 - const hide painting
346:56 - info equal error function
347:00 - okay as you prefer it's the same thing
347:03 - just you know this is more modern real
347:07 - function okay so to export functions you
347:10 - add this export here at the
347:14 - beginning and
347:17 - then uh if you there is also export
347:20 - default usually when you have only one
347:23 - uh component that you want to use you do
347:27 - the export default Etc but here export
347:30 - con is just when you have in one file
347:32 - different functions that you want to
347:35 - export this is another topic but yeah in
347:39 - basically you just add this
347:41 - export and you can export it in another
347:45 - file so here
347:47 - Import in this case you need to add the
347:50 - brackets here if you export it like this
347:53 - if if it was export default it will be
347:56 - without brackets again this is a another
347:59 - topic you
348:00 - can uh research more about this ways to
348:04 - you know to export modules in 3js U
348:08 - sorry in JavaScript because this is
348:10 - plain
348:12 - JavaScript but yeah we export these two
348:16 - functions okay to use it
348:18 - here and in this
348:22 - uh uh render
348:24 - function okay you remember again this is
348:27 - function we can again
348:29 - convert it into an nrow
348:31 - function it's not a problem it's the
348:33 - same
348:35 - thing
348:37 - uh in this render function which calls
348:42 - itself in a recursive it's a recursive
348:44 - call with this request animation frame
348:47 - again and
348:48 - again here what we do after we pass this
348:53 - update movement you remember the
348:55 - function update movement which was in
348:57 - main JS but again I will explain all
348:59 - this later but for now just focus on
349:02 - this uh feature to display the info card
349:06 - so we call this update info here in the
349:08 - render
349:09 - function uh we create first of all we
349:12 - create a distance three sh equal to
349:15 - eight it's like eight units or eight
349:17 - meters in this case Okay so this
349:21 - distance three sh is the distance that
349:25 - will be from us the user the player and
349:30 - the the painting the artwork as you
349:34 - prefer saying painting or artwork so
349:38 - it's the
349:39 - distance why we want this
349:42 - distance we want because at a certain
349:45 - distance we want to display or hide that
349:50 - painting so we need a variable to to
349:52 - store the
349:54 - distance then we create this let because
349:59 - it will you know it will not be a
350:01 - constant it will change we will use it
350:05 - you know this conl in JavaScript no need
350:08 - for for
350:09 - that so we create this painting to show
350:13 - what is this this is the varable which
350:15 - is
350:17 - responsible uh to store a
350:21 - value in which we want to show the
350:25 - painting or we want to not show show the
350:31 - painting uh explaining it a bit in
350:36 - detail I will show you the code here we
350:41 - have these paintings okay don't worry
350:44 - much about how we get now these
350:47 - paintings in this new refractor code but
350:51 - these
350:53 - paintings you know we get it as an
350:57 - argument
350:59 - uh we passed it here for this setup
351:01 - rendering I will explain it later but
351:04 - for now we Loop through this paintings
351:07 - okay paintings that for
351:08 - each and
351:12 - uh then we create a distance to painting
351:16 - and to get the distance to this painting
351:21 - from the camera to the painting because
351:23 - the player remember the player is the
351:25 - camera so we are the camera that we move
351:29 - as you know the player the player the
351:32 - the
351:34 - user so to get the distance from us to
351:38 - the painting we use camera which we are
351:42 - the user that position and we use this
351:46 - method here distance two and distance
351:50 - two we pass a
351:52 - parameter which
351:54 - is the object that we want to get the
351:57 - distance two and the object
352:01 - is the painting we want the distance to
352:04 - the painting
352:05 - so the parameter will be this painting.
352:08 - position get distance from the painting
352:11 - okay and we store it in this variable
352:13 - distance to painting simple as that now
352:16 - we create an N
352:19 - statement to check if distance to
352:23 - painting this one we get the distance
352:27 - that can be be one 2 three depending how
352:31 - far it
352:32 - is if this
352:35 - distance is less this than distance
352:38 - three should this variable here which is
352:40 - eight so if the distance from us and the
352:45 - painting is less than
352:48 - eight okay
352:51 - then the painting will be showed
352:55 - so the painting will be stored in this
352:58 - variable painting to show that's why we
353:01 - created it okay like a way to you know
353:05 - to know so set painting to show to to
353:09 - our
353:11 - painting okay in this case the painting
353:14 - will show we we have that
353:18 - value and then how we will use this
353:22 - logic here that we set the painting to
353:24 - painting to show if painting to show
353:27 - like if this is true okay so if there is
353:32 - a painting there to show because if this
353:35 - is
353:36 - true so it means that uh we are less
353:40 - than 8 m from the painting So if this is
353:44 - true and we are less than 8
353:48 - mters call this function display
353:50 - painting info which is this function
353:53 - here that we imported from this file
353:57 - which creates this
354:00 - H uh HTML
354:03 - elements
354:05 - okay so if painting to show is true call
354:09 - this function and pass inside painting
354:13 - to show. user data. info and this is an
354:18 - object from painting
354:23 - data
354:25 - okay so painting to show
354:28 - user data
354:34 - doino
354:39 - because this user data here we will get
354:43 - it from the painting so each painting
354:46 - you know so we'll have a user data and
354:49 - an info I will explain this on how I
354:51 - refactor the code but yeah at the moment
354:54 - you just need to know this display
354:56 - painting info and pass you know the info
354:58 - of that painting or else if this
355:03 - painting to show is not true hide the
355:06 - painting info so do not show okay and
355:10 - that's it this is we have this HTML
355:15 - here HTML element and we have the styles
355:19 - for this painting info I added the
355:23 - Styles you know some
355:27 - transition I add it at the top etc etc
355:30 - you can find these styles on GitHub okay
355:34 - and that's
355:36 - it this way we can display the info
355:45 - card okay for each
355:51 - painting the painting changes and the
355:54 - info card of course
355:56 - changes that that's
355:59 - it okay guys now I will
356:02 - explain um the refactored
356:05 - code so as you can
356:08 - see I have many files now and the
356:11 - MJS is
356:14 - cleaner
356:16 - so let's see these are the Imports okay
356:21 - so first of all we import everything
356:24 - from three as
356:26 - usually then we import scene and setup
356:29 - scene from
356:31 - CJs
356:32 - okay and then
356:35 - [Music]
356:40 - CJs here
356:43 - okay then we EXT uh uh get
356:47 - this these variables from the setup
356:50 - scene let's take a look at this uh
356:55 - scene and it is on this files scene
356:58 - scene okay
357:01 - here okay so I extracted all the logic
357:06 - and the code for the scene in a separate
357:09 - file okay so basically
357:14 - we import uh everything as
357:19 - three then we import the pointer locks
357:23 - we create this
357:26 - uh scene here
357:28 - as usually create a new instance of
357:31 - three sin this is the same code but with
357:35 - a difference that we have a function we
357:38 - create a function for that code that we
357:42 - had on Main js on MJS we had like the
357:46 - camera the
357:47 - render controls and everything the same
357:50 - thing okay but we create a function that
357:54 - we can export this is the difference
357:57 - okay
357:58 - so get that code and create a function
358:03 - which can be
358:04 - export
358:07 - okay and that's it so I added some
358:11 - detailed comments you can read and I
358:14 - think they will be useful if you forget
358:17 - something for example you
358:20 - can see the code and check the comments
358:24 - okay so you create the function and you
358:28 - can export it in other
358:33 - modules okay so
358:37 - here there is pretty much the same code
358:41 - that we had on on
358:44 - MJS it's just that we export it now here
358:48 - I don't know if I changed anything here
358:52 - but yeah the main thing is
358:54 - that we declare this
358:59 - variables camera controls and
359:02 - renderer and I return them here I return
359:06 - the camera controls and render so that
359:09 - we can use them in the other modules so
359:13 - this function
359:14 - returns this camera controls and
359:17 - renderer so we can use it in the other
359:21 - modules okay so we get the scene
359:26 - here uh
359:28 - okay as you can see now we can get
359:33 - this
359:34 - uh camera controls and render here that
359:38 - we were returning from setup scene
359:41 - function okay this is just a simple
359:45 - texter loader to load the
359:48 - texter and we need it here because we
359:51 - are using it here as
359:54 - a as an argument so then we have the
359:58 - walls we also extracted the code for the
360:02 - wallts in this create walls
360:05 - function which is imported from Walts
360:08 - do. JS as you can see let's take a look
360:13 - so
360:14 - wjs the same thing we need the three
360:17 - here because
360:19 - okay and we create a function which can
360:23 - be exported the same thing so this fun
360:27 - function
360:29 - takes two parameters scene and texture
360:32 - loader because yeah we need scene when
360:35 - we add things see that add for example
360:38 - and the texter loader because yeah we
360:40 - need the Checker loader to create the
360:43 - checkers and yeah this is there are also
360:47 - comments everywhere here and uh yeah as
360:53 - you can see this function Returns the
360:55 - Wall Group so the wall group is the
360:59 - group that
361:01 - has all the walls front back left and
361:04 - right so this function will return this
361:08 - wall group and we can use it in the
361:10 - other modules as we are using it here to
361:13 - render the walls in the scene because
361:16 - the main JS is the primary let's say
361:21 - file to render
361:23 - everything the main JS has modules that
361:26 - we need to render all the same okay so
361:30 - for the
361:31 - walls we have it here we create this
361:34 - variable even though we
361:36 - it's yeah we use it here but we create
361:40 - this variable and call this create
361:44 - walls which takes the scene and checks
361:47 - the
361:48 - loader so this is uh the beauty of
361:52 - functional programming because if you
361:55 - see
361:56 - here this gr walls takes two parameters
362:00 - okay scene and text to
362:02 - loader so how we get this scene because
362:06 - I don't have the scene here I don't have
362:08 - the scene here so we get it when we call
362:12 - it here when we call it here we also
362:16 - pass it here so SE here I get it from
362:21 - this scene from
362:24 - scjs
362:26 - so I import the scene from sjs here on
362:30 - MJS I pass it
362:33 - here as a an
362:36 - argument and
362:38 - then in the wals JS I can use this
362:44 - here can
362:48 - see I use it in this cind just to add
362:53 - this whole group basically I needed yeah
362:56 - just to add this but I don't have this
362:58 - scene here so I need to to to get it
363:01 - from Main
363:03 - JS which
363:05 - is
363:08 - also uh taken from this uh you know
363:14 - CJs okay and that's is that's it for the
363:17 - walls the same thing for the floor we
363:20 - import this function setup floor for
363:24 - floor
363:26 - JS and and it's uh Flor
363:32 - JS
363:33 - okay Flor
363:36 - JS the same thing import three because
363:39 - we will use it create this
363:43 - uh function that we can
363:47 - export and again the scene is passed in
363:51 - MJS where this setup floor is
363:54 - called so we don't have the scene here
363:57 - use it but in MJS when we call this
364:01 - function setup floor we pass the scene
364:05 - from yeah the CJs okay you see the
364:08 - beauty of functional
364:10 - programming it's the code is cleaner of
364:15 - course and yeah uh for the texter loader
364:20 - uh I just create a new from three
364:22 - because I can create it from three or I
364:24 - could pass it you know but I create a
364:27 - new tter loader and yeah the same thing
364:31 - and
364:33 - this does it return now this just adds
364:38 - the floor to the scene that's why I
364:41 - needed this just adds the floor to the
364:44 - scene and when we will call it here on
364:46 - MJS it will
364:48 - render the
364:51 - floor the same thing for the
364:55 - sailing you see how clean it is like
364:58 - this
364:59 - way and we can control and we can
365:01 - maintain the project better we can read
365:05 - it better if someone else uh wants to
365:10 - work with this project they can read it
365:13 - it's more readable and it's uh more
365:19 - maintainable and also
365:23 - for where are we okay sailing for we
365:30 - explained the
365:36 - lighting okay let's yeah let's start
365:39 - with yeah with paintings or lightings
365:42 - because yeah painting is a bit more
365:44 - complex so
365:46 - lighting we create this function set up
365:50 - lighting which takes scene and paintings
365:53 - as parameters that yeah we will pass it
365:56 - here on Main JS always this is the logic
366:00 - paintings we get it from create
366:03 - paintings from painting
366:07 - JS and we pass it
366:10 - here we create the ambient light and the
366:13 - spotlight we did this in the old
366:17 - tutorials we set up this settings for
366:21 - the spotlights and we return the
366:23 - spotlight here to create the
366:26 - spotlight
366:27 - uh we use this Spotlight and create like
366:31 - one two three and four with this
366:35 - coordinates okay and we add
366:37 - it to the scene the spotlight and also
366:40 - the other
366:42 - spotlights and that's why we needed the
366:44 - scene here and that is for the
366:48 - lighting then we have
366:53 - paintings we use this create paintings
366:55 - from
366:57 - paintings JS find it
367:01 - here so
367:03 - to create this uh you know we extracted
367:08 - that code for paintings that we had the
367:11 - function create paintings also in main
367:14 - JS and now we will use also the painting
367:18 - data which is another separated file
367:22 - painting data which
367:24 - has the data for you know know all the
367:27 - paintings we have info object here etc
367:31 - etc the image SRC width and
367:35 - height so this array. from if you don't
367:40 - know creates an array from an array like
367:42 - object the first parameter is the array
367:45 - like
367:46 - object the second parameter is a map
367:51 - function uh this creates like uh an
367:55 - array of four
367:57 - because we we we will render like uh
368:02 - four paintings for a wall four four four
368:07 - and four at the
368:10 - back the map function chases two
368:13 - parameters one is the element and one is
368:16 - the index the map function Returns the
368:20 - value that will be added to the new
368:22 - array okay so this map will return the
368:26 - value that will will be added to to the
368:28 - new array in this case we are returning
368:30 - an object with a painting data so we
368:33 - have the painting data
368:35 - here uh this is just a placeholder for
368:38 - the element we are not using and we yeah
368:43 - we don't need it at the moment and I is
368:46 - the index and we use it to set the
368:48 - painting number and since you
368:53 - know we had like plus one
368:57 - because uh yeah the index starts at zero
369:00 - as you know for the arrays so 0 + one
369:04 - but just don't get confused of this you
369:06 - can take a look yourself find it on
369:10 - GitHub so yeah it's just you know we can
369:14 - we can change this actually I will
369:16 - change it because
369:18 - I I will let like description for each
369:23 - each artwork so I will change this I
369:27 - just wanted to make it quickly you know
369:29 - four paintings for each wall just to set
369:33 - the position but we will change this all
369:36 - don't mind too
369:38 - much but this is the idea we import this
369:41 - painting data for from this painting
369:44 - data
369:46 - JS we create this function create
369:48 - paintings which takes scene and textor
369:52 - loader that
369:54 - again uh
369:58 - this arguments will be passed from Main
370:01 - JS where this create paintings is called
370:04 - here create paintings is called we pass
370:07 - scene and text the
370:10 - loader we create first of all a variable
370:16 - which stores an empty array this will be
370:21 - the array of
370:24 - paintings then we Loop through the
370:27 - painting data that we
370:30 - get from this file that we we already
370:36 - seen
370:38 - then we create a mesch for each painting
370:42 - like we create you know a 3D object for
370:45 - each painting and the 3D object is a
370:48 - mesh and the mesh is a combination of
370:51 - geometry and material as you
370:54 - already know by now
370:58 - then we set the position of the painting
371:00 - and the rotation of the
371:02 - painting then we add a user data
371:05 - property to the painting that will hold
371:07 - the painting info okay information so
371:13 - painting that user data we create this
371:16 - type of painting we just need this uh so
371:20 - we can check if the object is a painting
371:23 - or not so it's a type of painting and
371:25 - the info
371:27 - we add data. info we add the painting
371:31 - info to this user data object and data
371:34 - is the current painting object in the
371:37 - for Loop okay is the is the painting
371:41 - object we are
371:43 - iterating in this uh loop and info is a
371:47 - property of the painting object that
371:49 - holds the painting information and we
371:52 - saw that we
371:54 - have we have the information here
371:57 - for for each
371:59 - painting yeah then painting uh that cast
372:04 - Shadow true to set the painting to cast
372:06 - The Shadow and receive Shadow to set the
372:09 - painting to receive the shadow then in
372:13 - the end we push the painting to this
372:17 - array of paintings okay so we have the
372:21 - paintings there and we return this
372:24 - paintings okay we return this
372:27 - array of paintings so we have the
372:28 - paintings in this array that we can use
372:32 - later so
372:35 - here here we call this create paintings
372:39 - we create this variable paintings which
372:41 - calls you know it's assigned to this
372:45 - function and we can use them later the
372:48 - paintings which is needed here in the
372:51 - Bing box that we will
372:53 - check and also in setup rendering that
372:56 - we will check
373:00 - to is used here as a parameter you see
373:04 - like uh how nice it like this way it's
373:09 - different but it's way cleaner and also
373:15 - maintainable and yeah the lighting we
373:18 - have the bounding boxes we have the
373:21 - setup plate bottom oh yeah let's check
373:24 - the bounding boxes which which checks
373:27 - the walls and the paintings you see is
373:30 - to create the bounding boxes for the
373:34 - walls and also for the
373:38 - paintings uh we need this because we use
373:41 - the Collision you remember so for the
373:45 - Collision we used these bounding boxes
373:47 - that we checked if they
373:50 - intersects with with a player bounding
373:53 - box okay so we have this file here
373:55 - bounding
373:59 - box yeah we import three from three then
374:03 - we we create this create bounding
374:06 - boxes function which chees these
374:11 - objects and what is happening here we
374:14 - have also this condition if array that
374:17 - is
374:20 - array this like
374:23 - uh the contrary that it's like it it
374:27 - turns from True to false so if it's not
374:32 - uh an array and in this case we we check
374:36 - if the
374:37 - object if the object is an array or not
374:41 - if it's not we will assume that this is
374:45 - a 3js group it's not an array in that
374:50 - case if it's a 3js group if this is not
374:53 - an
374:54 - array we set objects to
374:59 - objects.
375:01 - children because we assume this is a 3js
375:05 - group and I will explain it more in
375:08 - detail here because in
375:11 - 3js a three group is a type of object
375:14 - used to create like you
375:17 - know parent child relationship between
375:21 - objects so there is a parent and then
375:24 - there are you know the children
375:28 - and uh yeah in this uh group in other
375:31 - words a group is an object that can
375:34 - contain other object in inside that's it
375:39 - and we we want sometimes this group
375:42 - because we can manipulate several
375:45 - objects at a time as
375:49 - one okay so the children
375:52 - property uh of the group of three group
375:55 - is the n array that contains all the
375:59 - objects okay so the child objects
376:04 - inside that are part of of of this
376:08 - group so when we add an object to a
376:13 - group uh with group. ADD as we added the
376:17 - walls wall group. add front wall uh back
376:22 - wall left wall and right wall we can
376:26 - access that object with group.
376:30 - children so we can access them uh when
376:35 - we
376:36 - need
376:39 - so in our code the create walls returns
376:43 - a group for the walls you remember we
376:47 - have the function create walls it it
376:49 - returns a group that contains several
376:52 - wall objects and when we pass this group
376:57 - to this create bounding
377:00 - boxes because this create bounding boxes
377:03 - will be
377:04 - used to create bounding boxes for the
377:07 - walls and for the paintings but the
377:10 - walls are three group the paintings are
377:13 - an array
377:15 - so this function here to check the
377:19 - objects parameter an array and
377:24 - also a three group grp we did it like
377:29 - this with this conditional okay I hope
377:34 - it's
377:35 - clear but yeah
377:38 - uh we when we pass this uh objects here
377:42 - to this function create bounding
377:45 - box uh we want to create a bounding box
377:49 - for each wall in the three
377:54 - group and to do that for the walls that
377:58 - are group we need to Loop over all the
378:04 - children all the children array of this
378:09 - group so when we call create bounding
378:13 - box walls
378:16 - here create bounding box
378:21 - walls the object's
378:24 - parameter of this function is a group
378:29 - objects so for the
378:32 - walls when we call it it's a
378:35 - group
378:39 - object and yeah we need to in order to
378:43 - to Loop over this wall in the group we
378:47 - need to set objects to objects. Children
378:53 - okay I I know it may sign a bit
378:56 - confusing but basically we are using
378:58 - this uh create bounding boxes for the
379:02 - walls which are group and for the
379:04 - paintings which are an array if they are
379:07 - group we need to to set this to the
379:10 - objects we need to set to objects.
379:12 - Children which is then the array of of
379:16 - objects wall
379:19 - objects uh so this was
379:23 - when uh this object objects were a group
379:27 - like the walls what what about when they
379:31 - are an array as for the
379:34 - paintings in that case like uh create
379:39 - paintings that we had in
379:43 - paintings paintings are an array here as
379:47 - you can
379:48 - see and in that case
379:51 - uh since create paintings returns an
379:54 - array and not three
379:57 - group The object's parameter this one
380:01 - objects is in Array so we don't need to
380:04 - do anything in that case as I explain in
380:07 - the comments uh
380:09 - below so for that reason that's why we
380:13 - start this function by checking if it's
380:16 - not an array if object is not an ARR
380:20 - assumes that it's a group and sets
380:22 - objects to
380:24 - objects uh if object is already an array
380:28 - it skips this this step so if it is an
380:32 - array and not a group it will skip this
380:35 - step and in that case we Loop through
380:40 - objects which is an array and we set you
380:44 - know a bounding box for each
380:49 - object then object. bounding box set
380:53 - from object which set the bounding box
380:56 - to that object which is you know the
380:59 - object iterated each
381:03 - object yeah maybe I didn't explain very
381:07 - well this part but yeah you can read the
381:11 - comments and I'm sure you will get it
381:14 - because yeah I commented this whole
381:17 - thing here and you will get it this is
381:21 - just because we are using the create
381:23 - bounding boxes here function to pass the
381:27 - walls and to pass the paintings and they
381:29 - are different one is a group a three
381:31 - group and one is an array and we need
381:34 - this
381:36 - check uh we have this add objects to
381:39 - scene which takes scene and paintings
381:42 - what is that we have this in scene
381:45 - helper
381:47 - JS is this just this piece of code here
381:51 - this function will take the scene and an
381:53 - array of objects
381:56 - which can be passed
381:58 - dynamically uh we choose and add each
382:02 - object to the scene so it will uh loop
382:06 - objects that for
382:09 - each at each object okay so this is just
382:14 - function an helper function to add each
382:18 - object to the scene why we need this we
382:20 - need it for the paintings as you can
382:24 - see we call this paintings here with
382:27 - create paintings we created the
382:29 - paintings we return the paintings the
382:32 - paintings
382:34 - array we return this paintings okay we
382:38 - created and we returns this paintings
382:41 - but we need to everything should be
382:44 - added to the scene as you know by
382:48 - now and with this helper function add
382:51 - objects to the scene we can add this
382:54 - paintings
382:56 - okay and that's
382:57 - it then we have setup play button you
383:01 - see that in on Main JS pretty much we
383:04 - see everything that we have so we see
383:08 - what we have here it's very readable
383:11 - even for someone else that just opened
383:14 - our project and they want to take a look
383:17 - and understand the code they see here on
383:19 - MJS everything and yeah they can
383:24 - understand and redirect it to this
383:27 - functions and modules so we have set to
383:31 - PL button and the file here set up plate
383:36 - button is from menu
383:43 - JS and this is for the menu to show or
383:48 - hide the
383:51 - menu
383:54 - okay
384:02 - ask show and hide the menu that's
384:11 - it
384:14 - okay so we had this hide menu and show
384:17 - menu you already know this functions
384:20 - because you had it on Main JS I just
384:22 - extracted the logic with just uh added
384:27 - this export to export it also the start
384:30 - experience you already know also for the
384:33 - play
384:34 - button which just gets a reference to
384:39 - this play button in
384:43 - HTML with ID play button this
384:48 - one then adds a click event listener to
384:55 - the play button to start you know the
384:58 - experience and that's it we have also
385:02 - the menual logic here
385:07 - separated uh this play button as we saw
385:11 - is uh exported to main
385:14 - JS and it we pass the controls to
385:20 - it here because we don't have the
385:23 - controls you see the functional
385:24 - programming
385:25 - we don't have the controls on this file
385:27 - on this module so we call this function
385:31 - here and we pass it from you know from
385:34 - here from njs because we get it here we
385:37 - get it from setup
385:39 - scene okay so we import the setup scene
385:42 - from scjs importing the setup scene
385:46 - we the structure this uh variables for
385:51 - camera controls and renderer that we get
385:54 - from setup
385:56 - C and then we pass it we pass this
386:00 - controls also here on setup play button
386:04 - and then we use it here on menu
386:08 - JS that's it the
386:12 - logic what else we have we have setup
386:15 - event listeners that again it takes
386:18 - controls as a
386:20 - parameter set up event listeners okay
386:24 - here
386:26 - and this is the logic and the code for
386:30 - the functions on key down and on key up
386:35 - the object uh key pressed that remember
386:40 - we we created in the last tutorial is
386:45 - from this movement uh file which is a
386:48 - separate uh
386:50 - file movement
386:53 - here uh we have this key press which is
386:58 - uh okay exports const key press so we
387:02 - can export this and we import it here
387:05 - from
387:06 - Movement we also import this show menu
387:10 - from menu JS that we already
387:14 - saw and we add uh the
387:17 - controls parameter which is the pointer
387:20 - lock controls and this path on Main JS
387:25 - here setup event listener we pass
387:29 - controls that we get from setup scene
387:33 - okay the same logic you see the beauty
387:36 - of functional
387:38 - programming and then we add the the
387:41 - event listeners uh to the document which
387:44 - is the whole
387:46 - page so we have key
387:50 - down uh we have key up and unlock okay
387:53 - so key down is the
387:57 - uh the event when the key is
388:01 - pressed okay key up is when the key is
388:05 - released and yeah unlock is when the
388:08 - pointer is
388:11 - unlocked so here we we add an event
388:15 - listen to the controls to show the menu
388:19 - when the pointer is locked show the
388:22 - menu okay we already did this part for
388:27 - these functions uh the event is the
388:30 - object that has the key property so ev.
388:34 - key in key pressed check if the key
388:37 - pressed by the user is in this key
388:41 - pressed object if yes we will set the
388:44 - value to to true so if the user presses
388:50 - Arrow up we will set this false to true
388:55 - if the user presses error right we will
388:58 - set this to true and so
389:01 - on okay if the
389:04 - user if you know the key that the user
389:08 - presses is is is not we will set it to
389:11 - fals as it is by default when the key is
389:14 - released for the on key
389:16 - up so the same as for key down we set to
389:20 - false when the key is
389:23 - released so if
389:26 - the key is in this key press
389:31 - object we set it to false when the key
389:34 - is released so the user releases the key
389:37 - we set it to false if it's already
389:40 - true okay this is for the event
389:43 - listeners we have this movement uh yeah
389:47 - that
389:48 - we we did in this tutorial that we fixed
389:52 - and updated for smoother
389:56 - experience so yeah I added some comments
390:00 - here details comments so you can
390:04 - read for everything but yeah just to
390:08 - make a recap we have this update
390:10 - movement always
390:12 - exported it takes Delta controls camera
390:16 - and
390:17 - walls okay uh we get these parameters
390:22 - from setup
390:23 - rendering
390:25 - where this function update movement is
390:29 - called and if you see here in rendering
390:33 - doj we have this function setup
390:36 - rendering okay you see these
390:40 - parameters okay so we take them from
390:43 - this setup rendering and setup rendering
390:46 - gets the parameters from Main
390:49 - JS this setup rendering gets these
390:52 - parameters from MJS because it's here
390:55 - setup
390:56 - rendering because yeah we get it from
390:59 - setup here because a bit movement is
391:01 - called here in the yeah in this
391:05 - rendering JS okay you see it takes this
391:09 - parameters here when where we call
391:13 - it parameters we get from setup
391:16 - rendering above from
391:19 - this which gets from MJS as we as we
391:23 - said
391:25 - this move speed is five multipli by by
391:29 - Delta time move speed is the distance
391:31 - the camera will move in one second we
391:35 - multiply by Delta Delta to make the
391:38 - movement frame rate independent or you
391:41 - know the frame rates this means that the
391:44 - movement will be the same regardless of
391:47 - of uh the frame rate that each
391:50 - computer might be different and this is
391:53 - important because the frame rate is low
391:55 - the movement will be slow and if the
391:57 - frame rate is high the movement will be
392:00 - fast this is not what we want we want
392:03 - the movement to to be the same
392:05 - regardless of the frame rate
392:07 - okay we have this previous
392:11 - position which is equal to camera.
392:14 - position. clone we clone the camera
392:16 - position and store it in this previous
392:19 - position
392:21 - okay because we will use this to rest
392:23 - the camera when we check the Collision
392:26 - so this previous position is the
392:28 - position before uh before we we we
392:33 - move so if we collide with the wall we
392:37 - will reset this position to the previous
392:41 - position so check the the keys that the
392:44 - user is is is press this code is self
392:48 - explanatory if we press error right or D
392:52 - move right and we pass the
392:55 - speed of this
392:58 - speed and then we check for the
393:00 - Collision after the movement is applied
393:02 - we check for collision by calling this
393:04 - function check Collision which checks
393:07 - these parameters of camera and
393:10 - walls and if a collision is detected we
393:13 - rever the Karma's position to its
393:15 - previous position okay so it cannot move
393:18 - through through the wall preventing the
393:21 - player yeah to to go through
393:26 - uh yeah if check
393:29 - Collision uh ca. position. copy previous
393:33 - position someone might ask here why uh
393:37 - position copy and not set position okay
393:41 - this we rest the ca to
393:44 - previous uh we use copy instead of set
393:47 - because set will set the position to the
393:50 - same object so if we change the previous
393:53 - position the camera Position will also
393:56 - change copy creates a new object and uh
394:01 - with the same values as the previous
394:04 - position so that's why it's this
394:06 - different so don't use set but use copy
394:09 - here to the previous
394:12 - position okay so we export this check
394:15 - Collision because we need it check
394:17 - Collision checks the camera and the
394:20 - walls as parameters and returns true if
394:23 - there is a collision
394:25 - okay and false if there is not a
394:27 - collision the camera parameter is the
394:30 - camera object and the walls parameter is
394:33 - The Walls Group not array the parameter
394:37 - are passed from update movement function
394:41 - where check Collision is
394:43 - called okay we have this update movement
394:46 - that has these parameters and we get
394:48 - this from there because we call this
394:52 - check Collision inside update
394:57 - movement uh and update movement gets the
395:01 - parameters from setup rendering where it
395:04 - is called so we get check Collision
395:07 - parameters from this update movement and
395:10 - update movement gets this parameter from
395:13 - setup
395:14 - rendering where update movement is
395:17 - called and setup rendering gets the
395:21 - parameters from Main Js
395:26 - you see setup rendering gets these
395:28 - parameters camera Etc from MJS because
395:32 - we are importing them here from the
395:35 - files and this is the
395:41 - logic
395:42 - uh so we check uh we create this and
395:47 - Export this check Collision we inside
395:51 - this function what happened uh we for
395:54 - recap we create a player bounding box
395:58 - which is an instance of three box three
396:01 - that creates bounding box for this
396:03 - player or
396:04 - user we create a variable for the camera
396:08 - World position which again is an
396:10 - instance of three Vector 3 class and it
396:15 - creates a vector to hold the camera's
396:17 - World
396:18 - position then we access this get World
396:22 - position method from with a camera
396:26 - camera that get World position and we
396:28 - pass Camera World position here is
396:31 - Vector three and this gets the camera's
396:34 - World position and store it in this uh
396:37 - Camera World
396:40 - position uh you know that the camera
396:43 - represents always the user the player uh
396:46 - in in our
396:47 - case then this player bounding
396:52 - box access this set from Center and size
396:56 - method and this sets the player bounding
397:00 - box to the camera's World position and
397:05 - size the size here is one one one
397:09 - because the camera is a single
397:11 - point this set from Center and size
397:16 - method takes two parameters
397:20 - so the center which is the ca word
397:23 - position
397:25 - and the size which is this Vector three
397:28 - okay the center is a vector uh Vector
397:32 - three that represents the center of the
397:34 - bounding
397:36 - box the size is also a vector three that
397:40 - represents the size of the the bounding
397:45 - box yeah the size is the distance from
397:48 - the center to the edge of the bounding
397:50 - box in each
397:53 - Direction so the size is 11 one the
397:56 - bounding box will be two units wide so
397:59 - 111 and the two units tall and two units
398:05 - deep if the size is 2 to2 the bounding
398:08 - box will be four units wide four units
398:10 - tall and four units deep Etc you can
398:14 - read more here if you forget or if you
398:16 - need
398:17 - again and yeah we create uh this Loop to
398:21 - Loop through the children uh of of the
398:26 - walls we Loop through each wall and we
398:30 - get the wall and then if the player
398:33 - bounding box intersects with this walls
398:38 - bounding box with this method intersects
398:42 - box and we pass the walls bounding box
398:47 - so it's like the code is
398:48 - self-explanatory and this naming is very
398:51 - clear so if the player Bound in box
398:54 - intersects with the walls bounding box
398:58 - okay return true if not if
399:03 - they doesn't uh
399:06 - intersect return false okay and that's
399:10 - it for the check Collision uh
399:15 - function and that's it I think we
399:20 - covered everything and set up rendering
399:23 - two set up rendering which is in the
399:27 - rendering rendering okay
399:31 - here the rendering is you know if you
399:34 - remember the last part of the code in
399:38 - the end we had this rendering
399:40 - function which in a
399:43 - recursive uh does a recursive call and
399:48 - uh
399:48 - it calls again and again in makes a loop
399:55 - so yeah we pass this parameters which we
399:59 - get from Main
400:02 - JS we create this clock from the buil-in
400:06 - 3. clock it it keeps track for the time
400:10 - between uh the
400:12 - frames and yeah we create this render we
400:15 - extract it from
400:17 - MJS we have the variable that we need
400:21 - Delta because as we mentioned the
400:24 - for the Delta which is
400:27 - clock. get Delta basically 3. clock.
400:31 - getet
400:32 - Delta and this Returns the time in
400:35 - seconds since the last
400:40 - frame uh
400:44 - then we have this update movement to
400:47 - update uh the movement which checks
400:50 - these parameters Delta controls camera
400:53 - and walls that we you know we explained
400:56 - before explaining the update movement
401:01 - function we create this variable
401:03 - distance three sh and set it to eight
401:06 - for example or you choose to set the
401:09 - distance from the player and the
401:13 - painting okay because we need this
401:17 - distance to create the the the logic for
401:23 - the info card so if we are closer than
401:26 - this distance we want to show the
401:30 - info if we are you know away than 8 m we
401:37 - don't want to show the info card we hide
401:39 - it okay so we also create this painting
401:43 - to show variables and we will see why we
401:48 - need
401:49 - it we take this
401:52 - paintings that that we pass here as an
401:56 - argument that we check from create
401:57 - paintings uh
402:00 - function we Loop through all the
402:03 - paintings which was an array remember
402:05 - that we
402:06 - discussed
402:09 - before we Loop through all the
402:11 - paintings and this distance to paintings
402:16 - uh variable will be the camera that
402:20 - position that distance to the paintings
402:23 - is self-explanatory we get the distance
402:26 - to the painting okay so this variable
402:29 - here is to get the distance to the
402:32 - painting how far is this painting
402:35 - because we have this three should of
402:37 - eight units eight
402:40 - meters so we get this with this method
402:43 - distance two and pass the painting
402:46 - position and then if this distance to
402:51 - painting is less than 8 8 m is less than
402:55 - distance three should so if we are like
403:00 - uh 7 m away from the painting we set
403:06 - this painting to show that we created
403:09 - here to
403:11 - painting this sets painting to show to
403:14 - this painting which is lesser than eight
403:18 - okay in this case we know that the
403:21 - painting will show we will use this
403:24 - this with this value because we know
403:27 - that in this case painting to show
403:31 - is set to this painting which is lesser
403:35 - than eight units so we will show the
403:39 - painting and here we see if painting to
403:43 - show if this is
403:45 - true and we are less than eight we are
403:49 - closer to to to the
403:52 - artwork display the pl the painting info
403:57 - if not hide the painting info and this
404:01 - to display as uh we saw
404:06 - already we get it from this
404:09 - display uh painting info and hide
404:12 - painting info which is from painting
404:15 - info.
404:16 - JS
404:19 - here okay
404:22 - display display place this element and
404:25 - hide just removes the class show and
404:29 - display adds this class
404:32 - show because
404:36 - uh yeah to this element with ID painting
404:40 - info we add the class
404:45 - show when we want to show the painting
404:48 - we remove the class show when we want to
404:51 - hide because we have this in
404:56 - Styles in the end you will
404:59 - see we have a style for the painting
405:05 - info
405:07 - show so painting info. show for the
405:11 - class of
405:12 - show we apply these
405:16 - Styles and we remove our ad and we have
405:20 - the other Styles as
405:22 - well and and that's it I think we
405:25 - covered
405:27 - everything yeah I think we covered
405:30 - everything so this is the
405:32 - refactor I think
405:35 - you like it more like this yeah leave me
405:39 - your thoughts what do you think about
405:41 - it and this is for this
405:45 - tutorial uh let's finish here thank you
405:49 - for following this and uh see you
405:54 - [Music]
406:03 - welcome back developers and 3D design
406:06 - enthusiasts today we are journeying
406:08 - further into the world of 3js as we
406:10 - continue building our 3D art gallery
406:13 - first of all you can see that we have
406:16 - brand new textures and they are in 4K
406:20 - resolution for the best quality
406:24 - and yeah the difference is
406:27 - visible I think it's much much better
406:30 - now I have added the new
406:34 - ceiling the
406:37 - walls and I really like the
406:40 - floor there are
406:44 - details and the quality is
406:47 - good then we have integrated the pointer
406:50 - lock controls toggle so now you can see
406:53 - seamlessly toogle between game mode
406:56 - giving you smooth navigation around the
406:59 - gallery and also the UI interaction mode
407:03 - letting you interact with on screen
407:05 - elements at is as you can see I press
407:08 - the space key and the poter lock
407:11 - controls are disabled so now I can use
407:17 - the mouse S I can click and you
407:21 - see I'm redirected to my landing page to
407:25 - my shop or wherever you want the user to
407:29 - be
407:31 - redirected this is the picture that some
407:33 - people asked for it in the comments so I
407:37 - edited but yeah you whoever wanted to
407:40 - touch the the artwork in the gallery but
407:43 - you had that do not touch sign and that
407:46 - stopped you right well now you will be
407:50 - able to interact with the paintings you
407:52 - can touch and you can
407:54 - click so you can do whatever you want
407:58 - you can uh attach other event listeners
408:02 - you can add your own logic but for now I
408:05 - added the logic to Simply navigate to an
408:09 - external website which will be our
408:12 - website but feel free to to make your
408:15 - your own logic about it it's easy
408:18 - customizable now so you can do
408:21 - it uh what else else uh if that's not
408:25 - exciting enough for this part six uh we
408:28 - have introduced also a VR button for VR
408:32 - support you can see we have the enter VR
408:35 - here this is also a feature that uh
408:38 - someone requested me by writing me on
408:41 - private so I couldn't uh make it sooner
408:47 - and I'm sorry for that because yeah uh
408:51 - that's someone that wrote To Me wanted
408:53 - to beat you know he had this project and
408:56 - really needed this feature but I was
408:59 - very busy but in the end yeah I at least
409:02 - started this feature to implement it so
409:06 - now we have this enter VR and we need to
409:09 - install an extension for this because I
409:12 - don't have a VR device and of course I
409:16 - cannot test it because I would need a VR
409:20 - device or headsets but but uh if you
409:24 - don't have it but you want to implement
409:26 - this you can download an extension on
409:29 - Google Chrome and that extension is
409:32 - called I think webxr
409:35 - simulator
409:37 - webxr simulator yeah yes it's this
409:41 - one install
409:44 - it and then go to your
409:51 - project open
409:53 - the the developer
409:55 - tools and here you should find this web
410:02 - Pixar open it and you can see now that
410:05 - we
410:07 - have the simulator and we can choose for
410:10 - example we have here Oculus Quest or
410:13 - Oculus go Etc Google Samsung
410:17 - Galaxy but yeah leave it here Oculus
410:21 - Quest and if we press enter VR you see
410:26 - that the scene turns black of course I
410:30 - cannot test it because I don't have the
410:33 - headsets but it shows that it works and
410:36 - if we go to the
410:38 - console you
410:40 - see web XR session
410:44 - started because I console log this so it
410:47 - means that it
410:49 - works we will go further into this and
410:52 - we will explore it together but follow
410:56 - me on this part
411:03 - six all right let's Dive Right In now
411:07 - we'll be adding an audio guide feature
411:09 - to our 3D art gallery this is an awesome
411:12 - feature that you could use to explain
411:14 - your projects or simply to guide users
411:17 - through your
411:19 - gallery and for this let's start by
411:21 - setting up some basic control controls
411:23 - for our audio guide in our
411:26 - HTML
411:29 - here we will need a
411:31 - div uh with a class of audio controls
411:35 - and two buttons one to start the audio
411:37 - and one to stop the
411:40 - audio so the shortcut for
411:45 - that audio
411:50 - controls and two buttons
411:53 - shortcut again for bottom
411:58 - bottom
412:00 - start
412:21 - audio
412:31 - okay we have this basic controls for
412:35 - this now let's switch to our JavaScript
412:38 - and we are going to create a module
412:40 - called audio guide where we will handle
412:43 - the audio functionality so create a new
412:46 - module
412:48 - here call it audio
412:51 - guide
412:55 - and as always we import three from
413:09 - three
413:17 - okay in this first line we will import
413:20 - the three as we always needed and we
413:24 - will declare a variable sound this
413:27 - variable will be our audio Source okay
413:31 - so we need an audio Source this audio
413:33 - Source will be this variable let
413:38 - sound after having this audio Source
413:42 - variable what we need we need the
413:45 - function that will make this possible
413:47 - and let's call it setup
413:50 - audio and since we needed to exported it
413:53 - would be export
413:56 - const
413:59 - setup
414:01 - outo
414:03 - okay so narrow
414:12 - function because we will need everything
414:15 - here
414:16 - inside so we have this uh setup audio uh
414:21 - this setup audio will will check as a
414:23 - parameter the camera because we need
414:26 - this camera parameter I will explain
414:29 - everything no
414:31 - worse
414:34 - so the first thing is for the
414:38 - audio um like in real life we have the
414:42 - music uh to be able to listen to the
414:46 - music we
414:47 - need our ears right so we listen to the
414:51 - music with we need some
414:54 - ears and the same thing in 3js we need
414:58 - this listener that will be will act as
415:02 - our ears okay so a variable for that
415:06 - const
415:09 - listener we are not going to call it
415:11 - ears so
415:14 - yeah listener and this uh we will get it
415:20 - from the audio listener uh class from
415:23 - three so new three do audio listener it
415:30 - is oh
415:31 - no it is
415:33 - it
415:37 - parenthesis okay uh make sure you are
415:40 - writing inside this function okay
415:42 - because when we will export it this
415:44 - logic will be inside this setup audio
415:47 - not outside because you will get errors
415:50 - ex ex so we defined our first function
415:55 - and the only one that we will need
415:58 - actually this takes the camera as a
416:00 - parameter and now inside this function
416:03 - we will create an instance of this three
416:07 - audio listener that as we said is
416:10 - essentially our ears to listen to to to
416:13 - the audio and the last thing is uh this
416:18 - listener will be added to the
416:20 - camera because
416:23 - let me explain
416:26 - camera. at we pass the
416:33 - listen this means that as the camera
416:36 - moves the sound will change accordingly
416:40 - creating a realistic audio experience
416:43 - okay that's why we attach this listen to
416:47 - the
416:49 - cover after that
416:53 - what we
416:54 - need we will need uh to create a
416:59 - new object which is 3. audio to pass our
417:06 - listener this will represent the audio
417:09 - Source in our
417:12 - scene let me explain we have this
417:14 - variable that we created and we said
417:17 - that this will be our audio
417:20 - source so
417:23 - sound equal to new
417:28 - 3.
417:30 - audio and to this audio we pass the
417:40 - listener
417:42 - okay this will represent the audio
417:46 - Source
417:47 - now what we need we need to
417:51 - instantiate AIO
417:53 - loader which will allow us to load our
417:57 - audio file because yeah we need to load
418:00 - the file and to load the file that we
418:02 - will download and put it somewhere in
418:04 - our project to load this file we need a
418:07 - loader and this loader is from three
418:10 - audio loader and that's it we will
418:14 - create uh for
418:16 - this
418:20 - const const AIO a
418:25 - loader and this audio
418:27 - loader as we said will be instantiated
418:31 - from
418:33 - three. audio
418:36 - loader it is here audio loader
418:39 - parenthesis don't
418:43 - forget now that we have this audio
418:47 - loader we are calling the load method
418:51 - and we will pass the file path where we
418:55 - have uh this sound this
418:59 - audio
419:01 - and we will also have another parameter
419:05 - apart from the file and I will explain
419:08 - while writing it down audio loader.
419:13 - load pass the file path here that can be
419:18 - yeah we will add the folder sounds
419:22 - inside this folder sounds eventually
419:24 - will be the name of of the the audio
419:27 - let's rename our audio audio guide
419:29 - because maybe we will have more than one
419:32 - audio so that OG you know the format
419:36 - OG and here as I
419:39 - said inside
419:41 - this oh I'm outside
419:44 - okay
419:46 - inside we we will also pass a callback
419:49 - function and this callback function will
419:52 - run once the audio file is
419:55 - loaded so
419:59 - function that we will run once the audio
420:03 - file is loaded we will pass here the
420:05 - buffer
420:07 - y
420:11 - because because here we will set the
420:14 - buffer of our sound object to the loaded
420:17 - audio data and the nameing in 3js is
420:20 - always intuitive so we we use this uh
420:23 - methods that the naming can explain
420:26 - itself so sound our sound set
420:32 - buffer and we just pass the buffer that
420:35 - I pass it here as a
420:37 - parameter
420:39 - also this callback that uh will run once
420:43 - the audio file is loaded we will set the
420:46 - buffer but also we want to
420:48 - to to enable looping because yeah
420:52 - for example I want to add the background
420:55 - music at the moment and I want just to
420:57 - to Loop it uh the same thing the naming
420:59 - is uh self-explanatory of this method so
421:06 - sound. set
421:09 - loop and you set it to
421:13 - True simple as
421:15 - that also you might want to to adjust
421:19 - the
421:21 - volume sound. set
421:24 - volume and from a range from 0 to one
421:27 - you can
421:28 - choose
421:32 - 0.5 okay make sure everything is inside
421:36 - the curly brackets of this setup
421:39 - audio now that we have this sound and we
421:42 - created the loader we need uh two
421:46 - functions and we create the start audio
421:49 - the function to start the audio
421:52 - that we will call it and also a function
421:55 - to stop the audio and these two
421:58 - functions are pretty straightforward
422:01 - okay so export con
422:05 - start
422:18 - audio in this case to follow the logic
422:22 - uh when you create things when you
422:24 - create functions in programming you want
422:27 - that if there is a if there is a sound
422:31 - you want to play it but you want to
422:32 - check if there is a sound play it then
422:37 - if it's currently plain then pause it
422:40 - okay this is the logic because you you
422:42 - had the sound okay now you just want to
422:45 - start or stop
422:48 - it export
422:50 - cost
422:57 - yeah yeah yeah it's
422:59 - inside let's put it
423:03 - outside it's a separate
423:08 - function as I said it's pretty
423:10 - straightforward is there is a if there
423:12 - is a
423:13 - sound if sound if
423:17 - true just play it for that sound that
423:22 - play simple as
423:24 - that the same logic for stop
423:30 - audio export
423:32 - const stop
423:42 - audio if sound if it's currently
423:48 - playing you want to to stop it it's the
423:51 - the same thing not stop but
423:55 - pause so sound. pause
424:00 - okay yeah and that's it the last thing
424:03 - that we
424:04 - need finally we will import this setup
424:08 - audio
424:12 - function we will import it to our main
424:14 - JS okay we call it so we have the audio
424:18 - in our
424:19 - SC so go to main J
424:22 - s import
424:27 - this setup
424:36 - audio okay it's uh not an a default
424:39 - export so don't forget the curly
424:44 - brackets you know that I
424:48 - know
424:50 - from
424:55 - audio
424:58 - guide and then just call it
425:00 - here in
425:03 - MJS set up audio and you pass the camera
425:07 - as a
425:08 - parameter yeah you are passing the
425:10 - camera because you are using it here in
425:12 - the audio guide file you see you are
425:15 - using the camera that you attached The
425:17 - Listener to the camera to be able you
425:21 - know to to create that uh 3D experience
425:24 - as you move in the scene but you don't
425:27 - have any camera
425:29 - here defined in this
425:33 - file JavaScript doesn't know anything
425:36 - about this camera so yeah you have the
425:39 - camera here because you are getting it
425:41 - from setup scene and that's why you pass
425:44 - it here to use it also
425:47 - here and that's it we now have a working
425:50 - audio guide I don't think we have any
425:53 - errors oh okay I need to restart it you
425:58 - see here start audio guide stop audio
426:01 - guide yeah I need to
426:03 - put the audio file in my project because
426:06 - I don't have it but yeah we should not
426:11 - have any problem we will test let me add
426:15 - the
426:20 - file
426:23 - okay guys before we continue with the
426:26 - new functionality of the pointer lock
426:28 - controls to enable or disable them when
426:31 - we press a
426:33 - key I just want to add a small fix for
426:37 - the audio guide file because sometimes
426:40 - you may have some issues on playing the
426:43 - audio okay you will wait for it and it
426:47 - will not play
426:49 - immediately and this is due to the
426:54 - asynchronous nature of audio loading in
426:56 - JavaScript and how the web audio API
427:00 - handles playback
427:02 - requests and here is an adjusted version
427:05 - of this audio guide file that maybe
427:09 - should work more
427:11 - reliably there are just a few lines of
427:14 - code really so we create first a new
427:18 - variable and this variable will be
427:21 - called buffer loaded and by default it
427:25 - will be
427:36 - false
427:37 - okay this flag is to track if audio
427:41 - buffer is loaded or
427:43 - not and here
427:45 - [Music]
427:47 - when we are using this load method when
427:51 - we are are setting the
427:52 - buffer and setting the
427:56 - loop here we will set the buffer loaded
428:00 - to
428:08 - true this will set buffer loaded flag to
428:10 - True once the audio buffer is
428:13 - loaded because
428:15 - yeah we are using it we are loading the
428:18 - sound here we are setting the buffer
428:21 - setting the loop volume and also the
428:24 - buffer loaded it will be true and why
428:26 - because here when we are starting the
428:29 - audio and here we have the condition if
428:32 - sound is
428:33 - true so if there is a sound we will
428:41 - add
428:44 - and so if sound but
428:48 - also buffer loaded true
428:52 - so if there is a sound and if the buffer
428:55 - loaded is
428:57 - true so check if the buffer loaded
429:00 - before playing then sound.
429:04 - playay and that's it this is the fix and
429:08 - that's all it should be better now for
429:12 - the asynchronous nature of JavaScript in
429:15 - this version buffer loaded is a flag
429:18 - that tracks whether the audio buff
429:21 - buffer is loaded we only allow the audio
429:24 - to be played if the buffer is loaded
429:27 - okay so that's why we said buffer loaded
429:29 - to true this approach ensures that we
429:33 - don't attempt to play the audio before
429:35 - it's ready which can cause issues or
429:39 - inconsistencies however please know that
429:43 - it may still take some time to load the
429:45 - audio data especially for large files or
429:49 - slow network connections dur in which
429:52 - the audio cannot be played so keep in
429:55 - mind
430:02 - that all right let's continue fixing the
430:05 - pointer lock controls
430:08 - now and here we should go to the file
430:12 - event
430:13 - listeners because here is where we will
430:17 - make the changes for the pointer
430:20 - locks at the top we will introduce a new
430:24 - variable lock pointer which will keep
430:28 - track of the state of the pointer lock
430:31 - okay if it's true it means that the
430:34 - pointer is locked and we are in the game
430:37 - mode if it's false it means that the
430:40 - pointer is unlocked we can interact with
430:43 - the UI elements
430:46 - okay so let's introduce this new
430:49 - variable and follow me step by step so
430:54 - let uh
430:56 - lock
431:00 - pointer and by default it will be
431:05 - true and also another variable for the
431:08 - menu to show it uh when it's unlock or
431:12 - not so
431:14 - let
431:16 - show menu
431:20 - unlock
431:23 - and this by default is
431:28 - fult so these two new variables lock
431:32 - pointer and show menu unlock lock
431:35 - pointer will help us know the current
431:37 - state of the pointer whether it is
431:39 - locked or not simple as that show menu
431:43 - unlock will be a flag that determines if
431:47 - the menu should be shown when the
431:49 - pointer lock is locked
431:51 - simple as that okay now we should change
431:57 - a bit our code and what we will change
432:01 - are this key down key up and
432:05 - unlock
432:07 - okay so first of
432:09 - all we will change uh the unlock to show
432:15 - the menu or
432:17 - not and here we will change the second
432:20 - parameter meter which now is simply the
432:23 - show
432:26 - menu okay that we get from menu
432:30 - JS to show the menu which is a module
432:33 - separated
432:34 - module here we will change the bit we
432:37 - will add a
432:39 - condition let's add
432:43 - first a
432:48 - function and this Arrow function
432:55 - this Arrow
432:58 - function we'll check this
433:02 - condition
433:05 - if show menu
433:09 - unlock
433:13 - okay then we show the menu so if this
433:17 - flag is true then we will show the menu
433:20 - simple as that
433:22 - so we simply call the show
433:29 - menu okay that you know we have it
433:35 - imported and yeah else the show menu
433:39 - unlock will be
433:41 - false so show menu
433:44 - unlock will be
433:49 - false that's it
433:56 - too many comments but
434:00 - yeah in this part we add this event
434:03 - listener
434:04 - to the unlock
434:08 - event so we check whether to display the
434:11 - menu when the pointer lock is released
434:14 - and after after that we rested the flag
434:17 - back to the false value
434:23 - okay now next thing we want to do is to
434:27 - create a
434:28 - function to toggle the pointer
434:31 - lock so let's create this
434:34 - function and let's call it toggle
434:38 - pointer
434:40 - lock so
434:42 - function
434:44 - toggle pointer
434:47 - log it will take as parameter the
434:56 - controls and inside the function we will
435:00 - check the condition to toggle it if log
435:06 - pointer so if it's true the variable
435:09 - loog pointer which initially is true
435:13 - then we want the controls to be locked
435:16 - that's why we have the parameter
435:18 - controls because we want to set the
435:20 - controls
435:22 - to lock or unlock okay so without
435:25 - getting confused if you see the code
435:27 - it's way
435:29 - easier so the condition if lock
435:34 - pointer which is the variable that we
435:37 - just
435:39 - created if lock pointer what we do we
435:43 - lock the
435:45 - controls so
435:47 - controls.
435:49 - loock
435:56 - else if the condition is not met that
436:00 - what we want to do we want to set the
436:04 - controls to
436:07 - unlock so
436:09 - controls.
436:12 - unlock okay so we have the controls as a
436:16 - parameter we will call it in the main JS
436:19 - etc etc etc
436:24 - but also in the else block we also want
436:28 - to set the show menu unlock to false
436:34 - right show menu unlock it will
436:38 - be
436:45 - false I hope this is clear the last
436:47 - thing that we want is
436:51 - to toggle this loog
436:54 - pointer here so loog
436:59 - pointer
437:02 - equal exclamation mark loog pointer
437:06 - which is basically set the buan value to
437:11 - to to its the contrary so set it if it's
437:15 - true make it false if it's false make it
437:17 - true this is the meaning of this
437:20 - exclamation
437:22 - Mark but yeah I know that you already
437:25 - know this I'm just reminding you the
437:28 - basic
437:30 - things okay so this toggles the lock
437:35 - pointer variable that we created at the
437:39 - top just
437:45 - tole
437:47 - okay and that's it for this part of code
437:52 - this
437:53 - function is called when we want to
437:56 - toggle the state of the pointer lock if
437:59 - the pointer lock is currently
438:02 - locked meaning that the lock pointer is
438:05 - true
438:08 - initially we lock and V Versa or vice
438:13 - versa in English we also toggle at the
438:17 - end the value of log pointer at the end
438:20 - so this function
438:23 - is keep it up to date with the actual
438:26 - state of the pointer
438:29 - lock and this is
438:33 - done so now that we have this function
438:37 - toggle pointer
438:39 - lock we can toggle now the pointer lock
438:44 - when we press a key that's what we
438:48 - wanted to do right we wanted that press
438:51 - a key and toggle the pointer lock in
438:55 - game mode
438:58 - or using the UI elements so being able
439:03 - to use the mass events okay
439:07 - since now we are not able to use the
439:11 - mouse events on click because the poter
439:14 - lock controls won't let us so with this
439:18 - function we will disable or enable them
439:23 - based on how we want it to be so we want
439:29 - the pointer locks to move but when we
439:31 - want to click something we want to stop
439:33 - and deactivate them and simple as that
439:36 - we will do it when we press a key so
439:39 - this is a custom way function to to make
439:47 - this to solve this problem that we had
439:51 - that some people requested in the
439:54 - comments okay so we have this function
439:58 - toal point a
439:59 - lock let's create a condition no not
440:03 - here but we will create the condition
440:05 - inside of this Onkey down event because
440:08 - there is where the event keys are
440:11 - registered you see event keys in key
440:13 - press that we have an object if you uh
440:17 - forgot we have this key pressed
440:21 - that if you want to check it quickly
440:24 - okay it uh has all this uh values false
440:29 - or initially and then we check them if
440:33 - they are pressed Etc so this is to
440:36 - control the event keys that we press the
440:40 - input by the
440:41 - user and here on this function on key
440:45 - down that is the event that
440:51 - checks if we press a
440:54 - key below this condition that we already
440:57 - have we will add our new condition so if
441:02 - we press the space bar we will choose
441:04 - space bar for this we can use any other
441:08 - key but I think space bar is
441:11 - uh yeah it's uh better it's
441:15 - practical so if we press the space bar
441:18 - we toggle the point l so if it is true
441:21 - it will be false if it is false it will
441:23 - be true we toggle
441:26 - it
441:28 - if EV that key the
441:33 - same equal
441:37 - oh equal for the space bar is
441:41 - just an
441:44 - empty space
441:49 - here we toggle we call the function and
441:52 - that's it toggle pointer lock and we
441:55 - pass as a parameter the
441:58 - controls
442:01 - here this is this space
442:06 - bar making again the summary of this
442:10 - function will be used to toggle the
442:13 - state of the pointer
442:14 - lock which means that if the pointer is
442:17 - currently locked it will be unlocked and
442:19 - if it's currently unlock it would be
442:22 - locked okay it's a playing with words
442:27 - this is a convenience feature for users
442:30 - to easily switch between the game mode
442:33 - the immersive mode and the UI
442:37 - interaction
442:38 - mode that we can use the mouse
442:45 - events we can also add other checks for
442:50 - other keys that we want to use for
442:53 - example we can set a key to start the
442:56 - audio we can set a key to stop the audio
443:00 - we can set a key to show the
443:03 - menu and many other things we can do all
443:05 - of that okay maybe we
443:09 - can use uh now the Escape key so if we
443:14 - press the Escape key we want what we
443:17 - want to do if we press the Escape key
443:20 - we want to set the controls to
443:23 - unlock okay press the escape and it will
443:26 - be
443:28 - unlock also we want to to show the menu
443:32 - so we will set the show menu on lock
443:34 - variable to
443:36 - True uh let's do it with code so it's
443:40 - easier to to understand so again the
443:42 - same thing
443:45 - if ev.
443:48 - key equal is Escape which
443:52 - is the code for the Escape
443:57 - key we want to do a set of things first
444:00 - of all we show the menu we press the the
444:03 - Escape key we want to show the menu if
444:05 - we are let's say uh with the pointer
444:08 - locks you know we press Escape show the
444:12 - menu stop the pointer locks or you know
444:15 - the
444:16 - exploring mode so first of all call call
444:20 - show
444:25 - menu then uh we want to set the variable
444:29 - to true the show menu unlock which is uh
444:33 - responsible to check the state for this
444:36 - so
444:39 - show menu
444:42 - unlock to
444:47 - True also we want as we said to set the
444:51 - controls to
444:53 - unlock you don't get to be confused with
444:56 - lock unlock because you know for the
444:59 - controls but I think now you are
445:01 - familiar with
445:04 - this so set the controls to
445:14 - unlock also as with the menu we want to
445:19 - change this variable that we had at the
445:22 - top so the variable that which is
445:26 - responsible to track the state so log
445:30 - pointer we set it to false in this
445:38 - case Okay so the lock pointer is
445:42 - false and that's it we also have this
445:45 - for the Escape
445:48 - key
445:56 - okay you see I press the Escape key I
445:58 - show the
446:00 - menu and set it the unlock controls okay
446:04 - so it works what else we can do we can
446:07 - add
446:08 - also the enter key to start the game to
446:12 - start the the exploring mode so if we
446:15 - press the enter key what we want to do
446:18 - let's say
446:22 - uh now we have the menu okay so what we
446:26 - want to do and the also the controls are
446:29 - unlocked so if we press the enter we
446:33 - want to hide the menu and also we want
446:36 - to set the controls to lock and set the
446:39 - variable for
446:41 - that it's easy it's this the same thing
446:46 - you can do
446:48 - it without my
446:51 - help so if ev. key
446:57 - equal to
447:02 - enter as we said we want to hide the
447:05 - menu first so called HDE
447:09 - menu okay that you see we
447:14 - imported hide menu and show menu from
447:18 - the menu Js
447:20 - which we have here okay you see we have
447:24 - two functions show menu and high menu
447:27 - which
447:28 - basically wheel
447:30 - Styles they show our height simple as
447:35 - that where are we okay we are here so if
447:40 - we press enter we hide the menu also we
447:43 - said we want the controls to
447:46 - lock so controls do
447:51 - lock okay and don't forget to set the
447:54 - variable to true so the variables is
447:57 - responsible to you know to check to be
448:00 - set because with that variable
448:04 - we keep track of the state of the
448:08 - pointer logs so log pointer set it to
448:16 - True
448:18 - okay and then that's it we also have
448:22 - Escape we have
448:24 - enter and uh we have the space
448:40 - key okay guys I was testing it so the
448:44 - toggle pointer lock when we hit the
448:46 - space bar doesn't work and let's
449:00 - check okay I see a few issues here that
449:05 - we should
449:06 - fix but first of all let me change this
449:11 - variable
449:13 - name and then we fix the
449:18 - issues
449:46 - okay so these isues are
449:51 - two issues the first no three issues
449:55 - actually the first are these two event
449:59 - listeners
450:07 - here the first are these two event
450:10 - listeners here we should pass the event
450:13 - and the
450:14 - controls
450:15 - also we should
450:18 - pass
450:21 - the controls
450:26 - here because yeah of course we are using
450:29 - the
450:31 - controls so we should pass here as the
450:33 - parameter controls this is a space
450:36 - should be correct so the only thing to
450:38 - fix are these two event
450:41 - listeners okay so let's fix
450:48 - it
450:52 - so here on this ony
450:55 - down let's
450:58 - pass the event cre ER
451:05 - function and on this ony down let's pass
451:08 - the two parameters event and
451:13 - controls okay the same thing for enia
451:46 - yeah okay it should be okay now
452:00 - here we have the controls here we have
452:02 - the controls I think it should work
452:05 - now let's
452:08 - try pointer locks are enabled let's
452:13 - press space okay it
452:17 - works ah okay okay it works the first
452:21 - time but the toggle doesn't
452:24 - work so this is correct but the
452:28 - tole doesn't work so the second time
452:32 - that I press the space doesn't work and
452:37 - probably
452:38 - is the problem
452:42 - here okay I saw it here you see
452:45 - controls. loock the parenthesis
452:50 - okay we should call it this lock
452:54 - method and yeah I
452:57 - think yeah unlock parenthesis yeah yeah
453:01 - I think that's the issue let's
453:05 - try press space it
453:08 - works okay press again it
453:11 - works yes now it works this is
453:18 - fixed
453:21 - okay now that we fixed the pointer locks
453:24 - controls
453:26 - toggle we want to add the functionality
453:30 - that we discussed previously so we are
453:33 - going to help the users interact with
453:35 - our 3D scene by enabling them to click
453:39 - on
453:40 - paintings which will then open up
453:43 - Associated web
453:44 - pages something that uh many of you
453:49 - wanted to to have the main components of
453:53 - these features are first The Click event
453:57 - handling then the ray casting that we
454:00 - didn't
454:02 - cover the painting object interaction
454:05 - and to break it down with the
454:08 - explanation step by step uh let's see
454:13 - the code that we are going to create for
454:16 - that first of all let's create a new
454:19 - module and let's call this module click
454:28 - handling and first thing first we want
454:32 - to import the
454:36 - three import
454:40 - three front
454:44 - three okay
454:47 - and before creating the function because
454:51 - we need the function click
454:53 - handling we need two
454:57 - variables okay so these variables
455:01 - are the mouse coordinates and the Ray
455:09 - Caster let
455:12 - Mouse we create a new Vector two for
455:16 - this so from the three new
455:19 - new
455:21 - 3. Vector
455:25 - 2 and for the r
455:31 - Caster let R
455:36 - Caster new three.
455:47 - raycaster okay
455:57 - now we created this module and now we
456:00 - will create a function with the same
456:03 - name a click handling that will accept
456:06 - some
456:12 - parameters so function click
456:17 - handling
456:24 - with the parameters renderer camera and
456:29 - paintings arguments
456:31 - actually so
456:34 - render
456:35 - camera
456:37 - paintings okay we don't have this
456:42 - defined anywhere in this file but you
456:45 - know by now that we will call this
456:49 - function here in the main JS and we'll
456:51 - pass you know the camera etc
457:03 - etc I will create this
457:07 - function and we'll explain
457:09 - it after writing it down uh what I wrote
457:14 - and why and step by step with the
457:16 - explanation of it okay but uh the first
457:21 - thing is we want to register an event
457:24 - listener for the click event so each
457:29 - time a click happens we want to register
457:31 - it in the screen so later we know if
457:36 - this click was in the painting or
457:41 - not so access the
457:46 - renderer then the D elements
457:50 - and we attach an event listener to to to
457:54 - this uh D element
457:58 - sorry so add event
458:09 - listener and it will be a click
458:17 - event then
458:19 - with an nrow function that we pass the
458:21 - event to to use
458:31 - it and here we will use the coordinates
458:35 - for the mouse for the X and the Y uh
458:40 - coordinates
458:44 - okay so
458:46 - here uh the mouse that we created the
458:49 - vector
458:50 - 2 mouse.
458:54 - x
458:55 - and we should normalize this but I will
458:59 - explain after writing
459:03 - it so mouse. x uh we assign it to the
459:09 - event.
459:13 - clientx
459:14 - okay divided uh you have heard of this
459:18 - when window. inner width and window.
459:20 - inner height do you
459:25 - remember inner
459:30 - width and we normalize
459:33 - it for those that uh don't know what I'm
459:38 - talking about I will explain minus
459:44 - one and the same thing for the Y
459:54 - Y and here inner
460:03 - height
460:08 - okay here we registered an event
460:11 - listener on the click
460:13 - event
460:15 - okay I sorry I have just small back here
460:19 - this is
460:24 - plus we registered an event listener on
460:27 - the
460:28 - click event and each time a click
460:32 - happens we normalize the
460:36 - mouse uh position to range of minus1 to
460:42 - plus one for both X and
460:47 - Y this is because 3js uses this range to
460:52 - represent the screen
460:56 - space we then call the onclick function
461:00 - passing the camera and the
461:03 - paintings as arguments so
461:09 - onclick pass the
461:11 - camera
461:17 - paintings okay
461:19 - and this is done don't get confused by
461:22 - this formula here is just to
461:27 - normalize the coordinates for the X and
461:31 - the Y because 3js uses this to represent
461:35 - the screen space and that's
461:38 - it nothing uh you know to be afraid
461:47 - of yeah I have a small typo
461:54 - here the next
461:57 - step is to implement the r casting and
462:00 - we didn't cover R casting we wanted to
462:03 - cover it when
462:05 - we uh made the
462:08 - Collision but I found an easier solution
462:11 - so we didn't use R
462:13 - casting on that
462:16 - part uh since we want want to handle the
462:19 - click event using uh this Ray casting
462:22 - technique the Ray Caster to to explain
462:26 - it uh simply is an object that emits a
462:31 - aray from a specific point in a specific
462:35 - Direction This Ray can be used to check
462:40 - whether any objects intersects with it
462:43 - or not
462:45 - okay in our case we are using it to see
462:48 - the user's
462:50 - Mouse uh when it clicks intersects with
462:53 - any of the paintings that we have in the
463:00 - scene here we create the function uh on
463:06 - click we pass Cameron
463:14 - paintings then we access this Ray Caster
463:22 - and we have a a method here set from
463:25 - camera I will
463:30 - explain and we pass the mouse and the
463:38 - camera then we create a variable for the
463:43 - intersects con
463:47 - intersects
463:51 - and assign it to R
463:54 - Caster do intersect objects method
463:59 - intersect
464:01 - objects okay objects not
464:05 - object and here we pass uh what the
464:09 - paintings what we want to intersect
464:17 - paintings in this onclick function that
464:21 - we just created we use the recaster set
464:24 - from camera method which takes the
464:28 - normalized
464:30 - mouse coordinates for x and for y as
464:35 - arguments and also the
464:38 - [Music]
464:39 - camera we then use the requesters
464:43 - intersect
464:44 - objects to get an array of intersections
464:47 - between the array and the
464:50 - paintings each element in this array
464:55 - represents an
464:57 - intersection and it contains information
464:59 - about where the intersection occurred
465:03 - what object uh was intersected etc
465:09 - etc
465:11 - so we have this the next uh step would
465:16 - be to handle the case when the
465:19 - intersection does really occur so if
465:24 - this intersect array that we mentioned
465:27 - is not empty it means that the user has
465:32 - clicked and uh it was a painting there
465:36 - where we
465:38 - clicked and in that case when it happens
465:42 - we grab the first intersection uh which
465:45 - will be the closest painting that the
465:48 - user uh clicked on and we will perform
465:51 - our desired action in this case we will
465:54 - just open a new uh web web page we will
465:59 - be redirected to to our shop our landing
466:02 - page
466:03 - Etc so to implement that add the
466:07 - condition
466:10 - if as we said if this intersect array is
466:15 - not uh empty and for that in javascri
466:18 - scrip we check with intersect if
466:21 - intersect is greater than
466:28 - zero here we create uh first the a
466:32 - variable to to access the painting so
466:36 - the first
466:39 - one painting sorry const
466:46 - painting
466:54 - the first uh that we get in the array so
466:58 - intersects uh uh index
467:05 - zero that
467:11 - object
467:14 - here
467:16 - perform the desired
467:23 - actions
467:24 - okay we can conso
467:28 - log we can conso log here the the
467:31 - clicked
467:34 - painting So
467:37 - clicked
467:39 - painting and here we pass the title of
467:42 - it so we know what we what we click and
467:46 - that is we get it from
467:49 - painting
467:51 - data
467:55 - painting title where is it title so info
468:01 - title
468:02 - okay
468:04 - but this is the user data object which
468:07 - is here in painting.
468:12 - JS this user
468:15 - data so
468:21 - so here to access it
468:24 - painting. user data do
468:28 - info.
468:30 - tile okay since we are there we want
468:34 - simply to to open an external page so
468:37 - for that we use
468:39 - window. open
468:42 - here and we pass the link that we want
468:47 - to open
468:48 - we can simply add here the URL but it
468:53 - will be added here in the user
468:56 - data so a new property here uh
469:00 - URL and also add it
469:03 - here yeah I already edit here the
469:08 - URL so for that I can simply or back W
469:13 - okay I have it oh I have it oh yeah I
469:15 - have
469:16 - it
469:21 - I can simply add the link here and we
469:25 - also have the URL
469:31 - here so for that uh we can access this
469:37 - uh the same with painting user data info
469:41 - link painting user data info link
469:49 - open it in a new page
469:54 - so
469:57 - blank and that's
470:01 - it it
470:03 - should work the last thing here is to
470:07 - call this function click handling in the
470:09 - main JS so we can also
470:13 - get we can also get this arguments
470:18 - render camera paintings so here import
470:25 - it click
470:27 - handling
470:34 - okay and let's say
470:36 - here call
470:38 - it click handling and pass
470:42 - render camera we said and paintings
470:46 - right render camera paintings render
470:50 - camera paintings yes let's try now if it
470:54 - works or
471:04 - not we disable the point of locks
471:08 - first now we
471:10 - click it doesn't work let's see the
471:13 - console
471:14 - lock on click is not function on click
471:18 - why is see lower case it should be
471:21 - uppercase
471:27 - right I
471:34 - click yeah it was a
471:40 - typo disa poter locks
471:44 - controls
471:46 - click but now nothing
472:16 - happens
472:20 - oh if intersects greater than zero if
472:24 - intersects that
472:25 - length it's an
472:28 - array but I don't think this
472:31 - is the
472:36 - issue yeah exactly this is not the
472:46 - issue
472:57 - oh okay
473:00 - so this is for 3js to normalize the
473:04 - screen space we set from minus one to +
473:08 - one so this is minus
473:14 - here this is minus here I think think
473:18 - this is
473:20 - causing the
473:34 - issue yes it works that was the
473:41 - issue if we click here nothing happens
473:45 - if we click on the painting it
473:48 - intersects and it works so it organizes
473:51 - the paintings
473:54 - okay and this is done you see also it's
473:57 - console locked clicked painting vangog 2
474:00 - click painting vangog 3
474:06 - or vangog Guan so it
474:15 - works and that's it for this part of the
474:20 - tutorial I
474:21 - think we have implemented this feature
474:24 - that was
474:26 - requested we also added the audio guide
474:32 - maybe we go and implement the VR support
474:37 - for our 3D art gallery what you
474:40 - think it would be nice to make a
474:43 - tutorial on it but I will think and we
474:47 - can maybe add another tutorial about web
474:51 - Pixar tell me your thoughts
474:54 - and if you would like to add this webar
474:57 - support for our art gallery or not or if
475:01 - you have any other
475:04 - suggestion thank you for following me
475:07 - and see
475:15 - you

Cleaned transcript:

unlock the world of 3D web experiences with this beginnerfriendly 3js tutorial you will learn how to create an interactive 3D art gallery to Showcase your portfolio in a dynamic engaging way this course will cover all you need to know about 3js fundamentals such as scene camera renderer geometry materials and more amelon created this course and he will provide you with HandsOn lessons on animation meshing user interaction and utilizing a gooey bugger for realtime configuration all designed to empower you to bring your Creative Visions to life on the web hello everyone in the next 8 hours we are diving into the world of 3js to craft an interactive 3D art gallery this is what we are going to build so usually I go in Windows plus air write CMD open on the terminal here in the terminal CD desktop so I will create my project in the desktop then MK deer this creates a folder in the desktop and the name of the project so Art Gallery simply okay we created the folder let's get into this folder CD Art Gallery okay and now let's open it in our vs code we usually use vs code is the best editor out there so code and Dot okay we are in the vs code we have this folder now we need to create some files that we need usually we need uh HTML file uh of course a CSS file for the styles and also the functionality that is the JS file with JavaScript okay uh if you don't know we are working with this project we will work with this with 3js okay 3js is a cross browser JavaScript library and application programming interface used to create and display animated 3D computer Graphics in a way web browser using webgl okay uh the source code is on GitHub it's open source so it's a very nice Library I really like it I am a fan of 3D usually I I used to work with unity Unity 3D in my opinion Unity is the best ever tool out there for me but I really like also 3js if you want to create Games Etc Unity is is like the best tool for me also unreal but I am a Unity Fanboy but if you want to work in a browser with 3D models or you know 3D programming for web applications 3js is the best choice there is also babylonjs it's also great and it's maintained from Microsoft but yeah I think 3js it's very uh easy I mean very easy it's like let's say easy compared to you know other Frameworks that has a very steep learning Cur but 3js if you know JavaScript it's very easy to get into if you are a JavaScript developer okay so no more talking let's create let's create first uh an HTML file okay we need an HTML file so index.html okay let's create the template so you just simply write the exclam uh I don't know in English but I think it's called like that okay so we have the template right let's create uh immediately the other files so we have the structure you know the structure of the project and so slowly we can build the project okay so the index HTML create one let's create a folder so it's better to keep the files on folders with a specific name so JS for example we have here the files uh JavaScript files that there might be many files or only one file one main file maybe we can create everything inside one file but we might need other files so let's create a folder JS let's create the CSS folder also oh it's created inside oh sorry come on delete permanently okay CSS folder okay let's also create the file so style. CSS okay and also a main JS file main.js all right so we have have here uh what is important and I think we can do it since the beginning we should import the module of 3js so we need a module uh by 3js you can go to Google and uh simply search 3js GitHub module or something like that and here you will see this is the Mr dup it's the maintainer and creator of 3js and you can download the file here if you are familiar with GitHub you already know if you're not familiar with GitHub uh here in the green button click the green button uh download the zip file and inside what we really need we don't need everything here actually so now it's uh it's not very light it's like there are many files here many files but what we need is inside inside the build okay inside the build folder so after you download it I already have it that's why I'm I don't have a problem I already have it if you don't want to go through this I will I will post this project the whole project on my GitHub so you can simply go and copy the file in my GitHub if you want to know this because maybe you will need it with other projects that you will create yourself so it's good to know we you will do this every every time you will need this inside the build folder you will need this three.js file or 3. MJS it's a mini ified version so the minified version or the 3js this is for modules it's like you if you are familiar with es6 Etc it's like built uh but for now you you just need this one 3js or the minified version I will go with the this file 3js okay so here code download I have it here so I go and will copy it so three file let me go to this folder so reveal in file explorer I will put it here all right I am not using the minified version but the minified is lighter anyway this is just a propose of a tutorial let's go back so we have the 3js here okay let's create if you want to take a look inside maybe it's you know it has classes Etc about every everything you see is pretty pretty big it's there are there are a lot of classes methods functions and every everything about 3js that we will need to to to create and do 3D programming okay but let's leave this for the advanced guys so let's go to our HTML files let's change the title First Art Gallery okay maybe let's add the CSS file so let's edit now and uh we will need it later so uh here about add link okay Styles sheet so HRA it will be in this folder CSS so CSS style CSS okay great so let's build the file maybe first let's open this in our browser so go live here go live go live or click the right and then open with live server or the shortcut alt plus L all alt plus o okay so here is our project it's here on this uh address in our local we don't see anything because we don't have anything so let's create some files here so we can see what we will need we will need you know the we will need the background the main background that we'll have I don't know we have the scene of our project then another it will be a div so then another div inside will be a main container maybe uh then an H1 we will make like uh we will make like a menu when we first click uh our project it will open up a menu with some information you know the title Art Gallery Etc and maybe some instructions or you know it's up to you actually it's up to you but let's make a very easy one a very simple one so let's create a main div and let's give it a class name of background or background menu so if you want to be if you want to have some shortcuts to be a good developer if you don't know maybe many of you already know these things you know so don't bear with me maybe some others are beginners and they would like to know these shortcuts to be fast and you know Pro tips so if you want to create a div not going to div and then give it a class you know so div then go and class and then add the class name menu Etc there are some Pro tips so you can be quicker and faster so dot and the name of the class the name of the class will be for example background menu so do background menu enter this is the EMT abbreviation and you see it's quick and it's fast it's a nice shortcut or it's my oh my God it's myal okay so again you will make you will create another div with another class the same thing so dot and put the name of the class it will create a div with a class name ready okay so go with these things and you are quicker or if you don't want the class but you want maybe an ID so this uh sign of the ID and then put the the name of the ID that you want and enter it will create the div with ID menu okay what we need and then inside this menu we will inside we we will add the title uh maybe we will add an image okay we want a nice image they want to show this Gallery before and maybe click button like uh explore explore the gallery or enter the gallery uh Etc so we have menu div let's add the yeah let's add an an image let's create a div with uh image container so ID and uh image container okay and inside let's set an image okay this will be the source I will let the image now and you know just menu pick doesn't matter okay uh let's add the the picture yeah let's set the picture oh this is my pictures don't where do I have those pictures I have some okay I want to add this the stay night that's why maybe create a folder for this yeah let's create a folder for this image let's set it inside okay let's set the source so image ster night great let's change the AL here night good okay we see something here in our browser so what else what else we need uh yeah we need the title you know the menu we need the title so a title and description Maybe yeah title and the description okay so title image uh description what else we may need we may need like uh or maybe let's keep it simple yeah let's keep it simple for now let's set maybe an image a title and uh a description okay so this is for the title and uh yeah let's keep it for now ID this is will be the content the content and yeah and each one that will be hard color okay and uh it will also have the description and uh inside let's create a P A P tag with a description this is an interactive uh 3D gallery okay uh description maybe some other description if you want made with love and 3js and 3js okay what else yeah we see something here what else what else uh yeah maybe we will need like some instructions how to move what we will do etc etc right okay so instructions maybe bet always instructions here B tag again move left or right it doesn't matter Arrow so arrows and look around look around with mouse yeah uh let's set maybe a bom to start to play it's like just play Enter G okay let's give an ID to this one play button okay okay it is something also also we need the scripts okay we also need the scripts we will add here the 3js script so and you have you should keep in mind something here a the script and here in the script SRC we will put our 3js okay you should keep in mind always always uh add the 3js script before everything else okay so above all at the top you add this script of 3js and Below you add the MJS file etc etc okay so like this it will be uh JS you don't need the dot and you know so simply JS no main JS it's threejs so JS 3js okay this is it another script okay you see how I cop it you can put you can press shift alt and the down arrow and you copy like this okay so shift alt and the arrow down let's change this one this is for the main Js Js M Jaz okay uh so we have pretty much much everything here for the HTML maybe we should add the Styles and then we can work for the real project with JavaScript and create everything set up 3js set up the canvas the camera render objects and you will see yourself everything else okay so styles let's set some Styles maybe if you don't want to follow along about Styles it this really doesn't interest you the HTML ex you can look uh the final result or just grab and copy and paste from my GitHub so just don't don't worry or just forward I will add some Styles here there is nothing to really explain so we'll add this style so why is Skip okay there are also some shortcuts shortcuts for for the CSS if you don't know those are our beginners so for example I want the width 100% so not going width and then 100 I can simply write uh W and 100 enter and very very quick the same age 100 quickly for the font size F uh s and the 12 size you have the font style or font or sorry it's font style I need the font size okay whatever but yeah there are this shortcuts also called color let's give it like I have some this is the result of the CSS style you can copy this in my GitHub so let's leave the CSS and uh let's open our jsjs file and here it starts the 3js project so we want to click this enter the gallery after clicking it U the menu will hidden and we will see this 3D object where we can interact and move around we will put a big box there you know we will put M the floor we will put the walls and then create create you know the paintings that will be some some planes and we can put there attach uh a texter and let's see together but first of all we need some Main and important things when we create a 3js project that pretty much you will do a every single time these are the main Concepts and the main things you would need in a 3js project so everything you will work here in this file you will work by using this file here 3js that inside it has everything and if you want to check it yourself you can console log this big object because this is an object it's a very big object if you want you can console log it and see yourself and inside uh the three so uppercase three oh sorry sorry okay three let's check let's conso log f r three is now defined okay let's see let's see here I think it's a problem here CJs 3js s CJs M JS okay guys I stopped the video for a moment I went and I drank some water I changed my tshirt I have my piggy blinders hat and got myself a cup of coffee uh no I don't drink coffee I take tea my dear like the song by Sting actually it's Jin sank not a coffee uh for my brain my small brain okay so this uh we had this error and it's it's just a stupid error actually it's usually when you see this error like uh you cannot get the 3js and because execute because it's my typ ET ET this just most probably we just uh mistyped here the source uh what's happened here I don't on tell script okay so it's just here the problem maybe we uh have a wrong path or mistype or maybe you are uh directing a path that it's not a JS script but it's like a CSS or Json or etc for example I just make this stupid errors sometimes so I didn't see that uh 3js is inside the JS folder and I thought is inside but not it's not inside it's outside as you can see so let's put it inside the JS folder because you see the path JS 3js okay it's inside it should uh work now and the should okay it's gone is gone U I was showing you before these three object let's give it a name okay let's take a look here console log you see three object here and this is very very big object it has like everything inside you know everything that we might need to work you see if I go and click on any of these you there are a lot of things uh inside of that okay so the three Library this file that we imported uh contains most most of the classes and properties that usually we might need on a classic project with 3js okay but but sometimes not every class that we might need is inside of this but we will talk about it maybe later when we will go through that problem okay because sometimes we need some other classes that are not inside this three and we should import it from another source okay but for now let's leave it so comment this one so guys we have the HTML file okay here we have like the Styles you can copy the CSS Styles if uh just don't worry about that just copy and paste the Styles uh we are not here to learn CSS but we are here to to do something with 3js and 3D okay so we have HTML we have the Styles now we want to add the interactivity the functionality with JavaScript or more exactly with 3js library and uh where to start where to start we will start by creating the canvas and then we will add a camera like in a movie scene okay because the canvas there is the scene we will need a camera like in a movie scene and then we will need a renderer so we will create the renderer to render the scene and the camera uh we may have have lights uh shadows and everything also in our scene we want to add the 3D models okay so our Gallery uh cubes uh and every kind of shapes that 3js has the possibility to to work with with with those geometries okay so first of all the first thing let's create the scene the most important thing and the first thing we should do create the scene okay so for that we just normally uh we just create a variable with the with the S okay and just save it there there are different methods to work here we can just work by creating the variables the functions uh Etc or we can create a an object and put everything inside this object okay it's like replicating the name space in C okay if someone of you uh is using C especially with game development you create like a namespace uh JavaScript doesn't have an mpace it's something that it's called G object okay where you put all your variables functions that then are methods Etc okay but let's keep it simple because I think we can do everything inside one single file in inside this main JS okay so we are not going through that you know pattern of object oriented Etc with objects just we can simply create so let scene or const SC because the scene usually you will not change it so it's a constant so const scene equal and here the keyword new to create a new scene this is you have to be familiar with objectoriented programming because you have classes and then you instantiate a new object with the properties of the the class so in this case we are just keep it simple for this kind of explanations new think about it just a new a new thing that we are creating okay with some properties that it has uh uh with itself in this case we are creating a new scene new let's call three okay and then with that oh sorry it's just my sorry new three okay and then with that operator oh my God why is this calling three and then SC with that operator we access uh the properties inside this this this class the the main class of three it may have other classes it may have you know uh functions methods properties and everything else okay so three. sin and parenthesis and that's it this is our scene let's put some comments I will let some comments during the the tutorial so when you get the code uh on GitHub you also have it commented so if you forget or you know it's just for the beginners is easier so create the scene this one what else as we said we need the camera so let's create a new camera like in a movie set you know we have the scene imagine imagine this scene to to to see this scene we need a camera to to to look and because when we render it will be through uh you know the eye of our camera okay so the same thing as we did with the the the Sim to to create a new a new camera we simply go by just const camera because it will be again a constant so const camera and with the specific class from three library that it's called perspective camera and I will explain it now okay so const camera equal it so again new and again three from the three Library we are accessing this three here this time we are accessing perspective camera okay and it accepts some parameters that I will explain now but con camera new three perspective camera the camera uh actually is not uh visible we cannot see this camera it's more like a a point of view okay so when we will do the render later of our Scene It will be from this point of view so from the camera's point of view we will render the scene of course like in a movie scene there are different types of camera and maybe we will talk about it later if we will need it not for now for now we will simply use uh this one the perspective camera it's like the perspective it's like making close objects look more prominent than the than the far objects the objects that are far okay so that's it to create you use this one one uh using this class perspective camera there are two main parameters that we need to provide inside there is the field of view and there is the aspect ratio I think you may know what the aspect ratio is it's like width divide by height okay width divide height you sa the the aspect ratio the field of view is uh how large our vision angle is so for instance if we use a very large angle we will be able to see in every direction at once but it will be with much Distortion okay because there result will be drawn in small rectangle but okay leave it for now if we use a small angle things will look zoomed in so the field of view is uh expressed in degrees and uh it corresponds to to the vertical Vision angle so here for instance we will give this parameters so 75 okay and this is the field of view it's like you know what I found that it's it's it's it's the correct let's say but you can play with this depending on the project so the the field of view and we also said a few moments ago we have the aspect ratio so the aspect ratio is width divide height in this case uh what we are dividing here the width of what the the width of the the the canas that we have the same so in this case we want it we don't want to to to put sizes okay we we will get the width of the window so the width of the whole window divide by the width the height of the whole window so we keep that ratio but using the window object that is the uh the window object of of the browser okay so window Dot inner width if you click the dot it you will show you know the properties divide by window do inner height okay and that's it a comment here so you have it clear uh aspect ratio okay then you as a third parameter and other parameters you can also add if you want depending on the project but this is for example 0.1 it's for the near clipping plane and also the far that I can put here 1,000 okay far and near and that's it for the camera that's it for the camera we don't see anything because we don't have anything in our scene we added the cam because the camera is not visible but anyway uh we created the camera but we always need when we create an object or when we create something in our canvas we need to add this to our scene so for that we have scene. ADD okay and as a parameter we add the camera this okay let's put some comments here s camera so we divided some kind categories if you want also to search and you easier okay we have the camera uh there is something that uh we you should not forget you should not forget for example if we have something in our scene we we cannot see it because we the camera when you create the camera by default the camera is in you know it's it's in the zero axis so we cannot see it it's like the camera is it's it's near the the the renderer so to to to make it possible to to look at the things we need to pull it back a little okay so the position of the camera in the Z axis will we will pull it back to to be able to to to see it's not a problem now because we don't have anything but it will be an issue let later so camera. position so we get the position property and then Z in the Z axis and a number five for example okay and this move the camera back five units good and this is done what's the next step the next step is the renderer we need a renderer also the canvas there are usually two ways someone will create a canvas here create a canas okay and then uh this canvas then access uh the canvas with a property like document that gets element by ID or by class you give you give a class or ID to to the canvas here in the HTML and access that and save it in a variable or you can simply create the renderer as we will do now without uh creating the canvas there and access it with document get element by ID okay so let's go for it and let's explain some basic things about the the renderer we will ask the renderer to render our scene from the camera point of view as we mentioned before and the result will be drawn into the conas okay so we mentioned that we can create the canvas by ourselves or let the renderer generated and then add it to our page so to our document uh body HTML to create the renderer we use the web GL renderer class as we did before with perspective camera class uh this time we will use the webgl render class with one parameter and that one parameter is an object you will see now render letter const render oh no always new three and we mentioned we will use the webg renderer class okay so to create the renderer we use this class webgl renderer okay and it accepts one parameter that it's an object okay and that's it let's just just just this one uh if we created the canvas here as we said before we will pass the canvas inside the renderer okay or let the renderer create that commer okay in this case in this case I didn't create a canvas in our HTML so I'm just leaving like that with the empty object inside this accept some other properties for example like ATI Alias okay I will explain uh what it is and this is for antialias means for smooth aging for the geometrist it will give like Smooth edges later when we we will let some geometries okay so we have the scene we have the camera and we have the renderer but we are not finished with the renderer uh we just created a new instance but we will set the size of the renderer okay so to set the size render do set size and again for the aspect ratio we will use window. inner width and uh window inner height so we will give this two parameters as the the size to set the size it sets the size of the render in this case the size will be the width of the window and the height of the window okay I hope it's clear window. uh inner width and window that inner height okay perfect we set the size of the render you can also add a B background color for the render for the canvas you can do it now or you can do it later doesn't matter but yeah since we are here we can give like a white simple and um the property to to to change the the color is set clear color it's not very intuitive but anyway and there are some ways to to change this to give a color you can give it like with quotes like blue red Etc or hexad decimal and you know you know those things so let's give it zero X and f f f f f is just for the white one and this is the background color and this is done the last thing you should not forget as we mentioned before we will add this renderer to our HTML for that doent body dot a pen child okay and inside renderer uh render yes render dot Dom element D element okay and that's it let's add a comment here so add the render to our HTML and this is done what else we can do we are still not seeing anything because we don't have geometries we don't have anything in our scene so our movie scene has no Act has no nothing it's like empty we only have the camera and we are looking to an empty SC we can also add the lights let there be light okay we can add like spotlights ambient lights all these lights have some properties like uh one has the property it lights the scene uh as a sun another one has some spotlights or Point lights we have different lights uh the lights we can create a whole uh new tutorial only about lights and shadows it's very interesting actually but for this tutorial we need just one or two simple lights two to to light the same lights let there be light one light that we mentioned it is the the ambient light the ambient light is like a soft light but that lights everything all the objects in the same but equally okay so let ambient light equal again I think now you are used to it new new keyword again three colum three ambient light uh why it's not suggesting me this I think it should suggest me the keyword normally but anyway we give a a color to the light it's like zero in this case just 0 1 0 one Z 1 Z okay also 1.0 this is for the color the first parameter for intensity okay again you also have some other parameters like distance and Decay but we are not using it if you just want to distance and okay but yeah okay so we have our ambient light also we can as we did with the camera we can give this light a position where we want to to to to put this this this where we want to put to put this ambient light in this case uh we can put it in the position of the camera where is the camera we want that light the camera moves it update lights with the position of the camera okay so ambient light our variable do position I think you guessed it position uh equal in this case camera. position okay and that's it again some comments light follows camera on Instagram okay so lights follows camera and uh I think many of you didn't forget that when we create something in our scene we should not forget to add this things to our scene with the with the add property so same. add inside ambient light okay and the light is created we can add not only the ambient light uh we also have some we have different lights but we can add at least another one the directional light and the directional light is a light source that act acts like the sun like you know in the in the real life it TS like the sun that it illuminates all objects in the scene equally you know from specific Direction okay so the directional light it it's it's like the sun and it it shines through and lights in a specific direction that we we are using it okay so let uh let's call it sun sunlight again new you are getting used to it okay so the more you practice the more you just get also in in in intuitive way okay even if you have not clear the the objectoriented programming pattern so you just you just get it I'm creating something new here and you know it's the new keyword so new again three accessing the three library and uh here directional light again we give it some color and intensity one two 3 four five and intensity 1.0 color intensity and we are done with the lights but of course you didn't forget again that we will always add this objects this things in our scene okay so again sin. uh sunlight now it's done we can also give some position since we said that this is a directional light we can give some position to it in this case since it's a a sum we will give a position in the Y AIS okay so it's like like this up and down like the sun it's like we give it a direction in this axis the y axis uh we will do it before adding it so sunlight. position you you see that it's very intuitive it's like not saying easy but you you you you can get through it if you know JavaScript it's that's why I like 3js it's intuitive it's it's it's a nice Library so sunlight do positiony in the y axis let's uh give it 15 so we have seen with camera we have the renderer added to our HTML and we have the lights in the end uh we want we want to to to to add the scene and the camera to to the render we need a render because the render is like the screenshot okay for the screenshot we need the camera and the SC that we are taking that screenshot okay so camera and scene that we are taking that screenshot like a screenshot so we need the render and to get the render we access the renderer variable that we created here above this one so render and for this renderer do render yeah it's a wordplay uh with the parameters same and camera because as we said to take the render to take that screenshot we need the camera and the scene that we are we are screenshotting okay uh something things to remember maybe if you don't see nothing after you create objects in the scene you we you should take in mind that uh you should specify the position of the objects or the position of our camera so we should not forget the camera it should be like pulled back a little so we can see things because if not out it's like I I I I go near the the the the camera of my laptop so I cannot see anything or reading the book it's like going like this so of course I canot see anything so I just need to put my eyes my field of view a little bit back so pulling back later when we will create the the objects you should also keep in mind to see the position of the objects if you are not seen anything render in the scene okay so we need to move things uh many times with 3js and that's it for now that's it for the main things the the main concepts of of of the scene of the canvas of 3js now we are going to do add some objects and we want to see something because we still don't see something this is just HTML it doesn't have nothing to do with the canas it has nothing to do with the three 3D World and 3js okay so we we created this lines of code oh that's why uh oh look look look I didn't see this maybe this was the reason I Your Parts was like the it's the old syntax of node but uh I don't need to import it if we use the server if we use webpac and express sometimes you need to import the three like import three from three it's like in react if you are used like you import a module that's why I was talking about modules uh before so if you use use a server Etc we will use it maybe in another project usually you import this three Library here the whole thing it's like import Asterix S3 from three like import everything from three but not in this case we just have it here in the scripts okay we are pointing to this path and we are just simply using it okay so we want to add some objects right we want to see something so like all our effort means something because now we don't need we we are not seeing anything but let me drink a little bit of some Gin sck uh also my cup are made of you know art this is like paintings I have a collection with different paintings this one is OS M okay I have like many of this with different paintings and pieces of art anyways so let's go for this object for the objects it's usually like we other 3D programming tools usually you create a cube you know the basic one the basic geometry we love the cubes we always start with a cube if we use um any other 3D software you know that you always start with a cube or you always start by deleting the cube the poor default Cube for example in blender those who use blender or work with blender they know that they open the program and the first thing they delete the the poor default Cube okay so we will create a cube just to see because later this Cube will be a box for our Gallery but since we are here for the beginners we need to explain a bit things step by step so bear with me please and also if you think that my English sucks at times I know it's not my native language and you know I can speak well at times you know but when you are live and explaining something technical it's you know you may have some problems so please uh understand this I know it can be frustrating maybe the accent or you know when someone doesn't speak very well their native language but okay anyway let's create this this this geometry uh yeah in the end here let geometry you see guys that now I see this I was wondering why I was not seeing any suggestion it was weird for me I added that line of code I don't know why I just it was the shortcuts I should delete some shortcuts actually sometimes they are a good thing sometimes they confuse you sometimes you don't even know that you created a line but you created it by by your shortcut or like GitHub copilot it it is great many times but sometimes if you don't know what you're are doing or you know just clicking you can add some line of code and get confused so first of all to create a 3D object what we do we create a geometry and we create a material then we create a mesh and we add this geometry and material inside this mesh seems confusing don't worry it's not it's uh pretty basic concept that the moment that you write it yourself you will just get it if not the first time just the second time it's I I will assure you that you will get it and it will become a second nature to you so let geometry again you know it now without my help new three and then uh do what I added something new you see that I added this I don't need this uh geometry new three for the geometry we need a class that is called box geometry box geometry and it accept some parameters uh for the three axis x y z it's like you give the size of it one one one simple one a small box box geometry is the shape of the object so we have the shape we need the class mesh basic material and uh the material is nothing else than the color so inside to add the color we we put the curly brackets the an object and inside this object we add properties in this case the property is color uh this is the color of of of of of it and in the end we create a mesh again new uh new three uh mesh as the name suggests and inside this mesh we put two parameters geometry and material geometry and material this creates the object okay great so we have it uh I think you know now what we should do right you know I'm sure you know we will add this Mash to a scene scene. add Mash this MH has the material and the geometry so this match is basically the object uh we can try and test it but I want to to to maybe explain maybe explain some basic concepts here so to to to reflect again what we did a vis visible object um like a cube to create it we need to create uh this type of object named mesh okay and mesh what is mesh it's uh simply a combination of the geometry okay and the the material the geometry is the shape I've added the comment here and the material is how it looks the color in this case but later we will add you know texter uh there are some other things but it it's how it looks the color in this in this case so you start with this geometry that is the Box geometry class okay that has three parameters that corresponds to the size the size of the Box the geometry okay uh for the material for the material we use the class mesh basic material uh it has one parameter and this parameter is an object okay containing all the options so the class mesh basic material with one uh parameter that is an object with all the options inside we have the property color so then I think you might know that to specify a color in 3js or in in JavaScript uh we can add hexad decimal uh number uh we can we can add the simple string like uh you know we can add it like this or uh as a string uh to to to to Ed it as a string we sorry we had the sign how is it called this sign I totally forgot English you know the ID sign anyway okay so there are these different ways to to or you can simply call it red like this okay for further information you you you get it in the internet so the final uh the final thing is the mesh so to create the final mesh we use the mesh class this one that we send inside as a parameters the geometry and the material okay and that's it in the end you add it to the scene let's see if we have any errors because yeah Art Gallery yeah I sorry it's the the the audio three has already been yeah of course of course that main JS has already been declared okay again this one that I sorry guys for this let's see okay 3. sin is not a Constructor having errors is normal you know it right see that's in yes looks okay okay so this sors is just a small back insignificant because it's just a typo it's not scene but seen uppercase okay so let's check it's normal I will not cut and edit these videos I will leave this mistakes and errors so yeah you maybe you you can learn from from this errors so I will not edit you know and cut the the parts of the video where I make mistakes oh okay we have another error uh what's this one cannot read properties of undefined render why let's check and Define render render render render render oh why I have this three here it is not needed so it's just renderer do render without three I don't know I have no idea why I wrote that but okay let's check okay finally no more errors uh it's good to know that we don't have errors but uh we want to see the object that we created right we created uh where is it we created here where is it okay we created the cube so we want to see that Cube so geometry and material added to a mesh as parameters to create this Cube so maybe here instead of mesh instead of mesh uh let's call it Q it's yeah it's let's call it Cube so this is the cube created with MH that accepts geometry and material but we don't see it we have just this uh HTML element we have no Cube but uh actually the cube should be behind this element because the canvas is behind this so we are covering it I think so let's hide it let's hide the whole element inside the body and we should see it now oops we don't see it uh let's check if any errors no errors no bugs but we don't see the cube why okay guys I am not uh cutting and editing this Parts uh where I have some some bugs so yeah let's find it together where is this problem I think it's it looks okay in correct so we have the geometry new three box geometry we give the size of the geometry okay this is correct we have the material we create a new mesh basic material inside an object with this property of color and this is also correct I don't see anything any typo but if we had a typo we would have an error here we don't have any error so this is like those cases that you have a problem but you don't have you know an error so it's like a hidden bug okay and yeah we shoot the bug and find it if we can I don't know guys if you see something wrong here I don't see it Cube It's a new mesh with geometry and material okay this is also correct and we add the cube to our scene we render it with scene and Camera this is correct guys this is correct let's see maybe the camera we pulled it back the camera uh the problem that we talk we talked about so let's check the position of the caram yeah yes here we move the camera back of five units so we should be able to see see it it's not this where is the problem render is okay the camera the camera the position of the cube did we move the cube the position no we didn't perspective field of view oh oh oh I got it I got it I got it okay that's why okay that's why you see here the perspective camera I told you that we need the two main parameters the field of view and the aspect ratio so we have the field of view we have the the aspect ratio and then I I I said that we can add the two other parameters for near and far okay but this one here I have no idea what it's doing there this zero so it's like it's like the third parameter it's like this is the near okay and this is the far so it's zero so yeah I I think this should be this is the buck okay so we have one for uh 0.1 for the near and 1,000 for for far so it was like a third parameter I I don't know let's check let's check should be okay perspective field and com pull it back yes let's check okay great we see it our small cube our little cute cute Cube okay it was like somehow hidden we okay so we have this object guys and we created it uh maybe we can make a small animation okay of it we can make a small animation and this is the yeah this is the the time to talk about the animations what are the animations yeah you know what are the animations but what are the animations in 3js and the case is that that we we do here so let's do something and let's explain it uh a bit okay so we are here for the animation actually we need to create the render this one here uh we need to create a function like a loop and this Loop will make possible to to to show this animation so for each frame I will explain it now in detail so we need the we need a function first so let's call it uh let render Loop or something like that okay so I will explain it like in detail because this is a cool thing it's something you know it's uh nice to to to to learn and to and to to to play with it maybe so a function render Loop function and then okay uh first let's put this inside to move this hold line you can uh press alt and the arrow the error up and down okay alt and error up and down just another shortcut uh okay we don't have a parenthesis here okay yeah I'm making many mistakes today uh so about the animations what we want I want to to to to rotate this this this Cube and to rotate this Cube uh I need to change the position of the cube right so this one here and to change the position we will change uh sorry not the position in this case because we will change the rotation sorry so the position we we moved uh before uh the camera Etc but in this case we need to to change the rotation so Cube Dot rotation okay uh rotation. X in the xaxis equal cube. rotation do X plus uh let's give it like a very uh very slow motion to rotate so it should be okay like 0.01 okay let's do the same for the Y AIS okay I cop it here and let's change only the y y here and Y here okay so this is what we need to rotate the cube in the in the X and in the Y AIS but if we check now we will see that nothing happened uh let's see this error no error but okay we need to call this yeah we need to call this render Loop let's call it only render okay so rotation and render as the see in the camera okay now we are back but again we don't see the the rotation we don't see any change as you can see it's it's it's the same why because we need something else we need something else and I want to explain uh something uh at this point so about the the animations the the animations when we use 3js uh they work like you have uh the idea of the stop motion yeah that's it uh we move the object and then we do a render and then again we move the object something more and we do another render Etc and so on the more we move the objects in the scene between these renders the faster they will appear to move okay yeah it's seems a little bit complicated like explaining it but the idea is the screen we are looking uh runs at a specific frequency okay so we call that uh a frame rate and you have heard about the frame rate I'm sure the frame rate mostly on on the screen but uh it depends on the screen and the computer itself has some limitations okay most screens run at 60 frames per second okay some screens can run much faster you know it depends on the computer some computers are faster some are slower and so on and when the computer has uh these difficulties processing uh things it will run of course more slowly uh in our case uh for the animations we want to execute uh a function this function here the render function that will move these objects and do the render on each frame but regardless of the frame rate so regardless of the frame rate that one computer has it you know regardless of it we want this function to to to do the render on each frame in JavaScript not only 3js but in JavaScript uh the way of doing this is by using uh request animation frame we can search for it together request animation frame okay is from the window object okay this one from MDM window. request animation frame uh the window request animation frame method tells the browser that you wish to perform an animation and request that the browser calls a specified function that we talked about to update an animation before the next repaint the method takes a call back as an argument to be invoked before the repaint okay let's leave for now the documents you have it here you can read it uh more in depth but let's do it because things uh you can understand things only by doing it and by a practical example so let's set this request animation frame that uh we we we saw so request animation frame and we pass here as an argument the function itself the render okay let's let's see now okay you see you see we now have this animation a small one we can change the speed here of course but yes we did it we have this animation thanks to this request animation frame okay and uh this is um it's simple uh here we can refactor a little bit our code instead of this we can you know just a shortcut another shortcut we we like shortcuts you just delete this and add a plus like this is here plus and delete this one it's the same thing okay it's the same thing so it's like saying uh plus equal it's like saying Cube rotation. x equal Cube rotation. X plus uh the number so it's the same thing let's check okay yeah nothing changed it's cleaner so we also made the animation what else we can do now uh I think we can add the movement so we can move this this little guy here our Cube we can move it you know at the controls left right up and down okay it would be cool to to to learn also this let's find a way a place here and uh let's set this one uh control controls okay and here we we also need to to explain some some other things but of course for beginners for those of you you can just keep this Parts those who are Advanced and just are interested in in seeing the final result you know the advanced things about to create the the the art gallery but for the beginners uh stay with me so to add the the controls uh what we what we will do we need to press a key of course uh the errors on our keyboard when we press the left uh Arrow we want to move to to the left left we press the right arrow we want to move to the right or not only the errors but yeah uh in most cases when we play a game we move with a D and W it's the same thing uh for this uh we need an event listener those of you that know JavaScript of course they know what an event listener is uh for those that don't know you maybe should check Google event listeners and learn about it a little bit but we will make things very simple here and even if you don't know you will understand it the moment that I will write it down okay so yeah I think you will understand it just by looking at the code and this is the the thing that we need to to to to always do write a code that it's very readable so let's add this event listener that when we press the keys uh it will listen to to this keys and then we'll make you know an action uh comment controls so in this case uh event listener when the when we press the keys we press the G okay uh we will create also this event listener with a function I will explain it in a bit so document. add event listener okay parenthesis it accepts as you can read here listener document event it will accept the kind of uh event it is a key down okay it is a key down and a function as a second parameter and this function we will create it to make possible you know to register this key press Etc let's call it on key usually when we create this kind of function we we call it on and the name of you know the action or the function that we want to do so on down always C case uh it has it has three parameters so yeah the key down the type key down listener uh also the function and uh options that is a bullan yeah let's leave it false the options okay so we have this event listener Kida let's create this function here on kidal function uh when a key is pressed execute this function okay function an okay a parenthesis it accepts a parameter that is the event if you want to to to to know more in depth about uh event listeners go and check mdn or the other resources so we have an event here as a parameter and this event uh will make us possible to access you know the event which we are triggering in this case our keys when we press the keys for this let's create a because we need to to to get what keys are we pressing how do we know we want to know uh from the code that this Keys have every key has a code in JavaScript okay so let's create a variable first uh key code let's call it key code and this variable key code will be event this one that we are accessing that which what is this this is to make possible to get the codes of each key let's search Google for these codes because I don't know I don't remember I cannot remember so key code tables yeah okay yeah I have clicked before for uh here we have all the key codes so as you as you can see enter is 13 uh shift uh Etc okay we need this one the errors so 37 38 39 and 40 so we need this we want to move the cube or the camera uh left and right so so we need this one these are the codes that uh do the work for us so we saved it in a variable evan. ttch and here we need the ni statement to to make possible to you know to get this the first one the key code which one uh 30 30 30 37 and 39 okay so 37 39 the right and the left the right is uh 30 39 right arrow okay let's uh make an if statement if key code this one here so if evan. which and this uh gets the code of all the keys okay so if key code equal 37 what's 37 was right or yeah it was left okay or let's start from the right if key code equal 39 so if the key is the the right arrow what we want to do we want to to to change the position of the cube or we can do another thing we can change the position of the camera we move the camera because when we will have the the player the player when we will enter the gallery inside uh we will not have a cube but actually we will uh like we have a a first person uh player that will enter the gallery and it will move around you know so for that we can use the camera so as a camera we can go like a PO view so we can move around so camera dot translate X okay uh let's move it a bit like uh like it should be positive for the right it should be positive yeah so 0.05 okay camera. translate it works it works but as you can see uh I press the right key but it goes it goes to the left uh why because uh it's not the cube that is moving so it's uh the positive number is the right if it was the cube but since we are moving the camera so we move the camera on the right we will see the cube on our left all right there it's logic so that's why so let's change it here negative number so we move the camera in this case on the left and by moving on the left the cube will go to the right or we will look like it moves but actually it's the camera moving not the cube let's let's try it again so press the arrow okay great so we press the right arrow key and it moves nice so the the same thing for the left uh error it was 37 so another uh another if so else if oh why a comment okay let's set comment for left AR key left AR key L if elif in this case elsf key code = 37 again comma uh camera. X because we are always uh on the x axis translate X and this time will be a positive so 0.05 Let's test it press the left we go to the left even though the negative is the left and positive the right but we are moving the camera as we said it is working until now so it's good sign we are having no more errors uh what else uh yeah up and down so the y y axis let's check for the the up arrow is 38 and then the down is uh 40 so 38 and uh 40 um up right yes up up Arrow key another else if if key code is 30 oh my God I I forgot in in a second and I forgot uh 38 okay again camera. Translate not X but Y in this case and the same Movement by 0.05 okay and for the down keyy another else if if key code equal 40 if I'm not wrong yes 40 camera. Translate Y acccept this time is negative 0.05 Let's test it so up okay I press up and it goes down so it's uh it's the other way around so here negative number and here positive okay press up okay goes up press down okay it goes down great it works so for now I think it's it's it's the same thing we can do with rotations yeah as we did uh yeah this is the idea uh I promised you that even if you don't know about uh event listeners you would understand in intuitive way right I hope so so pretty much is this uh we have this function on key down we call this function function in this event listener okay so we get access to this function to this event event. wit this event. wit gets the the code of this keys that we press and we call this function every time there is some trigger every time we like we have a listener there like it's like the name listener we have a listener what we want to listen we want to listen every time uh someone uh presses a key in this case because we are listening to a key down event so we are staying there and looking who is pressing the keys we will catch it okay so you are pressing the keys we are listening to you and every time you the the evant triggers uh we call this function onal when we call this function when we execute this function what we do if the key was 39 we move it to the right if the key was 37 we move it so every time we execute this function this is uh the idea I hope and I think it's easy to understand as I promised at the beginning so as you see until now 3js if you know a bit JavaScript it's not that hard let's say it's very intuitive the the names of the classes the names of the properties are you know are they tell something what they do so you can have an idea when you use those classes functions methods and properties uh I think uh we can stop here uh the moment so this is the code that we we wrote the last time we don't have much here we only have like a cube uh okay this one we only have this Cube I hide it the HTML here because I wanted to to show the cube last time okay so this is the the interface with this vangog painting some description information about the gallery and that's it for now I will hide it since okay this is an HTML element it's hiding the scene in 3D later we will do it uh dynamically when we click when we start we want to show the the gallery then when we pause or when we press a key we want to return to to the main menu okay like play or false so let's hide it again go at our main file so uh I will start with the floor the plane okay so we need the plane the ground and uh we will apply some texter to it to make it look nice and let's see let's see maybe then the walls uh the sailing let's see together so let's find a place where we where to start the new code okay so here we have the controls Keys let's let's start here above the controls keys so wait this okay so let's start with the floor create the floor it will be a plane floor plane come on it's my my co copilot it wants to suggest okay uh the floor so to create the floor if you remember in the last video we created the cube and for the cube we created first the the geometry of the cube we created a box geometry here it is so geometry new three box geometry and uh you have the comment here box geometry is the shape of the object then we created the material and the material is the color of the object the look okay then we create a mesh we called it Cube so this mesh accepts two parameters the geometry and the material like it creates this uh new object 3D object that has the geometry and material like merged okay so we will do the same thing with the plane with just small difference so L let uh plane geometry okay I think you remember here what we we should right so new always new for a new instance of the class that we are going to to to take so three uh this time not box geometry but we want the plane geometry intuitive right so Lane G geometry okay and it accepts two parameters we can go to Google and check if you want so 3. plane geometry okay here's the documentation a class for generating plane geometries yeah what we need code example yeah this is what we wanted to do create the geometry first then create the material then the plane that is a mesh that accepts geometry and material okay easy peasy then add this plane to the scene the same as we did with a cube that we have here in the scene okay so yeah we can copy this but we want to do it ourselves it's always good practice to always write down manually not copy past it of course copy pasting is helpful of course we need it sometimes we need to be quick but when we are learning who who for those who are beginners but even for those that has experience they are always learning something new at the point so when you are learn learning something new always write down the code it it creates this habit it then after a while it it it it becomes a second nature okay when you write it by hand by typing because when you make it a habit like to copy paste the code or you know use some kind of just a syntax help uh yeah it's very easy to forget even the most basic things like oh I need a map how to write the map or I need a function how to write the function or how to write the the component in reactor you know for everything it's it's normal it's normal I think it happens to everyone so without much talking let's create this habit of writing down but yeah the idea is this I wanted just to check for the parameters uh what parameters I see there are two parameters here I think it's wide and width and height let's check so width uh height width segments and height segments so it accepts four parameters this two should be optional yes they are optional so the first two that are important the width and the height okay let's do this okay let plane geometry new three plane geometry two parameters we we set so I don't know one was the default one yeah was the default one let's put it 50 for now who cares uh let's leave the optional parameters for the width segments and the height segments uh so in case you forget I will always write down the comments soof box geometry is the shape of the object okay so we have the geometry I think you remember now when you make this Habit to repeat the things again and again and again it will become hopefully a second nature so we need the material now so let uh plain material uh equal new always new every time you create a new object a new geometry material uh you know you will have this keyword new new instance of that class it's a new object uh don't care for now about the object oriented programming what's happening inside that uh you know parent and the classes you know three etc etc that we are instantiating don't care about that just think about a new I want to create a new geometry I want to create a new material and that's it for now at least uh so new three uh material right for material we see here it's mesh basic material okay so this one yeah I said we don't copy okay Mash basic uh okay suggesting yes we accept the suggestions so meas basic material it has uh the parameter an object and inside this object uh we put some properties key values right so open parenthesis and this object inside this object it will accept some properties uh for the material we said that it's the look of the object so the color this the simple color we will learn uh now in this video about uh other uh look of the object so not only the color the simple material but also adding the texture so you know customized uh look so we will give some image that we have etc for now let's create this uh plane that will be the floor of the gallery with a simple color just to to see that object in our scene just to render it so for that I think you you had in mind that we need color and let's give it a color like green okay uh another parameter it's here yeah it's optional but it's side and the side it's double side okay double side I will explain what it is this is to render both sides of the plane so yeah we created uh the geometry and and the plain material right so I want to ask you again I mean ask you you know just stop the video and maybe try to to to do it yourself what what what we need we said before when we create a new new 3D object we create the geometry and the material then in the end stop the video if you want without checking and uh try to remember if you create it that you know that habit so we need the mesh the mesh that we we pass the parameters of material and geometry so for that uh let floor or floor plane okay equal new always new three mesh parenthesis and it accepts the plane geometry and the plane material right plane geometry plane material that's it yeah uh yeah I would like to ask you again do you know what we forgot here what else do we need do we see uh no we don't see anything we forgot to add this floor plane that contains the geometry on the material to the scene for that simply writing scene. open parentheses and floor plane right that's it let's check if we can see anything yes we see it you see it looks like a background really not really of the floor of our Gallery it has nothing to do with the floor but yeah we will we will we will go there we will go there for now it looks like the background we added just a simple material a GRE one okay uh to give it a better look I mentioned before that there are no not only simple materials but we also have the chter okay so for chter we can add let's say something ourselves an image texter that we we have because texter are images that will cover the surface of our geometry okay and uh many many types of these textures can have different effects on the appearance of our geometry so it it is not always a simple material simple color we have like different types of of texures we have uh the color one or albo sign 3D softwares you will see albo the albo text is the the the most simple one it's you know it only chees uh the pixels you know and apply to to to the geometry uh then we have some other types like Alpha I think you also know Alpha part from albo that is the gray scale image and uh you know for the transparency it it it where white will be visible and black will not be visible then we have some more complex cheers uh we have the height Checker the high chter will move the vertices to to to create some some relief uh but yeah I will not stop here at the height we also have the normal uh that is also common used uh the normal cheers we add small details in the texter you know we it won't move the vertices okay but it will create the this feeling of of the light thinking that is is is the face is oriented differently so they are very useful and they are used uh often to add these details and yeah give that look of performance uh 3D object uh yeah we also have some other Checkers that I think you also know or heard or you s somewhere that is the the met the metal the metalness chter you know is that gives that look of uh metallic you know there is also the roughness that again we use it to to to to make the part rough and it's like with white and black the white will will give the part that is rough and the black will make it the part smooth yeah there is much to learn about cheers I invite you to go and check the documentation do your research it's interesting uh but yeah we will not stop here maybe there is to mention the PBR that I want to mention PBR because PBR now is you know it's everywhere in the most advanced uh 3D softwares because now PBR is becoming the standard for very realistic renders so Unity engine which I love my favorite uh tool ever Unreal Engine that is also great uh blender and many other so they they are all using PBR now as a standard you know for realistic render for now let's add a simple Checkers that will be a checker yeah that we find somewhere on Google or you have it I don't know I already have I think the Checker I yes I have the Checker here is this one you know a text her about the the floor uh yeah we want this in our Gallery you have seen the video so you know this you have seen it let's try to add this one how to do it let's see where we left where we left okay create the floor plane we are here so we need to replace this color with a checker not a simple mag material like color maybe above or okay here for the texter uh we need to use another class that is called texter loader this texter loader makes make it possible to to to to load an image that we we have like in this case our our image that we have in this folder here okay so the class is Checker loader we can Google about it we can Google about it 3 texter loader let's check the documentation class for loading a texter this uses the image loader internally okay okay so the syntax is const tter new three Checker loader. load or we can create a variable here for this separated so text loader let or con texter loader this uh new three then texter loader. load you know to have a cleaner code let's let's do it here uh so we we will go we will go for for what I said for texter of the floor okay so let texter loader new three let's check again was it new three checks the loader okay three check the loader was it lower case no it was other case you see this small erors okay now that we have this variable Checker loader we can access uh yeah this do load and add our image right it's just the same thing but yeah we keep it let's say cleaner with variables so text load do load right and check to load that load and we have Checkers and the path of uh of it uh the path is IMG then floor let's try IMG floor. J right should be okay I think so I don't see anything let's see the console look consider using plain buffer geometry for lower memory footprint okay yeah because now three have this buffer geometries maybe I I will explain it later the difference it's the same thing but yeah it was the old use was using you know without buffer now everything is buffer because yeah it it's a better performance for memory Etc with buffer you cannot manipulate you can but it's uh more difficult to manipulate vertices Etc but I won't talk about it now but uh I have nothing I don't see nothing okay yeah we don't have any error I think we can add it to we can yeah I think the that is not an N is just a warning about this plane yeah let's buffer let's see if it is okay it is not anymore there okay guys I was talking about before about the geometry and buffer geometry okay that I mentioned before that I changed here the plane from plane geometry to plane buffer geometry they are the same thing not the same thing but you know we will do the work but they have some difference let's say the difference is that buffer geometry not just geometry is the newer one in the 3js library okay with there is some years that we 3js had this update with buffer geometry and I will explain the difference now and I will explain why this bug that we couldn't see I think I got it why but I will show you you know to have this process thought to to to catch the errors because yeah this is our job to deal with with bugs and errs so what's the difference okay let's see this one I already checked this so I think so the guy here on stock overflow is is asking what is difference between box buffer geometry versus box geometry in 3js the question that we also have so the geometry classes are manipulated friendly memory unfriendly all JS geometry classes okay they are memory unfriendly we we learned that uh this means that each piece of data that defines this geometry is stored as an instance of some classes Vector 3 Vector 2 Etc these come with convenience methods so you can dot a Vertex with some other Vector translate vertices modify Etc something that I wanted to do before this project and that's why now I have some problems I will explain better please don't uh get confused I will explain everything but it has overhead in memory and performance creating all these instances and storing them okay so B4 3js has these classes of geometry only geometry not the buffer geometry now now it's been a a while I don't know how how many years but I don't know two or I don't know now everything is replaced replaced not really replaced you can still use this with older version but now 3js has updated to buffer geometry and buffer geometry classes are performance friendly geometry classes that rely on typed arrays to store the data okay in a webgl friendly format so they will use a float 32 array okay the guy here explains the difference what this means that vertices instead of being an array of vector three they are typed arrays okay they are typed arrays and they are much more efficient yes sure they are much more efficient but much harder to manipulate something that I wanted to do with vertices I wanted to manipulate and I I had the new classes of buffer geometry I I had no information about this thing that with buffer geometry I couldn't manipulate Vector three and vertices so I was having some problems I didn't have the information you see the difference look at the difference here so I will I was used with this method with the geometry without buffer to get vertex five and have access to its you know this is what you do and this is what you do with buffer geometry you see now the difference okay this is a problem that I had with another project and uh there was a discussion uh by the guys the that created 3js I think it's here yeah the upcoming release has this potentially breaking change the class geometry will been a longer part of the core and yeah it was deprecated in this geometry but as I said since I wanted to to manipulate this vertices with another project I uh uploaded the older version without the buffer so only with geometry so the older three object you know this the older one that has also geometry not only buffer geometry okay because I wanted to to do something else with vertices and yeah uh why so much uh explanation because here I think is the problem since I had this other version to use geometry instead I think this class uh three Checker loader wasn't in the in this let me check something else image yours okay and I have this one this now is deprecated with the new version this three that image youtil was used before this texter loader so you see in the 3js modules the big object in the source code of fjs there is this this class of image UTS and now this is duplicated since I have it here that's why the problem let me try just forget this guys I think I found uh the problem just forget about this don't get confused so instead of instead of where was it Checker the Checker okay here let me try something I want to try something else three image toils okay this is the class that I just showed you not it's not parentheses let me check again please three source code uh you don't have to do this you don't have to dig in the source code of 3js three image TOS okay three IM major deals load texter now we have the the the parenthesis for the path of our image so the path is IMG uh Slash l.jpg okay so new free image yours load texter I want to try this floor texter M floor texter I want to try this let's hope yes AA a Rea we found the bug it was a hidden bug it back but yeah this was the reason guys why I had all that talking before about buffer geometry and you know since I wanted to to create something else I wanted to to to manipulate the vertices Etc you know you you you saw here in the stock overflow the guy that was talking about that is much harder to manipulate it with this buffer geometry you see it is much more performant and memory friendly but it's harder for you know some other manipulation and it's it was easier with geometry that why I changed the I changed this uh source code of three I got this because yeah I could yeah sometimes with three you can play play yourself a bit so now no more talking about this we found this problem you just forget if you are using the new version uh download it from from GitHub if you are using the newer version you should have this one so this class Checker loader so you you can use this code here so I'm leaving it here okay I will add a comment here uh image utils is deprecated in the newer versions of 3js okay I'm leaving it for now because yeah I want it this way I want it this way so it's not a problem in the end so I I I will use this image utils but usually you know you you can use with a newer version Checker loader is the same thing so don't get confused again we have uh this floor that we created the geometry and material in then create the mesh that takes the geometry and materials and create this floor plane but to not have a simple color green that we had before but to have a custom image texter we created this texter that for to create the texture you need to create a new instance of this class texture loader or in my case image TS okay guys I hope it's not confusing I will leave the code like this the good news is that we can see we can see this our text are even though it's blurred and you know we cannot see but we see something that's a good news now let's try to to to modify and correct things with this new Checker and with this new plane that has this Checker okay we have addited in our scene no before here before uh we want to move this floor because you see it's very blurred and it doesn't look good we want like you know in the vertical axis like you know just the ground and we we we see it that way okay let's try to to do that so we need to rotate a bit this this uh this floor and to rotate there are some mathematics but uh don't worry we will not do Advance math we will use uh some internal methods that will do the the calculation for us okay so no advanced math for that to to to rotate the FL Flor floor plane do access rotation rotation do X we want to move it in the x axis oh that x uh I want to try to move it like 90 degrees okay and how you do that how you can move 90 degrees you cannot like write 90 here to do that we will use the the math. piy internal method okay so math. by divide it by two add the comment uh this is 90° rotation so if you want to to to to rotate something 90° use this formula uh formula math Pi ided by two okay uh let's see if we have we don't see anything now but we don't have any errors right no no errors but we don't see it uh let's uh floor plane do rotation. ya AIS this time and uh to rotate it in the y axis so not the the X but the Y we will rotate it uh 180 degrees okay so if you see that divided by two is 90° we can assume that for 180 de it's just math. Pi not divided by two right M that P this is uh 80° we don't see anything yeah I love errors I love when I have errors you know I forgot something here four plane four plane four plane where is four plane okay four plane it's correct okay the problem was the rotation I think I got the the AR where is the problem I think so so FL floor plane rotation X it was correct actually math. Pi that's it I made it's just a small mistake that's why I am not seeing the four so again y math. p okay so this was before and we didn't see anything okay the problem here was just a small detail for the y axis not rotation but position AA position let's check now okay we see it finally even though it's upside down but we can correct it quickly so since it's upside down let's put a minus sign so minus 180° okay okay finally and that's it AA I finished this part here I had in mind to to continue with the walls but I think for this part I am finishing here okay and that's it we have our floor you see now we miss only the walls the ceiling and then we can modify the shape of this Gallery wide or you know then we can think about uh the paintings and give that very looking good that we have in the video okay that was the problem we couldn't see it because it wasn't I I finish this video now I will try to upload the other parts upload I mean I will make the tutorial and upload I will try to to to do it as soon as possible so you can finish this project so thank you very much for being with me and let's see in the next video bye and this time we will try to create the gallery walls uh as we did the floor last time uh okay I have opened my visual studio so without wasting time we can start by creating the walls so here is the code that finishes okay floor plane we created the floor here so below below we can start the code about our so let's add a common create the walls right for the walls uh since we we are going to create more than one wall so we need the front wall of the gallery we need the left wall the right wall and also the back wall and in the end we also need the ceiling we have the floor we also need the ceiling so since we need more than one wall we can create a group of objects uh 3js has this class of group when we want to create a group of objects that we know that they will be in this group you know to manipulate them together or we just want to recognize them you know for like in this example the walls like front wall left wall right wall and back wall there will be in this group so let's start by creating a group of objects okay uh I notice here I I used let and const so maybe we should be consistent and use yeah const for this thing the things that that aren't going to change like these variables for example yeah renderer cameras saying they are not going to change geometry also it is not yeah we can use const here but just to be consistent const cost okay yeah Sal andent light okay so this is our current scene what we what we have you notice that we can move the scene right we are actually moving the camera because at the beginning when we didn't have the floor we had the impression that the cube was moving okay we press the right arrow and the left Arrow the cube goes that way but now that we have the floor we can we don't have this impression anymore so we see that it's the scene moving actually it's the camera moving okay later we will change this and we will move the player the the person that is going to is entering the gallery okay let's go back to our code we are here create the walls make some space so let's create a group of walls const Wall Group equal three. group parenthesis uh leave a comment here create a group to hold the walls okay let's add immediately this group to the scene so we don't forget later so let's add this group to the scene scene. add you already know I hope this by now to add things to to the scene after we create something we add it later to the scene so scene. add Wall Group and this is done now let's start by creating the single walls so let's start with the front wall we enter the gallery we have the floor we will have a front wall in the end okay so comment front wall and again uh what what we'll choose for for the walls we used we use the plane for for the floor the plane geometry you might think that we can also use the plane geometry for for for the walls but we can use a simple box geometry that we already used many times right now so box geometry and also a simple material to give a color to it just to recognize in the scene the the wall okay we will create this box geometry but you would think that the Box geometry will be like you know like a box we need the wall but yeah but we will create the box with the width and with height but you know on the on the Z axis we will make it like thin thin very thin okay so it will be a wall am I explaining myself so const front wall equal new always new keyword to create something new three uh we can create like we did the last times we create a variable for the geometry we create a variable for the material and then we create a variable for the 3D object that is a mesh geometry that has inside the variables of geometry and material or we can use it in a code block so we can use a single code block to like this just to to to make things different so you you get used to to it to this idea you can use it like up above with creating a variable for the geometry creating a variable for material and another variable for the mesh that contains geometry and material or directly create the mesh having inside the parameters okay and with a main variable like this directly let's see it in action so front wall new 3. mesh okay parenthesis now let's create the geometry and the material so new three. box geometry okay open parenthesis and the parameters are the the three parameters for X for y and for Z the you know width height and depth and you know so let's give it like uh 50 20 and yeah we want this thin very thin we just want to to to have it you know the width and the height but thin not like a box so 0.01 or 001 let let's see it okay comma and now we will add the material you see they are in a single block of code not by creating three variables you can use it either one or how you prefer but I want to show you you know to get used to it new 3. MH basic mat iial uh parenthesis and this accepts an object with some properties that we can add so object inside this object we have the key value of color green red blue okay so the property of color and the value of uh let's make uh each wall a different color so we can separate and recognize that because if you if we make like red red red you know we don't see the the borders you know so let's make every each wall different color let's start by Green okay and we created the mesh of the front wall do you remember what we need after we create the geometry and the material and the MCH containing this geometry and material uh I think you you remember it we always need to to add this to to our scene okay do not forget because if not you will not see it in the scene but also we need to to position somehow this wall because we want to see it you know but first first uh let's try to add to the scene so to add to the scene we will not use scene that at in this case since okay you see here we already added this wall group to the scene okay so the group containing these child okay these walls will be added to the scene since we added the group there okay so if we say for example W group. add and we add here the front wall then we will have the left wall right wall etc etc so since we are adding this front wall to the group Wall Group here it will be automatically add the to the SC since we added to the scene the Wall Group I hope I am explaining myself uh yeah we can we can try and experiment live okay let's see what's the error 3D object. add object not an instance of three objects 3D undefined okay okay let's check so Wall Group 3. group uh first of all we created this this this group okay and seeing that add Wall Group we added uh the Wall Group to the same we are okay here then then we want to add this front wall to the Wall Group okay so wall group. add front wall and is this one here okay uh I forgot the keyword new that's why it's not an instance of okay forget it so it should work now yes okay okay so we have the front wall but we have it you know to Too Close and but we have it so we are there uh very easy very easy now we can change the position you I hope you know by now to to change the position and have clear this idea to to change the the position in different axis on the x axis y AIS and Z AIS so in this case the front wall it's in front of us okay so if we move the position in the X AIS it will be still there to close but just moving left and right if we move it on the y axis we will move it up and down so what we need in this case with the front wall is just push it and you know give it some space we want to push it forward and that is the Z axis okay so the depth we want to push it forward so let's change the position on the Z axis because I think the left and right so the X and the Y let be on the Zero you know this the by default we are not going to change it we just need to change the Z axis let's try so here front wall that position Z we said and give it a value of so as you know for the x axis uh positive number is right side negative number is the left side okay zero is the center so if we give a value of positive number uh the object will move will translate the position to the right if we give it a value of negative number we will move it to to the left so the same with Y and the same with Z in this case if we give a positive number we will have it to close so in this case let's try with a negative number okay and the negative number of uh I don't know 10 let's try it okay 10 looks looks great because maybe I think we gave the of the floor we give the same value of 20 as the height or you know whatever 20 20 is is uh looks looks okay so we have this front wall of the Galler of course we can change the values for the width it looks perfect for the width it looks okay we will match it uh with the width of the floor we will check but I think it's 5050 because I I remember that the floor was uh 50 as the value so also this wall here is 50 and it it matches uh for the Y it looks okay maybe higher I don't know but it looks okay for now higher will be to much maybe I don't know we can always turn turn back later let's leave it like this we added the front wall let's start with the other wall the other wall yeah the left wall left wall so again like with this method above create a mesh that has inside geometry and material or create separate variables for the geometry separate variable for the material and then the variable of mesh containing this as you prefer I'm trying to do things differently so you get used to to like the idea so const uh variable left wall and this variable will have this instance of the class mesh from three this is uppercase three is always uppercase three do mesh parenthesis accepting two parameters the geometry don't forget the keyword new as I had the problem before when you instantiate a new instance you you you you need the keyword new because you know from object oriented programming for example this mesh class uh in the you know in the back scene would have a con Constructor with some properties you know we get some properties from this class okay but they these properties of the Constructor are Dynamic so they have a key that we can give a dynamic value to it for example so the mesh has some properties defined there and we can just give new values every time time we create a new instance of it so for example this mesh class would I think would have a Constructor normally it has a Constructor with some properties defined there uh we can give to these variables these properties uh Dynamic values every time we create a new instance so that's why knew this and knew that okay we just create a new instance of this mesh class that was defined there with its properties okay but every time we create a different instance with different variables we get a new one a dynamic value for these properties okay without confusing anyone let's continue with new uh yeah the geometry right yeah geometry new three uh do box geometry again parenthesis uh let's give this value again for front and from from left let's try it with the same values the same width and the height and the Z axis so 50 20 and 0.1 comma don't forget comma here and the next parameter which is the material new three do mesh basic material it's the simple material parenthesis it accepts an object inside and inside this object we can put some key value like color red color green Etc we have green the front wall let's give it another color so red color red okay and now after creating this uh I think you you know by now we need to add to the scene so left wall add to the C and it should be okay okay we need to position it but let's see first yes we have this left wall but as you can see here and as you can imagine as with the front wall it is again in front of us with front wall we did nothing but just pushed it forward in the Z axis okay but what we can do for the left wall because the left wall we need it like this you know like in a vertical axis so we need to rotate this this wall from here we need to rotate it like this okay so like this so we need to manipulate the rotation in this case uh not the position we need to just manipulate the the rotation of course the position also we we we will give that value but most important here is the rotation so from here here is like n sorry it's 180 80 degrees okay so no yeah from here here we need to move it no sorry it's 90 degrees actually yeah here it's 90 degrees because 180 deges will be like the floor turning again okay so it's half half this the the the sphere so we we need just 90° in this case and 90° if you remember the the last tutorial for for the 90° we can uh we can use math. Pi ided by two formula okay when we want 180° we use math. Pi 90° is math. pi divided by 2 so 180 ided by two let's try that okay here left wall left wall do uh rotation rotation okay so rotation in the Y AIS right's try so math. Pi Pi is uh uppercase uh divided by two this is 90° let's see what happen what's happening we cannot see it okay because we we we rotate it but we cannot see it it's not in the scene we rotated in the y axis it's not in the scene let's move it let's move it uh let's move it in the xaxis I think we cannot see it because let's move it in the xaxis don't don't don't get discouraged guys we will get there so let's move it in the x axis okay left wall. x. position position. x equal uh in this case if we said the positive number is the right and negative number is minus okay so negative is left positive is right so we have the left wall negative negative negative again negative 20 let's see what's happening oh error okay cannot read properties of undefined reading position when you see an error like this usually it's like the property that has this position doesn't exist or there is some problem there is some error with it okay so we cannot read the properties of undefined so position is a property of this undefined what is this undefined this undefined is X of course because you see position of undefined undefined here is the x that I don't know why I wrote that it's left wall. position. X not left wall. x. position. X okay but yeah you you should get used to understand the errors what they mean really you get used to it when you get often bugs and errors like me I I get a lot as you can see I make mistakes but I hope that I also learn from them but you should get used to the meaning of this errors it's like those very important things in programming and for developers yeah it has some meaning so it was undefined yeah we see the wall and it's perfectly fitted we okay that's great that's great you see we also have the left wall and this property here was perfectly I just want to try not math that uh pi divided by two but 180 degrees and you see as I said one math. Pi like make a rotation 180° okay so it will turn again from the other part okay like back in this case we need just a 90° from here here 90° okay it's like this I think you have this clear but you can always play you know if you have problems in other projects so divide it by two and the position was the the because if we try this not negative but positive you will see it now at the right the same thing that we will do with the next wall so okay you see it's on the right side but since we named this uh left wall we need it with negative number now we can easy peasy create the right wall because it's the same thing here we can just copy it but we said that we don't copy we manually type because we want to create this practice and habit so it becomes with practice second nature to to not forget how we write code call things functions methods Etc properties left wall now comment right wall and con again right wall equal new instance three main object mesh class parentheses and mesh class has these options that we get from it ready made it's properties that we give a dynamic value every time we create one we we we can give another value different value so the first one is the parameter for the geometry so box geometry uh new oh new okay you see this small errors but they can create a bu three. point geometry all the geometries are are always from the main object three okay so three is the main object I will I will show you here this is the source code of three you see there are how many lines okay we have like more than 355,000 lines okay full of this classes methods Etc so VAR three this is the main object and then inside this object we create classes with Constructors with some properties that we have defined there that we can give new values every time we instantiate and create new instance of this classes and this uh classes may also have methods that aren't anything else that simple functions so methods are functions declared inside an object and we access them we access them like mesh dot. function so it is called the method and yeah you know three is the main object here that has inside all these classes like mesh that has these parameters that we can pass geometry uh value again 50 20 and uh 0.001 comma don't forget and new uh three again mesh basic material parenthesis it has an object inside this object has some properties like color with value uh yellow this time we want to differentiate those colors yellow good so this one is easy peasy because it's the same with the left wall so but we don't copy left wall. rotation again the same thing oops rotation Y is it y or yes y math. Pi formula to rotate we will always use this formula oh my God this word is so difficult for me we we will always use this formula for rotation 90° or 180° 180 Dees is math. pi 90° is math. pi divided by two we want this 90° so math. pi divided by two and again I will leave a comment every time so it will stick in your mind this is 90° I want to make it stick in your mind and position left w. position uhx equal not minus 20 but 20 positive number positive is right and what else here guys yes you know we add it to the scene and we don't do scene. add we do WG group. add because Wall Group is already on the scene so we we just need to add the Wall Group on the scene and the Wall Group will add everything that has inside as parameters pass here right wall and we don't have any more errors no okay we have again the wall but I changed the position position why um rotation y ma ided by two and position is 20 then why what this happening here do 20 are okay where wall right wall Warrior you are on the front what am I missing here guys I think you you are quicker than me to find the arrows I'm sure left that position that Tak oh my God okay okay I you you I I am completely sure that you of course you you saw this this this stupid error from me right I wrote here I changed again the position of the left wall the same thing I did here it's the right wall right that's why but yeah we learn from the errors let's check okay good we see it we have different colors you know we will in the end we will give White Walls to this but if I make it white we we cannot see the difference because also the background is white and we cannot see we just see just a big white well okay looks looks good until now so what's left it's just the sailing right we just need the sailing now let's set the sailing right and the sailing for the sailing uh do we need to create for the sailing in the same group here that we have this guys here the walls no because the sailing will be separated from this as it is separated the floor the floor was a plane geometry right so it was not in this group of walls so also for the sailing we will create a separate 3D object okay and not a box geometry but this time again like with with the floor we we will create a plain geometry So Below this okay sailing so again the old method we create a variable for the geometry we create a variable from for the material and then we create a variable for the mesh that contains this final object okay or you can use again mesh inside let's keep things different so you get used to it once you get used to the idea how it works behind the scene you have it easier to to develop things so again with the old method with variables so con uh the geometry sailing geometry equal new three that uh this time plain geometry and plain buffer as we said buffer has is memory friendly so has better performance uh is better for the memory and you know it's the new new 3js new plane buffer geometry uh we had 50 here for the width 50 for the width so the sailing will have also 50 for the whe but yeah also 50 for the y axis let's do it 5050 5050 okay I will I will not get charred on writing comments I I will repeat the same comment every time we create a geometry every time we create a material it will stick to you I'm always uh referring to beginners guys so if you are someone who has experience uh don't laugh at me that I repeat these things again or don't get bored because okay I know that maybe you are uh good developer you don't need these things to to be repeated 100 times but uh actually I'm refering to beginners because yeah this tutorial was let's say for beginners not only but yeah so bear with me some passions when I repeat things so box geraty is the shape of the the object now let's create the material sink material new three object main object and mesh basic material class uh for material for uh the sailing we used the red green and yellow red green yellow let's use blue for the ceiling so do you remember inside the mesh basic material we have an object and then we have this properties of color or blue Double D dou do okay we created the sailing what else we didn't create the sailing because to create the sailing you create it with a mesh so const saling linke equal new three main object mesh class and uh pass here sailing geometry and sailing material okay now we created the sing but we cannot see it of course we cannot see it because we should add it to the scene as we always do so seeing that that uh what's the name sailing plane okay now we should see it but again we need to position this sailing because yeah I think we will see it again in front of us yes we see it again in front of us so yeah it's another object that we see in front of us because we need to position it so for the other geometries we rotate 90° like this or 90° like this so 90° and then position it to the Y axis minus 20 or positive 20 this time we need to rotate it up above so we need the sailing like like this rotate like this so can you guess how how we can do it want to try it yourself maybe okay how we want to to to to to rotate this on the Y AIS uh not not in the y axis because in the Y AIS we did with the with the walls so it should be in the xaxis let's try let's try I hope I'm not wrong on the x axis but yeah let's try let's try so ciling plan uh rotation mod by ceiling plane do rotation that let's want to try y maybe first I think it's X but well let's try how we see it with with with Y AIS uh sailing plan rotation. y math. Pi Pi is always uppercase divided by two 90° this blue hurts the eyes that by oh oh I was seeing that is like a bit rotated and I was wondering why uh you see but uh yeah I divide it by two not by 90 we cannot see it because it's not uh there inside the the scene Let's uh move it a bit in the y y AIS so we see it sailing plane. position. x uh let's try 20 we cannot see anything 50 we cannot see anything 20 10 we cannot see anything so we rotated it in the y axis so let's try x axis so 90 Dees in the x axis again we cannot see anything 15 I cannot see anything Rotation byid by two oh we have x x you see the RO the rotation will be y not where around so the rotation will be Y and no not y y was for the walls the rotation should be X and the position should be y okay we see it we should move it uh down so in the Y axis so 40 no 13 no 12 okay fit perfect we also have the sailing we complete this looks nice yeah but one thing I want to do I want to do something because uh later when we will will create the player and the player will go around the gallery when we go near the wall we want to have a collision we cannot pass through the the wall okay we cannot break them through to the other side we want to have a collision and stop there because we are not ghost we cannot go uh through through through the walls so for that we will add the collision and to to add the Collision uh there are some ways and they are different from program to program from 3js or Unity or in real but the idea is to add the collider the collider is you know like uh bounding box that it's the same as the object that we want to add that collider okay so when we go near that object we collide with this box collider and so we will stop there by adding some other coat okay but the idea is to add this collider so later when we will create the player and the controls to move right and left we want to to stop when we go near the walls so for the walls here to create this bounding box first of all let's loop loop through through this walls because we want to add to each wall this bounding box okay so here let's Loop through each wall and create the bounding box okay so a for Loop uh array. length it will be not array. length but it will be W group W group. children. length so the W group that we have that has the children that are all the walls left right and the front so Wall Group do children length Okay so we are looping through through this walls and to add the bounding box we access this B box B box 3G that is okay so equal so w group children I that is the element each element that b box equal new three boox 3 okay this creates this again we need W group. children I element we will will use another method here we will use another method here that is called set from object and this set from object will pass this W group. children I let's switch this yeah this set prom object is to compute the bounding box of the children inside including it children so so to create the bounding box not of only one object like with B box three but when we have a group of objects we want to create a bounding box for each of the children in this group of objects for this we use this method set from object okay that's it and here it is we also have this bounding box for now we leave it here because we we will have to do with it later when we will collide the player with this walls but yeah this is for now we can finish this tutorial and see in the next one when we we add the paintings and yeah we will modify our scene make it look better okay see you in the next video and thank you for being with me uh the main changes uh before we we we we begin where we left uh is that I updated 3js uh with the latest release okay so now we have the latest release of 3js which is a good thing we always want to have the newest updates from 3js also I added a build tool which is uh V or vit I don't know how it's spelled but it's lighting fast you know if you know Vite Vite is a build tool and it's uh lighting fast to build uh the server to run our project so we don't have to you know go live here with the option or have the three file downloaded and uh have it here on our local as we we we had it before uh we will download three from mpm as a package I'll show you so search on Google uh 3js installation click on it as you can see uh here it says that we need the projects structure and first of all we need an HTML file which we we already have main JS file which again we we have uh then we can import uh import uh Star as three from three so import everything as three from the three package uh we also May create a public folder which is also sometimes called uh static uh here we have like all the files like the media files uh the 3D models uh assets uh and everything um then you need to to to run this commands so install three with mpm so mpm install D save three it's to save this uh in the package Json dependencies uh and also for Vite or VD npm install uh VD run this command okay I already have it that's why I'm not running it now but you can find it on documentation and run this after installing mpm install three and V you will see you will have the a package Json okay and in this packet Json uh you will have this section here dependencies and Dev dependencies where you will see the version of three which is the latest one okay and also for V if you have any problem you can simply go uh on my GitHub check the link in the description uh copy this file package Json or download the whole project but if you want to follow along just copy this package Json edit it here in the root at the root level okay and then you can simply run mpm I mpm install and it will install the dependencies that I have here in the package as if you have any problem now we will start the features that we want to add this time uh if you remember we left it the last time we created the floor the four walls the ceiling and then we said that we want to create the paintings on the wall and also the camera movement like a user enters the gallery and moves around in an immersive uh experience way with a camera movement we will do that and also have the menu like we click the start the play button you know and then we can pause we'll see we'll see together first of all uh what what we would need first we need to import for the movement let's go to main JS oh also I forgot I also I I changed the structure of the folder now you see the not modules of course because we installed three invite so you will see not modules uh I added this structure uh folder SRC inside SRC you will see the folder public which we mention is for the assets media models Etc the HTML file of course the MJS for our script and yeah this CSS so and that's it you can yeah take a look here and uh follow as well this folder structure to be you know to have the same the same project or you can download from from GitHub okay uh as we saw in the documentation the first thing first after importing uh after installing three invite uh we need to add this yeah import Star S3 from three so here we don't need anymore this cono log okay we import everything at three from three and we will access it here okay so now this variable here three will be accesses everywhere here okay then uh we need to import the the controls for the controls we don't import them from the main three class main three object actually but from another import and I will show you we are talking about about Pointer log controls okay it's what we need pointer lock controls from three STD leap Library you need to you need to download this okay to install I have it here on my package Json installed you need to run mpm SD lib here okay run the command and uh install it or as I said copy the Packa Json that I have on my GitHub and simply run mpmi it will install all the dependencies after having this and importing it here we will use it later uh for the controls something else I I I I changed it's I I want to replace the deprecated image utils with texter loader I left a comment uh in my code there uh let's see image details okay it's here you see for the texture of the floor I left a comment here image yours is deprecated in the newer versions of 3GS now we have the newer version of 3GS we have the newest one okay so we will delete this image utils which is duplicated and we'll replace it with another class of three which is texter loader I will show you so here delete this part okay and instead okay up and instead create a variable Checker loader Checker loer equal new as you remember we always create a new instance of that class so new three uh textor loader okay it's a method so now create another another variable const floor texter and assign it to texter loader. load okay and here pass the path or the the URL of the image for the floor for the floor we we add an image here in Public Image floor. jpeg okay so here with v we use uh this way we don't uh type oh sorry we don't type here public Etc but we simply add come on simply at EMG slash floor. jpack okay of course it's a string like this not the absolute path like SRC public etc etc simply add IMG floor plane jpeg Etc okay and that's it now we have with the newest version of three we are using the texter loader and not any more image utils and this is fixed uh what else uh yeah we want to to to add the paintings okay so let's create the the paintings for the paintings we will create uh a painting mesh with a given image URL okay so a mesh with a image URL and also it's dimensions and also its position okay okay so let's create this function that will accept this parameters uh let's create it somewhere yeah maybe here after the the sailing and before the function for the movement okay so function uh create painting create painting okay and as I mentioned it will accept uh some arguments that we will pass which are image URL okay uh with also height uh position which are things that we need for our image okay open curly brackets and here we will create the logic for creating these paintings okay so inside this function we load the image texture and create a painting mesh so the complete function will look like this with this logic first of all we need uh a texture loader again so for that as we did with the the floor uh a few moment ago uh create a variable const textor loader okay uh as always new three text loader okay then we will create a variable for the painting texture so con painting texture okay that will be with using the load method from texter loader okay this is uh warning me that okay it's uppercase so painting texter will be texter loader. load okay and as a parameter here we will pass the image URL which one this one here that will be passed dynamically every time we will use this function you will see so here pass image URL and this is done now we create the material const painting material equal new three mesh basic material I think you remember the mesh basic material that we we we covered in the other videos basically we have an object inside and we use map okay and we pass the painting texture if you remember you should be familiar by now with this and also we create the geometry for this uh paintings so const painting geometry okay and the geometry is made using a class from three in this case it will be what kind of geometry it will be a plain geometry because yeah it's a plane so uh new 3. plane geometry okay this plane geometry we will pass two parameters width and height of course so width and height so yeah we will create the mesh now we have uh the texture we have the material uh we created the geometry and now we will create yeah the painting because the painting will be as if you remember from the previous videos you know that the mesh is made with the geometry and the material okay so in this case con painting equal new three mesh it's a mesh what we want and we pass as we said the geometry and also the material the geomet is the variable here painting geometry painting geometry and the material is this one painting material okay and this is done yeah we we have this function we need to return this function of course because we will use this function so it it should return what it should return this painting Okay so so return painting and this is done maybe maybe yeah of course we also we said yeah we we want to use also the position when we create uh the painting every time we will use this function to create a new painting we will also use the position we will pass a position for it okay so here before returning U painting that position and in this case the position will be uh first we will use set to set the position and the position will be this value that we will pass position uh that X position y position. z position. x positiony position Z okay and that's it uh for for this function create painting we created this function so what else with this function let's add the paintings to our scene to call every time this function we want to to create one okay so we will create for example two paintings now with different images and different positions so to do that we create create a variable for let's say painting one const painting one okay and we will call this function that we just created create painting and here we will pass first the path or the URL of the image uh I already have here a folder artworks with all the works by vangog so let's use some of them it's uh simply artworks without SRC public Etc artworks okay and then um yeah zero. jpeg Z okay the first uh parameter uh the second one width and uh height and also the position I will give 10 five here okay let's see and for the position we will create uh a new Vector 3 class for the position so we will uh create a new instance of vector three so new uh three dot Vector three okay and we'll pass uh the values for as you see here X Y and Z okay I don't know let's give some random one in this case uh but yeah for the X let's say just 10 minus 10 for the left for the Y uh positive five and uh uh for the Z let's give it 20 negative 20 okay painting one also let's create another painting we will put it at the front wall so const painting two call the function create painting again every time we will create a painting we will call this function okay it's it's very useful as you will see so create painting and again pass the arguments in this case the first one is the URL yeah artworks art works then one. JP okay also here slash I think uh the same thing but this time not negative but 10 okay five and also minus 20 should be okay and again for the position new three do Vector 3 and pass here uh the values for the position in this case again not minus but positive number it will be uh left and right so 10 5 andus 20 it should be okay now that we created these two painting if you remember every time we create an object a 3D object we need to add it to the scene because if not we will not be able to to to see it okay so I think you remember this scene. add to add the things to to the scene and pass paint painting one and painting two oh we should be able to see something I think okay we might have some errors cannot assign to read only property position of object 24 Let's see we don't need actually this line so we can remove it let's see yeah now we see something we have another error but yeah we can fix that we can see yeah we can see the scene we don't see the paintings okay we have a problem use them and we had another arrow uh okay let's fix this one first of all let's fix this plane buffer geometry has been renamed to plane geometry three module okay PL buffer geometry let's fix that first okay it's been renamed to plane geometry right plane geometry yes because now we are using the latest three JS so remove the buffer one okay Lane geometry okay this is fixed uh not found so yeah maybe the title is wrong floor plane yeah it's wrong it's floor okay now we see the floor okay but we don't see the paintings yet let's check oh yeah maybe it's let's try 18 yes so let's use 90 because I remember 20 was okay you can see 1999 yeah 20 is the limit okay also here can we see the other one we don't see the other one why artwork it's okay width height oh this one what is this it's not the this parameter it should be okay yes okay as you can see guys you see the paintings on the wall it works and we can use that function every time we want to create another painting we use the same method so painting three painting four painting five you know you can call every time just create painting function and create as many paintings as you wish we can of course create like function like to create like 50 paintings uh at once without like calling and creating manually you know painting one 2 3 4 of course we can do also that but we still don't know how many paintings we want to have for now for the sake of this tutorial we I will leave it here just these two paintings okay it's the same logic so maybe you have it as a small challenge yourself to populate uh all the scene with with other paintings okay so it's up to you in the end if always if you have any problem of course I will I will do it we don't have any errors right no we don't have any errors we are good to go so we want to create now uh the movement because we don't really want this movement you see I press the right arrow and I go left I press the left arrow and go right this is because initially we were moving the camera and had the feeling when everything was empty the scene we had the feeling that the cube was moving right and it made this idea we were moving right too but no not that we have other objects of reference we see that I press the right the cube is moving to the right but we are actually moving to the left so we will change that also I will have to add the keys W S A and D to move not only the errors but you will see that I will add this pointer lock controls basically you move the mouse and you move around in the direction of of of the mouse uh why we need that we need that because it will be smoother movement because I move the mouse I like look around and then I can move with the arrows or wsda a I can move the mouse and then move forward or in any direction it will be smoother and a better experience you will see so let's go back here so we imported at the top the pointer lock controls okay you installed this now uh let's use this uh pointer lck controls okay we create we will create an instance of pointer lck controls and connect it to our camera and the document body or maybe let me think a second because that's how pointer lock controls works we need to click at something and it will activate the lock so we click and then let's say the controls start okay then we presses in the keyboard and the control locks unlock meaning they are deactivated we cannot move anymore what we want is click the play button uh enter the gallery then we can move so we want to add an event listener to the play button to lock to start the controls okay and then uh n listener when we press ask they will be deactivated okay and in this logic we want to hide the menu after clicking the play button we want to start the controls but also hide the menu because we will enter the gallery but as soon as we press the ask key we will deactivate the controls and display again the menu so we will have the chance to play uh the button again you know so like play or not play let's see let's see uh for this so let me find a a way where we can add this maybe here yeah here before before the the function on Q down okay we can add that so uh control okay create the variable controls and always new the new keyword to create a new instance of pointer controls pointer log controls and pointer log controls we will attach the camera to it okay so camera and also the document body document body okay so we will click and we will uh activate this so we need to create function for that okay to start the the game the game it's not the game but to start our journey our tour okay let's call it experience so let's create a function uh let's call it start experience okay lock uh lock the pointer I will explain log the pointer uh meaning uh controls are activated okay and hide the menu when the experience starts to start the experience we'll create a function called start experience uh that locks the pointer and hides the menu locks the pointer meaning activate the controls okay and we'll also add an event listener to the play button to start this experience so function start experience okay and here we will add our logic then as we said we use this function start experience that inside will hide the menu hide the menu and here lock the pointer okay and we said that we'll also add an N listener to the play button to start this experience okay because this is the function but we want to add it to to to to the button and the button is uh okay the ID play play button is this one yeah is this one okay so create a variable for this play button play button and it is document uh this is pure JavaScript okay uh get element by ID get element by ID okay it was play button play button I think underscore yeah play button score okay okay so we have this play button bar uh variable and now let's uh use it play button that add event listener we add an event listener to it okay so when we click we will we will use this function stat experience we click this button we fire this function okay for this it's always JavaScript it's not 3js click the name of the event okay it's the name speaks for itself and the second uh argument is the function that we will fire start experience okay so on click fire this function that we will finish here the logic so we said we want to lock the pointer inside the start experience function we will add uh the lock pointer and hide the menu as we have the comments here for that for the lock of the pointer we simply uh add here controls. loock yeah simple as that simple as that and for hideen menu yeah let's create a new function make the code clearer so uh create a new function let's call it hi hide menu because we will then later also show it yeah we we'll create two function hide menu and show menu so hide menu okay created here this function hide menu to hide the menu it's always JavaScript and to show the menu the same thing hide menu function hide menu okay we will grab the menu because what what we will hide what menu this one uh okay this one with ID menu It's the whole element so const menu again we will refer to to do this document javascript. get element by ID and it was simply menu right menu yeah now that we have this uh uh variable menu we can hide it menu. style uh menu. Style do. displayed and as we said none we hide it simple as that okay so this function is used here in our start experience we also want to show it later so show menu it's pretty much the same thing show menu we can just copy this okay the only difference is not none but block okay so we have these two two functions uh we are not using the show menu yet because What's Happening Here document okay typo document where are you where are you document okay here another okay uh cannot read properties of null oh yes of course it's n okay oh because I commented out this I commented this this of course it's null because display button doesn't exist here it's null yeah simple as that yeah uh you see I click this button nothing happens but I activated the controls I press ask it stops I click but okay it's working like it's triggering the controls when I click click ask it stops but the menu is not hiding let's check okay okay guys I I saw the arrow as always I sometimes make stupid mistakes so bear with me yeah it happens very often uh I don't know why I just forgot the syntax uh the basic syntax of this we just assign to n okay and also sorry here's block and here is none but we assign To None don't pass it as a parameter okay okay just a stupid error it should work now we click HIDs okay great presses it will show again and stop we click controls are activated and the menu is hidden presses okay controls are deactivated and the menu is back okay it's done everything correctly okay I have up and down but I don't have the forward and backward movement I will add it we'll add that now and we are done I think with that feature let's Ed it here we have the key codes and we just need to to add the forward the backward uh movement uh yeah also add for w and uh D A and S keywords okay so here uh we will modify this the right uh the right arrow key 39 is for the right arrow key uh I also know that here we can add for uh the right is d right yeah is D here we can do or if key code equal 39 which in the table we showed the last the last time we showed the table that every key has this key code okay and for the keyword D is 68 so if key code equal 39 or key code uh uh equal 68 okay uh in this case we will not use translate X or Translate Y we will use uh also we will not use the camera movement here but we will use for smoother you will see we will use the controls movement okay so here uh instead of camera. translate uh X Etc remove it and add controls. move right simple as that and pass uh Z Point add more speed uh let's try eight 0.08 let's try the left okay yeah yeah you see it's better okay uh we'll do the same thing for for the others okay so also here that we have camera done translate x uh controls that move right okay but we'll also add here uh this is left so if key code equal 37 or key code sorry or key code equal 60 60 uh 65 is for for the the button a controls uh move uh move right yeah but we can add the negative here okay or move left left let's try should work also I think okay uh this doesn't work yeah this doesn't work works okay um move right but add negative here right Works left works yeah perfect okay great so use controls that move right but use the negative for negative for left and positive for right okay so up C and down so I don't want this y camera I Want U controls forward and controls backward okay for that uh we will use again the controls but first if key code equal 38 and also uh uh key code uh equal uh 80 87 yeah 87 is for for for W uh controls. move forward and here again 0.08 okay the same the the same speed you can change the speed uh As You Wish Al here also here as with move right that we changed the negative for moving left the same thing to move backward use move forward but just add negative uh negative value here okay so negative it will move backward but for the down uh which is the the S key if key code is equal uh 40 or if key code is equal 83 which is uh the S key move backward okay because we have the negative here let's test it should be correct yeah it should be correct click activate controls we move around and let's let's try to move forward okay forward works like a charm backward works like a charm left and right okay it works so for example I want to go this way you see that it's smoother nicer because I can move the mouse and yeah just by you know it's better like this okay guys that's it we we did it I will leave like this small uh challenge let's say for the beginners of course to adjust yourself the scene to add more paintings on the left and the right walls uh the movements are are okay you don't really have to do anything about it you can change you know the colors because we have this strange colors for an art gallery but if you remember I added these colors just to differentiate you know and see uh the walls and the ceiling uh in the next tutorial I will try to optimize this of course make it realistic I will try to play with the lights I will try to to optimize the chter we want to see the walls as real walls uh yeah optimize it make it look much better maybe okay if you did it yourself at the time for the paintings I mean if you are doing it yourself uh it's great uh if not I will do it so you can check if you had any issues with positioning the paintings on the wall but maybe we can add like I don't know a better way to display okay so see you in the next tutorial thank you for following me bye in the last tutorial we built the foundation of 3D art gallery setting up the walls the sailing the floors adding like a simple Cube we also implemented a basic movement controls uh Etc since then uh our gallery has had a major upgrade and this time uh I added real artwork implemented Checkers to make our Gallery look even more realistic uh yeah I'm sure you can find better texter very high definition out there so yeah feel free to find even better textures and yeah we even added a dynamic lighting system to set the mood a bit uh I will show you uh but yeah I improved some other things like movement I got feedback from someone commenting on my channel uh so now we have a better movement controls it is smoother now I fixed those things but I've also worked on user interaction and now when you approach a painting an info card will appear displaying details about the artwork okay I will show you so you see the textur on the walls now the walls and the gallery looks better as I said we can find better textures of course but I didn't want to use like very high definition textures because yeah the performance uh will be you know you see also the angles the borders uh it's they are better defined now because the Shadows are showing better and the lights so you now it really looks like a gallery you know like a r but I want to show you the the new feature that uh we have now okay you see we have an info card it will show yeah the title the description Etc when you get close to to the artwork you go away it will disappear you get close it will show if you change to another one it will show show information about the other one and it's a nice thing this is a feature that many many people requested me even writing me on private so not only on this tutorial but also in the other tutorials uh this I I saw that this was a feature that was nice to have from many of few so yeah I addit it and we will go through it how to implement it step by step and I also am commenting every single line in the code on GitHub so for those of you that are you know are not beginners uh please bear with me I know it's not the best thing to have like comments on every line but for the sake of our tutorial for the people that uh really want to learn the basics and they really want to understand every step not only like look at me I'm doing this look at me I'm doing this oh now we have this and you just code there you know there are many tutorials when the guys just code and you follow and copy paste and yeah you get the project but in the end you are not really sure if you really understood the things and the next time that you want something you will always rely on that YouTube tutorial so the secret actually is that uh those who makes tutorials they want this they don't really want you to you know to learn how to do things yourself or uh they don't really want you to to create things yourself to to to to teach you how to do it why you are doing this okay so uh like uh you create a variable why you are creating this variable how did you know that you need this variable how did you know that you need this function why this function what does it mean you know how can I know that oh I would need this function how to to to to make the the you know the problem solving how to debug things how to solve problems so this actually are the most important things to to learn for everyone not only for the beginners but yeah we know that uh many tutorials they just you know teach you how to rely always on those tutorials so you will always come back to to their channel to their tutorials and yeah copy paste and follow the video they are like spoon fitting tutorials okay this is why I will explain every step I will comment every line of code on GitHub so those who are experts please bear with me just ignore the comments you know but I think for other people uh the comments will be very very helpful even if you understand it now maybe you will get stuck and you will forget okay and you can turn back at the code and see okay this is about this this has this function this means that etc etc etc okay I hope it will be helpful if not please tell me or if you have any ideas if you have have any suggestion what you'd like to have you know what you'd like to explain more or what you would like to just stop it amilon just stop with this blah blah blah and just go and code okay uh I also changed a bit the menu you have you you see there are some slow animations um yeah the fonts and everything yeah the pencil the the mouse now the pointer is this pencil and there is this transition when you go back this slow animation you see it's nicer of course we can do even better with the Styles and I'm sure many of you are more know knowledgeable in CSS than me you are better than me in styling I'm sure many of you I'm sure they are so if you can do better yeah please do it if you want also to share just Fork uh the GitHub repository and yeah send a pool request if you have something very nice or cool that you think would be nice to share with other people's if the design is better than mine and yeah I know there there are guys that are doing better with the design than I did uh okay what else I I in the future I have some ideas with this tutorial yeah I would like to to to to continue this this project we can do I think very cool things with this project it can really expand so I think we would love to explore more advanced features okay we can move on with more advanced stuff I think for example imagine an audio guide providing you details about each artwork as you approach them okay artwork or your designs or your links to project you know you want to showcase your project or your own portfolio it will be your personal portfolio to show to recruiters in very nice way it would be like very nice if you have a personal portfolio like that and I'm sure recruiters would love it to see it and yeah why not if someone uh is looking for a new job it will help but yeah imagine that uh we had this audio guide you move uh through the gallery you approach this projects and artworks and an audio will start playing explaining you know the project or the artwork in this case explaining van Go's art I think it would be very nice or you can add for example your voice your audio recording explaining your project this is my project I work with this company I did this and I did that and that's it now let's start with our tutorial and let's create this new features oh I forgot the most important things and yes that is the most important thing I refactored the whole code so we had the previous uh project we had like one file MJS file now I restructured and refactored the whole code it is cleaner better it is modular it has the best practices and yeah we have a file for every functionality lights walls the colliding system oh I didn't show you we will also add the colliding system you see now we cannot go through the walls you see there are some Physics like I want to use the physics engine but I thought it would be too much only for the colliding system so I used a very simple trick to do this colliding okay because there were some options do it with a physics engine like ammo JS or Canon JS do it with Ray casting also but I found an even easier solution so why do something complex when you really can do it in an easy way of course we will explore the physics I don't know if we can add like I don't know features that involves physics for this project but yeah maybe we can do it in in the future okay yeah let's start thank you for being here and please follow this tutorial okay so I want to show you the changes and the first thing that I want to show is uh some fixes for example fixing the movement someone reported that they were having problems like they had this lagging experience uh it was not smooth when they move and this is because uh this issue uh that uh someone described in the comments is because the movement isn't in sync with the frame updates every computer has different frame updates because depending on the computer how powerful etc etc so this is the issue and that's why sometimes we use uh a Delta time for this and I will show you I fixed it in this way so this is the function that is responsible for the movement and uh yeah we were like uh checking uh now it's uh the code is changed I will show you but yeah we were checking the inputs from the users what key they were pressing and based on that code number we updated and you know we moved left or right Etc now what I added here what I changed uh it seems that that movement uh is only being processed once for each key press so this is because the key down event listener is only called once per key press so the key down this one event listeners that we had previously is uh is only called once per ke press to continuously update the movement while the key is pressed okay we should separate events for key down and key up and maintain a state for the key is when being pressed okay don't be confused please because I will explain and for that okay we will use an object to track the state of the Pressed keys I created this object to hold the key pressed so Arrow up arrow down arrow left Arrow right and yeah you know w a s d so this object uh is to track the state of the Pressed keys so we will use this object here after creating uh this object what happens uh in this code that we have you see we have an event listener for key down okay and an event listener for key up we have two uh these event listeners are used to update the key press object this one we will update this key pressed object with this event listeners uh the update movement then the update movement function will be called on every frame so our function that is responsible to to handle the movement will be updated on each frame and we will use this Delta I will explain in a second okay but we will call this function in our render function so to call it on every frame which checks the state of these keys in the key pressed checks the states of these keys and moves the camera accordingly okay so this should provide a smoother and continuous movement as long as the keys are are pressed okay so I will explain we have this object to hold the keys pressed then we create this event listener key down this is when we press the keys so event listener key down key down is an event that fires when a key is pressed we pass the parameter event from and if event. key in key pressed check if the key pressed is in the key pressed object so the key we pressed the user pressed check if that key that the user pressed is in here on this object Arrow up arrow down Etc so if the user presses for example narrow down check uh if it is if this uh key pressed by the user it is on this object set the value to true if the user for example press the error right from false it will turn to True set the value to True okay if not if the key that you know the user pressed like he pressed like and I don't know another letter or doesn't matter set it to fults Like It Is by default the same for the other event listener key up in this case so event listener for when we release the key so key up is an event that fires when the key is released pass in the event parameter uh check if the same thing check if the key released this time not the key pressed but check if the key released is in this key press object this is to make you know continuously this updates not only with key down check if this is there if it is not if it is set the value to to true if it is not sell the value to false okay so if what the user is releasing is here set to true if not set to false okay now for the Delta time okay because we we discussed the Delta time one solution is to use this Delta Time by using Delta time we can Ure that the movement speed is consistent regardless of the frame rate it doesn't matter if my computer has another frame rate another computer has another frame rate so it if we have like another calculation uh I will see it differently another computer will be different because we have different frame rates so Delta time has this function by using Delta time we can ensure that this movement is consistent regardless of the frame rates and regardless of what kind kind of computer you have okay so uh there are several ways to to handle this but the easiest one and you know is using this clock from from from 3js it's a builtin okay this creates a clock to keep track of the of the time between frames between these frames so the clock keeps tracks of this time time between frames and so here in our update movement that we updated the code we create this move speed equal to five five per Delta time so move speed is the distance the camera will move in 1 second we multiply by Delta to make the movement frame rate independent you know independent from the frame rates this means that the movement will be the same regardless of the frame rate as I mentioned and this is important because uh if the frame rate is low the movement will be slow and if the frame rate is high the movement will be very fast so this is not what we want we don't want different performance in different computers we want the movement to be at the same regardless of the frame rate we want that speed we don't want like the car to move 300 kilometers per hour and in in another computer move like just slowly very slowly and then we create this variable previous position the previous position equal to camera. position. clone what is this clone the camera position before the movement so before the movement we clone the position before that Movement we clone it so this is the variable previous position we want this then we check if key pressed that error right key pressed is the object do Arrow right is this key here this property so key press. Arrow right key press. Arrow up key press. W Etc we access you know the keys inside this object if key press this error right or key press dot d it's the same because we will use error right or the letter D to move right uh controls. move right and we pass the parameter move speed okay so controls that uh we have we are using controls from here the uh okay controls it's the pointer locks that we did in the last tutorial so okay if we press uh error right or D controls. move right and we pass the move speed we want to move with that speed which is five multiplied by Delta time and the same if left or a or if Arrow up or W etc etc we move accordingly and here we will check for the Collision because uh as I said uh I added the Collision so I'm I will collide with the walls and I cannot go through break them through to the other side so I will stay in the room as you know uh as in a real Gallery we cannot pass through walls like a ghost but I will explain in a bit this check Collision but I wanted to explain this movement first so I hope you are clear with it and this update function in the end after creating the CL clock that keeps track of time between frame rates after creating the variable move speed to move at this speit multiplying by Delta time we call it in the render function you know the render function is the method that you know this will be called uh again and again and again and again these are also the animation so this is a loop and so yeah with this we are sure that we will call on on on every frame okay I hope you are clear with this I hope uh who commented about this issue and now it's fixed and I will explain now uh the Collision that I added how we did uh the Collision system it could have been very comp complex actually if we use like physics for that like ammo JS or Canon JS but yeah we could have used R casting also I choose to to use the simplest way for this because yeah why not why not so check Collision okay this I will show you in the browser in a second how it works I go back okay I cannot move anymore I go right to the wall I cannot move anymore sometimes you may find that I cannot move like you know here because maybe we are very at the limit and maybe the painting or something it's it's blocking us because yeah it recognizes as a bounding box so just move and try it yourself but yeah it works so how we did this check Collision okay here I created uh this function check collision and in this function uh we will check if the player the user will intersect with this walls or this solid things that we might have but in this case we only have walls no other obstacles and uh I create inside this function check Collision I create this variable player bounding box okay this is created with uh creating a new instance of box three so new 3. boox 3 and what is this this is to create a bounding box for the player so we have the player which is the camera we create like a bounding box for this to have it with us so that bounding box will serve as you know to find the intersection then I create a variable camer World position that it's an instance from just a Vector three this creates a vector to hold the camera position then this camera we access get World position to get the camera position and and store it in this Vector okay so we get the the camera position of this uh the camera represents the player position in this case Okay because the camera position is the player we move we with a c you know then from this player bounding box which is the Box three which is bounding box we just created I access this set from Center and size what is this and I passes parameters the camera position in the world and this vector with these coordinates so this uh set from Center and size is a method that checkes the center and size of this box okay and we set the players bounding box size and Center it in the camera position okay so basically it's just to to uh takes this and Center it and uh size it uh of the box and uh put it in the Camera World position we pass it here the parameter so it will Center on this camera position then I create uh a loop why I create this Loop for the walls we have the Wall Group we uh did this in the last tutorial that we created the walls we created a group of walls and now we look through it you know what the loop is right so w group. children because the group in three JS has the children inside so World group. children. length i++ so look through this uh children inside the wall the single wall is wall group. children I the element that is looping through iterating so is you know to get the wall the single wall is the the eye that is iterating because I is zero then I is one lies to it iterates on each wall on each children inside this group of 3jm and uh if player bounding box with this method intercepts box we pass the wall that bounding box so each wall has this bounding box okay check if the player bounding box intersects with any of the wall bounding boxes okay so if our bounding box the player intersects with this walls left front back you know all the walls bounding boxes because we have a bounding box also the wall have bounding box if it intersects return it true if not return it false so this is the function check Collision to check if the player's bounding box intersects with the bounding box of the walls around us I hope it's clear that's why I commanded every step and okay so this function where I call it I created this function to check and where I call it I call it in this update movement function where we move okay the user press keys it checks this object here if it's here return it to true so it means that we press one of those keys that is in the object we turn it to true and then if we then Al return to true we move it right with the speed that we defined here five multiply by data time okay so here in this update movement we pass this uh function check collision and here inside we have camera. position. copy and pass previous position if you remember previous position is the position of the camera before the movement so without getting confused after the movement is applied we press a key we move left or right or forward or backward after the movement is applied we check for collisions we move check for collisions do we have anything no continue moving move again move again with the speed of five multiplied by Delta time okay so we check for collision by calling this function here in the update move and check Collision move and check Collision if the Collision is detected at some points we will revert the camera to the previous position okay that is why we needed this variable here previous position and the previous position is karma. position. clone so the previous position we cloned the previous position where we were so we are here okay we are here this will be the previous position when we move so when we move that was the previous position okay I'm here I move one unit one matter forward I move one matter forward we check for collision with the function check Collision am I colliding with the wall I am not continue moving another meter forward check for Collision do I have any wall in front of me yes I have okay the check Collision finds that I'm intersecting with with with the wall what happens in the case if I find this checkol and returns that I am uh colliding return me to the previous position that we get it with this clone method okay so and that's it this resets the camer position which is the player to the previous position if I am intersecting with the wall okay and that's it uh if you just maybe might sign bit confusing I don't know maybe is just easy as it as it is but if you find a bit confusing just you know go back again just two times and I'm sure you will you will have no problems so this is for now for uh the movement update that is fixed and for the Collision this was the changes that I made for this what else I also added the checkers as you can see as you can see the checkers has like these Checkers wall texter like it's more realistic that the white material the simple material I found on internet you know here here on public you can check yourself I just put there some some textures that I found you can experiment and you know try all of this if you like another texter use whatever you want or I'm sure you can find better Checkers for the walls on internet on Google on Bing I use Bing now I don't use Google anymore but whatever uh you can use whatever you prefer and it's here let's find uh World texter if I'm not yeah World texter look at the comments that I edit okay uh yeah I will edit the at least the first time maybe we will delete it later to clean it but I will leave it because I know what it will be useful helpful for for someone so I changed here where we have the text loader. load that we explained the last time that it's the loader for the Checker uh I add this uh IMG white texture jpeg you can use you can try the others but I found this the best one from this one you know I didn't very you know deep research so you can find better texter you find it just please tell me on GitHub we can maybe change it free texter of course because yeah we we care about copyrights uh yeah you know this the world texter uh rap s equal to this repeat wrapping what is this confusing uh variable and I added the comment here W S and W T are properties of a texter that Define how the texter should be repeated in the X like left and right or you know in the y direction so we have a Tex first how we want to repeat this you know in the x axis or in the Y AIS uh these directions uh RS is the horizontal Direction the uh the X and r t is the vertical Direction the Y and this repeat wrapping that we get from three is one of the available wrapping modes and it's like you know it's the default usually wrapping mode for for chter okay so this means that the texes will be repeated in this specified Direction in this case w s which is the horizontal and again w t in you know the vertical the Y and this W texor repeat. set it sets you know to repeat uh property which is a vector two that defines how many times the texter should be repeated in this horizontal and vertical oh sorry uh directions and if we yeah if we choose uh one this means that the text will will not be repeated it will only be displayed once on the material etc etc okay so I changed also the texter here so that is for the wall texter but I want to show also something else uh another comment asked me how to rotate the paintings I'll show you here uh they have a problem they had a problem with the positioning this right and left wall paintings okay like position it uh the correct way because I suppose and they confirmed to me that they had this problem that the paintings were showing in front of us not you know so they wanted to know how to rotate these paintings that they adapt to the left and right walls I'll show you so where are our paintings yeah you see this code it's be it's becoming a bit hard to read I know you thought about it and that's why that's why I refactored the whole code and now we have like every functionality has a separate file you will see and uh I really uh advise you to follow that part a bit later I will do it later uh it took me some hours actually to to make that refactor uh but I advise you to follow because that is very important maybe one of the most important things in you know when you have a big project you need to follow this uh you know patterns and uh best practices uh make the code cleaner and modular and readable maintainable etc etc so yeah I advise you to to to check that that part later so we were in the paintings right so we want the painting where is the painting create painting here we are so in the last tutorial we had only two paintings so painting one and painting two that we pass here as a parameter to this function create painting which is here we have the image URL the width height and the position as parameters to create every chel here we created the texture the material the geometry and the mesh so basically we create this plane geometry for the paintings and every time we want to create a new painting we call this function create painting So painting one equal to create painting and we pass this parameters here custom parameters as we wish so I pass this zero J back the width 10 five height and this Vector three for the coordinates in X X Y and Z for the painting two the same thing uh now for the painting three and painting four for the left and the uh for the right and the left walls that was this issue of this plane in front of us instead of adapting to to to the wall so what I did here to fix that uh small issue so painting through here the same thing we pass the image URL we pass the width we pass the height the coordinates for the vector three X Y and Z and here uh to fix it we rotate this painting and in this case so painting three rotation. y we rotate on the y axis math. Pi ided by 2 and we mentioned math. Pi in previous tutorials if you remember but if you don't remember math. Pi is 180 Dees okay so this is degrees in radians so math that Pi is 180° is half half the circle okay so math. Pi / 2 is 19° so I left the comment is if we don't rotate this it will show up in the front of us instead of line correctly on the wall okay this is the small fix small trick uh the same for painting four but the only thing the difference is that it's negative here okay so the same as above but negative just negative for for the other wall and yeah I also add added the the walls for the walls the paintings for the back wall so Al no I added two in the right wall two in the left wall and two at the back wall and that's why we have in total eight eight uh paintings and here you will see the same thing for the painting I8 which is the painting in the back wall I rotated it 180 degrees in the y axis because if I don't do that we cannot see the paintings from behind it like we if we if we see it here like we have the painting of the back wall so this is the palm of my hand is the painting if I am here I can see the painting but if I am here I cannot see anything I will not see it will be the texture will be visible only from if we have it in front of us okay so if I have the the painting here I will rotate it 180° to be able to see it okay this you could have run in this small bug if you did it yourself so yeah this is and these are some of the changes uh for the menu that you see a small animation and other things I'm not going to make the tutorial for that for CSS because we are not here you know to make a tutorial for about CSS but for 3js and 3D programming so but you will find this uh Styles in the CSS file here copy everything if you want to check how I did it Etc you can check you can check uh here because I dided some you know I added some key frames for the animations so it's interesting maybe for for someone so check here and copy it's in the GitHub or something else I had like a comment I uh on my GitHub uh someone opened an issue in the repository on GitHub because they were were having a problem with a project so the problem was that they were trying to make the project go live by you know clicking this go live here or you know usually how you do with HTML uh open on live server you know on HTML they open on live open with live server so open with live server but this doesn't work like that uh in the last last tutorial I think I didn't mention this so sorry if I didn't mention I think I did I don't remember but yeah to run the the project every time when you are on the GitHub repository click the button the green button there which is uh can I find just a second just a second let me do I have it here I'll show you I updated also the RM file so you have it everything explained here okay so we have everything explained here of course the first thing first uh you need uh okay download it here you see this green button code you can clone it with Git clone and pass this URL here so create a folder open the terminal and G clone URL or just download zip and open with visual Visual Studio okay I remember someone like corrected me like for the wrong spelling because I say visual but yeah Visual Studio whatever and uh G clone or download zip after you have this project on your computer of course you need no JS you should know this but yeah if you don't know you need no JS environment because JavaScript will run on the browsers supported by you know the browsers but locally we need nodejs to have the environment to be able to run JavaScript because not JS it's not a programming language okay uh of course you need Visual Studio here are the links to download and then after cloning or download the zip here clone or download you in the root in the root folder just run mpmi or mpm in it will install the not modules all the dependencies this big guy here this not modules that has like you know it's heavy as a black hole so it will install this I think because we as we said I mentioned we never never post this on GitHub they are too heavy uh after installing the dependencies we run CD SRC here okay stop the server okay from the beginning as let's say I'm from the beginning I have the git bar so I usually do p WD to to check the path but uh you can do uh CD if you don't use G bash but you use Powershell you use CD it will show the path I do PWD to check the path and I am on SRC folder okay I did CD uh dot dot to go back One Directory so now I am you know at the this 3D art gallery the root folder here you do mpm install or mpm I after installing the not modules you run CD SRC with CD SRC you go inside this SRC folder here because it's here that you should run the next command to run the project live look I'm here now on SRC you see and here just npx Vite run Vite which is the build tool we use to run our project locally okay our local server MPX V that's in just a second less than a second you will see this address here local or press h for help but just click here and you have the project live okay if you need help for you know press h r to restart the server uh you to show server URL o to opening browser C to clear the console yeah you clear everything and uh yeah and Q to to quit just to quit okay it stopped so you need to run it again if you stop V is very nice V is very nice now I only use V I don't want to see anymore create react up for example for those of you who use cact up I think is is going to die and I think it's is dying no I don't know if anybody uses anymore um I think neither is his creator likes it anymore but yeah V is very very cool it's the creator of Vue vuejs that uh created and I love VI by the way lately I'm not using react but I'm using view for my work and also whatever so this is the problem that someone opened an issue on GitHub for this so keep in mind node.js you need the editor of course after installing nodejs and nodejs is pretty straightforward to just download install it will do automatically uh open on vs code and you know follow these steps that we just uh mentioned okay for now is this uh The Next Step will be to to refect Factor this whole code okay and we will create file for every functionality okay it will have uh it's not so simple because yeah it's a mass with a big uh very long code and so I advise you to follow this part too okay I will do it in a second Maybe I will go and you know drink a glass of of water because yeah I'm talking too much okay now I will show you how to create the info card so the feature here that we get close to the artworks and we show the information so it's a nice feature to have not only for this project but also for other projects that you might create in the future so it would be good to to to learn it let's get back to our code and here as you can see there is a lot of changes because as I said I I refactored all the code and now we have this structured folders you see for every functionality we have a separate file and it's very clean now you see now this is our main JS it was like 500 600 uh lines of code before I refactored and now is just you know some line of codes and everything is uh cleaner I will explain this later but for now I just want to to to show you how I did the info card and then I will I will show you more in detail about the refactoring okay so for the info card I created a separate file because okay after refactoring the code I created everything like you see bounding box saling event listeners floor lighting menu movement painting data painting GI paintings rendering scene etc etc etc so for the info card is this component here this module painting info okay and uh here in painting gifo I create two two functions display painting info and hide painting info one function is to display and one one is responsible to to hide the card so this function first of all we create a variable info element and this variable is just to you know to get the reference to to the Dom to this element with ID painting info which is this one here in the in the HTML so this ID here we get a reference to this because inside here we want to create you know that element to show or hide so after creating this info element uh we set the content inside and to create the content inside this is Javascript it's nothing to do with 3js is vanilia Javascript vanilia van you know JavaScript plain JavaScript uh to create content inside we use inner HTML so info element. inner HTML equal to first we create a title and this title is from info. title and this info is an argument passed here I will explain that where we get it from so info. title uh info. artist info. description and the year okay so we have this element here and to display we use this class list. add and the class show this is to show to to add the the the class show here so to this element here we had the class show because we want to point to that later the same thing with this function hide painting info we create this info element to get the reference to that ID painting info and then we just remove the class show so here we have this class show and here we remove this class show and that's it two functions hide and display then when when we will use this and where here in the rendering as you can see now this rendering is now extracted here in a separate file but this was you remember in the last part of MJS there was the function render which is you know uh the animate uh function to Loop and render the scene and do the other stuff that will okay render on every frame because yeah in this render we call this request animation frame which calls the random function again so it runs over and over and over so this is the function to render things but yeah I refactored so it's not in MJS it's everything here so I import three here I import this displayed painting info and height P painting info from painting info JS this one that we were exploring together to export this functions from one module to another module again this is Javascript uh you add this export at the at the start okay so export function display function etc etc you can also make it an nrow function like export con display info equal okay so now now this is an nrow function yeah we can make it like that even here export const hide painting info equal error function okay as you prefer it's the same thing just you know this is more modern real function okay so to export functions you add this export here at the beginning and then uh if you there is also export default usually when you have only one uh component that you want to use you do the export default Etc but here export con is just when you have in one file different functions that you want to export this is another topic but yeah in basically you just add this export and you can export it in another file so here Import in this case you need to add the brackets here if you export it like this if if it was export default it will be without brackets again this is a another topic you can uh research more about this ways to you know to export modules in 3js U sorry in JavaScript because this is plain JavaScript but yeah we export these two functions okay to use it here and in this uh uh render function okay you remember again this is function we can again convert it into an nrow function it's not a problem it's the same thing uh in this render function which calls itself in a recursive it's a recursive call with this request animation frame again and again here what we do after we pass this update movement you remember the function update movement which was in main JS but again I will explain all this later but for now just focus on this uh feature to display the info card so we call this update info here in the render function uh we create first of all we create a distance three sh equal to eight it's like eight units or eight meters in this case Okay so this distance three sh is the distance that will be from us the user the player and the the painting the artwork as you prefer saying painting or artwork so it's the distance why we want this distance we want because at a certain distance we want to display or hide that painting so we need a variable to to store the distance then we create this let because it will you know it will not be a constant it will change we will use it you know this conl in JavaScript no need for for that so we create this painting to show what is this this is the varable which is responsible uh to store a value in which we want to show the painting or we want to not show show the painting uh explaining it a bit in detail I will show you the code here we have these paintings okay don't worry much about how we get now these paintings in this new refractor code but these paintings you know we get it as an argument uh we passed it here for this setup rendering I will explain it later but for now we Loop through this paintings okay paintings that for each and uh then we create a distance to painting and to get the distance to this painting from the camera to the painting because the player remember the player is the camera so we are the camera that we move as you know the player the player the the user so to get the distance from us to the painting we use camera which we are the user that position and we use this method here distance two and distance two we pass a parameter which is the object that we want to get the distance two and the object is the painting we want the distance to the painting so the parameter will be this painting. position get distance from the painting okay and we store it in this variable distance to painting simple as that now we create an N statement to check if distance to painting this one we get the distance that can be be one 2 three depending how far it is if this distance is less this than distance three should this variable here which is eight so if the distance from us and the painting is less than eight okay then the painting will be showed so the painting will be stored in this variable painting to show that's why we created it okay like a way to you know to know so set painting to show to to our painting okay in this case the painting will show we we have that value and then how we will use this logic here that we set the painting to painting to show if painting to show like if this is true okay so if there is a painting there to show because if this is true so it means that uh we are less than 8 m from the painting So if this is true and we are less than 8 mters call this function display painting info which is this function here that we imported from this file which creates this H uh HTML elements okay so if painting to show is true call this function and pass inside painting to show. user data. info and this is an object from painting data okay so painting to show user data doino because this user data here we will get it from the painting so each painting you know so we'll have a user data and an info I will explain this on how I refactor the code but yeah at the moment you just need to know this display painting info and pass you know the info of that painting or else if this painting to show is not true hide the painting info so do not show okay and that's it this is we have this HTML here HTML element and we have the styles for this painting info I added the Styles you know some transition I add it at the top etc etc you can find these styles on GitHub okay and that's it this way we can display the info card okay for each painting the painting changes and the info card of course changes that that's it okay guys now I will explain um the refactored code so as you can see I have many files now and the MJS is cleaner so let's see these are the Imports okay so first of all we import everything from three as usually then we import scene and setup scene from CJs okay and then CJs here okay then we EXT uh uh get this these variables from the setup scene let's take a look at this uh scene and it is on this files scene scene okay here okay so I extracted all the logic and the code for the scene in a separate file okay so basically we import uh everything as three then we import the pointer locks we create this uh scene here as usually create a new instance of three sin this is the same code but with a difference that we have a function we create a function for that code that we had on Main js on MJS we had like the camera the render controls and everything the same thing okay but we create a function that we can export this is the difference okay so get that code and create a function which can be export okay and that's it so I added some detailed comments you can read and I think they will be useful if you forget something for example you can see the code and check the comments okay so you create the function and you can export it in other modules okay so here there is pretty much the same code that we had on on MJS it's just that we export it now here I don't know if I changed anything here but yeah the main thing is that we declare this variables camera controls and renderer and I return them here I return the camera controls and render so that we can use them in the other modules so this function returns this camera controls and renderer so we can use it in the other modules okay so we get the scene here uh okay as you can see now we can get this uh camera controls and render here that we were returning from setup scene function okay this is just a simple texter loader to load the texter and we need it here because we are using it here as a as an argument so then we have the walls we also extracted the code for the wallts in this create walls function which is imported from Walts do. JS as you can see let's take a look so wjs the same thing we need the three here because okay and we create a function which can be exported the same thing so this fun function takes two parameters scene and texture loader because yeah we need scene when we add things see that add for example and the texter loader because yeah we need the Checker loader to create the checkers and yeah this is there are also comments everywhere here and uh yeah as you can see this function Returns the Wall Group so the wall group is the group that has all the walls front back left and right so this function will return this wall group and we can use it in the other modules as we are using it here to render the walls in the scene because the main JS is the primary let's say file to render everything the main JS has modules that we need to render all the same okay so for the walls we have it here we create this variable even though we it's yeah we use it here but we create this variable and call this create walls which takes the scene and checks the loader so this is uh the beauty of functional programming because if you see here this gr walls takes two parameters okay scene and text to loader so how we get this scene because I don't have the scene here I don't have the scene here so we get it when we call it here when we call it here we also pass it here so SE here I get it from this scene from scjs so I import the scene from sjs here on MJS I pass it here as a an argument and then in the wals JS I can use this here can see I use it in this cind just to add this whole group basically I needed yeah just to add this but I don't have this scene here so I need to to to get it from Main JS which is also uh taken from this uh you know CJs okay and that's is that's it for the walls the same thing for the floor we import this function setup floor for floor JS and and it's uh Flor JS okay Flor JS the same thing import three because we will use it create this uh function that we can export and again the scene is passed in MJS where this setup floor is called so we don't have the scene here use it but in MJS when we call this function setup floor we pass the scene from yeah the CJs okay you see the beauty of functional programming it's the code is cleaner of course and yeah uh for the texter loader uh I just create a new from three because I can create it from three or I could pass it you know but I create a new tter loader and yeah the same thing and this does it return now this just adds the floor to the scene that's why I needed this just adds the floor to the scene and when we will call it here on MJS it will render the floor the same thing for the sailing you see how clean it is like this way and we can control and we can maintain the project better we can read it better if someone else uh wants to work with this project they can read it it's more readable and it's uh more maintainable and also for where are we okay sailing for we explained the lighting okay let's yeah let's start with yeah with paintings or lightings because yeah painting is a bit more complex so lighting we create this function set up lighting which takes scene and paintings as parameters that yeah we will pass it here on Main JS always this is the logic paintings we get it from create paintings from painting JS and we pass it here we create the ambient light and the spotlight we did this in the old tutorials we set up this settings for the spotlights and we return the spotlight here to create the spotlight uh we use this Spotlight and create like one two three and four with this coordinates okay and we add it to the scene the spotlight and also the other spotlights and that's why we needed the scene here and that is for the lighting then we have paintings we use this create paintings from paintings JS find it here so to create this uh you know we extracted that code for paintings that we had the function create paintings also in main JS and now we will use also the painting data which is another separated file painting data which has the data for you know know all the paintings we have info object here etc etc the image SRC width and height so this array. from if you don't know creates an array from an array like object the first parameter is the array like object the second parameter is a map function uh this creates like uh an array of four because we we we will render like uh four paintings for a wall four four four and four at the back the map function chases two parameters one is the element and one is the index the map function Returns the value that will be added to the new array okay so this map will return the value that will will be added to to the new array in this case we are returning an object with a painting data so we have the painting data here uh this is just a placeholder for the element we are not using and we yeah we don't need it at the moment and I is the index and we use it to set the painting number and since you know we had like plus one because uh yeah the index starts at zero as you know for the arrays so 0 + one but just don't get confused of this you can take a look yourself find it on GitHub so yeah it's just you know we can we can change this actually I will change it because I I will let like description for each each artwork so I will change this I just wanted to make it quickly you know four paintings for each wall just to set the position but we will change this all don't mind too much but this is the idea we import this painting data for from this painting data JS we create this function create paintings which takes scene and textor loader that again uh this arguments will be passed from Main JS where this create paintings is called here create paintings is called we pass scene and text the loader we create first of all a variable which stores an empty array this will be the array of paintings then we Loop through the painting data that we get from this file that we we already seen then we create a mesch for each painting like we create you know a 3D object for each painting and the 3D object is a mesh and the mesh is a combination of geometry and material as you already know by now then we set the position of the painting and the rotation of the painting then we add a user data property to the painting that will hold the painting info okay information so painting that user data we create this type of painting we just need this uh so we can check if the object is a painting or not so it's a type of painting and the info we add data. info we add the painting info to this user data object and data is the current painting object in the for Loop okay is the is the painting object we are iterating in this uh loop and info is a property of the painting object that holds the painting information and we saw that we have we have the information here for for each painting yeah then painting uh that cast Shadow true to set the painting to cast The Shadow and receive Shadow to set the painting to receive the shadow then in the end we push the painting to this array of paintings okay so we have the paintings there and we return this paintings okay we return this array of paintings so we have the paintings in this array that we can use later so here here we call this create paintings we create this variable paintings which calls you know it's assigned to this function and we can use them later the paintings which is needed here in the Bing box that we will check and also in setup rendering that we will check to is used here as a parameter you see like uh how nice it like this way it's different but it's way cleaner and also maintainable and yeah the lighting we have the bounding boxes we have the setup plate bottom oh yeah let's check the bounding boxes which which checks the walls and the paintings you see is to create the bounding boxes for the walls and also for the paintings uh we need this because we use the Collision you remember so for the Collision we used these bounding boxes that we checked if they intersects with with a player bounding box okay so we have this file here bounding box yeah we import three from three then we we create this create bounding boxes function which chees these objects and what is happening here we have also this condition if array that is array this like uh the contrary that it's like it it turns from True to false so if it's not uh an array and in this case we we check if the object if the object is an array or not if it's not we will assume that this is a 3js group it's not an array in that case if it's a 3js group if this is not an array we set objects to objects. children because we assume this is a 3js group and I will explain it more in detail here because in 3js a three group is a type of object used to create like you know parent child relationship between objects so there is a parent and then there are you know the children and uh yeah in this uh group in other words a group is an object that can contain other object in inside that's it and we we want sometimes this group because we can manipulate several objects at a time as one okay so the children property uh of the group of three group is the n array that contains all the objects okay so the child objects inside that are part of of of this group so when we add an object to a group uh with group. ADD as we added the walls wall group. add front wall uh back wall left wall and right wall we can access that object with group. children so we can access them uh when we need so in our code the create walls returns a group for the walls you remember we have the function create walls it it returns a group that contains several wall objects and when we pass this group to this create bounding boxes because this create bounding boxes will be used to create bounding boxes for the walls and for the paintings but the walls are three group the paintings are an array so this function here to check the objects parameter an array and also a three group grp we did it like this with this conditional okay I hope it's clear but yeah uh we when we pass this uh objects here to this function create bounding box uh we want to create a bounding box for each wall in the three group and to do that for the walls that are group we need to Loop over all the children all the children array of this group so when we call create bounding box walls here create bounding box walls the object's parameter of this function is a group objects so for the walls when we call it it's a group object and yeah we need to in order to to Loop over this wall in the group we need to set objects to objects. Children okay I I know it may sign a bit confusing but basically we are using this uh create bounding boxes for the walls which are group and for the paintings which are an array if they are group we need to to set this to the objects we need to set to objects. Children which is then the array of of objects wall objects uh so this was when uh this object objects were a group like the walls what what about when they are an array as for the paintings in that case like uh create paintings that we had in paintings paintings are an array here as you can see and in that case uh since create paintings returns an array and not three group The object's parameter this one objects is in Array so we don't need to do anything in that case as I explain in the comments uh below so for that reason that's why we start this function by checking if it's not an array if object is not an ARR assumes that it's a group and sets objects to objects uh if object is already an array it skips this this step so if it is an array and not a group it will skip this step and in that case we Loop through objects which is an array and we set you know a bounding box for each object then object. bounding box set from object which set the bounding box to that object which is you know the object iterated each object yeah maybe I didn't explain very well this part but yeah you can read the comments and I'm sure you will get it because yeah I commented this whole thing here and you will get it this is just because we are using the create bounding boxes here function to pass the walls and to pass the paintings and they are different one is a group a three group and one is an array and we need this check uh we have this add objects to scene which takes scene and paintings what is that we have this in scene helper JS is this just this piece of code here this function will take the scene and an array of objects which can be passed dynamically uh we choose and add each object to the scene so it will uh loop objects that for each at each object okay so this is just function an helper function to add each object to the scene why we need this we need it for the paintings as you can see we call this paintings here with create paintings we created the paintings we return the paintings the paintings array we return this paintings okay we created and we returns this paintings but we need to everything should be added to the scene as you know by now and with this helper function add objects to the scene we can add this paintings okay and that's it then we have setup play button you see that in on Main JS pretty much we see everything that we have so we see what we have here it's very readable even for someone else that just opened our project and they want to take a look and understand the code they see here on MJS everything and yeah they can understand and redirect it to this functions and modules so we have set to PL button and the file here set up plate button is from menu JS and this is for the menu to show or hide the menu okay ask show and hide the menu that's it okay so we had this hide menu and show menu you already know this functions because you had it on Main JS I just extracted the logic with just uh added this export to export it also the start experience you already know also for the play button which just gets a reference to this play button in HTML with ID play button this one then adds a click event listener to the play button to start you know the experience and that's it we have also the menual logic here separated uh this play button as we saw is uh exported to main JS and it we pass the controls to it here because we don't have the controls you see the functional programming we don't have the controls on this file on this module so we call this function here and we pass it from you know from here from njs because we get it here we get it from setup scene okay so we import the setup scene from scjs importing the setup scene we the structure this uh variables for camera controls and renderer that we get from setup C and then we pass it we pass this controls also here on setup play button and then we use it here on menu JS that's it the logic what else we have we have setup event listeners that again it takes controls as a parameter set up event listeners okay here and this is the logic and the code for the functions on key down and on key up the object uh key pressed that remember we we created in the last tutorial is from this movement uh file which is a separate uh file movement here uh we have this key press which is uh okay exports const key press so we can export this and we import it here from Movement we also import this show menu from menu JS that we already saw and we add uh the controls parameter which is the pointer lock controls and this path on Main JS here setup event listener we pass controls that we get from setup scene okay the same logic you see the beauty of functional programming and then we add the the event listeners uh to the document which is the whole page so we have key down uh we have key up and unlock okay so key down is the uh the event when the key is pressed okay key up is when the key is released and yeah unlock is when the pointer is unlocked so here we we add an event listen to the controls to show the menu when the pointer is locked show the menu okay we already did this part for these functions uh the event is the object that has the key property so ev. key in key pressed check if the key pressed by the user is in this key pressed object if yes we will set the value to to true so if the user presses Arrow up we will set this false to true if the user presses error right we will set this to true and so on okay if the user if you know the key that the user presses is is is not we will set it to fals as it is by default when the key is released for the on key up so the same as for key down we set to false when the key is released so if the key is in this key press object we set it to false when the key is released so the user releases the key we set it to false if it's already true okay this is for the event listeners we have this movement uh yeah that we we did in this tutorial that we fixed and updated for smoother experience so yeah I added some comments here details comments so you can read for everything but yeah just to make a recap we have this update movement always exported it takes Delta controls camera and walls okay uh we get these parameters from setup rendering where this function update movement is called and if you see here in rendering doj we have this function setup rendering okay you see these parameters okay so we take them from this setup rendering and setup rendering gets the parameters from Main JS this setup rendering gets these parameters from MJS because it's here setup rendering because yeah we get it from setup here because a bit movement is called here in the yeah in this rendering JS okay you see it takes this parameters here when where we call it parameters we get from setup rendering above from this which gets from MJS as we as we said this move speed is five multipli by by Delta time move speed is the distance the camera will move in one second we multiply by Delta Delta to make the movement frame rate independent or you know the frame rates this means that the movement will be the same regardless of of uh the frame rate that each computer might be different and this is important because the frame rate is low the movement will be slow and if the frame rate is high the movement will be fast this is not what we want we want the movement to to be the same regardless of the frame rate okay we have this previous position which is equal to camera. position. clone we clone the camera position and store it in this previous position okay because we will use this to rest the camera when we check the Collision so this previous position is the position before uh before we we we move so if we collide with the wall we will reset this position to the previous position so check the the keys that the user is is is press this code is self explanatory if we press error right or D move right and we pass the speed of this speed and then we check for the Collision after the movement is applied we check for collision by calling this function check Collision which checks these parameters of camera and walls and if a collision is detected we rever the Karma's position to its previous position okay so it cannot move through through the wall preventing the player yeah to to go through uh yeah if check Collision uh ca. position. copy previous position someone might ask here why uh position copy and not set position okay this we rest the ca to previous uh we use copy instead of set because set will set the position to the same object so if we change the previous position the camera Position will also change copy creates a new object and uh with the same values as the previous position so that's why it's this different so don't use set but use copy here to the previous position okay so we export this check Collision because we need it check Collision checks the camera and the walls as parameters and returns true if there is a collision okay and false if there is not a collision the camera parameter is the camera object and the walls parameter is The Walls Group not array the parameter are passed from update movement function where check Collision is called okay we have this update movement that has these parameters and we get this from there because we call this check Collision inside update movement uh and update movement gets the parameters from setup rendering where it is called so we get check Collision parameters from this update movement and update movement gets this parameter from setup rendering where update movement is called and setup rendering gets the parameters from Main Js you see setup rendering gets these parameters camera Etc from MJS because we are importing them here from the files and this is the logic uh so we check uh we create this and Export this check Collision we inside this function what happened uh we for recap we create a player bounding box which is an instance of three box three that creates bounding box for this player or user we create a variable for the camera World position which again is an instance of three Vector 3 class and it creates a vector to hold the camera's World position then we access this get World position method from with a camera camera that get World position and we pass Camera World position here is Vector three and this gets the camera's World position and store it in this uh Camera World position uh you know that the camera represents always the user the player uh in in our case then this player bounding box access this set from Center and size method and this sets the player bounding box to the camera's World position and size the size here is one one one because the camera is a single point this set from Center and size method takes two parameters so the center which is the ca word position and the size which is this Vector three okay the center is a vector uh Vector three that represents the center of the bounding box the size is also a vector three that represents the size of the the bounding box yeah the size is the distance from the center to the edge of the bounding box in each Direction so the size is 11 one the bounding box will be two units wide so 111 and the two units tall and two units deep if the size is 2 to2 the bounding box will be four units wide four units tall and four units deep Etc you can read more here if you forget or if you need again and yeah we create uh this Loop to Loop through the children uh of of the walls we Loop through each wall and we get the wall and then if the player bounding box intersects with this walls bounding box with this method intersects box and we pass the walls bounding box so it's like the code is selfexplanatory and this naming is very clear so if the player Bound in box intersects with the walls bounding box okay return true if not if they doesn't uh intersect return false okay and that's it for the check Collision uh function and that's it I think we covered everything and set up rendering two set up rendering which is in the rendering rendering okay here the rendering is you know if you remember the last part of the code in the end we had this rendering function which in a recursive uh does a recursive call and uh it calls again and again in makes a loop so yeah we pass this parameters which we get from Main JS we create this clock from the builin 3. clock it it keeps track for the time between uh the frames and yeah we create this render we extract it from MJS we have the variable that we need Delta because as we mentioned the for the Delta which is clock. get Delta basically 3. clock. getet Delta and this Returns the time in seconds since the last frame uh then we have this update movement to update uh the movement which checks these parameters Delta controls camera and walls that we you know we explained before explaining the update movement function we create this variable distance three sh and set it to eight for example or you choose to set the distance from the player and the painting okay because we need this distance to create the the the logic for the info card so if we are closer than this distance we want to show the info if we are you know away than 8 m we don't want to show the info card we hide it okay so we also create this painting to show variables and we will see why we need it we take this paintings that that we pass here as an argument that we check from create paintings uh function we Loop through all the paintings which was an array remember that we discussed before we Loop through all the paintings and this distance to paintings uh variable will be the camera that position that distance to the paintings is selfexplanatory we get the distance to the painting okay so this variable here is to get the distance to the painting how far is this painting because we have this three should of eight units eight meters so we get this with this method distance two and pass the painting position and then if this distance to painting is less than 8 8 m is less than distance three should so if we are like uh 7 m away from the painting we set this painting to show that we created here to painting this sets painting to show to this painting which is lesser than eight okay in this case we know that the painting will show we will use this this with this value because we know that in this case painting to show is set to this painting which is lesser than eight units so we will show the painting and here we see if painting to show if this is true and we are less than eight we are closer to to to the artwork display the pl the painting info if not hide the painting info and this to display as uh we saw already we get it from this display uh painting info and hide painting info which is from painting info. JS here okay display display place this element and hide just removes the class show and display adds this class show because uh yeah to this element with ID painting info we add the class show when we want to show the painting we remove the class show when we want to hide because we have this in Styles in the end you will see we have a style for the painting info show so painting info. show for the class of show we apply these Styles and we remove our ad and we have the other Styles as well and and that's it I think we covered everything yeah I think we covered everything so this is the refactor I think you like it more like this yeah leave me your thoughts what do you think about it and this is for this tutorial uh let's finish here thank you for following this and uh see you welcome back developers and 3D design enthusiasts today we are journeying further into the world of 3js as we continue building our 3D art gallery first of all you can see that we have brand new textures and they are in 4K resolution for the best quality and yeah the difference is visible I think it's much much better now I have added the new ceiling the walls and I really like the floor there are details and the quality is good then we have integrated the pointer lock controls toggle so now you can see seamlessly toogle between game mode giving you smooth navigation around the gallery and also the UI interaction mode letting you interact with on screen elements at is as you can see I press the space key and the poter lock controls are disabled so now I can use the mouse S I can click and you see I'm redirected to my landing page to my shop or wherever you want the user to be redirected this is the picture that some people asked for it in the comments so I edited but yeah you whoever wanted to touch the the artwork in the gallery but you had that do not touch sign and that stopped you right well now you will be able to interact with the paintings you can touch and you can click so you can do whatever you want you can uh attach other event listeners you can add your own logic but for now I added the logic to Simply navigate to an external website which will be our website but feel free to to make your your own logic about it it's easy customizable now so you can do it uh what else else uh if that's not exciting enough for this part six uh we have introduced also a VR button for VR support you can see we have the enter VR here this is also a feature that uh someone requested me by writing me on private so I couldn't uh make it sooner and I'm sorry for that because yeah uh that's someone that wrote To Me wanted to beat you know he had this project and really needed this feature but I was very busy but in the end yeah I at least started this feature to implement it so now we have this enter VR and we need to install an extension for this because I don't have a VR device and of course I cannot test it because I would need a VR device or headsets but but uh if you don't have it but you want to implement this you can download an extension on Google Chrome and that extension is called I think webxr simulator webxr simulator yeah yes it's this one install it and then go to your project open the the developer tools and here you should find this web Pixar open it and you can see now that we have the simulator and we can choose for example we have here Oculus Quest or Oculus go Etc Google Samsung Galaxy but yeah leave it here Oculus Quest and if we press enter VR you see that the scene turns black of course I cannot test it because I don't have the headsets but it shows that it works and if we go to the console you see web XR session started because I console log this so it means that it works we will go further into this and we will explore it together but follow me on this part six all right let's Dive Right In now we'll be adding an audio guide feature to our 3D art gallery this is an awesome feature that you could use to explain your projects or simply to guide users through your gallery and for this let's start by setting up some basic control controls for our audio guide in our HTML here we will need a div uh with a class of audio controls and two buttons one to start the audio and one to stop the audio so the shortcut for that audio controls and two buttons shortcut again for bottom bottom start audio okay we have this basic controls for this now let's switch to our JavaScript and we are going to create a module called audio guide where we will handle the audio functionality so create a new module here call it audio guide and as always we import three from three okay in this first line we will import the three as we always needed and we will declare a variable sound this variable will be our audio Source okay so we need an audio Source this audio Source will be this variable let sound after having this audio Source variable what we need we need the function that will make this possible and let's call it setup audio and since we needed to exported it would be export const setup outo okay so narrow function because we will need everything here inside so we have this uh setup audio uh this setup audio will will check as a parameter the camera because we need this camera parameter I will explain everything no worse so the first thing is for the audio um like in real life we have the music uh to be able to listen to the music we need our ears right so we listen to the music with we need some ears and the same thing in 3js we need this listener that will be will act as our ears okay so a variable for that const listener we are not going to call it ears so yeah listener and this uh we will get it from the audio listener uh class from three so new three do audio listener it is oh no it is it parenthesis okay uh make sure you are writing inside this function okay because when we will export it this logic will be inside this setup audio not outside because you will get errors ex ex so we defined our first function and the only one that we will need actually this takes the camera as a parameter and now inside this function we will create an instance of this three audio listener that as we said is essentially our ears to listen to to to the audio and the last thing is uh this listener will be added to the camera because let me explain camera. at we pass the listen this means that as the camera moves the sound will change accordingly creating a realistic audio experience okay that's why we attach this listen to the cover after that what we need we will need uh to create a new object which is 3. audio to pass our listener this will represent the audio Source in our scene let me explain we have this variable that we created and we said that this will be our audio source so sound equal to new 3. audio and to this audio we pass the listener okay this will represent the audio Source now what we need we need to instantiate AIO loader which will allow us to load our audio file because yeah we need to load the file and to load the file that we will download and put it somewhere in our project to load this file we need a loader and this loader is from three audio loader and that's it we will create uh for this const const AIO a loader and this audio loader as we said will be instantiated from three. audio loader it is here audio loader parenthesis don't forget now that we have this audio loader we are calling the load method and we will pass the file path where we have uh this sound this audio and we will also have another parameter apart from the file and I will explain while writing it down audio loader. load pass the file path here that can be yeah we will add the folder sounds inside this folder sounds eventually will be the name of of the the audio let's rename our audio audio guide because maybe we will have more than one audio so that OG you know the format OG and here as I said inside this oh I'm outside okay inside we we will also pass a callback function and this callback function will run once the audio file is loaded so function that we will run once the audio file is loaded we will pass here the buffer y because because here we will set the buffer of our sound object to the loaded audio data and the nameing in 3js is always intuitive so we we use this uh methods that the naming can explain itself so sound our sound set buffer and we just pass the buffer that I pass it here as a parameter also this callback that uh will run once the audio file is loaded we will set the buffer but also we want to to to enable looping because yeah for example I want to add the background music at the moment and I want just to to Loop it uh the same thing the naming is uh selfexplanatory of this method so sound. set loop and you set it to True simple as that also you might want to to adjust the volume sound. set volume and from a range from 0 to one you can choose 0.5 okay make sure everything is inside the curly brackets of this setup audio now that we have this sound and we created the loader we need uh two functions and we create the start audio the function to start the audio that we will call it and also a function to stop the audio and these two functions are pretty straightforward okay so export con start audio in this case to follow the logic uh when you create things when you create functions in programming you want that if there is a if there is a sound you want to play it but you want to check if there is a sound play it then if it's currently plain then pause it okay this is the logic because you you had the sound okay now you just want to start or stop it export cost yeah yeah yeah it's inside let's put it outside it's a separate function as I said it's pretty straightforward is there is a if there is a sound if sound if true just play it for that sound that play simple as that the same logic for stop audio export const stop audio if sound if it's currently playing you want to to stop it it's the the same thing not stop but pause so sound. pause okay yeah and that's it the last thing that we need finally we will import this setup audio function we will import it to our main JS okay we call it so we have the audio in our SC so go to main J s import this setup audio okay it's uh not an a default export so don't forget the curly brackets you know that I know from audio guide and then just call it here in MJS set up audio and you pass the camera as a parameter yeah you are passing the camera because you are using it here in the audio guide file you see you are using the camera that you attached The Listener to the camera to be able you know to to create that uh 3D experience as you move in the scene but you don't have any camera here defined in this file JavaScript doesn't know anything about this camera so yeah you have the camera here because you are getting it from setup scene and that's why you pass it here to use it also here and that's it we now have a working audio guide I don't think we have any errors oh okay I need to restart it you see here start audio guide stop audio guide yeah I need to put the audio file in my project because I don't have it but yeah we should not have any problem we will test let me add the file okay guys before we continue with the new functionality of the pointer lock controls to enable or disable them when we press a key I just want to add a small fix for the audio guide file because sometimes you may have some issues on playing the audio okay you will wait for it and it will not play immediately and this is due to the asynchronous nature of audio loading in JavaScript and how the web audio API handles playback requests and here is an adjusted version of this audio guide file that maybe should work more reliably there are just a few lines of code really so we create first a new variable and this variable will be called buffer loaded and by default it will be false okay this flag is to track if audio buffer is loaded or not and here when we are using this load method when we are are setting the buffer and setting the loop here we will set the buffer loaded to true this will set buffer loaded flag to True once the audio buffer is loaded because yeah we are using it we are loading the sound here we are setting the buffer setting the loop volume and also the buffer loaded it will be true and why because here when we are starting the audio and here we have the condition if sound is true so if there is a sound we will add and so if sound but also buffer loaded true so if there is a sound and if the buffer loaded is true so check if the buffer loaded before playing then sound. playay and that's it this is the fix and that's all it should be better now for the asynchronous nature of JavaScript in this version buffer loaded is a flag that tracks whether the audio buff buffer is loaded we only allow the audio to be played if the buffer is loaded okay so that's why we said buffer loaded to true this approach ensures that we don't attempt to play the audio before it's ready which can cause issues or inconsistencies however please know that it may still take some time to load the audio data especially for large files or slow network connections dur in which the audio cannot be played so keep in mind that all right let's continue fixing the pointer lock controls now and here we should go to the file event listeners because here is where we will make the changes for the pointer locks at the top we will introduce a new variable lock pointer which will keep track of the state of the pointer lock okay if it's true it means that the pointer is locked and we are in the game mode if it's false it means that the pointer is unlocked we can interact with the UI elements okay so let's introduce this new variable and follow me step by step so let uh lock pointer and by default it will be true and also another variable for the menu to show it uh when it's unlock or not so let show menu unlock and this by default is fult so these two new variables lock pointer and show menu unlock lock pointer will help us know the current state of the pointer whether it is locked or not simple as that show menu unlock will be a flag that determines if the menu should be shown when the pointer lock is locked simple as that okay now we should change a bit our code and what we will change are this key down key up and unlock okay so first of all we will change uh the unlock to show the menu or not and here we will change the second parameter meter which now is simply the show menu okay that we get from menu JS to show the menu which is a module separated module here we will change the bit we will add a condition let's add first a function and this Arrow function this Arrow function we'll check this condition if show menu unlock okay then we show the menu so if this flag is true then we will show the menu simple as that so we simply call the show menu okay that you know we have it imported and yeah else the show menu unlock will be false so show menu unlock will be false that's it too many comments but yeah in this part we add this event listener to the unlock event so we check whether to display the menu when the pointer lock is released and after after that we rested the flag back to the false value okay now next thing we want to do is to create a function to toggle the pointer lock so let's create this function and let's call it toggle pointer lock so function toggle pointer log it will take as parameter the controls and inside the function we will check the condition to toggle it if log pointer so if it's true the variable loog pointer which initially is true then we want the controls to be locked that's why we have the parameter controls because we want to set the controls to lock or unlock okay so without getting confused if you see the code it's way easier so the condition if lock pointer which is the variable that we just created if lock pointer what we do we lock the controls so controls. loock else if the condition is not met that what we want to do we want to set the controls to unlock so controls. unlock okay so we have the controls as a parameter we will call it in the main JS etc etc etc but also in the else block we also want to set the show menu unlock to false right show menu unlock it will be false I hope this is clear the last thing that we want is to toggle this loog pointer here so loog pointer equal exclamation mark loog pointer which is basically set the buan value to to to its the contrary so set it if it's true make it false if it's false make it true this is the meaning of this exclamation Mark but yeah I know that you already know this I'm just reminding you the basic things okay so this toggles the lock pointer variable that we created at the top just tole okay and that's it for this part of code this function is called when we want to toggle the state of the pointer lock if the pointer lock is currently locked meaning that the lock pointer is true initially we lock and V Versa or vice versa in English we also toggle at the end the value of log pointer at the end so this function is keep it up to date with the actual state of the pointer lock and this is done so now that we have this function toggle pointer lock we can toggle now the pointer lock when we press a key that's what we wanted to do right we wanted that press a key and toggle the pointer lock in game mode or using the UI elements so being able to use the mass events okay since now we are not able to use the mouse events on click because the poter lock controls won't let us so with this function we will disable or enable them based on how we want it to be so we want the pointer locks to move but when we want to click something we want to stop and deactivate them and simple as that we will do it when we press a key so this is a custom way function to to make this to solve this problem that we had that some people requested in the comments okay so we have this function toal point a lock let's create a condition no not here but we will create the condition inside of this Onkey down event because there is where the event keys are registered you see event keys in key press that we have an object if you uh forgot we have this key pressed that if you want to check it quickly okay it uh has all this uh values false or initially and then we check them if they are pressed Etc so this is to control the event keys that we press the input by the user and here on this function on key down that is the event that checks if we press a key below this condition that we already have we will add our new condition so if we press the space bar we will choose space bar for this we can use any other key but I think space bar is uh yeah it's uh better it's practical so if we press the space bar we toggle the point l so if it is true it will be false if it is false it will be true we toggle it if EV that key the same equal oh equal for the space bar is just an empty space here we toggle we call the function and that's it toggle pointer lock and we pass as a parameter the controls here this is this space bar making again the summary of this function will be used to toggle the state of the pointer lock which means that if the pointer is currently locked it will be unlocked and if it's currently unlock it would be locked okay it's a playing with words this is a convenience feature for users to easily switch between the game mode the immersive mode and the UI interaction mode that we can use the mouse events we can also add other checks for other keys that we want to use for example we can set a key to start the audio we can set a key to stop the audio we can set a key to show the menu and many other things we can do all of that okay maybe we can use uh now the Escape key so if we press the Escape key we want what we want to do if we press the Escape key we want to set the controls to unlock okay press the escape and it will be unlock also we want to to show the menu so we will set the show menu on lock variable to True uh let's do it with code so it's easier to to understand so again the same thing if ev. key equal is Escape which is the code for the Escape key we want to do a set of things first of all we show the menu we press the the Escape key we want to show the menu if we are let's say uh with the pointer locks you know we press Escape show the menu stop the pointer locks or you know the exploring mode so first of all call call show menu then uh we want to set the variable to true the show menu unlock which is uh responsible to check the state for this so show menu unlock to True also we want as we said to set the controls to unlock you don't get to be confused with lock unlock because you know for the controls but I think now you are familiar with this so set the controls to unlock also as with the menu we want to change this variable that we had at the top so the variable that which is responsible to track the state so log pointer we set it to false in this case Okay so the lock pointer is false and that's it we also have this for the Escape key okay you see I press the Escape key I show the menu and set it the unlock controls okay so it works what else we can do we can add also the enter key to start the game to start the the exploring mode so if we press the enter key what we want to do let's say uh now we have the menu okay so what we want to do and the also the controls are unlocked so if we press the enter we want to hide the menu and also we want to set the controls to lock and set the variable for that it's easy it's this the same thing you can do it without my help so if ev. key equal to enter as we said we want to hide the menu first so called HDE menu okay that you see we imported hide menu and show menu from the menu Js which we have here okay you see we have two functions show menu and high menu which basically wheel Styles they show our height simple as that where are we okay we are here so if we press enter we hide the menu also we said we want the controls to lock so controls do lock okay and don't forget to set the variable to true so the variables is responsible to you know to check to be set because with that variable we keep track of the state of the pointer logs so log pointer set it to True okay and then that's it we also have Escape we have enter and uh we have the space key okay guys I was testing it so the toggle pointer lock when we hit the space bar doesn't work and let's check okay I see a few issues here that we should fix but first of all let me change this variable name and then we fix the issues okay so these isues are two issues the first no three issues actually the first are these two event listeners here the first are these two event listeners here we should pass the event and the controls also we should pass the controls here because yeah of course we are using the controls so we should pass here as the parameter controls this is a space should be correct so the only thing to fix are these two event listeners okay so let's fix it so here on this ony down let's pass the event cre ER function and on this ony down let's pass the two parameters event and controls okay the same thing for enia yeah okay it should be okay now here we have the controls here we have the controls I think it should work now let's try pointer locks are enabled let's press space okay it works ah okay okay it works the first time but the toggle doesn't work so this is correct but the tole doesn't work so the second time that I press the space doesn't work and probably is the problem here okay I saw it here you see controls. loock the parenthesis okay we should call it this lock method and yeah I think yeah unlock parenthesis yeah yeah I think that's the issue let's try press space it works okay press again it works yes now it works this is fixed okay now that we fixed the pointer locks controls toggle we want to add the functionality that we discussed previously so we are going to help the users interact with our 3D scene by enabling them to click on paintings which will then open up Associated web pages something that uh many of you wanted to to have the main components of these features are first The Click event handling then the ray casting that we didn't cover the painting object interaction and to break it down with the explanation step by step uh let's see the code that we are going to create for that first of all let's create a new module and let's call this module click handling and first thing first we want to import the three import three front three okay and before creating the function because we need the function click handling we need two variables okay so these variables are the mouse coordinates and the Ray Caster let Mouse we create a new Vector two for this so from the three new new 3. Vector 2 and for the r Caster let R Caster new three. raycaster okay now we created this module and now we will create a function with the same name a click handling that will accept some parameters so function click handling with the parameters renderer camera and paintings arguments actually so render camera paintings okay we don't have this defined anywhere in this file but you know by now that we will call this function here in the main JS and we'll pass you know the camera etc etc I will create this function and we'll explain it after writing it down uh what I wrote and why and step by step with the explanation of it okay but uh the first thing is we want to register an event listener for the click event so each time a click happens we want to register it in the screen so later we know if this click was in the painting or not so access the renderer then the D elements and we attach an event listener to to to this uh D element sorry so add event listener and it will be a click event then with an nrow function that we pass the event to to use it and here we will use the coordinates for the mouse for the X and the Y uh coordinates okay so here uh the mouse that we created the vector 2 mouse. x and we should normalize this but I will explain after writing it so mouse. x uh we assign it to the event. clientx okay divided uh you have heard of this when window. inner width and window. inner height do you remember inner width and we normalize it for those that uh don't know what I'm talking about I will explain minus one and the same thing for the Y Y and here inner height okay here we registered an event listener on the click event okay I sorry I have just small back here this is plus we registered an event listener on the click event and each time a click happens we normalize the mouse uh position to range of minus1 to plus one for both X and Y this is because 3js uses this range to represent the screen space we then call the onclick function passing the camera and the paintings as arguments so onclick pass the camera paintings okay and this is done don't get confused by this formula here is just to normalize the coordinates for the X and the Y because 3js uses this to represent the screen space and that's it nothing uh you know to be afraid of yeah I have a small typo here the next step is to implement the r casting and we didn't cover R casting we wanted to cover it when we uh made the Collision but I found an easier solution so we didn't use R casting on that part uh since we want want to handle the click event using uh this Ray casting technique the Ray Caster to to explain it uh simply is an object that emits a aray from a specific point in a specific Direction This Ray can be used to check whether any objects intersects with it or not okay in our case we are using it to see the user's Mouse uh when it clicks intersects with any of the paintings that we have in the scene here we create the function uh on click we pass Cameron paintings then we access this Ray Caster and we have a a method here set from camera I will explain and we pass the mouse and the camera then we create a variable for the intersects con intersects and assign it to R Caster do intersect objects method intersect objects okay objects not object and here we pass uh what the paintings what we want to intersect paintings in this onclick function that we just created we use the recaster set from camera method which takes the normalized mouse coordinates for x and for y as arguments and also the camera we then use the requesters intersect objects to get an array of intersections between the array and the paintings each element in this array represents an intersection and it contains information about where the intersection occurred what object uh was intersected etc etc so we have this the next uh step would be to handle the case when the intersection does really occur so if this intersect array that we mentioned is not empty it means that the user has clicked and uh it was a painting there where we clicked and in that case when it happens we grab the first intersection uh which will be the closest painting that the user uh clicked on and we will perform our desired action in this case we will just open a new uh web web page we will be redirected to to our shop our landing page Etc so to implement that add the condition if as we said if this intersect array is not uh empty and for that in javascri scrip we check with intersect if intersect is greater than zero here we create uh first the a variable to to access the painting so the first one painting sorry const painting the first uh that we get in the array so intersects uh uh index zero that object here perform the desired actions okay we can conso log we can conso log here the the clicked painting So clicked painting and here we pass the title of it so we know what we what we click and that is we get it from painting data painting title where is it title so info title okay but this is the user data object which is here in painting. JS this user data so so here to access it painting. user data do info. tile okay since we are there we want simply to to open an external page so for that we use window. open here and we pass the link that we want to open we can simply add here the URL but it will be added here in the user data so a new property here uh URL and also add it here yeah I already edit here the URL so for that I can simply or back W okay I have it oh I have it oh yeah I have it I can simply add the link here and we also have the URL here so for that uh we can access this uh the same with painting user data info link painting user data info link open it in a new page so blank and that's it it should work the last thing here is to call this function click handling in the main JS so we can also get we can also get this arguments render camera paintings so here import it click handling okay and let's say here call it click handling and pass render camera we said and paintings right render camera paintings render camera paintings yes let's try now if it works or not we disable the point of locks first now we click it doesn't work let's see the console lock on click is not function on click why is see lower case it should be uppercase right I click yeah it was a typo disa poter locks controls click but now nothing happens oh if intersects greater than zero if intersects that length it's an array but I don't think this is the issue yeah exactly this is not the issue oh okay so this is for 3js to normalize the screen space we set from minus one to + one so this is minus here this is minus here I think think this is causing the issue yes it works that was the issue if we click here nothing happens if we click on the painting it intersects and it works so it organizes the paintings okay and this is done you see also it's console locked clicked painting vangog 2 click painting vangog 3 or vangog Guan so it works and that's it for this part of the tutorial I think we have implemented this feature that was requested we also added the audio guide maybe we go and implement the VR support for our 3D art gallery what you think it would be nice to make a tutorial on it but I will think and we can maybe add another tutorial about web Pixar tell me your thoughts and if you would like to add this webar support for our art gallery or not or if you have any other suggestion thank you for following me and see you
