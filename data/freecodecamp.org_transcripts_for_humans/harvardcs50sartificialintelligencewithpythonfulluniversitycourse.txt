With timestamps:

00:00 - This course from Harvard University explores the concepts and algorithms at the foundation of modern
00:07 - artificial intelligence, diving into the ideas that give rise to technologies like game-playing
00:13 - engines, handwriting recognition, and machine translation. You'll gain exposure to the theory
00:20 - behind graph search algorithms, classification, optimization, reinforcement learning,
00:26 - and other topics in artificial intelligence and machine learning. Brian Yu teaches this course.
00:33 - Hello, world. This is CS50, and this is an introduction to artificial intelligence with
00:56 - Python with CS50's own Brian Yu. This course picks up where CS50 itself leaves off and explores the
01:02 - concepts and algorithms at the foundation of modern AI.
01:06 - We'll start with a look at how AI can search for solutions to problems,
01:10 - whether those problems are learning how to play a game or trying
01:12 - to find driving directions to a destination.
01:15 - We'll then look at how AI can represent information, both knowledge that our AI
01:19 - is certain about, but also information and events about which our AI might be uncertain,
01:23 - learning how to represent that information, but more importantly,
01:26 - how to use that information to draw inferences and new conclusions as well.
01:30 - We'll explore how AI can solve various types of optimization problems,
01:33 - trying to maximize profits or minimize costs or satisfy some other constraints
01:38 - before turning our attention to the fast-growing field of machine learning,
01:41 - where we won't tell our AI exactly how to solve a problem, but instead,
01:45 - give our AI access to data and experiences
01:48 - so that our AI can learn on its own how to perform these tasks.
01:52 - In particular, we'll look at neural networks, one of the most popular tools
01:55 - in modern machine learning, inspired by the way that human brains learn and reason as well
01:59 - before finally taking a look at the world of natural language processing
02:03 - so that it's not just us humans learning to learn how artificial intelligence is
02:06 - able to speak, but also AI learning how to understand and interpret human language as well.
02:11 - We'll explore these ideas and algorithms, and along the way,
02:14 - give you the opportunity to build your own AI programs to implement all of this and more.
02:19 - This is CS50.
02:44 - All right.
02:44 - Welcome, everyone, to an introduction to artificial intelligence with Python.
02:48 - My name is Brian Yu, and in this class, we'll
02:50 - explore some of the ideas and techniques and algorithms
02:53 - that are at the foundation of artificial intelligence.
02:56 - Now, artificial intelligence covers a wide variety of types of techniques.
03:00 - Anytime you see a computer do something that
03:01 - appears to be intelligent or rational in some way,
03:05 - like recognizing someone's face in a photo,
03:07 - or being able to play a game better than people can,
03:09 - or being able to understand human language when we talk to our phones
03:12 - and they understand what we mean and are able to respond back to us,
03:16 - these are all examples of AI, or artificial intelligence.
03:19 - And in this class, we'll explore some of the ideas that make that AI possible.
03:24 - So we'll begin our conversations with search, the problem of we have an AI,
03:28 - and we would like the AI to be able to search for solutions to some kind of problem,
03:32 - no matter what that problem might be.
03:33 - Whether it's trying to get driving directions from point A to point B,
03:37 - or trying to figure out how to play a game, given a tic-tac-toe game,
03:40 - for example, figuring out what move it ought to make.
03:43 - After that, we'll take a look at knowledge.
03:45 - Ideally, we want our AI to be able to know information,
03:48 - to be able to represent that information, and more importantly,
03:51 - to be able to draw inferences from that information,
03:53 - to be able to use the information it knows and draw additional conclusions.
03:57 - So we'll talk about how AI can be programmed in order to do just that.
04:02 - Then we'll explore the topic of uncertainty,
04:04 - talking about ideas of what happens if a computer isn't sure about a fact,
04:08 - but maybe is only sure with a certain probability.
04:11 - So we'll talk about some of the ideas behind probability,
04:13 - and how computers can begin to deal with uncertain events
04:16 - in order to be a little bit more intelligent in that sense as well.
04:20 - After that, we'll turn our attention to optimization,
04:23 - problems of when the computer is trying to optimize for some sort of goal,
04:27 - especially in a situation where there might be multiple ways
04:29 - that a computer might solve a problem, but we're looking for a better way,
04:33 - or potentially the best way, if that's at all possible.
04:36 - Then we'll take a look at machine learning, or learning more generally,
04:39 - and looking at how, when we have access to data,
04:41 - our computers can be programmed to be quite intelligent by learning from data
04:45 - and learning from experience, being able to perform a task better and better
04:48 - based on greater access to data.
04:50 - So your email, for example, where your email inbox somehow knows
04:54 - which of your emails are good emails and which of your emails are spam.
04:57 - These are all examples of computers being able to learn from past experiences
05:01 - and past data.
05:03 - We'll take a look, too, at how computers are
05:05 - able to draw inspiration from human intelligence,
05:08 - looking at the structure of the human brain,
05:10 - and how neural networks can be a computer analog to that sort of idea,
05:13 - and how, by taking advantage of a certain type of structure of a computer program,
05:17 - we can write neural networks that are able to perform tasks very, very
05:21 - effectively.
05:22 - And then finally, we'll turn our attention to language, not programming
05:25 - languages, but human languages that we speak every day.
05:28 - And taking a look at the challenges that come about as a computer tries
05:31 - to understand natural language, and how it is some of the natural language
05:35 - processing that occurs in modern artificial intelligence can actually
05:39 - work.
05:40 - But today, we'll begin our conversation with search, this problem
05:43 - of trying to figure out what to do when we have some sort of situation
05:47 - that the computer is in, some sort of environment that an agent is in,
05:50 - so to speak, and we would like for that agent
05:52 - to be able to somehow look for a solution to that problem.
05:56 - Now, these problems can come in any number of different types of formats.
05:59 - One example, for instance, might be something
06:01 - like this classic 15 puzzle with the sliding tiles that you might have seen.
06:04 - Where you're trying to slide the tiles in order
06:06 - to make sure that all the numbers line up in order.
06:09 - This is an example of what you might call a search problem.
06:12 - The 15 puzzle begins in an initially mixed up state,
06:15 - and we need some way of finding moves to make in order
06:18 - to return the puzzle to its solved state.
06:20 - But there are similar problems that you can frame in other ways.
06:23 - Trying to find your way through a maze, for example,
06:25 - is another example of a search problem.
06:27 - You begin in one place, you have some goal of where you're trying to get to,
06:31 - and you need to figure out the correct sequence of actions that will take you
06:34 - from that initial state to the goal.
06:36 - And while this is a little bit abstract, any time
06:38 - we talk about maze solving in this class,
06:40 - you can translate it to something a little more real world.
06:43 - Something like driving directions.
06:45 - If you ever wonder how Google Maps is able to figure out what is the best way
06:48 - for you to get from point A to point B, and what turns to make at what time,
06:52 - depending on traffic, for example, it's often some sort of search algorithm.
06:56 - You have an AI that is trying to get from an initial position
06:59 - to some sort of goal by taking some sequence of actions.
07:03 - So we'll start our conversations today by thinking
07:06 - about these types of search problems and what
07:08 - goes in to solving a search problem like this in order for an AI
07:11 - to be able to find a good solution.
07:14 - In order to do so, though, we're going to need
07:15 - to introduce a little bit of terminology, some of which I've already used.
07:19 - But the first term we'll need to think about is an agent.
07:22 - An agent is just some entity that perceives its environment.
07:25 - It somehow is able to perceive the things around it
07:27 - and act on that environment in some way.
07:30 - So in the case of the driving directions,
07:31 - your agent might be some representation of a car that
07:34 - is trying to figure out what actions to take in order
07:36 - to arrive at a destination.
07:38 - In the case of the 15 puzzle with the sliding tiles,
07:40 - the agent might be the AI or the person that
07:43 - is trying to solve that puzzle to try and figure out what tiles to move
07:46 - in order to get to that solution.
07:49 - Next, we introduce the idea of a state.
07:52 - A state is just some configuration of the agent in its environment.
07:56 - So in the 15 puzzle, for example, any state might be any one of these three,
08:00 - for example. A state is just some configuration of the tiles.
08:03 - And each of these states is different and is
08:05 - going to require a slightly different solution.
08:08 - A different sequence of actions will be needed in each one of these
08:11 - in order to get from this initial state to the goal, which
08:15 - is where we're trying to get.
08:16 - So the initial state, then, what is that?
08:18 - The initial state is just the state where the agent begins.
08:21 - It is one such state where we're going to start from.
08:24 - And this is going to be the starting point for our search algorithm,
08:27 - so to speak.
08:28 - We're going to begin with this initial state
08:29 - and then start to reason about it, to think about what actions might we
08:32 - apply to that initial state in order to figure out how to get from the beginning
08:37 - to the end, from the initial position to whatever our goal happens to be.
08:42 - And how do we make our way from that initial position to the goal?
08:44 - Well, ultimately, it's via taking actions.
08:47 - Actions are just choices that we can make in any given state.
08:50 - And in AI, we're always going to try to formalize these ideas a little bit
08:54 - more precisely, such that we could program them a little bit more
08:57 - mathematically, so to speak.
08:58 - So this will be a recurring theme.
09:00 - And we can more precisely define actions as a function.
09:04 - We're going to effectively define a function called actions that takes an
09:07 - input, s, where s is going to be some state that exists inside of our environment.
09:12 - And actions of s is going to take the state as input and return as output
09:17 - the set of all actions that can be executed in that state.
09:22 - And so it's possible that some actions are only valid in certain states
09:25 - and not in other states.
09:27 - And we'll see examples of that soon, too.
09:29 - So in the case of the 15 puzzle, for example,
09:31 - there are generally going to be four possible actions that we can do most of
09:35 - the time.
09:36 - We can slide a tile to the right, slide a tile to the left, slide a tile up,
09:39 - or slide a tile down, for example.
09:41 - And those are going to be the actions that are available to us.
09:45 - So somehow our AI, our program, needs some encoding
09:48 - of the state, which is often going to be in some numerical format,
09:51 - and some encoding of these actions.
09:53 - But it also needs some encoding of the relationship between these things.
09:56 - How do the states and actions relate to one another?
10:00 - And in order to do that, we'll introduce to our AI a transition model, which
10:04 - will be a description of what state we get after we perform some available
10:08 - action in some other state.
10:10 - And again, we can be a little bit more precise about this,
10:12 - define this transition model a little bit more formally, again, as a function.
10:17 - The function is going to be a function called result that this time takes two
10:20 - inputs.
10:21 - Input number one is s, some state.
10:24 - And input number two is a, some action.
10:27 - And the output of this function result is it
10:30 - is going to give us the state that we get after we perform action a in state s.
10:36 - So let's take a look at an example to see more precisely what this actually means.
10:39 - Here is an example of a state, of the 15 puzzle, for example.
10:43 - And here is an example of an action, sliding a tile to the right.
10:46 - What happens if we pass these as inputs to the result function?
10:50 - Again, the result function takes this board, this state, as its first input.
10:54 - And it takes an action as a second input.
10:57 - And of course, here, I'm describing things visually
10:59 - so that you can see visually what the state is and what the action is.
11:02 - In a computer, you might represent one of these actions
11:04 - as just some number that represents the action.
11:06 - Or if you're familiar with enums that allow
11:08 - you to enumerate multiple possibilities,
11:10 - it might be something like that.
11:11 - And this state might just be represented
11:13 - as an array or two-dimensional array of all of these numbers that exist.
11:17 - But here, we're going to show it visually just so you can see it.
11:20 - But when we take this state and this action,
11:23 - pass it into the result function, the output is a new state.
11:26 - The state we get after we take a tile and slide it to the right,
11:30 - and this is the state we get as a result.
11:32 - If we had a different action and a different state, for example,
11:35 - and pass that into the result function, we'd
11:37 - get a different answer altogether.
11:38 - So the result function needs to take care
11:41 - of figuring out how to take a state and take an action and get what results.
11:45 - And this is going to be our transition model that
11:48 - describes how it is that states and actions are related to each other.
11:52 - If we take this transition model and think about it more generally
11:55 - and across the entire problem, we can form what we might call a state space.
12:00 - The set of all of the states we can get from the initial state
12:03 - via any sequence of actions, by taking 0 or 1 or 2 or more actions in addition
12:08 - to that, so we could draw a diagram that looks something like this, where
12:12 - every state is represented here by a game board, and there are arrows
12:15 - that connect every state to every other state we can get to from that state.
12:20 - And the state space is much larger than what you see just here.
12:23 - This is just a sample of what the state space might actually look like.
12:27 - And in general, across many search problems,
12:29 - whether they're this particular 15 puzzle or driving directions or something else,
12:33 - the state space is going to look something like this.
12:36 - We have individual states and arrows that are connecting them.
12:40 - And oftentimes, just for simplicity, we'll
12:42 - simplify our representation of this entire thing as a graph, some sequence
12:47 - of nodes and edges that connect nodes.
12:50 - But you can think of this more abstract representation
12:52 - as the exact same idea.
12:54 - Each of these little circles or nodes is going
12:56 - to represent one of the states inside of our problem.
12:59 - And the arrows here represent the actions
13:01 - that we can take in any particular state, taking us
13:04 - from one particular state to another state, for example.
13:09 - All right.
13:10 - So now we have this idea of nodes that are representing these states,
13:14 - actions that can take us from one state to another,
13:16 - and a transition model that defines what happens after we
13:19 - take a particular action.
13:21 - So the next step we need to figure out is how
13:23 - we know when the AI is done solving the problem.
13:26 - The AI needs some way to know when it gets to the goal that it's found the goal.
13:30 - So the next thing we'll need to encode into our artificial intelligence
13:33 - is a goal test, some way to determine whether a given state is a goal state.
13:39 - In the case of something like driving directions, it might be pretty easy.
13:42 - If you're in a state that corresponds to whatever the user typed
13:45 - in as their intended destination, well, then you know you're in a goal state.
13:48 - In the 15 puzzle, it might be checking the numbers
13:51 - to make sure they're all in ascending order.
13:52 - But the AI needs some way to encode whether or not
13:55 - any state they happen to be in is a goal.
13:58 - And some problems might have one goal, like a maze
14:00 - where you have one initial position and one ending position,
14:03 - and that's the goal.
14:04 - In other more complex problems, you might imagine
14:06 - that there are multiple possible goals.
14:08 - That there are multiple ways to solve a problem,
14:10 - and we might not care which one the computer finds,
14:13 - as long as it does find a particular goal.
14:17 - However, sometimes the computer doesn't just care about finding a goal,
14:20 - but finding a goal well, or one with a low cost.
14:23 - And it's for that reason that the last piece of terminology
14:26 - that we'll use to define these search problems
14:28 - is something called a path cost.
14:30 - You might imagine that in the case of driving directions,
14:33 - it would be pretty annoying if I said I wanted directions from point A
14:36 - to point B, and the route that Google Maps gave me
14:38 - was a long route with lots of detours that were unnecessary that took longer
14:42 - than it should have for me to get to that destination.
14:45 - And it's for that reason that when we're formulating search problems,
14:48 - we'll often give every path some sort of numerical cost,
14:51 - some number telling us how expensive it is to take this particular option,
14:56 - and then tell our AI that instead of just finding
14:59 - a solution, some way of getting from the initial state to the goal,
15:02 - we'd really like to find one that minimizes this path cost.
15:06 - That is, less expensive, or takes less time,
15:09 - or minimizes some other numerical value.
15:12 - We can represent this graphically if we take a look at this graph again,
15:15 - and imagine that each of these arrows, each of these actions
15:18 - that we can take from one state to another state,
15:21 - has some sort of number associated with it.
15:23 - That number being the path cost of this particular action,
15:26 - where some of the costs for any particular action
15:29 - might be more expensive than the cost for some other action, for example.
15:33 - Although this will only happen in some sorts of problems.
15:35 - In other problems, we can simplify the diagram
15:38 - and just assume that the cost of any particular action is the same.
15:42 - And this is probably the case in something like the 15 puzzle,
15:45 - for example, where it doesn't really make a difference
15:47 - whether I'm moving right or moving left.
15:49 - The only thing that matters is the total number
15:52 - of steps that I have to take to get from point A to point B.
15:56 - And each of those steps is of equal cost.
15:58 - We can just assume it's of some constant cost like one.
16:03 - And so this now forms the basis for what we might consider to be a search problem.
16:07 - A search problem has some sort of initial state, some place where we begin,
16:11 - some sort of action that we can take or multiple actions
16:14 - that we can take in any given state.
16:16 - And it has a transition model.
16:17 - Some way of defining what happens when we go from one state
16:21 - and take one action, what state do we end up with as a result.
16:24 - In addition to that, we need some goal test
16:26 - to know whether or not we've reached a goal.
16:29 - And then we need a path cost function that
16:31 - tells us for any particular path, by following some sequence of actions,
16:35 - how expensive is that path.
16:37 - What does its cost in terms of money or time or some other resource
16:41 - that we are trying to minimize our usage of.
16:44 - And the goal ultimately is to find a solution.
16:46 - Where a solution in this case is just some sequence of actions
16:50 - that will take us from the initial state to the goal state.
16:52 - And ideally, we'd like to find not just any solution
16:55 - but the optimal solution, which is a solution that
16:58 - has the lowest path cost among all of the possible solutions.
17:02 - And in some cases, there might be multiple optimal solutions.
17:05 - But an optimal solution just means that there
17:07 - is no way that we could have done better in terms of finding that solution.
17:12 - So now we've defined the problem.
17:13 - And now we need to begin to figure out how it
17:15 - is that we're going to solve this kind of search problem.
17:18 - And in order to do so, you'll probably imagine
17:21 - that our computer is going to need to represent a whole bunch of data
17:24 - about this particular problem.
17:26 - We need to represent data about where we are in the problem.
17:28 - And we might need to be considering multiple different options at once.
17:32 - And oftentimes, when we're trying to package a whole bunch of data
17:35 - related to a state together, we'll do so using a data structure
17:38 - that we're going to call a node.
17:40 - A node is a data structure that is just going
17:42 - to keep track of a variety of different values.
17:44 - And specifically, in the case of a search problem,
17:47 - it's going to keep track of these four values in particular.
17:50 - Every node is going to keep track of a state, the state we're currently on.
17:54 - And every node is also going to keep track of a parent.
17:57 - A parent being the state before us or the node
18:00 - that we used in order to get to this current state.
18:03 - And this is going to be relevant because eventually, once we reach the goal node,
18:07 - once we get to the end, we want to know what sequence of actions
18:10 - we use in order to get to that goal.
18:12 - And the way we'll know that is by looking at these parents
18:16 - to keep track of what led us to the goal and what led us to that state
18:19 - and what led us to the state before that, so on and so forth,
18:22 - backtracking our way to the beginning so that we
18:25 - know the entire sequence of actions we needed in order
18:27 - to get from the beginning to the end.
18:30 - The node is also going to keep track of what action we took in order
18:33 - to get from the parent to the current state.
18:35 - And the node is also going to keep track of a path cost.
18:39 - In other words, it's going to keep track of the number
18:41 - that represents how long it took to get from the initial state
18:45 - to the state that we currently happen to be at.
18:47 - And we'll see why this is relevant as we
18:49 - start to talk about some of the optimizations
18:51 - that we can make in terms of these search problems more generally.
18:55 - So this is the data structure that we're going to use in order to solve
18:57 - the problem.
18:58 - And now let's talk about the approach.
19:00 - How might we actually begin to solve the problem?
19:03 - Well, as you might imagine, what we're going to do
19:05 - is we're going to start at one particular state,
19:08 - and we're just going to explore from there.
19:10 - The intuition is that from a given state,
19:12 - we have multiple options that we could take,
19:14 - and we're going to explore those options.
19:16 - And once we explore those options, we'll
19:18 - find that more options than that are going to make themselves available.
19:22 - And we're going to consider all of the available options
19:24 - to be stored inside of a single data structure that we'll call the frontier.
19:29 - The frontier is going to represent all of the things
19:31 - that we could explore next that we haven't yet explored or visited.
19:36 - So in our approach, we're going to begin the search algorithm
19:39 - by starting with a frontier that just contains one state.
19:42 - The frontier is going to contain the initial state,
19:45 - because at the beginning, that's the only state we know about.
19:47 - That is the only state that exists.
19:50 - And then our search algorithm is effectively going to follow a loop.
19:53 - We're going to repeat some process again and again and again.
19:57 - The first thing we're going to do is if the frontier is empty,
20:01 - then there's no solution.
20:02 - And we can report that there is no way to get to the goal.
20:05 - And that's certainly possible.
20:06 - There are certain types of problems that an AI might try to explore
20:09 - and realize that there is no way to solve that problem.
20:12 - And that's useful information for humans to know as well.
20:15 - So if ever the frontier is empty, that means there's nothing left to explore.
20:19 - And we haven't yet found a solution, so there is no solution.
20:22 - There's nothing left to explore.
20:24 - Otherwise, what we'll do is we'll remove a node from the frontier.
20:28 - So right now at the beginning, the frontier just contains one node
20:32 - representing the initial state.
20:33 - But over time, the frontier might grow.
20:35 - It might contain multiple states.
20:36 - And so here, we're just going to remove a single node from that frontier.
20:41 - If that node happens to be a goal, then we found a solution.
20:44 - So we remove a node from the frontier and ask ourselves, is this the goal?
20:48 - And we do that by applying the goal test that we talked about earlier,
20:51 - asking if we're at the destination.
20:53 - Or asking if all the numbers of the 15 puzzle happen to be in order.
20:56 - So if the node contains the goal, we found a solution.
20:59 - Great.
21:00 - We're done.
21:01 - And otherwise, what we'll need to do is we'll need to expand the node.
21:06 - And this is a term of art in artificial intelligence.
21:08 - To expand the node just means to look at all of the neighbors of that node.
21:12 - In other words, consider all of the possible actions
21:15 - that I could take from the state that this node is representing
21:18 - and what nodes could I get to from there.
21:21 - We're going to take all of those nodes, the next nodes
21:23 - that I can get to from this current one I'm looking at,
21:26 - and add those to the frontier.
21:28 - And then we'll repeat this process.
21:30 - So at a very high level, the idea is we start
21:32 - with a frontier that contains the initial state.
21:35 - And we're constantly removing a node from the frontier,
21:38 - looking at where we can get to next and adding those nodes to the frontier,
21:41 - repeating this process over and over until either we
21:44 - remove a node from the frontier and it contains a goal,
21:47 - meaning we've solved the problem, or we run into a situation
21:50 - where the frontier is empty, at which point we're left with no solution.
21:55 - So let's actually try and take the pseudocode,
21:57 - put it into practice by taking a look at an example of a sample search problem.
22:02 - So right here, I have a sample graph.
22:04 - A is connected to B via this action.
22:06 - B is connected to nodes C and D. C is connected to E. D is connected to F.
22:10 - And what I'd like to do is have my AI find a path from A to E.
22:16 - We want to get from this initial state to this goal state.
22:20 - So how are we going to do that?
22:22 - Well, we're going to start with a frontier that contains the initial state.
22:25 - This is going to represent our frontier.
22:27 - So our frontier initially will just contain
22:29 - A, that initial state where we're going to begin.
22:32 - And now we'll repeat this process.
22:34 - If the frontier is empty, no solution.
22:36 - That's not a problem, because the frontier is not empty.
22:38 - So we'll remove a node from the frontier as the one to consider next.
22:42 - There's only one node in the frontier.
22:44 - So we'll go ahead and remove it from the frontier.
22:46 - But now A, this initial node, this is the node we're currently considering.
22:51 - We follow the next step.
22:52 - We ask ourselves, is this node the goal?
22:55 - No, it's not.
22:55 - A is not the goal.
22:56 - E is the goal.
22:57 - So we don't return the solution.
22:59 - So instead, we go to this last step, expand the node,
23:02 - and add the resulting nodes to the frontier.
23:05 - What does that mean?
23:06 - Well, it means take this state A and consider where we could get to next.
23:10 - And after A, what we could get to next is only B.
23:14 - So that's what we get when we expand A. We find B.
23:16 - And we add B to the frontier.
23:18 - And now B is in the frontier.
23:20 - And we repeat the process again.
23:22 - We say, all right, the frontier is not empty.
23:24 - So let's remove B from the frontier.
23:26 - B is now the node that we're considering.
23:28 - We ask ourselves, is B the goal?
23:29 - No, it's not.
23:30 - So we go ahead and expand B and add its resulting nodes to the frontier.
23:35 - What happens when we expand B?
23:37 - In other words, what nodes can we get to from B?
23:40 - Well, we can get to C and D. So we'll go ahead and add C and D
23:43 - from the frontier.
23:44 - And now we have two nodes in the frontier, C and D.
23:47 - And we repeat the process again.
23:48 - We remove a node from the frontier.
23:50 - For now, I'll do so arbitrarily just by picking C.
23:52 - We'll see why later, how choosing which node you remove from the frontier
23:56 - is actually quite an important part of the algorithm.
23:58 - But for now, I'll arbitrarily remove C, say it's not the goal.
24:02 - So we'll add E, the next one, to the frontier.
24:05 - Then let's say I remove E from the frontier.
24:07 - And now I check I'm currently looking at state E. Is it a goal state?
24:11 - It is, because I'm trying to find a path from A to E. So I would return the goal.
24:15 - And that now would be the solution, that I'm now able to return the solution.
24:19 - And I have found a path from A to E.
24:23 - So this is the general idea, the general approach of this search algorithm,
24:26 - to follow these steps, constantly removing nodes from the frontier,
24:30 - until we're able to find a solution.
24:31 - So the next question you might reasonably ask is, what could go wrong here?
24:35 - What are the potential problems with an approach like this?
24:39 - And here's one example of a problem that could arise from this sort of approach.
24:42 - Imagine this same graph, same as before, with one change.
24:47 - The change being now, instead of just an arrow from A to B,
24:50 - we also have an arrow from B to A, meaning we can go in both directions.
24:54 - And this is true in something like the 15 puzzle, where when I slide a tile
24:57 - to the right, I could then slide a tile to the left
25:00 - to get back to the original position.
25:02 - I could go back and forth between A and B.
25:04 - And that's what these double arrows symbolize,
25:06 - the idea that from one state, I can get to another, and then I can get back.
25:10 - And that's true in many search problems.
25:12 - What's going to happen if I try to apply the same approach now?
25:16 - Well, I'll begin with A, same as before.
25:18 - And I'll remove A from the frontier.
25:20 - And then I'll consider where I can get to from A.
25:23 - And after A, the only place I can get to is B. So B goes into the frontier.
25:28 - Then I'll say, all right, let's take a look at B.
25:29 - That's the only thing left in the frontier.
25:31 - Where can I get to from B?
25:33 - Before, it was just C and D. But now, because of that reverse arrow,
25:37 - I can get to A or C or D. So all three, A, C, and D, all of those
25:43 - now go into the frontier.
25:44 - They are places I can get to from B. And now I remove one from the frontier.
25:48 - And maybe I'm unlucky, and maybe I pick A. And now I'm looking at A again.
25:53 - And I consider, where can I get to from A?
25:54 - And from A, well, I can get to B. And now we start to see the problem.
25:58 - But if I'm not careful, I go from A to B, and then back to A, and then to B again.
26:02 - And I could be going in this infinite loop, where I never make any progress,
26:05 - because I'm constantly just going back and forth between two states
26:09 - that I've already seen.
26:10 - So what is the solution to this?
26:12 - We need some way to deal with this problem.
26:14 - And the way that we can deal with this problem
26:16 - is by somehow keeping track of what we've already explored.
26:20 - And the logic is going to be, well, if we've already explored the state,
26:23 - there's no reason to go back to it.
26:25 - Once we've explored a state, don't go back to it.
26:27 - Don't bother adding it to the frontier.
26:29 - There's no need to.
26:31 - So here's going to be our revised approach, a better way
26:33 - to approach this sort of search problem.
26:35 - And it's going to look very similar, just with a couple of modifications.
26:39 - We'll start with a frontier that contains the initial state, same as before.
26:43 - But now we'll start with another data structure, which
26:46 - will just be a set of nodes that we've already explored.
26:49 - So what are the states we've explored?
26:51 - Initially, it's empty.
26:52 - We have an empty explored set.
26:55 - And now we repeat.
26:57 - If the frontier is empty, no solution, same as before.
27:00 - We remove a node from the frontier.
27:02 - We check to see if it's a goal state, return the solution.
27:04 - None of this is any different so far.
27:06 - But now what we're going to do is we're going to add the node
27:09 - to the explored state.
27:11 - So if it happens to be the case that we remove a node from the frontier
27:15 - and it's not the goal, we'll add it to the explored set
27:18 - so that we know we've already explored it.
27:19 - We don't need to go back to it again if it happens to come up later.
27:23 - And then the final step, we expand the node
27:26 - and we add the resulting nodes to the frontier.
27:28 - But before, we just always added the resulting nodes to the frontier.
27:31 - We're going to be a little clever about it this time.
27:34 - We're only going to add the nodes to the frontier
27:36 - if they aren't already in the frontier and if they aren't already
27:40 - in the explored set.
27:42 - So we'll check both the frontier and the explored set,
27:45 - make sure that the node isn't already in one of those two.
27:48 - And so long as it isn't, then we'll go ahead and add it to the frontier,
27:51 - but not otherwise.
27:53 - And so that revised approach is ultimately
27:55 - what's going to help make sure that we don't go back and forth between two
27:58 - nodes.
28:00 - Now, the one point that I've kind of glossed over here so far
28:02 - is this step here, removing a node from the frontier.
28:06 - Before, I just chose arbitrarily.
28:08 - Like, let's just remove a node and that's it.
28:10 - But it turns out it's actually quite important how
28:12 - we decide to structure our frontier, how we add and how we remove our nodes.
28:17 - The frontier is a data structure and we need
28:19 - to make a choice about in what order are we
28:21 - going to be removing elements.
28:23 - And one of the simplest data structures for adding and removing elements
28:27 - is something called a stack.
28:28 - And a stack is a data structure that is a last in, first out data type, which
28:33 - means the last thing that I add to the frontier
28:36 - is going to be the first thing that I remove from the frontier.
28:40 - So the most recent thing to go into the stack or the frontier in this case
28:44 - is going to be the node that I explore.
28:47 - So let's see what happens if I apply this stack-based approach to something
28:51 - like this problem, finding a path from A to E. What's going to happen?
28:56 - Well, again, we'll start with A and we'll say, all right,
28:58 - let's go ahead and look at A first.
29:00 - And then notice this time, we've added A to the explored set.
29:04 - A is something we've now explored.
29:06 - We have this data structure that's keeping track.
29:09 - We then say from A, we can get to B. And all right, from B, what can we do?
29:13 - Well, from B, we can explore B and get to both C and D.
29:17 - So we added C and then D. So now,
29:21 - when we explore a node, we're going to treat the frontier as a stack,
29:24 - last in, first out.
29:26 - D was the last one to come in.
29:27 - So we'll go ahead and explore that next and say, all right,
29:30 - where can we get to from D?
29:32 - Well, we can get to F. And so all right, we'll put F into the frontier.
29:36 - And now, because the frontier is a stack,
29:39 - F is the most recent thing that's gone in the stack.
29:42 - So F is what we'll explore next.
29:43 - We'll explore F and say, all right, where can we get to from F?
29:47 - Well, we can't get anywhere, so nothing gets added to the frontier.
29:50 - So now, what was the new most recent thing added to the frontier?
29:53 - Well, it's now C, the only thing left in the frontier.
29:55 - We'll explore that from which we can see, all right, from C, we can get to E.
29:59 - So E goes into the frontier.
30:01 - And then we say, all right, let's look at E. And E is now the solution.
30:04 - And now, we've solved the problem.
30:07 - So when we treat the frontier like a stack, a last in,
30:10 - first out data structure, that's the result we get.
30:13 - We go from A to B to D to F. And then we sort of backed up and went down to C
30:18 - and then E.
30:19 - And it's important to get a visual sense for how this algorithm is working.
30:23 - We went very deep in this search tree, so to speak,
30:25 - all the way until the bottom where we hit a dead end.
30:28 - And then we effectively backed up and explored this other route
30:32 - that we didn't try before.
30:33 - And it's this going very deep in the search tree idea,
30:36 - this way the algorithm ends up working when we use a stack
30:39 - that we call this version of the algorithm depth first search.
30:44 - Depth first search is the search algorithm
30:46 - where we always explore the deepest node in the frontier.
30:49 - We keep going deeper and deeper through our search tree.
30:52 - And then if we hit a dead end, we back up and we try something else instead.
30:57 - But depth first search is just one of the possible search options
31:00 - that we could use.
31:01 - It turns out that there's another algorithm called breadth first search,
31:05 - which behaves very similarly to depth first search with one difference.
31:08 - Instead of always exploring the deepest node in the search tree,
31:12 - the way the depth first search does, breadth first search
31:14 - is always going to explore the shallowest node in the frontier.
31:19 - So what does that mean?
31:20 - Well, it means that instead of using a stack which depth first search or DFS
31:24 - used, where the most recent item added to the frontier
31:27 - is the one we'll explore next, in breadth first search or BFS,
31:32 - we'll instead use a queue, where a queue is a first in first out data type,
31:37 - where the very first thing we add to the frontier
31:39 - is the first one we'll explore and they effectively form a line or a queue,
31:43 - where the earlier you arrive in the frontier, the earlier you get explored.
31:49 - So what would that mean for the same exact problem,
31:51 - finding a path from A to E?
31:53 - Well, we start with A, same as before, then we'll go ahead and have explored A
31:57 - and say, where can we get to from A?
31:59 - Well, from A, we can get to B, same as before.
32:01 - From B, same as before, we can get to C and D.
32:04 - So C and D get added to the frontier.
32:06 - This time, though, we added C to the frontier before D.
32:10 - So we'll explore C first.
32:12 - So C gets explored.
32:14 - And from C, where can we get to?
32:16 - Well, we can get to E. So E gets added to the frontier.
32:19 - But because D was explored before E, we'll look at D next.
32:24 - So we'll explore D and say, where can we get to from D?
32:26 - We can get to F. And only then will we say, all right, now we can get to E.
32:31 - And so what breadth first search or BFS did is we started here,
32:35 - we looked at both C and D, and then we looked at E.
32:39 - Effectively, we're looking at things one away from the initial state,
32:42 - then two away from the initial state, and only then,
32:45 - things that are three away from the initial state, unlike depth first search,
32:49 - which just went as deep as possible into the search tree
32:53 - until it hit a dead end and then ultimately had to back up.
32:56 - So these now are two different search algorithms
32:59 - that we could apply in order to try and solve a problem.
33:01 - And let's take a look at how these would actually work in practice
33:05 - with something like maze solving, for example.
33:07 - So here's an example of a maze.
33:09 - These empty cells represent places where our agent can move.
33:12 - These darkened gray cells represent walls that the agent can't pass through.
33:16 - And ultimately, our agent, our AI, is going to try to find a way
33:20 - to get from position A to position B via some sequence of actions,
33:25 - where those actions are left, right, up, and down.
33:28 - What will depth first search do in this case?
33:31 - Well, depth first search will just follow one path.
33:34 - If it reaches a fork in the road where it has multiple different options,
33:37 - depth first search is just, in this case, going to choose one.
33:40 - That doesn't a real preference.
33:41 - But it's going to keep following one until it hits a dead end.
33:45 - And when it hits a dead end, depth first search effectively
33:48 - goes back to the last decision point and tries the other path,
33:52 - fully exhausting this entire path.
33:54 - And when it realizes that, OK, the goal is not here,
33:56 - then it turns its attention to this path.
33:58 - It goes as deep as possible.
34:00 - When it hits a dead end, it backs up and then tries this other path,
34:04 - keeps going as deep as possible down one particular path.
34:07 - And when it realizes that that's a dead end, then it'll back up,
34:10 - and then ultimately find its way to the goal.
34:13 - And maybe you got lucky, and maybe you made a different choice earlier on.
34:16 - But ultimately, this is how depth first search is going to work.
34:19 - It's going to keep following until it hits a dead end.
34:22 - And when it hits a dead end, it backs up and looks for a different solution.
34:26 - And so one thing you might reasonably ask is,
34:28 - is this algorithm always going to work?
34:30 - Will it always actually find a way to get from the initial state?
34:33 - To the goal.
34:34 - And it turns out that as long as our maze is finite,
34:37 - as long as there are only finitely many spaces where we can travel,
34:40 - then, yes, depth first search is going to find a solution.
34:44 - Because eventually, it'll just explore everything.
34:46 - If the maze happens to be infinite and there's an infinite state space,
34:49 - which does exist in certain types of problems,
34:51 - then it's a slightly different story.
34:53 - But as long as our maze has finitely many squares,
34:56 - we're going to find a solution.
34:58 - The next question, though, that we want to ask is,
35:00 - is it going to be a good solution?
35:02 - Is it the optimal solution that we can find?
35:05 - And the answer there is not necessarily.
35:07 - And let's take a look at an example of that.
35:09 - In this maze, for example, we're again trying to find our way from A to B.
35:14 - And you notice here there are multiple possible solutions.
35:16 - We could go this way or we could go up in order to make our way from A to B.
35:21 - Now, if we're lucky, depth first search will choose this way and get to B.
35:25 - But there's no reason necessarily why depth first search
35:28 - would choose between going up or going to the right.
35:30 - It's sort of an arbitrary decision point because both
35:33 - are going to be added to the frontier.
35:35 - And ultimately, if we get unlucky, depth first search
35:38 - might choose to explore this path first because it's just a random choice
35:42 - at this point.
35:42 - It'll explore, explore, explore.
35:45 - And it'll eventually find the goal, this particular path,
35:48 - when in actuality there was a better path.
35:50 - There was a more optimal solution that used fewer steps,
35:54 - assuming we're measuring the cost of a solution based on the number of steps
35:58 - that we need to take.
35:59 - So depth first search, if we're unlucky,
36:01 - might end up not finding the best solution when a better solution is
36:05 - available.
36:07 - So that's DFS, depth first search.
36:09 - How does BFS, or breadth first search, compare?
36:12 - How would it work in this particular situation?
36:14 - Well, the algorithm is going to look very different visually
36:17 - in terms of how BFS explores.
36:20 - Because BFS looks at shallower nodes first, the idea is going to be,
36:24 - BFS will first look at all of the nodes that are one away from the initial state.
36:29 - Look here and look here, for example, just
36:31 - at the two nodes that are immediately next to this initial state.
36:36 - Then it'll explore nodes that are two away,
36:37 - looking at this state and that state, for example.
36:40 - Then it'll explore nodes that are three away, this state and that state.
36:43 - Whereas depth first search just picked one path and kept following it,
36:47 - breadth first search, on the other hand,
36:49 - is taking the option of exploring all of the possible paths
36:52 - as kind of at the same time bouncing back between them,
36:56 - looking deeper and deeper at each one, but making sure
36:58 - to explore the shallower ones or the ones that
37:01 - are closer to the initial state earlier.
37:04 - So we'll keep following this pattern, looking at things that are four away,
37:07 - looking at things that are five away, looking at things that are six away,
37:10 - until eventually we make our way to the goal.
37:14 - And in this case, it's true we had to explore some states that ultimately
37:17 - didn't lead us anywhere, but the path that we found to the goal
37:20 - was the optimal path.
37:22 - This is the shortest way that we could get to the goal.
37:25 - And so what might happen then in a larger maze?
37:28 - Well, let's take a look at something like this
37:30 - and how breadth first search is going to behave.
37:32 - Well, breadth first search, again, we'll just keep following the states
37:35 - until it receives a decision point.
37:37 - It could go either left or right.
37:39 - And while DFS just picked one and kept following that until it hit a dead end,
37:44 - BFS, on the other hand, will explore both.
37:47 - It'll say look at this node, then this node,
37:50 - and it'll look at this node, then that node.
37:52 - So on and so forth.
37:53 - And when it hits a decision point here, rather than pick one left or two
37:57 - right and explore that path, it'll again explore both,
38:01 - alternating between them, going deeper and deeper.
38:03 - We'll explore here, and then maybe here and here, and then keep going.
38:07 - Explore here and slowly make our way, you can visually
38:10 - see, further and further out.
38:12 - Once we get to this decision point, we'll explore both up and down
38:16 - until ultimately we make our way to the goal.
38:21 - And what you'll notice is, yes, breadth first search
38:24 - did find our way from A to B by following this particular path,
38:28 - but it needed to explore a lot of states in order to do so.
38:32 - And so we see some trade offs here between DFS and BFS,
38:35 - that in DFS, there may be some cases where there is some memory savings
38:39 - as compared to a breadth first approach, where breadth first search in this case
38:43 - had to explore a lot of states.
38:45 - But maybe that won't always be the case.
38:48 - So now let's actually turn our attention to some code
38:51 - and look at the code that we could actually
38:52 - write in order to implement something like depth first search or breadth
38:56 - first search in the context of solving a maze, for example.
39:01 - So I'll go ahead and go into my terminal.
39:03 - And what I have here inside of maze.py is an implementation
39:07 - of this same idea of maze solving.
39:09 - I've defined a class called node that in this case
39:12 - is keeping track of the state, the parent, in other words,
39:15 - the state before the state, and the action.
39:17 - In this case, we're not keeping track of the path cost
39:20 - because we can calculate the cost of the path at the end
39:22 - after we found our way from the initial state to the goal.
39:26 - In addition to this, I've defined a class called a stack frontier.
39:31 - And if unfamiliar with a class, a class is a way for me
39:34 - to define a way to generate objects in Python.
39:37 - It refers to an idea of object oriented programming, where the idea here
39:42 - is that I would like to create an object that is
39:44 - able to store all of my frontier data.
39:46 - And I would like to have functions, otherwise known
39:49 - as methods, on that object that I can use to manipulate the object.
39:53 - And so what's going on here, if unfamiliar with the syntax,
39:57 - is I have a function that initially creates a frontier that I'm
40:00 - going to represent using a list.
40:02 - And initially, my frontier is represented by the empty list.
40:05 - There's nothing in my frontier to begin with.
40:08 - I have an add function that adds something to the frontier
40:12 - as by appending it to the end of the list.
40:15 - I have a function that checks if the frontier contains
40:17 - a particular state.
40:19 - I have an empty function that checks if the frontier is empty.
40:22 - If the frontier is empty, that just means the length of the frontier is 0.
40:26 - And then I have a function for removing something from the frontier.
40:29 - I can't remove something from the frontier if the frontier is empty,
40:32 - so I check for that first.
40:33 - But otherwise, if the frontier isn't empty,
40:36 - recall that I'm implementing this frontier as a stack, a last in first
40:41 - out data structure, which means the last thing I add to the frontier,
40:45 - in other words, the last thing in the list, is the item
40:48 - that I should remove from this frontier.
40:51 - So what you'll see here is I have removed the last item of a list.
40:56 - And if you index into a Python list with negative 1,
40:59 - that gets you the last item in the list.
41:01 - Since 0 is the first item, negative 1 kind of wraps around
41:04 - and gets you to the last item in the list.
41:07 - So we give that the node.
41:09 - We call that node.
41:10 - We update the frontier here on line 28 to say,
41:12 - go ahead and remove that node that you just removed from the frontier.
41:16 - And then we return the node as a result.
41:18 - So this class here effectively implements the idea of a frontier.
41:23 - It gives me a way to add something to a frontier
41:25 - and a way to remove something from the frontier as a stack.
41:29 - I've also, just for good measure, implemented
41:31 - an alternative version of the same thing called a queue frontier, which
41:36 - in parentheses you'll see here, it inherits from a stack frontier,
41:39 - meaning it's going to do all the same things that the stack frontier did,
41:42 - except the way we remove a node from the frontier
41:45 - is going to be slightly different.
41:47 - Instead of removing from the end of the list the way we would in a stack,
41:50 - we're instead going to remove from the beginning of the list.
41:53 - Self.frontier 0 will get me the first node in the frontier, the first one
41:58 - that was added, and that is going to be the one
42:00 - that we return in the case of a queue.
42:03 - Then under here, I have a definition of a class called maze.
42:06 - This is going to handle the process of taking a sequence, a maze-like text
42:11 - file, and figuring out how to solve it.
42:13 - So it will take as input a text file that looks something like this,
42:16 - for example, where we see hash marks that are here representing walls,
42:20 - and I have the character A representing the starting position
42:23 - and the character B representing the ending position.
42:27 - And you can take a look at the code for parsing this text file right now.
42:30 - That's the less interesting part.
42:32 - The more interesting part is this solve function here,
42:35 - the solve function is going to figure out
42:37 - how to actually get from point A to point B.
42:41 - And here we see an implementation of the exact same idea
42:44 - we saw from a moment ago.
42:45 - We're going to keep track of how many states we've explored,
42:48 - just so we can report that data later.
42:50 - But I start with a node that represents just the start state.
42:55 - And I start with a frontier that, in this case, is a stack frontier.
43:00 - And given that I'm treating my frontier as a stack,
43:02 - you might imagine that the algorithm I'm using here is now depth-first search,
43:06 - because depth-first search, or DFS, uses a stack as its data structure.
43:11 - And initially, this frontier is just going to contain the start state.
43:16 - We initialize an explored set that initially is empty.
43:19 - There's nothing we've explored so far.
43:21 - And now here's our loop, that notion of repeating something again and again.
43:25 - First, we check if the frontier is empty by calling that empty function
43:29 - that we saw the implementation of a moment ago.
43:31 - And if the frontier is indeed empty, we'll
43:34 - go ahead and raise an exception, or a Python error, to say,
43:37 - sorry, there is no solution to this problem.
43:41 - Otherwise, we'll go ahead and remove a node from the frontier
43:44 - as by calling frontier.remove and update the number of states we've explored,
43:48 - because now we've explored one additional state.
43:51 - So we say self.numexplored plus equals 1, adding 1
43:55 - to the number of states we've explored.
43:57 - Once we remove a node from the frontier,
44:00 - recall that the next step is to see whether or not
44:02 - it's the goal, the goal test.
44:04 - And in the case of the maze, the goal is pretty easy.
44:06 - I check to see whether the state of the node is equal to the goal.
44:11 - Initially, when I set up the maze, I set up
44:13 - this value called goal, which is a property of the maze,
44:15 - so I can just check to see if the node is actually the goal.
44:19 - And if it is the goal, then what I want to do
44:22 - is backtrack my way towards figuring out what actions I took in order
44:26 - to get to this goal.
44:28 - And how do I do that?
44:29 - We'll recall that every node stores its parent, the node that came before it
44:33 - that we used to get to this node, and also the action used in order to get
44:37 - there.
44:37 - So I can create this loop where I'm constantly just looking
44:40 - at the parent of every node and keeping track for all of the parents
44:44 - what action I took to get from the parent to this current node.
44:47 - So this loop is going to keep repeating this process
44:50 - of looking through all of the parent nodes
44:52 - until we get back to the initial state, which
44:54 - has no parent, where node.parent is going to be equal to none.
44:59 - As I do so, I'm going to be building up the list of all of the actions
45:01 - that I'm following and the list of all the cells that are part of the solution.
45:05 - But I'll reverse them because when I build it up,
45:08 - going from the goal back to the initial state
45:10 - and building the sequence of actions from the goal to the initial state,
45:14 - but I want to reverse them in order to get the sequence of actions
45:16 - from the initial state to the goal.
45:19 - And that is ultimately going to be the solution.
45:23 - So all of that happens if the current state is equal to the goal.
45:27 - And otherwise, if it's not the goal, well,
45:29 - then I'll go ahead and add this state to the explored set to say,
45:32 - I've explored this state now.
45:34 - No need to go back to it if I come across it in the future.
45:37 - And then this logic here implements the idea of adding neighbors to the frontier.
45:42 - I'm saying, look at all of my neighbors, and I
45:44 - implemented a function called neighbors that you can take a look at.
45:47 - And for each of those neighbors, I'm going to check,
45:49 - is the state already in the frontier?
45:51 - Is the state already in the explored set?
45:54 - And if it's not in either of those, then I'll go ahead and add this new child
45:58 - node, this new node, to the frontier.
46:01 - So there's a fair amount of syntax here,
46:03 - but the key here is not to understand all the nuances of the syntax.
46:05 - So feel free to take a closer look at this file on your own
46:08 - to get a sense for how it is working.
46:10 - But the key is to see how this is an implementation
46:13 - of the same pseudocode, the same idea that we were describing a moment ago
46:16 - on the screen when we were looking at the steps
46:19 - that we might follow in order to solve this kind of search problem.
46:23 - So now let's actually see this in action.
46:25 - I'll go ahead and run maze.py on maze1.txt, for example.
46:31 - And what we'll see is here, we have a printout
46:34 - of what the maze initially looked like.
46:36 - And then here down below is after we've solved it.
46:39 - We had to explore 11 states in order to do it,
46:41 - and we found a path from A to B. And in this program,
46:45 - I just happened to generate a graphical representation of this as well.
46:48 - So I can open up maze.png, which is generated
46:50 - by this program, that shows you where in the darker color here are the walls,
46:54 - red is the initial state, green is the goal,
46:56 - and yellow is the path that was followed.
46:58 - We found a path from the initial state to the goal.
47:03 - But now let's take a look at a more sophisticated maze
47:06 - to see what might happen instead.
47:08 - Let's look now at maze2.txt.
47:10 - We're now here.
47:11 - We have a much larger maze.
47:13 - Again, we're trying to find our way from point A to point B.
47:16 - But now you'll imagine that depth-first search might not be so lucky.
47:19 - It might not get the goal on the first try.
47:22 - It might have to follow one path, then backtrack and explore something else
47:26 - a little bit later.
47:28 - So let's try this.
47:29 - We'll run python maze.py of maze2.txt, this time trying on this other maze.
47:34 - And now, depth-first search is able to find a solution.
47:38 - Here, as indicated by the stars, is a way to get from A to B.
47:42 - And we can represent this visually by opening up this maze.
47:45 - Here's what that maze looks like, and highlighted in yellow
47:48 - is the path that was found from the initial state to the goal.
47:52 - But how many states did we have to explore before we found that path?
47:57 - Well, recall that in my program, I was keeping
47:59 - track of the number of states that we've explored so far.
48:02 - And so I can go back to the terminal and see that, all right,
48:05 - in order to solve this problem, we had to explore 399 different states.
48:12 - And in fact, if I make one small modification of the program
48:14 - and tell the program at the end when we output this image,
48:17 - I added an argument called show explored.
48:21 - And if I set show explored equal to true and rerun this program,
48:26 - python maze.py, running it on maze2, and then I open the maze, what you'll see
48:30 - here is highlighted in red are all of the states
48:33 - that had to be explored to get from the initial state to the goal.
48:37 - Depth-first search, or DFS, didn't find its way to the goal right away.
48:41 - It made a choice to first explore this direction.
48:44 - And when it explored this direction, it had
48:46 - to follow every conceivable path all the way to the very end,
48:49 - even this long and winding one, in order to realize that, you know what?
48:52 - That's a dead end.
48:53 - And instead, the program needed to backtrack.
48:55 - After going this direction, it must have gone this direction.
48:58 - It got lucky here by just not choosing this path,
49:01 - but it got unlucky here, exploring this direction, exploring a bunch of states
49:05 - it didn't need to, and then likewise exploring
49:07 - all of this top part of the graph when it probably
49:10 - didn't need to do that either.
49:12 - So all in all, depth-first search here really not performing optimally,
49:16 - or probably exploring more states than it needs to.
49:19 - It finds an optimal solution, the best path to the goal,
49:22 - but the number of states needed to explore in order to do so,
49:25 - the number of steps I had to take, that was much higher.
49:29 - So let's compare.
49:30 - How would breadth-first search, or BFS, do on this exact same maze instead?
49:35 - And in order to do so, it's a very easy change.
49:37 - The algorithm for DFS and BFS is identical with the exception
49:42 - of what data structure we use to represent the frontier,
49:47 - that in DFS, I used a stack frontier, last in, first out,
49:51 - whereas in BFS, I'm going to use a queue frontier, first in, first out,
49:57 - where the first thing I add to the frontier is the first thing that I
50:00 - remove.
50:01 - So I'll go back to the terminal, rerun this program on the same maze,
50:06 - and now you'll see that the number of states
50:08 - we had to explore was only 77 as compared to almost 400
50:13 - when we used depth-first search.
50:15 - And we can see exactly why.
50:16 - We can see what happened if we open up maze.png now and take a look.
50:21 - Again, yellow highlight is the solution that breadth-first search found,
50:25 - which incidentally is the same solution that depth-first search found.
50:29 - They're both finding the best solution.
50:31 - But notice all the white unexplored cells.
50:33 - There was much fewer states that needed to be explored in order
50:37 - to make our way to the goal because breadth-first search operates
50:41 - a little more shallowly.
50:42 - It's exploring things that are close to the initial state
50:45 - without exploring things that are further away.
50:48 - So if the goal is not too far away, then breadth-first search
50:51 - can actually behave quite effectively on a maze that
50:53 - looks a little something like this.
50:56 - Now, in this case, both BFS and DFS ended up finding the same solution,
51:01 - but that won't always be the case.
51:03 - And in fact, let's take a look at one more example.
51:06 - For instance, maze3.txt.
51:09 - In maze3.txt, notice that here there are multiple ways
51:12 - that you could get from A to B. It's a relatively small maze,
51:16 - but let's look at what happens.
51:18 - If I use, and I'll go ahead and turn off show explored
51:21 - so we just see the solution.
51:24 - If I use BFS, breadth-first search, to solve maze3.txt,
51:30 - well, then we find a solution, and if I open up the maze,
51:33 - here is the solution that we found.
51:35 - It is the optimal one.
51:36 - With just four steps, we can get from the initial state
51:39 - to what the goal happens to be.
51:43 - But what happens if we tried to use depth-first search or DFS instead?
51:47 - Well, again, I'll go back up to my Q frontier, where Q frontier means
51:52 - that we're using breadth-first search, and I'll change it to a stack frontier,
51:57 - which means that now we'll be using depth-first search.
52:00 - I'll rerun pythonmaze.py, and now you'll see that we find the solution,
52:06 - but it is not the optimal solution.
52:09 - This instead is what our algorithm finds,
52:11 - and maybe depth-first search would have found the solution.
52:14 - It's possible, but it's not guaranteed that if we just
52:17 - happen to be unlucky, if we choose this state instead of that state,
52:21 - then depth-first search might find a longer route
52:24 - to get from the initial state to the goal.
52:27 - So we do see some trade-offs here, where depth-first search might not
52:30 - find the optimal solution.
52:32 - So at that point, it seems like breadth-first search is pretty good.
52:35 - Is that the best we can do, where it's going to find us the optimal solution,
52:38 - and we don't have to worry about situations
52:41 - where we might end up finding a longer path to the solution
52:44 - than what actually exists?
52:46 - Where the goal is far away from the initial state,
52:49 - and we might have to take lots of steps in order
52:51 - to get from the initial state to the goal, what ended up happening
52:55 - is that this algorithm, BFS, ended up exploring basically the entire graph,
52:59 - having to go through the entire maze in order
53:01 - to find its way from the initial state to the goal state.
53:05 - What we'd ultimately like is for our algorithm
53:08 - to be a little bit more intelligent.
53:10 - And now what would it mean for our algorithm to be a little bit more
53:13 - intelligent in this case?
53:16 - Well, let's look back to where breadth-first search might
53:18 - have been able to make a different decision
53:20 - and consider human intuition in this process as well.
53:23 - What might a human do when solving this maze
53:26 - that is different than what BFS ultimately chose to do?
53:30 - Well, the very first decision point that BFS made was right here,
53:35 - when it made five steps and ended up in a position
53:38 - where it had a fork in the row.
53:39 - It could either go left or it could go right.
53:41 - In these initial couple steps, there was no choice.
53:44 - There was only one action that could be taken from each of those states.
53:46 - And so the search algorithm did the only thing
53:49 - that any search algorithm could do, which is keep following that state
53:53 - after the next state.
53:54 - But this decision point is where things get a little bit interesting.
53:57 - Depth-first search, that very first search algorithm we looked at,
54:01 - chose to say, let's pick one path and exhaust that path.
54:04 - See if anything that way has the goal.
54:07 - And if not, then let's try the other way.
54:09 - Depth-first search took the alternative approach of saying,
54:12 - you know what, let's explore things that are shallow, close to us first.
54:16 - Look left and right, then back left and back right, so on and so forth,
54:20 - alternating between our options in the hopes of finding something nearby.
54:24 - But ultimately, what might a human do if confronted
54:27 - with a situation like this of go left or go right?
54:30 - Well, a human might visually see that, all right, I'm
54:33 - trying to get to state b, which is way up there,
54:36 - and going right just feels like it's closer to the goal.
54:39 - It feels like going right should be better than going left
54:42 - because I'm making progress towards getting to that goal.
54:45 - Now, of course, there are a couple of assumptions that I'm making here.
54:48 - I'm making the assumption that we can represent this grid
54:51 - as like a two-dimensional grid where I know the coordinates of everything.
54:55 - I know that a is in coordinate 0, 0, and b is in some other coordinate pair,
55:00 - and I know what coordinate I'm at now.
55:01 - So I can calculate that, yeah, going this way, that is closer to the goal.
55:05 - And that might be a reasonable assumption for some types of search problems,
55:08 - but maybe not in others.
55:10 - But for now, we'll go ahead and assume that,
55:12 - that I know what my current coordinate pair is,
55:15 - and I know the coordinate, x, y, of the goal that I'm trying to get to.
55:19 - And in this situation, I'd like an algorithm
55:22 - that is a little bit more intelligent, that somehow knows
55:25 - that I should be making progress towards the goal,
55:28 - and this is probably the way to do that because in a maze,
55:31 - moving in the coordinate direction of the goal
55:34 - is usually, though not always, a good thing.
55:37 - And so here we draw a distinction between two different types
55:40 - of search algorithms, uninformed search and informed search.
55:45 - Uninformed search algorithms are algorithms like DFS and BFS,
55:49 - the two algorithms that we just looked at, which
55:51 - are search strategies that don't use any problem-specific knowledge
55:55 - to be able to solve the problem.
55:57 - DFS and BFS didn't really care about the structure of the maze
56:01 - or anything about the way that a maze is in order to solve the problem.
56:05 - They just look at the actions available and choose from those actions,
56:08 - and it doesn't matter whether it's a maze or some other problem,
56:11 - the solution or the way that it tries to solve the problem
56:14 - is really fundamentally going to be the same.
56:17 - What we're going to take a look at now is an improvement
56:19 - upon uninformed search.
56:21 - We're going to take a look at informed search.
56:24 - Informed search are going to be search strategies
56:26 - that use knowledge specific to the problem
56:29 - to be able to better find a solution.
56:31 - And in the case of a maze, this problem-specific knowledge
56:35 - is something like if I'm in a square that is geographically closer to the goal,
56:40 - that is better than being in a square that is geographically further away.
56:45 - And this is something we can only know by thinking about this problem
56:49 - and reasoning about what knowledge might be helpful for our AI agent
56:54 - to know a little something about.
56:56 - There are a number of different types of informed search.
56:58 - Specifically, first, we're going to look at a particular type of search
57:01 - algorithm called greedy best-first search.
57:05 - Greedy best-first search, often abbreviated G-BFS,
57:08 - is a search algorithm that instead of expanding the deepest node like DFS
57:13 - or the shallowest node like BFS, this algorithm
57:16 - is always going to expand the node that it thinks is closest to the goal.
57:22 - Now, the search algorithm isn't going to know for sure
57:24 - whether it is the closest thing to the goal.
57:27 - Because if we knew what was closest to the goal all the time,
57:29 - then we would already have a solution.
57:31 - The knowledge of what is close to the goal,
57:33 - we could just follow those steps in order to get from the initial position
57:36 - to the solution.
57:37 - But if we don't know the solution, meaning
57:39 - we don't know exactly what's closest to the goal,
57:42 - instead we can use an estimate of what's closest to the goal,
57:46 - otherwise known as a heuristic, just some way of estimating whether or not
57:50 - we're close to the goal.
57:51 - And we'll do so using a heuristic function conventionally
57:54 - called h of n that takes a status input and returns
57:58 - our estimate of how close we are to the goal.
58:03 - So what might this heuristic function actually
58:05 - look like in the case of a maze solving algorithm?
58:08 - Where we're trying to solve a maze, what does the heuristic look like?
58:11 - Well, the heuristic needs to answer a question
58:14 - between these two cells, C and D, which one is better?
58:17 - Which one would I rather be in if I'm trying to find my way to the goal?
58:22 - Well, any human could probably look at this and tell you,
58:24 - you know what, D looks like it's better.
58:26 - Even if the maze is convoluted and you haven't thought about all the walls,
58:29 - D is probably better.
58:31 - And why is D better?
58:32 - Well, because if you ignore the wall, so let's just pretend
58:35 - the walls don't exist for a moment and relax the problem, so to speak,
58:40 - D, just in terms of coordinate pairs, is closer to this goal.
58:44 - It's fewer steps that I wouldn't take to get to the goal as compared to C,
58:49 - even if you ignore the walls.
58:50 - If you just know the xy-coordinate of C and the xy-coordinate of the goal,
58:55 - and likewise you know the xy-coordinate of D,
58:57 - you can calculate the D just geographically.
59:00 - Ignoring the walls looks like it's better.
59:03 - And so this is the heuristic function that we're going to use.
59:05 - And it's something called the Manhattan distance,
59:08 - one specific type of heuristic, where the heuristic is how many squares
59:12 - vertically and horizontally and then left to right,
59:15 - so not allowing myself to go diagonally, just either up or right
59:18 - or left or down.
59:19 - How many steps do I need to take to get from each of these cells to the goal?
59:24 - Well, as it turns out, D is much closer.
59:27 - There are fewer steps.
59:28 - It only needs to take six steps in order to get to that goal.
59:31 - Again, here, ignoring the walls.
59:33 - We've relaxed the problem a little bit.
59:35 - We're just concerned with if you do the math
59:38 - to subtract the x values from each other and the y values from each other,
59:41 - what is our estimate of how far we are away?
59:44 - We can estimate the D is closer to the goal than C is.
59:49 - And so now we have an approach.
59:51 - We have a way of picking which node to remove from the frontier.
59:54 - And at each stage in our algorithm, we're
59:56 - going to remove a node from the frontier.
59:57 - We're going to explore the node if it has the smallest
60:00 - value for this heuristic function, if it has the smallest
60:04 - Manhattan distance to the goal.
60:06 - And so what would this actually look like?
60:08 - Well, let me first label this graph, label this maze,
60:11 - with a number representing the value of this heuristic function,
60:14 - the value of the Manhattan distance from any of these cells.
60:18 - So from this cell, for example, we're one away from the goal.
60:21 - From this cell, we're two away from the goal, three away, four away.
60:24 - Here, we're five away because we have to go one to the right
60:27 - and then four up.
60:28 - From somewhere like here, the Manhattan distance is two.
60:32 - We're only two squares away from the goal geographically,
60:35 - even though in practice, we're going to have to take a longer path.
60:39 - But we don't know that yet.
60:40 - The heuristic is just some easy way to estimate
60:42 - how far we are away from the goal.
60:44 - And maybe our heuristic is overly optimistic.
60:47 - It thinks that, yeah, we're only two steps away.
60:49 - When in practice, when you consider the walls, it might be more steps.
60:53 - So the important thing here is that the heuristic isn't a guarantee of how
60:57 - many steps it's going to take.
60:59 - It is estimating.
61:01 - It's an attempt at trying to approximate.
61:03 - And it does seem generally the case that the squares that
61:06 - look closer to the goal have smaller values for the heuristic function
61:10 - than squares that are further away.
61:13 - So now, using greedy best-first search, what might this algorithm actually do?
61:18 - Well, again, for these first five steps, there's not much of a choice.
61:21 - We start at this initial state a, and we say, all right,
61:23 - we have to explore these five states.
61:26 - But now we have a decision point.
61:28 - Now we have a choice between going left and going right.
61:30 - And before, when DFS and BFS would just pick arbitrarily,
61:34 - because it just depends on the order you throw these two nodes into the frontier,
61:37 - and we didn't specify what order you put them into the frontier,
61:40 - only the order you take them out, here we can look at 13 and 11
61:45 - and say that, all right, this square is a distance of 11 away from the goal
61:50 - according to our heuristic, according to our estimate.
61:53 - And this one, we estimate to be 13 away from the goal.
61:57 - So between those two options, between these two choices,
62:00 - I'd rather have the 11.
62:02 - I'd rather be 11 steps away from the goal, so I'll go to the right.
62:06 - We're able to make an informed decision, because we know a little something
62:09 - more about this problem.
62:11 - So then we keep following, 10, 9, 8.
62:13 - Between the two 7s, we don't really have much of a way to know between those.
62:17 - So then we do just have to make an arbitrary choice.
62:20 - And you know what, maybe we choose wrong.
62:21 - But that's OK, because now we can still say, all right, let's try this 7.
62:26 - We say 7, 6, we have to make this choice,
62:29 - even though it increases the value of the heuristic function.
62:31 - But now we have another decision point, between 6 and 8, and between those two.
62:36 - And really, we're also considering this 13, but that's much higher.
62:39 - Between 6, 8, and 13, well, the 6 is the smallest value,
62:43 - so we'd rather take the 6.
62:45 - We're able to make an informed decision that going this way to the right
62:48 - is probably better than going down.
62:51 - So we turn this way, we go to 5.
62:53 - And now we find a decision point where we'll actually
62:55 - make a decision that we might not want to make,
62:57 - but there's unfortunately not too much of a way around this.
63:00 - We see 4 and 6.
63:01 - 4 looks closer to the goal, right?
63:03 - It's going up, and the goal is further up.
63:06 - So we end up taking that route, which ultimately leads us to a dead end.
63:09 - But that's OK, because we can still say, all right, now let's try the 6.
63:13 - And now follow this route that will ultimately lead us to the goal.
63:17 - And so this now is how greedy best-for-search
63:20 - might try to approach this problem by saying,
63:22 - whenever we have a decision between multiple nodes that we could explore,
63:26 - let's explore the node that has the smallest value of h of n,
63:30 - this heuristic function that is estimating how far I have to go.
63:35 - And it just so happens that in this case, we end up
63:37 - doing better in terms of the number of states we needed to explore
63:41 - than BFS needed to.
63:42 - BFS explored all of this section and all of that section,
63:46 - but we were able to eliminate that by taking advantage of this heuristic,
63:49 - this knowledge about how close we are to the goal or some estimate of that idea.
63:56 - So this seems much better.
63:57 - So wouldn't we always prefer an algorithm like this over an algorithm
64:01 - like breadth-first search?
64:03 - Well, maybe one thing to take into consideration
64:05 - is that we need to come up with a good heuristic, how good the heuristic is,
64:09 - is going to affect how good this algorithm is.
64:11 - And coming up with a good heuristic can oftentimes be challenging.
64:16 - But the other thing to consider is to ask the question,
64:18 - just as we did with the prior two algorithms, is this algorithm optimal?
64:22 - Will it always find the shortest path from the initial state to the goal?
64:28 - And to answer that question, let's take a look at this example for a moment.
64:32 - Take a look at this example.
64:33 - Again, we're trying to get from A to B. And again,
64:36 - I've labeled each of the cells with their Manhattan distance from the goal.
64:40 - The number of squares up and to the right,
64:42 - you would need to travel in order to get from that square to the goal.
64:46 - And let's think about, would greedy best-first search
64:49 - that always picks the smallest number end up finding the optimal solution?
64:55 - What is the shortest solution?
64:57 - And would this algorithm find it?
64:59 - And the important thing to realize is that right here is the decision point.
65:04 - We're estimated to be 12 away from the goal.
65:06 - And we have two choices.
65:08 - We can go to the left, which we estimate to be 13 away from the goal.
65:11 - Or we can go up, where we estimate it to be 11 away from the goal.
65:15 - And between those two, greedy best-first search
65:18 - is going to say the 11 looks better than the 13.
65:23 - And in doing so, greedy best-first search will end up
65:26 - finding this path to the goal.
65:28 - But it turns out this path is not optimal.
65:31 - There is a way to get to the goal using fewer steps.
65:33 - And it's actually this way, this way that ultimately involved fewer steps,
65:38 - even though it meant at this moment choosing the worst option between the two
65:43 - or what we estimated to be the worst option based on the heuristics.
65:47 - And so this is what we mean by this is a greedy algorithm.
65:50 - It's making the best decision locally.
65:52 - At this decision point, it looks like it's better to go here
65:55 - than it is to go to the 13.
65:57 - But in the big picture, it's not necessarily optimal.
66:00 - That it might find a solution when in actuality,
66:03 - there was a better solution available.
66:06 - So we would like some way to solve this problem.
66:09 - We like the idea of this heuristic, of being
66:12 - able to estimate the path, the distance between us and the goal.
66:16 - And that helps us to be able to make better decisions
66:18 - and to eliminate having to search through entire parts of this state space.
66:23 - But we would like to modify the algorithm so that we can achieve optimality,
66:27 - so that it can be optimal.
66:28 - And what is the way to do this?
66:30 - What is the intuition here?
66:31 - Well, let's take a look at this problem.
66:34 - In this initial problem, greedy best research
66:37 - found us this solution here, this long path.
66:40 - And the reason why it wasn't great is because, yes, the heuristic numbers
66:43 - went down pretty low.
66:44 - But later on, they started to build back up.
66:47 - They built back 8, 9, 10, 11, all the way up to 12 in this case.
66:52 - And so how might we go about trying to improve this algorithm?
66:55 - Well, one thing that we might realize is that if we go all the way
66:59 - through this algorithm, through this path, and we end up going to the 12,
67:03 - and we've had to take this many steps, who knows how many steps that is,
67:06 - just to get to this 12, we could have also, as an alternative,
67:11 - taken much fewer steps, just six steps, and ended up at this 13 here.
67:16 - And yes, 13 is more than 12, so it looks like it's not as good.
67:19 - But it required far fewer steps.
67:22 - It only took six steps to get to this 13 versus many more steps
67:25 - to get to this 12.
67:27 - And while greedy best research says, oh, well, 12 is better than 13,
67:30 - so pick the 12, we might more intelligently say,
67:33 - I'd rather be somewhere that heuristically looks
67:37 - like it takes slightly longer if I can get there much more quickly.
67:42 - And we're going to encode that idea, this general idea,
67:45 - into a more formal algorithm known as A star search.
67:49 - A star search is going to solve this problem
67:51 - by instead of just considering the heuristic,
67:54 - also considering how long it took us to get to any particular state.
67:58 - So the distinction is greedy best for search.
68:01 - If I am in a state right now, the only thing I care about
68:04 - is, what is the estimated distance, the heuristic value,
68:07 - between me and the goal?
68:09 - Whereas A star search will take into consideration
68:11 - two pieces of information.
68:13 - It'll take into consideration, how far do I estimate I am from the goal?
68:17 - But also, how far did I have to travel in order to get here?
68:21 - Because that is relevant, too.
68:23 - So we'll search algorithms by expanding the node
68:26 - with the lowest value of g of n plus h of n.
68:30 - h of n is that same heuristic that we were talking about a moment ago that's
68:33 - going to vary based on the problem.
68:35 - But g of n is going to be the cost to reach the node, how many steps
68:40 - I had to take, in this case, to get to my current position.
68:45 - So what does that search algorithm look like in practice?
68:48 - Well, let's take a look.
68:49 - Again, we've got the same maze.
68:51 - And again, I've labeled them with their Manhattan distance.
68:54 - This value is the h of n value, the heuristic
68:57 - estimate of how far each of these squares is away from the goal.
69:02 - But now, as we begin to explore states, we
69:04 - care not just about this heuristic value, but also about g of n,
69:08 - the number of steps I had to take in order to get there.
69:11 - And I care about summing those two numbers together.
69:14 - So what does that look like?
69:15 - On this very first step, I have taken one step.
69:19 - And now I am estimated to be 16 steps away from the goal.
69:22 - So the total value here is 17.
69:25 - Then I take one more step.
69:26 - I've now taken two steps.
69:28 - And I estimate myself to be 15 away from the goal, again, a total value of 17.
69:32 - Now I've taken three steps.
69:34 - And I'm estimated to be 14 away from the goal, so on and so forth.
69:37 - Four steps, an estimate of 13.
69:39 - Five steps, estimate of 12.
69:41 - And now here's a decision point.
69:44 - I could either be six steps away from the goal with a heuristic of 13
69:48 - for a total of 19, or I could be six steps away
69:52 - from the goal with a heuristic of 11 with an estimate of 17 for the total.
69:57 - So between 19 and 17, I'd rather take the 17, the 6 plus 11.
70:03 - So so far, no different than what we saw before.
70:05 - We're still taking this option because it appears to be better.
70:08 - And I keep taking this option because it appears to be better.
70:11 - But it's right about here that things get a little bit different.
70:15 - Now I could be 15 steps away from the goal with an estimated distance of 6.
70:21 - So 15 plus 6, total value of 21.
70:24 - Alternatively, I could be six steps away from the goal,
70:28 - because this is five steps away, so this is six steps away,
70:30 - with a total value of 13 as my estimate.
70:33 - So 6 plus 13, that's 19.
70:36 - So here, we would evaluate g of n plus h of n to be 19, 6 plus 13.
70:41 - Whereas here, we would be 15 plus 6, or 21.
70:46 - And so the intuition is 19 less than 21, pick here.
70:49 - But the idea is ultimately I'd rather be having taken fewer steps, get to a 13,
70:55 - than having taken 15 steps and be at a 6, because it
70:59 - means I've had to take more steps in order to get there.
71:01 - Maybe there's a better path this way.
71:04 - So instead, we'll explore this route.
71:07 - Now if we go one more, this is seven steps plus 14 is 21.
71:11 - So between those two, it's sort of a toss-up.
71:12 - We might end up exploring that one anyways.
71:15 - But after that, as these numbers start to get bigger in the heuristic values,
71:19 - and these heuristic values start to get smaller,
71:21 - you'll find that we'll actually keep exploring down this path.
71:25 - And you can do the math to see that at every decision point,
71:28 - A star search is going to make a choice based
71:31 - on the sum of how many steps it took me to get to my current position,
71:35 - and then how far I estimate I am from the goal.
71:39 - So while we did have to explore some of these states,
71:41 - the ultimate solution we found was, in fact, an optimal solution.
71:46 - It did find us the quickest possible way to get from the initial state
71:50 - to the goal.
71:51 - And it turns out that A star is an optimal search algorithm
71:55 - under certain conditions.
71:57 - So the conditions are H of n, my heuristic, needs to be admissible.
72:02 - What does it mean for a heuristic to be admissible?
72:04 - Well, a heuristic is admissible if it never overestimates the true cost.
72:08 - H of n always needs to either get it exactly right
72:12 - in terms of how far away I am, or it needs to underestimate.
72:16 - So we saw an example from before where the heuristic value was much smaller
72:20 - than the actual cost it would take.
72:22 - That's totally fine, but the heuristic value should never overestimate.
72:26 - It should never think that I'm further away from the goal than I actually am.
72:30 - And meanwhile, to make a stronger statement, H of n also needs to be
72:34 - consistent.
72:36 - And what does it mean for it to be consistent?
72:37 - Mathematically, it means that for every node, which we'll call n,
72:41 - and successor, the node after me, that I'll
72:43 - call n prime, where it takes a cost of C to make that step,
72:48 - the heuristic value of n needs to be less than or equal to the heuristic
72:52 - value of n prime plus the cost.
72:55 - So it's a lot of math, but in words what that ultimately means
72:58 - is that if I am here at this state right now,
73:01 - the heuristic value from me to the goal shouldn't
73:03 - be more than the heuristic value of my successor,
73:07 - the next place I could go to, plus however much
73:10 - it would cost me to just make that step from one step to the next step.
73:14 - And so this is just making sure that my heuristic is consistent between all
73:18 - of these steps that I might take.
73:20 - So as long as this is true, then A star search
73:22 - is going to find me an optimal solution.
73:25 - And this is where much of the challenge of solving these search problems
73:28 - can sometimes come in, that A star search is an algorithm that is known
73:32 - and you could write the code fairly easily,
73:34 - but it's choosing the heuristic.
73:35 - It can be the interesting challenge.
73:37 - The better the heuristic is, the better I'll
73:39 - be able to solve the problem in the fewer states that I'll have to explore.
73:43 - And I need to make sure that the heuristic satisfies
73:46 - these particular constraints.
73:48 - So all in all, these are some of the examples of search algorithms
73:52 - that might work, and certainly there are many more than just this.
73:55 - A star, for example, does have a tendency to use quite a bit of memory.
73:58 - So there are alternative approaches to A star
74:01 - that ultimately use less memory than this version of A star
74:04 - happens to use, and there are other search algorithms
74:07 - that are optimized for other cases as well.
74:11 - But now so far, we've only been looking at search algorithms
74:14 - where there is one agent.
74:17 - I am trying to find a solution to a problem.
74:19 - I am trying to navigate my way through a maze.
74:22 - I am trying to solve a 15 puzzle.
74:24 - I am trying to find driving directions from point A to point B.
74:28 - Sometimes in search situations, though, we'll
74:30 - enter an adversarial situation, where I am an agent trying
74:34 - to make intelligent decisions.
74:36 - And there's someone else who is fighting against me, so to speak,
74:39 - that has opposite objectives, someone where
74:41 - I am trying to succeed, someone else that wants me to fail.
74:45 - And this is most popular in something like a game, a game like Tic Tac Toe,
74:49 - where we've got this 3 by 3 grid, and x and o take turns,
74:53 - either writing an x or an o in any one of these squares.
74:56 - And the goal is to get three x's in a row if you're the x player,
74:59 - or three o's in a row if you're the o player.
75:02 - And computers have gotten quite good at playing games,
75:05 - Tic Tac Toe very easily, but even more complex games.
75:08 - And so you might imagine, what does an intelligent decision in a game
75:12 - look like?
75:13 - So maybe x makes an initial move in the middle, and o plays up here.
75:17 - What does an intelligent move for x now become?
75:20 - Where should you move if you were x?
75:22 - And it turns out there are a couple of possibilities.
75:24 - But if an AI is playing this game optimally,
75:27 - then the AI might play somewhere like the upper right,
75:30 - where in this situation, o has the opposite objective of x.
75:34 - x is trying to win the game to get three in a row diagonally here.
75:37 - And o is trying to stop that objective, opposite of the objective.
75:41 - And so o is going to place here to try to block.
75:44 - But now, x has a pretty clever move.
75:46 - x can make a move like this, where now x has two possible ways
75:51 - that x can win the game.
75:52 - x could win the game by getting three in a row across here.
75:55 - Or x could win the game by getting three in a row vertically this way.
75:58 - So it doesn't matter where o makes their next move.
76:00 - o could play here, for example, blocking the three in a row horizontally.
76:04 - But then x is going to win the game by getting a three in a row vertically.
76:09 - And so there's a fair amount of reasoning that's
76:11 - going on here in order for the computer to be able to solve a problem.
76:14 - And it's similar in spirit to the problems we've looked at so far.
76:17 - There are actions.
76:19 - There's some sort of state of the board and some transition
76:21 - from one action to the next.
76:23 - But it's different in the sense that this is now
76:25 - not just a classical search problem, but an adversarial search problem.
76:29 - That I am at the x player trying to find the best moves to make,
76:32 - but I know that there is some adversary that is trying to stop me.
76:36 - So we need some sort of algorithm to deal with these adversarial type of search
76:41 - situations.
76:42 - And the algorithm we're going to take a look at
76:44 - is an algorithm called Minimax, which works very well
76:47 - for these deterministic games where there are two players.
76:51 - It can work for other types of games as well.
76:52 - But we'll look right now at games where I make a move,
76:55 - then my opponent makes a move.
76:56 - And I am trying to win, and my opponent is trying to win also.
77:00 - Or in other words, my opponent is trying to get me to lose.
77:04 - And so what do we need in order to make this algorithm work?
77:07 - Well, any time we try and translate this human concept of playing a game,
77:10 - winning and losing to a computer, we want to translate it
77:14 - in terms that the computer can understand.
77:16 - And ultimately, the computer really just understands the numbers.
77:19 - And so we want some way of translating a game of x's and o's on a grid
77:23 - to something numerical, something the computer can understand.
77:26 - The computer doesn't normally understand notions of win or lose.
77:30 - But it does understand the concept of bigger and smaller.
77:34 - And so what we might do is we might take each of the possible ways
77:38 - that a tic-tac-toe game can unfold and assign a value or a utility
77:43 - to each one of those possible ways.
77:45 - And in a tic-tac-toe game, and in many types of games,
77:47 - there are three possible outcomes.
77:49 - The outcomes are o wins, x wins, or nobody wins.
77:54 - So player one wins, player two wins, or nobody wins.
77:58 - And for now, let's go ahead and assign each of these possible outcomes
78:02 - a different value.
78:04 - We'll say o winning, that'll have a value of negative 1.
78:07 - Nobody winning, that'll have a value of 0.
78:09 - And x winning, that will have a value of 1.
78:13 - So we've just assigned numbers to each of these three possible outcomes.
78:17 - And now we have two players, we have the x player and the o player.
78:22 - And we're going to go ahead and call the x player the max player.
78:26 - And we'll call the o player the min player.
78:29 - And the reason why is because in the min and max algorithm,
78:32 - the max player, which in this case is x, is aiming to maximize the score.
78:37 - These are the possible options for the score, negative 1, 0, and 1.
78:40 - x wants to maximize the score, meaning if at all possible,
78:44 - x would like this situation, where x wins the game,
78:48 - and we give it a score of 1.
78:49 - But if this isn't possible, if x needs to choose between these two options,
78:54 - negative 1, meaning o winning, or 0, meaning nobody winning,
78:58 - x would rather that nobody wins, score of 0,
79:01 - than a score of negative 1, o winning.
79:04 - So this notion of winning and losing and tying
79:07 - has been reduced mathematically to just this idea of try and maximize the score.
79:12 - The x player always wants the score to be bigger.
79:16 - And on the flip side, the min player, in this case o,
79:19 - is aiming to minimize the score.
79:20 - The o player wants the score to be as small as possible.
79:25 - So now we've taken this game of x's and o's and winning and losing
79:29 - and turned it into something mathematical,
79:30 - something where x is trying to maximize the score,
79:33 - o is trying to minimize the score.
79:35 - Let's now look at all of the parts of the game
79:37 - that we need in order to encode it in an AI
79:40 - so that an AI can play a game like tic-tac-toe.
79:44 - So the game is going to need a couple of things.
79:46 - We'll need some sort of initial state that will, in this case, call s0,
79:50 - which is how the game begins, like an empty tic-tac-toe board, for example.
79:54 - We'll also need a function called player, where the player function
80:00 - is going to take as input a state here represented by s.
80:04 - And the output of the player function is going to be which player's turn is it.
80:09 - We need to be able to give a tic-tac-toe board to the computer,
80:12 - run it through a function, and that function tells us whose turn it is.
80:16 - We'll need some notion of actions that we can take.
80:19 - We'll see examples of that in just a moment.
80:21 - We need some notion of a transition model, same as before.
80:24 - If I have a state and I take an action, I
80:26 - need to know what results as a consequence of it.
80:29 - I need some way of knowing when the game is over.
80:31 - So this is equivalent to kind of like a goal test,
80:34 - but I need some terminal test, some way to check
80:36 - to see if a state is a terminal state, where a terminal state means the game is
80:40 - over.
80:41 - In a classic game of tic-tac-toe, a terminal state
80:44 - means either someone has gotten three in a row
80:47 - or all of the squares of the tic-tac-toe board are filled.
80:50 - Either of those conditions make it a terminal state.
80:52 - In a game of chess, it might be something like when there is checkmate
80:55 - or if checkmate is no longer possible, that that becomes a terminal state.
81:00 - And then finally, we'll need a utility function, a function that takes a state
81:04 - and gives us a numerical value for that terminal state, some way of saying
81:08 - if x wins the game, that has a value of 1.
81:10 - If o is won the game, that has a value of negative 1.
81:13 - If nobody has won the game, that has a value of 0.
81:16 - So let's take a look at each of these in turn.
81:18 - The initial state, we can just represent in tic-tac-toe as the empty game board.
81:23 - This is where we begin.
81:24 - It's the place from which we begin this search.
81:27 - And again, I'll be representing these things visually,
81:29 - but you can imagine this really just being like an array
81:32 - or a two-dimensional array of all of these possible squares.
81:36 - Then we need the player function that, again, takes a state
81:39 - and tells us whose turn it is.
81:41 - Assuming x makes the first move, if I have an empty game board,
81:44 - then my player function is going to return x.
81:47 - And if I have a game board where x has made a move,
81:49 - then my player function is going to return o.
81:52 - The player function takes a tic-tac-toe game board
81:54 - and tells us whose turn it is.
81:58 - Next up, we'll consider the actions function.
82:01 - The actions function, much like it did in classical search,
82:04 - takes a state and gives us the set of all of the possible actions
82:08 - we can take in that state.
82:10 - So let's imagine it's o is turned to move in a game board that looks like this.
82:15 - What happens when we pass it into the actions function?
82:18 - So the actions function takes this state of the game as input,
82:22 - and the output is a set of possible actions.
82:25 - It's a set of I could move in the upper left
82:27 - or I could move in the bottom middle.
82:29 - So those are the two possible action choices
82:31 - that I have when I begin in this particular state.
82:36 - Now, just as before, when we had states and actions,
82:39 - we need some sort of transition model to tell us
82:41 - when we take this action in the state, what is the new state that we get.
82:45 - And here, we define that using the result function
82:48 - that takes a state as input as well as an action.
82:51 - And when we apply the result function to this state,
82:54 - saying that let's let o move in this upper left corner,
82:58 - the new state we get is this resulting state where o is in the upper left
83:01 - corner.
83:02 - And now, this seems obvious to someone who knows how to play tic-tac-toe.
83:04 - Of course, you play in the upper left corner.
83:06 - That's the board you get.
83:07 - But all of this information needs to be encoded into the AI.
83:11 - The AI doesn't know how to play tic-tac-toe until you
83:14 - tell the AI how the rules of tic-tac-toe work.
83:17 - And this function, defining this function here,
83:19 - allows us to tell the AI how this game actually works
83:23 - and how actions actually affect the outcome of the game.
83:27 - So the AI needs to know how the game works.
83:29 - The AI also needs to know when the game is over,
83:32 - as by defining a function called terminal that takes as input a state s,
83:36 - such that if we take a game that is not yet over,
83:39 - pass it into the terminal function, the output is false.
83:42 - The game is not over.
83:43 - But if we take a game that is over because x has gotten three in a row
83:47 - along that diagonal, pass that into the terminal function,
83:50 - then the output is going to be true because the game now is, in fact, over.
83:55 - And finally, we've told the AI how the game works
83:58 - in terms of what moves can be made and what happens when you make those moves.
84:01 - We've told the AI when the game is over.
84:03 - Now we need to tell the AI what the value of each of those states is.
84:07 - And we do that by defining this utility function that takes a state s
84:11 - and tells us the score or the utility of that state.
84:14 - So again, we said that if x wins the game, that utility is a value of 1,
84:18 - whereas if o wins the game, then the utility of that is negative 1.
84:23 - And the AI needs to know, for each of these terminal states
84:26 - where the game is over, what is the utility of that state?
84:30 - So if I give you a game board like this where the game is, in fact, over,
84:34 - and I ask the AI to tell me what the value of that state is, it could do so.
84:38 - The value of the state is 1.
84:42 - Where things get interesting, though, is if the game is not yet over.
84:46 - Let's imagine a game board like this, where in the middle of the game,
84:49 - it's o's turn to make a move.
84:52 - So how do we know it's o's turn to make a move?
84:54 - We can calculate that using the player function.
84:56 - We can say player of s, pass in the state, o is the answer.
85:00 - So we know it's o's turn to move.
85:02 - And now, what is the value of this board and what action should o take?
85:06 - Well, that's going to depend.
85:08 - We have to do some calculation here.
85:09 - And this is where the minimax algorithm really comes in.
85:13 - Recall that x is trying to maximize the score, which
85:16 - means that o is trying to minimize the score.
85:19 - So o would like to minimize the total value
85:22 - that we get at the end of the game.
85:25 - And because this game isn't over yet, we don't really
85:27 - know just yet what the value of this game board is.
85:30 - We have to do some calculation in order to figure that out.
85:34 - And so how do we do that kind of calculation?
85:36 - Well, in order to do so, we're going to consider,
85:39 - just as we might in a classical search situation,
85:41 - what actions could happen next and what states will that take us to.
85:46 - And it turns out that in this position, there are only two open squares,
85:50 - which means there are only two open places where o can make a move.
85:54 - o could either make a move in the upper left
85:57 - or o can make a move in the bottom middle.
86:00 - And minimax doesn't know right out of the box which of those moves
86:03 - is going to be better.
86:04 - So it's going to consider both.
86:06 - But now, we sort of run into the same situation.
86:08 - Now, I have two more game boards, neither of which is over.
86:11 - What happens next?
86:12 - And now, it's in this sense that minimax is
86:14 - what we'll call a recursive algorithm.
86:16 - It's going to now repeat the exact same process,
86:20 - although now considering it from the opposite perspective.
86:23 - It's as if I am now going to put myself, if I am the o player,
86:27 - I'm going to put myself in my opponent's shoes, my opponent as the x player,
86:31 - and consider what would my opponent do if they were in this position?
86:36 - What would my opponent do, the x player, if they were in that position?
86:40 - And what would then happen?
86:41 - Well, the other player, my opponent, the x player,
86:44 - is trying to maximize the score, whereas I
86:46 - am trying to minimize the score as the o player.
86:49 - So x is trying to find the maximum possible value that they can get.
86:53 - And so what's going to happen?
86:55 - Well, from this board position, x only has one choice.
86:58 - x is going to play here, and they're going to get three in a row.
87:01 - And we know that that board, x winning, that has a value of 1.
87:05 - If x wins the game, the value of that game board is 1.
87:09 - And so from this position, if this state can only ever
87:14 - lead to this state, it's the only possible option,
87:16 - and this state has a value of 1, then the maximum possible value
87:21 - that the x player can get from this game board is also 1.
87:24 - From here, the only place we can get is to a game with a value of 1,
87:27 - so this game board also has a value of 1.
87:31 - Now we consider this one over here.
87:33 - What's going to happen now?
87:34 - Well, x needs to make a move.
87:36 - The only move x can make is in the upper left, so x will go there.
87:39 - And in this game, no one wins the game.
87:41 - Nobody has three in a row.
87:42 - And so the value of that game board is 0.
87:45 - Nobody is 1.
87:47 - And so again, by the same logic, if from this board position
87:50 - the only place we can get to is a board where the value is 0,
87:53 - then this state must also have a value of 0.
87:57 - And now here comes the choice part, the idea of trying to minimize.
88:01 - I, as the o player, now know that if I make this choice moving in the upper
88:05 - left, that is going to result in a game with a value of 1,
88:09 - assuming everyone plays optimally.
88:11 - And if I instead play in the lower middle,
88:13 - choose this fork in the road, that is going
88:15 - to result in a game board with a value of 0.
88:17 - I have two options.
88:18 - I have a 1 and a 0 to choose from, and I need to pick.
88:22 - And as the min player, I would rather choose
88:25 - the option with the minimum value.
88:27 - So whenever a player has multiple choices,
88:29 - the min player will choose the option with the smallest value.
88:32 - The max player will choose the option with the largest value.
88:34 - Between the 1 and the 0, the 0 is smaller,
88:37 - meaning I'd rather tie the game than lose the game.
88:40 - And so this game board will say also has a value of 0,
88:44 - because if I am playing optimally, I will pick this fork in the road.
88:48 - I'll place my o here to block x's 3 in a row, x will move in the upper left,
88:53 - and the game will be over, and no one will have won the game.
88:56 - So this is now the logic of minimax, to consider all of the possible options
89:00 - that I can take, all of the actions that I can take,
89:03 - and then to put myself in my opponent's shoes.
89:05 - I decide what move I'm going to make now by considering
89:08 - what move my opponent will make on the next turn.
89:11 - And to do that, I consider what move I would make on the turn after that,
89:14 - so on and so forth, until I get all the way down
89:17 - to the end of the game, to one of these so-called terminal states.
89:21 - In fact, this very decision point, where I am trying to decide as the o player
89:25 - what to make a decision about, might have just
89:27 - been a part of the logic that the x player, my opponent, was using,
89:31 - the move before me.
89:32 - This might be part of some larger tree, where
89:35 - x is trying to make a move in this situation,
89:37 - and needs to pick between three different options in order
89:40 - to make a decision about what to happen.
89:42 - And the further and further away we are from the end of the game,
89:45 - the deeper this tree has to go.
89:47 - Because every level in this tree is going to correspond to one move,
89:51 - one move or action that I take, one move or action
89:55 - that my opponent takes, in order to decide what happens.
89:58 - And in fact, it turns out that if I am the x player in this position,
90:02 - and I recursively do the logic, and see I have a choice, three choices,
90:05 - in fact, one of which leads to a value of 0.
90:08 - If I play here, and if everyone plays optimally, the game will be a tie.
90:12 - If I play here, then o is going to win, and I'll lose playing optimally.
90:17 - Or here, where I, the x player, can win, well between a score of 0,
90:21 - and negative 1, and 1, I'd rather pick the board with a value of 1,
90:25 - because that's the maximum value I can get.
90:27 - And so this board would also have a maximum value of 1.
90:31 - And so this tree can get very, very deep, especially as the game
90:35 - starts to have more and more moves.
90:37 - And this logic works not just for tic-tac-toe,
90:39 - but any of these sorts of games, where I make a move,
90:41 - my opponent makes a move, and ultimately, we
90:44 - have these adversarial objectives.
90:46 - And we can simplify the diagram into a diagram that looks like this.
90:50 - This is a more abstract version of the minimax tree,
90:53 - where these are each states, but I'm no longer representing them
90:56 - as exactly like tic-tac-toe boards.
90:57 - This is just representing some generic game that might be tic-tac-toe,
91:01 - might be some other game altogether.
91:04 - Any of these green arrows that are pointing up,
91:06 - that represents a maximizing state.
91:08 - I would like the score to be as big as possible.
91:11 - And any of these red arrows pointing down,
91:13 - those are minimizing states, where the player is the min player,
91:16 - and they are trying to make the score as small as possible.
91:20 - So if you imagine in this situation, I am the maximizing player, this player
91:24 - here, and I have three choices.
91:26 - One choice gives me a score of 5, one choice gives me a score of 3,
91:30 - and one choice gives me a score of 9.
91:32 - Well, then between those three choices, my best option
91:36 - is to choose this 9 over here, the score that
91:38 - maximizes my options out of all the three options.
91:42 - And so I can give this state a value of 9, because among my three options,
91:46 - that is the best choice that I have available to me.
91:50 - So that's my decision now.
91:51 - You imagine it's like one move away from the end of the game.
91:55 - But then you could also ask a reasonable question,
91:57 - what might my opponent do two moves away from the end of the game?
92:01 - My opponent is the minimizing player.
92:03 - They are trying to make the score as small as possible.
92:05 - Imagine what would have happened if they had to pick which choice to make.
92:09 - One choice leads us to this state, where I, the maximizing player,
92:13 - am going to opt for 9, the biggest score that I can get.
92:16 - And 1 leads to this state, where I, the maximizing player,
92:21 - would choose 8, which is then the largest score that I can get.
92:25 - Now the minimizing player, forced to choose between a 9 or an 8,
92:28 - is going to choose the smallest possible score,
92:31 - which in this case is an 8.
92:33 - And that is then how this process would unfold,
92:35 - that the minimizing player in this case considers both of their options,
92:39 - and then all of the options that would happen as a result of that.
92:43 - So this now is a general picture of what the minimax algorithm looks like.
92:47 - Let's now try to formalize it using a little bit of pseudocode.
92:50 - So what exactly is happening in the minimax algorithm?
92:53 - Well, given a state s, we need to decide what to happen.
92:57 - The max player, if it's max's player's turn,
93:00 - then max is going to pick an action a in actions of s.
93:05 - Recall that actions is a function that takes a state
93:08 - and gives me back all of the possible actions that I can take.
93:11 - It tells me all of the moves that are possible.
93:15 - The max player is going to specifically pick an action a in this set of actions
93:19 - that gives me the highest value of min value of result of s and a.
93:26 - So what does that mean?
93:27 - Well, it means that I want to make the option that
93:30 - gives me the highest score of all of the actions a.
93:34 - But what score is that going to have?
93:35 - To calculate that, I need to know what my opponent, the min player,
93:38 - is going to do if they try to minimize the value of the state that results.
93:44 - So we say, what state results after I take this action?
93:48 - And what happens when the min player tries to minimize the value of that state?
93:53 - I consider that for all of my possible options.
93:56 - And after I've considered that for all of my possible options,
93:58 - I pick the action a that has the highest value.
94:02 - Likewise, the min player is going to do the same thing but backwards.
94:06 - They're also going to consider what are all of the possible actions they
94:09 - can take if it's their turn.
94:10 - And they're going to pick the action a that
94:12 - has the smallest possible value of all the options.
94:16 - And the way they know what the smallest possible value of all the options
94:19 - is is by considering what the max player is going to do by saying,
94:24 - what's the result of applying this action to the current state?
94:27 - And then what would the max player try to do?
94:29 - What value would the max player calculate for that particular state?
94:34 - So everyone makes their decision based on trying
94:36 - to estimate what the other person would do.
94:39 - And now we need to turn our attention to these two functions, max value
94:43 - and min value.
94:44 - How do you actually calculate the value of a state
94:47 - if you're trying to maximize its value?
94:50 - And how do you calculate the value of a state
94:52 - if you're trying to minimize the value?
94:53 - If you can do that, then we have an entire implementation
94:56 - of this min and max algorithm.
94:58 - So let's try it.
94:59 - Let's try and implement this max value function that takes a state
95:03 - and returns as output the value of that state
95:06 - if I'm trying to maximize the value of the state.
95:10 - Well, the first thing I can check for is to see if the game is over.
95:13 - Because if the game is over, in other words,
95:14 - if the state is a terminal state, then this is easy.
95:18 - I already have this utility function that tells me
95:21 - what the value of the board is.
95:22 - If the game is over, I just check, did x win, did o win, is it a tie?
95:26 - And this utility function just knows what the value of the state is.
95:30 - What's trickier is if the game isn't over.
95:32 - Because then I need to do this recursive reasoning about thinking,
95:35 - what is my opponent going to do on the next move?
95:39 - And I want to calculate the value of this state.
95:41 - And I want the value of the state to be as high as possible.
95:45 - And I'll keep track of that value in a variable called v.
95:48 - And if I want the value to be as high as possible,
95:50 - I need to give v an initial value.
95:53 - And initially, I'll just go ahead and set it to be as low as possible.
95:57 - Because I don't know what options are available to me yet.
96:00 - So initially, I'll set v equal to negative infinity, which
96:04 - seems a little bit strange.
96:06 - But the idea here is I want the value initially
96:08 - to be as low as possible.
96:09 - Because as I consider my actions, I'm always
96:12 - going to try and do better than v. And if I set v to negative infinity,
96:16 - I know I can always do better than that.
96:19 - So now I consider my actions.
96:21 - And this is going to be some kind of loop
96:22 - where for every action in actions of state,
96:26 - recall actions as a function that takes my state
96:29 - and gives me all the possible actions that I can use in that state.
96:32 - So for each one of those actions, I want to compare it to v and say,
96:37 - all right, v is going to be equal to the maximum of v and this expression.
96:44 - So what is this expression?
96:46 - Well, first it is get the result of taking the action in the state
96:50 - and then get the min value of that.
96:54 - In other words, let's say I want to find out from that state
96:58 - what is the best that the min player can do because they're
97:00 - going to try and minimize the score.
97:02 - So whatever the resulting score is of the min value of that state,
97:06 - compare it to my current best value and just pick the maximum of those two
97:10 - because I am trying to maximize the value.
97:12 - In short, what these three lines of code are doing
97:14 - are going through all of my possible actions and asking the question,
97:18 - how do I maximize the score given what my opponent is going to try to do?
97:24 - After this entire loop, I can just return v
97:26 - and that is now the value of that particular state.
97:30 - And for the min player, it's the exact opposite of this,
97:32 - the same logic just backwards.
97:35 - To calculate the minimum value of a state,
97:37 - first we check if it's a terminal state.
97:38 - If it is, we return its utility.
97:41 - Otherwise, we're going to now try to minimize the value of the state
97:45 - given all of my possible actions.
97:47 - So I need an initial value for v, the value of the state.
97:50 - And initially, I'll set it to infinity because I
97:53 - know I can always get something less than infinity.
97:56 - So by starting with v equals infinity, I make sure that the very first action
98:00 - I find, that will be less than this value of v.
98:03 - And then I do the same thing, loop over all of my possible actions.
98:07 - And for each of the results that we could get when the max player makes
98:10 - their decision, let's take the minimum of that and the current value of v.
98:15 - So after all is said and done, I get the smallest possible value of v
98:19 - that I then return back to the user.
98:22 - So that, in effect, is the pseudocode for Minimax.
98:25 - That is how we take a gain and figure out what the best move to make
98:28 - is by recursively using these max value and min value functions,
98:32 - where max value calls min value, min value calls max value back and forth,
98:36 - all the way until we reach a terminal state, at which point
98:39 - our algorithm can simply return the utility of that particular state.
98:45 - So what you might imagine is that this is going to start to be a long process,
98:48 - especially as games start to get more complex,
98:51 - as we start to add more moves and more possible options and games that
98:54 - might last quite a bit longer.
98:56 - So the next question to ask is, what sort of optimizations can we make here?
99:00 - How can we do better in order to use less space or take less time
99:05 - to be able to solve this kind of problem?
99:08 - And we'll take a look at a couple of possible optimizations.
99:10 - But for one, we'll take a look at this example.
99:13 - Again, returning to these up arrows and down arrows,
99:15 - let's imagine that I now am the max player, this green arrow.
99:20 - I am trying to make this score as high as possible.
99:23 - And this is an easy game where there are just two moves.
99:26 - I make a move, one of these three options.
99:29 - And then my opponent makes a move, one of these three options,
99:32 - based on what move I make.
99:33 - And as a result, we get some value.
99:36 - Let's look at the order in which I do these calculations
99:39 - and figure out if there are any optimizations I
99:41 - might be able to make to this calculation process.
99:44 - I'm going to have to look at these states one at a time.
99:47 - So let's say I start here on the left and say, all right,
99:49 - now I'm going to consider, what will the min player, my opponent,
99:52 - try to do here?
99:54 - Well, the min player is going to look at all three of their possible actions
99:57 - and look at their value, because these are terminal states.
100:00 - They're the end of the game.
100:01 - And so they'll see, all right, this node is a value of four, value of eight,
100:04 - value of five.
100:06 - And the min player is going to say, well, all right,
100:08 - between these three options, four, eight, and five, I'll take the smallest one.
100:13 - I'll take the four.
100:14 - So this state now has a value of four.
100:16 - Then I, as the max player, say, all right, if I take this action,
100:20 - it will have a value of four.
100:21 - That's the best that I can do, because min player
100:23 - is going to try and minimize my score.
100:25 - So now what if I take this option?
100:27 - We'll explore this next.
100:28 - And now explore what the min player would do if I choose this action.
100:32 - And the min player is going to say, all right, what are the three options?
100:35 - The min player has options between nine, three, and seven.
100:39 - And so three is the smallest among nine, three, and seven.
100:42 - So we'll go ahead and say this state has a value of three.
100:45 - So now I, as the max player, I have now explored two of my three options.
100:49 - I know that one of my options will guarantee me a score of four, at least.
100:53 - And one of my options will guarantee me a score of three.
100:57 - And now I consider my third option and say, all right, what happens here?
101:00 - Same exact logic.
101:01 - The min player is going to look at these three states, two, four, and six.
101:04 - I'll say the minimum possible option is two.
101:06 - So the min player wants the two.
101:08 - Now I, as the max player, have calculated all of the information
101:11 - by looking two layers deep, by looking at all of these nodes.
101:15 - And I can now say, between the four, the three, and the two, you know what?
101:18 - I'd rather take the four.
101:20 - Because if I choose this option, if my opponent plays optimally,
101:24 - they will try and get me to the four.
101:26 - But that's the best I can do.
101:27 - I can't guarantee a higher score.
101:29 - Because if I pick either of these two options, I might get a three
101:32 - or I might get a two.
101:33 - And it's true that down here is a nine.
101:36 - And that's the highest score out of any of the scores.
101:38 - So I might be tempted to say, you know what?
101:40 - Maybe I should take this option because I might get the nine.
101:43 - But if the min player is playing intelligently,
101:46 - if they're making the best moves at each possible option
101:48 - they have when they get to make a choice, I'll be left with a three.
101:52 - Whereas I could better, playing optimally,
101:54 - have guaranteed that I would get the four.
101:58 - So that is, in effect, the logic that I would use as a min and max player
102:01 - trying to maximize my score from that node there.
102:05 - But it turns out they took quite a bit of computation for me to figure that out.
102:08 - I had to reason through all of these nodes
102:10 - in order to draw this conclusion.
102:11 - And this is for a pretty simple game where I have three choices,
102:14 - my opponent has three choices, and then the game's over.
102:18 - So what I'd like to do is come up with some way to optimize this.
102:21 - Maybe I don't need to do all of this calculation
102:24 - to still reach the conclusion that, you know what, this action to the left,
102:28 - that's the best that I could do.
102:29 - Let's go ahead and try again and try to be a little more intelligent about how
102:33 - I go about doing this.
102:36 - So first, I start the exact same way.
102:38 - I don't know what to do initially, so I just
102:40 - have to consider one of the options and consider what the min player might do.
102:45 - Min has three options, four, eight, and five.
102:47 - And between those three options, min says four is the best they can do
102:51 - because they want to try to minimize the score.
102:54 - Now I, the max player, will consider my second option,
102:58 - making this move here, and considering what my opponent would do in response.
103:02 - What will the min player do?
103:04 - Well, the min player is going to, from that state, look at their options.
103:07 - And I would say, all right, nine is an option, three is an option.
103:12 - And if I am doing the math from this initial state,
103:14 - doing all this calculation, when I see a three,
103:17 - that should immediately be a red flag for me.
103:20 - Because when I see a three down here at this state,
103:23 - I know that the value of this state is going to be at most three.
103:28 - It's going to be three or something less than three,
103:30 - even though I haven't yet looked at this last action or even further actions
103:34 - if there were more actions that could be taken here.
103:37 - How do I know that?
103:37 - Well, I know that the min player is going to try to minimize my score.
103:42 - And if they see a three, the only way this
103:44 - could be something other than a three is if this remaining thing
103:47 - that I haven't yet looked at is less than three, which
103:50 - means there is no way for this value to be anything more than three
103:54 - because the min player can already guarantee a three
103:57 - and they are trying to minimize my score.
104:01 - So what does that tell me?
104:02 - Well, it tells me that if I choose this action,
104:04 - my score is going to be three or maybe even less than three if I'm unlucky.
104:09 - But I already know that this action will guarantee me a four.
104:13 - And so given that I know that this action guarantees me a score of four
104:17 - and this action means I can't do better than three,
104:20 - if I'm trying to maximize my options, there
104:22 - is no need for me to consider this triangle here.
104:25 - There is no value, no number that could go here
104:28 - that would change my mind between these two options.
104:30 - I'm always going to opt for this path that gets me a four as opposed
104:34 - to this path where the best I can do is a three if my opponent plays optimally.
104:39 - And this is going to be true for all the future states that I look at too.
104:43 - That if I look over here at what min player might do over here,
104:45 - if I see that this state is a two, I know that this state is at most a two
104:50 - because the only way this value could be something other than two
104:54 - is if one of these remaining states is less than a two
104:57 - and so the min player would opt for that instead.
105:00 - So even without looking at these remaining states,
105:03 - I as the maximizing player can know that choosing this path to the left
105:08 - is going to be better than choosing either of those two paths to the right
105:13 - because this one can't be better than three.
105:16 - This one can't be better than two.
105:17 - And so four in this case is the best that I can do.
105:21 - So in order to do this cut, and I can say now
105:23 - that this state has a value of four.
105:25 - So in order to do this type of calculation,
105:27 - I was doing a little bit more bookkeeping, keeping track of things,
105:31 - keeping track all the time of what is the best that I can do,
105:34 - what is the worst that I can do, and for each of these states
105:37 - saying, all right, well, if I already know that I can get a four,
105:41 - then if the best I can do at this state is a three,
105:44 - no reason for me to consider it, I can effectively prune this leaf
105:48 - and anything below it from the tree.
105:51 - And it's for that reason this approach, this optimization to minimax,
105:54 - is called alpha, beta pruning.
105:56 - Alpha and beta stand for these two values
105:58 - that you'll have to keep track of of the best you can do so far
106:01 - and the worst you can do so far.
106:02 - And pruning is the idea of if I have a big, long, deep search tree,
106:07 - I might be able to search it more efficiently
106:09 - if I don't need to search through everything,
106:11 - if I can remove some of the nodes to try and optimize the way that I
106:15 - look through this entire search space.
106:18 - So alpha, beta pruning can definitely save us a lot of time
106:21 - as we go about the search process by making our searches more efficient.
106:25 - But even then, it's still not great as games get more complex.
106:29 - Tic-tac-toe, fortunately, is a relatively simple game.
106:33 - And we might reasonably ask a question like,
106:35 - how many total possible tic-tac-toe games are there?
106:39 - You can think about it.
106:40 - You can try and estimate how many moves are there at any given point,
106:43 - how many moves long can the game last.
106:45 - It turns out there are about 255,000 possible tic-tac-toe games
106:52 - that can be played.
106:53 - But compare that to a more complex game, something
106:56 - like a game of chess, for example.
106:58 - Far more pieces, far more moves, games that last much longer.
107:01 - How many total possible chess games could there be?
107:05 - It turns out that after just four moves each, four moves by the white player,
107:08 - four moves by the black player, that there are
107:10 - 288 billion possible chess games that can result from that situation,
107:15 - after just four moves each.
107:17 - And going even further, if you look at entire chess games
107:20 - and how many possible chess games there could be as a result there,
107:23 - there are more than 10 to the 29,000 possible chess games,
107:27 - far more chess games than could ever be considered.
107:30 - And this is a pretty big problem for the Minimax algorithm,
107:33 - because the Minimax algorithm starts with an initial state,
107:36 - considers all the possible actions, and all the possible actions
107:39 - after that, all the way until we get to the end of the game.
107:44 - And that's going to be a problem if the computer is going
107:46 - to need to look through this many states, which is far more than any computer
107:51 - could ever do in any reasonable amount of time.
107:54 - So what do we do in order to solve this problem?
107:57 - Instead of looking through all these states which
107:59 - is totally intractable for a computer, we need some better approach.
108:02 - And it turns out that better approach generally takes the form of something
108:05 - called depth-limited Minimax, where normally Minimax
108:09 - is depth-unlimited.
108:10 - We just keep going layer after layer, move after move,
108:13 - until we get to the end of the game.
108:15 - Depth-limited Minimax is instead going to say,
108:17 - you know what, after a certain number of moves, maybe I'll look 10 moves ahead,
108:21 - maybe I'll look 12 moves ahead, but after that point,
108:23 - I'm going to stop and not consider additional moves that
108:26 - might come after that, just because it would be computationally intractable
108:30 - to consider all of those possible options.
108:34 - But what do we do after we get 10 or 12 moves deep
108:36 - when we arrive at a situation where the game's not over?
108:40 - Minimax still needs a way to assign a score to that game board or game
108:43 - state to figure out what its current value is, which is easy to do
108:47 - if the game is over, but not so easy to do if the game is not yet over.
108:51 - So in order to do that, we need to add one additional feature
108:54 - to depth-limited Minimax called an evaluation function, which
108:57 - is just some function that is going to estimate the expected utility
109:01 - of a game from a given state.
109:04 - So in a game like chess, if you imagine that a game value of 1
109:07 - means white wins, negative 1 means black wins, 0 means it's a draw,
109:12 - then you might imagine that a score of 0.8
109:15 - means white is very likely to win, though certainly not guaranteed.
109:19 - And you would have an evaluation function
109:21 - that estimates how good the game state happens to be.
109:25 - And depending on how good that evaluation function is,
109:28 - that is ultimately what's going to constrain how good the AI is.
109:32 - The better the AI is at estimating how good or how bad
109:36 - any particular game state is, the better the AI
109:38 - is going to be able to play that game.
109:40 - If the evaluation function is worse and not as good as it estimating
109:44 - what the expected utility is, then it's going to be a whole lot harder.
109:47 - And you can imagine trying to come up with these evaluation functions.
109:51 - In chess, for example, you might write an evaluation function
109:54 - based on how many pieces you have as compared
109:56 - to how many pieces your opponent has, because each one has a value.
109:59 - And your evaluation function probably needs
110:02 - to be a little bit more complicated than that
110:04 - to consider other possible situations that might arise as well.
110:08 - And there are many other variants on Minimax that add additional features
110:11 - in order to help it perform better under these larger, more computationally
110:15 - untractable situations where we couldn't possibly
110:18 - explore all of the possible moves.
110:20 - So we need to figure out how to use evaluation functions and other techniques
110:25 - to be able to play these games ultimately better.
110:28 - But this now was a look at this kind of adversarial search, these search
110:31 - problems where we have situations where I am trying
110:35 - to play against some sort of opponent.
110:37 - And these search problems show up all over the place
110:40 - throughout artificial intelligence.
110:41 - We've been talking a lot today about more classical search problems,
110:44 - like trying to find directions from one location to another.
110:48 - But any time an AI is faced with trying to make a decision,
110:51 - like what do I do now in order to do something that is rational,
110:54 - or do something that is intelligent, or trying to play a game,
110:57 - like figuring out what move to make, these sort of algorithms
111:00 - can really come in handy.
111:01 - It turns out that for tic-tac-toe, the solution is pretty simple
111:04 - because it's a small game.
111:05 - XKCD has famously put together a web comic
111:08 - where he will tell you exactly what move to make as the optimal move to make
111:12 - no matter what your opponent happens to do.
111:14 - This type of thing is not quite as possible for a much larger game
111:17 - like Checkers or Chess, for example, where chess is totally computationally
111:21 - untractable for most computers to be able to explore all the possible states.
111:25 - So we really need our AI to be far more intelligent about how
111:29 - they go about trying to deal with these problems
111:31 - and how they go about taking this environment that they find themselves in
111:35 - and ultimately searching for one of these solutions.
111:38 - So this, then, was a look at search in artificial intelligence.
111:41 - Next time, we'll take a look at knowledge,
111:43 - thinking about how it is that our AIs are able to know information, reason
111:47 - about that information, and draw conclusions, all in our look at AI
111:51 - and the principles behind it.
111:52 - We'll see you next time.
111:55 - ["AIMS INTRO MUSIC"]
112:13 - All right, welcome back, everyone, to an introduction
112:16 - to artificial intelligence with Python.
112:18 - Last time, we took a look at search problems, in particular,
112:20 - where we have AI agents that are trying to solve some sort of problem
112:24 - by taking actions in some sort of environment,
112:26 - whether that environment is trying to take actions by playing moves in a game
112:30 - or whether those actions are something like trying
112:32 - to figure out where to make turns in order to get driving directions
112:35 - from point A to point B. This time, we're
112:38 - going to turn our attention more generally to just this idea of knowledge,
112:42 - the idea that a lot of intelligence is based on knowledge,
112:44 - especially if we think about human intelligence.
112:47 - People know information.
112:48 - We know facts about the world.
112:50 - And using that information that we know, we're
112:52 - able to draw conclusions, reason about the information
112:55 - that we know in order to figure out how to do something
112:58 - or figure out some other piece of information
113:00 - that we conclude based on the information we already have available to us.
113:05 - What we'd like to focus on now is the ability
113:07 - to take this idea of knowledge and being able to reason based on knowledge
113:11 - and apply those ideas to artificial intelligence.
113:14 - In particular, we're going to be building what
113:16 - are known as knowledge-based agents, agents that
113:19 - are able to reason and act by representing knowledge internally.
113:23 - Somehow inside of our AI, they have some understanding
113:25 - of what it means to know something.
113:27 - And ideally, they have some algorithms or some techniques
113:30 - they can use based on that knowledge that they know in order to figure out
113:34 - the solution to a problem or figure out some additional piece of information
113:38 - that can be helpful in some sense.
113:40 - So what do we mean by reasoning based on knowledge
113:43 - to be able to draw conclusions?
113:44 - Well, let's look at a simple example drawn from the world of Harry Potter.
113:47 - We take one sentence that we know to be true.
113:50 - Imagine if it didn't rain, then Harry visited Hagrid today.
113:55 - So one fact that we might know about the world.
113:57 - And then we take another fact.
113:59 - Harry visited Hagrid or Dumbledore today, but not both.
114:02 - So it tells us something about the world, that Harry either visited
114:05 - Hagrid but not Dumbledore, or Harry visited Dumbledore but not Hagrid.
114:09 - And now we have a third piece of information about the world
114:12 - that Harry visited Dumbledore today.
114:14 - So we now have three pieces of information now, three facts.
114:17 - Inside of a knowledge base, so to speak, information that we know.
114:21 - And now we, as humans, can try and reason about this
114:23 - and figure out, based on this information, what additional information
114:27 - can we begin to conclude?
114:29 - And well, looking at these last two statements,
114:31 - Harry either visited Hagrid or Dumbledore but not both,
114:35 - and we know that Harry visited Dumbledore today, well,
114:38 - then it's pretty reasonable that we could draw the conclusion that,
114:40 - you know what, Harry must not have visited Hagrid today.
114:43 - Because based on a combination of these two statements,
114:46 - we can draw this inference, so to speak, a conclusion that Harry did not
114:50 - visit Hagrid today.
114:52 - But it turns out we can even do a little bit better than that,
114:54 - get some more information by taking a look at this first statement
114:57 - and reasoning about that.
114:59 - This first statement says, if it didn't rain,
115:01 - then Harry visited Hagrid today.
115:04 - So what does that mean?
115:05 - In all cases where it didn't rain, then we know that Harry visited Hagrid.
115:09 - But if we also know now that Harry did not visit Hagrid,
115:12 - then that tells us something about our initial premise
115:15 - that we were thinking about.
115:16 - In particular, it tells us that it did rain today, because we can reason,
115:21 - if it didn't rain, that Harry would have visited Hagrid.
115:24 - But we know for a fact that Harry did not visit Hagrid today.
115:28 - So it's this kind of reason, this sort of logical reasoning,
115:31 - where we use logic based on the information
115:33 - that we know in order to take information and reach conclusions that
115:38 - is going to be the focus of what we're going to be talking about today.
115:40 - How can we make our artificial intelligence
115:43 - logical so that they can perform the same kinds of deduction,
115:47 - the same kinds of reasoning that we've been doing so far?
115:50 - Of course, humans reason about logic generally
115:53 - in terms of human language.
115:54 - That I just now was speaking in English, talking in English about these
115:58 - sentences and trying to reason through how it
116:01 - is that they relate to one another.
116:02 - We're going to need to be a little bit more formal when
116:05 - we turn our attention to computers and being
116:07 - able to encode this notion of logic and truthhood and falsehood
116:11 - inside of a machine.
116:12 - So we're going to need to introduce a few more terms and a few symbols that
116:16 - will help us reason through this idea of logic
116:18 - inside of an artificial intelligence.
116:20 - And we'll begin with the idea of a sentence.
116:22 - Now, a sentence in a natural language like English
116:24 - is just something that I'm saying, like what I'm saying right now.
116:28 - In the context of AI, though, a sentence is just an assertion about the world
116:32 - in what we're going to call a knowledge representation language,
116:36 - some way of representing knowledge inside of our computers.
116:40 - And the way that we're going to spend most of today reasoning about knowledge
116:44 - is through a type of logic known as propositional logic.
116:47 - There are a number of different types of logic, some of which we'll touch on.
116:50 - But propositional logic is based on a logic of propositions,
116:54 - or just statements about the world.
116:56 - And so we begin in propositional logic with a notion of propositional symbols.
117:01 - We will have certain symbols that are oftentimes just letters,
117:04 - something like P or Q or R, where each of those symbols
117:07 - is going to represent some fact or sentence about the world.
117:11 - So P, for example, might represent the fact that it is raining.
117:15 - And so P is going to be a symbol that represents that idea.
117:19 - And Q, for example, might represent Harry visited Hagrid today.
117:22 - Each of these propositional symbols represents some sentence
117:26 - or some fact about the world.
117:29 - But in addition to just having individual facts about the world,
117:32 - we want some way to connect these propositional symbols together
117:36 - in order to reason more complexly about other facts that
117:39 - might exist inside of the world in which we're reasoning.
117:42 - So in order to do that, we'll need to introduce some additional symbols
117:45 - that are known as logical connectives.
117:47 - Now, there are a number of these logical connectives.
117:49 - But five of the most important, and the ones we're going to focus on today,
117:52 - are these five up here, each represented by a logical symbol.
117:56 - Not is represented by this symbol here, and is represented
118:00 - as sort of an upside down V, or is represented by a V shape.
118:04 - Implication, and we'll talk about what that means in just a moment,
118:07 - is represented by an arrow.
118:09 - And biconditional, again, we'll talk about what that means in a moment,
118:12 - is represented by these double arrows.
118:14 - But these five logical connectives are the main ones
118:17 - we're going to be focusing on in terms of thinking about how
118:20 - it is that a computer can reason about facts
118:22 - and draw conclusions based on the facts that it knows.
118:26 - But in order to get there, we need to take
118:28 - a look at each of these logical connectives
118:30 - and build up an understanding for what it is that they actually mean.
118:34 - So let's go ahead and begin with the not symbol, so this not symbol here.
118:38 - And what we're going to show for each of these logical connectives
118:41 - is what we're going to call a truth table, a table that
118:43 - demonstrates what this word not means when we attach it
118:47 - to a propositional symbol or any sentence inside of our logical language.
118:52 - And so the truth table for not is shown right here.
118:56 - If P, some propositional symbol, or some other sentence even, is false,
119:01 - then not P is true.
119:04 - And if P is true, then not P is false.
119:08 - So you can imagine that placing this not symbol
119:11 - in front of some sentence of propositional logic
119:14 - just says the opposite of that.
119:16 - So if, for example, P represented it is raining,
119:19 - then not P would represent the idea that it is not raining.
119:23 - And as you might expect, if P is false, meaning if the sentence,
119:27 - it is raining, is false, well then the sentence not P must be true.
119:32 - The sentence that it is not raining is therefore true.
119:36 - So not, you can imagine, just takes whatever is in P and it inverts it.
119:40 - It turns false into true and true into false,
119:43 - much analogously to what the English word not means,
119:46 - just taking whatever comes after it and inverting it to mean the opposite.
119:51 - Next up, and also very English-like, is this idea
119:53 - of and represented by this upside-down V shape or this point shape.
119:58 - And as opposed to just taking a single argument the way not does,
120:01 - we have P and we have not P. And is going to combine two different sentences
120:07 - in propositional logic together.
120:09 - So I might have one sentence P and another sentence Q,
120:12 - and I want to combine them together to say P and Q.
120:16 - And the general logic for what P and Q means
120:19 - is it means that both of its operands are true.
120:22 - P is true and also Q is true.
120:26 - And so here's what that truth table looks like.
120:29 - This time we have two variables, P and Q. And when we have two variables, each
120:33 - of which can be in two possible states, true or false,
120:36 - that leads to two squared or four possible combinations
120:41 - of truth and falsehood.
120:42 - So we have P is false and Q is false.
120:45 - We have P is false and Q is true.
120:47 - P is true and Q is false.
120:48 - And then P and Q both are true.
120:51 - And those are the only four possibilities for what P and Q could mean.
120:55 - And in each of those situations, this third column here, P and Q,
120:59 - is telling us a little bit about what it actually means for P and Q to be true.
121:03 - And we see that the only case where P and Q is true is in this fourth row
121:08 - here, where P happens to be true, Q also happens to be true.
121:12 - And in all other situations, P and Q is going to evaluate to false.
121:18 - So this, again, is much in line with what our intuition of and might mean.
121:21 - If I say P and Q, I probably mean that I expect both P and Q to be true.
121:29 - Next up, also potentially consistent with what we mean,
121:32 - is this word or, represented by this V shape, sort of an upside down and symbol.
121:37 - And or, as the name might suggest, is true if either of its arguments
121:41 - are true, as long as P is true or Q is true, then P or Q is going to be true.
121:47 - Which means the only time that P or Q is false
121:50 - is if both of its operands are false.
121:53 - If P is false and Q is false, then P or Q is going to be false.
121:58 - But in all other cases, at least one of the operands is true.
122:03 - Maybe they're both true, in which case P or Q is going to evaluate to true.
122:08 - Now, this is mostly consistent with the way
122:10 - that most people might use the word or, in the sense of speaking the word
122:14 - or in normal English, though there is sometimes when we might say
122:17 - or, where we mean P or Q, but not both, where we mean, sort of,
122:21 - it can only be one or the other.
122:23 - It's important to note that this symbol here, this or,
122:26 - means P or Q or both, that those are totally OK.
122:30 - As long as either or both of them are true,
122:33 - then the or is going to evaluate to be true, as well.
122:36 - It's only in the case where all of the operands
122:38 - are false that P or Q ultimately evaluates to false, as well.
122:43 - In logic, there's another symbol known as the exclusive or,
122:46 - which encodes this idea of exclusivity of one or the other, but not both.
122:51 - But we're not going to be focusing on that today.
122:53 - Whenever we talk about or, we're always talking about either or both,
122:56 - in this case, as represented by this truth table here.
123:01 - So that now is not an and an or.
123:04 - And next up is what we might call implication,
123:07 - as denoted by this arrow symbol.
123:09 - So we have P and Q. And this sentence here will generally
123:13 - read as P implies Q.
123:16 - And what P implies Q means is that if P is true, then Q is also true.
123:23 - So I might say something like, if it is raining, then I will be indoors.
123:27 - Meaning, it is raining implies I will be indoors,
123:31 - as the logical sentence that I'm saying there.
123:34 - And the truth table for this can sometimes be a little bit tricky.
123:37 - So obviously, if P is true and Q is true, then P implies Q. That's true.
123:44 - That definitely makes sense.
123:46 - And it should also stand to reason that when P is true and Q is false,
123:50 - then P implies Q is false.
123:52 - Because if I said to you, if it is raining, then I will be out indoors.
123:57 - And it is raining, but I'm not indoors?
124:01 - Well, then it would seem to be that my original statement was not true.
124:04 - P implies Q means that if P is true, then Q also needs to be true.
124:09 - And if it's not, well, then the statement is false.
124:13 - What's also worth noting, though, is what happens when P is false.
124:17 - When P is false, the implication makes no claim at all.
124:22 - If I say something like, if it is raining, then I will be indoors.
124:26 - And it turns out it's not raining.
124:28 - Then in that case, I am not making any statement
124:31 - as to whether or not I will be indoors or not.
124:33 - P implies Q just means that if P is true, Q must be true.
124:37 - But if P is not true, then we make no claim about whether or not Q
124:42 - is true at all.
124:43 - So in either case, if P is false, it doesn't matter what Q is.
124:46 - Whether it's false or true, we're not making any claim about Q whatsoever.
124:50 - We can still evaluate the implication to true.
124:53 - The only way that the implication is ever false
124:56 - is if our premise, P, is true, but the conclusion that we're drawing Q
125:01 - happens to be false.
125:03 - So in that case, we would say P does not imply Q in that case.
125:09 - Finally, the last connective that we'll discuss is this bi-conditional.
125:13 - You can think of a bi-conditional as a condition
125:15 - that goes in both directions.
125:17 - So originally, when I said something like, if it is raining,
125:20 - then I will be indoors.
125:22 - I didn't say what would happen if it wasn't raining.
125:24 - Maybe I'll be indoors, maybe I'll be outdoors.
125:27 - This bi-conditional, you can read as an if and only if.
125:31 - So I can say, I will be indoors if and only if it is raining,
125:36 - meaning if it is raining, then I will be indoors.
125:39 - And if I am indoors, it's reasonable to conclude that it is also raining.
125:43 - So this bi-conditional is only true when P and Q are the same.
125:48 - So if P is true and Q is true, then this bi-conditional is also true.
125:53 - P implies Q, but also the reverse is true.
125:56 - Q also implies P. So if P and Q both happen to be false,
126:01 - we would still say it's true.
126:02 - But in any of these other two situations,
126:04 - this P if and only if Q is going to ultimately evaluate to false.
126:08 - So a lot of trues and falses going on there,
126:11 - but these five basic logical connectives
126:13 - are going to form the core of the language of propositional logic,
126:16 - the language that we're going to use in order to describe ideas,
126:20 - and the language that we're going to use in order
126:21 - to reason about those ideas in order to draw conclusions.
126:26 - So let's now take a look at some of the additional terms
126:29 - that we'll need to know about in order to go about trying
126:31 - to form this language of propositional logic
126:33 - and writing AI that's actually able to understand this sort of logic.
126:37 - The next thing we're going to need is the notion of what
126:40 - is actually true about the world.
126:42 - We have a whole bunch of propositional symbols, P and Q and R and maybe others,
126:46 - but we need some way of knowing what actually is true in the world.
126:50 - Is P true or false?
126:51 - Is Q true or false?
126:52 - So on and so forth.
126:54 - And to do that, we'll introduce the notion of a model.
126:57 - A model just assigns a truth value, where a truth value is either true
127:02 - or false, to every propositional symbol.
127:05 - In other words, it's creating what we might call a possible world.
127:09 - So let me give an example.
127:10 - If, for example, I have two propositional symbols, P is it is raining
127:15 - and Q is it is a Tuesday, a model just takes each of these two symbols
127:21 - and assigns a truth value to them, either true or false.
127:24 - So here's a sample model.
127:26 - In this model, in other words, in this possible world,
127:29 - it is possible that P is true, meaning it is raining, and Q is false,
127:33 - meaning it is not a Tuesday.
127:36 - But there are other possible worlds or other models as well.
127:39 - There is some model where both of these variables are true,
127:41 - some model where both of these variables are false.
127:44 - In fact, if there are n variables that are propositional symbols like this
127:48 - that are either true or false, then the number of possible models
127:51 - is 2 to the n, because each of these possible models,
127:55 - possible variables within my model, could be set to either true or false
128:00 - if I don't know any information about it.
128:03 - So now that I have the symbols and the connectives
128:07 - that I'm going to need in order to construct these parts of knowledge,
128:11 - we need some way to represent that knowledge.
128:13 - And to do so, we're going to allow our AI access
128:15 - to what we'll call a knowledge base.
128:18 - And a knowledge base is really just a set of sentences
128:21 - that our AI knows to be true.
128:24 - Some set of sentences in propositional logic
128:27 - that are things that our AI knows about the world.
128:30 - And so we might tell our AI some information, information about a situation
128:35 - that it finds itself in, or a situation about a problem
128:38 - that it happens to be trying to solve.
128:39 - And we would give that information to the AI
128:41 - that the AI would store inside of its knowledge base.
128:44 - And what happens next is the AI would like
128:47 - to use that information in the knowledge base
128:49 - to be able to draw conclusions about the rest of the world.
128:53 - And what do those conclusions look like?
128:55 - Well, to understand those conclusions, we'll
128:56 - need to introduce one more idea, one more symbol.
128:59 - And that is the notion of entailment.
129:02 - So this sentence here, with this double turnstile in these Greek letters,
129:06 - this is the Greek letter alpha and the Greek letter beta.
129:08 - And we read this as alpha entails beta.
129:12 - And alpha and beta here are just sentences in propositional logic.
129:17 - And what this means is that alpha entails beta
129:20 - means that in every model, in other words,
129:23 - in every possible world in which sentence alpha is true,
129:28 - then sentence beta is also true.
129:31 - So if something entails something else, if alpha entails beta,
129:35 - it means that if I know alpha to be true, then beta must therefore also
129:40 - be true.
129:41 - So if my alpha is something like I know that it is a Tuesday in January,
129:47 - then a reasonable beta might be something like I know that it is January.
129:52 - Because in all worlds where it is a Tuesday in January,
129:55 - I know for sure that it must be January, just by definition.
129:59 - This first statement or sentence about the world
130:01 - entails the second statement.
130:03 - And we can reasonably use deduction based on that first sentence
130:07 - to figure out that the second sentence is, in fact, true as well.
130:12 - And ultimately, it's this idea of entailment
130:14 - that we're going to try and encode into our computer.
130:17 - We want our AI agent to be able to figure out
130:20 - what the possible entailments are.
130:22 - We want our AI to be able to take these three sentences, sentences like,
130:26 - if it didn't rain, Harry visited Hagrid.
130:28 - That Harry visited Hagrid or Dumbledore, but not both.
130:31 - And that Harry visited Dumbledore.
130:33 - And just using that information, we'd like our AI
130:36 - to be able to infer or figure out that using these three sentences inside
130:41 - of a knowledge base, we can draw some conclusions.
130:44 - In particular, we can draw the conclusions here that, one,
130:47 - Harry did not visit Hagrid today.
130:49 - And we can draw the entailment, too, that it did, in fact, rain today.
130:53 - And this process is known as inference.
130:56 - And that's what we're going to be focusing on today,
130:58 - this process of deriving new sentences from old ones,
131:01 - that I give you these three sentences, you put them
131:04 - in the knowledge base in, say, the AI.
131:06 - And the AI is able to use some sort of inference algorithm
131:09 - to figure out that these two sentences must also be true.
131:14 - And that is how we define inference.
131:16 - So let's take a look at an inference example
131:18 - to see how we might actually go about inferring things in a human sense
131:22 - before we take a more algorithmic approach
131:24 - to see how we could encode this idea of inference in AI.
131:27 - And we'll see there are a number of ways that we can actually achieve this.
131:30 - So again, we'll deal with a couple of propositional symbols.
131:33 - We'll deal with P, Q, and R. P is it is a Tuesday.
131:37 - Q is it is raining.
131:39 - And R is Harry will go for a run, three propositional symbols
131:42 - that we are just defining to mean this.
131:44 - We're not saying anything yet about whether they're true or false.
131:47 - We're just defining what they are.
131:50 - Now, we'll give ourselves or an AI access to a knowledge base,
131:53 - abbreviated to KB, the knowledge that we know about the world.
131:57 - We know this statement.
131:59 - All right.
131:59 - So let's try to parse it.
132:00 - The parentheses here are just used for precedent,
132:02 - so we can see what associates with what.
132:05 - But you would read this as P and not Q implies R.
132:11 - All right.
132:12 - So what does that mean?
132:13 - Let's put it piece by piece.
132:14 - P is it is a Tuesday.
132:16 - Q is it is raining, so not Q is it is not raining,
132:21 - and implies R is Harry will go for a run.
132:25 - So the way to read this entire sentence in human natural language
132:28 - at least is if it is a Tuesday and it is not raining,
132:33 - then Harry will go for a run.
132:35 - So if it is a Tuesday and it is not raining,
132:37 - then Harry will go for a run.
132:39 - And that is now inside of our knowledge base.
132:41 - And let's now imagine that our knowledge base has
132:43 - two other pieces of information as well.
132:45 - It has information that P is true, that it is a Tuesday.
132:49 - And we also have the information not Q, that it is not raining,
132:53 - that this sentence Q, it is raining, happens to be false.
132:57 - And those are the three sentences that we have access to.
132:59 - P and not Q implies R, P and not Q. Using that information,
133:05 - we should be able to draw some inferences.
133:08 - P and not Q is only true if both P and not Q are true.
133:14 - All right, we know that P is true and we know that not Q is true.
133:18 - So we know that this whole expression is true.
133:20 - And the definition of implication is if this whole thing on the left
133:24 - is true, then this thing on the right must also be true.
133:27 - So if we know that P and not Q is true, then R must be true as well.
133:31 - So the inference we should be able to draw from all of this
133:34 - is that R is true and we know that Harry will go for a run
133:38 - by taking this knowledge inside of our knowledge base
133:40 - and being able to reason based on that idea.
133:43 - And so this ultimately is the beginning of what
133:46 - we might consider to be some sort of inference algorithm,
133:49 - some process that we can use to try and figure out
133:52 - whether or not we can draw some conclusion.
133:55 - And ultimately, what these inference algorithms are going to answer
133:58 - is the central question about entailment.
134:00 - Given some query about the world, something
134:02 - we're wondering about the world, and we'll call that query alpha,
134:06 - the question we want to ask using these inference algorithms
134:09 - is does KB, our knowledge base, entail alpha?
134:14 - In other words, using only the information
134:16 - we know inside of our knowledge base, the knowledge that we have access to,
134:20 - can we conclude that this sentence alpha is true?
134:24 - And that's ultimately what we would like to do.
134:26 - So how can we do that?
134:28 - How can we go about writing an algorithm that
134:30 - can look at this knowledge base and figure out whether or not this query
134:33 - alpha is actually true?
134:35 - Well, it turns out there are a couple of different algorithms for doing so.
134:39 - And one of the simplest, perhaps, is known as model checking.
134:43 - Now, remember that a model is just some assignment
134:45 - of all of the propositional symbols inside of our language to a truth
134:49 - value, true or false.
134:51 - And you can think of a model as a possible world,
134:53 - that there are many possible worlds where different things might
134:55 - be true or false, and we can enumerate all of them.
134:59 - And the model checking algorithm does exactly that.
135:02 - So what does our model checking algorithm do?
135:04 - Well, if we wanted to determine if our knowledge base entails
135:08 - some query alpha, then we are going to enumerate all possible models.
135:13 - In other words, consider all possible values of true and false
135:16 - for our variables, all possible states in which our world can be in.
135:21 - And if in every model where our knowledge base is true,
135:25 - alpha is also true, then we know that the knowledge base entails alpha.
135:30 - So let's take a closer look at that sentence
135:32 - and try and figure out what it actually means.
135:34 - If we know that in every model, in other words, in every possible world,
135:38 - no matter what assignment of true and false to variables you give,
135:41 - if we know that whenever our knowledge is true, what
135:44 - we know to be true is true, that this query alpha is also true,
135:49 - well, then it stands to reason that as long as our knowledge base is true,
135:52 - then alpha must also be true.
135:56 - And so this is going to form the foundation of our model checking
135:58 - algorithm.
135:59 - We're going to enumerate all of the possible worlds
136:01 - and ask ourselves whenever the knowledge base is true, is alpha true?
136:05 - And if that's the case, then we know alpha to be true.
136:09 - And otherwise, there is no entailment.
136:11 - Our knowledge base does not entail alpha.
136:14 - All right.
136:15 - So this is a little bit abstract, but let's
136:17 - take a look at an example to try and put real propositional symbols
136:20 - to this idea.
136:22 - So again, we'll work with the same example.
136:24 - P is it is a Tuesday, Q is it is raining, R as Harry will go for a run.
136:29 - Our knowledge base contains these pieces of information.
136:32 - P and not Q implies R. We also know P.
136:35 - It is a Tuesday and not Q. It is not raining.
136:38 - And our query, our alpha in this case, the thing we want to ask is R.
136:43 - We want to know, is it guaranteed?
136:45 - Is it entailed that Harry will go for a run?
136:49 - So the first step is to enumerate all of the possible models.
136:52 - We have three propositional symbols here, P, Q, and R,
136:55 - which means we have 2 to the third power, or eight possible models.
136:59 - All false, false, false true, false true, false, false true, true, et cetera.
137:04 - Eight possible ways you could assign true and false to all of these models.
137:09 - And we might ask in each one of them, is the knowledge base true?
137:13 - Here are the set of things that we know.
137:15 - In which of these worlds could this knowledge base possibly apply to?
137:20 - In which world is this knowledge base true?
137:22 - Well, in the knowledge base, for example, we know P.
137:26 - We know it is a Tuesday, which means we know that these four first four rows
137:31 - where P is false, none of those are going to be true
137:35 - or are going to work for this particular knowledge base.
137:37 - Our knowledge base is not true in those worlds.
137:40 - Likewise, we also know not Q. We know that it is not raining.
137:46 - So any of these models where Q is true, like these two and these two here,
137:51 - those aren't going to work either because we know that Q is not true.
137:55 - And finally, we also know that P and not Q implies R,
138:00 - which means that when P is true or P is true here and Q is false,
138:04 - Q is false in these two, then R must be true.
138:08 - And if ever P is true, Q is false, but R is also false,
138:14 - well, that doesn't satisfy this implication here.
138:17 - That implication does not hold true under those situations.
138:21 - So we could say that for our knowledge base,
138:24 - we can conclude under which of these possible worlds
138:27 - is our knowledge base true and under which of the possible worlds
138:30 - is our knowledge base false.
138:31 - And it turns out there is only one possible world
138:35 - where our knowledge base is actually true.
138:37 - In some cases, there might be multiple possible worlds
138:39 - where the knowledge base is true.
138:40 - But in this case, it just so happens that there's only one, one possible world
138:44 - where we can definitively say something about our knowledge base.
138:48 - And in this case, we would look at the query.
138:50 - The query of R is R true, R is true, and so as a result,
138:56 - we can draw that conclusion.
138:58 - And so this is this idea of model check-in.
139:01 - Enumerate all the possible models and look in those possible models
139:04 - to see whether or not, if our knowledge base is true,
139:08 - is the query in question true as well.
139:11 - So let's now take a look at how we might actually go about writing this
139:14 - in a programming language like Python.
139:16 - Take a look at some actual code that would
139:18 - encode this notion of propositional symbols and logic
139:21 - and these connectives like and and or and not and implication and so forth
139:25 - and see what that code might actually look like.
139:28 - So I've written in advance a logic library that's
139:30 - more detailed than we need to worry about entirely today.
139:33 - But the important thing is that we have one class for every type
139:37 - of logical symbol or connective that we might have.
139:40 - So we just have one class for logical symbols, for example,
139:44 - where every symbol is going to represent and store
139:46 - some name for that particular symbol.
139:49 - And we also have a class for not that takes an operand.
139:52 - So we might say not one symbol to say something is not true
139:56 - or some other sentence is not true.
139:58 - We have one for and, one for or, so on and so forth.
140:02 - And I'll just demonstrate how this works.
140:03 - And you can take a look at the actual logic.py later on.
140:07 - But I'll go ahead and call this file harry.py.
140:11 - We're going to store information about this world of Harry Potter,
140:15 - for example.
140:16 - So I'll go ahead and import from my logic module.
140:19 - I'll import everything.
140:20 - And in this library, in order to create a symbol, you use capital S symbol.
140:25 - And I'll create a symbol for rain, to mean it is raining, for example.
140:30 - And I'll create a symbol for Hagrid, to mean Harry visited Hagrid,
140:35 - is what this symbol is going to mean.
140:36 - So this symbol means it is raining.
140:38 - This symbol means Harry visited Hagrid.
140:41 - And I'll add another symbol called Dumbledore for Harry visited Dumbledore.
140:49 - Now, I'd like to save these symbols so that I can use them later
140:52 - as I do some logical analysis.
140:54 - So I'll go ahead and save each one of them inside of a variable.
140:56 - So like rain, Hagrid, and Dumbledore, so you could call the variables anything.
141:02 - And now that I have these logical symbols,
141:04 - I can use logical connectives to combine them together.
141:07 - So for example, if I have a sentence like and rain and Hagrid,
141:14 - for example, which is not necessarily true, but just for demonstration,
141:18 - I can now try and print out sentence.formula, which
141:22 - is a function I wrote that takes a sentence in propositional logic
141:25 - and just prints it out so that we, the programmers,
141:27 - can now see this in order to get an understanding for how it actually works.
141:32 - So if I run python harry.py, what we'll see
141:36 - is this sentence in propositional logic, rain and Hagrid.
141:40 - This is the logical representation of what we have here in our Python program
141:44 - of saying and whose arguments are rain and Hagrid.
141:48 - So we're saying rain and Hagrid by encoding that idea.
141:51 - And this is quite common in Python object-oriented programming,
141:54 - where you have a number of different classes,
141:56 - and you pass arguments into them in order to create a new and object,
142:01 - for example, in order to represent this idea.
142:03 - But now what I'd like to do is somehow encode the knowledge
142:07 - that I have about the world in order to solve
142:09 - that problem from the beginning of class, where
142:11 - we talked about trying to figure out who Harry visited
142:14 - and trying to figure out if it's raining or if it's not raining.
142:17 - And so what knowledge do I have?
142:19 - I'll go ahead and create a new variable called knowledge.
142:22 - And what do I know?
142:23 - Well, I know the very first sentence that we talked about
142:25 - was the idea that if it is not raining, then Harry will visit Hagrid.
142:30 - So all right, how do I encode the idea that it is not raining?
142:33 - Well, I can use not and then the rain symbol.
142:36 - So here's me saying that it is not raining.
142:39 - And now the implication is that if it is not raining,
142:42 - then Harry visited Hagrid.
142:45 - So I'll wrap this inside of an implication to say,
142:48 - if it is not raining, this first argument to the implication
142:52 - will then Harry visited Hagrid.
142:56 - So I'm saying implication, the premise is that it's not raining.
143:00 - And if it is not raining, then Harry visited Hagrid.
143:04 - And I can print out knowledge.formula to see the logical formula
143:07 - equivalent of that same idea.
143:09 - So I run Python of harry.py.
143:11 - And this is the logical formula that we see
143:13 - as a result, which is a text-based version of what
143:16 - we were looking at before, that if it is not raining,
143:18 - then that implies that Harry visited Hagrid.
143:23 - But there was additional information that we had access to as well.
143:26 - In this case, we had access to the fact that Harry visited either Hagrid
143:31 - or Dumbledore.
143:32 - So how do I encode that?
143:34 - Well, this means that in my knowledge, I've really
143:36 - got multiple pieces of knowledge going on.
143:38 - I know one thing and another thing and another thing.
143:41 - So I'll go ahead and wrap all of my knowledge inside of an and.
143:44 - And I'll move things on to new lines just for good measure.
143:47 - But I know multiple things.
143:49 - So I'm saying knowledge is an and of multiple different sentences.
143:52 - I know multiple different sentences to be true.
143:55 - One such sentence that I know to be true is this implication,
143:59 - that if it is not raining, then Harry visited Hagrid.
144:02 - Another such sentence that I know to be true is or Hagrid Dumbledore.
144:08 - In other words, Hagrid or Dumbledore is true,
144:12 - because I know that Harry visited Hagrid or Dumbledore.
144:16 - But I know more than that, actually.
144:17 - That initial sentence from before said that Harry visited Hagrid or Dumbledore,
144:22 - but not both.
144:23 - So now I want a sentence that will encode the idea that Harry didn't
144:26 - visit both Hagrid and Dumbledore.
144:29 - Well, the notion of Harry visiting Hagrid and Dumbledore
144:33 - would be represented like this, and of Hagrid and Dumbledore.
144:38 - And if that is not true, if I want to say not that,
144:41 - then I'll just wrap this whole thing inside of a not.
144:46 - So now these three lines, line 8 says that if it is not raining,
144:50 - then Harry visited Hagrid.
144:51 - Line 9 says Harry visited Hagrid or Dumbledore.
144:55 - And line 10 says Harry didn't visit both Hagrid and Dumbledore,
145:01 - that it is not true that both the Hagrid symbol and the Dumbledore
145:04 - symbol are true.
145:05 - Only one of them can be true.
145:08 - And finally, the last piece of information that I knew
145:11 - was the fact that Harry visited Dumbledore.
145:15 - So these now are the pieces of knowledge that I know, one sentence
145:18 - and another sentence and another and another.
145:21 - And I can print out what I know just to see it a little bit more visually.
145:24 - And here now is a logical representation of the information
145:28 - that my computer is now internally representing
145:31 - using these various different Python objects.
145:33 - And again, take a look at logic.py if you want to take a look at how exactly
145:37 - it's implementing this, but no need to worry too much about all of the details
145:40 - there.
145:40 - We're here saying that if it is not raining, then Harry visited Hagrid.
145:44 - We're saying that Hagrid or Dumbledore is true.
145:47 - And we're saying it is not the case that Hagrid and Dumbledore is true,
145:52 - that they're not both true.
145:54 - And we also know that Dumbledore is true.
145:57 - So this long logical sentence represents our knowledge base.
146:01 - It is the thing that we know.
146:03 - And now what we'd like to do is we'd like to use model checking
146:06 - to ask a query, to ask a question like, based on this information,
146:10 - do I know whether or not it's raining?
146:12 - And we as humans were able to logic our way through it and figure out that,
146:15 - all right, based on these sentences, we can conclude this and that
146:18 - to figure out that, yes, it must have been raining.
146:20 - But now we'd like for the computer to do that as well.
146:23 - So let's take a look at the model checking algorithm
146:26 - that is going to follow that same pattern
146:27 - that we drew out in pseudocode a moment ago.
146:30 - So I've defined a function here in logic.py
146:32 - that you can take a look at called model check.
146:35 - Model check takes two arguments, the knowledge that I already know,
146:39 - and the query.
146:41 - And the idea is, in order to do model checking,
146:43 - I need to enumerate all of the possible models.
146:46 - And for each of the possible models, I need to ask myself,
146:49 - is the knowledge base true?
146:50 - And is the query true?
146:52 - So the first thing I need to do is somehow
146:54 - enumerate all of the possible models, meaning
146:57 - for all possible symbols that exist, I need
146:59 - to assign true and false to each one of them
147:02 - and see whether or not it's still true.
147:05 - And so here is the way we're going to do that.
147:07 - We're going to start.
147:08 - So I've defined another helper function internally
147:10 - that we'll get to in just a moment.
147:12 - But this function starts by getting all of the symbols in both the knowledge
147:17 - and the query, by figuring out what symbols am I dealing with.
147:20 - In this case, the symbols I'm dealing with are rain and Hagrid and Dumbledore,
147:24 - but there might be other symbols depending on the problem.
147:26 - And we'll take a look soon at some examples of situations
147:29 - where ultimately we're going to need some additional symbols in order
147:32 - to represent the problem.
147:34 - And then we're going to run this check all function, which
147:38 - is a helper function that's basically going to recursively call itself
147:41 - checking every possible configuration of propositional symbols.
147:46 - So we start out by looking at this check all function.
147:51 - And what do we do?
147:52 - So if not symbols means if we finish assigning all of the symbols.
147:57 - We've assigned every symbol a value.
147:58 - So far we haven't done that, but if we ever do, then we check.
148:03 - In this model, is the knowledge true?
148:05 - That's what this line is saying.
148:06 - If we evaluate the knowledge propositional logic formula
148:10 - using the model's assignment of truth values, is the knowledge true?
148:14 - If the knowledge is true, then we should return true only if the query is true.
148:19 - Because if the knowledge is true, we want the query
148:22 - to be true as well in order for there to be entailment.
148:25 - Otherwise, we don't know that there otherwise there won't be an entailment
148:29 - if there's ever a situation where what we know in our knowledge is true,
148:33 - but the query, the thing we're asking, happens to be false.
148:36 - So this line here is checking that same idea
148:38 - that in all worlds where the knowledge is true, the query must also be true.
148:44 - Otherwise, we can just return true because if the knowledge isn't true,
148:47 - then we don't care.
148:48 - This is equivalent to when we were enumerating
148:50 - this table from a moment ago.
148:52 - In all situations where the knowledge base wasn't true, all of these seven
148:56 - rows here, we didn't care whether or not our query was true or not.
149:00 - We only care to check whether the query is true
149:03 - when the knowledge base is actually true, which was just this green highlighted
149:06 - row right there.
149:08 - So that logic is encoded using that statement there.
149:12 - And otherwise, if we haven't assigned symbols yet,
149:15 - which we haven't seen anything yet, then the first thing we do
149:18 - is pop one of the symbols.
149:20 - I make a copy of the symbols first just to save an existing copy.
149:23 - But I pop one symbol off of the remaining symbols
149:26 - so that I just pick one symbol at random.
149:29 - And I create one copy of the model where that symbol is true.
149:33 - And I create a second copy of the model where that symbol is false.
149:38 - So I now have two copies of the model, one where the symbol is true
149:41 - and one where the symbol is false.
149:43 - And I need to make sure that this entailment holds in both of those models.
149:47 - So I recursively check all on the model where the statement is true
149:52 - and check all on the model where the statement is false.
149:57 - So again, you can take a look at that function
149:59 - to try to get a sense for how exactly this logic is working.
150:02 - But in effect, what it's doing is recursively
150:03 - calling this check all function again and again and again.
150:07 - And on every level of the recursion, we're
150:09 - saying let's pick a new symbol that we haven't yet assigned,
150:13 - assign it to true and assign it to false,
150:16 - and then check to make sure that the entailment holds in both cases.
150:19 - Because ultimately, I need to check every possible world.
150:22 - I need to take every combination of symbols
150:24 - and try every combination of true and false
150:27 - in order to figure out whether the entailment relation actually holds.
150:31 - So that function we've written for you.
150:34 - But in order to use that function inside of harry.py,
150:37 - what I'll write is something like this.
150:39 - I would like to model check based on the knowledge.
150:43 - And then I provide as a second argument what the query is,
150:46 - what the thing I want to ask is.
150:48 - And what I want to ask in this case is, is it raining?
150:51 - So model check again takes two arguments.
150:54 - The first argument is the information that I know, this knowledge,
150:57 - which in this case is this information that was given to me at the beginning.
151:01 - And the second argument, rain, is encoding the idea of the query.
151:06 - What am I asking?
151:07 - I would like to ask, based on this knowledge,
151:10 - do I know for sure that it is raining?
151:13 - And I can try and print out the result of that.
151:17 - And when I run this program, I see that the answer is true.
151:20 - That based on this information, I can conclusively
151:23 - say that it is raining, because using this model checking algorithm,
151:26 - we were able to check that in every world where this knowledge is true,
151:30 - it is raining.
151:31 - In other words, there is no world where this knowledge is true,
151:35 - and it is not raining.
151:36 - So you can conclude that it is, in fact, raining.
151:41 - And this sort of logic can be applied to a number
151:43 - of different types of problems, that if confronted with a problem where
151:47 - some sort of logical deduction can be used in order to try to solve it,
151:50 - you might try thinking about what propositional symbols you might
151:54 - need in order to represent that information,
151:56 - and what statements and propositional logic
151:58 - you might use in order to encode that information which you know.
152:03 - And this process of trying to take a problem
152:05 - and figure out what propositional symbols to use in order
152:08 - to encode that idea, or how to represent it logically,
152:11 - is known as knowledge engineering.
152:13 - That software engineers and AI engineers will take a problem
152:16 - and try and figure out how to distill it down
152:19 - into knowledge that is representable by a computer.
152:22 - And if we can take any general purpose problem, some problem
152:25 - that we find in the human world, and turn it
152:27 - into a problem that computers know how to solve
152:30 - as by using any number of different variables, well,
152:32 - then we can take a computer that is able to do something
152:35 - like model checking or some other inference algorithm
152:37 - and actually figure out how to solve that problem.
152:41 - So now we'll take a look at two or three examples of knowledge engineering
152:45 - and practice, of taking some problem and figuring out
152:47 - how we can apply logical symbols and use logical formulas
152:51 - to be able to encode that idea.
152:53 - And we'll start with a very popular board game in the US and the UK
152:57 - known as Clue.
152:58 - Now, in the game of Clue, there's a number of different factors
153:00 - that are going on.
153:01 - But the basic premise of the game, if you've never played it before,
153:04 - is that there are a number of different people.
153:06 - For now, we'll just use three, Colonel Mustard, Professor Plumb,
153:09 - and Miss Scarlet.
153:10 - There are a number of different rooms, like a ballroom, a kitchen,
153:12 - and a library.
153:13 - And there are a number of different weapons, a knife, a revolver, and a wrench.
153:17 - And three of these, one person, one room, and one weapon,
153:21 - is the solution to the mystery, the murderer and what room they were in
153:26 - and what weapon they happened to use.
153:28 - And what happens at the beginning of the game
153:30 - is that all these cards are randomly shuffled together.
153:32 - And three of them, one person, one room, and one weapon,
153:35 - are placed into a sealed envelope that we don't know.
153:37 - And we would like to figure out, using some sort of logical process,
153:41 - what's inside the envelope, which person, which room, and which weapon.
153:45 - And we do so by looking at some, but not all, of these cards here,
153:50 - by looking at these cards to try and figure out what might be going on.
153:54 - And so this is a very popular game.
153:56 - But let's now try and formalize it and see
153:58 - if we could train a computer to be able to play this game by reasoning
154:01 - through it logically.
154:04 - So in order to do this, we'll begin by thinking about what
154:06 - propositional symbols we're ultimately going to need.
154:09 - Remember, again, that propositional symbols are just some symbol,
154:12 - some variable, that can be either true or false in the world.
154:17 - And so in this case, the propositional symbols
154:20 - are really just going to correspond to each of the possible things that
154:25 - could be inside the envelope.
154:26 - Mustard is a propositional symbol that, in this case,
154:29 - will just be true if Colonel Mustard is inside the envelope,
154:32 - if he is the murderer, and false otherwise.
154:35 - And likewise for Plum, for Professor Plum, and Scarlet, for Miss Scarlet.
154:38 - And likewise for each of the rooms and for each of the weapons.
154:41 - We have one propositional symbol for each of these ideas.
154:46 - Then using those propositional symbols, we
154:48 - can begin to create logical sentences, create knowledge
154:52 - that we know about the world.
154:54 - So for example, we know that someone is the murderer,
154:57 - that one of the three people is, in fact, the murderer.
155:00 - And how would we encode that?
155:01 - Well, we don't know for sure who the murderer is.
155:04 - But we know it is one person or the second person or the third person.
155:09 - So I could say something like this.
155:10 - Mustard or Plum or Scarlet.
155:13 - And this piece of knowledge encodes that one of these three people
155:17 - is the murderer.
155:17 - We don't know which, but one of these three things must be true.
155:22 - What other information do we know?
155:24 - Well, we know that, for example, one of the rooms
155:26 - must have been the room in the envelope.
155:28 - The crime was committed either in the ballroom or the kitchen or the library.
155:33 - Again, right now, we don't know which.
155:34 - But this is knowledge we know at the outset,
155:36 - knowledge that one of these three must be inside the envelope.
155:40 - And likewise, we can say the same thing about the weapon,
155:42 - that it was either the knife or the revolver or the wrench,
155:45 - that one of those weapons must have been the weapon of choice
155:48 - and therefore the weapon in the envelope.
155:51 - And then as the game progresses, the gameplay
155:53 - works by people get various different cards.
155:55 - And using those cards, you can deduce information.
155:59 - That if someone gives you a card, for example,
156:01 - I have the Professor Plum card in my hand,
156:04 - then I know the Professor Plum card can't be inside the envelope.
156:07 - I know that Professor Plum is not the criminal,
156:11 - so I know a piece of information like not Plum, for example.
156:15 - I know that Professor Plum has to be false.
156:18 - This propositional symbol is not true.
156:21 - And sometimes I might not know for sure that a particular card is not
156:24 - in the middle, but sometimes someone will make a guess
156:27 - and I'll know that one of three possibilities is not true.
156:30 - Someone will guess Colonel Mustard in the library with the revolver
156:33 - or something to that effect.
156:35 - And in that case, a card might be revealed that I don't see.
156:38 - But if it is a card and it is either Colonel Mustard or the revolver
156:43 - or the library, then I know that at least one of them
156:46 - can't be in the middle.
156:47 - So I know something like it is either not Mustard
156:51 - or it is not the library or it is not the revolver.
156:55 - Now maybe multiple of these are not true,
156:57 - but I know that at least one of Mustard, Library, and Revolver
157:01 - must, in fact, be false.
157:03 - And so this now is a propositional logic representation
157:07 - of this game of Clue, a way of encoding the knowledge that we
157:10 - know inside this game using propositional logic
157:13 - that a computer algorithm, something like model checking
157:15 - that we saw a moment ago, can actually look at and understand.
157:19 - So let's now take a look at some code to see
157:21 - how this algorithm might actually work in practice.
157:26 - All right, so I'm now going to open up a file called Clue.py, which
157:30 - I've started already.
157:31 - And what we'll see here is I've defined a couple of things.
157:33 - To find some symbols initially, notice I
157:35 - have a symbol for Colonel Mustard, a symbol for Professor Plum,
157:38 - a symbol for Miss Scarlett, all of which
157:40 - I've put inside of this list of characters.
157:42 - I have a symbol for Ballroom and Kitchen and Library
157:45 - inside of a list of rooms.
157:46 - And then I have symbols for Knife and Revolver and Wrench.
157:49 - These are my weapons.
157:50 - And so all of these characters and rooms and weapons altogether,
157:53 - those are my symbols.
157:55 - And now I also have this check knowledge function.
157:59 - And what the check knowledge function does is it takes my knowledge
158:02 - and it's going to try and draw conclusions about what I know.
158:07 - So for example, we'll loop over all of the possible symbols
158:10 - and we'll check, do I know that that symbol is true?
158:13 - And a symbol is going to be something like Professor Plum
158:15 - or the Knife or the Library.
158:17 - And if I know that it is true, in other words,
158:19 - I know that it must be the card in the envelope,
158:22 - then I'm going to print out using a function called
158:24 - cprint, which prints things in color.
158:26 - I'm going to print out the word yes, and I'm
158:28 - going to print that in green, just to make it very clear to us.
158:32 - If we're not sure that the symbol is true,
158:35 - maybe I can check to see if I'm sure that the symbol is not true.
158:38 - Like if I know for sure that it is not Professor Plum, for example.
158:42 - And I do that by running model check again,
158:44 - this time checking if my knowledge is not the symbol,
158:48 - if I know for sure that the symbol is not true.
158:52 - And if I don't know for sure that the symbol is not true,
158:55 - because I say if not model check, meaning I'm not sure that the symbol is
158:59 - false, well, then I'll go ahead and print out maybe next to the symbol.
159:03 - Because maybe the symbol is true, maybe it's not, I don't actually know.
159:07 - So what knowledge do I actually have?
159:10 - Well, let's try and represent my knowledge now.
159:12 - So my knowledge is, I know a couple of things, so I'll put them in an and.
159:16 - And I know that one of the three people must be the criminal.
159:20 - So I know or mustard, plum, scarlet.
159:23 - This is my way of encoding that it is either Colonel Mustard or Professor
159:26 - Plum or Miss Scarlet.
159:28 - I know that it must have happened in one of the rooms.
159:31 - So I know or ballroom, kitchen, library, for example.
159:36 - And I know that one of the weapons must have been used as well.
159:38 - So I know or knife, revolver, wrench.
159:43 - So that might be my initial knowledge, that I
159:45 - know that it must have been one of the people,
159:47 - I know it must have been in one of the rooms,
159:48 - and I know that it must have been one of the weapons.
159:51 - And I can see what that knowledge looks like as a formula
159:54 - by printing out knowledge.formula.
159:56 - So I'll run python clue.py.
159:58 - And here now is the information that I know in logical format.
160:02 - I know that it is Colonel Mustard or Professor Plum or Miss Scarlet.
160:05 - And I know that it is the ballroom, the kitchen, or the library.
160:08 - And I know that it is the knife, the revolver, or the wrench.
160:11 - But I don't know much more than that.
160:13 - I can't really draw any firm conclusions.
160:16 - And in fact, we can see that if I try and do,
160:19 - let me go ahead and run my knowledge check function on my knowledge.
160:24 - Knowledge check is this function that I, or check knowledge rather,
160:27 - is this function that I just wrote that looks over all of the symbols
160:31 - and tries to see what conclusions I can actually
160:33 - draw about any of the symbols.
160:36 - So I'll go ahead and run clue.py and see what it is that I know.
160:41 - And it seems that I don't really know anything for sure.
160:43 - I have all three people are maybes, all three of the rooms are maybes,
160:47 - all three of the weapons are maybes.
160:48 - I don't really know anything for certain just yet.
160:52 - But now let me try and add some additional information
160:54 - and see if additional information, additional knowledge,
160:57 - can help us to logically reason our way through this process.
161:00 - And we are just going to provide the information.
161:02 - Our AI is going to take care of doing the inference
161:05 - and figuring out what conclusions it's able to draw.
161:09 - So I start with some cards.
161:11 - And those cards tell me something.
161:12 - So if I have the kernel mustard card, for example,
161:15 - I know that the mustard symbol must be false.
161:19 - In other words, mustard is not the one in the envelope,
161:22 - is not the criminal.
161:23 - So I can say, knowledge supports something called,
161:26 - every and in this library supports dot add,
161:30 - which is a way of adding knowledge or adding
161:32 - an additional logical sentence to an and clause.
161:35 - So I can say, knowledge dot add, not mustard.
161:40 - I happen to know, because I have the mustard card,
161:42 - that kernel mustard is not the suspect.
161:44 - And maybe I have a couple of other cards too.
161:46 - Maybe I also have a card for the kitchen.
161:49 - So I know it's not the kitchen.
161:50 - And maybe I have another card that says that it is not the revolver.
161:54 - So I have three cards, kernel mustard, the kitchen, and the revolver.
161:57 - And I encode that into my AI this way by saying, it's not kernel mustard,
162:01 - it's not the kitchen, and it's not the revolver.
162:04 - And I know those to be true.
162:06 - So now, when I rerun clue.py, we'll see that I've
162:09 - been able to eliminate some possibilities.
162:12 - Before, I wasn't sure if it was the knife or the revolver or the wrench.
162:15 - If a knife was maybe, a revolver was maybe, wrench is maybe.
162:18 - Now I'm down to just the knife and the wrench.
162:21 - Between those two, I don't know which one it is.
162:23 - They're both maybes.
162:24 - But I've been able to eliminate the revolver, which
162:27 - is one that I know to be false, because I have the revolver card.
162:31 - And so additional information might be acquired
162:34 - over the course of this game.
162:36 - And we would represent that just by adding knowledge to our knowledge set
162:41 - or knowledge base that we've been building here.
162:43 - So if, for example, we additionally got the information
162:46 - that someone made a guess, someone guessed like Miss Scarlet
162:49 - in the library with the wrench.
162:51 - And we know that a card was revealed, which
162:53 - means that one of those three cards, either Miss Scarlet
162:56 - or the library or the wrench, one of those at minimum
162:59 - must not be inside of the envelope.
163:02 - So I could add some knowledge, say knowledge.add.
163:05 - And I'm going to add an or clause, because I don't know for sure which one
163:09 - it's not, but I know one of them is not in the envelope.
163:12 - So it's either not Scarlet, or it's not the library,
163:15 - and or supports multiple arguments.
163:17 - I can say it's also or not the wrench.
163:20 - So at least one of those needs a Scarlet library and wrench.
163:23 - At least one of those needs to be false.
163:25 - I don't know which, though.
163:26 - Maybe it's multiple.
163:27 - Maybe it's just one, but at least one I know needs to hold.
163:32 - And so now if I rerun clue.py, I don't actually
163:35 - have any additional information just yet.
163:37 - Nothing I can say conclusively.
163:38 - I still know that maybe it's Professor Plum, maybe it's Miss Scarlet.
163:41 - I haven't eliminated any options.
163:44 - But let's imagine that I get some more information,
163:46 - that someone shows me the Professor Plum card, for example.
163:50 - So I say, all right, let's go back here, knowledge.add, not Plum.
163:57 - So I have the Professor Plum card.
163:58 - I know the Professor Plum is not in the middle.
164:00 - I rerun clue.py.
164:02 - And right now, I'm able to draw some conclusions.
164:04 - Now I've been able to eliminate Professor Plum,
164:07 - and the only person it could left remaining be is Miss Scarlet.
164:10 - So I know, yes, Miss Scarlet, this variable must be true.
164:14 - And I've been able to infer that based on the information I already had.
164:17 - Now between the ballroom and the library and the knife and the wrench,
164:20 - for those two, I'm still not sure.
164:22 - So let's add one more piece of information.
164:25 - Let's say that I know that it's not the ballroom.
164:28 - Someone has shown me the ballroom card, so I know it's not the ballroom.
164:30 - Which means at this point, I should be able to conclude that it's the library.
164:33 - Let's see.
164:35 - I'll say knowledge.add, not the ballroom.
164:40 - And we'll go ahead and run that.
164:43 - And it turns out that after all of this, not only can I conclude that I
164:46 - know that it's the library, but I also know that the weapon was the knife.
164:49 - And that might have been an inference that was a little bit trickier, something
164:52 - I wouldn't have realized immediately, but the AI,
164:55 - via this model checking algorithm, is able to draw that conclusion,
164:58 - that we know for sure that it must be Miss Scarlet in the library with the knife.
165:02 - And how did we know that?
165:03 - Well, we know it from this or clause up here,
165:07 - that we know that it's either not Scarlet, or it's not the library,
165:11 - or it's not the wrench.
165:13 - And given that we know that it is Miss Scarlet,
165:16 - and we know that it is the library, then the only remaining option for the weapon
165:20 - is that it is not the wrench, which means that it must be the knife.
165:24 - So we as humans now can go back and reason through that,
165:26 - even though it might not have been immediately clear.
165:28 - And that's one of the advantages of using an AI or some sort of algorithm
165:32 - in order to do this, is that the computer can exhaust all of these possibilities
165:36 - and try and figure out what the solution actually should be.
165:40 - And so for that reason, it's often helpful to be
165:43 - able to represent knowledge in this way.
165:45 - Knowledge engineering, some situation where
165:47 - we can use a computer to be able to represent knowledge
165:50 - and draw conclusions based on that knowledge.
165:52 - And any time we can translate something into propositional logic symbols
165:56 - like this, this type of approach can be useful.
165:59 - So you might be familiar with logic puzzles,
166:01 - where you have to puzzle your way through trying to figure something out.
166:04 - This is what a classic logic puzzle might look like.
166:06 - Something like Gilderoy, Minerva, Pomona, and Horace each
166:09 - belong to a different one of the four houses, Gryffindor, Hufflepuff, Ravenclaw,
166:14 - and Slytherin.
166:15 - And then we have some information.
166:16 - The Gilderoy belongs to Gryffindor or Ravenclaw, Pomona
166:20 - does not belong in Slytherin, and Minerva does belong to Gryffindor.
166:24 - So we have a couple pieces of information.
166:26 - And using that information, we need to be
166:28 - able to draw some conclusions about which person should
166:31 - be assigned to which house.
166:33 - And again, we can use the exact same idea to try and implement this notion.
166:37 - So we need some propositional symbols.
166:39 - And in this case, the propositional symbols
166:41 - are going to get a little more complex, although we'll
166:43 - see ways to make this a little bit cleaner later on.
166:46 - But we'll need 16 propositional symbols, one for each person and house.
166:51 - So we need to say, remember, every propositional symbol
166:54 - is either true or false.
166:56 - So Gilderoy Gryffindor is either true or false.
166:59 - Either he's in Gryffindor or he is not.
167:01 - Likewise, Gilderoy Hufflepuff also true or false.
167:03 - Either it is true or it's false.
167:05 - And that's true for every combination of person and house
167:09 - that we could come up with.
167:10 - We have some sort of propositional symbol for each one of those.
167:14 - Using this type of knowledge, we can then
167:17 - begin to think about what types of logical sentences
167:20 - we can say about the puzzle.
167:22 - That if we know what will before even think about the information we were
167:25 - given, we can think about the premise of the problem,
167:28 - that every person is assigned to a different house.
167:31 - So what does that tell us?
167:32 - Well, it tells us sentences like this.
167:34 - It tells us like Pomona Slytherin implies not Pomona Hufflepuff.
167:39 - Something like if Pomona is in Slytherin,
167:42 - then we know that Pomona is not in Hufflepuff.
167:44 - And we know this for all four people and for all combinations of houses,
167:48 - that no matter what person you pick, if they're in one house,
167:51 - then they're not in some other house.
167:53 - So I'll probably have a whole bunch of knowledge statements
167:56 - that are of this form, that if we know Pomona is in Slytherin,
167:59 - then we know Pomona is not in Hufflepuff.
168:01 - We were also given the information that each person
168:04 - is in a different house.
168:05 - So I also have pieces of knowledge that look something like this.
168:08 - Minerva Ravenclaw implies not Gilderoy Ravenclaw.
168:13 - If they're all in different houses, then if Minerva is in Ravenclaw,
168:16 - then we know the Gilderoy is not in Ravenclaw as well.
168:20 - And I have a whole bunch of similar sentences
168:22 - like this that are expressing that idea for other people and other houses
168:26 - as well.
168:27 - And so in addition to sentences of these form,
168:29 - I also have the knowledge that was given to me.
168:32 - Information like Gilderoy was in Gryffindor or in Ravenclaw
168:35 - that would be represented like this, Gilderoy Gryffindor or Gilderoy
168:39 - Ravenclaw.
168:40 - And then using these sorts of sentences,
168:42 - I can begin to draw some conclusions about the world.
168:46 - So let's see an example of this.
168:48 - We'll go ahead and actually try and implement this logic puzzle
168:50 - to see if we can figure out what the answer is.
168:53 - I'll go ahead and open up puzzle.py, where I've already
168:56 - started to implement this sort of idea.
168:58 - I've defined a list of people and a list of houses.
169:01 - And I've so far created one symbol for every person and for every house.
169:06 - That's what this double four loop is doing, looping over all people,
169:09 - looping over all houses, creating a new symbol for each of them.
169:13 - And then I've added some information.
169:16 - I know that every person belongs to a house,
169:19 - so I've added the information for every person that person Gryffindor
169:24 - or person Hufflepuff or person Ravenclaw or person Slytherin,
169:28 - that one of those four things must be true.
169:30 - Every person belongs to a house.
169:33 - What other information do I know?
169:34 - I also know that only one house per person,
169:37 - so no person belongs to multiple houses.
169:41 - So how does this work?
169:42 - Well, this is going to be true for all people.
169:44 - So I'll loop over every person.
169:47 - And then I need to loop over all different pairs of houses.
169:51 - The idea is I want to encode the idea that if Minerva is in Gryffindor,
169:54 - then Minerva can't be in Ravenclaw.
169:57 - So I'll loop over all houses, each one.
169:59 - And I'll loop over all houses again, h2.
170:02 - And as long as they're different, h1 not equal to h2,
170:06 - then I'll add to my knowledge base this piece of information.
170:09 - That implication, in other words, an if then, if the person is in h1,
170:14 - then I know that they are not in house h2.
170:18 - So these lines here are encoding the notion that for every person,
170:22 - if they belong to house one, then they are not in house two.
170:25 - And the other piece of logic we need to encode
170:27 - is the idea that every house can only have one person.
170:30 - In other words, if Pomona is in Hufflepuff,
170:33 - then nobody else is allowed to be in Hufflepuff either.
170:35 - And that's the same logic, but sort of backwards.
170:37 - I loop over all of the houses and loop over all different pairs of people.
170:42 - So I loop over people once, loop over people again,
170:45 - and only do this when the people are different, p1 not equal to p2.
170:50 - And I add the knowledge that if, as given by the implication,
170:54 - if person one belongs to the house, then it
170:58 - is not the case that person two belongs to the same house.
171:03 - So here I'm just encoding the knowledge that
171:05 - represents the problem's constraints.
171:07 - I know that everyone's in a different house.
171:09 - I know that any person can only belong to one house.
171:12 - And I can now take my knowledge and try and print out the information
171:17 - that I happen to know.
171:18 - So I'll go ahead and print out knowledge.formula,
171:22 - just to see this in action, and I'll go ahead and skip this for now.
171:24 - But we'll come back to this in a second.
171:26 - Let's print out the knowledge that I know by running Python puzzle.py.
171:31 - It's a lot of information, a lot that I have to scroll through,
171:34 - because there are 16 different variables all going on.
171:36 - But the basic idea, if we scroll up to the very top,
171:39 - is I see my initial information.
171:41 - Gilderoy is either in Gryffindor, or Gilderoy is in Hufflepuff,
171:44 - or Gilderoy is in Ravenclaw, or Gilderoy is in Slytherin,
171:48 - and then way more information as well.
171:50 - So this is quite messy, more than we really want to be looking at.
171:54 - And soon, too, we'll see ways of representing
171:55 - this a little bit more nicely using logic.
171:58 - But for now, we can just say these are the variables
172:00 - that we're dealing with.
172:01 - And now we'd like to add some information.
172:05 - So the information we're going to add is Gilderoy is in Gryffindor,
172:09 - or he is in Ravenclaw.
172:10 - So that knowledge was given to us.
172:12 - So I'll go ahead and say knowledge.add.
172:15 - And I know that either or Gilderoy Gryffindor or Gilderoy Ravenclaw.
172:26 - One of those two things must be true.
172:29 - I also know that Pomona was not in Slytherin,
172:32 - so I can say knowledge.add not this symbol, not the Pomona-Slytherin
172:37 - symbol.
172:38 - And then I can add the knowledge that Minerva is in Gryffindor
172:42 - by adding the symbol Minerva Gryffindor.
172:46 - So those are the pieces of knowledge that I know.
172:49 - And this loop here at the bottom just loops over all of my symbols,
172:52 - checks to see if the knowledge entails that symbol
172:56 - by calling this model check function again.
172:58 - And if it does, if we know the symbol is true, we print out the symbol.
173:03 - So now I can run Python, puzzle.py, and Python
173:07 - is going to solve this puzzle for me.
173:08 - We're able to conclude that Gilderoy belongs to Ravenclaw,
173:11 - Pomona belongs to Hufflepuff, Minerva to Gryffindor, and Horace to Slytherin
173:15 - just by encoding this knowledge inside the computer,
173:18 - although it was quite tedious to do in this case.
173:20 - And as a result, we were able to get the conclusion from that as well.
173:24 - And you can imagine this being applied to many sorts
173:27 - of different deductive situations.
173:29 - So not only these situations where we're trying
173:31 - to deal with Harry Potter characters in this puzzle,
173:33 - but if you've ever played games like Mastermind, where
173:35 - you're trying to figure out which order different colors go in
173:39 - and trying to make predictions about it, I
173:40 - could tell you, for example, let's play a simplified version of Mastermind
173:44 - where there are four colors, red, blue, green, and yellow,
173:47 - and they're in some order, but I'm not telling you what order.
173:51 - You just have to make a guess, and I'll tell you
173:53 - of red, blue, green, and yellow how many of the four
173:55 - you got in the right position.
173:57 - So a simplified version of this game, you
173:59 - might make a guess like red, blue, green, yellow,
174:01 - and I would tell you something like two of those four
174:05 - are in the correct position, but the other two are not.
174:08 - And then you could reasonably make a guess and say, all right,
174:10 - look at this, blue, red, green, yellow.
174:13 - Try switching two of them around, and this time maybe I tell you,
174:16 - you know what, none of those are in the correct position.
174:19 - And the question then is, all right, what is the correct order
174:23 - of these four colors?
174:24 - And we as humans could begin to reason this through.
174:26 - All right, well, if none of these were correct,
174:28 - but two of these were correct, well, it must have been
174:31 - because I switched the red and the blue, which means red and blue here
174:34 - must be correct, which means green and yellow are probably not correct.
174:37 - You can begin to do this sort of deductive reasoning.
174:40 - And we can also equivalently try and take this
174:42 - and encode it inside of our computer as well.
174:45 - And it's going to be very similar to the logic puzzle
174:48 - that we just did a moment ago.
174:49 - So I won't spend too much time on this code because it is fairly similar.
174:52 - But again, we have a whole bunch of colors
174:54 - and four different positions in which those colors can be.
174:58 - And then we have some additional knowledge.
175:00 - And I encode all of that knowledge.
175:02 - And you can take a look at this code on your own time.
175:04 - But I just want to demonstrate that when we run this code,
175:07 - run python mastermind.py and run and see what we get,
175:12 - we ultimately are able to compute red 0 in the 0 position,
175:16 - blue in the 1 position, yellow in the 2 position,
175:19 - and green in the 3 position as the ordering of those symbols.
175:24 - Now, ultimately, what you might have noticed
175:25 - is this process was taking quite a long time.
175:28 - And in fact, model checking is not a particularly efficient algorithm, right?
175:32 - What I need to do in order to model check
175:34 - is take all of my possible different variables
175:36 - and enumerate all of the possibilities that they could be in.
175:39 - If I have n variables, I have 2 to the n possible worlds
175:44 - that I need to be looking through in order
175:45 - to perform this model checking algorithm.
175:48 - And this is probably not tractable, especially
175:50 - as we start to get to much larger and larger sets of data
175:53 - where you have many, many more variables that are at play.
175:56 - Right here, we only have a relatively small number of variables.
175:59 - So this sort of approach can actually work.
176:01 - But as the number of variables increases, model checking
176:04 - becomes less and less good of a way of trying
176:07 - to solve these sorts of problems.
176:09 - So while it might have been OK for something like Mastermind
176:12 - to conclude that this is indeed the correct sequence where all four
176:15 - are in the correct position, what we'd like to do
176:17 - is come up with some better ways to be able to make inferences rather than
176:21 - just enumerate all of the possibilities.
176:24 - And to do so, what we'll transition to next
176:26 - is the idea of inference rules, some sort of rules
176:29 - that we can apply to take knowledge that already exists
176:33 - and translate it into new forms of knowledge.
176:36 - And the general way we'll structure an inference rule
176:38 - is by having a horizontal line here.
176:40 - Anything above the line is going to represent a premise, something
176:44 - that we know to be true.
176:45 - And then anything below the line will be the conclusion
176:48 - that we can arrive at after we apply the logic from the inference rule
176:53 - that we're going to demonstrate.
176:54 - So we'll do some of these inference rules
176:56 - by demonstrating them in English first, but then translating them
176:59 - into the world of propositional logic so you
177:01 - can see what those inference rules actually look like.
177:04 - So for example, let's imagine that I have access
177:07 - to two pieces of information.
177:08 - I know, for example, that if it is raining,
177:11 - then Harry is inside, for example.
177:14 - And let's say I also know it is raining.
177:16 - Then most of us could reasonably then look at this information
177:19 - and conclude that, all right, Harry must be inside.
177:23 - This inference rule is known as modus ponens,
177:27 - and it's phrased more formally in logic as this.
177:29 - If we know that alpha implies beta, in other words, if alpha, then beta,
177:35 - and we also know that alpha is true, then we
177:38 - should be able to conclude that beta is also true.
177:41 - We can apply this inference rule to take these two pieces of information
177:45 - and generate this new piece of information.
177:47 - Notice that this is a totally different approach from the model checking
177:51 - approach, where the approach was look at all of the possible worlds
177:54 - and see what's true in each of these worlds.
177:56 - Here, we're not dealing with any specific world.
177:59 - We're just dealing with the knowledge that we know
178:01 - and what conclusions we can arrive at based on that knowledge.
178:04 - That I know that A implies B, and I know A, and the conclusion is B.
178:10 - And this should seem like a relatively obvious rule.
178:12 - But of course, if alpha, then beta, and we know alpha,
178:16 - then we should be able to conclude that beta is also true.
178:19 - And that's going to be true for many, but maybe even
178:21 - all of the inference rules that we'll take a look at.
178:23 - You should be able to look at them and say,
178:25 - yeah, of course that's going to be true.
178:27 - But it's putting these all together, figuring out the right combination
178:30 - of inference rules that can be applied that ultimately
178:32 - is going to allow us to generate interesting knowledge inside of our AI.
178:38 - So that's modus ponensis application of implication,
178:41 - that if we know alpha and we know that alpha implies beta,
178:44 - then we can conclude beta.
178:47 - Let's take a look at another example.
178:48 - Fairly straightforward, something like Harry is friends with Ron and Hermione.
178:52 - Based on that information, we can reasonably
178:54 - conclude Harry is friends with Hermione.
178:56 - That must also be true.
178:58 - And this inference rule is known as and elimination.
179:01 - And what and elimination says is that if we have a situation where alpha
179:06 - and beta are both true, I have information alpha and beta,
179:11 - well then, just alpha is true.
179:14 - Or likewise, just beta is true.
179:16 - That if I know that both parts are true, then one of those parts
179:19 - must also be true.
179:21 - Again, something obvious from the point of view of human intuition,
179:24 - but a computer needs to be told this kind of information.
179:27 - To be able to apply the inference rule, we
179:28 - need to tell the computer that this is an inference rule that you can apply,
179:32 - so the computer has access to it and is able to use it
179:35 - in order to translate information from one form to another.
179:39 - In addition to that, let's take a look at another example of an inference
179:42 - rule, something like it is not true that Harry did not pass the test.
179:48 - Bit of a tricky sentence to parse.
179:50 - I'll read it again.
179:50 - It is not true, or it is false, that Harry did not pass the test.
179:54 - Well, if it is false that Harry did not pass the test,
179:58 - then the only reasonable conclusion is that Harry did pass the test.
180:02 - And so this, instead of being and elimination,
180:05 - is what we call double negation elimination.
180:07 - That if we have two negatives inside of our premise,
180:10 - then we can just remove them altogether.
180:12 - They cancel each other out.
180:13 - One turns true to false, and the other one turns false back into true.
180:17 - Phrased a little bit more formally, we say
180:19 - that if the premise is not alpha, then the conclusion
180:23 - we can draw is just alpha.
180:25 - We can say that alpha is true.
180:28 - We'll take a look at a couple more of these.
180:30 - If I have it is raining, then Harry is inside.
180:33 - How do I reframe this?
180:35 - Well, this one is a little bit trickier.
180:37 - But if I know if it is raining, then Harry is inside,
180:41 - then I conclude one of two things must be true.
180:43 - Either it is not raining, or Harry is inside.
180:48 - Now, this one's trickier.
180:49 - So let's think about it a little bit.
180:50 - This first premise here, if it is raining, then Harry is inside,
180:54 - is saying that if I know that it is raining, then Harry must be inside.
180:59 - So what is the other possible case?
181:01 - Well, if Harry is not inside, then I know that it must not be raining.
181:06 - So one of those two situations must be true.
181:09 - Either it's not raining, or it is raining, in which case Harry is inside.
181:14 - So the conclusion I can draw is either it is not raining,
181:18 - or it is raining, so therefore, Harry is inside.
181:22 - And so this is a way to translate if-then statements into or statements.
181:28 - And this is known as implication elimination.
181:31 - And this is similar to what we actually did in the beginning
181:33 - when we were first looking at those very first sentences
181:35 - about Harry and Hagrid and Dumbledore.
181:37 - And phrased a little bit more formally, this
181:39 - says that if I have the implication, alpha implies beta,
181:43 - that I can draw the conclusion that either not alpha or beta,
181:49 - because there are only two possibilities.
181:50 - Either alpha is true or alpha is not true.
181:54 - So one of those possibilities is alpha is not true.
181:57 - But if alpha is true, well, then we can draw the conclusion
182:00 - that beta must be true.
182:01 - So either alpha is not true or alpha is true, in which case beta is also true.
182:07 - So this is one way to turn an implication into just a statement about or.
182:12 - In addition to eliminating implications,
182:14 - we can also eliminate biconditionals as well.
182:17 - So let's take an English example, something like,
182:19 - it is raining if and only if Harry is inside.
182:23 - And this if and only if really sounds like that biconditional,
182:26 - that double arrow sign that we saw in propositional logic not too long ago.
182:31 - And what does this actually mean if we were to translate this?
182:33 - Well, this means that if it is raining, then Harry is inside.
182:37 - And if Harry is inside, then it is raining,
182:40 - that this implication goes both ways.
182:43 - And this is what we would call biconditional elimination,
182:45 - that I can take a biconditional, a if and only if b,
182:50 - and translate that into something like this, a implies b, and b implies a.
182:56 - So many of these inference rules are taking logic that uses certain symbols
183:00 - and turning them into different symbols, taking an implication
183:03 - and turning it into an or, or taking a biconditional
183:06 - and turning it into implication.
183:08 - And another example of it would be something like this.
183:11 - It is not true that both Harry and Ron passed the test.
183:16 - Well, all right, how do we translate that?
183:17 - What does that mean?
183:18 - Well, if it is not true that both of them passed the test, well,
183:22 - then the reasonable conclusion we might draw
183:25 - is that at least one of them didn't pass the test.
183:28 - So the conclusion is either Harry did not pass the test
183:31 - or Ron did not pass the test, or both.
183:33 - This is not an exclusive or.
183:35 - But if it is true that it is not true that both Harry and Ron passed the test,
183:40 - well, then either Harry didn't pass the test or Ron didn't pass the test.
183:45 - And this type of law is one of De Morgan's laws.
183:48 - Quite famous in logic where the idea is that we can turn an and into an or.
183:52 - We can say we can take this and that both Harry and Ron passed the test
183:56 - and turn it into an or by moving the nots around.
183:59 - So if it is not true that Harry and Ron passed the test,
184:03 - well, then either Harry did not pass the test
184:05 - or Ron did not pass the test either.
184:08 - And the way we frame that more formally using logic is to say this.
184:12 - If it is not true that alpha and beta, well, then either not alpha or not beta.
184:20 - The way I like to think about this is that if you
184:22 - have a negation in front of an and expression,
184:25 - you move the negation inwards, so to speak,
184:27 - moving the negation into each of these individual sentences
184:31 - and then flip the and into an or.
184:34 - So the negation moves inwards and the and flips into an or.
184:37 - So I go from not a and b to not a or not b.
184:43 - And there's actually a reverse of De Morgan's law
184:45 - that goes in the other direction for something like this.
184:48 - If I say it is not true that Harry or Ron passed the test,
184:52 - meaning neither of them passed the test, well, then the conclusion I can draw
184:56 - is that Harry did not pass the test and Ron did not pass the test.
185:01 - So in this case, instead of turning an and into an or,
185:04 - we're turning an or into an and.
185:06 - But the idea is the same.
185:07 - And this, again, is another example of De Morgan's laws.
185:10 - And the way that works is that if I have not a or b this time,
185:15 - the same logic is going to apply.
185:17 - I'm going to move the negation inwards.
185:19 - And I'm going to flip this time, flip the or into an and.
185:22 - So if not a or b, meaning it is not true that a or b or alpha or beta,
185:28 - then I can say not alpha and not beta, moving the negation inwards
185:34 - in order to make that conclusion.
185:36 - So those are De Morgan's laws and a couple other inference rules
185:38 - that are worth just taking a look at.
185:40 - One is the distributive law that works this way.
185:43 - So if I have alpha and beta or gamma, well, then much in the same way
185:49 - that you can use in math, use distributive laws to distribute
185:52 - operands like addition and multiplication,
185:55 - I can do a similar thing here, where I can say if alpha and beta or gamma,
186:01 - then I can say something like alpha and beta or alpha and gamma,
186:06 - that I've been able to distribute this and sign throughout this expression.
186:11 - So this is an example of the distributive property
186:13 - or the distributive law as applied to logic in much the same way
186:16 - that you would distribute a multiplication over the addition
186:19 - of something, for example.
186:22 - This works the other way too.
186:23 - So if, for example, I have alpha or beta and gamma,
186:27 - I can distribute the or throughout the expression.
186:30 - I can say alpha or beta and alpha or gamma.
186:34 - So the distributive law works in that way too.
186:36 - And it's helpful if I want to take an or and move it into the expression.
186:40 - And we'll see an example soon of why it is that we might actually
186:43 - care to do something like that.
186:46 - All right, so now we've seen a lot of different inference rules.
186:49 - And the question now is, how can we use those inference rules to actually try
186:53 - and draw some conclusions, to actually try and prove something about entailment,
186:57 - proving that given some initial knowledge base,
186:59 - we would like to find some way to prove that a query is true?
187:04 - Well, one way to think about it is actually
187:06 - to think back to what we talked about last time
187:08 - when we talked about search problems.
187:10 - Recall again that search problems have some sort of initial state.
187:13 - They have actions that you can take from one state to another
187:16 - as defined by a transition model that tells you
187:18 - how to get from one state to another.
187:20 - We talked about testing to see if you were at a goal.
187:22 - And then some path cost function to see how many steps
187:26 - did you have to take or how costly was the solution that you found.
187:31 - Now that we have these inference rules that
187:33 - take some set of sentences in propositional logic
187:36 - and get us some new set of sentences in propositional logic,
187:40 - we can actually treat those sentences or those sets of sentences
187:44 - as states inside of a search problem.
187:47 - So if we want to prove that some query is true,
187:49 - prove that some logical theorem is true,
187:52 - we can treat theorem proving as a form of a search problem.
187:55 - I can say that we begin in some initial state, where
187:59 - that initial state is the knowledge base that I begin with,
188:02 - the set of all of the sentences that I know to be true.
188:05 - What actions are available to me?
188:07 - Well, the actions are any of the inference rules
188:09 - that I can apply at any given time.
188:12 - The transition model just tells me after I apply the inference rule,
188:16 - here is the new set of all of the knowledge
188:18 - that I have, which will be the old set of knowledge,
188:20 - plus some additional inference that I've been able to draw,
188:23 - much as in the same way we saw what we got when we applied those inference
188:26 - rules and got some sort of conclusion.
188:28 - That conclusion gets added to our knowledge base,
188:31 - and our transition model will encode that.
188:34 - What is the goal test?
188:35 - Well, our goal test is checking to see if we
188:38 - have proved the statement we're trying to prove,
188:40 - if the thing we're trying to prove is inside of our knowledge base.
188:44 - And the path cost function, the thing we're trying to minimize,
188:47 - is maybe the number of inference rules that we needed to use,
188:50 - the number of steps, so to speak, inside of our proof.
188:54 - And so here we've been able to apply the same types of ideas
188:57 - that we saw last time with search problems
188:59 - to something like trying to prove something about knowledge
189:02 - by taking our knowledge and framing it in terms
189:05 - that we can understand as a search problem with an initial state,
189:08 - with actions, with a transition model.
189:10 - So this shows a couple of things, one being how versatile search problems
189:14 - are, that they can be the same types of algorithms
189:16 - that we use to solve a maze or figure out
189:19 - how to get from point A to point B inside of driving directions,
189:22 - for example, can also be used as a theorem proving
189:25 - method of taking some sort of starting knowledge base
189:28 - and trying to prove something about that knowledge.
189:31 - So this, yet again, is a second way, in addition to model checking,
189:35 - to try and prove that certain statements are true.
189:38 - But it turns out there's yet another way that we can try and apply inference.
189:42 - And we'll talk about this now, which is not the only way, but certainly one
189:45 - of the most common, which is known as resolution.
189:48 - And resolution is based on another inference rule
189:51 - that we'll take a look at now, quite a powerful inference rule that
189:54 - will let us prove anything that can be proven about a knowledge base.
189:58 - And it's based on this basic idea.
190:01 - Let's say I know that either Ron is in the Great Hall
190:05 - or Hermione is in the library.
190:08 - And let's say I also know that Ron is not in the Great Hall.
190:12 - Based on those two pieces of information, what can I conclude?
190:16 - Well, I could pretty reasonably conclude that Hermione
190:18 - must be in the library.
190:20 - How do I know that?
190:21 - Well, it's because these two statements, these two
190:24 - what we'll call complementary literals, literals that complement each other,
190:28 - they're opposites of each other, seem to conflict with each other.
190:32 - This sentence tells us that either Ron is in the Great Hall
190:35 - or Hermione is in the library.
190:37 - So if we know that Ron is not in the Great Hall,
190:40 - that conflicts with this one, which means Hermione must be in the library.
190:45 - And this we can frame as a more general rule
190:48 - known as the unit resolution rule, a rule that says that if we have p or q
190:54 - and we also know not p, well then from that we can reasonably conclude q.
191:00 - That if p or q are true and we know that p is not true,
191:03 - the only possibility is for q to then be true.
191:07 - And this, it turns out, is quite a powerful inference rule
191:10 - in terms of what it can do, in part because we can quickly
191:13 - start to generalize this rule.
191:14 - This q right here doesn't need to just be a single propositional symbol.
191:19 - It could be multiple, all chained together in a single clause,
191:22 - as we'll call it.
191:23 - So if I had something like p or q1 or q2 or q3, so on and so forth, up until qn,
191:29 - so I had n different other variables, and I have not p,
191:34 - well then what happens when these two complement each other
191:37 - is that these two clauses resolve, so to speak,
191:40 - to produce a new clause that is just q1 or q2 all the way up to qn.
191:46 - And in an or, the order of the arguments in the or doesn't actually matter.
191:49 - The p doesn't need to be the first thing.
191:50 - It could have been in the middle.
191:52 - But the idea here is that if I have p in one clause and not
191:56 - p in the other clause, well then I know that one of these remaining things
191:59 - must be true.
192:00 - I've resolved them in order to produce a new clause.
192:04 - But it turns out we can generalize this idea even further, in fact,
192:08 - and display even more power that we can have with this resolution rule.
192:12 - So let's take another example.
192:14 - Let's say, for instance, that I know the same piece of information
192:17 - that either Ron is in the Great Hall or Hermione is in the library.
192:21 - And the second piece of information I know
192:23 - is that Ron is not in the Great Hall or Harry is sleeping.
192:29 - So it's not just a single piece of information.
192:31 - I have two different clauses.
192:33 - And we'll define clauses more precisely in just a moment.
192:37 - What do I know here?
192:38 - Well again, for any propositional symbol like Ron is in the Great Hall,
192:42 - there are only two possibilities.
192:44 - Either Ron is in the Great Hall, in which case, based on resolution,
192:48 - we know that Harry must be sleeping, or Ron is not in the Great Hall,
192:53 - in which case we know based on the same rule
192:56 - that Hermione must be in the library.
192:59 - Based on those two things in combination,
193:01 - I can say based on these two premises that I
193:03 - can conclude that either Hermione is in the library or Harry is sleeping.
193:10 - So again, because these two conflict with each other,
193:13 - I know that one of these two must be true.
193:15 - And you can take a closer look and try and reason through that logic.
193:18 - Make sure you convince yourself that you believe this conclusion.
193:22 - Stated more generally, we can name this resolution rule
193:25 - by saying that if we know p or q is true,
193:28 - and we also know that not p or r is true,
193:33 - we resolve these two clauses together to get a new clause, q or r,
193:37 - that either q or r must be true.
193:41 - And again, much as in the last case, q and r
193:43 - don't need to just be single propositional symbols.
193:46 - It could be multiple symbols.
193:48 - So if I had a rule that had p or q1 or q2 or q3, so on and so forth,
193:52 - up until qn, where n is just some number.
193:55 - And likewise, I had not p or r1 or r2, so on and so forth, up until rm,
194:02 - where m, again, is just some other number.
194:05 - I can resolve these two clauses together to get one of these must be true,
194:09 - q1 or q2 up until qn or r1 or r2 up until rm.
194:14 - And this is just a generalization of that same rule we saw before.
194:19 - Each of these things here are what we're going to call a clause,
194:23 - where a clause is formally defined as a disjunction of literals,
194:27 - where a disjunction means it's a bunch of things that are connected with or.
194:31 - Disjunction means things connected with or.
194:34 - Conjunction, meanwhile, is things connected with and.
194:37 - And a literal is either a propositional symbol
194:40 - or the opposite of a propositional symbol.
194:42 - So it's something like p or q or not p or not q.
194:46 - Those are all propositional symbols or not of the propositional symbols.
194:50 - And we call those literals.
194:52 - And so a clause is just something like this, p or q or r, for example.
194:57 - Meanwhile, what this gives us an ability to do
195:00 - is it gives us an ability to turn logic, any logical sentence,
195:04 - into something called conjunctive normal form.
195:07 - A conjunctive normal form sentence is a logical sentence
195:11 - that is a conjunction of clauses.
195:14 - Recall, again, conjunction means things are connected to one another using and.
195:18 - And so a conjunction of clauses means it is an and of individual clauses,
195:23 - each of which has ors in it.
195:25 - So something like this, a or b or c, and d or not e, and f or g.
195:32 - Everything in parentheses is one clause.
195:35 - All of the clauses are connected to each other using an and.
195:38 - And everything in the clause is separated using an or.
195:43 - And this is just a standard form that we can translate a logical sentence
195:46 - into that just makes it easy to work with and easy to manipulate.
195:50 - And it turns out that we can take any sentence in logic
195:53 - and turn it into conjunctive normal form just
195:56 - by applying some inference rules and transformations to it.
195:59 - So we'll take a look at how we can actually do that.
196:03 - So what is the process for taking a logical formula
196:06 - and converting it into conjunctive normal form, otherwise known as c and f?
196:10 - Well, the process looks a little something like this.
196:12 - We need to take all of the symbols that are not
196:14 - part of conjunctive normal form.
196:16 - The bi-conditionals and the implications and so forth,
196:18 - and turn them into something that is more closely like conjunctive normal
196:23 - form.
196:24 - So the first step will be to eliminate bi-conditionals,
196:26 - those if and only if double arrows.
196:29 - And we know how to eliminate bi-conditionals
196:31 - because we saw there was an inference rule to do just that.
196:34 - Any time I have an expression like alpha if and only if beta,
196:38 - I can turn that into alpha implies beta and beta implies alpha
196:43 - based on that inference rule we saw before.
196:46 - Likewise, in addition to eliminating bi-conditionals,
196:48 - I can eliminate implications as well, the if then arrows.
196:52 - And I can do that using the same inference rule we saw before too,
196:56 - taking alpha implies beta and turning that into not alpha or beta
197:01 - because that is logically equivalent to this first thing here.
197:06 - Then we can move knots inwards because we don't
197:08 - want knots on the outsides of our expressions.
197:10 - Conjunctive normal form requires that it's just claws and claws
197:14 - and claws and claws.
197:15 - Any knots need to be immediately next to propositional symbols.
197:19 - But we can move those knots around using De Morgan's laws
197:22 - by taking something like not A and B and turn it into not A or not B,
197:29 - for example, using De Morgan's laws to manipulate that.
197:31 - And after that, all we'll be left with are ands and ors.
197:34 - And those are easy to deal with.
197:35 - We can use the distributive law to distribute the ors
197:39 - so that the ors end up on the inside of the expression, so to speak,
197:42 - and the ands end up on the outside.
197:45 - So this is the general pattern for how we'll take a formula
197:47 - and convert it into conjunctive normal form.
197:50 - And let's now take a look at an example of how we would do this
197:53 - and explore then why it is that we would want to do something like this.
197:57 - Here's how we can do it.
197:58 - Let's take this formula, for example.
198:00 - P or Q implies R. And I'd like to convert this into conjunctive normal form,
198:06 - where it's all ands of clauses, and every clause is a disjunctive clause.
198:10 - It's ors together.
198:12 - So what's the first thing I need to do?
198:14 - Well, this is an implication.
198:15 - So let me go ahead and remove that implication.
198:18 - Using the implication inference rule, I can turn P or Q into P or Q implies R
198:25 - into not P or Q or R. So that's the first step.
198:29 - I've gotten rid of the implication.
198:32 - And next, I can get rid of the not on the outside of this expression, too.
198:36 - I can move the nots inwards so they're closer to the literals themselves
198:41 - by using De Morgan's laws.
198:43 - And De Morgan's law says that not P or Q is equivalent to not P and not Q.
198:50 - Again, here, just applying the inference rules
198:52 - that we've already seen in order to translate these statements.
198:57 - And now, I have two things that are separated by an or,
199:00 - where this thing on the inside is an and.
199:03 - What I'd really like to move the ors so the ors are on the inside,
199:06 - because conjunctive normal form means I need clause and clause
199:10 - and clause and clause.
199:11 - And so to do that, I can use the distributive law.
199:14 - If I have not P and not Q or R, I can distribute the or R to both of these
199:21 - to get not P or R and not Q or R using the distributive law.
199:26 - And this now here at the bottom is in conjunctive normal form.
199:30 - It is a conjunction and and of disjunctions of clauses
199:35 - that just are separated by ors.
199:38 - So this process can be used by any formula to take a logical sentence
199:42 - and turn it into this conjunctive normal form, where
199:44 - I have clause and clause and clause and clause and clause and so on.
199:49 - So why is this helpful?
199:50 - Why do we even care about taking all these sentences
199:52 - and converting them into this form?
199:54 - It's because once they're in this form where we have these clauses,
199:58 - these clauses are the inputs to the resolution inference rule
200:02 - that we saw a moment ago, that if I have two clauses where there's
200:05 - something that conflicts or something complementary
200:08 - between those two clauses, I can resolve them
200:10 - to get a new clause, to draw a new conclusion.
200:13 - And we call this process inference by resolution,
200:16 - using the resolution rule to draw some sort of inference.
200:19 - And it's based on the same idea, that if I have P or Q, this clause,
200:23 - and I have not P or R, that I can resolve these two clauses together
200:28 - to get Q or R as the resulting clause, a new piece of information
200:32 - that I didn't have before.
200:35 - Now, a couple of key points that are worth noting about this
200:37 - before we talk about the actual algorithm.
200:39 - One thing is that, let's imagine we have P or Q or S,
200:43 - and I also have not P or R or S. The resolution rule
200:48 - says that because this P conflicts with this not P,
200:51 - we would resolve to put everything else together to get Q or S or R or S.
200:57 - But it turns out that this double S is redundant, or S here and or S there.
201:01 - It doesn't change the meaning of the sentence.
201:03 - So in resolution, when we do this resolution process,
201:06 - we'll usually also do a process known as factoring,
201:08 - where we take any duplicate variables that show up
201:11 - and just eliminate them.
201:12 - So Q or S or R or S just becomes Q or R or S. The S only needs to appear once,
201:18 - no need to include it multiple times.
201:22 - Now, one final question worth considering
201:24 - is what happens if I try to resolve P and not P together?
201:28 - If I know that P is true and I know that not P is true,
201:32 - well, resolution says I can merge these clauses together
201:35 - and look at everything else.
201:37 - Well, in this case, there is nothing else,
201:39 - so I'm left with what we might call the empty clause.
201:42 - I'm left with nothing.
201:43 - And the empty clause is always false.
201:46 - The empty clause is equivalent to just being false.
201:49 - And that's pretty reasonable because it's impossible for both P and not P
201:55 - to both hold at the same time.
201:57 - P is either true or it's not true, which
201:59 - means that if P is true, then this must be false.
202:02 - And if this is true, then this must be false.
202:05 - There is no way for both of these to hold at the same time.
202:07 - So if ever I try and resolve these two, it's a contradiction,
202:11 - and I'll end up getting this empty clause where the empty clause I
202:14 - can call equivalent to false.
202:17 - And this idea that if I resolve these two contradictory terms,
202:21 - I get the empty clause, this is the basis for our inference
202:25 - by resolution algorithm.
202:26 - Here's how we're going to perform inference by resolution
202:29 - at a very high level.
202:31 - We want to prove that our knowledge base entails some query alpha,
202:35 - that based on the knowledge we have, we can prove conclusively
202:39 - that alpha is going to be true.
202:41 - How are we going to do that?
202:43 - Well, in order to do that, we're going to try
202:45 - to prove that if we know the knowledge and not alpha,
202:49 - that that would be a contradiction.
202:51 - And this is a common technique in computer science
202:53 - more generally, this idea of proving something by contradiction.
202:57 - If I want to prove that something is true,
203:00 - I can do so by first assuming that it is false
203:04 - and showing that it would be contradictory,
203:06 - showing that it leads to some contradiction.
203:08 - And if the thing I'm trying to prove, if when I assume it's false,
203:11 - leads to a contradiction, then it must be true.
203:14 - And that's the logical approach or the idea behind a proof by contradiction.
203:18 - And that's what we're going to do here.
203:20 - We want to prove that this query alpha is true.
203:23 - So we're going to assume that it's not true.
203:26 - We're going to assume not alpha.
203:28 - And we're going to try and prove that it's a contradiction.
203:30 - If we do get a contradiction, well, then we
203:32 - know that our knowledge entails the query alpha.
203:36 - If we don't get a contradiction, there is no entailment.
203:39 - This is this idea of a proof by contradiction
203:41 - of assuming the opposite of what you're trying to prove.
203:44 - And if you can demonstrate that that's a contradiction,
203:46 - then what you're proving must be true.
203:49 - But more formally, how do we actually do this?
203:51 - How do we check that knowledge base and not alpha
203:56 - is going to lead to a contradiction?
203:58 - Well, here is where resolution comes into play.
204:01 - To determine if our knowledge base entails some query alpha,
204:05 - we're going to convert knowledge base and not alpha
204:08 - to conjunctive normal form, that form where
204:10 - we have a whole bunch of clauses that are all anded together.
204:14 - And when we have these individual clauses,
204:16 - now we can keep checking to see if we can use resolution
204:21 - to produce a new clause.
204:23 - We can take any pair of clauses and check,
204:26 - is there some literal that is the opposite of each other
204:29 - or complementary to each other in both of them?
204:32 - For example, I have a p in one clause and a not p in another clause.
204:35 - Or an r in one clause and a not r in another clause.
204:39 - If ever I have that situation where once I
204:41 - convert to conjunctive normal form and I have a whole bunch of clauses,
204:44 - I see two clauses that I can resolve to produce a new clause, then I'll do so.
204:49 - This process occurs in a loop.
204:50 - I'm going to keep checking to see if I can use resolution
204:53 - to produce a new clause and keep using those new clauses
204:56 - to try to generate more new clauses after that.
205:00 - Now, it just so may happen that eventually we
205:03 - may produce the empty clause, the clause we were talking about before.
205:06 - If I resolve p and not p together, that produces the empty clause
205:11 - and the empty clause we know to be false.
205:14 - Because we know that there's no way for both p and not p
205:18 - to both simultaneously be true.
205:21 - So if ever we produce the empty clause, then we have a contradiction.
205:25 - And if we have a contradiction, that's exactly what we were trying
205:27 - to do in a fruit by contradiction.
205:29 - If we have a contradiction, then we know that our knowledge base
205:32 - must entail this query alpha.
205:34 - And we know that alpha must be true.
205:37 - And it turns out, and we won't go into the proof here,
205:39 - but you can show that otherwise, if you don't produce the empty clause,
205:43 - then there is no entailment.
205:45 - If we run into a situation where there are no more new clauses to add,
205:48 - we've done all the resolution that we can do,
205:50 - and yet we still haven't produced the empty clause,
205:53 - then there is no entailment in this case.
205:56 - And this now is the resolution algorithm.
205:58 - And it's very abstract looking, especially this idea of like,
206:01 - what does it even mean to have the empty clause?
206:03 - So let's take a look at an example, actually
206:05 - try and prove some entailment by using this inference by resolution process.
206:11 - So here's our question.
206:12 - We have this knowledge base.
206:14 - Here is the knowledge that we know, A or B, and not B or C, and not C.
206:21 - And we want to know if all of this entails A.
206:25 - So this is our knowledge base here, this whole log thing.
206:28 - And our query alpha is just this propositional symbol, A.
206:33 - So what do we do?
206:34 - Well, first, we want to prove by contradiction.
206:36 - So we want to first assume that A is false,
206:39 - and see if that leads to some sort of contradiction.
206:42 - So here is what we're going to start with, A or B, and not B or C, and not C.
206:46 - This is our knowledge base.
206:48 - And we're going to assume not A. We're going
206:51 - to assume that the thing we're trying to prove is, in fact, false.
206:56 - And so this is now in conjunctive normal form,
206:59 - and I have four different clauses.
207:01 - I have A or B. I have not B or C. I have not C, and I have not A.
207:08 - And now, I can begin to just pick two clauses that I can resolve,
207:12 - and apply the resolution rule to them.
207:15 - And so looking at these four clauses, I see, all right, these two clauses
207:20 - are ones I can resolve.
207:21 - I can resolve them because there are complementary literals
207:25 - that show up in them.
207:26 - There's a C here, and a not C here.
207:28 - So just looking at these two clauses, if I know that not B or C is true,
207:34 - and I know that C is not true, well, then I
207:36 - can resolve these two clauses to say, all right, not B, that must be true.
207:41 - I can generate this new clause as a new piece of information
207:45 - that I now know to be true.
207:47 - And all right, now I can repeat this process, do the process again.
207:50 - Can I use resolution again to get some new conclusion?
207:54 - Well, it turns out I can.
207:55 - I can use that new clause I just generated, along with this one here.
207:58 - There are complementary literals.
208:00 - This B is complementary to, or conflicts with, this not B over here.
208:06 - And so if I know that A or B is true, and I know that B is not true,
208:12 - well, then the only remaining possibility is that A must be true.
208:15 - So now we have A. That is a new clause that I've been able to generate.
208:19 - And now, I can do this one more time.
208:21 - I'm looking for two clauses that can be resolved,
208:23 - and you might programmatically do this by just looping
208:25 - over all possible pairs of clauses and checking
208:28 - for complementary literals in each.
208:30 - And here, I can say, all right, I found two clauses, not A and A,
208:34 - that conflict with each other.
208:36 - And when I resolve these two together, well,
208:38 - this is the same as when we were resolving P and not P from before.
208:42 - When I resolve these two clauses together, I get rid of the As,
208:45 - and I'm left with the empty clause.
208:48 - And the empty clause we know to be false, which means we have a contradiction,
208:51 - which means we can safely say that this whole knowledge base does entail A.
208:56 - That if this sentence is true, that we know that A for sure is also true.
209:02 - So this now, using inference by resolution,
209:04 - is an entirely different way to take some statement
209:07 - and try and prove that it is, in fact, true.
209:10 - Instead of enumerating all of the possible worlds
209:12 - that we might be in in order to try to figure out in which cases
209:15 - is the knowledge base true and in which cases are query true,
209:18 - instead we use this resolution algorithm to say,
209:22 - let's keep trying to figure out what conclusions we can draw
209:25 - and see if we reach a contradiction.
209:27 - And if we reach a contradiction, then that
209:28 - tells us something about whether our knowledge actually
209:31 - entails the query or not.
209:33 - And it turns out there are many different algorithms that
209:35 - can be used for inference.
209:37 - What we've just looked at here are just a couple of them.
209:39 - And in fact, all of this is just based on one particular type of logic.
209:44 - It's based on propositional logic, where we have these individual symbols
209:47 - and we connect them using and and or and not and implies and by conditionals.
209:52 - But propositional logic is not the only kind of logic that exists.
209:56 - And in fact, we see that there are limitations
209:58 - that exist in propositional logic, especially
210:01 - as we saw in examples like with the mastermind example
210:06 - or with the example with the logic puzzle where
210:08 - we had different Hogwarts house people that belong to different houses
210:12 - and we were trying to figure out who belonged to which houses.
210:15 - There were a lot of different propositional symbols that we needed
210:18 - in order to represent some fairly basic ideas.
210:21 - So now is the final topic that we'll take a look at just before we end class
210:24 - today is one final type of logic different from propositional logic
210:28 - known as first order logic, which is a little bit more powerful than
210:32 - propositional logic and is going to make it easier for us
210:34 - to express certain types of ideas.
210:37 - In propositional logic, if we think back to that puzzle
210:39 - with the people in the Hogwarts houses, we had a whole bunch of symbols.
210:43 - And every symbol could only be true or false.
210:46 - We had a symbol for Minerva Gryffindor, which was either true of Minerva
210:49 - within Gryffindor and false otherwise, and likewise
210:51 - for Minerva Hufflepuff and Minerva Ravenclaw and Minerva Slytherin
210:55 - and so forth.
210:56 - But this was starting to get quite redundant.
210:58 - We wanted some way to be able to express that there
211:01 - is a relationship between these propositional symbols,
211:03 - that Minerva shows up in all of them.
211:05 - And also, I would have liked to have not have had so many different symbols
211:09 - to represent what really was a fairly straightforward problem.
211:13 - So first order logic will give us a different way
211:15 - of trying to deal with this idea by giving us two different types of symbols.
211:19 - We're going to have constant symbols that are going to represent objects
211:23 - like people or houses.
211:24 - And then predicate symbols, which you can think of as relations or functions
211:29 - that take an input and evaluate them to true or false, for example,
211:33 - that tell us whether or not some property of some constant
211:37 - or some pair of constants or multiple constants actually holds.
211:41 - So we'll see an example of that in just a moment.
211:43 - For now, in this same problem, our constant symbols
211:46 - might be objects, things like people or houses.
211:49 - So Minerva, Pomona, Horace, Gilderoy, those are all constant symbols,
211:53 - as are my four houses, Gryffindor, Hufflepuff, Ravenclaw, and Slytherin.
211:58 - Predicates, meanwhile, these predicate symbols
212:00 - are going to be properties that might hold true or false
212:03 - of these individual constants.
212:06 - So person might hold true of Minerva, but it
212:09 - would be false for Gryffindor because Gryffindor is not a person.
212:12 - And house is going to hold true for Ravenclaw,
212:15 - but it's not going to hold true for Horace, for example,
212:17 - because Horace is a person.
212:19 - And belongs to, meanwhile, is going to be some relation that
212:23 - is going to relate people to their houses.
212:26 - And it's going to only tell me when someone belongs to a house or does not.
212:30 - So let's take a look at some examples of what a sentence in first order logic
212:35 - might actually look like.
212:36 - A sentence might look like something like this.
212:38 - Person Minerva, with Minerva in parentheses, and person being a predicate
212:42 - symbol, Minerva being a constant symbol.
212:45 - This sentence in first order logic effectively
212:48 - means Minerva is a person, or the person property applies to the Minerva object.
212:54 - So if I want to say something like Minerva is a person,
212:56 - here is how I express that idea using first order logic.
213:00 - Meanwhile, I can say something like, house Gryffindor,
213:03 - to likewise express the idea that Gryffindor is a house.
213:07 - I can do that this way.
213:08 - And all of the same logical connectives that we
213:10 - saw in propositional logic, those are going to work here too.
213:13 - And or implication by conditional not.
213:16 - In fact, I can use not to say something like, not house Minerva.
213:20 - And this sentence in first order logic means something like,
213:24 - Minerva is not a house.
213:26 - It is not true that the house property applies to Minerva.
213:31 - Meanwhile, in addition to some of these predicate symbols
213:34 - that just take a single argument, some of our predicate symbols
213:36 - are going to express binary relations, relations
213:39 - between two of its arguments.
213:42 - So I could say something like, belongs to, and then two inputs, Minerva
213:46 - and Gryffindor, to express the idea that Minerva belongs to Gryffindor.
213:51 - And so now here's the key difference, or one of the key differences,
213:54 - between this and propositional logic.
213:56 - In propositional logic, I needed one symbol for Minerva Gryffindor,
214:00 - and one symbol for Minerva Hufflepuff, and one
214:02 - symbol for all the other people's Gryffindor and Hufflepuff variables.
214:06 - In this case, I just need one symbol for each of my people,
214:10 - and one symbol for each of my houses.
214:13 - And then I can express as a predicate something like, belongs to,
214:16 - and say, belongs to Minerva Gryffindor, to express the idea that Minerva
214:21 - belongs to Gryffindor House.
214:23 - So already we can see that first order logic is quite expressive in being
214:27 - able to express these sorts of sentences using the existing constant symbols
214:32 - and predicates that already exist, while minimizing the number of new symbols
214:36 - that I need to create.
214:37 - I can just use eight symbols for people for houses,
214:40 - instead of 16 symbols for every possible combination of each.
214:46 - But first order logic gives us a couple of additional features
214:49 - that we can use to express even more complex ideas.
214:52 - And these more additional features are generally known as quantifiers.
214:56 - And there are two main quantifiers in first order logic,
214:58 - the first of which is universal quantification.
215:01 - Universal quantification lets me express an idea
215:04 - like something is going to be true for all values of a variable.
215:09 - Like for all values of x, some statement is going to hold true.
215:13 - So what might a sentence in universal quantification look like?
215:16 - Well, we're going to use this upside down a to mean for all.
215:21 - So upside down ax means for all values of x, where x is any object,
215:26 - this is going to hold true.
215:28 - Belongs to x Gryffindor implies not belongs to x Hufflepuff.
215:36 - So let's try and parse this out.
215:38 - This means that for all values of x, if this holds true,
215:42 - if x belongs to Gryffindor, then this does not hold true.
215:46 - x does not belong to Hufflepuff.
215:50 - So translated into English, this sentence
215:52 - is saying something like for all objects x, if x belongs to Gryffindor,
215:57 - then x does not belong to Hufflepuff, for example.
216:00 - Or a phrase even more simply, anyone in Gryffindor
216:03 - is not in Hufflepuff, simplified way of saying the same thing.
216:07 - So this universal quantification lets us express
216:10 - an idea like something is going to hold true for all values
216:14 - of a particular variable.
216:16 - In addition to universal quantification though,
216:18 - we also have existential quantification.
216:21 - Whereas universal quantification said that something
216:24 - is going to be true for all values of a variable,
216:27 - existential quantification says that some expression is going
216:30 - to be true for some value of a variable, at least one value of the variable.
216:36 - So let's take a look at a sample sentence using existential quantification.
216:40 - One such sentence looks like this.
216:42 - There exists an x.
216:43 - This backwards e stands for exists.
216:46 - And here we're saying there exists an x such that house x and belongs
216:51 - to Minerva x.
216:53 - In other words, there exists some object x where x is a house
216:57 - and Minerva belongs to x.
217:00 - Or phrased a little more succinctly in English,
217:02 - I'm here just saying Minerva belongs to a house.
217:05 - There's some object that is a house and Minerva belongs to a house.
217:10 - And combining this universal and existential quantification,
217:13 - we can create far more sophisticated logical statements
217:16 - than we were able to just using propositional logic.
217:19 - I could combine these to say something like this.
217:21 - For all x, person x implies there exists
217:26 - a y such that house y and belongs to xy.
217:30 - All right.
217:31 - So a lot of stuff going on there, a lot of symbols.
217:33 - Let's try and parse it out and just understand what it's saying.
217:36 - Here we're saying that for all values of x, if x is a person,
217:41 - then this is true.
217:43 - So in other words, I'm saying for all people,
217:45 - and we call that person x, this statement is going to be true.
217:48 - What statement is true of all people?
217:50 - Well, there exists a y that is a house, so there exists some house,
217:55 - and x belongs to y.
217:58 - In other words, I'm saying that for all people out there,
218:01 - there exists some house such that x, the person, belongs to y, the house.
218:07 - This is phrased more succinctly.
218:08 - I'm saying that every person belongs to a house, that for all x,
218:12 - if x is a person, then there exists a house that x belongs to.
218:17 - And so we can now express a lot more powerful ideas using this idea now
218:20 - of first order logic.
218:21 - And it turns out there are many other kinds of logic out there.
218:24 - There's second order logic and other higher order logic,
218:27 - each of which allows us to express more and more complex ideas.
218:30 - But all of it, in this case, is really in pursuit
218:33 - of the same goal, which is the representation of knowledge.
218:36 - We want our AI agents to be able to know information,
218:39 - to represent that information, whether that's
218:41 - using propositional logic or first order logic or some other logic,
218:45 - and then be able to reason based on that, to be able to draw conclusions,
218:49 - make inferences, figure out whether there's
218:50 - some sort of entailment relationship, as by using some sort of inference
218:54 - algorithm, something like inference by resolution or model checking
218:58 - or any number of these other algorithms that we can use in order
219:01 - to take information that we know and translate it to additional conclusions.
219:06 - So all of this has helped us to create AI that
219:08 - is able to represent information about what it knows and what it doesn't know.
219:13 - Next time, though, we'll take a look at how we can make our AI even more
219:16 - powerful by not just encoding information that we know for sure to be true
219:20 - and not to be true, but also to take a look at uncertainty,
219:23 - to look at what happens if AI thinks that something might be probable
219:27 - or maybe not very probable or somewhere in between those two extremes,
219:31 - all in the pursuit of trying to build our intelligent systems
219:34 - to be even more intelligent.
219:36 - We'll see you next time.
219:39 - Thank you.
219:57 - All right, welcome back, everyone, to an introduction
219:59 - to artificial intelligence with Python.
220:02 - And last time, we took a look at how it is that AI inside of our computers
220:05 - can represent knowledge.
220:07 - We represented that knowledge in the form of logical sentences
220:10 - in a variety of different logical languages.
220:12 - And the idea was we wanted our AI to be able to represent knowledge
220:15 - or information and somehow use those pieces of information
220:19 - to be able to derive new pieces of information by inference,
220:22 - to be able to take some information and deduce
220:24 - some additional conclusions based on the information
220:27 - that it already knew for sure.
220:29 - But in reality, when we think about computers and we think about AI,
220:32 - very rarely are our machines going to be able to know things for sure.
220:35 - Oftentimes, there's going to be some amount of uncertainty
220:38 - in the information that our AIs or our computers are dealing with,
220:41 - where it might believe something with some probability,
220:44 - as we'll soon discuss what probability is all about and what it means,
220:46 - but not entirely for certain.
220:48 - And we want to use the information that it has some knowledge about,
220:51 - even if it doesn't have perfect knowledge,
220:53 - to still be able to make inferences, still be able to draw conclusions.
220:57 - So you might imagine, for example, in the context of a robot that
221:00 - has some sensors and is exploring some environment,
221:02 - it might not know exactly where it is or exactly what's around it,
221:06 - but it does have access to some data that can allow it
221:08 - to draw inferences with some probability.
221:10 - There's some likelihood that one thing is true or another.
221:13 - Or you can imagine in context where there is a little bit more
221:15 - randomness and uncertainty, something like predicting the weather,
221:18 - where you might not be able to know for sure what tomorrow's weather is
221:21 - with 100% certainty, but you can probably infer with some probability
221:26 - what tomorrow's weather is going to be based on maybe today's weather
221:29 - and yesterday's weather and other data that you might have access
221:32 - to as well.
221:33 - And so oftentimes, we can distill this in terms of just possible events
221:36 - that might happen and what the likelihood of those events are.
221:39 - This comes a lot in games, for example, where there is an element of chance
221:43 - inside of those games.
221:44 - So you imagine rolling a dice.
221:45 - You're not sure exactly what the die roll is going to be,
221:48 - but you know it's going to be one of these possibilities from 1 to 6,
221:52 - for example.
221:53 - And so here now, we introduce the idea of probability theory.
221:56 - And what we'll take a look at today is beginning
221:58 - by looking at the mathematical foundations of probability theory,
222:01 - getting an understanding for some of the key concepts within probability,
222:05 - and then diving into how we can use probability and the ideas
222:08 - that we look at mathematically to represent some ideas in terms of models
222:12 - that we can put into our computers in order to program an AI that
222:15 - is able to use information about probability to draw inferences,
222:19 - to make some judgments about the world with some probability
222:22 - or likelihood of being true.
222:25 - So probability ultimately boils down to this idea
222:27 - that there are possible worlds that we're here representing
222:30 - using this little Greek letter omega.
222:32 - And the idea of a possible world is that when I roll a die,
222:36 - there are six possible worlds that could result from it.
222:38 - I could roll a 1, or a 2, or a 3, or a 4, or a 5, or a 6.
222:42 - And each of those are a possible world.
222:45 - And each of those possible worlds has some probability of being true,
222:49 - the probability that I do roll a 1, or a 2, or a 3, or something else.
222:53 - And we represent that probability like this, using the capital letter P.
222:57 - And then in parentheses, what it is that we want the probability of.
223:00 - So this right here would be the probability of some possible world
223:04 - as represented by the little letter omega.
223:07 - Now, there are a couple of basic axioms of probability
223:09 - that become relevant as we consider how we deal with probability
223:13 - and how we think about it.
223:14 - First and foremost, every probability value
223:16 - must range between 0 and 1 inclusive.
223:20 - So the smallest value any probability can have is the number 0,
223:23 - which is an impossible event.
223:25 - Something like I roll a die, and the die is a 7 is the roll that I get.
223:28 - If the die only has numbers 1 through 6, the event that I roll a 7
223:33 - is impossible, so it would have probability 0.
223:36 - And on the other end of the spectrum, probability
223:38 - can range all the way up to the positive number 1,
223:40 - meaning an event is certain to happen, that I roll a die
223:43 - and the number is less than 10, for example.
223:46 - That is an event that is guaranteed to happen if the only sides on my die
223:49 - are 1 through 6, for instance.
223:51 - And then they can range through any real number in between these two values.
223:55 - Where, generally speaking, a higher value for the probability
223:58 - means an event is more likely to take place,
224:00 - and a lower value for the probability means the event is less
224:03 - likely to take place.
224:05 - And the other key rule for probability looks a little bit like this.
224:08 - This sigma notation, if you haven't seen it before,
224:11 - refers to summation, the idea that we're going
224:13 - to be adding up a whole sequence of values.
224:16 - And this sigma notation is going to come up a couple of times today,
224:19 - because as we deal with probability, oftentimes we're
224:21 - adding up a whole bunch of individual values or individual probabilities
224:25 - to get some other value.
224:26 - So we'll see this come up a couple of times.
224:28 - But what this notation means is that if I sum up
224:31 - all of the possible worlds omega that are in big omega, which
224:35 - represents the set of all the possible worlds,
224:38 - meaning I take for all of the worlds in the set of possible worlds
224:42 - and add up all of their probabilities, what I ultimately get is the number 1.
224:47 - So if I take all the possible worlds, add up
224:48 - what each of their probabilities is, I should get the number 1 at the end,
224:52 - meaning all probabilities just need to sum to 1.
224:55 - So for example, if I take dice, for example,
224:57 - and if you imagine I have a fair die with numbers 1 through 6
225:00 - and I roll the die, each one of these rolls
225:02 - has an equal probability of taking place.
225:04 - And the probability is 1 over 6, for example.
225:07 - So each of these probabilities is between 0 and 1, 0 meaning impossible
225:12 - and 1 meaning for certain.
225:13 - And if you add up all of these probabilities
225:15 - for all of the possible worlds, you get the number 1.
225:18 - And we can represent any one of those probabilities like this.
225:22 - The probability that we roll the number 2, for example,
225:25 - is just 1 over 6.
225:27 - Every six times we roll the die, we'd expect that one time, for instance,
225:31 - the die might come up as a 2.
225:33 - Its probability is not certain, but it's a little more than nothing,
225:36 - for instance.
225:38 - And so this is all fairly straightforward for just a single die.
225:40 - But things get more interesting as our models of the world
225:43 - get a little bit more complex.
225:44 - Let's imagine now that we're not just dealing with a single die,
225:47 - but we have two dice, for example.
225:49 - I have a red die here and a blue die there,
225:51 - and I care not just about what the individual roll is,
225:54 - but I care about the sum of the two rolls.
225:56 - In this case, the sum of the two rolls is the number 3.
226:00 - How do I begin to now reason about what does the probability look like
226:04 - if instead of having one die, I now have two dice?
226:07 - Well, what we might imagine is that we could first consider
226:09 - what are all of the possible worlds.
226:12 - And in this case, all of the possible worlds
226:14 - are just every combination of the red and blue die that I could come up with.
226:18 - For the red die, it could be a 1 or a 2 or a 3 or a 4 or a 5 or a 6.
226:22 - And for each of those possibilities, the blue die, likewise,
226:25 - could also be either 1 or 2 or 3 or 4 or 5 or 6.
226:30 - And it just so happens that in this particular case,
226:33 - each of these possible combinations is equally likely.
226:36 - Equally likely are all of these various different possible worlds.
226:39 - That's not always going to be the case.
226:41 - If you imagine more complex models that we could try to build and things
226:44 - that we could try to represent in the real world,
226:46 - it's probably not going to be the case that every single possible world is
226:49 - always equally likely.
226:50 - But in the case of fair dice, where in any given die roll,
226:53 - any one number has just as good a chance of coming up as any other number,
226:57 - we can consider all of these possible worlds to be equally likely.
227:01 - But even though all of the possible worlds are equally likely,
227:04 - that doesn't necessarily mean that their sums are equally likely.
227:07 - So if we consider what the sum is of all of these two, so 1 plus 1,
227:10 - that's a 2.
227:11 - 2 plus 1 is a 3.
227:12 - And consider for each of these possible pairs of numbers
227:15 - what their sum ultimately is, we can notice that there are some patterns
227:18 - here, where it's not entirely the case that every number comes up
227:22 - equally likely.
227:23 - If you consider 7, for example, what's the probability that when I roll two
227:26 - dice, their sum is 7?
227:28 - There are several ways this can happen.
227:30 - There are six possible worlds where the sum is 7.
227:33 - It could be a 1 and a 6, or a 2 and a 5, or a 3 and a 4, a 4 and a 3,
227:37 - and so forth.
227:39 - But if you instead consider what's the probability that I roll two dice,
227:42 - and the sum of those two die rolls is 12, for example,
227:45 - we're looking at this diagram, there's only one possible world in which that
227:49 - can happen.
227:50 - And that's the possible world where both the red die and the blue die
227:54 - both come up as sixes to give us a sum total of 12.
227:58 - So based on just taking a look at this diagram,
228:00 - we see that some of these probabilities are likely different.
228:03 - The probability that the sum is a 7 must be greater than the probability
228:07 - that the sum is a 12.
228:08 - And we can represent that even more formally by saying, OK, the probability
228:11 - that we sum to 12 is 1 out of 36.
228:15 - Out of the 36 equally likely possible worlds,
228:18 - 6 squared because we have six options for the red die and six
228:22 - options for the blue die, out of those 36 options,
228:24 - only one of them sums to 12.
228:27 - Whereas on the other hand, the probability
228:29 - that if we take two dice rolls and they sum up to the number 7, well,
228:33 - out of those 36 possible worlds, there were six worlds where the sum was 7.
228:37 - And so we get 6 over 36, which we can simplify as a fraction to just 1
228:42 - over 6.
228:43 - So here now, we're able to represent these different ideas
228:46 - of probability, representing some events that might be more likely
228:49 - and then other events that are less likely as well.
228:52 - And these sorts of judgments, where we're figuring out just in the abstract
228:55 - what is the probability that this thing takes place,
228:58 - are generally known as unconditional probabilities.
229:01 - Some degree of belief we have in some proposition,
229:04 - some fact about the world, in the absence of any other evidence.
229:07 - Without knowing any additional information, if I roll a die,
229:10 - what's the chance it comes up as a 2?
229:12 - Or if I roll two dice, what's the chance that the sum of those two die
229:15 - rolls is a 7?
229:17 - But usually when we're thinking about probability, especially when
229:20 - we're thinking about training in AI to intelligently
229:22 - be able to know something about the world
229:24 - and make predictions based on that information,
229:26 - it's not unconditional probability that our AI is dealing with,
229:30 - but rather conditional probability, probability
229:32 - where rather than having no original knowledge,
229:35 - we have some initial knowledge about the world
229:37 - and how the world actually works.
229:39 - So conditional probability is the degree of belief in a proposition
229:43 - given some evidence that has already been revealed to us.
229:47 - So what does this look like?
229:49 - Well, it looks like this in terms of notation.
229:51 - We're going to represent conditional probability as probability of A
229:56 - and then this vertical bar and then B. And the way to read this
229:59 - is the thing on the left-hand side of the vertical bar
230:02 - is what we want the probability of.
230:05 - Here now, I want the probability that A is true,
230:08 - that it is the real world, that it is the event that actually does take place.
230:12 - And then on the right side of the vertical bar is our evidence,
230:14 - the information that we already know for certain about the world.
230:18 - For example, that B is true.
230:21 - So the way to read this entire expression
230:23 - is what is the probability of A given B, the probability that A is true,
230:28 - given that we already know that B is true.
230:31 - And this type of judgment, conditional probability,
230:34 - the probability of one thing given some other fact,
230:37 - comes up quite a lot when we think about the types of calculations
230:40 - we might want our AI to be able to do.
230:42 - For example, we might care about the probability of rain today
230:45 - given that we know that it rained yesterday.
230:47 - We could think about the probability of rain today just in the abstract.
230:51 - What is the chance that today it rains?
230:52 - But usually, we have some additional evidence.
230:54 - I know for certain that it rained yesterday.
230:57 - And so I would like to calculate the probability that it rains today
231:00 - given that I know that it rained yesterday.
231:03 - Or you might imagine that I want to know the probability that my optimal
231:06 - route to my destination changes given the current traffic condition.
231:09 - So whether or not traffic conditions change,
231:12 - that might change the probability that this route is actually the optimal route.
231:16 - Or you might imagine in a medical context,
231:18 - I want to know the probability that a patient has a particular disease given
231:22 - some results of some tests that have been performed on that patient.
231:25 - And I have some evidence, the results of that test,
231:28 - and I would like to know the probability that a patient has
231:31 - a particular disease.
231:33 - So this notion of conditional probability comes up everywhere.
231:35 - So we begin to think about what we would like to reason about,
231:38 - but being able to reason a little more intelligently
231:40 - by taking into account evidence that we already have.
231:43 - We're more able to get an accurate result for what is the likelihood
231:46 - that someone has this disease if we know this evidence, the results of the test,
231:50 - as opposed to if we were just calculating the unconditional probability of saying,
231:55 - what is the probability they have the disease without any evidence
231:58 - to try and back up our result one way or the other.
232:03 - So now that we've got this idea of what conditional probability is,
232:06 - the next question we have to ask is, all right,
232:08 - how do we calculate conditional probability?
232:10 - How do we figure out mathematically, if I have an expression like this,
232:13 - how do I get a number from that?
232:15 - What does conditional probability actually mean?
232:17 - Well, the formula for conditional probability
232:19 - looks a little something like this.
232:21 - The probability of a given b, the probability that a is true,
232:25 - given that we know that b is true, is equal to this fraction,
232:29 - the probability that a and b are true, divided by just the probability
232:34 - that b is true.
232:35 - And the way to intuitively try to think about this
232:37 - is that if I want to know the probability that a is true, given
232:40 - that b is true, well, I want to consider all the ways they could both be true out
232:46 - of the only worlds that I care about are the worlds where b is already true.
232:50 - I can sort of ignore all the cases where b isn't true,
232:52 - because those aren't relevant to my ultimate computation.
232:55 - They're not relevant to what it is that I want to get information about.
232:59 - So let's take a look at an example.
233:01 - Let's go back to that example of rolling two dice and the idea
233:04 - that those two dice might sum up to the number 12.
233:06 - We discussed earlier that the unconditional probability
233:09 - that if I roll two dice and they sum to 12 is 1 out of 36,
233:13 - because out of the 36 possible worlds that I might care about,
233:16 - in only one of them is the sum of those two dice 12.
233:19 - It's only when red is 6 and blue is also 6.
233:22 - But let's say now that I have some additional information.
233:25 - I now want to know what is the probability that the two dice sum to 12,
233:29 - given that I know that the red die was a 6.
233:33 - So I already have some evidence.
233:35 - I already know the red die is a 6.
233:36 - I don't know what the blue die is.
233:38 - That information isn't given to me in this expression.
233:41 - But given the fact that I know that the red die rolled a 6,
233:44 - what is the probability that we sum to 12?
233:47 - And so we can begin to do the math using that expression from before.
233:50 - Here, again, are all of the possibilities,
233:52 - all of the possible combinations of red die being 1 through 6
233:55 - and blue die being 1 through 6.
233:58 - And I might consider first, all right, what
234:00 - is the probability of my evidence, my B variable, where I want to know,
234:04 - what is the probability that the red die is a 6?
234:07 - Well, the probability that the red die is a 6 is just 1 out of 6.
234:11 - So these 1 out of 6 options are really the only worlds
234:14 - that I care about here now.
234:16 - All the rest of them are irrelevant to my calculation,
234:19 - because I already have this evidence that the red die was a 6,
234:22 - so I don't need to care about all of the other possibilities that could result.
234:26 - So now, in addition to the fact that the red die rolled as a 6
234:29 - and the probability of that, the other piece of information
234:32 - I need to know in order to calculate this conditional probability
234:35 - is the probability that both of my variables, A and B, are true.
234:39 - The probability that both the red die is a 6, and they all sum to 12.
234:44 - So what is the probability that both of these things happen?
234:47 - Well, it only happens in one possible case in 1 out of these 36 cases,
234:51 - and it's the case where both the red and the blue die are equal to 6.
234:55 - This is a piece of information that we already knew.
234:57 - And so this probability is equal to 1 over 36.
235:01 - And so to get the conditional probability that the sum is 12,
235:05 - given that I know that the red dice is equal to 6,
235:08 - well, I just divide these two values together,
235:10 - and 1 over 36 divided by 1 over 6 gives us this probability of 1 over 6.
235:16 - Given that I know that the red die rolled a value of 6,
235:19 - the probability that the sum of the two dice is 12 is also 1 over 6.
235:25 - And that probably makes intuitive sense to you, too,
235:27 - because if the red die is a 6, the only way for me to get to a 12
235:30 - is if the blue die also rolls a 6, and we
235:33 - know that the probability of the blue die rolling a 6 is 1 over 6.
235:37 - So in this case, the conditional probability seems fairly straightforward.
235:40 - But this idea of calculating a conditional probability
235:44 - by looking at the probability that both of these events take place
235:47 - is an idea that's going to come up again and again.
235:49 - This is the definition now of conditional probability.
235:52 - And we're going to use that definition as we
235:54 - think about probability more generally to be
235:56 - able to draw conclusions about the world.
235:59 - This, again, is that formula.
236:00 - The probability of A given B is equal to the probability
236:04 - that A and B take place divided by the probability of B.
236:08 - And you'll see this formula sometimes written in a couple of different ways.
236:11 - You could imagine algebraically multiplying both sides of this equation
236:15 - by probability of B to get rid of the fraction,
236:18 - and you'll get an expression like this.
236:20 - The probability of A and B, which is this expression over here,
236:24 - is just the probability of B times the probability of A given B.
236:28 - Or you could represent this equivalently since A and B in this expression
236:31 - are interchangeable.
236:32 - A and B is the same thing as B and A. You could imagine also
236:36 - representing the probability of A and B as the probability of A
236:41 - times the probability of B given A, just switching all of the A's and B's.
236:45 - These three are all equivalent ways of trying
236:47 - to represent what joint probability means.
236:49 - And so you'll sometimes see all of these equations,
236:52 - and they might be useful to you as you begin to reason about probability
236:55 - and to think about what values might be taking place in the real world.
237:00 - Now, sometimes when we deal with probability,
237:02 - we don't just care about a Boolean event like did this happen
237:05 - or did this not happen.
237:06 - Sometimes we might want the ability to represent variable values
237:10 - in a probability space where some variable might take
237:13 - on multiple different possible values.
237:16 - And in probability, we call a variable in probability theory
237:19 - a random variable.
237:21 - A random variable in probability is just some variable in probability theory
237:25 - that has some domain of values that it can take on.
237:28 - So what do I mean by this?
237:29 - Well, what I mean is I might have a random variable that is just
237:32 - called roll, for example, that has six possible values.
237:36 - Roll is my variable, and the possible values, the domain of values
237:39 - that it can take on are 1, 2, 3, 4, 5, and 6.
237:43 - And I might like to know the probability of each.
237:45 - In this case, they happen to all be the same.
237:47 - But in other random variables, that might not be the case.
237:50 - For example, I might have a random variable
237:52 - to represent the weather, for example, where the domain of values
237:55 - it could take on are things like sun or cloudy or rainy or windy or snowy.
237:59 - And each of those might have a different probability.
238:02 - And I care about knowing what is the probability that the weather equals
238:05 - sun or that the weather equals clouds, for instance.
238:08 - And I might like to do some mathematical calculations
238:11 - based on that information.
238:12 - Other random variables might be something like traffic.
238:15 - What are the odds that there is no traffic or light traffic or heavy traffic?
238:18 - Traffic, in this case, is my random variable.
238:21 - And the values that that random variable can take on are here.
238:24 - It's either none or light or heavy.
238:26 - And I, the person doing these calculations,
238:28 - I, the person encoding these random variables into my computer,
238:32 - need to make the decision as to what these possible values actually are.
238:36 - You might imagine, for example, for a flight.
238:38 - If I care about whether or not I make it or do a flight on time,
238:41 - my flight has a couple of possible values that it could take on.
238:43 - My flight could be on time.
238:45 - My flight could be delayed.
238:46 - My flight could be canceled.
238:47 - So flight, in this case, is my random variable.
238:51 - And these are the values that it can take on.
238:54 - And often, I want to know something about the probability
238:57 - that my random variable takes on each of those possible values.
239:00 - And this is what we then call a probability distribution.
239:04 - A probability distribution takes a random variable
239:07 - and gives me the probability for each of the possible values in its domain.
239:12 - So in the case of this flight, for example, my probability distribution
239:15 - might look something like this.
239:16 - My probability distribution says the probability
239:19 - that the random variable flight is equal to the value on time is 0.6.
239:25 - Or otherwise, put into more English human-friendly terms,
239:28 - the likelihood that my flight is on time is 60%, for example.
239:32 - And in this case, the probability that my flight is delayed is 30%.
239:35 - The probability that my flight is canceled is 10% or 0.1.
239:39 - And if you sum up all of these possible values,
239:42 - the sum is going to be 1, right?
239:43 - If you take all of the possible worlds, here
239:46 - are my three possible worlds for the value of the random variable flight,
239:49 - add them all up together, the result needs
239:52 - to be the number 1 per that axiom of probability theory
239:55 - that we've discussed before.
239:57 - So this now is one way of representing this probability
240:00 - distribution for the random variable flight.
240:03 - Sometimes you'll see it represented a little bit more concisely
240:06 - that this is pretty verbose for really just trying
240:08 - to express three possible values.
240:10 - And so often, you'll instead see the same notation
240:13 - representing using a vector.
240:15 - And all a vector is is a sequence of values.
240:17 - As opposed to just a single value, I might have multiple values.
240:21 - And so I could extend instead, represent this idea this way.
240:25 - Bold p, so a larger p, generally meaning the probability distribution
240:29 - of this variable flight is equal to this vector represented in angle brackets.
240:35 - The probability distribution is 0.6, 0.3, and 0.1.
240:39 - And I would just have to know that this probability distribution is
240:42 - in order of on time or delayed and canceled
240:46 - to know how to interpret this vector.
240:48 - To mean the first value in the vector is the probability
240:51 - that my flight is on time.
240:52 - The second value in the vector is the probability that my flight is delayed.
240:56 - And the third value in the vector is the probability
240:58 - that my flight is canceled.
241:00 - And so this is just an alternate way of representing this idea,
241:03 - a little more verbosely.
241:05 - But oftentimes, you'll see us just talk about a probability distribution
241:08 - over a random variable.
241:10 - And whenever we talk about that, what we're really doing
241:12 - is trying to figure out the probabilities of each of the possible values
241:16 - that that random variable can take on.
241:17 - But this notation is just a little bit more succinct,
241:20 - even though it can sometimes be a little confusing,
241:22 - depending on the context in which you see it.
241:24 - So we'll start to look at examples where we use this sort of notation
241:27 - to describe probability and to describe events that might take place.
241:33 - A couple of other important ideas to know with regards to probability theory.
241:37 - One is this idea of independence.
241:39 - And independence refers to the idea that the knowledge of one event
241:43 - doesn't influence the probability of another event.
241:46 - So for example, in the context of my two dice rolls,
241:48 - where I had the red die and the blue die, the probability
241:51 - that I roll the red die and the blue die,
241:54 - those two events, red die and blue die, are independent.
241:57 - Knowing the result of the red die doesn't change
242:00 - the probabilities for the blue die.
242:01 - It doesn't give me any additional information
242:03 - about what the value of the blue die is ultimately going to be.
242:06 - But that's not always going to be the case.
242:08 - You might imagine that in the case of weather, something
242:11 - like clouds and rain, those are probably not independent.
242:15 - But if it is cloudy, that might increase the probability that later
242:18 - in the day it's going to rain.
242:20 - So some information informs some other event or some other random variable.
242:24 - So independence refers to the idea that one event doesn't influence the other.
242:29 - And if they're not independent, then there might be some relationship.
242:34 - So mathematically, formally, what does independence actually mean?
242:37 - Well, recall this formula from before, that the probability of A and B
242:42 - is the probability of A times the probability of B given A.
242:46 - And the more intuitive way to think about this
242:48 - is that to know how likely it is that A and B happen,
242:51 - well, let's first figure out the likelihood that A happens.
242:54 - And then given that we know that A happens,
242:56 - let's figure out the likelihood that B happens
242:58 - and multiply those two things together.
243:01 - But if A and B were independent, meaning knowing A
243:05 - doesn't change anything about the likelihood that B is true,
243:09 - well, then the probability of B given A, meaning the probability that B is true,
243:14 - given that I know A is true, well, that I know A is true
243:17 - shouldn't really make a difference if these two things are independent,
243:20 - that A shouldn't influence B at all.
243:22 - So the probability of B given A is really just the probability of B.
243:27 - If it is true that A and B are independent.
243:30 - And so this right here is one example of a definition
243:33 - for what it means for A and B to be independent.
243:36 - The probability of A and B is just the probability
243:39 - of A times the probability of B. Anytime you find two events A and B
243:44 - where this relationship holds, then you can say that A and B are independent.
243:49 - So an example of that might be the dice that we were taking a look at before.
243:53 - Here, if I wanted the probability of red being a 6 and blue being a 6,
243:58 - well, that's just the probability that red is a 6 multiplied
244:01 - by the probability that blue is a 6.
244:03 - It's both equal to 1 over 36.
244:05 - So I can say that these two events are independent.
244:10 - What wouldn't be independent, for example, would be an example.
244:13 - So this, for example, has a probability of 1 over 36,
244:16 - as we talked about before.
244:17 - But what wouldn't be independent would be a case like this,
244:20 - the probability that the red die rolls a 6 and the red die rolls a 4.
244:26 - If you just naively took, OK, red die 6, red die 4,
244:29 - well, if I'm only rolling the die once, you
244:31 - might imagine the naive approach is to say, well, each of these
244:34 - has a probability of 1 over 6.
244:35 - So multiply them together, and the probability is 1 over 36.
244:39 - But of course, if you're only rolling the red die once,
244:41 - there's no way you could get two different values for the red die.
244:45 - It couldn't both be a 6 and a 4.
244:48 - So the probability should be 0.
244:50 - But if you were to multiply probability of red 6 times
244:53 - probability of red 4, well, that would equal 1 over 36.
244:57 - But of course, that's not true.
244:58 - Because we know that there is no way, probability 0,
245:01 - that when we roll the red die once, we get both a 6 and a 4,
245:06 - because only one of those possibilities can actually be the result.
245:10 - And so we can say that the event that red roll is 6
245:14 - and the event that red roll is 4, those two events are not independent.
245:18 - If I know that the red roll is a 6, I know that the red roll cannot possibly
245:23 - be a 4, so these things are not independent.
245:25 - And instead, if I wanted to calculate the probability,
245:28 - I would need to use this conditional probability
245:31 - as the regular definition of the probability of two events taking place.
245:36 - And the probability of this now, well, the probability
245:38 - of the red roll being a 6, that's 1 over 6.
245:41 - But what's the probability that the roll is a 4 given that the roll is a 6?
245:45 - Well, this is just 0, because there's no way for the red roll to be a 4,
245:50 - given that we already know the red roll is a 6.
245:53 - And so the value, if we do add all that multiplication, is we get the number 0.
245:59 - So this idea of conditional probability is going to come up again and again,
246:02 - especially as we begin to reason about multiple different random variables
246:06 - that might be interacting with each other in some way.
246:08 - And this gets us to one of the most important rules
246:10 - in probability theory, which is known as Bayes rule.
246:14 - And it turns out that just using the information we've already
246:17 - learned about probability and just applying a little bit of algebra,
246:20 - we can actually derive Bayes rule for ourselves.
246:23 - But it's a very important rule when it comes to inference
246:26 - and thinking about probability in the context of what
246:28 - it is that a computer can do or what a mathematician could
246:31 - do by having access to information about probability.
246:34 - So let's go back to these equations to be able to derive Bayes rule ourselves.
246:39 - We know the probability of A and B, the likelihood that A and B take place,
246:43 - is the likelihood of B, and then the likelihood of A,
246:47 - given that we know that B is already true.
246:49 - And likewise, the probability of A given A and B
246:52 - is the probability of A times the probability of B,
246:56 - given that we know that A is already true.
246:58 - This is sort of a symmetric relationship where
247:00 - it doesn't matter the order of A and B and B and A mean the same thing.
247:04 - And so in these equations, we can just swap out A and B
247:07 - to be able to represent the exact same idea.
247:09 - So we know that these two equations are already true.
247:12 - We've seen that already.
247:13 - And now let's just do a little bit of algebraic manipulation of this stuff.
247:17 - Both of these expressions on the right-hand side
247:19 - are equal to the probability of A and B. So what I can do
247:24 - is take these two expressions on the right-hand side
247:26 - and just set them equal to each other.
247:28 - If they're both equal to the probability of A and B,
247:32 - then they both must be equal to each other.
247:34 - So probability of A times probability of B given A
247:38 - is equal to the probability of B times the probability of A given B.
247:44 - And now all we're going to do is do a little bit of division.
247:47 - I'm going to divide both sides by P of A. And now I get what is Bayes' rule.
247:53 - The probability of B given A is equal to the probability of B
247:59 - times the probability of A given B divided by the probability of A.
248:03 - And sometimes in Bayes' rule, you'll see the order
248:05 - of these two arguments switched.
248:06 - So instead of B times A given B, it'll be A given B times B.
248:10 - That ultimately doesn't matter because in multiplication,
248:12 - you can switch the order of the two things you're multiplying,
248:15 - and it doesn't change the result. But this here right now
248:18 - is the most common formulation of Bayes' rule.
248:21 - The probability of B given A is equal to the probability of A given
248:26 - B times the probability of B divided by the probability of A.
248:31 - And this rule, it turns out, is really important
248:33 - when it comes to trying to infer things about the world,
248:36 - because it means you can express one conditional probability,
248:39 - the conditional probability of B given A, using knowledge
248:44 - about the probability of A given B, using the reverse
248:47 - of that conditional probability.
248:49 - So let's first do a little bit of an example with this,
248:51 - just to see how we might use it, and then explore
248:54 - what this means a little bit more generally.
248:56 - So we're going to construct a situation where I have some information.
248:59 - There are two events that I care about, the idea
249:02 - that it's cloudy in the morning and the idea
249:05 - that it is rainy in the afternoon.
249:07 - Those are two different possible events that could take place,
249:10 - cloudy in the morning, or the AM, rainy in the PM.
249:13 - And what I care about is, given clouds in the morning,
249:17 - what is the probability of rain in the afternoon?
249:19 - A reasonable question I might ask, in the morning,
249:22 - I look outside, or an AI's camera looks outside
249:24 - and sees that there are clouds in the morning.
249:27 - And we want to conclude, we want to figure out what is the probability
249:30 - that in the afternoon, there is going to be rain.
249:34 - Of course, in the abstract, we don't have access
249:36 - to this kind of information, but we can use data
249:38 - to begin to try and figure this out.
249:40 - So let's imagine now that I have access to some pieces of information.
249:44 - I have access to the idea that 80% of rainy afternoons
249:48 - start out with a cloudy morning.
249:50 - And you might imagine that I could have gathered this data just
249:52 - by looking at data over a sequence of time,
249:54 - that I know that 80% of the time when it's raining in the afternoon,
249:58 - it was cloudy that morning.
250:01 - I also know that 40% of days have cloudy mornings.
250:04 - And I also know that 10% of days have rainy afternoons.
250:08 - And now using this information, I would like to figure out,
250:12 - given clouds in the morning, what is the probability
250:15 - that it rains in the afternoon?
250:16 - I want to know the probability of afternoon rain given morning clouds.
250:21 - And I can do that, in particular, using this fact, the probability of,
250:26 - so if I know that 80% of rainy afternoons start with cloudy mornings,
250:29 - then I know the probability of cloudy mornings given rainy afternoons.
250:34 - So using sort of the reverse conditional probability,
250:36 - I can figure that out.
250:38 - Expressed in terms of Bayes rule, this is what that would look like.
250:41 - Probability of rain given clouds is the probability of clouds given rain
250:46 - times the probability of rain divided by the probability of clouds.
250:50 - Here I'm just substituting in for the values of a and b
250:53 - from that equation of Bayes rule from before.
250:55 - And then I can just do the math.
250:56 - I have this information.
250:57 - I know that 80% of the time, if it was raining,
251:00 - then there were clouds in the morning.
251:01 - So 0.8 here.
251:03 - Probability of rain is 0.1, because 10% of days were rainy,
251:06 - and 40% of days were cloudy.
251:08 - I do the math, and I can figure out the answer is 0.2.
251:11 - So the probability that it rains in the afternoon,
251:14 - given that it was cloudy in the morning, is 0.2 in this case.
251:19 - And this now is an application of Bayes rule,
251:22 - the idea that using one conditional probability,
251:24 - we can get the reverse conditional probability.
251:27 - And this is often useful when one of the conditional probabilities
251:31 - might be easier for us to know about or easier for us to have data about.
251:34 - And using that information, we can calculate
251:37 - the other conditional probability.
251:39 - So what does this look like?
251:40 - Well, it means that knowing the probability of cloudy mornings
251:43 - given rainy afternoons, we can calculate the probability
251:47 - of rainy afternoons given cloudy mornings.
251:50 - Or, for example, more generally, if we know the probability
251:54 - of some visible effect, some effect that we can see and observe,
251:58 - given some unknown cause that we're not sure about,
252:02 - well, then we can calculate the probability of that unknown cause
252:05 - given the visible effect.
252:08 - So what might that look like?
252:10 - Well, in the context of medicine, for example,
252:12 - I might know the probability of some medical test result given a disease.
252:17 - Like, I know that if someone has a disease,
252:19 - then x% of the time the medical test result will show up as this,
252:23 - for instance.
252:24 - And using that information, then I can calculate, all right,
252:26 - what is the probability that given I know the medical test result, what
252:31 - is the likelihood that someone has the disease?
252:33 - This is the piece of information that is usually easier to know,
252:36 - easier to immediately have access to data for.
252:38 - And this is the information that I actually want to calculate.
252:42 - Or I might want to know, for example, if I
252:44 - know that some probability of counterfeit bills
252:48 - have blurry text around the edges, because counterfeit printers aren't
252:51 - nearly as good at printing text precisely.
252:53 - So I have some information about, given that something
252:56 - is a counterfeit bill, like x% of counterfeit bills
252:59 - have blurry text, for example.
253:01 - And using that information, then I can calculate some piece of information
253:04 - that I might want to know, like, given that I know there's blurry text
253:08 - on a bill, what is the probability that that bill is counterfeit?
253:12 - So given one conditional probability, I can
253:14 - calculate the other conditional probability as well.
253:19 - And so now we've taken a look at a couple of different types of probability.
253:22 - And we've looked at unconditional probability,
253:24 - where I just look at what is the probability of this event occurring,
253:27 - given no additional evidence that I might have access to.
253:31 - And we've also looked at conditional probability,
253:33 - where I have some sort of evidence, and I
253:35 - would like to, using that evidence, be able to calculate some other
253:38 - probability as well.
253:40 - And the other kind of probability that will be important for us to think about
253:43 - is joint probability.
253:45 - And this is when we're considering the likelihood
253:47 - of multiple different events simultaneously.
253:50 - And so what do we mean by this?
253:52 - For example, I might have probability distributions
253:55 - that look a little something like this.
253:56 - Like, oh, I want to know the probability distribution of clouds
253:59 - in the morning.
254:00 - And that distribution looks like this.
254:02 - 40% of the time, C, which is my random variable here,
254:06 - is equal to it's cloudy.
254:07 - And 60% of the time, it's not cloudy.
254:10 - So here is just a simple probability distribution
254:13 - that is effectively telling me that 40% of the time, it's cloudy.
254:17 - I might also have a probability distribution for rain in the afternoon,
254:20 - where 10% of the time, or with probability 0.1,
254:24 - it is raining in the afternoon.
254:25 - And with probability 0.9, it is not raining in the afternoon.
254:30 - And using just these two pieces of information,
254:34 - I don't actually have a whole lot of information
254:36 - about how these two variables relate to each other.
254:39 - But I could if I had access to their joint probability,
254:42 - meaning for every combination of these two things,
254:45 - meaning morning cloudy and afternoon rain, morning cloudy and afternoon not
254:49 - rain, morning not cloudy and afternoon rain,
254:52 - and morning not cloudy and afternoon not raining,
254:54 - if I had access to values for each of those four,
254:57 - I'd have more information.
254:58 - So information that'd be organized in a table like this,
255:02 - and this, rather than just a probability distribution,
255:05 - is a joint probability distribution.
255:07 - It tells me the probability distribution of each
255:10 - of the possible combinations of values that these random variables can take on.
255:15 - So if I want to know what is the probability that on any given day
255:19 - it is both cloudy and rainy, well, I would say, all right,
255:22 - we're looking at cases where it is cloudy and cases where it is raining.
255:26 - And the intersection of those two, that row in that column, is 0.08.
255:30 - So that is the probability that it is both cloudy and rainy using
255:35 - that information.
255:36 - And using this conditional probability table,
255:39 - using this joint probability table, I can
255:41 - begin to draw other pieces of information about things like conditional
255:46 - probability.
255:47 - So I might ask a question like, what is the probability distribution of clouds
255:51 - given that I know that it is raining?
255:53 - Meaning I know for sure that it's raining.
255:56 - Tell me the probability distribution over whether it's cloudy or not,
255:59 - given that I know already that it is, in fact, raining.
256:02 - And here I'm using C to stand for that random variable.
256:05 - I'm looking for a distribution, meaning the answer to this
256:07 - is not going to be a single value.
256:09 - It's going to be two values, a vector of two values,
256:12 - where the first value is probability of clouds,
256:14 - the second value is probability that it is not cloudy,
256:17 - but the sum of those two values is going to be 1.
256:19 - Because when you add up the probabilities of all of the possible worlds,
256:23 - the result that you get must be the number 1.
256:26 - And well, what do we know about how to calculate a conditional probability?
256:30 - Well, we know that the probability of A given B
256:33 - is the probability of A and B divided by the probability of B.
256:38 - So what does this mean?
256:40 - Well, it means that I can calculate the probability of clouds
256:43 - given that it's raining as the probability of clouds and raining
256:49 - divided by the probability of rain.
256:50 - And this comma here for the probability distribution
256:53 - of clouds and rain, this comma sort of stands in for the word and.
256:57 - You'll sort of see in the logical operator and and the comma
256:59 - used interchangeably.
257:01 - This means the probability distribution over the clouds
257:04 - and knowing the fact that it is raining divided
257:06 - by the probability of rain.
257:09 - And the interesting thing to note here and what
257:11 - we'll often do in order to simplify our mathematics
257:13 - is that dividing by the probability of rain,
257:16 - the probability of rain here is just some numerical constant.
257:19 - It is some number.
257:20 - Dividing by probability of rain is just dividing by some constant,
257:24 - or in other words, multiplying by the inverse of that constant.
257:27 - And it turns out that oftentimes we can just not
257:30 - worry about what the exact value of this is
257:32 - and just know that it is, in fact, a constant value.
257:36 - And we'll see why in a moment.
257:37 - So instead of expressing this as this joint probability divided
257:41 - by the probability of rain, sometimes we'll
257:43 - just represent it as alpha times the numerator here,
257:47 - the probability distribution of C, this variable,
257:50 - and that we know that it is raining, for instance.
257:53 - So all we've done here is said this value of 1 over the probability of rain,
257:57 - that's really just a constant we're going to divide by or equivalently
258:00 - multiply by the inverse of at the end.
258:02 - We'll just call it alpha for now and deal with it a little bit later.
258:06 - But the key idea here now, and this is an idea that's going to come up again,
258:09 - is that the conditional distribution of C given rain
258:14 - is proportional to, meaning just some factor multiplied
258:17 - by the joint probability of C and rain being true.
258:22 - And so how do we figure this out?
258:23 - Well, this is going to be the probability that it
258:25 - is cloudy given that it's raining, which is 0.08,
258:28 - and the probability that it's not cloudy given
258:30 - that it's raining, which is 0.02.
258:32 - And so we get alpha times here now is that probability distribution.
258:37 - 0.08 is clouds and rain.
258:40 - 0.02 is not cloudy and rain.
258:43 - But of course, 0.08 and 0.02 don't sum up to the number 1.
258:47 - And we know that in a probability distribution,
258:50 - if you consider all of the possible values,
258:52 - they must sum up to a probability of 1.
258:55 - And so we know that we just need to figure out
258:57 - some constant to normalize, so to speak, these values, something
259:01 - we can multiply or divide by to get it so that all these probabilities sum up
259:05 - to 1, and it turns out that if we multiply both numbers by 10,
259:08 - then we can get that result of 0.8 and 0.2.
259:11 - The proportions are still equivalent, but now 0.8 plus 0.2,
259:15 - those sum up to the number 1.
259:18 - So take a look at this and see if you can understand step by step
259:21 - how it is we're getting from one point to another.
259:23 - The key idea here is that by using the joint probabilities,
259:27 - these probabilities that it is both cloudy and rainy
259:31 - and that it is not cloudy and rainy, I can take that information
259:35 - and figure out the conditional probability given that it's raining.
259:39 - What is the chance that it's cloudy versus not cloudy?
259:41 - Just by multiplying by some normalization constant, so to speak.
259:46 - And this is what a computer can begin to use
259:48 - to be able to interact with these various different types of probabilities.
259:52 - And it turns out there are a number of other probability rules
259:55 - that are going to be useful to us as we begin
259:57 - to explore how we can actually use this information to encode
260:01 - into our computers some more complex analysis that we might want to do
260:05 - about probability and distributions and random variables
260:08 - that we might be interacting with.
260:10 - So here are a couple of those important probability rules.
260:12 - One of the simplest rules is just this negation rule.
260:15 - What is the probability of not event A?
260:19 - So A is an event that has some probability,
260:21 - and I would like to know what is the probability that A does not occur.
260:25 - And it turns out it's just 1 minus P of A, which makes sense.
260:29 - Because if those are the two possible cases, either A happens or A
260:33 - doesn't happen, then when you add up those two cases, you must get 1,
260:37 - which means that P of not A must just be 1 minus P of A.
260:42 - Because P of A and P of not A must sum up to the number 1.
260:46 - They must include all of the possible cases.
260:49 - We've seen an expression for calculating the probability of A and B.
260:53 - We might also reasonably want to calculate the probability of A or B.
260:57 - What is the probability that one thing happens or another thing happens?
261:01 - So for example, I might want to calculate what is the probability
261:04 - that if I roll two dice, a red die and a blue die, what is the likelihood
261:07 - that A is a 6 or B is a 6, like one or the other?
261:11 - And what you might imagine you could do, and the wrong way to approach it,
261:14 - would be just to say, all right, well, A comes up as a 6 with the red die
261:19 - comes up as a 6 with probability 1 over 6.
261:21 - The same for the blue die, it's also 1 over 6.
261:23 - Add them together, and you get 2 over 6, otherwise known as 1 third.
261:27 - But this suffers from a problem of over counting,
261:30 - that we've double counted the case, where both A and B, both the red die
261:34 - and the blue die, both come up as a 6-roll.
261:37 - And I've counted that instance twice.
261:39 - So to resolve this, the actual expression for calculating the probability of A
261:43 - or B uses what we call the inclusion-exclusion formula.
261:47 - So I take the probability of A, add it to the probability of B.
261:51 - That's all same as before.
261:52 - But then I need to exclude the cases that I've double counted.
261:56 - So I subtract from that the probability of A and B.
262:01 - And that gets me the result for A or B. I consider all the cases where A is true
262:05 - and all the cases where B is true.
262:07 - And if you imagine this is like a Venn diagram of cases where A is true,
262:09 - cases where B is true, I just need to subtract out the middle
262:12 - to get rid of the cases that I have overcounted by double counting them
262:16 - inside of both of these individual expressions.
262:21 - One other rule that's going to be quite helpful
262:23 - is a rule called marginalization.
262:25 - So marginalization is answering the question
262:27 - of how do I figure out the probability of A using some other variable
262:31 - that I might have access to, like B?
262:33 - Even if I don't know additional information about it,
262:35 - I know that B, some event, can have two possible states, either B
262:40 - happens or B doesn't happen, assuming it's a Boolean, true or false.
262:44 - And well, what that means is that for me to be
262:47 - able to calculate the probability of A, there are only two cases.
262:50 - Either A happens and B happens, or A happens and B doesn't happen.
262:55 - And those are two disjoint, meaning they can't both happen together.
262:58 - Either B happens or B doesn't happen.
263:01 - They're disjoint or separate cases.
263:03 - And so I can figure out the probability of A
263:05 - just by adding up those two cases.
263:07 - The probability that A is true is the probability that A and B is true,
263:13 - plus the probability that A is true and B isn't true.
263:16 - So by marginalizing, I've looked at the two possible cases
263:19 - that might take place, either B happens or B doesn't happen.
263:23 - And in either of those cases, I look at what's
263:25 - the probability that A happens.
263:27 - And if I add those together, well, then I get the probability
263:30 - that A happens as a whole.
263:32 - So take a look at that rule.
263:33 - It doesn't matter what B is or how it's related to A.
263:36 - So long as I know these joint distributions,
263:39 - I can figure out the overall probability of A.
263:42 - And this can be a useful way if I have a joint distribution,
263:44 - like the joint distribution of A and B, to just figure out
263:48 - some unconditional probability, like the probability of A.
263:51 - And we'll see examples of this soon as well.
263:54 - Now, sometimes these might not just be random,
263:55 - might not just be variables that are events that are like they happened
263:58 - or they didn't happen, like B is here.
264:00 - They might be some broader probability distribution
264:03 - where there are multiple possible values.
264:05 - And so here, in order to use this marginalization rule,
264:08 - I need to sum up not just over B and not B,
264:11 - but for all of the possible values that the other random variable could take
264:15 - on.
264:16 - And so here, we'll see a version of this rule for random variables.
264:19 - And it's going to include that summation notation
264:21 - to indicate that I'm summing up, adding up a whole bunch of individual values.
264:25 - So here's the rule.
264:26 - Looks a lot more complicated, but it's actually
264:28 - the equivalent exactly the same rule.
264:30 - What I'm saying here is that if I have two random variables, one called x
264:35 - and one called y, well, the probability that x is equal to some value x sub i,
264:41 - this is just some value that this variable takes on.
264:43 - How do I figure it out?
264:45 - Well, I'm going to sum up over j, where j is going
264:48 - to range over all of the possible values that y can take on.
264:53 - Well, let's look at the probability that x equals xi and y equals yj.
264:58 - So the exact same rule, the only difference here
265:00 - is now I'm summing up over all of the possible values
265:03 - that y can take on, saying let's add up all of those possible cases
265:06 - and look at this joint distribution, this joint probability,
265:10 - that x takes on the value I care about, given all of the possible values for y.
265:15 - And if I add all those up, then I can get
265:18 - this unconditional probability of what x is equal to,
265:22 - whether or not x is equal to some value x sub i.
265:26 - So let's take a look at this rule, because it
265:27 - does look a little bit complicated.
265:29 - Let's try and put a concrete example to it.
265:31 - Here again is that same joint distribution from before.
265:34 - I have cloud, not cloudy, rainy, not rainy.
265:38 - And maybe I want to access some variable.
265:40 - I want to know what is the probability that it is cloudy.
265:44 - Well, marginalization says that if I have this joint distribution
265:48 - and I want to know what is the probability that it is cloudy,
265:51 - well, I need to consider the other variable, the variable that's not here,
265:55 - the idea that it's rainy.
265:56 - And I consider the two cases, either it's raining or it's not raining.
266:00 - And I just sum up the values for each of those possibilities.
266:04 - In other words, the probability that it is cloudy
266:07 - is equal to the sum of the probability that it's cloudy and it's rainy
266:12 - and the probability that it's cloudy and it is not raining.
266:17 - And so these now are values that I have access to.
266:20 - These are values that are just inside of this joint probability table.
266:24 - What is the probability that it is both cloudy and rainy?
266:27 - Well, it's just the intersection of these two here, which is 0.08.
266:31 - And the probability that it's cloudy and not raining is, all right,
266:34 - here's cloudy, here's not raining.
266:36 - It's 0.32.
266:37 - So it's 0.08 plus 0.32, which just gives us equal to 0.4.
266:42 - That is the unconditional probability that it is, in fact, cloudy.
266:46 - And so marginalization gives us a way to go from these joint distributions
266:50 - to just some individual probability that I might care about.
266:53 - And you'll see a little bit later why it is that we care about that
266:56 - and why that's actually useful to us as we begin
266:59 - doing some of these calculations.
267:01 - Last rule we'll take a look at before transitioning
267:04 - to something a little bit different is this rule of conditioning,
267:06 - very similar to the marginalization rule.
267:09 - But it says that, again, if I have two events, a and b,
267:12 - but instead of having access to their joint probabilities,
267:15 - I have access to their conditional probabilities,
267:17 - how they relate to each other.
267:19 - Well, again, if I want to know the probability that a happens,
267:22 - and I know that there's some other variable b, either b happens or b
267:26 - doesn't happen, and so I can say that the probability of a
267:30 - is the probability of a given b times the probability of b, meaning b happened.
267:35 - And given that I know b happened, what's the likelihood that a happened?
267:39 - And then I consider the other case, that b didn't happen.
267:42 - So here's the probability that b didn't happen.
267:44 - And here's the probability that a happens,
267:47 - given that I know that b didn't happen.
267:49 - And this is really the equivalent rule just
267:51 - using conditional probability instead of joint probability,
267:55 - where I'm saying let's look at both of these two cases and condition on b.
267:59 - Look at the case where b happens, and look at the case where b doesn't happen,
268:03 - and look at what probabilities I get as a result.
268:06 - And just as in the case of marginalization,
268:08 - where there was an equivalent rule for random variables
268:10 - that could take on multiple possible values in a domain of possible values,
268:14 - here, too, conditioning has the same equivalent rule.
268:17 - Again, there's a summation to mean I'm summing over
268:19 - all of the possible values that some random variable y could take on.
268:23 - But if I want to know what is the probability that x takes on this value,
268:27 - then I'm going to sum up over all the values j that y could take on,
268:31 - and say, all right, what's the chance that y takes on that value yj?
268:35 - And multiply it by the conditional probability
268:38 - that x takes on this value, given that y took on that value yj.
268:42 - So equivalent rule just using conditional probabilities
268:46 - instead of joint probabilities.
268:47 - And using the equation we know about joint probabilities,
268:50 - we can translate between these two.
268:53 - So all right, we've seen a whole lot of mathematics,
268:55 - and we've just laid the foundation for mathematics.
268:57 - And no need to worry if you haven't seen probability in too much detail
269:00 - up until this point.
269:02 - These are the foundations of the ideas that are going to come up
269:05 - as we begin to explore how we can now take these ideas from probability
269:09 - and begin to apply them to represent something inside of our computer,
269:12 - something inside of the AI agent we're trying to design that
269:16 - is able to represent information and probabilities
269:18 - and the likelihoods between various different events.
269:22 - So there are a number of different probabilistic models
269:24 - that we can generate, but the first of the models
269:26 - we're going to talk about are what are known as Bayesian networks.
269:30 - And a Bayesian network is just going to be some network of random variables,
269:34 - connected random variables that are going to represent
269:37 - the dependence between these random variables.
269:39 - The odds are most random variables in this world
269:43 - are not independent from each other, but there's
269:45 - some relationship between things that are happening that we care about.
269:48 - If it is rainy today, that might increase the likelihood
269:51 - that my flight or my train gets delayed, for example.
269:54 - There are some dependence between these random variables,
269:57 - and a Bayesian network is going to be able to capture those dependencies.
270:01 - So what is a Bayesian network?
270:03 - What is its actual structure, and how does it work?
270:06 - Well, a Bayesian network is going to be a directed graph.
270:08 - And again, we've seen directed graphs before.
270:10 - They are individual nodes with arrows or edges
270:13 - that connect one node to another node pointing in a particular direction.
270:18 - And so this directed graph is going to have nodes
270:20 - as well, where each node in this directed graph
270:23 - is going to represent a random variable, something like the weather,
270:27 - or something like whether my train was on time or delayed.
270:30 - And we're going to have an arrow from a node x to a node y
270:34 - to mean that x is a parent of y.
270:37 - So that'll be our notation.
270:38 - If there's an arrow from x to y, x is going to be considered a parent of y.
270:42 - And the reason that's important is because each of these nodes
270:46 - is going to have a probability distribution that we're
270:48 - going to store along with it, which is the distribution of x
270:52 - given some evidence, given the parents of x.
270:56 - So the way to more intuitively think about this
270:58 - is the parents seem to be thought of as sort of causes for some effect
271:01 - that we're going to observe.
271:04 - And so let's take a look at an actual example of a Bayesian network
271:07 - and think about the types of logic that might be involved
271:09 - in reasoning about that network.
271:11 - Let's imagine for a moment that I have an appointment out of town,
271:15 - and I need to take a train in order to get to that appointment.
271:18 - So what are the things I might care about?
271:19 - Well, I care about getting to my appointment on time.
271:22 - Whether I make it to my appointment and I'm able to attend it
271:24 - or I miss the appointment.
271:26 - And you might imagine that that's influenced by the train,
271:29 - that the train is either on time or it's delayed, for example.
271:33 - But that train itself is also influenced.
271:36 - Whether the train is on time or not depends maybe on the rain.
271:39 - Is there no rain?
271:40 - Is it light rain?
271:41 - Is there heavy rain?
271:42 - And it might also be influenced by other variables too.
271:44 - It might be influenced as well by whether or not
271:47 - there's maintenance on the train track, for example.
271:49 - If there is maintenance on the train track,
271:51 - that probably increases the likelihood that my train is delayed.
271:55 - And so we can represent all of these ideas
271:57 - using a Bayesian network that looks a little something like this.
272:01 - Here I have four nodes representing four random variables
272:05 - that I would like to keep track of.
272:06 - I have one random variable called rain that
272:08 - can take on three possible values in its domain, either none or light
272:12 - or heavy, for no rain, light rain, or heavy rain.
272:16 - I have a variable called maintenance for whether or not
272:18 - there is maintenance on the train track, which
272:20 - it has two possible values, just either yes or no.
272:22 - Either there is maintenance or there's no maintenance happening on the track.
272:26 - Then I have a random variable for the train indicating whether or not
272:28 - the train was on time or not.
272:30 - That random variable has two possible values in its domain.
272:33 - The train is either on time or the train is delayed.
272:37 - And then finally, I have a random variable
272:39 - for whether I make it to my appointment.
272:41 - For my appointment down here, I have a random variable
272:43 - called appointment that itself has two possible values, attend and miss.
272:49 - And so here are the possible values.
272:50 - Here are my four nodes, each of which represents a random variable, each
272:54 - of which has a domain of possible values that it can take on.
272:58 - And the arrows, the edges pointing from one node to another,
273:01 - encode some notion of dependence inside of this graph,
273:05 - that whether I make it to my appointment or not
273:08 - is dependent upon whether the train is on time or delayed.
273:12 - And whether the train is on time or delayed
273:14 - is dependent on two things given by the two arrows pointing at this node.
273:18 - It is dependent on whether or not there was maintenance on the train track.
273:22 - And it is also dependent upon whether or not it was raining
273:25 - or whether it is raining.
273:27 - And just to make things a little complicated,
273:29 - let's say as well that whether or not there is maintenance on the track,
273:32 - this too might be influenced by the rain.
273:34 - That if there's heavier rain, well, maybe it's
273:37 - less likely that it's going to be maintenance on the train track that day
273:40 - because they're more likely to want to do maintenance on the track on days
273:43 - when it's not raining, for example.
273:45 - And so these nodes might have different relationships between them.
273:47 - But the idea is that we can come up with a probability distribution
273:51 - for any of these nodes based only upon its parents.
273:56 - And so let's look node by node at what this probability distribution might
273:59 - actually look like.
274:00 - And we'll go ahead and begin with this root node, this rain node here,
274:03 - which is at the top, and has no arrows pointing into it, which
274:07 - means its probability distribution is not
274:10 - going to be a conditional distribution.
274:11 - It's not based on anything.
274:13 - I just have some probability distribution over the possible values
274:17 - for the rain random variable.
274:20 - And that distribution might look a little something like this.
274:23 - None, light and heavy, each have a possible value.
274:25 - Here I'm saying the likelihood of no rain is 0.7, of light rain is 0.2,
274:31 - of heavy rain is 0.1, for example.
274:33 - So here is a probability distribution for this root node in this Bayesian
274:38 - network.
274:39 - And let's now consider the next node in the network, maintenance.
274:42 - Track maintenance is yes or no.
274:44 - And the general idea of what this distribution is going to encode,
274:47 - at least in this story, is the idea that the heavier the rain is,
274:52 - the less likely it is that there's going to be maintenance on the track.
274:55 - Because the people that are doing maintenance on the track probably
274:57 - want to wait until a day when it's not as rainy in order
275:00 - to do the track maintenance, for example.
275:02 - And so what might that probability distribution look like?
275:05 - Well, this now is going to be a conditional probability distribution,
275:08 - that here are the three possible values for the rain random variable, which
275:12 - I'm here just going to abbreviate to R, either no rain, light rain,
275:15 - or heavy rain.
275:17 - And for each of those possible values, either there
275:19 - is yes track maintenance or no track maintenance.
275:22 - And those have probabilities associated with them.
275:25 - That I see here that if it is not raining,
275:30 - then there is a probability of 0.4 that there's track maintenance
275:33 - and a probability of 0.6 that there isn't.
275:36 - But if there's heavy rain, then here the chance
275:38 - that there is track maintenance is 0.1 and the chance
275:41 - that there is not track maintenance is 0.9.
275:44 - Each of these rows is going to sum up to 1.
275:47 - Because each of these represent different values
275:49 - of whether or not it's raining, the three possible values
275:52 - that that random variable can take on.
275:54 - And each is associated with its own probability distribution
275:57 - that is ultimately all going to add up to the number 1.
276:02 - So that there is our distribution for this random variable called maintenance,
276:05 - about whether or not there is maintenance on the train track.
276:09 - And now let's consider the next variable.
276:11 - Here we have a node inside of our Bayesian network called train
276:15 - that has two possible values, on time and delayed.
276:18 - And this node is going to be dependent upon the two nodes that
276:21 - are pointing towards it, that whether or not
276:23 - the train is on time or delayed depends on whether or not
276:27 - there is track maintenance.
276:28 - And it depends on whether or not there is rain,
276:30 - that heavier rain probably means more likely that my train is delayed.
276:35 - And if there is track maintenance, that also probably
276:38 - means it's more likely that my train is delayed as well.
276:41 - And so you could construct a larger probability distribution,
276:45 - a conditional probability distribution, that instead
276:47 - of conditioning on just one variable, as was the case here,
276:51 - is now conditioning on two variables, conditioning
276:54 - both on rain represented by r and on maintenance represented by yes.
276:58 - Again, each of these rows has two values that sum up to the number 1,
277:02 - one for whether the train is on time, one for whether the train is delayed.
277:06 - And here I can say something like, all right,
277:08 - if I know there was light rain and track maintenance, well, OK,
277:12 - that would be r is light and m is yes.
277:16 - Well, then there is a probability of 0.6 that my train is on time,
277:19 - and a probability of 0.4 the train is delayed.
277:23 - And you can imagine gathering this data just
277:25 - by looking at real world data, looking at data about, all right,
277:28 - if I knew that it was light rain and there was track maintenance,
277:31 - how often was a train delayed or not delayed?
277:33 - And you could begin to construct this thing.
277:35 - The interesting thing is intelligently, being
277:37 - able to try to figure out how might you go about ordering these things,
277:40 - what things might influence other nodes inside of this Bayesian network.
277:46 - And the last thing I care about is whether or not I make it to my appointment.
277:50 - So did I attend or miss the appointment?
277:52 - And ultimately, whether I attend or miss the appointment,
277:55 - it is influenced by track maintenance, because it's indirectly this idea that,
277:59 - all right, if there is track maintenance,
278:01 - well, then my train might more likely be delayed.
278:02 - And if my train is more likely to be delayed,
278:04 - then I'm more likely to miss my appointment.
278:06 - But what we encode in this Bayesian network
278:09 - are just what we might consider to be more direct relationships.
278:12 - So the train has a direct influence on the appointment.
278:15 - And given that I know whether the train is on time or delayed,
278:18 - knowing whether there's track maintenance isn't
278:20 - going to give me any additional information that I didn't already have.
278:24 - That if I know train, these other nodes that are up above
278:27 - isn't really going to influence the result.
278:30 - And so here we might represent it using another conditional probability
278:34 - distribution that looks a little something like this.
278:36 - The train can take on two possible values.
278:39 - Either my train is on time or my train is delayed.
278:42 - And for each of those two possible values,
278:44 - I have a distribution for what are the odds that I'm
278:46 - able to attend the meeting and what are the odds that I missed the meeting.
278:49 - And obviously, if my train is on time, I'm
278:51 - much more likely to be able to attend the meeting
278:53 - than if my train is delayed, in which case I'm more likely to miss that
278:57 - meeting.
278:59 - So all of these nodes put all together here represent this Bayesian network,
279:03 - this network of random variables whose values I ultimately care about,
279:07 - and that have some sort of relationship between them,
279:09 - some sort of dependence where these arrows from one node to another
279:13 - indicate some dependence, that I can calculate
279:15 - the probability of some node given the parents that happen to exist there.
279:21 - So now that we've been able to describe the structure of this Bayesian
279:24 - network and the relationships between each of these nodes
279:27 - by associating each of the nodes in the network with a probability
279:30 - distribution, whether that's an unconditional probability distribution
279:34 - in the case of this root node here, like rain,
279:36 - and a conditional probability distribution in the case
279:39 - of all of the other nodes whose probabilities are
279:42 - dependent upon the values of their parents,
279:44 - we can begin to do some computation and calculation using
279:47 - the information inside of that table.
279:50 - So let's imagine, for example, that I just
279:51 - wanted to compute something simple like the probability of light rain.
279:55 - How would I get the probability of light rain?
279:57 - Well, light rain, rain here is a root node.
280:01 - And so if I wanted to calculate that probability,
280:03 - I could just look at the probability distribution for rain
280:06 - and extract from it the probability of light rains, just a single value
280:10 - that I already have access to.
280:12 - But we could also imagine wanting to compute more complex joint
280:16 - probabilities, like the probability that there is light rain and also
280:21 - no track maintenance.
280:22 - This is a joint probability of two values, light rain and no track
280:27 - maintenance.
280:27 - And the way I might do that is first by starting by saying, all right,
280:30 - well, let me get the probability of light rain.
280:33 - But now I also want the probability of no track maintenance.
280:36 - But of course, this node is dependent upon the value of rain.
280:41 - So what I really want is the probability of no track maintenance,
280:44 - given that I know that there was light rain.
280:47 - And so the expression for calculating this idea that the probability of light
280:51 - rain and no track maintenance is really just the probability of light rain
280:56 - and the probability that there is no track maintenance,
280:58 - given that I know that there already is light rain.
281:01 - So I take the unconditional probability of light rain,
281:05 - multiply it by the conditional probability of no track maintenance,
281:09 - given that I know there is light rain.
281:12 - And you can continue to do this again and again for every variable
281:15 - that you want to add into this joint probability
281:18 - that I might want to calculate.
281:19 - If I wanted to know the probability of light rain and no track maintenance
281:23 - and a delayed train, well, that's going to be the probability of light rain,
281:27 - multiplied by the probability of no track maintenance, given light rain,
281:31 - multiplied by the probability of a delayed train, given light rain
281:36 - and no track maintenance.
281:37 - Because whether the train is on time or delayed
281:39 - is dependent upon both of these other two variables.
281:42 - And so I have two pieces of evidence that go
281:45 - into the calculation of that conditional probability.
281:48 - And each of these three values is just a value
281:51 - that I can look up by looking at one of these individual probability
281:55 - distributions that is encoded into my Bayesian network.
281:59 - And if I wanted a joint probability over all four of the variables,
282:03 - something like the probability of light rain and no track maintenance
282:06 - and a delayed train and I miss my appointment,
282:09 - well, that's going to be multiplying four different values, one
282:12 - from each of these individual nodes.
282:14 - It's going to be the probability of light rain,
282:16 - then of no track maintenance given light rain, then of a delayed train,
282:20 - given light rain and no track maintenance.
282:22 - And then finally, for this node here, for whether I
282:25 - make it to my appointment or not, it's not
282:26 - dependent upon these two variables, given
282:29 - that I know whether or not the train is on time.
282:31 - I only need to care about the conditional probability
282:34 - that I miss my train, or that I miss my appointment,
282:37 - given that the train happens to be delayed.
282:39 - And so that's represented here by four probabilities, each of which
282:43 - is located inside of one of these probability distributions
282:47 - for each of the nodes, all multiplied together.
282:50 - And so I can take a variable like that and figure out
282:52 - what the joint probability is by multiplying
282:55 - a whole bunch of these individual probabilities from the Bayesian network.
282:59 - But of course, just as with last time, where what I really wanted to do
283:02 - was to be able to get new pieces of information,
283:05 - here, too, this is what we're going to want to do with our Bayesian network.
283:08 - In the context of knowledge, we talked about the problem of inference.
283:11 - Given things that I know to be true, can I draw conclusions,
283:14 - make deductions about other facts about the world that I also know to be true?
283:19 - And what we're going to do now is apply the same sort of idea to probability.
283:23 - Using information about which I have some knowledge,
283:26 - whether some evidence or some probabilities,
283:28 - can I figure out not other variables for certain,
283:32 - but can I figure out the probabilities of other variables
283:35 - taking on particular values?
283:36 - And so here, we introduce the problem of inference in a probabilistic setting,
283:41 - in a case where variables might not necessarily be true for sure,
283:44 - but they might be random variables that take on different values
283:48 - with some probability.
283:50 - So how do we formally define what exactly this inference problem actually
283:53 - is?
283:54 - Well, the inference problem has a couple of parts to it.
283:57 - We have some query, some variable x that we
283:59 - want to compute the distribution for.
284:01 - Maybe I want the probability that I miss my train,
284:04 - or I want the probability that there is track maintenance,
284:08 - something that I want information about.
284:11 - And then I have some evidence variables.
284:13 - Maybe it's just one piece of evidence.
284:14 - Maybe it's multiple pieces of evidence.
284:16 - But I've observed certain variables for some sort of event.
284:20 - So for example, I might have observed that it is raining.
284:23 - This is evidence that I have.
284:24 - I know that there is light rain, or I know that there is heavy rain.
284:27 - And that is evidence I have.
284:28 - And using that evidence, I want to know what is the probability
284:32 - that my train is delayed, for example.
284:34 - And that is a query that I might want to ask based on this evidence.
284:38 - So I have a query, some variable.
284:39 - Evidence, which are some other variables that I
284:41 - have observed inside of my Bayesian network.
284:44 - And of course, that does leave some hidden variables.
284:46 - Why?
284:47 - These are variables that are not evidence variables and not query variables.
284:52 - So you might imagine in the case where I know whether or not it's raining,
284:55 - and I want to know whether my train is going to be delayed or not,
284:59 - the hidden variable, the thing I don't have access to,
285:02 - is something like, is there maintenance on the track?
285:04 - Or am I going to make or not make my appointment, for example?
285:07 - These are variables that I don't have access to.
285:09 - They're hidden because they're not things I observed,
285:12 - and they're also not the query, the thing that I'm asking.
285:14 - And so ultimately, what we want to calculate
285:17 - is I want to know the probability distribution of x given
285:21 - e, the event that I observed.
285:22 - So given that I observed some event, I observed that it is raining,
285:25 - I would like to know what is the distribution over the possible values
285:29 - of the train random variable.
285:31 - Is it on time?
285:32 - Is it delayed?
285:33 - What's the likelihood it's going to be there?
285:35 - And it turns out we can do this calculation just
285:37 - using a lot of the probability rules that we've already seen in action.
285:42 - And ultimately, we're going to take a look at the math
285:44 - at a little bit of a high level, at an abstract level.
285:46 - But ultimately, we can allow computers and programming libraries
285:49 - that already exist to begin to do some of this math for us.
285:52 - But it's good to get a general sense for what's actually happening
285:55 - when this inference process takes place.
285:57 - Let's imagine, for example, that I want to compute the probability
286:00 - distribution of the appointment random variable given some evidence,
286:05 - given that I know that there was light rain
286:07 - and no track maintenance.
286:08 - So there's my evidence, these two variables that I observe the values of.
286:12 - I observe the value of rain.
286:14 - I know there's light rain.
286:15 - And I know that there is no track maintenance going on today.
286:18 - And what I care about knowing, my query, is this random variable appointment.
286:22 - I want to know the distribution of this random variable appointment,
286:25 - like what is the chance that I'm able to attend my appointment?
286:28 - What is the chance that I miss my appointment given this evidence?
286:32 - And the hidden variable, the information that I don't have access to,
286:35 - is this variable train.
286:36 - This is information that is not part of the evidence
286:38 - that I see, not something that I observe.
286:41 - But it is also not the query that I'm asking for.
286:44 - And so what might this inference procedure look like?
286:47 - Well, if you recall back from when we were defining conditional probability
286:50 - and doing math with conditional probabilities,
286:52 - we know that a conditional probability is proportional to the joint
286:57 - probability.
286:58 - And we remembered this by recalling that the probability of A given
287:01 - B is just some constant factor alpha multiplied by the probability of A
287:06 - and B. That constant factor alpha turns out
287:08 - to be like dividing over the probability of B.
287:10 - But the important thing is that it's just some constant multiplied
287:14 - by the joint distribution, the probability
287:17 - that all of these individual things happen.
287:19 - So in this case, I can take the probability of the appointment random
287:23 - variable given light rain and no track maintenance
287:27 - and say that is just going to be proportional, some constant alpha,
287:30 - multiplied by the joint probability, the probability
287:33 - of a particular value for the appointment random variable
287:36 - and light rain and no track maintenance.
287:40 - Well, all right, how do I calculate this, probability of appointment
287:43 - and light rain and no track maintenance, when what I really care about
287:46 - is knowing I need all four of these values
287:48 - to be able to calculate a joint distribution across everything
287:52 - because in a particular appointment depends upon the value of train?
287:56 - Well, in order to do that, here I can begin to use that marginalization
287:59 - trick, that there are only two ways I can get
288:02 - any configuration of an appointment, light rain, and no track maintenance.
288:05 - Either this particular setting of variables
288:07 - happens and the train is on time, or this particular setting of variables
288:12 - happens and the train is delayed.
288:13 - Those are two possible cases that I would want to consider.
288:17 - And if I add those two cases up, well, then I
288:19 - get the result just by adding up all of the possibilities
288:23 - for the hidden variable or variables that there are multiple.
288:26 - But since there's only one hidden variable here, train, all I need to do
288:30 - is iterate over all the possible values for that hidden variable train
288:34 - and add up their probabilities.
288:36 - So this probability expression here becomes probability distribution
288:40 - over appointment, light, no rain, and train is on time,
288:44 - and the probability distribution over the appointment, light rain,
288:47 - no track maintenance, and that the train is delayed, for example.
288:51 - So I take both of the possible values for train, go ahead and add them up.
288:55 - These are just joint probabilities that we saw earlier,
288:57 - how to calculate just by going parent, parent, parent, parent,
288:59 - and calculating those probabilities and multiplying them together.
289:03 - And then you'll need to normalize them at the end,
289:05 - speaking at a high level, to make sure that everything adds up to the number 1.
289:09 - So the formula for how you do this in a process known as inference by enumeration
289:13 - looks a little bit complicated, but ultimately it looks like this.
289:16 - And let's now try to distill what it is that all of these symbols actually mean.
289:20 - Let's start here.
289:21 - What I care about knowing is the probability of x, my query variable,
289:25 - given some sort of evidence.
289:28 - What do I know about conditional probabilities?
289:30 - Well, a conditional probability is proportional to the joint probability.
289:34 - So it is some alpha, some normalizing constant,
289:37 - multiplied by this joint probability of x and evidence.
289:41 - And how do I calculate that?
289:42 - Well, to do that, I'm going to marginalize
289:45 - over all of the hidden variables, all the variables
289:47 - that I don't directly observe the values for.
289:50 - I'm basically going to iterate over all of the possibilities
289:53 - that it could happen and just sum them all up.
289:55 - And so I can translate this into a sum over all y,
289:58 - which ranges over all the possible hidden variables and the values
290:02 - that they could take on, and adds up all of those possible individual
290:06 - probabilities.
290:07 - And that is going to allow me to do this process of inference by enumeration.
290:11 - Now, ultimately, it's pretty annoying if we as humans
290:14 - have to do all this math for ourselves.
290:16 - But turns out this is where computers and AI can be particularly helpful,
290:19 - that we can program a computer to understand a Bayesian network,
290:22 - to be able to understand these inference procedures,
290:25 - and to be able to do these calculations.
290:27 - And using the information you've seen here,
290:29 - you could implement a Bayesian network from scratch yourself.
290:31 - But turns out there are a lot of libraries, especially written in Python,
290:34 - that allow us to make it easier to do this sort of probabilistic inference,
290:38 - to be able to take a Bayesian network and do these sorts of calculations,
290:41 - so that you don't need to know and understand all of the underlying math,
290:44 - though it's helpful to have a general sense for how it works.
290:46 - But you just need to be able to describe the structure of the network
290:49 - and make queries in order to be able to produce the result.
290:53 - And so let's take a look at an example of that right now.
290:56 - It turns out that there are a lot of possible libraries
290:59 - that exist in Python for doing this sort of inference.
291:01 - It doesn't matter too much which specific library you use.
291:04 - They all behave in fairly similar ways.
291:05 - But the library I'm going to use here is one known as pomegranate.
291:08 - And here inside of model.py, I have defined a Bayesian network,
291:13 - just using the structure and the syntax that the pomegranate library expects.
291:17 - And what I'm effectively doing is just, in Python,
291:20 - creating nodes to represent each of the nodes of the Bayesian network
291:24 - that you saw me describe a moment ago.
291:26 - So here on line four, after I've imported pomegranate,
291:29 - I'm defining a variable called rain that is going
291:31 - to represent a node inside of my Bayesian network.
291:35 - It's going to be a node that follows this distribution, where
291:39 - there are three possible values, none for no rain, light for light rain,
291:42 - heavy for heavy rain.
291:43 - And these are the probabilities of each of those taking place.
291:46 - 0.7 is the likelihood of no rain, 0.2 for light rain, 0.1 for heavy rain.
291:53 - Then after that, we go to the next variable,
291:55 - the variable for track maintenance, for example,
291:57 - which is dependent upon that rain variable.
292:00 - And this, instead of being an unconditional distribution,
292:03 - is a conditional distribution, as indicated
292:05 - by a conditional probability table here.
292:07 - And the idea is that I'm following this is conditional
292:11 - on the distribution of rain.
292:13 - So if there is no rain, then the chance that there is, yes, track maintenance
292:17 - is 0.4.
292:17 - If there's no rain, the chance that there is no track maintenance is 0.6.
292:21 - Likewise, for light rain, I have a distribution.
292:23 - For heavy rain, I have a distribution as well.
292:25 - But I'm effectively encoding the same information
292:27 - you saw represented graphically a moment ago.
292:29 - But I'm telling this Python program that the maintenance node
292:33 - obeys this particular conditional probability distribution.
292:37 - And we do the same thing for the other random variables as well.
292:40 - Train was a node inside my distribution that
292:44 - was a conditional probability table with two parents.
292:47 - It was dependent not only on rain, but also on track maintenance.
292:51 - And so here I'm saying something like, given
292:53 - that there is no rain and, yes, track maintenance,
292:55 - the probability that my train is on time is 0.8.
292:59 - And the probability that it's delayed is 0.2.
293:01 - And likewise, I can do the same thing for all
293:03 - of the other possible values of the parents of the train node
293:07 - inside of my Bayesian network by saying, for all of those possible values,
293:12 - here is the distribution that the train node should follow.
293:16 - Then I do the same thing for an appointment
293:18 - based on the distribution of the variable train.
293:21 - Then at the end, what I do is actually construct this network
293:24 - by describing what the states of the network are
293:27 - and by adding edges between the dependent nodes.
293:30 - So I create a new Bayesian network, add states to it, one for rain,
293:33 - one for maintenance, one for the train, one for the appointment.
293:36 - And then I add edges connecting the related pieces.
293:40 - Rain has an arrow to maintenance because rain influences track maintenance.
293:44 - Rain also influences the train.
293:46 - Maintenance also influences the train.
293:48 - And train influences whether I make it to my appointment
293:50 - and bake just finalizes the model and does some additional computation.
293:54 - So the specific syntax of this is not really the important part.
293:57 - Pomegranate just happens to be one of several different libraries
294:00 - that can all be used for similar purposes.
294:02 - And you could describe and define a library for yourself
294:05 - that implemented similar things.
294:07 - But the key idea here is that someone can design a library
294:11 - for a general Bayesian network that has nodes that are based upon its parents.
294:15 - And then all a programmer needs to do using one of those libraries
294:18 - is to define what those nodes and what those probability distributions are.
294:23 - And we can begin to do some interesting logic based on it.
294:26 - So let's try doing that conditional or joint probability calculation
294:30 - that we saw us do by hand before by going into likelihood.py, where
294:36 - here I'm importing the model that I just defined a moment ago.
294:40 - And here I'd just like to calculate model.probability, which
294:42 - calculates the probability for a given observation.
294:46 - And I'd like to calculate the probability of no rain, no track maintenance,
294:51 - my train is on time, and I'm able to attend the meeting.
294:54 - So sort of the optimal scenario that there is no rain and no maintenance
294:58 - on the track, my train is on time, and I'm able to attend the meeting.
295:01 - What is the probability that all of that actually happens?
295:04 - And I can calculate that using the library and just print out its probability.
295:08 - And so I'll go ahead and run python of likelihood.py.
295:12 - And I see that, OK, the probability is about 0.34.
295:16 - So about a third of the time, everything goes right for me in this case.
295:20 - No rain, no track maintenance, train is on time,
295:22 - and I'm able to attend the meeting.
295:24 - But I could experiment with this, try and calculate other probabilities as well.
295:28 - What's the probability that everything goes right up until the train,
295:31 - but I still miss my meeting?
295:33 - So no rain, no track maintenance, train is on time,
295:37 - but I miss the appointment.
295:39 - Let's calculate that probability.
295:41 - And all right, that has a probability of about 0.04.
295:44 - So about 4% of the time, the train will be on time,
295:47 - there won't be any rain, no track maintenance,
295:49 - and yet I'll still miss the meeting.
295:52 - And so this is really just an implementation
295:54 - of the calculation of the joint probabilities that we did before.
295:57 - What this library is likely doing is first figuring out
296:00 - the probability of no rain, then figuring out
296:03 - the probability of no track maintenance given no rain,
296:06 - then the probability that my train is on time given both of these values,
296:10 - and then the probability that I miss my appointment given that I
296:13 - know that the train was on time.
296:15 - So this, again, is the calculation of that joint probability.
296:18 - And turns out we can also begin to have our computer solve inference problems
296:22 - as well, to begin to infer, based on information, evidence that we see,
296:26 - what is the likelihood of other variables also being true.
296:30 - So let's go into inference.py, for example.
296:33 - We're here, I'm again importing that exact same model from before,
296:36 - importing all the nodes and all the edges
296:38 - and the probability distribution that is encoded there as well.
296:42 - And now there's a function for doing some sort of prediction.
296:45 - And here, into this model, I pass in the evidence that I observe.
296:50 - So here, I've encoded into this Python program the evidence
296:54 - that I have observed.
296:55 - I have observed the fact that the train is delayed.
296:58 - And that is the value for one of the four random variables
297:01 - inside of this Bayesian network.
297:03 - And using that information, I would like to be able to draw inspiration
297:07 - and figure out inferences about the values
297:09 - of the other random variables that are inside of my Bayesian network.
297:13 - I would like to make predictions about everything else.
297:15 - So all of the actual computational logic is happening in just these three lines,
297:19 - where I'm making this call to this prediction.
297:21 - Down below, I'm just iterating over all of the states and all the predictions
297:25 - and just printing them out so that we can visually see what the results are.
297:29 - But let's find out, given the train is delayed,
297:31 - what can I predict about the values of the other random variables?
297:35 - Let's go ahead and run python inference.py.
297:38 - I run that, and all right, here is the result that I get.
297:41 - Given the fact that I know that the train is delayed,
297:44 - this is evidence that I have observed.
297:46 - Well, given that there is a 45% chance or a 46% chance
297:50 - that there was no rain, a 31% chance there was light rain,
297:52 - a 23% chance there was heavy rain, I can see a probability distribution
297:56 - of a track maintenance and a probability distribution
297:58 - over whether I'm able to attend or miss my appointment.
298:01 - Now, we know that whether I attend or miss the appointment,
298:04 - that is only dependent upon the train being delayed or not delayed.
298:07 - It shouldn't depend on anything else.
298:10 - So let's imagine, for example, that I knew that there was heavy rain.
298:14 - That shouldn't affect the distribution for making the appointment.
298:18 - And indeed, if I go up here and add some evidence,
298:21 - say that I know that the value of rain is heavy.
298:23 - That is evidence that I now have access to.
298:25 - I now have two pieces of evidence.
298:27 - I know that the rain is heavy, and I know that my train is delayed.
298:31 - I can calculate the probability by running this inference procedure again
298:35 - and seeing the result. I know that the rain is heavy.
298:37 - I know my train is delayed.
298:39 - The probability distribution for track maintenance changed.
298:42 - Given that I know that there's heavy rain,
298:44 - now it's more likely that there is no track maintenance, 88%,
298:48 - as opposed to 64% from here before.
298:51 - And now, what is the probability that I make the appointment?
298:55 - Well, that's the same as before.
298:57 - It's still going to be attend the appointment with probability 0.6,
299:00 - missed the appointment with probability 0.4,
299:03 - because it was only dependent upon whether or not
299:05 - my train was on time or delayed.
299:07 - And so this here is implementing that idea of that inference algorithm
299:11 - to be able to figure out, based on the evidence that I have,
299:14 - what can we infer about the values of the other variables that exist as well.
299:18 - So inference by enumeration is one way of doing this inference procedure,
299:22 - just looping over all of the values the hidden variables could take on
299:26 - and figuring out what the probability is.
299:29 - Now, it turns out this is not particularly efficient.
299:31 - And there are definitely optimizations you can make by avoiding repeated work.
299:35 - If you're calculating the same sort of probability multiple times,
299:38 - there are ways of optimizing the program to avoid
299:40 - having to recalculate the same probabilities again and again.
299:44 - But even then, as the number of variables get large,
299:47 - as the number of possible values of variables could take on, get large,
299:50 - we're going to start to have to do a lot of computation,
299:52 - a lot of calculation, to be able to do this inference.
299:55 - And at that point, it might start to get unreasonable,
299:58 - in terms of the amount of time that it would take
300:00 - to be able to do this sort of exact inference.
300:04 - And it's for that reason that oftentimes, when
300:06 - it comes towards probability and things we're not entirely sure about,
300:09 - we don't always care about doing exact inference
300:11 - and knowing exactly what the probability is.
300:14 - But if we can approximate the inference procedure,
300:17 - do some sort of approximate inference, that that can be pretty good as well.
300:21 - That if I don't know the exact probability,
300:23 - but I have a general sense for the probability
300:25 - that I can get increasingly accurate with more time,
300:28 - that that's probably pretty good, especially
300:30 - if I can get that to happen even faster.
300:33 - So how could I do approximate inference inside of a Bayesian network?
300:37 - Well, one method is through a procedure known as sampling.
300:40 - In the process of sampling, I'm going to take
300:42 - a sample of all of the variables inside of this Bayesian network here.
300:46 - And how am I going to sample?
300:47 - Well, I'm going to sample one of the values from each of these nodes
300:51 - according to their probability distribution.
300:54 - So how might I take a sample of all these nodes?
300:56 - Well, I'll start at the root.
300:57 - I'll start with rain.
300:58 - Here's the distribution for rain.
300:59 - And I'll go ahead and, using a random number generator or something like it,
301:03 - randomly pick one of these three values.
301:05 - I'll pick none with probability 0.7, light with probability 0.2,
301:09 - and heavy with probability 0.1.
301:11 - So I'll randomly just pick one of them according to that distribution.
301:14 - And maybe in this case, I pick none, for example.
301:17 - Then I do the same thing for the other variable.
301:19 - Maintenance also has a probability distribution.
301:22 - And I'm going to sample.
301:23 - Now, there are three probability distributions here.
301:26 - But I'm only going to sample from this first row here,
301:29 - because I've observed already in my sample that the value of rain is none.
301:33 - So given that rain is none, I'm going to sample from this distribution to say,
301:37 - all right, what should the value of maintenance be?
301:40 - And in this case, maintenance is going to be, let's just say yes,
301:42 - which happens 40% of the time in the event that there is no rain, for example.
301:47 - And we'll sample all of the rest of the nodes in this way as well,
301:50 - that I want to sample from the train distribution.
301:52 - And I'll sample from this first row here, where there is no rain,
301:56 - but there is track maintenance.
301:58 - And I'll sample 80% of the time.
302:00 - I'll say the train is on time.
302:01 - 20% of the time, I'll say the train is delayed.
302:04 - And finally, we'll do the same thing for whether I make it to my appointment
302:07 - or not.
302:07 - Did I attend or miss the appointment?
302:09 - We'll sample based on this distribution and maybe say
302:11 - that in this case, I attend the appointment, which
302:13 - happens 90% of the time when the train is actually on time.
302:18 - So by going through these nodes, I can very quickly just do some sampling
302:22 - and get a sample of the possible values that could come up
302:26 - from going through this entire Bayesian network
302:28 - according to those probability distributions.
302:31 - And where this becomes powerful is if I do this not once,
302:34 - but I do this thousands or tens of thousands of times
302:36 - and generate a whole bunch of samples all using this distribution.
302:39 - I get different samples.
302:41 - Maybe some of them are the same.
302:42 - But I get a value for each of the possible variables that could come up.
302:47 - And so then if I'm ever faced with a question,
302:49 - a question like, what is the probability that the train is on time,
302:53 - you could do an exact inference procedure.
302:55 - This is no different than the inference problem we had before
302:58 - where I could just marginalize, look at all the possible other values
303:01 - of the variables, and do the computation of inference by enumeration
303:05 - to find out this probability exactly.
303:07 - But I could also, if I don't care about the exact probability,
303:10 - just sample it, approximate it to get close.
303:12 - And this is a powerful tool in AI where we don't need to be right 100%
303:16 - of the time or we don't need to be exactly right.
303:18 - If we just need to be right with some probability,
303:20 - we can often do so more effectively, more efficiently.
303:23 - And so if here now are all of those possible samples,
303:26 - I'll highlight the ones where the train is on time.
303:30 - I'm ignoring the ones where the train is delayed.
303:32 - And in this case, there's like six out of eight of the samples
303:35 - have the train is arriving on time.
303:37 - And so maybe in this case, I can say that in six out of eight cases,
303:40 - that's the likelihood that the train is on time.
303:43 - And with eight samples, that might not be a great prediction.
303:45 - But if I had thousands upon thousands of samples,
303:48 - then this could be a much better inference procedure
303:51 - to be able to do these sorts of calculations.
303:53 - So this is a direct sampling method to just do a bunch of samples
303:56 - and then figure out what the probability of some event is.
304:00 - Now, this from before was an unconditional probability.
304:03 - What is the probability that the train is on time?
304:07 - And I did that by looking at all the samples and figuring out, right,
304:09 - here are the ones where the train is on time.
304:12 - But sometimes what I want to calculate is not an unconditional probability,
304:16 - but rather a conditional probability, something
304:18 - like what is the probability that there is light rain,
304:21 - given that the train is on time, something to that effect.
304:24 - And to do that kind of calculation, well, what I might do
304:28 - is here are all the samples that I have.
304:31 - And I want to calculate a probability distribution,
304:33 - given that I know that the train is on time.
304:36 - So to be able to do that, I can kind of look
304:38 - at the two cases where the train was delayed and ignore or reject them,
304:43 - sort of exclude them from the possible samples that I'm considering.
304:47 - And now I want to look at these remaining cases where the train is on time.
304:50 - Here are the cases where there is light rain.
304:53 - And I say, OK, these are two out of the six possible cases.
304:56 - That can give me an approximation for the probability of light rain,
305:00 - given the fact that I know the train was on time.
305:03 - And I did that in almost exactly the same way,
305:05 - just by adding an additional step, by saying that, all right,
305:08 - when I take each sample, let me reject all of the samples that
305:12 - don't match my evidence and only consider
305:14 - the samples that do match what it is that I have in my evidence
305:19 - that I want to make some sort of calculation about.
305:21 - And it turns out, using the libraries that we've had for Bayesian networks,
305:25 - we can begin to implement this same sort of idea,
305:28 - like implement rejection sampling, which is what this method is called,
305:31 - to be able to figure out some probability, not via direct inference,
305:35 - but instead by sampling.
305:37 - So what I have here is a program called sample.py.
305:39 - Imports the exact same model.
305:41 - And what I define first is a program to generate a sample.
305:45 - And the way I generate a sample is just by looping over all of the states.
305:48 - The states need to be in some sort of order
305:50 - to make sure I'm looping in the correct order.
305:52 - But effectively, if it is a conditional distribution,
305:55 - I'm going to sample based on the parents.
305:58 - And otherwise, I'm just going to directly sample
306:00 - the variable, like rain, which has no parents.
306:02 - It's just an unconditional distribution and keep
306:05 - track of all those parent samples and return the final sample.
306:08 - The exact syntax of this, again, not particularly important.
306:11 - It just happens to be part of the implementation details
306:13 - of this particular library.
306:15 - The interesting logic is down below.
306:17 - Now that I have the ability to generate a sample,
306:20 - if I want to know the distribution of the appointment random variable,
306:24 - given that the train is delayed, well, then I
306:26 - can begin to do calculations like this.
306:28 - Let me take 10,000 samples and assemble all my results
306:32 - in this list called data.
306:33 - I'll go ahead and loop n times, in this case, 10,000 times.
306:36 - I'll generate a sample.
306:38 - And I want to know the distribution of appointment,
306:41 - given that the train is delayed.
306:43 - So according to rejection sampling, I'm only
306:45 - going to consider samples where the train is delayed.
306:47 - If the train is not delayed, I'm not going to consider those values at all.
306:51 - So I'm going to say, all right, if I take the sample,
306:53 - look at the value of the train random variable, if the train is delayed,
306:57 - well, let me go ahead and add to my data
306:59 - that I'm collecting the value of the appointment random variable
307:02 - that it took on in this particular sample.
307:05 - So I'm only considering the samples where the train is delayed.
307:08 - And for each of those samples, considering what the value of appointment
307:11 - is, and then at the end, I'm using a Python class called
307:14 - counter, which quickly counts up all the values inside of a data set.
307:18 - So I can take this list of data and figure out
307:20 - how many times was my appointment made and how many times was my appointment
307:25 - missed.
307:27 - And so this here, with just a couple lines of code,
307:29 - is an implementation of rejection sampling.
307:32 - And I can run it by going ahead and running Python sample.py.
307:37 - And when I do that, here is the result I get.
307:39 - This is the result of the counter.
307:41 - 1,251 times, I was able to attend the meeting.
307:45 - And 856 times, I was able to miss the meeting.
307:48 - And you can imagine, by doing more and more samples,
307:51 - I'll be able to get a better and better, more accurate result.
307:54 - And this is a randomized process.
307:55 - It's going to be an approximation of the probability.
307:58 - If I run it a different time, you'll notice the numbers are similar, 12,
308:01 - 72, and 905.
308:03 - But they're not identical because there's some randomization, some likelihood
308:07 - that things might be higher or lower.
308:09 - And so this is why we generally want to try and use more samples so that we
308:12 - can have a greater amount of confidence in our result,
308:15 - be more sure about the result that we're getting of whether or not
308:18 - it accurately reflects or represents the actual underlying probabilities that
308:23 - are inherent inside of this distribution.
308:26 - And so this, then, was an instance of rejection sampling.
308:29 - And it turns out there are a number of other sampling methods
308:32 - that you could use to begin to try to sample.
308:34 - One problem that rejection sampling has is
308:37 - that if the evidence you're looking for is a fairly unlikely event,
308:41 - well, you're going to be rejecting a lot of samples.
308:44 - Like if I'm looking for the probability of x given some evidence e,
308:48 - if e is very unlikely to occur, like occurs maybe one every 1,000 times,
308:52 - then I'm only going to be considering 1 out of every 1,000 samples that I do,
308:56 - which is a pretty inefficient method for trying to do this sort of calculation.
308:59 - I'm throwing away a lot of samples.
309:01 - And it takes computational effort to be able to generate those samples.
309:05 - So I'd like to not have to do something like that.
309:07 - So there are other sampling methods that can try and address this.
309:09 - One such sampling method is called likelihood weighting.
309:13 - In likelihood weighting, we follow a slightly different procedure.
309:16 - And the goal is to avoid needing to throw out samples
309:20 - that didn't match the evidence.
309:22 - And so what we'll do is we'll start by fixing the values for the evidence
309:26 - variables.
309:26 - Rather than sample everything, we're going
309:29 - to fix the values of the evidence variables and not sample those.
309:33 - Then we're going to sample all the other non-evidence variables
309:36 - in the same way, just using the Bayesian network looking
309:38 - at the probability distributions, sampling all the non-evidence variables.
309:43 - But then what we need to do is weight each sample by its likelihood.
309:48 - If our evidence is really unlikely, we want
309:50 - to make sure that we've taken into account how likely was the evidence
309:53 - to actually show up in the sample.
309:55 - If I have a sample where the evidence was much more
309:58 - likely to show up than another sample, then I
310:00 - want to weight the more likely one higher.
310:02 - So we're going to weight each sample by its likelihood, where likelihood is just
310:06 - defined as the probability of all the evidence.
310:09 - Given all the evidence we have, what is the probability
310:11 - that it would happen in that particular sample?
310:14 - So before, all of our samples were weighted equally.
310:16 - They all had a weight of 1 when we were calculating
310:19 - the overall average.
310:20 - In this case, we're going to weight each sample,
310:22 - multiply each sample by its likelihood in order
310:25 - to get the more accurate distribution.
310:28 - So what would this look like?
310:30 - Well, if I ask the same question, what is the probability of light rain,
310:33 - given that the train is on time, when I do the sampling procedure
310:36 - and start by trying to sample, I'm going to start by fixing the evidence
310:40 - variable.
310:41 - I'm already going to have in my sample the train is on time.
310:44 - That way, I don't have to throw out anything.
310:46 - I'm only sampling things where I know the value of the variables that
310:50 - are my evidence are what I expect them to be.
310:53 - So I'll go ahead and sample from rain.
310:55 - And maybe this time, I sample light rain instead of no rain.
310:58 - Then I'll sample from track maintenance and say,
311:00 - maybe, yes, there's track maintenance.
311:01 - Then for train, well, I've already fixed it in place.
311:04 - Train was an evidence variable.
311:06 - So I'm not going to bother sampling again.
311:09 - I'll just go ahead and move on.
311:10 - I'll move on to appointment and go ahead and sample from appointment as well.
311:14 - So now I've generated a sample.
311:16 - I've generated a sample by fixing this evidence variable
311:19 - and sampling the other three.
311:22 - And the last step is now weighting the sample.
311:24 - How much weight should it have?
311:25 - And the weight is based on how probable is it
311:28 - that the train was actually on time, this evidence actually happened,
311:32 - given the values of these other variables, light rain and the fact
311:35 - that, yes, there was track maintenance.
311:37 - Well, to do that, I can just go back to the train variable
311:39 - and say, all right, if there was light rain and track maintenance,
311:43 - the likelihood of my evidence, the likelihood that my train was on time,
311:46 - is 0.6.
311:48 - And so this particular sample would have a weight of 0.6.
311:52 - And I could repeat the sampling procedure again and again.
311:55 - Each time every sample would be given a weight
311:57 - according to the probability of the evidence that I see associated with it.
312:02 - And there are other sampling methods that exist as well,
312:04 - but all of them are designed to try and get it the same idea,
312:07 - to approximate the inference procedure of figuring out the value of a variable.
312:13 - So we've now dealt with probability as it
312:15 - pertains to particular variables that have these discrete values.
312:18 - But what we haven't really considered is how values might change over time.
312:22 - That we've considered something like a variable for rain,
312:25 - where rain can take on values of none or light rain or heavy rain.
312:28 - But in practice, usually when we consider values for variables like rain,
312:32 - we like to consider it for over time, how do the values of these variables
312:37 - change?
312:37 - What do we do with when we're dealing with uncertainty
312:40 - over a period of time, which can come up in the context of weather,
312:43 - for example, if I have sunny days and I have rainy days.
312:46 - And I'd like to know not just what is the probability that it's raining now,
312:51 - but what is the probability that it rains tomorrow,
312:53 - or the day after that, or the day after that.
312:55 - And so to do this, we're going to introduce
312:57 - a slightly different kind of model.
312:58 - But here, we're going to have a random variable, not just one for the weather,
313:02 - but for every possible time step.
313:05 - And you can define time step however you like.
313:07 - A simple way is just to use days as your time step.
313:10 - And so we can define a variable called x sub t, which
313:13 - is going to be the weather at time t.
313:16 - So x sub 0 might be the weather on day 0.
313:19 - x sub 1 might be the weather on day 1, so on and so forth.
313:22 - x sub 2 is the weather on day 2.
313:24 - But as you can imagine, if we start to do this
313:26 - over longer and longer periods of time, there's
313:28 - an incredible amount of data that might go into this.
313:30 - If you're keeping track of data about the weather for a year,
313:33 - now suddenly you might be trying to predict the weather tomorrow,
313:36 - given 365 days of previous pieces of evidence.
313:40 - And that's a lot of evidence to have to deal with and manipulate and calculate.
313:43 - Probably nobody knows what the exact conditional probability distribution
313:47 - is for all of those combinations of variables.
313:49 - And so when we're trying to do this inference inside of a computer,
313:52 - when we're trying to reasonably do this sort of analysis,
313:56 - it's helpful to make some simplifying assumptions,
313:58 - some assumptions about the problem that we can just assume are true,
314:01 - to make our lives a little bit easier.
314:03 - Even if they're not totally accurate assumptions,
314:05 - if they're close to accurate or approximate, they're usually pretty good.
314:09 - And the assumption we're going to make is called the Markov assumption, which
314:13 - is the assumption that the current state depends only
314:16 - on a finite fixed number of previous states.
314:19 - So the current day's weather depends not on all the previous day's weather
314:23 - for the rest of all of history, but the current day's weather
314:26 - I can predict just based on yesterday's weather,
314:29 - or just based on the last two days weather, or the last three days weather.
314:32 - But oftentimes, we're going to deal with just the one previous state
314:36 - that helps to predict this current state.
314:39 - And by putting a whole bunch of these random variables together,
314:42 - using this Markov assumption, we can create what's called a Markov chain,
314:46 - where a Markov chain is just some sequence of random variables
314:49 - where each of the variables distribution follows that Markov assumption.
314:53 - And so we'll do an example of this where the Markov assumption is,
314:56 - I can predict the weather.
314:57 - Is it sunny or rainy?
314:58 - And we'll just consider those two possibilities for now,
315:01 - even though there are other types of weather.
315:02 - But I can predict each day's weather just on the prior day's weather,
315:06 - using today's weather, I can come up with a probability distribution
315:10 - for tomorrow's weather.
315:11 - And here's what this weather might look like.
315:13 - It's formatted in terms of a matrix, as you might describe it,
315:16 - as rows and columns of values, where on the left-hand side,
315:21 - I have today's weather, represented by the variable x sub t.
315:25 - And over here in the columns, I have tomorrow's weather,
315:28 - represented by the variable x sub t plus 1, t plus 1 day's weather instead.
315:34 - And what this matrix is saying is, if today is sunny,
315:38 - well, then it's more likely than not that tomorrow is also sunny.
315:42 - Oftentimes, the weather stays consistent for multiple days in a row.
315:45 - And for example, let's say that if today is sunny,
315:47 - our model says that tomorrow, with probability 0.8, it will also be sunny.
315:52 - And with probability 0.2, it will be raining.
315:55 - And likewise, if today is raining, then it's more likely than not
315:59 - that tomorrow is also raining.
316:01 - With probability 0.7, it'll be raining. With probability 0.3, it will be sunny.
316:06 - So this matrix, this description of how it is we transition from one state
316:10 - to the next state is what we're going to call the transition model.
316:14 - And using the transition model, you can begin
316:16 - to construct this Markov chain by just predicting,
316:20 - given today's weather, what's the likelihood of tomorrow's weather
316:23 - happening.
316:23 - And you can imagine doing a similar sampling procedure,
316:27 - where you take this information, you sample what tomorrow's weather is
316:30 - going to be.
316:31 - Using that, you sample the next day's weather.
316:33 - And the result of that is you can form this Markov chain of like x0,
316:38 - time and time, day zero is sunny, the next day is sunny,
316:40 - maybe the next day it changes to raining, then raining, then raining.
316:43 - And the pattern that this Markov chain follows,
316:46 - given the distribution that we had access to, this transition model here,
316:50 - is that when it's sunny, it tends to stay sunny for a little while.
316:53 - The next couple of days tend to be sunny too.
316:55 - And when it's raining, it tends to be raining as well.
316:59 - And so you get a Markov chain that looks like this,
317:01 - and you can do analysis on this.
317:02 - You can say, given that today is raining, what is the probability
317:06 - that tomorrow is raining?
317:07 - Or you can begin to ask probability questions
317:09 - like, what is the probability of this sequence of five values, sun, sun,
317:13 - rain, rain, rain, and answer those sorts of questions too.
317:17 - And it turns out there are, again, many Python libraries
317:19 - for interacting with models like this of probabilities
317:23 - that have distributions and random variables that
317:25 - are based on previous variables according to this Markov assumption.
317:29 - And pomegranate2 has ways of dealing with these sorts of variables.
317:32 - So I'll go ahead and go into the chain directory,
317:39 - where I have some information about Markov chains.
317:42 - And here, I've defined a file called model.py,
317:45 - where I've defined in a very similar syntax.
317:47 - And again, the exact syntax doesn't matter so much as the idea
317:50 - that I'm encoding this information into a Python program
317:54 - so that the program has access to these distributions.
317:56 - I've here defined some starting distribution.
317:59 - So every Markov model begins at some point in time,
318:02 - and I need to give it some starting distribution.
318:04 - And so we'll just say, you know at the start, you can pick 50-50 between sunny
318:08 - and rainy.
318:09 - We'll say it's sunny 50% of the time, rainy 50% of the time.
318:13 - And then down below, I've here defined the transition model,
318:16 - how it is that I transition from one day to the next.
318:19 - And here, I've encoded that exact same matrix from before,
318:22 - that if it was sunny today, then with probability 0.8,
318:24 - it will be sunny tomorrow.
318:26 - And it'll be rainy tomorrow with probability 0.2.
318:29 - And I likewise have another distribution for if it was raining today instead.
318:34 - And so that alone defines the Markov model.
318:36 - You can begin to answer questions using that model.
318:39 - But one thing I'll just do is sample from the Markov chain.
318:42 - It turns out there is a method built into this Markov chain library
318:45 - that allows me to sample 50 states from the chain,
318:48 - basically just simulating like 50 instances of weather.
318:52 - And so let me go ahead and run this.
318:54 - Python model.py.
318:57 - And when I run it, what I get is that it's
318:59 - going to sample from this Markov chain 50 states, 50 days worth of weather
319:04 - that it's just going to randomly sample.
319:06 - And you can imagine sampling many times to be able to get more data,
319:09 - to be able to do more analysis.
319:10 - But here, for example, it's sunny two days in a row,
319:13 - rainy a whole bunch of days in a row before it changes back to sun.
319:17 - And so you get this model that follows the distribution
319:20 - that we originally described, that follows the distribution of sunny days
319:23 - tend to lead to more sunny days.
319:25 - Rainy days tend to lead to more rainy days.
319:29 - And that then is a Markov model.
319:31 - And Markov models rely on us knowing the values
319:34 - of these individual states.
319:35 - I know that today is sunny or that today is raining.
319:38 - And using that information, I can draw some sort of inference
319:41 - about what tomorrow is going to be like.
319:44 - But in practice, this often isn't the case.
319:46 - It often isn't the case that I know for certain what
319:49 - the exact state of the world is.
319:51 - Oftentimes, the state of the world is exactly unknown.
319:54 - But I'm able to somehow sense some information about that state,
319:58 - that a robot or an AI doesn't have exact knowledge
320:01 - about the world around it.
320:02 - But it has some sort of sensor, whether that sensor is a camera
320:05 - or sensors that detect distance or just a microphone that is sensing audio,
320:09 - for example.
320:09 - It is sensing data.
320:11 - And using that data, that data is somehow related
320:14 - to the state of the world, even if it doesn't actually know,
320:17 - our AI doesn't know, what the underlying true state of the world
320:20 - actually is.
320:22 - And for that, we need to get into the world of sensor models,
320:25 - the way of describing how it is that we translate
320:28 - what the hidden state, the underlying true state of the world,
320:31 - is with what the observation, what it is that the AI knows or the AI has
320:36 - access to, actually is.
320:38 - And so for example, a hidden state might be a robot's position.
320:42 - If a robot is exploring new uncharted territory,
320:45 - the robot likely doesn't know exactly where it is.
320:48 - But it does have an observation.
320:49 - It has robot sensor data, where it can sense how far away
320:52 - are possible obstacles around it.
320:54 - And using that information, using the observed information that it has,
320:58 - it can infer something about the hidden state.
321:01 - Because what the true hidden state is influences those observations.
321:05 - Whatever the robot's true position is affects or has some effect
321:10 - upon what the sensor data of the robot is able to collect is,
321:13 - even if the robot doesn't actually know for certain what its true position is.
321:18 - Likewise, if you think about a voice recognition or a speech recognition
321:21 - program that listens to you and is able to respond to you, something
321:25 - like Alexa or what Apple and Google are doing with their voice recognition
321:29 - as well, that you might imagine that the hidden state, the underlying state,
321:33 - is what words are actually spoken.
321:35 - The true nature of the world contains you saying
321:38 - a particular sequence of words, but your phone or your smart home device
321:42 - doesn't know for sure exactly what words you said.
321:45 - The only observation that the AI has access to is some audio waveforms.
321:50 - And those audio waveforms are, of course, dependent upon this hidden state.
321:54 - And you can infer, based on those audio waveforms,
321:57 - what the words spoken likely were.
322:00 - But you might not know with 100% certainty what that hidden state actually
322:04 - is.
322:05 - And it might be a task to try and predict, given this observation,
322:08 - given these audio waveforms, can you figure out what the actual words spoken
322:12 - are.
322:13 - And likewise, you might imagine on a website, true user engagement.
322:16 - Might be information you don't directly have access to.
322:19 - But you can observe data, like website or app analytics,
322:22 - about how often was this button clicked or how often are people interacting
322:25 - with a page in a particular way.
322:26 - And you can use that to infer things about your users as well.
322:30 - So this type of problem comes up all the time
322:33 - when we're dealing with AI and trying to infer things about the world.
322:36 - That often AI doesn't really know the hidden true state of the world.
322:40 - All the AI has access to is some observation
322:43 - that is related to the hidden true state.
322:45 - But it's not direct.
322:47 - There might be some noise there.
322:48 - The audio waveform might have some additional noise
322:50 - that might be difficult to parse.
322:52 - The sensor data might not be exactly correct.
322:54 - There's some noise that might not allow you to conclude with certainty what
322:57 - the hidden state is, but can allow you to infer what it might be.
323:01 - And so the simple example we'll take a look at here
323:04 - is imagining the hidden state as the weather, whether it's sunny or rainy
323:07 - or not.
323:07 - And imagine you are programming an AI inside of a building that maybe has
323:11 - access to just a camera to inside the building.
323:14 - And all you have access to is an observation
323:17 - as to whether or not employees are bringing
323:19 - an umbrella into the building or not.
323:21 - You can detect whether it's an umbrella or not.
323:24 - And so you might have an observation as to whether or not
323:26 - an umbrella is brought into the building or not.
323:28 - And using that information, you want to predict whether it's sunny or rainy,
323:32 - even if you don't know what the underlying weather is.
323:35 - So the underlying weather might be sunny or rainy.
323:37 - And if it's raining, obviously people are more likely to bring an umbrella.
323:41 - And so whether or not people bring an umbrella, your observation,
323:44 - tells you something about the hidden state.
323:46 - And of course, this is a bit of a contrived example,
323:48 - but the idea here is to think about this more broadly in terms of more
323:51 - generally, any time you observe something,
323:54 - it having to do with some underlying hidden state.
323:57 - And so to try and model this type of idea where
323:59 - we have these hidden states and observations,
324:02 - rather than just use a Markov model, which has state, state, state, state,
324:05 - each of which is connected by that transition matrix that we described
324:08 - before, we're going to use what we call a hidden Markov model.
324:12 - Very similar to a Markov model, but this is going
324:14 - to allow us to model a system that has hidden states
324:17 - that we don't directly observe, along with some observed event
324:21 - that we do actually see.
324:23 - And so in addition to that transition model that we still
324:25 - need of saying, given the underlying state of the world,
324:28 - if it's sunny or rainy, what's the probability of tomorrow's weather?
324:32 - We also need another model that, given some state,
324:35 - is going to give us an observation of green, yes, someone brings
324:38 - an umbrella into the office, or red, no, nobody brings umbrellas into the office.
324:43 - And so the observation might be that if it's sunny,
324:46 - then odds are nobody is going to bring an umbrella to the office.
324:49 - But maybe some people are just being cautious,
324:51 - and they do bring an umbrella to the office anyways.
324:54 - And if it's raining, then with much higher probability,
324:57 - then people are going to bring umbrellas into the office.
324:59 - But maybe if the rain was unexpected, people didn't bring an umbrella.
325:02 - And so it might have some other probability as well.
325:05 - And so using the observations, you can begin
325:07 - to predict with reasonable likelihood what the underlying state is,
325:11 - even if you don't actually get to observe the underlying state,
325:15 - if you don't get to see what the hidden state is actually equal to.
325:18 - This here we'll often call the sensor model.
325:21 - It's also often called the emission probabilities,
325:23 - because the state, the underlying state, emits some sort of emission
325:27 - that you then observe.
325:29 - And so that can be another way of describing that same idea.
325:32 - And the sensor Markov assumption that we're going to use
325:35 - is this assumption that the evidence variable, the thing we observe,
325:38 - the emission that gets produced, depends only on the corresponding state,
325:43 - meaning it can predict whether or not people will bring umbrellas or not
325:46 - entirely dependent just on whether it is sunny or rainy today.
325:50 - Of course, again, this assumption might not hold in practice,
325:53 - that in practice, it might depend whether or not
325:55 - people bring umbrellas, might depend not just on today's weather,
325:58 - but also on yesterday's weather and the day before.
326:00 - But for simplification purposes, it can be helpful to apply this sort
326:04 - of assumption just to allow us to be able to reason
326:07 - about these probabilities a little more easily.
326:09 - And if we're able to approximate it, we can still often get a very good answer.
326:14 - And so what these hidden Markov models end up looking like
326:16 - is a little something like this, where now, rather than just have
326:20 - one chain of states, like sun, sun, rain, rain, rain,
326:23 - we instead have this upper level, which is the underlying state of the world.
326:29 - Is it sunny or is it rainy?
326:30 - And those are connected by that transition matrix we described before.
326:34 - But each of these states produces an emission,
326:37 - produces an observation that I see, that on this day, it was sunny
326:41 - and people didn't bring umbrellas.
326:43 - And on this day, it was sunny, but people did bring umbrellas.
326:46 - And on this day, it was raining and people did bring umbrellas,
326:48 - and so on and so forth.
326:49 - And so each of these underlying states represented
326:52 - by x sub t for x sub 1, 0, 1, 2, so on and so forth,
326:56 - produces some sort of observation or emission,
326:59 - which is what the e stands for, e sub 0, e sub 1, e sub 2, so on and so forth.
327:04 - And so this, too, is a way of trying to represent this idea.
327:07 - And what you want to think about is that these underlying states are
327:10 - the true nature of the world, the robot's position as it moves over time,
327:14 - and that produces some sort of sensor data that might be observed,
327:17 - or what people are actually saying and using the emission data of what
327:21 - audio waveforms do you detect in order to process that data
327:24 - and try and figure it out.
327:26 - And there are a number of possible tasks that you might want to do
327:29 - given this kind of information.
327:30 - And one of the simplest is trying to infer something
327:33 - about the future or the past or about these sort of hidden states that
327:37 - might exist.
327:38 - And so the tasks that you'll often see, and we're not
327:40 - going to go into the mathematics of these tasks,
327:42 - but they're all based on the same idea of conditional probabilities
327:45 - and using the probability distributions we
327:48 - have to draw these sorts of conclusions.
327:51 - One task is called filtering, which is given observations from the start
327:55 - until now, calculate the distribution for the current state,
327:59 - meaning given information about from the beginning of time until now,
328:03 - on which days do people bring an umbrella or not bring an umbrella,
328:06 - can I calculate the probability of the current state that today,
328:10 - is it sunny or is it raining?
328:12 - Another task that might be possible is prediction,
328:14 - which is looking towards the future.
328:16 - Given observations about people bringing umbrellas
328:18 - from the beginning of when we started counting time until now,
328:22 - can I figure out the distribution that tomorrow is it sunny or is it
328:25 - raining?
328:26 - And you can also go backwards as well by a smoothing,
328:29 - where I can say given observations from start until now,
328:32 - calculate the distributions for some past state.
328:35 - Like I know that today people brought umbrellas and tomorrow people
328:38 - brought umbrellas.
328:39 - And so given two days worth of data of people bringing umbrellas,
328:42 - what's the probability that yesterday it was raining?
328:45 - And that I know that people brought umbrellas today,
328:47 - that might inform that decision as well.
328:50 - It might influence those probabilities.
328:52 - And there's also a most likely explanation task,
328:56 - in addition to other tasks that might exist as well, which
328:58 - is combining some of these given observations from the start up
329:01 - until now, figuring out the most likely sequence of states.
329:04 - And this is what we're going to take a look at now, this idea that if I
329:07 - have all these observations, umbrella, no umbrella, umbrella, no umbrella,
329:11 - can I calculate the most likely states of sun, rain, sun, rain, and whatnot
329:15 - that actually represented the true weather that
329:18 - would produce these observations?
329:20 - And this is quite common when you're trying to do something like voice
329:23 - recognition, for example, that you have these emissions of the audio waveforms,
329:27 - and you would like to calculate based on all of the observations
329:30 - that you have, what is the most likely sequence of actual words, or syllables,
329:34 - or sounds that the user actually made when they were speaking
329:38 - to this particular device, or other tasks that might come up in that context
329:41 - as well.
329:43 - And so we can try this out by going ahead and going into the HMM directory,
329:47 - HMM for Hidden Markov Model.
329:50 - And here, what I've done is I've defined a model where this model first defines
329:57 - my possible state, sun, and rain, along with their emission probabilities,
330:02 - the observation model, or the emission model, where here, given
330:06 - that I know that it's sunny, the probability
330:09 - that I see people bring an umbrella is 0.2,
330:11 - the probability of no umbrella is 0.8.
330:14 - And likewise, if it's raining, then people
330:16 - are more likely to bring an umbrella.
330:18 - Umbrella has probability 0.9, no umbrella has probability 0.1.
330:21 - So the actual underlying hidden states, those states are sun and rain,
330:26 - but the things that I observe, the observations that I can see,
330:29 - are either umbrella or no umbrella as the things that I observe as a result.
330:35 - So this then, I also need to add to it a transition matrix, same as before,
330:39 - saying that if today is sunny, then tomorrow is more likely to be sunny.
330:43 - And if today is rainy, then tomorrow is more likely to be raining.
330:47 - As of before, I give it some starting probabilities,
330:49 - saying at first, 50-50 chance for whether it's sunny or rainy.
330:53 - And then I can create the model based on that information.
330:56 - Again, the exact syntax of this is not so important,
330:59 - so much as it is the data that I am now encoding into a program,
331:02 - such that now I can begin to do some inference.
331:06 - So I can give my program, for example, a list of observations,
331:10 - umbrella, umbrella, no umbrella, umbrella, umbrella, so on and so forth,
331:13 - no umbrella, no umbrella.
331:14 - And I would like to calculate, I would like to figure out the most likely
331:18 - explanation for these observations.
331:20 - What is likely is whether rain, rain, is this rain,
331:23 - or is it more likely that this was actually sunny,
331:25 - and then it switched back to it being rainy?
331:28 - And that's an interesting question.
331:29 - We might not be sure, because it might just
331:31 - be that it just so happened on this rainy day,
331:34 - people decided not to bring an umbrella.
331:36 - Or it could be that it switched from rainy to sunny back to rainy,
331:40 - which doesn't seem too likely, but it certainly could happen.
331:43 - And using the data we give to the hidden Markov model,
331:46 - our model can begin to predict these answers, can begin to figure it out.
331:49 - So we're going to go ahead and just predict these observations.
331:53 - And then for each of those predictions, go ahead and print out
331:56 - what the prediction is.
331:56 - And this library just so happens to have a function called
331:59 - predict that does this prediction process for me.
332:03 - So I'll run python sequence.py.
332:06 - And the result I get is this.
332:07 - This is the prediction based on the observations
332:10 - of what all of those states are likely to be.
332:12 - And it's likely to be rain and rain.
332:14 - In this case, it thinks that what most likely happened
332:16 - is that it was sunny for a day and then went back to being rainy.
332:19 - But in different situations, if it was rainy for longer maybe,
332:22 - or if the probabilities were slightly different,
332:24 - you might imagine that it's more likely that it was rainy all the way through.
332:27 - And it just so happened on one rainy day, people decided not to bring umbrellas.
332:32 - And so here, too, Python libraries can begin
332:35 - to allow for the sort of inference procedure.
332:38 - And by taking what we know and by putting it
332:40 - in terms of these tasks that already exist,
332:43 - these general tasks that work with hidden Markov models,
332:45 - then any time we can take an idea and formulate it as a hidden Markov model,
332:50 - formulate it as something that has hidden states
332:52 - and observed emissions that result from those states,
332:55 - then we can take advantage of these algorithms
332:57 - that are known to exist for trying to do this sort of inference.
333:01 - So now we've seen a couple of ways that AI can begin to deal with uncertainty.
333:05 - We've taken a look at probability and how we can use probability
333:08 - to describe numerically things that are likely or more likely or less
333:11 - likely to happen than other events or other variables.
333:14 - And using that information, we can begin to construct
333:17 - these standard types of models, things like Bayesian networks and Markov
333:20 - chains and hidden Markov models that all allow us to be able to describe
333:25 - how particular events relate to other events
333:27 - or how the values of particular variables relate to other variables,
333:30 - not for certain, but with some sort of probability distribution.
333:34 - And by formulating things in terms of these models that already exist,
333:37 - we can take advantage of Python libraries that
333:39 - implement these sort of models already and allow us just
333:42 - to be able to use them to produce some sort of resulting effect.
333:46 - So all of this then allows our AI to begin
333:48 - to deal with these sort of uncertain problems
333:50 - so that our AI doesn't need to know things for certain
333:53 - but can infer based on information it doesn't know.
333:56 - Next time, we'll take a look at additional types of problems
333:59 - that we can solve by taking advantage of AI-related algorithms,
334:02 - even beyond the world of the types of problems we've already explored.
334:05 - We'll see you next time.
334:08 - OK.
334:27 - Welcome back, everyone, to an introduction to artificial intelligence
334:30 - with Python.
334:31 - And now, so far, we've taken a look at a couple
334:32 - of different types of problems.
334:34 - We've seen classical search problems where
334:36 - we're trying to get from an initial state to a goal
334:38 - by figuring out some optimal path.
334:40 - We've taken a look at adversarial search where
334:42 - we have a game-playing agent that is trying to make the best move.
334:45 - We've seen knowledge-based problems where we're trying to use logic
334:48 - and inference to be able to figure out and draw
334:50 - some additional conclusions.
334:51 - And we've seen some probabilistic models as well where we might not
334:54 - have certain information about the world,
334:56 - but we want to use the knowledge about probabilities that we do have
334:59 - to be able to draw some conclusions.
335:01 - Today, we're going to turn our attention to another category of problems
335:04 - generally known as optimization problems, where optimization is really
335:08 - all about choosing the best option from a set of possible options.
335:12 - And we've already seen optimization in some contexts,
335:14 - like game-playing, where we're trying to create an AI that
335:17 - chooses the best move out of a set of possible moves.
335:19 - But what we'll take a look at today is a category of types of problems
335:23 - and algorithms to solve them that can be used
335:25 - in order to deal with a broader range of potential optimization problems.
335:29 - And the first of the algorithms that we'll take a look at
335:32 - is known as a local search.
335:34 - And local search differs from search algorithms
335:36 - we've seen before in the sense that the search algorithms we've
335:38 - looked at so far, which are things like breadth-first search or A-star search,
335:42 - for example, generally maintain a whole bunch of different paths
335:45 - that we're simultaneously exploring, and we're
335:47 - looking at a bunch of different paths at once trying
335:50 - to find our way to the solution.
335:51 - On the other hand, in local search, this is going
335:53 - to be a search algorithm that's really just going to maintain a single node,
335:57 - looking at a single state.
335:59 - And we'll generally run this algorithm by maintaining that single node
336:02 - and then moving ourselves to one of the neighboring nodes
336:05 - throughout this search process.
336:07 - And this is generally useful in context not like these problems, which
336:10 - we've seen before, like a maze-solving situation where
336:13 - we're trying to find our way from the initial state to the goal
336:16 - by following some path.
336:17 - But local search is most applicable when we really
336:20 - don't care about the path at all, and all we care about
336:23 - is what the solution is.
336:24 - And in the case of solving a maze, the solution was always obvious.
336:27 - You could point to the solution.
336:28 - You know exactly what the goal is, and the real question
336:31 - is, what is the path to get there?
336:33 - But local search is going to come up in cases
336:35 - where figuring out exactly what the solution is,
336:37 - exactly what the goal looks like, is actually the heart of the challenge.
336:41 - And to give an example of one of these kinds of problems,
336:44 - we'll consider a scenario where we have two types of buildings,
336:46 - for example.
336:47 - We have houses and hospitals.
336:49 - And our goal might be in a world that's formatted as this grid,
336:52 - where we have a whole bunch of houses, a house here, house here,
336:55 - two houses over there, maybe we want to try and find a way
336:58 - to place two hospitals on this map.
337:01 - So maybe a hospital here and a hospital there.
337:04 - And the problem now is we want to place two hospitals on the map,
337:07 - but we want to do so with some sort of objective.
337:09 - And our objective in this case is to try and minimize
337:12 - the distance of any of the houses from a hospital.
337:16 - So you might imagine, all right, what's the distance
337:18 - from each of the houses to their nearest hospital?
337:20 - There are a number of ways we could calculate that distance.
337:23 - But one way is using a heuristic we've looked at before,
337:25 - which is the Manhattan distance, this idea of how many rows
337:28 - and columns would you have to move inside of this grid layout in order
337:32 - to get to a hospital, for example.
337:34 - And it turns out, if you take each of these four houses
337:36 - and figure out, all right, how close are they to their nearest hospital,
337:39 - you get something like this, where this house is three away from a hospital,
337:42 - this house is six away, and these two houses are each four away.
337:46 - And if you add all those numbers up together,
337:48 - you get a total cost of 17, for example.
337:51 - So for this particular configuration of hospitals, a hospital here
337:55 - and a hospital there, that state, we might say,
337:58 - has a cost of 17.
337:59 - And the goal of this problem now that we would
338:01 - like to apply a search algorithm to figure out
338:04 - is, can you solve this problem to find a way to minimize that cost?
338:08 - Minimize the total amount if you sum up all of the distances
338:11 - from all the houses to the nearest hospital.
338:14 - How can we minimize that final value?
338:16 - And if we think about this problem a little bit more abstractly,
338:19 - abstracting away from this specific problem
338:21 - and thinking more generally about problems like it,
338:23 - you can often formulate these problems by thinking about them
338:26 - as a state-space landscape, as we'll soon call it.
338:29 - Here in this diagram of a state-space landscape,
338:32 - each of these vertical bars represents a particular state
338:35 - that our world could be in.
338:37 - So for example, each of these vertical bars
338:39 - represents a particular configuration of two hospitals.
338:43 - And the height of this vertical bar is generally
338:45 - going to represent some function of that state, some value of that state.
338:50 - So maybe in this case, the height of the vertical bar
338:52 - represents what is the cost of this particular configuration
338:56 - of hospitals in terms of what is the sum total of all the distances
338:59 - from all of the houses to their nearest hospital.
339:03 - And generally speaking, when we have a state-space landscape,
339:06 - we want to do one of two things.
339:08 - We might be trying to maximize the value of this function,
339:12 - trying to find a global maximum, so to speak, of this state-space landscape,
339:16 - a single state whose value is higher than all of the other states
339:20 - that we could possibly choose from.
339:22 - And generally in this case, when we're trying to find a global maximum,
339:25 - we'll call the function that we're trying to optimize
339:27 - some objective function, some function that
339:30 - measures for any given state how good is that state,
339:34 - such that we can take any state, pass it into the objective function,
339:37 - and get a value for how good that state is.
339:39 - And ultimately, what our goal is is to find one of these states
339:42 - that has the highest possible value for that objective function.
339:46 - An equivalent but reversed problem is the problem
339:49 - of finding a global minimum, some state that has a value
339:52 - after you pass it into this function that is lower than all of the other
339:55 - possible values that we might choose from.
339:57 - And generally speaking, when we're trying to find a global minimum,
340:00 - we call the function that we're calculating a cost function.
340:03 - Generally, each state has some sort of cost,
340:05 - whether that cost is a monetary cost, or a time cost,
340:08 - or in the case of the houses and hospitals,
340:10 - we've been looking at just now, a distance cost in terms
340:13 - of how far away each of the houses is from a hospital.
340:17 - And we're trying to minimize the cost, find
340:19 - the state that has the lowest possible value of that cost.
340:23 - So these are the general types of ideas we
340:25 - might be trying to go for within a state space landscape,
340:28 - trying to find a global maximum, or trying to find a global minimum.
340:32 - And how exactly do we do that?
340:33 - We'll recall that in local search, we generally
340:36 - operate this algorithm by maintaining just a single state,
340:39 - just some current state represented inside of some node,
340:41 - maybe inside of a data structure, where we're
340:43 - keeping track of where we are currently.
340:46 - And then ultimately, what we're going to do is from that state,
340:49 - move to one of its neighbor states.
340:51 - So in this case, represented in this one-dimensional space
340:54 - by just the state immediately to the left or to the right of it.
340:57 - But for any different problem, you might define
340:58 - what it means for there to be a neighbor of a particular state.
341:02 - In the case of a hospital, for example, that we were just looking at,
341:05 - a neighbor might be moving one hospital one space to the left
341:08 - or to the right or up or down.
341:10 - Some state that is close to our current state, but slightly different,
341:14 - and as a result, might have a slightly different value
341:17 - in terms of its objective function or in terms of its cost function.
341:21 - So this is going to be our general strategy in local search,
341:24 - to be able to take a state, maintaining some current node,
341:27 - and move where we're looking at in the state space landscape
341:29 - in order to try to find a global maximum or a global minimum somehow.
341:33 - And perhaps the simplest of algorithms that we
341:35 - could use to implement this idea of local search
341:38 - is an algorithm known as hill climbing.
341:41 - And the basic idea of hill climbing is, let's
341:43 - say I'm trying to maximize the value of my state.
341:46 - I'm trying to figure out where the global maximum is.
341:49 - I'm going to start at a state.
341:50 - And generally, what hill climbing is going to do
341:53 - is it's going to consider the neighbors of that state,
341:55 - that from this state, all right, I could go left or I could go right,
341:58 - and this neighbor happens to be higher and this neighbor happens to be lower.
342:01 - And in hill climbing, if I'm trying to maximize the value,
342:04 - I'll generally pick the highest one I can between the state
342:07 - to the left and right of me.
342:08 - This one is higher.
342:10 - So I'll go ahead and move myself to consider that state instead.
342:13 - And then I'll repeat this process, continually looking at all of my neighbors
342:17 - and picking the highest neighbor, doing the same thing,
342:19 - looking at my neighbors, picking the highest of my neighbors,
342:21 - until I get to a point like right here, where I consider both of my neighbors
342:25 - and both of my neighbors have a lower value than I do.
342:29 - This current state has a value that is higher than any of its neighbors.
342:32 - And at that point, the algorithm terminates.
342:34 - And I can say, all right, here I have now found the solution.
342:38 - And the same thing works in exactly the opposite way
342:40 - for trying to find a global minimum.
342:42 - But the algorithm is fundamentally the same.
342:44 - If I'm trying to find a global minimum and say my current state starts here,
342:47 - I'll continually look at my neighbors, pick the lowest value
342:50 - that I possibly can, until I eventually, hopefully,
342:53 - find that global minimum, a point at which when
342:55 - I look at both of my neighbors, they each have a higher value.
342:58 - And I'm trying to minimize the total score or cost or value
343:02 - that I get as a result of calculating some sort of cost function.
343:06 - So we can formulate this graphical idea in terms of pseudocode.
343:09 - And the pseudocode for hill climbing might look like this.
343:12 - We define some function called hill climb that
343:15 - takes as input the problem that we're trying to solve.
343:17 - And generally, we're going to start in some sort of initial state.
343:21 - So I'll start with a variable called current
343:23 - that is keeping track of my initial state, like an initial configuration
343:26 - of hospitals.
343:27 - And maybe some problems lend themselves to an initial state,
343:30 - some place where you begin.
343:31 - In other cases, maybe not, in which case we might just randomly
343:34 - generate some initial state, just by choosing two locations for hospitals
343:38 - at random, for example, and figuring out from there
343:41 - how we might be able to improve.
343:42 - But that initial state, we're going to store inside of current.
343:46 - And now, here comes our loop, some repetitive process
343:48 - we're going to do again and again until the algorithm terminates.
343:52 - And what we're going to do is first say, let's
343:55 - figure out all of the neighbors of the current state.
343:57 - From my state, what are all of the neighboring
343:59 - states for some definition of what it means to be a neighbor?
344:02 - And I'll go ahead and choose the highest value of all of those neighbors
344:06 - and save it inside of this variable called neighbor.
344:09 - So keep track of the highest-valued neighbor.
344:11 - This is in the case where I'm trying to maximize the value.
344:14 - In the case where I'm trying to minimize the value,
344:15 - you might imagine here, you'll pick the neighbor
344:17 - with the lowest possible value.
344:18 - But these ideas are really fundamentally interchangeable.
344:21 - And it's possible, in some cases, there might be multiple neighbors
344:24 - that each have an equally high value or an equally low value
344:28 - in the minimizing case.
344:29 - And in that case, we can just choose randomly from among them.
344:31 - Choose one of them and save it inside of this variable neighbor.
344:35 - And then the key question to ask is, is this neighbor better
344:39 - than my current state?
344:41 - And if the neighbor, the best neighbor that I was able to find,
344:44 - is not better than my current state, well, then the algorithm is over.
344:48 - And I'll just go ahead and return the current state.
344:50 - If none of my neighbors are better, then I may as well stay where I am,
344:53 - is the general logic of the hill climbing algorithm.
344:56 - But otherwise, if the neighbor is better, then I may as well
344:59 - move to that neighbor.
345:00 - So you might imagine setting current equal to neighbor, where the general idea
345:04 - is if I'm at a current state and I see a neighbor that is better than me,
345:07 - then I'll go ahead and move there.
345:08 - And then I'll repeat the process, continually moving to a better neighbor
345:11 - until I reach a point at which none of my neighbors are better than I am.
345:15 - And at that point, we'd say the algorithm can just terminate there.
345:19 - So let's take a look at a real example of this
345:21 - with these houses and hospitals.
345:23 - So we've seen now that if we put the hospitals in these two locations,
345:26 - that has a total cost of 17.
345:28 - And now we need to define, if we're going to implement this hill climbing
345:31 - algorithm, what it means to take this particular configuration
345:34 - of hospitals, this particular state, and get a neighbor of that state.
345:39 - And a simple definition of neighbor might be just,
345:42 - let's pick one of the hospitals and move it by one square, the left or right
345:46 - or up or down, for example.
345:48 - And that would mean we have six possible neighbors
345:50 - from this particular configuration.
345:52 - We could take this hospital and move it to any of these three possible squares,
345:56 - or we take this hospital and move it to any of those three possible squares.
346:00 - And each of those would generate a neighbor.
346:02 - And what I might do is say, all right, here's
346:04 - the locations and the distances between each of the houses
346:07 - and their nearest hospital.
346:09 - Let me consider all of the neighbors and see if any of them
346:12 - can do better than a cost of 17.
346:14 - And it turns out there are a couple of ways that we could do that.
346:17 - And it doesn't matter if we randomly choose
346:19 - among all the ways that are the best.
346:20 - But one such possible way is by taking a look at this hospital here
346:24 - and considering the directions in which it might move.
346:27 - If we hold this hospital constant, if we take this hospital
346:30 - and move it one square up, for example, that doesn't really help us.
346:33 - It gets closer to the house up here, but it gets further away
346:36 - from the house down here.
346:37 - And it doesn't really change anything for the two houses
346:40 - along the left-hand side.
346:41 - But if we take this hospital on the right and move it one square down,
346:45 - it's the opposite problem.
346:46 - It gets further away from the house up above,
346:49 - and it gets closer to the house down below.
346:51 - The real idea, the goal should be to be able to take this hospital
346:54 - and move it one square to the left.
346:56 - By moving it one square to the left, we move it closer
346:59 - to both of these houses on the right without changing anything
347:02 - about the houses on the left.
347:03 - For them, this hospital is still the closer one, so they aren't affected.
347:06 - So we're able to improve the situation by picking a neighbor that
347:10 - results in a decrease in our total cost.
347:13 - And so we might do that.
347:14 - Move ourselves from this current state to a neighbor
347:16 - by just taking that hospital and moving it.
347:19 - And at this point, there's not a whole lot
347:21 - that can be done with this hospital.
347:22 - But there's still other optimizations we can make, other neighbors
347:25 - we can move to that are going to have a better value.
347:27 - If we consider this hospital, for example,
347:29 - we might imagine that right now it's a bit far up,
347:32 - that both of these houses are a little bit lower.
347:34 - So we might be able to do better by taking this hospital
347:37 - and moving it one square down, moving it down so that now instead
347:40 - of a cost of 15, we're down to a cost of 13
347:43 - for this particular configuration.
347:45 - And we can do even better by taking the hospital
347:47 - and moving it one square to the left.
347:49 - Now instead of a cost of 13, we have a cost of 11,
347:52 - because this house is one away from the hospital.
347:54 - This one is four away.
347:56 - This one is three away.
347:57 - And this one is also three away.
347:59 - So we've been able to do much better than that initial cost
348:02 - that we had using the initial configuration.
348:04 - Just by taking every state and asking ourselves the question,
348:07 - can we do better by just making small incremental changes,
348:11 - moving to a neighbor, moving to a neighbor,
348:12 - and moving to a neighbor after that?
348:15 - And now at this point, we can potentially see that at this point,
348:18 - the algorithm is going to terminate.
348:20 - There's actually no neighbor we can move to
348:22 - that is going to improve the situation, get us a cost that is less than 11.
348:27 - Because if we take this hospital and move it upper to the right,
348:29 - well, that's going to make it further away.
348:31 - If we take it and move it down, that doesn't really change the situation.
348:34 - It gets further away from this house but closer to that house.
348:37 - And likewise, the same story was true for this hospital.
348:40 - Any neighbor we move it to, up, left, down, or right,
348:42 - is either going to make it further away from the houses and increase the cost,
348:46 - or it's going to have no effect on the cost whatsoever.
348:51 - And so the question we might now ask is, is this the best we could do?
348:54 - Is this the best placement of the hospitals we could possibly have?
348:57 - And it turns out the answer is no, because there's a better way
349:00 - that we could place these hospitals.
349:02 - And in particular, there are a number of ways you could do this.
349:05 - But one of the ways is by taking this hospital here
349:07 - and moving it to this square, for example, moving it diagonally
349:10 - by one square, which was not part of our definition of neighbor.
349:13 - We could only move left, right, up, or down.
349:15 - But this is, in fact, better.
349:17 - It has a total cost of 9.
349:18 - It is now closer to both of these houses.
349:21 - And as a result, the total cost is less.
349:24 - But we weren't able to find it, because in order to get there,
349:27 - we had to go through a state that actually wasn't any better than the current
349:31 - state that we had been on previously.
349:33 - And so this appears to be a limitation, or a concern you might have
349:36 - as you go about trying to implement a hill climbing algorithm,
349:39 - is that it might not always give you the optimal solution.
349:43 - If we're trying to maximize the value of any particular state,
349:46 - we're trying to find the global maximum, a concern
349:49 - might be that we could get stuck at one of the local maxima,
349:53 - highlighted here in blue, where a local maxima is any state whose value is
349:57 - higher than any of its neighbors.
349:59 - If we ever find ourselves at one of these two states
350:02 - when we're trying to maximize the value of the state,
350:04 - we're not going to make any changes.
350:05 - We're not going to move left or right.
350:07 - We're not going to move left here, because those states are worse.
350:10 - But yet, we haven't found the global optimum.
350:13 - We haven't done as best as we could do.
350:15 - And likewise, in the case of the hospitals, what we're ultimately
350:18 - trying to do is find a global minimum, find a value that
350:20 - is lower than all of the others.
350:22 - But we have the potential to get stuck at one of the local minima,
350:26 - any of these states whose value is lower than all of its neighbors,
350:30 - but still not as low as the local minima.
350:33 - And so the takeaway here is that it's not always
350:36 - going to be the case that when we run this naive hill climbing algorithm,
350:40 - that we're always going to find the optimal solution.
350:42 - There are things that could go wrong.
350:43 - If we started here, for example, and tried to maximize our value as much
350:47 - as possible, we might move to the highest possible neighbor,
350:50 - move to the highest possible neighbor, move to the highest possible neighbor,
350:54 - and stop, and never realize that there's actually a better state way over there
350:57 - that we could have gone to instead.
351:00 - And other problems you might imagine just by taking a look at this state
351:03 - space landscape are these various different types of plateaus,
351:06 - something like this flat local maximum here,
351:09 - where all six of these states each have the exact same value.
351:12 - And so in the case of the algorithm we showed before,
351:15 - none of the neighbors are better, so we might just
351:17 - get stuck at this flat local maximum.
351:19 - And even if you allowed yourself to move to one of the neighbors,
351:22 - it wouldn't be clear which neighbor you would ultimately move to,
351:25 - and you could get stuck here as well.
351:27 - And there's another one over here.
351:28 - This one is called a shoulder.
351:30 - It's not really a local maximum, because there's still
351:32 - places where we can go higher, not a local minimum, because we can go lower.
351:35 - So we can still make progress, but it's still this flat area,
351:38 - where if you have a local search algorithm,
351:40 - there's potential to get lost here, unable to make some upward or downward
351:44 - progress, depending on whether we're trying to maximize or minimize it,
351:48 - and therefore another potential for us to be
351:50 - able to find a solution that might not actually be the optimal solution.
351:54 - And so because of this potential, the potential that hill climbing
351:57 - has to not always find us the optimal result,
352:00 - it turns out there are a number of different varieties and variations
352:03 - on the hill climbing algorithm that help to solve the problem better
352:07 - depending on the context, and depending on the specific type of problem,
352:10 - some of these variants might be more applicable than others.
352:13 - What we've taken a look at so far is a version of hill climbing
352:16 - generally called steepest ascent hill climbing,
352:19 - where the idea of steepest ascent hill climbing
352:21 - is we are going to choose the highest valued neighbor,
352:24 - in the case where we're trying to maximize or the lowest valued neighbor
352:27 - in cases where we're trying to minimize.
352:28 - But generally speaking, if I have five neighbors
352:31 - and they're all better than my current state,
352:33 - I will pick the best one of those five.
352:36 - Now, sometimes that might work pretty well.
352:37 - It's sort of a greedy approach of trying to take the best operation
352:40 - at any particular time step, but it might not always work.
352:43 - There might be cases where actually I want
352:45 - to choose an option that is slightly better than me,
352:47 - but maybe not the best one because that later on might
352:50 - lead to a better outcome ultimately.
352:52 - So there are other variants that we might consider
352:54 - of this basic hill climbing algorithm.
352:56 - One is known as stochastic hill climbing.
352:58 - And in this case, we choose randomly from all of our higher value neighbors.
353:02 - So if I'm at my current state and there are five neighbors that
353:04 - are all better than I am, rather than choosing the best one,
353:07 - as steep as the set would do, stochastic will just choose
353:10 - randomly from one of them, thinking that if it's better, then it's better.
353:13 - And maybe there's a potential to make forward progress,
353:16 - even if it is not locally the best option I could possibly choose.
353:20 - First choice hill climbing ends up just choosing the very first highest
353:24 - valued neighbor that it follows, behaving on a similar idea,
353:27 - rather than consider all of the neighbors.
353:28 - As soon as we find a neighbor that is better than our current state,
353:31 - we'll go ahead and move there.
353:33 - There may be some efficiency improvements there
353:35 - and maybe has the potential to find a solution
353:37 - that the other strategies weren't able to find.
353:39 - And with all of these variants, we still suffer from the same potential risk,
353:43 - this risk that we might end up at a local minimum or a local maximum.
353:48 - And we can reduce that risk by repeating the process multiple times.
353:52 - So one variant of hill climbing is random restart hill climbing,
353:55 - where the general idea is we'll conduct hill climbing multiple times.
353:59 - If we apply steepest descent hill climbing, for example,
354:02 - we'll start at some random state, try and figure out
354:04 - how to solve the problem and figure out what
354:06 - is the local maximum or local minimum we get to.
354:09 - And then we'll just randomly restart and try again,
354:11 - choose a new starting configuration, try and figure out
354:14 - what the local maximum or minimum is, and do this some number of times.
354:17 - And then after we've done it some number of times,
354:19 - we can pick the best one out of all of the ones that we've taken a look at.
354:23 - So there's another option we have access to as well.
354:26 - And then, although I said that generally local search will usually
354:29 - just keep track of a single node and then move to one of its neighbors,
354:33 - there are variants of hill climbing that are known as local beam searches,
354:36 - where rather than keep track of just one current best state,
354:39 - we're keeping track of k highest valued neighbors, such that rather than
354:43 - starting at one random initial configuration,
354:46 - I might start with 3 or 4 or 5, randomly generate all the neighbors,
354:50 - and then pick the 3 or 4 or 5 best of all of the neighbors that I find,
354:54 - and continually repeat this process, with the idea
354:57 - being that now I have more options that I'm considering,
355:00 - more ways that I could potentially navigate myself
355:02 - to the optimal solution that might exist for a particular problem.
355:07 - So let's now take a look at some actual code that
355:09 - can implement some of these kinds of ideas, something
355:11 - like steepest ascent hill climbing, for example,
355:14 - for trying to solve this hospital problem.
355:17 - So I'm going to go ahead and go into my hospitals directory, where
355:20 - I've actually set up the basic framework for solving this type of problem.
355:24 - I'll go ahead and go into hospitals.py, and we'll
355:26 - take a look at the code we've created here.
355:28 - I've defined a class that is going to represent the state space.
355:32 - So the space has a height, and a width, and also some number of hospitals.
355:36 - So you can configure how big is your map, how many hospitals should go here.
355:41 - We have a function for adding a new house to the state space,
355:44 - and then some functions that are going to get
355:45 - me all of the available spaces for if I want to randomly place hospitals
355:49 - in particular locations.
355:50 - And here now is the hill climbing algorithm.
355:54 - So what are we going to do in the hill climbing algorithm?
355:56 - Well, we're going to start by randomly initializing
355:59 - where the hospitals are going to go.
356:01 - We don't know where the hospitals should actually be,
356:03 - so let's just randomly place them.
356:05 - So here I'm running a loop for each of the hospitals that I have.
356:08 - I'm going to go ahead and add a new hospital at some random location.
356:13 - So I basically get all of the available spaces,
356:15 - and I randomly choose one of them as where
356:17 - I would like to add this particular hospital.
356:20 - I have some logging output and generating some images,
356:23 - which we'll take a look at a little bit later.
356:25 - But here is the key idea.
356:27 - So I'm going to just keep repeating this algorithm.
356:30 - I could specify a maximum of how many times I want it to run,
356:33 - or I could just run it up until it hits a local maximum or local minimum.
356:37 - And now we'll basically consider all of the hospitals
356:40 - that could potentially move.
356:41 - So consider each of the two hospitals or more hospitals
356:43 - if they're more than that.
356:45 - And consider all of the places where that hospital could move to,
356:49 - some neighbor of that hospital that we can move the neighbor to.
356:53 - And then see, is this going to be better than where we were currently?
356:58 - So if it is going to be better, then we'll
357:00 - go ahead and update our best neighbor and keep
357:02 - track of this new best neighbor that we found.
357:05 - And then afterwards, we can ask ourselves the question,
357:08 - if best neighbor cost is greater than or equal
357:10 - to the cost of the current set of hospitals,
357:13 - meaning if the cost of our best neighbor is greater than the current cost,
357:18 - meaning our best neighbor is worse than our current state,
357:21 - well, then we shouldn't make any changes at all.
357:23 - And we should just go ahead and return the current set of hospitals.
357:27 - But otherwise, we can update our hospitals
357:29 - in order to change them to one of the best neighbors.
357:32 - And if there are multiple that are all equivalent,
357:34 - I'm here using random.choice to say go ahead and choose one randomly.
357:38 - So this is really just a Python implementation of that same idea
357:41 - that we were just talking about, this idea of taking a current state,
357:44 - some current set of hospitals, generating all of the neighbors,
357:48 - looking at all of the ways we could take one hospital
357:50 - and move it one square to the left or right or up or down,
357:53 - and then figuring out, based on all of that information, which
357:56 - is the best neighbor or the set of all the best neighbors,
357:59 - and then choosing from one of those.
358:02 - And each time, we go ahead and generate an image in order to do that.
358:05 - And so now what we're doing is if we look down at the bottom,
358:08 - I'm going to randomly generate a space with height 10 and width 20.
358:12 - And I'll say go ahead and put three hospitals somewhere in the space.
358:16 - I'll randomly generate 15 houses that I just go ahead
358:18 - and add in random locations.
358:20 - And now I'm going to run this hill climbing algorithm in order
358:23 - to try and figure out where we should place those hospitals.
358:27 - So we'll go ahead and run this program by running Python hospitals.
358:31 - And we see that we started.
358:32 - Our initial state had a cost of 72, but we
358:35 - were able to continually find neighbors that were able to decrease that cost,
358:38 - decrease to 69, 66, 63, so on and so forth, all the way down to 53,
358:43 - as the best neighbor we were able to ultimately find.
358:46 - And we can take a look at what that looked like
358:48 - by just opening up these files.
358:50 - So here, for example, was the initial configuration.
358:53 - We randomly selected a location for each of these 15 different houses
358:57 - and then randomly selected locations for one, two, three hospitals
359:01 - that were just located somewhere inside of the state space.
359:04 - And if you add up all the distances from each of the houses
359:07 - to their nearest hospital, you get a total cost of about 72.
359:11 - And so now the question is, what neighbors can we move to
359:14 - that improve the situation?
359:16 - And it looks like the first one the algorithm found
359:18 - was by taking this house that was over there on the right
359:21 - and just moving it to the left.
359:23 - And that probably makes sense because if you
359:25 - look at the houses in that general area, really these five houses look like
359:29 - they're probably the ones that are going to be closest to this hospital over here.
359:33 - Moving it to the left decreases the total distance, at least
359:36 - to most of these houses, though it does increase that distance for one of them.
359:40 - And so we're able to make these improvements to the situation
359:43 - by continually finding ways that we can move these hospitals around
359:47 - until we eventually settle at this particular state that
359:50 - has a cost of 53, where we figured out a position for each of the hospitals.
359:54 - And now none of the neighbors that we could move to
359:57 - are actually going to improve the situation.
359:59 - We can take this hospital and this hospital and that hospital
360:02 - and look at each of the neighbors.
360:03 - And none of those are going to be better than this particular configuration.
360:07 - And again, that's not to say that this is the best we could do.
360:10 - There might be some other configuration of hospitals
360:12 - that is a global minimum.
360:14 - And this might just be a local minimum that is the best of all of its neighbors,
360:18 - but maybe not the best in the entire possible state space.
360:21 - And you could search through the entire state space
360:24 - by considering all of the possible configurations for hospitals.
360:27 - But ultimately, that's going to be very time intensive,
360:29 - especially as our state space gets bigger and there
360:31 - might be more and more possible states.
360:33 - It's going to take quite a long time to look through all of them.
360:36 - And so being able to use these sort of local search algorithms
360:39 - can often be quite good for trying to find the best solution we can do.
360:42 - And especially if we don't care about doing the best possible
360:45 - and we just care about doing pretty good and finding
360:47 - a pretty good placement of those hospitals,
360:50 - then these methods can be particularly powerful.
360:53 - But of course, we can try and mitigate some of this concern
360:56 - by instead of using hill climbing to use random restart,
360:59 - this idea of rather than just hill climb one time,
361:02 - we can hill climb multiple times and say,
361:04 - try hill climbing a whole bunch of times on the exact same map
361:07 - and figure out what is the best one that we've been able to find.
361:10 - And so I've here implemented a function for random restart
361:14 - that restarts some maximum number of times.
361:17 - And what we're going to do is repeat that number of times this process of just
361:22 - go ahead and run the hill climbing algorithm,
361:24 - figure out what the cost is of getting from all the houses to the hospitals,
361:28 - and then figure out is this better than we've done so far.
361:31 - So I can try this exact same idea where instead of running hill climbing,
361:35 - I'll go ahead and run random restart.
361:37 - And I'll randomly restart maybe 20 times, for example.
361:41 - And we'll go ahead and now I'll remove all the images
361:44 - and then rerun the program.
361:46 - And now we started by finding a original state.
361:49 - When we initially ran hill climbing, the best cost
361:51 - we were able to find was 56.
361:53 - Each of these iterations is a different iteration of the hill climbing
361:56 - algorithm.
361:57 - We're running hill climbing not one time, but 20 times here,
362:00 - each time going until we find a local minimum in this case.
362:04 - And we look and see each time did we do better
362:06 - than we did the best time we've done so far.
362:09 - So we went from 56 to 46.
362:11 - This one was greater, so we ignored it.
362:12 - This one was 41, which was less, so we went ahead and kept that one.
362:16 - And for all of the remaining 16 times that we
362:18 - tried to implement hill climbing and we tried to run the hill climbing
362:21 - algorithm, we couldn't do any better than that 41.
362:25 - Again, maybe there is a way to do better that we just didn't find,
362:28 - but it looks like that way ended up being a pretty good solution
362:31 - to the problem.
362:32 - That was attempt number three, starting from counting at zero.
362:36 - So we can take a look at that, open up number three.
362:39 - And this was the state that happened to have a cost of 41,
362:42 - that after running the hill climbing algorithm
362:45 - on some particular random initial configuration of hospitals,
362:48 - this is what we found was the local minimum in terms
362:51 - of trying to minimize the cost.
362:53 - And it looks like we did pretty well.
362:54 - This hospital is pretty close to this region.
362:56 - This one is pretty close to these houses here.
362:58 - This hospital looks about as good as we can do
363:01 - for trying to capture those houses over on that side.
363:03 - And so these sorts of algorithms can be quite useful
363:06 - for trying to solve these problems.
363:09 - But the real problem with many of these different types of hill climbing,
363:12 - steepest of sense, stochastic, first choice, and so forth,
363:15 - is that they never make a move that makes our situation worse.
363:18 - They're always going to take ourselves in our current state,
363:21 - look at the neighbors, and consider can we do better than our current state
363:24 - and move to one of those neighbors.
363:26 - Which of those neighbors we choose might vary among these various different
363:29 - types of algorithms, but we never go from a current position
363:32 - to a position that is worse than our current position.
363:35 - And ultimately, that's what we're going to need to do
363:37 - if we want to be able to find a global maximum or a global minimum.
363:40 - Because sometimes if we get stuck, we want
363:42 - to find some way of dislodging ourselves from our local maximum
363:46 - or local minimum in order to find the global maximum or the global minimum
363:50 - or increase the probability that we do find it.
363:52 - And so the most popular technique for trying
363:54 - to approach the problem from that angle is a technique known
363:57 - as simulated annealing, simulated because it's modeling
364:00 - after a real physical process of annealing, where you can think about this
364:03 - in terms of physics, a physical situation where
364:06 - you have some system of particles.
364:08 - And you might imagine that when you heat up
364:10 - a particular physical system, there's a lot of energy there.
364:12 - Things are moving around quite randomly.
364:14 - But over time, as the system cools down, it eventually
364:17 - settles into some final position.
364:20 - And that's going to be the general idea of simulated annealing.
364:23 - We're going to simulate that process of some high temperature system where
364:27 - things are moving around randomly quite frequently,
364:29 - but over time decreasing that temperature until we eventually
364:32 - settle at our ultimate solution.
364:35 - And the idea is going to be if we have some state space landscape that
364:38 - looks like this and we begin at its initial state here,
364:42 - if we're looking for a global maximum and we're
364:44 - trying to maximize the value of the state,
364:46 - our traditional hill climbing algorithms would just take the state
364:50 - and look at the two neighbor ones and always
364:52 - pick the one that is going to increase the value of the state.
364:55 - But if we want some chance of being able to find the global maximum,
364:58 - we can't always make good moves.
365:01 - We have to sometimes make bad moves and allow ourselves
365:04 - to make a move in a direction that actually seems for now
365:08 - to make our situation worse such that later we
365:11 - can find our way up to that global maximum in terms
365:14 - of trying to solve that problem.
365:16 - Of course, once we get up to this global maximum,
365:18 - once we've done a whole lot of the searching,
365:20 - then we probably don't want to be moving to states
365:22 - that are worse than our current state.
365:24 - And so this is where this metaphor for annealing
365:26 - starts to come in, where we want to start making more random moves
365:30 - and over time start to make fewer of those random moves based
365:33 - on a particular temperature schedule.
365:36 - So the basic outline looks something like this.
365:38 - Early on in simulated annealing, we have a higher temperature state.
365:42 - And what we mean by a higher temperature state
365:44 - is that we are more likely to accept neighbors that
365:47 - are worse than our current state.
365:49 - We might look at our neighbors.
365:50 - And if one of our neighbors is worse than the current state,
365:53 - especially if it's not all that much worse,
365:54 - if it's pretty close but just slightly worse,
365:57 - then we might be more likely to accept that and go ahead
365:59 - and move to that neighbor anyways.
366:02 - But later on as we run simulated annealing,
366:04 - we're going to decrease that temperature.
366:06 - And at a lower temperature, we're going to be less likely to accept neighbors
366:10 - that are worse than our current state.
366:12 - Now to formalize this and put a little bit of pseudocode to it,
366:15 - here is what that algorithm might look like.
366:17 - We have a function called simulated annealing
366:19 - that takes as input the problem we're trying to solve
366:21 - and also potentially some maximum number of times
366:24 - we might want to run the simulated annealing process, how many different
366:27 - neighbors we're going to try and look for.
366:29 - And that value is going to vary based on the problem you're trying to solve.
366:33 - We'll, again, start with some current state
366:34 - that will be equal to the initial state of the problem.
366:37 - But now we need to repeat this process over and over
366:40 - for max number of times.
366:42 - Repeat some process some number of times where we're first
366:45 - going to calculate a temperature.
366:48 - And this temperature function takes the current time t
366:51 - starting at 1 going all the way up to max
366:53 - and then gives us some temperature that we can use in our computation,
366:57 - where the idea is that this temperature is going to be higher early on
367:01 - and it's going to be lower later on.
367:02 - So there are a number of ways this temperature function could often work.
367:05 - One of the simplest ways is just to say it
367:07 - is like the proportion of time that we still have remaining.
367:10 - Out of max units of time, how much time do we have remaining?
367:14 - You start off with a lot of that time remaining.
367:16 - And as time goes on, the temperature is going to decrease
367:18 - because you have less and less of that remaining time still available to you.
367:22 - So we calculate a temperature for the current time.
367:25 - And then we pick a random neighbor of the current state.
367:28 - No longer are we going to be picking the best neighbor that we possibly can
367:31 - or just one of the better neighbors that we can.
367:33 - We're going to pick a random neighbor.
367:34 - It might be better.
367:35 - It might be worse.
367:36 - But we're going to calculate that.
367:37 - We're going to calculate delta E, E for energy in this case,
367:40 - which is just how much better is the neighbor than the current state.
367:45 - So if delta E is positive, that means the neighbor
367:47 - is better than our current state.
367:49 - If delta E is negative, that means the neighbor
367:51 - is worse than our current state.
367:53 - And so we can then have a condition that looks like this.
367:56 - If delta E is greater than 0, that means the neighbor state
367:59 - is better than our current state.
368:01 - And if ever that situation arises, we'll just go ahead and update current
368:05 - to be that neighbor.
368:06 - Same as before, move where we are currently to be the neighbor
368:09 - because the neighbor is better than our current state.
368:11 - We'll go ahead and accept that.
368:13 - But now the difference is that whereas before, we never,
368:16 - ever wanted to take a move that made our situation worse,
368:19 - now we sometimes want to make a move that is actually
368:22 - going to make our situation worse because sometimes we're
368:24 - going to need to dislodge ourselves from a local minimum or local maximum
368:27 - to increase the probability that we're able to find the global minimum
368:31 - or the global maximum a little bit later.
368:34 - And so how do we do that?
368:35 - How do we decide to sometimes accept some state that might actually be worse?
368:39 - Well, we're going to accept a worse state with some probability.
368:43 - And that probability needs to be based on a couple of factors.
368:46 - It needs to be based in part on the temperature,
368:49 - where if the temperature is higher, we're more likely to move to a worse
368:52 - neighbor.
368:52 - And if the temperature is lower, we're less likely to move to a worse neighbor.
368:56 - But it also, to some degree, should be based on delta E.
369:00 - If the neighbor is much worse than the current state,
369:03 - we probably want to be less likely to choose that
369:05 - than if the neighbor is just a little bit worse than the current state.
369:09 - So again, there are a couple of ways you could calculate this.
369:12 - But it turns out one of the most popular is just
369:14 - to calculate E to the power of delta E over T, where E is just a constant.
369:19 - Delta E over T are based on delta E and T here.
369:22 - We calculate that value.
369:24 - And that'll be some value between 0 and 1.
369:26 - And that is the probability with which we should just say, all right,
369:29 - let's go ahead and move to that neighbor.
369:31 - And it turns out that if you do the math for this value,
369:33 - when delta E is such that the neighbor is not
369:36 - that much worse than the current state, that's
369:38 - going to be more likely that we're going to go ahead and move to that state.
369:41 - And likewise, when the temperature is lower,
369:43 - we're going to be less likely to move to that neighboring state as well.
369:47 - So now this is the big picture for simulated annealing,
369:49 - this process of taking the problem and going ahead and generating
369:53 - random neighbors will always move to a neighbor
369:55 - if it's better than our current state.
369:56 - But even if the neighbor is worse than our current state,
369:59 - we'll sometimes move there depending on how much worse it is
370:03 - and also based on the temperature.
370:04 - And as a result, the hope, the goal of this whole process
370:07 - is that as we begin to try and find our way to the global maximum
370:11 - or the global minimum, we can dislodge ourselves
370:14 - if we ever get stuck at a local maximum or local minimum
370:17 - in order to eventually make our way to exploring
370:19 - the part of the state space that is going to be the best.
370:22 - And then as the temperature decreases, eventually we settle there
370:25 - without moving around too much from what we've
370:27 - found to be the globally best thing that we can do thus far.
370:31 - So at the very end, we just return whatever the current state happens to be.
370:35 - And that is the conclusion of this algorithm.
370:37 - We've been able to figure out what the solution is.
370:40 - And these types of algorithms have a lot of different applications.
370:44 - Any time you can take a problem and formulate it
370:46 - as something where you can explore a particular configuration
370:49 - and then ask, are any of the neighbors better
370:51 - than this current configuration and have some way of measuring that,
370:54 - then there is an applicable case for these hill climbing, simulated annealing
370:58 - types of algorithms.
370:59 - So sometimes it can be for facility location type problems,
371:02 - like for when you're trying to plan a city and figure out
371:05 - where the hospitals should be.
371:06 - But there are definitely other applications as well.
371:08 - And one of the most famous problems in computer science
371:11 - is the traveling salesman problem.
371:13 - Traveling salesman problem generally is formulated like this.
371:16 - I have a whole bunch of cities here indicated by these dots.
371:19 - And what I'd like to do is find some route that
371:22 - takes me through all of the cities and ends up back where I started.
371:25 - So some route that starts here, goes through all these cities,
371:29 - and ends up back where I originally started.
371:32 - And what I might like to do is minimize the total distance
371:35 - that I have to travel or the total cost of taking this entire path.
371:40 - And you can imagine this is a problem that's very applicable in situations
371:43 - like when delivery companies are trying to deliver things
371:46 - to a whole bunch of different houses, they
371:48 - want to figure out, how do I get from the warehouse
371:51 - to all these various different houses and get back again,
371:53 - all using as minimal time and distance and energy as possible.
371:57 - So you might want to try to solve these sorts of problems.
372:00 - But it turns out that solving this particular kind of problem
372:03 - is very computationally difficult.
372:05 - It is a very computationally expensive task to be able to figure it out.
372:09 - This falls under the category of what are known as NP-complete problems,
372:12 - problems that there is no known efficient way to try and solve
372:16 - these sorts of problems.
372:17 - And so what we ultimately have to do is come up with some approximation,
372:21 - some ways of trying to find a good solution, even if we're not
372:25 - going to find the globally best solution that we possibly can,
372:27 - at least not in a feasible or tractable amount of time.
372:30 - And so what we could do is take the traveling salesman problem
372:34 - and try to formulate it using local search and ask a question like, all right,
372:38 - I can pick some state, some configuration, some route between all
372:41 - of these nodes.
372:42 - And I can measure the cost of that state, figure out what the distance is.
372:46 - And I might now want to try to minimize that cost as much as possible.
372:49 - And then the only question now is, what does it
372:51 - mean to have a neighbor of this state?
372:54 - What does it mean to take this particular route
372:55 - and have some neighboring route that is close to it but slightly different
372:59 - and such that it might have a different total distance?
373:01 - And there are a number of different definitions
373:03 - for what a neighbor of a traveling salesman configuration might look like.
373:07 - But one way is just to say, a neighbor is
373:09 - what happens if we pick two of these edges between nodes
373:13 - and switch them effectively.
373:16 - So for example, I might pick these two edges here,
373:19 - these two that just happened across this node goes here, this node goes there,
373:23 - and go ahead and switch them.
373:24 - And what that process will generally look like
373:26 - is removing both of these edges from the graph, taking this node,
373:31 - and connecting it to the node it wasn't connected to.
373:33 - So connecting it up here instead.
373:35 - We'll need to take these arrows that were originally
373:37 - going this way and reverse them, so move them going the other way,
373:40 - and then just fill in that last remaining blank,
373:42 - add an arrow that goes in that direction instead.
373:45 - So by taking two edges and just switching them,
373:48 - I have been able to consider one possible neighbor
373:51 - of this particular configuration.
373:53 - And it looks like this neighbor is actually better.
373:55 - It looks like this probably travels a shorter distance in order
373:57 - to get through all the cities through this route
374:00 - than the current state did.
374:02 - And so you could imagine implementing this idea inside of a hill climbing
374:05 - or simulated annealing algorithm, where we repeat this process
374:08 - to try and take a state of this traveling salesman problem,
374:11 - look at all the neighbors, and then move to the neighbors if they're better,
374:14 - or maybe even move to the neighbors if they're worse,
374:16 - until we eventually settle upon some best solution
374:20 - that we've been able to find.
374:21 - And it turns out that these types of approximation algorithms,
374:24 - even if they don't always find the very best solution,
374:26 - can often do pretty well at trying to find solutions that are helpful too.
374:32 - So that then was a look at local search, a particular category of algorithms
374:36 - that can be used for solving a particular type of problem,
374:38 - where we don't really care about the path to the solution.
374:41 - I didn't care about the steps I took to decide
374:43 - where the hospitals should go.
374:44 - I just cared about the solution itself.
374:46 - I just care about where the hospitals should be,
374:49 - or what the route through the traveling salesman journey really ought to be.
374:53 - Another type of algorithm that might come up
374:55 - are known as these categories of linear programming types of problems.
374:59 - And linear programming often comes up in the context
375:01 - where we're trying to optimize for some mathematical function.
375:04 - But oftentimes, linear programming will come up
375:07 - when we might have real numbered values.
375:10 - So it's not just discrete fixed values that we might have,
375:13 - but any decimal values that we might want to be able to calculate.
375:16 - And so linear programming is a family of types of problems
375:19 - where we might have a situation that looks like this, where
375:22 - the goal of linear programming is to minimize a cost function.
375:26 - And you can invert the numbers and say try and maximize it,
375:29 - but often we'll frame it as trying to minimize a cost function that
375:32 - has some number of variables, x1, x2, x3, all the way up to xn,
375:36 - just some number of variables that are involved,
375:38 - things that I want to know the values to.
375:41 - And this cost function might have coefficients
375:43 - in front of those variables.
375:45 - And this is what we would call a linear equation,
375:47 - where we just have all of these variables that might be multiplied
375:50 - by a coefficient and then add it together.
375:52 - We're not going to square anything or cube anything,
375:53 - because that'll give us different types of equations.
375:56 - With linear programming, we're just dealing with linear equations
375:59 - in addition to linear constraints, where a constraint is going
376:03 - to look something like if we sum up this particular equation that
376:07 - is just some linear combination of all of these variables,
376:10 - it is less than or equal to some bound b.
376:13 - And we might have a whole number of these various different constraints
376:16 - that we might place onto our linear programming exercise.
376:21 - And likewise, just as we can have constraints that are saying this linear
376:24 - equation is less than or equal to some bound b,
376:27 - it might also be equal to something.
376:28 - That if you want some sum of some combination of variables
376:31 - to be equal to a value, you can specify that.
376:33 - And we can also maybe specify that each variable has lower and upper bounds,
376:37 - that it needs to be a positive number, for example,
376:39 - or it needs to be a number that is less than 50, for example.
376:42 - And there are a number of other choices that we
376:44 - can make there for defining what the bounds of a variable are.
376:47 - But it turns out that if you can take a problem
376:50 - and formulate it in these terms, formulate the problem as your goal
376:54 - is to minimize a cost function, and you're
376:56 - minimizing that cost function subject to particular constraints,
377:00 - subjects to equations that are of the form like this of some sequence
377:03 - of variables is less than a bound or is equal to some particular value,
377:07 - then there are a number of algorithms that already
377:10 - exist for solving these sorts of problems.
377:13 - So let's go ahead and take a look at an example.
377:16 - Here's an example of a problem that might come up
377:18 - in the world of linear programming.
377:19 - Often, this is going to come up when we're
377:21 - trying to optimize for something.
377:23 - And we want to be able to do some calculations,
377:25 - and we have constraints on what we're trying to optimize.
377:27 - And so it might be something like this.
377:29 - In the context of a factory, we have two machines, x1 and x2.
377:34 - x1 costs $50 an hour to run.
377:36 - x2 costs $80 an hour to run.
377:38 - And our goal, what we're trying to do, our objective,
377:41 - is to minimize the total cost.
377:45 - So that's what we'd like to do.
377:46 - But we need to do so subject to certain constraints.
377:49 - So there might be a labor constraint that x1
377:51 - requires five units of labor per hour, x2 requires two units of labor per hour,
377:56 - and we have a total of 20 units of labor that we have to spend.
378:00 - So this is a constraint.
378:01 - We have no more than 20 units of labor that we can spend,
378:04 - and we have to spend it across x1 and x2, each of which
378:08 - requires a different amount of labor.
378:10 - And we might also have a constraint like this
378:13 - that tells us x1 is going to produce 10 units of output per hour,
378:16 - x2 is going to produce 12 units of output per hour,
378:19 - and the company needs 90 units of output.
378:22 - So we have some goal, something we need to achieve.
378:24 - We need to achieve 90 units of output, but there are some constraints
378:28 - that x1 can only produce 10 units of output per hour,
378:31 - x2 produces 12 units of output per hour.
378:34 - These types of problems come up quite frequently,
378:36 - and you can start to notice patterns in these types of problems,
378:39 - problems where I am trying to optimize for some goal, minimizing cost,
378:43 - maximizing output, maximizing profits, or something like that.
378:46 - And there are constraints that are placed on that process.
378:50 - And so now we just need to formulate this problem
378:52 - in terms of linear equations.
378:55 - So let's start with this first point.
378:56 - Two machines, x1 and x2, x costs $50 an hour, x2 costs $80 an hour.
379:01 - Here we can come up with an objective function that might look like this.
379:05 - This is our cost function, rather.
379:07 - 50 times x1 plus 80 times x2, where x1 is going
379:11 - to be a variable representing how many hours do we run machine x1 for,
379:15 - x2 is going to be a variable representing how many hours
379:18 - are we running machine x2 for.
379:20 - And what we're trying to minimize is this cost function, which
379:23 - is just how much it costs to run each of these machines per hour summed up.
379:27 - This is an example of a linear equation, just some combination
379:31 - of these variables plus coefficients that are placed in front of them.
379:34 - And I would like to minimize that total value.
379:37 - But I need to do so subject to these constraints.
379:40 - x1 requires 50 units of labor per hour, x2 requires 2,
379:44 - and we have a total of 20 units of labor to spend.
379:46 - And so that gives us a constraint of this form.
379:50 - 5 times x1 plus 2 times x2 is less than or equal to 20.
379:54 - 20 is the total number of units of labor we have to spend.
379:57 - And that's spent across x1 and x2, each of which
380:00 - requires a different number of units of labor per hour, for example.
380:05 - And finally, we have this constraint here.
380:07 - x1 produces 10 units of output per hour, x2 produces 12,
380:10 - and we need 90 units of output.
380:13 - And so this might look something like this.
380:15 - That 10x1 plus 12x2, this is amount of output per hour,
380:20 - it needs to be at least 90.
380:21 - We can do better or great, but it needs to be at least 90.
380:25 - And if you recall from my formulation before,
380:27 - I said that generally speaking in linear programming,
380:29 - we deal with equals constraints or less than or equal to constraints.
380:33 - So we have a greater than or equal to sign here.
380:35 - That's not a problem.
380:36 - Whenever we have a greater than or equal to sign,
380:38 - we can just multiply the equation by negative 1,
380:40 - and that'll flip it around to a less than or equals negative 90,
380:44 - for example, instead of a greater than or equal to 90.
380:47 - And that's going to be an equivalent expression
380:49 - that we can use to represent this problem.
380:51 - So now that we have this cost function and these constraints
380:55 - that it's subject to, it turns out there are a number of algorithms
380:58 - that can be used in order to solve these types of problems.
381:02 - And these problems go a little bit more into geometry and linear algebra
381:05 - than we're really going to get into.
381:06 - But the most popular of these types of algorithms
381:09 - are simplex, which was one of the first algorithms discovered
381:12 - for trying to solve linear programs.
381:14 - And later on, a class of interior point algorithms
381:17 - can be used to solve this type of problem as well.
381:20 - The key is not to understand exactly how these algorithms work,
381:23 - but to realize that these algorithms exist for efficiently finding solutions
381:27 - any time we have a problem of this particular form.
381:30 - And so we can take a look, for example, at the production directory here,
381:39 - where here I have a file called production.py, where here I'm
381:43 - using scipy, which was the library for a lot of science-related functions
381:47 - within Python.
381:49 - And I can go ahead and just run this optimization function
381:52 - in order to run a linear program.
381:54 - .linprog here is going to try and solve this linear program for me,
381:58 - where I provide to this expression, to this function call,
382:01 - all of the data about my linear program.
382:03 - So it needs to be in a particular format, which
382:05 - might be a little confusing at first.
382:07 - But this first argument to scipy.optimize.linprogramming
382:11 - is the cost function, which is in this case just an array or a list that
382:15 - has 50 and 80, because my original cost function was 50 times x1 plus 80
382:20 - times x2.
382:21 - So I just tell Python, 50 and 80, those are the coefficients
382:25 - that I am now trying to optimize for.
382:27 - And then I provide all of the constraints.
382:30 - So the constraints, and I wrote them up above in comments,
382:33 - is the constraint 1 is 5x1 plus 2x2 is less than or equal to 20.
382:39 - And constraint 2 is negative 10x1 plus negative 12x2
382:44 - is less than or equal to negative 90.
382:47 - And so scipy expects these constraints to be in a particular format.
382:51 - It first expects me to provide all of the coefficients
382:54 - for the upper bound equations, ub just for upper bound,
382:58 - where the coefficients of the first equation
383:00 - are 5 and 2, because we have 5x1 and 2x2.
383:03 - And the coefficients for the second equation
383:06 - are negative 10 and negative 12, because I have negative 10x1 plus negative 12x2.
383:12 - And then here, we provide it as a separate argument,
383:14 - just to keep things separate, what the actual bound is.
383:17 - What is the upper bound for each of these constraints?
383:20 - Well, for the first constraint, the upper bound is 20.
383:22 - That was constraint number 1.
383:24 - And then for constraint number 2, the upper bound is 90.
383:28 - So a bit of a cryptic way of representing it.
383:30 - It's not quite as simple as just writing the mathematical equations.
383:33 - What really is being expected here are all of the coefficients
383:36 - and all of the numbers that are in these equations
383:39 - by first providing the coefficients for the cost function,
383:42 - then providing all the coefficients for the inequality constraints,
383:45 - and then providing all of the upper bounds for those inequality constraints.
383:50 - And once all of that information is there,
383:52 - then we can run any of these interior point algorithms or the simplex algorithm.
383:57 - Even if you don't understand how it works,
383:59 - you can just run the function and figure out what the result should be.
384:02 - And here, I said if the result is a success,
384:04 - we were able to solve this problem.
384:06 - Go ahead and print out what the value of x1 and x2 should be.
384:10 - Otherwise, go ahead and print out no solution.
384:13 - And so if I run this program by running python production.py,
384:19 - it takes a second to calculate.
384:21 - But then we see here is what the optimal solution should be.
384:24 - x1 should run for 1.5 hours.
384:26 - x2 should run for 6.25 hours.
384:30 - And we were able to do this by just formulating the problem
384:33 - as a linear equation that we were trying to optimize,
384:36 - some cost that we were trying to minimize,
384:38 - and then some constraints that were placed on that.
384:40 - And many, many problems fall into this category of problems
384:43 - that you can solve if you can just figure out how to use equations
384:47 - and use these constraints to represent that general idea.
384:51 - And that's a theme that's going to come up a couple of times today,
384:53 - where we want to be able to take some problem
384:55 - and reduce it down to some problem we know
384:57 - how to solve in order to begin to find a solution
385:01 - and to use existing methods that we can use in order
385:04 - to find a solution more effectively or more efficiently.
385:08 - And it turns out that these types of problems, where we have constraints,
385:11 - show up in other ways too.
385:13 - And there's an entire class of problems that's more generally just known
385:16 - as constraint satisfaction problems.
385:18 - And we're going to now take a look at how you might formulate a constraint
385:21 - satisfaction problem and how you might go about solving a constraint
385:24 - satisfaction problem.
385:26 - But the basic idea of a constraint satisfaction problem
385:28 - is we have some number of variables that need to take on some values.
385:32 - And we need to figure out what values each of those variables should take on.
385:35 - But those variables are subject to particular constraints
385:39 - that are going to limit what values those variables can actually take on.
385:43 - So let's take a look at a real world example, for example.
385:46 - Let's look at exam scheduling, that I have
385:48 - four students here, students 1, 2, 3, and 4.
385:51 - Each of them is taking some number of different classes.
385:53 - Classes here are going to be represented by letters.
385:56 - So student 1 is enrolled in courses A, B, and C. Student 2
386:00 - is enrolled in courses B, D, and E, so on and so forth.
386:04 - And now, say university, for example, is trying
386:07 - to schedule exams for all of these courses.
386:10 - But there are only three exam slots on Monday, Tuesday, and Wednesday.
386:13 - And we have to schedule an exam for each of these courses.
386:17 - But the constraint now, the constraint we
386:19 - have to deal with with the scheduling, is
386:21 - that we don't want anyone to have to take two exams on the same day.
386:25 - We would like to try and minimize that or eliminate it if at all possible.
386:29 - So how do we begin to represent this idea?
386:31 - How do we structure this in a way that a computer with an AI algorithm
386:35 - can begin to try and solve the problem?
386:37 - Well, let's in particular just look at these classes that we might take
386:41 - and represent each of the courses as some node inside of a graph.
386:45 - And what we'll do is we'll create an edge between two nodes in this graph
386:49 - if there is a constraint between those two nodes.
386:54 - So what does this mean?
386:55 - Well, we can start with student 1, who's enrolled in courses A, B, and C.
386:59 - What that means is that A and B can't have an exam at the same time.
387:03 - A and C can't have an exam at the same time.
387:06 - And B and C also can't have an exam at the same time.
387:09 - And I can represent that in this graph by just drawing edges.
387:12 - One edge between A and B, one between B and C,
387:15 - and then one between C and A. And that encodes now the idea
387:18 - that between those nodes, there is a constraint.
387:21 - And in particular, the constraint happens to be
387:23 - that these two can't be equal to each other,
387:25 - though there are other types of constraints that are possible,
387:28 - depending on the type of problem that you're trying to solve.
387:31 - And then we can do the same thing for each of the other students.
387:34 - So for student 2, who's enrolled in courses B, D, and E,
387:36 - well, that means B, D, and E, those all need
387:39 - to have edges that connect each other as well.
387:41 - Student 3 is enrolled in courses C, E, and F. So we'll go ahead
387:44 - and take C, E, and F and connect those by drawing edges between them too.
387:48 - And then finally, student 4 is enrolled in courses E, F, and G.
387:52 - And we can represent that by drawing edges between E, F, and G,
387:55 - although E and F already had an edge between them.
387:57 - We don't need another one, because this constraint
387:59 - is just encoding the idea that course E and course F cannot have
388:03 - an exam on the same day.
388:05 - So this then is what we might call the constraint graph.
388:09 - There's some graphical representation of all of my variables,
388:13 - so to speak, and the constraints between those possible variables.
388:16 - Where in this particular case, each of the constraints
388:19 - represents an inequality constraint, that an edge between B and D
388:23 - means whatever value the variable B takes on cannot be the value
388:27 - that the variable D takes on as well.
388:30 - So what then actually is a constraint satisfaction problem?
388:33 - Well, a constraint satisfaction problem is just some set of variables, x1
388:38 - all the way through xn, some set of domains for each of those variables.
388:42 - So every variable needs to take on some values.
388:45 - Maybe every variable has the same domain,
388:47 - but maybe each variable has a slightly different domain.
388:49 - And then there's a set of constraints, and we'll just call a set C,
388:52 - that is some constraints that are placed upon these variables,
388:55 - like x1 is not equal to x2.
388:58 - But there could be other forms too, like maybe x1 equals x2 plus 1
389:02 - if these variables are taking on numerical values in their domain,
389:05 - for example.
389:06 - The types of constraints are going to vary based on the types of problems.
389:10 - And constraint satisfaction shows up all over the place as well,
389:14 - in any situation where we have variables that
389:16 - are subject to particular constraints.
389:19 - So one popular game is Sudoku, for example, this 9 by 9 grid
389:23 - where you need to fill in numbers in each of these cells,
389:25 - but you want to make sure there's never a duplicate number in any row,
389:29 - or in any column, or in any grid of 3 by 3 cells, for example.
389:34 - So what might this look like as a constraint satisfaction problem?
389:37 - Well, my variables are all of the empty squares in the puzzle.
389:41 - So represented here is just like an x comma y coordinate, for example,
389:45 - as all of the squares where I need to plug in a value,
389:48 - where I don't know what value it should take on.
389:50 - The domain is just going to be all of the numbers from 1 through 9,
389:54 - any value that I could fill in to one of these cells.
389:57 - So that is going to be the domain for each of these variables.
390:00 - And then the constraints are going to be of the form,
390:02 - like this cell can't be equal to this cell, can't be equal to this cell,
390:05 - can't be, and all of these need to be different, for example,
390:08 - and same for all of the rows, and the columns, and the 3 by 3 squares as well.
390:12 - So those constraints are going to enforce what values are actually allowed.
390:17 - And we can formulate the same idea in the case of this exam scheduling
390:21 - problem, where the variables we have are the different courses, a up through g.
390:25 - The domain for each of these variables is going to be Monday, Tuesday,
390:29 - and Wednesday.
390:30 - Those are the possible values each of the variables can take on,
390:33 - that in this case just represent when is the exam for that class.
390:38 - And then the constraints are of this form, a is not equal to b,
390:41 - a is not equal to c, meaning a and b can't have an exam on the same day,
390:45 - a and c can't have an exam on the same day.
390:48 - Or more formally, these two variables cannot take on the same value
390:53 - within their domain.
390:56 - So that then is this formulation of a constraint satisfaction problem
391:00 - that we can begin to use to try and solve this problem.
391:03 - And constraints can come in a number of different forms.
391:05 - There are hard constraints, which are constraints
391:07 - that must be satisfied for a correct solution.
391:10 - So something like in the Sudoku puzzle, you cannot have this cell
391:14 - and this cell that are in the same row take on the same value.
391:17 - That is a hard constraint.
391:18 - But problems can also have soft constraints,
391:21 - where these are constraints that express some notion of preference,
391:24 - that maybe a and b can't have an exam on the same day,
391:27 - but maybe someone has a preference that a's exam is earlier than b's exam.
391:32 - It doesn't need to be the case with some expression
391:34 - that some solution is better than another solution.
391:37 - And in that case, you might formulate the problem
391:39 - as trying to optimize for maximizing people's preferences.
391:43 - You want people's preferences to be satisfied as much as possible.
391:46 - In this case, though, we'll mostly just deal with hard constraints,
391:49 - constraints that must be met in order to have a correct solution to the problem.
391:54 - So we want to figure out some assignment of these variables
391:57 - to their particular values that is ultimately
392:00 - going to give us a solution to the problem
392:02 - by allowing us to assign some day to each of the classes
392:05 - such that we don't have any conflicts between classes.
392:09 - So it turns out that we can classify the constraints
392:11 - in a constraint satisfaction problem into a number of different categories.
392:16 - The first of those categories are perhaps the simplest
392:18 - of the types of constraints, which are known as unary constraints,
392:21 - where unary constraint is a constraint that just involves a single variable.
392:26 - For example, a unary constraint might be something like,
392:28 - a does not equal Monday, meaning Course A cannot have its exam on Monday.
392:33 - If for some reason the instructor for the course
392:35 - isn't available on Monday, you might have a constraint in your problem
392:38 - that looks like this, something that just has a single variable a in it,
392:41 - and maybe says a is not equal to Monday, or a is equal to something,
392:44 - or in the case of numbers greater than or less than something,
392:47 - a constraint that just has one variable, we consider to be a unary constraint.
392:51 - And this is in contrast to something like a binary constraint, which
392:55 - is a constraint that involves two variables, for example.
392:58 - So this would be a constraint like the ones we were looking at before.
393:01 - Something like a does not equal b is an example of a binary constraint,
393:06 - because it is a constraint that has two variables involved in it, a and b.
393:10 - And we represented that using some arc or some edge that
393:14 - connects variable a to variable b.
393:17 - And using this knowledge of, OK, what is a unary constraint?
393:20 - What is a binary constraint?
393:21 - There are different types of things we can
393:23 - say about a particular constraint satisfaction problem.
393:27 - And one thing we can say is we can try and make the problem node consistent.
393:31 - So what does node consistency mean?
393:33 - Node consistency means that we have all of the values
393:36 - in a variable's domain satisfying that variable's unary constraints.
393:41 - So for each of the variables inside of our constraint satisfaction problem,
393:45 - if all of the values satisfy the unary constraints
393:48 - for that particular variable, we can say that the entire problem is node
393:53 - consistent, or we can even say that a particular variable is
393:56 - node consistent if we just want to make one node consistent within itself.
394:00 - So what does that actually look like?
394:02 - Let's look at now a simplified example, where
394:04 - instead of having a whole bunch of different classes,
394:06 - we just have two classes, a and b, each of which
394:09 - has an exam on either Monday or Tuesday or Wednesday.
394:12 - So this is the domain for the variable a,
394:14 - and this is the domain for the variable b.
394:17 - And now let's imagine we have these constraints, a not equal to Monday,
394:21 - b not equal to Tuesday, b not equal to Monday, a not equal to b.
394:24 - So those are the constraints that we have on this particular problem.
394:28 - And what we can now try to do is enforce node consistency.
394:32 - And node consistency just means we make sure
394:35 - that all of the values for any variable's domain satisfy its unary constraints.
394:41 - And so we could start by trying to make node a node consistent.
394:45 - Is it consistent?
394:46 - Does every value inside of a's domain satisfy its unary constraints?
394:51 - Well, initially, we'll see that Monday does not satisfy a's unary constraints,
394:55 - because we have a constraint, a unary constraint here,
394:58 - that a is not equal to Monday.
395:00 - But Monday is still in a's domain.
395:03 - And so this is something that is not node consistent,
395:06 - because we have Monday in the domain.
395:07 - But this is not a valid value for this particular node.
395:11 - And so how do we make this node consistent?
395:13 - Well, to make the node consistent, what we'll do
395:15 - is we'll just go ahead and remove Monday from a's domain.
395:18 - Now a can only be on Tuesday or Wednesday,
395:21 - because we had this constraint that said a is not equal to Monday.
395:25 - And at this point now, a is node consistent.
395:28 - For each of the values that a can take on, Tuesday and Wednesday,
395:31 - there is no constraint that is a unary constraint that conflicts with that idea.
395:36 - There is no constraint that says that a can't be Tuesday.
395:39 - There is no unary constraint that says that a cannot be on Wednesday.
395:43 - And so now we can turn our attention to b.
395:44 - b also has a domain, Monday, Tuesday, and Wednesday.
395:47 - And we can begin to see whether those variables satisfy
395:51 - the unary constraints as well.
395:53 - Well, here is a unary constraint, b is not equal to Tuesday.
395:56 - And that does not appear to be satisfied by this domain of Monday, Tuesday,
395:59 - and Wednesday, because Tuesday, this possible value
396:03 - that the variable b could take on is not consistent with this unary constraint,
396:07 - that b is not equal to Tuesday.
396:09 - So to solve that problem, we'll go ahead and remove Tuesday from b's domain.
396:13 - Now b's domain only contains Monday and Wednesday.
396:16 - But as it turns out, there's yet another unary constraint
396:18 - that we placed on the variable b, which is here.
396:21 - b is not equal to Monday.
396:23 - And that means that this value, Monday, inside of b's domain,
396:27 - is not consistent with b's unary constraints,
396:30 - because we have a constraint that says the b cannot be Monday.
396:33 - And so we can remove Monday from b's domain.
396:35 - And now we've made it through all of the unary constraints.
396:38 - We've not yet considered this constraint, which is a binary constraint.
396:41 - But we've considered all of the unary constraints,
396:44 - all of the constraints that involve just a single variable.
396:47 - And we've made sure that every node is consistent with those unary constraints.
396:51 - So we can say that now we have enforced node consistency,
396:55 - that for each of these possible nodes, we can pick any of these values
396:59 - in the domain.
397:00 - And there won't be a unary constraint that is violated as a result of it.
397:05 - So node consistency is fairly easy to enforce.
397:07 - We just take each node, make sure the values in the domain
397:10 - satisfy the unary constraints.
397:12 - Where things get a little bit more interesting
397:14 - is when we consider different types of consistency,
397:17 - something like arc consistency, for example.
397:20 - And arc consistency refers to when all of the values in a variable's domain
397:25 - satisfy the variable's binary constraints.
397:28 - So when we're looking at trying to make a arc consistent,
397:31 - we're no longer just considering the unary constraints that involve a.
397:35 - We're trying to consider all of the binary constraints
397:38 - that involve a as well.
397:39 - So any edge that connects a to another variable
397:43 - inside of that constraint graph that we were taking a look at before.
397:47 - Put a little bit more formally, arc consistency.
397:50 - And arc really is just another word for an edge
397:52 - that connects two of these nodes inside of our constraint graph.
397:55 - We can define arc consistency a little more precisely like this.
397:59 - In order to make some variable x arc consistent with respect
398:03 - to some other variable y, we need to remove any element from x's domain
398:09 - to make sure that every choice for x, every choice in x's domain,
398:14 - has a possible choice for y.
398:17 - So put another way, if I have a variable x
398:19 - and I want to make x an arc consistent, then
398:21 - I'm going to look at all of the possible values that x can take on
398:25 - and make sure that for all of those possible values,
398:28 - there is still some choice that I can make for y,
398:31 - if there's some arc between x and y, to make sure
398:34 - that y has a possible option that I can choose as well.
398:39 - So let's look at an example of that going back to this example from before.
398:42 - We enforced node consistency already by saying
398:45 - that a can only be on Tuesday or Wednesday
398:47 - because we knew that a could not be on Monday.
398:49 - And we also said that b's only domain only
398:51 - consists of Wednesday because we know that b does not equal Tuesday
398:55 - and also b does not equal Monday.
398:58 - So now let's begin to consider arc consistency.
399:01 - Let's try and make a arc consistent with b.
399:05 - And what that means is to make a arc consistent with respect to b
399:08 - means that for any choice we make in a's domain,
399:11 - there is some choice we can make in b's domain that is going to be consistent.
399:16 - And we can try that.
399:17 - For a, we can choose Tuesday as a possible value for a.
399:20 - If I choose Tuesday for a, is there a value
399:23 - for b that satisfies the binary constraint?
399:26 - Well, yes, b Wednesday would satisfy this constraint
399:29 - that a does not equal b because Tuesday does not equal Wednesday.
399:33 - However, if we chose Wednesday for a, well, then
399:37 - there is no choice in b's domain that satisfies this binary constraint.
399:42 - There is no way I can choose something for b that satisfies a does not equal b
399:47 - because I know b must be Wednesday.
399:49 - And so if ever I run into a situation like this
399:52 - where I see that here is a possible value for a such
399:55 - that there is no choice of value for b that satisfies the binary constraint,
399:59 - well, then this is not arc consistent.
400:02 - And to make it arc consistent, I would need to take Wednesday
400:05 - and remove it from a's domain.
400:07 - Because Wednesday was not going to be a possible choice I can make for a
400:11 - because it wasn't consistent with this binary constraint for b.
400:14 - There was no way I could choose Wednesday for a
400:17 - and still have an available solution by choosing something for b as well.
400:22 - So here now, I've been able to enforce arc consistency.
400:25 - And in doing so, I've actually solved this entire problem,
400:28 - that given these constraints where a and b can have exams on either Monday
400:32 - or Tuesday or Wednesday, the only solution, as it would appear,
400:35 - is that a's exam must be on Tuesday and b's exam must be on Wednesday.
400:40 - And that is the only option available to me.
400:43 - So if we want to apply our consistency to a larger graph,
400:46 - not just looking at one particular pair of our consistency,
400:49 - there are ways we can do that too.
400:51 - And we can begin to formalize what the pseudocode would look like
400:53 - for trying to write an algorithm that enforces arc consistency.
400:57 - And we'll start by defining a function called revise.
401:01 - Revise is going to take as input a CSP, otherwise
401:03 - known as a constraint satisfaction problem,
401:06 - and also two variables, x and y.
401:08 - And what revise is going to do is it is going
401:11 - to make x arc consistent with respect to y,
401:15 - meaning remove anything from x's domain that
401:18 - doesn't allow for a possible option for y.
401:21 - How does this work?
401:22 - Well, we'll go ahead and first keep track of whether or not
401:25 - we've made a revision.
401:26 - Revise is ultimately going to return true or false.
401:29 - It'll return true in the event that we did make a revision to x's domain.
401:33 - It'll return false if we didn't make any change to x's domain.
401:37 - And we'll see in a moment why that's going to be helpful.
401:39 - But we start by saying revised equals false.
401:41 - We haven't made any changes.
401:43 - Then we'll say, all right, let's go ahead and loop over all
401:46 - of the possible values in x's domain.
401:49 - So loop over x's domain for each little x in x's domain.
401:53 - I want to make sure that for each of those choices,
401:55 - I have some available choice in y that satisfies the binary constraints that
402:00 - are defined inside of my CSP, inside of my constraint
402:03 - satisfaction problem.
402:05 - So if ever it's the case that there is no value y in y's domain that
402:11 - satisfies the constraint for x and y, well, if that's the case,
402:15 - that means that this value x shouldn't be in x's domain.
402:19 - So we'll go ahead and delete x from x's domain.
402:22 - And I'll set revised equal to true because I did change x's domain.
402:26 - I changed x's domain by removing little x.
402:29 - And I removed little x because it wasn't art consistent.
402:33 - There was no way I could choose a value for y
402:35 - that would satisfy this xy constraint.
402:38 - So in this case, we'll go ahead and set revised equal true.
402:41 - And we'll do this again and again for every value in x's domain.
402:44 - Sometimes it might be fine.
402:46 - In other cases, it might not allow for a possible choice for y,
402:49 - in which case we need to remove this value from x's domain.
402:53 - And at the end, we just return revised to indicate whether or not
402:56 - we actually made a change.
402:59 - So this function, then, this revised function
403:01 - is effectively an implementation of what you saw me do graphically a moment ago.
403:04 - And it makes one variable, x, arc consistent with another variable,
403:09 - in this case, y.
403:10 - But generally speaking, when we want to enforce our consistency,
403:14 - we'll often want to enforce our consistency not just for a single arc,
403:17 - but for the entire constraint satisfaction problem.
403:20 - And it turns out there's an algorithm to do that as well.
403:22 - And that algorithm is known as AC3.
403:25 - AC3 takes a constraint satisfaction problem.
403:27 - And it enforces our consistency across the entire problem.
403:32 - How does it do that?
403:33 - Well, it's going to basically maintain a queue or basically just a line
403:36 - of all of the arcs that it needs to make consistent.
403:39 - And over time, we might remove things from that queue
403:42 - as we begin dealing with our consistency.
403:44 - And we might need to add things to that queue as well
403:47 - if there are more things we need to make arc consistent.
403:50 - So we'll go ahead and start with a queue that
403:52 - contains all of the arcs in the constraint satisfaction problem,
403:56 - all of the edges that connect two nodes that
403:58 - have some sort of binary constraint between them.
404:02 - And now, as long as the queue is non-empty, there is work to be done.
404:06 - The queue is all of the things that we need to make arc consistent.
404:10 - So as long as the queue is non-empty, there's still things we have to do.
404:13 - What do we have to do?
404:15 - Well, we'll start by de-queuing from the queue,
404:17 - remove something from the queue.
404:19 - And strictly speaking, it doesn't need to be a queue,
404:21 - but a queue is a traditional way of doing this.
404:23 - We'll de-queue from the queue, and that'll give us an arc, x and y,
404:27 - these two variables where I would like to make x arc consistent with y.
404:32 - So how do we make x arc consistent with y?
404:35 - Well, we can go ahead and just use that revise function
404:38 - that we talked about a moment ago.
404:39 - We called the revise function, passing as input the constraint satisfaction
404:43 - problem, and also these variables x and y,
404:46 - because I want to make x arc consistent with y.
404:49 - In other words, remove any values from x's domain
404:52 - that don't leave an available option for y.
404:55 - And recall, what does revised return?
404:57 - Well, it returns true if we actually made a change,
405:00 - if we removed something from x's domain, because there
405:04 - wasn't an available option for y, for example.
405:06 - And it returns false if we didn't make any change to x's domain at all.
405:10 - And it turns out if revised returns false, if we didn't make any changes,
405:14 - well, then there's not a whole lot more work
405:15 - to be done here for this arc.
405:17 - We can just move ahead to the next arc that's in the queue.
405:20 - But if we did make a change, if we did reduce x's domain
405:24 - by removing values from x's domain, well, then what we might realize
405:28 - is that this creates potential problems later on,
405:31 - that it might mean that some arc that was arc consistent with x,
405:35 - that node might no longer be arc consistent with x,
405:38 - because while there used to be an option that we could choose for x,
405:41 - now there might not be, because now we might have removed something
405:44 - from x that was necessary for some other arc to be arc consistent.
405:49 - And so if ever we did revise x's domain,
405:52 - we're going to need to add some things to the queue, some additional arcs
405:55 - that we might want to check.
405:57 - How do we do that?
405:58 - Well, first thing we want to check is to make sure that x's domain is not 0.
406:02 - If x's domain is 0, that means there are no available options for x at all.
406:07 - And that means that there's no way you can solve the constraint satisfaction
406:10 - problem.
406:10 - If we've removed everything from x's domain,
406:13 - we'll go ahead and just return false here to indicate there's
406:15 - no way to solve the problem, because there's nothing left in x's domain.
406:19 - But otherwise, if there are things left in x's domain,
406:23 - but fewer things than before, well, then what we'll do
406:26 - is we'll loop over each variable z that is in all of x's neighbors,
406:31 - except for y, y we already handled.
406:33 - But we'll consider all of x's other's neighbors and ask ourselves,
406:37 - all right, will that arc from each of those z's to x,
406:41 - that arc might no longer be arc consistent,
406:43 - because while for each z, there might have been a possible option
406:46 - we could choose for x to correspond with each of z's possible values,
406:50 - now there might not be, because we removed some elements from x's domain.
406:54 - And so what we'll do here is we'll go ahead and enqueue,
406:57 - adding something to the queue, this arc zx for all of those neighbors z.
407:02 - So we need to add back some arcs to the queue
407:05 - in order to continue to enforce arc consistency.
407:08 - At the very end, if we make it through all this process,
407:11 - then we can return true.
407:13 - But this now is AC3, this algorithm for enforcing arc consistency
407:18 - on a constraint satisfaction problem.
407:20 - And the big idea is really just keep track of all of the arcs
407:23 - that we might need to make arc consistent,
407:25 - make it arc consistent by calling the revise function.
407:28 - And if we did revise it, then there are some new arcs
407:31 - that might need to be added to the queue in order
407:33 - to make sure that everything is still arc consistent, even
407:36 - after we've removed some of the elements from a particular variable's
407:40 - domain.
407:42 - So what then would happen if we tried to enforce arc consistency
407:46 - on a graph like this, on a graph where each of these variables
407:48 - has a domain of Monday, Tuesday, and Wednesday?
407:51 - Well, it turns out that by enforcing arc consistency on this graph,
407:55 - well, it can solve some types of problems.
407:57 - Nothing actually changes here.
407:59 - For any particular arc, just considering two variables,
408:03 - there's always a way for me to just, for any of the choices
408:05 - I make for one of them, make a choice for the other one,
408:08 - because there are three options, and I just need the two
408:11 - to be different from each other.
408:12 - So this is actually quite easy to just take an arc
408:15 - and just declare that it is arc consistent,
408:17 - because if I pick Monday for D, then I just
408:19 - pick something that isn't Monday for B. In arc consistency,
408:23 - we only consider consistency between a binary constraint between two nodes,
408:28 - and we're not really considering all of the rest of the nodes yet.
408:32 - So just using AC3, the enforcement of arc consistency,
408:36 - that can sometimes have the effect of reducing domains
408:39 - to make it easier to find solutions, but it will not always actually
408:42 - solve the problem.
408:44 - We might still need to somehow search to try and find a solution.
408:48 - And we can use classical traditional search algorithms to try to do so.
408:52 - You'll recall that a search problem generally consists of these parts.
408:55 - We have some initial state, some actions, a transition model
408:59 - that takes me from one state to another state,
409:01 - a goal test to tell me have I satisfied my objective correctly,
409:05 - and then some path cost function, because in the case of like maze solving,
409:09 - I was trying to get to my goal as quickly as possible.
409:12 - So you could formulate a CSP, or a constraint satisfaction problem,
409:16 - as one of these types of search problems.
409:18 - The initial state will just be an empty assignment,
409:22 - where an assignment is just a way for me to assign any particular variable
409:26 - to any particular value.
409:27 - So if an empty assignment is no variables that are assigned to any values
409:30 - yet, then the action I can take is adding some new variable equals value
409:37 - pair to that assignment, saying for this assignment,
409:40 - let me add a new value for this variable.
409:43 - And the transition model just defines what happens when you take that action.
409:46 - You get a new assignment that has that variable equal to that value inside
409:50 - of it.
409:51 - The goal test is just checking to make sure all the variables have been assigned
409:54 - and making sure all the constraints have been satisfied.
409:57 - And the path cost function is sort of irrelevant.
410:00 - I don't really care about what the path really is.
410:02 - I just care about finding some assignment that actually satisfies
410:06 - all of the constraints.
410:07 - So really, all the paths have the same cost.
410:09 - I don't really care about the path to the goal.
410:12 - I just care about the solution itself, much as we've talked about now before.
410:17 - The problem here, though, is that if we just implement this naive search
410:20 - algorithm just by implementing like breadth-first search or depth-first
410:23 - search, this is going to be very, very inefficient.
410:25 - And there are ways we can take advantage of efficiencies
410:28 - in the structure of a constraint satisfaction problem itself.
410:31 - And one of the key ideas is that we can really just order these variables.
410:37 - And it doesn't matter what order we assign variables in.
410:39 - The assignment a equals 2 and then b equals 8
410:43 - is identical to the assignment of b equals 8 and then a equals 2.
410:47 - Switching the order doesn't really change anything
410:50 - about the fundamental nature of that assignment.
410:53 - And so there are some ways that we can try and revise
410:56 - this idea of a search algorithm to apply it specifically
410:59 - for a problem like a constraint satisfaction problem.
411:02 - And it turns out the search algorithm we'll generally
411:04 - use when talking about constraint satisfaction problems
411:06 - is something known as backtracking search.
411:09 - And the big idea of backtracking search is we'll
411:11 - go ahead and make assignments from variables to values.
411:14 - And if ever we get stuck, we arrive at a place
411:17 - where there is no way we can make any forward progress while still
411:20 - preserving the constraints that we need to enforce,
411:23 - we'll go ahead and backtrack and try something else instead.
411:27 - So the very basic sketch of what backtracking search looks like
411:30 - is it looks like this.
411:32 - Function called backtrack that takes as input an assignment
411:35 - and a constraint satisfaction problem.
411:37 - So initially, we don't have any assigned variables.
411:40 - So when we begin backtracking search, this assignment
411:42 - is just going to be the empty assignment with no variables inside of it.
411:46 - But we'll see later this is going to be a recursive function.
411:49 - So backtrack takes as input the assignment and the problem.
411:53 - If the assignment is complete, meaning all of the variables have been assigned,
411:57 - we just return that assignment.
411:59 - That, of course, won't be true initially,
412:00 - because we start with an empty assignment.
412:02 - But over time, we might add things to that assignment.
412:05 - So if ever the assignment actually is complete, then we're done.
412:08 - Then just go ahead and return that assignment.
412:10 - But otherwise, there is some work to be done.
412:13 - So what we'll need to do is select an unassigned variable
412:17 - for this particular problem.
412:18 - So we need to take the problem, look at the variables that have already
412:21 - been assigned, and pick a variable that has not yet been assigned.
412:26 - And I'll go ahead and take that variable.
412:28 - And then I need to consider all of the values in that variable's domain.
412:32 - So we'll go ahead and call this domain values function.
412:34 - We'll talk a little more about that later, that takes a variable
412:37 - and just gives me back an ordered list of all of the values in its domain.
412:42 - So I've taken a random unselected variable.
412:44 - I'm going to loop over all of the possible values.
412:47 - And the idea is, let me just try all of these values
412:50 - as possible values for the variable.
412:53 - So if the value is consistent with the assignment so far,
412:56 - it doesn't violate any of the constraints,
412:59 - well then let's go ahead and add variable equals value to the assignment
413:02 - because it's so far consistent.
413:04 - And now let's recursively call backtrack to try and make
413:08 - the rest of the assignments also consistent.
413:10 - So I'll go ahead and call backtrack on this new assignment
413:13 - that I've added the variable equals value to.
413:17 - And now I recursively call backtrack and see what the result is.
413:20 - And if the result isn't a failure, well then let me just return that result.
413:27 - And otherwise, what else could happen?
413:30 - Well, if it turns out the result was a failure, well then
413:32 - that means this value was probably a bad choice
413:35 - for this particular variable because when I assigned
413:37 - this variable equal to that value, eventually down the road
413:41 - I ran into a situation where I violated constraints.
413:43 - There was nothing more I could do.
413:45 - So now I'll remove variable equals value from the assignment,
413:48 - effectively backtracking to say, all right, that value didn't work.
413:52 - Let's try another value instead.
413:55 - And then at the very end, if we were never
413:57 - able to return a complete assignment, we'll just go ahead and return failure
414:00 - because that means that none of the values worked for this particular
414:04 - variable.
414:05 - This now is the idea for backtracking search,
414:07 - to take each of the variables, try values for them,
414:10 - and recursively try backtracking search, see if we can make progress.
414:14 - And if ever we run into a dead end, we run
414:16 - into a situation where there is no possible value we can choose
414:19 - that satisfies the constraints, we return failure.
414:22 - And that propagates up, and eventually we
414:24 - make a different choice by going back and trying something else instead.
414:29 - So let's put this algorithm into practice.
414:31 - Let's actually try and use backtracking search to solve this problem now,
414:35 - where I need to figure out how to assign each of these courses
414:37 - to an exam slot on Monday or Tuesday or Wednesday in such a way
414:41 - that it satisfies these constraints, that each of these edges
414:44 - mean those two classes cannot have an exam on the same day.
414:47 - So I can start by just starting at a node.
414:50 - It doesn't really matter which I start with,
414:51 - but in this case, I'll just start with A.
414:54 - And I'll ask the question, all right, let me loop over the values in the domain.
414:57 - And maybe in this case, I'll just start with Monday and say, all right,
415:00 - let's go ahead and assign A to Monday.
415:02 - We'll just go and order Monday, Tuesday, Wednesday.
415:04 - And now let's consider node B. So I've made an assignment to A,
415:08 - so I recursively call backtrack with this new part of the assignment.
415:11 - And now I'm looking to pick another unassigned variable like B.
415:14 - And I'll say, all right, maybe I'll start with Monday,
415:16 - because that's the very first value in B's domain.
415:18 - And I ask, all right, does Monday violate any constraints?
415:22 - And it turns out, yes, it does.
415:23 - It violates this constraint here between A and B,
415:26 - because A and B are now both on Monday, and that doesn't work,
415:29 - because B can't be on the same day as A. So that doesn't work.
415:33 - So we might instead try Tuesday, try the next value in B's domain.
415:37 - And is that consistent with the assignment so far?
415:39 - Well, yeah, B, Tuesday, A, Monday, that is consistent so far,
415:43 - because they're not on the same day.
415:44 - So that's good.
415:45 - Now we can recursively call backtrack.
415:47 - Try again.
415:48 - Pick another unassigned variable, something like D, and say, all right,
415:51 - let's go through its possible values.
415:53 - Is Monday consistent with this assignment?
415:55 - Well, yes, it is.
415:56 - B and D are on different days, Monday versus Tuesday.
415:59 - And A and B are also on different days, Monday versus Tuesday.
416:02 - So that's fine so far, too.
416:04 - We'll go ahead and try again.
416:05 - Maybe we'll go to this variable here, E. Say, can we make that consistent?
416:09 - Let's go through the possible values.
416:10 - We've recursively called backtrack.
416:12 - We might start with Monday and say, all right, that's not consistent,
416:15 - because D and E now have exams on the same day.
416:19 - So we might try Tuesday instead, going to the next one.
416:21 - Ask, is that consistent?
416:23 - Well, no, it's not, because B and E, those have exams on the same day.
416:27 - And so we try, all right, is Wednesday consistent?
416:29 - And in turn, it's like, all right, yes, it is.
416:31 - Wednesday is consistent, because D and E now
416:33 - have exams on different days.
416:34 - B and E now have exams on different days.
416:37 - All seems to be well so far.
416:38 - I recursively call backtrack, select another unassigned variable,
416:43 - we'll say maybe choose C this time, and say, all right,
416:45 - let's try the values that C could take on.
416:48 - Let's start with Monday.
416:49 - And it turns out that's not consistent, because now A and C both
416:53 - have exams on the same day.
416:55 - So I try Tuesday and say, that's not consistent either,
416:57 - because B and C now have exams on the same day.
417:00 - And then I say, all right, let's go ahead and try Wednesday.
417:04 - But that's not consistent either, because C and E each have
417:08 - exams on the same day too.
417:09 - So now we've gone through all the possible values for C, Monday, Tuesday,
417:13 - and Wednesday.
417:14 - And none of them are consistent.
417:15 - There is no way we can have a consistent assignment.
417:18 - Backtrack, in this case, will return a failure.
417:21 - And so then we'd say, all right, we have to backtrack back to here.
417:24 - Well, now for E, we've tried all of Monday, Tuesday, and Wednesday.
417:28 - And none of those work, because Wednesday, which seemed to work,
417:31 - turned out to be a failure.
417:33 - So that means there's no possible way we can assign E.
417:36 - So that's a failure too.
417:37 - We have to go back up to D, which means that Monday assignment to D,
417:41 - that must be wrong.
417:41 - We must try something else.
417:43 - So we can try, all right, what if instead of Monday, we try Tuesday?
417:47 - Tuesday, it turns out, is not consistent,
417:49 - because B and D now have an exam on the same day.
417:51 - But Wednesday, as it turns out, works.
417:55 - And now we can begin to mix and forward progress again.
417:57 - We go back to E and say, all right, which of these values works?
418:00 - Monday turns out to work by not violating any constraints.
418:03 - Then we go up to C now.
418:05 - Monday doesn't work, because it violates a constraint.
418:08 - Violates two, actually.
418:09 - Tuesday doesn't work, because it violates a constraint as well.
418:12 - But Wednesday does work.
418:13 - Then we can go to the next variable, F, and say, all right, does Monday work?
418:16 - We'll know.
418:17 - It violates a constraint.
418:18 - But Tuesday does work.
418:19 - And then finally, we can look at the last variable, G,
418:21 - recursively calling backtrack one more time.
418:24 - Monday is inconsistent.
418:25 - That violates a constraint.
418:27 - Tuesday also violates a constraint.
418:29 - But Wednesday, that doesn't violate a constraint.
418:33 - And so now at this point, we recursively call backtrack one last time.
418:36 - We now have a satisfactory assignment of all of the variables.
418:40 - And at this point, we can say that we are now done.
418:42 - We have now been able to successfully assign a variable or a value
418:47 - to each one of these variables in such a way
418:49 - that we're not violating any constraints.
418:51 - We're going to go ahead and have classes A and E have their exams on Monday.
418:55 - Classes B and F can have their exams on Tuesday.
418:58 - And classes C, D, and G can have their exams on Wednesday.
419:02 - And there's no violated constraints that might come up there.
419:06 - So that then was a graphical look at how this might work.
419:08 - Let's now take a look at some code we could use to actually try
419:11 - and solve this problem as well.
419:14 - So here I'll go ahead and go into the scheduling directory.
419:20 - We're here now.
419:21 - We'll start by looking at schedule0.py.
419:24 - We're here.
419:25 - I define a list of variables, A, B, C, D, E, F, G.
419:28 - Those are all different classes.
419:31 - Then underneath that, I define my list of constraints.
419:34 - So constraint A and B. That is a constraint
419:36 - because they can't be on the same day.
419:38 - Likewise, A and C, B and C, so on and so forth,
419:40 - enforcing those exact same constraints.
419:43 - And here then is what the backtracking function might look like.
419:47 - First, if the assignment is complete, if I've
419:50 - made an assignment of every variable to a value,
419:54 - go ahead and just return that assignment.
419:56 - Then we'll select an unassigned variable from that assignment.
420:00 - Then for each of the possible values in the domain, Monday, Tuesday,
420:03 - Wednesday, let's go ahead and create a new assignment that
420:06 - assigns the variable to that value.
420:09 - I'll call this consistent function, which I'll show you in a moment,
420:11 - that just checks to make sure this new assignment is consistent.
420:14 - But if it is consistent, we'll go ahead and call backtrack
420:17 - to go ahead and continue trying to run backtracking search.
420:20 - And as long as the result is not none, meaning it wasn't a failure,
420:24 - we can go ahead and return that result.
420:26 - But if we make it through all the values and nothing works, then it is a failure.
420:31 - There's no solution.
420:32 - We go ahead and return none here.
420:35 - What do these functions do?
420:36 - Select unassigned variable is just going to choose a variable not yet assigned.
420:40 - So it's going to loop over all the variables.
420:42 - And if it's not already assigned, we'll go ahead and just return that variable.
420:46 - And what does the consistent function do?
420:48 - Well, the consistent function goes through all the constraints.
420:51 - And if we have a situation where we've assigned both of those values
420:56 - to variables, but they are the same, well,
420:59 - then that is a violation of the constraint, in which case we'll return false.
421:03 - But if nothing is inconsistent, then the assignment is consistent
421:06 - and will return true.
421:08 - And then all the program does is it calls backtrack
421:12 - on an empty assignment, an empty dictionary that has no variable assigned
421:15 - and no values yet, save that inside a solution,
421:18 - and then print out that solution.
421:21 - So by running this now, I can run Python schedule0.py.
421:27 - And what I get as a result of that is an assignment
421:29 - of all these variables to values.
421:31 - And it turns out we assign a to Monday as we would expect, b to Tuesday,
421:35 - c to Wednesday, exactly the same type of thing
421:37 - we were talking about before, an assignment of each of these variables
421:40 - to values that doesn't violate any constraints.
421:43 - And I had to do a fair amount of work in order
421:45 - to implement this idea myself.
421:47 - I had to write the backtrack function that went ahead
421:49 - and went through this process of recursively trying
421:51 - to do this backtracking search.
421:53 - But it turns out the constraint satisfaction problems are so popular
421:56 - that there exist many libraries that already implement this type of idea.
422:00 - Again, as with before, the specific library
422:03 - is not as important as the fact that libraries do exist.
422:06 - This is just one example of a Python constraint library,
422:09 - where now, rather than having to do all the work from scratch
422:13 - inside of schedule1.py, I'm just taking advantage
422:15 - of a library that implements a lot of these ideas already.
422:19 - So here, I create a new problem, add variables to it
422:22 - with particular domains.
422:24 - I add a whole bunch of these individual constraints,
422:27 - where I call addConstraint and pass in a function describing
422:30 - what the constraint is.
422:32 - And the constraint basically says the function that takes two variables, x
422:35 - and y, and makes sure that x is not equal to y,
422:38 - enforcing the idea that these two classes cannot have exams on the same day.
422:43 - And then, for any constraint satisfaction problem,
422:46 - I can call getSolutions to get all the solutions to that problem.
422:50 - And then, for each of those solutions, print out
422:53 - what that solution happens to be.
422:55 - And if I run python schedule1.py, and now see,
422:59 - there are actually a number of different solutions
423:01 - that can be used to solve the problem.
423:03 - There are, in fact, six different solutions, assignments of variables
423:06 - to values that will give me a satisfactory answer to this constraint
423:10 - satisfaction problem.
423:13 - So this then was an implementation of a very basic backtracking search method,
423:17 - where really we just went through each of the variables,
423:19 - picked one that wasn't assigned, tried the possible values
423:22 - the variable could take on.
423:23 - And then, if it worked, if it didn't violate any constraints,
423:27 - then we kept trying other variables.
423:28 - And if ever we hit a dead end, we had to backtrack.
423:31 - But ultimately, we might be able to be a little bit more
423:34 - intelligent about how we do this in order
423:36 - to improve the efficiency of how we solve these sorts of problems.
423:39 - And one thing we might imagine trying to do
423:41 - is going back to this idea of inference, using the knowledge we
423:44 - know to be able to draw conclusions in order
423:47 - to make the rest of the problem solving process a little bit easier.
423:51 - And let's now go back to where we got stuck in this problem the first time.
423:55 - When we were solving this constraint satisfaction problem, we dealt with B.
423:59 - And then we went on to D. And we went ahead and just assigned D to Monday,
424:03 - because that seemed to work with the assignment so far.
424:05 - It didn't violate any constraints.
424:07 - But it turned out that later on that choice turned out to be a bad one,
424:11 - that that choice wasn't consistent with the rest of the values
424:15 - that we could take on here.
424:16 - And the question is, is there anything we
424:18 - could do to avoid getting into a situation like this,
424:21 - avoid trying to go down a path that's ultimately not going to lead anywhere
424:25 - by taking advantage of knowledge that we have initially?
424:28 - And it turns out we do have that kind of knowledge.
424:30 - We can look at just the structure of this graph so far.
424:33 - And we can say that right now C's domain, for example,
424:37 - contains values Monday, Tuesday, and Wednesday.
424:41 - And based on those values, we can say that this graph is not arc consistent.
424:46 - Recall that arc consistency is all about making sure
424:49 - that for every possible value for a particular node,
424:52 - that there is some other value that we are able to choose.
424:55 - And as we can see here, Monday and Tuesday
424:58 - are not going to be possible values that we can choose for C.
425:01 - They're not going to be consistent with a node like B, for example,
425:06 - because B is equal to Tuesday, which means that C cannot be Tuesday.
425:09 - And because A is equal to Monday, C also cannot be Monday.
425:13 - So using that information, by making C arc consistent with A and B,
425:18 - we could remove Monday and Tuesday from C's domain
425:21 - and just leave C with Wednesday, for example.
425:25 - And if we continued to try and enforce arc consistency,
425:28 - we'd see there are some other conclusions we can draw as well.
425:31 - We see that B's only option is Tuesday and C's only option is Wednesday.
425:35 - And so if we want to make E arc consistent,
425:38 - well, E can't be Tuesday, because that wouldn't be arc consistent with B.
425:42 - And E can't be Wednesday, because that wouldn't be arc consistent with C.
425:45 - So we can go ahead and say E and just set that equal to Monday, for example.
425:49 - And then we can begin to do this process again and again,
425:51 - that in order to make D arc consistent with B and E,
425:54 - then D would have to be Wednesday.
425:56 - That's the only possible option.
425:57 - And likewise, we can make the same judgments for F and G as well.
426:01 - And it turns out that without having to do any additional search,
426:04 - just by enforcing arc consistency, we were
426:07 - able to actually figure out what the assignment of all the variables
426:10 - should be without needing to backtrack at all.
426:14 - And the way we did that is by interleaving this search process
426:18 - and the inference step, by this step of trying to enforce arc consistency.
426:22 - And the algorithm to do this is often called just the maintaining arc
426:26 - consistency algorithm, which just enforces arc consistency every time
426:30 - we make a new assignment of a value to an existing variable.
426:34 - So sometimes we can enforce our consistency using that AC3 algorithm
426:38 - at the very beginning of the problem before we even begin searching
426:41 - in order to limit the domain of the variables
426:43 - in order to make it easier to search.
426:45 - But we can also take advantage of the interleaving
426:48 - of enforcing our consistency with search such that every time in the search
426:52 - process we make a new assignment, we go ahead and enforce arc consistency
426:56 - as well to make sure that we're just eliminating
426:59 - possible values from domains whenever possible.
427:02 - And how do we do this?
427:03 - Well, this is really equivalent to just every time
427:06 - we make a new assignment to a variable x.
427:09 - We'll go ahead and call our AC3 algorithm,
427:12 - this algorithm that enforces arc consistency on a constraint satisfaction
427:15 - problem.
427:16 - And we go ahead and call that, starting it
427:18 - with a Q, not of all of the arcs, which we did originally,
427:22 - but just of all of the arcs that we want to make arc consistent with x,
427:26 - this thing that we have just made an assignment to.
427:28 - So all arcs yx, where y is a neighbor of x, something
427:33 - that shares a constraint with x, for example.
427:36 - And by maintaining arc consistency in the backtracking search process,
427:40 - we can ultimately make our search process a little bit more efficient.
427:44 - And so this is the revised version of this backtrack function.
427:47 - Same as before, the changes here are highlighted in yellow.
427:50 - Every time we add a new variable equals value to our assignment,
427:54 - we'll go ahead and run this inference procedure, which
427:56 - might do a number of different things.
427:57 - But one thing it could do is call the maintaining arc consistency
428:00 - algorithm to make sure we're able to enforce arc consistency on the problem.
428:05 - And we might be able to draw new inferences as a result of that process.
428:09 - Get new guarantees of this variable needs to be equal to that value,
428:13 - for example.
428:14 - That might happen one time.
428:15 - It might happen many times.
428:16 - And so long as those inferences are not a failure,
428:19 - as long as they don't lead to a situation where there is no possible way
428:22 - to make forward progress, well, then we can go ahead and add those inferences,
428:26 - those new knowledge, that new pieces of knowledge
428:28 - I know about what variables should be assigned to what values,
428:31 - I can add those to the assignment in order to more quickly make forward
428:35 - progress by taking advantage of information that I can just deduce,
428:38 - information I know based on the rest of the structure
428:41 - of the constraint satisfaction problem.
428:44 - And the only other change I'll need to make now
428:46 - is if it turns out this value doesn't work, well, then down here,
428:49 - I'll go ahead and need to remove not only variable equals value,
428:52 - but also any of those inferences that I made,
428:54 - remove that from the assignment as well.
428:57 - So here, then, we're often able to solve the problem by backtracking less
429:01 - than we might originally have needed to, just
429:03 - by taking advantage of the fact that every time we
429:05 - make a new assignment of one variable to one value,
429:08 - that might reduce the domains of other variables as well.
429:12 - And we can use that information to begin to more quickly draw conclusions
429:15 - in order to try and solve the problem more efficiently as well.
429:19 - And it turns out there are other heuristics
429:21 - we can use to try and improve the efficiency of our search process
429:25 - as well.
429:25 - And it really boils down to a couple of these functions
429:28 - that I've talked about, but we haven't really
429:30 - talked about how they're working.
429:32 - And one of them is this function here, select unassigned variable,
429:37 - where we're selecting some variable in the constraint satisfaction problem
429:40 - that has not yet been assigned.
429:42 - So far, I've sort of just been selecting variables randomly,
429:45 - just like picking one variable and one unassigned variable in order
429:48 - to decide, all right, this is the variable
429:50 - that we're going to assign next, and then going from there.
429:53 - But it turns out that by being a little bit intelligent,
429:55 - by following certain heuristics, we might be
429:57 - able to make the search process much more efficient just
430:00 - by choosing very carefully which variable we should explore next.
430:05 - So some of those heuristics include the minimum remaining values,
430:09 - or MRV heuristic, which generally says that if I
430:12 - have a choice between which variable I should select,
430:14 - I should select the variable with the smallest domain,
430:18 - the variable that has the fewest number of remaining values left.
430:21 - With the idea being, if there are only two remaining values left,
430:24 - well, I may as well prune one of them very quickly in order
430:27 - to get to the other, because one of those two has got to be the solution,
430:30 - if a solution does exist.
430:33 - Sometimes minimum remaining values might not give a conclusive result
430:37 - if all the nodes have the same number of remaining values, for example.
430:40 - And in that case, another heuristic that can be helpful to look at
430:43 - is the degree heuristic.
430:45 - The degree of a node is the number of nodes that are attached to that node,
430:49 - the number of nodes that are constrained by that particular node.
430:52 - And if you imagine which variable should I choose,
430:54 - should I choose a variable that has a high degree that
430:57 - is connected to a lot of different things,
430:59 - or a variable with a low degree that is not
431:01 - connected to a lot of different things, well,
431:03 - it can often make sense to choose the variable that
431:06 - has the highest degree that is connected to the most other nodes
431:09 - as the thing you would search first.
431:11 - Why is that the case?
431:12 - Well, it's because by choosing a variable with a high degree,
431:16 - that is immediately going to constrain the rest of the variables more,
431:20 - and it's more likely to be able to eliminate large sections of the state
431:23 - space that you don't need to search through at all.
431:26 - So what could this actually look like?
431:29 - Let's go back to this search problem here.
431:31 - In this particular case, I've made an assignment here.
431:34 - I've made an assignment here.
431:35 - And the question is, what should I look at next?
431:38 - And according to the minimum remaining values heuristic,
431:41 - what I should choose is the variable that has the fewest
431:44 - remaining possible values.
431:46 - And in this case, that's this node here, node
431:48 - C, that only has one variable left in this domain, which in this case
431:51 - is Wednesday, which is a very reasonable choice of a next assignment
431:55 - to make, because I know it's the only option, for example.
431:58 - I know that the only possible option for C is Wednesday,
432:01 - so I may as well make that assignment and then potentially explore
432:04 - the rest of the space after that.
432:07 - But meanwhile, at the very start of the problem,
432:09 - when I didn't have any knowledge of what nodes should have what values yet,
432:12 - I still had to pick what node should be the first one that I try and assign
432:16 - a value to.
432:17 - And I arbitrarily just chose the one at the top, node A originally.
432:20 - But we can be more intelligent about that.
432:23 - We can look at this particular graph.
432:25 - All of them have domains of the same size, domain of size 3.
432:28 - So minimum remaining values doesn't really help us there.
432:31 - But we might notice that node E has the highest degree.
432:34 - It is connected to the most things.
432:37 - And so perhaps it makes sense to begin our search,
432:39 - rather than starting at node A at the very top,
432:41 - start with the node with the highest degree.
432:43 - Start by searching from node E, because from there,
432:46 - that's going to much more easily allow us to enforce
432:49 - the constraints that are nearby, eliminating
432:51 - large portions of the search space that I might not need to search through.
432:55 - And in fact, by starting with E, we can immediately then assign other variables.
432:59 - And following that, we can actually assign the rest of the variables
433:02 - without needing to do any backtracking at all,
433:04 - even if I'm not using this inference procedure.
433:06 - Just by starting with a node that has a high degree,
433:09 - that is going to very quickly restrict the possible values
433:12 - that other nodes can take on.
433:14 - So that then is how we can go about selecting
433:17 - an unassigned variable in a particular order.
433:19 - Rather than randomly picking a variable, if we're
433:22 - a little bit intelligent about how we choose it,
433:24 - we can make our search process much, much more efficient
433:26 - by making sure we don't have to search through portions of the search space
433:30 - that ultimately aren't going to matter.
433:32 - The other variable we haven't really talked about,
433:34 - the other function here, is this domain values function.
433:37 - This domain values function that takes a variable
433:40 - and gives me back a sequence of all of the values
433:43 - inside of that variable's domain.
433:45 - The naive way to approach it is what we did before,
433:47 - which is just go in order, go Monday, then Tuesday, then Wednesday.
433:51 - But the problem is that going in that order
433:53 - might not be the most efficient order to search in,
433:55 - that sometimes it might be more efficient to choose values
433:59 - that are likely to be solutions first and then go to other values.
434:04 - Now, how do you assess whether a value is
434:06 - likelier to lead to a solution or less likely to lead to a solution?
434:10 - Well, one thing you can take a look at is how many constraints get added,
434:15 - how many things get removed from domains as you
434:17 - make this new assignment of a variable to this particular value.
434:21 - And the heuristic we can use here is the least constraining value heuristic,
434:26 - which is the idea that we should return variables in order
434:28 - based on the number of choices that are ruled out for neighboring values.
434:32 - And I want to start with the least constraining value, the value that
434:36 - rules out the fewest possible options.
434:40 - And the idea there is that if all I care about doing
434:43 - is finding a solution, if I start with a value that
434:47 - rules out a lot of other choices, I'm ruling out a lot of possibilities
434:51 - that maybe is going to make it less likely that this particular choice
434:55 - leads to a solution.
434:56 - Whereas on the other hand, if I have a variable
434:58 - and I start by choosing a value that doesn't rule out very much,
435:02 - well, then I still have a lot of space where there might be a solution
435:05 - that I could ultimately find.
435:06 - And this might seem a little bit counterintuitive and a little bit at odds
435:09 - with what we were talking about before, where I said,
435:12 - when you're picking a variable, you should
435:14 - pick the variable that is going to have the fewest possible values remaining.
435:18 - But here, I want to pick the value for the variable
435:20 - that is the least constraining.
435:22 - But the general idea is that when I am picking a variable,
435:25 - I would like to prune large portions of the search space
435:27 - by just choosing a variable that is going to allow me to quickly eliminate
435:30 - possible options.
435:32 - Whereas here, within a particular variable,
435:34 - as I'm considering values that that variable could take on,
435:37 - I would like to just find a solution.
435:40 - And so what I want to do is ultimately choose
435:42 - a value that still leaves open the possibility of me finding a solution
435:46 - to be as likely as possible.
435:48 - By not ruling out many options, I leave open the possibility
435:51 - that I can still find a solution without needing
435:54 - to go back later and backtrack.
435:56 - So an example of that might be in this particular situation here,
435:59 - if I'm trying to choose a variable for a value for node C here,
436:03 - that C is equal to either Tuesday or Wednesday.
436:06 - We know it can't be Monday because it conflicts with this domain here,
436:09 - where we already know that A is Monday, so C must be Tuesday or Wednesday.
436:13 - And the question is, should I try Tuesday first,
436:16 - or should I try Wednesday first?
436:18 - And if I try Tuesday, what gets ruled out?
436:21 - Well, one option gets ruled out here, a second option gets ruled out here,
436:25 - and a third option gets ruled out here.
436:27 - So choosing Tuesday would rule out three possible options.
436:30 - And what about choosing Wednesday?
436:32 - Well, choosing Wednesday would rule out one option here,
436:35 - and it would rule out one option there.
436:37 - And so I have two choices.
436:38 - I can choose Tuesday that rules out three options,
436:41 - or Wednesday that rules out two options.
436:43 - And according to the least constraining value heuristic,
436:46 - what I should probably do is go ahead and choose Wednesday,
436:49 - the one that rules out the fewest number of possible options,
436:52 - leaving open as many chances as possible for me
436:55 - to eventually find the solution inside of the state space.
436:58 - And ultimately, if you continue this process,
437:00 - we will find the solution, an assignment of variables, two values,
437:05 - that allows us to give each of these exams, each of these classes,
437:09 - an exam date that doesn't conflict with anyone
437:12 - that happens to be enrolled in two classes at the same time.
437:16 - So the big takeaway now with all of this is
437:18 - that there are a number of different ways we can formulate a problem.
437:21 - The ways we've looked at today are we can formulate a problem
437:24 - as a local search problem, a problem where we're looking at a current node
437:27 - and moving to a neighbor based on whether that neighbor is better
437:30 - or worse than the current node that we are looking at.
437:33 - We looked at formulating problems as linear programs,
437:35 - where just by putting things in terms of equations and constraints,
437:38 - we're able to solve problems a little bit more efficiently.
437:41 - And we saw formulating a problem as a constraint satisfaction problem,
437:45 - creating this graph of all of the constraints
437:48 - that connect two variables that have some constraint between them,
437:51 - and using that information to be able to figure out
437:54 - what the solution should be.
437:56 - And so the takeaway of all of this now is
437:58 - that if we have some problem in artificial intelligence
438:00 - that we would like to use AI to be able to solve them,
438:03 - whether that's trying to figure out where hospitals should be
438:05 - or trying to solve the traveling salesman problem,
438:07 - trying to optimize productions and costs and whatnot,
438:10 - or trying to figure out how to satisfy certain constraints,
438:13 - whether that's in a Sudoku puzzle, or whether that's
438:15 - in trying to figure out how to schedule exams for a university,
438:18 - or any number of a wide variety of types of problems,
438:21 - if we can formulate that problem as one of these sorts of problems,
438:24 - then we can use these known algorithms, these algorithms
438:27 - for enforcing art consistency and backtracking search,
438:30 - these hill climbing and simulated annealing algorithms,
438:33 - these simplex algorithms and interior point algorithms that
438:36 - can be used to solve linear programs, that we
438:38 - can use those techniques to begin to solve a whole wide variety of problems
438:42 - all in this world of optimization inside of artificial intelligence.
438:46 - This was an introduction to artificial intelligence with Python for today.
438:49 - We will see you next time.
438:52 - ["
439:11 - All right.
439:11 - Welcome back, everyone, to an introduction
439:13 - to artificial intelligence with Python.
439:15 - Now, so far in this class, we've used AI to solve
439:17 - a number of different problems, giving AI instructions
439:20 - for how to search for a solution, or how to satisfy certain constraints in order
439:24 - to find its way from some input point to some output point
439:27 - in order to solve some sort of problem.
439:29 - Today, we're going to turn to the world of learning,
439:31 - in particular the idea of machine learning, which generally refers
439:34 - to the idea where we are not going to give the computer explicit instructions
439:38 - for how to perform a task, but rather we are going to give the computer access
439:42 - to information in the form of data, or patterns that it can learn from,
439:45 - and let the computer try and figure out what those patterns are,
439:48 - try and understand that data to be able to perform a task on its own.
439:52 - Now, machine learning comes in a number of different forms,
439:54 - and it's a very wide field.
439:56 - So today, we'll explore some of the foundational algorithms and ideas
440:00 - that are behind a lot of the different areas within machine learning.
440:03 - And one of the most popular is the idea of supervised machine learning,
440:07 - or just supervised learning.
440:08 - And supervised learning is a particular type of task.
440:11 - It refers to the task where we give the computer access
440:14 - to a data set, where that data set consists of input-output pairs.
440:19 - And what we would like the computer to do
440:21 - is we would like our AI to be able to figure out
440:23 - some function that maps inputs to outputs.
440:27 - So we have a whole bunch of data that generally consists
440:29 - of some kind of input, some evidence, some information
440:32 - that the computer will have access to.
440:33 - And we would like the computer, based on that input information,
440:36 - to predict what some output is going to be.
440:40 - And we'll give it some data so that the computer can train its model on
440:43 - and begin to understand how it is that this information works
440:46 - and how it is that the inputs and outputs relate to each other.
440:49 - But ultimately, we hope that our computer
440:51 - will be able to figure out some function that, given those inputs,
440:54 - is able to get those outputs.
440:56 - There are a couple of different tasks within supervised learning.
440:59 - The one we'll focus on and start with is known as classification.
441:02 - And classification is the problem where, if I give you a whole bunch of inputs,
441:07 - you need to figure out some way to map those inputs into discrete categories,
441:11 - where you can decide what those categories are,
441:13 - and it's the job of the computer to predict what those categories are
441:16 - going to be.
441:17 - So that might be, for example, I give you information
441:19 - about a bank note, like a US dollar, and I'm asking you to predict for me,
441:23 - does it belong to the category of authentic bank notes,
441:26 - or does it belong to the category of counterfeit bank notes?
441:29 - You need to categorize the input, and we want
441:31 - to train the computer to figure out some function
441:33 - to be able to do that calculation.
441:36 - Another example might be the case of weather,
441:38 - someone we've talked about a little bit so far in this class,
441:40 - where we would like to predict on a given day,
441:43 - is it going to rain on that day?
441:44 - Is it going to be cloudy on that day?
441:46 - And before we've seen how we could do this, if we really give the computer
441:49 - all the exact probabilities for if these are the conditions,
441:53 - what's the probability of rain?
441:54 - Oftentimes, we don't have access to that information, though.
441:57 - But what we do have access to is a whole bunch of data.
442:00 - So if we wanted to be able to predict something like,
442:02 - is it going to rain or is it not going to rain,
442:04 - we would give the computer historical information about days
442:07 - when it was raining and days when it was not raining
442:10 - and ask the computer to look for patterns in that data.
442:14 - So what might that data look like?
442:15 - Well, we could structure that data in a table like this.
442:18 - This might be what our table looks like, where for any particular day,
442:21 - going back, we have information about that day's humidity,
442:24 - that day's air pressure, and then importantly, we have a label,
442:28 - something where the human has said that on this particular day,
442:31 - it was raining or it was not raining.
442:33 - So you could fill in this table with a whole bunch of data.
442:35 - And what makes this what we would call a supervised learning exercise
442:39 - is that a human has gone in and labeled each of these data points,
442:42 - said that on this day, when these were the values for the humidity and pressure,
442:45 - that day was a rainy day and this day was a not rainy day.
442:49 - And what we would like the computer to be able to do then
442:51 - is to be able to figure out, given these inputs, given the humidity
442:55 - and the pressure, can the computer predict what label
442:58 - should be associated with that day?
442:59 - Does that day look more like it's going to be a day that rains
443:02 - or does it look more like a day when it's not going to rain?
443:06 - Put a little bit more mathematically, you can think of this as a function
443:10 - that takes two inputs, the inputs being the data points
443:13 - that our computer will have access to, things like humidity and pressure.
443:16 - So we could write a function f that takes
443:18 - as input both humidity and pressure.
443:20 - And then the output is going to be what category
443:24 - we would ascribe to these particular input points, what label
443:27 - we would associate with that input.
443:29 - So we've seen a couple of example data points here,
443:31 - where given this value for humidity and this value for pressure,
443:34 - we predict, is it going to rain or is it not going to rain?
443:37 - And that's information that we just gathered from the world.
443:40 - We measured on various different days what the humidity and pressure were.
443:44 - We observed whether or not we saw rain or no rain on that particular day.
443:48 - And this function f is what we would like to approximate.
443:51 - Now, the computer and we humans don't really
443:53 - know exactly how this function f works.
443:55 - It's probably quite a complex function.
443:57 - So what we're going to do instead is attempt to estimate it.
444:01 - We would like to come up with a hypothesis function.
444:03 - h, which is going to try to approximate what f does.
444:08 - We want to come up with some function h that will also take the same inputs
444:12 - and will also produce an output, rain or no rain.
444:15 - And ideally, we'd like these two functions to agree as much as possible.
444:20 - So the goal then of the supervised learning classification tasks
444:23 - is going to be to figure out, what does that function h look like?
444:26 - How can we begin to estimate, given all of this information, all of this data,
444:30 - what category or what label should be assigned to a particular data point?
444:35 - So where could you begin doing this?
444:37 - Well, a reasonable thing to do, especially in this situation,
444:39 - I have two numerical values, is I could try
444:42 - to plot this on a graph that has two axes, an x-axis and a y-axis.
444:47 - And in this case, we're just going to be using two numerical values as input.
444:50 - But these same types of ideas scale as you add more and more inputs as well.
444:54 - We'll be plotting things in two dimensions.
444:56 - But as we soon see, you could add more inputs
444:58 - and just imagine things in multiple dimensions.
445:00 - And while we humans have trouble conceptualizing anything really
445:04 - beyond three dimensions, at least visually,
445:06 - a computer has no problem with trying to imagine things
445:08 - in many, many more dimensions, that for a computer,
445:11 - each dimension is just some separate number that it is keeping track of.
445:14 - So it wouldn't be unreasonable for a computer to think in 10 dimensions
445:17 - or 100 dimensions to be able to try to solve a problem.
445:20 - But for now, we've got two inputs.
445:22 - So we'll graph things along two axes, an x-axis, which will here
445:25 - represent humidity, and a y-axis, which here represents pressure.
445:29 - And what we might do is say, let's take all of the days
445:32 - that were raining and just try to plot them on this graph
445:35 - and see where they fall on this graph.
445:37 - And here might be all of the rainy days, where each rainy day is
445:40 - one of these blue dots here that corresponds
445:42 - to a particular value for humidity and a particular value for pressure.
445:46 - And then I might do the same thing with the days that were not rainy.
445:49 - So take all the not rainy days, figure out
445:51 - what their values were for each of these two inputs,
445:53 - and go ahead and plot them on this graph as well.
445:56 - And I've here plotted them in red.
445:58 - So blue here stands for a rainy day.
446:00 - Red here stands for a not rainy day.
446:02 - And this then is the input that my computer
446:04 - has access to all of this input.
446:07 - And what I would like the computer to be able to do
446:09 - is to train a model such that if I'm ever presented with a new input that
446:13 - doesn't have a label associated with it, something like this white dot here,
446:18 - I would like to predict, given those values for each of the two inputs,
446:21 - should we classify it as a blue dot, a rainy day,
446:24 - or should we classify it as a red dot, a not rainy day?
446:28 - And if you're just looking at this picture graphically, trying to say,
446:30 - all right, this white dot, does it look like it belongs to the blue category,
446:34 - or does it look like it belongs to the red category,
446:36 - I think most people would agree that it probably belongs to the blue category.
446:40 - And why is that?
446:41 - Well, it looks like it's close to other blue dots.
446:45 - And that's not a very formal notion, but it's a notion
446:47 - that we'll formalize in just a moment.
446:49 - That because it seems to be close to this blue dot here,
446:52 - nothing else is closer to it, then we might
446:54 - say that it should be categorized as blue.
446:56 - It should fall into that category of, I think
446:58 - that day is going to be a rainy day based on that input.
447:01 - Might not be totally accurate, but it's a pretty good guess.
447:04 - And this type of algorithm is actually a very popular and common machine
447:08 - learning algorithm known as nearest neighbor classification.
447:11 - It's an algorithm for solving these classification-type problems.
447:14 - And in nearest neighbor classification, it's going to perform this algorithm.
447:18 - What it will do is, given an input, it will
447:20 - choose the class of the nearest data point to that input.
447:24 - By class, we just here mean category, like rain or no rain,
447:27 - counterfeit or not counterfeit.
447:29 - And we choose the category or the class based on the nearest data point.
447:34 - So given all that data, we just looked at,
447:36 - is the nearest data point a blue point or is it a red point?
447:39 - And depending on the answer to that question,
447:42 - we were able to make some sort of judgment.
447:44 - We were able to say something like, we think it's going to be blue
447:47 - or we think it's going to be red.
447:49 - So likewise, we could apply this to other data points
447:51 - that we encounter as well.
447:52 - If suddenly this data point comes about, well, its nearest data is red.
447:56 - So we would go ahead and classify this as a red point, not raining.
448:00 - Things get a little bit trickier, though, when you look at a point
448:03 - like this white point over here and you ask the same sort of question.
448:07 - Should it belong to the category of blue points, the rainy days?
448:10 - Or should it belong to the category of red points, the not rainy days?
448:14 - Now, nearest neighbor classification would say the way you solve this problem
448:18 - is look at which point is nearest to that point.
448:21 - You look at this nearest point and say it's red.
448:23 - It's a not rainy day.
448:24 - And therefore, according to nearest neighbor classification,
448:27 - I would say that this unlabeled point, well, that should also be red.
448:30 - It should also be classified as a not rainy day.
448:33 - But your intuition might think that that's a reasonable judgment to make,
448:37 - that it's the closest thing is a not rainy day.
448:39 - So may as well guess that it's a not rainy day.
448:41 - But it's probably also reasonable to look at the bigger picture of things
448:44 - to say, yes, it is true that the nearest point to it was a red point.
448:49 - But it's surrounded by a whole bunch of other blue points.
448:52 - So looking at the bigger picture, there's potentially
448:55 - an argument to be made that this point should actually be blue.
448:59 - And with only this data, we actually don't know for sure.
449:01 - We are given some input, something we're trying to predict.
449:04 - And we don't necessarily know what the output is going to be.
449:07 - So in this case, which one is correct is difficult to say.
449:10 - But oftentimes, considering more than just a single neighbor,
449:13 - considering multiple neighbors can sometimes give us a better result.
449:18 - And so there's a variant on the nearest neighbor classification algorithm
449:21 - that is known as the K nearest neighbor classification algorithm,
449:25 - where K is some parameter, some number that we choose,
449:28 - for how many neighbors are we going to look at.
449:30 - So one nearest neighbor classification is what we saw before.
449:34 - Just pick the one nearest neighbor and use that category.
449:37 - But with K nearest neighbor classification,
449:39 - where K might be 3, or 5, or 7, to say look at the 3, or 5, or 7 closest
449:44 - neighbors, closest data points to that point, works a little bit differently.
449:48 - This algorithm, we'll give it an input.
449:50 - Choose the most common class out of the K nearest data points to that input.
449:55 - So if we look at the five nearest points, and three of them say it's raining,
449:59 - and two of them say it's not raining, we'll
450:01 - go with the three instead of the two, because each one effectively
450:05 - gets one vote towards what they believe the category ought to be.
450:09 - And ultimately, you choose the category that has the most votes
450:12 - as a consequence of that.
450:14 - So K nearest neighbor classification, fairly straightforward one
450:17 - to understand intuitively.
450:18 - You just look at the neighbors and figure out what the answer might be.
450:21 - And it turns out this can work very, very well
450:24 - for solving a whole variety of different types of classification problems.
450:28 - But not every model is going to work under every situation.
450:31 - And so one of the things we'll take a look at today, especially
450:33 - in the context of supervised machine learning,
450:35 - is that there are a number of different approaches to machine learning,
450:38 - a number of different algorithms that we can apply,
450:40 - all solving the same type of problem, all solving some kind of classification
450:44 - problem where we want to take inputs and organize it
450:47 - into different categories.
450:49 - And no one algorithm is necessarily always
450:51 - going to be better than some other algorithm.
450:53 - They each have their trade-offs.
450:54 - And maybe depending on the data, one type of algorithm
450:57 - is going to be better suited to trying to model
450:59 - that information than some other algorithm.
451:01 - And so this is what a lot of machine learning research ends up being about,
451:04 - that when you're trying to apply machine learning techniques,
451:06 - you're often looking not just at one particular algorithm,
451:09 - but trying multiple different algorithms,
451:11 - trying to see what is going to give you the best results for trying
451:14 - to predict some function that maps inputs to outputs.
451:18 - So what then are the drawbacks of K nearest neighbor classification?
451:22 - Well, there are a couple.
451:23 - One might be that in a naive approach, at least, it could be fairly slow
451:27 - to have to go through and measure the distance between a point
451:30 - and every single one of these points that exist here.
451:32 - Now, there are ways of trying to get around that.
451:33 - There are data structures that can help to make it more quickly
451:36 - to be able to find these neighbors.
451:38 - There are also techniques you can use to try and prune some of this data,
451:41 - remove some of the data points so that you're only
451:43 - left with the relevant data points just to make it a little bit easier.
451:47 - But ultimately, what we might like to do is come up
451:49 - with another way of trying to do this classification.
451:53 - And one way of trying to do the classification
451:55 - was looking at what are the neighboring points.
451:57 - But another way might be to try to look at all of the data
452:01 - and see if we can come up with some decision boundary, some boundary that
452:05 - will separate the rainy days from the not rainy days.
452:08 - And in the case of two dimensions, we can do that by drawing a line,
452:11 - for example.
452:12 - So what we might want to try to do is just find some line,
452:15 - find some separator that divides the rainy days, the blue points over here,
452:20 - from the not rainy days, the red points over there.
452:22 - We're now trying a different approach in contrast
452:25 - with the nearest neighbor approach, which just
452:27 - looked at local data around the input data point that we cared about.
452:31 - Now what we're doing is trying to use a technique known as linear regression
452:35 - to find some sort of line that will separate the two halves from each other.
452:39 - Now sometimes it'll actually be possible to come up
452:42 - with some line that perfectly separates all the rainy days
452:45 - from the not rainy days.
452:46 - Realistically, though, this is probably cleaner
452:49 - than many data sets will actually be.
452:50 - Oftentimes, data is messier.
452:52 - There are outliers.
452:53 - There's random noise that happens inside of a particular system.
452:56 - And what we'd like to do is still be able to figure out
452:59 - what a line might look like.
453:00 - So in practice, the data will not always be linearly separable.
453:04 - Or linearly separable refers to some data set
453:07 - where I could draw a line just to separate the two halves of it perfectly.
453:11 - Instead, you might have a situation like this,
453:13 - where there are some rainy points that are on this side of the line
453:16 - and some not rainy points that are on that side of the line.
453:19 - And there may not be a line that perfectly separates
453:23 - what path of the inputs from the other half,
453:25 - that perfectly separates all the rainy days from the not rainy days.
453:29 - But we can still say that this line does a pretty good job.
453:33 - And we'll try to formalize a little bit later
453:34 - what we mean when we say something like this line does a pretty good job
453:38 - of trying to make that prediction.
453:40 - But for now, let's just say we're looking for a line that
453:42 - does as good of a job as we can at trying to separate one category of things
453:47 - from another category of things.
453:49 - So let's now try to formalize this a little bit more mathematically.
453:53 - We want to come up with some sort of function, some way we can define this
453:56 - line.
453:57 - And our inputs are things like humidity and pressure in this case.
454:01 - So our inputs we might call x1 is going to represent humidity,
454:05 - and x2 is going to represent pressure.
454:08 - These are inputs that we are going to provide to our machine learning
454:11 - algorithm.
454:12 - And given those inputs, we would like for our model
454:14 - to be able to predict some sort of output.
454:17 - And we are going to predict that using our hypothesis function, which
454:20 - we called h.
454:21 - Our hypothesis function is going to take as input x1 and x2, humidity
454:26 - and pressure in this case.
454:27 - And you can imagine if we didn't just have two inputs,
454:29 - we had three or four or five inputs or more,
454:31 - we could have this hypothesis function take all of those as input.
454:35 - And we'll see examples of that a little bit later as well.
454:38 - And now the question is, what does this hypothesis function do?
454:42 - Well, it really just needs to measure, is this data point
454:46 - on one side of the boundary, or is it on the other side of the boundary?
454:51 - And how do we formalize that boundary?
454:53 - Well, the boundary is generally going to be
454:55 - a linear combination of these input variables,
454:59 - at least in this particular case.
455:01 - So what we're trying to do when we say linear combination
455:03 - is take each of these inputs and multiply them
455:06 - by some number that we're going to have to figure out.
455:08 - We'll generally call that number a weight for how important
455:11 - should these variables be in trying to determine the answer.
455:14 - So we'll weight each of these variables with some weight,
455:17 - and we might add a constant to it just to try and make
455:19 - the function a little bit different.
455:21 - And the result, we just need to compare.
455:23 - Is it greater than 0, or is it less than 0 to say,
455:26 - does it belong on one side of the line or the other side of the line?
455:30 - So what that mathematical expression might look like is this.
455:33 - We would take each of my variables, x1 and x2, multiply them by some weight.
455:38 - I don't yet know what that weight is, but it's
455:40 - going to be some number, weight 1 and weight 2.
455:43 - And maybe we just want to add some other weight 0 to it,
455:46 - because the function might require us to shift the entire value up or down
455:50 - by a certain amount.
455:51 - And then we just compare.
455:52 - If we do all this math, is it greater than or equal to 0?
455:55 - If so, we might categorize that data point as a rainy day.
455:58 - And otherwise, we might say, no rain.
456:02 - So the key here, then, is that this expression
456:05 - is how we are going to calculate whether it's a rainy day or not.
456:08 - We're going to do a bunch of math where we take each of the variables,
456:11 - multiply them by a weight, maybe add an extra weight to it,
456:14 - see if the result is greater than or equal to 0.
456:17 - And using that result of that expression,
456:19 - we're able to determine whether it's raining or not raining.
456:22 - This expression here is in this case going to refer to just some line.
456:26 - If you were to plot that graphically, it would just be some line.
456:29 - And what the line actually looks like depends upon these weights.
456:33 - x1 and x2 are the inputs, but these weights
456:35 - are really what determine the shape of that line, the slope of that line,
456:39 - and what that line actually looks like.
456:42 - So we then would like to figure out what these weights should be.
456:45 - We can choose whatever weights we want, but we
456:47 - want to choose weights in such a way that if you pass in a rainy day's
456:51 - humidity and pressure, then you end up with a result that
456:53 - is greater than or equal to 0.
456:55 - And we would like it such that if we passed into our hypothesis
456:57 - function a not rainy day's inputs, then the output that we get
457:01 - should be not raining.
457:03 - So before we get there, let's try and formalize this a little bit more
457:06 - mathematically just to get a sense for how it is that you'll often see this
457:10 - if you ever go further into supervised machine learning
457:12 - and explore this idea.
457:14 - One thing is that generally for these categories,
457:16 - we'll sometimes just use the names of the categories like rain and not rain.
457:20 - Often mathematically, if we're trying to do comparisons between these things,
457:23 - it's easier just to deal in the world of numbers.
457:25 - So we could just say 1 and 0, 1 for raining, 0 for not raining.
457:30 - So we do all this math.
457:31 - And if the result is greater than or equal to 0,
457:34 - we'll go ahead and say our hypothesis function outputs 1, meaning raining.
457:37 - And otherwise, it outputs 0, meaning not raining.
457:41 - And oftentimes, this type of expression will instead
457:45 - express using vector mathematics.
457:47 - And all a vector is, if you're not familiar with the term,
457:50 - is it refers to a sequence of numerical values.
457:53 - You could represent that in Python using a list of numerical values
457:56 - or a tuple with numerical values.
457:59 - And here, we have a couple of sequences of numerical values.
458:02 - One of our vectors, one of our sequences of numerical values,
458:06 - are all of these individual weights, w0, w1, and w2.
458:11 - So we could construct what we'll call a weight vector,
458:14 - and we'll see why this is useful in a moment,
458:16 - called w, generally represented using a boldface w, that
458:19 - is just a sequence of these three weights, weight 0, weight 1,
458:23 - and weight 2.
458:24 - And to be able to calculate, based on those weights,
458:26 - whether we think a day is raining or not raining,
458:30 - we're going to multiply each of those weights by one of our input variables.
458:35 - That w2, this weight, is going to be multiplied by input variable x2.
458:39 - w1 is going to be multiplied by input variable x1.
458:42 - And w0, well, it's not being multiplied by anything.
458:46 - But to make sure the vectors are the same length,
458:48 - and we'll see why that's useful in just a second,
458:50 - we'll just go ahead and say w0 is being multiplied by 1.
458:54 - Because you can multiply by something by 1,
458:55 - and you end up getting the exact same number.
458:58 - So in addition to the weight vector w, we'll
459:00 - also have an input vector that we'll call x that has three values, 1,
459:05 - again, because we're just multiplying w0 by 1 eventually, and then x1 and x2.
459:11 - So here, then, we've represented two distinct vectors, a vector of weights
459:14 - that we need to somehow learn.
459:16 - The goal of our machine learning algorithm
459:18 - is to learn what this weight vector is supposed to be.
459:21 - We could choose any arbitrary set of numbers,
459:23 - and it would produce a function that tries to predict rain or not rain,
459:26 - but it probably wouldn't be very good.
459:28 - What we want to do is come up with a good choice of these weights
459:32 - so that we're able to do the accurate predictions.
459:34 - And then this input vector represents a particular input
459:38 - to the function, a data point for which we would like to estimate,
459:41 - is that day a rainy day, or is that day a not rainy day?
459:45 - And so that's going to vary just depending
459:47 - on what input is provided to our function, what
459:49 - it is that we are trying to estimate.
459:51 - And then to do the calculation, we want to calculate this expression here,
459:55 - and it turns out that expression is what we would call the dot product
459:59 - of these two vectors.
460:00 - The dot product of two vectors just means taking each of the terms
460:04 - in the vectors and multiplying them together, w0 multiply it by 1,
460:08 - w1 multiply it by x1, w2 multiply it by x2,
460:11 - and that's why these vectors need to be the same length.
460:14 - And then we just add all of the results together.
460:17 - So the dot product of w and x, our weight vector and our input vector,
460:22 - that's just going to be w0 times 1, or just w0,
460:26 - plus w1 times x1, multiplying these two terms together,
460:30 - plus w2 times x2, multiplying those terms together.
460:35 - So we have our weight vector, which we need to figure out.
460:38 - We need our machine learning algorithm to figure out
460:39 - what the weights should be.
460:41 - We have the input vector representing the data point
460:44 - that we're trying to predict a category for, predict a label for.
460:47 - And we're able to do that calculation by taking this dot product, which
460:51 - you'll often see represented in vector form.
460:53 - But if you haven't seen vectors before, you
460:54 - can think of it as identical to just this mathematical expression,
460:57 - just doing the multiplication, adding the results together,
461:01 - and then seeing whether the result is greater than or equal to 0 or not.
461:04 - This expression here is identical to the expression
461:07 - that we're calculating to see whether or not
461:09 - that answer is greater than or equal to 0 in this case.
461:14 - And so for that reason, you'll often see the hypothesis function
461:17 - written as something like this, a simpler representation where
461:20 - the hypothesis takes as input some input vector x, some humidity
461:25 - and pressure for some day.
461:26 - And we want to predict an output like rain or no rain or 1 or 0
461:30 - if we choose to represent things numerically.
461:33 - And the way we do that is by taking the dot product of the weights
461:37 - and our input.
461:38 - If it's greater than or equal to 0, we'll go ahead and say the output is 1.
461:42 - Otherwise, the output is going to be 0.
461:44 - And this hypothesis, we say, is parameterized by the weights.
461:49 - Depending on what weights we choose, we'll
461:51 - end up getting a different hypothesis.
461:53 - If we choose the weights randomly, we're probably
461:55 - not going to get a very good hypothesis function.
461:57 - We'll get a 1 or a 0.
461:58 - But it's probably not accurately going to reflect
462:01 - whether we think a day is going to be rainy or not rainy.
462:04 - But if we choose the weights right, we can often
462:06 - do a pretty good job of trying to estimate whether we think
462:09 - the output of the function should be a 1 or a 0.
462:13 - And so the question, then, is how to figure out
462:16 - what these weights should be, how to be able to tune those parameters.
462:19 - And there are a number of ways you can do that.
462:21 - One of the most common is known as the perceptron learning rule.
462:25 - And we'll see more of this later.
462:27 - But the idea of the perceptron learning rule,
462:29 - and we're not going to get too deep into the mathematics,
462:30 - we'll mostly just introduce it more conceptually,
462:33 - is to say that given some data point that we would like to learn from,
462:37 - some data point that has an input x and an output y, where
462:41 - y is like 1 for rain or 0 for not rain, then we're going to update the weights.
462:46 - And we'll look at the formula in just a moment.
462:48 - But the big picture idea is that we can start with random weights,
462:51 - but then learn from the data.
462:53 - Take the data points one at a time.
462:55 - And for each one of the data points, figure out, all right,
462:58 - what parameters do we need to change inside of the weights
463:02 - in order to better match that input point.
463:05 - And so that is the value of having access to a lot of data
463:07 - in the supervised machine learning algorithm,
463:09 - is that you take each of the data points and maybe look at them multiple times
463:13 - and constantly try and figure out whether you
463:15 - need to shift your weights in order to better create some weight vector that
463:19 - is able to correctly or more accurately try to estimate what the output should
463:24 - be, whether we think it's going to be raining
463:25 - or whether we think it's not going to be raining.
463:28 - So what does that weight update look like?
463:30 - Without going into too much of the mathematics,
463:32 - we're going to update each of the weights to be the result of the original
463:35 - weight plus some additional expression.
463:39 - And to understand this expression, y, well,
463:41 - y is what the actual output is.
463:44 - And hypothesis of x, the input, that's going to be what we thought the input
463:50 - was.
463:51 - And so I can replace this by saying what the actual value was minus what
463:55 - our estimate was.
463:56 - And based on the difference between the actual value and what our estimate was,
464:01 - we might want to change our hypothesis, change the way
464:04 - that we do that estimation.
464:06 - If the actual value and the estimate were the same thing,
464:08 - meaning we were correctly able to predict what category
464:11 - this data point belonged to, well, then actual value minus estimate,
464:14 - that's just going to be 0, which means this whole term on the right-hand side
464:18 - goes to be 0, and the weight doesn't change.
464:20 - Weight i, where i is like weight 1 or weight 2 or weight 0,
464:24 - weight i just stays at weight i.
464:26 - And none of the weights change if we were able to correctly predict
464:29 - what category the input belonged to.
464:32 - But if our hypothesis didn't correctly predict what category the input
464:36 - belonged to, well, then maybe then we need to make some changes, adjust
464:40 - the weights so that we're better able to predict this kind of data
464:43 - point in the future.
464:45 - And what is the way we might do that?
464:47 - Well, if the actual value was bigger than the estimate, then,
464:51 - and for now we'll go ahead and assume that these x's are positive values,
464:54 - then if the actual value was bigger than the estimate,
464:57 - well, that means we need to increase the weight in order
465:00 - to make it such that the output is bigger,
465:02 - and therefore we're more likely to get to the right actual value.
465:06 - And so if the actual value is bigger than the estimate,
465:08 - then actual value minus estimate, that'll be a positive number.
465:11 - And so you imagine we're just adding some positive number to the weight
465:14 - just to increase it ever so slightly.
465:16 - And likewise, the inverse case is true, that if the actual value
465:19 - was less than the estimate, the actual value was 0,
465:23 - but we estimated 1, meaning it actually was not raining,
465:26 - but we predicted it was going to be raining.
465:28 - Well, then we want to decrease the value of the weight,
465:31 - because then in that case, we want to try and lower
465:33 - the total value of computing that dot product in order
465:36 - to make it less likely that we would predict that it would actually
465:39 - be raining.
465:40 - So no need to get too deep into the mathematics of that,
465:43 - but the general idea is that every time we encounter some data point,
465:46 - we can adjust these weights accordingly to try and make
465:49 - the weights better line up with the actual data that we have access to.
465:53 - And you can repeat this process with data point after data point
465:56 - until eventually, hopefully, your algorithm
465:58 - converges to some set of weights that do a pretty good job of trying
466:02 - to figure out whether a day is going to be rainy or not raining.
466:05 - And just as a final point about this particular equation,
466:08 - this value alpha here is generally what we'll call the learning rate.
466:12 - It's just some parameter, some number we choose
466:15 - for how quickly we're actually going to be updating these weight values.
466:18 - So that if alpha is bigger, then we're going
466:20 - to update these weight values by a lot.
466:22 - And if alpha is smaller, then we'll update the weight values by less.
466:25 - And you can choose a value of alpha.
466:26 - Depending on the problem, different values
466:29 - might suit the situation better or worse than others.
466:32 - So after all of that, after we've done this training process of take
466:36 - all this data and using this learning rule,
466:38 - look at all the pieces of data and use each piece of data as an indication
466:43 - to us of do the weights stay the same, do we increase the weights,
466:45 - do we decrease the weights, and if so, by how much?
466:48 - What you end up with is effectively a threshold function.
466:52 - And we can look at what the threshold function looks like like this.
466:56 - On the x-axis here, we have the output of that function,
466:58 - taking the weights, taking the dot product of it with the input.
467:03 - And on the y-axis, we have what the output is going to be,
467:05 - 0, which in this case represented not raining,
467:08 - and 1, which in this case represented raining.
467:11 - And the way that our hypothesis function works is it calculates this value.
467:16 - And if it's greater than 0 or greater than some threshold value,
467:20 - then we declare that it's a rainy day.
467:22 - And otherwise, we declare that it's a not rainy day.
467:25 - And this then graphically is what that function looks like,
467:28 - that initially when the value of this dot product is small, it's not raining,
467:32 - it's not raining, it's not raining.
467:33 - But as soon as it crosses that threshold,
467:36 - we suddenly say, OK, now it's raining, now it's raining, now it's raining.
467:39 - And the way to interpret this kind of representation
467:42 - is that anything on this side of the line, that
467:44 - would be the category of data points where we say, yes, it's raining.
467:47 - Anything that falls on this side of the line
467:49 - are the data points where we would say, it's not raining.
467:52 - And again, we want to choose some value for the weights
467:54 - that results in a function that does a pretty good job of trying
467:57 - to do this estimation.
468:00 - But one tricky thing with this type of hard threshold
468:04 - is that it only leaves two possible outcomes.
468:07 - We plug in some data as input.
468:09 - And the output we get is raining or not raining.
468:13 - And there's no room for anywhere in between.
468:15 - And maybe that's what you want.
468:17 - Maybe all you want is given some data point,
468:19 - you would like to be able to classify it into one or two or more
468:22 - of these various different categories.
468:24 - But it might also be the case that you care about knowing
468:28 - how strong that prediction is, for example.
468:31 - So if we go back to this instance here, where we have rainy days
468:34 - on this side of the line, not rainy days on that side of the line,
468:38 - you might imagine that let's look now at these two white data points.
468:41 - This data point here that we would like to predict a label or a category for.
468:46 - And this data point over here that we would also
468:48 - like to predict a label or a category for.
468:51 - It seems likely that you could pretty confidently
468:53 - say that this data point, that should be a rainy day.
468:56 - Seems close to the other rainy days if we're
468:58 - going by the nearest neighbor strategy.
469:00 - It's on this side of the line if we're going by the strategy of just saying,
469:04 - which side of the line does it fall on by figuring out
469:07 - what those weights should be.
469:08 - And if we're using the line strategy of just which side of the line
469:11 - does it fall on, which side of this decision boundary,
469:14 - well, we'd also say that this point here is also a rainy day
469:18 - because it falls on the side of the line that corresponds to rainy days.
469:23 - But it's likely that even in this case, we
469:25 - would know that we don't feel nearly as confident about this data
469:29 - point on the left as compared to this data point on the right.
469:33 - That for this one on the right, we can feel very confident
469:35 - that yes, it's a rainy day.
469:37 - This one, it's pretty close to the line if we're judging just by distance.
469:41 - And so you might be less sure.
469:44 - But our threshold function doesn't allow for a notion of less sure
469:48 - or more sure about something.
469:50 - It's what we would call a hard threshold.
469:51 - It's once you've crossed this line, then immediately we say,
469:55 - yes, this is going to be a rainy day.
469:57 - Anywhere before it, we're going to say it's not a rainy day.
470:00 - And that may not be helpful in a number of cases.
470:03 - One, this is not a particularly easy function to deal with.
470:06 - As you get deeper into the world of machine learning
470:08 - and are trying to do things like taking derivatives of these curves
470:11 - with this type of function makes things challenging.
470:14 - But the other challenge is that we don't really
470:16 - have any notion of gradation between things.
470:17 - We don't have a notion of yes, this is a very strong belief
470:21 - that it's going to be raining as opposed to it's probably more likely than not
470:25 - that it's going to be raining, but maybe not totally sure about that either.
470:30 - So what we can do by taking advantage of a technique known
470:32 - as logistic regression is instead of using this hard threshold
470:36 - type of function, we can use instead a logistic function, something
470:39 - we might call a soft threshold.
470:41 - And that's going to transform this into looking something
470:45 - a little more like this, something that more nicely curves.
470:48 - And as a result, the possible output values are no longer just 0 and 1,
470:52 - 0 for not raining, 1 for raining.
470:55 - But you can actually get any real numbered value between 0 and 1.
470:59 - But if you're way over on this side, then you get a value of 0.
471:03 - OK, it's not going to be raining, and we're pretty sure about that.
471:05 - And if you're over on this side, you get a value of 1.
471:07 - And yes, we're very sure that it's going to be raining.
471:10 - But in between, you could get some real numbered value,
471:13 - where a value like 0.7 might mean we think it's going to rain.
471:17 - It's more probable that it's going to rain than not based on the data.
471:20 - But we're not as confident as some of the other data points might be.
471:25 - So one of the advantages of the soft threshold
471:27 - is that it allows us to have an output that could be some real number that
471:30 - potentially reflects some sort of probability, the likelihood that we
471:34 - think that this particular data point belongs to that particular category.
471:39 - And there are some other nice mathematical properties of that as well.
471:43 - So that then is two different approaches to trying
471:46 - to solve this type of classification problem.
471:48 - One is this nearest neighbor type of approach,
471:51 - where you just take a data point and look at the data points that are nearby
471:54 - to try and estimate what category we think it belongs to.
471:58 - And the other approach is the approach of saying, all right,
472:01 - let's just try and use linear regression,
472:03 - figure out what these weights should be, adjust the weights in order
472:06 - to figure out what line or what decision boundary is going
472:09 - to best separate these two categories.
472:12 - It turns out that another popular approach, a very popular approach
472:15 - if you just have a data set and you want to start
472:17 - trying to do some learning on it, is what we call the support vector machine.
472:20 - And we're not going to go too much into the mathematics of the support vector
472:23 - machine, but we'll at least explore it graphically to see what it is
472:26 - that it looks like.
472:27 - And the idea or the motivation behind the support vector machine
472:31 - is the idea that there are actually a lot of different lines
472:34 - that we could draw, a lot of different decision boundaries
472:37 - that we could draw to separate two groups.
472:39 - So for example, I had the red data points over here
472:41 - and the blue data points over here.
472:43 - One possible line I could draw is a line like this,
472:47 - that this line here would separate the red points from the blue points.
472:50 - And it does so perfectly.
472:51 - All the red points are on one side of the line.
472:54 - All the blue points are on the other side of the line.
472:56 - But this should probably make you a little bit nervous.
472:59 - If you come up with a model and the model comes up
473:02 - with a line that looks like this.
473:03 - And the reason why is that you worry about how well
473:06 - it's going to generalize to other data points that are not necessarily
473:10 - in the data set that we have access to.
473:12 - For example, if there was a point that fell like right here,
473:15 - for example, on the right side of the line, well, then based on that,
473:19 - we might want to guess that it is, in fact, a red point,
473:23 - but it falls on the side of the line where instead we
473:25 - would estimate that it's a blue point instead.
473:29 - And so based on that, this line is probably not a great choice
473:32 - just because it is so close to these various data points.
473:36 - We might instead prefer like a diagonal line
473:38 - that just goes diagonally through the data set like we've seen before.
473:41 - But there too, there's a lot of diagonal lines that we could draw as well.
473:44 - For example, I could draw this diagonal line here, which also successfully
473:48 - separates all the red points from all of the blue points.
473:51 - From the perspective of something like just trying
473:54 - to figure out some setting of weights that allows
473:56 - us to predict the correct output, this line
473:58 - will predict the correct output for this particular set of data
474:02 - every single time because the red points are on one side,
474:04 - the blue points are on the other.
474:06 - But yet again, you should probably be a little nervous
474:08 - because this line is so close to these red points,
474:11 - even though we're able to correctly predict on the input data,
474:15 - if there was a point that fell somewhere in this general area,
474:18 - our algorithm, this model, would say that, yeah, we think it's a blue point,
474:22 - when in actuality, it might belong to the red category instead
474:26 - just because it looks like it's close to the other red points.
474:29 - What we really want to be able to say, given this data, how can you generalize
474:33 - this as best as possible, is to come up with a line like this that
474:37 - seems like the intuitive line to draw.
474:39 - And the reason why it's intuitive is because it
474:41 - seems to be as far apart as possible from the red data and the blue data.
474:47 - So that if we generalize a little bit and assume
474:49 - that maybe we have some points that are different from the input
474:51 - but still slightly further away, we can still
474:54 - say that something on this side probably red, something on that side
474:58 - probably blue, and we can make those judgments that way.
475:01 - And that is what support vector machines are designed to do.
475:04 - They're designed to try and find what we call the maximum margin separator,
475:08 - where the maximum margin separator is just
475:10 - some boundary that maximizes the distance between the groups of points
475:14 - rather than come up with some boundary that's
475:16 - very close to one set or the other, where in the case
475:19 - before, we wouldn't have cared.
475:20 - As long as we're categorizing the input well, that seems all we need to do.
475:24 - The support vector machine will try and find this maximum margin separator,
475:28 - some way of trying to maximize that particular distance.
475:31 - And it does so by finding what we call the support vectors, which
475:35 - are the vectors that are closest to the line,
475:37 - and trying to maximize the distance between the line
475:40 - and those particular points.
475:42 - And it works that way in two dimensions.
475:44 - It also works in higher dimensions, where we're not
475:46 - looking for some line that separates the two data points,
475:49 - but instead looking for what we generally call a hyperplane,
475:52 - some decision boundary, effectively, that separates one set of data
475:57 - from the other set of data.
475:59 - And this ability of support vector machines
476:00 - to work in higher dimensions actually has a number of other applications
476:04 - as well.
476:04 - But one is that it helpfully deals with cases
476:07 - where data may not be linearly separable.
476:10 - So we talked about linear separability before,
476:12 - this idea that you can take data and just draw a line or some linear
476:16 - combination of the inputs that allows us to perfectly separate
476:20 - the two sets from each other.
476:21 - There are some data sets that are not linearly separable.
476:24 - And some were even two.
476:26 - You would not be able to find a good line at all
476:29 - that would try to do that kind of separation.
476:32 - Something like this, for example.
476:34 - Or if you imagine here are the red points and the blue points
476:37 - around it.
476:38 - If you try to find a line that divides the red points from the blue points,
476:43 - it's actually going to be difficult, if not impossible,
476:45 - to do that any line you choose, well, if you draw a line here,
476:49 - then you ignore all of these blue points that should actually
476:52 - be blue and not red.
476:53 - Anywhere else you draw a line, there's going to be a lot of error,
476:56 - a lot of mistakes, a lot of what we'll soon
476:58 - call loss to that line that you draw, a lot of points
477:02 - that you're going to categorize incorrectly.
477:04 - What we really want is to be able to find a better decision boundary that
477:08 - may not be just a straight line through this two dimensional space.
477:12 - And what support vector machines can do is
477:14 - they can begin to operate in higher dimensions
477:16 - and be able to find some other decision boundary,
477:19 - like the circle in this case, that actually
477:21 - is able to separate one of these sets of data
477:24 - from the other set of data a lot better.
477:26 - So oftentimes in data sets where the data is not linearly separable,
477:30 - support vector machines by working in higher dimensions
477:33 - can actually figure out a way to solve that kind of problem effectively.
477:37 - So that then, three different approaches to trying
477:39 - to solve these sorts of problems.
477:41 - We've seen support vector machines.
477:42 - We've seen trying to use linear regression and the perceptron learning
477:46 - rule to be able to figure out how to categorize inputs and outputs.
477:49 - We've seen the nearest neighbor approach.
477:51 - No one necessarily better than any other again.
477:54 - It's going to depend on the data set, the information you have access to.
477:57 - It's going to depend on what the function looks like that you're ultimately
478:00 - trying to predict.
478:01 - And this is where a lot of research and experimentation
478:04 - can be involved in trying to figure out how it
478:06 - is to best perform that kind of estimation.
478:09 - But classification is only one of the tasks
478:12 - that you might encounter in supervised machine learning.
478:14 - Because in classification, what we're trying to predict
478:17 - is some discrete category.
478:19 - We're trying to predict red or blue, rain or not rain,
478:22 - authentic or counterfeit.
478:24 - But sometimes what we want to predict is a real numbered value.
478:28 - And for that, we have a related problem, not classification,
478:31 - but instead known as regression.
478:33 - And regression is the supervised learning problem
478:35 - where we try and learn a function mapping inputs to outputs same as before.
478:39 - But instead of the outputs being discrete categories, things
478:43 - like rain or not rain, in a regression problem,
478:46 - the output values are generally continuous values, some real number
478:50 - that we would like to predict.
478:51 - This happens all the time as well.
478:53 - You might imagine that a company might take this approach
478:55 - if it's trying to figure out, for instance, what
478:58 - the effect of its advertising is.
478:59 - How do advertising dollars spent translate
479:02 - into sales for the company's product, for example?
479:05 - And so they might like to try to predict some function that
479:08 - takes as input the amount of money spent on advertising.
479:11 - And here, we're just going to use one input.
479:13 - But again, you could scale this up to many more inputs as well
479:15 - if you have a lot of different kinds of data you have access to.
479:18 - And the goal is to learn a function that given this amount of spending
479:21 - on advertising, we're going to get this amount in sales.
479:23 - And you might judge, based on having access to a whole bunch of data,
479:27 - like for every past month, here is how much we spent on advertising,
479:30 - and here is what sales were.
479:32 - And we would like to predict some sort of hypothesis function
479:36 - that, again, given the amount spent on advertising,
479:39 - we can predict, in this case, some real number, some number estimate
479:43 - of how much sales we expect that company to do in this month
479:47 - or in this quarter or whatever unit of time
479:49 - we're choosing to measure things in.
479:51 - And so again, the approach to solving this type of problem,
479:54 - we could try using a linear regression type approach where we take this data
479:58 - and we just plot it.
479:59 - On the x-axis, we have advertising dollars spent.
480:02 - On the y-axis, we have sales.
480:04 - And we might just want to try and draw a line that
480:07 - does a pretty good job of trying to estimate
480:09 - this relationship between advertising and sales.
480:12 - And in this case, unlike before, we're not
480:14 - trying to separate the data points into discrete categories.
480:17 - But instead, in this case, we're just trying
480:19 - to find a line that approximates this relationship between advertising
480:24 - and sales so that if we want to figure out what the estimated sales are
480:27 - for a particular advertising budget, you just look it up in this line,
480:31 - figure out for this amount of advertising,
480:33 - we would have this amount of sales and just try
480:35 - and make the estimate that way.
480:37 - And so you can try and come up with a line, again,
480:39 - figuring out how to modify the weights using various different techniques
480:42 - to try and make it so that this line fits as well as possible.
480:47 - So with all of these approaches, then, to trying to solve machine learning
480:51 - style problems, the question becomes, how do we evaluate these approaches?
480:54 - How do we evaluate the various different hypotheses
480:58 - that we could come up with?
480:59 - Because each of these algorithms will give us some sort of hypothesis,
481:02 - some function that maps inputs to outputs,
481:05 - and we want to know, how well does that function work?
481:09 - And you can think of evaluating these hypotheses
481:11 - and trying to get a better hypothesis as kind of like an optimization problem.
481:16 - In an optimization problem, as you recall from before,
481:19 - we were either trying to maximize some objective function
481:23 - by trying to find a global maximum, or we
481:26 - were trying to minimize some cost function by trying to find some global
481:30 - minimum.
481:31 - And in the case of evaluating these hypotheses, one thing we might say
481:34 - is that this cost function, the thing we're trying to minimize,
481:38 - we might be trying to minimize what we would call a loss function.
481:42 - And what a loss function is, is it is a function
481:44 - that is going to estimate for us how poorly our function performs.
481:49 - More formally, it's like a loss of utility
481:51 - by whenever we predict something that is wrong, that is a loss of utility.
481:55 - That's going to add to the output of our loss function.
481:59 - And you could come up with any loss function
482:01 - that you want, just some mathematical way of estimating,
482:03 - given each of these data points, given what the actual output is,
482:06 - and given what our projected output is, our estimate,
482:10 - you could calculate some sort of numerical loss for it.
482:12 - But there are a couple of popular loss functions
482:14 - that are worth discussing, just so that you've seen them before.
482:18 - When it comes to discrete categories, things like rain or not rain,
482:21 - counterfeit or not counterfeit, one approaches the 0, 1 loss function.
482:26 - And the way that works is for each of the data points,
482:29 - our loss function takes as input what the actual output is,
482:32 - like whether it was actually raining or not raining,
482:35 - and takes our prediction into account.
482:37 - Did we predict, given this data point, that it was raining or not raining?
482:41 - And if the actual value equals the prediction, well, then the 0, 1 loss
482:45 - function will just say the loss is 0.
482:47 - There was no loss of utility, because we were able to predict correctly.
482:51 - And otherwise, if the actual value was not the same thing
482:54 - as what we predicted, well, then in that case, our loss is 1.
482:58 - We lost something, lost some utility, because what we predicted
483:01 - was the output of the function, was not what it actually was.
483:05 - And the goal, then, in a situation like this
483:07 - would be to come up with some hypothesis that minimizes
483:11 - the total empirical loss, the total amount that we've lost,
483:14 - if you add up for all these data points what the actual output is
483:17 - and what your hypothesis would have predicted.
483:21 - So in this case, for example, if we go back to classifying days as raining
483:24 - or not raining, and we came up with this decision boundary,
483:27 - how would we evaluate this decision boundary?
483:29 - How much better is it than drawing the line here or drawing the line there?
483:33 - Well, we could take each of the input data points,
483:35 - and each input data point has a label, whether it was raining
483:38 - or whether it was not raining.
483:40 - And we could compare it to the prediction,
483:41 - whether we predicted it would be raining or not raining,
483:44 - and assign it a numerical value as a result.
483:47 - So for example, these points over here, they were all rainy days,
483:51 - and we predicted they would be raining, because they
483:53 - fall on the bottom side of the line.
483:55 - So they have a loss of 0, nothing lost from those situations.
483:58 - And likewise, same is true for some of these points over here,
484:01 - where it was not raining and we predicted it would not be raining either.
484:05 - Where we do have loss are points like this point here and that point there,
484:09 - where we predicted that it would not be raining,
484:13 - but in actuality, it's a blue point.
484:14 - It was raining.
484:15 - Or likewise here, we predicted that it would be raining,
484:18 - but in actuality, it's a red point.
484:20 - It was not raining.
484:21 - And so as a result, we miscategorized these data points
484:25 - that we were trying to train on.
484:27 - And as a result, there is some loss here.
484:29 - One loss here, there, here, and there, for a total loss of 4,
484:33 - for example, in this case.
484:34 - And that might be how we would estimate or how we would say
484:37 - that this line is better than a line that goes somewhere else
484:41 - or a line that's further down, because this line might minimize the loss.
484:45 - So there is no way to do better than just these four points of loss
484:50 - if you're just drawing a straight line through our space.
484:54 - So the 0, 1 loss function checks.
484:56 - Did we get it right?
484:57 - Did we get it wrong?
484:57 - If we got it right, the loss is 0, nothing lost.
485:00 - If we got it wrong, then our loss function for that data point says 1.
485:04 - And we add up all of those losses across all of our data points
485:07 - to get some sort of empirical loss, how much we
485:10 - have lost across all of these original data points
485:13 - that our algorithm had access to.
485:16 - There are other forms of loss as well that work especially well when
485:19 - we deal with more real valued cases, cases
485:21 - like the mapping between advertising budget and amount
485:24 - that we do in sales, for example.
485:26 - Because in that case, you care not just that you get the number exactly right,
485:30 - but you care how close you were to the actual value.
485:33 - If the actual value is you did like $2,800 in sales
485:37 - and you predicted that you would do $2,900 in sales,
485:40 - maybe that's pretty good.
485:42 - That's much better than if you had predicted you'd do $1,000 in sales,
485:45 - for example.
485:46 - And so we would like our loss function to be
485:48 - able to take that into account as well, take into account not just
485:53 - whether the actual value and the expected value are exactly the same,
485:57 - but also take into account how far apart they were.
486:01 - And so for that one approach is what we call L1 loss.
486:05 - L1 loss doesn't just look at whether actual and predicted
486:08 - are equal to each other, but we take the absolute value
486:11 - of the actual value minus the predicted value.
486:15 - In other words, we just ask how far apart were the actual and predicted
486:19 - values, and we sum that up across all of the data points
486:23 - to be able to get what our answer ultimately is.
486:26 - So what might this actually look like for our data set?
486:29 - Well, if we go back to this representation
486:31 - where we had advertising along the x-axis, sales along the y-axis,
486:35 - our line was our prediction, our estimate for any given
486:38 - amount of advertising, what we predicted sales was going to be.
486:42 - And our L1 loss is just how far apart vertically along the sales axis
486:48 - our prediction was from each of the data points.
486:51 - So we could figure out exactly how far apart
486:53 - our prediction was from each of the data points
486:55 - and figure out as a result of that what our loss is overall
486:59 - for this particular hypothesis just by adding up
487:02 - all of these various different individual losses for each of these data
487:05 - points.
487:06 - And our goal then is to try and minimize that loss,
487:08 - to try and come up with some line that minimizes what the utility loss is
487:13 - by judging how far away our estimate amount of sales
487:16 - is from the actual amount of sales.
487:18 - And turns out there are other loss functions as well.
487:21 - One that's quite popular is the L2 loss.
487:23 - The L2 loss, instead of just using the absolute value,
487:26 - like how far away the actual value is from the predicted value,
487:30 - it uses the square of actual minus predicted.
487:33 - So how far apart are the actual and predicted value?
487:36 - And it squares that value, effectively penalizing much more harshly anything
487:41 - that is a worse prediction.
487:43 - So you imagine if you have two data points
487:45 - that you predict as being one value away from their actual value,
487:50 - as opposed to one data point that you predict as being two away
487:53 - from its actual value, the L2 loss function
487:56 - will more harshly penalize that one that is two away,
488:00 - because it's going to square, however, much the differences
488:03 - between the actual value and the predicted value.
488:05 - And depending on the situation, you might
488:07 - want to choose a loss function depending on what you care about minimizing.
488:10 - If you really care about minimizing the error on more outlier cases,
488:14 - then you might want to consider something like this.
488:15 - But if you've got a lot of outliers, and you don't necessarily
488:18 - care about modeling them, then maybe an L1 loss function is preferable.
488:21 - But there are trade-offs here that you need to decide,
488:23 - based on a particular set of data.
488:26 - But what you do run the risk of with any of these loss functions,
488:29 - with anything that we're trying to do, is a problem known as overfitting.
488:33 - And overfitting is a big problem that you can encounter in machine learning,
488:36 - which happens anytime a model fits too closely with a data set,
488:41 - and as a result, fails to generalize.
488:44 - We would like our model to be able to accurately predict
488:48 - data and inputs and output pairs for the data that we have access to.
488:52 - But the reason we wanted to do so is because we
488:55 - want our model to generalize well to data that we haven't seen before.
488:59 - I would like to take data from the past year
489:01 - of whether it was raining or not raining,
489:03 - and use that data to generalize it towards the future.
489:06 - Say, in the future, is it going to be raining or not raining?
489:09 - Or if I have a whole bunch of data on what counterfeit and not counterfeit
489:12 - US dollar bills look like in the past when people have encountered them,
489:16 - I'd like to train a computer to be able to, in the future,
489:19 - generalize to other dollar bills that I might see as well.
489:24 - And the problem with overfitting is that if you try and tie yourself
489:28 - too closely to the data set that you're training your model on,
489:32 - you can end up not generalizing very well.
489:35 - So what does this look like?
489:36 - Well, we might imagine the rainy day and not rainy day
489:38 - example again from here, where the blue points indicate rainy days
489:41 - and the red points indicate not rainy days.
489:43 - And we decided that we felt pretty comfortable with drawing a line
489:47 - like this as the decision boundary between rainy days and not rainy days.
489:52 - So we can pretty comfortably say that points on this side
489:55 - more likely to be rainy days, points on that side more
489:57 - likely to be not rainy days.
489:59 - But the loss, the empirical loss, isn't zero in this particular case
490:04 - because we didn't categorize everything perfectly.
490:07 - There was this one outlier, this one day that it wasn't raining,
490:10 - but yet our model still predicts that it is raining.
490:13 - But that doesn't necessarily mean our model is bad.
490:15 - It just means the model isn't 100% accurate.
490:18 - If you really wanted to try and find a hypothesis that
490:21 - resulted in minimizing the loss, you could come up
490:25 - with a different decision boundary.
490:26 - It wouldn't be a line, but it would look something like this.
490:30 - This decision boundary does separate all of the red points
490:34 - from all of the blue points because the red points fall
490:37 - on this side of this decision boundary, the blue points
490:40 - fall on the other side of the decision boundary.
490:42 - But this, we would probably argue, is not as good of a prediction.
490:47 - Even though it seems to be more accurate based
490:50 - on all of the available training data that we
490:53 - have for training this machine learning model,
490:55 - we might say that it's probably not going to generalize well.
490:58 - That if there were other data points like here and there,
491:00 - we might still want to consider those to be rainy days
491:03 - because we think this was probably just an outlier.
491:06 - So if the only thing you care about is minimizing the loss on the data
491:10 - you have available to you, you run the risk of overfitting.
491:13 - And this can happen in the classification case.
491:15 - It can also happen in the regression case,
491:18 - that here we predicted what we thought was a pretty good line relating
491:21 - advertising to sales, trying to predict what sales were going
491:24 - to be for a given amount of advertising.
491:26 - But I could come up with a line that does a better job of predicting
491:29 - the training data, and it would be something that looks like this,
491:32 - just connecting all of the various different data points.
491:35 - And now there is no loss at all.
491:37 - Now I've perfectly predicted, given any advertising, what sales are.
491:41 - And for all the data available to me, it's going to be accurate.
491:45 - But it's probably not going to generalize very well.
491:47 - I have overfit my model on the training data that is available to me.
491:52 - And so in general, we want to avoid overfitting.
491:54 - We'd like strategies to make sure that we haven't overfit our model
491:58 - to a particular data set.
492:00 - And there are a number of ways that you could try to do this.
492:02 - One way is by examining what it is that we're optimizing for.
492:05 - In an optimization problem, all we do is we say, there is some cost,
492:10 - and I want to minimize that cost.
492:12 - And so far, we've defined that cost function, the cost of a hypothesis,
492:17 - just as being equal to the empirical loss of that hypothesis,
492:21 - like how far away are the actual data points, the outputs,
492:25 - away from what I predicted them to be based on that particular hypothesis.
492:29 - And if all you're trying to do is minimize cost, meaning minimizing
492:32 - the loss in this case, then the result is going to be that you might overfit,
492:36 - that to minimize cost, you're going to try and find a way to perfectly match
492:41 - all the input data.
492:42 - And that might happen as a result of overfitting
492:46 - on that particular input data.
492:48 - So in order to address this, you could add something to the cost function.
492:52 - What counts as cost will not just loss, but also
492:56 - some measure of the complexity of the hypothesis.
492:59 - The word the complexity of the hypothesis is something
493:02 - that you would need to define for how complicated does our line look.
493:06 - This is sort of an Occam's razor-style approach
493:08 - where we want to give preference to a simpler decision boundary,
493:12 - like a straight line, for example, some simpler curve, as opposed
493:15 - to something far more complex that might represent the training data better
493:19 - but might not generalize as well.
493:21 - We'll generally say that a simpler solution is probably the better solution
493:26 - and probably the one that is more likely to generalize well to other inputs.
493:31 - So we measure what the loss is, but we also measure the complexity.
493:34 - And now that all gets taken into account when we consider the overall cost,
493:38 - that yes, something might have less loss if it better predicts the training
493:42 - data, but if it's much more complex, it still
493:45 - might not be the best option that we have.
493:48 - And we need to come up with some balance between loss and complexity.
493:51 - And for that reason, you'll often see this represented
493:54 - as multiplying the complexity by some parameter that we have to choose,
493:58 - parameter lambda in this case, where we're saying if lambda is a greater
494:02 - value, then we really want to penalize more complex hypotheses.
494:06 - Whereas if lambda is smaller, we're going to penalize more complex hypotheses
494:10 - a little bit, and it's up to the machine learning programmer
494:14 - to decide where they want to set that value of lambda
494:17 - for how much do I want to penalize a more complex hypothesis that
494:21 - might fit the data a little better.
494:23 - And again, there's no one right answer to a lot of these things,
494:25 - but depending on the data set, depending on the data you have available to you
494:29 - and the problem you're trying to solve, your choice of these parameters
494:32 - may vary, and you may need to experiment a little bit
494:34 - to figure out what the right choice of that is ultimately going to be.
494:38 - This process, then, of considering not only loss,
494:41 - but also some measure of the complexity is known as regularization.
494:45 - Regularization is the process of penalizing a hypothesis that
494:49 - is more complex in order to favor a simpler hypothesis that is more
494:54 - likely to generalize well, more likely to be
494:56 - able to apply to other situations that are dealing with other input points
495:01 - unlike the ones that we've necessarily seen before.
495:04 - So oftentimes, you'll see us add some regularizing term
495:08 - to what we're trying to minimize in order to avoid this problem of overfitting.
495:14 - Now, another way of making sure we don't overfit
495:17 - is to run some experiments and to see whether or not
495:20 - we are able to generalize our model that we've created to other data sets
495:25 - as well.
495:26 - And it's for that reason that oftentimes when you're
495:28 - doing a machine learning experiment, when you've got some data
495:30 - and you want to try and come up with some function that predicts,
495:33 - given some input, what the output is going to be,
495:36 - you don't necessarily want to do your training on all of the data
495:39 - you have available to you that you could employ
495:42 - a method known as holdout cross-validation,
495:45 - where in holdout cross-validation, we split up our data.
495:48 - We split up our data into a training set and a testing set.
495:53 - The training set is the set of data that we're
495:55 - going to use to train our machine learning model.
495:57 - And the testing set is the set of data that we're
496:00 - going to use in order to test to see how well our machine learning
496:04 - model actually performed.
496:06 - So the learning happens on the training set.
496:08 - We figure out what the parameters should be.
496:10 - We figure out what the right model is.
496:12 - And then we see, all right, now that we've trained the model,
496:15 - we'll see how well it does at predicting things
496:17 - inside of the testing set, some set of data that we haven't seen before.
496:22 - And the hope then is that we're going to be
496:24 - able to predict the testing set pretty well
496:26 - if we're able to generalize based on the training
496:29 - data that's available to us.
496:31 - If we've overfit the training data, though,
496:32 - and we're not able to generalize, well, then when we look at the testing set,
496:36 - it's likely going to be the case that we're not
496:38 - going to predict things in the testing set nearly as effectively.
496:42 - So this is one method of cross-validation,
496:44 - validating to make sure that the work we have done
496:46 - is actually going to generalize to other data sets as well.
496:49 - And there are other statistical techniques we can use as well.
496:52 - One of the downsides of this just hold out cross-validation
496:55 - is if you say I just split it 50-50, I train using 50% of the data
497:00 - and test using the other 50%, or you could choose other percentages as well,
497:04 - is that there is a fair amount of data that I am now not using to train,
497:08 - that I might be able to get a better model as a result, for example.
497:12 - So one approach is known as k-fold cross-validation.
497:16 - In k-fold cross-validation, rather than just divide things into two sets
497:20 - and run one experiment, we divide things into k different sets.
497:24 - So maybe I divide things up into 10 different sets
497:27 - and then run 10 different experiments.
497:30 - So if I split up my data into 10 different sets of data,
497:33 - then what I'll do is each time for each of my 10 experiments,
497:37 - I will hold out one of those sets of data, where I'll say,
497:40 - let me train my model on these nine sets,
497:43 - and then test to see how well it predicts on set number 10.
497:47 - And then pick another set of nine sets to train on,
497:50 - and then test it on the other one that I held out,
497:52 - where each time I train the model on everything
497:55 - minus the one set that I'm holding out, and then
497:57 - test to see how well our model performs on the test that I did hold out.
498:02 - And what you end up getting is 10 different results,
498:04 - 10 different answers for how accurately our model worked.
498:07 - And oftentimes, you could just take the average of those 10
498:09 - to get an approximation for how well we think our model performs overall.
498:14 - But the key idea is separating the training data from the testing data,
498:18 - because you want to test your model on data
498:20 - that is different from what you trained the model on.
498:23 - Because the training, you want to avoid overfitting.
498:25 - You want to be able to generalize.
498:26 - And the way you test whether you're able to generalize
498:29 - is by looking at some data that you haven't seen before
498:32 - and seeing how well we're actually able to perform.
498:36 - And so if we want to actually implement any of these techniques
498:38 - inside of a programming language like Python, number of ways we could do that.
498:42 - We could write this from scratch on our own,
498:45 - but there are libraries out there that allow
498:46 - us to take advantage of existing implementations of these algorithms,
498:50 - that we can use the same types of algorithms
498:53 - in a lot of different situations.
498:54 - And so there's a library, very popular one, known as Scikit-learn,
498:58 - which allows us in Python to be able to very quickly get
499:01 - set up with a lot of these different machine learning models.
499:03 - This library has already written an algorithm
499:06 - for nearest neighbor classification, for doing perceptron learning,
499:09 - for doing a bunch of other types of inference and supervised learning
499:12 - that we haven't yet talked about.
499:14 - But using it, we can begin to try actually testing how these methods work
499:19 - and how accurately they perform.
499:22 - So let's go ahead and take a look at one approach
499:24 - to trying to solve this type of problem.
499:26 - All right, so I'm first going to pull up banknotes.csv, which
499:30 - is a whole bunch of data provided by UC Irvine, which
499:33 - is information about various different banknotes
499:36 - that people took pictures of various different banknotes
499:38 - and measured various different properties of those banknotes.
499:41 - And in particular, some human categorized each of those banknotes
499:45 - as either a counterfeit banknote or as not counterfeit.
499:48 - And so what you're looking at here is each row represents one banknote.
499:52 - This is formatted as a CSV spreadsheet, where just comma separated values
499:55 - separating each of these various different fields.
499:58 - We have four different input values for each of these data points,
500:03 - just information, some measurement that was made on the banknote.
500:06 - And what those measurements exactly are aren't as important as the fact
500:09 - that we do have access to this data.
500:11 - But more importantly, we have access for each of these data points
500:14 - to a label, where 0 indicates something like this was not a counterfeit bill,
500:19 - meaning it was an authentic bill.
500:20 - And a data point labeled 1 means that it is a counterfeit bill,
500:25 - at least according to the human researcher who labeled this particular data.
500:29 - So we have a whole bunch of data representing
500:31 - a whole bunch of different data points, each of which
500:33 - has these various different measurements that
500:35 - were made on that particular bill, and each of which
500:38 - has an output value, 0 or 1, 0 meaning it was a genuine bill, 1 meaning
500:44 - it was a counterfeit bill.
500:46 - And what we would like to do is use supervised learning
500:48 - to begin to predict or model some sort of function that
500:51 - can take these four values as input and predict what the output would be.
500:55 - We want our learning algorithm to find some sort of pattern
500:58 - that is able to predict based on these measurements, something
501:01 - that you could measure just by taking a photo of a bill,
501:03 - predict whether that bill is authentic or whether that bill is counterfeit.
501:09 - And so how can we do that?
501:10 - Well, I'm first going to open up banknote0.py
501:13 - and see how it is that we do this.
501:15 - I'm first importing a lot of things from Scikit-learn,
501:18 - but importantly, I'm going to set my model equal to the perceptron model,
501:23 - which is one of those models that we talked about before.
501:25 - We're just going to try and figure out some setting of weights
501:28 - that is able to divide our data into two different groups.
501:31 - Then I'm going to go ahead and read data in for my file from banknotes.csv.
501:36 - And basically, for every row, I'm going to separate that row
501:39 - into the first four values of that row, which is the evidence for that row.
501:44 - And then the label, where if the final column in that row is a 0,
501:49 - the label is authentic.
501:51 - And otherwise, it's going to be counterfeit.
501:53 - So I'm effectively reading data in from the CSV file,
501:56 - dividing into a whole bunch of rows where each row has some evidence,
502:00 - those four input values that are going to be inputs to my hypothesis function.
502:04 - And then the label, the output, whether it is authentic or counterfeit,
502:07 - that is the thing that I am then trying to predict.
502:10 - So the next step is that I would like to split up my data set
502:12 - into a training set and a testing set, some set of data
502:15 - that I would like to train my machine learning model on,
502:18 - and some set of data that I would like to use to test that model,
502:21 - see how well it performed.
502:22 - So what I'll do is I'll go ahead and figure out length of the data,
502:25 - how many data points do I have.
502:27 - I'll go ahead and take half of them, save that number as a number called holdout.
502:30 - That is how many items I'm going to hold out for my data set
502:33 - to save for the testing phase.
502:35 - I'll randomly shuffle the data so it's in some random order.
502:38 - And then I'll say my testing set will be all of the data up to the holdout.
502:43 - So I'll take holdout many data items, and that will be my testing set.
502:47 - My training data will be everything else, the information
502:51 - that I'm going to train my model on.
502:53 - And then I'll say I need to divide my training data into two different sets.
502:58 - I need to divide it into my x values, where x here represents the inputs.
503:03 - So the x values, the x values that I'm going to train on,
503:06 - are basically for every row in my training set,
503:09 - I'm going to get the evidence for that row, those four values,
503:12 - where it's basically a vector of four numbers, where
503:14 - that is going to be all of the input.
503:16 - And then I need the y values.
503:18 - What are the outputs that I want to learn from,
503:20 - the labels that belong to each of these various different input points?
503:23 - Well, that's going to be the same thing for each row in the training data.
503:26 - But this time, I take that row and get what its label is,
503:29 - whether it is authentic or counterfeit.
503:31 - So I end up with one list of all of these vectors of my input data,
503:36 - and one list, which follows the same order,
503:38 - but is all of the labels that correspond with each of those vectors.
503:42 - And then to train my model, which in this case is just this perceptron model,
503:46 - I just call model.fit, pass in the training data,
503:49 - and what the labels for those training data are.
503:52 - And scikit-learn will take care of fitting the model,
503:54 - will do the entire algorithm for me.
503:57 - And then when it's done, I can then test to see how well that model performed.
504:01 - So I can say, let me get all of these input vectors
504:04 - for what I want to test on.
504:05 - So for each row in my testing data set, go ahead and get the evidence.
504:09 - And the y values, those are what the actual values were
504:13 - for each of the rows in the testing data set, what the actual label is.
504:17 - But then I'm going to generate some predictions.
504:19 - I'm going to use this model and try and predict,
504:22 - based on the testing vectors, I want to predict what the output is.
504:26 - And my goal then is to now compare y testing with predictions.
504:31 - I want to see how well my predictions, based on the model,
504:34 - actually reflect what the y values were, what the output is,
504:38 - that were actually labeled.
504:39 - Because I now have this label data, I can assess how well the algorithm worked.
504:44 - And so now I can just compute how well we did.
504:47 - I'm going to, this zip function basically just lets
504:49 - me look through two different lists, one by one at the same time.
504:53 - So for each actual value and for each predicted value,
504:57 - if the actual is the same thing as what I predicted,
504:59 - I'll go ahead and increment the counter by one.
505:01 - Otherwise, I'll increment my incorrect counter by one.
505:04 - And so at the end, I can print out, here are the results,
505:06 - here's how many I got right, here's how many I got wrong,
505:09 - and here was my overall accuracy, for example.
505:12 - So I can go ahead and run this.
505:14 - I can run python banknote0.py.
505:17 - And it's going to train on half the data set
505:20 - and then test on half the data set.
505:21 - And here are the results for my perceptron model.
505:24 - In this case, it correctly was able to classify 679 bills as correctly
505:29 - either authentic or counterfeit and incorrectly classified seven of them
505:33 - for an overall accuracy of close to 99% accurate.
505:37 - So on this particular data set, using this perceptron model,
505:40 - we were able to predict very well what the output was going to be.
505:44 - And we can try different models, too, that scikit-learn
505:46 - makes it very easy just to swap out one model for another model.
505:50 - So instead of the perceptron model, I can use the support vector machine
505:55 - using the SVC, otherwise known as a support vector classifier,
505:59 - using a support vector machine to classify things
506:01 - into two different groups.
506:03 - And now see, all right, how well does this perform?
506:07 - And all right, this time, we were able to correctly predict 682
506:10 - and incorrectly predicted four for accuracy of 99.4%.
506:15 - And we could even try the k-neighbors classifier as the model instead.
506:20 - And this takes a parameter, n neighbors, for how many neighbors
506:24 - do you want to look at?
506:25 - Let's just look at one neighbor, the one nearest neighbor,
506:27 - and use that to predict.
506:29 - Go ahead and run this as well.
506:31 - And it looks like, based on the k-neighbors classifier,
506:33 - looking at just one neighbor, we were able to correctly classify
506:36 - 685 data points, incorrectly classified one.
506:40 - Maybe let's try three neighbors instead, instead of just using one neighbor.
506:43 - Do more of a k-nearest neighbors approach,
506:45 - where I look at the three nearest neighbors and see how that performs.
506:48 - And that one, in this case, seems to have gotten 100% of all of the predictions
506:54 - correctly described as either authentic banknotes
506:58 - or as counterfeit banknotes.
507:00 - And we could run these experiments multiple times,
507:02 - because I'm randomly reorganizing the data every time.
507:05 - We're technically training these on slightly different data sets.
507:07 - And so you might want to run multiple experiments to really see
507:10 - how well they're actually going to perform.
507:12 - But in short, they all perform very well.
507:14 - And while some of them perform slightly better than others here,
507:16 - that might not always be the case for every data set.
507:19 - But you can begin to test now by very quickly putting together
507:22 - these machine learning models using Scikit-learn
507:24 - to be able to train on some training set and then
507:27 - test on some testing set as well.
507:29 - And this splitting up into training groups and testing groups and testing
507:33 - happens so often that Scikit-learn has functions built in for trying to do it.
507:37 - I did it all by hand just now.
507:39 - But if we take a look at banknotes one, we
507:41 - take advantage of some other features that exist in Scikit-learn,
507:45 - where we can really simplify a lot of our logic,
507:48 - that there is a function built into Scikit-learn called train test split,
507:52 - which will automatically split data into a training group and a testing group.
507:56 - I just have to say what proportion should be in the testing group, something
507:59 - like 0.5, half the data inside the testing group.
508:02 - Then I can fit the model on the training data,
508:05 - make the predictions on the testing data, and then just count up.
508:08 - And Scikit-learn has some nice methods for just counting up
508:11 - how many times our testing data match the predictions,
508:15 - how many times our testing data didn't match the predictions.
508:18 - So very quickly, you can write programs with not all that many lines of code.
508:21 - It's maybe like 40 lines of code to get through all of these predictions.
508:25 - And then as a result, see how well we're able to do.
508:28 - So these types of libraries can allow us, without really knowing
508:31 - the implementation details of these algorithms,
508:33 - to be able to use the algorithms in a very practical way
508:36 - to be able to solve these types of problems.
508:40 - So that then was supervised learning, this task
508:42 - of given a whole set of data, some input output pairs,
508:45 - we would like to learn some function that maps those inputs to those outputs.
508:50 - But turns out there are other forms of learning as well.
508:52 - And another popular type of machine learning, especially nowadays,
508:55 - is known as reinforcement learning.
508:58 - And the idea of reinforcement learning is rather than just
509:00 - being given a whole data set at the beginning of input output pairs,
509:04 - reinforcement learning is all about learning from experience.
509:07 - In reinforcement learning, our agent, whether it's
509:10 - like a physical robot that's trying to make actions in the world
509:13 - or just some virtual agent that is a program running somewhere,
509:16 - our agent is going to be given a set of rewards or punishments
509:20 - in the form of numerical values.
509:22 - But you can think of them as reward or punishment.
509:24 - And based on that, it learns what actions to take in the future,
509:28 - that our agent, our AI, will be put in some sort of environment.
509:32 - It will make some actions.
509:33 - And based on the actions that it makes, it learns something.
509:36 - It either gets a reward when it does something well,
509:38 - it gets a punishment when it does something poorly,
509:40 - and it learns what to do or what not to do in the future
509:44 - based on those individual experiences.
509:47 - And so what this will often look like is it will often
509:50 - start with some agent, some AI, which might, again, be a physical robot,
509:54 - if you're imagining a physical robot moving around,
509:56 - but it can also just be a program.
509:58 - And our agent is situated in their environment,
510:01 - where the environment is where they're going to make their actions,
510:04 - and it's what's going to give them rewards or punishments
510:06 - for various actions that they're in.
510:09 - So for example, the environment is going to start off
510:12 - by putting our agent inside of a state.
510:14 - Our agent has some state that, in a game,
510:17 - might be the state of the game that the agent is playing.
510:19 - In a world that the agent is exploring might
510:21 - be some position inside of a grid representing the world
510:24 - that they're exploring.
510:25 - But the agent is in some sort of state.
510:28 - And in that state, the agent needs to choose to take an action.
510:32 - The agent likely has multiple actions they can choose from,
510:34 - but they pick an action.
510:36 - So they take an action in a particular state.
510:39 - And as a result of that, the agent will generally
510:42 - get two things in response as we model them.
510:44 - The agent gets a new state that they find themselves in.
510:47 - After being in this state, taking one action,
510:50 - they end up in some other state.
510:52 - And they're also given some sort of numerical reward,
510:55 - positive meaning reward, meaning it was a good thing,
510:58 - negative generally meaning they did something bad,
511:00 - they received some sort of punishment.
511:03 - And that is all the information the agent has.
511:06 - It's told what state it's in.
511:08 - It makes some sort of action.
511:10 - And based on that, it ends up in another state.
511:12 - And it ends up getting some particular reward.
511:14 - And it needs to learn, based on that information, what actions
511:17 - to begin to take in the future.
511:19 - And so you could imagine generalizing this to a lot
511:21 - of different situations.
511:22 - This is oftentimes how you train if you've ever seen those robots that
511:26 - are now able to walk around the way humans do.
511:29 - It would be quite difficult to program the robot in exactly the right way
511:32 - to get it to walk the way humans do.
511:34 - You could instead train it through reinforcement learning,
511:36 - give it some sort of numerical reward every time it does something good,
511:40 - like take steps forward, and punish it every time it does something
511:43 - bad, like fall over, and then let the AI just
511:46 - learn based on that sequence of rewards, based
511:48 - on trying to take various different actions.
511:51 - You can begin to have the agent learn what to do in the future
511:54 - and what not to do.
511:56 - So in order to begin to formalize this, the first thing we need to do
511:59 - is formalize this notion of what we mean about states and actions and rewards,
512:03 - like what does this world look like?
512:05 - And oftentimes, we'll formulate this world
512:07 - as what's known as a Markov decision process, similar in spirit
512:11 - to Markov chains, which you might recall from before.
512:14 - But a Markov decision process is a model that we
512:16 - can use for decision making, for an agent trying
512:19 - to make decisions in its environment.
512:21 - And it's a model that allows us to represent the various different states
512:25 - that an agent can be in, the various different actions that they can take,
512:28 - and also what the reward is for taking one action as opposed to another action.
512:35 - So what then does it actually look like?
512:37 - Well, if you recall a Markov chain from before,
512:40 - a Markov chain looked a little something like this,
512:43 - where we had a whole bunch of these individual states,
512:45 - and each state immediately transitioned to another state
512:48 - based on some probability distribution.
512:50 - We saw this in the context of the weather before, where if it was sunny,
512:54 - we said with some probability, it'll be sunny the next day.
512:56 - With some other probability, it'll be rainy, for example.
512:59 - But we could also imagine generalizing this.
513:02 - It's not just sun and rain anymore.
513:04 - We just have these states, where one state leads to another state
513:07 - according to some probability distribution.
513:09 - But in this original model, there was no agent
513:12 - that had any control over this process.
513:14 - It was just entirely probability based, where with some probability,
513:17 - we moved to this next state.
513:18 - But maybe it's going to be some other state with some other probability.
513:22 - What we'll now have is the ability for the agent in this state
513:26 - to choose from a set of actions, where maybe instead of just one path
513:29 - forward, they have three different choices of actions that each lead up
513:33 - down different paths.
513:34 - And even this is a bit of an oversimplification,
513:36 - because in each of these states, you might imagine more branching points
513:39 - where there are more decisions that can be taken as well.
513:42 - So we've extended the Markov chain to say that from a state,
513:46 - you now have available action choices.
513:48 - And each of those actions might be associated
513:50 - with its own probability distribution of going to various different states.
513:55 - Then in addition, we'll add another extension,
513:58 - where any time you move from a state, taking an action,
514:01 - going into this other state, we can associate a reward with that outcome,
514:07 - saying either r is positive, meaning some positive reward,
514:10 - or r is negative, meaning there was some sort of punishment.
514:13 - And this then is what we'll consider to be a Markov decision process.
514:16 - That a Markov decision process has some initial set
514:18 - of states, of states in the world that we can be in.
514:21 - We have some set of actions that, given a state,
514:24 - I can say, what are the actions that are available to me in that state,
514:28 - an action that I can choose from?
514:30 - Then we have some transition model.
514:32 - The transition model before just said that, given my current state,
514:36 - what is the probability that I end up in that next state or this other state?
514:39 - The transition model now has effectively two things we're conditioning on.
514:44 - We're saying, given that I'm in this state and that I take this action,
514:48 - what's the probability that I end up in this next state?
514:52 - Now maybe we live in a very deterministic world in this Markov decision process.
514:56 - We're given a state and given an action.
514:58 - We know for sure what next state we'll end up in.
515:00 - But maybe there's some randomness in the world
515:02 - that when you take in a state and you take an action,
515:04 - you might not always end up in the exact same state.
515:07 - There might be some probabilities involved there as well.
515:09 - The Markov decision process can handle both of those possible cases.
515:14 - And then finally, we have a reward function, generally called r,
515:18 - that in this case says, what is the reward for being in this state,
515:21 - taking this action, and then getting to s prime this next state?
515:26 - So I'm in this original state.
515:27 - I take this action.
515:28 - I get to this next state.
515:29 - What is the reward for doing that process?
515:32 - And you can add up these rewards every time you take an action
515:35 - to get the total amount of rewards that an agent might
515:38 - get from interacting in a particular environment
515:41 - modeled using this Markov decision process.
515:44 - So what might this actually look like in practice?
515:46 - Well, let's just create a little simulated world here
515:49 - where I have this agent that is just trying to navigate its way.
515:52 - This agent is this yellow dot here, like a robot in the world,
515:55 - trying to navigate its way through this grid.
515:57 - And ultimately, it's trying to find its way to the goal.
516:00 - And if it gets to the green goal, then it's going to get some sort of reward.
516:04 - But then we might also have some red squares that are places
516:08 - where you get some sort of punishment, some bad place where we don't want
516:11 - the agent to go.
516:12 - And if it ends up in the red square, then our agent
516:14 - is going to get some sort of punishment as a result of that.
516:18 - But the agent originally doesn't know all of these details.
516:21 - It doesn't know that these states are associated with punishments.
516:24 - But maybe it does know that this state is associated with a reward.
516:27 - Maybe it doesn't.
516:28 - But it just needs to sort of interact with the environment
516:30 - to try and figure out what to do and what not to do.
516:33 - So the first thing the agent might do is,
516:35 - given no additional information, if it doesn't know what the punishments are,
516:39 - it doesn't know where the rewards are, it just might try and take an action.
516:43 - And it takes an action and ends up realizing
516:45 - that it got some sort of punishment.
516:47 - And so what does it learn from that experience?
516:49 - Well, it might learn that when you're in this state in the future,
516:53 - don't take the action move to the right, that that is a bad action to take.
516:57 - That in the future, if you ever find yourself back in the state,
516:59 - don't take this action of going to the right
517:02 - when you're in this particular state, because that leads to punishment.
517:05 - That might be the intuition at least.
517:06 - And so you could try doing other actions.
517:08 - You move up, all right, that didn't lead to any immediate rewards.
517:11 - Maybe try something else.
517:12 - Then maybe try something else.
517:14 - And all right, now you found that you got another punishment.
517:17 - And so you learn something from that experience.
517:18 - So the next time you do this whole process,
517:20 - you know that if you ever end up in this square,
517:22 - you shouldn't take the down action, because being in this state
517:26 - and taking that action ultimately leads to some sort of punishment,
517:30 - a negative reward, in other words.
517:33 - And this process repeats.
517:34 - You might imagine just letting our agent explore the world,
517:37 - learning over time what states tend to correspond with poor actions,
517:41 - learning over time what states correspond with poor actions,
517:43 - until eventually, if it tries enough things randomly,
517:47 - it might find that eventually when you get to this state,
517:50 - if you take the up action in this state, it
517:53 - might find that you actually get a reward from that.
517:56 - And what it can learn from that is that if you're in this state,
517:59 - you should take the up action, because that leads to a reward.
518:02 - And over time, you can also learn that if you're in this state,
518:05 - you should take the left action, because that leads to this state that also
518:08 - lets you eventually get to the reward.
518:10 - So you begin to learn over time not only which actions
518:14 - are good in particular states, but also which actions are bad,
518:18 - such that once you know some sequence of good actions that
518:20 - leads you to some sort of reward, our agent can just follow those
518:24 - instructions, follow the experience that it has learned.
518:27 - We didn't tell the agent what the goal was.
518:30 - We didn't tell the agent where the punishments were.
518:32 - But the agent can begin to learn from this experience
518:35 - and learn to begin to perform these sorts of tasks better in the future.
518:40 - And so let's now try to formalize this idea, formalize the idea
518:43 - that we would like to be able to learn in this state taking this action,
518:47 - is that a good thing or a bad thing?
518:49 - There are lots of different models for reinforcement learning.
518:51 - We're just going to look at one of them today.
518:53 - And the one that we're going to look at is a method known as Q-learning.
518:57 - And what Q-learning is all about is about learning
518:59 - a function, a function Q, that takes inputs S and A, where S is a state
519:05 - and A is an action that you take in that state.
519:07 - And what this Q function is going to do is it is going to estimate the value.
519:12 - How much reward will I get from taking this action in this state?
519:18 - Originally, we don't know what this Q function should be.
519:21 - But over time, based on experience, based on trying things out
519:24 - and seeing what the result is, I would like to try and learn
519:28 - what Q of SA is for any particular state and any particular action
519:32 - that I might take in that state.
519:34 - So what is the approach?
519:35 - Well, the approach originally is we'll start with Q SA equal to 0 for all
519:40 - states S and for all actions A. That initially,
519:43 - before I've ever started anything, before I've had any experiences,
519:47 - I don't know the value of taking any action in any given state.
519:50 - So I'm going to assume that the value is just 0 all across the board.
519:55 - But then as I interact with the world, as I experience rewards or punishments,
519:59 - or maybe I go to a cell where I don't get either reward or a punishment,
520:03 - I want to somehow update my estimate of Q SA.
520:07 - I want to continually update my estimate of Q SA
520:10 - based on the experiences and rewards and punishments that I've received,
520:13 - such that in the future, my knowledge of what actions are good
520:17 - and what states will be better.
520:19 - So when we take an action and receive some sort of reward,
520:22 - I want to estimate the new value of Q SA.
520:25 - And I estimate that based on a couple of different things.
520:28 - I estimate it based on the reward that I'm getting from taking this action
520:32 - and getting into the next state.
520:33 - But assuming the situation isn't over, assuming there are still
520:37 - future actions that I might take as well,
520:40 - I also need to take into account the expected future rewards.
520:44 - That if you imagine an agent interacting with the environment,
520:47 - then sometimes you'll take an action and get a reward,
520:49 - but then you can keep taking more actions and get more rewards,
520:52 - that these both are relevant, both the current reward
520:55 - I'm getting from this current step and also my future reward.
520:58 - And it might be the case that I'll want to take a step that
521:01 - doesn't immediately lead to a reward, because later on down the line,
521:05 - I know it will lead to more rewards as well.
521:07 - So there's a balancing act between current rewards
521:10 - that the agent experiences and future rewards
521:13 - that the agent experiences as well.
521:16 - And then we need to update QSA.
521:19 - So we estimate the value of QSA based on the current reward
521:22 - and the expected future rewards.
521:24 - And then we need to update this Q function
521:26 - to take into account this new estimate.
521:29 - Now, we already, as we go through this process,
521:31 - we'll already have an estimate for what we think the value is.
521:35 - Now we have a new estimate, and then somehow we
521:37 - need to combine these two estimates together,
521:39 - and we'll look at more formal ways that we can actually begin to do that.
521:43 - So to actually show you what this formula looks like,
521:45 - here is the approach we'll take with Q learning.
521:47 - We're going to, again, start with Q of S and A being equal to 0 for all states.
521:52 - And then every time we take an action A in state S and observer reward R,
521:59 - we're going to update our value, our estimate, for Q of SA.
522:04 - And the idea is that we're going to figure out
522:06 - what the new value estimate is minus what our existing value estimate is.
522:12 - And so we have some preconceived notion for what the value is
522:15 - for taking this action in this state.
522:17 - Maybe our expectation is we currently think the value is 10.
522:21 - But then we're going to estimate what we now think it's going to be.
522:24 - Maybe the new value estimate is something like 20.
522:27 - So there's a delta of 10 that our new value estimate
522:30 - is 10 points higher than what our current value estimate happens to be.
522:35 - And so we have a couple of options here.
522:37 - We need to decide how much we want to adjust
522:40 - our current expectation of what the value is
522:42 - of taking this action in this particular state.
522:45 - And what that difference is, how much we add or subtract
522:49 - from our existing notion of how much do we expect the value to be,
522:52 - is dependent on this parameter alpha, also called a learning rate.
522:56 - And alpha represents, in effect, how much we value new information
523:01 - compared to how much we value old information.
523:04 - An alpha value of 1 means we really value new information.
523:08 - But if we have a new estimate, then it doesn't
523:10 - matter what our old estimate is.
523:12 - We're only going to consider our new estimate
523:14 - because we always just want to take into consideration our new information.
523:18 - So the way that works is that if you imagine alpha being 1,
523:21 - well, then we're taking the old value of QSA
523:25 - and then adding 1 times the new value minus the old value.
523:29 - And that just leaves us with the new value.
523:31 - So when alpha is 1, all we take into consideration
523:34 - is what our new estimate happens to be.
523:37 - But over time, as we go through a lot of experiences,
523:40 - we already have some existing information.
523:42 - We might have tried taking this action nine times already.
523:46 - And now we just tried it a 10th time.
523:48 - And we don't only want to consider this 10th experience.
523:51 - I also want to consider the fact that my prior nine experiences, those
523:54 - were meaningful, too.
523:55 - And that's data I don't necessarily want to lose.
523:58 - And so this alpha controls that decision,
524:01 - controls how important is the new information.
524:03 - 0 would mean ignore all the new information.
524:06 - Just keep this Q value the same.
524:09 - 1 means replace the old information entirely with the new information.
524:13 - And somewhere in between, keep some sort of balance between these two values.
524:17 - We can put this equation a little bit more formally as well.
524:21 - The old value estimate is our old estimate
524:23 - for what the value is of taking this action in a particular state.
524:27 - That's just Q of SNA.
524:30 - So we have it once here, and we're going to add something to it.
524:33 - We're going to add alpha times the new value estimate
524:35 - minus the old value estimate.
524:37 - But the old value estimate, we just look up by calling this Q function.
524:42 - And what then is the new value estimate?
524:44 - Based on this experience we have just taken,
524:46 - what is our new estimate for the value of taking
524:48 - this action in this particular state?
524:51 - Well, it's going to be composed of two parts.
524:54 - It's going to be composed of what reward did I just
524:56 - get from taking this action in this state.
525:00 - And then it's going to be, what can I expect my future rewards
525:03 - to be from this point forward?
525:05 - So it's going to be R, some reward I'm getting right now,
525:10 - plus whatever I estimate I'm going to get in the future.
525:14 - And how do I estimate what I'm going to get in the future?
525:16 - Well, it's a bit of another call to this Q function.
525:19 - It's going to be take the maximum across all possible actions
525:23 - I could take next and say, all right, of all of these possible actions
525:27 - I could take, which one is going to have the highest reward?
525:31 - And so this then looks a little bit complicated.
525:33 - This is going to be our notion for how we're
525:35 - going to perform this kind of update.
525:37 - I have some estimate, some old estimate, for what the value is
525:41 - of taking this action in this state.
525:44 - And I'm going to update it based on new information
525:46 - that I experience some reward.
525:48 - I predict what my future reward is going to be.
525:51 - And using that I update what I estimate the reward will
525:54 - be for taking this action in this particular state.
525:57 - And there are other additions you might make to this algorithm as well.
526:00 - Sometimes it might not be the case that future rewards
526:03 - you want to wait equally to current rewards.
526:05 - Maybe you want an agent that values reward now over reward later.
526:10 - And so sometimes you can even add another term in here, some other parameter,
526:13 - where you discount future rewards and say future rewards are not
526:17 - as valuable as rewards immediately.
526:19 - That getting reward in the current time step
526:21 - is better than waiting a year and getting rewards later.
526:24 - But that's something up to the programmer
526:26 - to decide what that parameter ought to be.
526:29 - But the big picture idea of this entire formula
526:32 - is to say that every time we experience some new reward,
526:35 - we take that into account.
526:36 - We update our estimate of how good is this action.
526:40 - And then in the future, we can make decisions based on that algorithm.
526:44 - Once we have some good estimate for every state and for every action,
526:48 - what the value is of taking that action, then we
526:50 - can do something like implement a greedy decision making policy.
526:54 - That if I am in a state and I want to know what action
526:57 - should I take in that state, well, then I
527:00 - consider for all of my possible actions, what is the value of QSA?
527:05 - What is my estimated value of taking that action in that state?
527:08 - And I will just pick the action that has the highest value
527:12 - after I evaluate that expression.
527:15 - So I pick the action that has the highest value.
527:17 - And based on that, that tells me what action I should take.
527:19 - At any given state that I'm in, I can just greedily say across all my actions,
527:24 - this action gives me the highest expected value.
527:27 - And so I'll go ahead and choose that action as the action that I take as well.
527:33 - But there is a downside to this kind of approach.
527:36 - And then downside comes up in a situation like this,
527:38 - where we know that there is some solution that gets me to the reward.
527:44 - And our agent has been able to figure that out.
527:46 - But it might not necessarily be the best way or the fastest way.
527:49 - If the agent is allowed to explore a little bit more,
527:52 - it might find that it can get the reward faster
527:55 - by taking some other route instead, by going through this particular path
527:59 - that is a faster way to get to that ultimate goal.
528:04 - And maybe we would like for the agent to be able to figure that out as well.
528:07 - But if the agent always takes the actions that it knows to be best,
528:11 - well, when it gets to this particular square,
528:13 - it doesn't know that this is a good action because it's never really tried it.
528:17 - But it knows that going down eventually leads its way to this reward.
528:21 - So it might learn in the future that it should just always take this route
528:25 - and it's never going to explore and go along that route instead.
528:29 - So in reinforcement learning, there is this tension
528:32 - between exploration and exploitation.
528:35 - And exploitation generally refers to using knowledge that the AI already has.
528:40 - The AI already knows that this is a move that leads to reward.
528:43 - So we'll go ahead and use that move.
528:45 - And exploration is all about exploring other actions
528:49 - that we may not have explored as thoroughly before
528:51 - because maybe one of these actions, even if I don't know anything about it,
528:54 - might lead to better rewards faster or to more rewards in the future.
529:00 - And so an agent that only ever exploits information and never explores
529:04 - might be able to get reward, but it might not maximize its rewards
529:07 - because it doesn't know what other possibilities are out there,
529:10 - possibilities that we only know about by taking advantage of exploration.
529:15 - And so how can we try and address this?
529:17 - Well, one possible solution is known as the Epsilon greedy algorithm,
529:21 - where we set Epsilon equal to how often we want to just make a random move,
529:26 - where occasionally we will just make a random move in order to say,
529:29 - let's try to explore and see what happens.
529:33 - And then the logic of the algorithm will be with probability 1 minus Epsilon,
529:38 - choose the estimated best move.
529:40 - In a greedy case, we'd always choose the best move.
529:43 - But in Epsilon greedy, we're most of the time
529:46 - going to choose the best move or sometimes going to choose the best move.
529:50 - But sometimes with probability Epsilon, we're
529:53 - going to choose a random move instead.
529:56 - So every time we're faced with the ability to take an action,
529:58 - sometimes we're going to choose the best move.
530:00 - Sometimes we're just going to choose a random move.
530:03 - So this type of algorithm can be quite powerful in a reinforcement learning
530:07 - context by not always just choosing the best possible move right now,
530:11 - but sometimes, especially early on, allowing yourself
530:14 - to make random moves that allow you to explore various different possible
530:18 - states and actions more, and maybe over time,
530:20 - you might decrease your value of Epsilon.
530:23 - More and more often, choosing the best move
530:25 - after you're more confident that you've explored
530:27 - what all of the possibilities actually are.
530:30 - So we can put this into practice.
530:32 - And one very common application of reinforcement learning
530:34 - is in game playing, that if you want to teach an agent how to play a game,
530:38 - you just let the agent play the game a whole bunch.
530:41 - And then the reward signal happens at the end of the game.
530:44 - When the game is over, if our AI won the game,
530:47 - it gets a reward of like 1, for example.
530:49 - And if it lost the game, it gets a reward of negative 1.
530:53 - And from that, it begins to learn what actions are good
530:56 - and what actions are bad.
530:57 - You don't have to tell the AI what's good and what's bad,
530:59 - but the AI figures it out based on that reward.
531:01 - Winning the game is some signal, losing the game is some signal,
531:04 - and based on all of that, it begins to figure out
531:07 - what decisions it should actually make.
531:09 - So one very simple game, which you may have played before, is a game called
531:13 - Nim.
531:13 - And in the game of Nim, you've got a whole bunch of objects
531:16 - in a whole bunch of different piles, where here I've
531:18 - represented each pile as an individual row.
531:20 - So you've got one object in the first pile,
531:22 - three in the second pile, five in the third pile, seven in the fourth pile.
531:26 - And the game of Nim is a two player game
531:28 - where players take turns removing objects from piles.
531:31 - And the rule is that on any given turn, you
531:34 - were allowed to remove as many objects as you want from any one of these piles,
531:39 - any one of these rows.
531:40 - You have to remove at least one object, but you
531:42 - remove as many as you want from exactly one of the piles.
531:46 - And whoever takes the last object loses.
531:50 - So player one might remove four from this pile here.
531:54 - Player two might remove four from this pile here.
531:57 - So now we've got four piles left, one, three, one, and three.
532:00 - Player one might remove the entirety of the second pile.
532:03 - Player two, if they're being strategic, might remove two from the third pile.
532:09 - Now we've got three piles left, each with one object left.
532:13 - Player one might remove one from one pile.
532:15 - Player two removes one from the other pile.
532:17 - And now player one is left with choosing this one object from the last pile,
532:22 - at which point player one loses the game.
532:24 - So fairly simple game.
532:25 - Piles of objects, any turn you choose how many objects
532:28 - to remove from a pile, whoever removes the last object loses.
532:33 - And this is the type of game you could encode into an AI fairly easily,
532:36 - because the states are really just four numbers.
532:39 - Every state is just how many objects in each of the four piles.
532:43 - And the actions are things like, how many
532:45 - am I going to remove from each one of these individual piles?
532:49 - And the reward happens at the end, that if you
532:51 - were the player that had to remove the last object,
532:53 - then you get some sort of punishment.
532:55 - But if you were not, and the other player
532:57 - had to remove the last object, well, then you get some sort of reward.
533:01 - So we could actually try and show a demonstration of this,
533:04 - that I've implemented an AI to play the game of Nim.
533:08 - All right, so here, what we're going to do is create an AI
533:11 - as a result of training the AI on some number of games,
533:15 - that the AI is going to play against itself, where the idea is the AI will
533:18 - play games against itself, learn from each of those experiences,
533:22 - and learn what to do in the future.
533:23 - And then I, the human, will play against the AI.
533:26 - So initially, we'll say train zero times,
533:28 - meaning we're not going to let the AI play any practice games against itself
533:32 - in order to learn from its experiences.
533:34 - We're just going to see how well it plays.
533:36 - And it looks like there are four piles.
533:38 - I can choose how many I remove from any one of the piles.
533:41 - So maybe from pile three, I will remove five objects, for example.
533:46 - So now, AI chose to take one item from pile zero.
533:50 - So I'm left with these piles now, for example.
533:53 - And so here, I could choose maybe to say, I
533:55 - would like to remove from pile two, I'll remove all five of them,
534:00 - for example.
534:01 - And so AI chose to take two away from pile one.
534:04 - Now I'm left with one pile that has one object, one pile that has two objects.
534:08 - So from pile three, I will remove two objects.
534:11 - And now I've left the AI with no choice but to take that last one.
534:15 - And so the game is over, and I was able to win.
534:17 - But I did so because the AI was really just playing randomly.
534:20 - It didn't have any prior experience that it was using in order
534:23 - to make these sorts of judgments.
534:24 - Now let me let the AI train itself on 10,000 games.
534:29 - I'm going to let the AI play 10,000 games of nim against itself.
534:32 - Every time it wins or loses, it's going to learn from that experience
534:36 - and learn in the future what to do and what not to do.
534:39 - So here then, I'll go ahead and run this again.
534:42 - And now you see the AI running through a whole bunch of training games,
534:45 - 10,000 training games against itself.
534:47 - And now it's going to let me make these sorts of decisions.
534:50 - So now I'm going to play against the AI.
534:52 - Maybe I'll remove one from pile three.
534:55 - And the AI took everything from pile three, so I'm left with three piles.
534:59 - I'll go ahead and from pile two maybe remove three items.
535:04 - And the AI removes one item from pile zero.
535:07 - I'm left with two piles, each of which has two items in it.
535:10 - I'll remove one from pile one, I guess.
535:14 - And the AI took two from pile two, leaving me with no choice
535:17 - but to take one away from pile one.
535:20 - So it seems like after playing 10,000 games of nim against itself,
535:24 - the AI has learned something about what states and what actions tend to be good
535:28 - and has begun to learn some sort of pattern for how
535:31 - to predict what actions are going to be good
535:33 - and what actions are going to be bad in any given state.
535:37 - So reinforcement learning can be a very powerful technique
535:39 - for achieving these sorts of game-playing agents, agents
535:42 - that are able to play a game well just by learning from experience,
535:45 - whether that's playing against other people
535:47 - or by playing against itself and learning from those experiences as well.
535:51 - Now, nim is a bit of an easy game to use reinforcement learning for
535:55 - because there are so few states.
535:57 - There are only states that are as many as how many different objects
535:59 - are in each of these various different piles.
536:02 - You might imagine that it's going to be harder if you think of a game like chess
536:06 - or games where there are many, many more states and many, many more actions
536:09 - that you can imagine taking, where it's not
536:11 - going to be as easy to learn for every state and for every action
536:15 - what the value is going to be.
536:17 - So oftentimes in that case, we can't necessarily
536:20 - learn exactly what the value is for every state and for every action,
536:23 - but we can approximate it.
536:25 - So much as we saw with minimax, so we could use a depth-limiting approach
536:28 - to stop calculating at a certain point in time,
536:31 - we can do a similar type of approximation known
536:34 - as function approximation in a reinforcement learning context
536:37 - where instead of learning a value of q for every state and every action,
536:42 - we just have some function that estimates what the value is
536:46 - for taking this action in this particular state that
536:49 - might be based on various different features of the state
536:53 - that the agent happens to be in, where you might have
536:55 - to choose what those features actually are.
536:58 - But you can begin to learn some patterns that generalize beyond one
537:02 - specific state and one specific action that you can begin to learn
537:05 - if certain features tend to be good things or bad things.
537:08 - Reinforcement learning can allow you, using a very similar mechanism,
537:11 - to generalize beyond one particular state and say,
537:14 - if this other state looks kind of like this state,
537:17 - then maybe the similar types of actions that worked in one state
537:20 - will also work in another state as well.
537:23 - And so this type of approach can be quite helpful
537:25 - as you begin to deal with reinforcement learning that
537:27 - exist in larger and larger state spaces where it's just not feasible
537:31 - to explore all of the possible states that could actually exist.
537:36 - So there, then, are two of the main categories of reinforcement learning.
537:39 - Supervised learning, where you have labeled input and output pairs,
537:42 - and reinforcement learning, where an agent learns from rewards or punishments
537:46 - that it receives.
537:47 - The third major category of machine learning
537:49 - that we'll just touch on briefly is known as unsupervised learning.
537:53 - And unsupervised learning happens when we have data
537:56 - without any additional feedback, without labels,
537:59 - that in the supervised learning case, all of our data had labels.
538:02 - We labeled the data point with whether that was a rainy day or not rainy day.
538:06 - And using those labels, we were able to infer what the pattern was.
538:09 - Or we labeled data as a counterfeit banknote or not a counterfeit.
538:13 - And using those labels, we were able to draw inferences and patterns
538:16 - to figure out what does a banknote look like versus not.
538:20 - In unsupervised learning, we don't have any access to any of those labels.
538:25 - But we still would like to learn some of those patterns.
538:28 - And one of the tasks that you might want to perform in unsupervised learning
538:31 - is something like clustering, where clustering is just
538:34 - the task of, given some set of objects, organize it
538:37 - into distinct clusters, groups of objects that are similar to one another.
538:42 - And there's lots of applications for clustering.
538:44 - It comes up in genetic research, where you might have
538:47 - a whole bunch of different genes and you want to cluster them into similar genes
538:50 - if you're trying to analyze them across a population or across species.
538:54 - It comes up in an image if you want to take all the pixels of an image,
538:57 - cluster them into different parts of the image.
538:59 - Comes a lot up in market research if you want to divide your consumers
539:03 - into different groups so you know which groups to target with certain types
539:06 - of product advertisements, for example, and a number of other contexts
539:10 - as well in which clustering can be very applicable.
539:13 - One technique for clustering is an algorithm known as k-means clustering.
539:17 - And what k-means clustering is going to do
539:20 - is it is going to divide all of our data points into k different clusters.
539:24 - And it's going to do so by repeating this process of assigning points
539:28 - to clusters and then moving around those clusters at centers.
539:32 - We're going to define a cluster by its center, the middle of the cluster,
539:36 - and then assign points to that cluster based on which
539:39 - center is closest to that point.
539:42 - And I'll show you an example of that now.
539:44 - Here, for example, I have a whole bunch of unlabeled data,
539:47 - just various data points that are in some sort of graphical space.
539:51 - And I would like to group them into various different clusters.
539:55 - But I don't know how to do that originally.
539:57 - And let's say I want to assign like three clusters to this group.
540:00 - And you have to choose how many clusters you want in k-means clustering
540:03 - that you could try multiple and see how well those values perform.
540:06 - But I'll start just by randomly picking some places
540:09 - to put the centers of those clusters.
540:12 - Maybe I have a blue cluster, a red cluster, and a green cluster.
540:15 - And I'm going to start with the centers of those clusters
540:18 - just being in these three locations here.
540:20 - And what k-means clustering tells us to do
540:23 - is once I have the centers of the clusters,
540:25 - assign every point to a cluster based on which cluster center it is closest to.
540:32 - So we end up with something like this, where all of these points
540:35 - are closer to the blue cluster center than any other cluster center.
540:40 - All of these points here are closer to the green cluster
540:43 - center than any other cluster center.
540:45 - And then these two points plus these points over here,
540:48 - those are all closest to the red cluster center instead.
540:53 - So here then is one possible assignment of all these points
540:57 - to three different clusters.
540:58 - But it's not great that it seems like in this red cluster,
541:01 - these points are kind of far apart.
541:02 - In this green cluster, these points are kind of far apart.
541:05 - It might not be my ideal choice of how I would cluster
541:08 - these various different data points.
541:10 - But k-means clustering is an iterative process
541:13 - that after I do this, there is a next step, which
541:16 - is that after I've assigned all of the points to the cluster center
541:19 - that it is nearest to, we are going to re-center the clusters,
541:24 - meaning take the cluster centers, these diamond shapes here,
541:27 - and move them to the middle, or the average,
541:30 - effectively, of all of the points that are in that cluster.
541:33 - So we'll take this blue point, this blue center,
541:36 - and go ahead and move it to the middle or to the center of all
541:39 - of the points that were assigned to the blue cluster,
541:41 - moving it slightly to the right in this case.
541:43 - And we'll do the same thing for red.
541:45 - We'll move the cluster center to the middle of all of these points,
541:49 - weighted by how many points there are.
541:51 - There are more points over here, so the red center ends up
541:55 - moving a little bit further that way.
541:56 - And likewise, for the green center, there are many more points
541:59 - on this side of the green center.
542:01 - So the green center ends up being pulled a little bit further
542:04 - in this direction.
542:06 - So we re-center all of the clusters, and then we repeat the process.
542:10 - We go ahead and now reassign all of the points to the cluster center
542:14 - that they are now closest to.
542:16 - And now that we've moved around the cluster centers,
542:18 - these cluster assignments might change.
542:20 - That this point originally was closer to the red cluster center,
542:23 - but now it's actually closer to the blue cluster center.
542:26 - Same goes for this point as well.
542:28 - And these three points that were originally closer to the green cluster
542:31 - center are now closer to the red cluster center instead.
542:36 - So we can reassign what colors or which clusters each of these data points
542:41 - belongs to, and then repeat the process again,
542:43 - moving each of these cluster means and the middles of the clusterism
542:47 - to the mean, the average, of all of the other points that happen to be there,
542:52 - and repeat the process again.
542:54 - Go ahead and assign each of the points to the cluster
542:57 - that they are closest to.
542:58 - So once we reach a point where we've assigned all the points to clusters
543:01 - to the cluster that they are nearest to, and nothing changed,
543:05 - we've reached a sort of equilibrium in this situation,
543:07 - where no points are changing their allegiance.
543:09 - And as a result, we can declare this algorithm is now over.
543:12 - And we now have some assignment of each of these points
543:15 - into three different clusters.
543:17 - And it looks like we did a pretty good job of trying
543:19 - to identify which points are more similar to one another
543:22 - than they are to points in other groups.
543:24 - So we have the green cluster down here, this blue cluster here,
543:27 - and then this red cluster over there as well.
543:30 - And we did so without any access to some labels
543:33 - to tell us what these various different clusters were.
543:35 - We just used an algorithm in an unsupervised sense
543:38 - without any of those labels to figure out which points
543:41 - belonged to which categories.
543:43 - And again, lots of applications for this type of clustering technique.
543:47 - And there are many more algorithms in each of these various different fields
543:50 - within machine learning, supervised and reinforcement and unsupervised.
543:54 - But those are many of the big picture foundational ideas
543:57 - that underlie a lot of these techniques, where these are the problems
544:00 - that we're trying to solve.
544:01 - And we try and solve those problems using
544:03 - a number of different methods of trying to take data and learn
544:06 - patterns in that data, whether that's trying
544:08 - to find neighboring data points that are similar
544:10 - or trying to minimize some sort of loss function
544:13 - or any number of other techniques that allow us to begin to try
544:17 - to solve these sorts of problems.
544:19 - That then was a look at some of the principles
544:21 - that are at the foundation of modern machine learning,
544:23 - this ability to take data and learn from that data
544:26 - so that the computer can perform a task even
544:28 - if they haven't explicitly been given instructions
544:31 - in order to do so.
544:32 - Next time, we'll continue this conversation about machine learning,
544:35 - looking at other techniques we can use for solving these sorts of problems.
544:38 - We'll see you then.
544:41 - All right, welcome back, everyone, to an introduction
545:01 - to artificial intelligence with Python.
545:03 - Now, last time, we took a look at machine learning,
545:05 - a set of techniques that computers can use in order to take a set of data
545:09 - and learn some patterns inside of that data,
545:11 - learn how to perform a task even if we the programmers didn't
545:14 - give the computer explicit instructions for how to perform that task.
545:18 - Today, we transition to one of the most popular techniques and tools
545:21 - within machine learning, that of neural networks.
545:24 - And neural networks were inspired as early as the 1940s
545:27 - by researchers who were thinking about how it is that humans learn,
545:30 - studying neuroscience in the human brain and trying
545:33 - to see whether or not we could apply those same ideas to computers
545:36 - as well and model computer learning off of human learning.
545:39 - So how is the brain structured?
545:41 - Well, very simply put, the brain consists of a whole bunch of neurons.
545:45 - And those neurons are connected to one another
545:47 - and communicate with one another in some way.
545:49 - In particular, if you think about the structure of a biological neural
545:52 - network, something like this, there are a couple of key properties
545:55 - that scientists observed.
545:57 - One was that these neurons are connected to each other
545:59 - and receive electrical signals from one another,
546:01 - that one neuron can propagate electrical signals to another neuron.
546:06 - And another point is that neurons process those input signals
546:09 - and then can be activated, that a neuron becomes activated at a certain point
546:12 - and then can propagate further signals onto neurons in the future.
546:16 - And so the question then became, could we
546:18 - take this biological idea of how it is that humans learn with brains
546:22 - and with neurons and apply that to a machine as well,
546:25 - in effect designing an artificial neural network, or an ANN,
546:29 - which will be a mathematical model for learning
546:31 - that is inspired by these biological neural networks?
546:34 - And what artificial neural networks will allow us to do
546:37 - is they will first be able to model some sort of mathematical function.
546:40 - Every time you look at a neural network, which
546:42 - we'll see more of later today, each one of them
546:44 - is really just some mathematical function that
546:46 - is mapping certain inputs to particular outputs based
546:50 - on the structure of the network, that depending on where we place
546:53 - particular units inside of this neural network,
546:55 - that's going to determine how it is that the network is going to function.
546:59 - And in particular, artificial neural networks
547:01 - are going to lend themselves to a way that we can learn what the network's
547:05 - parameters should be.
547:07 - We'll see more on that in just a moment.
547:08 - But in effect, we want a model such that it
547:11 - is easy for us to be able to write some code that
547:13 - allows for the network to be able to figure out
547:16 - how to model the right mathematical function given
547:18 - a particular set of input data.
547:20 - So in order to create our artificial neural network,
547:23 - instead of using biological neurons, we're just
547:25 - going to use what we're going to call units, units inside of a neural
547:28 - network, which we can represent kind of like a node in a graph, which
547:31 - will here be represented just by a blue circle like this.
547:34 - And these artificial units, these artificial neurons,
547:37 - can be connected to one another.
547:39 - So here, for instance, we have two units that
547:41 - are connected by this edge inside of this graph, effectively.
547:46 - And so what we're going to do now is think
547:48 - of this idea as some sort of mapping from inputs to outputs.
547:51 - So we have one unit that is connected to another unit
547:54 - that we might think of this side of the input and that side of the output.
547:58 - And what we're trying to do then is to figure out
548:00 - how to solve a problem, how to model some sort of mathematical function.
548:04 - And this might take the form of something
548:05 - we saw last time, which was something like we have certain inputs,
548:08 - like variables x1 and x2.
548:10 - And given those inputs, we want to perform some sort of task,
548:13 - a task like predicting whether or not it's going to rain.
548:16 - And ideally, we'd like some way, given these inputs, x1 and x2,
548:20 - which stand for some sort of variables to do with the weather,
548:23 - we would like to be able to predict, in this case, a Boolean classification.
548:27 - Is it going to rain, or is it not going to rain?
548:30 - And we did this last time by way of a mathematical function.
548:33 - We defined some function, h, for our hypothesis function,
548:36 - that took as input x1 and x2, the two inputs that we cared about processing,
548:41 - in order to determine whether we thought it was going to rain
548:44 - or whether we thought it was not going to rain.
548:46 - The question then becomes, what does this hypothesis function
548:48 - do in order to make that determination?
548:51 - And we decided last time to use a linear combination of these input variables
548:56 - to determine what the output should be.
548:58 - So our hypothesis function was equal to something like this.
549:02 - Weight 0 plus weight 1 times x1 plus weight 2 times x2.
549:07 - So what's going on here is that x1 and x2, those are input variables,
549:11 - the inputs to this hypothesis function.
549:15 - And each of those input variables is being multiplied
549:17 - by some weight, which is just some number.
549:20 - So x1 is being multiplied by weight 1, x2 is being multiplied by weight 2.
549:25 - And we have this additional weight, weight 0,
549:27 - that doesn't get multiplied by an input variable at all,
549:30 - that just serves to either move the function up
549:32 - or move the function's value down.
549:33 - You can think of this as either a weight that's just
549:36 - multiplied by some dummy value, like the number 1.
549:38 - It's multiplied by 1, and so it's not multiplied by anything.
549:41 - Or sometimes, you'll see in the literature,
549:43 - people call this variable weight 0 a bias,
549:46 - so that you can think of these variables as slightly different.
549:48 - We have weights that are multiplied by the input,
549:50 - and we separately add some bias to the result as well.
549:54 - You'll hear both of those terminologies used
549:56 - when people talk about neural networks and machine learning.
549:59 - So in effect, what we've done here is that in order
550:02 - to define a hypothesis function, we just need to decide and figure out
550:06 - what these weights should be to determine
550:08 - what values to multiply by our inputs to get some sort of result.
550:12 - Of course, at the end of this, what we need to do
550:14 - is make some sort of classification, like rainy or not rainy.
550:18 - And to do that, we use some sort of function
550:20 - that defines some sort of threshold.
550:22 - And so we saw, for instance, the step function,
550:25 - which is defined as 1 if the result of multiplying the weights by the inputs
550:30 - is at least 0, otherwise it's 0.
550:32 - And you can think of this line down the middle
550:34 - as kind of like a dotted line.
550:35 - Effectively, it stays at 0 all the way up to one point,
550:38 - and then the function steps or jumps up to 1.
550:41 - So it's 0 before it reaches some threshold,
550:43 - and then it's 1 after it reaches a particular threshold.
550:46 - And so this was one way we could define what
550:49 - will come to call an activation function, a function that
550:51 - determines when it is that this output becomes active, changes to 1
550:56 - instead of being a 0.
550:58 - But we also saw that if we didn't just want a purely binary classification,
551:02 - we didn't want purely 1 or 0, but we wanted
551:04 - to allow for some in-between real numbered values,
551:07 - we could use a different function.
551:09 - And there are a number of choices, but the one that we looked at
551:11 - was the logistic sigmoid function that has sort of an s-shaped curve,
551:15 - where we could represent this as a probability that
551:18 - may be somewhere in between the probability of rain
551:20 - or something like 0.5.
551:22 - Maybe a little bit later, the probability of rain is 0.8.
551:25 - And so rather than just have a binary classification of 0 or 1,
551:29 - we could allow for numbers that are in between as well.
551:32 - And it turns out there are many other different types of activation
551:35 - functions, where an activation function just
551:37 - takes the output of multiplying the weights together and adding that bias,
551:41 - and then figuring out what the actual output should be.
551:43 - Another popular one is the rectified linear unit, otherwise known as ReLU.
551:48 - And the way that works is that it just takes its input
551:50 - and takes the maximum of that input and 0.
551:52 - So if it's positive, it remains unchanged.
551:55 - But if it's 0, if it's negative, it goes ahead and levels out at 0.
551:59 - And there are other activation functions that we could choose as well.
552:02 - But in short, each of these activation functions,
552:04 - you can just think of as a function that gets applied
552:07 - to the result of all of this computation.
552:10 - We take some function g and apply it to the result of all of that calculation.
552:15 - And this then is what we saw last time, the way
552:17 - of defining some hypothesis function that takes in inputs,
552:20 - calculate some linear combination of those inputs,
552:23 - and then passes it through some sort of activation function to get our output.
552:28 - And this actually turns out to be the model for the simplest of neural
552:32 - networks, that we're going to instead represent this mathematical idea
552:36 - graphically by using a structure like this.
552:39 - Here then is a neural network that has two inputs.
552:42 - We can think of this as x1 and this as x2.
552:44 - And then one output, which you can think of as classifying whether or not
552:48 - we think it's going to rain or not rain, for example,
552:50 - in this particular instance.
552:52 - And so how exactly does this model work?
552:54 - Well, each of these two inputs represents one of our input variables,
552:57 - x1 and x2.
552:59 - And notice that these inputs are connected to this output via these edges,
553:05 - which are going to be defined by their weights.
553:06 - So these edges each have a weight associated with them, weight 1 and weight
553:10 - 2.
553:12 - And then this output unit, what it's going to do
553:14 - is it is going to calculate an output based on those inputs
553:17 - and based on those weights.
553:19 - This output unit is going to multiply all the inputs by their weights,
553:23 - add in this bias term, which you can think of as an extra w0 term
553:26 - that gets added into it, and then we pass it through an activation function.
553:31 - So this then is just a graphical way of representing the same idea
553:34 - we saw last time just mathematically.
553:36 - And we're going to call this a very simple neural network.
553:40 - And we'd like for this neural network to be
553:42 - able to learn how to calculate some function,
553:44 - that we want some function for the neural network to learn.
553:46 - And the neural network is going to learn what should the values of w0,
553:50 - w1, and w2 be?
553:52 - What should the activation function be in order
553:54 - to get the result that we would expect?
553:57 - So we can actually take a look at an example of this.
553:59 - What then is a very simple function that we might calculate?
554:02 - Well, if we recall back from when we were looking at propositional logic,
554:06 - one of the simplest functions we looked at
554:07 - was something like the or function that takes two inputs, x and y,
554:12 - and outputs 1, otherwise known as true, if either one of the inputs
554:16 - or both of them are 1, and outputs of 0 if both of the inputs are 0 or false.
554:22 - So this then is the or function.
554:23 - And this was the truth table for the or function,
554:25 - that as long as either of the inputs are 1, the output of the function is 1,
554:29 - and the only case where the output is 0 is where both of the inputs are 0.
554:34 - So the question is, how could we take this and train a neural network
554:38 - to be able to learn this particular function?
554:40 - What would those weights look like?
554:42 - Well, we could do something like this.
554:44 - Here's our neural network.
554:45 - And I'll propose that in order to calculate the or function,
554:48 - we're going to use a value of 1 for each of the weights.
554:52 - And we'll use a bias of negative 1.
554:55 - And then we'll just use this step function as our activation function.
554:59 - How then does this work?
555:00 - Well, if I wanted to calculate something like 0 or 0,
555:04 - which we know to be 0 because false or false is false, then what are we going
555:08 - to do?
555:08 - Well, our output unit is going to calculate this input multiplied
555:12 - by the weight, 0 times 1, that's 0.
555:14 - Same thing here, 0 times 1, that's 0.
555:17 - And we'll add to that the bias minus 1.
555:21 - So that'll give us a result of negative 1.
555:23 - If we plot that on our activation function, negative 1 is here.
555:26 - It's before the threshold, which means either 0 or 1.
555:30 - It's only 1 after the threshold.
555:32 - Since negative 1 is before the threshold,
555:34 - the output that this unit provides is going to be 0.
555:38 - And that's what we would expect it to be, that 0 or 0 should be 0.
555:43 - What if instead we had had 1 or 0, where this is the number 1?
555:47 - Well, in this case, in order to calculate what the output is going to be,
555:50 - we again have to do this weighted sum, 1 times 1, that's 1.
555:55 - 0 times 1, that's 0.
555:57 - Sum of that so far is 1.
555:59 - Add negative 1 to that.
556:00 - Well, then the output is 0.
556:02 - And if we plot 0 on the step function, 0 ends up being here.
556:05 - It's just at the threshold.
556:07 - And so the output here is going to be 1, because the output of 1 or 0,
556:11 - that's 1.
556:12 - So that's what we would expect as well.
556:13 - And just for one more example, if I had 1 or 1, what would the result be?
556:17 - Well, 1 times 1 is 1.
556:19 - 1 times 1 is 1.
556:20 - The sum of those is 2.
556:22 - I add the bias term to that.
556:23 - I get the number 1.
556:24 - 1 plotted on this graph is way over there.
556:27 - That's well beyond the threshold.
556:28 - And so this output is going to be 1 as well.
556:31 - The output is always 0 or 1, depending on whether or not
556:34 - we're past the threshold.
556:35 - And this neural network then models the OR function, a very simple function,
556:39 - definitely.
556:40 - But it still is able to model it correctly.
556:42 - If I give it the inputs, it will tell me what x1 or x2 happens to be.
556:48 - And you could imagine trying to do this for other functions as well.
556:50 - A function like the AND function, for instance, that takes two inputs
556:55 - and calculates whether both x and y are true.
556:59 - So if x is 1 and y is 1, then the output of x and y is 1.
557:04 - But in all the other cases, the output is 0.
557:07 - How could we model that inside of a neural network as well?
557:10 - Well, it turns out we could do it in the same way,
557:13 - except instead of negative 1 as the bias,
557:16 - we can use negative 2 as the bias instead.
557:20 - What does that end up looking like?
557:21 - Well, if I had 1 and 1, that should be 1, because 1 true and true
557:25 - is equal to true.
557:27 - Well, I take 1 times 1, that's 1.
557:29 - 1 times 1 is 1.
557:30 - I get a total sum of 2 so far.
557:32 - Now I add the bias of negative 2, and I get the value 0.
557:35 - And 0, when I plot it on the activation function,
557:38 - is just past that threshold, and so the output is going to be 1.
557:42 - But if I had any other input, for example, like 1 and 0,
557:46 - well, the weighted sum of these is 1 plus 0 is going to be 1.
557:51 - Minus 2 is going to give us negative 1, and negative 1
557:53 - is not past that threshold, and so the output is going to be 0.
557:58 - So those then are some very simple functions
558:01 - that we can model using a neural network that has two inputs and one output,
558:05 - where our goal is to be able to figure out what those weights should be
558:08 - in order to determine what the output should be.
558:11 - And you could imagine generalizing this to calculate more complex functions
558:14 - as well, that maybe, given the humidity and the pressure,
558:17 - we want to calculate what's the probability that it's going to rain,
558:20 - for example.
558:20 - Or we might want to do a regression-style problem.
558:22 - We're given some amount of advertising, and given what month it is maybe,
558:26 - we want to predict what our expected sales are
558:28 - going to be for that particular month.
558:30 - So you could imagine these inputs and outputs being different as well.
558:34 - And it turns out that in some problems, we're not just
558:36 - going to have two inputs, and the nice thing about these neural networks
558:39 - is that we can compose multiple units together,
558:42 - make our networks more complex just by adding more units
558:46 - into this particular neural network.
558:48 - So the network we've been looking at has two inputs and one output.
558:52 - But we could just as easily say, let's go ahead and have three inputs in there,
558:56 - or have even more inputs, where we could arbitrarily
558:58 - decide however many inputs there are to our problem, all going
559:02 - to be calculating some sort of output that we care about figuring out
559:06 - the value of.
559:07 - How then does the math work for figuring out that output?
559:10 - Well, it's going to work in a very similar way.
559:12 - In the case of two inputs, we had two weights indicated by these edges,
559:16 - and we multiplied the weights by the numbers, adding this bias term.
559:20 - And we'll do the same thing in the other cases as well.
559:22 - If I have three inputs, you'll imagine multiplying
559:25 - each of these three inputs by each of these weights.
559:27 - If I had five inputs instead, we're going to do the same thing.
559:31 - Here I'm saying sum up from 1 to 5, xi multiplied by weight i.
559:35 - So take each of the five input variables, multiply them
559:38 - by their corresponding weight, and then add the bias to that.
559:41 - So this would be a case where there are five inputs into this neural network,
559:45 - for example.
559:46 - But there could be more, arbitrarily many nodes
559:48 - that we want inside of this neural network, where each time we're just
559:51 - going to sum up all of those input variables multiplied by their weight
559:54 - and then add the bias term at the very end.
559:57 - And so this allows us to be able to represent problems
560:00 - that have even more inputs just by growing the size of our neural network.
560:05 - Now, the next question we might ask is a question about how it
560:08 - is that we train these neural networks.
560:10 - In the case of the or function and the and function,
560:13 - they were simple enough functions that I could just tell you,
560:16 - like here, what the weights should be.
560:17 - And you could probably reason through it yourself
560:19 - what the weights should be in order to calculate the output that you want.
560:23 - But in general, with functions like predicting sales
560:26 - or predicting whether or not it's going to rain,
560:27 - these are much trickier functions to be able to figure out.
560:30 - We would like the computer to have some mechanism
560:33 - of calculating what it is that the weights should be,
560:36 - how it is to set the weights so that our neural network is
560:39 - able to accurately model the function that we
560:41 - care about trying to estimate.
560:43 - And it turns out that the strategy for doing this,
560:45 - inspired by the domain of calculus, is a technique called gradient descent.
560:49 - And what gradient descent is, it is an algorithm
560:52 - for minimizing loss when you're training a neural network.
560:55 - And recall that loss refers to how bad our hypothesis
560:59 - function happens to be, that we can define certain loss functions.
561:03 - And we saw some examples of loss functions last time that just give us
561:06 - a number for any particular hypothesis, saying,
561:09 - how poorly does it model the data?
561:11 - How many examples does it get wrong?
561:13 - How are they worse or less bad as compared to other hypothesis functions
561:17 - that we might define?
561:19 - And this loss function is just a mathematical function.
561:22 - And when you have a mathematical function,
561:24 - in calculus what you could do is calculate
561:26 - something known as the gradient, which you can think of as like a slope.
561:29 - It's the direction the loss function is moving at any particular point.
561:32 - And what it's going to tell us is, in which direction
561:36 - should we be moving these weights in order to minimize the amount of loss?
561:41 - And so generally speaking, we won't get into the calculus of it.
561:43 - But the high level idea for gradient descent
561:46 - is going to look something like this.
561:47 - If we want to train a neural network, we'll go ahead and start just
561:51 - by choosing the weights randomly.
561:52 - Just pick random weights for all of the weights in the neural network.
561:56 - And then we'll use the input data that we have access
561:58 - to in order to train the network, in order
562:00 - to figure out what the weights should actually be.
562:02 - So we'll repeat this process again and again.
562:05 - The first step is we're going to calculate the gradient based
562:08 - on all of the data points.
562:09 - So we'll look at all the data and figure out
562:11 - what the gradient is at the place where we currently
562:13 - are for the current setting of the weights, which
562:15 - means in which direction should we move the weights in order
562:19 - to minimize the total amount of loss, in order to make our solution better.
562:24 - And once we've calculated that gradient, which direction
562:26 - we should move in the loss function, well,
562:29 - then we can just update those weights according to the gradient.
562:32 - Take a small step in the direction of those weights
562:35 - in order to try to make our solution a little bit better.
562:37 - And the size of the step that we take, that's going to vary.
562:40 - And you can choose that when you're training a particular neural network.
562:43 - But in short, the idea is going to be take all the data points,
562:46 - figure out based on those data points in what direction
562:48 - the weights should move, and then move the weights one small step
562:52 - in that direction.
562:53 - And if you repeat that process over and over again,
562:55 - adjusting the weights a little bit at a time based on all the data points,
562:58 - eventually you should end up with a pretty good solution
563:02 - to trying to solve this sort of problem.
563:04 - At least that's what we would hope to happen.
563:06 - Now, if you look at this algorithm, a good question
563:08 - to ask anytime you're analyzing an algorithm
563:10 - is what is going to be the expensive part of doing the calculation?
563:14 - What's going to take a lot of work to try to figure out?
563:17 - What is going to be expensive to calculate?
563:19 - And in particular, in the case of gradient descent,
563:22 - the really expensive part is this all data points part right here,
563:26 - having to take all of the data points and using all of those data points
563:30 - figure out what the gradient is at this particular setting of all
563:34 - of the weights.
563:34 - Because odds are in a big machine learning problem
563:37 - where you're trying to solve a big problem with a lot of data,
563:39 - you have a lot of data points in order to calculate.
563:41 - And figuring out the gradient based on all of those data points
563:44 - is going to be expensive.
563:46 - And you'll have to do it many times.
563:47 - You'll likely repeat this process again and again and again,
563:50 - going through all the data points, taking one small step over and over
563:54 - as you try and figure out what the optimal setting of those weights
563:57 - happens to be.
563:59 - It turns out that we would ideally like to be
564:02 - able to train our neural networks faster,
564:04 - to be able to more quickly converge to some sort of solution that
564:07 - is going to be a good solution to the problem.
564:10 - So in that case, there are alternatives to just standard gradient descent,
564:13 - which looks at all of the data points at once.
564:15 - We can employ a method like stochastic gradient descent,
564:18 - which will randomly just choose one data point at a time
564:22 - to calculate the gradient based on, instead of calculating it
564:25 - based on all of the data points.
564:27 - So the idea there is that we have some setting of the weights.
564:30 - We pick a data point.
564:31 - And based on that one data point, we figure out in which direction
564:34 - should we move all of the weights and move the weights in that small
564:37 - direction, then take another data point and do that again
564:39 - and repeat this process again and again,
564:41 - maybe looking at each of the data points multiple times,
564:44 - but each time only using one data point to calculate the gradient,
564:48 - to calculate which direction we should move in.
564:51 - Now, just using one data point instead of all of the data points
564:55 - probably gives us a less accurate estimate of what the gradient actually
564:58 - is.
564:59 - But on the plus side, it's going to be much faster
565:01 - to be able to calculate, that we can much more quickly calculate
565:04 - what the gradient is based on one data point,
565:07 - instead of calculating based on all of the data points
565:09 - and having to do all of that computational work again and again.
565:13 - So there are trade-offs here between looking at all of the data points
565:16 - and just looking at one data point.
565:18 - And it turns out that a middle ground that is also quite popular
565:21 - is a technique called mini-batch gradient descent, where the idea there
565:24 - is instead of looking at all of the data versus just a single point,
565:28 - we instead divide our data set up into small batches, groups of data points,
565:32 - where you can decide how big a particular batch is.
565:34 - But in short, you're just going to look at a small number of points
565:37 - at any given time, hopefully getting a more accurate estimate of the gradient,
565:41 - but also not requiring all of the computational effort needed
565:44 - to look at every single one of these data points.
565:48 - So gradient descent, then, is this technique
565:50 - that we can use in order to train these neural networks,
565:53 - in order to figure out what the setting of all of these weights
565:56 - should be if we want some way to try and get
565:59 - an accurate notion of how it is that this function should work,
566:02 - some way of modeling how to transform the inputs into particular outputs.
566:08 - Now, so far, the networks that we've taken a look at
566:11 - have all been structured similar to this.
566:13 - We have some number of inputs, maybe two or three or five or more.
566:17 - And then we have one output that is just predicting like rain or no rain
566:21 - or just predicting one particular value.
566:23 - But often in machine learning problems, we
566:25 - don't just care about one output.
566:27 - We might care about an output that has multiple different values
566:31 - associated with it.
566:32 - So in the same way that we could take a neural network
566:35 - and add units to the input layer, we can likewise add inputs or add outputs
566:40 - to the output layer as well.
566:41 - Instead of just one output, you could imagine we have two outputs,
566:44 - or we could have four outputs, for example,
566:47 - where in each case, as we add more inputs or add more outputs,
566:50 - if we want to keep this network fully connected between these two layers,
566:54 - we just need to add more weights, that now each of these input nodes
566:58 - has four weights associated with each of the four outputs.
567:02 - And that's true for each of these various different input nodes.
567:06 - So as we add nodes, we add more weights in order
567:09 - to make sure that each of the inputs can somehow
567:11 - be connected to each of the outputs so that each output
567:14 - value can be calculated based on what the value of the input happens to be.
567:19 - So what might a case be where we want multiple different output values?
567:23 - Well, you might consider that in the case of weather predicting,
567:26 - for example, we might not just care whether it's raining or not raining.
567:30 - There might be multiple different categories of weather
567:33 - that we would like to categorize the weather into.
567:35 - With just a single output variable, we can do a binary classification,
567:39 - like rain or no rain, for instance, 1 or 0.
567:42 - But it doesn't allow us to do much more than that.
567:45 - With multiple output variables, I might be
567:47 - able to use each one to predict something a little different.
567:50 - Maybe I want to categorize the weather into one of four different categories,
567:54 - something like is it going to be raining or sunny or cloudy or snowy.
567:58 - And I now have four output variables that
567:59 - can be used to represent maybe the probability that it is
568:03 - rainy as opposed to sunny as opposed to cloudy or as opposed to snowy.
568:08 - How then would this neural network work?
568:10 - Well, we have some input variables that represent some data
568:13 - that we have collected about the weather.
568:15 - Each of those inputs gets multiplied by each of these various different weights.
568:18 - We have more multiplications to do, but these
568:20 - are fairly quick mathematical operations to perform.
568:24 - And then what we get is after passing them
568:25 - through some sort of activation function in the outputs,
568:28 - we end up getting some sort of number, where that number, you might imagine,
568:32 - you could interpret as a probability, like a probability that it is one
568:36 - category as opposed to another category.
568:38 - So here we're saying that based on the inputs,
568:40 - we think there is a 10% chance that it's raining, a 60% chance that it's sunny,
568:45 - a 20% chance of cloudy, a 10% chance that it's snowy.
568:48 - And given that output, if these represent a probability distribution,
568:52 - well, then you could just pick whichever one has the highest value,
568:55 - in this case, sunny, and say that, well, most likely, we
568:58 - think that this categorization of inputs means that the output should be snowy
569:04 - or should be sunny.
569:05 - And that is what we would expect the weather to be in this particular instance.
569:09 - And so this allows us to do these sort of multi-class classifications,
569:13 - where instead of just having a binary classification, 1 or 0,
569:17 - we can have as many different categories as we want.
569:20 - And we can have our neural network output these probabilities
569:23 - over which categories are more likely than other categories.
569:27 - And using that data, we're able to draw some sort of inference
569:30 - on what it is that we should do.
569:33 - So this was sort of the idea of supervised machine learning.
569:35 - I can give this neural network a whole bunch of data,
569:38 - a whole bunch of input data corresponding to some label, some output data,
569:42 - like we know that it was raining on this day,
569:45 - we know that it was sunny on that day.
569:46 - And using all of that data, the algorithm
569:49 - can use gradient descent to figure out what all of the weights
569:52 - should be in order to create some sort of model that hopefully allows us
569:55 - a way to predict what we think the weather is going to be.
569:59 - But neural networks have a lot of other applications as well.
570:02 - You could imagine applying the same sort of idea to a reinforcement learning
570:06 - sort of example as well, where you remember that in reinforcement
570:09 - learning, what we wanted to do is train some sort of agent
570:13 - to learn what action to take, depending on what state
570:16 - they currently happen to be in.
570:17 - So depending on the current state of the world,
570:19 - we wanted the agent to pick from one of the available actions
570:23 - that is available to them.
570:24 - And you might model that by having each of these input variables
570:28 - represent some information about the state, some data about what state
570:33 - our agent is currently in.
570:34 - And then the output, for example, could be each
570:37 - of the various different actions that our agent could take,
570:40 - action 1, 2, 3, and 4.
570:42 - And you might imagine that this network would work in the same way,
570:45 - but based on these particular inputs, we go ahead and calculate values
570:48 - for each of these outputs.
570:50 - And those outputs could model which action is better than other actions.
570:53 - And we could just choose, based on looking at those outputs,
570:56 - which action we should take.
570:59 - And so these neural networks are very broadly applicable,
571:01 - that all they're really doing is modeling some mathematical function.
571:05 - So anything that we can frame as a mathematical function,
571:07 - something like classifying inputs into various different categories
571:11 - or figuring out based on some input state what action we should take,
571:15 - these are all mathematical functions that we could attempt to model
571:18 - by taking advantage of this neural network structure,
571:21 - and in particular, taking advantage of this technique, gradient descent,
571:25 - that we can use in order to figure out what the weights should
571:27 - be in order to do this sort of calculation.
571:31 - Now, how is it that you would go about training a neural network that
571:33 - has multiple outputs instead of just one?
571:36 - Well, with just a single output, we could see what the output for that value
571:40 - should be, and then you update all of the weights that corresponded to it.
571:44 - And when we have multiple outputs, at least in this particular case,
571:47 - we can really think of this as four separate neural networks,
571:51 - that really we just have one network here that has these three inputs
571:55 - corresponding with these three weights corresponding to this one output value.
572:00 - And the same thing is true for this output value.
572:02 - This output value effectively defines yet another neural network
572:06 - that has these same three inputs, but a different set of weights
572:09 - that correspond to this output.
572:11 - And likewise, this output has its own set of weights as well,
572:14 - and same thing for the fourth output too.
572:17 - And so if you wanted to train a neural network that had four outputs instead
572:20 - of just one, in this case where the inputs are directly
572:23 - connected to the outputs, you could really
572:25 - think of this as just training four independent neural networks.
572:28 - We know what the outputs for each of these four
572:31 - should be based on our input data, and using that data,
572:34 - we can begin to figure out what all of these individual weights should be.
572:37 - And maybe there's an additional step at the end
572:39 - to make sure that we turn these values into a probability distribution such
572:43 - that we can interpret which one is better than another
572:46 - or more likely than another as a category or something like that.
572:50 - So this then seems like it does a pretty good job of taking inputs
572:53 - and trying to predict what outputs should be.
572:55 - And we'll see some real examples of this in just a moment as well.
572:58 - But it's important then to think about what the limitations
573:01 - of this sort of approach is, of just taking some linear combination
573:05 - of inputs and passing it into some sort of activation function.
573:09 - And it turns out that when we do this in the case of binary classification,
573:12 - trying to predict does it belong to one category or another,
573:16 - we can only predict things that are linearly separable.
573:20 - Because we're taking a linear combination of inputs
573:22 - and using that to define some decision boundary or threshold,
573:26 - then what we get is a situation where if we have this set of data,
573:29 - we can predict a line that separates linearly the red points from the blue
573:35 - points, but a single unit that is making a binary classification, otherwise
573:39 - known as a perceptron, can't deal with a situation like this, where we've
573:44 - seen this type of situation before, where there is no straight line that
573:48 - just goes straight through the data that will divide the red points away
573:51 - from the blue points.
573:52 - It's a more complex decision boundary.
573:55 - The decision boundary somehow needs to capture the things inside of this
573:58 - circle.
573:59 - And there isn't really a line that will allow us to deal with that.
574:03 - So this is the limitation of the perceptron,
574:05 - these units that just make these binary decisions based on their inputs,
574:08 - that a single perceptron is only capable of learning
574:12 - a linearly separable decision boundary.
574:15 - All it can do is define a line.
574:17 - And sure, it can give us probabilities based
574:19 - on how close to that decision boundary we are,
574:21 - but it can only really decide based on a linear decision boundary.
574:26 - And so this doesn't seem like it's going to generalize well
574:29 - to situations where real world data is involved,
574:32 - because real world data often isn't linearly separable.
574:34 - It often isn't the case that we can just draw a line through the data
574:38 - and be able to divide it up into multiple groups.
574:41 - So what then is the solution to this?
574:43 - Well, what was proposed was the idea of a multilayer neural network,
574:47 - that so far all of the neural networks we've seen
574:49 - have had a set of inputs and a set of outputs,
574:52 - and the inputs are connected to those outputs.
574:55 - But in a multilayer neural network, this is going
574:57 - to be an artificial neural network that has an input layer still.
575:00 - It has an output layer, but also has one or more hidden layers in between.
575:06 - Other layers of artificial neurons or units
575:09 - that are going to calculate their own values as well.
575:12 - So instead of a neural network that looks like this with three inputs
575:15 - and one output, you might imagine in the middle
575:17 - here injecting a hidden layer, something like this.
575:21 - This is a hidden layer that has four nodes.
575:23 - You could choose how many nodes or units end up going into the hidden layer.
575:26 - You can have multiple hidden layers as well.
575:29 - And so now each of these inputs isn't directly connected to the output.
575:33 - Each of the inputs is connected to this hidden layer.
575:36 - And then all of the nodes in the hidden layer, those
575:38 - are connected to the one output.
575:41 - And so this is just another step that we can
575:43 - take towards calculating more complex functions.
575:46 - Each of these hidden units will calculate its output value,
575:49 - otherwise known as its activation, based on a linear combination
575:53 - of all the inputs.
575:55 - And once we have values for all of these nodes,
575:57 - as opposed to this just being the output, we do the same thing again.
576:00 - Calculate the output for this node based on multiplying
576:04 - each of the values for these units by their weights as well.
576:07 - So in effect, the way this works is that we start with inputs.
576:10 - They get multiplied by weights in order to calculate values for the hidden nodes.
576:14 - Those get multiplied by weights in order to figure out
576:16 - what the ultimate output is going to be.
576:19 - And the advantage of layering things like this
576:22 - is it gives us an ability to model more complex functions,
576:25 - that instead of just having a single decision boundary, a single line
576:29 - dividing the red points from the blue points, each of these hidden nodes
576:33 - can learn a different decision boundary.
576:35 - And we can combine those decision boundaries
576:37 - to figure out what the ultimate output is going to be.
576:41 - And as we begin to imagine more complex situations,
576:43 - you could imagine each of these nodes learning some useful property
576:47 - or learning some useful feature of all of the inputs
576:50 - and us somehow learning how to combine those features together
576:53 - in order to get the output that we actually want.
576:56 - Now, the natural question when we begin to look at this now
576:59 - is to ask the question of, how do we train a neural network that
577:02 - has hidden layers inside of it?
577:04 - And this turns out to initially be a bit of a tricky question,
577:07 - because the input data that we are given is we
577:10 - are given values for all of the inputs, and we're
577:13 - given what the value of the output should be, what the category is,
577:16 - for example.
577:18 - But the input data doesn't tell us what the values for all of these nodes
577:22 - should be.
577:22 - So we don't know how far off each of these nodes actually
577:26 - is because we're only given data for the inputs and the outputs.
577:29 - The reason this is called the hidden layer
577:31 - is because the data that is made available to us
577:34 - doesn't tell us what the values for all of these intermediate nodes
577:38 - should actually be.
577:39 - And so the strategy people came up with was
577:42 - to say that if you know what the error or the losses on the output node,
577:48 - well, then based on what these weights are,
577:50 - if one of these weights is higher than another,
577:52 - you can calculate an estimate for how much
577:55 - the error from this node was due to this part of the hidden node,
578:00 - or this part of the hidden layer, or this part of the hidden layer,
578:03 - based on the values of these weights, in effect saying
578:05 - that based on the error from the output, I can back propagate the error
578:10 - and figure out an estimate for what the error is for each of these nodes
578:14 - in the hidden layer as well.
578:15 - And there's some more calculus here that we won't get into the details of,
578:18 - but the idea of this algorithm is known as back propagation.
578:21 - It's an algorithm for training a neural network
578:24 - with multiple different hidden layers.
578:26 - And the idea for this, the pseudocode for it,
578:28 - will again be if we want to run gradient descent with back propagation.
578:31 - We'll start with a random choice of weights, as we did before.
578:35 - And now we'll go ahead and repeat the training process again and again.
578:38 - But what we're going to do each time is now
578:41 - we're going to calculate the error for the output layer first.
578:43 - We know the output and what it should be,
578:45 - and we know what we calculated so we can figure out what the error there is.
578:49 - But then we're going to repeat for every layer,
578:52 - starting with the output layer, moving back into the hidden layer,
578:55 - then the hidden layer before that if there are multiple hidden layers,
578:58 - going back all the way to the very first hidden layer,
579:00 - assuming there are multiple, we're going to propagate the error back one layer.
579:05 - Whatever the error was from the output, figure out
579:07 - what the error should be a layer before that
579:09 - based on what the values of those weights are.
579:11 - And then we can update those weights.
579:14 - So graphically, the way you might think about this
579:17 - is that we first start with the output.
579:18 - We know what the output should be.
579:20 - We know what output we calculated.
579:22 - And based on that, we can figure out, all right,
579:23 - how do we need to update those weights?
579:25 - Backpropagating the error to these nodes.
579:28 - And using that, we can figure out how we should update these weights.
579:31 - And you might imagine if there are multiple layers,
579:33 - we could repeat this process again and again
579:35 - to begin to figure out how all of these weights should be updated.
579:39 - And this backpropagation algorithm is really
579:41 - the key algorithm that makes neural networks possible.
579:44 - It makes it possible to take these multi-level structures
579:47 - and be able to train those structures depending
579:50 - on what the values of these weights are in order
579:52 - to figure out how it is that we should go about updating those weights in
579:56 - order to create some function that is able to minimize
579:59 - the total amount of loss, to figure out some good setting of the weights
580:02 - that will take the inputs and translate it into the output that we expect.
580:07 - And this works, as we said, not just for a single hidden layer.
580:10 - But you can imagine multiple hidden layers, where each hidden layer we just
580:13 - define however many nodes we want, where each of the nodes in one layer,
580:17 - we can connect to the nodes in the next layer,
580:19 - defining more and more complex networks that
580:22 - are able to model more and more complex types of functions.
580:26 - And so this type of network is what we might call a deep neural network,
580:30 - part of a larger family of deep learning algorithms,
580:33 - if you've ever heard that term.
580:34 - And all deep learning is about is it's using multiple layers
580:38 - to be able to predict and be able to model higher level
580:41 - features inside of the input, to be able to figure out
580:44 - what the output should be.
580:45 - And so a deep neural network is just a neural network
580:47 - that has multiple of these hidden layers,
580:49 - where we start at the input, calculate values for this layer,
580:52 - then this layer, then this layer, and then ultimately get an output.
580:55 - And this allows us to be able to model more and more sophisticated types
580:59 - of functions, that each of these layers can calculate something
581:02 - a little bit different, and we can combine that information
581:05 - to figure out what the output should be.
581:08 - Of course, as with any situation of machine learning,
581:11 - as we begin to make our models more and more complex,
581:13 - to model more and more complex functions, the risk we run
581:17 - is something like overfitting.
581:18 - And we talked about overfitting last time in the context of overfitting
581:22 - based on when we were training our models to be
581:25 - able to learn some sort of decision boundary,
581:27 - where overfitting happens when we fit too closely to the training data.
581:31 - And as a result, we don't generalize well to other situations as well.
581:36 - And one of the risks we run with a far more complex neural network that
581:40 - has many, many different nodes is that we might overfit based on the input
581:44 - data.
581:44 - We might grow over reliant on certain nodes
581:46 - to calculate things just purely based on the input data that
581:49 - doesn't allow us to generalize very well to the output.
581:53 - And there are a number of strategies for dealing with overfitting.
581:56 - But one of the most popular in the context of neural networks
581:59 - is a technique known as dropout.
582:01 - And what dropout does is it, when we're training the neural network,
582:04 - what we'll do in dropout is temporarily remove units,
582:08 - temporarily remove these artificial neurons from our network chosen at
582:11 - random.
582:12 - And the goal here is to prevent over-reliance on certain units.
582:16 - What generally happens in overfitting is that we
582:18 - begin to over-rely on certain units inside the neural network
582:21 - to be able to tell us how to interpret the input data.
582:24 - What dropout will do is randomly remove some of these units
582:28 - in order to reduce the chance that we over-rely on certain units
582:31 - to make our neural network more robust, to be able to handle the situations
582:35 - even when we just drop out particular neurons entirely.
582:39 - So the way that might work is we have a network like this.
582:42 - And as we're training it, when we go about trying
582:44 - to update the weights the first time, we'll just randomly pick
582:47 - some percentage of the nodes to drop out of the network.
582:49 - It's as if those nodes aren't there at all.
582:51 - It's as if the weights associated with those nodes aren't there at all.
582:54 - And we'll train it this way.
582:56 - Then the next time we update the weights, we'll pick a different set
582:58 - and just go ahead and train that way.
582:59 - And then again, randomly choose and train with other nodes
583:02 - that have been dropped out as well.
583:04 - And the goal of that is that after the training process,
583:07 - if you train by dropping out random nodes inside of this neural network,
583:10 - you hopefully end up with a network that's a little bit more robust,
583:13 - that doesn't rely too heavily on any one particular node,
583:16 - but more generally learns how to approximate a function in general.
583:21 - So that then is a look at some of these techniques
583:24 - that we can use in order to implement a neural network,
583:27 - to get at the idea of taking this input, passing it
583:30 - through these various different layers in order to produce some sort of output.
583:34 - And what we'd like to do now is take those ideas and put them into code.
583:37 - And to do that, there are a number of different machine learning libraries,
583:40 - neural network libraries that we can use that allow us to get access
583:44 - to someone's implementation of back propagation and all of these hidden
583:47 - layers.
583:48 - And one of the most popular, developed by Google, is known as TensorFlow,
583:52 - a library that we can use for quickly creating neural networks and modeling
583:55 - them and running them on some sample data to see what the output is going
583:59 - to be.
584:00 - And before we actually start writing code,
584:01 - we'll go ahead and take a look at TensorFlow's playground, which
584:04 - will be an opportunity for us just to play around with this idea of neural
584:08 - networks in different layers, just to get a sense for what
584:10 - it is that we can do by taking advantage of neural networks.
584:15 - So let's go ahead and go into TensorFlow's playground, which
584:18 - you can go to by visiting that URL from before.
584:20 - And what we're going to do now is we're going to try and learn the decision
584:24 - boundary for this particular output.
584:27 - I want to learn to separate the orange points from the blue points.
584:30 - And I'd like to learn some sort of setting of weights inside of a neural
584:34 - network that will be able to separate those from each other.
584:37 - The features we have access to, our input data,
584:40 - are the x value and the y value, so the two values along each of the two axes.
584:44 - And what I'll do now is I can set particular parameters,
584:47 - like what activation function I would like to use.
584:50 - And I'll just go ahead and press play and see what happens.
584:53 - And what happens here is that you'll see that just
584:56 - by using these two input features, the x value and the y value,
585:00 - with no hidden layers, just take the input, x and y values,
585:04 - and figure out what the decision boundary is.
585:06 - Our neural network learns pretty quickly that in order
585:08 - to divide these two points, we should just use this line.
585:11 - This line acts as a decision boundary that
585:13 - separates this group of points from that group of points,
585:16 - and it does it very well.
585:17 - You can see up here what the loss is.
585:19 - The training loss is 0, meaning we were able to perfectly model separating
585:24 - these two points from each other inside of our training data.
585:27 - So this was a fairly simple case of trying
585:30 - to apply a neural network because the data is very clean.
585:33 - It's very nicely linearly separable.
585:35 - We could just draw a line that separates all of those points from each other.
585:39 - Let's now consider a more complex case.
585:42 - So I'll go ahead and pause the simulation,
585:44 - and we'll go ahead and look at this data set here.
585:47 - This data set is a little bit more complex now.
585:50 - In this data set, we still have blue and orange points
585:52 - that we'd like to separate from each other.
585:54 - But there's no single line that we can draw
585:56 - that is going to be able to figure out how to separate the blue from the orange,
585:59 - because the blue is located in these two quadrants,
586:02 - and the orange is located here and here.
586:04 - It's a more complex function to be able to learn.
586:07 - So let's see what happens.
586:09 - If we just try and predict based on those inputs, the x and y coordinates,
586:13 - what the output should be, I'll press Play.
586:16 - And what you'll notice is that we're not really
586:18 - able to draw much of a conclusion, that we're not
586:21 - able to very cleanly see how we should divide the orange points from the blue
586:25 - points, and you don't see a very clean separation there.
586:30 - So it seems like we don't have enough sophistication inside of our network
586:34 - to be able to model something that is that complex.
586:37 - We need a better model for this neural network.
586:39 - And I'll do that by adding a hidden layer.
586:42 - So now I have a hidden layer that has two neurons inside of it.
586:45 - So I have two inputs that then go to two neurons
586:49 - inside of a hidden layer that then go to our output.
586:52 - And now I'll press Play.
586:54 - And what you'll notice here is that we're able to do slightly better.
586:57 - We're able to now say, all right, these points are definitely blue.
587:00 - These points are definitely orange.
587:02 - We're still struggling a little bit with these points up here, though.
587:05 - And what we can do is we can see for each of these hidden neurons,
587:08 - what is it exactly that these hidden neurons are doing?
587:11 - Each hidden neuron is learning its own decision boundary.
587:15 - And we can see what that boundary is.
587:16 - This first neuron is learning, all right,
587:19 - this line that seems to separate some of the blue points
587:22 - from the rest of the points.
587:24 - This other hidden neuron is learning another line
587:27 - that seems to be separating the orange points in the lower right
587:29 - from the rest of the points.
587:31 - So that's why we're able to figure out these two areas in the bottom region.
587:36 - But we're still not able to perfectly classify all of the points.
587:40 - So let's go ahead and add another neuron.
587:42 - Now we've got three neurons inside of our hidden layer
587:46 - and see what we're able to learn now.
587:48 - All right, well, now we seem to be doing a better job.
587:50 - By learning three different decision boundaries, which
587:53 - each of the three neurons inside of our hidden layer,
587:55 - we're able to much better figure out how to separate these blue points
587:59 - from the orange points.
588:00 - And we can see what each of these hidden neurons is learning.
588:03 - Each one is learning a slightly different decision boundary.
588:06 - And then we're combining those decision boundaries together
588:09 - to figure out what the overall output should be.
588:11 - And then we can try it one more time by adding a fourth neuron there
588:15 - and try learning that.
588:17 - And it seems like now we can do even better at trying
588:19 - to separate the blue points from the orange points.
588:21 - But we were only able to do this by adding a hidden layer,
588:24 - by adding some layer that is learning some other boundaries
588:27 - and combining those boundaries to determine the output.
588:30 - And the strength, the size and thickness of these lines
588:33 - indicate how high these weights are, how important each of these inputs
588:37 - is for making this sort of calculation.
588:40 - And we can do maybe one more simulation.
588:42 - Let's go ahead and try this on a data set that looks like this.
588:46 - Go ahead and get rid of the hidden layer.
588:47 - Here now we're trying to separate the blue points from the orange points
588:51 - where all the blue points are located, again,
588:53 - inside of a circle effectively.
588:54 - So we're not going to be able to learn a line.
588:57 - Notice I press Play.
588:58 - And we're really not able to draw any sort of classification at all
589:01 - because there is no line that cleanly separates the blue points
589:04 - from the orange points.
589:06 - So let's try to solve this by introducing a hidden layer.
589:10 - I'll go ahead and press Play.
589:12 - And all right, with two neurons in a hidden layer,
589:14 - we're able to do a little better because we effectively
589:17 - learned two different decision boundaries.
589:18 - We learned this line here.
589:20 - And we learned this line on the right-hand side.
589:23 - And right now we're just saying, all right, well, if it's in between,
589:25 - we'll call it blue.
589:25 - And if it's outside, we'll call it orange.
589:27 - So not great, but certainly better than before,
589:30 - that we're learning one decision boundary and another.
589:33 - And based on those, we can figure out what the output should be.
589:36 - But let's now go ahead and add a third neuron and see what happens now.
589:42 - I go ahead and train it.
589:43 - And now, using three different decision boundaries
589:46 - that are learned by each of these hidden neurons,
589:48 - we're able to much more accurately model this distinction
589:51 - between blue points and orange points.
589:53 - We're able to figure out maybe with these three decision boundaries,
589:56 - combining them together, you can imagine figuring out
589:58 - what the output should be and how to make that sort of classification.
590:02 - And so the goal here is just to get a sense for having more neurons
590:05 - in these hidden layers allows us to learn more structure in the data,
590:09 - allows us to figure out what the relevant and important decision
590:12 - boundaries are.
590:13 - And then using this backpropagation algorithm,
590:15 - we're able to figure out what the values of these weights should be
590:18 - in order to train this network to be able to classify one category of points
590:23 - away from another category of points instead.
590:26 - And this is ultimately what we're going to be trying
590:28 - to do whenever we're training a neural network.
590:32 - So let's go ahead and actually see an example of this.
590:34 - You'll recall from last time that we had this banknotes file
590:38 - that included information about counterfeit banknotes as opposed
590:41 - to authentic banknotes, where I had four different values for each banknote
590:45 - and then a categorization of whether that banknote is considered
590:48 - to be authentic or a counterfeit note.
590:51 - And what I wanted to do was, based on that input information,
590:55 - figure out some function that could calculate
590:57 - based on the input information what category it belonged to.
591:00 - And what I've written here in banknotes.py
591:02 - is a neural network that will learn just that, a network that
591:05 - learns based on all of the input whether or not
591:08 - we should categorize a banknote as authentic or as counterfeit.
591:13 - The first step is the same as what we saw from last time.
591:15 - I'm really just reading the data in and getting it
591:17 - into an appropriate format.
591:19 - And so this is where more of the writing Python code on your own
591:22 - comes in, in terms of manipulating this data,
591:25 - massaging the data into a format that will be understood
591:28 - by a machine learning library like scikit-learn or like TensorFlow.
591:32 - And so here I separate it into a training and a testing set.
591:35 - And now what I'm doing down below is I'm creating a neural network.
591:40 - Here I'm using TF, which stands for TensorFlow.
591:42 - Up above, I said import TensorFlow as TF, TF just an abbreviation that we'll
591:47 - often use so we don't need to write out TensorFlow
591:49 - every time we want to use anything inside of the library.
591:52 - I'm using TF.keras.
591:55 - Keras is an API, a set of functions that we
591:57 - can use in order to manipulate neural networks inside of TensorFlow.
592:02 - And it turns out there are other machine learning libraries
592:04 - that also use the Keras API.
592:06 - But here I'm saying, all right, go ahead and give me
592:08 - a model that is a sequential model, a sequential neural network,
592:12 - meaning one layer after another.
592:14 - And now I'm going to add to that model what layers
592:17 - I want inside of my neural network.
592:20 - So here I'm saying model.add.
592:22 - Go ahead and add a dense layer.
592:24 - And when we say a dense layer, we mean a layer that is just each
592:28 - of the nodes inside of the layer is going to be connected
592:30 - to each of the nodes from the previous layer.
592:32 - So we have a densely connected layer.
592:35 - This layer is going to have eight units inside of it.
592:38 - So it's going to be a hidden layer inside of a neural network
592:40 - with eight different units, eight artificial neurons, each of which
592:43 - might learn something different.
592:45 - And I just sort of chose eight arbitrarily.
592:47 - You could choose a different number of hidden nodes inside of the layer.
592:50 - And as we saw before, depending on the number of units
592:53 - there are inside of your hidden layer, more units
592:56 - means you can learn more complex functions.
592:58 - So maybe you can more accurately model the training data.
593:01 - But it comes at the cost.
593:02 - More units means more weights that you need to figure out how to update.
593:05 - So it might be more expensive to do that calculation.
593:08 - And you also run the risk of overfitting on the data.
593:10 - If you have too many units and you learn to just
593:13 - overfit on the training data, that's not good either.
593:15 - So there is a balance.
593:16 - And there's often a testing process where you'll train on some data
593:20 - and maybe validate how well you're doing on a separate set of data,
593:23 - often called a validation set, to see, all right, which setting of parameters.
593:26 - How many layers should I have?
593:28 - How many units should be in each layer?
593:29 - Which one of those performs the best on the validation set?
593:32 - So you can do some testing to figure out what these hyper parameters, so called,
593:36 - should be equal to.
593:38 - Next, I specify what the input shape is.
593:41 - Meaning, all right, what does my input look like?
593:43 - My input has four values.
593:44 - And so the input shape is just four, because we have four inputs.
593:48 - And then I specify what the activation function is.
593:51 - And the activation function, again, we can choose.
593:53 - There are a number of different activation functions.
593:55 - Here I'm using relu, which you might recall from earlier.
593:59 - And then I'll add an output layer.
594:01 - So I have my hidden layer.
594:02 - Now I'm adding one more layer that will just have one unit,
594:05 - because all I want to do is predict something
594:07 - like counterfeit build or authentic build.
594:10 - So I just need a single unit.
594:12 - And the activation function I'm going to use here
594:14 - is that sigmoid activation function, which, again,
594:16 - was that S-shaped curve that just gave us a probability of what
594:20 - is the probability that this is a counterfeit build,
594:24 - as opposed to an authentic build.
594:26 - So that, then, is the structure of my neural network,
594:29 - a sequential neural network that has one hidden layer with eight units inside
594:32 - of it, and then one output layer that just has a single unit inside of it.
594:37 - And I can choose how many units there are.
594:38 - I can choose the activation function.
594:40 - Then I'm going to compile this model.
594:44 - TensorFlow gives you a choice of how you would like to optimize the weights.
594:48 - There are various different algorithms for doing that.
594:50 - What type of loss function you want to use.
594:52 - Again, many different options for doing that.
594:54 - And then how I want to evaluate my model, well, I care about accuracy.
594:57 - I care about how many of my points am I able to classify correctly
595:01 - versus not correctly as counterfeit or not counterfeit.
595:04 - And I would like it to report to me how accurate my model is performing.
595:09 - Then, now that I've defined that model, I
595:12 - call model.fit to say go ahead and train the model.
595:15 - Train it on all the training data plus all of the training labels.
595:19 - So labels for each of those pieces of training data.
595:22 - And I'm saying run it for 20 epics, meaning go ahead and go
595:25 - through each of these training points 20 times, effectively.
595:28 - Go through the data 20 times and keep trying to update the weights.
595:31 - If I did it for more, I could train for even longer
595:33 - and maybe get a more accurate result.
595:36 - But then after I fit it on all the data, I'll go ahead and just test it.
595:39 - I'll evaluate my model using model.evaluate built into TensorFlow
595:43 - that is just going to tell me how well do I perform on the testing data.
595:47 - So ultimately, this is just going to give me some numbers that tell me
595:50 - how well we did in this particular case.
595:54 - So now what I'm going to do is go into banknotes and go ahead and run
595:57 - banknotes.py.
595:59 - And what's going to happen now is it's going to read in all of that training
596:02 - data.
596:02 - It's going to generate a neural network with all my inputs,
596:05 - my eight hidden units inside my layer, and then an output unit.
596:10 - And now what it's doing is it's training.
596:11 - It's training 20 times.
596:13 - And each time you can see how my accuracy is increasing on my training data.
596:17 - It starts off the very first time not very accurate,
596:20 - though better than random, something like 79% of the time.
596:23 - It's able to accurately classify one bill from another.
596:26 - But as I keep training, notice this accuracy value
596:29 - improves and improves and improves until after I've trained through all
596:33 - the data points 20 times, it looks like my accuracy is above 99% on the training
596:39 - data.
596:40 - And here's where I tested it on a whole bunch of testing data.
596:43 - And it looks like in this case, I was also like 99.8% accurate.
596:48 - So just using that, I was able to generate a neural network that
596:51 - can detect counterfeit bills from authentic bills based on this input
596:54 - data 99.8% of the time, at least based on this particular testing data.
596:59 - And I might want to test it with more data as well,
597:01 - just to be confident about that.
597:03 - But this is really the value of using a machine learning library like TensorFlow.
597:06 - And there are others available for Python and other languages as well.
597:10 - But all I have to do is define the structure of the network
597:13 - and define the data that I'm going to pass into the network.
597:16 - And then TensorFlow runs the backpropagation algorithm
597:19 - for learning what all of those weights should be,
597:22 - for figuring out how to train this neural network to be
597:24 - able to accurately, as accurately as possible,
597:27 - figure out what the output values should be there as well.
597:31 - And so this then was a look at what it is that neural networks can do just
597:36 - using these sequences of layer after layer after layer.
597:39 - And you can begin to imagine applying these to much more general problems.
597:43 - And one big problem in computing and artificial intelligence
597:45 - more generally is the problem of computer vision.
597:49 - Computer vision is all about computational methods
597:51 - for analyzing and understanding images.
597:54 - You might have pictures that you want the computer to figure out
597:57 - how to deal with, how to process those images
597:59 - and figure out how to produce some sort of useful result out of this.
598:02 - You've seen this in the context of social media websites
598:05 - that are able to look at a photo that contains a whole bunch of faces.
598:08 - And it's able to figure out what's a picture of whom
598:10 - and label those and tag them with appropriate people.
598:13 - This is becoming increasingly relevant as we
598:15 - begin to discuss self-driving cars, that these cars now have cameras.
598:19 - And we would like for the computer to have some sort of algorithm
598:22 - that looks at the image and figures out what color is the light, what cars
598:26 - are around us and in what direction, for example.
598:29 - And so computer vision is all about taking an image and figuring out
598:33 - what sort of computation, what sort of calculation
598:35 - we can do with that image.
598:36 - It's also relevant in the context of something like handwriting recognition.
598:40 - This, what you're looking at, is an example of the MNIST data set.
598:43 - It's a big data set just of handwritten digits
598:46 - that we could use to ideally try and figure out
598:48 - how to predict, given someone's handwriting, given a photo of a digit
598:52 - that they have drawn, can you predict whether it's a 0, 1, 2, 3, 4, 5, 6, 7, 8,
598:57 - or 9, for example.
598:58 - So this sort of handwriting recognition is yet another task
599:01 - that we might want to use computer vision tasks and tools
599:04 - to be able to apply it towards.
599:05 - This might be a task that we might care about.
599:08 - So how, then, can we use neural networks to be
599:11 - able to solve a problem like this?
599:13 - Well, neural networks rely upon some sort of input
599:15 - where that input is just numerical data.
599:17 - We have a whole bunch of units where each one of them
599:19 - just represents some sort of number.
599:22 - And so in the context of something like handwriting recognition
599:24 - or in the context of just an image, you might imagine that an image is really
599:29 - just a grid of pixels, grid of dots where each dot has some sort of color.
599:34 - And in the context of something like handwriting recognition,
599:36 - you might imagine that if you just fill in each of these dots in a particular
599:39 - way, you can generate a 2 or an 8, for example,
599:42 - based on which dots happen to be shaded in and which dots are not.
599:46 - And we can represent each of these pixel values just using numbers.
599:50 - So for a particular pixel, for example, 0 might represent entirely black.
599:55 - Depending on how you're representing color,
599:57 - it's often common to represent color values on a 0 to 255 range
600:02 - so that you can represent a color using 8 bits for a particular value,
600:06 - like how much white is in the image.
600:08 - So 0 might represent all black.
600:10 - 255 might represent entirely white as a pixel.
600:14 - And somewhere in between might represent some shade of gray, for example.
600:18 - But you might imagine not just having a single slider that
600:20 - determines how much white is in the image,
600:22 - but if you had a color image, you might imagine
600:24 - three different numerical values, a red, green, and blue value,
600:28 - where the red value controls how much red is in the image.
600:30 - We have one value for controlling how much green is in the pixel
600:33 - and one value for how much blue is in the pixel as well.
600:36 - And depending on how it is that you set these values of red, green, and blue,
600:40 - you can get a different color.
600:42 - And so any pixel can really be represented, in this case,
600:45 - by three numerical values, a red value, a green value, and a blue value.
600:50 - And if you take a whole bunch of these pixels, assemble them together
600:54 - inside of a grid of pixels, then you really
600:56 - just have a whole bunch of numerical values
600:59 - that you can use in order to perform some sort of prediction task.
601:03 - And so what you might imagine doing is using the same techniques
601:05 - we talked about before, just design a neural network
601:08 - with a lot of inputs, that for each of the pixels,
601:12 - we might have one or three different inputs
601:13 - in the case of a color image, a different input that
601:16 - is just connected to a deep neural network, for example.
601:20 - And this deep neural network might take all of the pixels
601:22 - inside of the image of what digit a person drew.
601:27 - And the output might be like 10 neurons that
601:29 - classify it as a 0, or a 1, or a 2, or a 3,
601:32 - or just tells us in some way what that digit happens to be.
601:36 - Now, there are a couple of drawbacks to this approach.
601:39 - The first drawback to the approach is just the size of this input array,
601:42 - that we have a whole bunch of inputs.
601:44 - If we have a big image that has a lot of different channels,
601:47 - we're looking at a lot of inputs, and therefore a lot of weights
601:50 - that we have to calculate.
601:51 - And a second problem is the fact that by flattening everything
601:55 - into just this structure of all the pixels,
601:58 - we've lost access to a lot of the information
602:00 - about the structure of the image that's relevant,
602:03 - that really, when a person looks at an image,
602:05 - they're looking at particular features of the image.
602:08 - They're looking at curves.
602:09 - They're looking at shapes.
602:09 - They're looking at what things can you identify
602:11 - in different regions of the image, and maybe put those things together
602:14 - in order to get a better picture of what the overall image is about.
602:18 - And by just turning it into pixel values for each of the pixels,
602:22 - sure, you might be able to learn that structure,
602:24 - but it might be challenging in order to do so.
602:26 - It might be helpful to take advantage of the fact
602:28 - that you can use properties of the image itself, the fact
602:31 - that it's structured in a particular way, to be
602:33 - able to improve the way that we learn based on that image too.
602:37 - So in order to figure out how we can train our neural networks to better
602:40 - be able to deal with images, we'll introduce a couple of ideas,
602:43 - a couple of algorithms that we can apply that
602:45 - allow us to take the image and extract some useful information out
602:50 - of that image.
602:50 - And the first idea we'll introduce is the notion of image convolution.
602:54 - And what image convolution is all about is it's about filtering an image,
602:58 - sort of extracting useful or relevant features out of the image.
603:01 - And the way we do that is by applying a particular filter that
603:05 - basically adds the value for every pixel with the values
603:09 - for all of the neighboring pixels to it, according
603:11 - to some sort of kernel matrix, which we'll see in a moment,
603:14 - is going to allow us to weight these pixels in various different ways.
603:17 - And the goal of image convolution, then, is
603:19 - to extract some sort of interesting or useful features out of an image,
603:22 - to be able to take a pixel and, based on its neighboring pixels,
603:26 - maybe predict some sort of valuable information.
603:29 - Something like taking a pixel and looking at its neighboring pixels,
603:32 - you might be able to predict whether or not
603:33 - there's some sort of curve inside the image,
603:35 - or whether it's forming the outline of a particular line or a shape,
603:38 - for example.
603:39 - And that might be useful if you're trying to use
603:42 - all of these various different features to combine them
603:44 - to say something meaningful about an image as a whole.
603:48 - So how, then, does image convolution work?
603:50 - Well, we start with a kernel matrix.
603:52 - And the kernel matrix looks something like this.
603:54 - And the idea of this is that, given a pixel that will be the middle pixel,
603:58 - we're going to multiply each of the neighboring pixels
604:00 - by these values in order to get some sort of result
604:04 - by summing up all the numbers together.
604:06 - So if I take this kernel, which you can think of as a filter
604:09 - that I'm going to apply to the image, and let's say that I take this image.
604:13 - This is a 4 by 4 image.
604:14 - We'll think of it as just a black and white image,
604:16 - where each one is just a single pixel value.
604:19 - So somewhere between 0 and 255, for example.
604:22 - So we have a whole bunch of individual pixel values like this.
604:25 - And what I'd like to do is apply this kernel, this filter, so to speak,
604:30 - to this image.
604:32 - And the way I'll do that is, all right, the kernel is 3 by 3.
604:35 - You can imagine a 5 by 5 kernel or a larger kernel, too.
604:38 - And I'll take it and just first apply it to the first 3
604:41 - by 3 section of the image.
604:43 - And what I'll do is I'll take each of these pixel values,
604:46 - multiply it by its corresponding value in the filter matrix,
604:50 - and add all of the results together.
604:53 - So here, for example, I'll say 10 times 0, plus 20 times negative 1,
604:59 - plus 30 times 0, so on and so forth, doing all of this calculation.
605:03 - And at the end, if I take all these values,
605:05 - multiply them by their corresponding value in the kernel,
605:08 - add the results together, for this particular set of 9 pixels,
605:11 - I get the value of 10, for example.
605:14 - And then what I'll do is I'll slide this 3 by 3 grid, effectively, over.
605:19 - I'll slide the kernel by 1 to look at the next 3 by 3 section.
605:24 - Here, I'm just sliding it over by 1 pixel.
605:26 - But you might imagine a different stride length,
605:28 - or maybe I jump by multiple pixels at a time if you really wanted to.
605:31 - You have different options here.
605:32 - But here, I'm just sliding over, looking at the next 3 by 3 section.
605:35 - And I'll do the same math, 20 times 0, plus 30 times negative 1,
605:40 - plus 40 times 0, plus 20 times negative 1, so on and so forth, plus 30 times 5.
605:45 - And what I end up getting is the number 20.
605:47 - Then you can imagine shifting over to this one, doing the same thing,
605:50 - calculating the number 40, for example, and then doing the same thing here,
605:54 - and calculating a value there as well.
605:56 - And so what we have now is what we'll call a feature map.
606:00 - We have taken this kernel, applied it to each
606:03 - of these various different regions, and what we get
606:06 - is some representation of a filtered version of that image.
606:11 - And so to give a more concrete example of why
606:13 - it is that this kind of thing could be useful,
606:14 - let's take this kernel matrix, for example, which is quite a famous one,
606:18 - that has an 8 in the middle, and then all of the neighboring pixels
606:22 - get a negative 1.
606:23 - And let's imagine we wanted to apply that to a 3
606:26 - by 3 part of an image that looks like this, where all the values are the same.
606:31 - They're all 20, for instance.
606:33 - Well, in this case, if you do 20 times 8, and then subtract 20, subtract 20,
606:38 - subtract 20 for each of the eight neighbors, well, the result of that
606:40 - is you just get that expression, which comes out to be 0.
606:44 - You multiplied 20 by 8, but then you subtracted
606:47 - 20 eight times, according to that particular kernel.
606:50 - The result of all that is just 0.
606:52 - So the takeaway here is that when a lot of the pixels are the same value,
606:56 - we end up getting a value close to 0.
606:59 - If, though, we had something like this, 20 is along this first row,
607:02 - then 50 is in the second row, and 50 is in the third row, well,
607:05 - then when you do this, because it's the same kind of math, 20 times negative 1,
607:08 - 20 times negative 1, so on and so forth, then I get a higher value,
607:12 - a value like 90 in this particular case.
607:15 - And so the more general idea here is that by applying this kernel, negative 1s,
607:21 - 8 in the middle, and then negative 1s, what I get
607:23 - is when this middle value is very different from the neighboring values,
607:29 - like 50 is greater than these 20s, then you'll
607:31 - end up with a value higher than 0.
607:34 - If this number is higher than its neighbors,
607:36 - you end up getting a bigger output.
607:38 - But if this value is the same as all of its neighbors,
607:41 - then you get a lower output, something like 0.
607:43 - And it turns out that this sort of filter can therefore
607:46 - be used in something like detecting edges in an image.
607:49 - Or I want to detect the boundaries between various different objects
607:53 - inside of an image.
607:54 - I might use a filter like this, which is able to tell
607:57 - whether the value of this pixel is different
608:00 - from the values of the neighboring pixel,
608:02 - if it's greater than the values of the pixels that happen to surround it.
608:06 - And so we can use this in terms of image filtering.
608:09 - And so I'll show you an example of that.
608:11 - I have here in filter.py a file that uses Python's image library,
608:17 - or PIL, to do some image filtering.
608:21 - I go ahead and open an image.
608:23 - And then all I'm going to do is apply a kernel to that image.
608:26 - It's going to be a 3 by 3 kernel, same kind of kernel we saw before.
608:30 - And here is the kernel.
608:31 - This is just a list representation of the same matrix
608:34 - that I showed you a moment ago.
608:36 - It's negative 1, negative 1, negative 1.
608:38 - The second row is negative 1, 8, negative 1.
608:40 - And the third row is all negative 1s.
608:43 - And then at the end, I'm going to go ahead and show the filtered image.
608:47 - So if, for example, I go into convolution directory
608:53 - and I open up an image, like bridge.png, this
608:56 - is what an input image might look like, just an image of a bridge over a river.
609:02 - Now I'm going to go ahead and run this filter program on the bridge.
609:07 - And what I get is this image here.
609:10 - Just by taking the original image and applying that filter
609:13 - to each 3 by 3 grid, I've extracted all of the boundaries,
609:17 - all of the edges inside the image that separate one part of the image
609:20 - from another.
609:21 - So here I've got a representation of boundaries
609:24 - between particular parts of the image.
609:26 - And you might imagine that if a machine learning algorithm is
609:28 - trying to learn what an image is of, a filter like this could be pretty useful.
609:33 - Maybe the machine learning algorithm doesn't
609:35 - care about all of the details of the image.
609:38 - It just cares about certain useful features.
609:40 - It cares about particular shapes that are
609:42 - able to help it determine that based on the image,
609:45 - this is going to be a bridge, for example.
609:47 - And so this type of idea of image convolution
609:50 - can allow us to apply filters to images that allow us to extract useful results
609:55 - out of those images, taking an image and extracting its edges, for example.
609:59 - And you might imagine many other filters that
610:01 - could be applied to an image that are able to extract particular values as
610:05 - well.
610:05 - And a filter might have separate kernels for the red values, the green values,
610:08 - and the blue values that are all summed together at the end,
610:11 - such that you could have particular filters looking for,
610:14 - is there red in this part of the image?
610:15 - Are there green in other parts of the image?
610:17 - You can begin to assemble these relevant and useful filters
610:20 - that are able to do these calculations as well.
610:24 - So that then was the idea of image convolution,
610:26 - applying some sort of filter to an image to be
610:29 - able to extract some useful features out of that image.
610:32 - But all the while, these images are still pretty big.
610:35 - There's a lot of pixels involved in the image.
610:38 - And realistically speaking, if you've got a really big image,
610:40 - that poses a couple of problems.
610:42 - One, it means a lot of input going into the neural network.
610:45 - But two, it also means that we really have
610:48 - to care about what's in each particular pixel.
610:50 - Whereas realistically, we often, if you're looking at an image,
610:54 - you don't care whether something is in one particular pixel versus the pixel
610:58 - immediately to the right of it.
610:59 - They're pretty close together.
611:01 - You really just care about whether there's a particular feature
611:03 - in some region of the image.
611:05 - And maybe you don't care about exactly which pixel it happens to be in.
611:09 - And so there's a technique we can use known as pooling.
611:11 - And what pooling is, is it means reducing the size of an input
611:15 - by sampling from regions inside of the input.
611:18 - So we're going to take a big image and turn it into a smaller image
611:22 - by using pooling.
611:23 - And in particular, one of the most popular types of pooling
611:25 - is called max pooling.
611:27 - And what max pooling does is it pools just
611:29 - by choosing the maximum value in a particular region.
611:33 - So for example, let's imagine I had this 4 by 4 image.
611:36 - But I wanted to reduce its dimensions.
611:38 - I wanted to make it a smaller image so that I have fewer inputs to work with.
611:42 - Well, what I could do is I could apply a 2 by 2 max pool,
611:47 - where the idea would be that I'm going to first look at this 2 by 2 region
611:50 - and say, what is the maximum value in that region?
611:53 - Well, it's the number 50.
611:54 - So we'll go ahead and just use the number 50.
611:57 - And then we'll look at this 2 by 2 region.
611:58 - What is the maximum value here?
612:00 - It's 110, so that's going to be my value.
612:02 - Likewise here, the maximum value looks like 20.
612:04 - Go ahead and put that there.
612:05 - Then for this last region, the maximum value was 40.
612:09 - So we'll go ahead and use that.
612:10 - And what I have now is a smaller representation
612:14 - of this same original image that I obtained just
612:17 - by picking the maximum value from each of these regions.
612:21 - So again, the advantages here are now I only
612:25 - have to deal with a 2 by 2 input instead of a 4 by 4.
612:27 - And you can imagine shrinking the size of an image even more.
612:31 - But in addition to that, I'm now able to make my analysis
612:36 - independent of whether a particular value was in this pixel or this pixel.
612:40 - I don't care if the 50 was here or here.
612:42 - As long as it was generally in this region,
612:45 - I'll still get access to that value.
612:47 - So it makes our algorithms a little bit more robust as well.
612:51 - So that then is pooling, taking the size of the image,
612:54 - reducing it a little bit by just sampling from particular regions
612:58 - inside of the image.
612:59 - And now we can put all of these ideas together, pooling, image convolution,
613:03 - and neural networks all together into another type of neural network
613:06 - called a convolutional neural network, or a CNN, which
613:10 - is a neural network that uses this convolution step usually
613:14 - in the context of analyzing an image, for example.
613:18 - And so the way that a convolutional neural network works
613:20 - is that we start with some sort of input image, some grid of pixels.
613:24 - But rather than immediately put that into the neural network layers
613:27 - that we've seen before, we'll start by applying a convolution step,
613:31 - where the convolution step involves applying
613:33 - some number of different image filters to our original image
613:36 - in order to get what we call a feature map, the result of applying
613:40 - some filter to an image.
613:41 - And we could do this once, but in general, we'll do this multiple times,
613:45 - getting a whole bunch of different feature maps, each of which
613:48 - might extract some different relevant feature out of the image,
613:51 - some different important characteristic of the image
613:53 - that we might care about using in order to calculate
613:56 - what the result should be.
613:58 - And in the same way that when we train neural networks,
614:01 - we can train neural networks to learn the weights between particular units
614:04 - inside of the neural networks, we can also train neural networks
614:07 - to learn what those filters should be, what
614:09 - the values of the filters should be in order
614:11 - to get the most useful, most relevant information out of the original image
614:15 - just by figuring out what setting of those filter values,
614:18 - the values inside of that kernel, results in minimizing the loss function,
614:23 - minimizing how poorly our hypothesis actually
614:26 - performs in figuring out the classification of a particular image,
614:30 - for example.
614:32 - So we first apply this convolution step, get a whole bunch
614:34 - of these various different feature maps.
614:36 - But these feature maps are quite large.
614:38 - There's a lot of pixel values that happen to be here.
614:41 - And so a logical next step to take is a pooling step,
614:44 - where we reduce the size of these images by using max pooling,
614:48 - for example, extracting the maximum value from any particular region.
614:51 - There are other pooling methods that exist as well,
614:53 - depending on the situation.
614:54 - You could use something like average pooling,
614:57 - where instead of taking the maximum value from a region,
614:59 - you take the average value from a region, which has its uses as well.
615:03 - But in effect, what pooling will do is it will take these feature maps
615:07 - and reduce their dimensions so that we end up
615:09 - with smaller grids with fewer pixels.
615:12 - And this then is going to be easier for us to deal with.
615:14 - It's going to mean fewer inputs that we have to worry about.
615:16 - And it's also going to mean we're more resilient,
615:19 - more robust against potential movements of particular values,
615:22 - just by one pixel, when ultimately we really
615:24 - don't care about those one-pixel differences that
615:27 - might arise in the original image.
615:30 - And now, after we've done this pooling step,
615:32 - now we have a whole bunch of values that we can then flatten out and just put
615:36 - into a more traditional neural network.
615:38 - So we go ahead and flatten it, and then we
615:40 - end up with a traditional neural network that
615:42 - has one input for each of these values in each of these resulting feature
615:46 - maps after we do the convolution and after we do the pooling step.
615:51 - And so this then is the general structure of a convolutional network.
615:54 - We begin with the image, apply convolution, apply pooling,
615:58 - flatten the results, and then put that into a more traditional neural
616:01 - network that might itself have hidden layers.
616:03 - You can have deep convolutional networks that
616:05 - have hidden layers in between this flattened layer and the eventual output
616:09 - to be able to calculate various different features of those values.
616:13 - But this then can help us to be able to use convolution and pooling
616:17 - to use our knowledge about the structure of an image
616:19 - to be able to get better results, to be able to train our networks faster
616:23 - in order to better capture particular parts of the image.
616:27 - And there's no reason necessarily why you can only use these steps once.
616:30 - In fact, in practice, you'll often use convolution and pooling
616:33 - multiple times in multiple different steps.
616:36 - See, what you might imagine doing is starting with an image,
616:39 - first applying convolution to get a whole bunch of maps,
616:42 - then applying pooling, then applying convolution again,
616:45 - because these maps are still pretty big.
616:48 - You can apply convolution to try and extract relevant features out
616:51 - of this result. Then take those results, apply pooling
616:55 - in order to reduce their dimensions, and then take that
616:57 - and feed it into a neural network that maybe has fewer inputs.
617:01 - So here I have two different convolution and pooling steps.
617:04 - I do convolution and pooling once, and then I do convolution and pooling
617:08 - a second time, each time extracting useful features
617:11 - from the layer before it, each time using pooling
617:14 - to reduce the dimensions of what you're ultimately looking at.
617:17 - And the goal now of this sort of model is that in each of these steps,
617:21 - you can begin to learn different types of features of the original image.
617:25 - That maybe in the first step, you learn very low level features.
617:28 - Just learn and look for features like edges and curves and shapes,
617:31 - because based on pixels and their neighboring values, you can figure out,
617:36 - all right, what are the edges?
617:37 - What are the curves?
617:38 - What are the various different shapes that might be present there?
617:41 - But then once you have a mapping that just represents
617:43 - where the edges and curves and shapes happen to be,
617:46 - you can imagine applying the same sort of process again
617:49 - to begin to look for higher level features, look for objects,
617:51 - maybe look for people's eyes and facial recognition, for example.
617:55 - Maybe look for more complex shapes like the curves on a particular number
617:59 - if you're trying to recognize a digit in a handwriting recognition sort
618:02 - of scenario.
618:03 - And then after all of that, now that you have these results that
618:06 - represent these higher level features, you
618:08 - can pass them into a neural network, which is really just a deep neural
618:12 - network that looks like this, where you might imagine
618:14 - making a binary classification or classifying into multiple categories
618:18 - or performing various different tasks on this sort of model.
618:23 - So convolutional neural networks can be quite powerful and quite popular
618:26 - when it comes towards trying to analyze images.
618:28 - We don't strictly need them.
618:29 - We could have just used a vanilla neural network
618:32 - that just operates with layer after layer, as we've seen before.
618:35 - But these convolutional neural networks can be quite helpful,
618:38 - in particular, because of the way they model
618:40 - the way a human might look at an image, that instead of a human looking
618:43 - at every single pixel simultaneously and trying to convolve all of them
618:46 - by multiplying them together, you might imagine
618:48 - that what convolution is really doing is looking
618:50 - at various different regions of the image
618:53 - and extracting relevant information and features out
618:56 - of those parts of the image, the same way
618:57 - that a human might have visual receptors that
618:59 - are looking at particular parts of what they see
619:02 - and using those combining them to figure out
619:04 - what meaning they can draw from all of those various different inputs.
619:09 - And so you might imagine applying this to a situation
619:11 - like handwriting recognition.
619:13 - So we'll go ahead and see an example of that now,
619:16 - where I'll go ahead and open up handwriting.py.
619:19 - Again, what we do here is we first import TensorFlow.
619:23 - And then TensorFlow, it turns out, has a few data sets
619:26 - that are built into the library that you can just immediately access.
619:30 - And one of the most famous data sets in machine learning
619:33 - is the MNIST data set, which is just a data
619:35 - set of a whole bunch of samples of people's handwritten digits.
619:38 - I showed you a slide of that a little while ago.
619:41 - And what we can do is just immediately access
619:43 - that data set which is built into the library
619:45 - so that if I want to do something like train
619:47 - on a whole bunch of handwritten digits, I can just use the data set
619:50 - that is provided to me.
619:52 - Of course, if I had my own data set of handwritten images,
619:55 - I can apply the same idea.
619:56 - I'd first just need to take those images and turn them
619:59 - into an array of pixels, because that's the way that these
620:02 - are going to be formatted.
620:03 - They're going to be formatted as, effectively,
620:05 - an array of individual pixels.
620:08 - Now there's a bit of reshaping I need to do,
620:10 - just turning the data into a format that I
620:12 - can put into my convolutional neural network.
620:14 - So this is doing things like taking all the values
620:17 - and dividing them by 255.
620:19 - If you remember, these color values tend to range from 0 to 255.
620:22 - So I can divide them by 255 just to put them
620:25 - into 0 to 1 range, which might be a little bit easier to train on.
620:29 - And then doing various other modifications to the data
620:32 - just to get it into a nice usable format.
620:34 - But here's the interesting and important part.
620:37 - Here is where I create the convolutional neural network, the CNN,
620:41 - where here I'm saying, go ahead and use a sequential model.
620:44 - And before I could use model.add to say add a layer, add a layer, add a layer,
620:47 - another way I could define it is just by passing as input
620:50 - to this sequential neural network a list of all of the layers that I want.
620:55 - And so here, the very first layer in my model is a convolution layer,
621:00 - where I'm first going to apply convolution to my image.
621:03 - I'm going to use 13 different filters.
621:05 - So my model is going to learn 32, rather, 32 different filters
621:09 - that I would like to learn on the input image, where each filter is going
621:13 - to be a 3 by 3 kernel.
621:15 - So we saw those 3 by 3 kernels before, where
621:17 - we could multiply each value in a 3 by 3 grid by a value,
621:20 - multiply it, and add all the results together.
621:22 - So here, I'm going to learn 32 different of these 3 by 3 filters.
621:27 - I can, again, specify my activation function.
621:29 - And I specify what my input shape is.
621:32 - My input shape in the banknotes case was just 4.
621:34 - I had 4 inputs.
621:36 - My input shape here is going to be 28, 28, 1,
621:40 - because for each of these handwritten digits,
621:42 - it turns out that the MNIST data set organizes their data.
621:46 - Each image is a 28 by 28 pixel grid.
621:49 - So we're going to have a 28 by 28 pixel grid.
621:51 - And each one of those images only has one channel value.
621:54 - These handwritten digits are just black and white.
621:56 - So there's just a single color value representing
621:59 - how much black or how much white.
622:00 - You might imagine that in a color image, if you
622:02 - were doing this sort of thing, you might have three different channels,
622:05 - a red, a green, and a blue channel, for example.
622:07 - But in the case of just handwriting recognition,
622:09 - recognizing a digit, we're just going to use a single value for,
622:12 - like, shaded in or not shaded in.
622:14 - And it might range, but it's just a single color value.
622:18 - And that, then, is the very first layer of our neural network,
622:22 - a convolutional layer that will take the input
622:24 - and learn a whole bunch of different filters
622:26 - that we can apply to the input to extract meaningful features.
622:30 - Next step is going to be a max pooling layer, also built right
622:34 - into TensorFlow, where this is going to be a layer that
622:37 - is going to use a pool size of 2 by 2, meaning
622:40 - we're going to look at 2 by 2 regions inside of the image
622:43 - and just extract the maximum value.
622:45 - Again, we've seen why this can be helpful.
622:47 - It'll help to reduce the size of our input.
622:49 - And once we've done that, we'll go ahead and flatten all of the units
622:53 - just into a single layer that we can then
622:55 - pass into the rest of the neural network.
622:57 - And now, here's the rest of the neural network.
623:00 - Here, I'm saying, let's add a hidden layer to my neural network
623:02 - with 128 units, so a whole bunch of hidden units
623:06 - inside of the hidden layer.
623:07 - And just to prevent overfitting, I can add a dropout to that.
623:11 - Say, you know what, when you're training, randomly dropout half
623:14 - of the nodes from this hidden layer just to make sure
623:16 - we don't become over-reliant on any particular node,
623:19 - we begin to really generalize and stop ourselves from overfitting.
623:22 - So TensorFlow allows us, just by adding a single line,
623:25 - to add dropout into our model as well, such that when it's training,
623:28 - it will perform this dropout step in order
623:31 - to help make sure that we don't overfit on this particular data.
623:36 - And then finally, I add an output layer.
623:38 - The output layer is going to have 10 units, one for each category
623:42 - that I would like to classify digits into, so 0 through 9,
623:45 - 10 different categories.
623:47 - And the activation function I'm going to use here
623:49 - is called the softmax activation function.
623:52 - And in short, what the softmax activation function is going to do
623:55 - is it's going to take the output and turn it
623:57 - into a probability distribution.
623:59 - So ultimately, it's going to tell me, what
624:01 - did we estimate the probability is that this
624:03 - is a 2 versus a 3 versus a 4.
624:06 - And so it will turn it into that probability distribution for me.
624:10 - Next up, I'll go ahead and compile my model
624:12 - and fit it on all of my training data.
624:15 - And then I can evaluate how well the neural network performs.
624:19 - And then I've added to my Python program,
624:21 - if I've provided a command line argument like the name of a file,
624:24 - I'm going to go ahead and save the model to a file.
624:27 - And so this can be quite useful too.
624:29 - Once you've done the training step, which could take some time in terms
624:31 - of taking all the time, going through the data,
624:34 - running back propagation with gradient descent to be able to say, all right,
624:38 - how should we adjust the weight to this particular model?
624:40 - You end up calculating values for these weights,
624:42 - calculating values for these filters.
624:44 - You'd like to remember that information so you can use it later.
624:47 - And so TensorFlow allows us to just save a model to a file,
624:51 - such that later, if we want to use the model we've learned,
624:53 - use the weights that we've learned to make some sort of new prediction,
624:57 - we can just use the model that already exists.
625:00 - So what we're doing here is after we've done all the calculation,
625:03 - we go ahead and save the model to a file, such
625:07 - that we can use it a little bit later.
625:09 - So for example, if I go into digits, I'm going to run handwriting.py.
625:17 - I won't save it this time.
625:18 - We'll just run it and go ahead and see what happens.
625:20 - What will happen is we need to go through the model in order
625:22 - to train on all of these samples of handwritten digits.
625:26 - The MNIST data set gives us thousands and thousands
625:28 - of sample handwritten digits in the same format
625:31 - that we can use in order to train.
625:33 - And so now what you're seeing is this training process.
625:35 - And unlike the banknotes case, where there was much fewer data points,
625:39 - the data was very, very simple, here this data is more complex
625:42 - and this training process takes time.
625:44 - And so this is another one of those cases where when training neural networks,
625:48 - this is why computational power is so important that oftentimes you
625:52 - see people wanting to use sophisticated GPUs in order
625:55 - to more efficiently be able to do this sort of neural network training.
625:59 - It also speaks to the reason why more data can be helpful.
626:02 - The more sample data points you have, the better
626:04 - you can begin to do this training.
626:06 - So here we're going through 60,000 different samples of handwritten digits.
626:10 - And I said we're going to go through them 10 times.
626:13 - We're going to go through the data set 10 times, training each time,
626:16 - hopefully improving upon our weights with every time
626:18 - we run through this data set.
626:20 - And we can see over here on the right what the accuracy is each time
626:23 - we go ahead and run this model, that the first time it
626:26 - looks like we got an accuracy of about 92% of the digits
626:29 - correct based on this training set.
626:31 - We increased that to 96% or 97%.
626:34 - And every time we run this, we're going to see hopefully the accuracy
626:38 - improve as we continue to try and use that gradient descent,
626:41 - that process of trying to run the algorithm,
626:43 - to minimize the loss that we get in order to more accurately
626:46 - predict what the output should be.
626:49 - And what this process is doing is it's learning not only the weights,
626:52 - but it's learning the features to use, the kernel matrix
626:55 - to use when performing that convolution step.
626:57 - Because this is a convolutional neural network,
626:59 - where I'm first performing those convolutions
627:02 - and then doing the more traditional neural network structure,
627:05 - this is going to learn all of those individual steps as well.
627:09 - And so here we see the TensorFlow provides me with some very nice output,
627:12 - telling me about how many seconds are left with each of these training
627:15 - runs that allows me to see just how well we're doing.
627:18 - So we'll go ahead and see how this network performs.
627:21 - It looks like we've gone through the data set seven times.
627:23 - We're going through it an eighth time now.
627:26 - And at this point, the accuracy is pretty high.
627:28 - We saw we went from 92% up to 97%.
627:32 - Now it looks like 98%.
627:33 - And at this point, it seems like things are starting to level out.
627:36 - It's probably a limit to how accurate we can ultimately be
627:39 - without running the risk of overfitting.
627:41 - Of course, with enough nodes, you would just
627:42 - memorize the input and overfit upon them.
627:44 - But we'd like to avoid doing that.
627:46 - And Dropout will help us with this.
627:48 - But now we see we're almost done finishing our training step.
627:53 - We're at 55,000.
627:55 - All right, we finished training.
627:56 - And now it's going to go ahead and test for us on 10,000 samples.
628:00 - And it looks like on the testing set, we were at 98.8% accurate.
628:04 - So we ended up doing pretty well, it seems,
628:06 - on this testing set to see how accurately can we
628:10 - predict these handwritten digits.
628:13 - And so what we could do then is actually test it out.
628:15 - I've written a program called Recognition.py using PyGame.
628:19 - If you pass it a model that's been trained,
628:21 - and I pre-trained an example model using this input data, what we can do
628:26 - is see whether or not we've been able to train
628:27 - this convolutional neural network to be able to predict handwriting,
628:31 - for example.
628:32 - So I can try, just like drawing a handwritten digit.
628:35 - I'll go ahead and draw the number 2, for example.
628:39 - So there's my number 2.
628:40 - Again, this is messy.
628:41 - If you tried to imagine, how would you write a program with just ifs
628:44 - and thens to be able to do this sort of calculation,
628:46 - it would be tricky to do so.
628:48 - But here I'll press Classify, and all right,
628:50 - it seems I was able to correctly classify that what I drew was the number 2.
628:53 - I'll go ahead and reset it, try it again.
628:55 - We'll draw an 8, for example.
628:57 - So here is an 8.
629:00 - Press Classify.
629:01 - And all right, it predicts that the digit that I drew was an 8.
629:05 - And the key here is this really begins to show the power of what
629:08 - the neural network is doing, somehow looking
629:09 - at various different features of these different pixels,
629:12 - figuring out what the relevant features are,
629:14 - and figuring out how to combine them to get a classification.
629:17 - And this would be a difficult task to provide explicit instructions
629:21 - to the computer on how to do, to use a whole bunch of ifs ands
629:24 - to process all these pixel values to figure out
629:27 - what the handwritten digit is.
629:28 - Everyone's going to draw their 8s a little bit differently.
629:31 - If I drew the 8 again, it would look a little bit different.
629:33 - And yet, ideally, we want to train a network to be robust enough
629:37 - so that it begins to learn these patterns on its own.
629:40 - All I said was, here is the structure of the network,
629:43 - and here is the data on which to train the network.
629:45 - And the network learning algorithm just tries
629:47 - to figure out what is the optimal set of weights, what
629:50 - is the optimal set of filters to use them in order
629:52 - to be able to accurately classify a digit into one category or another.
629:57 - Just going to show the power of these sorts of convolutional neural
630:00 - networks.
630:02 - And so that then was a look at how we can use convolutional neural networks
630:06 - to begin to solve problems with regards to computer vision,
630:10 - the ability to take an image and begin to analyze it.
630:13 - So this is the type of analysis you might imagine
630:15 - that's happening in self-driving cars that
630:18 - are able to figure out what filters to apply to an image
630:21 - to understand what it is that the computer is looking at,
630:24 - or the same type of idea that might be applied
630:26 - to facial recognition and social media to be
630:28 - able to determine how to recognize faces in an image as well.
630:31 - You can imagine a neural network that instead of classifying
630:34 - into one of 10 different digits could instead classify like,
630:38 - is this person A or is this person B, trying
630:40 - to tell those people apart just based on convolution.
630:45 - And so now what we'll take a look at is yet another type of neural network
630:48 - that can be quite popular for certain types of tasks.
630:50 - But to do so, we'll try to generalize and think about our neural network
630:54 - a little bit more abstractly.
630:55 - That here we have a sample deep neural network
630:58 - where we have this input layer, a whole bunch of different hidden layers
631:01 - that are performing certain types of calculations,
631:04 - and then an output layer here that just generates some sort of output
631:07 - that we care about calculating.
631:09 - But we could imagine representing this a little more simply like this.
631:14 - Here is just a more abstract representation of our neural network.
631:17 - We have some input that might be like a vector
631:20 - of a whole bunch of different values as our input.
631:22 - That gets passed into a network that performs some sort of calculation
631:25 - or computation, and that network produces some sort of output.
631:29 - That output might be a single value.
631:31 - It might be a whole bunch of different values.
631:33 - But this is the general structure of the neural network that we've seen.
631:36 - There is some sort of input that gets fed into the network.
631:39 - And using that input, the network calculates what the output should be.
631:43 - And this sort of model for a neural network
631:46 - is what we might call a feed-forward neural network.
631:49 - Feed-forward neural networks have connections only in one direction.
631:52 - They move from one layer to the next layer to the layer after that,
631:56 - such that the inputs pass through various different hidden layers
631:59 - and then ultimately produce some sort of output.
632:02 - So feed-forward neural networks were very helpful
632:05 - for solving these types of classification problems that we saw before.
632:08 - We have a whole bunch of input.
632:10 - We want to learn what setting of weights will allow us
632:12 - to calculate the output effectively.
632:14 - But there are some limitations on feed-forward neural networks
632:16 - that we'll see in a moment.
632:17 - In particular, the input needs to be of a fixed shape,
632:20 - like a fixed number of neurons are in the input layer.
632:23 - And there's a fixed shape for the output,
632:24 - like a fixed number of neurons in the output layer.
632:28 - And that has some limitations of its own.
632:30 - And a possible solution to this, and we'll
632:33 - see examples of the types of problems we can solve for this in just a second,
632:36 - is instead of just a feed-forward neural network,
632:38 - where there are only connections in one direction from left to right
632:41 - effectively across the network, we could also imagine a recurrent neural
632:46 - network, where a recurrent neural network generates
632:48 - output that gets fed back into itself as input for future runs of that network.
632:54 - So whereas in a traditional neural network,
632:57 - we have inputs that get fed into the network, that get fed into the output.
633:00 - And the only thing that determines the output
633:02 - is based on the original input and based on the calculation
633:05 - we do inside of the network itself.
633:08 - This goes in contrast with a recurrent neural network,
633:11 - where in a recurrent neural network, you can imagine output from the network
633:14 - feeding back to itself into the network again as input
633:18 - for the next time you do the calculations inside of the network.
633:22 - What this allows is it allows the network to maintain some sort of state,
633:27 - to store some sort of information that can be used on future runs of the network.
633:33 - Previously, the network just defined some weights,
633:35 - and we passed inputs through the network, and it generated outputs.
633:38 - But the network wasn't saving any information based on those inputs
633:42 - to be able to remember for future iterations or for future runs.
633:45 - What a recurrent neural network will let us do
633:47 - is let the network store information that gets passed back in as input
633:51 - to the network again the next time we try and perform some sort of action.
633:55 - And this is particularly helpful when dealing with sequences of data.
634:00 - So we'll see a real world example of this right now, actually.
634:02 - Microsoft has developed an AI known as the caption bot.
634:07 - And what the caption bot does is it says,
634:09 - I can understand the content of any photograph,
634:11 - and I'll try to describe it as well as any human.
634:13 - I'll analyze your photo, but I won't store it or share it.
634:16 - And so what Microsoft's caption bot seems to be claiming to do
634:19 - is it can take an image and figure out what's in the image
634:22 - and just give us a caption to describe it.
634:25 - So let's try it out.
634:26 - Here, for example, is an image of Harvard Square.
634:29 - It's some people walking in front of one of the buildings at Harvard Square.
634:32 - I'll go ahead and take the URL for that image,
634:34 - and I'll paste it into caption bot and just press Go.
634:39 - So caption bot is analyzing the image, and then it
634:41 - says, I think it's a group of people walking
634:44 - in front of a building, which seems amazing.
634:46 - The AI is able to look at this image and figure out what's in the image.
634:50 - And the important thing to recognize here
634:52 - is that this is no longer just a classification task.
634:55 - We saw being able to classify images with a convolutional neural network
634:58 - where the job was take the image and then figure out,
635:01 - is it a 0 or a 1 or a 2, or is it this person's face or that person's face?
635:05 - What seems to be happening here is the input is an image,
635:09 - and we know how to get networks to take input of images,
635:12 - but the output is text.
635:14 - It's a sentence.
635:15 - It's a phrase, like a group of people walking in front of a building.
635:19 - And this would seem to pose a challenge for our more traditional feed-forward
635:23 - neural networks, for the reason being that in traditional neural networks,
635:28 - we just have a fixed-size input and a fixed-size output.
635:31 - There are a certain number of neurons in the input to our neural network
635:35 - and a certain number of outputs for our neural network,
635:37 - and then some calculation that goes on in between.
635:39 - But the size of the inputs and the number of values in the input
635:42 - and the number of values in the output, those
635:44 - are always going to be fixed based on the structure of the neural network.
635:49 - And that makes it difficult to imagine how a neural network could take an image
635:52 - like this and say it's a group of people walking in front of the building
635:56 - because the output is text, like it's a sequence of words.
636:00 - Now, it might be possible for a neural network
636:02 - to output one word, one word you could represent as a vector of values,
636:06 - and you can imagine ways of doing that.
636:08 - Next time, we'll talk a little bit more about AI
636:10 - as it relates to language and language processing.
636:13 - But a sequence of words is much more challenging
636:15 - because depending on the image, you might imagine the output
636:18 - is a different number of words.
636:19 - We could have sequences of different lengths,
636:22 - and somehow we still want to be able to generate the appropriate output.
636:26 - And so the strategy here is to use a recurrent neural network,
636:30 - a neural network that can feed its own output back into itself
636:34 - as input for the next time.
636:36 - And this allows us to do what we call a one-to-many relationship
636:40 - for inputs to outputs, that in vanilla, more traditional neural networks,
636:43 - these are what we might consider to be one-to-one neural networks.
636:47 - You pass in one set of values as input.
636:49 - You get one vector of values as the output.
636:53 - But in this case, we want to pass in one value as input, the image,
636:56 - and we want to get a sequence, many values as output,
636:59 - where each value is like one of these words that
637:02 - gets produced by this particular algorithm.
637:05 - And so the way we might do this is we might imagine starting
637:08 - by providing input, the image, into our neural network.
637:11 - And the neural network is going to generate output,
637:13 - but the output is not going to be the whole sequence of words,
637:16 - because we can't represent the whole sequence of words
637:18 - using just a fixed set of neurons.
637:20 - Instead, the output is just going to be the first word.
637:24 - We're going to train the network to output what the first word of the caption
637:27 - should be.
637:28 - And you could imagine that Microsoft has trained this
637:30 - by running a whole bunch of training samples through the AI,
637:33 - giving it a whole bunch of pictures and what the appropriate caption was,
637:36 - and having the AI begin to learn from that.
637:39 - But now, because the network generates output
637:42 - that can be fed back into itself, you could
637:44 - imagine the output of the network being fed back into the same network.
637:47 - This here looks like a separate network, but it's really
637:50 - the same network that's just getting different input,
637:53 - that this network's output gets fed back into itself,
637:57 - but it's going to generate another output.
637:59 - And that other output is going to be the second word in the caption.
638:04 - And this recurrent neural network then, this network
638:06 - is going to generate other output that can be fed back into itself
638:09 - to generate yet another word, fed back into itself
638:12 - to generate another word.
638:13 - And so recurrent neural networks allow us to represent this one-to-many
638:18 - structure.
638:18 - You provide one image as input, and the neural network
638:21 - can pass data into the next run of the network, and then again and again,
638:25 - such that you could run the network multiple times,
638:28 - each time generating a different output still based on that original input.
638:33 - And this is where recurrent neural networks become particularly useful
638:37 - when dealing with sequences of inputs or outputs.
638:40 - And my output is a sequence of words, and since I can't very easily
638:43 - represent outputting an entire sequence of words,
638:45 - I'll instead output that sequence one word at a time
638:49 - by allowing my network to pass information about what still
638:52 - needs to be said about the photo into the next stage of running the network.
638:56 - So you could run the network multiple times, the same network
638:59 - with the same weights, just getting different input each time.
639:02 - First, getting input from the image, and then getting input from the network
639:06 - itself as additional information about what additionally
639:09 - needs to be given in a particular caption, for example.
639:13 - So this then is a one-to-many relationship inside of a recurrent neural
639:17 - network, but it turns out there are other models that we can use,
639:20 - other ways we can try and use recurrent neural networks
639:23 - to be able to represent data that might be stored in other forms as well.
639:26 - We saw how we could use neural networks in order to analyze images
639:29 - in the context of convolutional neural networks that take an image,
639:33 - figure out various different properties of the image,
639:35 - and are able to draw some sort of conclusion based on that.
639:38 - But you might imagine that something like YouTube,
639:40 - they need to be able to do a lot of learning based on video.
639:44 - They need to look through videos to detect if they're like copyright
639:46 - violations, or they need to be able to look through videos to maybe identify
639:50 - what particular items are inside of the video, for example.
639:53 - And video, you might imagine, is much more difficult to put in
639:56 - as input to a neural network, because whereas an image, you could just
640:00 - treat each pixel as a different value, videos are sequences.
640:03 - They're sequences of images, and each sequence might be of different length.
640:07 - And so it might be challenging to represent that entire video
640:10 - as a single vector of values that you could pass in to a neural network.
640:15 - And so here, too, recurrent neural networks
640:17 - can be a valuable solution for trying to solve this type of problem.
640:21 - Then instead of just passing in a single input into our neural network,
640:25 - we could pass in the input one frame at a time, you might imagine.
640:28 - First, taking the first frame of the video, passing it into the network,
640:32 - and then maybe not having the network output anything at all yet.
640:35 - Let it take in another input, and this time, pass it into the network.
640:40 - But the network gets information from the last time
640:43 - we provided an input into the network.
640:45 - Then we pass in a third input, and then a fourth input,
640:47 - where each time, what the network gets is it gets the most recent input,
640:51 - like each frame of the video.
640:53 - But it also gets information the network processed
640:56 - from all of the previous iterations.
640:58 - So on frame number four, you end up getting the input for frame number four
641:02 - plus information the network has calculated from the first three frames.
641:06 - And using all of that data combined, this recurrent neural network
641:10 - can begin to learn how to extract patterns from a sequence of data
641:14 - as well.
641:14 - And so you might imagine, if you want to classify a video
641:17 - into a number of different genres, like an educational video,
641:20 - or a music video, or different types of videos,
641:22 - that's a classification task, where you want
641:24 - to take as input each of the frames of the video,
641:27 - and you want to output something like what it is, what category
641:31 - that it happens to belong to.
641:33 - And you can imagine doing this sort of thing,
641:35 - this sort of many-to-one learning, any time your input is a sequence.
641:39 - And so input is a sequence in the context of video.
641:43 - It could be in the context of, like, if someone has typed a message
641:45 - and you want to be able to categorize that message,
641:47 - like if you're trying to take a movie review and trying to classify it
641:51 - as, is it a positive review or a negative review?
641:54 - That input is a sequence of words, and the output
641:56 - is a classification, positive or negative.
641:59 - There, too, a recurrent neural network might
642:01 - be helpful for analyzing sequences of words.
642:04 - And they're quite popular when it comes to dealing with language.
642:07 - Could even be used for spoken language as well,
642:09 - that spoken language is an audio waveform that
642:12 - can be segmented into distinct chunks.
642:14 - And each of those could be passed in as an input
642:17 - into a recurrent neural network to be able to classify someone's voice,
642:21 - for instance.
642:21 - If you want to do voice recognition to say, is this one person or is this
642:24 - another, here are also cases where you might
642:27 - want this many-to-one architecture for a recurrent neural network.
642:32 - And then as one final problem, just to take
642:34 - a look at in terms of what we can do with these sorts of networks,
642:37 - imagine what Google Translate is doing.
642:39 - So what Google Translate is doing is it's taking some text written
642:42 - in one language and converting it into text written in some other language,
642:47 - for example, where now this input is a sequence of data.
642:50 - It's a sequence of words.
642:52 - And the output is a sequence of words as well.
642:54 - It's also a sequence.
642:55 - So here we want effectively a many-to-many relationship.
642:58 - Our input is a sequence and our output is a sequence as well.
643:02 - And it's not quite going to work to just say,
643:05 - take each word in the input and translate it into a word in the output.
643:09 - Because ultimately, different languages put their words in different orders.
643:13 - And maybe one language uses two words for something,
643:15 - whereas another language only uses one.
643:17 - So we really want some way to take this information, this input,
643:22 - encode it somehow, and use that encoding to generate
643:25 - what the output ultimately should be.
643:27 - And this has been one of the big advancements in automated translation
643:30 - technology, is the ability to use the neural networks to do this instead
643:34 - of older, more traditional methods.
643:35 - And this has improved accuracy dramatically.
643:37 - And the way you might imagine doing this is, again,
643:40 - using a recurrent neural network with multiple inputs and multiple outputs.
643:44 - We start by passing in all the input.
643:45 - Input goes into the network.
643:47 - Another input, like another word, goes into the network.
643:49 - And we do this multiple times, like once for each word in the input
643:53 - that I'm trying to translate.
643:54 - And only after all of that is done does the network now
643:58 - start to generate output, like the first word of the translated sentence,
644:01 - and the next word of the translated sentence, so on and so forth,
644:04 - where each time the network passes information to itself
644:08 - by allowing for this model of giving some sort of state
644:12 - from one run in the network to the next run,
644:15 - assembling information about all the inputs,
644:17 - and then passing in information about which part of the output
644:20 - in order to generate next.
644:22 - And there are a number of different types of these sorts of recurrent neural
644:25 - networks.
644:26 - One of the most popular is known as the long short-term memory neural network,
644:29 - otherwise known as LSTM.
644:31 - But in general, these types of networks can be very, very powerful whenever
644:35 - we're dealing with sequences, whether those are sequences of images
644:38 - or especially sequences of words when it comes
644:40 - towards dealing with natural language.
644:43 - And so that then were just some of the different types
644:46 - of neural networks that can be used to do all sorts of different computations.
644:49 - And these are incredibly versatile tools that
644:52 - can be applied to a number of different domains.
644:54 - We only looked at a couple of the most popular types of neural networks
644:57 - from more traditional feed-forward neural networks, convolutional neural
645:00 - networks, and recurrent neural networks.
645:02 - But there are other types as well.
645:04 - There are adversarial networks where networks compete with each other
645:07 - to try and be able to generate new types of data,
645:10 - as well as other networks that can solve other tasks based
645:13 - on what they happen to be structured and adapted for.
645:15 - And these are very powerful tools in machine learning
645:18 - from being able to very easily learn based on some set of input data
645:21 - and to be able to, therefore, figure out how to calculate some function
645:25 - from inputs to outputs, whether it's input to some sort of classification
645:28 - like analyzing an image and getting a digit or machine translation
645:32 - where the input is in one language and the output is in another.
645:34 - These tools have a lot of applications for machine learning more generally.
645:39 - Next time, we'll look at machine learning and AI in particular
645:42 - in the context of natural language.
645:44 - We talked a little bit about this today, but looking at how it is that our AI
645:47 - can begin to understand natural language and can
645:50 - begin to be able to analyze and do useful tasks with regards
645:53 - to human language, which turns out to be a challenging and interesting task.
645:57 - So we'll see you next time.
646:00 - And welcome back, everybody, to our final class
646:21 - in an introduction to artificial intelligence with Python.
646:24 - Now, so far in this class, we've been taking problems
646:26 - that we want to solve intelligently and framing them
646:29 - in ways that computers are going to be able to make sense of.
646:31 - We've been taking problems and framing them as search problems
646:34 - or constraint satisfaction problems or optimization problems, for example.
646:38 - In essence, we have been trying to communicate
646:40 - about problems in ways that our computer is going to be able to understand.
646:45 - Today, the goal is going to be to get computers
646:47 - to understand the way you and I communicate naturally
646:50 - via our own natural languages, languages like English.
646:53 - But natural language contains a lot of nuance and complexity
646:57 - that's going to make it challenging for computers to be able to understand.
647:00 - So we'll need to explore some new tools and some new techniques
647:04 - to allow computers to make sense of natural language.
647:07 - So what is it exactly that we're trying to get computers to do?
647:10 - Well, they all fall under this general heading of natural language processing,
647:14 - getting computers to work with natural language.
647:17 - And these tasks include tasks like automatic summarization.
647:20 - Given a long text, can we train the computer
647:23 - to be able to come up with a shorter representation of it?
647:26 - Information extraction, getting the computer
647:28 - to pull out relevant facts or details out of some text.
647:31 - Machine translation, like Google Translate,
647:33 - translating some text from one language into another language.
647:36 - Question answering, if you've ever asked a question to your phone
647:39 - or had a conversation with an AI chatbot where you provide some text
647:43 - to the computer, the computer is able to understand that text
647:47 - and then generate some text in response.
647:50 - Text classification, where we provide some text to the computer
647:53 - and the computer assigns it a label, positive or negative,
647:56 - inbox or spam, for example.
647:58 - And there are several other kinds of tasks
648:00 - that all fall under this heading of natural language processing.
648:03 - But before we take a look at how the computer might
648:06 - try to solve these kinds of tasks, it might be useful for us
648:09 - to think about language in general.
648:11 - What are the kinds of challenges that we might need to deal with
648:14 - as we start to think about language and getting a computer
648:17 - to be able to understand it?
648:18 - So one part of language that we'll need to consider
648:21 - is the syntax of language.
648:22 - Syntax is all about the structure of language.
648:25 - Language is composed of individual words.
648:27 - And those words are composed together in some kind of structured whole.
648:31 - And if our computer is going to be able to understand language,
648:33 - it's going to need to understand something about that structure.
648:37 - So let's take a couple of examples.
648:39 - Here, for instance, is a sentence.
648:40 - Just before 9 o'clock, Sherlock Holmes stepped briskly into the room.
648:44 - That sentence is made up of words.
648:46 - And those words together form a structured whole.
648:49 - This is syntactically valid as a sentence.
648:52 - But we could take some of those same words,
648:55 - rearrange them, and come up with a sentence that is not syntactically valid.
648:59 - Here, for example, just before Sherlock Holmes 9 o'clock stepped briskly
649:03 - the room is still composed of valid words.
649:06 - But they're not in any kind of logical whole.
649:08 - This is not a syntactically well-formed sentence.
649:12 - Another interesting challenge is that some sentences will
649:15 - have multiple possible valid structures.
649:18 - Here's a sentence, for example.
649:20 - I saw the man on the mountain with a telescope.
649:23 - And here, this is a valid sentence.
649:25 - But it actually has two different possible structures
649:28 - that lend themselves to two different interpretations
649:31 - and two different meanings.
649:32 - Maybe I, the one doing the seeing, am the one with the telescope.
649:36 - Or maybe the man on the mountain is the one with the telescope.
649:39 - And so natural language is ambiguous.
649:41 - Sometimes the same sentence can be interpreted in multiple ways.
649:44 - And that's something that we'll need to think about as well.
649:47 - And this lends itself to another problem within language
649:50 - that we'll need to think about, which is semantics.
649:52 - While syntax is all about the structure of language,
649:55 - semantics is about the meaning of language.
649:57 - It's not enough for a computer just to know
649:59 - that a sentence is well-structured if it doesn't
650:02 - know what that sentence means.
650:04 - And so semantics is going to concern itself
650:06 - with the meaning of words and the meaning of sentences.
650:09 - So if we go back to that same sentence as before,
650:11 - just before 9 o'clock, Sherlock Holmes stepped briskly into the room,
650:16 - I could come up with another sentence, say the sentence,
650:19 - a few minutes before 9, Sherlock Holmes walked quickly into the room.
650:23 - And those are two different sentences with some of the words the same
650:26 - and some of the words different.
650:28 - But the two sentences have essentially the same meaning.
650:31 - And so ideally, whatever model we build, we'll
650:33 - be able to understand that these two sentences, while different,
650:36 - mean something very similar.
650:38 - Some syntactically well-formed sentences don't mean anything at all.
650:42 - A famous example from linguist Noam Chomsky
650:44 - is the sentence, colorless green ideas sleep furiously.
650:48 - This is a syntactically, structurally well-formed sentence.
650:52 - We've got adjectives modifying a noun, ideas.
650:55 - We've got a verb and an adverb in the correct positions.
650:58 - But when taken as a whole, the sentence doesn't really mean anything.
651:01 - And so if our computers are going to be able to work with natural language
651:05 - and perform tasks in natural language processing,
651:07 - these are some concerns we'll need to think about.
651:09 - We'll need to be thinking about syntax.
651:11 - And we'll need to be thinking about semantics.
651:14 - So how could we go about trying to teach a computer how
651:17 - to understand the structure of natural language?
651:20 - Well, one approach we might take is by starting
651:22 - by thinking about the rules of natural language.
651:25 - Our natural languages have rules.
651:27 - In English, for example, nouns tend to come before verbs.
651:30 - Nouns can be modified by adjectives, for example.
651:33 - And so if only we could formalize those rules,
651:36 - then we could give those rules to a computer,
651:38 - and the computer would be able to make sense of them and understand them.
651:41 - And so let's try to do exactly that.
651:43 - We're going to try to define a formal grammar.
651:46 - Where a formal grammar is some system of rules
651:49 - for generating sentences in a language.
651:52 - This is going to be a rule-based approach to natural language processing.
651:56 - We're going to give the computer some rules that we know about language
651:59 - and have the computer use those rules to make
652:01 - sense of the structure of language.
652:04 - And there are a number of different types of formal grammars.
652:06 - Each one of them has slightly different use cases.
652:09 - But today, we're going to focus specifically
652:11 - on one kind of grammar known as a context-free grammar.
652:14 - So how does the context-free grammar work?
652:16 - Well, here is a sentence that we might want a computer to generate.
652:19 - She saw the city.
652:21 - And we're going to call each of these words a terminal symbol.
652:24 - A terminal symbol, because once our computer has generated the word,
652:27 - there's nothing else for it to generate.
652:29 - Once it's generated the sentence, the computer is done.
652:32 - We're going to associate each of these terminal symbols
652:35 - with a non-terminal symbol that generates it.
652:39 - So here we've got n, which stands for noun, like she or city.
652:43 - We've got v as a non-terminal symbol, which stands for a verb.
652:46 - And then we have d, which stands for determiner.
652:48 - A determiner is a word like the or a or an in English, for example.
652:52 - So each of these non-terminal symbols can generate the terminal symbols
652:57 - that we ultimately care about generating.
652:59 - But how do we know, or how does the computer
653:01 - know which non-terminal symbols are associated with which terminal symbols?
653:05 - Well, to do that, we need some kind of rule.
653:08 - Here are some what we call rewriting rules that
653:11 - have a non-terminal symbol on the left-hand side of an arrow.
653:14 - And on the right side is what that non-terminal symbol can be replaced with.
653:18 - So here we're saying the non-terminal symbol n, again,
653:21 - which stands for noun, could be replaced by any of these options separated
653:25 - by vertical bars.
653:26 - n could be replaced by she or city or car or hairy.
653:30 - d for determiner could be replaced by the a or an and so forth.
653:34 - Each of these non-terminal symbols could be replaced by any of these words.
653:40 - We can also have non-terminal symbols that
653:42 - are replaced by other non-terminal symbols.
653:45 - Here is an interesting rule, np arrow n bar dn.
653:50 - So what does that mean?
653:52 - Well, np stands for a noun phrase.
653:55 - Sometimes when we have a noun phrase in a sentence,
653:57 - it's not just a single word, it could be multiple words.
654:00 - And so here we're saying a noun phrase could be just a noun,
654:04 - or it could be a determiner followed by a noun.
654:07 - So we might have a noun phrase that's just a noun, like she,
654:11 - that's a noun phrase.
654:12 - Or we could have a noun phrase that's multiple words, something
654:15 - like the city also acts as a noun phrase.
654:18 - But in this case, it's composed of two words, a determiner, the,
654:22 - and a noun city.
654:24 - We could do the same for verb phrases.
654:26 - A verb phrase, or VP, might be just a verb,
654:30 - or it might be a verb followed by a noun phrase.
654:33 - So we could have a verb phrase that's just a single word,
654:35 - like the word walked, or we could have a verb phrase
654:38 - that is an entire phrase, something like saw the city,
654:42 - as an entire verb phrase.
654:45 - A sentence, meanwhile, we might then define as a noun phrase
654:48 - followed by a verb phrase.
654:50 - And so this would allow us to generate a sentence like she saw the city,
654:54 - an entire sentence made up of a noun phrase, which is just the word she,
654:59 - and then a verb phrase, which is saw the city, saw which is a verb,
655:03 - and then the city, which itself is also a noun phrase.
655:07 - And so if we could give these rules to a computer explaining to it
655:11 - what non-terminal symbols could be replaced by what other symbols,
655:15 - then a computer could take a sentence and begin
655:17 - to understand the structure of that sentence.
655:20 - And so let's take a look at an example of how we might do that.
655:23 - And to do that, we're going to use a Python library called NLTK,
655:26 - or the Natural Language Toolkit, which we'll see a couple of times today.
655:30 - It contains a lot of helpful features and functions that we can use
655:33 - for trying to deal with and process natural language.
655:36 - So here we'll take a look at how we can use NLTK in order
655:39 - to parse a context-free grammar.
655:42 - So let's go ahead and open up cfg0.py, cfg standing for context-free grammar.
655:47 - And what you'll see in this file is that I first import NLTK, the Natural
655:51 - Language Toolkit.
655:53 - And the first thing I do is define a context-free grammar,
655:57 - saying that a sentence is a noun phrase followed by a verb phrase.
656:00 - I'm defining what a noun phrase is, defining what a verb phrase is,
656:03 - and then giving some examples of what I can
656:05 - do with these non-terminal symbols, D for determiner, N for noun,
656:10 - and V for verb.
656:12 - We're going to use NLTK to parse that grammar.
656:15 - Then we'll ask the user for some input in the form of a sentence
656:18 - and split it into words.
656:20 - And then we'll use this context-free grammar parser
656:23 - to try to parse that sentence and print out the resulting syntax tree.
656:28 - So let's take a look at an example.
656:30 - We'll go ahead and go into my cfg directory, and we'll run cfg0.py.
656:35 - And here I'm asked to type in a sentence.
656:37 - Let's say I type in she walked.
656:40 - And when I do that, I see that she walked is a valid sentence,
656:43 - where she is a noun phrase, and walked is the corresponding verb phrase.
656:49 - I could try to do this with a more complex sentence too.
656:52 - I could do something like she saw the city.
656:55 - And here we see that she is the noun phrase,
656:58 - and then saw the city is the entire verb phrase that makes up this sentence.
657:04 - So that was a very simple grammar.
657:06 - Let's take a look at a slightly more complex grammar.
657:08 - Here is cfg1.py, where a sentence is still a noun phrase followed
657:13 - by a verb phrase, but I've added some other possible non-terminal symbols too.
657:17 - I have AP for adjective phrase and PP for prepositional phrase.
657:22 - And we specified that we could have an adjective phrase
657:25 - before a noun phrase or a prepositional phrase after a noun, for example.
657:30 - So lots of additional ways that we might try to structure a sentence
657:34 - and interpret and parse one of those resulting sentences.
657:37 - So let's see that one in action.
657:39 - We'll go ahead and run cfg1.py with this new grammar.
657:43 - And we'll try a sentence like she saw the wide street.
657:48 - Here, Python's NLTK is able to parse that sentence
657:51 - and identify that she saw the wide street has this particular structure,
657:55 - a sentence with a noun phrase and a verb phrase,
657:58 - where that verb phrase has a noun phrase that within it
658:00 - contains an adjective.
658:02 - And so it's able to get some sense for what the structure of this language
658:06 - actually is.
658:07 - Let's try another example.
658:09 - Let's say she saw the dog with the binoculars.
658:14 - And we'll try that sentence.
658:16 - And here, we get one possible syntax tree,
658:19 - she saw the dog with the binoculars.
658:21 - But notice that this sentence is actually a little bit
658:24 - ambiguous in our own natural language.
658:26 - Who has the binoculars?
658:27 - Is it she who has the binoculars or the dog who has the binoculars?
658:31 - And NLTK is able to identify both possible structures for the sentence.
658:35 - In this case, the dog with the binoculars
658:38 - is an entire noun phrase.
658:40 - It's all underneath this NP here.
658:42 - So it's the dog that has the binoculars.
658:45 - But we also got an alternative parse tree,
658:48 - where the dog is just the noun phrase.
658:52 - And with the binoculars is a prepositional phrase modifying saw.
658:57 - So she saw the dog and she used the binoculars in order
659:01 - to see the dog as well.
659:03 - So this allows us to get a sense for the structure of natural language.
659:06 - But it relies on us writing all of these rules.
659:08 - And it would take a lot of effort to write all of the rules for any possible
659:12 - sentence that someone might write or say in the English language.
659:15 - Language is complicated.
659:16 - And as a result, there are going to be some very complex rules.
659:20 - So what else might we try?
659:21 - We might try to take a statistical lens towards approaching
659:24 - this problem of natural language processing.
659:27 - If we were able to give the computer a lot of existing data of sentences
659:31 - written in the English language, what could we try to learn from that data?
659:35 - Well, it might be difficult to try and interpret long pieces of text all
659:38 - at once.
659:39 - So instead, what we might want to do is break up that longer text
659:42 - into smaller pieces of information instead.
659:45 - In particular, we might try to create n-grams out of a longer sequence of text.
659:50 - An n-gram is just some contiguous sequence of n items from a sample of text.
659:55 - It might be n characters in a row or n words in a row, for example.
659:59 - So let's take a passage from Sherlock Holmes.
660:02 - And let's look for all of the trigrams.
660:04 - A trigram is an n-gram where n is equal to 3.
660:07 - So in this case, we're looking for sequences of three words in a row.
660:11 - So the trigrams here would be phrases like how often have.
660:15 - That's three words in a row.
660:16 - Often have I is another trigram.
660:18 - Have I said, I said to, said to you, to you that.
660:22 - These are all trigrams, sequences of three words that appear in sequence.
660:27 - And if we could give the computer a large corpus of text
660:30 - and have it pull out all of the trigrams in this case,
660:33 - it could get a sense for what sequences of three words
660:36 - tend to appear next to each other in our own natural language
660:40 - and, as a result, get some sense for what the structure of the language
660:45 - actually is.
660:46 - So let's take a look at an example of that.
660:48 - How can we use NLTK to try to get access to information about n-grams?
660:55 - So here, we're going to open up ngrams.py.
660:58 - And this is a Python program that's going to load a corpus of data, just
661:02 - some text files, into our computer's memory.
661:05 - And then we're going to use NLTK's ngrams function, which
661:08 - is going to go through the corpus of text, pulling out all of the ngrams
661:12 - for a particular value of n.
661:14 - And then, by using Python's counter class,
661:17 - we're going to figure out what are the most common ngrams inside
661:21 - of this entire corpus of text.
661:24 - And we're going to need a data set in order to do this.
661:26 - And I've prepared a data set of some of the stories of Sherlock Holmes.
661:29 - So it's just a bunch of text files.
661:32 - A lot of words for it to analyze.
661:33 - And as a result, we'll get a sense for what sequences of two words or three
661:38 - words that tend to be most common in natural language.
661:42 - So let's give this a try.
661:43 - We'll go into my ngrams directory.
661:45 - And we'll run ngrams.py.
661:47 - We'll try an n value of 2.
661:49 - So we're looking for sequences of two words in a row.
661:51 - And we'll use our corpus of stories from Sherlock Holmes.
661:55 - And when we run this program, we get a list of the most common ngrams
661:59 - where n is equal to 2, otherwise known as a bigram.
662:02 - So the most common one is of the.
662:04 - That's a sequence of two words that appears quite frequently
662:07 - in natural language.
662:08 - Then in the.
662:09 - And it was.
662:10 - These are all common sequences of two words that appear in a row.
662:14 - Let's instead now try running ngrams with n equal to 3.
662:18 - Let's get all of the trigrams and see what we get.
662:21 - And now we see the most common trigrams are it was a.
662:25 - One of the.
662:26 - I think that.
662:27 - These are all sequences of three words that appear quite frequently.
662:32 - And we were able to do this essentially via a process known as tokenization.
662:36 - Tokenization is the process of splitting a sequence of characters
662:39 - into pieces.
662:40 - In this case, we're splitting a long sequence of text into individual words
662:44 - and then looking at sequences of those words
662:46 - to get a sense for the structure of natural language.
662:49 - So once we've done this, once we've done the tokenization,
662:52 - once we've built up our corpus of ngrams, what
662:55 - can we do with that information?
662:57 - So the one thing that we might try is we could build a Markov chain,
663:00 - which you might recall from when we talked about probability.
663:02 - Recall that a Markov chain is some sequence of values
663:05 - where we can predict one value based on the values that came before it.
663:10 - And as a result, if we know all of the common ngrams in the English language,
663:14 - what words tend to be associated with what other words in sequence,
663:18 - we can use that to predict what word might come next in a sequence of words.
663:23 - And so we could build a Markov chain for language
663:26 - in order to try to generate natural language that
663:28 - follows the same statistical patterns as some input data.
663:33 - So let's take a look at that and build a Markov chain for natural language.
663:37 - And as input, I'm going to use the works of William Shakespeare.
663:41 - So here I have a file Shakespeare.txt, which
663:45 - is just a bunch of the works of William Shakespeare.
663:48 - It's a long text file, so plenty of data to analyze.
663:51 - And here in generator.py, I'm using a third party Python library
663:55 - in order to do this analysis.
663:57 - We're going to read in the sample of text,
664:00 - and then we're going to train a Markov model based on that text.
664:03 - And then we're going to have the Markov chain generate some sentences.
664:07 - We're going to generate a sentence that doesn't appear in the original text,
664:11 - but that follows the same statistical patterns that's generating it
664:14 - based on the ngrams trying to predict what word is likely to come next
664:19 - that we would expect based on those statistical patterns.
664:23 - So we'll go ahead and go into our Markov directory,
664:27 - run this generator with the works of William Shakespeare's input.
664:31 - And what we're going to get are five new sentences, where
664:34 - these sentences are not necessarily sentences
664:37 - from the original input text itself, but just that
664:39 - follow the same statistical patterns.
664:41 - It's predicting what word is likely to come next based on the input data
664:45 - that we've seen and the types of words that
664:47 - tend to appear in sequence there too.
664:50 - And so we're able to generate these sentences.
664:53 - Of course, so far, there's no guarantee that any of the sentences that
664:56 - are generated actually mean anything or make any sense.
664:59 - They just happen to follow the statistical patterns
665:01 - that our computer is already aware of.
665:04 - So we'll return to this issue of how to generate text
665:06 - in perhaps a more accurate or more meaningful way a little bit later.
665:09 - So let's now turn our attention to a slightly different problem,
665:12 - and that's the problem of text classification.
665:15 - Text classification is the problem where we have some text
665:18 - and we want to put that text into some kind of category.
665:21 - We want to apply some sort of label to that text.
665:24 - And this kind of problem shows up in a wide variety of places.
665:27 - A commonplace might be your email inbox, for example.
665:29 - You get an email and you want your computer
665:31 - to be able to identify whether the email belongs in your inbox
665:35 - or whether it should be filtered out into spam.
665:37 - So we need to classify the text.
665:39 - Is it a good email or is it spam?
665:42 - Another common use case is sentiment analysis.
665:44 - We might want to know whether the sentiment of some text
665:47 - is positive or negative.
665:50 - And so how might we do that?
665:51 - This comes up in situations like product reviews,
665:53 - where we might have a bunch of reviews for a product on some website.
665:57 - My grandson loved it so much fun.
665:58 - Product broke after a few days.
666:00 - One of the best games I've played in a long time and kind of cheap
666:03 - and flimsy, not worth it.
666:05 - Here's some example sentences that you might see on a product review website.
666:09 - And you and I could pretty easily look at this list of product reviews
666:12 - and decide which ones are positive and which ones are negative.
666:15 - We might say the first one and the third one,
666:17 - those seem like positive sentiment messages.
666:20 - But the second one and the fourth one seem like negative sentiment messages.
666:24 - But how did we know that?
666:25 - And how could we train a computer to be able to figure that out as well?
666:29 - Well, you might have clued your eye in on particular key words,
666:32 - where those particular words tend to mean something positive or negative.
666:36 - So you might have identified words like loved and fun and best
666:40 - tend to be associated with positive messages.
666:42 - And words like broke and cheap and flimsy
666:45 - tend to be associated with negative messages.
666:48 - So if only we could train a computer to be able to learn
666:51 - what words tend to be associated with positive versus negative messages,
666:55 - then maybe we could train a computer to do this kind of sentiment analysis
666:59 - as well.
667:00 - So we're going to try to do just that.
667:01 - We're going to use a model known as the bag of words model, which
667:05 - is a model that represents text as just an unordered collection of words.
667:09 - For the purpose of this model, we're not
667:11 - going to worry about the sequence and the ordering of the words,
667:13 - which word came first, second, or third.
667:15 - We're just going to treat the text as a collection of words
667:18 - in no particular order.
667:19 - And we're losing information there, right?
667:21 - The order of words is important.
667:22 - And we'll come back to that a little bit later.
667:24 - But for now, to simplify our model, it'll
667:26 - help us tremendously just to think about text
667:29 - as some unordered collection of words.
667:32 - And in particular, we're going to use the bag of words model
667:35 - to build something known as a naive Bayes classifier.
667:38 - So what is a naive Bayes classifier?
667:40 - Well, it's a tool that's going to allow us to classify text based on Bayes
667:43 - rule, again, which you might remember from when we talked about probability.
667:47 - Bayes rule says that the probability of B given A
667:51 - is equal to the probability of A given B multiplied
667:54 - by the probability of B divided by the probability of A.
667:59 - So how are we going to use this rule to be able to analyze text?
668:03 - Well, what are we interested in?
668:04 - We're interested in the probability that a message has
668:07 - a positive sentiment and the probability that a message has
668:10 - a negative sentiment, which I'm here for simplicity
668:12 - going to represent just with these emoji, happy face and frown face,
668:16 - as positive and negative sentiment.
668:18 - And so if I had a review, something like my grandson loved it,
668:22 - then what I'm interested in is not just the probability
668:25 - that a message has positive sentiment, but the conditional probability
668:29 - that a message has positive sentiment given
668:32 - that this is the message my grandson loved it.
668:35 - But how do I go about calculating this value, the probability
668:38 - that the message is positive given that the review is this sequence of words?
668:42 - Well, here's where the bag of words model comes in.
668:45 - Rather than treat this review as a string of a sequence of words in order,
668:49 - we're just going to treat it as an unordered collection of words.
668:52 - We're going to try to calculate the probability that the review is positive
668:56 - given that all of these words, my grandson loved it,
668:59 - are in the review in no particular order, just
669:02 - this unordered collection of words.
669:05 - And this is a conditional probability, which we can then apply Bayes rule
669:09 - to try to make sense of.
669:11 - And so according to Bayes rule, this conditional probability is equal to what?
669:16 - It's equal to the probability that all of these four words
669:19 - are in the review given that the review is positive multiplied
669:23 - by the probability that the review is positive divided by the probability
669:27 - that all of these words happen to be in the review.
669:30 - So this is the value now that we're going to try to calculate.
669:33 - Now, one thing you might notice is that the denominator here,
669:36 - the probability that all of these words appear in the review,
669:40 - doesn't actually depend on whether or not
669:42 - we're looking at the positive sentiment or negative sentiment case.
669:45 - So we can actually get rid of this denominator.
669:47 - We don't need to calculate it.
669:48 - We can just say that this probability is proportional to the numerator.
669:53 - And then at the end, we're going to need to normalize the probability
669:56 - distribution to make sure that all of the values sum up to the value 1.
670:00 - So now, how do we calculate this value?
670:03 - Well, this is the probability of all of these words given positive times
670:08 - probability of positive.
670:09 - And that, by the definition of joint probability,
670:12 - is just one big joint probability, the probability
670:15 - that all of these things are the case, that it's a positive review,
670:18 - and that all four of these words are in the review.
670:22 - But still, it's not entirely obvious how we calculate that value.
670:26 - And here is where we need to make one more assumption.
670:28 - And this is where the naive part of naive Bayes comes in.
670:32 - We're going to make the assumption that all of the words
670:34 - are independent of each other.
670:36 - And by that, I mean that if the word grandson is in the review,
670:40 - that doesn't change the probability that the word loved is in the review
670:43 - or that the word it is in the review, for example.
670:46 - And in practice, this assumption might not be true.
670:48 - It's almost certainly the case that the probability of words
670:51 - do depend on each other.
670:52 - But it's going to simplify our analysis and still give us reasonably good
670:56 - results just to assume that the words are independent of each other
670:59 - and they only depend on whether it's positive or negative.
671:03 - You might, for example, expect the word loved
671:06 - to appear more often in a positive review than in a negative review.
671:10 - So what does that mean?
671:11 - Well, if we make this assumption, then we
671:13 - can say that this value, the probability we're interested in,
671:16 - is not directly proportional to, but it's naively proportional to this value.
671:22 - The probability that the review is positive times the probability
671:26 - that my is in the review, given that it's positive,
671:29 - times the probability that grandson is in the review,
671:31 - given that it's positive, and so on for the other two words that
671:34 - happen to be in this review.
671:36 - And now this value, which looks a little more complex,
671:39 - is actually a value that we can calculate pretty easily.
671:42 - So how are we going to estimate the probability that the review is positive?
671:46 - Well, if we have some training data, some example data of example reviews
671:50 - where each one has already been labeled as positive or negative,
671:53 - then we can estimate the probability that a review is positive
671:56 - just by counting the number of positive samples
671:58 - and dividing by the total number of samples that we have in our training
672:02 - data.
672:03 - And for the conditional probabilities, the probability of loved,
672:06 - given that it's positive, well, that's going
672:08 - to be the number of positive samples with loved in it
672:11 - divided by the total number of positive samples.
672:15 - So let's take a look at an actual example to see how
672:17 - we could try to calculate these values.
672:19 - Here I've put together some sample data.
672:21 - The way to interpret the sample data is that based on the training data,
672:24 - 49% of the reviews are positive, 51% are negative.
672:29 - And then over here in this table, we have some conditional probabilities.
672:33 - And then we have if the review is positive,
672:35 - then there is a 30% chance that my appears in it.
672:38 - And if the review is negative, there is a 20% chance that my appears in it.
672:42 - And based on our training data among the positive reviews,
672:45 - 1% of them contain the word grandson.
672:48 - And among the negative reviews, 2% contain the word grandson.
672:52 - So using this data, let's try to calculate this value,
672:56 - the value we're interested in.
672:57 - And to do that, we'll need to multiply all of these values together.
673:02 - The probability of positive, and then all
673:04 - of these positive conditional probabilities.
673:06 - And when we do that, we get some value.
673:09 - And then we can do the same thing for the negative case.
673:12 - We're going to do the same thing, take the probability that it's negative,
673:15 - multiply it by all of these conditional probabilities,
673:18 - and we're going to get some other value.
673:20 - And now these values don't sum to one.
673:22 - They're not a probability distribution yet.
673:24 - But I can normalize them and get some values.
673:27 - And that tells me that we're going to predict that my grandson loved it.
673:31 - We think there's a 68% chance, probability 0.68,
673:35 - that that is a positive sentiment review, and 0.32 probability
673:40 - that it's a negative review.
673:42 - So what problems might we run into here?
673:44 - What could potentially go wrong when doing this kind of analysis
673:47 - in order to analyze whether text has a positive or negative sentiment?
673:51 - Well, a couple of problems might arise.
673:53 - One problem might be, what if the word grandson never
673:57 - appears for any of the positive reviews?
674:00 - If that were the case, then when we try to calculate the value,
674:03 - the probability that we think the review is positive,
674:06 - we're going to multiply all these values together,
674:08 - and we're just going to get 0 for the positive case,
674:11 - because we're all going to ultimately multiply by that 0 value.
674:14 - And so we're going to say that we think there is no chance
674:17 - that the review is positive because it contains the word grandson.
674:20 - And in our training data, we've never seen the word grandson
674:23 - appear in a positive sentiment message before.
674:27 - And that's probably not the right analysis,
674:29 - because in cases of rare words, it might be the case
674:32 - that in nowhere in our training data did we ever
674:34 - see the word grandson appear in a message that has positive sentiment.
674:38 - So what can we do to solve this problem?
674:40 - Well, one thing we'll often do is some kind of additive smoothing,
674:43 - where we add some value alpha to each value in our distribution
674:46 - just to smooth out the data a little bit.
674:48 - And a common form of this is Laplace smoothing,
674:50 - where we add 1 to each value in our distribution.
674:53 - In essence, we pretend we've seen each value one more time
674:56 - than we actually have.
674:58 - So if we've never seen the word grandson for a positive review,
675:01 - we pretend we've seen it once.
675:02 - If we've seen it once, we pretend we've seen it twice,
675:04 - just to avoid the possibility that we might multiply by 0 and as a result,
675:09 - get some results we don't want in our analysis.
675:12 - So let's see what this looks like in practice.
675:14 - Let's try to do some naive Bayes classification in order
675:18 - to classify text as either positive or negative.
675:22 - We'll take a look at sentiment.py.
675:25 - And what this is going to do is load some sample data into memory,
675:28 - some examples of positive reviews and negative reviews.
675:32 - And then we're going to train a naive Bayes classifier
675:35 - on all of this training data, training data that
675:39 - includes all of the words we see in positive reviews
675:42 - and all of the words we see in negative reviews.
675:44 - And then we're going to try to classify some input.
675:48 - And so we're going to do this based on a corpus of data.
675:50 - I have some example positive reviews.
675:52 - Here are some positive reviews.
675:53 - It was great, so much fun, for example.
675:56 - And then some negative reviews, not worth it, kind of cheap.
675:59 - These are some examples of negative reviews.
676:02 - So now let's try to run this classifier and see
676:04 - how it would classify particular text as either positive or negative.
676:09 - We'll go ahead and run our sentiment analysis on this corpus.
676:14 - And we need to provide it with a review.
676:16 - So I'll say something like, I enjoyed it.
676:19 - And we see that the classifier says there is about a 0.92 probability
676:23 - that we think that this particular review is positive.
676:27 - Let's try something negative.
676:28 - We'll try kind of overpriced.
676:31 - And we see that there is a 0.96 probability
676:34 - now that we think that this particular review is negative.
676:37 - And so our naive Bayes classifier has learned what kinds of words
676:40 - tend to appear in positive reviews and what kinds of words
676:43 - tend to appear in negative reviews.
676:45 - And as a result of that, we've been able to design a classifier that
676:49 - can predict whether a particular review is positive or negative.
676:54 - And so this definitely is a useful tool that we can use
676:56 - to try and make some predictions.
676:58 - But we had to make some assumptions in order to get there.
677:01 - So what if we want to now try to build some more sophisticated models,
677:04 - use some tools from machine learning to try and take
677:07 - better advantage of language data to be able to draw
677:09 - more accurate conclusions and solve new kinds of tasks
677:12 - and new kinds of problems?
677:13 - Well, we've seen a couple of times now that when we want to take some data
677:17 - and take some input, put it in a way that the computer is
677:19 - going to be able to make sense of, it can be helpful to take that data
677:22 - and turn it into numbers, ultimately.
677:25 - And so what we might want to try to do is come up
677:27 - with some word representation, some way to take a word
677:30 - and translate its meaning into numbers.
677:33 - Because, for example, if we wanted to use a neural network
677:35 - to be able to process language, give our language to a neural network
677:39 - and have it make some predictions or perform some analysis there,
677:42 - a neural network takes its input and produces its output
677:45 - a vector of values, a vector of numbers.
677:48 - And so what we might want to do is take our data
677:51 - and somehow take words and convert them into some kind
677:54 - of numeric representation.
677:56 - So how might we do that?
677:57 - How might we take words and turn them into numbers?
678:01 - Let's take a look at an example.
678:03 - Here's a sentence, he wrote a book.
678:05 - And let's say I wanted to take each of those words
678:08 - and turn it into a vector of values.
678:10 - Here's one way I might do that.
678:11 - We'll say he is going to be a vector that has a 1 in the first position
678:15 - and the rest of the values are 0.
678:17 - Wrote will have a 1 in the second position and the rest of the values
678:20 - are 0.
678:21 - A has a 1 in the third position with the rest of the value 0.
678:24 - And book has a 1 in the fourth position with the rest of the value 0.
678:28 - So each of these words now has a distinct vector representation.
678:33 - And this is what we often call a one-hot representation,
678:36 - a representation of the meaning of a word as a vector with a single 1
678:41 - and all of the rest of the values are 0.
678:43 - And so when doing this, we now have a numeric representation for every word
678:47 - and we could pass in those vector representations
678:50 - into a neural network or other models that
678:52 - require some kind of numeric data as input.
678:55 - But this one-hot representation actually has a couple of problems
678:59 - and it's not ideal for a few reasons.
679:01 - One reason is, here we're just looking at four words.
679:03 - But if you imagine a vocabulary of thousands of words or more,
679:07 - these vectors are going to get quite long in order
679:09 - to have a distinct vector for every possible word in a vocabulary.
679:14 - And as a result of that, these longer vectors
679:16 - are going to be more difficult to deal with, more difficult to train,
679:19 - and so forth.
679:19 - And so that might be a problem.
679:21 - Another problem is a little bit more subtle.
679:24 - If we want to represent a word as a vector,
679:27 - and in particular the meaning of a word as a vector,
679:29 - then ideally it should be the case that words that have similar meanings
679:33 - should also have similar vector representations,
679:36 - so that they're close to each other together inside a vector space.
679:40 - But that's not really going to be the case with these one-hot representations,
679:44 - because if we take some similar words, say the word
679:46 - wrote and the word authored, which means similar things,
679:50 - they have entirely different vector representations.
679:54 - Likewise, book and novel, those two words mean somewhat similar things,
679:57 - but they have entirely different vector representations
680:00 - because they each have a one in some different position.
680:04 - And so that's not ideal either.
680:05 - So what we might be interested in instead
680:08 - is some kind of distributed representation.
680:10 - A distributed representation is the representation
680:13 - of the meaning of a word distributed across multiple values,
680:17 - instead of just being one-hot with a one in one position.
680:20 - Here is what a distributed representation of words might be.
680:25 - Each word is associated with some vector of values,
680:28 - with the meaning distributed across multiple values,
680:31 - ideally in such a way that similar words have
680:34 - a similar vector representation.
680:37 - But how are we going to come up with those values?
680:39 - Where do those values come from?
680:40 - How can we define the meaning of a word in this distributed sequence of numbers?
680:45 - Well, to do that, we're going to draw inspiration
680:47 - from a quote from British linguist J.R. Firth, who said,
680:50 - you shall know a word by the company it keeps.
680:54 - In other words, we're going to define the meaning of a word
680:56 - based on the words that appear around it, the context words around it.
681:01 - Take, for example, this context, for blank he ate.
681:05 - You might wonder, what words could reasonably fill in that blank?
681:08 - Well, it might be words like breakfast or lunch or dinner.
681:11 - All of those could reasonably fill in that blank.
681:14 - And so what we're going to say is because the words breakfast and lunch
681:17 - and dinner appear in a similar context, that they must have a similar meaning.
681:23 - And that's something our computer could understand and try to learn.
681:26 - A computer could look at a big corpus of text,
681:28 - look at what words tend to appear in similar context to each other,
681:32 - and use that to identify which words have a similar meaning
681:35 - and should therefore appear close to each other inside a vector space.
681:40 - And so one common model for doing this is known as the word to vec model.
681:44 - It's a model for generating word vectors, a vector representation for every word
681:48 - by looking at data and looking at the context in which a word appears.
681:52 - The idea is going to be this.
681:54 - If you start out with all of the words just in some random position in space
681:58 - and train it on some training data, what the word to vec model will do
682:02 - is start to learn what words appear in similar contexts.
682:05 - And it will move these vectors around in such a way
682:08 - that hopefully words with similar meanings, breakfast, lunch, and dinner,
682:12 - book, memoir, novel, will hopefully appear to be near to each other
682:17 - as vectors as well.
682:19 - So let's now take a look at what word to vec
682:21 - might look like in practice when implemented in code.
682:24 - What I have here inside of words.txt is a pre-trained model
682:29 - where each of these words has some vector representation
682:32 - trained by word to vec.
682:33 - Each of these words has some sequence of values representing its meaning,
682:38 - hopefully in such a way that similar words are represented by similar vectors.
682:43 - I also have this file vectors.py, which is going to open up the words
682:47 - and form them into a dictionary.
682:48 - And we also define some useful functions like distance
682:51 - to get the distance between two word vectors and closest words
682:55 - to find which words are nearby in terms of having close vectors to each other.
683:00 - And so let's give this a try.
683:02 - We'll go ahead and open a Python interpreter.
683:05 - And I'm going to import these vectors.
683:10 - And we might say, all right, what is the vector representation
683:13 - of the word book?
683:15 - And we get this big long vector that represents the word book
683:19 - as a sequence of values.
683:21 - And this sequence of values by itself is not all that meaningful.
683:24 - But it is meaningful in the context of comparing it
683:27 - to other vectors for other words.
683:30 - So we could use this distance function, which
683:32 - is going to get us the distance between two word vectors.
683:35 - And we might say, what is the distance between the vector
683:37 - representation for the word book and the vector representation
683:42 - for the word novel?
683:44 - And we see that it's 0.34.
683:46 - You can kind of interpret 0 as being really close together and 1
683:49 - being very far apart.
683:51 - And so now, what is the distance between book and, let's say, breakfast?
683:55 - Well, book and breakfast are more different from each other
683:58 - than book and novel are.
683:59 - So I would hopefully expect the distance to be larger.
684:02 - And in fact, it is 0.64 approximately.
684:05 - These two words are further away from each other.
684:08 - And what about now the distance between, let's say, lunch and breakfast?
684:13 - Well, that's about 0.2.
684:15 - Those are even closer together.
684:16 - They have a meaning that is closer to each other.
684:19 - Another interesting thing we might do is calculate the closest words.
684:24 - We might say, what are the closest words, according to Word2Vec,
684:28 - to the word book?
684:29 - And let's say, let's get the 10 closest words.
684:32 - What are the 10 closest vectors to the vector representation
684:35 - for the word book?
684:37 - And when we perform that analysis, we get this list of words.
684:40 - The closest one is book itself, but we also have books plural,
684:44 - and then essay, memoir, essays, novella, anthology, and so on.
684:48 - All of these words mean something similar to the word book,
684:52 - according to Word2Vec, at least, because they
684:54 - have a similar vector representation.
684:56 - So it seems like we've done a pretty good job of trying
684:59 - to capture this kind of vector representation of word meaning.
685:03 - One other interesting side effect of Word2Vec
685:06 - is that it's also able to capture something about the relationships
685:10 - between words as well.
685:12 - Let's take a look at an example.
685:13 - Here, for instance, are two words, man and king.
685:16 - And these are each represented by Word2Vec as vectors.
685:20 - So what might happen if I subtracted one from the other,
685:23 - calculated the value king minus man?
685:27 - Well, that will be the vector that will take us from man to king,
685:31 - somehow represent this relationship between the vector representation
685:35 - of the word man and the vector representation of the word king.
685:38 - And that's what this value, king minus man, represents.
685:42 - So what would happen if I took the vector representation of the word
685:45 - woman and added that same value, king minus man, to it?
685:51 - What would we get as the closest word to that, for example?
685:54 - Well, we could try it.
685:55 - Let's go ahead and go back to our Python interpreter and give this a try.
685:59 - I could say, what is the closest word to the vector representation
686:03 - of the word king minus the representation of the word man
686:07 - plus the representation of the word woman?
686:11 - And we see that the closest word is the word queen.
686:14 - We've somehow been able to capture the relationship between king and man.
686:17 - And then when we apply it to the word woman,
686:19 - we get, as the result, the word queen.
686:24 - So Word2Vec has been able to capture not just the words
686:27 - and how they're similar to each other, but also something
686:29 - about the relationships between words and how those words are connected
686:33 - to each other.
686:34 - So now that we have this vector representation of words,
686:37 - what can we now do with it?
686:38 - Now we can represent words as numbers.
686:40 - And so we might try to pass those words as input
686:43 - to, say, a neural network.
686:45 - Neural networks we've seen are very powerful tools
686:47 - for identifying patterns and making predictions.
686:50 - Recall that a neural network you can think of as all of these units.
686:53 - But really what the neural network is doing
686:55 - is taking some input, passing it into the network,
686:58 - and then producing some output.
687:00 - And by providing the neural network with training data,
687:02 - we're able to update the weights inside of the network
687:05 - so that the neural network can do a more accurate job of translating
687:09 - those inputs into those outputs.
687:11 - And now that we can represent words as numbers that
687:14 - could be the input or output, you could imagine passing a word in
687:18 - as input to a neural network and getting a word as output.
687:21 - And so when might that be useful?
687:23 - One common use for neural networks is in machine translation,
687:26 - when we want to translate text from one language into another,
687:29 - say translate English into French by passing English into the neural
687:33 - network and getting some French output.
687:36 - You might imagine, for instance, that we could take the English word for lamp,
687:39 - pass it into the neural network, get the French word for lamp as output.
687:43 - But in practice, when we're translating text from one language to another,
687:48 - we're usually not just interested in translating
687:50 - a single word from one language to another, but a sequence,
687:53 - say a sentence or a paragraph of words.
687:56 - Here, for example, is another paragraph, again taken
687:58 - from Sherlock Holmes, written in English.
688:00 - And what I might want to do is take that entire sentence,
688:03 - pass it into the neural network, and get as output a French translation
688:08 - of the same sentence.
688:10 - But recall that a neural network's input and output
688:12 - needs to be of some fixed size.
688:14 - And a sentence is not a fixed size.
688:16 - It's variable.
688:17 - You might have shorter sentences, and you might have longer sentences.
688:20 - So somehow, we need to solve the problem of translating
688:23 - a sequence into another sequence by means of a neural network.
688:27 - And that's going to be true not only for machine translation,
688:30 - but also for other problems, problems like question answering.
688:33 - If I want to pass as input a question, something
688:36 - like what is the capital of Massachusetts,
688:38 - feed that as input into the neural network,
688:41 - I would hope that what I would get as output
688:43 - is a sentence like the capital is Boston, again,
688:46 - translating some sequence into some other sequence.
688:50 - And if you've ever had a conversation with an AI chatbot,
688:53 - or have ever asked your phone a question,
688:55 - it needs to do something like this.
688:57 - It needs to understand the sequence of words that you, the human,
689:00 - provided as input.
689:02 - And then the computer needs to generate some sequence of words as output.
689:06 - So how can we do this?
689:07 - Well, one tool that we can use is the recurrent neural network, which
689:10 - we took a look at last time, which is a way for us
689:13 - to provide a sequence of values to a neural network
689:16 - by running the neural network multiple times.
689:18 - And each time we run the neural network, what we're going to do
689:22 - is we're going to keep track of some hidden state.
689:25 - And that hidden state is going to be passed
689:26 - from one run of the neural network to the next run of the neural network,
689:30 - keeping track of all of the relevant information.
689:33 - And so let's take a look at how we can apply that
689:35 - to something like this.
689:36 - And in particular, we're going to look at an architecture known
689:39 - as an encoder-decoder architecture, where
689:41 - we're going to encode this question into some kind of hidden state,
689:46 - and then use a decoder to decode that hidden state into the output
689:50 - that we're interested in.
689:52 - So what's that going to look like?
689:53 - We'll start with the first word, the word what.
689:55 - That goes into our neural network, and it's
689:58 - going to produce some hidden state.
690:00 - This is some information about the word what that our neural network is
690:04 - going to need to keep track of.
690:06 - Then when the second word comes along, we're
690:09 - going to feed it into that same encoder neural network,
690:12 - but it's going to get as input that hidden state as well.
690:15 - So we pass in the second word.
690:17 - We also get the information about the hidden state,
690:19 - and that's going to continue for the other words in the input.
690:23 - This is going to produce a new hidden state.
690:25 - And so then when we get to the third word, the, that goes into the encoder.
690:30 - It also gets access to the hidden state, and then it
690:32 - produces a new hidden state that gets passed into the next run
690:35 - when we use the word capital.
690:37 - And the same thing is going to repeat for the other words
690:39 - that appear in the input.
690:41 - So of Massachusetts, that produces one final piece of hidden state.
690:47 - Now somehow, we need to signal the fact that we're done.
690:50 - There's nothing left in the input.
690:51 - And we typically do this by passing some kind of special token,
690:54 - say an end token, into the neural network.
690:57 - And now the decoding process is going to start.
691:00 - We're going to generate the word the.
691:03 - But in addition to generating the word the,
691:06 - this decoder network is also going to generate some kind of hidden state.
691:11 - And so what happens the next time?
691:13 - Well, to generate the next word, it might
691:15 - be helpful to know what the first word was.
691:18 - So we might pass the first word the back into the decoder network.
691:22 - It's going to get as input this hidden state,
691:24 - and it's going to generate the next word capital.
691:27 - And that's also going to generate some hidden state.
691:30 - And we'll repeat that, passing capital into the network
691:32 - to generate the third word is, and then one more time
691:35 - in order to get the fourth word Boston.
691:38 - And at that point, we're done.
691:39 - But how do we know we're done?
691:40 - Usually, we'll do this one more time, pass Boston into the decoder network,
691:45 - and get an output some end token to indicate that that is the end of our input.
691:50 - And so this then is how we could use a recurrent neural network
691:53 - to take some input, encode it into some hidden state,
691:57 - and then use that hidden state to decode it into the output we're interested in.
692:01 - To visualize it in a slightly different way, we have some input sequence.
692:04 - This is just some sequence of words.
692:06 - That input sequence goes into the encoder, which in this case
692:10 - is a recurrent neural network generating these hidden states along the way
692:14 - until we generate some final hidden state, at which point
692:17 - we start the decoding process.
692:19 - Again, using a recurrent neural network, that's
692:21 - going to generate the output sequence as well.
692:23 - So we've got the encoder, which is encoding the information
692:26 - about the input sequence into this hidden state,
692:29 - and then the decoder, which takes that hidden state
692:32 - and uses it in order to generate the output sequence.
692:36 - But there are some problems.
692:37 - And for many years, this was the state of the art.
692:39 - The recurrent neural network and variance on this approach
692:42 - were some of the best ways we knew in order
692:44 - to perform tasks in natural language processing.
692:46 - But there are some problems that we might want to try to deal with
692:49 - and that have been dealt with over the years
692:51 - to try and improve upon this kind of model.
692:54 - And one problem you might notice happens in this encoder stage.
692:58 - We've taken this input sequence, the sequence of words,
693:01 - and encoded it all into this final piece of hidden state.
693:05 - And that final piece of hidden state needs
693:07 - to contain all of the information from the input sequence
693:10 - that we need in order to generate the output sequence.
693:14 - And while that's possible, it becomes increasingly difficult
693:18 - as the sequence gets larger and larger.
693:20 - For larger and larger input sequences, it's
693:22 - going to become more and more difficult to store
693:24 - all of the information we need about the input
693:27 - inside this single hidden state piece of context.
693:30 - That's a lot of information to pack into just a single value.
693:33 - It might be useful for us, when generating output,
693:36 - to not just refer to this one value, but to all
693:40 - of the previous hidden values that have been generated by the encoder.
693:44 - And so that might be useful, but how could we do that?
693:46 - We've got a lot of different values.
693:48 - We need to combine them somehow.
693:50 - So you could imagine adding them together,
693:52 - taking the average of them, for example.
693:54 - But doing that would assume that all of these pieces of hidden state
693:57 - are equally important.
693:59 - But that's not necessarily true either.
694:01 - Some of these pieces of hidden state are going
694:03 - to be more important than others, depending
694:05 - on what word they most closely correspond to.
694:08 - This piece of hidden state very closely corresponds
694:11 - to the first word of the input sequence.
694:13 - This one very closely corresponds to the second word of the input sequence,
694:16 - for example.
694:17 - And some of those are going to be more important than others.
694:21 - To make matters more complicated, depending
694:23 - on which word of the output sequence we're generating,
694:26 - different input words might be more or less important.
694:30 - And so what we really want is some way to decide for ourselves
694:33 - which of the input values are worth paying attention to,
694:37 - at what point in time.
694:38 - And this is the key idea behind a mechanism known as attention.
694:42 - Attention is all about letting us decide which values
694:45 - are important to pay attention to, when generating, in this case,
694:49 - the next word in our sequence.
694:51 - So let's take a look at an example of that.
694:54 - Here's a sentence.
694:55 - What is the capital of Massachusetts?
694:57 - Same sentence as before.
694:59 - And let's imagine that we were trying to answer that question
695:02 - by generating tokens of output.
695:04 - So what would the output look like?
695:05 - Well, it's going to look like something like the capital is.
695:09 - And let's say we're now trying to generate this last word here.
695:12 - What is that last word?
695:13 - How is the computer going to figure it out?
695:16 - Well, what it's going to need to do is decide
695:19 - which values it's going to pay attention to.
695:22 - And so the attention mechanism will allow
695:24 - us to calculate some attention scores for each word,
695:28 - some value corresponding to each word, determining how relevant
695:32 - is it for us to pay attention to that word right now?
695:36 - And in this case, when generating the fourth word of the output sequence,
695:39 - the most important words to pay attention to
695:42 - might be capital and Massachusetts, for example.
695:46 - That those words are going to be particularly relevant.
695:49 - And there are a number of different mechanisms
695:50 - that have been used in order to calculate these attention scores.
695:53 - It could be something as simple as a dot product
695:56 - to see how similar two vectors are, or we
695:58 - could train an entire neural network to calculate these attention scores.
696:02 - But the key idea is that during the training process for our neural network,
696:06 - we're going to learn how to calculate these attention scores.
696:09 - Our model is going to learn what is important to pay attention
696:12 - to in order to decide what the next word should be.
696:17 - So the result of all of this, calculating these attention scores,
696:20 - is that we can calculate some value, some value for each input word,
696:24 - determining how important is it for us to pay attention
696:28 - to that particular value.
696:29 - And recall that each of these input words
696:32 - is also associated with one of these hidden state context vectors,
696:36 - capturing information about the sentence up to that point,
696:39 - but primarily focused on that word in particular.
696:43 - And so what we can now do is if we have all of these vectors
696:46 - and we have values representing how important is it for us
696:49 - to pay attention to those particular vectors,
696:52 - is we can take a weighted average.
696:54 - We can take all of these vectors, multiply them by their attention scores,
696:58 - and add them up to get some new vector value, which
697:01 - is going to represent the context from the input,
697:04 - but specifically paying attention to the words
697:07 - that we think are most important.
697:09 - And once we've done that, that context vector
697:12 - can be fed into our decoder in order to say
697:14 - that the word should be, in this case, Boston.
697:18 - So attention is this very powerful tool that
697:21 - allows any word when we're trying to decode it
697:24 - to decide which words from the input should we pay attention to in order
697:28 - to determine what's important for generating the next word of the output.
697:33 - And one of the first places this was really used
697:35 - was in the field of machine translation.
697:37 - Here's an example of a diagram from the paper
697:39 - that introduced this idea, which was focused
697:42 - on trying to translate English sentences into French sentences.
697:45 - So we have an input English sentence up along the top,
697:48 - and then along the left side, the output French equivalent
697:51 - of that same sentence.
697:52 - And what you see in all of these squares are the attention scores
697:56 - visualized, where a lighter square indicates a higher attention score.
698:01 - And what you'll notice is that there's a strong correspondence
698:04 - between the French word and the equivalent English word,
698:07 - that the French word for agreement is really
698:10 - paying attention to the English word for agreement
698:12 - in order to decide what French word should be generated at that point
698:16 - in time.
698:17 - And sometimes you might pay attention to multiple words
698:19 - if you look at the French word for economic.
698:22 - That's primarily paying attention to the English word for economic,
698:25 - but also paying attention to the English word for European in this case too.
698:30 - And so attention scores are very easy to visualize
698:33 - to get a sense for what is our machine learning model really
698:37 - paying attention to, what information is it using in order
698:40 - to determine what's important and what's not in order
698:42 - to determine what the ultimate output token should be.
698:46 - And so when we combine the attention mechanism
698:49 - with a recurrent neural network, we can get very powerful and useful results
698:52 - where we're able to generate an output sequence by paying attention
698:56 - to the input sequence too.
698:58 - But there are other problems with this approach
699:00 - of using a recurrent neural network as well.
699:02 - In particular, notice that every run of the neural network
699:05 - depends on the output of the previous step.
699:07 - And that was important for getting a sense
699:09 - for the sequence of words and the ordering of those particular words.
699:12 - But we can't run this unit of the neural network
699:15 - until after we've calculated the hidden state from the run before it
699:19 - from the previous input token.
699:21 - And what that means is that it's very difficult to parallelize this process.
699:25 - That as the input sequence get longer and longer,
699:28 - we might want to use parallelism to try and speed up
699:31 - this process of training the neural network
699:33 - and making sense of all of this language data.
699:35 - But it's difficult to do that.
699:36 - And it's slow to do that with a recurrent neural network
699:39 - because all of it needs to be performed in sequence.
699:42 - And that's become an increasing challenge as we've
699:45 - started to get larger and larger language models.
699:47 - The more language data that we have available to us
699:50 - to use to train our machine learning models,
699:52 - the more accurate it can be, the better representation of language
699:55 - it can have, the better understanding it can have,
699:58 - and the better results that we can see.
700:00 - And so we've seen this growth of large language models
700:02 - that are using larger and larger data sets.
700:05 - But as a result, they take longer and longer to train.
700:08 - And so this problem that recurrent neural networks
700:10 - are not easy to parallelize has become an increasing problem.
700:15 - And as a result of that, that was one of the main motivations
700:18 - for a different architecture, for thinking about how
700:20 - to deal with natural language.
700:22 - And that's known as the transformer architecture.
700:25 - And this has been a significant milestone in the world of natural language
700:28 - processing for really increasing how well we can perform
700:32 - these kinds of natural language processing tasks,
700:34 - as well as how quickly we can train a machine learning model to be
700:37 - able to produce effective results.
700:39 - There are a number of different types of transformers
700:42 - in terms of how they work.
700:43 - But what we're going to take a look at here
700:45 - is the basic architecture for how one might work with a transformer
700:48 - to get a sense for what's involved and what we're doing.
700:52 - So let's start with the model we were looking at before,
700:54 - specifically at this encoder part of our encoder-decoder architecture,
700:59 - where we used a recurrent neural network to take this input
701:01 - sequence and capture all of this information about the hidden state
701:06 - and the information we need to know about that input sequence.
701:09 - Right now, it all needs to happen in this linear progression.
701:13 - But what the transformer is going to allow us to do
701:15 - is process each of the words independently in a way that's
701:18 - easy to parallelize, rather than have each word wait for some other word.
701:22 - Each word is going to go through this same neural network
701:26 - and produce some kind of encoded representation
701:29 - of that particular input word.
701:31 - And all of this is going to happen in parallel.
701:33 - Now, it's happening for all of the words at once,
701:35 - but we're really just going to focus on what's
701:37 - happening for one word to make it clear.
701:39 - But know that whatever you're seeing happen for this one word
701:41 - is going to happen for all of the other input words, too.
701:45 - So what's going on here?
701:47 - Well, we start with some input word.
701:49 - That input word goes into the neural network.
701:52 - And the output is hopefully some encoded representation of the input word,
701:57 - the information we need to know about the input word that's
701:59 - going to be relevant to us as we're generating the output.
702:03 - And because we're doing this each word independently,
702:06 - it's easy to parallelize.
702:07 - We don't have to wait for the previous word
702:09 - before we run this word through the neural network.
702:12 - But what did we lose in this process by trying to parallelize this whole thing?
702:16 - Well, we've lost all notion of word ordering.
702:19 - The order of words is important.
702:21 - The sentence, Sherlock Holmes gave the book to Watson,
702:24 - has a different meaning than Watson gave the book to Sherlock Holmes.
702:27 - And so we want to keep track of that information about word position.
702:31 - In the recurrent neural network, that happened for us automatically
702:34 - because we could run each word one at a time through the neural network,
702:37 - get the hidden state, pass it on to the next run of the neural network.
702:41 - But that's not the case here with the transformer,
702:44 - where each word is being processed independent of all of the other ones.
702:49 - So what are we going to do to try to solve that problem?
702:51 - One thing we can do is add some kind of positional encoding to the input word.
702:57 - The positional encoding is some vector that
702:59 - represents the position of the word in the sentence.
703:02 - This is the first word, the second word, the third word, and so forth.
703:05 - We're going to add that to the input word.
703:08 - And the result of that is going to be a vector
703:10 - that captures multiple pieces of information.
703:12 - It captures the input word itself as well as where in the sentence it appears.
703:17 - The result of that is we can pass the output of that addition,
703:20 - the addition of the input word and the positional encoding
703:23 - into the neural network.
703:24 - That way, the neural network knows the word and where
703:27 - it appears in the sentence and can use both of those pieces of information
703:31 - to determine how best to represent the meaning of that word
703:34 - in the encoded representation at the end of it.
703:38 - In addition to what we have here, in addition
703:40 - to the positional encoding and this feed forward neural network,
703:43 - we're also going to add one additional component, which
703:47 - is going to be a self-attention step.
703:49 - This is going to be attention where we're paying attention
703:52 - to the other input words.
703:54 - Because the meaning or interpretation of an input word
703:57 - might vary depending on the other words in the input as well.
704:00 - And so we're going to allow each word in the input
704:03 - to decide what other words in the input it should pay attention
704:06 - to in order to decide on its encoded representation.
704:10 - And that's going to allow us to get a better encoded representation
704:13 - for each word because words are defined by their context,
704:16 - by the words around them and how they're used in that particular context.
704:21 - This kind of self-attention is so valuable, in fact,
704:24 - that oftentimes the transformer will use multiple different self-attention
704:28 - layers at the same time to allow for this model
704:31 - to be able to pay attention to multiple facets of the input at the same time.
704:36 - And we call this multi-headed attention, where each attention head can pay
704:40 - attention to something different.
704:41 - And as a result, this network can learn to pay attention
704:45 - to many different parts of the input for this input word all at the same time.
704:49 - And in the spirit of deep learning, these two steps,
704:52 - this multi-headed self-attention layer and this neural network layer,
704:56 - that itself can be repeated multiple times, too,
704:59 - in order to get a deeper representation, in order
705:01 - to learn deeper patterns within the input text
705:04 - and ultimately get a better representation of language
705:07 - in order to get useful encoded representations of all of the input
705:11 - words.
705:12 - And so this is the process that a transformer might
705:15 - use in order to take an input word and get it its encoded representation.
705:20 - And the key idea is to really rely on this attention step
705:23 - in order to get information that's useful in order
705:26 - to determine how to encode that word.
705:29 - And that process is going to repeat for all of the input words that
705:32 - are in the input sequence.
705:33 - We're going to take all of the input words,
705:35 - encode them with some kind of positional encoding,
705:38 - feed those into these self-attention and feed-forward neural networks
705:42 - in order to ultimately get these encoded representations of the words.
705:46 - That's the result of the encoder.
705:48 - We get all of these encoded representations
705:51 - that will be useful to us when it comes time
705:53 - then to try to decode all of this information
705:57 - into the output sequence we're interested in.
705:59 - And again, this might take place in the context of machine translation,
706:02 - where the output is going to be the same sentence in a different language,
706:06 - or it might be an answer to a question in the case of an AI chatbot,
706:10 - for example.
706:11 - And so now let's take a look at how that decoder is going to work.
706:15 - Ultimately, it's going to have a very similar structure.
706:19 - Any time we're trying to generate the next output word,
706:21 - we need to know what the previous output word is,
706:25 - as well as its positional encoding.
706:27 - Where in the output sequence are we?
706:29 - And we're going to have these same steps, self-attention,
706:32 - because we might want an output word to be
706:34 - able to pay attention to other words in that same output,
706:37 - as well as a neural network.
706:39 - And that might itself repeat multiple times.
706:42 - But in this decoder, we're going to add one additional step.
706:45 - We're going to add an additional attention step, where
706:48 - instead of self-attention, where the output word is going
706:51 - to pay attention to other output words, in this step,
706:55 - we're going to allow the output word to pay attention
706:58 - to the encoded representations.
707:00 - So recall that the encoder is taking all of the input words
707:04 - and transforming them into these encoded representations
707:07 - of all of the input words.
707:08 - But it's going to be important for us to be able to decide which
707:11 - of those encoded representations we want to pay attention
707:14 - to when generating any particular token in the output sequence.
707:18 - And that's what this additional attention step is going to allow us to do.
707:22 - It's saying that every time we're generating a word of the output,
707:26 - we can pay attention to the other words in the output,
707:28 - because we might want to know, what are the words we've generated previously?
707:32 - And we want to pay attention to some of them
707:33 - to decide what word is going to be next in the sequence.
707:37 - But we also care about paying attention to the input words, too.
707:41 - And we want the ability to decide which of these encoded representations
707:44 - of the input words are going to be relevant in order
707:47 - for us to generate the next step.
707:49 - And so these two pieces combine together.
707:51 - We have this encoder that takes all of the input words
707:55 - and produces this encoded representation.
707:57 - And we have this decoder that is able to take the previous output word,
708:01 - pay attention to that encoded input, and then generate the next output word.
708:06 - And this is one of the possible architectures
708:08 - we could use for a transformer, with the key idea being
708:12 - these attention steps that allow words to pay attention to each other.
708:16 - During the training process here, we can now much more easily parallelize this,
708:20 - because we don't have to wait for all of the words to happen in sequence.
708:23 - And we can learn how we should perform these attention steps.
708:26 - The model is able to learn what is important to pay attention to,
708:30 - what things do I need to pay attention to,
708:32 - in order to be more accurate at predicting what the output word is.
708:37 - And this has proved to be a tremendously effective model
708:39 - for conversational AI agents, for building machine translation systems.
708:44 - And there have been many variants proposed on this model, too.
708:47 - Some transformers only use an encoder.
708:49 - Some only use a decoder.
708:51 - Some use some other combination of these different particular features.
708:54 - But the key ideas ultimately remain the same,
708:57 - this real focus on trying to pay attention to what is most important.
709:01 - And the world of natural language processing
709:04 - is fast growing and fast evolving.
709:06 - Year after year, we keep coming up with new models
709:08 - that allow us to do an even better job of performing
709:11 - these natural language related tasks, all on the surface
709:14 - of solving the tricky problem, which is our own natural language.
709:18 - We've seen how the syntax and semantics of our language is ambiguous,
709:21 - and it introduces all of these new challenges
709:24 - that we need to think about, if we're going
709:26 - to be able to design AI agents that are able to work with language
709:29 - effectively.
709:30 - So as we think about where we've been in this class,
709:33 - all of the different types of artificial intelligence we've considered,
709:36 - we've looked at artificial intelligence in a wide variety
709:38 - of different forms now.
709:40 - We started by taking a look at search problems,
709:42 - where we looked at how AI can search for solutions, play games,
709:46 - and find the optimal decision to make.
709:48 - We talked about knowledge, how AI can represent information that it knows
709:53 - and use that information to generate new knowledge as well.
709:57 - Then we looked at what AI can do when it's less certain,
709:59 - when it doesn't know things for sure, and we
710:01 - have to represent things in terms of probability.
710:04 - We then took a look at optimization problems.
710:06 - We saw how a lot of problems in AI can be boiled down
710:09 - to trying to maximize or minimize some function.
710:12 - And we looked at strategies that AI can use
710:15 - in order to do that kind of maximizing and minimizing.
710:18 - We then looked at the world of machine learning,
710:20 - learning from data in order to figure out some patterns
710:23 - and identify how to perform a task by looking at the training data
710:26 - that we have available to it.
710:28 - And one of the most powerful tools there was the neural network,
710:31 - the sequence of units whose weights can be trained in order
710:34 - to allow us to really effectively go from input to output
710:37 - and predict how to get there by learning these underlying patterns.
710:41 - And then today, we took a look at language itself,
710:44 - trying to understand how can we train the computer to be
710:47 - able to understand our natural language, to be
710:49 - able to understand syntax and semantics, make sense of and generate
710:53 - natural language, which introduces a number of interesting problems too.
710:57 - And we've really just scratched the surface of artificial intelligence.
711:00 - There is so much interesting research and interesting new techniques
711:03 - and algorithms and ideas being introduced
711:05 - to try to solve these types of problems.
711:07 - So I hope you enjoyed this exploration into the world
711:10 - of artificial intelligence.
711:11 - A huge thanks to all of the course's teaching staff and production team
711:14 - for making the class possible.
711:15 - This was an introduction to artificial intelligence with Python.

Cleaned transcript:

This course from Harvard University explores the concepts and algorithms at the foundation of modern artificial intelligence, diving into the ideas that give rise to technologies like gameplaying engines, handwriting recognition, and machine translation. You'll gain exposure to the theory behind graph search algorithms, classification, optimization, reinforcement learning, and other topics in artificial intelligence and machine learning. Brian Yu teaches this course. Hello, world. This is CS50, and this is an introduction to artificial intelligence with Python with CS50's own Brian Yu. This course picks up where CS50 itself leaves off and explores the concepts and algorithms at the foundation of modern AI. We'll start with a look at how AI can search for solutions to problems, whether those problems are learning how to play a game or trying to find driving directions to a destination. We'll then look at how AI can represent information, both knowledge that our AI is certain about, but also information and events about which our AI might be uncertain, learning how to represent that information, but more importantly, how to use that information to draw inferences and new conclusions as well. We'll explore how AI can solve various types of optimization problems, trying to maximize profits or minimize costs or satisfy some other constraints before turning our attention to the fastgrowing field of machine learning, where we won't tell our AI exactly how to solve a problem, but instead, give our AI access to data and experiences so that our AI can learn on its own how to perform these tasks. In particular, we'll look at neural networks, one of the most popular tools in modern machine learning, inspired by the way that human brains learn and reason as well before finally taking a look at the world of natural language processing so that it's not just us humans learning to learn how artificial intelligence is able to speak, but also AI learning how to understand and interpret human language as well. We'll explore these ideas and algorithms, and along the way, give you the opportunity to build your own AI programs to implement all of this and more. This is CS50. All right. Welcome, everyone, to an introduction to artificial intelligence with Python. My name is Brian Yu, and in this class, we'll explore some of the ideas and techniques and algorithms that are at the foundation of artificial intelligence. Now, artificial intelligence covers a wide variety of types of techniques. Anytime you see a computer do something that appears to be intelligent or rational in some way, like recognizing someone's face in a photo, or being able to play a game better than people can, or being able to understand human language when we talk to our phones and they understand what we mean and are able to respond back to us, these are all examples of AI, or artificial intelligence. And in this class, we'll explore some of the ideas that make that AI possible. So we'll begin our conversations with search, the problem of we have an AI, and we would like the AI to be able to search for solutions to some kind of problem, no matter what that problem might be. Whether it's trying to get driving directions from point A to point B, or trying to figure out how to play a game, given a tictactoe game, for example, figuring out what move it ought to make. After that, we'll take a look at knowledge. Ideally, we want our AI to be able to know information, to be able to represent that information, and more importantly, to be able to draw inferences from that information, to be able to use the information it knows and draw additional conclusions. So we'll talk about how AI can be programmed in order to do just that. Then we'll explore the topic of uncertainty, talking about ideas of what happens if a computer isn't sure about a fact, but maybe is only sure with a certain probability. So we'll talk about some of the ideas behind probability, and how computers can begin to deal with uncertain events in order to be a little bit more intelligent in that sense as well. After that, we'll turn our attention to optimization, problems of when the computer is trying to optimize for some sort of goal, especially in a situation where there might be multiple ways that a computer might solve a problem, but we're looking for a better way, or potentially the best way, if that's at all possible. Then we'll take a look at machine learning, or learning more generally, and looking at how, when we have access to data, our computers can be programmed to be quite intelligent by learning from data and learning from experience, being able to perform a task better and better based on greater access to data. So your email, for example, where your email inbox somehow knows which of your emails are good emails and which of your emails are spam. These are all examples of computers being able to learn from past experiences and past data. We'll take a look, too, at how computers are able to draw inspiration from human intelligence, looking at the structure of the human brain, and how neural networks can be a computer analog to that sort of idea, and how, by taking advantage of a certain type of structure of a computer program, we can write neural networks that are able to perform tasks very, very effectively. And then finally, we'll turn our attention to language, not programming languages, but human languages that we speak every day. And taking a look at the challenges that come about as a computer tries to understand natural language, and how it is some of the natural language processing that occurs in modern artificial intelligence can actually work. But today, we'll begin our conversation with search, this problem of trying to figure out what to do when we have some sort of situation that the computer is in, some sort of environment that an agent is in, so to speak, and we would like for that agent to be able to somehow look for a solution to that problem. Now, these problems can come in any number of different types of formats. One example, for instance, might be something like this classic 15 puzzle with the sliding tiles that you might have seen. Where you're trying to slide the tiles in order to make sure that all the numbers line up in order. This is an example of what you might call a search problem. The 15 puzzle begins in an initially mixed up state, and we need some way of finding moves to make in order to return the puzzle to its solved state. But there are similar problems that you can frame in other ways. Trying to find your way through a maze, for example, is another example of a search problem. You begin in one place, you have some goal of where you're trying to get to, and you need to figure out the correct sequence of actions that will take you from that initial state to the goal. And while this is a little bit abstract, any time we talk about maze solving in this class, you can translate it to something a little more real world. Something like driving directions. If you ever wonder how Google Maps is able to figure out what is the best way for you to get from point A to point B, and what turns to make at what time, depending on traffic, for example, it's often some sort of search algorithm. You have an AI that is trying to get from an initial position to some sort of goal by taking some sequence of actions. So we'll start our conversations today by thinking about these types of search problems and what goes in to solving a search problem like this in order for an AI to be able to find a good solution. In order to do so, though, we're going to need to introduce a little bit of terminology, some of which I've already used. But the first term we'll need to think about is an agent. An agent is just some entity that perceives its environment. It somehow is able to perceive the things around it and act on that environment in some way. So in the case of the driving directions, your agent might be some representation of a car that is trying to figure out what actions to take in order to arrive at a destination. In the case of the 15 puzzle with the sliding tiles, the agent might be the AI or the person that is trying to solve that puzzle to try and figure out what tiles to move in order to get to that solution. Next, we introduce the idea of a state. A state is just some configuration of the agent in its environment. So in the 15 puzzle, for example, any state might be any one of these three, for example. A state is just some configuration of the tiles. And each of these states is different and is going to require a slightly different solution. A different sequence of actions will be needed in each one of these in order to get from this initial state to the goal, which is where we're trying to get. So the initial state, then, what is that? The initial state is just the state where the agent begins. It is one such state where we're going to start from. And this is going to be the starting point for our search algorithm, so to speak. We're going to begin with this initial state and then start to reason about it, to think about what actions might we apply to that initial state in order to figure out how to get from the beginning to the end, from the initial position to whatever our goal happens to be. And how do we make our way from that initial position to the goal? Well, ultimately, it's via taking actions. Actions are just choices that we can make in any given state. And in AI, we're always going to try to formalize these ideas a little bit more precisely, such that we could program them a little bit more mathematically, so to speak. So this will be a recurring theme. And we can more precisely define actions as a function. We're going to effectively define a function called actions that takes an input, s, where s is going to be some state that exists inside of our environment. And actions of s is going to take the state as input and return as output the set of all actions that can be executed in that state. And so it's possible that some actions are only valid in certain states and not in other states. And we'll see examples of that soon, too. So in the case of the 15 puzzle, for example, there are generally going to be four possible actions that we can do most of the time. We can slide a tile to the right, slide a tile to the left, slide a tile up, or slide a tile down, for example. And those are going to be the actions that are available to us. So somehow our AI, our program, needs some encoding of the state, which is often going to be in some numerical format, and some encoding of these actions. But it also needs some encoding of the relationship between these things. How do the states and actions relate to one another? And in order to do that, we'll introduce to our AI a transition model, which will be a description of what state we get after we perform some available action in some other state. And again, we can be a little bit more precise about this, define this transition model a little bit more formally, again, as a function. The function is going to be a function called result that this time takes two inputs. Input number one is s, some state. And input number two is a, some action. And the output of this function result is it is going to give us the state that we get after we perform action a in state s. So let's take a look at an example to see more precisely what this actually means. Here is an example of a state, of the 15 puzzle, for example. And here is an example of an action, sliding a tile to the right. What happens if we pass these as inputs to the result function? Again, the result function takes this board, this state, as its first input. And it takes an action as a second input. And of course, here, I'm describing things visually so that you can see visually what the state is and what the action is. In a computer, you might represent one of these actions as just some number that represents the action. Or if you're familiar with enums that allow you to enumerate multiple possibilities, it might be something like that. And this state might just be represented as an array or twodimensional array of all of these numbers that exist. But here, we're going to show it visually just so you can see it. But when we take this state and this action, pass it into the result function, the output is a new state. The state we get after we take a tile and slide it to the right, and this is the state we get as a result. If we had a different action and a different state, for example, and pass that into the result function, we'd get a different answer altogether. So the result function needs to take care of figuring out how to take a state and take an action and get what results. And this is going to be our transition model that describes how it is that states and actions are related to each other. If we take this transition model and think about it more generally and across the entire problem, we can form what we might call a state space. The set of all of the states we can get from the initial state via any sequence of actions, by taking 0 or 1 or 2 or more actions in addition to that, so we could draw a diagram that looks something like this, where every state is represented here by a game board, and there are arrows that connect every state to every other state we can get to from that state. And the state space is much larger than what you see just here. This is just a sample of what the state space might actually look like. And in general, across many search problems, whether they're this particular 15 puzzle or driving directions or something else, the state space is going to look something like this. We have individual states and arrows that are connecting them. And oftentimes, just for simplicity, we'll simplify our representation of this entire thing as a graph, some sequence of nodes and edges that connect nodes. But you can think of this more abstract representation as the exact same idea. Each of these little circles or nodes is going to represent one of the states inside of our problem. And the arrows here represent the actions that we can take in any particular state, taking us from one particular state to another state, for example. All right. So now we have this idea of nodes that are representing these states, actions that can take us from one state to another, and a transition model that defines what happens after we take a particular action. So the next step we need to figure out is how we know when the AI is done solving the problem. The AI needs some way to know when it gets to the goal that it's found the goal. So the next thing we'll need to encode into our artificial intelligence is a goal test, some way to determine whether a given state is a goal state. In the case of something like driving directions, it might be pretty easy. If you're in a state that corresponds to whatever the user typed in as their intended destination, well, then you know you're in a goal state. In the 15 puzzle, it might be checking the numbers to make sure they're all in ascending order. But the AI needs some way to encode whether or not any state they happen to be in is a goal. And some problems might have one goal, like a maze where you have one initial position and one ending position, and that's the goal. In other more complex problems, you might imagine that there are multiple possible goals. That there are multiple ways to solve a problem, and we might not care which one the computer finds, as long as it does find a particular goal. However, sometimes the computer doesn't just care about finding a goal, but finding a goal well, or one with a low cost. And it's for that reason that the last piece of terminology that we'll use to define these search problems is something called a path cost. You might imagine that in the case of driving directions, it would be pretty annoying if I said I wanted directions from point A to point B, and the route that Google Maps gave me was a long route with lots of detours that were unnecessary that took longer than it should have for me to get to that destination. And it's for that reason that when we're formulating search problems, we'll often give every path some sort of numerical cost, some number telling us how expensive it is to take this particular option, and then tell our AI that instead of just finding a solution, some way of getting from the initial state to the goal, we'd really like to find one that minimizes this path cost. That is, less expensive, or takes less time, or minimizes some other numerical value. We can represent this graphically if we take a look at this graph again, and imagine that each of these arrows, each of these actions that we can take from one state to another state, has some sort of number associated with it. That number being the path cost of this particular action, where some of the costs for any particular action might be more expensive than the cost for some other action, for example. Although this will only happen in some sorts of problems. In other problems, we can simplify the diagram and just assume that the cost of any particular action is the same. And this is probably the case in something like the 15 puzzle, for example, where it doesn't really make a difference whether I'm moving right or moving left. The only thing that matters is the total number of steps that I have to take to get from point A to point B. And each of those steps is of equal cost. We can just assume it's of some constant cost like one. And so this now forms the basis for what we might consider to be a search problem. A search problem has some sort of initial state, some place where we begin, some sort of action that we can take or multiple actions that we can take in any given state. And it has a transition model. Some way of defining what happens when we go from one state and take one action, what state do we end up with as a result. In addition to that, we need some goal test to know whether or not we've reached a goal. And then we need a path cost function that tells us for any particular path, by following some sequence of actions, how expensive is that path. What does its cost in terms of money or time or some other resource that we are trying to minimize our usage of. And the goal ultimately is to find a solution. Where a solution in this case is just some sequence of actions that will take us from the initial state to the goal state. And ideally, we'd like to find not just any solution but the optimal solution, which is a solution that has the lowest path cost among all of the possible solutions. And in some cases, there might be multiple optimal solutions. But an optimal solution just means that there is no way that we could have done better in terms of finding that solution. So now we've defined the problem. And now we need to begin to figure out how it is that we're going to solve this kind of search problem. And in order to do so, you'll probably imagine that our computer is going to need to represent a whole bunch of data about this particular problem. We need to represent data about where we are in the problem. And we might need to be considering multiple different options at once. And oftentimes, when we're trying to package a whole bunch of data related to a state together, we'll do so using a data structure that we're going to call a node. A node is a data structure that is just going to keep track of a variety of different values. And specifically, in the case of a search problem, it's going to keep track of these four values in particular. Every node is going to keep track of a state, the state we're currently on. And every node is also going to keep track of a parent. A parent being the state before us or the node that we used in order to get to this current state. And this is going to be relevant because eventually, once we reach the goal node, once we get to the end, we want to know what sequence of actions we use in order to get to that goal. And the way we'll know that is by looking at these parents to keep track of what led us to the goal and what led us to that state and what led us to the state before that, so on and so forth, backtracking our way to the beginning so that we know the entire sequence of actions we needed in order to get from the beginning to the end. The node is also going to keep track of what action we took in order to get from the parent to the current state. And the node is also going to keep track of a path cost. In other words, it's going to keep track of the number that represents how long it took to get from the initial state to the state that we currently happen to be at. And we'll see why this is relevant as we start to talk about some of the optimizations that we can make in terms of these search problems more generally. So this is the data structure that we're going to use in order to solve the problem. And now let's talk about the approach. How might we actually begin to solve the problem? Well, as you might imagine, what we're going to do is we're going to start at one particular state, and we're just going to explore from there. The intuition is that from a given state, we have multiple options that we could take, and we're going to explore those options. And once we explore those options, we'll find that more options than that are going to make themselves available. And we're going to consider all of the available options to be stored inside of a single data structure that we'll call the frontier. The frontier is going to represent all of the things that we could explore next that we haven't yet explored or visited. So in our approach, we're going to begin the search algorithm by starting with a frontier that just contains one state. The frontier is going to contain the initial state, because at the beginning, that's the only state we know about. That is the only state that exists. And then our search algorithm is effectively going to follow a loop. We're going to repeat some process again and again and again. The first thing we're going to do is if the frontier is empty, then there's no solution. And we can report that there is no way to get to the goal. And that's certainly possible. There are certain types of problems that an AI might try to explore and realize that there is no way to solve that problem. And that's useful information for humans to know as well. So if ever the frontier is empty, that means there's nothing left to explore. And we haven't yet found a solution, so there is no solution. There's nothing left to explore. Otherwise, what we'll do is we'll remove a node from the frontier. So right now at the beginning, the frontier just contains one node representing the initial state. But over time, the frontier might grow. It might contain multiple states. And so here, we're just going to remove a single node from that frontier. If that node happens to be a goal, then we found a solution. So we remove a node from the frontier and ask ourselves, is this the goal? And we do that by applying the goal test that we talked about earlier, asking if we're at the destination. Or asking if all the numbers of the 15 puzzle happen to be in order. So if the node contains the goal, we found a solution. Great. We're done. And otherwise, what we'll need to do is we'll need to expand the node. And this is a term of art in artificial intelligence. To expand the node just means to look at all of the neighbors of that node. In other words, consider all of the possible actions that I could take from the state that this node is representing and what nodes could I get to from there. We're going to take all of those nodes, the next nodes that I can get to from this current one I'm looking at, and add those to the frontier. And then we'll repeat this process. So at a very high level, the idea is we start with a frontier that contains the initial state. And we're constantly removing a node from the frontier, looking at where we can get to next and adding those nodes to the frontier, repeating this process over and over until either we remove a node from the frontier and it contains a goal, meaning we've solved the problem, or we run into a situation where the frontier is empty, at which point we're left with no solution. So let's actually try and take the pseudocode, put it into practice by taking a look at an example of a sample search problem. So right here, I have a sample graph. A is connected to B via this action. B is connected to nodes C and D. C is connected to E. D is connected to F. And what I'd like to do is have my AI find a path from A to E. We want to get from this initial state to this goal state. So how are we going to do that? Well, we're going to start with a frontier that contains the initial state. This is going to represent our frontier. So our frontier initially will just contain A, that initial state where we're going to begin. And now we'll repeat this process. If the frontier is empty, no solution. That's not a problem, because the frontier is not empty. So we'll remove a node from the frontier as the one to consider next. There's only one node in the frontier. So we'll go ahead and remove it from the frontier. But now A, this initial node, this is the node we're currently considering. We follow the next step. We ask ourselves, is this node the goal? No, it's not. A is not the goal. E is the goal. So we don't return the solution. So instead, we go to this last step, expand the node, and add the resulting nodes to the frontier. What does that mean? Well, it means take this state A and consider where we could get to next. And after A, what we could get to next is only B. So that's what we get when we expand A. We find B. And we add B to the frontier. And now B is in the frontier. And we repeat the process again. We say, all right, the frontier is not empty. So let's remove B from the frontier. B is now the node that we're considering. We ask ourselves, is B the goal? No, it's not. So we go ahead and expand B and add its resulting nodes to the frontier. What happens when we expand B? In other words, what nodes can we get to from B? Well, we can get to C and D. So we'll go ahead and add C and D from the frontier. And now we have two nodes in the frontier, C and D. And we repeat the process again. We remove a node from the frontier. For now, I'll do so arbitrarily just by picking C. We'll see why later, how choosing which node you remove from the frontier is actually quite an important part of the algorithm. But for now, I'll arbitrarily remove C, say it's not the goal. So we'll add E, the next one, to the frontier. Then let's say I remove E from the frontier. And now I check I'm currently looking at state E. Is it a goal state? It is, because I'm trying to find a path from A to E. So I would return the goal. And that now would be the solution, that I'm now able to return the solution. And I have found a path from A to E. So this is the general idea, the general approach of this search algorithm, to follow these steps, constantly removing nodes from the frontier, until we're able to find a solution. So the next question you might reasonably ask is, what could go wrong here? What are the potential problems with an approach like this? And here's one example of a problem that could arise from this sort of approach. Imagine this same graph, same as before, with one change. The change being now, instead of just an arrow from A to B, we also have an arrow from B to A, meaning we can go in both directions. And this is true in something like the 15 puzzle, where when I slide a tile to the right, I could then slide a tile to the left to get back to the original position. I could go back and forth between A and B. And that's what these double arrows symbolize, the idea that from one state, I can get to another, and then I can get back. And that's true in many search problems. What's going to happen if I try to apply the same approach now? Well, I'll begin with A, same as before. And I'll remove A from the frontier. And then I'll consider where I can get to from A. And after A, the only place I can get to is B. So B goes into the frontier. Then I'll say, all right, let's take a look at B. That's the only thing left in the frontier. Where can I get to from B? Before, it was just C and D. But now, because of that reverse arrow, I can get to A or C or D. So all three, A, C, and D, all of those now go into the frontier. They are places I can get to from B. And now I remove one from the frontier. And maybe I'm unlucky, and maybe I pick A. And now I'm looking at A again. And I consider, where can I get to from A? And from A, well, I can get to B. And now we start to see the problem. But if I'm not careful, I go from A to B, and then back to A, and then to B again. And I could be going in this infinite loop, where I never make any progress, because I'm constantly just going back and forth between two states that I've already seen. So what is the solution to this? We need some way to deal with this problem. And the way that we can deal with this problem is by somehow keeping track of what we've already explored. And the logic is going to be, well, if we've already explored the state, there's no reason to go back to it. Once we've explored a state, don't go back to it. Don't bother adding it to the frontier. There's no need to. So here's going to be our revised approach, a better way to approach this sort of search problem. And it's going to look very similar, just with a couple of modifications. We'll start with a frontier that contains the initial state, same as before. But now we'll start with another data structure, which will just be a set of nodes that we've already explored. So what are the states we've explored? Initially, it's empty. We have an empty explored set. And now we repeat. If the frontier is empty, no solution, same as before. We remove a node from the frontier. We check to see if it's a goal state, return the solution. None of this is any different so far. But now what we're going to do is we're going to add the node to the explored state. So if it happens to be the case that we remove a node from the frontier and it's not the goal, we'll add it to the explored set so that we know we've already explored it. We don't need to go back to it again if it happens to come up later. And then the final step, we expand the node and we add the resulting nodes to the frontier. But before, we just always added the resulting nodes to the frontier. We're going to be a little clever about it this time. We're only going to add the nodes to the frontier if they aren't already in the frontier and if they aren't already in the explored set. So we'll check both the frontier and the explored set, make sure that the node isn't already in one of those two. And so long as it isn't, then we'll go ahead and add it to the frontier, but not otherwise. And so that revised approach is ultimately what's going to help make sure that we don't go back and forth between two nodes. Now, the one point that I've kind of glossed over here so far is this step here, removing a node from the frontier. Before, I just chose arbitrarily. Like, let's just remove a node and that's it. But it turns out it's actually quite important how we decide to structure our frontier, how we add and how we remove our nodes. The frontier is a data structure and we need to make a choice about in what order are we going to be removing elements. And one of the simplest data structures for adding and removing elements is something called a stack. And a stack is a data structure that is a last in, first out data type, which means the last thing that I add to the frontier is going to be the first thing that I remove from the frontier. So the most recent thing to go into the stack or the frontier in this case is going to be the node that I explore. So let's see what happens if I apply this stackbased approach to something like this problem, finding a path from A to E. What's going to happen? Well, again, we'll start with A and we'll say, all right, let's go ahead and look at A first. And then notice this time, we've added A to the explored set. A is something we've now explored. We have this data structure that's keeping track. We then say from A, we can get to B. And all right, from B, what can we do? Well, from B, we can explore B and get to both C and D. So we added C and then D. So now, when we explore a node, we're going to treat the frontier as a stack, last in, first out. D was the last one to come in. So we'll go ahead and explore that next and say, all right, where can we get to from D? Well, we can get to F. And so all right, we'll put F into the frontier. And now, because the frontier is a stack, F is the most recent thing that's gone in the stack. So F is what we'll explore next. We'll explore F and say, all right, where can we get to from F? Well, we can't get anywhere, so nothing gets added to the frontier. So now, what was the new most recent thing added to the frontier? Well, it's now C, the only thing left in the frontier. We'll explore that from which we can see, all right, from C, we can get to E. So E goes into the frontier. And then we say, all right, let's look at E. And E is now the solution. And now, we've solved the problem. So when we treat the frontier like a stack, a last in, first out data structure, that's the result we get. We go from A to B to D to F. And then we sort of backed up and went down to C and then E. And it's important to get a visual sense for how this algorithm is working. We went very deep in this search tree, so to speak, all the way until the bottom where we hit a dead end. And then we effectively backed up and explored this other route that we didn't try before. And it's this going very deep in the search tree idea, this way the algorithm ends up working when we use a stack that we call this version of the algorithm depth first search. Depth first search is the search algorithm where we always explore the deepest node in the frontier. We keep going deeper and deeper through our search tree. And then if we hit a dead end, we back up and we try something else instead. But depth first search is just one of the possible search options that we could use. It turns out that there's another algorithm called breadth first search, which behaves very similarly to depth first search with one difference. Instead of always exploring the deepest node in the search tree, the way the depth first search does, breadth first search is always going to explore the shallowest node in the frontier. So what does that mean? Well, it means that instead of using a stack which depth first search or DFS used, where the most recent item added to the frontier is the one we'll explore next, in breadth first search or BFS, we'll instead use a queue, where a queue is a first in first out data type, where the very first thing we add to the frontier is the first one we'll explore and they effectively form a line or a queue, where the earlier you arrive in the frontier, the earlier you get explored. So what would that mean for the same exact problem, finding a path from A to E? Well, we start with A, same as before, then we'll go ahead and have explored A and say, where can we get to from A? Well, from A, we can get to B, same as before. From B, same as before, we can get to C and D. So C and D get added to the frontier. This time, though, we added C to the frontier before D. So we'll explore C first. So C gets explored. And from C, where can we get to? Well, we can get to E. So E gets added to the frontier. But because D was explored before E, we'll look at D next. So we'll explore D and say, where can we get to from D? We can get to F. And only then will we say, all right, now we can get to E. And so what breadth first search or BFS did is we started here, we looked at both C and D, and then we looked at E. Effectively, we're looking at things one away from the initial state, then two away from the initial state, and only then, things that are three away from the initial state, unlike depth first search, which just went as deep as possible into the search tree until it hit a dead end and then ultimately had to back up. So these now are two different search algorithms that we could apply in order to try and solve a problem. And let's take a look at how these would actually work in practice with something like maze solving, for example. So here's an example of a maze. These empty cells represent places where our agent can move. These darkened gray cells represent walls that the agent can't pass through. And ultimately, our agent, our AI, is going to try to find a way to get from position A to position B via some sequence of actions, where those actions are left, right, up, and down. What will depth first search do in this case? Well, depth first search will just follow one path. If it reaches a fork in the road where it has multiple different options, depth first search is just, in this case, going to choose one. That doesn't a real preference. But it's going to keep following one until it hits a dead end. And when it hits a dead end, depth first search effectively goes back to the last decision point and tries the other path, fully exhausting this entire path. And when it realizes that, OK, the goal is not here, then it turns its attention to this path. It goes as deep as possible. When it hits a dead end, it backs up and then tries this other path, keeps going as deep as possible down one particular path. And when it realizes that that's a dead end, then it'll back up, and then ultimately find its way to the goal. And maybe you got lucky, and maybe you made a different choice earlier on. But ultimately, this is how depth first search is going to work. It's going to keep following until it hits a dead end. And when it hits a dead end, it backs up and looks for a different solution. And so one thing you might reasonably ask is, is this algorithm always going to work? Will it always actually find a way to get from the initial state? To the goal. And it turns out that as long as our maze is finite, as long as there are only finitely many spaces where we can travel, then, yes, depth first search is going to find a solution. Because eventually, it'll just explore everything. If the maze happens to be infinite and there's an infinite state space, which does exist in certain types of problems, then it's a slightly different story. But as long as our maze has finitely many squares, we're going to find a solution. The next question, though, that we want to ask is, is it going to be a good solution? Is it the optimal solution that we can find? And the answer there is not necessarily. And let's take a look at an example of that. In this maze, for example, we're again trying to find our way from A to B. And you notice here there are multiple possible solutions. We could go this way or we could go up in order to make our way from A to B. Now, if we're lucky, depth first search will choose this way and get to B. But there's no reason necessarily why depth first search would choose between going up or going to the right. It's sort of an arbitrary decision point because both are going to be added to the frontier. And ultimately, if we get unlucky, depth first search might choose to explore this path first because it's just a random choice at this point. It'll explore, explore, explore. And it'll eventually find the goal, this particular path, when in actuality there was a better path. There was a more optimal solution that used fewer steps, assuming we're measuring the cost of a solution based on the number of steps that we need to take. So depth first search, if we're unlucky, might end up not finding the best solution when a better solution is available. So that's DFS, depth first search. How does BFS, or breadth first search, compare? How would it work in this particular situation? Well, the algorithm is going to look very different visually in terms of how BFS explores. Because BFS looks at shallower nodes first, the idea is going to be, BFS will first look at all of the nodes that are one away from the initial state. Look here and look here, for example, just at the two nodes that are immediately next to this initial state. Then it'll explore nodes that are two away, looking at this state and that state, for example. Then it'll explore nodes that are three away, this state and that state. Whereas depth first search just picked one path and kept following it, breadth first search, on the other hand, is taking the option of exploring all of the possible paths as kind of at the same time bouncing back between them, looking deeper and deeper at each one, but making sure to explore the shallower ones or the ones that are closer to the initial state earlier. So we'll keep following this pattern, looking at things that are four away, looking at things that are five away, looking at things that are six away, until eventually we make our way to the goal. And in this case, it's true we had to explore some states that ultimately didn't lead us anywhere, but the path that we found to the goal was the optimal path. This is the shortest way that we could get to the goal. And so what might happen then in a larger maze? Well, let's take a look at something like this and how breadth first search is going to behave. Well, breadth first search, again, we'll just keep following the states until it receives a decision point. It could go either left or right. And while DFS just picked one and kept following that until it hit a dead end, BFS, on the other hand, will explore both. It'll say look at this node, then this node, and it'll look at this node, then that node. So on and so forth. And when it hits a decision point here, rather than pick one left or two right and explore that path, it'll again explore both, alternating between them, going deeper and deeper. We'll explore here, and then maybe here and here, and then keep going. Explore here and slowly make our way, you can visually see, further and further out. Once we get to this decision point, we'll explore both up and down until ultimately we make our way to the goal. And what you'll notice is, yes, breadth first search did find our way from A to B by following this particular path, but it needed to explore a lot of states in order to do so. And so we see some trade offs here between DFS and BFS, that in DFS, there may be some cases where there is some memory savings as compared to a breadth first approach, where breadth first search in this case had to explore a lot of states. But maybe that won't always be the case. So now let's actually turn our attention to some code and look at the code that we could actually write in order to implement something like depth first search or breadth first search in the context of solving a maze, for example. So I'll go ahead and go into my terminal. And what I have here inside of maze.py is an implementation of this same idea of maze solving. I've defined a class called node that in this case is keeping track of the state, the parent, in other words, the state before the state, and the action. In this case, we're not keeping track of the path cost because we can calculate the cost of the path at the end after we found our way from the initial state to the goal. In addition to this, I've defined a class called a stack frontier. And if unfamiliar with a class, a class is a way for me to define a way to generate objects in Python. It refers to an idea of object oriented programming, where the idea here is that I would like to create an object that is able to store all of my frontier data. And I would like to have functions, otherwise known as methods, on that object that I can use to manipulate the object. And so what's going on here, if unfamiliar with the syntax, is I have a function that initially creates a frontier that I'm going to represent using a list. And initially, my frontier is represented by the empty list. There's nothing in my frontier to begin with. I have an add function that adds something to the frontier as by appending it to the end of the list. I have a function that checks if the frontier contains a particular state. I have an empty function that checks if the frontier is empty. If the frontier is empty, that just means the length of the frontier is 0. And then I have a function for removing something from the frontier. I can't remove something from the frontier if the frontier is empty, so I check for that first. But otherwise, if the frontier isn't empty, recall that I'm implementing this frontier as a stack, a last in first out data structure, which means the last thing I add to the frontier, in other words, the last thing in the list, is the item that I should remove from this frontier. So what you'll see here is I have removed the last item of a list. And if you index into a Python list with negative 1, that gets you the last item in the list. Since 0 is the first item, negative 1 kind of wraps around and gets you to the last item in the list. So we give that the node. We call that node. We update the frontier here on line 28 to say, go ahead and remove that node that you just removed from the frontier. And then we return the node as a result. So this class here effectively implements the idea of a frontier. It gives me a way to add something to a frontier and a way to remove something from the frontier as a stack. I've also, just for good measure, implemented an alternative version of the same thing called a queue frontier, which in parentheses you'll see here, it inherits from a stack frontier, meaning it's going to do all the same things that the stack frontier did, except the way we remove a node from the frontier is going to be slightly different. Instead of removing from the end of the list the way we would in a stack, we're instead going to remove from the beginning of the list. Self.frontier 0 will get me the first node in the frontier, the first one that was added, and that is going to be the one that we return in the case of a queue. Then under here, I have a definition of a class called maze. This is going to handle the process of taking a sequence, a mazelike text file, and figuring out how to solve it. So it will take as input a text file that looks something like this, for example, where we see hash marks that are here representing walls, and I have the character A representing the starting position and the character B representing the ending position. And you can take a look at the code for parsing this text file right now. That's the less interesting part. The more interesting part is this solve function here, the solve function is going to figure out how to actually get from point A to point B. And here we see an implementation of the exact same idea we saw from a moment ago. We're going to keep track of how many states we've explored, just so we can report that data later. But I start with a node that represents just the start state. And I start with a frontier that, in this case, is a stack frontier. And given that I'm treating my frontier as a stack, you might imagine that the algorithm I'm using here is now depthfirst search, because depthfirst search, or DFS, uses a stack as its data structure. And initially, this frontier is just going to contain the start state. We initialize an explored set that initially is empty. There's nothing we've explored so far. And now here's our loop, that notion of repeating something again and again. First, we check if the frontier is empty by calling that empty function that we saw the implementation of a moment ago. And if the frontier is indeed empty, we'll go ahead and raise an exception, or a Python error, to say, sorry, there is no solution to this problem. Otherwise, we'll go ahead and remove a node from the frontier as by calling frontier.remove and update the number of states we've explored, because now we've explored one additional state. So we say self.numexplored plus equals 1, adding 1 to the number of states we've explored. Once we remove a node from the frontier, recall that the next step is to see whether or not it's the goal, the goal test. And in the case of the maze, the goal is pretty easy. I check to see whether the state of the node is equal to the goal. Initially, when I set up the maze, I set up this value called goal, which is a property of the maze, so I can just check to see if the node is actually the goal. And if it is the goal, then what I want to do is backtrack my way towards figuring out what actions I took in order to get to this goal. And how do I do that? We'll recall that every node stores its parent, the node that came before it that we used to get to this node, and also the action used in order to get there. So I can create this loop where I'm constantly just looking at the parent of every node and keeping track for all of the parents what action I took to get from the parent to this current node. So this loop is going to keep repeating this process of looking through all of the parent nodes until we get back to the initial state, which has no parent, where node.parent is going to be equal to none. As I do so, I'm going to be building up the list of all of the actions that I'm following and the list of all the cells that are part of the solution. But I'll reverse them because when I build it up, going from the goal back to the initial state and building the sequence of actions from the goal to the initial state, but I want to reverse them in order to get the sequence of actions from the initial state to the goal. And that is ultimately going to be the solution. So all of that happens if the current state is equal to the goal. And otherwise, if it's not the goal, well, then I'll go ahead and add this state to the explored set to say, I've explored this state now. No need to go back to it if I come across it in the future. And then this logic here implements the idea of adding neighbors to the frontier. I'm saying, look at all of my neighbors, and I implemented a function called neighbors that you can take a look at. And for each of those neighbors, I'm going to check, is the state already in the frontier? Is the state already in the explored set? And if it's not in either of those, then I'll go ahead and add this new child node, this new node, to the frontier. So there's a fair amount of syntax here, but the key here is not to understand all the nuances of the syntax. So feel free to take a closer look at this file on your own to get a sense for how it is working. But the key is to see how this is an implementation of the same pseudocode, the same idea that we were describing a moment ago on the screen when we were looking at the steps that we might follow in order to solve this kind of search problem. So now let's actually see this in action. I'll go ahead and run maze.py on maze1.txt, for example. And what we'll see is here, we have a printout of what the maze initially looked like. And then here down below is after we've solved it. We had to explore 11 states in order to do it, and we found a path from A to B. And in this program, I just happened to generate a graphical representation of this as well. So I can open up maze.png, which is generated by this program, that shows you where in the darker color here are the walls, red is the initial state, green is the goal, and yellow is the path that was followed. We found a path from the initial state to the goal. But now let's take a look at a more sophisticated maze to see what might happen instead. Let's look now at maze2.txt. We're now here. We have a much larger maze. Again, we're trying to find our way from point A to point B. But now you'll imagine that depthfirst search might not be so lucky. It might not get the goal on the first try. It might have to follow one path, then backtrack and explore something else a little bit later. So let's try this. We'll run python maze.py of maze2.txt, this time trying on this other maze. And now, depthfirst search is able to find a solution. Here, as indicated by the stars, is a way to get from A to B. And we can represent this visually by opening up this maze. Here's what that maze looks like, and highlighted in yellow is the path that was found from the initial state to the goal. But how many states did we have to explore before we found that path? Well, recall that in my program, I was keeping track of the number of states that we've explored so far. And so I can go back to the terminal and see that, all right, in order to solve this problem, we had to explore 399 different states. And in fact, if I make one small modification of the program and tell the program at the end when we output this image, I added an argument called show explored. And if I set show explored equal to true and rerun this program, python maze.py, running it on maze2, and then I open the maze, what you'll see here is highlighted in red are all of the states that had to be explored to get from the initial state to the goal. Depthfirst search, or DFS, didn't find its way to the goal right away. It made a choice to first explore this direction. And when it explored this direction, it had to follow every conceivable path all the way to the very end, even this long and winding one, in order to realize that, you know what? That's a dead end. And instead, the program needed to backtrack. After going this direction, it must have gone this direction. It got lucky here by just not choosing this path, but it got unlucky here, exploring this direction, exploring a bunch of states it didn't need to, and then likewise exploring all of this top part of the graph when it probably didn't need to do that either. So all in all, depthfirst search here really not performing optimally, or probably exploring more states than it needs to. It finds an optimal solution, the best path to the goal, but the number of states needed to explore in order to do so, the number of steps I had to take, that was much higher. So let's compare. How would breadthfirst search, or BFS, do on this exact same maze instead? And in order to do so, it's a very easy change. The algorithm for DFS and BFS is identical with the exception of what data structure we use to represent the frontier, that in DFS, I used a stack frontier, last in, first out, whereas in BFS, I'm going to use a queue frontier, first in, first out, where the first thing I add to the frontier is the first thing that I remove. So I'll go back to the terminal, rerun this program on the same maze, and now you'll see that the number of states we had to explore was only 77 as compared to almost 400 when we used depthfirst search. And we can see exactly why. We can see what happened if we open up maze.png now and take a look. Again, yellow highlight is the solution that breadthfirst search found, which incidentally is the same solution that depthfirst search found. They're both finding the best solution. But notice all the white unexplored cells. There was much fewer states that needed to be explored in order to make our way to the goal because breadthfirst search operates a little more shallowly. It's exploring things that are close to the initial state without exploring things that are further away. So if the goal is not too far away, then breadthfirst search can actually behave quite effectively on a maze that looks a little something like this. Now, in this case, both BFS and DFS ended up finding the same solution, but that won't always be the case. And in fact, let's take a look at one more example. For instance, maze3.txt. In maze3.txt, notice that here there are multiple ways that you could get from A to B. It's a relatively small maze, but let's look at what happens. If I use, and I'll go ahead and turn off show explored so we just see the solution. If I use BFS, breadthfirst search, to solve maze3.txt, well, then we find a solution, and if I open up the maze, here is the solution that we found. It is the optimal one. With just four steps, we can get from the initial state to what the goal happens to be. But what happens if we tried to use depthfirst search or DFS instead? Well, again, I'll go back up to my Q frontier, where Q frontier means that we're using breadthfirst search, and I'll change it to a stack frontier, which means that now we'll be using depthfirst search. I'll rerun pythonmaze.py, and now you'll see that we find the solution, but it is not the optimal solution. This instead is what our algorithm finds, and maybe depthfirst search would have found the solution. It's possible, but it's not guaranteed that if we just happen to be unlucky, if we choose this state instead of that state, then depthfirst search might find a longer route to get from the initial state to the goal. So we do see some tradeoffs here, where depthfirst search might not find the optimal solution. So at that point, it seems like breadthfirst search is pretty good. Is that the best we can do, where it's going to find us the optimal solution, and we don't have to worry about situations where we might end up finding a longer path to the solution than what actually exists? Where the goal is far away from the initial state, and we might have to take lots of steps in order to get from the initial state to the goal, what ended up happening is that this algorithm, BFS, ended up exploring basically the entire graph, having to go through the entire maze in order to find its way from the initial state to the goal state. What we'd ultimately like is for our algorithm to be a little bit more intelligent. And now what would it mean for our algorithm to be a little bit more intelligent in this case? Well, let's look back to where breadthfirst search might have been able to make a different decision and consider human intuition in this process as well. What might a human do when solving this maze that is different than what BFS ultimately chose to do? Well, the very first decision point that BFS made was right here, when it made five steps and ended up in a position where it had a fork in the row. It could either go left or it could go right. In these initial couple steps, there was no choice. There was only one action that could be taken from each of those states. And so the search algorithm did the only thing that any search algorithm could do, which is keep following that state after the next state. But this decision point is where things get a little bit interesting. Depthfirst search, that very first search algorithm we looked at, chose to say, let's pick one path and exhaust that path. See if anything that way has the goal. And if not, then let's try the other way. Depthfirst search took the alternative approach of saying, you know what, let's explore things that are shallow, close to us first. Look left and right, then back left and back right, so on and so forth, alternating between our options in the hopes of finding something nearby. But ultimately, what might a human do if confronted with a situation like this of go left or go right? Well, a human might visually see that, all right, I'm trying to get to state b, which is way up there, and going right just feels like it's closer to the goal. It feels like going right should be better than going left because I'm making progress towards getting to that goal. Now, of course, there are a couple of assumptions that I'm making here. I'm making the assumption that we can represent this grid as like a twodimensional grid where I know the coordinates of everything. I know that a is in coordinate 0, 0, and b is in some other coordinate pair, and I know what coordinate I'm at now. So I can calculate that, yeah, going this way, that is closer to the goal. And that might be a reasonable assumption for some types of search problems, but maybe not in others. But for now, we'll go ahead and assume that, that I know what my current coordinate pair is, and I know the coordinate, x, y, of the goal that I'm trying to get to. And in this situation, I'd like an algorithm that is a little bit more intelligent, that somehow knows that I should be making progress towards the goal, and this is probably the way to do that because in a maze, moving in the coordinate direction of the goal is usually, though not always, a good thing. And so here we draw a distinction between two different types of search algorithms, uninformed search and informed search. Uninformed search algorithms are algorithms like DFS and BFS, the two algorithms that we just looked at, which are search strategies that don't use any problemspecific knowledge to be able to solve the problem. DFS and BFS didn't really care about the structure of the maze or anything about the way that a maze is in order to solve the problem. They just look at the actions available and choose from those actions, and it doesn't matter whether it's a maze or some other problem, the solution or the way that it tries to solve the problem is really fundamentally going to be the same. What we're going to take a look at now is an improvement upon uninformed search. We're going to take a look at informed search. Informed search are going to be search strategies that use knowledge specific to the problem to be able to better find a solution. And in the case of a maze, this problemspecific knowledge is something like if I'm in a square that is geographically closer to the goal, that is better than being in a square that is geographically further away. And this is something we can only know by thinking about this problem and reasoning about what knowledge might be helpful for our AI agent to know a little something about. There are a number of different types of informed search. Specifically, first, we're going to look at a particular type of search algorithm called greedy bestfirst search. Greedy bestfirst search, often abbreviated GBFS, is a search algorithm that instead of expanding the deepest node like DFS or the shallowest node like BFS, this algorithm is always going to expand the node that it thinks is closest to the goal. Now, the search algorithm isn't going to know for sure whether it is the closest thing to the goal. Because if we knew what was closest to the goal all the time, then we would already have a solution. The knowledge of what is close to the goal, we could just follow those steps in order to get from the initial position to the solution. But if we don't know the solution, meaning we don't know exactly what's closest to the goal, instead we can use an estimate of what's closest to the goal, otherwise known as a heuristic, just some way of estimating whether or not we're close to the goal. And we'll do so using a heuristic function conventionally called h of n that takes a status input and returns our estimate of how close we are to the goal. So what might this heuristic function actually look like in the case of a maze solving algorithm? Where we're trying to solve a maze, what does the heuristic look like? Well, the heuristic needs to answer a question between these two cells, C and D, which one is better? Which one would I rather be in if I'm trying to find my way to the goal? Well, any human could probably look at this and tell you, you know what, D looks like it's better. Even if the maze is convoluted and you haven't thought about all the walls, D is probably better. And why is D better? Well, because if you ignore the wall, so let's just pretend the walls don't exist for a moment and relax the problem, so to speak, D, just in terms of coordinate pairs, is closer to this goal. It's fewer steps that I wouldn't take to get to the goal as compared to C, even if you ignore the walls. If you just know the xycoordinate of C and the xycoordinate of the goal, and likewise you know the xycoordinate of D, you can calculate the D just geographically. Ignoring the walls looks like it's better. And so this is the heuristic function that we're going to use. And it's something called the Manhattan distance, one specific type of heuristic, where the heuristic is how many squares vertically and horizontally and then left to right, so not allowing myself to go diagonally, just either up or right or left or down. How many steps do I need to take to get from each of these cells to the goal? Well, as it turns out, D is much closer. There are fewer steps. It only needs to take six steps in order to get to that goal. Again, here, ignoring the walls. We've relaxed the problem a little bit. We're just concerned with if you do the math to subtract the x values from each other and the y values from each other, what is our estimate of how far we are away? We can estimate the D is closer to the goal than C is. And so now we have an approach. We have a way of picking which node to remove from the frontier. And at each stage in our algorithm, we're going to remove a node from the frontier. We're going to explore the node if it has the smallest value for this heuristic function, if it has the smallest Manhattan distance to the goal. And so what would this actually look like? Well, let me first label this graph, label this maze, with a number representing the value of this heuristic function, the value of the Manhattan distance from any of these cells. So from this cell, for example, we're one away from the goal. From this cell, we're two away from the goal, three away, four away. Here, we're five away because we have to go one to the right and then four up. From somewhere like here, the Manhattan distance is two. We're only two squares away from the goal geographically, even though in practice, we're going to have to take a longer path. But we don't know that yet. The heuristic is just some easy way to estimate how far we are away from the goal. And maybe our heuristic is overly optimistic. It thinks that, yeah, we're only two steps away. When in practice, when you consider the walls, it might be more steps. So the important thing here is that the heuristic isn't a guarantee of how many steps it's going to take. It is estimating. It's an attempt at trying to approximate. And it does seem generally the case that the squares that look closer to the goal have smaller values for the heuristic function than squares that are further away. So now, using greedy bestfirst search, what might this algorithm actually do? Well, again, for these first five steps, there's not much of a choice. We start at this initial state a, and we say, all right, we have to explore these five states. But now we have a decision point. Now we have a choice between going left and going right. And before, when DFS and BFS would just pick arbitrarily, because it just depends on the order you throw these two nodes into the frontier, and we didn't specify what order you put them into the frontier, only the order you take them out, here we can look at 13 and 11 and say that, all right, this square is a distance of 11 away from the goal according to our heuristic, according to our estimate. And this one, we estimate to be 13 away from the goal. So between those two options, between these two choices, I'd rather have the 11. I'd rather be 11 steps away from the goal, so I'll go to the right. We're able to make an informed decision, because we know a little something more about this problem. So then we keep following, 10, 9, 8. Between the two 7s, we don't really have much of a way to know between those. So then we do just have to make an arbitrary choice. And you know what, maybe we choose wrong. But that's OK, because now we can still say, all right, let's try this 7. We say 7, 6, we have to make this choice, even though it increases the value of the heuristic function. But now we have another decision point, between 6 and 8, and between those two. And really, we're also considering this 13, but that's much higher. Between 6, 8, and 13, well, the 6 is the smallest value, so we'd rather take the 6. We're able to make an informed decision that going this way to the right is probably better than going down. So we turn this way, we go to 5. And now we find a decision point where we'll actually make a decision that we might not want to make, but there's unfortunately not too much of a way around this. We see 4 and 6. 4 looks closer to the goal, right? It's going up, and the goal is further up. So we end up taking that route, which ultimately leads us to a dead end. But that's OK, because we can still say, all right, now let's try the 6. And now follow this route that will ultimately lead us to the goal. And so this now is how greedy bestforsearch might try to approach this problem by saying, whenever we have a decision between multiple nodes that we could explore, let's explore the node that has the smallest value of h of n, this heuristic function that is estimating how far I have to go. And it just so happens that in this case, we end up doing better in terms of the number of states we needed to explore than BFS needed to. BFS explored all of this section and all of that section, but we were able to eliminate that by taking advantage of this heuristic, this knowledge about how close we are to the goal or some estimate of that idea. So this seems much better. So wouldn't we always prefer an algorithm like this over an algorithm like breadthfirst search? Well, maybe one thing to take into consideration is that we need to come up with a good heuristic, how good the heuristic is, is going to affect how good this algorithm is. And coming up with a good heuristic can oftentimes be challenging. But the other thing to consider is to ask the question, just as we did with the prior two algorithms, is this algorithm optimal? Will it always find the shortest path from the initial state to the goal? And to answer that question, let's take a look at this example for a moment. Take a look at this example. Again, we're trying to get from A to B. And again, I've labeled each of the cells with their Manhattan distance from the goal. The number of squares up and to the right, you would need to travel in order to get from that square to the goal. And let's think about, would greedy bestfirst search that always picks the smallest number end up finding the optimal solution? What is the shortest solution? And would this algorithm find it? And the important thing to realize is that right here is the decision point. We're estimated to be 12 away from the goal. And we have two choices. We can go to the left, which we estimate to be 13 away from the goal. Or we can go up, where we estimate it to be 11 away from the goal. And between those two, greedy bestfirst search is going to say the 11 looks better than the 13. And in doing so, greedy bestfirst search will end up finding this path to the goal. But it turns out this path is not optimal. There is a way to get to the goal using fewer steps. And it's actually this way, this way that ultimately involved fewer steps, even though it meant at this moment choosing the worst option between the two or what we estimated to be the worst option based on the heuristics. And so this is what we mean by this is a greedy algorithm. It's making the best decision locally. At this decision point, it looks like it's better to go here than it is to go to the 13. But in the big picture, it's not necessarily optimal. That it might find a solution when in actuality, there was a better solution available. So we would like some way to solve this problem. We like the idea of this heuristic, of being able to estimate the path, the distance between us and the goal. And that helps us to be able to make better decisions and to eliminate having to search through entire parts of this state space. But we would like to modify the algorithm so that we can achieve optimality, so that it can be optimal. And what is the way to do this? What is the intuition here? Well, let's take a look at this problem. In this initial problem, greedy best research found us this solution here, this long path. And the reason why it wasn't great is because, yes, the heuristic numbers went down pretty low. But later on, they started to build back up. They built back 8, 9, 10, 11, all the way up to 12 in this case. And so how might we go about trying to improve this algorithm? Well, one thing that we might realize is that if we go all the way through this algorithm, through this path, and we end up going to the 12, and we've had to take this many steps, who knows how many steps that is, just to get to this 12, we could have also, as an alternative, taken much fewer steps, just six steps, and ended up at this 13 here. And yes, 13 is more than 12, so it looks like it's not as good. But it required far fewer steps. It only took six steps to get to this 13 versus many more steps to get to this 12. And while greedy best research says, oh, well, 12 is better than 13, so pick the 12, we might more intelligently say, I'd rather be somewhere that heuristically looks like it takes slightly longer if I can get there much more quickly. And we're going to encode that idea, this general idea, into a more formal algorithm known as A star search. A star search is going to solve this problem by instead of just considering the heuristic, also considering how long it took us to get to any particular state. So the distinction is greedy best for search. If I am in a state right now, the only thing I care about is, what is the estimated distance, the heuristic value, between me and the goal? Whereas A star search will take into consideration two pieces of information. It'll take into consideration, how far do I estimate I am from the goal? But also, how far did I have to travel in order to get here? Because that is relevant, too. So we'll search algorithms by expanding the node with the lowest value of g of n plus h of n. h of n is that same heuristic that we were talking about a moment ago that's going to vary based on the problem. But g of n is going to be the cost to reach the node, how many steps I had to take, in this case, to get to my current position. So what does that search algorithm look like in practice? Well, let's take a look. Again, we've got the same maze. And again, I've labeled them with their Manhattan distance. This value is the h of n value, the heuristic estimate of how far each of these squares is away from the goal. But now, as we begin to explore states, we care not just about this heuristic value, but also about g of n, the number of steps I had to take in order to get there. And I care about summing those two numbers together. So what does that look like? On this very first step, I have taken one step. And now I am estimated to be 16 steps away from the goal. So the total value here is 17. Then I take one more step. I've now taken two steps. And I estimate myself to be 15 away from the goal, again, a total value of 17. Now I've taken three steps. And I'm estimated to be 14 away from the goal, so on and so forth. Four steps, an estimate of 13. Five steps, estimate of 12. And now here's a decision point. I could either be six steps away from the goal with a heuristic of 13 for a total of 19, or I could be six steps away from the goal with a heuristic of 11 with an estimate of 17 for the total. So between 19 and 17, I'd rather take the 17, the 6 plus 11. So so far, no different than what we saw before. We're still taking this option because it appears to be better. And I keep taking this option because it appears to be better. But it's right about here that things get a little bit different. Now I could be 15 steps away from the goal with an estimated distance of 6. So 15 plus 6, total value of 21. Alternatively, I could be six steps away from the goal, because this is five steps away, so this is six steps away, with a total value of 13 as my estimate. So 6 plus 13, that's 19. So here, we would evaluate g of n plus h of n to be 19, 6 plus 13. Whereas here, we would be 15 plus 6, or 21. And so the intuition is 19 less than 21, pick here. But the idea is ultimately I'd rather be having taken fewer steps, get to a 13, than having taken 15 steps and be at a 6, because it means I've had to take more steps in order to get there. Maybe there's a better path this way. So instead, we'll explore this route. Now if we go one more, this is seven steps plus 14 is 21. So between those two, it's sort of a tossup. We might end up exploring that one anyways. But after that, as these numbers start to get bigger in the heuristic values, and these heuristic values start to get smaller, you'll find that we'll actually keep exploring down this path. And you can do the math to see that at every decision point, A star search is going to make a choice based on the sum of how many steps it took me to get to my current position, and then how far I estimate I am from the goal. So while we did have to explore some of these states, the ultimate solution we found was, in fact, an optimal solution. It did find us the quickest possible way to get from the initial state to the goal. And it turns out that A star is an optimal search algorithm under certain conditions. So the conditions are H of n, my heuristic, needs to be admissible. What does it mean for a heuristic to be admissible? Well, a heuristic is admissible if it never overestimates the true cost. H of n always needs to either get it exactly right in terms of how far away I am, or it needs to underestimate. So we saw an example from before where the heuristic value was much smaller than the actual cost it would take. That's totally fine, but the heuristic value should never overestimate. It should never think that I'm further away from the goal than I actually am. And meanwhile, to make a stronger statement, H of n also needs to be consistent. And what does it mean for it to be consistent? Mathematically, it means that for every node, which we'll call n, and successor, the node after me, that I'll call n prime, where it takes a cost of C to make that step, the heuristic value of n needs to be less than or equal to the heuristic value of n prime plus the cost. So it's a lot of math, but in words what that ultimately means is that if I am here at this state right now, the heuristic value from me to the goal shouldn't be more than the heuristic value of my successor, the next place I could go to, plus however much it would cost me to just make that step from one step to the next step. And so this is just making sure that my heuristic is consistent between all of these steps that I might take. So as long as this is true, then A star search is going to find me an optimal solution. And this is where much of the challenge of solving these search problems can sometimes come in, that A star search is an algorithm that is known and you could write the code fairly easily, but it's choosing the heuristic. It can be the interesting challenge. The better the heuristic is, the better I'll be able to solve the problem in the fewer states that I'll have to explore. And I need to make sure that the heuristic satisfies these particular constraints. So all in all, these are some of the examples of search algorithms that might work, and certainly there are many more than just this. A star, for example, does have a tendency to use quite a bit of memory. So there are alternative approaches to A star that ultimately use less memory than this version of A star happens to use, and there are other search algorithms that are optimized for other cases as well. But now so far, we've only been looking at search algorithms where there is one agent. I am trying to find a solution to a problem. I am trying to navigate my way through a maze. I am trying to solve a 15 puzzle. I am trying to find driving directions from point A to point B. Sometimes in search situations, though, we'll enter an adversarial situation, where I am an agent trying to make intelligent decisions. And there's someone else who is fighting against me, so to speak, that has opposite objectives, someone where I am trying to succeed, someone else that wants me to fail. And this is most popular in something like a game, a game like Tic Tac Toe, where we've got this 3 by 3 grid, and x and o take turns, either writing an x or an o in any one of these squares. And the goal is to get three x's in a row if you're the x player, or three o's in a row if you're the o player. And computers have gotten quite good at playing games, Tic Tac Toe very easily, but even more complex games. And so you might imagine, what does an intelligent decision in a game look like? So maybe x makes an initial move in the middle, and o plays up here. What does an intelligent move for x now become? Where should you move if you were x? And it turns out there are a couple of possibilities. But if an AI is playing this game optimally, then the AI might play somewhere like the upper right, where in this situation, o has the opposite objective of x. x is trying to win the game to get three in a row diagonally here. And o is trying to stop that objective, opposite of the objective. And so o is going to place here to try to block. But now, x has a pretty clever move. x can make a move like this, where now x has two possible ways that x can win the game. x could win the game by getting three in a row across here. Or x could win the game by getting three in a row vertically this way. So it doesn't matter where o makes their next move. o could play here, for example, blocking the three in a row horizontally. But then x is going to win the game by getting a three in a row vertically. And so there's a fair amount of reasoning that's going on here in order for the computer to be able to solve a problem. And it's similar in spirit to the problems we've looked at so far. There are actions. There's some sort of state of the board and some transition from one action to the next. But it's different in the sense that this is now not just a classical search problem, but an adversarial search problem. That I am at the x player trying to find the best moves to make, but I know that there is some adversary that is trying to stop me. So we need some sort of algorithm to deal with these adversarial type of search situations. And the algorithm we're going to take a look at is an algorithm called Minimax, which works very well for these deterministic games where there are two players. It can work for other types of games as well. But we'll look right now at games where I make a move, then my opponent makes a move. And I am trying to win, and my opponent is trying to win also. Or in other words, my opponent is trying to get me to lose. And so what do we need in order to make this algorithm work? Well, any time we try and translate this human concept of playing a game, winning and losing to a computer, we want to translate it in terms that the computer can understand. And ultimately, the computer really just understands the numbers. And so we want some way of translating a game of x's and o's on a grid to something numerical, something the computer can understand. The computer doesn't normally understand notions of win or lose. But it does understand the concept of bigger and smaller. And so what we might do is we might take each of the possible ways that a tictactoe game can unfold and assign a value or a utility to each one of those possible ways. And in a tictactoe game, and in many types of games, there are three possible outcomes. The outcomes are o wins, x wins, or nobody wins. So player one wins, player two wins, or nobody wins. And for now, let's go ahead and assign each of these possible outcomes a different value. We'll say o winning, that'll have a value of negative 1. Nobody winning, that'll have a value of 0. And x winning, that will have a value of 1. So we've just assigned numbers to each of these three possible outcomes. And now we have two players, we have the x player and the o player. And we're going to go ahead and call the x player the max player. And we'll call the o player the min player. And the reason why is because in the min and max algorithm, the max player, which in this case is x, is aiming to maximize the score. These are the possible options for the score, negative 1, 0, and 1. x wants to maximize the score, meaning if at all possible, x would like this situation, where x wins the game, and we give it a score of 1. But if this isn't possible, if x needs to choose between these two options, negative 1, meaning o winning, or 0, meaning nobody winning, x would rather that nobody wins, score of 0, than a score of negative 1, o winning. So this notion of winning and losing and tying has been reduced mathematically to just this idea of try and maximize the score. The x player always wants the score to be bigger. And on the flip side, the min player, in this case o, is aiming to minimize the score. The o player wants the score to be as small as possible. So now we've taken this game of x's and o's and winning and losing and turned it into something mathematical, something where x is trying to maximize the score, o is trying to minimize the score. Let's now look at all of the parts of the game that we need in order to encode it in an AI so that an AI can play a game like tictactoe. So the game is going to need a couple of things. We'll need some sort of initial state that will, in this case, call s0, which is how the game begins, like an empty tictactoe board, for example. We'll also need a function called player, where the player function is going to take as input a state here represented by s. And the output of the player function is going to be which player's turn is it. We need to be able to give a tictactoe board to the computer, run it through a function, and that function tells us whose turn it is. We'll need some notion of actions that we can take. We'll see examples of that in just a moment. We need some notion of a transition model, same as before. If I have a state and I take an action, I need to know what results as a consequence of it. I need some way of knowing when the game is over. So this is equivalent to kind of like a goal test, but I need some terminal test, some way to check to see if a state is a terminal state, where a terminal state means the game is over. In a classic game of tictactoe, a terminal state means either someone has gotten three in a row or all of the squares of the tictactoe board are filled. Either of those conditions make it a terminal state. In a game of chess, it might be something like when there is checkmate or if checkmate is no longer possible, that that becomes a terminal state. And then finally, we'll need a utility function, a function that takes a state and gives us a numerical value for that terminal state, some way of saying if x wins the game, that has a value of 1. If o is won the game, that has a value of negative 1. If nobody has won the game, that has a value of 0. So let's take a look at each of these in turn. The initial state, we can just represent in tictactoe as the empty game board. This is where we begin. It's the place from which we begin this search. And again, I'll be representing these things visually, but you can imagine this really just being like an array or a twodimensional array of all of these possible squares. Then we need the player function that, again, takes a state and tells us whose turn it is. Assuming x makes the first move, if I have an empty game board, then my player function is going to return x. And if I have a game board where x has made a move, then my player function is going to return o. The player function takes a tictactoe game board and tells us whose turn it is. Next up, we'll consider the actions function. The actions function, much like it did in classical search, takes a state and gives us the set of all of the possible actions we can take in that state. So let's imagine it's o is turned to move in a game board that looks like this. What happens when we pass it into the actions function? So the actions function takes this state of the game as input, and the output is a set of possible actions. It's a set of I could move in the upper left or I could move in the bottom middle. So those are the two possible action choices that I have when I begin in this particular state. Now, just as before, when we had states and actions, we need some sort of transition model to tell us when we take this action in the state, what is the new state that we get. And here, we define that using the result function that takes a state as input as well as an action. And when we apply the result function to this state, saying that let's let o move in this upper left corner, the new state we get is this resulting state where o is in the upper left corner. And now, this seems obvious to someone who knows how to play tictactoe. Of course, you play in the upper left corner. That's the board you get. But all of this information needs to be encoded into the AI. The AI doesn't know how to play tictactoe until you tell the AI how the rules of tictactoe work. And this function, defining this function here, allows us to tell the AI how this game actually works and how actions actually affect the outcome of the game. So the AI needs to know how the game works. The AI also needs to know when the game is over, as by defining a function called terminal that takes as input a state s, such that if we take a game that is not yet over, pass it into the terminal function, the output is false. The game is not over. But if we take a game that is over because x has gotten three in a row along that diagonal, pass that into the terminal function, then the output is going to be true because the game now is, in fact, over. And finally, we've told the AI how the game works in terms of what moves can be made and what happens when you make those moves. We've told the AI when the game is over. Now we need to tell the AI what the value of each of those states is. And we do that by defining this utility function that takes a state s and tells us the score or the utility of that state. So again, we said that if x wins the game, that utility is a value of 1, whereas if o wins the game, then the utility of that is negative 1. And the AI needs to know, for each of these terminal states where the game is over, what is the utility of that state? So if I give you a game board like this where the game is, in fact, over, and I ask the AI to tell me what the value of that state is, it could do so. The value of the state is 1. Where things get interesting, though, is if the game is not yet over. Let's imagine a game board like this, where in the middle of the game, it's o's turn to make a move. So how do we know it's o's turn to make a move? We can calculate that using the player function. We can say player of s, pass in the state, o is the answer. So we know it's o's turn to move. And now, what is the value of this board and what action should o take? Well, that's going to depend. We have to do some calculation here. And this is where the minimax algorithm really comes in. Recall that x is trying to maximize the score, which means that o is trying to minimize the score. So o would like to minimize the total value that we get at the end of the game. And because this game isn't over yet, we don't really know just yet what the value of this game board is. We have to do some calculation in order to figure that out. And so how do we do that kind of calculation? Well, in order to do so, we're going to consider, just as we might in a classical search situation, what actions could happen next and what states will that take us to. And it turns out that in this position, there are only two open squares, which means there are only two open places where o can make a move. o could either make a move in the upper left or o can make a move in the bottom middle. And minimax doesn't know right out of the box which of those moves is going to be better. So it's going to consider both. But now, we sort of run into the same situation. Now, I have two more game boards, neither of which is over. What happens next? And now, it's in this sense that minimax is what we'll call a recursive algorithm. It's going to now repeat the exact same process, although now considering it from the opposite perspective. It's as if I am now going to put myself, if I am the o player, I'm going to put myself in my opponent's shoes, my opponent as the x player, and consider what would my opponent do if they were in this position? What would my opponent do, the x player, if they were in that position? And what would then happen? Well, the other player, my opponent, the x player, is trying to maximize the score, whereas I am trying to minimize the score as the o player. So x is trying to find the maximum possible value that they can get. And so what's going to happen? Well, from this board position, x only has one choice. x is going to play here, and they're going to get three in a row. And we know that that board, x winning, that has a value of 1. If x wins the game, the value of that game board is 1. And so from this position, if this state can only ever lead to this state, it's the only possible option, and this state has a value of 1, then the maximum possible value that the x player can get from this game board is also 1. From here, the only place we can get is to a game with a value of 1, so this game board also has a value of 1. Now we consider this one over here. What's going to happen now? Well, x needs to make a move. The only move x can make is in the upper left, so x will go there. And in this game, no one wins the game. Nobody has three in a row. And so the value of that game board is 0. Nobody is 1. And so again, by the same logic, if from this board position the only place we can get to is a board where the value is 0, then this state must also have a value of 0. And now here comes the choice part, the idea of trying to minimize. I, as the o player, now know that if I make this choice moving in the upper left, that is going to result in a game with a value of 1, assuming everyone plays optimally. And if I instead play in the lower middle, choose this fork in the road, that is going to result in a game board with a value of 0. I have two options. I have a 1 and a 0 to choose from, and I need to pick. And as the min player, I would rather choose the option with the minimum value. So whenever a player has multiple choices, the min player will choose the option with the smallest value. The max player will choose the option with the largest value. Between the 1 and the 0, the 0 is smaller, meaning I'd rather tie the game than lose the game. And so this game board will say also has a value of 0, because if I am playing optimally, I will pick this fork in the road. I'll place my o here to block x's 3 in a row, x will move in the upper left, and the game will be over, and no one will have won the game. So this is now the logic of minimax, to consider all of the possible options that I can take, all of the actions that I can take, and then to put myself in my opponent's shoes. I decide what move I'm going to make now by considering what move my opponent will make on the next turn. And to do that, I consider what move I would make on the turn after that, so on and so forth, until I get all the way down to the end of the game, to one of these socalled terminal states. In fact, this very decision point, where I am trying to decide as the o player what to make a decision about, might have just been a part of the logic that the x player, my opponent, was using, the move before me. This might be part of some larger tree, where x is trying to make a move in this situation, and needs to pick between three different options in order to make a decision about what to happen. And the further and further away we are from the end of the game, the deeper this tree has to go. Because every level in this tree is going to correspond to one move, one move or action that I take, one move or action that my opponent takes, in order to decide what happens. And in fact, it turns out that if I am the x player in this position, and I recursively do the logic, and see I have a choice, three choices, in fact, one of which leads to a value of 0. If I play here, and if everyone plays optimally, the game will be a tie. If I play here, then o is going to win, and I'll lose playing optimally. Or here, where I, the x player, can win, well between a score of 0, and negative 1, and 1, I'd rather pick the board with a value of 1, because that's the maximum value I can get. And so this board would also have a maximum value of 1. And so this tree can get very, very deep, especially as the game starts to have more and more moves. And this logic works not just for tictactoe, but any of these sorts of games, where I make a move, my opponent makes a move, and ultimately, we have these adversarial objectives. And we can simplify the diagram into a diagram that looks like this. This is a more abstract version of the minimax tree, where these are each states, but I'm no longer representing them as exactly like tictactoe boards. This is just representing some generic game that might be tictactoe, might be some other game altogether. Any of these green arrows that are pointing up, that represents a maximizing state. I would like the score to be as big as possible. And any of these red arrows pointing down, those are minimizing states, where the player is the min player, and they are trying to make the score as small as possible. So if you imagine in this situation, I am the maximizing player, this player here, and I have three choices. One choice gives me a score of 5, one choice gives me a score of 3, and one choice gives me a score of 9. Well, then between those three choices, my best option is to choose this 9 over here, the score that maximizes my options out of all the three options. And so I can give this state a value of 9, because among my three options, that is the best choice that I have available to me. So that's my decision now. You imagine it's like one move away from the end of the game. But then you could also ask a reasonable question, what might my opponent do two moves away from the end of the game? My opponent is the minimizing player. They are trying to make the score as small as possible. Imagine what would have happened if they had to pick which choice to make. One choice leads us to this state, where I, the maximizing player, am going to opt for 9, the biggest score that I can get. And 1 leads to this state, where I, the maximizing player, would choose 8, which is then the largest score that I can get. Now the minimizing player, forced to choose between a 9 or an 8, is going to choose the smallest possible score, which in this case is an 8. And that is then how this process would unfold, that the minimizing player in this case considers both of their options, and then all of the options that would happen as a result of that. So this now is a general picture of what the minimax algorithm looks like. Let's now try to formalize it using a little bit of pseudocode. So what exactly is happening in the minimax algorithm? Well, given a state s, we need to decide what to happen. The max player, if it's max's player's turn, then max is going to pick an action a in actions of s. Recall that actions is a function that takes a state and gives me back all of the possible actions that I can take. It tells me all of the moves that are possible. The max player is going to specifically pick an action a in this set of actions that gives me the highest value of min value of result of s and a. So what does that mean? Well, it means that I want to make the option that gives me the highest score of all of the actions a. But what score is that going to have? To calculate that, I need to know what my opponent, the min player, is going to do if they try to minimize the value of the state that results. So we say, what state results after I take this action? And what happens when the min player tries to minimize the value of that state? I consider that for all of my possible options. And after I've considered that for all of my possible options, I pick the action a that has the highest value. Likewise, the min player is going to do the same thing but backwards. They're also going to consider what are all of the possible actions they can take if it's their turn. And they're going to pick the action a that has the smallest possible value of all the options. And the way they know what the smallest possible value of all the options is is by considering what the max player is going to do by saying, what's the result of applying this action to the current state? And then what would the max player try to do? What value would the max player calculate for that particular state? So everyone makes their decision based on trying to estimate what the other person would do. And now we need to turn our attention to these two functions, max value and min value. How do you actually calculate the value of a state if you're trying to maximize its value? And how do you calculate the value of a state if you're trying to minimize the value? If you can do that, then we have an entire implementation of this min and max algorithm. So let's try it. Let's try and implement this max value function that takes a state and returns as output the value of that state if I'm trying to maximize the value of the state. Well, the first thing I can check for is to see if the game is over. Because if the game is over, in other words, if the state is a terminal state, then this is easy. I already have this utility function that tells me what the value of the board is. If the game is over, I just check, did x win, did o win, is it a tie? And this utility function just knows what the value of the state is. What's trickier is if the game isn't over. Because then I need to do this recursive reasoning about thinking, what is my opponent going to do on the next move? And I want to calculate the value of this state. And I want the value of the state to be as high as possible. And I'll keep track of that value in a variable called v. And if I want the value to be as high as possible, I need to give v an initial value. And initially, I'll just go ahead and set it to be as low as possible. Because I don't know what options are available to me yet. So initially, I'll set v equal to negative infinity, which seems a little bit strange. But the idea here is I want the value initially to be as low as possible. Because as I consider my actions, I'm always going to try and do better than v. And if I set v to negative infinity, I know I can always do better than that. So now I consider my actions. And this is going to be some kind of loop where for every action in actions of state, recall actions as a function that takes my state and gives me all the possible actions that I can use in that state. So for each one of those actions, I want to compare it to v and say, all right, v is going to be equal to the maximum of v and this expression. So what is this expression? Well, first it is get the result of taking the action in the state and then get the min value of that. In other words, let's say I want to find out from that state what is the best that the min player can do because they're going to try and minimize the score. So whatever the resulting score is of the min value of that state, compare it to my current best value and just pick the maximum of those two because I am trying to maximize the value. In short, what these three lines of code are doing are going through all of my possible actions and asking the question, how do I maximize the score given what my opponent is going to try to do? After this entire loop, I can just return v and that is now the value of that particular state. And for the min player, it's the exact opposite of this, the same logic just backwards. To calculate the minimum value of a state, first we check if it's a terminal state. If it is, we return its utility. Otherwise, we're going to now try to minimize the value of the state given all of my possible actions. So I need an initial value for v, the value of the state. And initially, I'll set it to infinity because I know I can always get something less than infinity. So by starting with v equals infinity, I make sure that the very first action I find, that will be less than this value of v. And then I do the same thing, loop over all of my possible actions. And for each of the results that we could get when the max player makes their decision, let's take the minimum of that and the current value of v. So after all is said and done, I get the smallest possible value of v that I then return back to the user. So that, in effect, is the pseudocode for Minimax. That is how we take a gain and figure out what the best move to make is by recursively using these max value and min value functions, where max value calls min value, min value calls max value back and forth, all the way until we reach a terminal state, at which point our algorithm can simply return the utility of that particular state. So what you might imagine is that this is going to start to be a long process, especially as games start to get more complex, as we start to add more moves and more possible options and games that might last quite a bit longer. So the next question to ask is, what sort of optimizations can we make here? How can we do better in order to use less space or take less time to be able to solve this kind of problem? And we'll take a look at a couple of possible optimizations. But for one, we'll take a look at this example. Again, returning to these up arrows and down arrows, let's imagine that I now am the max player, this green arrow. I am trying to make this score as high as possible. And this is an easy game where there are just two moves. I make a move, one of these three options. And then my opponent makes a move, one of these three options, based on what move I make. And as a result, we get some value. Let's look at the order in which I do these calculations and figure out if there are any optimizations I might be able to make to this calculation process. I'm going to have to look at these states one at a time. So let's say I start here on the left and say, all right, now I'm going to consider, what will the min player, my opponent, try to do here? Well, the min player is going to look at all three of their possible actions and look at their value, because these are terminal states. They're the end of the game. And so they'll see, all right, this node is a value of four, value of eight, value of five. And the min player is going to say, well, all right, between these three options, four, eight, and five, I'll take the smallest one. I'll take the four. So this state now has a value of four. Then I, as the max player, say, all right, if I take this action, it will have a value of four. That's the best that I can do, because min player is going to try and minimize my score. So now what if I take this option? We'll explore this next. And now explore what the min player would do if I choose this action. And the min player is going to say, all right, what are the three options? The min player has options between nine, three, and seven. And so three is the smallest among nine, three, and seven. So we'll go ahead and say this state has a value of three. So now I, as the max player, I have now explored two of my three options. I know that one of my options will guarantee me a score of four, at least. And one of my options will guarantee me a score of three. And now I consider my third option and say, all right, what happens here? Same exact logic. The min player is going to look at these three states, two, four, and six. I'll say the minimum possible option is two. So the min player wants the two. Now I, as the max player, have calculated all of the information by looking two layers deep, by looking at all of these nodes. And I can now say, between the four, the three, and the two, you know what? I'd rather take the four. Because if I choose this option, if my opponent plays optimally, they will try and get me to the four. But that's the best I can do. I can't guarantee a higher score. Because if I pick either of these two options, I might get a three or I might get a two. And it's true that down here is a nine. And that's the highest score out of any of the scores. So I might be tempted to say, you know what? Maybe I should take this option because I might get the nine. But if the min player is playing intelligently, if they're making the best moves at each possible option they have when they get to make a choice, I'll be left with a three. Whereas I could better, playing optimally, have guaranteed that I would get the four. So that is, in effect, the logic that I would use as a min and max player trying to maximize my score from that node there. But it turns out they took quite a bit of computation for me to figure that out. I had to reason through all of these nodes in order to draw this conclusion. And this is for a pretty simple game where I have three choices, my opponent has three choices, and then the game's over. So what I'd like to do is come up with some way to optimize this. Maybe I don't need to do all of this calculation to still reach the conclusion that, you know what, this action to the left, that's the best that I could do. Let's go ahead and try again and try to be a little more intelligent about how I go about doing this. So first, I start the exact same way. I don't know what to do initially, so I just have to consider one of the options and consider what the min player might do. Min has three options, four, eight, and five. And between those three options, min says four is the best they can do because they want to try to minimize the score. Now I, the max player, will consider my second option, making this move here, and considering what my opponent would do in response. What will the min player do? Well, the min player is going to, from that state, look at their options. And I would say, all right, nine is an option, three is an option. And if I am doing the math from this initial state, doing all this calculation, when I see a three, that should immediately be a red flag for me. Because when I see a three down here at this state, I know that the value of this state is going to be at most three. It's going to be three or something less than three, even though I haven't yet looked at this last action or even further actions if there were more actions that could be taken here. How do I know that? Well, I know that the min player is going to try to minimize my score. And if they see a three, the only way this could be something other than a three is if this remaining thing that I haven't yet looked at is less than three, which means there is no way for this value to be anything more than three because the min player can already guarantee a three and they are trying to minimize my score. So what does that tell me? Well, it tells me that if I choose this action, my score is going to be three or maybe even less than three if I'm unlucky. But I already know that this action will guarantee me a four. And so given that I know that this action guarantees me a score of four and this action means I can't do better than three, if I'm trying to maximize my options, there is no need for me to consider this triangle here. There is no value, no number that could go here that would change my mind between these two options. I'm always going to opt for this path that gets me a four as opposed to this path where the best I can do is a three if my opponent plays optimally. And this is going to be true for all the future states that I look at too. That if I look over here at what min player might do over here, if I see that this state is a two, I know that this state is at most a two because the only way this value could be something other than two is if one of these remaining states is less than a two and so the min player would opt for that instead. So even without looking at these remaining states, I as the maximizing player can know that choosing this path to the left is going to be better than choosing either of those two paths to the right because this one can't be better than three. This one can't be better than two. And so four in this case is the best that I can do. So in order to do this cut, and I can say now that this state has a value of four. So in order to do this type of calculation, I was doing a little bit more bookkeeping, keeping track of things, keeping track all the time of what is the best that I can do, what is the worst that I can do, and for each of these states saying, all right, well, if I already know that I can get a four, then if the best I can do at this state is a three, no reason for me to consider it, I can effectively prune this leaf and anything below it from the tree. And it's for that reason this approach, this optimization to minimax, is called alpha, beta pruning. Alpha and beta stand for these two values that you'll have to keep track of of the best you can do so far and the worst you can do so far. And pruning is the idea of if I have a big, long, deep search tree, I might be able to search it more efficiently if I don't need to search through everything, if I can remove some of the nodes to try and optimize the way that I look through this entire search space. So alpha, beta pruning can definitely save us a lot of time as we go about the search process by making our searches more efficient. But even then, it's still not great as games get more complex. Tictactoe, fortunately, is a relatively simple game. And we might reasonably ask a question like, how many total possible tictactoe games are there? You can think about it. You can try and estimate how many moves are there at any given point, how many moves long can the game last. It turns out there are about 255,000 possible tictactoe games that can be played. But compare that to a more complex game, something like a game of chess, for example. Far more pieces, far more moves, games that last much longer. How many total possible chess games could there be? It turns out that after just four moves each, four moves by the white player, four moves by the black player, that there are 288 billion possible chess games that can result from that situation, after just four moves each. And going even further, if you look at entire chess games and how many possible chess games there could be as a result there, there are more than 10 to the 29,000 possible chess games, far more chess games than could ever be considered. And this is a pretty big problem for the Minimax algorithm, because the Minimax algorithm starts with an initial state, considers all the possible actions, and all the possible actions after that, all the way until we get to the end of the game. And that's going to be a problem if the computer is going to need to look through this many states, which is far more than any computer could ever do in any reasonable amount of time. So what do we do in order to solve this problem? Instead of looking through all these states which is totally intractable for a computer, we need some better approach. And it turns out that better approach generally takes the form of something called depthlimited Minimax, where normally Minimax is depthunlimited. We just keep going layer after layer, move after move, until we get to the end of the game. Depthlimited Minimax is instead going to say, you know what, after a certain number of moves, maybe I'll look 10 moves ahead, maybe I'll look 12 moves ahead, but after that point, I'm going to stop and not consider additional moves that might come after that, just because it would be computationally intractable to consider all of those possible options. But what do we do after we get 10 or 12 moves deep when we arrive at a situation where the game's not over? Minimax still needs a way to assign a score to that game board or game state to figure out what its current value is, which is easy to do if the game is over, but not so easy to do if the game is not yet over. So in order to do that, we need to add one additional feature to depthlimited Minimax called an evaluation function, which is just some function that is going to estimate the expected utility of a game from a given state. So in a game like chess, if you imagine that a game value of 1 means white wins, negative 1 means black wins, 0 means it's a draw, then you might imagine that a score of 0.8 means white is very likely to win, though certainly not guaranteed. And you would have an evaluation function that estimates how good the game state happens to be. And depending on how good that evaluation function is, that is ultimately what's going to constrain how good the AI is. The better the AI is at estimating how good or how bad any particular game state is, the better the AI is going to be able to play that game. If the evaluation function is worse and not as good as it estimating what the expected utility is, then it's going to be a whole lot harder. And you can imagine trying to come up with these evaluation functions. In chess, for example, you might write an evaluation function based on how many pieces you have as compared to how many pieces your opponent has, because each one has a value. And your evaluation function probably needs to be a little bit more complicated than that to consider other possible situations that might arise as well. And there are many other variants on Minimax that add additional features in order to help it perform better under these larger, more computationally untractable situations where we couldn't possibly explore all of the possible moves. So we need to figure out how to use evaluation functions and other techniques to be able to play these games ultimately better. But this now was a look at this kind of adversarial search, these search problems where we have situations where I am trying to play against some sort of opponent. And these search problems show up all over the place throughout artificial intelligence. We've been talking a lot today about more classical search problems, like trying to find directions from one location to another. But any time an AI is faced with trying to make a decision, like what do I do now in order to do something that is rational, or do something that is intelligent, or trying to play a game, like figuring out what move to make, these sort of algorithms can really come in handy. It turns out that for tictactoe, the solution is pretty simple because it's a small game. XKCD has famously put together a web comic where he will tell you exactly what move to make as the optimal move to make no matter what your opponent happens to do. This type of thing is not quite as possible for a much larger game like Checkers or Chess, for example, where chess is totally computationally untractable for most computers to be able to explore all the possible states. So we really need our AI to be far more intelligent about how they go about trying to deal with these problems and how they go about taking this environment that they find themselves in and ultimately searching for one of these solutions. So this, then, was a look at search in artificial intelligence. Next time, we'll take a look at knowledge, thinking about how it is that our AIs are able to know information, reason about that information, and draw conclusions, all in our look at AI and the principles behind it. We'll see you next time. ["AIMS INTRO MUSIC"] All right, welcome back, everyone, to an introduction to artificial intelligence with Python. Last time, we took a look at search problems, in particular, where we have AI agents that are trying to solve some sort of problem by taking actions in some sort of environment, whether that environment is trying to take actions by playing moves in a game or whether those actions are something like trying to figure out where to make turns in order to get driving directions from point A to point B. This time, we're going to turn our attention more generally to just this idea of knowledge, the idea that a lot of intelligence is based on knowledge, especially if we think about human intelligence. People know information. We know facts about the world. And using that information that we know, we're able to draw conclusions, reason about the information that we know in order to figure out how to do something or figure out some other piece of information that we conclude based on the information we already have available to us. What we'd like to focus on now is the ability to take this idea of knowledge and being able to reason based on knowledge and apply those ideas to artificial intelligence. In particular, we're going to be building what are known as knowledgebased agents, agents that are able to reason and act by representing knowledge internally. Somehow inside of our AI, they have some understanding of what it means to know something. And ideally, they have some algorithms or some techniques they can use based on that knowledge that they know in order to figure out the solution to a problem or figure out some additional piece of information that can be helpful in some sense. So what do we mean by reasoning based on knowledge to be able to draw conclusions? Well, let's look at a simple example drawn from the world of Harry Potter. We take one sentence that we know to be true. Imagine if it didn't rain, then Harry visited Hagrid today. So one fact that we might know about the world. And then we take another fact. Harry visited Hagrid or Dumbledore today, but not both. So it tells us something about the world, that Harry either visited Hagrid but not Dumbledore, or Harry visited Dumbledore but not Hagrid. And now we have a third piece of information about the world that Harry visited Dumbledore today. So we now have three pieces of information now, three facts. Inside of a knowledge base, so to speak, information that we know. And now we, as humans, can try and reason about this and figure out, based on this information, what additional information can we begin to conclude? And well, looking at these last two statements, Harry either visited Hagrid or Dumbledore but not both, and we know that Harry visited Dumbledore today, well, then it's pretty reasonable that we could draw the conclusion that, you know what, Harry must not have visited Hagrid today. Because based on a combination of these two statements, we can draw this inference, so to speak, a conclusion that Harry did not visit Hagrid today. But it turns out we can even do a little bit better than that, get some more information by taking a look at this first statement and reasoning about that. This first statement says, if it didn't rain, then Harry visited Hagrid today. So what does that mean? In all cases where it didn't rain, then we know that Harry visited Hagrid. But if we also know now that Harry did not visit Hagrid, then that tells us something about our initial premise that we were thinking about. In particular, it tells us that it did rain today, because we can reason, if it didn't rain, that Harry would have visited Hagrid. But we know for a fact that Harry did not visit Hagrid today. So it's this kind of reason, this sort of logical reasoning, where we use logic based on the information that we know in order to take information and reach conclusions that is going to be the focus of what we're going to be talking about today. How can we make our artificial intelligence logical so that they can perform the same kinds of deduction, the same kinds of reasoning that we've been doing so far? Of course, humans reason about logic generally in terms of human language. That I just now was speaking in English, talking in English about these sentences and trying to reason through how it is that they relate to one another. We're going to need to be a little bit more formal when we turn our attention to computers and being able to encode this notion of logic and truthhood and falsehood inside of a machine. So we're going to need to introduce a few more terms and a few symbols that will help us reason through this idea of logic inside of an artificial intelligence. And we'll begin with the idea of a sentence. Now, a sentence in a natural language like English is just something that I'm saying, like what I'm saying right now. In the context of AI, though, a sentence is just an assertion about the world in what we're going to call a knowledge representation language, some way of representing knowledge inside of our computers. And the way that we're going to spend most of today reasoning about knowledge is through a type of logic known as propositional logic. There are a number of different types of logic, some of which we'll touch on. But propositional logic is based on a logic of propositions, or just statements about the world. And so we begin in propositional logic with a notion of propositional symbols. We will have certain symbols that are oftentimes just letters, something like P or Q or R, where each of those symbols is going to represent some fact or sentence about the world. So P, for example, might represent the fact that it is raining. And so P is going to be a symbol that represents that idea. And Q, for example, might represent Harry visited Hagrid today. Each of these propositional symbols represents some sentence or some fact about the world. But in addition to just having individual facts about the world, we want some way to connect these propositional symbols together in order to reason more complexly about other facts that might exist inside of the world in which we're reasoning. So in order to do that, we'll need to introduce some additional symbols that are known as logical connectives. Now, there are a number of these logical connectives. But five of the most important, and the ones we're going to focus on today, are these five up here, each represented by a logical symbol. Not is represented by this symbol here, and is represented as sort of an upside down V, or is represented by a V shape. Implication, and we'll talk about what that means in just a moment, is represented by an arrow. And biconditional, again, we'll talk about what that means in a moment, is represented by these double arrows. But these five logical connectives are the main ones we're going to be focusing on in terms of thinking about how it is that a computer can reason about facts and draw conclusions based on the facts that it knows. But in order to get there, we need to take a look at each of these logical connectives and build up an understanding for what it is that they actually mean. So let's go ahead and begin with the not symbol, so this not symbol here. And what we're going to show for each of these logical connectives is what we're going to call a truth table, a table that demonstrates what this word not means when we attach it to a propositional symbol or any sentence inside of our logical language. And so the truth table for not is shown right here. If P, some propositional symbol, or some other sentence even, is false, then not P is true. And if P is true, then not P is false. So you can imagine that placing this not symbol in front of some sentence of propositional logic just says the opposite of that. So if, for example, P represented it is raining, then not P would represent the idea that it is not raining. And as you might expect, if P is false, meaning if the sentence, it is raining, is false, well then the sentence not P must be true. The sentence that it is not raining is therefore true. So not, you can imagine, just takes whatever is in P and it inverts it. It turns false into true and true into false, much analogously to what the English word not means, just taking whatever comes after it and inverting it to mean the opposite. Next up, and also very Englishlike, is this idea of and represented by this upsidedown V shape or this point shape. And as opposed to just taking a single argument the way not does, we have P and we have not P. And is going to combine two different sentences in propositional logic together. So I might have one sentence P and another sentence Q, and I want to combine them together to say P and Q. And the general logic for what P and Q means is it means that both of its operands are true. P is true and also Q is true. And so here's what that truth table looks like. This time we have two variables, P and Q. And when we have two variables, each of which can be in two possible states, true or false, that leads to two squared or four possible combinations of truth and falsehood. So we have P is false and Q is false. We have P is false and Q is true. P is true and Q is false. And then P and Q both are true. And those are the only four possibilities for what P and Q could mean. And in each of those situations, this third column here, P and Q, is telling us a little bit about what it actually means for P and Q to be true. And we see that the only case where P and Q is true is in this fourth row here, where P happens to be true, Q also happens to be true. And in all other situations, P and Q is going to evaluate to false. So this, again, is much in line with what our intuition of and might mean. If I say P and Q, I probably mean that I expect both P and Q to be true. Next up, also potentially consistent with what we mean, is this word or, represented by this V shape, sort of an upside down and symbol. And or, as the name might suggest, is true if either of its arguments are true, as long as P is true or Q is true, then P or Q is going to be true. Which means the only time that P or Q is false is if both of its operands are false. If P is false and Q is false, then P or Q is going to be false. But in all other cases, at least one of the operands is true. Maybe they're both true, in which case P or Q is going to evaluate to true. Now, this is mostly consistent with the way that most people might use the word or, in the sense of speaking the word or in normal English, though there is sometimes when we might say or, where we mean P or Q, but not both, where we mean, sort of, it can only be one or the other. It's important to note that this symbol here, this or, means P or Q or both, that those are totally OK. As long as either or both of them are true, then the or is going to evaluate to be true, as well. It's only in the case where all of the operands are false that P or Q ultimately evaluates to false, as well. In logic, there's another symbol known as the exclusive or, which encodes this idea of exclusivity of one or the other, but not both. But we're not going to be focusing on that today. Whenever we talk about or, we're always talking about either or both, in this case, as represented by this truth table here. So that now is not an and an or. And next up is what we might call implication, as denoted by this arrow symbol. So we have P and Q. And this sentence here will generally read as P implies Q. And what P implies Q means is that if P is true, then Q is also true. So I might say something like, if it is raining, then I will be indoors. Meaning, it is raining implies I will be indoors, as the logical sentence that I'm saying there. And the truth table for this can sometimes be a little bit tricky. So obviously, if P is true and Q is true, then P implies Q. That's true. That definitely makes sense. And it should also stand to reason that when P is true and Q is false, then P implies Q is false. Because if I said to you, if it is raining, then I will be out indoors. And it is raining, but I'm not indoors? Well, then it would seem to be that my original statement was not true. P implies Q means that if P is true, then Q also needs to be true. And if it's not, well, then the statement is false. What's also worth noting, though, is what happens when P is false. When P is false, the implication makes no claim at all. If I say something like, if it is raining, then I will be indoors. And it turns out it's not raining. Then in that case, I am not making any statement as to whether or not I will be indoors or not. P implies Q just means that if P is true, Q must be true. But if P is not true, then we make no claim about whether or not Q is true at all. So in either case, if P is false, it doesn't matter what Q is. Whether it's false or true, we're not making any claim about Q whatsoever. We can still evaluate the implication to true. The only way that the implication is ever false is if our premise, P, is true, but the conclusion that we're drawing Q happens to be false. So in that case, we would say P does not imply Q in that case. Finally, the last connective that we'll discuss is this biconditional. You can think of a biconditional as a condition that goes in both directions. So originally, when I said something like, if it is raining, then I will be indoors. I didn't say what would happen if it wasn't raining. Maybe I'll be indoors, maybe I'll be outdoors. This biconditional, you can read as an if and only if. So I can say, I will be indoors if and only if it is raining, meaning if it is raining, then I will be indoors. And if I am indoors, it's reasonable to conclude that it is also raining. So this biconditional is only true when P and Q are the same. So if P is true and Q is true, then this biconditional is also true. P implies Q, but also the reverse is true. Q also implies P. So if P and Q both happen to be false, we would still say it's true. But in any of these other two situations, this P if and only if Q is going to ultimately evaluate to false. So a lot of trues and falses going on there, but these five basic logical connectives are going to form the core of the language of propositional logic, the language that we're going to use in order to describe ideas, and the language that we're going to use in order to reason about those ideas in order to draw conclusions. So let's now take a look at some of the additional terms that we'll need to know about in order to go about trying to form this language of propositional logic and writing AI that's actually able to understand this sort of logic. The next thing we're going to need is the notion of what is actually true about the world. We have a whole bunch of propositional symbols, P and Q and R and maybe others, but we need some way of knowing what actually is true in the world. Is P true or false? Is Q true or false? So on and so forth. And to do that, we'll introduce the notion of a model. A model just assigns a truth value, where a truth value is either true or false, to every propositional symbol. In other words, it's creating what we might call a possible world. So let me give an example. If, for example, I have two propositional symbols, P is it is raining and Q is it is a Tuesday, a model just takes each of these two symbols and assigns a truth value to them, either true or false. So here's a sample model. In this model, in other words, in this possible world, it is possible that P is true, meaning it is raining, and Q is false, meaning it is not a Tuesday. But there are other possible worlds or other models as well. There is some model where both of these variables are true, some model where both of these variables are false. In fact, if there are n variables that are propositional symbols like this that are either true or false, then the number of possible models is 2 to the n, because each of these possible models, possible variables within my model, could be set to either true or false if I don't know any information about it. So now that I have the symbols and the connectives that I'm going to need in order to construct these parts of knowledge, we need some way to represent that knowledge. And to do so, we're going to allow our AI access to what we'll call a knowledge base. And a knowledge base is really just a set of sentences that our AI knows to be true. Some set of sentences in propositional logic that are things that our AI knows about the world. And so we might tell our AI some information, information about a situation that it finds itself in, or a situation about a problem that it happens to be trying to solve. And we would give that information to the AI that the AI would store inside of its knowledge base. And what happens next is the AI would like to use that information in the knowledge base to be able to draw conclusions about the rest of the world. And what do those conclusions look like? Well, to understand those conclusions, we'll need to introduce one more idea, one more symbol. And that is the notion of entailment. So this sentence here, with this double turnstile in these Greek letters, this is the Greek letter alpha and the Greek letter beta. And we read this as alpha entails beta. And alpha and beta here are just sentences in propositional logic. And what this means is that alpha entails beta means that in every model, in other words, in every possible world in which sentence alpha is true, then sentence beta is also true. So if something entails something else, if alpha entails beta, it means that if I know alpha to be true, then beta must therefore also be true. So if my alpha is something like I know that it is a Tuesday in January, then a reasonable beta might be something like I know that it is January. Because in all worlds where it is a Tuesday in January, I know for sure that it must be January, just by definition. This first statement or sentence about the world entails the second statement. And we can reasonably use deduction based on that first sentence to figure out that the second sentence is, in fact, true as well. And ultimately, it's this idea of entailment that we're going to try and encode into our computer. We want our AI agent to be able to figure out what the possible entailments are. We want our AI to be able to take these three sentences, sentences like, if it didn't rain, Harry visited Hagrid. That Harry visited Hagrid or Dumbledore, but not both. And that Harry visited Dumbledore. And just using that information, we'd like our AI to be able to infer or figure out that using these three sentences inside of a knowledge base, we can draw some conclusions. In particular, we can draw the conclusions here that, one, Harry did not visit Hagrid today. And we can draw the entailment, too, that it did, in fact, rain today. And this process is known as inference. And that's what we're going to be focusing on today, this process of deriving new sentences from old ones, that I give you these three sentences, you put them in the knowledge base in, say, the AI. And the AI is able to use some sort of inference algorithm to figure out that these two sentences must also be true. And that is how we define inference. So let's take a look at an inference example to see how we might actually go about inferring things in a human sense before we take a more algorithmic approach to see how we could encode this idea of inference in AI. And we'll see there are a number of ways that we can actually achieve this. So again, we'll deal with a couple of propositional symbols. We'll deal with P, Q, and R. P is it is a Tuesday. Q is it is raining. And R is Harry will go for a run, three propositional symbols that we are just defining to mean this. We're not saying anything yet about whether they're true or false. We're just defining what they are. Now, we'll give ourselves or an AI access to a knowledge base, abbreviated to KB, the knowledge that we know about the world. We know this statement. All right. So let's try to parse it. The parentheses here are just used for precedent, so we can see what associates with what. But you would read this as P and not Q implies R. All right. So what does that mean? Let's put it piece by piece. P is it is a Tuesday. Q is it is raining, so not Q is it is not raining, and implies R is Harry will go for a run. So the way to read this entire sentence in human natural language at least is if it is a Tuesday and it is not raining, then Harry will go for a run. So if it is a Tuesday and it is not raining, then Harry will go for a run. And that is now inside of our knowledge base. And let's now imagine that our knowledge base has two other pieces of information as well. It has information that P is true, that it is a Tuesday. And we also have the information not Q, that it is not raining, that this sentence Q, it is raining, happens to be false. And those are the three sentences that we have access to. P and not Q implies R, P and not Q. Using that information, we should be able to draw some inferences. P and not Q is only true if both P and not Q are true. All right, we know that P is true and we know that not Q is true. So we know that this whole expression is true. And the definition of implication is if this whole thing on the left is true, then this thing on the right must also be true. So if we know that P and not Q is true, then R must be true as well. So the inference we should be able to draw from all of this is that R is true and we know that Harry will go for a run by taking this knowledge inside of our knowledge base and being able to reason based on that idea. And so this ultimately is the beginning of what we might consider to be some sort of inference algorithm, some process that we can use to try and figure out whether or not we can draw some conclusion. And ultimately, what these inference algorithms are going to answer is the central question about entailment. Given some query about the world, something we're wondering about the world, and we'll call that query alpha, the question we want to ask using these inference algorithms is does KB, our knowledge base, entail alpha? In other words, using only the information we know inside of our knowledge base, the knowledge that we have access to, can we conclude that this sentence alpha is true? And that's ultimately what we would like to do. So how can we do that? How can we go about writing an algorithm that can look at this knowledge base and figure out whether or not this query alpha is actually true? Well, it turns out there are a couple of different algorithms for doing so. And one of the simplest, perhaps, is known as model checking. Now, remember that a model is just some assignment of all of the propositional symbols inside of our language to a truth value, true or false. And you can think of a model as a possible world, that there are many possible worlds where different things might be true or false, and we can enumerate all of them. And the model checking algorithm does exactly that. So what does our model checking algorithm do? Well, if we wanted to determine if our knowledge base entails some query alpha, then we are going to enumerate all possible models. In other words, consider all possible values of true and false for our variables, all possible states in which our world can be in. And if in every model where our knowledge base is true, alpha is also true, then we know that the knowledge base entails alpha. So let's take a closer look at that sentence and try and figure out what it actually means. If we know that in every model, in other words, in every possible world, no matter what assignment of true and false to variables you give, if we know that whenever our knowledge is true, what we know to be true is true, that this query alpha is also true, well, then it stands to reason that as long as our knowledge base is true, then alpha must also be true. And so this is going to form the foundation of our model checking algorithm. We're going to enumerate all of the possible worlds and ask ourselves whenever the knowledge base is true, is alpha true? And if that's the case, then we know alpha to be true. And otherwise, there is no entailment. Our knowledge base does not entail alpha. All right. So this is a little bit abstract, but let's take a look at an example to try and put real propositional symbols to this idea. So again, we'll work with the same example. P is it is a Tuesday, Q is it is raining, R as Harry will go for a run. Our knowledge base contains these pieces of information. P and not Q implies R. We also know P. It is a Tuesday and not Q. It is not raining. And our query, our alpha in this case, the thing we want to ask is R. We want to know, is it guaranteed? Is it entailed that Harry will go for a run? So the first step is to enumerate all of the possible models. We have three propositional symbols here, P, Q, and R, which means we have 2 to the third power, or eight possible models. All false, false, false true, false true, false, false true, true, et cetera. Eight possible ways you could assign true and false to all of these models. And we might ask in each one of them, is the knowledge base true? Here are the set of things that we know. In which of these worlds could this knowledge base possibly apply to? In which world is this knowledge base true? Well, in the knowledge base, for example, we know P. We know it is a Tuesday, which means we know that these four first four rows where P is false, none of those are going to be true or are going to work for this particular knowledge base. Our knowledge base is not true in those worlds. Likewise, we also know not Q. We know that it is not raining. So any of these models where Q is true, like these two and these two here, those aren't going to work either because we know that Q is not true. And finally, we also know that P and not Q implies R, which means that when P is true or P is true here and Q is false, Q is false in these two, then R must be true. And if ever P is true, Q is false, but R is also false, well, that doesn't satisfy this implication here. That implication does not hold true under those situations. So we could say that for our knowledge base, we can conclude under which of these possible worlds is our knowledge base true and under which of the possible worlds is our knowledge base false. And it turns out there is only one possible world where our knowledge base is actually true. In some cases, there might be multiple possible worlds where the knowledge base is true. But in this case, it just so happens that there's only one, one possible world where we can definitively say something about our knowledge base. And in this case, we would look at the query. The query of R is R true, R is true, and so as a result, we can draw that conclusion. And so this is this idea of model checkin. Enumerate all the possible models and look in those possible models to see whether or not, if our knowledge base is true, is the query in question true as well. So let's now take a look at how we might actually go about writing this in a programming language like Python. Take a look at some actual code that would encode this notion of propositional symbols and logic and these connectives like and and or and not and implication and so forth and see what that code might actually look like. So I've written in advance a logic library that's more detailed than we need to worry about entirely today. But the important thing is that we have one class for every type of logical symbol or connective that we might have. So we just have one class for logical symbols, for example, where every symbol is going to represent and store some name for that particular symbol. And we also have a class for not that takes an operand. So we might say not one symbol to say something is not true or some other sentence is not true. We have one for and, one for or, so on and so forth. And I'll just demonstrate how this works. And you can take a look at the actual logic.py later on. But I'll go ahead and call this file harry.py. We're going to store information about this world of Harry Potter, for example. So I'll go ahead and import from my logic module. I'll import everything. And in this library, in order to create a symbol, you use capital S symbol. And I'll create a symbol for rain, to mean it is raining, for example. And I'll create a symbol for Hagrid, to mean Harry visited Hagrid, is what this symbol is going to mean. So this symbol means it is raining. This symbol means Harry visited Hagrid. And I'll add another symbol called Dumbledore for Harry visited Dumbledore. Now, I'd like to save these symbols so that I can use them later as I do some logical analysis. So I'll go ahead and save each one of them inside of a variable. So like rain, Hagrid, and Dumbledore, so you could call the variables anything. And now that I have these logical symbols, I can use logical connectives to combine them together. So for example, if I have a sentence like and rain and Hagrid, for example, which is not necessarily true, but just for demonstration, I can now try and print out sentence.formula, which is a function I wrote that takes a sentence in propositional logic and just prints it out so that we, the programmers, can now see this in order to get an understanding for how it actually works. So if I run python harry.py, what we'll see is this sentence in propositional logic, rain and Hagrid. This is the logical representation of what we have here in our Python program of saying and whose arguments are rain and Hagrid. So we're saying rain and Hagrid by encoding that idea. And this is quite common in Python objectoriented programming, where you have a number of different classes, and you pass arguments into them in order to create a new and object, for example, in order to represent this idea. But now what I'd like to do is somehow encode the knowledge that I have about the world in order to solve that problem from the beginning of class, where we talked about trying to figure out who Harry visited and trying to figure out if it's raining or if it's not raining. And so what knowledge do I have? I'll go ahead and create a new variable called knowledge. And what do I know? Well, I know the very first sentence that we talked about was the idea that if it is not raining, then Harry will visit Hagrid. So all right, how do I encode the idea that it is not raining? Well, I can use not and then the rain symbol. So here's me saying that it is not raining. And now the implication is that if it is not raining, then Harry visited Hagrid. So I'll wrap this inside of an implication to say, if it is not raining, this first argument to the implication will then Harry visited Hagrid. So I'm saying implication, the premise is that it's not raining. And if it is not raining, then Harry visited Hagrid. And I can print out knowledge.formula to see the logical formula equivalent of that same idea. So I run Python of harry.py. And this is the logical formula that we see as a result, which is a textbased version of what we were looking at before, that if it is not raining, then that implies that Harry visited Hagrid. But there was additional information that we had access to as well. In this case, we had access to the fact that Harry visited either Hagrid or Dumbledore. So how do I encode that? Well, this means that in my knowledge, I've really got multiple pieces of knowledge going on. I know one thing and another thing and another thing. So I'll go ahead and wrap all of my knowledge inside of an and. And I'll move things on to new lines just for good measure. But I know multiple things. So I'm saying knowledge is an and of multiple different sentences. I know multiple different sentences to be true. One such sentence that I know to be true is this implication, that if it is not raining, then Harry visited Hagrid. Another such sentence that I know to be true is or Hagrid Dumbledore. In other words, Hagrid or Dumbledore is true, because I know that Harry visited Hagrid or Dumbledore. But I know more than that, actually. That initial sentence from before said that Harry visited Hagrid or Dumbledore, but not both. So now I want a sentence that will encode the idea that Harry didn't visit both Hagrid and Dumbledore. Well, the notion of Harry visiting Hagrid and Dumbledore would be represented like this, and of Hagrid and Dumbledore. And if that is not true, if I want to say not that, then I'll just wrap this whole thing inside of a not. So now these three lines, line 8 says that if it is not raining, then Harry visited Hagrid. Line 9 says Harry visited Hagrid or Dumbledore. And line 10 says Harry didn't visit both Hagrid and Dumbledore, that it is not true that both the Hagrid symbol and the Dumbledore symbol are true. Only one of them can be true. And finally, the last piece of information that I knew was the fact that Harry visited Dumbledore. So these now are the pieces of knowledge that I know, one sentence and another sentence and another and another. And I can print out what I know just to see it a little bit more visually. And here now is a logical representation of the information that my computer is now internally representing using these various different Python objects. And again, take a look at logic.py if you want to take a look at how exactly it's implementing this, but no need to worry too much about all of the details there. We're here saying that if it is not raining, then Harry visited Hagrid. We're saying that Hagrid or Dumbledore is true. And we're saying it is not the case that Hagrid and Dumbledore is true, that they're not both true. And we also know that Dumbledore is true. So this long logical sentence represents our knowledge base. It is the thing that we know. And now what we'd like to do is we'd like to use model checking to ask a query, to ask a question like, based on this information, do I know whether or not it's raining? And we as humans were able to logic our way through it and figure out that, all right, based on these sentences, we can conclude this and that to figure out that, yes, it must have been raining. But now we'd like for the computer to do that as well. So let's take a look at the model checking algorithm that is going to follow that same pattern that we drew out in pseudocode a moment ago. So I've defined a function here in logic.py that you can take a look at called model check. Model check takes two arguments, the knowledge that I already know, and the query. And the idea is, in order to do model checking, I need to enumerate all of the possible models. And for each of the possible models, I need to ask myself, is the knowledge base true? And is the query true? So the first thing I need to do is somehow enumerate all of the possible models, meaning for all possible symbols that exist, I need to assign true and false to each one of them and see whether or not it's still true. And so here is the way we're going to do that. We're going to start. So I've defined another helper function internally that we'll get to in just a moment. But this function starts by getting all of the symbols in both the knowledge and the query, by figuring out what symbols am I dealing with. In this case, the symbols I'm dealing with are rain and Hagrid and Dumbledore, but there might be other symbols depending on the problem. And we'll take a look soon at some examples of situations where ultimately we're going to need some additional symbols in order to represent the problem. And then we're going to run this check all function, which is a helper function that's basically going to recursively call itself checking every possible configuration of propositional symbols. So we start out by looking at this check all function. And what do we do? So if not symbols means if we finish assigning all of the symbols. We've assigned every symbol a value. So far we haven't done that, but if we ever do, then we check. In this model, is the knowledge true? That's what this line is saying. If we evaluate the knowledge propositional logic formula using the model's assignment of truth values, is the knowledge true? If the knowledge is true, then we should return true only if the query is true. Because if the knowledge is true, we want the query to be true as well in order for there to be entailment. Otherwise, we don't know that there otherwise there won't be an entailment if there's ever a situation where what we know in our knowledge is true, but the query, the thing we're asking, happens to be false. So this line here is checking that same idea that in all worlds where the knowledge is true, the query must also be true. Otherwise, we can just return true because if the knowledge isn't true, then we don't care. This is equivalent to when we were enumerating this table from a moment ago. In all situations where the knowledge base wasn't true, all of these seven rows here, we didn't care whether or not our query was true or not. We only care to check whether the query is true when the knowledge base is actually true, which was just this green highlighted row right there. So that logic is encoded using that statement there. And otherwise, if we haven't assigned symbols yet, which we haven't seen anything yet, then the first thing we do is pop one of the symbols. I make a copy of the symbols first just to save an existing copy. But I pop one symbol off of the remaining symbols so that I just pick one symbol at random. And I create one copy of the model where that symbol is true. And I create a second copy of the model where that symbol is false. So I now have two copies of the model, one where the symbol is true and one where the symbol is false. And I need to make sure that this entailment holds in both of those models. So I recursively check all on the model where the statement is true and check all on the model where the statement is false. So again, you can take a look at that function to try to get a sense for how exactly this logic is working. But in effect, what it's doing is recursively calling this check all function again and again and again. And on every level of the recursion, we're saying let's pick a new symbol that we haven't yet assigned, assign it to true and assign it to false, and then check to make sure that the entailment holds in both cases. Because ultimately, I need to check every possible world. I need to take every combination of symbols and try every combination of true and false in order to figure out whether the entailment relation actually holds. So that function we've written for you. But in order to use that function inside of harry.py, what I'll write is something like this. I would like to model check based on the knowledge. And then I provide as a second argument what the query is, what the thing I want to ask is. And what I want to ask in this case is, is it raining? So model check again takes two arguments. The first argument is the information that I know, this knowledge, which in this case is this information that was given to me at the beginning. And the second argument, rain, is encoding the idea of the query. What am I asking? I would like to ask, based on this knowledge, do I know for sure that it is raining? And I can try and print out the result of that. And when I run this program, I see that the answer is true. That based on this information, I can conclusively say that it is raining, because using this model checking algorithm, we were able to check that in every world where this knowledge is true, it is raining. In other words, there is no world where this knowledge is true, and it is not raining. So you can conclude that it is, in fact, raining. And this sort of logic can be applied to a number of different types of problems, that if confronted with a problem where some sort of logical deduction can be used in order to try to solve it, you might try thinking about what propositional symbols you might need in order to represent that information, and what statements and propositional logic you might use in order to encode that information which you know. And this process of trying to take a problem and figure out what propositional symbols to use in order to encode that idea, or how to represent it logically, is known as knowledge engineering. That software engineers and AI engineers will take a problem and try and figure out how to distill it down into knowledge that is representable by a computer. And if we can take any general purpose problem, some problem that we find in the human world, and turn it into a problem that computers know how to solve as by using any number of different variables, well, then we can take a computer that is able to do something like model checking or some other inference algorithm and actually figure out how to solve that problem. So now we'll take a look at two or three examples of knowledge engineering and practice, of taking some problem and figuring out how we can apply logical symbols and use logical formulas to be able to encode that idea. And we'll start with a very popular board game in the US and the UK known as Clue. Now, in the game of Clue, there's a number of different factors that are going on. But the basic premise of the game, if you've never played it before, is that there are a number of different people. For now, we'll just use three, Colonel Mustard, Professor Plumb, and Miss Scarlet. There are a number of different rooms, like a ballroom, a kitchen, and a library. And there are a number of different weapons, a knife, a revolver, and a wrench. And three of these, one person, one room, and one weapon, is the solution to the mystery, the murderer and what room they were in and what weapon they happened to use. And what happens at the beginning of the game is that all these cards are randomly shuffled together. And three of them, one person, one room, and one weapon, are placed into a sealed envelope that we don't know. And we would like to figure out, using some sort of logical process, what's inside the envelope, which person, which room, and which weapon. And we do so by looking at some, but not all, of these cards here, by looking at these cards to try and figure out what might be going on. And so this is a very popular game. But let's now try and formalize it and see if we could train a computer to be able to play this game by reasoning through it logically. So in order to do this, we'll begin by thinking about what propositional symbols we're ultimately going to need. Remember, again, that propositional symbols are just some symbol, some variable, that can be either true or false in the world. And so in this case, the propositional symbols are really just going to correspond to each of the possible things that could be inside the envelope. Mustard is a propositional symbol that, in this case, will just be true if Colonel Mustard is inside the envelope, if he is the murderer, and false otherwise. And likewise for Plum, for Professor Plum, and Scarlet, for Miss Scarlet. And likewise for each of the rooms and for each of the weapons. We have one propositional symbol for each of these ideas. Then using those propositional symbols, we can begin to create logical sentences, create knowledge that we know about the world. So for example, we know that someone is the murderer, that one of the three people is, in fact, the murderer. And how would we encode that? Well, we don't know for sure who the murderer is. But we know it is one person or the second person or the third person. So I could say something like this. Mustard or Plum or Scarlet. And this piece of knowledge encodes that one of these three people is the murderer. We don't know which, but one of these three things must be true. What other information do we know? Well, we know that, for example, one of the rooms must have been the room in the envelope. The crime was committed either in the ballroom or the kitchen or the library. Again, right now, we don't know which. But this is knowledge we know at the outset, knowledge that one of these three must be inside the envelope. And likewise, we can say the same thing about the weapon, that it was either the knife or the revolver or the wrench, that one of those weapons must have been the weapon of choice and therefore the weapon in the envelope. And then as the game progresses, the gameplay works by people get various different cards. And using those cards, you can deduce information. That if someone gives you a card, for example, I have the Professor Plum card in my hand, then I know the Professor Plum card can't be inside the envelope. I know that Professor Plum is not the criminal, so I know a piece of information like not Plum, for example. I know that Professor Plum has to be false. This propositional symbol is not true. And sometimes I might not know for sure that a particular card is not in the middle, but sometimes someone will make a guess and I'll know that one of three possibilities is not true. Someone will guess Colonel Mustard in the library with the revolver or something to that effect. And in that case, a card might be revealed that I don't see. But if it is a card and it is either Colonel Mustard or the revolver or the library, then I know that at least one of them can't be in the middle. So I know something like it is either not Mustard or it is not the library or it is not the revolver. Now maybe multiple of these are not true, but I know that at least one of Mustard, Library, and Revolver must, in fact, be false. And so this now is a propositional logic representation of this game of Clue, a way of encoding the knowledge that we know inside this game using propositional logic that a computer algorithm, something like model checking that we saw a moment ago, can actually look at and understand. So let's now take a look at some code to see how this algorithm might actually work in practice. All right, so I'm now going to open up a file called Clue.py, which I've started already. And what we'll see here is I've defined a couple of things. To find some symbols initially, notice I have a symbol for Colonel Mustard, a symbol for Professor Plum, a symbol for Miss Scarlett, all of which I've put inside of this list of characters. I have a symbol for Ballroom and Kitchen and Library inside of a list of rooms. And then I have symbols for Knife and Revolver and Wrench. These are my weapons. And so all of these characters and rooms and weapons altogether, those are my symbols. And now I also have this check knowledge function. And what the check knowledge function does is it takes my knowledge and it's going to try and draw conclusions about what I know. So for example, we'll loop over all of the possible symbols and we'll check, do I know that that symbol is true? And a symbol is going to be something like Professor Plum or the Knife or the Library. And if I know that it is true, in other words, I know that it must be the card in the envelope, then I'm going to print out using a function called cprint, which prints things in color. I'm going to print out the word yes, and I'm going to print that in green, just to make it very clear to us. If we're not sure that the symbol is true, maybe I can check to see if I'm sure that the symbol is not true. Like if I know for sure that it is not Professor Plum, for example. And I do that by running model check again, this time checking if my knowledge is not the symbol, if I know for sure that the symbol is not true. And if I don't know for sure that the symbol is not true, because I say if not model check, meaning I'm not sure that the symbol is false, well, then I'll go ahead and print out maybe next to the symbol. Because maybe the symbol is true, maybe it's not, I don't actually know. So what knowledge do I actually have? Well, let's try and represent my knowledge now. So my knowledge is, I know a couple of things, so I'll put them in an and. And I know that one of the three people must be the criminal. So I know or mustard, plum, scarlet. This is my way of encoding that it is either Colonel Mustard or Professor Plum or Miss Scarlet. I know that it must have happened in one of the rooms. So I know or ballroom, kitchen, library, for example. And I know that one of the weapons must have been used as well. So I know or knife, revolver, wrench. So that might be my initial knowledge, that I know that it must have been one of the people, I know it must have been in one of the rooms, and I know that it must have been one of the weapons. And I can see what that knowledge looks like as a formula by printing out knowledge.formula. So I'll run python clue.py. And here now is the information that I know in logical format. I know that it is Colonel Mustard or Professor Plum or Miss Scarlet. And I know that it is the ballroom, the kitchen, or the library. And I know that it is the knife, the revolver, or the wrench. But I don't know much more than that. I can't really draw any firm conclusions. And in fact, we can see that if I try and do, let me go ahead and run my knowledge check function on my knowledge. Knowledge check is this function that I, or check knowledge rather, is this function that I just wrote that looks over all of the symbols and tries to see what conclusions I can actually draw about any of the symbols. So I'll go ahead and run clue.py and see what it is that I know. And it seems that I don't really know anything for sure. I have all three people are maybes, all three of the rooms are maybes, all three of the weapons are maybes. I don't really know anything for certain just yet. But now let me try and add some additional information and see if additional information, additional knowledge, can help us to logically reason our way through this process. And we are just going to provide the information. Our AI is going to take care of doing the inference and figuring out what conclusions it's able to draw. So I start with some cards. And those cards tell me something. So if I have the kernel mustard card, for example, I know that the mustard symbol must be false. In other words, mustard is not the one in the envelope, is not the criminal. So I can say, knowledge supports something called, every and in this library supports dot add, which is a way of adding knowledge or adding an additional logical sentence to an and clause. So I can say, knowledge dot add, not mustard. I happen to know, because I have the mustard card, that kernel mustard is not the suspect. And maybe I have a couple of other cards too. Maybe I also have a card for the kitchen. So I know it's not the kitchen. And maybe I have another card that says that it is not the revolver. So I have three cards, kernel mustard, the kitchen, and the revolver. And I encode that into my AI this way by saying, it's not kernel mustard, it's not the kitchen, and it's not the revolver. And I know those to be true. So now, when I rerun clue.py, we'll see that I've been able to eliminate some possibilities. Before, I wasn't sure if it was the knife or the revolver or the wrench. If a knife was maybe, a revolver was maybe, wrench is maybe. Now I'm down to just the knife and the wrench. Between those two, I don't know which one it is. They're both maybes. But I've been able to eliminate the revolver, which is one that I know to be false, because I have the revolver card. And so additional information might be acquired over the course of this game. And we would represent that just by adding knowledge to our knowledge set or knowledge base that we've been building here. So if, for example, we additionally got the information that someone made a guess, someone guessed like Miss Scarlet in the library with the wrench. And we know that a card was revealed, which means that one of those three cards, either Miss Scarlet or the library or the wrench, one of those at minimum must not be inside of the envelope. So I could add some knowledge, say knowledge.add. And I'm going to add an or clause, because I don't know for sure which one it's not, but I know one of them is not in the envelope. So it's either not Scarlet, or it's not the library, and or supports multiple arguments. I can say it's also or not the wrench. So at least one of those needs a Scarlet library and wrench. At least one of those needs to be false. I don't know which, though. Maybe it's multiple. Maybe it's just one, but at least one I know needs to hold. And so now if I rerun clue.py, I don't actually have any additional information just yet. Nothing I can say conclusively. I still know that maybe it's Professor Plum, maybe it's Miss Scarlet. I haven't eliminated any options. But let's imagine that I get some more information, that someone shows me the Professor Plum card, for example. So I say, all right, let's go back here, knowledge.add, not Plum. So I have the Professor Plum card. I know the Professor Plum is not in the middle. I rerun clue.py. And right now, I'm able to draw some conclusions. Now I've been able to eliminate Professor Plum, and the only person it could left remaining be is Miss Scarlet. So I know, yes, Miss Scarlet, this variable must be true. And I've been able to infer that based on the information I already had. Now between the ballroom and the library and the knife and the wrench, for those two, I'm still not sure. So let's add one more piece of information. Let's say that I know that it's not the ballroom. Someone has shown me the ballroom card, so I know it's not the ballroom. Which means at this point, I should be able to conclude that it's the library. Let's see. I'll say knowledge.add, not the ballroom. And we'll go ahead and run that. And it turns out that after all of this, not only can I conclude that I know that it's the library, but I also know that the weapon was the knife. And that might have been an inference that was a little bit trickier, something I wouldn't have realized immediately, but the AI, via this model checking algorithm, is able to draw that conclusion, that we know for sure that it must be Miss Scarlet in the library with the knife. And how did we know that? Well, we know it from this or clause up here, that we know that it's either not Scarlet, or it's not the library, or it's not the wrench. And given that we know that it is Miss Scarlet, and we know that it is the library, then the only remaining option for the weapon is that it is not the wrench, which means that it must be the knife. So we as humans now can go back and reason through that, even though it might not have been immediately clear. And that's one of the advantages of using an AI or some sort of algorithm in order to do this, is that the computer can exhaust all of these possibilities and try and figure out what the solution actually should be. And so for that reason, it's often helpful to be able to represent knowledge in this way. Knowledge engineering, some situation where we can use a computer to be able to represent knowledge and draw conclusions based on that knowledge. And any time we can translate something into propositional logic symbols like this, this type of approach can be useful. So you might be familiar with logic puzzles, where you have to puzzle your way through trying to figure something out. This is what a classic logic puzzle might look like. Something like Gilderoy, Minerva, Pomona, and Horace each belong to a different one of the four houses, Gryffindor, Hufflepuff, Ravenclaw, and Slytherin. And then we have some information. The Gilderoy belongs to Gryffindor or Ravenclaw, Pomona does not belong in Slytherin, and Minerva does belong to Gryffindor. So we have a couple pieces of information. And using that information, we need to be able to draw some conclusions about which person should be assigned to which house. And again, we can use the exact same idea to try and implement this notion. So we need some propositional symbols. And in this case, the propositional symbols are going to get a little more complex, although we'll see ways to make this a little bit cleaner later on. But we'll need 16 propositional symbols, one for each person and house. So we need to say, remember, every propositional symbol is either true or false. So Gilderoy Gryffindor is either true or false. Either he's in Gryffindor or he is not. Likewise, Gilderoy Hufflepuff also true or false. Either it is true or it's false. And that's true for every combination of person and house that we could come up with. We have some sort of propositional symbol for each one of those. Using this type of knowledge, we can then begin to think about what types of logical sentences we can say about the puzzle. That if we know what will before even think about the information we were given, we can think about the premise of the problem, that every person is assigned to a different house. So what does that tell us? Well, it tells us sentences like this. It tells us like Pomona Slytherin implies not Pomona Hufflepuff. Something like if Pomona is in Slytherin, then we know that Pomona is not in Hufflepuff. And we know this for all four people and for all combinations of houses, that no matter what person you pick, if they're in one house, then they're not in some other house. So I'll probably have a whole bunch of knowledge statements that are of this form, that if we know Pomona is in Slytherin, then we know Pomona is not in Hufflepuff. We were also given the information that each person is in a different house. So I also have pieces of knowledge that look something like this. Minerva Ravenclaw implies not Gilderoy Ravenclaw. If they're all in different houses, then if Minerva is in Ravenclaw, then we know the Gilderoy is not in Ravenclaw as well. And I have a whole bunch of similar sentences like this that are expressing that idea for other people and other houses as well. And so in addition to sentences of these form, I also have the knowledge that was given to me. Information like Gilderoy was in Gryffindor or in Ravenclaw that would be represented like this, Gilderoy Gryffindor or Gilderoy Ravenclaw. And then using these sorts of sentences, I can begin to draw some conclusions about the world. So let's see an example of this. We'll go ahead and actually try and implement this logic puzzle to see if we can figure out what the answer is. I'll go ahead and open up puzzle.py, where I've already started to implement this sort of idea. I've defined a list of people and a list of houses. And I've so far created one symbol for every person and for every house. That's what this double four loop is doing, looping over all people, looping over all houses, creating a new symbol for each of them. And then I've added some information. I know that every person belongs to a house, so I've added the information for every person that person Gryffindor or person Hufflepuff or person Ravenclaw or person Slytherin, that one of those four things must be true. Every person belongs to a house. What other information do I know? I also know that only one house per person, so no person belongs to multiple houses. So how does this work? Well, this is going to be true for all people. So I'll loop over every person. And then I need to loop over all different pairs of houses. The idea is I want to encode the idea that if Minerva is in Gryffindor, then Minerva can't be in Ravenclaw. So I'll loop over all houses, each one. And I'll loop over all houses again, h2. And as long as they're different, h1 not equal to h2, then I'll add to my knowledge base this piece of information. That implication, in other words, an if then, if the person is in h1, then I know that they are not in house h2. So these lines here are encoding the notion that for every person, if they belong to house one, then they are not in house two. And the other piece of logic we need to encode is the idea that every house can only have one person. In other words, if Pomona is in Hufflepuff, then nobody else is allowed to be in Hufflepuff either. And that's the same logic, but sort of backwards. I loop over all of the houses and loop over all different pairs of people. So I loop over people once, loop over people again, and only do this when the people are different, p1 not equal to p2. And I add the knowledge that if, as given by the implication, if person one belongs to the house, then it is not the case that person two belongs to the same house. So here I'm just encoding the knowledge that represents the problem's constraints. I know that everyone's in a different house. I know that any person can only belong to one house. And I can now take my knowledge and try and print out the information that I happen to know. So I'll go ahead and print out knowledge.formula, just to see this in action, and I'll go ahead and skip this for now. But we'll come back to this in a second. Let's print out the knowledge that I know by running Python puzzle.py. It's a lot of information, a lot that I have to scroll through, because there are 16 different variables all going on. But the basic idea, if we scroll up to the very top, is I see my initial information. Gilderoy is either in Gryffindor, or Gilderoy is in Hufflepuff, or Gilderoy is in Ravenclaw, or Gilderoy is in Slytherin, and then way more information as well. So this is quite messy, more than we really want to be looking at. And soon, too, we'll see ways of representing this a little bit more nicely using logic. But for now, we can just say these are the variables that we're dealing with. And now we'd like to add some information. So the information we're going to add is Gilderoy is in Gryffindor, or he is in Ravenclaw. So that knowledge was given to us. So I'll go ahead and say knowledge.add. And I know that either or Gilderoy Gryffindor or Gilderoy Ravenclaw. One of those two things must be true. I also know that Pomona was not in Slytherin, so I can say knowledge.add not this symbol, not the PomonaSlytherin symbol. And then I can add the knowledge that Minerva is in Gryffindor by adding the symbol Minerva Gryffindor. So those are the pieces of knowledge that I know. And this loop here at the bottom just loops over all of my symbols, checks to see if the knowledge entails that symbol by calling this model check function again. And if it does, if we know the symbol is true, we print out the symbol. So now I can run Python, puzzle.py, and Python is going to solve this puzzle for me. We're able to conclude that Gilderoy belongs to Ravenclaw, Pomona belongs to Hufflepuff, Minerva to Gryffindor, and Horace to Slytherin just by encoding this knowledge inside the computer, although it was quite tedious to do in this case. And as a result, we were able to get the conclusion from that as well. And you can imagine this being applied to many sorts of different deductive situations. So not only these situations where we're trying to deal with Harry Potter characters in this puzzle, but if you've ever played games like Mastermind, where you're trying to figure out which order different colors go in and trying to make predictions about it, I could tell you, for example, let's play a simplified version of Mastermind where there are four colors, red, blue, green, and yellow, and they're in some order, but I'm not telling you what order. You just have to make a guess, and I'll tell you of red, blue, green, and yellow how many of the four you got in the right position. So a simplified version of this game, you might make a guess like red, blue, green, yellow, and I would tell you something like two of those four are in the correct position, but the other two are not. And then you could reasonably make a guess and say, all right, look at this, blue, red, green, yellow. Try switching two of them around, and this time maybe I tell you, you know what, none of those are in the correct position. And the question then is, all right, what is the correct order of these four colors? And we as humans could begin to reason this through. All right, well, if none of these were correct, but two of these were correct, well, it must have been because I switched the red and the blue, which means red and blue here must be correct, which means green and yellow are probably not correct. You can begin to do this sort of deductive reasoning. And we can also equivalently try and take this and encode it inside of our computer as well. And it's going to be very similar to the logic puzzle that we just did a moment ago. So I won't spend too much time on this code because it is fairly similar. But again, we have a whole bunch of colors and four different positions in which those colors can be. And then we have some additional knowledge. And I encode all of that knowledge. And you can take a look at this code on your own time. But I just want to demonstrate that when we run this code, run python mastermind.py and run and see what we get, we ultimately are able to compute red 0 in the 0 position, blue in the 1 position, yellow in the 2 position, and green in the 3 position as the ordering of those symbols. Now, ultimately, what you might have noticed is this process was taking quite a long time. And in fact, model checking is not a particularly efficient algorithm, right? What I need to do in order to model check is take all of my possible different variables and enumerate all of the possibilities that they could be in. If I have n variables, I have 2 to the n possible worlds that I need to be looking through in order to perform this model checking algorithm. And this is probably not tractable, especially as we start to get to much larger and larger sets of data where you have many, many more variables that are at play. Right here, we only have a relatively small number of variables. So this sort of approach can actually work. But as the number of variables increases, model checking becomes less and less good of a way of trying to solve these sorts of problems. So while it might have been OK for something like Mastermind to conclude that this is indeed the correct sequence where all four are in the correct position, what we'd like to do is come up with some better ways to be able to make inferences rather than just enumerate all of the possibilities. And to do so, what we'll transition to next is the idea of inference rules, some sort of rules that we can apply to take knowledge that already exists and translate it into new forms of knowledge. And the general way we'll structure an inference rule is by having a horizontal line here. Anything above the line is going to represent a premise, something that we know to be true. And then anything below the line will be the conclusion that we can arrive at after we apply the logic from the inference rule that we're going to demonstrate. So we'll do some of these inference rules by demonstrating them in English first, but then translating them into the world of propositional logic so you can see what those inference rules actually look like. So for example, let's imagine that I have access to two pieces of information. I know, for example, that if it is raining, then Harry is inside, for example. And let's say I also know it is raining. Then most of us could reasonably then look at this information and conclude that, all right, Harry must be inside. This inference rule is known as modus ponens, and it's phrased more formally in logic as this. If we know that alpha implies beta, in other words, if alpha, then beta, and we also know that alpha is true, then we should be able to conclude that beta is also true. We can apply this inference rule to take these two pieces of information and generate this new piece of information. Notice that this is a totally different approach from the model checking approach, where the approach was look at all of the possible worlds and see what's true in each of these worlds. Here, we're not dealing with any specific world. We're just dealing with the knowledge that we know and what conclusions we can arrive at based on that knowledge. That I know that A implies B, and I know A, and the conclusion is B. And this should seem like a relatively obvious rule. But of course, if alpha, then beta, and we know alpha, then we should be able to conclude that beta is also true. And that's going to be true for many, but maybe even all of the inference rules that we'll take a look at. You should be able to look at them and say, yeah, of course that's going to be true. But it's putting these all together, figuring out the right combination of inference rules that can be applied that ultimately is going to allow us to generate interesting knowledge inside of our AI. So that's modus ponensis application of implication, that if we know alpha and we know that alpha implies beta, then we can conclude beta. Let's take a look at another example. Fairly straightforward, something like Harry is friends with Ron and Hermione. Based on that information, we can reasonably conclude Harry is friends with Hermione. That must also be true. And this inference rule is known as and elimination. And what and elimination says is that if we have a situation where alpha and beta are both true, I have information alpha and beta, well then, just alpha is true. Or likewise, just beta is true. That if I know that both parts are true, then one of those parts must also be true. Again, something obvious from the point of view of human intuition, but a computer needs to be told this kind of information. To be able to apply the inference rule, we need to tell the computer that this is an inference rule that you can apply, so the computer has access to it and is able to use it in order to translate information from one form to another. In addition to that, let's take a look at another example of an inference rule, something like it is not true that Harry did not pass the test. Bit of a tricky sentence to parse. I'll read it again. It is not true, or it is false, that Harry did not pass the test. Well, if it is false that Harry did not pass the test, then the only reasonable conclusion is that Harry did pass the test. And so this, instead of being and elimination, is what we call double negation elimination. That if we have two negatives inside of our premise, then we can just remove them altogether. They cancel each other out. One turns true to false, and the other one turns false back into true. Phrased a little bit more formally, we say that if the premise is not alpha, then the conclusion we can draw is just alpha. We can say that alpha is true. We'll take a look at a couple more of these. If I have it is raining, then Harry is inside. How do I reframe this? Well, this one is a little bit trickier. But if I know if it is raining, then Harry is inside, then I conclude one of two things must be true. Either it is not raining, or Harry is inside. Now, this one's trickier. So let's think about it a little bit. This first premise here, if it is raining, then Harry is inside, is saying that if I know that it is raining, then Harry must be inside. So what is the other possible case? Well, if Harry is not inside, then I know that it must not be raining. So one of those two situations must be true. Either it's not raining, or it is raining, in which case Harry is inside. So the conclusion I can draw is either it is not raining, or it is raining, so therefore, Harry is inside. And so this is a way to translate ifthen statements into or statements. And this is known as implication elimination. And this is similar to what we actually did in the beginning when we were first looking at those very first sentences about Harry and Hagrid and Dumbledore. And phrased a little bit more formally, this says that if I have the implication, alpha implies beta, that I can draw the conclusion that either not alpha or beta, because there are only two possibilities. Either alpha is true or alpha is not true. So one of those possibilities is alpha is not true. But if alpha is true, well, then we can draw the conclusion that beta must be true. So either alpha is not true or alpha is true, in which case beta is also true. So this is one way to turn an implication into just a statement about or. In addition to eliminating implications, we can also eliminate biconditionals as well. So let's take an English example, something like, it is raining if and only if Harry is inside. And this if and only if really sounds like that biconditional, that double arrow sign that we saw in propositional logic not too long ago. And what does this actually mean if we were to translate this? Well, this means that if it is raining, then Harry is inside. And if Harry is inside, then it is raining, that this implication goes both ways. And this is what we would call biconditional elimination, that I can take a biconditional, a if and only if b, and translate that into something like this, a implies b, and b implies a. So many of these inference rules are taking logic that uses certain symbols and turning them into different symbols, taking an implication and turning it into an or, or taking a biconditional and turning it into implication. And another example of it would be something like this. It is not true that both Harry and Ron passed the test. Well, all right, how do we translate that? What does that mean? Well, if it is not true that both of them passed the test, well, then the reasonable conclusion we might draw is that at least one of them didn't pass the test. So the conclusion is either Harry did not pass the test or Ron did not pass the test, or both. This is not an exclusive or. But if it is true that it is not true that both Harry and Ron passed the test, well, then either Harry didn't pass the test or Ron didn't pass the test. And this type of law is one of De Morgan's laws. Quite famous in logic where the idea is that we can turn an and into an or. We can say we can take this and that both Harry and Ron passed the test and turn it into an or by moving the nots around. So if it is not true that Harry and Ron passed the test, well, then either Harry did not pass the test or Ron did not pass the test either. And the way we frame that more formally using logic is to say this. If it is not true that alpha and beta, well, then either not alpha or not beta. The way I like to think about this is that if you have a negation in front of an and expression, you move the negation inwards, so to speak, moving the negation into each of these individual sentences and then flip the and into an or. So the negation moves inwards and the and flips into an or. So I go from not a and b to not a or not b. And there's actually a reverse of De Morgan's law that goes in the other direction for something like this. If I say it is not true that Harry or Ron passed the test, meaning neither of them passed the test, well, then the conclusion I can draw is that Harry did not pass the test and Ron did not pass the test. So in this case, instead of turning an and into an or, we're turning an or into an and. But the idea is the same. And this, again, is another example of De Morgan's laws. And the way that works is that if I have not a or b this time, the same logic is going to apply. I'm going to move the negation inwards. And I'm going to flip this time, flip the or into an and. So if not a or b, meaning it is not true that a or b or alpha or beta, then I can say not alpha and not beta, moving the negation inwards in order to make that conclusion. So those are De Morgan's laws and a couple other inference rules that are worth just taking a look at. One is the distributive law that works this way. So if I have alpha and beta or gamma, well, then much in the same way that you can use in math, use distributive laws to distribute operands like addition and multiplication, I can do a similar thing here, where I can say if alpha and beta or gamma, then I can say something like alpha and beta or alpha and gamma, that I've been able to distribute this and sign throughout this expression. So this is an example of the distributive property or the distributive law as applied to logic in much the same way that you would distribute a multiplication over the addition of something, for example. This works the other way too. So if, for example, I have alpha or beta and gamma, I can distribute the or throughout the expression. I can say alpha or beta and alpha or gamma. So the distributive law works in that way too. And it's helpful if I want to take an or and move it into the expression. And we'll see an example soon of why it is that we might actually care to do something like that. All right, so now we've seen a lot of different inference rules. And the question now is, how can we use those inference rules to actually try and draw some conclusions, to actually try and prove something about entailment, proving that given some initial knowledge base, we would like to find some way to prove that a query is true? Well, one way to think about it is actually to think back to what we talked about last time when we talked about search problems. Recall again that search problems have some sort of initial state. They have actions that you can take from one state to another as defined by a transition model that tells you how to get from one state to another. We talked about testing to see if you were at a goal. And then some path cost function to see how many steps did you have to take or how costly was the solution that you found. Now that we have these inference rules that take some set of sentences in propositional logic and get us some new set of sentences in propositional logic, we can actually treat those sentences or those sets of sentences as states inside of a search problem. So if we want to prove that some query is true, prove that some logical theorem is true, we can treat theorem proving as a form of a search problem. I can say that we begin in some initial state, where that initial state is the knowledge base that I begin with, the set of all of the sentences that I know to be true. What actions are available to me? Well, the actions are any of the inference rules that I can apply at any given time. The transition model just tells me after I apply the inference rule, here is the new set of all of the knowledge that I have, which will be the old set of knowledge, plus some additional inference that I've been able to draw, much as in the same way we saw what we got when we applied those inference rules and got some sort of conclusion. That conclusion gets added to our knowledge base, and our transition model will encode that. What is the goal test? Well, our goal test is checking to see if we have proved the statement we're trying to prove, if the thing we're trying to prove is inside of our knowledge base. And the path cost function, the thing we're trying to minimize, is maybe the number of inference rules that we needed to use, the number of steps, so to speak, inside of our proof. And so here we've been able to apply the same types of ideas that we saw last time with search problems to something like trying to prove something about knowledge by taking our knowledge and framing it in terms that we can understand as a search problem with an initial state, with actions, with a transition model. So this shows a couple of things, one being how versatile search problems are, that they can be the same types of algorithms that we use to solve a maze or figure out how to get from point A to point B inside of driving directions, for example, can also be used as a theorem proving method of taking some sort of starting knowledge base and trying to prove something about that knowledge. So this, yet again, is a second way, in addition to model checking, to try and prove that certain statements are true. But it turns out there's yet another way that we can try and apply inference. And we'll talk about this now, which is not the only way, but certainly one of the most common, which is known as resolution. And resolution is based on another inference rule that we'll take a look at now, quite a powerful inference rule that will let us prove anything that can be proven about a knowledge base. And it's based on this basic idea. Let's say I know that either Ron is in the Great Hall or Hermione is in the library. And let's say I also know that Ron is not in the Great Hall. Based on those two pieces of information, what can I conclude? Well, I could pretty reasonably conclude that Hermione must be in the library. How do I know that? Well, it's because these two statements, these two what we'll call complementary literals, literals that complement each other, they're opposites of each other, seem to conflict with each other. This sentence tells us that either Ron is in the Great Hall or Hermione is in the library. So if we know that Ron is not in the Great Hall, that conflicts with this one, which means Hermione must be in the library. And this we can frame as a more general rule known as the unit resolution rule, a rule that says that if we have p or q and we also know not p, well then from that we can reasonably conclude q. That if p or q are true and we know that p is not true, the only possibility is for q to then be true. And this, it turns out, is quite a powerful inference rule in terms of what it can do, in part because we can quickly start to generalize this rule. This q right here doesn't need to just be a single propositional symbol. It could be multiple, all chained together in a single clause, as we'll call it. So if I had something like p or q1 or q2 or q3, so on and so forth, up until qn, so I had n different other variables, and I have not p, well then what happens when these two complement each other is that these two clauses resolve, so to speak, to produce a new clause that is just q1 or q2 all the way up to qn. And in an or, the order of the arguments in the or doesn't actually matter. The p doesn't need to be the first thing. It could have been in the middle. But the idea here is that if I have p in one clause and not p in the other clause, well then I know that one of these remaining things must be true. I've resolved them in order to produce a new clause. But it turns out we can generalize this idea even further, in fact, and display even more power that we can have with this resolution rule. So let's take another example. Let's say, for instance, that I know the same piece of information that either Ron is in the Great Hall or Hermione is in the library. And the second piece of information I know is that Ron is not in the Great Hall or Harry is sleeping. So it's not just a single piece of information. I have two different clauses. And we'll define clauses more precisely in just a moment. What do I know here? Well again, for any propositional symbol like Ron is in the Great Hall, there are only two possibilities. Either Ron is in the Great Hall, in which case, based on resolution, we know that Harry must be sleeping, or Ron is not in the Great Hall, in which case we know based on the same rule that Hermione must be in the library. Based on those two things in combination, I can say based on these two premises that I can conclude that either Hermione is in the library or Harry is sleeping. So again, because these two conflict with each other, I know that one of these two must be true. And you can take a closer look and try and reason through that logic. Make sure you convince yourself that you believe this conclusion. Stated more generally, we can name this resolution rule by saying that if we know p or q is true, and we also know that not p or r is true, we resolve these two clauses together to get a new clause, q or r, that either q or r must be true. And again, much as in the last case, q and r don't need to just be single propositional symbols. It could be multiple symbols. So if I had a rule that had p or q1 or q2 or q3, so on and so forth, up until qn, where n is just some number. And likewise, I had not p or r1 or r2, so on and so forth, up until rm, where m, again, is just some other number. I can resolve these two clauses together to get one of these must be true, q1 or q2 up until qn or r1 or r2 up until rm. And this is just a generalization of that same rule we saw before. Each of these things here are what we're going to call a clause, where a clause is formally defined as a disjunction of literals, where a disjunction means it's a bunch of things that are connected with or. Disjunction means things connected with or. Conjunction, meanwhile, is things connected with and. And a literal is either a propositional symbol or the opposite of a propositional symbol. So it's something like p or q or not p or not q. Those are all propositional symbols or not of the propositional symbols. And we call those literals. And so a clause is just something like this, p or q or r, for example. Meanwhile, what this gives us an ability to do is it gives us an ability to turn logic, any logical sentence, into something called conjunctive normal form. A conjunctive normal form sentence is a logical sentence that is a conjunction of clauses. Recall, again, conjunction means things are connected to one another using and. And so a conjunction of clauses means it is an and of individual clauses, each of which has ors in it. So something like this, a or b or c, and d or not e, and f or g. Everything in parentheses is one clause. All of the clauses are connected to each other using an and. And everything in the clause is separated using an or. And this is just a standard form that we can translate a logical sentence into that just makes it easy to work with and easy to manipulate. And it turns out that we can take any sentence in logic and turn it into conjunctive normal form just by applying some inference rules and transformations to it. So we'll take a look at how we can actually do that. So what is the process for taking a logical formula and converting it into conjunctive normal form, otherwise known as c and f? Well, the process looks a little something like this. We need to take all of the symbols that are not part of conjunctive normal form. The biconditionals and the implications and so forth, and turn them into something that is more closely like conjunctive normal form. So the first step will be to eliminate biconditionals, those if and only if double arrows. And we know how to eliminate biconditionals because we saw there was an inference rule to do just that. Any time I have an expression like alpha if and only if beta, I can turn that into alpha implies beta and beta implies alpha based on that inference rule we saw before. Likewise, in addition to eliminating biconditionals, I can eliminate implications as well, the if then arrows. And I can do that using the same inference rule we saw before too, taking alpha implies beta and turning that into not alpha or beta because that is logically equivalent to this first thing here. Then we can move knots inwards because we don't want knots on the outsides of our expressions. Conjunctive normal form requires that it's just claws and claws and claws and claws. Any knots need to be immediately next to propositional symbols. But we can move those knots around using De Morgan's laws by taking something like not A and B and turn it into not A or not B, for example, using De Morgan's laws to manipulate that. And after that, all we'll be left with are ands and ors. And those are easy to deal with. We can use the distributive law to distribute the ors so that the ors end up on the inside of the expression, so to speak, and the ands end up on the outside. So this is the general pattern for how we'll take a formula and convert it into conjunctive normal form. And let's now take a look at an example of how we would do this and explore then why it is that we would want to do something like this. Here's how we can do it. Let's take this formula, for example. P or Q implies R. And I'd like to convert this into conjunctive normal form, where it's all ands of clauses, and every clause is a disjunctive clause. It's ors together. So what's the first thing I need to do? Well, this is an implication. So let me go ahead and remove that implication. Using the implication inference rule, I can turn P or Q into P or Q implies R into not P or Q or R. So that's the first step. I've gotten rid of the implication. And next, I can get rid of the not on the outside of this expression, too. I can move the nots inwards so they're closer to the literals themselves by using De Morgan's laws. And De Morgan's law says that not P or Q is equivalent to not P and not Q. Again, here, just applying the inference rules that we've already seen in order to translate these statements. And now, I have two things that are separated by an or, where this thing on the inside is an and. What I'd really like to move the ors so the ors are on the inside, because conjunctive normal form means I need clause and clause and clause and clause. And so to do that, I can use the distributive law. If I have not P and not Q or R, I can distribute the or R to both of these to get not P or R and not Q or R using the distributive law. And this now here at the bottom is in conjunctive normal form. It is a conjunction and and of disjunctions of clauses that just are separated by ors. So this process can be used by any formula to take a logical sentence and turn it into this conjunctive normal form, where I have clause and clause and clause and clause and clause and so on. So why is this helpful? Why do we even care about taking all these sentences and converting them into this form? It's because once they're in this form where we have these clauses, these clauses are the inputs to the resolution inference rule that we saw a moment ago, that if I have two clauses where there's something that conflicts or something complementary between those two clauses, I can resolve them to get a new clause, to draw a new conclusion. And we call this process inference by resolution, using the resolution rule to draw some sort of inference. And it's based on the same idea, that if I have P or Q, this clause, and I have not P or R, that I can resolve these two clauses together to get Q or R as the resulting clause, a new piece of information that I didn't have before. Now, a couple of key points that are worth noting about this before we talk about the actual algorithm. One thing is that, let's imagine we have P or Q or S, and I also have not P or R or S. The resolution rule says that because this P conflicts with this not P, we would resolve to put everything else together to get Q or S or R or S. But it turns out that this double S is redundant, or S here and or S there. It doesn't change the meaning of the sentence. So in resolution, when we do this resolution process, we'll usually also do a process known as factoring, where we take any duplicate variables that show up and just eliminate them. So Q or S or R or S just becomes Q or R or S. The S only needs to appear once, no need to include it multiple times. Now, one final question worth considering is what happens if I try to resolve P and not P together? If I know that P is true and I know that not P is true, well, resolution says I can merge these clauses together and look at everything else. Well, in this case, there is nothing else, so I'm left with what we might call the empty clause. I'm left with nothing. And the empty clause is always false. The empty clause is equivalent to just being false. And that's pretty reasonable because it's impossible for both P and not P to both hold at the same time. P is either true or it's not true, which means that if P is true, then this must be false. And if this is true, then this must be false. There is no way for both of these to hold at the same time. So if ever I try and resolve these two, it's a contradiction, and I'll end up getting this empty clause where the empty clause I can call equivalent to false. And this idea that if I resolve these two contradictory terms, I get the empty clause, this is the basis for our inference by resolution algorithm. Here's how we're going to perform inference by resolution at a very high level. We want to prove that our knowledge base entails some query alpha, that based on the knowledge we have, we can prove conclusively that alpha is going to be true. How are we going to do that? Well, in order to do that, we're going to try to prove that if we know the knowledge and not alpha, that that would be a contradiction. And this is a common technique in computer science more generally, this idea of proving something by contradiction. If I want to prove that something is true, I can do so by first assuming that it is false and showing that it would be contradictory, showing that it leads to some contradiction. And if the thing I'm trying to prove, if when I assume it's false, leads to a contradiction, then it must be true. And that's the logical approach or the idea behind a proof by contradiction. And that's what we're going to do here. We want to prove that this query alpha is true. So we're going to assume that it's not true. We're going to assume not alpha. And we're going to try and prove that it's a contradiction. If we do get a contradiction, well, then we know that our knowledge entails the query alpha. If we don't get a contradiction, there is no entailment. This is this idea of a proof by contradiction of assuming the opposite of what you're trying to prove. And if you can demonstrate that that's a contradiction, then what you're proving must be true. But more formally, how do we actually do this? How do we check that knowledge base and not alpha is going to lead to a contradiction? Well, here is where resolution comes into play. To determine if our knowledge base entails some query alpha, we're going to convert knowledge base and not alpha to conjunctive normal form, that form where we have a whole bunch of clauses that are all anded together. And when we have these individual clauses, now we can keep checking to see if we can use resolution to produce a new clause. We can take any pair of clauses and check, is there some literal that is the opposite of each other or complementary to each other in both of them? For example, I have a p in one clause and a not p in another clause. Or an r in one clause and a not r in another clause. If ever I have that situation where once I convert to conjunctive normal form and I have a whole bunch of clauses, I see two clauses that I can resolve to produce a new clause, then I'll do so. This process occurs in a loop. I'm going to keep checking to see if I can use resolution to produce a new clause and keep using those new clauses to try to generate more new clauses after that. Now, it just so may happen that eventually we may produce the empty clause, the clause we were talking about before. If I resolve p and not p together, that produces the empty clause and the empty clause we know to be false. Because we know that there's no way for both p and not p to both simultaneously be true. So if ever we produce the empty clause, then we have a contradiction. And if we have a contradiction, that's exactly what we were trying to do in a fruit by contradiction. If we have a contradiction, then we know that our knowledge base must entail this query alpha. And we know that alpha must be true. And it turns out, and we won't go into the proof here, but you can show that otherwise, if you don't produce the empty clause, then there is no entailment. If we run into a situation where there are no more new clauses to add, we've done all the resolution that we can do, and yet we still haven't produced the empty clause, then there is no entailment in this case. And this now is the resolution algorithm. And it's very abstract looking, especially this idea of like, what does it even mean to have the empty clause? So let's take a look at an example, actually try and prove some entailment by using this inference by resolution process. So here's our question. We have this knowledge base. Here is the knowledge that we know, A or B, and not B or C, and not C. And we want to know if all of this entails A. So this is our knowledge base here, this whole log thing. And our query alpha is just this propositional symbol, A. So what do we do? Well, first, we want to prove by contradiction. So we want to first assume that A is false, and see if that leads to some sort of contradiction. So here is what we're going to start with, A or B, and not B or C, and not C. This is our knowledge base. And we're going to assume not A. We're going to assume that the thing we're trying to prove is, in fact, false. And so this is now in conjunctive normal form, and I have four different clauses. I have A or B. I have not B or C. I have not C, and I have not A. And now, I can begin to just pick two clauses that I can resolve, and apply the resolution rule to them. And so looking at these four clauses, I see, all right, these two clauses are ones I can resolve. I can resolve them because there are complementary literals that show up in them. There's a C here, and a not C here. So just looking at these two clauses, if I know that not B or C is true, and I know that C is not true, well, then I can resolve these two clauses to say, all right, not B, that must be true. I can generate this new clause as a new piece of information that I now know to be true. And all right, now I can repeat this process, do the process again. Can I use resolution again to get some new conclusion? Well, it turns out I can. I can use that new clause I just generated, along with this one here. There are complementary literals. This B is complementary to, or conflicts with, this not B over here. And so if I know that A or B is true, and I know that B is not true, well, then the only remaining possibility is that A must be true. So now we have A. That is a new clause that I've been able to generate. And now, I can do this one more time. I'm looking for two clauses that can be resolved, and you might programmatically do this by just looping over all possible pairs of clauses and checking for complementary literals in each. And here, I can say, all right, I found two clauses, not A and A, that conflict with each other. And when I resolve these two together, well, this is the same as when we were resolving P and not P from before. When I resolve these two clauses together, I get rid of the As, and I'm left with the empty clause. And the empty clause we know to be false, which means we have a contradiction, which means we can safely say that this whole knowledge base does entail A. That if this sentence is true, that we know that A for sure is also true. So this now, using inference by resolution, is an entirely different way to take some statement and try and prove that it is, in fact, true. Instead of enumerating all of the possible worlds that we might be in in order to try to figure out in which cases is the knowledge base true and in which cases are query true, instead we use this resolution algorithm to say, let's keep trying to figure out what conclusions we can draw and see if we reach a contradiction. And if we reach a contradiction, then that tells us something about whether our knowledge actually entails the query or not. And it turns out there are many different algorithms that can be used for inference. What we've just looked at here are just a couple of them. And in fact, all of this is just based on one particular type of logic. It's based on propositional logic, where we have these individual symbols and we connect them using and and or and not and implies and by conditionals. But propositional logic is not the only kind of logic that exists. And in fact, we see that there are limitations that exist in propositional logic, especially as we saw in examples like with the mastermind example or with the example with the logic puzzle where we had different Hogwarts house people that belong to different houses and we were trying to figure out who belonged to which houses. There were a lot of different propositional symbols that we needed in order to represent some fairly basic ideas. So now is the final topic that we'll take a look at just before we end class today is one final type of logic different from propositional logic known as first order logic, which is a little bit more powerful than propositional logic and is going to make it easier for us to express certain types of ideas. In propositional logic, if we think back to that puzzle with the people in the Hogwarts houses, we had a whole bunch of symbols. And every symbol could only be true or false. We had a symbol for Minerva Gryffindor, which was either true of Minerva within Gryffindor and false otherwise, and likewise for Minerva Hufflepuff and Minerva Ravenclaw and Minerva Slytherin and so forth. But this was starting to get quite redundant. We wanted some way to be able to express that there is a relationship between these propositional symbols, that Minerva shows up in all of them. And also, I would have liked to have not have had so many different symbols to represent what really was a fairly straightforward problem. So first order logic will give us a different way of trying to deal with this idea by giving us two different types of symbols. We're going to have constant symbols that are going to represent objects like people or houses. And then predicate symbols, which you can think of as relations or functions that take an input and evaluate them to true or false, for example, that tell us whether or not some property of some constant or some pair of constants or multiple constants actually holds. So we'll see an example of that in just a moment. For now, in this same problem, our constant symbols might be objects, things like people or houses. So Minerva, Pomona, Horace, Gilderoy, those are all constant symbols, as are my four houses, Gryffindor, Hufflepuff, Ravenclaw, and Slytherin. Predicates, meanwhile, these predicate symbols are going to be properties that might hold true or false of these individual constants. So person might hold true of Minerva, but it would be false for Gryffindor because Gryffindor is not a person. And house is going to hold true for Ravenclaw, but it's not going to hold true for Horace, for example, because Horace is a person. And belongs to, meanwhile, is going to be some relation that is going to relate people to their houses. And it's going to only tell me when someone belongs to a house or does not. So let's take a look at some examples of what a sentence in first order logic might actually look like. A sentence might look like something like this. Person Minerva, with Minerva in parentheses, and person being a predicate symbol, Minerva being a constant symbol. This sentence in first order logic effectively means Minerva is a person, or the person property applies to the Minerva object. So if I want to say something like Minerva is a person, here is how I express that idea using first order logic. Meanwhile, I can say something like, house Gryffindor, to likewise express the idea that Gryffindor is a house. I can do that this way. And all of the same logical connectives that we saw in propositional logic, those are going to work here too. And or implication by conditional not. In fact, I can use not to say something like, not house Minerva. And this sentence in first order logic means something like, Minerva is not a house. It is not true that the house property applies to Minerva. Meanwhile, in addition to some of these predicate symbols that just take a single argument, some of our predicate symbols are going to express binary relations, relations between two of its arguments. So I could say something like, belongs to, and then two inputs, Minerva and Gryffindor, to express the idea that Minerva belongs to Gryffindor. And so now here's the key difference, or one of the key differences, between this and propositional logic. In propositional logic, I needed one symbol for Minerva Gryffindor, and one symbol for Minerva Hufflepuff, and one symbol for all the other people's Gryffindor and Hufflepuff variables. In this case, I just need one symbol for each of my people, and one symbol for each of my houses. And then I can express as a predicate something like, belongs to, and say, belongs to Minerva Gryffindor, to express the idea that Minerva belongs to Gryffindor House. So already we can see that first order logic is quite expressive in being able to express these sorts of sentences using the existing constant symbols and predicates that already exist, while minimizing the number of new symbols that I need to create. I can just use eight symbols for people for houses, instead of 16 symbols for every possible combination of each. But first order logic gives us a couple of additional features that we can use to express even more complex ideas. And these more additional features are generally known as quantifiers. And there are two main quantifiers in first order logic, the first of which is universal quantification. Universal quantification lets me express an idea like something is going to be true for all values of a variable. Like for all values of x, some statement is going to hold true. So what might a sentence in universal quantification look like? Well, we're going to use this upside down a to mean for all. So upside down ax means for all values of x, where x is any object, this is going to hold true. Belongs to x Gryffindor implies not belongs to x Hufflepuff. So let's try and parse this out. This means that for all values of x, if this holds true, if x belongs to Gryffindor, then this does not hold true. x does not belong to Hufflepuff. So translated into English, this sentence is saying something like for all objects x, if x belongs to Gryffindor, then x does not belong to Hufflepuff, for example. Or a phrase even more simply, anyone in Gryffindor is not in Hufflepuff, simplified way of saying the same thing. So this universal quantification lets us express an idea like something is going to hold true for all values of a particular variable. In addition to universal quantification though, we also have existential quantification. Whereas universal quantification said that something is going to be true for all values of a variable, existential quantification says that some expression is going to be true for some value of a variable, at least one value of the variable. So let's take a look at a sample sentence using existential quantification. One such sentence looks like this. There exists an x. This backwards e stands for exists. And here we're saying there exists an x such that house x and belongs to Minerva x. In other words, there exists some object x where x is a house and Minerva belongs to x. Or phrased a little more succinctly in English, I'm here just saying Minerva belongs to a house. There's some object that is a house and Minerva belongs to a house. And combining this universal and existential quantification, we can create far more sophisticated logical statements than we were able to just using propositional logic. I could combine these to say something like this. For all x, person x implies there exists a y such that house y and belongs to xy. All right. So a lot of stuff going on there, a lot of symbols. Let's try and parse it out and just understand what it's saying. Here we're saying that for all values of x, if x is a person, then this is true. So in other words, I'm saying for all people, and we call that person x, this statement is going to be true. What statement is true of all people? Well, there exists a y that is a house, so there exists some house, and x belongs to y. In other words, I'm saying that for all people out there, there exists some house such that x, the person, belongs to y, the house. This is phrased more succinctly. I'm saying that every person belongs to a house, that for all x, if x is a person, then there exists a house that x belongs to. And so we can now express a lot more powerful ideas using this idea now of first order logic. And it turns out there are many other kinds of logic out there. There's second order logic and other higher order logic, each of which allows us to express more and more complex ideas. But all of it, in this case, is really in pursuit of the same goal, which is the representation of knowledge. We want our AI agents to be able to know information, to represent that information, whether that's using propositional logic or first order logic or some other logic, and then be able to reason based on that, to be able to draw conclusions, make inferences, figure out whether there's some sort of entailment relationship, as by using some sort of inference algorithm, something like inference by resolution or model checking or any number of these other algorithms that we can use in order to take information that we know and translate it to additional conclusions. So all of this has helped us to create AI that is able to represent information about what it knows and what it doesn't know. Next time, though, we'll take a look at how we can make our AI even more powerful by not just encoding information that we know for sure to be true and not to be true, but also to take a look at uncertainty, to look at what happens if AI thinks that something might be probable or maybe not very probable or somewhere in between those two extremes, all in the pursuit of trying to build our intelligent systems to be even more intelligent. We'll see you next time. Thank you. All right, welcome back, everyone, to an introduction to artificial intelligence with Python. And last time, we took a look at how it is that AI inside of our computers can represent knowledge. We represented that knowledge in the form of logical sentences in a variety of different logical languages. And the idea was we wanted our AI to be able to represent knowledge or information and somehow use those pieces of information to be able to derive new pieces of information by inference, to be able to take some information and deduce some additional conclusions based on the information that it already knew for sure. But in reality, when we think about computers and we think about AI, very rarely are our machines going to be able to know things for sure. Oftentimes, there's going to be some amount of uncertainty in the information that our AIs or our computers are dealing with, where it might believe something with some probability, as we'll soon discuss what probability is all about and what it means, but not entirely for certain. And we want to use the information that it has some knowledge about, even if it doesn't have perfect knowledge, to still be able to make inferences, still be able to draw conclusions. So you might imagine, for example, in the context of a robot that has some sensors and is exploring some environment, it might not know exactly where it is or exactly what's around it, but it does have access to some data that can allow it to draw inferences with some probability. There's some likelihood that one thing is true or another. Or you can imagine in context where there is a little bit more randomness and uncertainty, something like predicting the weather, where you might not be able to know for sure what tomorrow's weather is with 100% certainty, but you can probably infer with some probability what tomorrow's weather is going to be based on maybe today's weather and yesterday's weather and other data that you might have access to as well. And so oftentimes, we can distill this in terms of just possible events that might happen and what the likelihood of those events are. This comes a lot in games, for example, where there is an element of chance inside of those games. So you imagine rolling a dice. You're not sure exactly what the die roll is going to be, but you know it's going to be one of these possibilities from 1 to 6, for example. And so here now, we introduce the idea of probability theory. And what we'll take a look at today is beginning by looking at the mathematical foundations of probability theory, getting an understanding for some of the key concepts within probability, and then diving into how we can use probability and the ideas that we look at mathematically to represent some ideas in terms of models that we can put into our computers in order to program an AI that is able to use information about probability to draw inferences, to make some judgments about the world with some probability or likelihood of being true. So probability ultimately boils down to this idea that there are possible worlds that we're here representing using this little Greek letter omega. And the idea of a possible world is that when I roll a die, there are six possible worlds that could result from it. I could roll a 1, or a 2, or a 3, or a 4, or a 5, or a 6. And each of those are a possible world. And each of those possible worlds has some probability of being true, the probability that I do roll a 1, or a 2, or a 3, or something else. And we represent that probability like this, using the capital letter P. And then in parentheses, what it is that we want the probability of. So this right here would be the probability of some possible world as represented by the little letter omega. Now, there are a couple of basic axioms of probability that become relevant as we consider how we deal with probability and how we think about it. First and foremost, every probability value must range between 0 and 1 inclusive. So the smallest value any probability can have is the number 0, which is an impossible event. Something like I roll a die, and the die is a 7 is the roll that I get. If the die only has numbers 1 through 6, the event that I roll a 7 is impossible, so it would have probability 0. And on the other end of the spectrum, probability can range all the way up to the positive number 1, meaning an event is certain to happen, that I roll a die and the number is less than 10, for example. That is an event that is guaranteed to happen if the only sides on my die are 1 through 6, for instance. And then they can range through any real number in between these two values. Where, generally speaking, a higher value for the probability means an event is more likely to take place, and a lower value for the probability means the event is less likely to take place. And the other key rule for probability looks a little bit like this. This sigma notation, if you haven't seen it before, refers to summation, the idea that we're going to be adding up a whole sequence of values. And this sigma notation is going to come up a couple of times today, because as we deal with probability, oftentimes we're adding up a whole bunch of individual values or individual probabilities to get some other value. So we'll see this come up a couple of times. But what this notation means is that if I sum up all of the possible worlds omega that are in big omega, which represents the set of all the possible worlds, meaning I take for all of the worlds in the set of possible worlds and add up all of their probabilities, what I ultimately get is the number 1. So if I take all the possible worlds, add up what each of their probabilities is, I should get the number 1 at the end, meaning all probabilities just need to sum to 1. So for example, if I take dice, for example, and if you imagine I have a fair die with numbers 1 through 6 and I roll the die, each one of these rolls has an equal probability of taking place. And the probability is 1 over 6, for example. So each of these probabilities is between 0 and 1, 0 meaning impossible and 1 meaning for certain. And if you add up all of these probabilities for all of the possible worlds, you get the number 1. And we can represent any one of those probabilities like this. The probability that we roll the number 2, for example, is just 1 over 6. Every six times we roll the die, we'd expect that one time, for instance, the die might come up as a 2. Its probability is not certain, but it's a little more than nothing, for instance. And so this is all fairly straightforward for just a single die. But things get more interesting as our models of the world get a little bit more complex. Let's imagine now that we're not just dealing with a single die, but we have two dice, for example. I have a red die here and a blue die there, and I care not just about what the individual roll is, but I care about the sum of the two rolls. In this case, the sum of the two rolls is the number 3. How do I begin to now reason about what does the probability look like if instead of having one die, I now have two dice? Well, what we might imagine is that we could first consider what are all of the possible worlds. And in this case, all of the possible worlds are just every combination of the red and blue die that I could come up with. For the red die, it could be a 1 or a 2 or a 3 or a 4 or a 5 or a 6. And for each of those possibilities, the blue die, likewise, could also be either 1 or 2 or 3 or 4 or 5 or 6. And it just so happens that in this particular case, each of these possible combinations is equally likely. Equally likely are all of these various different possible worlds. That's not always going to be the case. If you imagine more complex models that we could try to build and things that we could try to represent in the real world, it's probably not going to be the case that every single possible world is always equally likely. But in the case of fair dice, where in any given die roll, any one number has just as good a chance of coming up as any other number, we can consider all of these possible worlds to be equally likely. But even though all of the possible worlds are equally likely, that doesn't necessarily mean that their sums are equally likely. So if we consider what the sum is of all of these two, so 1 plus 1, that's a 2. 2 plus 1 is a 3. And consider for each of these possible pairs of numbers what their sum ultimately is, we can notice that there are some patterns here, where it's not entirely the case that every number comes up equally likely. If you consider 7, for example, what's the probability that when I roll two dice, their sum is 7? There are several ways this can happen. There are six possible worlds where the sum is 7. It could be a 1 and a 6, or a 2 and a 5, or a 3 and a 4, a 4 and a 3, and so forth. But if you instead consider what's the probability that I roll two dice, and the sum of those two die rolls is 12, for example, we're looking at this diagram, there's only one possible world in which that can happen. And that's the possible world where both the red die and the blue die both come up as sixes to give us a sum total of 12. So based on just taking a look at this diagram, we see that some of these probabilities are likely different. The probability that the sum is a 7 must be greater than the probability that the sum is a 12. And we can represent that even more formally by saying, OK, the probability that we sum to 12 is 1 out of 36. Out of the 36 equally likely possible worlds, 6 squared because we have six options for the red die and six options for the blue die, out of those 36 options, only one of them sums to 12. Whereas on the other hand, the probability that if we take two dice rolls and they sum up to the number 7, well, out of those 36 possible worlds, there were six worlds where the sum was 7. And so we get 6 over 36, which we can simplify as a fraction to just 1 over 6. So here now, we're able to represent these different ideas of probability, representing some events that might be more likely and then other events that are less likely as well. And these sorts of judgments, where we're figuring out just in the abstract what is the probability that this thing takes place, are generally known as unconditional probabilities. Some degree of belief we have in some proposition, some fact about the world, in the absence of any other evidence. Without knowing any additional information, if I roll a die, what's the chance it comes up as a 2? Or if I roll two dice, what's the chance that the sum of those two die rolls is a 7? But usually when we're thinking about probability, especially when we're thinking about training in AI to intelligently be able to know something about the world and make predictions based on that information, it's not unconditional probability that our AI is dealing with, but rather conditional probability, probability where rather than having no original knowledge, we have some initial knowledge about the world and how the world actually works. So conditional probability is the degree of belief in a proposition given some evidence that has already been revealed to us. So what does this look like? Well, it looks like this in terms of notation. We're going to represent conditional probability as probability of A and then this vertical bar and then B. And the way to read this is the thing on the lefthand side of the vertical bar is what we want the probability of. Here now, I want the probability that A is true, that it is the real world, that it is the event that actually does take place. And then on the right side of the vertical bar is our evidence, the information that we already know for certain about the world. For example, that B is true. So the way to read this entire expression is what is the probability of A given B, the probability that A is true, given that we already know that B is true. And this type of judgment, conditional probability, the probability of one thing given some other fact, comes up quite a lot when we think about the types of calculations we might want our AI to be able to do. For example, we might care about the probability of rain today given that we know that it rained yesterday. We could think about the probability of rain today just in the abstract. What is the chance that today it rains? But usually, we have some additional evidence. I know for certain that it rained yesterday. And so I would like to calculate the probability that it rains today given that I know that it rained yesterday. Or you might imagine that I want to know the probability that my optimal route to my destination changes given the current traffic condition. So whether or not traffic conditions change, that might change the probability that this route is actually the optimal route. Or you might imagine in a medical context, I want to know the probability that a patient has a particular disease given some results of some tests that have been performed on that patient. And I have some evidence, the results of that test, and I would like to know the probability that a patient has a particular disease. So this notion of conditional probability comes up everywhere. So we begin to think about what we would like to reason about, but being able to reason a little more intelligently by taking into account evidence that we already have. We're more able to get an accurate result for what is the likelihood that someone has this disease if we know this evidence, the results of the test, as opposed to if we were just calculating the unconditional probability of saying, what is the probability they have the disease without any evidence to try and back up our result one way or the other. So now that we've got this idea of what conditional probability is, the next question we have to ask is, all right, how do we calculate conditional probability? How do we figure out mathematically, if I have an expression like this, how do I get a number from that? What does conditional probability actually mean? Well, the formula for conditional probability looks a little something like this. The probability of a given b, the probability that a is true, given that we know that b is true, is equal to this fraction, the probability that a and b are true, divided by just the probability that b is true. And the way to intuitively try to think about this is that if I want to know the probability that a is true, given that b is true, well, I want to consider all the ways they could both be true out of the only worlds that I care about are the worlds where b is already true. I can sort of ignore all the cases where b isn't true, because those aren't relevant to my ultimate computation. They're not relevant to what it is that I want to get information about. So let's take a look at an example. Let's go back to that example of rolling two dice and the idea that those two dice might sum up to the number 12. We discussed earlier that the unconditional probability that if I roll two dice and they sum to 12 is 1 out of 36, because out of the 36 possible worlds that I might care about, in only one of them is the sum of those two dice 12. It's only when red is 6 and blue is also 6. But let's say now that I have some additional information. I now want to know what is the probability that the two dice sum to 12, given that I know that the red die was a 6. So I already have some evidence. I already know the red die is a 6. I don't know what the blue die is. That information isn't given to me in this expression. But given the fact that I know that the red die rolled a 6, what is the probability that we sum to 12? And so we can begin to do the math using that expression from before. Here, again, are all of the possibilities, all of the possible combinations of red die being 1 through 6 and blue die being 1 through 6. And I might consider first, all right, what is the probability of my evidence, my B variable, where I want to know, what is the probability that the red die is a 6? Well, the probability that the red die is a 6 is just 1 out of 6. So these 1 out of 6 options are really the only worlds that I care about here now. All the rest of them are irrelevant to my calculation, because I already have this evidence that the red die was a 6, so I don't need to care about all of the other possibilities that could result. So now, in addition to the fact that the red die rolled as a 6 and the probability of that, the other piece of information I need to know in order to calculate this conditional probability is the probability that both of my variables, A and B, are true. The probability that both the red die is a 6, and they all sum to 12. So what is the probability that both of these things happen? Well, it only happens in one possible case in 1 out of these 36 cases, and it's the case where both the red and the blue die are equal to 6. This is a piece of information that we already knew. And so this probability is equal to 1 over 36. And so to get the conditional probability that the sum is 12, given that I know that the red dice is equal to 6, well, I just divide these two values together, and 1 over 36 divided by 1 over 6 gives us this probability of 1 over 6. Given that I know that the red die rolled a value of 6, the probability that the sum of the two dice is 12 is also 1 over 6. And that probably makes intuitive sense to you, too, because if the red die is a 6, the only way for me to get to a 12 is if the blue die also rolls a 6, and we know that the probability of the blue die rolling a 6 is 1 over 6. So in this case, the conditional probability seems fairly straightforward. But this idea of calculating a conditional probability by looking at the probability that both of these events take place is an idea that's going to come up again and again. This is the definition now of conditional probability. And we're going to use that definition as we think about probability more generally to be able to draw conclusions about the world. This, again, is that formula. The probability of A given B is equal to the probability that A and B take place divided by the probability of B. And you'll see this formula sometimes written in a couple of different ways. You could imagine algebraically multiplying both sides of this equation by probability of B to get rid of the fraction, and you'll get an expression like this. The probability of A and B, which is this expression over here, is just the probability of B times the probability of A given B. Or you could represent this equivalently since A and B in this expression are interchangeable. A and B is the same thing as B and A. You could imagine also representing the probability of A and B as the probability of A times the probability of B given A, just switching all of the A's and B's. These three are all equivalent ways of trying to represent what joint probability means. And so you'll sometimes see all of these equations, and they might be useful to you as you begin to reason about probability and to think about what values might be taking place in the real world. Now, sometimes when we deal with probability, we don't just care about a Boolean event like did this happen or did this not happen. Sometimes we might want the ability to represent variable values in a probability space where some variable might take on multiple different possible values. And in probability, we call a variable in probability theory a random variable. A random variable in probability is just some variable in probability theory that has some domain of values that it can take on. So what do I mean by this? Well, what I mean is I might have a random variable that is just called roll, for example, that has six possible values. Roll is my variable, and the possible values, the domain of values that it can take on are 1, 2, 3, 4, 5, and 6. And I might like to know the probability of each. In this case, they happen to all be the same. But in other random variables, that might not be the case. For example, I might have a random variable to represent the weather, for example, where the domain of values it could take on are things like sun or cloudy or rainy or windy or snowy. And each of those might have a different probability. And I care about knowing what is the probability that the weather equals sun or that the weather equals clouds, for instance. And I might like to do some mathematical calculations based on that information. Other random variables might be something like traffic. What are the odds that there is no traffic or light traffic or heavy traffic? Traffic, in this case, is my random variable. And the values that that random variable can take on are here. It's either none or light or heavy. And I, the person doing these calculations, I, the person encoding these random variables into my computer, need to make the decision as to what these possible values actually are. You might imagine, for example, for a flight. If I care about whether or not I make it or do a flight on time, my flight has a couple of possible values that it could take on. My flight could be on time. My flight could be delayed. My flight could be canceled. So flight, in this case, is my random variable. And these are the values that it can take on. And often, I want to know something about the probability that my random variable takes on each of those possible values. And this is what we then call a probability distribution. A probability distribution takes a random variable and gives me the probability for each of the possible values in its domain. So in the case of this flight, for example, my probability distribution might look something like this. My probability distribution says the probability that the random variable flight is equal to the value on time is 0.6. Or otherwise, put into more English humanfriendly terms, the likelihood that my flight is on time is 60%, for example. And in this case, the probability that my flight is delayed is 30%. The probability that my flight is canceled is 10% or 0.1. And if you sum up all of these possible values, the sum is going to be 1, right? If you take all of the possible worlds, here are my three possible worlds for the value of the random variable flight, add them all up together, the result needs to be the number 1 per that axiom of probability theory that we've discussed before. So this now is one way of representing this probability distribution for the random variable flight. Sometimes you'll see it represented a little bit more concisely that this is pretty verbose for really just trying to express three possible values. And so often, you'll instead see the same notation representing using a vector. And all a vector is is a sequence of values. As opposed to just a single value, I might have multiple values. And so I could extend instead, represent this idea this way. Bold p, so a larger p, generally meaning the probability distribution of this variable flight is equal to this vector represented in angle brackets. The probability distribution is 0.6, 0.3, and 0.1. And I would just have to know that this probability distribution is in order of on time or delayed and canceled to know how to interpret this vector. To mean the first value in the vector is the probability that my flight is on time. The second value in the vector is the probability that my flight is delayed. And the third value in the vector is the probability that my flight is canceled. And so this is just an alternate way of representing this idea, a little more verbosely. But oftentimes, you'll see us just talk about a probability distribution over a random variable. And whenever we talk about that, what we're really doing is trying to figure out the probabilities of each of the possible values that that random variable can take on. But this notation is just a little bit more succinct, even though it can sometimes be a little confusing, depending on the context in which you see it. So we'll start to look at examples where we use this sort of notation to describe probability and to describe events that might take place. A couple of other important ideas to know with regards to probability theory. One is this idea of independence. And independence refers to the idea that the knowledge of one event doesn't influence the probability of another event. So for example, in the context of my two dice rolls, where I had the red die and the blue die, the probability that I roll the red die and the blue die, those two events, red die and blue die, are independent. Knowing the result of the red die doesn't change the probabilities for the blue die. It doesn't give me any additional information about what the value of the blue die is ultimately going to be. But that's not always going to be the case. You might imagine that in the case of weather, something like clouds and rain, those are probably not independent. But if it is cloudy, that might increase the probability that later in the day it's going to rain. So some information informs some other event or some other random variable. So independence refers to the idea that one event doesn't influence the other. And if they're not independent, then there might be some relationship. So mathematically, formally, what does independence actually mean? Well, recall this formula from before, that the probability of A and B is the probability of A times the probability of B given A. And the more intuitive way to think about this is that to know how likely it is that A and B happen, well, let's first figure out the likelihood that A happens. And then given that we know that A happens, let's figure out the likelihood that B happens and multiply those two things together. But if A and B were independent, meaning knowing A doesn't change anything about the likelihood that B is true, well, then the probability of B given A, meaning the probability that B is true, given that I know A is true, well, that I know A is true shouldn't really make a difference if these two things are independent, that A shouldn't influence B at all. So the probability of B given A is really just the probability of B. If it is true that A and B are independent. And so this right here is one example of a definition for what it means for A and B to be independent. The probability of A and B is just the probability of A times the probability of B. Anytime you find two events A and B where this relationship holds, then you can say that A and B are independent. So an example of that might be the dice that we were taking a look at before. Here, if I wanted the probability of red being a 6 and blue being a 6, well, that's just the probability that red is a 6 multiplied by the probability that blue is a 6. It's both equal to 1 over 36. So I can say that these two events are independent. What wouldn't be independent, for example, would be an example. So this, for example, has a probability of 1 over 36, as we talked about before. But what wouldn't be independent would be a case like this, the probability that the red die rolls a 6 and the red die rolls a 4. If you just naively took, OK, red die 6, red die 4, well, if I'm only rolling the die once, you might imagine the naive approach is to say, well, each of these has a probability of 1 over 6. So multiply them together, and the probability is 1 over 36. But of course, if you're only rolling the red die once, there's no way you could get two different values for the red die. It couldn't both be a 6 and a 4. So the probability should be 0. But if you were to multiply probability of red 6 times probability of red 4, well, that would equal 1 over 36. But of course, that's not true. Because we know that there is no way, probability 0, that when we roll the red die once, we get both a 6 and a 4, because only one of those possibilities can actually be the result. And so we can say that the event that red roll is 6 and the event that red roll is 4, those two events are not independent. If I know that the red roll is a 6, I know that the red roll cannot possibly be a 4, so these things are not independent. And instead, if I wanted to calculate the probability, I would need to use this conditional probability as the regular definition of the probability of two events taking place. And the probability of this now, well, the probability of the red roll being a 6, that's 1 over 6. But what's the probability that the roll is a 4 given that the roll is a 6? Well, this is just 0, because there's no way for the red roll to be a 4, given that we already know the red roll is a 6. And so the value, if we do add all that multiplication, is we get the number 0. So this idea of conditional probability is going to come up again and again, especially as we begin to reason about multiple different random variables that might be interacting with each other in some way. And this gets us to one of the most important rules in probability theory, which is known as Bayes rule. And it turns out that just using the information we've already learned about probability and just applying a little bit of algebra, we can actually derive Bayes rule for ourselves. But it's a very important rule when it comes to inference and thinking about probability in the context of what it is that a computer can do or what a mathematician could do by having access to information about probability. So let's go back to these equations to be able to derive Bayes rule ourselves. We know the probability of A and B, the likelihood that A and B take place, is the likelihood of B, and then the likelihood of A, given that we know that B is already true. And likewise, the probability of A given A and B is the probability of A times the probability of B, given that we know that A is already true. This is sort of a symmetric relationship where it doesn't matter the order of A and B and B and A mean the same thing. And so in these equations, we can just swap out A and B to be able to represent the exact same idea. So we know that these two equations are already true. We've seen that already. And now let's just do a little bit of algebraic manipulation of this stuff. Both of these expressions on the righthand side are equal to the probability of A and B. So what I can do is take these two expressions on the righthand side and just set them equal to each other. If they're both equal to the probability of A and B, then they both must be equal to each other. So probability of A times probability of B given A is equal to the probability of B times the probability of A given B. And now all we're going to do is do a little bit of division. I'm going to divide both sides by P of A. And now I get what is Bayes' rule. The probability of B given A is equal to the probability of B times the probability of A given B divided by the probability of A. And sometimes in Bayes' rule, you'll see the order of these two arguments switched. So instead of B times A given B, it'll be A given B times B. That ultimately doesn't matter because in multiplication, you can switch the order of the two things you're multiplying, and it doesn't change the result. But this here right now is the most common formulation of Bayes' rule. The probability of B given A is equal to the probability of A given B times the probability of B divided by the probability of A. And this rule, it turns out, is really important when it comes to trying to infer things about the world, because it means you can express one conditional probability, the conditional probability of B given A, using knowledge about the probability of A given B, using the reverse of that conditional probability. So let's first do a little bit of an example with this, just to see how we might use it, and then explore what this means a little bit more generally. So we're going to construct a situation where I have some information. There are two events that I care about, the idea that it's cloudy in the morning and the idea that it is rainy in the afternoon. Those are two different possible events that could take place, cloudy in the morning, or the AM, rainy in the PM. And what I care about is, given clouds in the morning, what is the probability of rain in the afternoon? A reasonable question I might ask, in the morning, I look outside, or an AI's camera looks outside and sees that there are clouds in the morning. And we want to conclude, we want to figure out what is the probability that in the afternoon, there is going to be rain. Of course, in the abstract, we don't have access to this kind of information, but we can use data to begin to try and figure this out. So let's imagine now that I have access to some pieces of information. I have access to the idea that 80% of rainy afternoons start out with a cloudy morning. And you might imagine that I could have gathered this data just by looking at data over a sequence of time, that I know that 80% of the time when it's raining in the afternoon, it was cloudy that morning. I also know that 40% of days have cloudy mornings. And I also know that 10% of days have rainy afternoons. And now using this information, I would like to figure out, given clouds in the morning, what is the probability that it rains in the afternoon? I want to know the probability of afternoon rain given morning clouds. And I can do that, in particular, using this fact, the probability of, so if I know that 80% of rainy afternoons start with cloudy mornings, then I know the probability of cloudy mornings given rainy afternoons. So using sort of the reverse conditional probability, I can figure that out. Expressed in terms of Bayes rule, this is what that would look like. Probability of rain given clouds is the probability of clouds given rain times the probability of rain divided by the probability of clouds. Here I'm just substituting in for the values of a and b from that equation of Bayes rule from before. And then I can just do the math. I have this information. I know that 80% of the time, if it was raining, then there were clouds in the morning. So 0.8 here. Probability of rain is 0.1, because 10% of days were rainy, and 40% of days were cloudy. I do the math, and I can figure out the answer is 0.2. So the probability that it rains in the afternoon, given that it was cloudy in the morning, is 0.2 in this case. And this now is an application of Bayes rule, the idea that using one conditional probability, we can get the reverse conditional probability. And this is often useful when one of the conditional probabilities might be easier for us to know about or easier for us to have data about. And using that information, we can calculate the other conditional probability. So what does this look like? Well, it means that knowing the probability of cloudy mornings given rainy afternoons, we can calculate the probability of rainy afternoons given cloudy mornings. Or, for example, more generally, if we know the probability of some visible effect, some effect that we can see and observe, given some unknown cause that we're not sure about, well, then we can calculate the probability of that unknown cause given the visible effect. So what might that look like? Well, in the context of medicine, for example, I might know the probability of some medical test result given a disease. Like, I know that if someone has a disease, then x% of the time the medical test result will show up as this, for instance. And using that information, then I can calculate, all right, what is the probability that given I know the medical test result, what is the likelihood that someone has the disease? This is the piece of information that is usually easier to know, easier to immediately have access to data for. And this is the information that I actually want to calculate. Or I might want to know, for example, if I know that some probability of counterfeit bills have blurry text around the edges, because counterfeit printers aren't nearly as good at printing text precisely. So I have some information about, given that something is a counterfeit bill, like x% of counterfeit bills have blurry text, for example. And using that information, then I can calculate some piece of information that I might want to know, like, given that I know there's blurry text on a bill, what is the probability that that bill is counterfeit? So given one conditional probability, I can calculate the other conditional probability as well. And so now we've taken a look at a couple of different types of probability. And we've looked at unconditional probability, where I just look at what is the probability of this event occurring, given no additional evidence that I might have access to. And we've also looked at conditional probability, where I have some sort of evidence, and I would like to, using that evidence, be able to calculate some other probability as well. And the other kind of probability that will be important for us to think about is joint probability. And this is when we're considering the likelihood of multiple different events simultaneously. And so what do we mean by this? For example, I might have probability distributions that look a little something like this. Like, oh, I want to know the probability distribution of clouds in the morning. And that distribution looks like this. 40% of the time, C, which is my random variable here, is equal to it's cloudy. And 60% of the time, it's not cloudy. So here is just a simple probability distribution that is effectively telling me that 40% of the time, it's cloudy. I might also have a probability distribution for rain in the afternoon, where 10% of the time, or with probability 0.1, it is raining in the afternoon. And with probability 0.9, it is not raining in the afternoon. And using just these two pieces of information, I don't actually have a whole lot of information about how these two variables relate to each other. But I could if I had access to their joint probability, meaning for every combination of these two things, meaning morning cloudy and afternoon rain, morning cloudy and afternoon not rain, morning not cloudy and afternoon rain, and morning not cloudy and afternoon not raining, if I had access to values for each of those four, I'd have more information. So information that'd be organized in a table like this, and this, rather than just a probability distribution, is a joint probability distribution. It tells me the probability distribution of each of the possible combinations of values that these random variables can take on. So if I want to know what is the probability that on any given day it is both cloudy and rainy, well, I would say, all right, we're looking at cases where it is cloudy and cases where it is raining. And the intersection of those two, that row in that column, is 0.08. So that is the probability that it is both cloudy and rainy using that information. And using this conditional probability table, using this joint probability table, I can begin to draw other pieces of information about things like conditional probability. So I might ask a question like, what is the probability distribution of clouds given that I know that it is raining? Meaning I know for sure that it's raining. Tell me the probability distribution over whether it's cloudy or not, given that I know already that it is, in fact, raining. And here I'm using C to stand for that random variable. I'm looking for a distribution, meaning the answer to this is not going to be a single value. It's going to be two values, a vector of two values, where the first value is probability of clouds, the second value is probability that it is not cloudy, but the sum of those two values is going to be 1. Because when you add up the probabilities of all of the possible worlds, the result that you get must be the number 1. And well, what do we know about how to calculate a conditional probability? Well, we know that the probability of A given B is the probability of A and B divided by the probability of B. So what does this mean? Well, it means that I can calculate the probability of clouds given that it's raining as the probability of clouds and raining divided by the probability of rain. And this comma here for the probability distribution of clouds and rain, this comma sort of stands in for the word and. You'll sort of see in the logical operator and and the comma used interchangeably. This means the probability distribution over the clouds and knowing the fact that it is raining divided by the probability of rain. And the interesting thing to note here and what we'll often do in order to simplify our mathematics is that dividing by the probability of rain, the probability of rain here is just some numerical constant. It is some number. Dividing by probability of rain is just dividing by some constant, or in other words, multiplying by the inverse of that constant. And it turns out that oftentimes we can just not worry about what the exact value of this is and just know that it is, in fact, a constant value. And we'll see why in a moment. So instead of expressing this as this joint probability divided by the probability of rain, sometimes we'll just represent it as alpha times the numerator here, the probability distribution of C, this variable, and that we know that it is raining, for instance. So all we've done here is said this value of 1 over the probability of rain, that's really just a constant we're going to divide by or equivalently multiply by the inverse of at the end. We'll just call it alpha for now and deal with it a little bit later. But the key idea here now, and this is an idea that's going to come up again, is that the conditional distribution of C given rain is proportional to, meaning just some factor multiplied by the joint probability of C and rain being true. And so how do we figure this out? Well, this is going to be the probability that it is cloudy given that it's raining, which is 0.08, and the probability that it's not cloudy given that it's raining, which is 0.02. And so we get alpha times here now is that probability distribution. 0.08 is clouds and rain. 0.02 is not cloudy and rain. But of course, 0.08 and 0.02 don't sum up to the number 1. And we know that in a probability distribution, if you consider all of the possible values, they must sum up to a probability of 1. And so we know that we just need to figure out some constant to normalize, so to speak, these values, something we can multiply or divide by to get it so that all these probabilities sum up to 1, and it turns out that if we multiply both numbers by 10, then we can get that result of 0.8 and 0.2. The proportions are still equivalent, but now 0.8 plus 0.2, those sum up to the number 1. So take a look at this and see if you can understand step by step how it is we're getting from one point to another. The key idea here is that by using the joint probabilities, these probabilities that it is both cloudy and rainy and that it is not cloudy and rainy, I can take that information and figure out the conditional probability given that it's raining. What is the chance that it's cloudy versus not cloudy? Just by multiplying by some normalization constant, so to speak. And this is what a computer can begin to use to be able to interact with these various different types of probabilities. And it turns out there are a number of other probability rules that are going to be useful to us as we begin to explore how we can actually use this information to encode into our computers some more complex analysis that we might want to do about probability and distributions and random variables that we might be interacting with. So here are a couple of those important probability rules. One of the simplest rules is just this negation rule. What is the probability of not event A? So A is an event that has some probability, and I would like to know what is the probability that A does not occur. And it turns out it's just 1 minus P of A, which makes sense. Because if those are the two possible cases, either A happens or A doesn't happen, then when you add up those two cases, you must get 1, which means that P of not A must just be 1 minus P of A. Because P of A and P of not A must sum up to the number 1. They must include all of the possible cases. We've seen an expression for calculating the probability of A and B. We might also reasonably want to calculate the probability of A or B. What is the probability that one thing happens or another thing happens? So for example, I might want to calculate what is the probability that if I roll two dice, a red die and a blue die, what is the likelihood that A is a 6 or B is a 6, like one or the other? And what you might imagine you could do, and the wrong way to approach it, would be just to say, all right, well, A comes up as a 6 with the red die comes up as a 6 with probability 1 over 6. The same for the blue die, it's also 1 over 6. Add them together, and you get 2 over 6, otherwise known as 1 third. But this suffers from a problem of over counting, that we've double counted the case, where both A and B, both the red die and the blue die, both come up as a 6roll. And I've counted that instance twice. So to resolve this, the actual expression for calculating the probability of A or B uses what we call the inclusionexclusion formula. So I take the probability of A, add it to the probability of B. That's all same as before. But then I need to exclude the cases that I've double counted. So I subtract from that the probability of A and B. And that gets me the result for A or B. I consider all the cases where A is true and all the cases where B is true. And if you imagine this is like a Venn diagram of cases where A is true, cases where B is true, I just need to subtract out the middle to get rid of the cases that I have overcounted by double counting them inside of both of these individual expressions. One other rule that's going to be quite helpful is a rule called marginalization. So marginalization is answering the question of how do I figure out the probability of A using some other variable that I might have access to, like B? Even if I don't know additional information about it, I know that B, some event, can have two possible states, either B happens or B doesn't happen, assuming it's a Boolean, true or false. And well, what that means is that for me to be able to calculate the probability of A, there are only two cases. Either A happens and B happens, or A happens and B doesn't happen. And those are two disjoint, meaning they can't both happen together. Either B happens or B doesn't happen. They're disjoint or separate cases. And so I can figure out the probability of A just by adding up those two cases. The probability that A is true is the probability that A and B is true, plus the probability that A is true and B isn't true. So by marginalizing, I've looked at the two possible cases that might take place, either B happens or B doesn't happen. And in either of those cases, I look at what's the probability that A happens. And if I add those together, well, then I get the probability that A happens as a whole. So take a look at that rule. It doesn't matter what B is or how it's related to A. So long as I know these joint distributions, I can figure out the overall probability of A. And this can be a useful way if I have a joint distribution, like the joint distribution of A and B, to just figure out some unconditional probability, like the probability of A. And we'll see examples of this soon as well. Now, sometimes these might not just be random, might not just be variables that are events that are like they happened or they didn't happen, like B is here. They might be some broader probability distribution where there are multiple possible values. And so here, in order to use this marginalization rule, I need to sum up not just over B and not B, but for all of the possible values that the other random variable could take on. And so here, we'll see a version of this rule for random variables. And it's going to include that summation notation to indicate that I'm summing up, adding up a whole bunch of individual values. So here's the rule. Looks a lot more complicated, but it's actually the equivalent exactly the same rule. What I'm saying here is that if I have two random variables, one called x and one called y, well, the probability that x is equal to some value x sub i, this is just some value that this variable takes on. How do I figure it out? Well, I'm going to sum up over j, where j is going to range over all of the possible values that y can take on. Well, let's look at the probability that x equals xi and y equals yj. So the exact same rule, the only difference here is now I'm summing up over all of the possible values that y can take on, saying let's add up all of those possible cases and look at this joint distribution, this joint probability, that x takes on the value I care about, given all of the possible values for y. And if I add all those up, then I can get this unconditional probability of what x is equal to, whether or not x is equal to some value x sub i. So let's take a look at this rule, because it does look a little bit complicated. Let's try and put a concrete example to it. Here again is that same joint distribution from before. I have cloud, not cloudy, rainy, not rainy. And maybe I want to access some variable. I want to know what is the probability that it is cloudy. Well, marginalization says that if I have this joint distribution and I want to know what is the probability that it is cloudy, well, I need to consider the other variable, the variable that's not here, the idea that it's rainy. And I consider the two cases, either it's raining or it's not raining. And I just sum up the values for each of those possibilities. In other words, the probability that it is cloudy is equal to the sum of the probability that it's cloudy and it's rainy and the probability that it's cloudy and it is not raining. And so these now are values that I have access to. These are values that are just inside of this joint probability table. What is the probability that it is both cloudy and rainy? Well, it's just the intersection of these two here, which is 0.08. And the probability that it's cloudy and not raining is, all right, here's cloudy, here's not raining. It's 0.32. So it's 0.08 plus 0.32, which just gives us equal to 0.4. That is the unconditional probability that it is, in fact, cloudy. And so marginalization gives us a way to go from these joint distributions to just some individual probability that I might care about. And you'll see a little bit later why it is that we care about that and why that's actually useful to us as we begin doing some of these calculations. Last rule we'll take a look at before transitioning to something a little bit different is this rule of conditioning, very similar to the marginalization rule. But it says that, again, if I have two events, a and b, but instead of having access to their joint probabilities, I have access to their conditional probabilities, how they relate to each other. Well, again, if I want to know the probability that a happens, and I know that there's some other variable b, either b happens or b doesn't happen, and so I can say that the probability of a is the probability of a given b times the probability of b, meaning b happened. And given that I know b happened, what's the likelihood that a happened? And then I consider the other case, that b didn't happen. So here's the probability that b didn't happen. And here's the probability that a happens, given that I know that b didn't happen. And this is really the equivalent rule just using conditional probability instead of joint probability, where I'm saying let's look at both of these two cases and condition on b. Look at the case where b happens, and look at the case where b doesn't happen, and look at what probabilities I get as a result. And just as in the case of marginalization, where there was an equivalent rule for random variables that could take on multiple possible values in a domain of possible values, here, too, conditioning has the same equivalent rule. Again, there's a summation to mean I'm summing over all of the possible values that some random variable y could take on. But if I want to know what is the probability that x takes on this value, then I'm going to sum up over all the values j that y could take on, and say, all right, what's the chance that y takes on that value yj? And multiply it by the conditional probability that x takes on this value, given that y took on that value yj. So equivalent rule just using conditional probabilities instead of joint probabilities. And using the equation we know about joint probabilities, we can translate between these two. So all right, we've seen a whole lot of mathematics, and we've just laid the foundation for mathematics. And no need to worry if you haven't seen probability in too much detail up until this point. These are the foundations of the ideas that are going to come up as we begin to explore how we can now take these ideas from probability and begin to apply them to represent something inside of our computer, something inside of the AI agent we're trying to design that is able to represent information and probabilities and the likelihoods between various different events. So there are a number of different probabilistic models that we can generate, but the first of the models we're going to talk about are what are known as Bayesian networks. And a Bayesian network is just going to be some network of random variables, connected random variables that are going to represent the dependence between these random variables. The odds are most random variables in this world are not independent from each other, but there's some relationship between things that are happening that we care about. If it is rainy today, that might increase the likelihood that my flight or my train gets delayed, for example. There are some dependence between these random variables, and a Bayesian network is going to be able to capture those dependencies. So what is a Bayesian network? What is its actual structure, and how does it work? Well, a Bayesian network is going to be a directed graph. And again, we've seen directed graphs before. They are individual nodes with arrows or edges that connect one node to another node pointing in a particular direction. And so this directed graph is going to have nodes as well, where each node in this directed graph is going to represent a random variable, something like the weather, or something like whether my train was on time or delayed. And we're going to have an arrow from a node x to a node y to mean that x is a parent of y. So that'll be our notation. If there's an arrow from x to y, x is going to be considered a parent of y. And the reason that's important is because each of these nodes is going to have a probability distribution that we're going to store along with it, which is the distribution of x given some evidence, given the parents of x. So the way to more intuitively think about this is the parents seem to be thought of as sort of causes for some effect that we're going to observe. And so let's take a look at an actual example of a Bayesian network and think about the types of logic that might be involved in reasoning about that network. Let's imagine for a moment that I have an appointment out of town, and I need to take a train in order to get to that appointment. So what are the things I might care about? Well, I care about getting to my appointment on time. Whether I make it to my appointment and I'm able to attend it or I miss the appointment. And you might imagine that that's influenced by the train, that the train is either on time or it's delayed, for example. But that train itself is also influenced. Whether the train is on time or not depends maybe on the rain. Is there no rain? Is it light rain? Is there heavy rain? And it might also be influenced by other variables too. It might be influenced as well by whether or not there's maintenance on the train track, for example. If there is maintenance on the train track, that probably increases the likelihood that my train is delayed. And so we can represent all of these ideas using a Bayesian network that looks a little something like this. Here I have four nodes representing four random variables that I would like to keep track of. I have one random variable called rain that can take on three possible values in its domain, either none or light or heavy, for no rain, light rain, or heavy rain. I have a variable called maintenance for whether or not there is maintenance on the train track, which it has two possible values, just either yes or no. Either there is maintenance or there's no maintenance happening on the track. Then I have a random variable for the train indicating whether or not the train was on time or not. That random variable has two possible values in its domain. The train is either on time or the train is delayed. And then finally, I have a random variable for whether I make it to my appointment. For my appointment down here, I have a random variable called appointment that itself has two possible values, attend and miss. And so here are the possible values. Here are my four nodes, each of which represents a random variable, each of which has a domain of possible values that it can take on. And the arrows, the edges pointing from one node to another, encode some notion of dependence inside of this graph, that whether I make it to my appointment or not is dependent upon whether the train is on time or delayed. And whether the train is on time or delayed is dependent on two things given by the two arrows pointing at this node. It is dependent on whether or not there was maintenance on the train track. And it is also dependent upon whether or not it was raining or whether it is raining. And just to make things a little complicated, let's say as well that whether or not there is maintenance on the track, this too might be influenced by the rain. That if there's heavier rain, well, maybe it's less likely that it's going to be maintenance on the train track that day because they're more likely to want to do maintenance on the track on days when it's not raining, for example. And so these nodes might have different relationships between them. But the idea is that we can come up with a probability distribution for any of these nodes based only upon its parents. And so let's look node by node at what this probability distribution might actually look like. And we'll go ahead and begin with this root node, this rain node here, which is at the top, and has no arrows pointing into it, which means its probability distribution is not going to be a conditional distribution. It's not based on anything. I just have some probability distribution over the possible values for the rain random variable. And that distribution might look a little something like this. None, light and heavy, each have a possible value. Here I'm saying the likelihood of no rain is 0.7, of light rain is 0.2, of heavy rain is 0.1, for example. So here is a probability distribution for this root node in this Bayesian network. And let's now consider the next node in the network, maintenance. Track maintenance is yes or no. And the general idea of what this distribution is going to encode, at least in this story, is the idea that the heavier the rain is, the less likely it is that there's going to be maintenance on the track. Because the people that are doing maintenance on the track probably want to wait until a day when it's not as rainy in order to do the track maintenance, for example. And so what might that probability distribution look like? Well, this now is going to be a conditional probability distribution, that here are the three possible values for the rain random variable, which I'm here just going to abbreviate to R, either no rain, light rain, or heavy rain. And for each of those possible values, either there is yes track maintenance or no track maintenance. And those have probabilities associated with them. That I see here that if it is not raining, then there is a probability of 0.4 that there's track maintenance and a probability of 0.6 that there isn't. But if there's heavy rain, then here the chance that there is track maintenance is 0.1 and the chance that there is not track maintenance is 0.9. Each of these rows is going to sum up to 1. Because each of these represent different values of whether or not it's raining, the three possible values that that random variable can take on. And each is associated with its own probability distribution that is ultimately all going to add up to the number 1. So that there is our distribution for this random variable called maintenance, about whether or not there is maintenance on the train track. And now let's consider the next variable. Here we have a node inside of our Bayesian network called train that has two possible values, on time and delayed. And this node is going to be dependent upon the two nodes that are pointing towards it, that whether or not the train is on time or delayed depends on whether or not there is track maintenance. And it depends on whether or not there is rain, that heavier rain probably means more likely that my train is delayed. And if there is track maintenance, that also probably means it's more likely that my train is delayed as well. And so you could construct a larger probability distribution, a conditional probability distribution, that instead of conditioning on just one variable, as was the case here, is now conditioning on two variables, conditioning both on rain represented by r and on maintenance represented by yes. Again, each of these rows has two values that sum up to the number 1, one for whether the train is on time, one for whether the train is delayed. And here I can say something like, all right, if I know there was light rain and track maintenance, well, OK, that would be r is light and m is yes. Well, then there is a probability of 0.6 that my train is on time, and a probability of 0.4 the train is delayed. And you can imagine gathering this data just by looking at real world data, looking at data about, all right, if I knew that it was light rain and there was track maintenance, how often was a train delayed or not delayed? And you could begin to construct this thing. The interesting thing is intelligently, being able to try to figure out how might you go about ordering these things, what things might influence other nodes inside of this Bayesian network. And the last thing I care about is whether or not I make it to my appointment. So did I attend or miss the appointment? And ultimately, whether I attend or miss the appointment, it is influenced by track maintenance, because it's indirectly this idea that, all right, if there is track maintenance, well, then my train might more likely be delayed. And if my train is more likely to be delayed, then I'm more likely to miss my appointment. But what we encode in this Bayesian network are just what we might consider to be more direct relationships. So the train has a direct influence on the appointment. And given that I know whether the train is on time or delayed, knowing whether there's track maintenance isn't going to give me any additional information that I didn't already have. That if I know train, these other nodes that are up above isn't really going to influence the result. And so here we might represent it using another conditional probability distribution that looks a little something like this. The train can take on two possible values. Either my train is on time or my train is delayed. And for each of those two possible values, I have a distribution for what are the odds that I'm able to attend the meeting and what are the odds that I missed the meeting. And obviously, if my train is on time, I'm much more likely to be able to attend the meeting than if my train is delayed, in which case I'm more likely to miss that meeting. So all of these nodes put all together here represent this Bayesian network, this network of random variables whose values I ultimately care about, and that have some sort of relationship between them, some sort of dependence where these arrows from one node to another indicate some dependence, that I can calculate the probability of some node given the parents that happen to exist there. So now that we've been able to describe the structure of this Bayesian network and the relationships between each of these nodes by associating each of the nodes in the network with a probability distribution, whether that's an unconditional probability distribution in the case of this root node here, like rain, and a conditional probability distribution in the case of all of the other nodes whose probabilities are dependent upon the values of their parents, we can begin to do some computation and calculation using the information inside of that table. So let's imagine, for example, that I just wanted to compute something simple like the probability of light rain. How would I get the probability of light rain? Well, light rain, rain here is a root node. And so if I wanted to calculate that probability, I could just look at the probability distribution for rain and extract from it the probability of light rains, just a single value that I already have access to. But we could also imagine wanting to compute more complex joint probabilities, like the probability that there is light rain and also no track maintenance. This is a joint probability of two values, light rain and no track maintenance. And the way I might do that is first by starting by saying, all right, well, let me get the probability of light rain. But now I also want the probability of no track maintenance. But of course, this node is dependent upon the value of rain. So what I really want is the probability of no track maintenance, given that I know that there was light rain. And so the expression for calculating this idea that the probability of light rain and no track maintenance is really just the probability of light rain and the probability that there is no track maintenance, given that I know that there already is light rain. So I take the unconditional probability of light rain, multiply it by the conditional probability of no track maintenance, given that I know there is light rain. And you can continue to do this again and again for every variable that you want to add into this joint probability that I might want to calculate. If I wanted to know the probability of light rain and no track maintenance and a delayed train, well, that's going to be the probability of light rain, multiplied by the probability of no track maintenance, given light rain, multiplied by the probability of a delayed train, given light rain and no track maintenance. Because whether the train is on time or delayed is dependent upon both of these other two variables. And so I have two pieces of evidence that go into the calculation of that conditional probability. And each of these three values is just a value that I can look up by looking at one of these individual probability distributions that is encoded into my Bayesian network. And if I wanted a joint probability over all four of the variables, something like the probability of light rain and no track maintenance and a delayed train and I miss my appointment, well, that's going to be multiplying four different values, one from each of these individual nodes. It's going to be the probability of light rain, then of no track maintenance given light rain, then of a delayed train, given light rain and no track maintenance. And then finally, for this node here, for whether I make it to my appointment or not, it's not dependent upon these two variables, given that I know whether or not the train is on time. I only need to care about the conditional probability that I miss my train, or that I miss my appointment, given that the train happens to be delayed. And so that's represented here by four probabilities, each of which is located inside of one of these probability distributions for each of the nodes, all multiplied together. And so I can take a variable like that and figure out what the joint probability is by multiplying a whole bunch of these individual probabilities from the Bayesian network. But of course, just as with last time, where what I really wanted to do was to be able to get new pieces of information, here, too, this is what we're going to want to do with our Bayesian network. In the context of knowledge, we talked about the problem of inference. Given things that I know to be true, can I draw conclusions, make deductions about other facts about the world that I also know to be true? And what we're going to do now is apply the same sort of idea to probability. Using information about which I have some knowledge, whether some evidence or some probabilities, can I figure out not other variables for certain, but can I figure out the probabilities of other variables taking on particular values? And so here, we introduce the problem of inference in a probabilistic setting, in a case where variables might not necessarily be true for sure, but they might be random variables that take on different values with some probability. So how do we formally define what exactly this inference problem actually is? Well, the inference problem has a couple of parts to it. We have some query, some variable x that we want to compute the distribution for. Maybe I want the probability that I miss my train, or I want the probability that there is track maintenance, something that I want information about. And then I have some evidence variables. Maybe it's just one piece of evidence. Maybe it's multiple pieces of evidence. But I've observed certain variables for some sort of event. So for example, I might have observed that it is raining. This is evidence that I have. I know that there is light rain, or I know that there is heavy rain. And that is evidence I have. And using that evidence, I want to know what is the probability that my train is delayed, for example. And that is a query that I might want to ask based on this evidence. So I have a query, some variable. Evidence, which are some other variables that I have observed inside of my Bayesian network. And of course, that does leave some hidden variables. Why? These are variables that are not evidence variables and not query variables. So you might imagine in the case where I know whether or not it's raining, and I want to know whether my train is going to be delayed or not, the hidden variable, the thing I don't have access to, is something like, is there maintenance on the track? Or am I going to make or not make my appointment, for example? These are variables that I don't have access to. They're hidden because they're not things I observed, and they're also not the query, the thing that I'm asking. And so ultimately, what we want to calculate is I want to know the probability distribution of x given e, the event that I observed. So given that I observed some event, I observed that it is raining, I would like to know what is the distribution over the possible values of the train random variable. Is it on time? Is it delayed? What's the likelihood it's going to be there? And it turns out we can do this calculation just using a lot of the probability rules that we've already seen in action. And ultimately, we're going to take a look at the math at a little bit of a high level, at an abstract level. But ultimately, we can allow computers and programming libraries that already exist to begin to do some of this math for us. But it's good to get a general sense for what's actually happening when this inference process takes place. Let's imagine, for example, that I want to compute the probability distribution of the appointment random variable given some evidence, given that I know that there was light rain and no track maintenance. So there's my evidence, these two variables that I observe the values of. I observe the value of rain. I know there's light rain. And I know that there is no track maintenance going on today. And what I care about knowing, my query, is this random variable appointment. I want to know the distribution of this random variable appointment, like what is the chance that I'm able to attend my appointment? What is the chance that I miss my appointment given this evidence? And the hidden variable, the information that I don't have access to, is this variable train. This is information that is not part of the evidence that I see, not something that I observe. But it is also not the query that I'm asking for. And so what might this inference procedure look like? Well, if you recall back from when we were defining conditional probability and doing math with conditional probabilities, we know that a conditional probability is proportional to the joint probability. And we remembered this by recalling that the probability of A given B is just some constant factor alpha multiplied by the probability of A and B. That constant factor alpha turns out to be like dividing over the probability of B. But the important thing is that it's just some constant multiplied by the joint distribution, the probability that all of these individual things happen. So in this case, I can take the probability of the appointment random variable given light rain and no track maintenance and say that is just going to be proportional, some constant alpha, multiplied by the joint probability, the probability of a particular value for the appointment random variable and light rain and no track maintenance. Well, all right, how do I calculate this, probability of appointment and light rain and no track maintenance, when what I really care about is knowing I need all four of these values to be able to calculate a joint distribution across everything because in a particular appointment depends upon the value of train? Well, in order to do that, here I can begin to use that marginalization trick, that there are only two ways I can get any configuration of an appointment, light rain, and no track maintenance. Either this particular setting of variables happens and the train is on time, or this particular setting of variables happens and the train is delayed. Those are two possible cases that I would want to consider. And if I add those two cases up, well, then I get the result just by adding up all of the possibilities for the hidden variable or variables that there are multiple. But since there's only one hidden variable here, train, all I need to do is iterate over all the possible values for that hidden variable train and add up their probabilities. So this probability expression here becomes probability distribution over appointment, light, no rain, and train is on time, and the probability distribution over the appointment, light rain, no track maintenance, and that the train is delayed, for example. So I take both of the possible values for train, go ahead and add them up. These are just joint probabilities that we saw earlier, how to calculate just by going parent, parent, parent, parent, and calculating those probabilities and multiplying them together. And then you'll need to normalize them at the end, speaking at a high level, to make sure that everything adds up to the number 1. So the formula for how you do this in a process known as inference by enumeration looks a little bit complicated, but ultimately it looks like this. And let's now try to distill what it is that all of these symbols actually mean. Let's start here. What I care about knowing is the probability of x, my query variable, given some sort of evidence. What do I know about conditional probabilities? Well, a conditional probability is proportional to the joint probability. So it is some alpha, some normalizing constant, multiplied by this joint probability of x and evidence. And how do I calculate that? Well, to do that, I'm going to marginalize over all of the hidden variables, all the variables that I don't directly observe the values for. I'm basically going to iterate over all of the possibilities that it could happen and just sum them all up. And so I can translate this into a sum over all y, which ranges over all the possible hidden variables and the values that they could take on, and adds up all of those possible individual probabilities. And that is going to allow me to do this process of inference by enumeration. Now, ultimately, it's pretty annoying if we as humans have to do all this math for ourselves. But turns out this is where computers and AI can be particularly helpful, that we can program a computer to understand a Bayesian network, to be able to understand these inference procedures, and to be able to do these calculations. And using the information you've seen here, you could implement a Bayesian network from scratch yourself. But turns out there are a lot of libraries, especially written in Python, that allow us to make it easier to do this sort of probabilistic inference, to be able to take a Bayesian network and do these sorts of calculations, so that you don't need to know and understand all of the underlying math, though it's helpful to have a general sense for how it works. But you just need to be able to describe the structure of the network and make queries in order to be able to produce the result. And so let's take a look at an example of that right now. It turns out that there are a lot of possible libraries that exist in Python for doing this sort of inference. It doesn't matter too much which specific library you use. They all behave in fairly similar ways. But the library I'm going to use here is one known as pomegranate. And here inside of model.py, I have defined a Bayesian network, just using the structure and the syntax that the pomegranate library expects. And what I'm effectively doing is just, in Python, creating nodes to represent each of the nodes of the Bayesian network that you saw me describe a moment ago. So here on line four, after I've imported pomegranate, I'm defining a variable called rain that is going to represent a node inside of my Bayesian network. It's going to be a node that follows this distribution, where there are three possible values, none for no rain, light for light rain, heavy for heavy rain. And these are the probabilities of each of those taking place. 0.7 is the likelihood of no rain, 0.2 for light rain, 0.1 for heavy rain. Then after that, we go to the next variable, the variable for track maintenance, for example, which is dependent upon that rain variable. And this, instead of being an unconditional distribution, is a conditional distribution, as indicated by a conditional probability table here. And the idea is that I'm following this is conditional on the distribution of rain. So if there is no rain, then the chance that there is, yes, track maintenance is 0.4. If there's no rain, the chance that there is no track maintenance is 0.6. Likewise, for light rain, I have a distribution. For heavy rain, I have a distribution as well. But I'm effectively encoding the same information you saw represented graphically a moment ago. But I'm telling this Python program that the maintenance node obeys this particular conditional probability distribution. And we do the same thing for the other random variables as well. Train was a node inside my distribution that was a conditional probability table with two parents. It was dependent not only on rain, but also on track maintenance. And so here I'm saying something like, given that there is no rain and, yes, track maintenance, the probability that my train is on time is 0.8. And the probability that it's delayed is 0.2. And likewise, I can do the same thing for all of the other possible values of the parents of the train node inside of my Bayesian network by saying, for all of those possible values, here is the distribution that the train node should follow. Then I do the same thing for an appointment based on the distribution of the variable train. Then at the end, what I do is actually construct this network by describing what the states of the network are and by adding edges between the dependent nodes. So I create a new Bayesian network, add states to it, one for rain, one for maintenance, one for the train, one for the appointment. And then I add edges connecting the related pieces. Rain has an arrow to maintenance because rain influences track maintenance. Rain also influences the train. Maintenance also influences the train. And train influences whether I make it to my appointment and bake just finalizes the model and does some additional computation. So the specific syntax of this is not really the important part. Pomegranate just happens to be one of several different libraries that can all be used for similar purposes. And you could describe and define a library for yourself that implemented similar things. But the key idea here is that someone can design a library for a general Bayesian network that has nodes that are based upon its parents. And then all a programmer needs to do using one of those libraries is to define what those nodes and what those probability distributions are. And we can begin to do some interesting logic based on it. So let's try doing that conditional or joint probability calculation that we saw us do by hand before by going into likelihood.py, where here I'm importing the model that I just defined a moment ago. And here I'd just like to calculate model.probability, which calculates the probability for a given observation. And I'd like to calculate the probability of no rain, no track maintenance, my train is on time, and I'm able to attend the meeting. So sort of the optimal scenario that there is no rain and no maintenance on the track, my train is on time, and I'm able to attend the meeting. What is the probability that all of that actually happens? And I can calculate that using the library and just print out its probability. And so I'll go ahead and run python of likelihood.py. And I see that, OK, the probability is about 0.34. So about a third of the time, everything goes right for me in this case. No rain, no track maintenance, train is on time, and I'm able to attend the meeting. But I could experiment with this, try and calculate other probabilities as well. What's the probability that everything goes right up until the train, but I still miss my meeting? So no rain, no track maintenance, train is on time, but I miss the appointment. Let's calculate that probability. And all right, that has a probability of about 0.04. So about 4% of the time, the train will be on time, there won't be any rain, no track maintenance, and yet I'll still miss the meeting. And so this is really just an implementation of the calculation of the joint probabilities that we did before. What this library is likely doing is first figuring out the probability of no rain, then figuring out the probability of no track maintenance given no rain, then the probability that my train is on time given both of these values, and then the probability that I miss my appointment given that I know that the train was on time. So this, again, is the calculation of that joint probability. And turns out we can also begin to have our computer solve inference problems as well, to begin to infer, based on information, evidence that we see, what is the likelihood of other variables also being true. So let's go into inference.py, for example. We're here, I'm again importing that exact same model from before, importing all the nodes and all the edges and the probability distribution that is encoded there as well. And now there's a function for doing some sort of prediction. And here, into this model, I pass in the evidence that I observe. So here, I've encoded into this Python program the evidence that I have observed. I have observed the fact that the train is delayed. And that is the value for one of the four random variables inside of this Bayesian network. And using that information, I would like to be able to draw inspiration and figure out inferences about the values of the other random variables that are inside of my Bayesian network. I would like to make predictions about everything else. So all of the actual computational logic is happening in just these three lines, where I'm making this call to this prediction. Down below, I'm just iterating over all of the states and all the predictions and just printing them out so that we can visually see what the results are. But let's find out, given the train is delayed, what can I predict about the values of the other random variables? Let's go ahead and run python inference.py. I run that, and all right, here is the result that I get. Given the fact that I know that the train is delayed, this is evidence that I have observed. Well, given that there is a 45% chance or a 46% chance that there was no rain, a 31% chance there was light rain, a 23% chance there was heavy rain, I can see a probability distribution of a track maintenance and a probability distribution over whether I'm able to attend or miss my appointment. Now, we know that whether I attend or miss the appointment, that is only dependent upon the train being delayed or not delayed. It shouldn't depend on anything else. So let's imagine, for example, that I knew that there was heavy rain. That shouldn't affect the distribution for making the appointment. And indeed, if I go up here and add some evidence, say that I know that the value of rain is heavy. That is evidence that I now have access to. I now have two pieces of evidence. I know that the rain is heavy, and I know that my train is delayed. I can calculate the probability by running this inference procedure again and seeing the result. I know that the rain is heavy. I know my train is delayed. The probability distribution for track maintenance changed. Given that I know that there's heavy rain, now it's more likely that there is no track maintenance, 88%, as opposed to 64% from here before. And now, what is the probability that I make the appointment? Well, that's the same as before. It's still going to be attend the appointment with probability 0.6, missed the appointment with probability 0.4, because it was only dependent upon whether or not my train was on time or delayed. And so this here is implementing that idea of that inference algorithm to be able to figure out, based on the evidence that I have, what can we infer about the values of the other variables that exist as well. So inference by enumeration is one way of doing this inference procedure, just looping over all of the values the hidden variables could take on and figuring out what the probability is. Now, it turns out this is not particularly efficient. And there are definitely optimizations you can make by avoiding repeated work. If you're calculating the same sort of probability multiple times, there are ways of optimizing the program to avoid having to recalculate the same probabilities again and again. But even then, as the number of variables get large, as the number of possible values of variables could take on, get large, we're going to start to have to do a lot of computation, a lot of calculation, to be able to do this inference. And at that point, it might start to get unreasonable, in terms of the amount of time that it would take to be able to do this sort of exact inference. And it's for that reason that oftentimes, when it comes towards probability and things we're not entirely sure about, we don't always care about doing exact inference and knowing exactly what the probability is. But if we can approximate the inference procedure, do some sort of approximate inference, that that can be pretty good as well. That if I don't know the exact probability, but I have a general sense for the probability that I can get increasingly accurate with more time, that that's probably pretty good, especially if I can get that to happen even faster. So how could I do approximate inference inside of a Bayesian network? Well, one method is through a procedure known as sampling. In the process of sampling, I'm going to take a sample of all of the variables inside of this Bayesian network here. And how am I going to sample? Well, I'm going to sample one of the values from each of these nodes according to their probability distribution. So how might I take a sample of all these nodes? Well, I'll start at the root. I'll start with rain. Here's the distribution for rain. And I'll go ahead and, using a random number generator or something like it, randomly pick one of these three values. I'll pick none with probability 0.7, light with probability 0.2, and heavy with probability 0.1. So I'll randomly just pick one of them according to that distribution. And maybe in this case, I pick none, for example. Then I do the same thing for the other variable. Maintenance also has a probability distribution. And I'm going to sample. Now, there are three probability distributions here. But I'm only going to sample from this first row here, because I've observed already in my sample that the value of rain is none. So given that rain is none, I'm going to sample from this distribution to say, all right, what should the value of maintenance be? And in this case, maintenance is going to be, let's just say yes, which happens 40% of the time in the event that there is no rain, for example. And we'll sample all of the rest of the nodes in this way as well, that I want to sample from the train distribution. And I'll sample from this first row here, where there is no rain, but there is track maintenance. And I'll sample 80% of the time. I'll say the train is on time. 20% of the time, I'll say the train is delayed. And finally, we'll do the same thing for whether I make it to my appointment or not. Did I attend or miss the appointment? We'll sample based on this distribution and maybe say that in this case, I attend the appointment, which happens 90% of the time when the train is actually on time. So by going through these nodes, I can very quickly just do some sampling and get a sample of the possible values that could come up from going through this entire Bayesian network according to those probability distributions. And where this becomes powerful is if I do this not once, but I do this thousands or tens of thousands of times and generate a whole bunch of samples all using this distribution. I get different samples. Maybe some of them are the same. But I get a value for each of the possible variables that could come up. And so then if I'm ever faced with a question, a question like, what is the probability that the train is on time, you could do an exact inference procedure. This is no different than the inference problem we had before where I could just marginalize, look at all the possible other values of the variables, and do the computation of inference by enumeration to find out this probability exactly. But I could also, if I don't care about the exact probability, just sample it, approximate it to get close. And this is a powerful tool in AI where we don't need to be right 100% of the time or we don't need to be exactly right. If we just need to be right with some probability, we can often do so more effectively, more efficiently. And so if here now are all of those possible samples, I'll highlight the ones where the train is on time. I'm ignoring the ones where the train is delayed. And in this case, there's like six out of eight of the samples have the train is arriving on time. And so maybe in this case, I can say that in six out of eight cases, that's the likelihood that the train is on time. And with eight samples, that might not be a great prediction. But if I had thousands upon thousands of samples, then this could be a much better inference procedure to be able to do these sorts of calculations. So this is a direct sampling method to just do a bunch of samples and then figure out what the probability of some event is. Now, this from before was an unconditional probability. What is the probability that the train is on time? And I did that by looking at all the samples and figuring out, right, here are the ones where the train is on time. But sometimes what I want to calculate is not an unconditional probability, but rather a conditional probability, something like what is the probability that there is light rain, given that the train is on time, something to that effect. And to do that kind of calculation, well, what I might do is here are all the samples that I have. And I want to calculate a probability distribution, given that I know that the train is on time. So to be able to do that, I can kind of look at the two cases where the train was delayed and ignore or reject them, sort of exclude them from the possible samples that I'm considering. And now I want to look at these remaining cases where the train is on time. Here are the cases where there is light rain. And I say, OK, these are two out of the six possible cases. That can give me an approximation for the probability of light rain, given the fact that I know the train was on time. And I did that in almost exactly the same way, just by adding an additional step, by saying that, all right, when I take each sample, let me reject all of the samples that don't match my evidence and only consider the samples that do match what it is that I have in my evidence that I want to make some sort of calculation about. And it turns out, using the libraries that we've had for Bayesian networks, we can begin to implement this same sort of idea, like implement rejection sampling, which is what this method is called, to be able to figure out some probability, not via direct inference, but instead by sampling. So what I have here is a program called sample.py. Imports the exact same model. And what I define first is a program to generate a sample. And the way I generate a sample is just by looping over all of the states. The states need to be in some sort of order to make sure I'm looping in the correct order. But effectively, if it is a conditional distribution, I'm going to sample based on the parents. And otherwise, I'm just going to directly sample the variable, like rain, which has no parents. It's just an unconditional distribution and keep track of all those parent samples and return the final sample. The exact syntax of this, again, not particularly important. It just happens to be part of the implementation details of this particular library. The interesting logic is down below. Now that I have the ability to generate a sample, if I want to know the distribution of the appointment random variable, given that the train is delayed, well, then I can begin to do calculations like this. Let me take 10,000 samples and assemble all my results in this list called data. I'll go ahead and loop n times, in this case, 10,000 times. I'll generate a sample. And I want to know the distribution of appointment, given that the train is delayed. So according to rejection sampling, I'm only going to consider samples where the train is delayed. If the train is not delayed, I'm not going to consider those values at all. So I'm going to say, all right, if I take the sample, look at the value of the train random variable, if the train is delayed, well, let me go ahead and add to my data that I'm collecting the value of the appointment random variable that it took on in this particular sample. So I'm only considering the samples where the train is delayed. And for each of those samples, considering what the value of appointment is, and then at the end, I'm using a Python class called counter, which quickly counts up all the values inside of a data set. So I can take this list of data and figure out how many times was my appointment made and how many times was my appointment missed. And so this here, with just a couple lines of code, is an implementation of rejection sampling. And I can run it by going ahead and running Python sample.py. And when I do that, here is the result I get. This is the result of the counter. 1,251 times, I was able to attend the meeting. And 856 times, I was able to miss the meeting. And you can imagine, by doing more and more samples, I'll be able to get a better and better, more accurate result. And this is a randomized process. It's going to be an approximation of the probability. If I run it a different time, you'll notice the numbers are similar, 12, 72, and 905. But they're not identical because there's some randomization, some likelihood that things might be higher or lower. And so this is why we generally want to try and use more samples so that we can have a greater amount of confidence in our result, be more sure about the result that we're getting of whether or not it accurately reflects or represents the actual underlying probabilities that are inherent inside of this distribution. And so this, then, was an instance of rejection sampling. And it turns out there are a number of other sampling methods that you could use to begin to try to sample. One problem that rejection sampling has is that if the evidence you're looking for is a fairly unlikely event, well, you're going to be rejecting a lot of samples. Like if I'm looking for the probability of x given some evidence e, if e is very unlikely to occur, like occurs maybe one every 1,000 times, then I'm only going to be considering 1 out of every 1,000 samples that I do, which is a pretty inefficient method for trying to do this sort of calculation. I'm throwing away a lot of samples. And it takes computational effort to be able to generate those samples. So I'd like to not have to do something like that. So there are other sampling methods that can try and address this. One such sampling method is called likelihood weighting. In likelihood weighting, we follow a slightly different procedure. And the goal is to avoid needing to throw out samples that didn't match the evidence. And so what we'll do is we'll start by fixing the values for the evidence variables. Rather than sample everything, we're going to fix the values of the evidence variables and not sample those. Then we're going to sample all the other nonevidence variables in the same way, just using the Bayesian network looking at the probability distributions, sampling all the nonevidence variables. But then what we need to do is weight each sample by its likelihood. If our evidence is really unlikely, we want to make sure that we've taken into account how likely was the evidence to actually show up in the sample. If I have a sample where the evidence was much more likely to show up than another sample, then I want to weight the more likely one higher. So we're going to weight each sample by its likelihood, where likelihood is just defined as the probability of all the evidence. Given all the evidence we have, what is the probability that it would happen in that particular sample? So before, all of our samples were weighted equally. They all had a weight of 1 when we were calculating the overall average. In this case, we're going to weight each sample, multiply each sample by its likelihood in order to get the more accurate distribution. So what would this look like? Well, if I ask the same question, what is the probability of light rain, given that the train is on time, when I do the sampling procedure and start by trying to sample, I'm going to start by fixing the evidence variable. I'm already going to have in my sample the train is on time. That way, I don't have to throw out anything. I'm only sampling things where I know the value of the variables that are my evidence are what I expect them to be. So I'll go ahead and sample from rain. And maybe this time, I sample light rain instead of no rain. Then I'll sample from track maintenance and say, maybe, yes, there's track maintenance. Then for train, well, I've already fixed it in place. Train was an evidence variable. So I'm not going to bother sampling again. I'll just go ahead and move on. I'll move on to appointment and go ahead and sample from appointment as well. So now I've generated a sample. I've generated a sample by fixing this evidence variable and sampling the other three. And the last step is now weighting the sample. How much weight should it have? And the weight is based on how probable is it that the train was actually on time, this evidence actually happened, given the values of these other variables, light rain and the fact that, yes, there was track maintenance. Well, to do that, I can just go back to the train variable and say, all right, if there was light rain and track maintenance, the likelihood of my evidence, the likelihood that my train was on time, is 0.6. And so this particular sample would have a weight of 0.6. And I could repeat the sampling procedure again and again. Each time every sample would be given a weight according to the probability of the evidence that I see associated with it. And there are other sampling methods that exist as well, but all of them are designed to try and get it the same idea, to approximate the inference procedure of figuring out the value of a variable. So we've now dealt with probability as it pertains to particular variables that have these discrete values. But what we haven't really considered is how values might change over time. That we've considered something like a variable for rain, where rain can take on values of none or light rain or heavy rain. But in practice, usually when we consider values for variables like rain, we like to consider it for over time, how do the values of these variables change? What do we do with when we're dealing with uncertainty over a period of time, which can come up in the context of weather, for example, if I have sunny days and I have rainy days. And I'd like to know not just what is the probability that it's raining now, but what is the probability that it rains tomorrow, or the day after that, or the day after that. And so to do this, we're going to introduce a slightly different kind of model. But here, we're going to have a random variable, not just one for the weather, but for every possible time step. And you can define time step however you like. A simple way is just to use days as your time step. And so we can define a variable called x sub t, which is going to be the weather at time t. So x sub 0 might be the weather on day 0. x sub 1 might be the weather on day 1, so on and so forth. x sub 2 is the weather on day 2. But as you can imagine, if we start to do this over longer and longer periods of time, there's an incredible amount of data that might go into this. If you're keeping track of data about the weather for a year, now suddenly you might be trying to predict the weather tomorrow, given 365 days of previous pieces of evidence. And that's a lot of evidence to have to deal with and manipulate and calculate. Probably nobody knows what the exact conditional probability distribution is for all of those combinations of variables. And so when we're trying to do this inference inside of a computer, when we're trying to reasonably do this sort of analysis, it's helpful to make some simplifying assumptions, some assumptions about the problem that we can just assume are true, to make our lives a little bit easier. Even if they're not totally accurate assumptions, if they're close to accurate or approximate, they're usually pretty good. And the assumption we're going to make is called the Markov assumption, which is the assumption that the current state depends only on a finite fixed number of previous states. So the current day's weather depends not on all the previous day's weather for the rest of all of history, but the current day's weather I can predict just based on yesterday's weather, or just based on the last two days weather, or the last three days weather. But oftentimes, we're going to deal with just the one previous state that helps to predict this current state. And by putting a whole bunch of these random variables together, using this Markov assumption, we can create what's called a Markov chain, where a Markov chain is just some sequence of random variables where each of the variables distribution follows that Markov assumption. And so we'll do an example of this where the Markov assumption is, I can predict the weather. Is it sunny or rainy? And we'll just consider those two possibilities for now, even though there are other types of weather. But I can predict each day's weather just on the prior day's weather, using today's weather, I can come up with a probability distribution for tomorrow's weather. And here's what this weather might look like. It's formatted in terms of a matrix, as you might describe it, as rows and columns of values, where on the lefthand side, I have today's weather, represented by the variable x sub t. And over here in the columns, I have tomorrow's weather, represented by the variable x sub t plus 1, t plus 1 day's weather instead. And what this matrix is saying is, if today is sunny, well, then it's more likely than not that tomorrow is also sunny. Oftentimes, the weather stays consistent for multiple days in a row. And for example, let's say that if today is sunny, our model says that tomorrow, with probability 0.8, it will also be sunny. And with probability 0.2, it will be raining. And likewise, if today is raining, then it's more likely than not that tomorrow is also raining. With probability 0.7, it'll be raining. With probability 0.3, it will be sunny. So this matrix, this description of how it is we transition from one state to the next state is what we're going to call the transition model. And using the transition model, you can begin to construct this Markov chain by just predicting, given today's weather, what's the likelihood of tomorrow's weather happening. And you can imagine doing a similar sampling procedure, where you take this information, you sample what tomorrow's weather is going to be. Using that, you sample the next day's weather. And the result of that is you can form this Markov chain of like x0, time and time, day zero is sunny, the next day is sunny, maybe the next day it changes to raining, then raining, then raining. And the pattern that this Markov chain follows, given the distribution that we had access to, this transition model here, is that when it's sunny, it tends to stay sunny for a little while. The next couple of days tend to be sunny too. And when it's raining, it tends to be raining as well. And so you get a Markov chain that looks like this, and you can do analysis on this. You can say, given that today is raining, what is the probability that tomorrow is raining? Or you can begin to ask probability questions like, what is the probability of this sequence of five values, sun, sun, rain, rain, rain, and answer those sorts of questions too. And it turns out there are, again, many Python libraries for interacting with models like this of probabilities that have distributions and random variables that are based on previous variables according to this Markov assumption. And pomegranate2 has ways of dealing with these sorts of variables. So I'll go ahead and go into the chain directory, where I have some information about Markov chains. And here, I've defined a file called model.py, where I've defined in a very similar syntax. And again, the exact syntax doesn't matter so much as the idea that I'm encoding this information into a Python program so that the program has access to these distributions. I've here defined some starting distribution. So every Markov model begins at some point in time, and I need to give it some starting distribution. And so we'll just say, you know at the start, you can pick 5050 between sunny and rainy. We'll say it's sunny 50% of the time, rainy 50% of the time. And then down below, I've here defined the transition model, how it is that I transition from one day to the next. And here, I've encoded that exact same matrix from before, that if it was sunny today, then with probability 0.8, it will be sunny tomorrow. And it'll be rainy tomorrow with probability 0.2. And I likewise have another distribution for if it was raining today instead. And so that alone defines the Markov model. You can begin to answer questions using that model. But one thing I'll just do is sample from the Markov chain. It turns out there is a method built into this Markov chain library that allows me to sample 50 states from the chain, basically just simulating like 50 instances of weather. And so let me go ahead and run this. Python model.py. And when I run it, what I get is that it's going to sample from this Markov chain 50 states, 50 days worth of weather that it's just going to randomly sample. And you can imagine sampling many times to be able to get more data, to be able to do more analysis. But here, for example, it's sunny two days in a row, rainy a whole bunch of days in a row before it changes back to sun. And so you get this model that follows the distribution that we originally described, that follows the distribution of sunny days tend to lead to more sunny days. Rainy days tend to lead to more rainy days. And that then is a Markov model. And Markov models rely on us knowing the values of these individual states. I know that today is sunny or that today is raining. And using that information, I can draw some sort of inference about what tomorrow is going to be like. But in practice, this often isn't the case. It often isn't the case that I know for certain what the exact state of the world is. Oftentimes, the state of the world is exactly unknown. But I'm able to somehow sense some information about that state, that a robot or an AI doesn't have exact knowledge about the world around it. But it has some sort of sensor, whether that sensor is a camera or sensors that detect distance or just a microphone that is sensing audio, for example. It is sensing data. And using that data, that data is somehow related to the state of the world, even if it doesn't actually know, our AI doesn't know, what the underlying true state of the world actually is. And for that, we need to get into the world of sensor models, the way of describing how it is that we translate what the hidden state, the underlying true state of the world, is with what the observation, what it is that the AI knows or the AI has access to, actually is. And so for example, a hidden state might be a robot's position. If a robot is exploring new uncharted territory, the robot likely doesn't know exactly where it is. But it does have an observation. It has robot sensor data, where it can sense how far away are possible obstacles around it. And using that information, using the observed information that it has, it can infer something about the hidden state. Because what the true hidden state is influences those observations. Whatever the robot's true position is affects or has some effect upon what the sensor data of the robot is able to collect is, even if the robot doesn't actually know for certain what its true position is. Likewise, if you think about a voice recognition or a speech recognition program that listens to you and is able to respond to you, something like Alexa or what Apple and Google are doing with their voice recognition as well, that you might imagine that the hidden state, the underlying state, is what words are actually spoken. The true nature of the world contains you saying a particular sequence of words, but your phone or your smart home device doesn't know for sure exactly what words you said. The only observation that the AI has access to is some audio waveforms. And those audio waveforms are, of course, dependent upon this hidden state. And you can infer, based on those audio waveforms, what the words spoken likely were. But you might not know with 100% certainty what that hidden state actually is. And it might be a task to try and predict, given this observation, given these audio waveforms, can you figure out what the actual words spoken are. And likewise, you might imagine on a website, true user engagement. Might be information you don't directly have access to. But you can observe data, like website or app analytics, about how often was this button clicked or how often are people interacting with a page in a particular way. And you can use that to infer things about your users as well. So this type of problem comes up all the time when we're dealing with AI and trying to infer things about the world. That often AI doesn't really know the hidden true state of the world. All the AI has access to is some observation that is related to the hidden true state. But it's not direct. There might be some noise there. The audio waveform might have some additional noise that might be difficult to parse. The sensor data might not be exactly correct. There's some noise that might not allow you to conclude with certainty what the hidden state is, but can allow you to infer what it might be. And so the simple example we'll take a look at here is imagining the hidden state as the weather, whether it's sunny or rainy or not. And imagine you are programming an AI inside of a building that maybe has access to just a camera to inside the building. And all you have access to is an observation as to whether or not employees are bringing an umbrella into the building or not. You can detect whether it's an umbrella or not. And so you might have an observation as to whether or not an umbrella is brought into the building or not. And using that information, you want to predict whether it's sunny or rainy, even if you don't know what the underlying weather is. So the underlying weather might be sunny or rainy. And if it's raining, obviously people are more likely to bring an umbrella. And so whether or not people bring an umbrella, your observation, tells you something about the hidden state. And of course, this is a bit of a contrived example, but the idea here is to think about this more broadly in terms of more generally, any time you observe something, it having to do with some underlying hidden state. And so to try and model this type of idea where we have these hidden states and observations, rather than just use a Markov model, which has state, state, state, state, each of which is connected by that transition matrix that we described before, we're going to use what we call a hidden Markov model. Very similar to a Markov model, but this is going to allow us to model a system that has hidden states that we don't directly observe, along with some observed event that we do actually see. And so in addition to that transition model that we still need of saying, given the underlying state of the world, if it's sunny or rainy, what's the probability of tomorrow's weather? We also need another model that, given some state, is going to give us an observation of green, yes, someone brings an umbrella into the office, or red, no, nobody brings umbrellas into the office. And so the observation might be that if it's sunny, then odds are nobody is going to bring an umbrella to the office. But maybe some people are just being cautious, and they do bring an umbrella to the office anyways. And if it's raining, then with much higher probability, then people are going to bring umbrellas into the office. But maybe if the rain was unexpected, people didn't bring an umbrella. And so it might have some other probability as well. And so using the observations, you can begin to predict with reasonable likelihood what the underlying state is, even if you don't actually get to observe the underlying state, if you don't get to see what the hidden state is actually equal to. This here we'll often call the sensor model. It's also often called the emission probabilities, because the state, the underlying state, emits some sort of emission that you then observe. And so that can be another way of describing that same idea. And the sensor Markov assumption that we're going to use is this assumption that the evidence variable, the thing we observe, the emission that gets produced, depends only on the corresponding state, meaning it can predict whether or not people will bring umbrellas or not entirely dependent just on whether it is sunny or rainy today. Of course, again, this assumption might not hold in practice, that in practice, it might depend whether or not people bring umbrellas, might depend not just on today's weather, but also on yesterday's weather and the day before. But for simplification purposes, it can be helpful to apply this sort of assumption just to allow us to be able to reason about these probabilities a little more easily. And if we're able to approximate it, we can still often get a very good answer. And so what these hidden Markov models end up looking like is a little something like this, where now, rather than just have one chain of states, like sun, sun, rain, rain, rain, we instead have this upper level, which is the underlying state of the world. Is it sunny or is it rainy? And those are connected by that transition matrix we described before. But each of these states produces an emission, produces an observation that I see, that on this day, it was sunny and people didn't bring umbrellas. And on this day, it was sunny, but people did bring umbrellas. And on this day, it was raining and people did bring umbrellas, and so on and so forth. And so each of these underlying states represented by x sub t for x sub 1, 0, 1, 2, so on and so forth, produces some sort of observation or emission, which is what the e stands for, e sub 0, e sub 1, e sub 2, so on and so forth. And so this, too, is a way of trying to represent this idea. And what you want to think about is that these underlying states are the true nature of the world, the robot's position as it moves over time, and that produces some sort of sensor data that might be observed, or what people are actually saying and using the emission data of what audio waveforms do you detect in order to process that data and try and figure it out. And there are a number of possible tasks that you might want to do given this kind of information. And one of the simplest is trying to infer something about the future or the past or about these sort of hidden states that might exist. And so the tasks that you'll often see, and we're not going to go into the mathematics of these tasks, but they're all based on the same idea of conditional probabilities and using the probability distributions we have to draw these sorts of conclusions. One task is called filtering, which is given observations from the start until now, calculate the distribution for the current state, meaning given information about from the beginning of time until now, on which days do people bring an umbrella or not bring an umbrella, can I calculate the probability of the current state that today, is it sunny or is it raining? Another task that might be possible is prediction, which is looking towards the future. Given observations about people bringing umbrellas from the beginning of when we started counting time until now, can I figure out the distribution that tomorrow is it sunny or is it raining? And you can also go backwards as well by a smoothing, where I can say given observations from start until now, calculate the distributions for some past state. Like I know that today people brought umbrellas and tomorrow people brought umbrellas. And so given two days worth of data of people bringing umbrellas, what's the probability that yesterday it was raining? And that I know that people brought umbrellas today, that might inform that decision as well. It might influence those probabilities. And there's also a most likely explanation task, in addition to other tasks that might exist as well, which is combining some of these given observations from the start up until now, figuring out the most likely sequence of states. And this is what we're going to take a look at now, this idea that if I have all these observations, umbrella, no umbrella, umbrella, no umbrella, can I calculate the most likely states of sun, rain, sun, rain, and whatnot that actually represented the true weather that would produce these observations? And this is quite common when you're trying to do something like voice recognition, for example, that you have these emissions of the audio waveforms, and you would like to calculate based on all of the observations that you have, what is the most likely sequence of actual words, or syllables, or sounds that the user actually made when they were speaking to this particular device, or other tasks that might come up in that context as well. And so we can try this out by going ahead and going into the HMM directory, HMM for Hidden Markov Model. And here, what I've done is I've defined a model where this model first defines my possible state, sun, and rain, along with their emission probabilities, the observation model, or the emission model, where here, given that I know that it's sunny, the probability that I see people bring an umbrella is 0.2, the probability of no umbrella is 0.8. And likewise, if it's raining, then people are more likely to bring an umbrella. Umbrella has probability 0.9, no umbrella has probability 0.1. So the actual underlying hidden states, those states are sun and rain, but the things that I observe, the observations that I can see, are either umbrella or no umbrella as the things that I observe as a result. So this then, I also need to add to it a transition matrix, same as before, saying that if today is sunny, then tomorrow is more likely to be sunny. And if today is rainy, then tomorrow is more likely to be raining. As of before, I give it some starting probabilities, saying at first, 5050 chance for whether it's sunny or rainy. And then I can create the model based on that information. Again, the exact syntax of this is not so important, so much as it is the data that I am now encoding into a program, such that now I can begin to do some inference. So I can give my program, for example, a list of observations, umbrella, umbrella, no umbrella, umbrella, umbrella, so on and so forth, no umbrella, no umbrella. And I would like to calculate, I would like to figure out the most likely explanation for these observations. What is likely is whether rain, rain, is this rain, or is it more likely that this was actually sunny, and then it switched back to it being rainy? And that's an interesting question. We might not be sure, because it might just be that it just so happened on this rainy day, people decided not to bring an umbrella. Or it could be that it switched from rainy to sunny back to rainy, which doesn't seem too likely, but it certainly could happen. And using the data we give to the hidden Markov model, our model can begin to predict these answers, can begin to figure it out. So we're going to go ahead and just predict these observations. And then for each of those predictions, go ahead and print out what the prediction is. And this library just so happens to have a function called predict that does this prediction process for me. So I'll run python sequence.py. And the result I get is this. This is the prediction based on the observations of what all of those states are likely to be. And it's likely to be rain and rain. In this case, it thinks that what most likely happened is that it was sunny for a day and then went back to being rainy. But in different situations, if it was rainy for longer maybe, or if the probabilities were slightly different, you might imagine that it's more likely that it was rainy all the way through. And it just so happened on one rainy day, people decided not to bring umbrellas. And so here, too, Python libraries can begin to allow for the sort of inference procedure. And by taking what we know and by putting it in terms of these tasks that already exist, these general tasks that work with hidden Markov models, then any time we can take an idea and formulate it as a hidden Markov model, formulate it as something that has hidden states and observed emissions that result from those states, then we can take advantage of these algorithms that are known to exist for trying to do this sort of inference. So now we've seen a couple of ways that AI can begin to deal with uncertainty. We've taken a look at probability and how we can use probability to describe numerically things that are likely or more likely or less likely to happen than other events or other variables. And using that information, we can begin to construct these standard types of models, things like Bayesian networks and Markov chains and hidden Markov models that all allow us to be able to describe how particular events relate to other events or how the values of particular variables relate to other variables, not for certain, but with some sort of probability distribution. And by formulating things in terms of these models that already exist, we can take advantage of Python libraries that implement these sort of models already and allow us just to be able to use them to produce some sort of resulting effect. So all of this then allows our AI to begin to deal with these sort of uncertain problems so that our AI doesn't need to know things for certain but can infer based on information it doesn't know. Next time, we'll take a look at additional types of problems that we can solve by taking advantage of AIrelated algorithms, even beyond the world of the types of problems we've already explored. We'll see you next time. OK. Welcome back, everyone, to an introduction to artificial intelligence with Python. And now, so far, we've taken a look at a couple of different types of problems. We've seen classical search problems where we're trying to get from an initial state to a goal by figuring out some optimal path. We've taken a look at adversarial search where we have a gameplaying agent that is trying to make the best move. We've seen knowledgebased problems where we're trying to use logic and inference to be able to figure out and draw some additional conclusions. And we've seen some probabilistic models as well where we might not have certain information about the world, but we want to use the knowledge about probabilities that we do have to be able to draw some conclusions. Today, we're going to turn our attention to another category of problems generally known as optimization problems, where optimization is really all about choosing the best option from a set of possible options. And we've already seen optimization in some contexts, like gameplaying, where we're trying to create an AI that chooses the best move out of a set of possible moves. But what we'll take a look at today is a category of types of problems and algorithms to solve them that can be used in order to deal with a broader range of potential optimization problems. And the first of the algorithms that we'll take a look at is known as a local search. And local search differs from search algorithms we've seen before in the sense that the search algorithms we've looked at so far, which are things like breadthfirst search or Astar search, for example, generally maintain a whole bunch of different paths that we're simultaneously exploring, and we're looking at a bunch of different paths at once trying to find our way to the solution. On the other hand, in local search, this is going to be a search algorithm that's really just going to maintain a single node, looking at a single state. And we'll generally run this algorithm by maintaining that single node and then moving ourselves to one of the neighboring nodes throughout this search process. And this is generally useful in context not like these problems, which we've seen before, like a mazesolving situation where we're trying to find our way from the initial state to the goal by following some path. But local search is most applicable when we really don't care about the path at all, and all we care about is what the solution is. And in the case of solving a maze, the solution was always obvious. You could point to the solution. You know exactly what the goal is, and the real question is, what is the path to get there? But local search is going to come up in cases where figuring out exactly what the solution is, exactly what the goal looks like, is actually the heart of the challenge. And to give an example of one of these kinds of problems, we'll consider a scenario where we have two types of buildings, for example. We have houses and hospitals. And our goal might be in a world that's formatted as this grid, where we have a whole bunch of houses, a house here, house here, two houses over there, maybe we want to try and find a way to place two hospitals on this map. So maybe a hospital here and a hospital there. And the problem now is we want to place two hospitals on the map, but we want to do so with some sort of objective. And our objective in this case is to try and minimize the distance of any of the houses from a hospital. So you might imagine, all right, what's the distance from each of the houses to their nearest hospital? There are a number of ways we could calculate that distance. But one way is using a heuristic we've looked at before, which is the Manhattan distance, this idea of how many rows and columns would you have to move inside of this grid layout in order to get to a hospital, for example. And it turns out, if you take each of these four houses and figure out, all right, how close are they to their nearest hospital, you get something like this, where this house is three away from a hospital, this house is six away, and these two houses are each four away. And if you add all those numbers up together, you get a total cost of 17, for example. So for this particular configuration of hospitals, a hospital here and a hospital there, that state, we might say, has a cost of 17. And the goal of this problem now that we would like to apply a search algorithm to figure out is, can you solve this problem to find a way to minimize that cost? Minimize the total amount if you sum up all of the distances from all the houses to the nearest hospital. How can we minimize that final value? And if we think about this problem a little bit more abstractly, abstracting away from this specific problem and thinking more generally about problems like it, you can often formulate these problems by thinking about them as a statespace landscape, as we'll soon call it. Here in this diagram of a statespace landscape, each of these vertical bars represents a particular state that our world could be in. So for example, each of these vertical bars represents a particular configuration of two hospitals. And the height of this vertical bar is generally going to represent some function of that state, some value of that state. So maybe in this case, the height of the vertical bar represents what is the cost of this particular configuration of hospitals in terms of what is the sum total of all the distances from all of the houses to their nearest hospital. And generally speaking, when we have a statespace landscape, we want to do one of two things. We might be trying to maximize the value of this function, trying to find a global maximum, so to speak, of this statespace landscape, a single state whose value is higher than all of the other states that we could possibly choose from. And generally in this case, when we're trying to find a global maximum, we'll call the function that we're trying to optimize some objective function, some function that measures for any given state how good is that state, such that we can take any state, pass it into the objective function, and get a value for how good that state is. And ultimately, what our goal is is to find one of these states that has the highest possible value for that objective function. An equivalent but reversed problem is the problem of finding a global minimum, some state that has a value after you pass it into this function that is lower than all of the other possible values that we might choose from. And generally speaking, when we're trying to find a global minimum, we call the function that we're calculating a cost function. Generally, each state has some sort of cost, whether that cost is a monetary cost, or a time cost, or in the case of the houses and hospitals, we've been looking at just now, a distance cost in terms of how far away each of the houses is from a hospital. And we're trying to minimize the cost, find the state that has the lowest possible value of that cost. So these are the general types of ideas we might be trying to go for within a state space landscape, trying to find a global maximum, or trying to find a global minimum. And how exactly do we do that? We'll recall that in local search, we generally operate this algorithm by maintaining just a single state, just some current state represented inside of some node, maybe inside of a data structure, where we're keeping track of where we are currently. And then ultimately, what we're going to do is from that state, move to one of its neighbor states. So in this case, represented in this onedimensional space by just the state immediately to the left or to the right of it. But for any different problem, you might define what it means for there to be a neighbor of a particular state. In the case of a hospital, for example, that we were just looking at, a neighbor might be moving one hospital one space to the left or to the right or up or down. Some state that is close to our current state, but slightly different, and as a result, might have a slightly different value in terms of its objective function or in terms of its cost function. So this is going to be our general strategy in local search, to be able to take a state, maintaining some current node, and move where we're looking at in the state space landscape in order to try to find a global maximum or a global minimum somehow. And perhaps the simplest of algorithms that we could use to implement this idea of local search is an algorithm known as hill climbing. And the basic idea of hill climbing is, let's say I'm trying to maximize the value of my state. I'm trying to figure out where the global maximum is. I'm going to start at a state. And generally, what hill climbing is going to do is it's going to consider the neighbors of that state, that from this state, all right, I could go left or I could go right, and this neighbor happens to be higher and this neighbor happens to be lower. And in hill climbing, if I'm trying to maximize the value, I'll generally pick the highest one I can between the state to the left and right of me. This one is higher. So I'll go ahead and move myself to consider that state instead. And then I'll repeat this process, continually looking at all of my neighbors and picking the highest neighbor, doing the same thing, looking at my neighbors, picking the highest of my neighbors, until I get to a point like right here, where I consider both of my neighbors and both of my neighbors have a lower value than I do. This current state has a value that is higher than any of its neighbors. And at that point, the algorithm terminates. And I can say, all right, here I have now found the solution. And the same thing works in exactly the opposite way for trying to find a global minimum. But the algorithm is fundamentally the same. If I'm trying to find a global minimum and say my current state starts here, I'll continually look at my neighbors, pick the lowest value that I possibly can, until I eventually, hopefully, find that global minimum, a point at which when I look at both of my neighbors, they each have a higher value. And I'm trying to minimize the total score or cost or value that I get as a result of calculating some sort of cost function. So we can formulate this graphical idea in terms of pseudocode. And the pseudocode for hill climbing might look like this. We define some function called hill climb that takes as input the problem that we're trying to solve. And generally, we're going to start in some sort of initial state. So I'll start with a variable called current that is keeping track of my initial state, like an initial configuration of hospitals. And maybe some problems lend themselves to an initial state, some place where you begin. In other cases, maybe not, in which case we might just randomly generate some initial state, just by choosing two locations for hospitals at random, for example, and figuring out from there how we might be able to improve. But that initial state, we're going to store inside of current. And now, here comes our loop, some repetitive process we're going to do again and again until the algorithm terminates. And what we're going to do is first say, let's figure out all of the neighbors of the current state. From my state, what are all of the neighboring states for some definition of what it means to be a neighbor? And I'll go ahead and choose the highest value of all of those neighbors and save it inside of this variable called neighbor. So keep track of the highestvalued neighbor. This is in the case where I'm trying to maximize the value. In the case where I'm trying to minimize the value, you might imagine here, you'll pick the neighbor with the lowest possible value. But these ideas are really fundamentally interchangeable. And it's possible, in some cases, there might be multiple neighbors that each have an equally high value or an equally low value in the minimizing case. And in that case, we can just choose randomly from among them. Choose one of them and save it inside of this variable neighbor. And then the key question to ask is, is this neighbor better than my current state? And if the neighbor, the best neighbor that I was able to find, is not better than my current state, well, then the algorithm is over. And I'll just go ahead and return the current state. If none of my neighbors are better, then I may as well stay where I am, is the general logic of the hill climbing algorithm. But otherwise, if the neighbor is better, then I may as well move to that neighbor. So you might imagine setting current equal to neighbor, where the general idea is if I'm at a current state and I see a neighbor that is better than me, then I'll go ahead and move there. And then I'll repeat the process, continually moving to a better neighbor until I reach a point at which none of my neighbors are better than I am. And at that point, we'd say the algorithm can just terminate there. So let's take a look at a real example of this with these houses and hospitals. So we've seen now that if we put the hospitals in these two locations, that has a total cost of 17. And now we need to define, if we're going to implement this hill climbing algorithm, what it means to take this particular configuration of hospitals, this particular state, and get a neighbor of that state. And a simple definition of neighbor might be just, let's pick one of the hospitals and move it by one square, the left or right or up or down, for example. And that would mean we have six possible neighbors from this particular configuration. We could take this hospital and move it to any of these three possible squares, or we take this hospital and move it to any of those three possible squares. And each of those would generate a neighbor. And what I might do is say, all right, here's the locations and the distances between each of the houses and their nearest hospital. Let me consider all of the neighbors and see if any of them can do better than a cost of 17. And it turns out there are a couple of ways that we could do that. And it doesn't matter if we randomly choose among all the ways that are the best. But one such possible way is by taking a look at this hospital here and considering the directions in which it might move. If we hold this hospital constant, if we take this hospital and move it one square up, for example, that doesn't really help us. It gets closer to the house up here, but it gets further away from the house down here. And it doesn't really change anything for the two houses along the lefthand side. But if we take this hospital on the right and move it one square down, it's the opposite problem. It gets further away from the house up above, and it gets closer to the house down below. The real idea, the goal should be to be able to take this hospital and move it one square to the left. By moving it one square to the left, we move it closer to both of these houses on the right without changing anything about the houses on the left. For them, this hospital is still the closer one, so they aren't affected. So we're able to improve the situation by picking a neighbor that results in a decrease in our total cost. And so we might do that. Move ourselves from this current state to a neighbor by just taking that hospital and moving it. And at this point, there's not a whole lot that can be done with this hospital. But there's still other optimizations we can make, other neighbors we can move to that are going to have a better value. If we consider this hospital, for example, we might imagine that right now it's a bit far up, that both of these houses are a little bit lower. So we might be able to do better by taking this hospital and moving it one square down, moving it down so that now instead of a cost of 15, we're down to a cost of 13 for this particular configuration. And we can do even better by taking the hospital and moving it one square to the left. Now instead of a cost of 13, we have a cost of 11, because this house is one away from the hospital. This one is four away. This one is three away. And this one is also three away. So we've been able to do much better than that initial cost that we had using the initial configuration. Just by taking every state and asking ourselves the question, can we do better by just making small incremental changes, moving to a neighbor, moving to a neighbor, and moving to a neighbor after that? And now at this point, we can potentially see that at this point, the algorithm is going to terminate. There's actually no neighbor we can move to that is going to improve the situation, get us a cost that is less than 11. Because if we take this hospital and move it upper to the right, well, that's going to make it further away. If we take it and move it down, that doesn't really change the situation. It gets further away from this house but closer to that house. And likewise, the same story was true for this hospital. Any neighbor we move it to, up, left, down, or right, is either going to make it further away from the houses and increase the cost, or it's going to have no effect on the cost whatsoever. And so the question we might now ask is, is this the best we could do? Is this the best placement of the hospitals we could possibly have? And it turns out the answer is no, because there's a better way that we could place these hospitals. And in particular, there are a number of ways you could do this. But one of the ways is by taking this hospital here and moving it to this square, for example, moving it diagonally by one square, which was not part of our definition of neighbor. We could only move left, right, up, or down. But this is, in fact, better. It has a total cost of 9. It is now closer to both of these houses. And as a result, the total cost is less. But we weren't able to find it, because in order to get there, we had to go through a state that actually wasn't any better than the current state that we had been on previously. And so this appears to be a limitation, or a concern you might have as you go about trying to implement a hill climbing algorithm, is that it might not always give you the optimal solution. If we're trying to maximize the value of any particular state, we're trying to find the global maximum, a concern might be that we could get stuck at one of the local maxima, highlighted here in blue, where a local maxima is any state whose value is higher than any of its neighbors. If we ever find ourselves at one of these two states when we're trying to maximize the value of the state, we're not going to make any changes. We're not going to move left or right. We're not going to move left here, because those states are worse. But yet, we haven't found the global optimum. We haven't done as best as we could do. And likewise, in the case of the hospitals, what we're ultimately trying to do is find a global minimum, find a value that is lower than all of the others. But we have the potential to get stuck at one of the local minima, any of these states whose value is lower than all of its neighbors, but still not as low as the local minima. And so the takeaway here is that it's not always going to be the case that when we run this naive hill climbing algorithm, that we're always going to find the optimal solution. There are things that could go wrong. If we started here, for example, and tried to maximize our value as much as possible, we might move to the highest possible neighbor, move to the highest possible neighbor, move to the highest possible neighbor, and stop, and never realize that there's actually a better state way over there that we could have gone to instead. And other problems you might imagine just by taking a look at this state space landscape are these various different types of plateaus, something like this flat local maximum here, where all six of these states each have the exact same value. And so in the case of the algorithm we showed before, none of the neighbors are better, so we might just get stuck at this flat local maximum. And even if you allowed yourself to move to one of the neighbors, it wouldn't be clear which neighbor you would ultimately move to, and you could get stuck here as well. And there's another one over here. This one is called a shoulder. It's not really a local maximum, because there's still places where we can go higher, not a local minimum, because we can go lower. So we can still make progress, but it's still this flat area, where if you have a local search algorithm, there's potential to get lost here, unable to make some upward or downward progress, depending on whether we're trying to maximize or minimize it, and therefore another potential for us to be able to find a solution that might not actually be the optimal solution. And so because of this potential, the potential that hill climbing has to not always find us the optimal result, it turns out there are a number of different varieties and variations on the hill climbing algorithm that help to solve the problem better depending on the context, and depending on the specific type of problem, some of these variants might be more applicable than others. What we've taken a look at so far is a version of hill climbing generally called steepest ascent hill climbing, where the idea of steepest ascent hill climbing is we are going to choose the highest valued neighbor, in the case where we're trying to maximize or the lowest valued neighbor in cases where we're trying to minimize. But generally speaking, if I have five neighbors and they're all better than my current state, I will pick the best one of those five. Now, sometimes that might work pretty well. It's sort of a greedy approach of trying to take the best operation at any particular time step, but it might not always work. There might be cases where actually I want to choose an option that is slightly better than me, but maybe not the best one because that later on might lead to a better outcome ultimately. So there are other variants that we might consider of this basic hill climbing algorithm. One is known as stochastic hill climbing. And in this case, we choose randomly from all of our higher value neighbors. So if I'm at my current state and there are five neighbors that are all better than I am, rather than choosing the best one, as steep as the set would do, stochastic will just choose randomly from one of them, thinking that if it's better, then it's better. And maybe there's a potential to make forward progress, even if it is not locally the best option I could possibly choose. First choice hill climbing ends up just choosing the very first highest valued neighbor that it follows, behaving on a similar idea, rather than consider all of the neighbors. As soon as we find a neighbor that is better than our current state, we'll go ahead and move there. There may be some efficiency improvements there and maybe has the potential to find a solution that the other strategies weren't able to find. And with all of these variants, we still suffer from the same potential risk, this risk that we might end up at a local minimum or a local maximum. And we can reduce that risk by repeating the process multiple times. So one variant of hill climbing is random restart hill climbing, where the general idea is we'll conduct hill climbing multiple times. If we apply steepest descent hill climbing, for example, we'll start at some random state, try and figure out how to solve the problem and figure out what is the local maximum or local minimum we get to. And then we'll just randomly restart and try again, choose a new starting configuration, try and figure out what the local maximum or minimum is, and do this some number of times. And then after we've done it some number of times, we can pick the best one out of all of the ones that we've taken a look at. So there's another option we have access to as well. And then, although I said that generally local search will usually just keep track of a single node and then move to one of its neighbors, there are variants of hill climbing that are known as local beam searches, where rather than keep track of just one current best state, we're keeping track of k highest valued neighbors, such that rather than starting at one random initial configuration, I might start with 3 or 4 or 5, randomly generate all the neighbors, and then pick the 3 or 4 or 5 best of all of the neighbors that I find, and continually repeat this process, with the idea being that now I have more options that I'm considering, more ways that I could potentially navigate myself to the optimal solution that might exist for a particular problem. So let's now take a look at some actual code that can implement some of these kinds of ideas, something like steepest ascent hill climbing, for example, for trying to solve this hospital problem. So I'm going to go ahead and go into my hospitals directory, where I've actually set up the basic framework for solving this type of problem. I'll go ahead and go into hospitals.py, and we'll take a look at the code we've created here. I've defined a class that is going to represent the state space. So the space has a height, and a width, and also some number of hospitals. So you can configure how big is your map, how many hospitals should go here. We have a function for adding a new house to the state space, and then some functions that are going to get me all of the available spaces for if I want to randomly place hospitals in particular locations. And here now is the hill climbing algorithm. So what are we going to do in the hill climbing algorithm? Well, we're going to start by randomly initializing where the hospitals are going to go. We don't know where the hospitals should actually be, so let's just randomly place them. So here I'm running a loop for each of the hospitals that I have. I'm going to go ahead and add a new hospital at some random location. So I basically get all of the available spaces, and I randomly choose one of them as where I would like to add this particular hospital. I have some logging output and generating some images, which we'll take a look at a little bit later. But here is the key idea. So I'm going to just keep repeating this algorithm. I could specify a maximum of how many times I want it to run, or I could just run it up until it hits a local maximum or local minimum. And now we'll basically consider all of the hospitals that could potentially move. So consider each of the two hospitals or more hospitals if they're more than that. And consider all of the places where that hospital could move to, some neighbor of that hospital that we can move the neighbor to. And then see, is this going to be better than where we were currently? So if it is going to be better, then we'll go ahead and update our best neighbor and keep track of this new best neighbor that we found. And then afterwards, we can ask ourselves the question, if best neighbor cost is greater than or equal to the cost of the current set of hospitals, meaning if the cost of our best neighbor is greater than the current cost, meaning our best neighbor is worse than our current state, well, then we shouldn't make any changes at all. And we should just go ahead and return the current set of hospitals. But otherwise, we can update our hospitals in order to change them to one of the best neighbors. And if there are multiple that are all equivalent, I'm here using random.choice to say go ahead and choose one randomly. So this is really just a Python implementation of that same idea that we were just talking about, this idea of taking a current state, some current set of hospitals, generating all of the neighbors, looking at all of the ways we could take one hospital and move it one square to the left or right or up or down, and then figuring out, based on all of that information, which is the best neighbor or the set of all the best neighbors, and then choosing from one of those. And each time, we go ahead and generate an image in order to do that. And so now what we're doing is if we look down at the bottom, I'm going to randomly generate a space with height 10 and width 20. And I'll say go ahead and put three hospitals somewhere in the space. I'll randomly generate 15 houses that I just go ahead and add in random locations. And now I'm going to run this hill climbing algorithm in order to try and figure out where we should place those hospitals. So we'll go ahead and run this program by running Python hospitals. And we see that we started. Our initial state had a cost of 72, but we were able to continually find neighbors that were able to decrease that cost, decrease to 69, 66, 63, so on and so forth, all the way down to 53, as the best neighbor we were able to ultimately find. And we can take a look at what that looked like by just opening up these files. So here, for example, was the initial configuration. We randomly selected a location for each of these 15 different houses and then randomly selected locations for one, two, three hospitals that were just located somewhere inside of the state space. And if you add up all the distances from each of the houses to their nearest hospital, you get a total cost of about 72. And so now the question is, what neighbors can we move to that improve the situation? And it looks like the first one the algorithm found was by taking this house that was over there on the right and just moving it to the left. And that probably makes sense because if you look at the houses in that general area, really these five houses look like they're probably the ones that are going to be closest to this hospital over here. Moving it to the left decreases the total distance, at least to most of these houses, though it does increase that distance for one of them. And so we're able to make these improvements to the situation by continually finding ways that we can move these hospitals around until we eventually settle at this particular state that has a cost of 53, where we figured out a position for each of the hospitals. And now none of the neighbors that we could move to are actually going to improve the situation. We can take this hospital and this hospital and that hospital and look at each of the neighbors. And none of those are going to be better than this particular configuration. And again, that's not to say that this is the best we could do. There might be some other configuration of hospitals that is a global minimum. And this might just be a local minimum that is the best of all of its neighbors, but maybe not the best in the entire possible state space. And you could search through the entire state space by considering all of the possible configurations for hospitals. But ultimately, that's going to be very time intensive, especially as our state space gets bigger and there might be more and more possible states. It's going to take quite a long time to look through all of them. And so being able to use these sort of local search algorithms can often be quite good for trying to find the best solution we can do. And especially if we don't care about doing the best possible and we just care about doing pretty good and finding a pretty good placement of those hospitals, then these methods can be particularly powerful. But of course, we can try and mitigate some of this concern by instead of using hill climbing to use random restart, this idea of rather than just hill climb one time, we can hill climb multiple times and say, try hill climbing a whole bunch of times on the exact same map and figure out what is the best one that we've been able to find. And so I've here implemented a function for random restart that restarts some maximum number of times. And what we're going to do is repeat that number of times this process of just go ahead and run the hill climbing algorithm, figure out what the cost is of getting from all the houses to the hospitals, and then figure out is this better than we've done so far. So I can try this exact same idea where instead of running hill climbing, I'll go ahead and run random restart. And I'll randomly restart maybe 20 times, for example. And we'll go ahead and now I'll remove all the images and then rerun the program. And now we started by finding a original state. When we initially ran hill climbing, the best cost we were able to find was 56. Each of these iterations is a different iteration of the hill climbing algorithm. We're running hill climbing not one time, but 20 times here, each time going until we find a local minimum in this case. And we look and see each time did we do better than we did the best time we've done so far. So we went from 56 to 46. This one was greater, so we ignored it. This one was 41, which was less, so we went ahead and kept that one. And for all of the remaining 16 times that we tried to implement hill climbing and we tried to run the hill climbing algorithm, we couldn't do any better than that 41. Again, maybe there is a way to do better that we just didn't find, but it looks like that way ended up being a pretty good solution to the problem. That was attempt number three, starting from counting at zero. So we can take a look at that, open up number three. And this was the state that happened to have a cost of 41, that after running the hill climbing algorithm on some particular random initial configuration of hospitals, this is what we found was the local minimum in terms of trying to minimize the cost. And it looks like we did pretty well. This hospital is pretty close to this region. This one is pretty close to these houses here. This hospital looks about as good as we can do for trying to capture those houses over on that side. And so these sorts of algorithms can be quite useful for trying to solve these problems. But the real problem with many of these different types of hill climbing, steepest of sense, stochastic, first choice, and so forth, is that they never make a move that makes our situation worse. They're always going to take ourselves in our current state, look at the neighbors, and consider can we do better than our current state and move to one of those neighbors. Which of those neighbors we choose might vary among these various different types of algorithms, but we never go from a current position to a position that is worse than our current position. And ultimately, that's what we're going to need to do if we want to be able to find a global maximum or a global minimum. Because sometimes if we get stuck, we want to find some way of dislodging ourselves from our local maximum or local minimum in order to find the global maximum or the global minimum or increase the probability that we do find it. And so the most popular technique for trying to approach the problem from that angle is a technique known as simulated annealing, simulated because it's modeling after a real physical process of annealing, where you can think about this in terms of physics, a physical situation where you have some system of particles. And you might imagine that when you heat up a particular physical system, there's a lot of energy there. Things are moving around quite randomly. But over time, as the system cools down, it eventually settles into some final position. And that's going to be the general idea of simulated annealing. We're going to simulate that process of some high temperature system where things are moving around randomly quite frequently, but over time decreasing that temperature until we eventually settle at our ultimate solution. And the idea is going to be if we have some state space landscape that looks like this and we begin at its initial state here, if we're looking for a global maximum and we're trying to maximize the value of the state, our traditional hill climbing algorithms would just take the state and look at the two neighbor ones and always pick the one that is going to increase the value of the state. But if we want some chance of being able to find the global maximum, we can't always make good moves. We have to sometimes make bad moves and allow ourselves to make a move in a direction that actually seems for now to make our situation worse such that later we can find our way up to that global maximum in terms of trying to solve that problem. Of course, once we get up to this global maximum, once we've done a whole lot of the searching, then we probably don't want to be moving to states that are worse than our current state. And so this is where this metaphor for annealing starts to come in, where we want to start making more random moves and over time start to make fewer of those random moves based on a particular temperature schedule. So the basic outline looks something like this. Early on in simulated annealing, we have a higher temperature state. And what we mean by a higher temperature state is that we are more likely to accept neighbors that are worse than our current state. We might look at our neighbors. And if one of our neighbors is worse than the current state, especially if it's not all that much worse, if it's pretty close but just slightly worse, then we might be more likely to accept that and go ahead and move to that neighbor anyways. But later on as we run simulated annealing, we're going to decrease that temperature. And at a lower temperature, we're going to be less likely to accept neighbors that are worse than our current state. Now to formalize this and put a little bit of pseudocode to it, here is what that algorithm might look like. We have a function called simulated annealing that takes as input the problem we're trying to solve and also potentially some maximum number of times we might want to run the simulated annealing process, how many different neighbors we're going to try and look for. And that value is going to vary based on the problem you're trying to solve. We'll, again, start with some current state that will be equal to the initial state of the problem. But now we need to repeat this process over and over for max number of times. Repeat some process some number of times where we're first going to calculate a temperature. And this temperature function takes the current time t starting at 1 going all the way up to max and then gives us some temperature that we can use in our computation, where the idea is that this temperature is going to be higher early on and it's going to be lower later on. So there are a number of ways this temperature function could often work. One of the simplest ways is just to say it is like the proportion of time that we still have remaining. Out of max units of time, how much time do we have remaining? You start off with a lot of that time remaining. And as time goes on, the temperature is going to decrease because you have less and less of that remaining time still available to you. So we calculate a temperature for the current time. And then we pick a random neighbor of the current state. No longer are we going to be picking the best neighbor that we possibly can or just one of the better neighbors that we can. We're going to pick a random neighbor. It might be better. It might be worse. But we're going to calculate that. We're going to calculate delta E, E for energy in this case, which is just how much better is the neighbor than the current state. So if delta E is positive, that means the neighbor is better than our current state. If delta E is negative, that means the neighbor is worse than our current state. And so we can then have a condition that looks like this. If delta E is greater than 0, that means the neighbor state is better than our current state. And if ever that situation arises, we'll just go ahead and update current to be that neighbor. Same as before, move where we are currently to be the neighbor because the neighbor is better than our current state. We'll go ahead and accept that. But now the difference is that whereas before, we never, ever wanted to take a move that made our situation worse, now we sometimes want to make a move that is actually going to make our situation worse because sometimes we're going to need to dislodge ourselves from a local minimum or local maximum to increase the probability that we're able to find the global minimum or the global maximum a little bit later. And so how do we do that? How do we decide to sometimes accept some state that might actually be worse? Well, we're going to accept a worse state with some probability. And that probability needs to be based on a couple of factors. It needs to be based in part on the temperature, where if the temperature is higher, we're more likely to move to a worse neighbor. And if the temperature is lower, we're less likely to move to a worse neighbor. But it also, to some degree, should be based on delta E. If the neighbor is much worse than the current state, we probably want to be less likely to choose that than if the neighbor is just a little bit worse than the current state. So again, there are a couple of ways you could calculate this. But it turns out one of the most popular is just to calculate E to the power of delta E over T, where E is just a constant. Delta E over T are based on delta E and T here. We calculate that value. And that'll be some value between 0 and 1. And that is the probability with which we should just say, all right, let's go ahead and move to that neighbor. And it turns out that if you do the math for this value, when delta E is such that the neighbor is not that much worse than the current state, that's going to be more likely that we're going to go ahead and move to that state. And likewise, when the temperature is lower, we're going to be less likely to move to that neighboring state as well. So now this is the big picture for simulated annealing, this process of taking the problem and going ahead and generating random neighbors will always move to a neighbor if it's better than our current state. But even if the neighbor is worse than our current state, we'll sometimes move there depending on how much worse it is and also based on the temperature. And as a result, the hope, the goal of this whole process is that as we begin to try and find our way to the global maximum or the global minimum, we can dislodge ourselves if we ever get stuck at a local maximum or local minimum in order to eventually make our way to exploring the part of the state space that is going to be the best. And then as the temperature decreases, eventually we settle there without moving around too much from what we've found to be the globally best thing that we can do thus far. So at the very end, we just return whatever the current state happens to be. And that is the conclusion of this algorithm. We've been able to figure out what the solution is. And these types of algorithms have a lot of different applications. Any time you can take a problem and formulate it as something where you can explore a particular configuration and then ask, are any of the neighbors better than this current configuration and have some way of measuring that, then there is an applicable case for these hill climbing, simulated annealing types of algorithms. So sometimes it can be for facility location type problems, like for when you're trying to plan a city and figure out where the hospitals should be. But there are definitely other applications as well. And one of the most famous problems in computer science is the traveling salesman problem. Traveling salesman problem generally is formulated like this. I have a whole bunch of cities here indicated by these dots. And what I'd like to do is find some route that takes me through all of the cities and ends up back where I started. So some route that starts here, goes through all these cities, and ends up back where I originally started. And what I might like to do is minimize the total distance that I have to travel or the total cost of taking this entire path. And you can imagine this is a problem that's very applicable in situations like when delivery companies are trying to deliver things to a whole bunch of different houses, they want to figure out, how do I get from the warehouse to all these various different houses and get back again, all using as minimal time and distance and energy as possible. So you might want to try to solve these sorts of problems. But it turns out that solving this particular kind of problem is very computationally difficult. It is a very computationally expensive task to be able to figure it out. This falls under the category of what are known as NPcomplete problems, problems that there is no known efficient way to try and solve these sorts of problems. And so what we ultimately have to do is come up with some approximation, some ways of trying to find a good solution, even if we're not going to find the globally best solution that we possibly can, at least not in a feasible or tractable amount of time. And so what we could do is take the traveling salesman problem and try to formulate it using local search and ask a question like, all right, I can pick some state, some configuration, some route between all of these nodes. And I can measure the cost of that state, figure out what the distance is. And I might now want to try to minimize that cost as much as possible. And then the only question now is, what does it mean to have a neighbor of this state? What does it mean to take this particular route and have some neighboring route that is close to it but slightly different and such that it might have a different total distance? And there are a number of different definitions for what a neighbor of a traveling salesman configuration might look like. But one way is just to say, a neighbor is what happens if we pick two of these edges between nodes and switch them effectively. So for example, I might pick these two edges here, these two that just happened across this node goes here, this node goes there, and go ahead and switch them. And what that process will generally look like is removing both of these edges from the graph, taking this node, and connecting it to the node it wasn't connected to. So connecting it up here instead. We'll need to take these arrows that were originally going this way and reverse them, so move them going the other way, and then just fill in that last remaining blank, add an arrow that goes in that direction instead. So by taking two edges and just switching them, I have been able to consider one possible neighbor of this particular configuration. And it looks like this neighbor is actually better. It looks like this probably travels a shorter distance in order to get through all the cities through this route than the current state did. And so you could imagine implementing this idea inside of a hill climbing or simulated annealing algorithm, where we repeat this process to try and take a state of this traveling salesman problem, look at all the neighbors, and then move to the neighbors if they're better, or maybe even move to the neighbors if they're worse, until we eventually settle upon some best solution that we've been able to find. And it turns out that these types of approximation algorithms, even if they don't always find the very best solution, can often do pretty well at trying to find solutions that are helpful too. So that then was a look at local search, a particular category of algorithms that can be used for solving a particular type of problem, where we don't really care about the path to the solution. I didn't care about the steps I took to decide where the hospitals should go. I just cared about the solution itself. I just care about where the hospitals should be, or what the route through the traveling salesman journey really ought to be. Another type of algorithm that might come up are known as these categories of linear programming types of problems. And linear programming often comes up in the context where we're trying to optimize for some mathematical function. But oftentimes, linear programming will come up when we might have real numbered values. So it's not just discrete fixed values that we might have, but any decimal values that we might want to be able to calculate. And so linear programming is a family of types of problems where we might have a situation that looks like this, where the goal of linear programming is to minimize a cost function. And you can invert the numbers and say try and maximize it, but often we'll frame it as trying to minimize a cost function that has some number of variables, x1, x2, x3, all the way up to xn, just some number of variables that are involved, things that I want to know the values to. And this cost function might have coefficients in front of those variables. And this is what we would call a linear equation, where we just have all of these variables that might be multiplied by a coefficient and then add it together. We're not going to square anything or cube anything, because that'll give us different types of equations. With linear programming, we're just dealing with linear equations in addition to linear constraints, where a constraint is going to look something like if we sum up this particular equation that is just some linear combination of all of these variables, it is less than or equal to some bound b. And we might have a whole number of these various different constraints that we might place onto our linear programming exercise. And likewise, just as we can have constraints that are saying this linear equation is less than or equal to some bound b, it might also be equal to something. That if you want some sum of some combination of variables to be equal to a value, you can specify that. And we can also maybe specify that each variable has lower and upper bounds, that it needs to be a positive number, for example, or it needs to be a number that is less than 50, for example. And there are a number of other choices that we can make there for defining what the bounds of a variable are. But it turns out that if you can take a problem and formulate it in these terms, formulate the problem as your goal is to minimize a cost function, and you're minimizing that cost function subject to particular constraints, subjects to equations that are of the form like this of some sequence of variables is less than a bound or is equal to some particular value, then there are a number of algorithms that already exist for solving these sorts of problems. So let's go ahead and take a look at an example. Here's an example of a problem that might come up in the world of linear programming. Often, this is going to come up when we're trying to optimize for something. And we want to be able to do some calculations, and we have constraints on what we're trying to optimize. And so it might be something like this. In the context of a factory, we have two machines, x1 and x2. x1 costs $50 an hour to run. x2 costs $80 an hour to run. And our goal, what we're trying to do, our objective, is to minimize the total cost. So that's what we'd like to do. But we need to do so subject to certain constraints. So there might be a labor constraint that x1 requires five units of labor per hour, x2 requires two units of labor per hour, and we have a total of 20 units of labor that we have to spend. So this is a constraint. We have no more than 20 units of labor that we can spend, and we have to spend it across x1 and x2, each of which requires a different amount of labor. And we might also have a constraint like this that tells us x1 is going to produce 10 units of output per hour, x2 is going to produce 12 units of output per hour, and the company needs 90 units of output. So we have some goal, something we need to achieve. We need to achieve 90 units of output, but there are some constraints that x1 can only produce 10 units of output per hour, x2 produces 12 units of output per hour. These types of problems come up quite frequently, and you can start to notice patterns in these types of problems, problems where I am trying to optimize for some goal, minimizing cost, maximizing output, maximizing profits, or something like that. And there are constraints that are placed on that process. And so now we just need to formulate this problem in terms of linear equations. So let's start with this first point. Two machines, x1 and x2, x costs $50 an hour, x2 costs $80 an hour. Here we can come up with an objective function that might look like this. This is our cost function, rather. 50 times x1 plus 80 times x2, where x1 is going to be a variable representing how many hours do we run machine x1 for, x2 is going to be a variable representing how many hours are we running machine x2 for. And what we're trying to minimize is this cost function, which is just how much it costs to run each of these machines per hour summed up. This is an example of a linear equation, just some combination of these variables plus coefficients that are placed in front of them. And I would like to minimize that total value. But I need to do so subject to these constraints. x1 requires 50 units of labor per hour, x2 requires 2, and we have a total of 20 units of labor to spend. And so that gives us a constraint of this form. 5 times x1 plus 2 times x2 is less than or equal to 20. 20 is the total number of units of labor we have to spend. And that's spent across x1 and x2, each of which requires a different number of units of labor per hour, for example. And finally, we have this constraint here. x1 produces 10 units of output per hour, x2 produces 12, and we need 90 units of output. And so this might look something like this. That 10x1 plus 12x2, this is amount of output per hour, it needs to be at least 90. We can do better or great, but it needs to be at least 90. And if you recall from my formulation before, I said that generally speaking in linear programming, we deal with equals constraints or less than or equal to constraints. So we have a greater than or equal to sign here. That's not a problem. Whenever we have a greater than or equal to sign, we can just multiply the equation by negative 1, and that'll flip it around to a less than or equals negative 90, for example, instead of a greater than or equal to 90. And that's going to be an equivalent expression that we can use to represent this problem. So now that we have this cost function and these constraints that it's subject to, it turns out there are a number of algorithms that can be used in order to solve these types of problems. And these problems go a little bit more into geometry and linear algebra than we're really going to get into. But the most popular of these types of algorithms are simplex, which was one of the first algorithms discovered for trying to solve linear programs. And later on, a class of interior point algorithms can be used to solve this type of problem as well. The key is not to understand exactly how these algorithms work, but to realize that these algorithms exist for efficiently finding solutions any time we have a problem of this particular form. And so we can take a look, for example, at the production directory here, where here I have a file called production.py, where here I'm using scipy, which was the library for a lot of sciencerelated functions within Python. And I can go ahead and just run this optimization function in order to run a linear program. .linprog here is going to try and solve this linear program for me, where I provide to this expression, to this function call, all of the data about my linear program. So it needs to be in a particular format, which might be a little confusing at first. But this first argument to scipy.optimize.linprogramming is the cost function, which is in this case just an array or a list that has 50 and 80, because my original cost function was 50 times x1 plus 80 times x2. So I just tell Python, 50 and 80, those are the coefficients that I am now trying to optimize for. And then I provide all of the constraints. So the constraints, and I wrote them up above in comments, is the constraint 1 is 5x1 plus 2x2 is less than or equal to 20. And constraint 2 is negative 10x1 plus negative 12x2 is less than or equal to negative 90. And so scipy expects these constraints to be in a particular format. It first expects me to provide all of the coefficients for the upper bound equations, ub just for upper bound, where the coefficients of the first equation are 5 and 2, because we have 5x1 and 2x2. And the coefficients for the second equation are negative 10 and negative 12, because I have negative 10x1 plus negative 12x2. And then here, we provide it as a separate argument, just to keep things separate, what the actual bound is. What is the upper bound for each of these constraints? Well, for the first constraint, the upper bound is 20. That was constraint number 1. And then for constraint number 2, the upper bound is 90. So a bit of a cryptic way of representing it. It's not quite as simple as just writing the mathematical equations. What really is being expected here are all of the coefficients and all of the numbers that are in these equations by first providing the coefficients for the cost function, then providing all the coefficients for the inequality constraints, and then providing all of the upper bounds for those inequality constraints. And once all of that information is there, then we can run any of these interior point algorithms or the simplex algorithm. Even if you don't understand how it works, you can just run the function and figure out what the result should be. And here, I said if the result is a success, we were able to solve this problem. Go ahead and print out what the value of x1 and x2 should be. Otherwise, go ahead and print out no solution. And so if I run this program by running python production.py, it takes a second to calculate. But then we see here is what the optimal solution should be. x1 should run for 1.5 hours. x2 should run for 6.25 hours. And we were able to do this by just formulating the problem as a linear equation that we were trying to optimize, some cost that we were trying to minimize, and then some constraints that were placed on that. And many, many problems fall into this category of problems that you can solve if you can just figure out how to use equations and use these constraints to represent that general idea. And that's a theme that's going to come up a couple of times today, where we want to be able to take some problem and reduce it down to some problem we know how to solve in order to begin to find a solution and to use existing methods that we can use in order to find a solution more effectively or more efficiently. And it turns out that these types of problems, where we have constraints, show up in other ways too. And there's an entire class of problems that's more generally just known as constraint satisfaction problems. And we're going to now take a look at how you might formulate a constraint satisfaction problem and how you might go about solving a constraint satisfaction problem. But the basic idea of a constraint satisfaction problem is we have some number of variables that need to take on some values. And we need to figure out what values each of those variables should take on. But those variables are subject to particular constraints that are going to limit what values those variables can actually take on. So let's take a look at a real world example, for example. Let's look at exam scheduling, that I have four students here, students 1, 2, 3, and 4. Each of them is taking some number of different classes. Classes here are going to be represented by letters. So student 1 is enrolled in courses A, B, and C. Student 2 is enrolled in courses B, D, and E, so on and so forth. And now, say university, for example, is trying to schedule exams for all of these courses. But there are only three exam slots on Monday, Tuesday, and Wednesday. And we have to schedule an exam for each of these courses. But the constraint now, the constraint we have to deal with with the scheduling, is that we don't want anyone to have to take two exams on the same day. We would like to try and minimize that or eliminate it if at all possible. So how do we begin to represent this idea? How do we structure this in a way that a computer with an AI algorithm can begin to try and solve the problem? Well, let's in particular just look at these classes that we might take and represent each of the courses as some node inside of a graph. And what we'll do is we'll create an edge between two nodes in this graph if there is a constraint between those two nodes. So what does this mean? Well, we can start with student 1, who's enrolled in courses A, B, and C. What that means is that A and B can't have an exam at the same time. A and C can't have an exam at the same time. And B and C also can't have an exam at the same time. And I can represent that in this graph by just drawing edges. One edge between A and B, one between B and C, and then one between C and A. And that encodes now the idea that between those nodes, there is a constraint. And in particular, the constraint happens to be that these two can't be equal to each other, though there are other types of constraints that are possible, depending on the type of problem that you're trying to solve. And then we can do the same thing for each of the other students. So for student 2, who's enrolled in courses B, D, and E, well, that means B, D, and E, those all need to have edges that connect each other as well. Student 3 is enrolled in courses C, E, and F. So we'll go ahead and take C, E, and F and connect those by drawing edges between them too. And then finally, student 4 is enrolled in courses E, F, and G. And we can represent that by drawing edges between E, F, and G, although E and F already had an edge between them. We don't need another one, because this constraint is just encoding the idea that course E and course F cannot have an exam on the same day. So this then is what we might call the constraint graph. There's some graphical representation of all of my variables, so to speak, and the constraints between those possible variables. Where in this particular case, each of the constraints represents an inequality constraint, that an edge between B and D means whatever value the variable B takes on cannot be the value that the variable D takes on as well. So what then actually is a constraint satisfaction problem? Well, a constraint satisfaction problem is just some set of variables, x1 all the way through xn, some set of domains for each of those variables. So every variable needs to take on some values. Maybe every variable has the same domain, but maybe each variable has a slightly different domain. And then there's a set of constraints, and we'll just call a set C, that is some constraints that are placed upon these variables, like x1 is not equal to x2. But there could be other forms too, like maybe x1 equals x2 plus 1 if these variables are taking on numerical values in their domain, for example. The types of constraints are going to vary based on the types of problems. And constraint satisfaction shows up all over the place as well, in any situation where we have variables that are subject to particular constraints. So one popular game is Sudoku, for example, this 9 by 9 grid where you need to fill in numbers in each of these cells, but you want to make sure there's never a duplicate number in any row, or in any column, or in any grid of 3 by 3 cells, for example. So what might this look like as a constraint satisfaction problem? Well, my variables are all of the empty squares in the puzzle. So represented here is just like an x comma y coordinate, for example, as all of the squares where I need to plug in a value, where I don't know what value it should take on. The domain is just going to be all of the numbers from 1 through 9, any value that I could fill in to one of these cells. So that is going to be the domain for each of these variables. And then the constraints are going to be of the form, like this cell can't be equal to this cell, can't be equal to this cell, can't be, and all of these need to be different, for example, and same for all of the rows, and the columns, and the 3 by 3 squares as well. So those constraints are going to enforce what values are actually allowed. And we can formulate the same idea in the case of this exam scheduling problem, where the variables we have are the different courses, a up through g. The domain for each of these variables is going to be Monday, Tuesday, and Wednesday. Those are the possible values each of the variables can take on, that in this case just represent when is the exam for that class. And then the constraints are of this form, a is not equal to b, a is not equal to c, meaning a and b can't have an exam on the same day, a and c can't have an exam on the same day. Or more formally, these two variables cannot take on the same value within their domain. So that then is this formulation of a constraint satisfaction problem that we can begin to use to try and solve this problem. And constraints can come in a number of different forms. There are hard constraints, which are constraints that must be satisfied for a correct solution. So something like in the Sudoku puzzle, you cannot have this cell and this cell that are in the same row take on the same value. That is a hard constraint. But problems can also have soft constraints, where these are constraints that express some notion of preference, that maybe a and b can't have an exam on the same day, but maybe someone has a preference that a's exam is earlier than b's exam. It doesn't need to be the case with some expression that some solution is better than another solution. And in that case, you might formulate the problem as trying to optimize for maximizing people's preferences. You want people's preferences to be satisfied as much as possible. In this case, though, we'll mostly just deal with hard constraints, constraints that must be met in order to have a correct solution to the problem. So we want to figure out some assignment of these variables to their particular values that is ultimately going to give us a solution to the problem by allowing us to assign some day to each of the classes such that we don't have any conflicts between classes. So it turns out that we can classify the constraints in a constraint satisfaction problem into a number of different categories. The first of those categories are perhaps the simplest of the types of constraints, which are known as unary constraints, where unary constraint is a constraint that just involves a single variable. For example, a unary constraint might be something like, a does not equal Monday, meaning Course A cannot have its exam on Monday. If for some reason the instructor for the course isn't available on Monday, you might have a constraint in your problem that looks like this, something that just has a single variable a in it, and maybe says a is not equal to Monday, or a is equal to something, or in the case of numbers greater than or less than something, a constraint that just has one variable, we consider to be a unary constraint. And this is in contrast to something like a binary constraint, which is a constraint that involves two variables, for example. So this would be a constraint like the ones we were looking at before. Something like a does not equal b is an example of a binary constraint, because it is a constraint that has two variables involved in it, a and b. And we represented that using some arc or some edge that connects variable a to variable b. And using this knowledge of, OK, what is a unary constraint? What is a binary constraint? There are different types of things we can say about a particular constraint satisfaction problem. And one thing we can say is we can try and make the problem node consistent. So what does node consistency mean? Node consistency means that we have all of the values in a variable's domain satisfying that variable's unary constraints. So for each of the variables inside of our constraint satisfaction problem, if all of the values satisfy the unary constraints for that particular variable, we can say that the entire problem is node consistent, or we can even say that a particular variable is node consistent if we just want to make one node consistent within itself. So what does that actually look like? Let's look at now a simplified example, where instead of having a whole bunch of different classes, we just have two classes, a and b, each of which has an exam on either Monday or Tuesday or Wednesday. So this is the domain for the variable a, and this is the domain for the variable b. And now let's imagine we have these constraints, a not equal to Monday, b not equal to Tuesday, b not equal to Monday, a not equal to b. So those are the constraints that we have on this particular problem. And what we can now try to do is enforce node consistency. And node consistency just means we make sure that all of the values for any variable's domain satisfy its unary constraints. And so we could start by trying to make node a node consistent. Is it consistent? Does every value inside of a's domain satisfy its unary constraints? Well, initially, we'll see that Monday does not satisfy a's unary constraints, because we have a constraint, a unary constraint here, that a is not equal to Monday. But Monday is still in a's domain. And so this is something that is not node consistent, because we have Monday in the domain. But this is not a valid value for this particular node. And so how do we make this node consistent? Well, to make the node consistent, what we'll do is we'll just go ahead and remove Monday from a's domain. Now a can only be on Tuesday or Wednesday, because we had this constraint that said a is not equal to Monday. And at this point now, a is node consistent. For each of the values that a can take on, Tuesday and Wednesday, there is no constraint that is a unary constraint that conflicts with that idea. There is no constraint that says that a can't be Tuesday. There is no unary constraint that says that a cannot be on Wednesday. And so now we can turn our attention to b. b also has a domain, Monday, Tuesday, and Wednesday. And we can begin to see whether those variables satisfy the unary constraints as well. Well, here is a unary constraint, b is not equal to Tuesday. And that does not appear to be satisfied by this domain of Monday, Tuesday, and Wednesday, because Tuesday, this possible value that the variable b could take on is not consistent with this unary constraint, that b is not equal to Tuesday. So to solve that problem, we'll go ahead and remove Tuesday from b's domain. Now b's domain only contains Monday and Wednesday. But as it turns out, there's yet another unary constraint that we placed on the variable b, which is here. b is not equal to Monday. And that means that this value, Monday, inside of b's domain, is not consistent with b's unary constraints, because we have a constraint that says the b cannot be Monday. And so we can remove Monday from b's domain. And now we've made it through all of the unary constraints. We've not yet considered this constraint, which is a binary constraint. But we've considered all of the unary constraints, all of the constraints that involve just a single variable. And we've made sure that every node is consistent with those unary constraints. So we can say that now we have enforced node consistency, that for each of these possible nodes, we can pick any of these values in the domain. And there won't be a unary constraint that is violated as a result of it. So node consistency is fairly easy to enforce. We just take each node, make sure the values in the domain satisfy the unary constraints. Where things get a little bit more interesting is when we consider different types of consistency, something like arc consistency, for example. And arc consistency refers to when all of the values in a variable's domain satisfy the variable's binary constraints. So when we're looking at trying to make a arc consistent, we're no longer just considering the unary constraints that involve a. We're trying to consider all of the binary constraints that involve a as well. So any edge that connects a to another variable inside of that constraint graph that we were taking a look at before. Put a little bit more formally, arc consistency. And arc really is just another word for an edge that connects two of these nodes inside of our constraint graph. We can define arc consistency a little more precisely like this. In order to make some variable x arc consistent with respect to some other variable y, we need to remove any element from x's domain to make sure that every choice for x, every choice in x's domain, has a possible choice for y. So put another way, if I have a variable x and I want to make x an arc consistent, then I'm going to look at all of the possible values that x can take on and make sure that for all of those possible values, there is still some choice that I can make for y, if there's some arc between x and y, to make sure that y has a possible option that I can choose as well. So let's look at an example of that going back to this example from before. We enforced node consistency already by saying that a can only be on Tuesday or Wednesday because we knew that a could not be on Monday. And we also said that b's only domain only consists of Wednesday because we know that b does not equal Tuesday and also b does not equal Monday. So now let's begin to consider arc consistency. Let's try and make a arc consistent with b. And what that means is to make a arc consistent with respect to b means that for any choice we make in a's domain, there is some choice we can make in b's domain that is going to be consistent. And we can try that. For a, we can choose Tuesday as a possible value for a. If I choose Tuesday for a, is there a value for b that satisfies the binary constraint? Well, yes, b Wednesday would satisfy this constraint that a does not equal b because Tuesday does not equal Wednesday. However, if we chose Wednesday for a, well, then there is no choice in b's domain that satisfies this binary constraint. There is no way I can choose something for b that satisfies a does not equal b because I know b must be Wednesday. And so if ever I run into a situation like this where I see that here is a possible value for a such that there is no choice of value for b that satisfies the binary constraint, well, then this is not arc consistent. And to make it arc consistent, I would need to take Wednesday and remove it from a's domain. Because Wednesday was not going to be a possible choice I can make for a because it wasn't consistent with this binary constraint for b. There was no way I could choose Wednesday for a and still have an available solution by choosing something for b as well. So here now, I've been able to enforce arc consistency. And in doing so, I've actually solved this entire problem, that given these constraints where a and b can have exams on either Monday or Tuesday or Wednesday, the only solution, as it would appear, is that a's exam must be on Tuesday and b's exam must be on Wednesday. And that is the only option available to me. So if we want to apply our consistency to a larger graph, not just looking at one particular pair of our consistency, there are ways we can do that too. And we can begin to formalize what the pseudocode would look like for trying to write an algorithm that enforces arc consistency. And we'll start by defining a function called revise. Revise is going to take as input a CSP, otherwise known as a constraint satisfaction problem, and also two variables, x and y. And what revise is going to do is it is going to make x arc consistent with respect to y, meaning remove anything from x's domain that doesn't allow for a possible option for y. How does this work? Well, we'll go ahead and first keep track of whether or not we've made a revision. Revise is ultimately going to return true or false. It'll return true in the event that we did make a revision to x's domain. It'll return false if we didn't make any change to x's domain. And we'll see in a moment why that's going to be helpful. But we start by saying revised equals false. We haven't made any changes. Then we'll say, all right, let's go ahead and loop over all of the possible values in x's domain. So loop over x's domain for each little x in x's domain. I want to make sure that for each of those choices, I have some available choice in y that satisfies the binary constraints that are defined inside of my CSP, inside of my constraint satisfaction problem. So if ever it's the case that there is no value y in y's domain that satisfies the constraint for x and y, well, if that's the case, that means that this value x shouldn't be in x's domain. So we'll go ahead and delete x from x's domain. And I'll set revised equal to true because I did change x's domain. I changed x's domain by removing little x. And I removed little x because it wasn't art consistent. There was no way I could choose a value for y that would satisfy this xy constraint. So in this case, we'll go ahead and set revised equal true. And we'll do this again and again for every value in x's domain. Sometimes it might be fine. In other cases, it might not allow for a possible choice for y, in which case we need to remove this value from x's domain. And at the end, we just return revised to indicate whether or not we actually made a change. So this function, then, this revised function is effectively an implementation of what you saw me do graphically a moment ago. And it makes one variable, x, arc consistent with another variable, in this case, y. But generally speaking, when we want to enforce our consistency, we'll often want to enforce our consistency not just for a single arc, but for the entire constraint satisfaction problem. And it turns out there's an algorithm to do that as well. And that algorithm is known as AC3. AC3 takes a constraint satisfaction problem. And it enforces our consistency across the entire problem. How does it do that? Well, it's going to basically maintain a queue or basically just a line of all of the arcs that it needs to make consistent. And over time, we might remove things from that queue as we begin dealing with our consistency. And we might need to add things to that queue as well if there are more things we need to make arc consistent. So we'll go ahead and start with a queue that contains all of the arcs in the constraint satisfaction problem, all of the edges that connect two nodes that have some sort of binary constraint between them. And now, as long as the queue is nonempty, there is work to be done. The queue is all of the things that we need to make arc consistent. So as long as the queue is nonempty, there's still things we have to do. What do we have to do? Well, we'll start by dequeuing from the queue, remove something from the queue. And strictly speaking, it doesn't need to be a queue, but a queue is a traditional way of doing this. We'll dequeue from the queue, and that'll give us an arc, x and y, these two variables where I would like to make x arc consistent with y. So how do we make x arc consistent with y? Well, we can go ahead and just use that revise function that we talked about a moment ago. We called the revise function, passing as input the constraint satisfaction problem, and also these variables x and y, because I want to make x arc consistent with y. In other words, remove any values from x's domain that don't leave an available option for y. And recall, what does revised return? Well, it returns true if we actually made a change, if we removed something from x's domain, because there wasn't an available option for y, for example. And it returns false if we didn't make any change to x's domain at all. And it turns out if revised returns false, if we didn't make any changes, well, then there's not a whole lot more work to be done here for this arc. We can just move ahead to the next arc that's in the queue. But if we did make a change, if we did reduce x's domain by removing values from x's domain, well, then what we might realize is that this creates potential problems later on, that it might mean that some arc that was arc consistent with x, that node might no longer be arc consistent with x, because while there used to be an option that we could choose for x, now there might not be, because now we might have removed something from x that was necessary for some other arc to be arc consistent. And so if ever we did revise x's domain, we're going to need to add some things to the queue, some additional arcs that we might want to check. How do we do that? Well, first thing we want to check is to make sure that x's domain is not 0. If x's domain is 0, that means there are no available options for x at all. And that means that there's no way you can solve the constraint satisfaction problem. If we've removed everything from x's domain, we'll go ahead and just return false here to indicate there's no way to solve the problem, because there's nothing left in x's domain. But otherwise, if there are things left in x's domain, but fewer things than before, well, then what we'll do is we'll loop over each variable z that is in all of x's neighbors, except for y, y we already handled. But we'll consider all of x's other's neighbors and ask ourselves, all right, will that arc from each of those z's to x, that arc might no longer be arc consistent, because while for each z, there might have been a possible option we could choose for x to correspond with each of z's possible values, now there might not be, because we removed some elements from x's domain. And so what we'll do here is we'll go ahead and enqueue, adding something to the queue, this arc zx for all of those neighbors z. So we need to add back some arcs to the queue in order to continue to enforce arc consistency. At the very end, if we make it through all this process, then we can return true. But this now is AC3, this algorithm for enforcing arc consistency on a constraint satisfaction problem. And the big idea is really just keep track of all of the arcs that we might need to make arc consistent, make it arc consistent by calling the revise function. And if we did revise it, then there are some new arcs that might need to be added to the queue in order to make sure that everything is still arc consistent, even after we've removed some of the elements from a particular variable's domain. So what then would happen if we tried to enforce arc consistency on a graph like this, on a graph where each of these variables has a domain of Monday, Tuesday, and Wednesday? Well, it turns out that by enforcing arc consistency on this graph, well, it can solve some types of problems. Nothing actually changes here. For any particular arc, just considering two variables, there's always a way for me to just, for any of the choices I make for one of them, make a choice for the other one, because there are three options, and I just need the two to be different from each other. So this is actually quite easy to just take an arc and just declare that it is arc consistent, because if I pick Monday for D, then I just pick something that isn't Monday for B. In arc consistency, we only consider consistency between a binary constraint between two nodes, and we're not really considering all of the rest of the nodes yet. So just using AC3, the enforcement of arc consistency, that can sometimes have the effect of reducing domains to make it easier to find solutions, but it will not always actually solve the problem. We might still need to somehow search to try and find a solution. And we can use classical traditional search algorithms to try to do so. You'll recall that a search problem generally consists of these parts. We have some initial state, some actions, a transition model that takes me from one state to another state, a goal test to tell me have I satisfied my objective correctly, and then some path cost function, because in the case of like maze solving, I was trying to get to my goal as quickly as possible. So you could formulate a CSP, or a constraint satisfaction problem, as one of these types of search problems. The initial state will just be an empty assignment, where an assignment is just a way for me to assign any particular variable to any particular value. So if an empty assignment is no variables that are assigned to any values yet, then the action I can take is adding some new variable equals value pair to that assignment, saying for this assignment, let me add a new value for this variable. And the transition model just defines what happens when you take that action. You get a new assignment that has that variable equal to that value inside of it. The goal test is just checking to make sure all the variables have been assigned and making sure all the constraints have been satisfied. And the path cost function is sort of irrelevant. I don't really care about what the path really is. I just care about finding some assignment that actually satisfies all of the constraints. So really, all the paths have the same cost. I don't really care about the path to the goal. I just care about the solution itself, much as we've talked about now before. The problem here, though, is that if we just implement this naive search algorithm just by implementing like breadthfirst search or depthfirst search, this is going to be very, very inefficient. And there are ways we can take advantage of efficiencies in the structure of a constraint satisfaction problem itself. And one of the key ideas is that we can really just order these variables. And it doesn't matter what order we assign variables in. The assignment a equals 2 and then b equals 8 is identical to the assignment of b equals 8 and then a equals 2. Switching the order doesn't really change anything about the fundamental nature of that assignment. And so there are some ways that we can try and revise this idea of a search algorithm to apply it specifically for a problem like a constraint satisfaction problem. And it turns out the search algorithm we'll generally use when talking about constraint satisfaction problems is something known as backtracking search. And the big idea of backtracking search is we'll go ahead and make assignments from variables to values. And if ever we get stuck, we arrive at a place where there is no way we can make any forward progress while still preserving the constraints that we need to enforce, we'll go ahead and backtrack and try something else instead. So the very basic sketch of what backtracking search looks like is it looks like this. Function called backtrack that takes as input an assignment and a constraint satisfaction problem. So initially, we don't have any assigned variables. So when we begin backtracking search, this assignment is just going to be the empty assignment with no variables inside of it. But we'll see later this is going to be a recursive function. So backtrack takes as input the assignment and the problem. If the assignment is complete, meaning all of the variables have been assigned, we just return that assignment. That, of course, won't be true initially, because we start with an empty assignment. But over time, we might add things to that assignment. So if ever the assignment actually is complete, then we're done. Then just go ahead and return that assignment. But otherwise, there is some work to be done. So what we'll need to do is select an unassigned variable for this particular problem. So we need to take the problem, look at the variables that have already been assigned, and pick a variable that has not yet been assigned. And I'll go ahead and take that variable. And then I need to consider all of the values in that variable's domain. So we'll go ahead and call this domain values function. We'll talk a little more about that later, that takes a variable and just gives me back an ordered list of all of the values in its domain. So I've taken a random unselected variable. I'm going to loop over all of the possible values. And the idea is, let me just try all of these values as possible values for the variable. So if the value is consistent with the assignment so far, it doesn't violate any of the constraints, well then let's go ahead and add variable equals value to the assignment because it's so far consistent. And now let's recursively call backtrack to try and make the rest of the assignments also consistent. So I'll go ahead and call backtrack on this new assignment that I've added the variable equals value to. And now I recursively call backtrack and see what the result is. And if the result isn't a failure, well then let me just return that result. And otherwise, what else could happen? Well, if it turns out the result was a failure, well then that means this value was probably a bad choice for this particular variable because when I assigned this variable equal to that value, eventually down the road I ran into a situation where I violated constraints. There was nothing more I could do. So now I'll remove variable equals value from the assignment, effectively backtracking to say, all right, that value didn't work. Let's try another value instead. And then at the very end, if we were never able to return a complete assignment, we'll just go ahead and return failure because that means that none of the values worked for this particular variable. This now is the idea for backtracking search, to take each of the variables, try values for them, and recursively try backtracking search, see if we can make progress. And if ever we run into a dead end, we run into a situation where there is no possible value we can choose that satisfies the constraints, we return failure. And that propagates up, and eventually we make a different choice by going back and trying something else instead. So let's put this algorithm into practice. Let's actually try and use backtracking search to solve this problem now, where I need to figure out how to assign each of these courses to an exam slot on Monday or Tuesday or Wednesday in such a way that it satisfies these constraints, that each of these edges mean those two classes cannot have an exam on the same day. So I can start by just starting at a node. It doesn't really matter which I start with, but in this case, I'll just start with A. And I'll ask the question, all right, let me loop over the values in the domain. And maybe in this case, I'll just start with Monday and say, all right, let's go ahead and assign A to Monday. We'll just go and order Monday, Tuesday, Wednesday. And now let's consider node B. So I've made an assignment to A, so I recursively call backtrack with this new part of the assignment. And now I'm looking to pick another unassigned variable like B. And I'll say, all right, maybe I'll start with Monday, because that's the very first value in B's domain. And I ask, all right, does Monday violate any constraints? And it turns out, yes, it does. It violates this constraint here between A and B, because A and B are now both on Monday, and that doesn't work, because B can't be on the same day as A. So that doesn't work. So we might instead try Tuesday, try the next value in B's domain. And is that consistent with the assignment so far? Well, yeah, B, Tuesday, A, Monday, that is consistent so far, because they're not on the same day. So that's good. Now we can recursively call backtrack. Try again. Pick another unassigned variable, something like D, and say, all right, let's go through its possible values. Is Monday consistent with this assignment? Well, yes, it is. B and D are on different days, Monday versus Tuesday. And A and B are also on different days, Monday versus Tuesday. So that's fine so far, too. We'll go ahead and try again. Maybe we'll go to this variable here, E. Say, can we make that consistent? Let's go through the possible values. We've recursively called backtrack. We might start with Monday and say, all right, that's not consistent, because D and E now have exams on the same day. So we might try Tuesday instead, going to the next one. Ask, is that consistent? Well, no, it's not, because B and E, those have exams on the same day. And so we try, all right, is Wednesday consistent? And in turn, it's like, all right, yes, it is. Wednesday is consistent, because D and E now have exams on different days. B and E now have exams on different days. All seems to be well so far. I recursively call backtrack, select another unassigned variable, we'll say maybe choose C this time, and say, all right, let's try the values that C could take on. Let's start with Monday. And it turns out that's not consistent, because now A and C both have exams on the same day. So I try Tuesday and say, that's not consistent either, because B and C now have exams on the same day. And then I say, all right, let's go ahead and try Wednesday. But that's not consistent either, because C and E each have exams on the same day too. So now we've gone through all the possible values for C, Monday, Tuesday, and Wednesday. And none of them are consistent. There is no way we can have a consistent assignment. Backtrack, in this case, will return a failure. And so then we'd say, all right, we have to backtrack back to here. Well, now for E, we've tried all of Monday, Tuesday, and Wednesday. And none of those work, because Wednesday, which seemed to work, turned out to be a failure. So that means there's no possible way we can assign E. So that's a failure too. We have to go back up to D, which means that Monday assignment to D, that must be wrong. We must try something else. So we can try, all right, what if instead of Monday, we try Tuesday? Tuesday, it turns out, is not consistent, because B and D now have an exam on the same day. But Wednesday, as it turns out, works. And now we can begin to mix and forward progress again. We go back to E and say, all right, which of these values works? Monday turns out to work by not violating any constraints. Then we go up to C now. Monday doesn't work, because it violates a constraint. Violates two, actually. Tuesday doesn't work, because it violates a constraint as well. But Wednesday does work. Then we can go to the next variable, F, and say, all right, does Monday work? We'll know. It violates a constraint. But Tuesday does work. And then finally, we can look at the last variable, G, recursively calling backtrack one more time. Monday is inconsistent. That violates a constraint. Tuesday also violates a constraint. But Wednesday, that doesn't violate a constraint. And so now at this point, we recursively call backtrack one last time. We now have a satisfactory assignment of all of the variables. And at this point, we can say that we are now done. We have now been able to successfully assign a variable or a value to each one of these variables in such a way that we're not violating any constraints. We're going to go ahead and have classes A and E have their exams on Monday. Classes B and F can have their exams on Tuesday. And classes C, D, and G can have their exams on Wednesday. And there's no violated constraints that might come up there. So that then was a graphical look at how this might work. Let's now take a look at some code we could use to actually try and solve this problem as well. So here I'll go ahead and go into the scheduling directory. We're here now. We'll start by looking at schedule0.py. We're here. I define a list of variables, A, B, C, D, E, F, G. Those are all different classes. Then underneath that, I define my list of constraints. So constraint A and B. That is a constraint because they can't be on the same day. Likewise, A and C, B and C, so on and so forth, enforcing those exact same constraints. And here then is what the backtracking function might look like. First, if the assignment is complete, if I've made an assignment of every variable to a value, go ahead and just return that assignment. Then we'll select an unassigned variable from that assignment. Then for each of the possible values in the domain, Monday, Tuesday, Wednesday, let's go ahead and create a new assignment that assigns the variable to that value. I'll call this consistent function, which I'll show you in a moment, that just checks to make sure this new assignment is consistent. But if it is consistent, we'll go ahead and call backtrack to go ahead and continue trying to run backtracking search. And as long as the result is not none, meaning it wasn't a failure, we can go ahead and return that result. But if we make it through all the values and nothing works, then it is a failure. There's no solution. We go ahead and return none here. What do these functions do? Select unassigned variable is just going to choose a variable not yet assigned. So it's going to loop over all the variables. And if it's not already assigned, we'll go ahead and just return that variable. And what does the consistent function do? Well, the consistent function goes through all the constraints. And if we have a situation where we've assigned both of those values to variables, but they are the same, well, then that is a violation of the constraint, in which case we'll return false. But if nothing is inconsistent, then the assignment is consistent and will return true. And then all the program does is it calls backtrack on an empty assignment, an empty dictionary that has no variable assigned and no values yet, save that inside a solution, and then print out that solution. So by running this now, I can run Python schedule0.py. And what I get as a result of that is an assignment of all these variables to values. And it turns out we assign a to Monday as we would expect, b to Tuesday, c to Wednesday, exactly the same type of thing we were talking about before, an assignment of each of these variables to values that doesn't violate any constraints. And I had to do a fair amount of work in order to implement this idea myself. I had to write the backtrack function that went ahead and went through this process of recursively trying to do this backtracking search. But it turns out the constraint satisfaction problems are so popular that there exist many libraries that already implement this type of idea. Again, as with before, the specific library is not as important as the fact that libraries do exist. This is just one example of a Python constraint library, where now, rather than having to do all the work from scratch inside of schedule1.py, I'm just taking advantage of a library that implements a lot of these ideas already. So here, I create a new problem, add variables to it with particular domains. I add a whole bunch of these individual constraints, where I call addConstraint and pass in a function describing what the constraint is. And the constraint basically says the function that takes two variables, x and y, and makes sure that x is not equal to y, enforcing the idea that these two classes cannot have exams on the same day. And then, for any constraint satisfaction problem, I can call getSolutions to get all the solutions to that problem. And then, for each of those solutions, print out what that solution happens to be. And if I run python schedule1.py, and now see, there are actually a number of different solutions that can be used to solve the problem. There are, in fact, six different solutions, assignments of variables to values that will give me a satisfactory answer to this constraint satisfaction problem. So this then was an implementation of a very basic backtracking search method, where really we just went through each of the variables, picked one that wasn't assigned, tried the possible values the variable could take on. And then, if it worked, if it didn't violate any constraints, then we kept trying other variables. And if ever we hit a dead end, we had to backtrack. But ultimately, we might be able to be a little bit more intelligent about how we do this in order to improve the efficiency of how we solve these sorts of problems. And one thing we might imagine trying to do is going back to this idea of inference, using the knowledge we know to be able to draw conclusions in order to make the rest of the problem solving process a little bit easier. And let's now go back to where we got stuck in this problem the first time. When we were solving this constraint satisfaction problem, we dealt with B. And then we went on to D. And we went ahead and just assigned D to Monday, because that seemed to work with the assignment so far. It didn't violate any constraints. But it turned out that later on that choice turned out to be a bad one, that that choice wasn't consistent with the rest of the values that we could take on here. And the question is, is there anything we could do to avoid getting into a situation like this, avoid trying to go down a path that's ultimately not going to lead anywhere by taking advantage of knowledge that we have initially? And it turns out we do have that kind of knowledge. We can look at just the structure of this graph so far. And we can say that right now C's domain, for example, contains values Monday, Tuesday, and Wednesday. And based on those values, we can say that this graph is not arc consistent. Recall that arc consistency is all about making sure that for every possible value for a particular node, that there is some other value that we are able to choose. And as we can see here, Monday and Tuesday are not going to be possible values that we can choose for C. They're not going to be consistent with a node like B, for example, because B is equal to Tuesday, which means that C cannot be Tuesday. And because A is equal to Monday, C also cannot be Monday. So using that information, by making C arc consistent with A and B, we could remove Monday and Tuesday from C's domain and just leave C with Wednesday, for example. And if we continued to try and enforce arc consistency, we'd see there are some other conclusions we can draw as well. We see that B's only option is Tuesday and C's only option is Wednesday. And so if we want to make E arc consistent, well, E can't be Tuesday, because that wouldn't be arc consistent with B. And E can't be Wednesday, because that wouldn't be arc consistent with C. So we can go ahead and say E and just set that equal to Monday, for example. And then we can begin to do this process again and again, that in order to make D arc consistent with B and E, then D would have to be Wednesday. That's the only possible option. And likewise, we can make the same judgments for F and G as well. And it turns out that without having to do any additional search, just by enforcing arc consistency, we were able to actually figure out what the assignment of all the variables should be without needing to backtrack at all. And the way we did that is by interleaving this search process and the inference step, by this step of trying to enforce arc consistency. And the algorithm to do this is often called just the maintaining arc consistency algorithm, which just enforces arc consistency every time we make a new assignment of a value to an existing variable. So sometimes we can enforce our consistency using that AC3 algorithm at the very beginning of the problem before we even begin searching in order to limit the domain of the variables in order to make it easier to search. But we can also take advantage of the interleaving of enforcing our consistency with search such that every time in the search process we make a new assignment, we go ahead and enforce arc consistency as well to make sure that we're just eliminating possible values from domains whenever possible. And how do we do this? Well, this is really equivalent to just every time we make a new assignment to a variable x. We'll go ahead and call our AC3 algorithm, this algorithm that enforces arc consistency on a constraint satisfaction problem. And we go ahead and call that, starting it with a Q, not of all of the arcs, which we did originally, but just of all of the arcs that we want to make arc consistent with x, this thing that we have just made an assignment to. So all arcs yx, where y is a neighbor of x, something that shares a constraint with x, for example. And by maintaining arc consistency in the backtracking search process, we can ultimately make our search process a little bit more efficient. And so this is the revised version of this backtrack function. Same as before, the changes here are highlighted in yellow. Every time we add a new variable equals value to our assignment, we'll go ahead and run this inference procedure, which might do a number of different things. But one thing it could do is call the maintaining arc consistency algorithm to make sure we're able to enforce arc consistency on the problem. And we might be able to draw new inferences as a result of that process. Get new guarantees of this variable needs to be equal to that value, for example. That might happen one time. It might happen many times. And so long as those inferences are not a failure, as long as they don't lead to a situation where there is no possible way to make forward progress, well, then we can go ahead and add those inferences, those new knowledge, that new pieces of knowledge I know about what variables should be assigned to what values, I can add those to the assignment in order to more quickly make forward progress by taking advantage of information that I can just deduce, information I know based on the rest of the structure of the constraint satisfaction problem. And the only other change I'll need to make now is if it turns out this value doesn't work, well, then down here, I'll go ahead and need to remove not only variable equals value, but also any of those inferences that I made, remove that from the assignment as well. So here, then, we're often able to solve the problem by backtracking less than we might originally have needed to, just by taking advantage of the fact that every time we make a new assignment of one variable to one value, that might reduce the domains of other variables as well. And we can use that information to begin to more quickly draw conclusions in order to try and solve the problem more efficiently as well. And it turns out there are other heuristics we can use to try and improve the efficiency of our search process as well. And it really boils down to a couple of these functions that I've talked about, but we haven't really talked about how they're working. And one of them is this function here, select unassigned variable, where we're selecting some variable in the constraint satisfaction problem that has not yet been assigned. So far, I've sort of just been selecting variables randomly, just like picking one variable and one unassigned variable in order to decide, all right, this is the variable that we're going to assign next, and then going from there. But it turns out that by being a little bit intelligent, by following certain heuristics, we might be able to make the search process much more efficient just by choosing very carefully which variable we should explore next. So some of those heuristics include the minimum remaining values, or MRV heuristic, which generally says that if I have a choice between which variable I should select, I should select the variable with the smallest domain, the variable that has the fewest number of remaining values left. With the idea being, if there are only two remaining values left, well, I may as well prune one of them very quickly in order to get to the other, because one of those two has got to be the solution, if a solution does exist. Sometimes minimum remaining values might not give a conclusive result if all the nodes have the same number of remaining values, for example. And in that case, another heuristic that can be helpful to look at is the degree heuristic. The degree of a node is the number of nodes that are attached to that node, the number of nodes that are constrained by that particular node. And if you imagine which variable should I choose, should I choose a variable that has a high degree that is connected to a lot of different things, or a variable with a low degree that is not connected to a lot of different things, well, it can often make sense to choose the variable that has the highest degree that is connected to the most other nodes as the thing you would search first. Why is that the case? Well, it's because by choosing a variable with a high degree, that is immediately going to constrain the rest of the variables more, and it's more likely to be able to eliminate large sections of the state space that you don't need to search through at all. So what could this actually look like? Let's go back to this search problem here. In this particular case, I've made an assignment here. I've made an assignment here. And the question is, what should I look at next? And according to the minimum remaining values heuristic, what I should choose is the variable that has the fewest remaining possible values. And in this case, that's this node here, node C, that only has one variable left in this domain, which in this case is Wednesday, which is a very reasonable choice of a next assignment to make, because I know it's the only option, for example. I know that the only possible option for C is Wednesday, so I may as well make that assignment and then potentially explore the rest of the space after that. But meanwhile, at the very start of the problem, when I didn't have any knowledge of what nodes should have what values yet, I still had to pick what node should be the first one that I try and assign a value to. And I arbitrarily just chose the one at the top, node A originally. But we can be more intelligent about that. We can look at this particular graph. All of them have domains of the same size, domain of size 3. So minimum remaining values doesn't really help us there. But we might notice that node E has the highest degree. It is connected to the most things. And so perhaps it makes sense to begin our search, rather than starting at node A at the very top, start with the node with the highest degree. Start by searching from node E, because from there, that's going to much more easily allow us to enforce the constraints that are nearby, eliminating large portions of the search space that I might not need to search through. And in fact, by starting with E, we can immediately then assign other variables. And following that, we can actually assign the rest of the variables without needing to do any backtracking at all, even if I'm not using this inference procedure. Just by starting with a node that has a high degree, that is going to very quickly restrict the possible values that other nodes can take on. So that then is how we can go about selecting an unassigned variable in a particular order. Rather than randomly picking a variable, if we're a little bit intelligent about how we choose it, we can make our search process much, much more efficient by making sure we don't have to search through portions of the search space that ultimately aren't going to matter. The other variable we haven't really talked about, the other function here, is this domain values function. This domain values function that takes a variable and gives me back a sequence of all of the values inside of that variable's domain. The naive way to approach it is what we did before, which is just go in order, go Monday, then Tuesday, then Wednesday. But the problem is that going in that order might not be the most efficient order to search in, that sometimes it might be more efficient to choose values that are likely to be solutions first and then go to other values. Now, how do you assess whether a value is likelier to lead to a solution or less likely to lead to a solution? Well, one thing you can take a look at is how many constraints get added, how many things get removed from domains as you make this new assignment of a variable to this particular value. And the heuristic we can use here is the least constraining value heuristic, which is the idea that we should return variables in order based on the number of choices that are ruled out for neighboring values. And I want to start with the least constraining value, the value that rules out the fewest possible options. And the idea there is that if all I care about doing is finding a solution, if I start with a value that rules out a lot of other choices, I'm ruling out a lot of possibilities that maybe is going to make it less likely that this particular choice leads to a solution. Whereas on the other hand, if I have a variable and I start by choosing a value that doesn't rule out very much, well, then I still have a lot of space where there might be a solution that I could ultimately find. And this might seem a little bit counterintuitive and a little bit at odds with what we were talking about before, where I said, when you're picking a variable, you should pick the variable that is going to have the fewest possible values remaining. But here, I want to pick the value for the variable that is the least constraining. But the general idea is that when I am picking a variable, I would like to prune large portions of the search space by just choosing a variable that is going to allow me to quickly eliminate possible options. Whereas here, within a particular variable, as I'm considering values that that variable could take on, I would like to just find a solution. And so what I want to do is ultimately choose a value that still leaves open the possibility of me finding a solution to be as likely as possible. By not ruling out many options, I leave open the possibility that I can still find a solution without needing to go back later and backtrack. So an example of that might be in this particular situation here, if I'm trying to choose a variable for a value for node C here, that C is equal to either Tuesday or Wednesday. We know it can't be Monday because it conflicts with this domain here, where we already know that A is Monday, so C must be Tuesday or Wednesday. And the question is, should I try Tuesday first, or should I try Wednesday first? And if I try Tuesday, what gets ruled out? Well, one option gets ruled out here, a second option gets ruled out here, and a third option gets ruled out here. So choosing Tuesday would rule out three possible options. And what about choosing Wednesday? Well, choosing Wednesday would rule out one option here, and it would rule out one option there. And so I have two choices. I can choose Tuesday that rules out three options, or Wednesday that rules out two options. And according to the least constraining value heuristic, what I should probably do is go ahead and choose Wednesday, the one that rules out the fewest number of possible options, leaving open as many chances as possible for me to eventually find the solution inside of the state space. And ultimately, if you continue this process, we will find the solution, an assignment of variables, two values, that allows us to give each of these exams, each of these classes, an exam date that doesn't conflict with anyone that happens to be enrolled in two classes at the same time. So the big takeaway now with all of this is that there are a number of different ways we can formulate a problem. The ways we've looked at today are we can formulate a problem as a local search problem, a problem where we're looking at a current node and moving to a neighbor based on whether that neighbor is better or worse than the current node that we are looking at. We looked at formulating problems as linear programs, where just by putting things in terms of equations and constraints, we're able to solve problems a little bit more efficiently. And we saw formulating a problem as a constraint satisfaction problem, creating this graph of all of the constraints that connect two variables that have some constraint between them, and using that information to be able to figure out what the solution should be. And so the takeaway of all of this now is that if we have some problem in artificial intelligence that we would like to use AI to be able to solve them, whether that's trying to figure out where hospitals should be or trying to solve the traveling salesman problem, trying to optimize productions and costs and whatnot, or trying to figure out how to satisfy certain constraints, whether that's in a Sudoku puzzle, or whether that's in trying to figure out how to schedule exams for a university, or any number of a wide variety of types of problems, if we can formulate that problem as one of these sorts of problems, then we can use these known algorithms, these algorithms for enforcing art consistency and backtracking search, these hill climbing and simulated annealing algorithms, these simplex algorithms and interior point algorithms that can be used to solve linear programs, that we can use those techniques to begin to solve a whole wide variety of problems all in this world of optimization inside of artificial intelligence. This was an introduction to artificial intelligence with Python for today. We will see you next time. [" All right. Welcome back, everyone, to an introduction to artificial intelligence with Python. Now, so far in this class, we've used AI to solve a number of different problems, giving AI instructions for how to search for a solution, or how to satisfy certain constraints in order to find its way from some input point to some output point in order to solve some sort of problem. Today, we're going to turn to the world of learning, in particular the idea of machine learning, which generally refers to the idea where we are not going to give the computer explicit instructions for how to perform a task, but rather we are going to give the computer access to information in the form of data, or patterns that it can learn from, and let the computer try and figure out what those patterns are, try and understand that data to be able to perform a task on its own. Now, machine learning comes in a number of different forms, and it's a very wide field. So today, we'll explore some of the foundational algorithms and ideas that are behind a lot of the different areas within machine learning. And one of the most popular is the idea of supervised machine learning, or just supervised learning. And supervised learning is a particular type of task. It refers to the task where we give the computer access to a data set, where that data set consists of inputoutput pairs. And what we would like the computer to do is we would like our AI to be able to figure out some function that maps inputs to outputs. So we have a whole bunch of data that generally consists of some kind of input, some evidence, some information that the computer will have access to. And we would like the computer, based on that input information, to predict what some output is going to be. And we'll give it some data so that the computer can train its model on and begin to understand how it is that this information works and how it is that the inputs and outputs relate to each other. But ultimately, we hope that our computer will be able to figure out some function that, given those inputs, is able to get those outputs. There are a couple of different tasks within supervised learning. The one we'll focus on and start with is known as classification. And classification is the problem where, if I give you a whole bunch of inputs, you need to figure out some way to map those inputs into discrete categories, where you can decide what those categories are, and it's the job of the computer to predict what those categories are going to be. So that might be, for example, I give you information about a bank note, like a US dollar, and I'm asking you to predict for me, does it belong to the category of authentic bank notes, or does it belong to the category of counterfeit bank notes? You need to categorize the input, and we want to train the computer to figure out some function to be able to do that calculation. Another example might be the case of weather, someone we've talked about a little bit so far in this class, where we would like to predict on a given day, is it going to rain on that day? Is it going to be cloudy on that day? And before we've seen how we could do this, if we really give the computer all the exact probabilities for if these are the conditions, what's the probability of rain? Oftentimes, we don't have access to that information, though. But what we do have access to is a whole bunch of data. So if we wanted to be able to predict something like, is it going to rain or is it not going to rain, we would give the computer historical information about days when it was raining and days when it was not raining and ask the computer to look for patterns in that data. So what might that data look like? Well, we could structure that data in a table like this. This might be what our table looks like, where for any particular day, going back, we have information about that day's humidity, that day's air pressure, and then importantly, we have a label, something where the human has said that on this particular day, it was raining or it was not raining. So you could fill in this table with a whole bunch of data. And what makes this what we would call a supervised learning exercise is that a human has gone in and labeled each of these data points, said that on this day, when these were the values for the humidity and pressure, that day was a rainy day and this day was a not rainy day. And what we would like the computer to be able to do then is to be able to figure out, given these inputs, given the humidity and the pressure, can the computer predict what label should be associated with that day? Does that day look more like it's going to be a day that rains or does it look more like a day when it's not going to rain? Put a little bit more mathematically, you can think of this as a function that takes two inputs, the inputs being the data points that our computer will have access to, things like humidity and pressure. So we could write a function f that takes as input both humidity and pressure. And then the output is going to be what category we would ascribe to these particular input points, what label we would associate with that input. So we've seen a couple of example data points here, where given this value for humidity and this value for pressure, we predict, is it going to rain or is it not going to rain? And that's information that we just gathered from the world. We measured on various different days what the humidity and pressure were. We observed whether or not we saw rain or no rain on that particular day. And this function f is what we would like to approximate. Now, the computer and we humans don't really know exactly how this function f works. It's probably quite a complex function. So what we're going to do instead is attempt to estimate it. We would like to come up with a hypothesis function. h, which is going to try to approximate what f does. We want to come up with some function h that will also take the same inputs and will also produce an output, rain or no rain. And ideally, we'd like these two functions to agree as much as possible. So the goal then of the supervised learning classification tasks is going to be to figure out, what does that function h look like? How can we begin to estimate, given all of this information, all of this data, what category or what label should be assigned to a particular data point? So where could you begin doing this? Well, a reasonable thing to do, especially in this situation, I have two numerical values, is I could try to plot this on a graph that has two axes, an xaxis and a yaxis. And in this case, we're just going to be using two numerical values as input. But these same types of ideas scale as you add more and more inputs as well. We'll be plotting things in two dimensions. But as we soon see, you could add more inputs and just imagine things in multiple dimensions. And while we humans have trouble conceptualizing anything really beyond three dimensions, at least visually, a computer has no problem with trying to imagine things in many, many more dimensions, that for a computer, each dimension is just some separate number that it is keeping track of. So it wouldn't be unreasonable for a computer to think in 10 dimensions or 100 dimensions to be able to try to solve a problem. But for now, we've got two inputs. So we'll graph things along two axes, an xaxis, which will here represent humidity, and a yaxis, which here represents pressure. And what we might do is say, let's take all of the days that were raining and just try to plot them on this graph and see where they fall on this graph. And here might be all of the rainy days, where each rainy day is one of these blue dots here that corresponds to a particular value for humidity and a particular value for pressure. And then I might do the same thing with the days that were not rainy. So take all the not rainy days, figure out what their values were for each of these two inputs, and go ahead and plot them on this graph as well. And I've here plotted them in red. So blue here stands for a rainy day. Red here stands for a not rainy day. And this then is the input that my computer has access to all of this input. And what I would like the computer to be able to do is to train a model such that if I'm ever presented with a new input that doesn't have a label associated with it, something like this white dot here, I would like to predict, given those values for each of the two inputs, should we classify it as a blue dot, a rainy day, or should we classify it as a red dot, a not rainy day? And if you're just looking at this picture graphically, trying to say, all right, this white dot, does it look like it belongs to the blue category, or does it look like it belongs to the red category, I think most people would agree that it probably belongs to the blue category. And why is that? Well, it looks like it's close to other blue dots. And that's not a very formal notion, but it's a notion that we'll formalize in just a moment. That because it seems to be close to this blue dot here, nothing else is closer to it, then we might say that it should be categorized as blue. It should fall into that category of, I think that day is going to be a rainy day based on that input. Might not be totally accurate, but it's a pretty good guess. And this type of algorithm is actually a very popular and common machine learning algorithm known as nearest neighbor classification. It's an algorithm for solving these classificationtype problems. And in nearest neighbor classification, it's going to perform this algorithm. What it will do is, given an input, it will choose the class of the nearest data point to that input. By class, we just here mean category, like rain or no rain, counterfeit or not counterfeit. And we choose the category or the class based on the nearest data point. So given all that data, we just looked at, is the nearest data point a blue point or is it a red point? And depending on the answer to that question, we were able to make some sort of judgment. We were able to say something like, we think it's going to be blue or we think it's going to be red. So likewise, we could apply this to other data points that we encounter as well. If suddenly this data point comes about, well, its nearest data is red. So we would go ahead and classify this as a red point, not raining. Things get a little bit trickier, though, when you look at a point like this white point over here and you ask the same sort of question. Should it belong to the category of blue points, the rainy days? Or should it belong to the category of red points, the not rainy days? Now, nearest neighbor classification would say the way you solve this problem is look at which point is nearest to that point. You look at this nearest point and say it's red. It's a not rainy day. And therefore, according to nearest neighbor classification, I would say that this unlabeled point, well, that should also be red. It should also be classified as a not rainy day. But your intuition might think that that's a reasonable judgment to make, that it's the closest thing is a not rainy day. So may as well guess that it's a not rainy day. But it's probably also reasonable to look at the bigger picture of things to say, yes, it is true that the nearest point to it was a red point. But it's surrounded by a whole bunch of other blue points. So looking at the bigger picture, there's potentially an argument to be made that this point should actually be blue. And with only this data, we actually don't know for sure. We are given some input, something we're trying to predict. And we don't necessarily know what the output is going to be. So in this case, which one is correct is difficult to say. But oftentimes, considering more than just a single neighbor, considering multiple neighbors can sometimes give us a better result. And so there's a variant on the nearest neighbor classification algorithm that is known as the K nearest neighbor classification algorithm, where K is some parameter, some number that we choose, for how many neighbors are we going to look at. So one nearest neighbor classification is what we saw before. Just pick the one nearest neighbor and use that category. But with K nearest neighbor classification, where K might be 3, or 5, or 7, to say look at the 3, or 5, or 7 closest neighbors, closest data points to that point, works a little bit differently. This algorithm, we'll give it an input. Choose the most common class out of the K nearest data points to that input. So if we look at the five nearest points, and three of them say it's raining, and two of them say it's not raining, we'll go with the three instead of the two, because each one effectively gets one vote towards what they believe the category ought to be. And ultimately, you choose the category that has the most votes as a consequence of that. So K nearest neighbor classification, fairly straightforward one to understand intuitively. You just look at the neighbors and figure out what the answer might be. And it turns out this can work very, very well for solving a whole variety of different types of classification problems. But not every model is going to work under every situation. And so one of the things we'll take a look at today, especially in the context of supervised machine learning, is that there are a number of different approaches to machine learning, a number of different algorithms that we can apply, all solving the same type of problem, all solving some kind of classification problem where we want to take inputs and organize it into different categories. And no one algorithm is necessarily always going to be better than some other algorithm. They each have their tradeoffs. And maybe depending on the data, one type of algorithm is going to be better suited to trying to model that information than some other algorithm. And so this is what a lot of machine learning research ends up being about, that when you're trying to apply machine learning techniques, you're often looking not just at one particular algorithm, but trying multiple different algorithms, trying to see what is going to give you the best results for trying to predict some function that maps inputs to outputs. So what then are the drawbacks of K nearest neighbor classification? Well, there are a couple. One might be that in a naive approach, at least, it could be fairly slow to have to go through and measure the distance between a point and every single one of these points that exist here. Now, there are ways of trying to get around that. There are data structures that can help to make it more quickly to be able to find these neighbors. There are also techniques you can use to try and prune some of this data, remove some of the data points so that you're only left with the relevant data points just to make it a little bit easier. But ultimately, what we might like to do is come up with another way of trying to do this classification. And one way of trying to do the classification was looking at what are the neighboring points. But another way might be to try to look at all of the data and see if we can come up with some decision boundary, some boundary that will separate the rainy days from the not rainy days. And in the case of two dimensions, we can do that by drawing a line, for example. So what we might want to try to do is just find some line, find some separator that divides the rainy days, the blue points over here, from the not rainy days, the red points over there. We're now trying a different approach in contrast with the nearest neighbor approach, which just looked at local data around the input data point that we cared about. Now what we're doing is trying to use a technique known as linear regression to find some sort of line that will separate the two halves from each other. Now sometimes it'll actually be possible to come up with some line that perfectly separates all the rainy days from the not rainy days. Realistically, though, this is probably cleaner than many data sets will actually be. Oftentimes, data is messier. There are outliers. There's random noise that happens inside of a particular system. And what we'd like to do is still be able to figure out what a line might look like. So in practice, the data will not always be linearly separable. Or linearly separable refers to some data set where I could draw a line just to separate the two halves of it perfectly. Instead, you might have a situation like this, where there are some rainy points that are on this side of the line and some not rainy points that are on that side of the line. And there may not be a line that perfectly separates what path of the inputs from the other half, that perfectly separates all the rainy days from the not rainy days. But we can still say that this line does a pretty good job. And we'll try to formalize a little bit later what we mean when we say something like this line does a pretty good job of trying to make that prediction. But for now, let's just say we're looking for a line that does as good of a job as we can at trying to separate one category of things from another category of things. So let's now try to formalize this a little bit more mathematically. We want to come up with some sort of function, some way we can define this line. And our inputs are things like humidity and pressure in this case. So our inputs we might call x1 is going to represent humidity, and x2 is going to represent pressure. These are inputs that we are going to provide to our machine learning algorithm. And given those inputs, we would like for our model to be able to predict some sort of output. And we are going to predict that using our hypothesis function, which we called h. Our hypothesis function is going to take as input x1 and x2, humidity and pressure in this case. And you can imagine if we didn't just have two inputs, we had three or four or five inputs or more, we could have this hypothesis function take all of those as input. And we'll see examples of that a little bit later as well. And now the question is, what does this hypothesis function do? Well, it really just needs to measure, is this data point on one side of the boundary, or is it on the other side of the boundary? And how do we formalize that boundary? Well, the boundary is generally going to be a linear combination of these input variables, at least in this particular case. So what we're trying to do when we say linear combination is take each of these inputs and multiply them by some number that we're going to have to figure out. We'll generally call that number a weight for how important should these variables be in trying to determine the answer. So we'll weight each of these variables with some weight, and we might add a constant to it just to try and make the function a little bit different. And the result, we just need to compare. Is it greater than 0, or is it less than 0 to say, does it belong on one side of the line or the other side of the line? So what that mathematical expression might look like is this. We would take each of my variables, x1 and x2, multiply them by some weight. I don't yet know what that weight is, but it's going to be some number, weight 1 and weight 2. And maybe we just want to add some other weight 0 to it, because the function might require us to shift the entire value up or down by a certain amount. And then we just compare. If we do all this math, is it greater than or equal to 0? If so, we might categorize that data point as a rainy day. And otherwise, we might say, no rain. So the key here, then, is that this expression is how we are going to calculate whether it's a rainy day or not. We're going to do a bunch of math where we take each of the variables, multiply them by a weight, maybe add an extra weight to it, see if the result is greater than or equal to 0. And using that result of that expression, we're able to determine whether it's raining or not raining. This expression here is in this case going to refer to just some line. If you were to plot that graphically, it would just be some line. And what the line actually looks like depends upon these weights. x1 and x2 are the inputs, but these weights are really what determine the shape of that line, the slope of that line, and what that line actually looks like. So we then would like to figure out what these weights should be. We can choose whatever weights we want, but we want to choose weights in such a way that if you pass in a rainy day's humidity and pressure, then you end up with a result that is greater than or equal to 0. And we would like it such that if we passed into our hypothesis function a not rainy day's inputs, then the output that we get should be not raining. So before we get there, let's try and formalize this a little bit more mathematically just to get a sense for how it is that you'll often see this if you ever go further into supervised machine learning and explore this idea. One thing is that generally for these categories, we'll sometimes just use the names of the categories like rain and not rain. Often mathematically, if we're trying to do comparisons between these things, it's easier just to deal in the world of numbers. So we could just say 1 and 0, 1 for raining, 0 for not raining. So we do all this math. And if the result is greater than or equal to 0, we'll go ahead and say our hypothesis function outputs 1, meaning raining. And otherwise, it outputs 0, meaning not raining. And oftentimes, this type of expression will instead express using vector mathematics. And all a vector is, if you're not familiar with the term, is it refers to a sequence of numerical values. You could represent that in Python using a list of numerical values or a tuple with numerical values. And here, we have a couple of sequences of numerical values. One of our vectors, one of our sequences of numerical values, are all of these individual weights, w0, w1, and w2. So we could construct what we'll call a weight vector, and we'll see why this is useful in a moment, called w, generally represented using a boldface w, that is just a sequence of these three weights, weight 0, weight 1, and weight 2. And to be able to calculate, based on those weights, whether we think a day is raining or not raining, we're going to multiply each of those weights by one of our input variables. That w2, this weight, is going to be multiplied by input variable x2. w1 is going to be multiplied by input variable x1. And w0, well, it's not being multiplied by anything. But to make sure the vectors are the same length, and we'll see why that's useful in just a second, we'll just go ahead and say w0 is being multiplied by 1. Because you can multiply by something by 1, and you end up getting the exact same number. So in addition to the weight vector w, we'll also have an input vector that we'll call x that has three values, 1, again, because we're just multiplying w0 by 1 eventually, and then x1 and x2. So here, then, we've represented two distinct vectors, a vector of weights that we need to somehow learn. The goal of our machine learning algorithm is to learn what this weight vector is supposed to be. We could choose any arbitrary set of numbers, and it would produce a function that tries to predict rain or not rain, but it probably wouldn't be very good. What we want to do is come up with a good choice of these weights so that we're able to do the accurate predictions. And then this input vector represents a particular input to the function, a data point for which we would like to estimate, is that day a rainy day, or is that day a not rainy day? And so that's going to vary just depending on what input is provided to our function, what it is that we are trying to estimate. And then to do the calculation, we want to calculate this expression here, and it turns out that expression is what we would call the dot product of these two vectors. The dot product of two vectors just means taking each of the terms in the vectors and multiplying them together, w0 multiply it by 1, w1 multiply it by x1, w2 multiply it by x2, and that's why these vectors need to be the same length. And then we just add all of the results together. So the dot product of w and x, our weight vector and our input vector, that's just going to be w0 times 1, or just w0, plus w1 times x1, multiplying these two terms together, plus w2 times x2, multiplying those terms together. So we have our weight vector, which we need to figure out. We need our machine learning algorithm to figure out what the weights should be. We have the input vector representing the data point that we're trying to predict a category for, predict a label for. And we're able to do that calculation by taking this dot product, which you'll often see represented in vector form. But if you haven't seen vectors before, you can think of it as identical to just this mathematical expression, just doing the multiplication, adding the results together, and then seeing whether the result is greater than or equal to 0 or not. This expression here is identical to the expression that we're calculating to see whether or not that answer is greater than or equal to 0 in this case. And so for that reason, you'll often see the hypothesis function written as something like this, a simpler representation where the hypothesis takes as input some input vector x, some humidity and pressure for some day. And we want to predict an output like rain or no rain or 1 or 0 if we choose to represent things numerically. And the way we do that is by taking the dot product of the weights and our input. If it's greater than or equal to 0, we'll go ahead and say the output is 1. Otherwise, the output is going to be 0. And this hypothesis, we say, is parameterized by the weights. Depending on what weights we choose, we'll end up getting a different hypothesis. If we choose the weights randomly, we're probably not going to get a very good hypothesis function. We'll get a 1 or a 0. But it's probably not accurately going to reflect whether we think a day is going to be rainy or not rainy. But if we choose the weights right, we can often do a pretty good job of trying to estimate whether we think the output of the function should be a 1 or a 0. And so the question, then, is how to figure out what these weights should be, how to be able to tune those parameters. And there are a number of ways you can do that. One of the most common is known as the perceptron learning rule. And we'll see more of this later. But the idea of the perceptron learning rule, and we're not going to get too deep into the mathematics, we'll mostly just introduce it more conceptually, is to say that given some data point that we would like to learn from, some data point that has an input x and an output y, where y is like 1 for rain or 0 for not rain, then we're going to update the weights. And we'll look at the formula in just a moment. But the big picture idea is that we can start with random weights, but then learn from the data. Take the data points one at a time. And for each one of the data points, figure out, all right, what parameters do we need to change inside of the weights in order to better match that input point. And so that is the value of having access to a lot of data in the supervised machine learning algorithm, is that you take each of the data points and maybe look at them multiple times and constantly try and figure out whether you need to shift your weights in order to better create some weight vector that is able to correctly or more accurately try to estimate what the output should be, whether we think it's going to be raining or whether we think it's not going to be raining. So what does that weight update look like? Without going into too much of the mathematics, we're going to update each of the weights to be the result of the original weight plus some additional expression. And to understand this expression, y, well, y is what the actual output is. And hypothesis of x, the input, that's going to be what we thought the input was. And so I can replace this by saying what the actual value was minus what our estimate was. And based on the difference between the actual value and what our estimate was, we might want to change our hypothesis, change the way that we do that estimation. If the actual value and the estimate were the same thing, meaning we were correctly able to predict what category this data point belonged to, well, then actual value minus estimate, that's just going to be 0, which means this whole term on the righthand side goes to be 0, and the weight doesn't change. Weight i, where i is like weight 1 or weight 2 or weight 0, weight i just stays at weight i. And none of the weights change if we were able to correctly predict what category the input belonged to. But if our hypothesis didn't correctly predict what category the input belonged to, well, then maybe then we need to make some changes, adjust the weights so that we're better able to predict this kind of data point in the future. And what is the way we might do that? Well, if the actual value was bigger than the estimate, then, and for now we'll go ahead and assume that these x's are positive values, then if the actual value was bigger than the estimate, well, that means we need to increase the weight in order to make it such that the output is bigger, and therefore we're more likely to get to the right actual value. And so if the actual value is bigger than the estimate, then actual value minus estimate, that'll be a positive number. And so you imagine we're just adding some positive number to the weight just to increase it ever so slightly. And likewise, the inverse case is true, that if the actual value was less than the estimate, the actual value was 0, but we estimated 1, meaning it actually was not raining, but we predicted it was going to be raining. Well, then we want to decrease the value of the weight, because then in that case, we want to try and lower the total value of computing that dot product in order to make it less likely that we would predict that it would actually be raining. So no need to get too deep into the mathematics of that, but the general idea is that every time we encounter some data point, we can adjust these weights accordingly to try and make the weights better line up with the actual data that we have access to. And you can repeat this process with data point after data point until eventually, hopefully, your algorithm converges to some set of weights that do a pretty good job of trying to figure out whether a day is going to be rainy or not raining. And just as a final point about this particular equation, this value alpha here is generally what we'll call the learning rate. It's just some parameter, some number we choose for how quickly we're actually going to be updating these weight values. So that if alpha is bigger, then we're going to update these weight values by a lot. And if alpha is smaller, then we'll update the weight values by less. And you can choose a value of alpha. Depending on the problem, different values might suit the situation better or worse than others. So after all of that, after we've done this training process of take all this data and using this learning rule, look at all the pieces of data and use each piece of data as an indication to us of do the weights stay the same, do we increase the weights, do we decrease the weights, and if so, by how much? What you end up with is effectively a threshold function. And we can look at what the threshold function looks like like this. On the xaxis here, we have the output of that function, taking the weights, taking the dot product of it with the input. And on the yaxis, we have what the output is going to be, 0, which in this case represented not raining, and 1, which in this case represented raining. And the way that our hypothesis function works is it calculates this value. And if it's greater than 0 or greater than some threshold value, then we declare that it's a rainy day. And otherwise, we declare that it's a not rainy day. And this then graphically is what that function looks like, that initially when the value of this dot product is small, it's not raining, it's not raining, it's not raining. But as soon as it crosses that threshold, we suddenly say, OK, now it's raining, now it's raining, now it's raining. And the way to interpret this kind of representation is that anything on this side of the line, that would be the category of data points where we say, yes, it's raining. Anything that falls on this side of the line are the data points where we would say, it's not raining. And again, we want to choose some value for the weights that results in a function that does a pretty good job of trying to do this estimation. But one tricky thing with this type of hard threshold is that it only leaves two possible outcomes. We plug in some data as input. And the output we get is raining or not raining. And there's no room for anywhere in between. And maybe that's what you want. Maybe all you want is given some data point, you would like to be able to classify it into one or two or more of these various different categories. But it might also be the case that you care about knowing how strong that prediction is, for example. So if we go back to this instance here, where we have rainy days on this side of the line, not rainy days on that side of the line, you might imagine that let's look now at these two white data points. This data point here that we would like to predict a label or a category for. And this data point over here that we would also like to predict a label or a category for. It seems likely that you could pretty confidently say that this data point, that should be a rainy day. Seems close to the other rainy days if we're going by the nearest neighbor strategy. It's on this side of the line if we're going by the strategy of just saying, which side of the line does it fall on by figuring out what those weights should be. And if we're using the line strategy of just which side of the line does it fall on, which side of this decision boundary, well, we'd also say that this point here is also a rainy day because it falls on the side of the line that corresponds to rainy days. But it's likely that even in this case, we would know that we don't feel nearly as confident about this data point on the left as compared to this data point on the right. That for this one on the right, we can feel very confident that yes, it's a rainy day. This one, it's pretty close to the line if we're judging just by distance. And so you might be less sure. But our threshold function doesn't allow for a notion of less sure or more sure about something. It's what we would call a hard threshold. It's once you've crossed this line, then immediately we say, yes, this is going to be a rainy day. Anywhere before it, we're going to say it's not a rainy day. And that may not be helpful in a number of cases. One, this is not a particularly easy function to deal with. As you get deeper into the world of machine learning and are trying to do things like taking derivatives of these curves with this type of function makes things challenging. But the other challenge is that we don't really have any notion of gradation between things. We don't have a notion of yes, this is a very strong belief that it's going to be raining as opposed to it's probably more likely than not that it's going to be raining, but maybe not totally sure about that either. So what we can do by taking advantage of a technique known as logistic regression is instead of using this hard threshold type of function, we can use instead a logistic function, something we might call a soft threshold. And that's going to transform this into looking something a little more like this, something that more nicely curves. And as a result, the possible output values are no longer just 0 and 1, 0 for not raining, 1 for raining. But you can actually get any real numbered value between 0 and 1. But if you're way over on this side, then you get a value of 0. OK, it's not going to be raining, and we're pretty sure about that. And if you're over on this side, you get a value of 1. And yes, we're very sure that it's going to be raining. But in between, you could get some real numbered value, where a value like 0.7 might mean we think it's going to rain. It's more probable that it's going to rain than not based on the data. But we're not as confident as some of the other data points might be. So one of the advantages of the soft threshold is that it allows us to have an output that could be some real number that potentially reflects some sort of probability, the likelihood that we think that this particular data point belongs to that particular category. And there are some other nice mathematical properties of that as well. So that then is two different approaches to trying to solve this type of classification problem. One is this nearest neighbor type of approach, where you just take a data point and look at the data points that are nearby to try and estimate what category we think it belongs to. And the other approach is the approach of saying, all right, let's just try and use linear regression, figure out what these weights should be, adjust the weights in order to figure out what line or what decision boundary is going to best separate these two categories. It turns out that another popular approach, a very popular approach if you just have a data set and you want to start trying to do some learning on it, is what we call the support vector machine. And we're not going to go too much into the mathematics of the support vector machine, but we'll at least explore it graphically to see what it is that it looks like. And the idea or the motivation behind the support vector machine is the idea that there are actually a lot of different lines that we could draw, a lot of different decision boundaries that we could draw to separate two groups. So for example, I had the red data points over here and the blue data points over here. One possible line I could draw is a line like this, that this line here would separate the red points from the blue points. And it does so perfectly. All the red points are on one side of the line. All the blue points are on the other side of the line. But this should probably make you a little bit nervous. If you come up with a model and the model comes up with a line that looks like this. And the reason why is that you worry about how well it's going to generalize to other data points that are not necessarily in the data set that we have access to. For example, if there was a point that fell like right here, for example, on the right side of the line, well, then based on that, we might want to guess that it is, in fact, a red point, but it falls on the side of the line where instead we would estimate that it's a blue point instead. And so based on that, this line is probably not a great choice just because it is so close to these various data points. We might instead prefer like a diagonal line that just goes diagonally through the data set like we've seen before. But there too, there's a lot of diagonal lines that we could draw as well. For example, I could draw this diagonal line here, which also successfully separates all the red points from all of the blue points. From the perspective of something like just trying to figure out some setting of weights that allows us to predict the correct output, this line will predict the correct output for this particular set of data every single time because the red points are on one side, the blue points are on the other. But yet again, you should probably be a little nervous because this line is so close to these red points, even though we're able to correctly predict on the input data, if there was a point that fell somewhere in this general area, our algorithm, this model, would say that, yeah, we think it's a blue point, when in actuality, it might belong to the red category instead just because it looks like it's close to the other red points. What we really want to be able to say, given this data, how can you generalize this as best as possible, is to come up with a line like this that seems like the intuitive line to draw. And the reason why it's intuitive is because it seems to be as far apart as possible from the red data and the blue data. So that if we generalize a little bit and assume that maybe we have some points that are different from the input but still slightly further away, we can still say that something on this side probably red, something on that side probably blue, and we can make those judgments that way. And that is what support vector machines are designed to do. They're designed to try and find what we call the maximum margin separator, where the maximum margin separator is just some boundary that maximizes the distance between the groups of points rather than come up with some boundary that's very close to one set or the other, where in the case before, we wouldn't have cared. As long as we're categorizing the input well, that seems all we need to do. The support vector machine will try and find this maximum margin separator, some way of trying to maximize that particular distance. And it does so by finding what we call the support vectors, which are the vectors that are closest to the line, and trying to maximize the distance between the line and those particular points. And it works that way in two dimensions. It also works in higher dimensions, where we're not looking for some line that separates the two data points, but instead looking for what we generally call a hyperplane, some decision boundary, effectively, that separates one set of data from the other set of data. And this ability of support vector machines to work in higher dimensions actually has a number of other applications as well. But one is that it helpfully deals with cases where data may not be linearly separable. So we talked about linear separability before, this idea that you can take data and just draw a line or some linear combination of the inputs that allows us to perfectly separate the two sets from each other. There are some data sets that are not linearly separable. And some were even two. You would not be able to find a good line at all that would try to do that kind of separation. Something like this, for example. Or if you imagine here are the red points and the blue points around it. If you try to find a line that divides the red points from the blue points, it's actually going to be difficult, if not impossible, to do that any line you choose, well, if you draw a line here, then you ignore all of these blue points that should actually be blue and not red. Anywhere else you draw a line, there's going to be a lot of error, a lot of mistakes, a lot of what we'll soon call loss to that line that you draw, a lot of points that you're going to categorize incorrectly. What we really want is to be able to find a better decision boundary that may not be just a straight line through this two dimensional space. And what support vector machines can do is they can begin to operate in higher dimensions and be able to find some other decision boundary, like the circle in this case, that actually is able to separate one of these sets of data from the other set of data a lot better. So oftentimes in data sets where the data is not linearly separable, support vector machines by working in higher dimensions can actually figure out a way to solve that kind of problem effectively. So that then, three different approaches to trying to solve these sorts of problems. We've seen support vector machines. We've seen trying to use linear regression and the perceptron learning rule to be able to figure out how to categorize inputs and outputs. We've seen the nearest neighbor approach. No one necessarily better than any other again. It's going to depend on the data set, the information you have access to. It's going to depend on what the function looks like that you're ultimately trying to predict. And this is where a lot of research and experimentation can be involved in trying to figure out how it is to best perform that kind of estimation. But classification is only one of the tasks that you might encounter in supervised machine learning. Because in classification, what we're trying to predict is some discrete category. We're trying to predict red or blue, rain or not rain, authentic or counterfeit. But sometimes what we want to predict is a real numbered value. And for that, we have a related problem, not classification, but instead known as regression. And regression is the supervised learning problem where we try and learn a function mapping inputs to outputs same as before. But instead of the outputs being discrete categories, things like rain or not rain, in a regression problem, the output values are generally continuous values, some real number that we would like to predict. This happens all the time as well. You might imagine that a company might take this approach if it's trying to figure out, for instance, what the effect of its advertising is. How do advertising dollars spent translate into sales for the company's product, for example? And so they might like to try to predict some function that takes as input the amount of money spent on advertising. And here, we're just going to use one input. But again, you could scale this up to many more inputs as well if you have a lot of different kinds of data you have access to. And the goal is to learn a function that given this amount of spending on advertising, we're going to get this amount in sales. And you might judge, based on having access to a whole bunch of data, like for every past month, here is how much we spent on advertising, and here is what sales were. And we would like to predict some sort of hypothesis function that, again, given the amount spent on advertising, we can predict, in this case, some real number, some number estimate of how much sales we expect that company to do in this month or in this quarter or whatever unit of time we're choosing to measure things in. And so again, the approach to solving this type of problem, we could try using a linear regression type approach where we take this data and we just plot it. On the xaxis, we have advertising dollars spent. On the yaxis, we have sales. And we might just want to try and draw a line that does a pretty good job of trying to estimate this relationship between advertising and sales. And in this case, unlike before, we're not trying to separate the data points into discrete categories. But instead, in this case, we're just trying to find a line that approximates this relationship between advertising and sales so that if we want to figure out what the estimated sales are for a particular advertising budget, you just look it up in this line, figure out for this amount of advertising, we would have this amount of sales and just try and make the estimate that way. And so you can try and come up with a line, again, figuring out how to modify the weights using various different techniques to try and make it so that this line fits as well as possible. So with all of these approaches, then, to trying to solve machine learning style problems, the question becomes, how do we evaluate these approaches? How do we evaluate the various different hypotheses that we could come up with? Because each of these algorithms will give us some sort of hypothesis, some function that maps inputs to outputs, and we want to know, how well does that function work? And you can think of evaluating these hypotheses and trying to get a better hypothesis as kind of like an optimization problem. In an optimization problem, as you recall from before, we were either trying to maximize some objective function by trying to find a global maximum, or we were trying to minimize some cost function by trying to find some global minimum. And in the case of evaluating these hypotheses, one thing we might say is that this cost function, the thing we're trying to minimize, we might be trying to minimize what we would call a loss function. And what a loss function is, is it is a function that is going to estimate for us how poorly our function performs. More formally, it's like a loss of utility by whenever we predict something that is wrong, that is a loss of utility. That's going to add to the output of our loss function. And you could come up with any loss function that you want, just some mathematical way of estimating, given each of these data points, given what the actual output is, and given what our projected output is, our estimate, you could calculate some sort of numerical loss for it. But there are a couple of popular loss functions that are worth discussing, just so that you've seen them before. When it comes to discrete categories, things like rain or not rain, counterfeit or not counterfeit, one approaches the 0, 1 loss function. And the way that works is for each of the data points, our loss function takes as input what the actual output is, like whether it was actually raining or not raining, and takes our prediction into account. Did we predict, given this data point, that it was raining or not raining? And if the actual value equals the prediction, well, then the 0, 1 loss function will just say the loss is 0. There was no loss of utility, because we were able to predict correctly. And otherwise, if the actual value was not the same thing as what we predicted, well, then in that case, our loss is 1. We lost something, lost some utility, because what we predicted was the output of the function, was not what it actually was. And the goal, then, in a situation like this would be to come up with some hypothesis that minimizes the total empirical loss, the total amount that we've lost, if you add up for all these data points what the actual output is and what your hypothesis would have predicted. So in this case, for example, if we go back to classifying days as raining or not raining, and we came up with this decision boundary, how would we evaluate this decision boundary? How much better is it than drawing the line here or drawing the line there? Well, we could take each of the input data points, and each input data point has a label, whether it was raining or whether it was not raining. And we could compare it to the prediction, whether we predicted it would be raining or not raining, and assign it a numerical value as a result. So for example, these points over here, they were all rainy days, and we predicted they would be raining, because they fall on the bottom side of the line. So they have a loss of 0, nothing lost from those situations. And likewise, same is true for some of these points over here, where it was not raining and we predicted it would not be raining either. Where we do have loss are points like this point here and that point there, where we predicted that it would not be raining, but in actuality, it's a blue point. It was raining. Or likewise here, we predicted that it would be raining, but in actuality, it's a red point. It was not raining. And so as a result, we miscategorized these data points that we were trying to train on. And as a result, there is some loss here. One loss here, there, here, and there, for a total loss of 4, for example, in this case. And that might be how we would estimate or how we would say that this line is better than a line that goes somewhere else or a line that's further down, because this line might minimize the loss. So there is no way to do better than just these four points of loss if you're just drawing a straight line through our space. So the 0, 1 loss function checks. Did we get it right? Did we get it wrong? If we got it right, the loss is 0, nothing lost. If we got it wrong, then our loss function for that data point says 1. And we add up all of those losses across all of our data points to get some sort of empirical loss, how much we have lost across all of these original data points that our algorithm had access to. There are other forms of loss as well that work especially well when we deal with more real valued cases, cases like the mapping between advertising budget and amount that we do in sales, for example. Because in that case, you care not just that you get the number exactly right, but you care how close you were to the actual value. If the actual value is you did like $2,800 in sales and you predicted that you would do $2,900 in sales, maybe that's pretty good. That's much better than if you had predicted you'd do $1,000 in sales, for example. And so we would like our loss function to be able to take that into account as well, take into account not just whether the actual value and the expected value are exactly the same, but also take into account how far apart they were. And so for that one approach is what we call L1 loss. L1 loss doesn't just look at whether actual and predicted are equal to each other, but we take the absolute value of the actual value minus the predicted value. In other words, we just ask how far apart were the actual and predicted values, and we sum that up across all of the data points to be able to get what our answer ultimately is. So what might this actually look like for our data set? Well, if we go back to this representation where we had advertising along the xaxis, sales along the yaxis, our line was our prediction, our estimate for any given amount of advertising, what we predicted sales was going to be. And our L1 loss is just how far apart vertically along the sales axis our prediction was from each of the data points. So we could figure out exactly how far apart our prediction was from each of the data points and figure out as a result of that what our loss is overall for this particular hypothesis just by adding up all of these various different individual losses for each of these data points. And our goal then is to try and minimize that loss, to try and come up with some line that minimizes what the utility loss is by judging how far away our estimate amount of sales is from the actual amount of sales. And turns out there are other loss functions as well. One that's quite popular is the L2 loss. The L2 loss, instead of just using the absolute value, like how far away the actual value is from the predicted value, it uses the square of actual minus predicted. So how far apart are the actual and predicted value? And it squares that value, effectively penalizing much more harshly anything that is a worse prediction. So you imagine if you have two data points that you predict as being one value away from their actual value, as opposed to one data point that you predict as being two away from its actual value, the L2 loss function will more harshly penalize that one that is two away, because it's going to square, however, much the differences between the actual value and the predicted value. And depending on the situation, you might want to choose a loss function depending on what you care about minimizing. If you really care about minimizing the error on more outlier cases, then you might want to consider something like this. But if you've got a lot of outliers, and you don't necessarily care about modeling them, then maybe an L1 loss function is preferable. But there are tradeoffs here that you need to decide, based on a particular set of data. But what you do run the risk of with any of these loss functions, with anything that we're trying to do, is a problem known as overfitting. And overfitting is a big problem that you can encounter in machine learning, which happens anytime a model fits too closely with a data set, and as a result, fails to generalize. We would like our model to be able to accurately predict data and inputs and output pairs for the data that we have access to. But the reason we wanted to do so is because we want our model to generalize well to data that we haven't seen before. I would like to take data from the past year of whether it was raining or not raining, and use that data to generalize it towards the future. Say, in the future, is it going to be raining or not raining? Or if I have a whole bunch of data on what counterfeit and not counterfeit US dollar bills look like in the past when people have encountered them, I'd like to train a computer to be able to, in the future, generalize to other dollar bills that I might see as well. And the problem with overfitting is that if you try and tie yourself too closely to the data set that you're training your model on, you can end up not generalizing very well. So what does this look like? Well, we might imagine the rainy day and not rainy day example again from here, where the blue points indicate rainy days and the red points indicate not rainy days. And we decided that we felt pretty comfortable with drawing a line like this as the decision boundary between rainy days and not rainy days. So we can pretty comfortably say that points on this side more likely to be rainy days, points on that side more likely to be not rainy days. But the loss, the empirical loss, isn't zero in this particular case because we didn't categorize everything perfectly. There was this one outlier, this one day that it wasn't raining, but yet our model still predicts that it is raining. But that doesn't necessarily mean our model is bad. It just means the model isn't 100% accurate. If you really wanted to try and find a hypothesis that resulted in minimizing the loss, you could come up with a different decision boundary. It wouldn't be a line, but it would look something like this. This decision boundary does separate all of the red points from all of the blue points because the red points fall on this side of this decision boundary, the blue points fall on the other side of the decision boundary. But this, we would probably argue, is not as good of a prediction. Even though it seems to be more accurate based on all of the available training data that we have for training this machine learning model, we might say that it's probably not going to generalize well. That if there were other data points like here and there, we might still want to consider those to be rainy days because we think this was probably just an outlier. So if the only thing you care about is minimizing the loss on the data you have available to you, you run the risk of overfitting. And this can happen in the classification case. It can also happen in the regression case, that here we predicted what we thought was a pretty good line relating advertising to sales, trying to predict what sales were going to be for a given amount of advertising. But I could come up with a line that does a better job of predicting the training data, and it would be something that looks like this, just connecting all of the various different data points. And now there is no loss at all. Now I've perfectly predicted, given any advertising, what sales are. And for all the data available to me, it's going to be accurate. But it's probably not going to generalize very well. I have overfit my model on the training data that is available to me. And so in general, we want to avoid overfitting. We'd like strategies to make sure that we haven't overfit our model to a particular data set. And there are a number of ways that you could try to do this. One way is by examining what it is that we're optimizing for. In an optimization problem, all we do is we say, there is some cost, and I want to minimize that cost. And so far, we've defined that cost function, the cost of a hypothesis, just as being equal to the empirical loss of that hypothesis, like how far away are the actual data points, the outputs, away from what I predicted them to be based on that particular hypothesis. And if all you're trying to do is minimize cost, meaning minimizing the loss in this case, then the result is going to be that you might overfit, that to minimize cost, you're going to try and find a way to perfectly match all the input data. And that might happen as a result of overfitting on that particular input data. So in order to address this, you could add something to the cost function. What counts as cost will not just loss, but also some measure of the complexity of the hypothesis. The word the complexity of the hypothesis is something that you would need to define for how complicated does our line look. This is sort of an Occam's razorstyle approach where we want to give preference to a simpler decision boundary, like a straight line, for example, some simpler curve, as opposed to something far more complex that might represent the training data better but might not generalize as well. We'll generally say that a simpler solution is probably the better solution and probably the one that is more likely to generalize well to other inputs. So we measure what the loss is, but we also measure the complexity. And now that all gets taken into account when we consider the overall cost, that yes, something might have less loss if it better predicts the training data, but if it's much more complex, it still might not be the best option that we have. And we need to come up with some balance between loss and complexity. And for that reason, you'll often see this represented as multiplying the complexity by some parameter that we have to choose, parameter lambda in this case, where we're saying if lambda is a greater value, then we really want to penalize more complex hypotheses. Whereas if lambda is smaller, we're going to penalize more complex hypotheses a little bit, and it's up to the machine learning programmer to decide where they want to set that value of lambda for how much do I want to penalize a more complex hypothesis that might fit the data a little better. And again, there's no one right answer to a lot of these things, but depending on the data set, depending on the data you have available to you and the problem you're trying to solve, your choice of these parameters may vary, and you may need to experiment a little bit to figure out what the right choice of that is ultimately going to be. This process, then, of considering not only loss, but also some measure of the complexity is known as regularization. Regularization is the process of penalizing a hypothesis that is more complex in order to favor a simpler hypothesis that is more likely to generalize well, more likely to be able to apply to other situations that are dealing with other input points unlike the ones that we've necessarily seen before. So oftentimes, you'll see us add some regularizing term to what we're trying to minimize in order to avoid this problem of overfitting. Now, another way of making sure we don't overfit is to run some experiments and to see whether or not we are able to generalize our model that we've created to other data sets as well. And it's for that reason that oftentimes when you're doing a machine learning experiment, when you've got some data and you want to try and come up with some function that predicts, given some input, what the output is going to be, you don't necessarily want to do your training on all of the data you have available to you that you could employ a method known as holdout crossvalidation, where in holdout crossvalidation, we split up our data. We split up our data into a training set and a testing set. The training set is the set of data that we're going to use to train our machine learning model. And the testing set is the set of data that we're going to use in order to test to see how well our machine learning model actually performed. So the learning happens on the training set. We figure out what the parameters should be. We figure out what the right model is. And then we see, all right, now that we've trained the model, we'll see how well it does at predicting things inside of the testing set, some set of data that we haven't seen before. And the hope then is that we're going to be able to predict the testing set pretty well if we're able to generalize based on the training data that's available to us. If we've overfit the training data, though, and we're not able to generalize, well, then when we look at the testing set, it's likely going to be the case that we're not going to predict things in the testing set nearly as effectively. So this is one method of crossvalidation, validating to make sure that the work we have done is actually going to generalize to other data sets as well. And there are other statistical techniques we can use as well. One of the downsides of this just hold out crossvalidation is if you say I just split it 5050, I train using 50% of the data and test using the other 50%, or you could choose other percentages as well, is that there is a fair amount of data that I am now not using to train, that I might be able to get a better model as a result, for example. So one approach is known as kfold crossvalidation. In kfold crossvalidation, rather than just divide things into two sets and run one experiment, we divide things into k different sets. So maybe I divide things up into 10 different sets and then run 10 different experiments. So if I split up my data into 10 different sets of data, then what I'll do is each time for each of my 10 experiments, I will hold out one of those sets of data, where I'll say, let me train my model on these nine sets, and then test to see how well it predicts on set number 10. And then pick another set of nine sets to train on, and then test it on the other one that I held out, where each time I train the model on everything minus the one set that I'm holding out, and then test to see how well our model performs on the test that I did hold out. And what you end up getting is 10 different results, 10 different answers for how accurately our model worked. And oftentimes, you could just take the average of those 10 to get an approximation for how well we think our model performs overall. But the key idea is separating the training data from the testing data, because you want to test your model on data that is different from what you trained the model on. Because the training, you want to avoid overfitting. You want to be able to generalize. And the way you test whether you're able to generalize is by looking at some data that you haven't seen before and seeing how well we're actually able to perform. And so if we want to actually implement any of these techniques inside of a programming language like Python, number of ways we could do that. We could write this from scratch on our own, but there are libraries out there that allow us to take advantage of existing implementations of these algorithms, that we can use the same types of algorithms in a lot of different situations. And so there's a library, very popular one, known as Scikitlearn, which allows us in Python to be able to very quickly get set up with a lot of these different machine learning models. This library has already written an algorithm for nearest neighbor classification, for doing perceptron learning, for doing a bunch of other types of inference and supervised learning that we haven't yet talked about. But using it, we can begin to try actually testing how these methods work and how accurately they perform. So let's go ahead and take a look at one approach to trying to solve this type of problem. All right, so I'm first going to pull up banknotes.csv, which is a whole bunch of data provided by UC Irvine, which is information about various different banknotes that people took pictures of various different banknotes and measured various different properties of those banknotes. And in particular, some human categorized each of those banknotes as either a counterfeit banknote or as not counterfeit. And so what you're looking at here is each row represents one banknote. This is formatted as a CSV spreadsheet, where just comma separated values separating each of these various different fields. We have four different input values for each of these data points, just information, some measurement that was made on the banknote. And what those measurements exactly are aren't as important as the fact that we do have access to this data. But more importantly, we have access for each of these data points to a label, where 0 indicates something like this was not a counterfeit bill, meaning it was an authentic bill. And a data point labeled 1 means that it is a counterfeit bill, at least according to the human researcher who labeled this particular data. So we have a whole bunch of data representing a whole bunch of different data points, each of which has these various different measurements that were made on that particular bill, and each of which has an output value, 0 or 1, 0 meaning it was a genuine bill, 1 meaning it was a counterfeit bill. And what we would like to do is use supervised learning to begin to predict or model some sort of function that can take these four values as input and predict what the output would be. We want our learning algorithm to find some sort of pattern that is able to predict based on these measurements, something that you could measure just by taking a photo of a bill, predict whether that bill is authentic or whether that bill is counterfeit. And so how can we do that? Well, I'm first going to open up banknote0.py and see how it is that we do this. I'm first importing a lot of things from Scikitlearn, but importantly, I'm going to set my model equal to the perceptron model, which is one of those models that we talked about before. We're just going to try and figure out some setting of weights that is able to divide our data into two different groups. Then I'm going to go ahead and read data in for my file from banknotes.csv. And basically, for every row, I'm going to separate that row into the first four values of that row, which is the evidence for that row. And then the label, where if the final column in that row is a 0, the label is authentic. And otherwise, it's going to be counterfeit. So I'm effectively reading data in from the CSV file, dividing into a whole bunch of rows where each row has some evidence, those four input values that are going to be inputs to my hypothesis function. And then the label, the output, whether it is authentic or counterfeit, that is the thing that I am then trying to predict. So the next step is that I would like to split up my data set into a training set and a testing set, some set of data that I would like to train my machine learning model on, and some set of data that I would like to use to test that model, see how well it performed. So what I'll do is I'll go ahead and figure out length of the data, how many data points do I have. I'll go ahead and take half of them, save that number as a number called holdout. That is how many items I'm going to hold out for my data set to save for the testing phase. I'll randomly shuffle the data so it's in some random order. And then I'll say my testing set will be all of the data up to the holdout. So I'll take holdout many data items, and that will be my testing set. My training data will be everything else, the information that I'm going to train my model on. And then I'll say I need to divide my training data into two different sets. I need to divide it into my x values, where x here represents the inputs. So the x values, the x values that I'm going to train on, are basically for every row in my training set, I'm going to get the evidence for that row, those four values, where it's basically a vector of four numbers, where that is going to be all of the input. And then I need the y values. What are the outputs that I want to learn from, the labels that belong to each of these various different input points? Well, that's going to be the same thing for each row in the training data. But this time, I take that row and get what its label is, whether it is authentic or counterfeit. So I end up with one list of all of these vectors of my input data, and one list, which follows the same order, but is all of the labels that correspond with each of those vectors. And then to train my model, which in this case is just this perceptron model, I just call model.fit, pass in the training data, and what the labels for those training data are. And scikitlearn will take care of fitting the model, will do the entire algorithm for me. And then when it's done, I can then test to see how well that model performed. So I can say, let me get all of these input vectors for what I want to test on. So for each row in my testing data set, go ahead and get the evidence. And the y values, those are what the actual values were for each of the rows in the testing data set, what the actual label is. But then I'm going to generate some predictions. I'm going to use this model and try and predict, based on the testing vectors, I want to predict what the output is. And my goal then is to now compare y testing with predictions. I want to see how well my predictions, based on the model, actually reflect what the y values were, what the output is, that were actually labeled. Because I now have this label data, I can assess how well the algorithm worked. And so now I can just compute how well we did. I'm going to, this zip function basically just lets me look through two different lists, one by one at the same time. So for each actual value and for each predicted value, if the actual is the same thing as what I predicted, I'll go ahead and increment the counter by one. Otherwise, I'll increment my incorrect counter by one. And so at the end, I can print out, here are the results, here's how many I got right, here's how many I got wrong, and here was my overall accuracy, for example. So I can go ahead and run this. I can run python banknote0.py. And it's going to train on half the data set and then test on half the data set. And here are the results for my perceptron model. In this case, it correctly was able to classify 679 bills as correctly either authentic or counterfeit and incorrectly classified seven of them for an overall accuracy of close to 99% accurate. So on this particular data set, using this perceptron model, we were able to predict very well what the output was going to be. And we can try different models, too, that scikitlearn makes it very easy just to swap out one model for another model. So instead of the perceptron model, I can use the support vector machine using the SVC, otherwise known as a support vector classifier, using a support vector machine to classify things into two different groups. And now see, all right, how well does this perform? And all right, this time, we were able to correctly predict 682 and incorrectly predicted four for accuracy of 99.4%. And we could even try the kneighbors classifier as the model instead. And this takes a parameter, n neighbors, for how many neighbors do you want to look at? Let's just look at one neighbor, the one nearest neighbor, and use that to predict. Go ahead and run this as well. And it looks like, based on the kneighbors classifier, looking at just one neighbor, we were able to correctly classify 685 data points, incorrectly classified one. Maybe let's try three neighbors instead, instead of just using one neighbor. Do more of a knearest neighbors approach, where I look at the three nearest neighbors and see how that performs. And that one, in this case, seems to have gotten 100% of all of the predictions correctly described as either authentic banknotes or as counterfeit banknotes. And we could run these experiments multiple times, because I'm randomly reorganizing the data every time. We're technically training these on slightly different data sets. And so you might want to run multiple experiments to really see how well they're actually going to perform. But in short, they all perform very well. And while some of them perform slightly better than others here, that might not always be the case for every data set. But you can begin to test now by very quickly putting together these machine learning models using Scikitlearn to be able to train on some training set and then test on some testing set as well. And this splitting up into training groups and testing groups and testing happens so often that Scikitlearn has functions built in for trying to do it. I did it all by hand just now. But if we take a look at banknotes one, we take advantage of some other features that exist in Scikitlearn, where we can really simplify a lot of our logic, that there is a function built into Scikitlearn called train test split, which will automatically split data into a training group and a testing group. I just have to say what proportion should be in the testing group, something like 0.5, half the data inside the testing group. Then I can fit the model on the training data, make the predictions on the testing data, and then just count up. And Scikitlearn has some nice methods for just counting up how many times our testing data match the predictions, how many times our testing data didn't match the predictions. So very quickly, you can write programs with not all that many lines of code. It's maybe like 40 lines of code to get through all of these predictions. And then as a result, see how well we're able to do. So these types of libraries can allow us, without really knowing the implementation details of these algorithms, to be able to use the algorithms in a very practical way to be able to solve these types of problems. So that then was supervised learning, this task of given a whole set of data, some input output pairs, we would like to learn some function that maps those inputs to those outputs. But turns out there are other forms of learning as well. And another popular type of machine learning, especially nowadays, is known as reinforcement learning. And the idea of reinforcement learning is rather than just being given a whole data set at the beginning of input output pairs, reinforcement learning is all about learning from experience. In reinforcement learning, our agent, whether it's like a physical robot that's trying to make actions in the world or just some virtual agent that is a program running somewhere, our agent is going to be given a set of rewards or punishments in the form of numerical values. But you can think of them as reward or punishment. And based on that, it learns what actions to take in the future, that our agent, our AI, will be put in some sort of environment. It will make some actions. And based on the actions that it makes, it learns something. It either gets a reward when it does something well, it gets a punishment when it does something poorly, and it learns what to do or what not to do in the future based on those individual experiences. And so what this will often look like is it will often start with some agent, some AI, which might, again, be a physical robot, if you're imagining a physical robot moving around, but it can also just be a program. And our agent is situated in their environment, where the environment is where they're going to make their actions, and it's what's going to give them rewards or punishments for various actions that they're in. So for example, the environment is going to start off by putting our agent inside of a state. Our agent has some state that, in a game, might be the state of the game that the agent is playing. In a world that the agent is exploring might be some position inside of a grid representing the world that they're exploring. But the agent is in some sort of state. And in that state, the agent needs to choose to take an action. The agent likely has multiple actions they can choose from, but they pick an action. So they take an action in a particular state. And as a result of that, the agent will generally get two things in response as we model them. The agent gets a new state that they find themselves in. After being in this state, taking one action, they end up in some other state. And they're also given some sort of numerical reward, positive meaning reward, meaning it was a good thing, negative generally meaning they did something bad, they received some sort of punishment. And that is all the information the agent has. It's told what state it's in. It makes some sort of action. And based on that, it ends up in another state. And it ends up getting some particular reward. And it needs to learn, based on that information, what actions to begin to take in the future. And so you could imagine generalizing this to a lot of different situations. This is oftentimes how you train if you've ever seen those robots that are now able to walk around the way humans do. It would be quite difficult to program the robot in exactly the right way to get it to walk the way humans do. You could instead train it through reinforcement learning, give it some sort of numerical reward every time it does something good, like take steps forward, and punish it every time it does something bad, like fall over, and then let the AI just learn based on that sequence of rewards, based on trying to take various different actions. You can begin to have the agent learn what to do in the future and what not to do. So in order to begin to formalize this, the first thing we need to do is formalize this notion of what we mean about states and actions and rewards, like what does this world look like? And oftentimes, we'll formulate this world as what's known as a Markov decision process, similar in spirit to Markov chains, which you might recall from before. But a Markov decision process is a model that we can use for decision making, for an agent trying to make decisions in its environment. And it's a model that allows us to represent the various different states that an agent can be in, the various different actions that they can take, and also what the reward is for taking one action as opposed to another action. So what then does it actually look like? Well, if you recall a Markov chain from before, a Markov chain looked a little something like this, where we had a whole bunch of these individual states, and each state immediately transitioned to another state based on some probability distribution. We saw this in the context of the weather before, where if it was sunny, we said with some probability, it'll be sunny the next day. With some other probability, it'll be rainy, for example. But we could also imagine generalizing this. It's not just sun and rain anymore. We just have these states, where one state leads to another state according to some probability distribution. But in this original model, there was no agent that had any control over this process. It was just entirely probability based, where with some probability, we moved to this next state. But maybe it's going to be some other state with some other probability. What we'll now have is the ability for the agent in this state to choose from a set of actions, where maybe instead of just one path forward, they have three different choices of actions that each lead up down different paths. And even this is a bit of an oversimplification, because in each of these states, you might imagine more branching points where there are more decisions that can be taken as well. So we've extended the Markov chain to say that from a state, you now have available action choices. And each of those actions might be associated with its own probability distribution of going to various different states. Then in addition, we'll add another extension, where any time you move from a state, taking an action, going into this other state, we can associate a reward with that outcome, saying either r is positive, meaning some positive reward, or r is negative, meaning there was some sort of punishment. And this then is what we'll consider to be a Markov decision process. That a Markov decision process has some initial set of states, of states in the world that we can be in. We have some set of actions that, given a state, I can say, what are the actions that are available to me in that state, an action that I can choose from? Then we have some transition model. The transition model before just said that, given my current state, what is the probability that I end up in that next state or this other state? The transition model now has effectively two things we're conditioning on. We're saying, given that I'm in this state and that I take this action, what's the probability that I end up in this next state? Now maybe we live in a very deterministic world in this Markov decision process. We're given a state and given an action. We know for sure what next state we'll end up in. But maybe there's some randomness in the world that when you take in a state and you take an action, you might not always end up in the exact same state. There might be some probabilities involved there as well. The Markov decision process can handle both of those possible cases. And then finally, we have a reward function, generally called r, that in this case says, what is the reward for being in this state, taking this action, and then getting to s prime this next state? So I'm in this original state. I take this action. I get to this next state. What is the reward for doing that process? And you can add up these rewards every time you take an action to get the total amount of rewards that an agent might get from interacting in a particular environment modeled using this Markov decision process. So what might this actually look like in practice? Well, let's just create a little simulated world here where I have this agent that is just trying to navigate its way. This agent is this yellow dot here, like a robot in the world, trying to navigate its way through this grid. And ultimately, it's trying to find its way to the goal. And if it gets to the green goal, then it's going to get some sort of reward. But then we might also have some red squares that are places where you get some sort of punishment, some bad place where we don't want the agent to go. And if it ends up in the red square, then our agent is going to get some sort of punishment as a result of that. But the agent originally doesn't know all of these details. It doesn't know that these states are associated with punishments. But maybe it does know that this state is associated with a reward. Maybe it doesn't. But it just needs to sort of interact with the environment to try and figure out what to do and what not to do. So the first thing the agent might do is, given no additional information, if it doesn't know what the punishments are, it doesn't know where the rewards are, it just might try and take an action. And it takes an action and ends up realizing that it got some sort of punishment. And so what does it learn from that experience? Well, it might learn that when you're in this state in the future, don't take the action move to the right, that that is a bad action to take. That in the future, if you ever find yourself back in the state, don't take this action of going to the right when you're in this particular state, because that leads to punishment. That might be the intuition at least. And so you could try doing other actions. You move up, all right, that didn't lead to any immediate rewards. Maybe try something else. Then maybe try something else. And all right, now you found that you got another punishment. And so you learn something from that experience. So the next time you do this whole process, you know that if you ever end up in this square, you shouldn't take the down action, because being in this state and taking that action ultimately leads to some sort of punishment, a negative reward, in other words. And this process repeats. You might imagine just letting our agent explore the world, learning over time what states tend to correspond with poor actions, learning over time what states correspond with poor actions, until eventually, if it tries enough things randomly, it might find that eventually when you get to this state, if you take the up action in this state, it might find that you actually get a reward from that. And what it can learn from that is that if you're in this state, you should take the up action, because that leads to a reward. And over time, you can also learn that if you're in this state, you should take the left action, because that leads to this state that also lets you eventually get to the reward. So you begin to learn over time not only which actions are good in particular states, but also which actions are bad, such that once you know some sequence of good actions that leads you to some sort of reward, our agent can just follow those instructions, follow the experience that it has learned. We didn't tell the agent what the goal was. We didn't tell the agent where the punishments were. But the agent can begin to learn from this experience and learn to begin to perform these sorts of tasks better in the future. And so let's now try to formalize this idea, formalize the idea that we would like to be able to learn in this state taking this action, is that a good thing or a bad thing? There are lots of different models for reinforcement learning. We're just going to look at one of them today. And the one that we're going to look at is a method known as Qlearning. And what Qlearning is all about is about learning a function, a function Q, that takes inputs S and A, where S is a state and A is an action that you take in that state. And what this Q function is going to do is it is going to estimate the value. How much reward will I get from taking this action in this state? Originally, we don't know what this Q function should be. But over time, based on experience, based on trying things out and seeing what the result is, I would like to try and learn what Q of SA is for any particular state and any particular action that I might take in that state. So what is the approach? Well, the approach originally is we'll start with Q SA equal to 0 for all states S and for all actions A. That initially, before I've ever started anything, before I've had any experiences, I don't know the value of taking any action in any given state. So I'm going to assume that the value is just 0 all across the board. But then as I interact with the world, as I experience rewards or punishments, or maybe I go to a cell where I don't get either reward or a punishment, I want to somehow update my estimate of Q SA. I want to continually update my estimate of Q SA based on the experiences and rewards and punishments that I've received, such that in the future, my knowledge of what actions are good and what states will be better. So when we take an action and receive some sort of reward, I want to estimate the new value of Q SA. And I estimate that based on a couple of different things. I estimate it based on the reward that I'm getting from taking this action and getting into the next state. But assuming the situation isn't over, assuming there are still future actions that I might take as well, I also need to take into account the expected future rewards. That if you imagine an agent interacting with the environment, then sometimes you'll take an action and get a reward, but then you can keep taking more actions and get more rewards, that these both are relevant, both the current reward I'm getting from this current step and also my future reward. And it might be the case that I'll want to take a step that doesn't immediately lead to a reward, because later on down the line, I know it will lead to more rewards as well. So there's a balancing act between current rewards that the agent experiences and future rewards that the agent experiences as well. And then we need to update QSA. So we estimate the value of QSA based on the current reward and the expected future rewards. And then we need to update this Q function to take into account this new estimate. Now, we already, as we go through this process, we'll already have an estimate for what we think the value is. Now we have a new estimate, and then somehow we need to combine these two estimates together, and we'll look at more formal ways that we can actually begin to do that. So to actually show you what this formula looks like, here is the approach we'll take with Q learning. We're going to, again, start with Q of S and A being equal to 0 for all states. And then every time we take an action A in state S and observer reward R, we're going to update our value, our estimate, for Q of SA. And the idea is that we're going to figure out what the new value estimate is minus what our existing value estimate is. And so we have some preconceived notion for what the value is for taking this action in this state. Maybe our expectation is we currently think the value is 10. But then we're going to estimate what we now think it's going to be. Maybe the new value estimate is something like 20. So there's a delta of 10 that our new value estimate is 10 points higher than what our current value estimate happens to be. And so we have a couple of options here. We need to decide how much we want to adjust our current expectation of what the value is of taking this action in this particular state. And what that difference is, how much we add or subtract from our existing notion of how much do we expect the value to be, is dependent on this parameter alpha, also called a learning rate. And alpha represents, in effect, how much we value new information compared to how much we value old information. An alpha value of 1 means we really value new information. But if we have a new estimate, then it doesn't matter what our old estimate is. We're only going to consider our new estimate because we always just want to take into consideration our new information. So the way that works is that if you imagine alpha being 1, well, then we're taking the old value of QSA and then adding 1 times the new value minus the old value. And that just leaves us with the new value. So when alpha is 1, all we take into consideration is what our new estimate happens to be. But over time, as we go through a lot of experiences, we already have some existing information. We might have tried taking this action nine times already. And now we just tried it a 10th time. And we don't only want to consider this 10th experience. I also want to consider the fact that my prior nine experiences, those were meaningful, too. And that's data I don't necessarily want to lose. And so this alpha controls that decision, controls how important is the new information. 0 would mean ignore all the new information. Just keep this Q value the same. 1 means replace the old information entirely with the new information. And somewhere in between, keep some sort of balance between these two values. We can put this equation a little bit more formally as well. The old value estimate is our old estimate for what the value is of taking this action in a particular state. That's just Q of SNA. So we have it once here, and we're going to add something to it. We're going to add alpha times the new value estimate minus the old value estimate. But the old value estimate, we just look up by calling this Q function. And what then is the new value estimate? Based on this experience we have just taken, what is our new estimate for the value of taking this action in this particular state? Well, it's going to be composed of two parts. It's going to be composed of what reward did I just get from taking this action in this state. And then it's going to be, what can I expect my future rewards to be from this point forward? So it's going to be R, some reward I'm getting right now, plus whatever I estimate I'm going to get in the future. And how do I estimate what I'm going to get in the future? Well, it's a bit of another call to this Q function. It's going to be take the maximum across all possible actions I could take next and say, all right, of all of these possible actions I could take, which one is going to have the highest reward? And so this then looks a little bit complicated. This is going to be our notion for how we're going to perform this kind of update. I have some estimate, some old estimate, for what the value is of taking this action in this state. And I'm going to update it based on new information that I experience some reward. I predict what my future reward is going to be. And using that I update what I estimate the reward will be for taking this action in this particular state. And there are other additions you might make to this algorithm as well. Sometimes it might not be the case that future rewards you want to wait equally to current rewards. Maybe you want an agent that values reward now over reward later. And so sometimes you can even add another term in here, some other parameter, where you discount future rewards and say future rewards are not as valuable as rewards immediately. That getting reward in the current time step is better than waiting a year and getting rewards later. But that's something up to the programmer to decide what that parameter ought to be. But the big picture idea of this entire formula is to say that every time we experience some new reward, we take that into account. We update our estimate of how good is this action. And then in the future, we can make decisions based on that algorithm. Once we have some good estimate for every state and for every action, what the value is of taking that action, then we can do something like implement a greedy decision making policy. That if I am in a state and I want to know what action should I take in that state, well, then I consider for all of my possible actions, what is the value of QSA? What is my estimated value of taking that action in that state? And I will just pick the action that has the highest value after I evaluate that expression. So I pick the action that has the highest value. And based on that, that tells me what action I should take. At any given state that I'm in, I can just greedily say across all my actions, this action gives me the highest expected value. And so I'll go ahead and choose that action as the action that I take as well. But there is a downside to this kind of approach. And then downside comes up in a situation like this, where we know that there is some solution that gets me to the reward. And our agent has been able to figure that out. But it might not necessarily be the best way or the fastest way. If the agent is allowed to explore a little bit more, it might find that it can get the reward faster by taking some other route instead, by going through this particular path that is a faster way to get to that ultimate goal. And maybe we would like for the agent to be able to figure that out as well. But if the agent always takes the actions that it knows to be best, well, when it gets to this particular square, it doesn't know that this is a good action because it's never really tried it. But it knows that going down eventually leads its way to this reward. So it might learn in the future that it should just always take this route and it's never going to explore and go along that route instead. So in reinforcement learning, there is this tension between exploration and exploitation. And exploitation generally refers to using knowledge that the AI already has. The AI already knows that this is a move that leads to reward. So we'll go ahead and use that move. And exploration is all about exploring other actions that we may not have explored as thoroughly before because maybe one of these actions, even if I don't know anything about it, might lead to better rewards faster or to more rewards in the future. And so an agent that only ever exploits information and never explores might be able to get reward, but it might not maximize its rewards because it doesn't know what other possibilities are out there, possibilities that we only know about by taking advantage of exploration. And so how can we try and address this? Well, one possible solution is known as the Epsilon greedy algorithm, where we set Epsilon equal to how often we want to just make a random move, where occasionally we will just make a random move in order to say, let's try to explore and see what happens. And then the logic of the algorithm will be with probability 1 minus Epsilon, choose the estimated best move. In a greedy case, we'd always choose the best move. But in Epsilon greedy, we're most of the time going to choose the best move or sometimes going to choose the best move. But sometimes with probability Epsilon, we're going to choose a random move instead. So every time we're faced with the ability to take an action, sometimes we're going to choose the best move. Sometimes we're just going to choose a random move. So this type of algorithm can be quite powerful in a reinforcement learning context by not always just choosing the best possible move right now, but sometimes, especially early on, allowing yourself to make random moves that allow you to explore various different possible states and actions more, and maybe over time, you might decrease your value of Epsilon. More and more often, choosing the best move after you're more confident that you've explored what all of the possibilities actually are. So we can put this into practice. And one very common application of reinforcement learning is in game playing, that if you want to teach an agent how to play a game, you just let the agent play the game a whole bunch. And then the reward signal happens at the end of the game. When the game is over, if our AI won the game, it gets a reward of like 1, for example. And if it lost the game, it gets a reward of negative 1. And from that, it begins to learn what actions are good and what actions are bad. You don't have to tell the AI what's good and what's bad, but the AI figures it out based on that reward. Winning the game is some signal, losing the game is some signal, and based on all of that, it begins to figure out what decisions it should actually make. So one very simple game, which you may have played before, is a game called Nim. And in the game of Nim, you've got a whole bunch of objects in a whole bunch of different piles, where here I've represented each pile as an individual row. So you've got one object in the first pile, three in the second pile, five in the third pile, seven in the fourth pile. And the game of Nim is a two player game where players take turns removing objects from piles. And the rule is that on any given turn, you were allowed to remove as many objects as you want from any one of these piles, any one of these rows. You have to remove at least one object, but you remove as many as you want from exactly one of the piles. And whoever takes the last object loses. So player one might remove four from this pile here. Player two might remove four from this pile here. So now we've got four piles left, one, three, one, and three. Player one might remove the entirety of the second pile. Player two, if they're being strategic, might remove two from the third pile. Now we've got three piles left, each with one object left. Player one might remove one from one pile. Player two removes one from the other pile. And now player one is left with choosing this one object from the last pile, at which point player one loses the game. So fairly simple game. Piles of objects, any turn you choose how many objects to remove from a pile, whoever removes the last object loses. And this is the type of game you could encode into an AI fairly easily, because the states are really just four numbers. Every state is just how many objects in each of the four piles. And the actions are things like, how many am I going to remove from each one of these individual piles? And the reward happens at the end, that if you were the player that had to remove the last object, then you get some sort of punishment. But if you were not, and the other player had to remove the last object, well, then you get some sort of reward. So we could actually try and show a demonstration of this, that I've implemented an AI to play the game of Nim. All right, so here, what we're going to do is create an AI as a result of training the AI on some number of games, that the AI is going to play against itself, where the idea is the AI will play games against itself, learn from each of those experiences, and learn what to do in the future. And then I, the human, will play against the AI. So initially, we'll say train zero times, meaning we're not going to let the AI play any practice games against itself in order to learn from its experiences. We're just going to see how well it plays. And it looks like there are four piles. I can choose how many I remove from any one of the piles. So maybe from pile three, I will remove five objects, for example. So now, AI chose to take one item from pile zero. So I'm left with these piles now, for example. And so here, I could choose maybe to say, I would like to remove from pile two, I'll remove all five of them, for example. And so AI chose to take two away from pile one. Now I'm left with one pile that has one object, one pile that has two objects. So from pile three, I will remove two objects. And now I've left the AI with no choice but to take that last one. And so the game is over, and I was able to win. But I did so because the AI was really just playing randomly. It didn't have any prior experience that it was using in order to make these sorts of judgments. Now let me let the AI train itself on 10,000 games. I'm going to let the AI play 10,000 games of nim against itself. Every time it wins or loses, it's going to learn from that experience and learn in the future what to do and what not to do. So here then, I'll go ahead and run this again. And now you see the AI running through a whole bunch of training games, 10,000 training games against itself. And now it's going to let me make these sorts of decisions. So now I'm going to play against the AI. Maybe I'll remove one from pile three. And the AI took everything from pile three, so I'm left with three piles. I'll go ahead and from pile two maybe remove three items. And the AI removes one item from pile zero. I'm left with two piles, each of which has two items in it. I'll remove one from pile one, I guess. And the AI took two from pile two, leaving me with no choice but to take one away from pile one. So it seems like after playing 10,000 games of nim against itself, the AI has learned something about what states and what actions tend to be good and has begun to learn some sort of pattern for how to predict what actions are going to be good and what actions are going to be bad in any given state. So reinforcement learning can be a very powerful technique for achieving these sorts of gameplaying agents, agents that are able to play a game well just by learning from experience, whether that's playing against other people or by playing against itself and learning from those experiences as well. Now, nim is a bit of an easy game to use reinforcement learning for because there are so few states. There are only states that are as many as how many different objects are in each of these various different piles. You might imagine that it's going to be harder if you think of a game like chess or games where there are many, many more states and many, many more actions that you can imagine taking, where it's not going to be as easy to learn for every state and for every action what the value is going to be. So oftentimes in that case, we can't necessarily learn exactly what the value is for every state and for every action, but we can approximate it. So much as we saw with minimax, so we could use a depthlimiting approach to stop calculating at a certain point in time, we can do a similar type of approximation known as function approximation in a reinforcement learning context where instead of learning a value of q for every state and every action, we just have some function that estimates what the value is for taking this action in this particular state that might be based on various different features of the state that the agent happens to be in, where you might have to choose what those features actually are. But you can begin to learn some patterns that generalize beyond one specific state and one specific action that you can begin to learn if certain features tend to be good things or bad things. Reinforcement learning can allow you, using a very similar mechanism, to generalize beyond one particular state and say, if this other state looks kind of like this state, then maybe the similar types of actions that worked in one state will also work in another state as well. And so this type of approach can be quite helpful as you begin to deal with reinforcement learning that exist in larger and larger state spaces where it's just not feasible to explore all of the possible states that could actually exist. So there, then, are two of the main categories of reinforcement learning. Supervised learning, where you have labeled input and output pairs, and reinforcement learning, where an agent learns from rewards or punishments that it receives. The third major category of machine learning that we'll just touch on briefly is known as unsupervised learning. And unsupervised learning happens when we have data without any additional feedback, without labels, that in the supervised learning case, all of our data had labels. We labeled the data point with whether that was a rainy day or not rainy day. And using those labels, we were able to infer what the pattern was. Or we labeled data as a counterfeit banknote or not a counterfeit. And using those labels, we were able to draw inferences and patterns to figure out what does a banknote look like versus not. In unsupervised learning, we don't have any access to any of those labels. But we still would like to learn some of those patterns. And one of the tasks that you might want to perform in unsupervised learning is something like clustering, where clustering is just the task of, given some set of objects, organize it into distinct clusters, groups of objects that are similar to one another. And there's lots of applications for clustering. It comes up in genetic research, where you might have a whole bunch of different genes and you want to cluster them into similar genes if you're trying to analyze them across a population or across species. It comes up in an image if you want to take all the pixels of an image, cluster them into different parts of the image. Comes a lot up in market research if you want to divide your consumers into different groups so you know which groups to target with certain types of product advertisements, for example, and a number of other contexts as well in which clustering can be very applicable. One technique for clustering is an algorithm known as kmeans clustering. And what kmeans clustering is going to do is it is going to divide all of our data points into k different clusters. And it's going to do so by repeating this process of assigning points to clusters and then moving around those clusters at centers. We're going to define a cluster by its center, the middle of the cluster, and then assign points to that cluster based on which center is closest to that point. And I'll show you an example of that now. Here, for example, I have a whole bunch of unlabeled data, just various data points that are in some sort of graphical space. And I would like to group them into various different clusters. But I don't know how to do that originally. And let's say I want to assign like three clusters to this group. And you have to choose how many clusters you want in kmeans clustering that you could try multiple and see how well those values perform. But I'll start just by randomly picking some places to put the centers of those clusters. Maybe I have a blue cluster, a red cluster, and a green cluster. And I'm going to start with the centers of those clusters just being in these three locations here. And what kmeans clustering tells us to do is once I have the centers of the clusters, assign every point to a cluster based on which cluster center it is closest to. So we end up with something like this, where all of these points are closer to the blue cluster center than any other cluster center. All of these points here are closer to the green cluster center than any other cluster center. And then these two points plus these points over here, those are all closest to the red cluster center instead. So here then is one possible assignment of all these points to three different clusters. But it's not great that it seems like in this red cluster, these points are kind of far apart. In this green cluster, these points are kind of far apart. It might not be my ideal choice of how I would cluster these various different data points. But kmeans clustering is an iterative process that after I do this, there is a next step, which is that after I've assigned all of the points to the cluster center that it is nearest to, we are going to recenter the clusters, meaning take the cluster centers, these diamond shapes here, and move them to the middle, or the average, effectively, of all of the points that are in that cluster. So we'll take this blue point, this blue center, and go ahead and move it to the middle or to the center of all of the points that were assigned to the blue cluster, moving it slightly to the right in this case. And we'll do the same thing for red. We'll move the cluster center to the middle of all of these points, weighted by how many points there are. There are more points over here, so the red center ends up moving a little bit further that way. And likewise, for the green center, there are many more points on this side of the green center. So the green center ends up being pulled a little bit further in this direction. So we recenter all of the clusters, and then we repeat the process. We go ahead and now reassign all of the points to the cluster center that they are now closest to. And now that we've moved around the cluster centers, these cluster assignments might change. That this point originally was closer to the red cluster center, but now it's actually closer to the blue cluster center. Same goes for this point as well. And these three points that were originally closer to the green cluster center are now closer to the red cluster center instead. So we can reassign what colors or which clusters each of these data points belongs to, and then repeat the process again, moving each of these cluster means and the middles of the clusterism to the mean, the average, of all of the other points that happen to be there, and repeat the process again. Go ahead and assign each of the points to the cluster that they are closest to. So once we reach a point where we've assigned all the points to clusters to the cluster that they are nearest to, and nothing changed, we've reached a sort of equilibrium in this situation, where no points are changing their allegiance. And as a result, we can declare this algorithm is now over. And we now have some assignment of each of these points into three different clusters. And it looks like we did a pretty good job of trying to identify which points are more similar to one another than they are to points in other groups. So we have the green cluster down here, this blue cluster here, and then this red cluster over there as well. And we did so without any access to some labels to tell us what these various different clusters were. We just used an algorithm in an unsupervised sense without any of those labels to figure out which points belonged to which categories. And again, lots of applications for this type of clustering technique. And there are many more algorithms in each of these various different fields within machine learning, supervised and reinforcement and unsupervised. But those are many of the big picture foundational ideas that underlie a lot of these techniques, where these are the problems that we're trying to solve. And we try and solve those problems using a number of different methods of trying to take data and learn patterns in that data, whether that's trying to find neighboring data points that are similar or trying to minimize some sort of loss function or any number of other techniques that allow us to begin to try to solve these sorts of problems. That then was a look at some of the principles that are at the foundation of modern machine learning, this ability to take data and learn from that data so that the computer can perform a task even if they haven't explicitly been given instructions in order to do so. Next time, we'll continue this conversation about machine learning, looking at other techniques we can use for solving these sorts of problems. We'll see you then. All right, welcome back, everyone, to an introduction to artificial intelligence with Python. Now, last time, we took a look at machine learning, a set of techniques that computers can use in order to take a set of data and learn some patterns inside of that data, learn how to perform a task even if we the programmers didn't give the computer explicit instructions for how to perform that task. Today, we transition to one of the most popular techniques and tools within machine learning, that of neural networks. And neural networks were inspired as early as the 1940s by researchers who were thinking about how it is that humans learn, studying neuroscience in the human brain and trying to see whether or not we could apply those same ideas to computers as well and model computer learning off of human learning. So how is the brain structured? Well, very simply put, the brain consists of a whole bunch of neurons. And those neurons are connected to one another and communicate with one another in some way. In particular, if you think about the structure of a biological neural network, something like this, there are a couple of key properties that scientists observed. One was that these neurons are connected to each other and receive electrical signals from one another, that one neuron can propagate electrical signals to another neuron. And another point is that neurons process those input signals and then can be activated, that a neuron becomes activated at a certain point and then can propagate further signals onto neurons in the future. And so the question then became, could we take this biological idea of how it is that humans learn with brains and with neurons and apply that to a machine as well, in effect designing an artificial neural network, or an ANN, which will be a mathematical model for learning that is inspired by these biological neural networks? And what artificial neural networks will allow us to do is they will first be able to model some sort of mathematical function. Every time you look at a neural network, which we'll see more of later today, each one of them is really just some mathematical function that is mapping certain inputs to particular outputs based on the structure of the network, that depending on where we place particular units inside of this neural network, that's going to determine how it is that the network is going to function. And in particular, artificial neural networks are going to lend themselves to a way that we can learn what the network's parameters should be. We'll see more on that in just a moment. But in effect, we want a model such that it is easy for us to be able to write some code that allows for the network to be able to figure out how to model the right mathematical function given a particular set of input data. So in order to create our artificial neural network, instead of using biological neurons, we're just going to use what we're going to call units, units inside of a neural network, which we can represent kind of like a node in a graph, which will here be represented just by a blue circle like this. And these artificial units, these artificial neurons, can be connected to one another. So here, for instance, we have two units that are connected by this edge inside of this graph, effectively. And so what we're going to do now is think of this idea as some sort of mapping from inputs to outputs. So we have one unit that is connected to another unit that we might think of this side of the input and that side of the output. And what we're trying to do then is to figure out how to solve a problem, how to model some sort of mathematical function. And this might take the form of something we saw last time, which was something like we have certain inputs, like variables x1 and x2. And given those inputs, we want to perform some sort of task, a task like predicting whether or not it's going to rain. And ideally, we'd like some way, given these inputs, x1 and x2, which stand for some sort of variables to do with the weather, we would like to be able to predict, in this case, a Boolean classification. Is it going to rain, or is it not going to rain? And we did this last time by way of a mathematical function. We defined some function, h, for our hypothesis function, that took as input x1 and x2, the two inputs that we cared about processing, in order to determine whether we thought it was going to rain or whether we thought it was not going to rain. The question then becomes, what does this hypothesis function do in order to make that determination? And we decided last time to use a linear combination of these input variables to determine what the output should be. So our hypothesis function was equal to something like this. Weight 0 plus weight 1 times x1 plus weight 2 times x2. So what's going on here is that x1 and x2, those are input variables, the inputs to this hypothesis function. And each of those input variables is being multiplied by some weight, which is just some number. So x1 is being multiplied by weight 1, x2 is being multiplied by weight 2. And we have this additional weight, weight 0, that doesn't get multiplied by an input variable at all, that just serves to either move the function up or move the function's value down. You can think of this as either a weight that's just multiplied by some dummy value, like the number 1. It's multiplied by 1, and so it's not multiplied by anything. Or sometimes, you'll see in the literature, people call this variable weight 0 a bias, so that you can think of these variables as slightly different. We have weights that are multiplied by the input, and we separately add some bias to the result as well. You'll hear both of those terminologies used when people talk about neural networks and machine learning. So in effect, what we've done here is that in order to define a hypothesis function, we just need to decide and figure out what these weights should be to determine what values to multiply by our inputs to get some sort of result. Of course, at the end of this, what we need to do is make some sort of classification, like rainy or not rainy. And to do that, we use some sort of function that defines some sort of threshold. And so we saw, for instance, the step function, which is defined as 1 if the result of multiplying the weights by the inputs is at least 0, otherwise it's 0. And you can think of this line down the middle as kind of like a dotted line. Effectively, it stays at 0 all the way up to one point, and then the function steps or jumps up to 1. So it's 0 before it reaches some threshold, and then it's 1 after it reaches a particular threshold. And so this was one way we could define what will come to call an activation function, a function that determines when it is that this output becomes active, changes to 1 instead of being a 0. But we also saw that if we didn't just want a purely binary classification, we didn't want purely 1 or 0, but we wanted to allow for some inbetween real numbered values, we could use a different function. And there are a number of choices, but the one that we looked at was the logistic sigmoid function that has sort of an sshaped curve, where we could represent this as a probability that may be somewhere in between the probability of rain or something like 0.5. Maybe a little bit later, the probability of rain is 0.8. And so rather than just have a binary classification of 0 or 1, we could allow for numbers that are in between as well. And it turns out there are many other different types of activation functions, where an activation function just takes the output of multiplying the weights together and adding that bias, and then figuring out what the actual output should be. Another popular one is the rectified linear unit, otherwise known as ReLU. And the way that works is that it just takes its input and takes the maximum of that input and 0. So if it's positive, it remains unchanged. But if it's 0, if it's negative, it goes ahead and levels out at 0. And there are other activation functions that we could choose as well. But in short, each of these activation functions, you can just think of as a function that gets applied to the result of all of this computation. We take some function g and apply it to the result of all of that calculation. And this then is what we saw last time, the way of defining some hypothesis function that takes in inputs, calculate some linear combination of those inputs, and then passes it through some sort of activation function to get our output. And this actually turns out to be the model for the simplest of neural networks, that we're going to instead represent this mathematical idea graphically by using a structure like this. Here then is a neural network that has two inputs. We can think of this as x1 and this as x2. And then one output, which you can think of as classifying whether or not we think it's going to rain or not rain, for example, in this particular instance. And so how exactly does this model work? Well, each of these two inputs represents one of our input variables, x1 and x2. And notice that these inputs are connected to this output via these edges, which are going to be defined by their weights. So these edges each have a weight associated with them, weight 1 and weight 2. And then this output unit, what it's going to do is it is going to calculate an output based on those inputs and based on those weights. This output unit is going to multiply all the inputs by their weights, add in this bias term, which you can think of as an extra w0 term that gets added into it, and then we pass it through an activation function. So this then is just a graphical way of representing the same idea we saw last time just mathematically. And we're going to call this a very simple neural network. And we'd like for this neural network to be able to learn how to calculate some function, that we want some function for the neural network to learn. And the neural network is going to learn what should the values of w0, w1, and w2 be? What should the activation function be in order to get the result that we would expect? So we can actually take a look at an example of this. What then is a very simple function that we might calculate? Well, if we recall back from when we were looking at propositional logic, one of the simplest functions we looked at was something like the or function that takes two inputs, x and y, and outputs 1, otherwise known as true, if either one of the inputs or both of them are 1, and outputs of 0 if both of the inputs are 0 or false. So this then is the or function. And this was the truth table for the or function, that as long as either of the inputs are 1, the output of the function is 1, and the only case where the output is 0 is where both of the inputs are 0. So the question is, how could we take this and train a neural network to be able to learn this particular function? What would those weights look like? Well, we could do something like this. Here's our neural network. And I'll propose that in order to calculate the or function, we're going to use a value of 1 for each of the weights. And we'll use a bias of negative 1. And then we'll just use this step function as our activation function. How then does this work? Well, if I wanted to calculate something like 0 or 0, which we know to be 0 because false or false is false, then what are we going to do? Well, our output unit is going to calculate this input multiplied by the weight, 0 times 1, that's 0. Same thing here, 0 times 1, that's 0. And we'll add to that the bias minus 1. So that'll give us a result of negative 1. If we plot that on our activation function, negative 1 is here. It's before the threshold, which means either 0 or 1. It's only 1 after the threshold. Since negative 1 is before the threshold, the output that this unit provides is going to be 0. And that's what we would expect it to be, that 0 or 0 should be 0. What if instead we had had 1 or 0, where this is the number 1? Well, in this case, in order to calculate what the output is going to be, we again have to do this weighted sum, 1 times 1, that's 1. 0 times 1, that's 0. Sum of that so far is 1. Add negative 1 to that. Well, then the output is 0. And if we plot 0 on the step function, 0 ends up being here. It's just at the threshold. And so the output here is going to be 1, because the output of 1 or 0, that's 1. So that's what we would expect as well. And just for one more example, if I had 1 or 1, what would the result be? Well, 1 times 1 is 1. 1 times 1 is 1. The sum of those is 2. I add the bias term to that. I get the number 1. 1 plotted on this graph is way over there. That's well beyond the threshold. And so this output is going to be 1 as well. The output is always 0 or 1, depending on whether or not we're past the threshold. And this neural network then models the OR function, a very simple function, definitely. But it still is able to model it correctly. If I give it the inputs, it will tell me what x1 or x2 happens to be. And you could imagine trying to do this for other functions as well. A function like the AND function, for instance, that takes two inputs and calculates whether both x and y are true. So if x is 1 and y is 1, then the output of x and y is 1. But in all the other cases, the output is 0. How could we model that inside of a neural network as well? Well, it turns out we could do it in the same way, except instead of negative 1 as the bias, we can use negative 2 as the bias instead. What does that end up looking like? Well, if I had 1 and 1, that should be 1, because 1 true and true is equal to true. Well, I take 1 times 1, that's 1. 1 times 1 is 1. I get a total sum of 2 so far. Now I add the bias of negative 2, and I get the value 0. And 0, when I plot it on the activation function, is just past that threshold, and so the output is going to be 1. But if I had any other input, for example, like 1 and 0, well, the weighted sum of these is 1 plus 0 is going to be 1. Minus 2 is going to give us negative 1, and negative 1 is not past that threshold, and so the output is going to be 0. So those then are some very simple functions that we can model using a neural network that has two inputs and one output, where our goal is to be able to figure out what those weights should be in order to determine what the output should be. And you could imagine generalizing this to calculate more complex functions as well, that maybe, given the humidity and the pressure, we want to calculate what's the probability that it's going to rain, for example. Or we might want to do a regressionstyle problem. We're given some amount of advertising, and given what month it is maybe, we want to predict what our expected sales are going to be for that particular month. So you could imagine these inputs and outputs being different as well. And it turns out that in some problems, we're not just going to have two inputs, and the nice thing about these neural networks is that we can compose multiple units together, make our networks more complex just by adding more units into this particular neural network. So the network we've been looking at has two inputs and one output. But we could just as easily say, let's go ahead and have three inputs in there, or have even more inputs, where we could arbitrarily decide however many inputs there are to our problem, all going to be calculating some sort of output that we care about figuring out the value of. How then does the math work for figuring out that output? Well, it's going to work in a very similar way. In the case of two inputs, we had two weights indicated by these edges, and we multiplied the weights by the numbers, adding this bias term. And we'll do the same thing in the other cases as well. If I have three inputs, you'll imagine multiplying each of these three inputs by each of these weights. If I had five inputs instead, we're going to do the same thing. Here I'm saying sum up from 1 to 5, xi multiplied by weight i. So take each of the five input variables, multiply them by their corresponding weight, and then add the bias to that. So this would be a case where there are five inputs into this neural network, for example. But there could be more, arbitrarily many nodes that we want inside of this neural network, where each time we're just going to sum up all of those input variables multiplied by their weight and then add the bias term at the very end. And so this allows us to be able to represent problems that have even more inputs just by growing the size of our neural network. Now, the next question we might ask is a question about how it is that we train these neural networks. In the case of the or function and the and function, they were simple enough functions that I could just tell you, like here, what the weights should be. And you could probably reason through it yourself what the weights should be in order to calculate the output that you want. But in general, with functions like predicting sales or predicting whether or not it's going to rain, these are much trickier functions to be able to figure out. We would like the computer to have some mechanism of calculating what it is that the weights should be, how it is to set the weights so that our neural network is able to accurately model the function that we care about trying to estimate. And it turns out that the strategy for doing this, inspired by the domain of calculus, is a technique called gradient descent. And what gradient descent is, it is an algorithm for minimizing loss when you're training a neural network. And recall that loss refers to how bad our hypothesis function happens to be, that we can define certain loss functions. And we saw some examples of loss functions last time that just give us a number for any particular hypothesis, saying, how poorly does it model the data? How many examples does it get wrong? How are they worse or less bad as compared to other hypothesis functions that we might define? And this loss function is just a mathematical function. And when you have a mathematical function, in calculus what you could do is calculate something known as the gradient, which you can think of as like a slope. It's the direction the loss function is moving at any particular point. And what it's going to tell us is, in which direction should we be moving these weights in order to minimize the amount of loss? And so generally speaking, we won't get into the calculus of it. But the high level idea for gradient descent is going to look something like this. If we want to train a neural network, we'll go ahead and start just by choosing the weights randomly. Just pick random weights for all of the weights in the neural network. And then we'll use the input data that we have access to in order to train the network, in order to figure out what the weights should actually be. So we'll repeat this process again and again. The first step is we're going to calculate the gradient based on all of the data points. So we'll look at all the data and figure out what the gradient is at the place where we currently are for the current setting of the weights, which means in which direction should we move the weights in order to minimize the total amount of loss, in order to make our solution better. And once we've calculated that gradient, which direction we should move in the loss function, well, then we can just update those weights according to the gradient. Take a small step in the direction of those weights in order to try to make our solution a little bit better. And the size of the step that we take, that's going to vary. And you can choose that when you're training a particular neural network. But in short, the idea is going to be take all the data points, figure out based on those data points in what direction the weights should move, and then move the weights one small step in that direction. And if you repeat that process over and over again, adjusting the weights a little bit at a time based on all the data points, eventually you should end up with a pretty good solution to trying to solve this sort of problem. At least that's what we would hope to happen. Now, if you look at this algorithm, a good question to ask anytime you're analyzing an algorithm is what is going to be the expensive part of doing the calculation? What's going to take a lot of work to try to figure out? What is going to be expensive to calculate? And in particular, in the case of gradient descent, the really expensive part is this all data points part right here, having to take all of the data points and using all of those data points figure out what the gradient is at this particular setting of all of the weights. Because odds are in a big machine learning problem where you're trying to solve a big problem with a lot of data, you have a lot of data points in order to calculate. And figuring out the gradient based on all of those data points is going to be expensive. And you'll have to do it many times. You'll likely repeat this process again and again and again, going through all the data points, taking one small step over and over as you try and figure out what the optimal setting of those weights happens to be. It turns out that we would ideally like to be able to train our neural networks faster, to be able to more quickly converge to some sort of solution that is going to be a good solution to the problem. So in that case, there are alternatives to just standard gradient descent, which looks at all of the data points at once. We can employ a method like stochastic gradient descent, which will randomly just choose one data point at a time to calculate the gradient based on, instead of calculating it based on all of the data points. So the idea there is that we have some setting of the weights. We pick a data point. And based on that one data point, we figure out in which direction should we move all of the weights and move the weights in that small direction, then take another data point and do that again and repeat this process again and again, maybe looking at each of the data points multiple times, but each time only using one data point to calculate the gradient, to calculate which direction we should move in. Now, just using one data point instead of all of the data points probably gives us a less accurate estimate of what the gradient actually is. But on the plus side, it's going to be much faster to be able to calculate, that we can much more quickly calculate what the gradient is based on one data point, instead of calculating based on all of the data points and having to do all of that computational work again and again. So there are tradeoffs here between looking at all of the data points and just looking at one data point. And it turns out that a middle ground that is also quite popular is a technique called minibatch gradient descent, where the idea there is instead of looking at all of the data versus just a single point, we instead divide our data set up into small batches, groups of data points, where you can decide how big a particular batch is. But in short, you're just going to look at a small number of points at any given time, hopefully getting a more accurate estimate of the gradient, but also not requiring all of the computational effort needed to look at every single one of these data points. So gradient descent, then, is this technique that we can use in order to train these neural networks, in order to figure out what the setting of all of these weights should be if we want some way to try and get an accurate notion of how it is that this function should work, some way of modeling how to transform the inputs into particular outputs. Now, so far, the networks that we've taken a look at have all been structured similar to this. We have some number of inputs, maybe two or three or five or more. And then we have one output that is just predicting like rain or no rain or just predicting one particular value. But often in machine learning problems, we don't just care about one output. We might care about an output that has multiple different values associated with it. So in the same way that we could take a neural network and add units to the input layer, we can likewise add inputs or add outputs to the output layer as well. Instead of just one output, you could imagine we have two outputs, or we could have four outputs, for example, where in each case, as we add more inputs or add more outputs, if we want to keep this network fully connected between these two layers, we just need to add more weights, that now each of these input nodes has four weights associated with each of the four outputs. And that's true for each of these various different input nodes. So as we add nodes, we add more weights in order to make sure that each of the inputs can somehow be connected to each of the outputs so that each output value can be calculated based on what the value of the input happens to be. So what might a case be where we want multiple different output values? Well, you might consider that in the case of weather predicting, for example, we might not just care whether it's raining or not raining. There might be multiple different categories of weather that we would like to categorize the weather into. With just a single output variable, we can do a binary classification, like rain or no rain, for instance, 1 or 0. But it doesn't allow us to do much more than that. With multiple output variables, I might be able to use each one to predict something a little different. Maybe I want to categorize the weather into one of four different categories, something like is it going to be raining or sunny or cloudy or snowy. And I now have four output variables that can be used to represent maybe the probability that it is rainy as opposed to sunny as opposed to cloudy or as opposed to snowy. How then would this neural network work? Well, we have some input variables that represent some data that we have collected about the weather. Each of those inputs gets multiplied by each of these various different weights. We have more multiplications to do, but these are fairly quick mathematical operations to perform. And then what we get is after passing them through some sort of activation function in the outputs, we end up getting some sort of number, where that number, you might imagine, you could interpret as a probability, like a probability that it is one category as opposed to another category. So here we're saying that based on the inputs, we think there is a 10% chance that it's raining, a 60% chance that it's sunny, a 20% chance of cloudy, a 10% chance that it's snowy. And given that output, if these represent a probability distribution, well, then you could just pick whichever one has the highest value, in this case, sunny, and say that, well, most likely, we think that this categorization of inputs means that the output should be snowy or should be sunny. And that is what we would expect the weather to be in this particular instance. And so this allows us to do these sort of multiclass classifications, where instead of just having a binary classification, 1 or 0, we can have as many different categories as we want. And we can have our neural network output these probabilities over which categories are more likely than other categories. And using that data, we're able to draw some sort of inference on what it is that we should do. So this was sort of the idea of supervised machine learning. I can give this neural network a whole bunch of data, a whole bunch of input data corresponding to some label, some output data, like we know that it was raining on this day, we know that it was sunny on that day. And using all of that data, the algorithm can use gradient descent to figure out what all of the weights should be in order to create some sort of model that hopefully allows us a way to predict what we think the weather is going to be. But neural networks have a lot of other applications as well. You could imagine applying the same sort of idea to a reinforcement learning sort of example as well, where you remember that in reinforcement learning, what we wanted to do is train some sort of agent to learn what action to take, depending on what state they currently happen to be in. So depending on the current state of the world, we wanted the agent to pick from one of the available actions that is available to them. And you might model that by having each of these input variables represent some information about the state, some data about what state our agent is currently in. And then the output, for example, could be each of the various different actions that our agent could take, action 1, 2, 3, and 4. And you might imagine that this network would work in the same way, but based on these particular inputs, we go ahead and calculate values for each of these outputs. And those outputs could model which action is better than other actions. And we could just choose, based on looking at those outputs, which action we should take. And so these neural networks are very broadly applicable, that all they're really doing is modeling some mathematical function. So anything that we can frame as a mathematical function, something like classifying inputs into various different categories or figuring out based on some input state what action we should take, these are all mathematical functions that we could attempt to model by taking advantage of this neural network structure, and in particular, taking advantage of this technique, gradient descent, that we can use in order to figure out what the weights should be in order to do this sort of calculation. Now, how is it that you would go about training a neural network that has multiple outputs instead of just one? Well, with just a single output, we could see what the output for that value should be, and then you update all of the weights that corresponded to it. And when we have multiple outputs, at least in this particular case, we can really think of this as four separate neural networks, that really we just have one network here that has these three inputs corresponding with these three weights corresponding to this one output value. And the same thing is true for this output value. This output value effectively defines yet another neural network that has these same three inputs, but a different set of weights that correspond to this output. And likewise, this output has its own set of weights as well, and same thing for the fourth output too. And so if you wanted to train a neural network that had four outputs instead of just one, in this case where the inputs are directly connected to the outputs, you could really think of this as just training four independent neural networks. We know what the outputs for each of these four should be based on our input data, and using that data, we can begin to figure out what all of these individual weights should be. And maybe there's an additional step at the end to make sure that we turn these values into a probability distribution such that we can interpret which one is better than another or more likely than another as a category or something like that. So this then seems like it does a pretty good job of taking inputs and trying to predict what outputs should be. And we'll see some real examples of this in just a moment as well. But it's important then to think about what the limitations of this sort of approach is, of just taking some linear combination of inputs and passing it into some sort of activation function. And it turns out that when we do this in the case of binary classification, trying to predict does it belong to one category or another, we can only predict things that are linearly separable. Because we're taking a linear combination of inputs and using that to define some decision boundary or threshold, then what we get is a situation where if we have this set of data, we can predict a line that separates linearly the red points from the blue points, but a single unit that is making a binary classification, otherwise known as a perceptron, can't deal with a situation like this, where we've seen this type of situation before, where there is no straight line that just goes straight through the data that will divide the red points away from the blue points. It's a more complex decision boundary. The decision boundary somehow needs to capture the things inside of this circle. And there isn't really a line that will allow us to deal with that. So this is the limitation of the perceptron, these units that just make these binary decisions based on their inputs, that a single perceptron is only capable of learning a linearly separable decision boundary. All it can do is define a line. And sure, it can give us probabilities based on how close to that decision boundary we are, but it can only really decide based on a linear decision boundary. And so this doesn't seem like it's going to generalize well to situations where real world data is involved, because real world data often isn't linearly separable. It often isn't the case that we can just draw a line through the data and be able to divide it up into multiple groups. So what then is the solution to this? Well, what was proposed was the idea of a multilayer neural network, that so far all of the neural networks we've seen have had a set of inputs and a set of outputs, and the inputs are connected to those outputs. But in a multilayer neural network, this is going to be an artificial neural network that has an input layer still. It has an output layer, but also has one or more hidden layers in between. Other layers of artificial neurons or units that are going to calculate their own values as well. So instead of a neural network that looks like this with three inputs and one output, you might imagine in the middle here injecting a hidden layer, something like this. This is a hidden layer that has four nodes. You could choose how many nodes or units end up going into the hidden layer. You can have multiple hidden layers as well. And so now each of these inputs isn't directly connected to the output. Each of the inputs is connected to this hidden layer. And then all of the nodes in the hidden layer, those are connected to the one output. And so this is just another step that we can take towards calculating more complex functions. Each of these hidden units will calculate its output value, otherwise known as its activation, based on a linear combination of all the inputs. And once we have values for all of these nodes, as opposed to this just being the output, we do the same thing again. Calculate the output for this node based on multiplying each of the values for these units by their weights as well. So in effect, the way this works is that we start with inputs. They get multiplied by weights in order to calculate values for the hidden nodes. Those get multiplied by weights in order to figure out what the ultimate output is going to be. And the advantage of layering things like this is it gives us an ability to model more complex functions, that instead of just having a single decision boundary, a single line dividing the red points from the blue points, each of these hidden nodes can learn a different decision boundary. And we can combine those decision boundaries to figure out what the ultimate output is going to be. And as we begin to imagine more complex situations, you could imagine each of these nodes learning some useful property or learning some useful feature of all of the inputs and us somehow learning how to combine those features together in order to get the output that we actually want. Now, the natural question when we begin to look at this now is to ask the question of, how do we train a neural network that has hidden layers inside of it? And this turns out to initially be a bit of a tricky question, because the input data that we are given is we are given values for all of the inputs, and we're given what the value of the output should be, what the category is, for example. But the input data doesn't tell us what the values for all of these nodes should be. So we don't know how far off each of these nodes actually is because we're only given data for the inputs and the outputs. The reason this is called the hidden layer is because the data that is made available to us doesn't tell us what the values for all of these intermediate nodes should actually be. And so the strategy people came up with was to say that if you know what the error or the losses on the output node, well, then based on what these weights are, if one of these weights is higher than another, you can calculate an estimate for how much the error from this node was due to this part of the hidden node, or this part of the hidden layer, or this part of the hidden layer, based on the values of these weights, in effect saying that based on the error from the output, I can back propagate the error and figure out an estimate for what the error is for each of these nodes in the hidden layer as well. And there's some more calculus here that we won't get into the details of, but the idea of this algorithm is known as back propagation. It's an algorithm for training a neural network with multiple different hidden layers. And the idea for this, the pseudocode for it, will again be if we want to run gradient descent with back propagation. We'll start with a random choice of weights, as we did before. And now we'll go ahead and repeat the training process again and again. But what we're going to do each time is now we're going to calculate the error for the output layer first. We know the output and what it should be, and we know what we calculated so we can figure out what the error there is. But then we're going to repeat for every layer, starting with the output layer, moving back into the hidden layer, then the hidden layer before that if there are multiple hidden layers, going back all the way to the very first hidden layer, assuming there are multiple, we're going to propagate the error back one layer. Whatever the error was from the output, figure out what the error should be a layer before that based on what the values of those weights are. And then we can update those weights. So graphically, the way you might think about this is that we first start with the output. We know what the output should be. We know what output we calculated. And based on that, we can figure out, all right, how do we need to update those weights? Backpropagating the error to these nodes. And using that, we can figure out how we should update these weights. And you might imagine if there are multiple layers, we could repeat this process again and again to begin to figure out how all of these weights should be updated. And this backpropagation algorithm is really the key algorithm that makes neural networks possible. It makes it possible to take these multilevel structures and be able to train those structures depending on what the values of these weights are in order to figure out how it is that we should go about updating those weights in order to create some function that is able to minimize the total amount of loss, to figure out some good setting of the weights that will take the inputs and translate it into the output that we expect. And this works, as we said, not just for a single hidden layer. But you can imagine multiple hidden layers, where each hidden layer we just define however many nodes we want, where each of the nodes in one layer, we can connect to the nodes in the next layer, defining more and more complex networks that are able to model more and more complex types of functions. And so this type of network is what we might call a deep neural network, part of a larger family of deep learning algorithms, if you've ever heard that term. And all deep learning is about is it's using multiple layers to be able to predict and be able to model higher level features inside of the input, to be able to figure out what the output should be. And so a deep neural network is just a neural network that has multiple of these hidden layers, where we start at the input, calculate values for this layer, then this layer, then this layer, and then ultimately get an output. And this allows us to be able to model more and more sophisticated types of functions, that each of these layers can calculate something a little bit different, and we can combine that information to figure out what the output should be. Of course, as with any situation of machine learning, as we begin to make our models more and more complex, to model more and more complex functions, the risk we run is something like overfitting. And we talked about overfitting last time in the context of overfitting based on when we were training our models to be able to learn some sort of decision boundary, where overfitting happens when we fit too closely to the training data. And as a result, we don't generalize well to other situations as well. And one of the risks we run with a far more complex neural network that has many, many different nodes is that we might overfit based on the input data. We might grow over reliant on certain nodes to calculate things just purely based on the input data that doesn't allow us to generalize very well to the output. And there are a number of strategies for dealing with overfitting. But one of the most popular in the context of neural networks is a technique known as dropout. And what dropout does is it, when we're training the neural network, what we'll do in dropout is temporarily remove units, temporarily remove these artificial neurons from our network chosen at random. And the goal here is to prevent overreliance on certain units. What generally happens in overfitting is that we begin to overrely on certain units inside the neural network to be able to tell us how to interpret the input data. What dropout will do is randomly remove some of these units in order to reduce the chance that we overrely on certain units to make our neural network more robust, to be able to handle the situations even when we just drop out particular neurons entirely. So the way that might work is we have a network like this. And as we're training it, when we go about trying to update the weights the first time, we'll just randomly pick some percentage of the nodes to drop out of the network. It's as if those nodes aren't there at all. It's as if the weights associated with those nodes aren't there at all. And we'll train it this way. Then the next time we update the weights, we'll pick a different set and just go ahead and train that way. And then again, randomly choose and train with other nodes that have been dropped out as well. And the goal of that is that after the training process, if you train by dropping out random nodes inside of this neural network, you hopefully end up with a network that's a little bit more robust, that doesn't rely too heavily on any one particular node, but more generally learns how to approximate a function in general. So that then is a look at some of these techniques that we can use in order to implement a neural network, to get at the idea of taking this input, passing it through these various different layers in order to produce some sort of output. And what we'd like to do now is take those ideas and put them into code. And to do that, there are a number of different machine learning libraries, neural network libraries that we can use that allow us to get access to someone's implementation of back propagation and all of these hidden layers. And one of the most popular, developed by Google, is known as TensorFlow, a library that we can use for quickly creating neural networks and modeling them and running them on some sample data to see what the output is going to be. And before we actually start writing code, we'll go ahead and take a look at TensorFlow's playground, which will be an opportunity for us just to play around with this idea of neural networks in different layers, just to get a sense for what it is that we can do by taking advantage of neural networks. So let's go ahead and go into TensorFlow's playground, which you can go to by visiting that URL from before. And what we're going to do now is we're going to try and learn the decision boundary for this particular output. I want to learn to separate the orange points from the blue points. And I'd like to learn some sort of setting of weights inside of a neural network that will be able to separate those from each other. The features we have access to, our input data, are the x value and the y value, so the two values along each of the two axes. And what I'll do now is I can set particular parameters, like what activation function I would like to use. And I'll just go ahead and press play and see what happens. And what happens here is that you'll see that just by using these two input features, the x value and the y value, with no hidden layers, just take the input, x and y values, and figure out what the decision boundary is. Our neural network learns pretty quickly that in order to divide these two points, we should just use this line. This line acts as a decision boundary that separates this group of points from that group of points, and it does it very well. You can see up here what the loss is. The training loss is 0, meaning we were able to perfectly model separating these two points from each other inside of our training data. So this was a fairly simple case of trying to apply a neural network because the data is very clean. It's very nicely linearly separable. We could just draw a line that separates all of those points from each other. Let's now consider a more complex case. So I'll go ahead and pause the simulation, and we'll go ahead and look at this data set here. This data set is a little bit more complex now. In this data set, we still have blue and orange points that we'd like to separate from each other. But there's no single line that we can draw that is going to be able to figure out how to separate the blue from the orange, because the blue is located in these two quadrants, and the orange is located here and here. It's a more complex function to be able to learn. So let's see what happens. If we just try and predict based on those inputs, the x and y coordinates, what the output should be, I'll press Play. And what you'll notice is that we're not really able to draw much of a conclusion, that we're not able to very cleanly see how we should divide the orange points from the blue points, and you don't see a very clean separation there. So it seems like we don't have enough sophistication inside of our network to be able to model something that is that complex. We need a better model for this neural network. And I'll do that by adding a hidden layer. So now I have a hidden layer that has two neurons inside of it. So I have two inputs that then go to two neurons inside of a hidden layer that then go to our output. And now I'll press Play. And what you'll notice here is that we're able to do slightly better. We're able to now say, all right, these points are definitely blue. These points are definitely orange. We're still struggling a little bit with these points up here, though. And what we can do is we can see for each of these hidden neurons, what is it exactly that these hidden neurons are doing? Each hidden neuron is learning its own decision boundary. And we can see what that boundary is. This first neuron is learning, all right, this line that seems to separate some of the blue points from the rest of the points. This other hidden neuron is learning another line that seems to be separating the orange points in the lower right from the rest of the points. So that's why we're able to figure out these two areas in the bottom region. But we're still not able to perfectly classify all of the points. So let's go ahead and add another neuron. Now we've got three neurons inside of our hidden layer and see what we're able to learn now. All right, well, now we seem to be doing a better job. By learning three different decision boundaries, which each of the three neurons inside of our hidden layer, we're able to much better figure out how to separate these blue points from the orange points. And we can see what each of these hidden neurons is learning. Each one is learning a slightly different decision boundary. And then we're combining those decision boundaries together to figure out what the overall output should be. And then we can try it one more time by adding a fourth neuron there and try learning that. And it seems like now we can do even better at trying to separate the blue points from the orange points. But we were only able to do this by adding a hidden layer, by adding some layer that is learning some other boundaries and combining those boundaries to determine the output. And the strength, the size and thickness of these lines indicate how high these weights are, how important each of these inputs is for making this sort of calculation. And we can do maybe one more simulation. Let's go ahead and try this on a data set that looks like this. Go ahead and get rid of the hidden layer. Here now we're trying to separate the blue points from the orange points where all the blue points are located, again, inside of a circle effectively. So we're not going to be able to learn a line. Notice I press Play. And we're really not able to draw any sort of classification at all because there is no line that cleanly separates the blue points from the orange points. So let's try to solve this by introducing a hidden layer. I'll go ahead and press Play. And all right, with two neurons in a hidden layer, we're able to do a little better because we effectively learned two different decision boundaries. We learned this line here. And we learned this line on the righthand side. And right now we're just saying, all right, well, if it's in between, we'll call it blue. And if it's outside, we'll call it orange. So not great, but certainly better than before, that we're learning one decision boundary and another. And based on those, we can figure out what the output should be. But let's now go ahead and add a third neuron and see what happens now. I go ahead and train it. And now, using three different decision boundaries that are learned by each of these hidden neurons, we're able to much more accurately model this distinction between blue points and orange points. We're able to figure out maybe with these three decision boundaries, combining them together, you can imagine figuring out what the output should be and how to make that sort of classification. And so the goal here is just to get a sense for having more neurons in these hidden layers allows us to learn more structure in the data, allows us to figure out what the relevant and important decision boundaries are. And then using this backpropagation algorithm, we're able to figure out what the values of these weights should be in order to train this network to be able to classify one category of points away from another category of points instead. And this is ultimately what we're going to be trying to do whenever we're training a neural network. So let's go ahead and actually see an example of this. You'll recall from last time that we had this banknotes file that included information about counterfeit banknotes as opposed to authentic banknotes, where I had four different values for each banknote and then a categorization of whether that banknote is considered to be authentic or a counterfeit note. And what I wanted to do was, based on that input information, figure out some function that could calculate based on the input information what category it belonged to. And what I've written here in banknotes.py is a neural network that will learn just that, a network that learns based on all of the input whether or not we should categorize a banknote as authentic or as counterfeit. The first step is the same as what we saw from last time. I'm really just reading the data in and getting it into an appropriate format. And so this is where more of the writing Python code on your own comes in, in terms of manipulating this data, massaging the data into a format that will be understood by a machine learning library like scikitlearn or like TensorFlow. And so here I separate it into a training and a testing set. And now what I'm doing down below is I'm creating a neural network. Here I'm using TF, which stands for TensorFlow. Up above, I said import TensorFlow as TF, TF just an abbreviation that we'll often use so we don't need to write out TensorFlow every time we want to use anything inside of the library. I'm using TF.keras. Keras is an API, a set of functions that we can use in order to manipulate neural networks inside of TensorFlow. And it turns out there are other machine learning libraries that also use the Keras API. But here I'm saying, all right, go ahead and give me a model that is a sequential model, a sequential neural network, meaning one layer after another. And now I'm going to add to that model what layers I want inside of my neural network. So here I'm saying model.add. Go ahead and add a dense layer. And when we say a dense layer, we mean a layer that is just each of the nodes inside of the layer is going to be connected to each of the nodes from the previous layer. So we have a densely connected layer. This layer is going to have eight units inside of it. So it's going to be a hidden layer inside of a neural network with eight different units, eight artificial neurons, each of which might learn something different. And I just sort of chose eight arbitrarily. You could choose a different number of hidden nodes inside of the layer. And as we saw before, depending on the number of units there are inside of your hidden layer, more units means you can learn more complex functions. So maybe you can more accurately model the training data. But it comes at the cost. More units means more weights that you need to figure out how to update. So it might be more expensive to do that calculation. And you also run the risk of overfitting on the data. If you have too many units and you learn to just overfit on the training data, that's not good either. So there is a balance. And there's often a testing process where you'll train on some data and maybe validate how well you're doing on a separate set of data, often called a validation set, to see, all right, which setting of parameters. How many layers should I have? How many units should be in each layer? Which one of those performs the best on the validation set? So you can do some testing to figure out what these hyper parameters, so called, should be equal to. Next, I specify what the input shape is. Meaning, all right, what does my input look like? My input has four values. And so the input shape is just four, because we have four inputs. And then I specify what the activation function is. And the activation function, again, we can choose. There are a number of different activation functions. Here I'm using relu, which you might recall from earlier. And then I'll add an output layer. So I have my hidden layer. Now I'm adding one more layer that will just have one unit, because all I want to do is predict something like counterfeit build or authentic build. So I just need a single unit. And the activation function I'm going to use here is that sigmoid activation function, which, again, was that Sshaped curve that just gave us a probability of what is the probability that this is a counterfeit build, as opposed to an authentic build. So that, then, is the structure of my neural network, a sequential neural network that has one hidden layer with eight units inside of it, and then one output layer that just has a single unit inside of it. And I can choose how many units there are. I can choose the activation function. Then I'm going to compile this model. TensorFlow gives you a choice of how you would like to optimize the weights. There are various different algorithms for doing that. What type of loss function you want to use. Again, many different options for doing that. And then how I want to evaluate my model, well, I care about accuracy. I care about how many of my points am I able to classify correctly versus not correctly as counterfeit or not counterfeit. And I would like it to report to me how accurate my model is performing. Then, now that I've defined that model, I call model.fit to say go ahead and train the model. Train it on all the training data plus all of the training labels. So labels for each of those pieces of training data. And I'm saying run it for 20 epics, meaning go ahead and go through each of these training points 20 times, effectively. Go through the data 20 times and keep trying to update the weights. If I did it for more, I could train for even longer and maybe get a more accurate result. But then after I fit it on all the data, I'll go ahead and just test it. I'll evaluate my model using model.evaluate built into TensorFlow that is just going to tell me how well do I perform on the testing data. So ultimately, this is just going to give me some numbers that tell me how well we did in this particular case. So now what I'm going to do is go into banknotes and go ahead and run banknotes.py. And what's going to happen now is it's going to read in all of that training data. It's going to generate a neural network with all my inputs, my eight hidden units inside my layer, and then an output unit. And now what it's doing is it's training. It's training 20 times. And each time you can see how my accuracy is increasing on my training data. It starts off the very first time not very accurate, though better than random, something like 79% of the time. It's able to accurately classify one bill from another. But as I keep training, notice this accuracy value improves and improves and improves until after I've trained through all the data points 20 times, it looks like my accuracy is above 99% on the training data. And here's where I tested it on a whole bunch of testing data. And it looks like in this case, I was also like 99.8% accurate. So just using that, I was able to generate a neural network that can detect counterfeit bills from authentic bills based on this input data 99.8% of the time, at least based on this particular testing data. And I might want to test it with more data as well, just to be confident about that. But this is really the value of using a machine learning library like TensorFlow. And there are others available for Python and other languages as well. But all I have to do is define the structure of the network and define the data that I'm going to pass into the network. And then TensorFlow runs the backpropagation algorithm for learning what all of those weights should be, for figuring out how to train this neural network to be able to accurately, as accurately as possible, figure out what the output values should be there as well. And so this then was a look at what it is that neural networks can do just using these sequences of layer after layer after layer. And you can begin to imagine applying these to much more general problems. And one big problem in computing and artificial intelligence more generally is the problem of computer vision. Computer vision is all about computational methods for analyzing and understanding images. You might have pictures that you want the computer to figure out how to deal with, how to process those images and figure out how to produce some sort of useful result out of this. You've seen this in the context of social media websites that are able to look at a photo that contains a whole bunch of faces. And it's able to figure out what's a picture of whom and label those and tag them with appropriate people. This is becoming increasingly relevant as we begin to discuss selfdriving cars, that these cars now have cameras. And we would like for the computer to have some sort of algorithm that looks at the image and figures out what color is the light, what cars are around us and in what direction, for example. And so computer vision is all about taking an image and figuring out what sort of computation, what sort of calculation we can do with that image. It's also relevant in the context of something like handwriting recognition. This, what you're looking at, is an example of the MNIST data set. It's a big data set just of handwritten digits that we could use to ideally try and figure out how to predict, given someone's handwriting, given a photo of a digit that they have drawn, can you predict whether it's a 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9, for example. So this sort of handwriting recognition is yet another task that we might want to use computer vision tasks and tools to be able to apply it towards. This might be a task that we might care about. So how, then, can we use neural networks to be able to solve a problem like this? Well, neural networks rely upon some sort of input where that input is just numerical data. We have a whole bunch of units where each one of them just represents some sort of number. And so in the context of something like handwriting recognition or in the context of just an image, you might imagine that an image is really just a grid of pixels, grid of dots where each dot has some sort of color. And in the context of something like handwriting recognition, you might imagine that if you just fill in each of these dots in a particular way, you can generate a 2 or an 8, for example, based on which dots happen to be shaded in and which dots are not. And we can represent each of these pixel values just using numbers. So for a particular pixel, for example, 0 might represent entirely black. Depending on how you're representing color, it's often common to represent color values on a 0 to 255 range so that you can represent a color using 8 bits for a particular value, like how much white is in the image. So 0 might represent all black. 255 might represent entirely white as a pixel. And somewhere in between might represent some shade of gray, for example. But you might imagine not just having a single slider that determines how much white is in the image, but if you had a color image, you might imagine three different numerical values, a red, green, and blue value, where the red value controls how much red is in the image. We have one value for controlling how much green is in the pixel and one value for how much blue is in the pixel as well. And depending on how it is that you set these values of red, green, and blue, you can get a different color. And so any pixel can really be represented, in this case, by three numerical values, a red value, a green value, and a blue value. And if you take a whole bunch of these pixels, assemble them together inside of a grid of pixels, then you really just have a whole bunch of numerical values that you can use in order to perform some sort of prediction task. And so what you might imagine doing is using the same techniques we talked about before, just design a neural network with a lot of inputs, that for each of the pixels, we might have one or three different inputs in the case of a color image, a different input that is just connected to a deep neural network, for example. And this deep neural network might take all of the pixels inside of the image of what digit a person drew. And the output might be like 10 neurons that classify it as a 0, or a 1, or a 2, or a 3, or just tells us in some way what that digit happens to be. Now, there are a couple of drawbacks to this approach. The first drawback to the approach is just the size of this input array, that we have a whole bunch of inputs. If we have a big image that has a lot of different channels, we're looking at a lot of inputs, and therefore a lot of weights that we have to calculate. And a second problem is the fact that by flattening everything into just this structure of all the pixels, we've lost access to a lot of the information about the structure of the image that's relevant, that really, when a person looks at an image, they're looking at particular features of the image. They're looking at curves. They're looking at shapes. They're looking at what things can you identify in different regions of the image, and maybe put those things together in order to get a better picture of what the overall image is about. And by just turning it into pixel values for each of the pixels, sure, you might be able to learn that structure, but it might be challenging in order to do so. It might be helpful to take advantage of the fact that you can use properties of the image itself, the fact that it's structured in a particular way, to be able to improve the way that we learn based on that image too. So in order to figure out how we can train our neural networks to better be able to deal with images, we'll introduce a couple of ideas, a couple of algorithms that we can apply that allow us to take the image and extract some useful information out of that image. And the first idea we'll introduce is the notion of image convolution. And what image convolution is all about is it's about filtering an image, sort of extracting useful or relevant features out of the image. And the way we do that is by applying a particular filter that basically adds the value for every pixel with the values for all of the neighboring pixels to it, according to some sort of kernel matrix, which we'll see in a moment, is going to allow us to weight these pixels in various different ways. And the goal of image convolution, then, is to extract some sort of interesting or useful features out of an image, to be able to take a pixel and, based on its neighboring pixels, maybe predict some sort of valuable information. Something like taking a pixel and looking at its neighboring pixels, you might be able to predict whether or not there's some sort of curve inside the image, or whether it's forming the outline of a particular line or a shape, for example. And that might be useful if you're trying to use all of these various different features to combine them to say something meaningful about an image as a whole. So how, then, does image convolution work? Well, we start with a kernel matrix. And the kernel matrix looks something like this. And the idea of this is that, given a pixel that will be the middle pixel, we're going to multiply each of the neighboring pixels by these values in order to get some sort of result by summing up all the numbers together. So if I take this kernel, which you can think of as a filter that I'm going to apply to the image, and let's say that I take this image. This is a 4 by 4 image. We'll think of it as just a black and white image, where each one is just a single pixel value. So somewhere between 0 and 255, for example. So we have a whole bunch of individual pixel values like this. And what I'd like to do is apply this kernel, this filter, so to speak, to this image. And the way I'll do that is, all right, the kernel is 3 by 3. You can imagine a 5 by 5 kernel or a larger kernel, too. And I'll take it and just first apply it to the first 3 by 3 section of the image. And what I'll do is I'll take each of these pixel values, multiply it by its corresponding value in the filter matrix, and add all of the results together. So here, for example, I'll say 10 times 0, plus 20 times negative 1, plus 30 times 0, so on and so forth, doing all of this calculation. And at the end, if I take all these values, multiply them by their corresponding value in the kernel, add the results together, for this particular set of 9 pixels, I get the value of 10, for example. And then what I'll do is I'll slide this 3 by 3 grid, effectively, over. I'll slide the kernel by 1 to look at the next 3 by 3 section. Here, I'm just sliding it over by 1 pixel. But you might imagine a different stride length, or maybe I jump by multiple pixels at a time if you really wanted to. You have different options here. But here, I'm just sliding over, looking at the next 3 by 3 section. And I'll do the same math, 20 times 0, plus 30 times negative 1, plus 40 times 0, plus 20 times negative 1, so on and so forth, plus 30 times 5. And what I end up getting is the number 20. Then you can imagine shifting over to this one, doing the same thing, calculating the number 40, for example, and then doing the same thing here, and calculating a value there as well. And so what we have now is what we'll call a feature map. We have taken this kernel, applied it to each of these various different regions, and what we get is some representation of a filtered version of that image. And so to give a more concrete example of why it is that this kind of thing could be useful, let's take this kernel matrix, for example, which is quite a famous one, that has an 8 in the middle, and then all of the neighboring pixels get a negative 1. And let's imagine we wanted to apply that to a 3 by 3 part of an image that looks like this, where all the values are the same. They're all 20, for instance. Well, in this case, if you do 20 times 8, and then subtract 20, subtract 20, subtract 20 for each of the eight neighbors, well, the result of that is you just get that expression, which comes out to be 0. You multiplied 20 by 8, but then you subtracted 20 eight times, according to that particular kernel. The result of all that is just 0. So the takeaway here is that when a lot of the pixels are the same value, we end up getting a value close to 0. If, though, we had something like this, 20 is along this first row, then 50 is in the second row, and 50 is in the third row, well, then when you do this, because it's the same kind of math, 20 times negative 1, 20 times negative 1, so on and so forth, then I get a higher value, a value like 90 in this particular case. And so the more general idea here is that by applying this kernel, negative 1s, 8 in the middle, and then negative 1s, what I get is when this middle value is very different from the neighboring values, like 50 is greater than these 20s, then you'll end up with a value higher than 0. If this number is higher than its neighbors, you end up getting a bigger output. But if this value is the same as all of its neighbors, then you get a lower output, something like 0. And it turns out that this sort of filter can therefore be used in something like detecting edges in an image. Or I want to detect the boundaries between various different objects inside of an image. I might use a filter like this, which is able to tell whether the value of this pixel is different from the values of the neighboring pixel, if it's greater than the values of the pixels that happen to surround it. And so we can use this in terms of image filtering. And so I'll show you an example of that. I have here in filter.py a file that uses Python's image library, or PIL, to do some image filtering. I go ahead and open an image. And then all I'm going to do is apply a kernel to that image. It's going to be a 3 by 3 kernel, same kind of kernel we saw before. And here is the kernel. This is just a list representation of the same matrix that I showed you a moment ago. It's negative 1, negative 1, negative 1. The second row is negative 1, 8, negative 1. And the third row is all negative 1s. And then at the end, I'm going to go ahead and show the filtered image. So if, for example, I go into convolution directory and I open up an image, like bridge.png, this is what an input image might look like, just an image of a bridge over a river. Now I'm going to go ahead and run this filter program on the bridge. And what I get is this image here. Just by taking the original image and applying that filter to each 3 by 3 grid, I've extracted all of the boundaries, all of the edges inside the image that separate one part of the image from another. So here I've got a representation of boundaries between particular parts of the image. And you might imagine that if a machine learning algorithm is trying to learn what an image is of, a filter like this could be pretty useful. Maybe the machine learning algorithm doesn't care about all of the details of the image. It just cares about certain useful features. It cares about particular shapes that are able to help it determine that based on the image, this is going to be a bridge, for example. And so this type of idea of image convolution can allow us to apply filters to images that allow us to extract useful results out of those images, taking an image and extracting its edges, for example. And you might imagine many other filters that could be applied to an image that are able to extract particular values as well. And a filter might have separate kernels for the red values, the green values, and the blue values that are all summed together at the end, such that you could have particular filters looking for, is there red in this part of the image? Are there green in other parts of the image? You can begin to assemble these relevant and useful filters that are able to do these calculations as well. So that then was the idea of image convolution, applying some sort of filter to an image to be able to extract some useful features out of that image. But all the while, these images are still pretty big. There's a lot of pixels involved in the image. And realistically speaking, if you've got a really big image, that poses a couple of problems. One, it means a lot of input going into the neural network. But two, it also means that we really have to care about what's in each particular pixel. Whereas realistically, we often, if you're looking at an image, you don't care whether something is in one particular pixel versus the pixel immediately to the right of it. They're pretty close together. You really just care about whether there's a particular feature in some region of the image. And maybe you don't care about exactly which pixel it happens to be in. And so there's a technique we can use known as pooling. And what pooling is, is it means reducing the size of an input by sampling from regions inside of the input. So we're going to take a big image and turn it into a smaller image by using pooling. And in particular, one of the most popular types of pooling is called max pooling. And what max pooling does is it pools just by choosing the maximum value in a particular region. So for example, let's imagine I had this 4 by 4 image. But I wanted to reduce its dimensions. I wanted to make it a smaller image so that I have fewer inputs to work with. Well, what I could do is I could apply a 2 by 2 max pool, where the idea would be that I'm going to first look at this 2 by 2 region and say, what is the maximum value in that region? Well, it's the number 50. So we'll go ahead and just use the number 50. And then we'll look at this 2 by 2 region. What is the maximum value here? It's 110, so that's going to be my value. Likewise here, the maximum value looks like 20. Go ahead and put that there. Then for this last region, the maximum value was 40. So we'll go ahead and use that. And what I have now is a smaller representation of this same original image that I obtained just by picking the maximum value from each of these regions. So again, the advantages here are now I only have to deal with a 2 by 2 input instead of a 4 by 4. And you can imagine shrinking the size of an image even more. But in addition to that, I'm now able to make my analysis independent of whether a particular value was in this pixel or this pixel. I don't care if the 50 was here or here. As long as it was generally in this region, I'll still get access to that value. So it makes our algorithms a little bit more robust as well. So that then is pooling, taking the size of the image, reducing it a little bit by just sampling from particular regions inside of the image. And now we can put all of these ideas together, pooling, image convolution, and neural networks all together into another type of neural network called a convolutional neural network, or a CNN, which is a neural network that uses this convolution step usually in the context of analyzing an image, for example. And so the way that a convolutional neural network works is that we start with some sort of input image, some grid of pixels. But rather than immediately put that into the neural network layers that we've seen before, we'll start by applying a convolution step, where the convolution step involves applying some number of different image filters to our original image in order to get what we call a feature map, the result of applying some filter to an image. And we could do this once, but in general, we'll do this multiple times, getting a whole bunch of different feature maps, each of which might extract some different relevant feature out of the image, some different important characteristic of the image that we might care about using in order to calculate what the result should be. And in the same way that when we train neural networks, we can train neural networks to learn the weights between particular units inside of the neural networks, we can also train neural networks to learn what those filters should be, what the values of the filters should be in order to get the most useful, most relevant information out of the original image just by figuring out what setting of those filter values, the values inside of that kernel, results in minimizing the loss function, minimizing how poorly our hypothesis actually performs in figuring out the classification of a particular image, for example. So we first apply this convolution step, get a whole bunch of these various different feature maps. But these feature maps are quite large. There's a lot of pixel values that happen to be here. And so a logical next step to take is a pooling step, where we reduce the size of these images by using max pooling, for example, extracting the maximum value from any particular region. There are other pooling methods that exist as well, depending on the situation. You could use something like average pooling, where instead of taking the maximum value from a region, you take the average value from a region, which has its uses as well. But in effect, what pooling will do is it will take these feature maps and reduce their dimensions so that we end up with smaller grids with fewer pixels. And this then is going to be easier for us to deal with. It's going to mean fewer inputs that we have to worry about. And it's also going to mean we're more resilient, more robust against potential movements of particular values, just by one pixel, when ultimately we really don't care about those onepixel differences that might arise in the original image. And now, after we've done this pooling step, now we have a whole bunch of values that we can then flatten out and just put into a more traditional neural network. So we go ahead and flatten it, and then we end up with a traditional neural network that has one input for each of these values in each of these resulting feature maps after we do the convolution and after we do the pooling step. And so this then is the general structure of a convolutional network. We begin with the image, apply convolution, apply pooling, flatten the results, and then put that into a more traditional neural network that might itself have hidden layers. You can have deep convolutional networks that have hidden layers in between this flattened layer and the eventual output to be able to calculate various different features of those values. But this then can help us to be able to use convolution and pooling to use our knowledge about the structure of an image to be able to get better results, to be able to train our networks faster in order to better capture particular parts of the image. And there's no reason necessarily why you can only use these steps once. In fact, in practice, you'll often use convolution and pooling multiple times in multiple different steps. See, what you might imagine doing is starting with an image, first applying convolution to get a whole bunch of maps, then applying pooling, then applying convolution again, because these maps are still pretty big. You can apply convolution to try and extract relevant features out of this result. Then take those results, apply pooling in order to reduce their dimensions, and then take that and feed it into a neural network that maybe has fewer inputs. So here I have two different convolution and pooling steps. I do convolution and pooling once, and then I do convolution and pooling a second time, each time extracting useful features from the layer before it, each time using pooling to reduce the dimensions of what you're ultimately looking at. And the goal now of this sort of model is that in each of these steps, you can begin to learn different types of features of the original image. That maybe in the first step, you learn very low level features. Just learn and look for features like edges and curves and shapes, because based on pixels and their neighboring values, you can figure out, all right, what are the edges? What are the curves? What are the various different shapes that might be present there? But then once you have a mapping that just represents where the edges and curves and shapes happen to be, you can imagine applying the same sort of process again to begin to look for higher level features, look for objects, maybe look for people's eyes and facial recognition, for example. Maybe look for more complex shapes like the curves on a particular number if you're trying to recognize a digit in a handwriting recognition sort of scenario. And then after all of that, now that you have these results that represent these higher level features, you can pass them into a neural network, which is really just a deep neural network that looks like this, where you might imagine making a binary classification or classifying into multiple categories or performing various different tasks on this sort of model. So convolutional neural networks can be quite powerful and quite popular when it comes towards trying to analyze images. We don't strictly need them. We could have just used a vanilla neural network that just operates with layer after layer, as we've seen before. But these convolutional neural networks can be quite helpful, in particular, because of the way they model the way a human might look at an image, that instead of a human looking at every single pixel simultaneously and trying to convolve all of them by multiplying them together, you might imagine that what convolution is really doing is looking at various different regions of the image and extracting relevant information and features out of those parts of the image, the same way that a human might have visual receptors that are looking at particular parts of what they see and using those combining them to figure out what meaning they can draw from all of those various different inputs. And so you might imagine applying this to a situation like handwriting recognition. So we'll go ahead and see an example of that now, where I'll go ahead and open up handwriting.py. Again, what we do here is we first import TensorFlow. And then TensorFlow, it turns out, has a few data sets that are built into the library that you can just immediately access. And one of the most famous data sets in machine learning is the MNIST data set, which is just a data set of a whole bunch of samples of people's handwritten digits. I showed you a slide of that a little while ago. And what we can do is just immediately access that data set which is built into the library so that if I want to do something like train on a whole bunch of handwritten digits, I can just use the data set that is provided to me. Of course, if I had my own data set of handwritten images, I can apply the same idea. I'd first just need to take those images and turn them into an array of pixels, because that's the way that these are going to be formatted. They're going to be formatted as, effectively, an array of individual pixels. Now there's a bit of reshaping I need to do, just turning the data into a format that I can put into my convolutional neural network. So this is doing things like taking all the values and dividing them by 255. If you remember, these color values tend to range from 0 to 255. So I can divide them by 255 just to put them into 0 to 1 range, which might be a little bit easier to train on. And then doing various other modifications to the data just to get it into a nice usable format. But here's the interesting and important part. Here is where I create the convolutional neural network, the CNN, where here I'm saying, go ahead and use a sequential model. And before I could use model.add to say add a layer, add a layer, add a layer, another way I could define it is just by passing as input to this sequential neural network a list of all of the layers that I want. And so here, the very first layer in my model is a convolution layer, where I'm first going to apply convolution to my image. I'm going to use 13 different filters. So my model is going to learn 32, rather, 32 different filters that I would like to learn on the input image, where each filter is going to be a 3 by 3 kernel. So we saw those 3 by 3 kernels before, where we could multiply each value in a 3 by 3 grid by a value, multiply it, and add all the results together. So here, I'm going to learn 32 different of these 3 by 3 filters. I can, again, specify my activation function. And I specify what my input shape is. My input shape in the banknotes case was just 4. I had 4 inputs. My input shape here is going to be 28, 28, 1, because for each of these handwritten digits, it turns out that the MNIST data set organizes their data. Each image is a 28 by 28 pixel grid. So we're going to have a 28 by 28 pixel grid. And each one of those images only has one channel value. These handwritten digits are just black and white. So there's just a single color value representing how much black or how much white. You might imagine that in a color image, if you were doing this sort of thing, you might have three different channels, a red, a green, and a blue channel, for example. But in the case of just handwriting recognition, recognizing a digit, we're just going to use a single value for, like, shaded in or not shaded in. And it might range, but it's just a single color value. And that, then, is the very first layer of our neural network, a convolutional layer that will take the input and learn a whole bunch of different filters that we can apply to the input to extract meaningful features. Next step is going to be a max pooling layer, also built right into TensorFlow, where this is going to be a layer that is going to use a pool size of 2 by 2, meaning we're going to look at 2 by 2 regions inside of the image and just extract the maximum value. Again, we've seen why this can be helpful. It'll help to reduce the size of our input. And once we've done that, we'll go ahead and flatten all of the units just into a single layer that we can then pass into the rest of the neural network. And now, here's the rest of the neural network. Here, I'm saying, let's add a hidden layer to my neural network with 128 units, so a whole bunch of hidden units inside of the hidden layer. And just to prevent overfitting, I can add a dropout to that. Say, you know what, when you're training, randomly dropout half of the nodes from this hidden layer just to make sure we don't become overreliant on any particular node, we begin to really generalize and stop ourselves from overfitting. So TensorFlow allows us, just by adding a single line, to add dropout into our model as well, such that when it's training, it will perform this dropout step in order to help make sure that we don't overfit on this particular data. And then finally, I add an output layer. The output layer is going to have 10 units, one for each category that I would like to classify digits into, so 0 through 9, 10 different categories. And the activation function I'm going to use here is called the softmax activation function. And in short, what the softmax activation function is going to do is it's going to take the output and turn it into a probability distribution. So ultimately, it's going to tell me, what did we estimate the probability is that this is a 2 versus a 3 versus a 4. And so it will turn it into that probability distribution for me. Next up, I'll go ahead and compile my model and fit it on all of my training data. And then I can evaluate how well the neural network performs. And then I've added to my Python program, if I've provided a command line argument like the name of a file, I'm going to go ahead and save the model to a file. And so this can be quite useful too. Once you've done the training step, which could take some time in terms of taking all the time, going through the data, running back propagation with gradient descent to be able to say, all right, how should we adjust the weight to this particular model? You end up calculating values for these weights, calculating values for these filters. You'd like to remember that information so you can use it later. And so TensorFlow allows us to just save a model to a file, such that later, if we want to use the model we've learned, use the weights that we've learned to make some sort of new prediction, we can just use the model that already exists. So what we're doing here is after we've done all the calculation, we go ahead and save the model to a file, such that we can use it a little bit later. So for example, if I go into digits, I'm going to run handwriting.py. I won't save it this time. We'll just run it and go ahead and see what happens. What will happen is we need to go through the model in order to train on all of these samples of handwritten digits. The MNIST data set gives us thousands and thousands of sample handwritten digits in the same format that we can use in order to train. And so now what you're seeing is this training process. And unlike the banknotes case, where there was much fewer data points, the data was very, very simple, here this data is more complex and this training process takes time. And so this is another one of those cases where when training neural networks, this is why computational power is so important that oftentimes you see people wanting to use sophisticated GPUs in order to more efficiently be able to do this sort of neural network training. It also speaks to the reason why more data can be helpful. The more sample data points you have, the better you can begin to do this training. So here we're going through 60,000 different samples of handwritten digits. And I said we're going to go through them 10 times. We're going to go through the data set 10 times, training each time, hopefully improving upon our weights with every time we run through this data set. And we can see over here on the right what the accuracy is each time we go ahead and run this model, that the first time it looks like we got an accuracy of about 92% of the digits correct based on this training set. We increased that to 96% or 97%. And every time we run this, we're going to see hopefully the accuracy improve as we continue to try and use that gradient descent, that process of trying to run the algorithm, to minimize the loss that we get in order to more accurately predict what the output should be. And what this process is doing is it's learning not only the weights, but it's learning the features to use, the kernel matrix to use when performing that convolution step. Because this is a convolutional neural network, where I'm first performing those convolutions and then doing the more traditional neural network structure, this is going to learn all of those individual steps as well. And so here we see the TensorFlow provides me with some very nice output, telling me about how many seconds are left with each of these training runs that allows me to see just how well we're doing. So we'll go ahead and see how this network performs. It looks like we've gone through the data set seven times. We're going through it an eighth time now. And at this point, the accuracy is pretty high. We saw we went from 92% up to 97%. Now it looks like 98%. And at this point, it seems like things are starting to level out. It's probably a limit to how accurate we can ultimately be without running the risk of overfitting. Of course, with enough nodes, you would just memorize the input and overfit upon them. But we'd like to avoid doing that. And Dropout will help us with this. But now we see we're almost done finishing our training step. We're at 55,000. All right, we finished training. And now it's going to go ahead and test for us on 10,000 samples. And it looks like on the testing set, we were at 98.8% accurate. So we ended up doing pretty well, it seems, on this testing set to see how accurately can we predict these handwritten digits. And so what we could do then is actually test it out. I've written a program called Recognition.py using PyGame. If you pass it a model that's been trained, and I pretrained an example model using this input data, what we can do is see whether or not we've been able to train this convolutional neural network to be able to predict handwriting, for example. So I can try, just like drawing a handwritten digit. I'll go ahead and draw the number 2, for example. So there's my number 2. Again, this is messy. If you tried to imagine, how would you write a program with just ifs and thens to be able to do this sort of calculation, it would be tricky to do so. But here I'll press Classify, and all right, it seems I was able to correctly classify that what I drew was the number 2. I'll go ahead and reset it, try it again. We'll draw an 8, for example. So here is an 8. Press Classify. And all right, it predicts that the digit that I drew was an 8. And the key here is this really begins to show the power of what the neural network is doing, somehow looking at various different features of these different pixels, figuring out what the relevant features are, and figuring out how to combine them to get a classification. And this would be a difficult task to provide explicit instructions to the computer on how to do, to use a whole bunch of ifs ands to process all these pixel values to figure out what the handwritten digit is. Everyone's going to draw their 8s a little bit differently. If I drew the 8 again, it would look a little bit different. And yet, ideally, we want to train a network to be robust enough so that it begins to learn these patterns on its own. All I said was, here is the structure of the network, and here is the data on which to train the network. And the network learning algorithm just tries to figure out what is the optimal set of weights, what is the optimal set of filters to use them in order to be able to accurately classify a digit into one category or another. Just going to show the power of these sorts of convolutional neural networks. And so that then was a look at how we can use convolutional neural networks to begin to solve problems with regards to computer vision, the ability to take an image and begin to analyze it. So this is the type of analysis you might imagine that's happening in selfdriving cars that are able to figure out what filters to apply to an image to understand what it is that the computer is looking at, or the same type of idea that might be applied to facial recognition and social media to be able to determine how to recognize faces in an image as well. You can imagine a neural network that instead of classifying into one of 10 different digits could instead classify like, is this person A or is this person B, trying to tell those people apart just based on convolution. And so now what we'll take a look at is yet another type of neural network that can be quite popular for certain types of tasks. But to do so, we'll try to generalize and think about our neural network a little bit more abstractly. That here we have a sample deep neural network where we have this input layer, a whole bunch of different hidden layers that are performing certain types of calculations, and then an output layer here that just generates some sort of output that we care about calculating. But we could imagine representing this a little more simply like this. Here is just a more abstract representation of our neural network. We have some input that might be like a vector of a whole bunch of different values as our input. That gets passed into a network that performs some sort of calculation or computation, and that network produces some sort of output. That output might be a single value. It might be a whole bunch of different values. But this is the general structure of the neural network that we've seen. There is some sort of input that gets fed into the network. And using that input, the network calculates what the output should be. And this sort of model for a neural network is what we might call a feedforward neural network. Feedforward neural networks have connections only in one direction. They move from one layer to the next layer to the layer after that, such that the inputs pass through various different hidden layers and then ultimately produce some sort of output. So feedforward neural networks were very helpful for solving these types of classification problems that we saw before. We have a whole bunch of input. We want to learn what setting of weights will allow us to calculate the output effectively. But there are some limitations on feedforward neural networks that we'll see in a moment. In particular, the input needs to be of a fixed shape, like a fixed number of neurons are in the input layer. And there's a fixed shape for the output, like a fixed number of neurons in the output layer. And that has some limitations of its own. And a possible solution to this, and we'll see examples of the types of problems we can solve for this in just a second, is instead of just a feedforward neural network, where there are only connections in one direction from left to right effectively across the network, we could also imagine a recurrent neural network, where a recurrent neural network generates output that gets fed back into itself as input for future runs of that network. So whereas in a traditional neural network, we have inputs that get fed into the network, that get fed into the output. And the only thing that determines the output is based on the original input and based on the calculation we do inside of the network itself. This goes in contrast with a recurrent neural network, where in a recurrent neural network, you can imagine output from the network feeding back to itself into the network again as input for the next time you do the calculations inside of the network. What this allows is it allows the network to maintain some sort of state, to store some sort of information that can be used on future runs of the network. Previously, the network just defined some weights, and we passed inputs through the network, and it generated outputs. But the network wasn't saving any information based on those inputs to be able to remember for future iterations or for future runs. What a recurrent neural network will let us do is let the network store information that gets passed back in as input to the network again the next time we try and perform some sort of action. And this is particularly helpful when dealing with sequences of data. So we'll see a real world example of this right now, actually. Microsoft has developed an AI known as the caption bot. And what the caption bot does is it says, I can understand the content of any photograph, and I'll try to describe it as well as any human. I'll analyze your photo, but I won't store it or share it. And so what Microsoft's caption bot seems to be claiming to do is it can take an image and figure out what's in the image and just give us a caption to describe it. So let's try it out. Here, for example, is an image of Harvard Square. It's some people walking in front of one of the buildings at Harvard Square. I'll go ahead and take the URL for that image, and I'll paste it into caption bot and just press Go. So caption bot is analyzing the image, and then it says, I think it's a group of people walking in front of a building, which seems amazing. The AI is able to look at this image and figure out what's in the image. And the important thing to recognize here is that this is no longer just a classification task. We saw being able to classify images with a convolutional neural network where the job was take the image and then figure out, is it a 0 or a 1 or a 2, or is it this person's face or that person's face? What seems to be happening here is the input is an image, and we know how to get networks to take input of images, but the output is text. It's a sentence. It's a phrase, like a group of people walking in front of a building. And this would seem to pose a challenge for our more traditional feedforward neural networks, for the reason being that in traditional neural networks, we just have a fixedsize input and a fixedsize output. There are a certain number of neurons in the input to our neural network and a certain number of outputs for our neural network, and then some calculation that goes on in between. But the size of the inputs and the number of values in the input and the number of values in the output, those are always going to be fixed based on the structure of the neural network. And that makes it difficult to imagine how a neural network could take an image like this and say it's a group of people walking in front of the building because the output is text, like it's a sequence of words. Now, it might be possible for a neural network to output one word, one word you could represent as a vector of values, and you can imagine ways of doing that. Next time, we'll talk a little bit more about AI as it relates to language and language processing. But a sequence of words is much more challenging because depending on the image, you might imagine the output is a different number of words. We could have sequences of different lengths, and somehow we still want to be able to generate the appropriate output. And so the strategy here is to use a recurrent neural network, a neural network that can feed its own output back into itself as input for the next time. And this allows us to do what we call a onetomany relationship for inputs to outputs, that in vanilla, more traditional neural networks, these are what we might consider to be onetoone neural networks. You pass in one set of values as input. You get one vector of values as the output. But in this case, we want to pass in one value as input, the image, and we want to get a sequence, many values as output, where each value is like one of these words that gets produced by this particular algorithm. And so the way we might do this is we might imagine starting by providing input, the image, into our neural network. And the neural network is going to generate output, but the output is not going to be the whole sequence of words, because we can't represent the whole sequence of words using just a fixed set of neurons. Instead, the output is just going to be the first word. We're going to train the network to output what the first word of the caption should be. And you could imagine that Microsoft has trained this by running a whole bunch of training samples through the AI, giving it a whole bunch of pictures and what the appropriate caption was, and having the AI begin to learn from that. But now, because the network generates output that can be fed back into itself, you could imagine the output of the network being fed back into the same network. This here looks like a separate network, but it's really the same network that's just getting different input, that this network's output gets fed back into itself, but it's going to generate another output. And that other output is going to be the second word in the caption. And this recurrent neural network then, this network is going to generate other output that can be fed back into itself to generate yet another word, fed back into itself to generate another word. And so recurrent neural networks allow us to represent this onetomany structure. You provide one image as input, and the neural network can pass data into the next run of the network, and then again and again, such that you could run the network multiple times, each time generating a different output still based on that original input. And this is where recurrent neural networks become particularly useful when dealing with sequences of inputs or outputs. And my output is a sequence of words, and since I can't very easily represent outputting an entire sequence of words, I'll instead output that sequence one word at a time by allowing my network to pass information about what still needs to be said about the photo into the next stage of running the network. So you could run the network multiple times, the same network with the same weights, just getting different input each time. First, getting input from the image, and then getting input from the network itself as additional information about what additionally needs to be given in a particular caption, for example. So this then is a onetomany relationship inside of a recurrent neural network, but it turns out there are other models that we can use, other ways we can try and use recurrent neural networks to be able to represent data that might be stored in other forms as well. We saw how we could use neural networks in order to analyze images in the context of convolutional neural networks that take an image, figure out various different properties of the image, and are able to draw some sort of conclusion based on that. But you might imagine that something like YouTube, they need to be able to do a lot of learning based on video. They need to look through videos to detect if they're like copyright violations, or they need to be able to look through videos to maybe identify what particular items are inside of the video, for example. And video, you might imagine, is much more difficult to put in as input to a neural network, because whereas an image, you could just treat each pixel as a different value, videos are sequences. They're sequences of images, and each sequence might be of different length. And so it might be challenging to represent that entire video as a single vector of values that you could pass in to a neural network. And so here, too, recurrent neural networks can be a valuable solution for trying to solve this type of problem. Then instead of just passing in a single input into our neural network, we could pass in the input one frame at a time, you might imagine. First, taking the first frame of the video, passing it into the network, and then maybe not having the network output anything at all yet. Let it take in another input, and this time, pass it into the network. But the network gets information from the last time we provided an input into the network. Then we pass in a third input, and then a fourth input, where each time, what the network gets is it gets the most recent input, like each frame of the video. But it also gets information the network processed from all of the previous iterations. So on frame number four, you end up getting the input for frame number four plus information the network has calculated from the first three frames. And using all of that data combined, this recurrent neural network can begin to learn how to extract patterns from a sequence of data as well. And so you might imagine, if you want to classify a video into a number of different genres, like an educational video, or a music video, or different types of videos, that's a classification task, where you want to take as input each of the frames of the video, and you want to output something like what it is, what category that it happens to belong to. And you can imagine doing this sort of thing, this sort of manytoone learning, any time your input is a sequence. And so input is a sequence in the context of video. It could be in the context of, like, if someone has typed a message and you want to be able to categorize that message, like if you're trying to take a movie review and trying to classify it as, is it a positive review or a negative review? That input is a sequence of words, and the output is a classification, positive or negative. There, too, a recurrent neural network might be helpful for analyzing sequences of words. And they're quite popular when it comes to dealing with language. Could even be used for spoken language as well, that spoken language is an audio waveform that can be segmented into distinct chunks. And each of those could be passed in as an input into a recurrent neural network to be able to classify someone's voice, for instance. If you want to do voice recognition to say, is this one person or is this another, here are also cases where you might want this manytoone architecture for a recurrent neural network. And then as one final problem, just to take a look at in terms of what we can do with these sorts of networks, imagine what Google Translate is doing. So what Google Translate is doing is it's taking some text written in one language and converting it into text written in some other language, for example, where now this input is a sequence of data. It's a sequence of words. And the output is a sequence of words as well. It's also a sequence. So here we want effectively a manytomany relationship. Our input is a sequence and our output is a sequence as well. And it's not quite going to work to just say, take each word in the input and translate it into a word in the output. Because ultimately, different languages put their words in different orders. And maybe one language uses two words for something, whereas another language only uses one. So we really want some way to take this information, this input, encode it somehow, and use that encoding to generate what the output ultimately should be. And this has been one of the big advancements in automated translation technology, is the ability to use the neural networks to do this instead of older, more traditional methods. And this has improved accuracy dramatically. And the way you might imagine doing this is, again, using a recurrent neural network with multiple inputs and multiple outputs. We start by passing in all the input. Input goes into the network. Another input, like another word, goes into the network. And we do this multiple times, like once for each word in the input that I'm trying to translate. And only after all of that is done does the network now start to generate output, like the first word of the translated sentence, and the next word of the translated sentence, so on and so forth, where each time the network passes information to itself by allowing for this model of giving some sort of state from one run in the network to the next run, assembling information about all the inputs, and then passing in information about which part of the output in order to generate next. And there are a number of different types of these sorts of recurrent neural networks. One of the most popular is known as the long shortterm memory neural network, otherwise known as LSTM. But in general, these types of networks can be very, very powerful whenever we're dealing with sequences, whether those are sequences of images or especially sequences of words when it comes towards dealing with natural language. And so that then were just some of the different types of neural networks that can be used to do all sorts of different computations. And these are incredibly versatile tools that can be applied to a number of different domains. We only looked at a couple of the most popular types of neural networks from more traditional feedforward neural networks, convolutional neural networks, and recurrent neural networks. But there are other types as well. There are adversarial networks where networks compete with each other to try and be able to generate new types of data, as well as other networks that can solve other tasks based on what they happen to be structured and adapted for. And these are very powerful tools in machine learning from being able to very easily learn based on some set of input data and to be able to, therefore, figure out how to calculate some function from inputs to outputs, whether it's input to some sort of classification like analyzing an image and getting a digit or machine translation where the input is in one language and the output is in another. These tools have a lot of applications for machine learning more generally. Next time, we'll look at machine learning and AI in particular in the context of natural language. We talked a little bit about this today, but looking at how it is that our AI can begin to understand natural language and can begin to be able to analyze and do useful tasks with regards to human language, which turns out to be a challenging and interesting task. So we'll see you next time. And welcome back, everybody, to our final class in an introduction to artificial intelligence with Python. Now, so far in this class, we've been taking problems that we want to solve intelligently and framing them in ways that computers are going to be able to make sense of. We've been taking problems and framing them as search problems or constraint satisfaction problems or optimization problems, for example. In essence, we have been trying to communicate about problems in ways that our computer is going to be able to understand. Today, the goal is going to be to get computers to understand the way you and I communicate naturally via our own natural languages, languages like English. But natural language contains a lot of nuance and complexity that's going to make it challenging for computers to be able to understand. So we'll need to explore some new tools and some new techniques to allow computers to make sense of natural language. So what is it exactly that we're trying to get computers to do? Well, they all fall under this general heading of natural language processing, getting computers to work with natural language. And these tasks include tasks like automatic summarization. Given a long text, can we train the computer to be able to come up with a shorter representation of it? Information extraction, getting the computer to pull out relevant facts or details out of some text. Machine translation, like Google Translate, translating some text from one language into another language. Question answering, if you've ever asked a question to your phone or had a conversation with an AI chatbot where you provide some text to the computer, the computer is able to understand that text and then generate some text in response. Text classification, where we provide some text to the computer and the computer assigns it a label, positive or negative, inbox or spam, for example. And there are several other kinds of tasks that all fall under this heading of natural language processing. But before we take a look at how the computer might try to solve these kinds of tasks, it might be useful for us to think about language in general. What are the kinds of challenges that we might need to deal with as we start to think about language and getting a computer to be able to understand it? So one part of language that we'll need to consider is the syntax of language. Syntax is all about the structure of language. Language is composed of individual words. And those words are composed together in some kind of structured whole. And if our computer is going to be able to understand language, it's going to need to understand something about that structure. So let's take a couple of examples. Here, for instance, is a sentence. Just before 9 o'clock, Sherlock Holmes stepped briskly into the room. That sentence is made up of words. And those words together form a structured whole. This is syntactically valid as a sentence. But we could take some of those same words, rearrange them, and come up with a sentence that is not syntactically valid. Here, for example, just before Sherlock Holmes 9 o'clock stepped briskly the room is still composed of valid words. But they're not in any kind of logical whole. This is not a syntactically wellformed sentence. Another interesting challenge is that some sentences will have multiple possible valid structures. Here's a sentence, for example. I saw the man on the mountain with a telescope. And here, this is a valid sentence. But it actually has two different possible structures that lend themselves to two different interpretations and two different meanings. Maybe I, the one doing the seeing, am the one with the telescope. Or maybe the man on the mountain is the one with the telescope. And so natural language is ambiguous. Sometimes the same sentence can be interpreted in multiple ways. And that's something that we'll need to think about as well. And this lends itself to another problem within language that we'll need to think about, which is semantics. While syntax is all about the structure of language, semantics is about the meaning of language. It's not enough for a computer just to know that a sentence is wellstructured if it doesn't know what that sentence means. And so semantics is going to concern itself with the meaning of words and the meaning of sentences. So if we go back to that same sentence as before, just before 9 o'clock, Sherlock Holmes stepped briskly into the room, I could come up with another sentence, say the sentence, a few minutes before 9, Sherlock Holmes walked quickly into the room. And those are two different sentences with some of the words the same and some of the words different. But the two sentences have essentially the same meaning. And so ideally, whatever model we build, we'll be able to understand that these two sentences, while different, mean something very similar. Some syntactically wellformed sentences don't mean anything at all. A famous example from linguist Noam Chomsky is the sentence, colorless green ideas sleep furiously. This is a syntactically, structurally wellformed sentence. We've got adjectives modifying a noun, ideas. We've got a verb and an adverb in the correct positions. But when taken as a whole, the sentence doesn't really mean anything. And so if our computers are going to be able to work with natural language and perform tasks in natural language processing, these are some concerns we'll need to think about. We'll need to be thinking about syntax. And we'll need to be thinking about semantics. So how could we go about trying to teach a computer how to understand the structure of natural language? Well, one approach we might take is by starting by thinking about the rules of natural language. Our natural languages have rules. In English, for example, nouns tend to come before verbs. Nouns can be modified by adjectives, for example. And so if only we could formalize those rules, then we could give those rules to a computer, and the computer would be able to make sense of them and understand them. And so let's try to do exactly that. We're going to try to define a formal grammar. Where a formal grammar is some system of rules for generating sentences in a language. This is going to be a rulebased approach to natural language processing. We're going to give the computer some rules that we know about language and have the computer use those rules to make sense of the structure of language. And there are a number of different types of formal grammars. Each one of them has slightly different use cases. But today, we're going to focus specifically on one kind of grammar known as a contextfree grammar. So how does the contextfree grammar work? Well, here is a sentence that we might want a computer to generate. She saw the city. And we're going to call each of these words a terminal symbol. A terminal symbol, because once our computer has generated the word, there's nothing else for it to generate. Once it's generated the sentence, the computer is done. We're going to associate each of these terminal symbols with a nonterminal symbol that generates it. So here we've got n, which stands for noun, like she or city. We've got v as a nonterminal symbol, which stands for a verb. And then we have d, which stands for determiner. A determiner is a word like the or a or an in English, for example. So each of these nonterminal symbols can generate the terminal symbols that we ultimately care about generating. But how do we know, or how does the computer know which nonterminal symbols are associated with which terminal symbols? Well, to do that, we need some kind of rule. Here are some what we call rewriting rules that have a nonterminal symbol on the lefthand side of an arrow. And on the right side is what that nonterminal symbol can be replaced with. So here we're saying the nonterminal symbol n, again, which stands for noun, could be replaced by any of these options separated by vertical bars. n could be replaced by she or city or car or hairy. d for determiner could be replaced by the a or an and so forth. Each of these nonterminal symbols could be replaced by any of these words. We can also have nonterminal symbols that are replaced by other nonterminal symbols. Here is an interesting rule, np arrow n bar dn. So what does that mean? Well, np stands for a noun phrase. Sometimes when we have a noun phrase in a sentence, it's not just a single word, it could be multiple words. And so here we're saying a noun phrase could be just a noun, or it could be a determiner followed by a noun. So we might have a noun phrase that's just a noun, like she, that's a noun phrase. Or we could have a noun phrase that's multiple words, something like the city also acts as a noun phrase. But in this case, it's composed of two words, a determiner, the, and a noun city. We could do the same for verb phrases. A verb phrase, or VP, might be just a verb, or it might be a verb followed by a noun phrase. So we could have a verb phrase that's just a single word, like the word walked, or we could have a verb phrase that is an entire phrase, something like saw the city, as an entire verb phrase. A sentence, meanwhile, we might then define as a noun phrase followed by a verb phrase. And so this would allow us to generate a sentence like she saw the city, an entire sentence made up of a noun phrase, which is just the word she, and then a verb phrase, which is saw the city, saw which is a verb, and then the city, which itself is also a noun phrase. And so if we could give these rules to a computer explaining to it what nonterminal symbols could be replaced by what other symbols, then a computer could take a sentence and begin to understand the structure of that sentence. And so let's take a look at an example of how we might do that. And to do that, we're going to use a Python library called NLTK, or the Natural Language Toolkit, which we'll see a couple of times today. It contains a lot of helpful features and functions that we can use for trying to deal with and process natural language. So here we'll take a look at how we can use NLTK in order to parse a contextfree grammar. So let's go ahead and open up cfg0.py, cfg standing for contextfree grammar. And what you'll see in this file is that I first import NLTK, the Natural Language Toolkit. And the first thing I do is define a contextfree grammar, saying that a sentence is a noun phrase followed by a verb phrase. I'm defining what a noun phrase is, defining what a verb phrase is, and then giving some examples of what I can do with these nonterminal symbols, D for determiner, N for noun, and V for verb. We're going to use NLTK to parse that grammar. Then we'll ask the user for some input in the form of a sentence and split it into words. And then we'll use this contextfree grammar parser to try to parse that sentence and print out the resulting syntax tree. So let's take a look at an example. We'll go ahead and go into my cfg directory, and we'll run cfg0.py. And here I'm asked to type in a sentence. Let's say I type in she walked. And when I do that, I see that she walked is a valid sentence, where she is a noun phrase, and walked is the corresponding verb phrase. I could try to do this with a more complex sentence too. I could do something like she saw the city. And here we see that she is the noun phrase, and then saw the city is the entire verb phrase that makes up this sentence. So that was a very simple grammar. Let's take a look at a slightly more complex grammar. Here is cfg1.py, where a sentence is still a noun phrase followed by a verb phrase, but I've added some other possible nonterminal symbols too. I have AP for adjective phrase and PP for prepositional phrase. And we specified that we could have an adjective phrase before a noun phrase or a prepositional phrase after a noun, for example. So lots of additional ways that we might try to structure a sentence and interpret and parse one of those resulting sentences. So let's see that one in action. We'll go ahead and run cfg1.py with this new grammar. And we'll try a sentence like she saw the wide street. Here, Python's NLTK is able to parse that sentence and identify that she saw the wide street has this particular structure, a sentence with a noun phrase and a verb phrase, where that verb phrase has a noun phrase that within it contains an adjective. And so it's able to get some sense for what the structure of this language actually is. Let's try another example. Let's say she saw the dog with the binoculars. And we'll try that sentence. And here, we get one possible syntax tree, she saw the dog with the binoculars. But notice that this sentence is actually a little bit ambiguous in our own natural language. Who has the binoculars? Is it she who has the binoculars or the dog who has the binoculars? And NLTK is able to identify both possible structures for the sentence. In this case, the dog with the binoculars is an entire noun phrase. It's all underneath this NP here. So it's the dog that has the binoculars. But we also got an alternative parse tree, where the dog is just the noun phrase. And with the binoculars is a prepositional phrase modifying saw. So she saw the dog and she used the binoculars in order to see the dog as well. So this allows us to get a sense for the structure of natural language. But it relies on us writing all of these rules. And it would take a lot of effort to write all of the rules for any possible sentence that someone might write or say in the English language. Language is complicated. And as a result, there are going to be some very complex rules. So what else might we try? We might try to take a statistical lens towards approaching this problem of natural language processing. If we were able to give the computer a lot of existing data of sentences written in the English language, what could we try to learn from that data? Well, it might be difficult to try and interpret long pieces of text all at once. So instead, what we might want to do is break up that longer text into smaller pieces of information instead. In particular, we might try to create ngrams out of a longer sequence of text. An ngram is just some contiguous sequence of n items from a sample of text. It might be n characters in a row or n words in a row, for example. So let's take a passage from Sherlock Holmes. And let's look for all of the trigrams. A trigram is an ngram where n is equal to 3. So in this case, we're looking for sequences of three words in a row. So the trigrams here would be phrases like how often have. That's three words in a row. Often have I is another trigram. Have I said, I said to, said to you, to you that. These are all trigrams, sequences of three words that appear in sequence. And if we could give the computer a large corpus of text and have it pull out all of the trigrams in this case, it could get a sense for what sequences of three words tend to appear next to each other in our own natural language and, as a result, get some sense for what the structure of the language actually is. So let's take a look at an example of that. How can we use NLTK to try to get access to information about ngrams? So here, we're going to open up ngrams.py. And this is a Python program that's going to load a corpus of data, just some text files, into our computer's memory. And then we're going to use NLTK's ngrams function, which is going to go through the corpus of text, pulling out all of the ngrams for a particular value of n. And then, by using Python's counter class, we're going to figure out what are the most common ngrams inside of this entire corpus of text. And we're going to need a data set in order to do this. And I've prepared a data set of some of the stories of Sherlock Holmes. So it's just a bunch of text files. A lot of words for it to analyze. And as a result, we'll get a sense for what sequences of two words or three words that tend to be most common in natural language. So let's give this a try. We'll go into my ngrams directory. And we'll run ngrams.py. We'll try an n value of 2. So we're looking for sequences of two words in a row. And we'll use our corpus of stories from Sherlock Holmes. And when we run this program, we get a list of the most common ngrams where n is equal to 2, otherwise known as a bigram. So the most common one is of the. That's a sequence of two words that appears quite frequently in natural language. Then in the. And it was. These are all common sequences of two words that appear in a row. Let's instead now try running ngrams with n equal to 3. Let's get all of the trigrams and see what we get. And now we see the most common trigrams are it was a. One of the. I think that. These are all sequences of three words that appear quite frequently. And we were able to do this essentially via a process known as tokenization. Tokenization is the process of splitting a sequence of characters into pieces. In this case, we're splitting a long sequence of text into individual words and then looking at sequences of those words to get a sense for the structure of natural language. So once we've done this, once we've done the tokenization, once we've built up our corpus of ngrams, what can we do with that information? So the one thing that we might try is we could build a Markov chain, which you might recall from when we talked about probability. Recall that a Markov chain is some sequence of values where we can predict one value based on the values that came before it. And as a result, if we know all of the common ngrams in the English language, what words tend to be associated with what other words in sequence, we can use that to predict what word might come next in a sequence of words. And so we could build a Markov chain for language in order to try to generate natural language that follows the same statistical patterns as some input data. So let's take a look at that and build a Markov chain for natural language. And as input, I'm going to use the works of William Shakespeare. So here I have a file Shakespeare.txt, which is just a bunch of the works of William Shakespeare. It's a long text file, so plenty of data to analyze. And here in generator.py, I'm using a third party Python library in order to do this analysis. We're going to read in the sample of text, and then we're going to train a Markov model based on that text. And then we're going to have the Markov chain generate some sentences. We're going to generate a sentence that doesn't appear in the original text, but that follows the same statistical patterns that's generating it based on the ngrams trying to predict what word is likely to come next that we would expect based on those statistical patterns. So we'll go ahead and go into our Markov directory, run this generator with the works of William Shakespeare's input. And what we're going to get are five new sentences, where these sentences are not necessarily sentences from the original input text itself, but just that follow the same statistical patterns. It's predicting what word is likely to come next based on the input data that we've seen and the types of words that tend to appear in sequence there too. And so we're able to generate these sentences. Of course, so far, there's no guarantee that any of the sentences that are generated actually mean anything or make any sense. They just happen to follow the statistical patterns that our computer is already aware of. So we'll return to this issue of how to generate text in perhaps a more accurate or more meaningful way a little bit later. So let's now turn our attention to a slightly different problem, and that's the problem of text classification. Text classification is the problem where we have some text and we want to put that text into some kind of category. We want to apply some sort of label to that text. And this kind of problem shows up in a wide variety of places. A commonplace might be your email inbox, for example. You get an email and you want your computer to be able to identify whether the email belongs in your inbox or whether it should be filtered out into spam. So we need to classify the text. Is it a good email or is it spam? Another common use case is sentiment analysis. We might want to know whether the sentiment of some text is positive or negative. And so how might we do that? This comes up in situations like product reviews, where we might have a bunch of reviews for a product on some website. My grandson loved it so much fun. Product broke after a few days. One of the best games I've played in a long time and kind of cheap and flimsy, not worth it. Here's some example sentences that you might see on a product review website. And you and I could pretty easily look at this list of product reviews and decide which ones are positive and which ones are negative. We might say the first one and the third one, those seem like positive sentiment messages. But the second one and the fourth one seem like negative sentiment messages. But how did we know that? And how could we train a computer to be able to figure that out as well? Well, you might have clued your eye in on particular key words, where those particular words tend to mean something positive or negative. So you might have identified words like loved and fun and best tend to be associated with positive messages. And words like broke and cheap and flimsy tend to be associated with negative messages. So if only we could train a computer to be able to learn what words tend to be associated with positive versus negative messages, then maybe we could train a computer to do this kind of sentiment analysis as well. So we're going to try to do just that. We're going to use a model known as the bag of words model, which is a model that represents text as just an unordered collection of words. For the purpose of this model, we're not going to worry about the sequence and the ordering of the words, which word came first, second, or third. We're just going to treat the text as a collection of words in no particular order. And we're losing information there, right? The order of words is important. And we'll come back to that a little bit later. But for now, to simplify our model, it'll help us tremendously just to think about text as some unordered collection of words. And in particular, we're going to use the bag of words model to build something known as a naive Bayes classifier. So what is a naive Bayes classifier? Well, it's a tool that's going to allow us to classify text based on Bayes rule, again, which you might remember from when we talked about probability. Bayes rule says that the probability of B given A is equal to the probability of A given B multiplied by the probability of B divided by the probability of A. So how are we going to use this rule to be able to analyze text? Well, what are we interested in? We're interested in the probability that a message has a positive sentiment and the probability that a message has a negative sentiment, which I'm here for simplicity going to represent just with these emoji, happy face and frown face, as positive and negative sentiment. And so if I had a review, something like my grandson loved it, then what I'm interested in is not just the probability that a message has positive sentiment, but the conditional probability that a message has positive sentiment given that this is the message my grandson loved it. But how do I go about calculating this value, the probability that the message is positive given that the review is this sequence of words? Well, here's where the bag of words model comes in. Rather than treat this review as a string of a sequence of words in order, we're just going to treat it as an unordered collection of words. We're going to try to calculate the probability that the review is positive given that all of these words, my grandson loved it, are in the review in no particular order, just this unordered collection of words. And this is a conditional probability, which we can then apply Bayes rule to try to make sense of. And so according to Bayes rule, this conditional probability is equal to what? It's equal to the probability that all of these four words are in the review given that the review is positive multiplied by the probability that the review is positive divided by the probability that all of these words happen to be in the review. So this is the value now that we're going to try to calculate. Now, one thing you might notice is that the denominator here, the probability that all of these words appear in the review, doesn't actually depend on whether or not we're looking at the positive sentiment or negative sentiment case. So we can actually get rid of this denominator. We don't need to calculate it. We can just say that this probability is proportional to the numerator. And then at the end, we're going to need to normalize the probability distribution to make sure that all of the values sum up to the value 1. So now, how do we calculate this value? Well, this is the probability of all of these words given positive times probability of positive. And that, by the definition of joint probability, is just one big joint probability, the probability that all of these things are the case, that it's a positive review, and that all four of these words are in the review. But still, it's not entirely obvious how we calculate that value. And here is where we need to make one more assumption. And this is where the naive part of naive Bayes comes in. We're going to make the assumption that all of the words are independent of each other. And by that, I mean that if the word grandson is in the review, that doesn't change the probability that the word loved is in the review or that the word it is in the review, for example. And in practice, this assumption might not be true. It's almost certainly the case that the probability of words do depend on each other. But it's going to simplify our analysis and still give us reasonably good results just to assume that the words are independent of each other and they only depend on whether it's positive or negative. You might, for example, expect the word loved to appear more often in a positive review than in a negative review. So what does that mean? Well, if we make this assumption, then we can say that this value, the probability we're interested in, is not directly proportional to, but it's naively proportional to this value. The probability that the review is positive times the probability that my is in the review, given that it's positive, times the probability that grandson is in the review, given that it's positive, and so on for the other two words that happen to be in this review. And now this value, which looks a little more complex, is actually a value that we can calculate pretty easily. So how are we going to estimate the probability that the review is positive? Well, if we have some training data, some example data of example reviews where each one has already been labeled as positive or negative, then we can estimate the probability that a review is positive just by counting the number of positive samples and dividing by the total number of samples that we have in our training data. And for the conditional probabilities, the probability of loved, given that it's positive, well, that's going to be the number of positive samples with loved in it divided by the total number of positive samples. So let's take a look at an actual example to see how we could try to calculate these values. Here I've put together some sample data. The way to interpret the sample data is that based on the training data, 49% of the reviews are positive, 51% are negative. And then over here in this table, we have some conditional probabilities. And then we have if the review is positive, then there is a 30% chance that my appears in it. And if the review is negative, there is a 20% chance that my appears in it. And based on our training data among the positive reviews, 1% of them contain the word grandson. And among the negative reviews, 2% contain the word grandson. So using this data, let's try to calculate this value, the value we're interested in. And to do that, we'll need to multiply all of these values together. The probability of positive, and then all of these positive conditional probabilities. And when we do that, we get some value. And then we can do the same thing for the negative case. We're going to do the same thing, take the probability that it's negative, multiply it by all of these conditional probabilities, and we're going to get some other value. And now these values don't sum to one. They're not a probability distribution yet. But I can normalize them and get some values. And that tells me that we're going to predict that my grandson loved it. We think there's a 68% chance, probability 0.68, that that is a positive sentiment review, and 0.32 probability that it's a negative review. So what problems might we run into here? What could potentially go wrong when doing this kind of analysis in order to analyze whether text has a positive or negative sentiment? Well, a couple of problems might arise. One problem might be, what if the word grandson never appears for any of the positive reviews? If that were the case, then when we try to calculate the value, the probability that we think the review is positive, we're going to multiply all these values together, and we're just going to get 0 for the positive case, because we're all going to ultimately multiply by that 0 value. And so we're going to say that we think there is no chance that the review is positive because it contains the word grandson. And in our training data, we've never seen the word grandson appear in a positive sentiment message before. And that's probably not the right analysis, because in cases of rare words, it might be the case that in nowhere in our training data did we ever see the word grandson appear in a message that has positive sentiment. So what can we do to solve this problem? Well, one thing we'll often do is some kind of additive smoothing, where we add some value alpha to each value in our distribution just to smooth out the data a little bit. And a common form of this is Laplace smoothing, where we add 1 to each value in our distribution. In essence, we pretend we've seen each value one more time than we actually have. So if we've never seen the word grandson for a positive review, we pretend we've seen it once. If we've seen it once, we pretend we've seen it twice, just to avoid the possibility that we might multiply by 0 and as a result, get some results we don't want in our analysis. So let's see what this looks like in practice. Let's try to do some naive Bayes classification in order to classify text as either positive or negative. We'll take a look at sentiment.py. And what this is going to do is load some sample data into memory, some examples of positive reviews and negative reviews. And then we're going to train a naive Bayes classifier on all of this training data, training data that includes all of the words we see in positive reviews and all of the words we see in negative reviews. And then we're going to try to classify some input. And so we're going to do this based on a corpus of data. I have some example positive reviews. Here are some positive reviews. It was great, so much fun, for example. And then some negative reviews, not worth it, kind of cheap. These are some examples of negative reviews. So now let's try to run this classifier and see how it would classify particular text as either positive or negative. We'll go ahead and run our sentiment analysis on this corpus. And we need to provide it with a review. So I'll say something like, I enjoyed it. And we see that the classifier says there is about a 0.92 probability that we think that this particular review is positive. Let's try something negative. We'll try kind of overpriced. And we see that there is a 0.96 probability now that we think that this particular review is negative. And so our naive Bayes classifier has learned what kinds of words tend to appear in positive reviews and what kinds of words tend to appear in negative reviews. And as a result of that, we've been able to design a classifier that can predict whether a particular review is positive or negative. And so this definitely is a useful tool that we can use to try and make some predictions. But we had to make some assumptions in order to get there. So what if we want to now try to build some more sophisticated models, use some tools from machine learning to try and take better advantage of language data to be able to draw more accurate conclusions and solve new kinds of tasks and new kinds of problems? Well, we've seen a couple of times now that when we want to take some data and take some input, put it in a way that the computer is going to be able to make sense of, it can be helpful to take that data and turn it into numbers, ultimately. And so what we might want to try to do is come up with some word representation, some way to take a word and translate its meaning into numbers. Because, for example, if we wanted to use a neural network to be able to process language, give our language to a neural network and have it make some predictions or perform some analysis there, a neural network takes its input and produces its output a vector of values, a vector of numbers. And so what we might want to do is take our data and somehow take words and convert them into some kind of numeric representation. So how might we do that? How might we take words and turn them into numbers? Let's take a look at an example. Here's a sentence, he wrote a book. And let's say I wanted to take each of those words and turn it into a vector of values. Here's one way I might do that. We'll say he is going to be a vector that has a 1 in the first position and the rest of the values are 0. Wrote will have a 1 in the second position and the rest of the values are 0. A has a 1 in the third position with the rest of the value 0. And book has a 1 in the fourth position with the rest of the value 0. So each of these words now has a distinct vector representation. And this is what we often call a onehot representation, a representation of the meaning of a word as a vector with a single 1 and all of the rest of the values are 0. And so when doing this, we now have a numeric representation for every word and we could pass in those vector representations into a neural network or other models that require some kind of numeric data as input. But this onehot representation actually has a couple of problems and it's not ideal for a few reasons. One reason is, here we're just looking at four words. But if you imagine a vocabulary of thousands of words or more, these vectors are going to get quite long in order to have a distinct vector for every possible word in a vocabulary. And as a result of that, these longer vectors are going to be more difficult to deal with, more difficult to train, and so forth. And so that might be a problem. Another problem is a little bit more subtle. If we want to represent a word as a vector, and in particular the meaning of a word as a vector, then ideally it should be the case that words that have similar meanings should also have similar vector representations, so that they're close to each other together inside a vector space. But that's not really going to be the case with these onehot representations, because if we take some similar words, say the word wrote and the word authored, which means similar things, they have entirely different vector representations. Likewise, book and novel, those two words mean somewhat similar things, but they have entirely different vector representations because they each have a one in some different position. And so that's not ideal either. So what we might be interested in instead is some kind of distributed representation. A distributed representation is the representation of the meaning of a word distributed across multiple values, instead of just being onehot with a one in one position. Here is what a distributed representation of words might be. Each word is associated with some vector of values, with the meaning distributed across multiple values, ideally in such a way that similar words have a similar vector representation. But how are we going to come up with those values? Where do those values come from? How can we define the meaning of a word in this distributed sequence of numbers? Well, to do that, we're going to draw inspiration from a quote from British linguist J.R. Firth, who said, you shall know a word by the company it keeps. In other words, we're going to define the meaning of a word based on the words that appear around it, the context words around it. Take, for example, this context, for blank he ate. You might wonder, what words could reasonably fill in that blank? Well, it might be words like breakfast or lunch or dinner. All of those could reasonably fill in that blank. And so what we're going to say is because the words breakfast and lunch and dinner appear in a similar context, that they must have a similar meaning. And that's something our computer could understand and try to learn. A computer could look at a big corpus of text, look at what words tend to appear in similar context to each other, and use that to identify which words have a similar meaning and should therefore appear close to each other inside a vector space. And so one common model for doing this is known as the word to vec model. It's a model for generating word vectors, a vector representation for every word by looking at data and looking at the context in which a word appears. The idea is going to be this. If you start out with all of the words just in some random position in space and train it on some training data, what the word to vec model will do is start to learn what words appear in similar contexts. And it will move these vectors around in such a way that hopefully words with similar meanings, breakfast, lunch, and dinner, book, memoir, novel, will hopefully appear to be near to each other as vectors as well. So let's now take a look at what word to vec might look like in practice when implemented in code. What I have here inside of words.txt is a pretrained model where each of these words has some vector representation trained by word to vec. Each of these words has some sequence of values representing its meaning, hopefully in such a way that similar words are represented by similar vectors. I also have this file vectors.py, which is going to open up the words and form them into a dictionary. And we also define some useful functions like distance to get the distance between two word vectors and closest words to find which words are nearby in terms of having close vectors to each other. And so let's give this a try. We'll go ahead and open a Python interpreter. And I'm going to import these vectors. And we might say, all right, what is the vector representation of the word book? And we get this big long vector that represents the word book as a sequence of values. And this sequence of values by itself is not all that meaningful. But it is meaningful in the context of comparing it to other vectors for other words. So we could use this distance function, which is going to get us the distance between two word vectors. And we might say, what is the distance between the vector representation for the word book and the vector representation for the word novel? And we see that it's 0.34. You can kind of interpret 0 as being really close together and 1 being very far apart. And so now, what is the distance between book and, let's say, breakfast? Well, book and breakfast are more different from each other than book and novel are. So I would hopefully expect the distance to be larger. And in fact, it is 0.64 approximately. These two words are further away from each other. And what about now the distance between, let's say, lunch and breakfast? Well, that's about 0.2. Those are even closer together. They have a meaning that is closer to each other. Another interesting thing we might do is calculate the closest words. We might say, what are the closest words, according to Word2Vec, to the word book? And let's say, let's get the 10 closest words. What are the 10 closest vectors to the vector representation for the word book? And when we perform that analysis, we get this list of words. The closest one is book itself, but we also have books plural, and then essay, memoir, essays, novella, anthology, and so on. All of these words mean something similar to the word book, according to Word2Vec, at least, because they have a similar vector representation. So it seems like we've done a pretty good job of trying to capture this kind of vector representation of word meaning. One other interesting side effect of Word2Vec is that it's also able to capture something about the relationships between words as well. Let's take a look at an example. Here, for instance, are two words, man and king. And these are each represented by Word2Vec as vectors. So what might happen if I subtracted one from the other, calculated the value king minus man? Well, that will be the vector that will take us from man to king, somehow represent this relationship between the vector representation of the word man and the vector representation of the word king. And that's what this value, king minus man, represents. So what would happen if I took the vector representation of the word woman and added that same value, king minus man, to it? What would we get as the closest word to that, for example? Well, we could try it. Let's go ahead and go back to our Python interpreter and give this a try. I could say, what is the closest word to the vector representation of the word king minus the representation of the word man plus the representation of the word woman? And we see that the closest word is the word queen. We've somehow been able to capture the relationship between king and man. And then when we apply it to the word woman, we get, as the result, the word queen. So Word2Vec has been able to capture not just the words and how they're similar to each other, but also something about the relationships between words and how those words are connected to each other. So now that we have this vector representation of words, what can we now do with it? Now we can represent words as numbers. And so we might try to pass those words as input to, say, a neural network. Neural networks we've seen are very powerful tools for identifying patterns and making predictions. Recall that a neural network you can think of as all of these units. But really what the neural network is doing is taking some input, passing it into the network, and then producing some output. And by providing the neural network with training data, we're able to update the weights inside of the network so that the neural network can do a more accurate job of translating those inputs into those outputs. And now that we can represent words as numbers that could be the input or output, you could imagine passing a word in as input to a neural network and getting a word as output. And so when might that be useful? One common use for neural networks is in machine translation, when we want to translate text from one language into another, say translate English into French by passing English into the neural network and getting some French output. You might imagine, for instance, that we could take the English word for lamp, pass it into the neural network, get the French word for lamp as output. But in practice, when we're translating text from one language to another, we're usually not just interested in translating a single word from one language to another, but a sequence, say a sentence or a paragraph of words. Here, for example, is another paragraph, again taken from Sherlock Holmes, written in English. And what I might want to do is take that entire sentence, pass it into the neural network, and get as output a French translation of the same sentence. But recall that a neural network's input and output needs to be of some fixed size. And a sentence is not a fixed size. It's variable. You might have shorter sentences, and you might have longer sentences. So somehow, we need to solve the problem of translating a sequence into another sequence by means of a neural network. And that's going to be true not only for machine translation, but also for other problems, problems like question answering. If I want to pass as input a question, something like what is the capital of Massachusetts, feed that as input into the neural network, I would hope that what I would get as output is a sentence like the capital is Boston, again, translating some sequence into some other sequence. And if you've ever had a conversation with an AI chatbot, or have ever asked your phone a question, it needs to do something like this. It needs to understand the sequence of words that you, the human, provided as input. And then the computer needs to generate some sequence of words as output. So how can we do this? Well, one tool that we can use is the recurrent neural network, which we took a look at last time, which is a way for us to provide a sequence of values to a neural network by running the neural network multiple times. And each time we run the neural network, what we're going to do is we're going to keep track of some hidden state. And that hidden state is going to be passed from one run of the neural network to the next run of the neural network, keeping track of all of the relevant information. And so let's take a look at how we can apply that to something like this. And in particular, we're going to look at an architecture known as an encoderdecoder architecture, where we're going to encode this question into some kind of hidden state, and then use a decoder to decode that hidden state into the output that we're interested in. So what's that going to look like? We'll start with the first word, the word what. That goes into our neural network, and it's going to produce some hidden state. This is some information about the word what that our neural network is going to need to keep track of. Then when the second word comes along, we're going to feed it into that same encoder neural network, but it's going to get as input that hidden state as well. So we pass in the second word. We also get the information about the hidden state, and that's going to continue for the other words in the input. This is going to produce a new hidden state. And so then when we get to the third word, the, that goes into the encoder. It also gets access to the hidden state, and then it produces a new hidden state that gets passed into the next run when we use the word capital. And the same thing is going to repeat for the other words that appear in the input. So of Massachusetts, that produces one final piece of hidden state. Now somehow, we need to signal the fact that we're done. There's nothing left in the input. And we typically do this by passing some kind of special token, say an end token, into the neural network. And now the decoding process is going to start. We're going to generate the word the. But in addition to generating the word the, this decoder network is also going to generate some kind of hidden state. And so what happens the next time? Well, to generate the next word, it might be helpful to know what the first word was. So we might pass the first word the back into the decoder network. It's going to get as input this hidden state, and it's going to generate the next word capital. And that's also going to generate some hidden state. And we'll repeat that, passing capital into the network to generate the third word is, and then one more time in order to get the fourth word Boston. And at that point, we're done. But how do we know we're done? Usually, we'll do this one more time, pass Boston into the decoder network, and get an output some end token to indicate that that is the end of our input. And so this then is how we could use a recurrent neural network to take some input, encode it into some hidden state, and then use that hidden state to decode it into the output we're interested in. To visualize it in a slightly different way, we have some input sequence. This is just some sequence of words. That input sequence goes into the encoder, which in this case is a recurrent neural network generating these hidden states along the way until we generate some final hidden state, at which point we start the decoding process. Again, using a recurrent neural network, that's going to generate the output sequence as well. So we've got the encoder, which is encoding the information about the input sequence into this hidden state, and then the decoder, which takes that hidden state and uses it in order to generate the output sequence. But there are some problems. And for many years, this was the state of the art. The recurrent neural network and variance on this approach were some of the best ways we knew in order to perform tasks in natural language processing. But there are some problems that we might want to try to deal with and that have been dealt with over the years to try and improve upon this kind of model. And one problem you might notice happens in this encoder stage. We've taken this input sequence, the sequence of words, and encoded it all into this final piece of hidden state. And that final piece of hidden state needs to contain all of the information from the input sequence that we need in order to generate the output sequence. And while that's possible, it becomes increasingly difficult as the sequence gets larger and larger. For larger and larger input sequences, it's going to become more and more difficult to store all of the information we need about the input inside this single hidden state piece of context. That's a lot of information to pack into just a single value. It might be useful for us, when generating output, to not just refer to this one value, but to all of the previous hidden values that have been generated by the encoder. And so that might be useful, but how could we do that? We've got a lot of different values. We need to combine them somehow. So you could imagine adding them together, taking the average of them, for example. But doing that would assume that all of these pieces of hidden state are equally important. But that's not necessarily true either. Some of these pieces of hidden state are going to be more important than others, depending on what word they most closely correspond to. This piece of hidden state very closely corresponds to the first word of the input sequence. This one very closely corresponds to the second word of the input sequence, for example. And some of those are going to be more important than others. To make matters more complicated, depending on which word of the output sequence we're generating, different input words might be more or less important. And so what we really want is some way to decide for ourselves which of the input values are worth paying attention to, at what point in time. And this is the key idea behind a mechanism known as attention. Attention is all about letting us decide which values are important to pay attention to, when generating, in this case, the next word in our sequence. So let's take a look at an example of that. Here's a sentence. What is the capital of Massachusetts? Same sentence as before. And let's imagine that we were trying to answer that question by generating tokens of output. So what would the output look like? Well, it's going to look like something like the capital is. And let's say we're now trying to generate this last word here. What is that last word? How is the computer going to figure it out? Well, what it's going to need to do is decide which values it's going to pay attention to. And so the attention mechanism will allow us to calculate some attention scores for each word, some value corresponding to each word, determining how relevant is it for us to pay attention to that word right now? And in this case, when generating the fourth word of the output sequence, the most important words to pay attention to might be capital and Massachusetts, for example. That those words are going to be particularly relevant. And there are a number of different mechanisms that have been used in order to calculate these attention scores. It could be something as simple as a dot product to see how similar two vectors are, or we could train an entire neural network to calculate these attention scores. But the key idea is that during the training process for our neural network, we're going to learn how to calculate these attention scores. Our model is going to learn what is important to pay attention to in order to decide what the next word should be. So the result of all of this, calculating these attention scores, is that we can calculate some value, some value for each input word, determining how important is it for us to pay attention to that particular value. And recall that each of these input words is also associated with one of these hidden state context vectors, capturing information about the sentence up to that point, but primarily focused on that word in particular. And so what we can now do is if we have all of these vectors and we have values representing how important is it for us to pay attention to those particular vectors, is we can take a weighted average. We can take all of these vectors, multiply them by their attention scores, and add them up to get some new vector value, which is going to represent the context from the input, but specifically paying attention to the words that we think are most important. And once we've done that, that context vector can be fed into our decoder in order to say that the word should be, in this case, Boston. So attention is this very powerful tool that allows any word when we're trying to decode it to decide which words from the input should we pay attention to in order to determine what's important for generating the next word of the output. And one of the first places this was really used was in the field of machine translation. Here's an example of a diagram from the paper that introduced this idea, which was focused on trying to translate English sentences into French sentences. So we have an input English sentence up along the top, and then along the left side, the output French equivalent of that same sentence. And what you see in all of these squares are the attention scores visualized, where a lighter square indicates a higher attention score. And what you'll notice is that there's a strong correspondence between the French word and the equivalent English word, that the French word for agreement is really paying attention to the English word for agreement in order to decide what French word should be generated at that point in time. And sometimes you might pay attention to multiple words if you look at the French word for economic. That's primarily paying attention to the English word for economic, but also paying attention to the English word for European in this case too. And so attention scores are very easy to visualize to get a sense for what is our machine learning model really paying attention to, what information is it using in order to determine what's important and what's not in order to determine what the ultimate output token should be. And so when we combine the attention mechanism with a recurrent neural network, we can get very powerful and useful results where we're able to generate an output sequence by paying attention to the input sequence too. But there are other problems with this approach of using a recurrent neural network as well. In particular, notice that every run of the neural network depends on the output of the previous step. And that was important for getting a sense for the sequence of words and the ordering of those particular words. But we can't run this unit of the neural network until after we've calculated the hidden state from the run before it from the previous input token. And what that means is that it's very difficult to parallelize this process. That as the input sequence get longer and longer, we might want to use parallelism to try and speed up this process of training the neural network and making sense of all of this language data. But it's difficult to do that. And it's slow to do that with a recurrent neural network because all of it needs to be performed in sequence. And that's become an increasing challenge as we've started to get larger and larger language models. The more language data that we have available to us to use to train our machine learning models, the more accurate it can be, the better representation of language it can have, the better understanding it can have, and the better results that we can see. And so we've seen this growth of large language models that are using larger and larger data sets. But as a result, they take longer and longer to train. And so this problem that recurrent neural networks are not easy to parallelize has become an increasing problem. And as a result of that, that was one of the main motivations for a different architecture, for thinking about how to deal with natural language. And that's known as the transformer architecture. And this has been a significant milestone in the world of natural language processing for really increasing how well we can perform these kinds of natural language processing tasks, as well as how quickly we can train a machine learning model to be able to produce effective results. There are a number of different types of transformers in terms of how they work. But what we're going to take a look at here is the basic architecture for how one might work with a transformer to get a sense for what's involved and what we're doing. So let's start with the model we were looking at before, specifically at this encoder part of our encoderdecoder architecture, where we used a recurrent neural network to take this input sequence and capture all of this information about the hidden state and the information we need to know about that input sequence. Right now, it all needs to happen in this linear progression. But what the transformer is going to allow us to do is process each of the words independently in a way that's easy to parallelize, rather than have each word wait for some other word. Each word is going to go through this same neural network and produce some kind of encoded representation of that particular input word. And all of this is going to happen in parallel. Now, it's happening for all of the words at once, but we're really just going to focus on what's happening for one word to make it clear. But know that whatever you're seeing happen for this one word is going to happen for all of the other input words, too. So what's going on here? Well, we start with some input word. That input word goes into the neural network. And the output is hopefully some encoded representation of the input word, the information we need to know about the input word that's going to be relevant to us as we're generating the output. And because we're doing this each word independently, it's easy to parallelize. We don't have to wait for the previous word before we run this word through the neural network. But what did we lose in this process by trying to parallelize this whole thing? Well, we've lost all notion of word ordering. The order of words is important. The sentence, Sherlock Holmes gave the book to Watson, has a different meaning than Watson gave the book to Sherlock Holmes. And so we want to keep track of that information about word position. In the recurrent neural network, that happened for us automatically because we could run each word one at a time through the neural network, get the hidden state, pass it on to the next run of the neural network. But that's not the case here with the transformer, where each word is being processed independent of all of the other ones. So what are we going to do to try to solve that problem? One thing we can do is add some kind of positional encoding to the input word. The positional encoding is some vector that represents the position of the word in the sentence. This is the first word, the second word, the third word, and so forth. We're going to add that to the input word. And the result of that is going to be a vector that captures multiple pieces of information. It captures the input word itself as well as where in the sentence it appears. The result of that is we can pass the output of that addition, the addition of the input word and the positional encoding into the neural network. That way, the neural network knows the word and where it appears in the sentence and can use both of those pieces of information to determine how best to represent the meaning of that word in the encoded representation at the end of it. In addition to what we have here, in addition to the positional encoding and this feed forward neural network, we're also going to add one additional component, which is going to be a selfattention step. This is going to be attention where we're paying attention to the other input words. Because the meaning or interpretation of an input word might vary depending on the other words in the input as well. And so we're going to allow each word in the input to decide what other words in the input it should pay attention to in order to decide on its encoded representation. And that's going to allow us to get a better encoded representation for each word because words are defined by their context, by the words around them and how they're used in that particular context. This kind of selfattention is so valuable, in fact, that oftentimes the transformer will use multiple different selfattention layers at the same time to allow for this model to be able to pay attention to multiple facets of the input at the same time. And we call this multiheaded attention, where each attention head can pay attention to something different. And as a result, this network can learn to pay attention to many different parts of the input for this input word all at the same time. And in the spirit of deep learning, these two steps, this multiheaded selfattention layer and this neural network layer, that itself can be repeated multiple times, too, in order to get a deeper representation, in order to learn deeper patterns within the input text and ultimately get a better representation of language in order to get useful encoded representations of all of the input words. And so this is the process that a transformer might use in order to take an input word and get it its encoded representation. And the key idea is to really rely on this attention step in order to get information that's useful in order to determine how to encode that word. And that process is going to repeat for all of the input words that are in the input sequence. We're going to take all of the input words, encode them with some kind of positional encoding, feed those into these selfattention and feedforward neural networks in order to ultimately get these encoded representations of the words. That's the result of the encoder. We get all of these encoded representations that will be useful to us when it comes time then to try to decode all of this information into the output sequence we're interested in. And again, this might take place in the context of machine translation, where the output is going to be the same sentence in a different language, or it might be an answer to a question in the case of an AI chatbot, for example. And so now let's take a look at how that decoder is going to work. Ultimately, it's going to have a very similar structure. Any time we're trying to generate the next output word, we need to know what the previous output word is, as well as its positional encoding. Where in the output sequence are we? And we're going to have these same steps, selfattention, because we might want an output word to be able to pay attention to other words in that same output, as well as a neural network. And that might itself repeat multiple times. But in this decoder, we're going to add one additional step. We're going to add an additional attention step, where instead of selfattention, where the output word is going to pay attention to other output words, in this step, we're going to allow the output word to pay attention to the encoded representations. So recall that the encoder is taking all of the input words and transforming them into these encoded representations of all of the input words. But it's going to be important for us to be able to decide which of those encoded representations we want to pay attention to when generating any particular token in the output sequence. And that's what this additional attention step is going to allow us to do. It's saying that every time we're generating a word of the output, we can pay attention to the other words in the output, because we might want to know, what are the words we've generated previously? And we want to pay attention to some of them to decide what word is going to be next in the sequence. But we also care about paying attention to the input words, too. And we want the ability to decide which of these encoded representations of the input words are going to be relevant in order for us to generate the next step. And so these two pieces combine together. We have this encoder that takes all of the input words and produces this encoded representation. And we have this decoder that is able to take the previous output word, pay attention to that encoded input, and then generate the next output word. And this is one of the possible architectures we could use for a transformer, with the key idea being these attention steps that allow words to pay attention to each other. During the training process here, we can now much more easily parallelize this, because we don't have to wait for all of the words to happen in sequence. And we can learn how we should perform these attention steps. The model is able to learn what is important to pay attention to, what things do I need to pay attention to, in order to be more accurate at predicting what the output word is. And this has proved to be a tremendously effective model for conversational AI agents, for building machine translation systems. And there have been many variants proposed on this model, too. Some transformers only use an encoder. Some only use a decoder. Some use some other combination of these different particular features. But the key ideas ultimately remain the same, this real focus on trying to pay attention to what is most important. And the world of natural language processing is fast growing and fast evolving. Year after year, we keep coming up with new models that allow us to do an even better job of performing these natural language related tasks, all on the surface of solving the tricky problem, which is our own natural language. We've seen how the syntax and semantics of our language is ambiguous, and it introduces all of these new challenges that we need to think about, if we're going to be able to design AI agents that are able to work with language effectively. So as we think about where we've been in this class, all of the different types of artificial intelligence we've considered, we've looked at artificial intelligence in a wide variety of different forms now. We started by taking a look at search problems, where we looked at how AI can search for solutions, play games, and find the optimal decision to make. We talked about knowledge, how AI can represent information that it knows and use that information to generate new knowledge as well. Then we looked at what AI can do when it's less certain, when it doesn't know things for sure, and we have to represent things in terms of probability. We then took a look at optimization problems. We saw how a lot of problems in AI can be boiled down to trying to maximize or minimize some function. And we looked at strategies that AI can use in order to do that kind of maximizing and minimizing. We then looked at the world of machine learning, learning from data in order to figure out some patterns and identify how to perform a task by looking at the training data that we have available to it. And one of the most powerful tools there was the neural network, the sequence of units whose weights can be trained in order to allow us to really effectively go from input to output and predict how to get there by learning these underlying patterns. And then today, we took a look at language itself, trying to understand how can we train the computer to be able to understand our natural language, to be able to understand syntax and semantics, make sense of and generate natural language, which introduces a number of interesting problems too. And we've really just scratched the surface of artificial intelligence. There is so much interesting research and interesting new techniques and algorithms and ideas being introduced to try to solve these types of problems. So I hope you enjoyed this exploration into the world of artificial intelligence. A huge thanks to all of the course's teaching staff and production team for making the class possible. This was an introduction to artificial intelligence with Python.
