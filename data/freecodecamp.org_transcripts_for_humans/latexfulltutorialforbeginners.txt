With timestamps:

00:00 - latex is a type setting system for
00:03 - creating professional looking documents
00:06 - commonly used in Academia and scientific
00:09 - publishing with the focus on content
00:12 - rather than appearance Michelle crummel
00:14 - is your instructor in this latex course
00:17 - for beginners
00:18 - she is an experienced teacher with
00:20 - multiple mathematics degrees
00:26 - welcome I'm Michelle crummell and in
00:28 - this video I'm going to show you how to
00:29 - get started using latex latex is a
00:32 - document markup language and it's used
00:34 - to create professional looking documents
00:36 - with consistent formatting it's
00:38 - especially useful if you're typesetting
00:40 - mathematical notation so it's great if
00:42 - you're writing a paper that contains
00:43 - mathematics if you're creating tests and
00:45 - quizzes or typing up homework
00:47 - assignments I use it for other things
00:49 - too like creating slide presentations
00:50 - and even writing letters of
00:52 - recommendations it has many many uses
00:55 - as a teacher some of the main reasons I
00:57 - prefer using latex over word processors
01:00 - besides just how professional it the
01:02 - output looks is that latex is
01:04 - cross-platform it's backwards compatible
01:07 - it produces PDF files that are small and
01:10 - can be opened on any device and it's
01:12 - free open source and highly customizable
01:15 - but before you get started creating your
01:18 - own latex documents you have a decision
01:19 - to make do you want to work and store
01:21 - your files online or offline
01:24 - the advantages of working online are
01:27 - that you don't have to download install
01:29 - or update any software onto your
01:31 - computer so you can get started right
01:34 - away you can even work collaboratively
01:36 - in real time using shared documents
01:41 - the advantages of working offline on the
01:43 - other hand are that you have complete
01:45 - control over how you organize and store
01:47 - your files and you don't need an
01:49 - internet connection to work on your
01:51 - files
01:52 - both options work really well it just
01:54 - depends what's going to be best for you
01:56 - so I'm going to start by showing you how
01:59 - to work online because for a beginner
02:02 - that's probably the fastest and easiest
02:05 - way to get started
02:08 - so to work online we're going to use a
02:10 - website called overleaf so you can just
02:13 - do a Google search for overleaf or you
02:15 - can go right to overleaf.com now I
02:19 - already have an account set up so when I
02:21 - went to overleaf.com it automatically
02:23 - logged me in but if this is your first
02:25 - time visiting overleaf you will want to
02:28 - create an account and you can do that
02:30 - using an email address so because I
02:32 - don't have any files created so far in
02:35 - my account this is the screen I'm seeing
02:38 - when I log in once you create at least
02:41 - one Tech file you're going to see a
02:44 - different screen when you first log in
02:45 - and you'll see a list of all of your
02:47 - files but for now we're going to click
02:49 - on create first project and we want a
02:52 - blank project and you're going to have
02:53 - to come up with a name for your project
02:55 - I'm just going to call this tutorial one
03:00 - so when we create a new project in
03:03 - overleaf it's automatically going to
03:06 - populate some code for us this is really
03:08 - really just the basics here and we can
03:12 - see that we have sort of three Windows
03:15 - here on the far left this is going to
03:18 - show us our file structure the name of
03:21 - our Tech file is main.tech and then in
03:24 - the middle here we have the place where
03:27 - we're going to be typing our code and
03:29 - then over on the right we have our PDF
03:32 - output so we can see what our final
03:34 - document is going to look like
03:37 - so just a couple of things to point out
03:40 - here when you make any changes to the
03:43 - code and you want to see what they look
03:45 - like in the output you are going to have
03:47 - to click recompile
03:49 - when you make changes over here it's not
03:52 - going to automatically update on the
03:53 - right you do have to hit recompile and
03:57 - generally if you're not working in
03:59 - overleaf you're not going to get this
04:01 - sort of starter template here you're
04:03 - just going to have an empty slate to
04:05 - work with now if I try and compile right
04:07 - now I'm probably going to get an error
04:09 - because there is no code let's see what
04:11 - happens
04:12 - yeah so it's not giving us just a blank
04:14 - PDF it's actually coming back with an
04:17 - error and saying that it can't compile
04:18 - the code and that is of course because
04:20 - we don't have any code
04:23 - so let's just do some really basic
04:25 - code in here in overleaf and then I'm
04:28 - going to switch over and show you how
04:30 - you can work offline that's my preferred
04:32 - method and that's what I'm going to be
04:33 - using in my future tutorials
04:35 - so to start our document we're going to
04:38 - hit backslash and we want to make sure
04:40 - that we are always using the backslash
04:43 - and not the forward slash so the
04:45 - backslash is starting our Command and
04:47 - then I want document class now as I
04:49 - start typing document class you can see
04:52 - that it's kind of guessing what I'm
04:54 - going to be typing and I can now just
04:59 - click on that to complete the command or
05:02 - I could have just continued typing it
05:04 - out with my keyboard so we have document
05:06 - class then we have a pair of square
05:09 - brackets followed by a pair of curly
05:12 - brackets and we have to type something
05:15 - in these brackets this is part of the
05:17 - code so in the curly brackets at the end
05:20 - we're going to Define what kind of class
05:23 - that we're using and for us it's going
05:25 - to be an article
05:27 - now that doesn't mean we're writing an
05:28 - article like a newspaper article but
05:30 - that is just the name of the class the
05:32 - type of document that we are creating
05:34 - there are other document classes that
05:36 - you can use for example if we had
05:39 - entered Beamer there we would be
05:40 - creating slides almost like a PowerPoint
05:43 - presentation
05:45 - if we typed exam there then we have a
05:49 - different type of class where that I use
05:52 - for creating tests and quizzes
05:54 - but most of the time
05:56 - I use article now the square brackets
05:58 - these are for optional arguments so I
06:02 - could actually delete the square
06:03 - brackets and not use them at all I could
06:05 - even just leave them there blank with
06:08 - nothing inside but here we can type some
06:12 - options so one of the things that we can
06:14 - type in here is the font size so I think
06:19 - the default is 10 point I'm not sure I
06:21 - always use 11 points so now I can't even
06:23 - remember now what the default is but if
06:25 - we want to use 11 Point instead of 10
06:28 - point or 12 point then we can type that
06:31 - the PT stands for point and that's going
06:33 - to change our font size now if I try
06:35 - compiling right now I have some code
06:37 - here right I suspect I'm still going to
06:39 - get an error
06:41 - yeah I'm still getting error because I
06:43 - haven't really started my document yet
06:45 - there's no real content in here so
06:48 - that's like the bare minimum that you
06:50 - need to declare before you actually
06:52 - begin your document the next thing we're
06:54 - going to type is backslash begin
06:58 - and then in curly brackets
07:01 - document so again it's anticipating what
07:04 - I want I can just hit enter
07:07 - and it will fill in for me or I could
07:10 - have continued to type it out on my
07:12 - keyboard now when I hit enter notice not
07:15 - only did it give me begin document but
07:17 - it also gave me end document so this is
07:19 - a command that comes in a pair it's got
07:22 - a begin and an end if you type backslash
07:26 - begin document and you forget to type
07:28 - backslash end document your file will
07:31 - not compile so it knows when it sees a
07:34 - begin to be looking for a matching end
07:37 - so we want to make sure and do that and
07:38 - it's a good idea to go ahead and just
07:40 - type the ending command and then move
07:42 - your cursor back in between and type the
07:45 - rest of your content so you don't forget
07:48 - and let's do just something really basic
07:50 - like hello
07:52 - and I'm going to compile recompile and
07:54 - see what we get
07:57 - so we do have something now something on
07:59 - the screen you can see that not
08:00 - everything I typed in the code is
08:02 - showing up on the screen the commands
08:05 - aren't going to show up but the text
08:06 - itself is and we can use the color
08:08 - coding to kind of give us an indication
08:11 - of what's what so the text that I typed
08:13 - is colored black whereas the commands
08:17 - the backslash document class backslash
08:19 - begin backslash end those are blue so we
08:22 - can distinguish between them
08:26 - so let's type a little bit more than
08:27 - that this is my first
08:31 - latex document
08:34 - and recompile it's a good idea to
08:36 - compile frequently because if you wait
08:39 - for too long before you compile you may
08:42 - end up with five or six errors and then
08:43 - it's very difficult to go back and
08:45 - figure out exactly where the errors
08:46 - happened you know it ideally you would
08:48 - only want you know one error to deal
08:50 - with at a time so it's it is a good idea
08:52 - to compile frequently and that way you
08:54 - can catch any errors right when they
08:56 - when they happen
08:58 - all right so hello this is my first
08:59 - latex document and you may have noticed
09:03 - if you've been kind of looking at things
09:04 - online that the the word latex is often
09:09 - typeset in a very particular way it's
09:12 - kind of got a special font if you will
09:14 - to make it look a certain way and we can
09:17 - very easily accomplish that here by
09:19 - putting a backslash in front of latex
09:22 - now you do have to spell it exactly how
09:25 - I spelled it with a capital l a
09:27 - lowercase a a capital t a lowercase e
09:29 - and a capital x so let's recompile and
09:32 - see what happens
09:33 - now actually this doesn't look great I
09:36 - mean it's nice that uh the word latex is
09:41 - typeset correctly but there's no space
09:43 - between the X and the word document so
09:46 - to get the space in there I'm going to
09:48 - just put another backslash at the end of
09:50 - that command
09:52 - okay and that fixed that right up
09:54 - now you might be wondering why it's
09:57 - spelled l-a-t-e-x and I keep saying
10:00 - latex and not latex the letter at the
10:03 - end of the word is actually not an X
10:05 - it's actually the Greek letter Chi and
10:08 - the Greek letter Chi sounds more like a
10:11 - k than it does an X it doesn't sound
10:13 - exactly like a k but that's the closest
10:15 - I would say letter in our alphabet to
10:17 - what it sounds like so it's a it's like
10:19 - a hard k sound it's not an X sound at
10:22 - the end a lot of people say latex
10:24 - instead of latex both are correct it's
10:27 - just a matter of preference
10:29 - so there we are which is just a really
10:31 - basic document that we've gotten started
10:33 - here and I do want to do a little bit
10:34 - more with this to explain
10:36 - especially like how line breaks and some
10:40 - very basic format formatting works but
10:42 - I'm going to go ahead and switch over
10:44 - now to working offline and show you how
10:46 - to do that if you have
10:49 - lots of latex files like I do I mean I
10:52 - have thousands and thousands of latex
10:53 - files that I create
10:55 - um I prefer to be able to store them on
10:59 - my hard drive if I'm working an overleaf
11:01 - everything kind of gets let me go ahead
11:03 - and show you before we leave I'm going
11:06 - to hit this up Arrow to go back to kind
11:09 - of this
11:10 - main screen here and if I list all my
11:14 - projects I only have this one that I
11:16 - created tutorial one
11:18 - but as I start creating more projects
11:20 - you're just going to see a long list of
11:22 - files here I like to be able to put
11:24 - things in folders and subfolders and in
11:27 - some cases Sub sub folders and move
11:29 - things around on my computer to store
11:31 - things the way that I want so that's the
11:33 - one downside I personally find with
11:36 - using overleaf is just the file
11:37 - structure and how you store and find
11:39 - things now you can tag your files which
11:42 - does allow you to filter things and make
11:44 - it easier so instead of having a list of
11:46 - 100 files you know maybe you can narrow
11:49 - it down by by tags and that does help a
11:51 - bit so if you do want to work offline
11:55 - you are going to need to install some
11:57 - software on your computer and there are
11:59 - two pieces of software that you need to
12:03 - create latex documents you need a latex
12:06 - distribution and then you need a text
12:08 - editor so the latex distribution is what
12:12 - is going to turn your code into some
12:16 - kind of output file like a PDF file the
12:20 - text editor is just what you use to type
12:24 - the code and there are all kinds of text
12:26 - editors right you can even just use
12:28 - notepad something really basic as a text
12:30 - editor to type your code it's important
12:33 - when you're installing these two pieces
12:36 - of software that you do so in the
12:38 - correct order install the distribution
12:40 - first you need to install your latex
12:43 - distribution first so I get quite a few
12:46 - comments people asking for help and
12:48 - saying you know they're they're trying
12:50 - to compile their first file and it's not
12:52 - working they're getting errors it's
12:53 - really important that you install your
12:55 - distribution first so that's up and
12:57 - running and then install your text
12:59 - editor and try using your text editor
13:03 - okay so what you what are you what
13:04 - should you install where there's lots
13:06 - and lots of options and then your
13:07 - options are going to be different based
13:09 - on whether you are a Windows PC user or
13:11 - a Mac OS user so if you have a Windows
13:14 - computer then my recommendation is to
13:17 - install mictec as your latex
13:19 - distribution you're going to do that
13:20 - first
13:22 - and then to install tech maker as your
13:25 - text editor now mid Tech when you
13:27 - install it does come bundled with its
13:29 - own text editor and you can use that I
13:32 - just don't find it as user friendly as
13:34 - tech maker tech maker is so wonderful
13:36 - for people who are starting out with all
13:39 - of the nice options and and the way that
13:41 - it color codes things and the way that
13:43 - you can create macros I really love
13:46 - techmaker and even though I'm not a
13:48 - beginner I that's still my go-to program
13:50 - for editing latex code
13:53 - if you are a Mac User I'm a Mac User
13:56 - then you want to install Mac Tech for
14:01 - your latex distribution and tech maker
14:04 - for your text editor okay so again
14:06 - please install your distribution first
14:08 - so that's either mctech or Mac Tech and
14:11 - then once that is installed you can
14:13 - install the text editor and all of this
14:16 - is absolutely free to download install
14:18 - and use
14:22 - so here I am in tech maker right so
14:26 - because I'm on a Mac I've got Mac Tech
14:28 - installed as my latex distribution now
14:31 - Mac Tech is not something that you would
14:34 - ever like click on and open it just
14:36 - works in the background the text edit
14:39 - editor is what you're going to interface
14:40 - with so I don't have to worry about Mac
14:43 - Tech or creating a shortcut um you know
14:46 - to it or anything like that you can once
14:48 - you have it installed and it's working
14:49 - you can just completely ignore it but
14:51 - tech maker my text editor is what I'm
14:55 - going to use to create my documents and
14:58 - type my code
15:00 - so right now I'm in techmaker now I this
15:03 - isn't a fresh install so I'm not sure
15:06 - that my screen looks exactly what like
15:08 - what you will see when you first log in
15:10 - it's possible that
15:12 - um
15:13 - that you have
15:15 - see this structure thing turned on here
15:19 - uh I'm just clicking through some of
15:21 - these other right now what I'm seeing
15:23 - looks more like what we saw in overleaf
15:25 - where you've got some
15:27 - um information over here I mean there's
15:29 - nothing here yet because we haven't
15:30 - created anything
15:31 - but some file structure information over
15:34 - here and then in the middle is where we
15:36 - will be typing our code and then over
15:37 - here on the right is where we will be
15:39 - viewing our PDF
15:41 - but to save on some screen space I
15:44 - really don't need to see the structure
15:46 - tag tab
15:49 - so I'm going to turn that off and then
15:51 - my messages log I mean it's I can turn
15:54 - it off it's going to automatically come
15:56 - back up when I compile so it's not that
15:58 - important the PDF viewer I do want to be
16:00 - able to see my PDFs as I work
16:03 - so I will leave that showing now we
16:06 - don't see anything because we we're not
16:08 - actually working in a file at the moment
16:10 - so the first thing we're going to do
16:12 - here is to create a file actually the
16:15 - first thing we should do is look at our
16:17 - preferences and and make sure that we
16:19 - have some good options selected so I'm
16:21 - going to go into tech maker sorry that's
16:23 - just a cut off you can't see that but if
16:27 - you go to your your menu here click on
16:29 - tech maker and preferences and I think
16:32 - it's different on the Mac version
16:34 - if you are on a Windows PC you might
16:37 - have to go to like preferences or
16:40 - options but somewhere in here you should
16:42 - be able to pull up the window that I'm
16:44 - seeing right now so it might be called
16:46 - options or it might be called
16:46 - preferences based on whether you have
16:49 - the Mac version or the windows version
16:51 - okay so what in this first screen for
16:54 - this commands tab you want to make sure
16:57 - that you have this box checked right
16:59 - here PDF viewer we want to embed the PDF
17:03 - that's what's going to allow us to see
17:04 - the PDF on the right and the code on the
17:06 - left so we want to check that box
17:09 - I'm using my built-in viewer to view the
17:12 - PDFs
17:14 - and then you also want to check this box
17:16 - down here launch the clean tool when
17:19 - exiting techmaker that's really useful
17:22 - when you create latex documents and you
17:26 - close your document
17:28 - you're going to see a lot of files that
17:31 - are created in that process you have
17:33 - your Tech file you have your PDF file
17:35 - and you have log files and a bunch of
17:37 - other files and really the only ones
17:39 - that you are going to need
17:41 - are the tech file which is you know your
17:44 - source code and then your PDF your
17:47 - output so just those two files so if you
17:49 - click launch the clean tool it will
17:52 - automatically delete all of those like
17:54 - helper files and make your just your
17:58 - folder structure and navigation so much
18:01 - easier to to deal with
18:03 - if we go to quick build you want to make
18:06 - sure that you've selected PDF latex view
18:08 - PDFs if your intention is to create PDF
18:12 - files
18:15 - under editor you can change some of
18:16 - these options if you like I normally
18:18 - don't have my font size this large but
18:20 - for the purposes of the video I want you
18:21 - to be able to see what I'm typing more
18:23 - clearly so I increased that I usually
18:25 - have it about 16. word wrapping I I
18:28 - recommend that you do keep that on and
18:30 - completion if you like that that's if
18:31 - you start to type a command it's going
18:33 - to suggest what it thinks that you're
18:37 - trying to type so you can just hit enter
18:38 - and then show line numbers is also
18:41 - really helpful
18:42 - because when you get error messages
18:45 - sometimes you can look at the line
18:47 - number and go right to that line number
18:49 - and try and figure out what the error is
18:51 - back up your document every 10 minutes
18:53 - you can turn that on if you like I I
18:55 - don't have any particular reason why I
18:57 - did not have it turned on
19:01 - let's see everything else looks pretty
19:02 - good shortcuts these are just keyboard
19:04 - shortcuts that that you probably don't
19:06 - want to worry about when you're first
19:07 - starting out but you might want to take
19:09 - a look at those as you get more
19:11 - comfortable with this
19:13 - okay so let's create our first document
19:15 - now you do have to actually create a
19:17 - document
19:18 - so I'm going to click on new here or you
19:21 - can use the menu and click on file new
19:25 - now this new document here it says
19:29 - Untitled we haven't saved it yet so I
19:33 - haven't actually created anything and
19:35 - even if I type some code and try and
19:37 - compile it I'm going to get an error
19:39 - message you have to save the file first
19:42 - name it and save it first before you're
19:45 - going to be able to compile it so don't
19:47 - skip that step because that can be
19:49 - frustrating you're wondering why this is
19:51 - not working you actually have to save
19:53 - the die it's not enough just to say I'm
19:55 - here I'm creating a new file you
19:57 - actually have to save it
20:00 - so file let's save this
20:06 - and I'm just going to call this tutorial
20:09 - one
20:09 - tutorial 01 now one thing I want to
20:12 - stress here is that you should never use
20:15 - spaces in your file names for your Tech
20:18 - files don't use spaces if you don't like
20:21 - your words all running together you can
20:23 - do something like a hyphen hyphens are
20:25 - fine if you want to do that you can do
20:27 - an underscore if you want to do that
20:29 - like if you have want to put multiple
20:31 - words in your title
20:33 - I usually do an underscore when I name
20:36 - my files but do not use a space so I'll
20:39 - just keep the underscore in here and the
20:42 - file extension is going to be dot Tech
20:44 - but that's you know that's going to
20:47 - happen by default so I don't really have
20:48 - to type the dot Tech when I am naming
20:51 - that so I'm going to just open up that
20:54 - folder and show you what I've just
20:56 - created
20:59 - okay here we go so this is my file that
21:03 - I just created
21:04 - tutorial01.tech and you can see that
21:06 - there aren't any other files in this
21:09 - folder
21:13 - so let's go ahead and recreate just the
21:15 - basic code that we had when we were
21:17 - using overleaf so backslash document
21:20 - class and I'm going to fill that in I
21:22 - think we had 11 points
21:24 - it's an article
21:27 - and then backslash begin documents
21:31 - and we have our end document and then we
21:33 - said hello
21:36 - this is my first
21:40 - latex
21:42 - document
21:44 - now to compile this we see that we don't
21:46 - have a recompile button like we did in
21:48 - overleaf I'm going to click on this
21:51 - Arrow
21:52 - to compile the code and it used to be I
21:55 - just clicked on this arrow and it would
21:56 - run both of these I'm not sure what my
21:58 - issue is at the moment but it's it's
22:00 - making me click both arrows like over
22:02 - here to compile and then here to view
22:04 - the PDF this isn't generally the way I
22:06 - do it the way I generally do it is to
22:08 - just hit F1 on the keyboard so as I'm
22:13 - working throughout these tutorials if
22:15 - you wonder like how how is it seem to be
22:17 - refreshing so quickly you didn't see me
22:19 - come up here and press on the Arrow it's
22:20 - because I just hit F1 on my keyboard
22:22 - that's a really fast way to do it
22:26 - oh wait I think I do know why that's not
22:28 - working quite right so the PDF latex
22:31 - will compile the code and then view PDF
22:35 - is going to is going to refresh the PDF
22:38 - so we can view it over here but if I
22:41 - want to do both of those things at once
22:43 - what I actually want to select here is
22:46 - quick build so that when I click on this
22:48 - Arrow it's going to
22:51 - do whatever I have saved in quick build
22:54 - and if we go back to our preferences
22:59 - quick build is right here I have PDF
23:02 - latex view PDF in my quick build so when
23:06 - I choose quick build it's going to do
23:08 - both of those two things
23:12 - and then while we're in here I'm going
23:15 - to go ahead and uncheck this backup
23:17 - every 10 minutes and the reason I'm
23:19 - going to uncheck that is because if I
23:21 - leave that on then not only am I going
23:23 - to be creating a tech file and a PDF but
23:25 - I'm also going to be creating a back Bak
23:28 - file and I just don't want to have all
23:30 - of that stuff in my folders it's
23:32 - absolutely not a big deal if you want to
23:34 - leave it on there and have backup files
23:36 - in your folders that is perfectly fine
23:40 - so here's what we have so far hello this
23:43 - is my first latex document and we can
23:46 - fit this to the width so it's a little
23:48 - easier to see we can you know zoom in or
23:51 - outfit it to a full page
23:54 - and so I'm going to continue to work in
23:57 - tech maker but if you are more
23:59 - comfortable working in overleaf you
24:01 - don't want to hassle with trying to get
24:02 - the software installed and up and
24:04 - running that is perfectly okay you can
24:06 - still type the same code that I'm typing
24:08 - and your output should look exactly the
24:10 - same
24:12 - I'm gonna go back to fit width so we
24:15 - have we can see this a little bit better
24:17 - it's not too small on your screen
24:19 - and let's move on so I have you know one
24:23 - line typed here next I want to type a
24:26 - little bit of math so I'm going to say a
24:27 - rectangle it has side lengths of X Plus
24:30 - 1 and X plus three so let me hit return
24:35 - and type that out
24:38 - [Music]
24:47 - and because this is in a sentence I know
24:49 - that it would look better
24:51 - if I used parentheses around the X Plus
24:54 - 1 and the X plus 3 so let me do that
24:57 - and let's compile and see how that looks
25:01 - so again you can use the arrows up here
25:03 - I'm just going to hit F1 on my keyboard
25:05 - and this is what we have now this might
25:08 - look okay to you it doesn't look that
25:10 - great to me
25:12 - there's a couple things I want to point
25:14 - out the first thing you might notice if
25:17 - you're used to working with a word
25:18 - processor is that a rectangle has side
25:21 - lengths of X Plus 1 and X plus 3 is not
25:24 - on a new line it just continued at the
25:28 - end of the first line and when we look
25:30 - at the code that's not what we might
25:33 - expect to happen because in in a word
25:35 - processor when you hit return right here
25:37 - then the output actually shows that you
25:40 - hit return right there and that's not
25:42 - going to happen here with our code our
25:45 - code is only going to create a line
25:48 - break if we tell it to create a line
25:51 - break and there are two ways to create
25:52 - line breaks and the same thing is true
25:54 - in a word processor there's two ways to
25:55 - create line breaks you can do a soft
25:57 - return you can do a hard return
25:58 - so a hard return is going to start a new
26:03 - paragraph if I want a hard return what I
26:06 - want to do is to just insert a blank
26:09 - line in between hello this is my first
26:12 - latex document and then the next
26:14 - sentence so if I leave a blank line in
26:16 - between those two sentences then the
26:18 - compiler knows to insert a hard return
26:22 - so let's compile recompile that
26:24 - and now we can see that we did in fact
26:27 - get a hard return
26:30 - so a rectangle has side lengths blah
26:32 - blah that is the second paragraph now
26:34 - that's a hard return if you want a soft
26:37 - return
26:39 - so let me go back here if you want a
26:40 - soft return then at the end of your line
26:43 - where you want the line break you type
26:45 - two backslashes okay so we will compile
26:48 - that
26:50 - and now we can see that we got a a new
26:54 - line for a rectangle has side lengths of
26:56 - however this looks a little bit
26:59 - strange right it looks different than
27:00 - what we saw before because a rectangle
27:03 - is starting further off to the left than
27:05 - hello this is a soft return so it didn't
27:08 - create a new paragraph
27:10 - and therefore the line is not indented
27:14 - so by default I haven't typed much code
27:17 - granted but by default here new
27:19 - paragraphs are going to be indented so
27:21 - the hello is indented a rectangle is not
27:26 - indented because it was just a soft
27:28 - return it's not a new paragraph
27:30 - now
27:31 - you can do something like this but it's
27:36 - it's not
27:37 - preferred what's going to happen if I do
27:40 - this let me turn on my messages log
27:43 - oh it actually didn't mind it okay I was
27:45 - expecting it to not like the combination
27:48 - of the soft and hard return there but it
27:49 - seems to be okay
27:52 - I like having this space in my code
27:55 - because it makes it easier you know for
27:57 - me to go back and find things
28:00 - versus this where everything just kind
28:02 - of runs together but you can decide
28:05 - which one you like better softer turn or
28:07 - a hard return there and you there are
28:10 - also ways that you can turn off the
28:12 - indenting because remember whether you
28:14 - do a softer turn or hard return is going
28:16 - to affect the way that your paragraphs
28:18 - are indented or your lines are indented
28:21 - so let's go ahead and do a hard return
28:24 - right these do seem like they're
28:25 - probably separate paragraphs
28:27 - and we'll update that I'm just using F1
28:29 - to recompile and there's still an issue
28:33 - here something that's okay but it's not
28:36 - great and that is that the x that I
28:39 - typed doesn't look like math it just
28:43 - looks like the letter X as if I had
28:45 - typed a word with an X in it so when we
28:48 - type variables in math typically we want
28:51 - them to be italicized so they look like
28:54 - variables and that's going to happen
28:56 - automatically as long as we tell the
28:59 - compiler that hey this is math it's not
29:01 - text so we're going to use something
29:03 - called Math mode to enter Math mode
29:07 - you type a dollar sign to start Math
29:10 - mode and then another dollar sign to end
29:13 - Math mode
29:14 - and you can see that the color changed
29:17 - when I did that when I typed that first
29:20 - dollar sign everything after the dollar
29:22 - sign turned green so Math mode things
29:25 - are going to be green and then when you
29:28 - end Math mode everything that's outside
29:30 - of math mode is going to go back to its
29:32 - normal color so the word and is black
29:34 - that's text mode okay so Math mode text
29:37 - mode and I want this X plus 3 to be in
29:39 - math mode as well so I'm going to type
29:40 - dollar signs
29:42 - around the X plus 3 and let's recompile
29:47 - and we can see the difference visually
29:49 - now that X is italicized the spacing is
29:53 - a little nicer because it knows that
29:55 - it's math and it needs to space things
29:57 - in a certain way to make everything look
29:59 - uniform
30:02 - all right I'm going to add some more to
30:03 - this I'm going to add another sentence
30:05 - so we have a rectangle has side lengths
30:06 - of X Plus 1 and X plus three
30:10 - I'm going to say the equation
30:12 - a of x equals
30:17 - x squared plus 4X Plus 3.
30:27 - gives the area of the rectangle so I
30:32 - want you to just anticipate what's going
30:34 - to happen when I compile what do you
30:36 - think this is going to look like
30:39 - so I'm going to hit F1 to compile
30:42 - and I have encountered my first error
30:45 - okay I can see that below here these
30:48 - things are popping up in red something
30:50 - has gone wrong something's wrong on line
30:52 - six and line seven and it's kind of
30:55 - giving me an indication it says missing
30:56 - dollar sign inserted right it didn't
30:59 - actually insert it for me but that is a
31:02 - a clue for me of what went wrong oh I
31:06 - probably forgot a dollar sign somewhere
31:07 - so a of x equals x squared now the
31:09 - letter A the letter X like those could
31:11 - be text so that's not what caused the
31:13 - issue I think it was this symbol right
31:15 - here this carrot symbol
31:17 - is only going to work in math mode it's
31:21 - not going to work as text so I'm going
31:23 - to
31:24 - put my equation in math mode by typing
31:27 - dollar signs around it and now we should
31:29 - be okay
31:31 - so again we see
31:33 - that the paragraphs are indented now
31:36 - that now that the paragraph is long
31:38 - enough to wrap down to another line we
31:40 - can see the way the indenting is working
31:42 - here so things are not great right this
31:45 - is okay it's in math mode the math
31:46 - actually looks good except for the fact
31:49 - that a of x equals is on one line and
31:52 - then the rest of the equation is on
31:54 - another line so that's not great if you
31:56 - want to make sure that to
31:58 - um
31:59 - keep your equation on a line you can put
32:02 - curly brackets around it and now when I
32:06 - recompile it's going to protect that for
32:07 - me so a of x equals x squared plus 4X
32:10 - plus 3 all got pushed down to the next
32:13 - line okay so looking pretty good still
32:16 - like if I I mean I'm still not that
32:18 - happy with it I think there should be
32:20 - some space between the paragraphs right
32:22 - but you know we're just talking about
32:24 - the basics right now so the next thing I
32:26 - want to tell you about is the difference
32:28 - between there's kind of two different
32:30 - math modes there's
32:33 - displayed Math mode and then there's
32:36 - inline Math mode
32:39 - if you use displayed Math mode whatever
32:42 - is in your displayed Math mode is going
32:44 - to be on its own line so we often see
32:47 - this in math textbooks
32:50 - where equations are put on their own
32:52 - line and to enter displayed Math mode
32:54 - all you have to do is type two dollar
32:56 - signs to begin displayed Math mode and
32:59 - then two dollar signs to end displayed
33:01 - math modes let's recompile
33:03 - and now we see that the the math in
33:06 - displayed Math mode got centered on its
33:09 - own line and there's some nice spacing
33:11 - there to separate it from the text and
33:13 - then the text just continues after that
33:15 - it's this is still happening like within
33:18 - a paragraph
33:20 - versus inline Math mode like the X Plus
33:22 - 1 and the X plus three those just appear
33:25 - in line with the text
33:29 - Okay so we've covered some basic
33:31 - information let's go ahead and I'm going
33:33 - to close this and then just show you now
33:36 - what I have in my folder where I created
33:40 - my tech file
33:42 - okay so if we navigate back to the
33:43 - folder where I created and saved my tech
33:47 - file now I see there are actually two
33:49 - files there there's the tech file that
33:52 - ends with DOT Tex and then there's the
33:54 - PDF file so the tech file
33:58 - is our code and here we can just see
34:01 - what that what just the text the code
34:04 - itself looks like there's a little
34:05 - preview of that and then here is the PDF
34:09 - so that's not all fitting on the screen
34:11 - let me make that a little smaller
34:14 - and there we go okay so that is the PDF
34:18 - document that I created
34:21 - check the description below for links to
34:23 - the files I created in this video as
34:25 - well as links to the software that I
34:27 - recommend using in the next tutorial
34:29 - we'll look at how to typeset commonly
34:31 - used mathematical notation using latex
34:37 - hello I'm Michelle crummel and in this
34:39 - video I'm going to show you how to type
34:41 - commonly used mathematical notation in
34:44 - latex
34:45 - I'm working with the software
34:47 - program called tech maker but you can
34:49 - use any text editor that you like if you
34:52 - watched my previous video creating a
34:54 - latex document I showed you how you can
34:57 - use overleaf so that you don't have to
34:59 - download and install any software
35:00 - overleaf runs right in your web browser
35:03 - so there is a link in the description
35:05 - below that you can click on if you want
35:07 - to create an overleaf account and work
35:10 - purely online if you want your screen to
35:13 - match mine exactly you're going to want
35:15 - to download tech maker make sure that
35:17 - you do have mictec or Mac Tech installed
35:20 - before you install techmaker so I am in
35:23 - techmaker right now and I'm going to
35:25 - create a new file so just click on that
35:27 - icon here and it looks like I have you
35:30 - know a new file ready to go it looks
35:32 - like it might be called Untitled one but
35:35 - actually we haven't saved this we
35:38 - haven't really created it yet so before
35:41 - we start typing any code this is very
35:43 - important we need to save this file and
35:46 - name it otherwise guys you could type
35:48 - all kinds of code in here and when you
35:50 - go to compile you're just going to get
35:51 - an error and it's not going to be able
35:53 - to do anything we have to save this file
35:55 - and name it first before we're going to
35:58 - be able to compile it so let's do that
36:02 - file will save as
36:07 - and you can save it anywhere you like on
36:09 - your computer I'm just going to call
36:11 - this one tutorial two
36:16 - and I mentioned in my last video you
36:19 - don't want
36:20 - spaces in your file names your text
36:22 - files should not have any spaces in the
36:24 - file name so use an underscore or a
36:27 - hyphen or simply just you know run all
36:29 - of the words together and
36:32 - that will automatically assign an
36:35 - extension of dot t e x to that file so
36:38 - here's my tutorial O2 Tech file and now
36:42 - I can start typing my code
36:44 - so we always start with backslash
36:46 - document class and tech maker is making
36:49 - this suggestion for me so I can hit
36:51 - enter as a shortcut here and have it
36:54 - fill in some of that for me now the
36:57 - square brackets are where we would Place
37:00 - optional arguments here it's unnecessary
37:03 - if I didn't want that I could delete
37:06 - that and just have the curly brackets we
37:08 - do need the curly brackets here the
37:11 - clasp that we are using today is article
37:14 - so that's fine I can do that if I do
37:16 - want to include some optional arguments
37:18 - one of the more common ones would be to
37:22 - declare the font size so your choices
37:25 - are 10.11 point or 12 point I usually
37:28 - like to go with 11 point
37:31 - and then we're always going to have
37:34 - backslash begin document
37:37 - and backslash end document that pair of
37:40 - commands there so I'm not going to
37:41 - compile yet I don't actually have any
37:43 - content we have to start typing
37:46 - something first we're working on
37:47 - mathematical notation today so I'm just
37:50 - going to go through lots of different
37:51 - categories and then show you how to type
37:54 - various Expressions that you might need
37:56 - so let's start with superscripts so I'm
38:00 - just going to type the word superscripts
38:01 - and now that I have something here when
38:03 - I build we should be able to see that
38:06 - and I'm just going to set this to oops
38:09 - not that
38:11 - um
38:12 - let me just set the width here so that
38:15 - we're seeing the whole page
38:17 - that that looks about good right there
38:18 - okay so superscripts and we want to
38:22 - actually type something with the
38:24 - superscript in it so that was just in
38:26 - text mode and I'm going to type 2x to
38:30 - the power 3. so 2x cubed
38:33 - 2x for the exponent we use that carrot
38:36 - symbol from the keyboard so there's 2x
38:39 - cubed however if I compile this right
38:41 - now I'm going to get an error because
38:43 - this carrot symbol needs to be in math
38:46 - mode not in text mode so to put this in
38:48 - math mode remember we wrap it in dollar
38:51 - signs and now I can build
38:54 - so I'm building by hitting this Arrow up
38:56 - here which is quick building for me so
38:58 - it's doing two things it's compiling the
39:00 - code and producing the PDF that we see
39:03 - over here on the right
39:04 - but I usually prefer to use my keyboard
39:07 - shortcut which is just F1 so if you
39:11 - don't see me come up here and press this
39:13 - button in the video then it's because I
39:16 - just hit F1 on my keyboard if I hit F1
39:18 - then it will compile
39:21 - so I can tell that the 2x cubed is in
39:23 - math mode because it turned green that's
39:25 - one of the nice features about tech
39:27 - maker that I like it does color code
39:29 - different parts of the code so it's easy
39:32 - to keep track of what you're doing
39:35 - and if we look at a result
39:37 - we've got I mean it's okay superscripts
39:40 - 2x cubed but I would like to separate
39:43 - the 2x cubed from the text and put it on
39:46 - its own line so we're going to do that
39:48 - by using displayed Math mode I'm going
39:51 - to use two dollar symbols at the
39:53 - beginning and the end of that and it
39:57 - puts the math mode on its own line
39:59 - centered on the line like so
40:03 - so next we're going to look at 2x to the
40:06 - power 34.
40:09 - again I'll use this displayed Math mode
40:11 - 2x to the power 34.
40:14 - so think about what that's going to look
40:16 - like the fact that I used double dollar
40:18 - signs means it's going to be placed on a
40:21 - separate line and it'll be centered on
40:23 - that line so I don't have to worry about
40:26 - putting in any kind of manual line break
40:29 - like we practiced in the first tutorial
40:32 - the double dollar signs will
40:34 - automatically start a new line for me so
40:36 - that's fine but if I want 2x to the
40:40 - power 34 what I'm expecting to see is x
40:43 - in the base and 34 in the exponent and
40:46 - if we build this and let me zoom in a
40:48 - little bit more so it's easier for you
40:50 - to see
40:51 - if we build this you can see that the 4
40:54 - didn't go up into the exponent so by
40:58 - default when you use this Keras symbol
41:00 - only the single digit that comes next is
41:03 - going to be placed in the exponent if
41:05 - you want more than that in the exponent
41:07 - then you have to use curly brackets
41:10 - and you can use the curly brackets even
41:12 - if you only have a single digit but I
41:15 - normally don't bother if it's just a
41:16 - single digit I don't bother putting the
41:18 - curly brackets but now when we compile
41:21 - we can see that the 34 has moved up into
41:23 - the exponent which is what I had
41:25 - intended
41:28 - so another example let's do 2 times x to
41:31 - the power 3x Plus 4.
41:34 - 2 times x to the power
41:37 - 3x plus 4. so if I want 3x plus 4 all to
41:41 - be in the exponent then I need to put
41:42 - curly brackets around that
41:45 - and that looks like I expected it to
41:47 - look
41:48 - and then let's do 2x to the power 3x to
41:54 - the fourth plus 5. so we're going to
41:55 - have an exponent inside of an exponent
42:00 - so 2x to the power curly brackets now
42:03 - generally when I'm doing this I find it
42:05 - quicker and easier if when I type the
42:09 - first curly bracket I go ahead and type
42:11 - the end one as well so that way I don't
42:14 - forget it at the end especially if I'm
42:16 - going to be using multiple curly
42:18 - brackets just makes it less likely that
42:21 - I'm going to forget to close one of my
42:24 - opening brackets and then sometimes I'll
42:25 - even just go ahead and go and do the
42:28 - same thing with my dollar signs and then
42:30 - I can just back up and enter what I need
42:32 - to inside of the brackets so we're going
42:34 - to put 3x to the fourth plus 5.
42:37 - 3x to the power 4
42:39 - plus 5. so this exponent here
42:44 - I didn't bother to use the curly
42:45 - brackets I could have wrapped the four
42:47 - and curly brackets but since it's just
42:49 - one single
42:50 - digit in the exponent it's unnecessary
42:53 - okay so now we have 3x to the power 4
42:55 - plus 5 all in the exponent here
43:01 - and
43:03 - now let's move on to subscripts
43:07 - subscripts work in a similar way
43:11 - so let's start with x sub 1 x sub 1 to
43:15 - get the subscript you use the underscore
43:18 - is that what it's called underscore and
43:21 - then whatever you want in your Sub sub
43:23 - script and again it will only put the
43:26 - next single digit into the subscript
43:28 - unless you use curly brackets so here
43:31 - we've got x sub 1 and if I want x sub 12
43:36 - for example x sub 12 this is not going
43:40 - to work it's still going to just do x
43:42 - sub 1 and then put a 2 right next to
43:45 - that so that's not what we want here we
43:48 - want 12 to be in the subscript so we put
43:50 - curly brackets around
43:53 - the 12.
43:55 - and now we've got 12 in our subscript
43:58 - you can have subscripts inside of
44:00 - subscripts as well so let's just do x
44:03 - sub 1 sub 2.
44:06 - and I think this might cause an error if
44:09 - we just type it like this yes it did
44:12 - cause an error so we have to use curly
44:14 - brackets here so the compiler knows what
44:18 - it is we're trying to do because it's
44:19 - different if you want x sub and then 1
44:24 - sub 2 versus x sub 1
44:28 - sub 2. so you have to decide how you're
44:30 - going to put your curly brackets where
44:32 - you're going to put your curly brackets
44:35 - generally I would say x sub and then
44:38 - everything you want in the subscript
44:40 - should go in curly brackets like this
44:43 - now look inside your curly brackets do
44:45 - we need more brackets well since there's
44:47 - just a single digit after the 2 right
44:49 - here is just a single digit after this
44:51 - subscript we should be okay with this
44:52 - and let's see how that looks
44:54 - so that's x sub 1 sub 2 and we could
44:58 - even go further with that
45:00 - if we wanted to do x sub 1 sub 2 Sub 3
45:05 - like so but we're going to have to
45:07 - figure out our brackets so x sub and
45:10 - then use curly brackets around your
45:12 - entire subscript
45:14 - now within that Curly brackets we have
45:17 - we need more brackets because we've got
45:19 - two subscripts in there so we want to be
45:20 - clear one sub and then we'll put curly
45:24 - brackets around the two sub three
45:27 - so I'm like nesting my subscripts here
45:30 - let's see how that looks so one sub two
45:32 - sub three and you could continue you
45:35 - know to to do this as many times as you
45:37 - need to
45:39 - so let's do one more example let's say
45:42 - we have a sequence and I'm not going to
45:47 - to use the curly bracket notation and
45:50 - let me just list some values so we might
45:52 - have a sub 0 comma a sub 1 comma a sub 2
45:58 - comma and then I want dot dot I'm not
46:02 - going to type the dot dot dot there is a
46:04 - latex command for that
46:05 - backslash L dots is going to do three
46:08 - dots the L is for lower they're going to
46:11 - be aligned at the bottom like lower
46:13 - aligned versus C Dots would be aligned
46:17 - in the center
46:18 - but l-dots will work for me fine right
46:21 - here and then we'll say a sub 100. now
46:25 - with 100 again I'm not going to type it
46:27 - like this or it's only going to be a sub
46:29 - 1 and then two zeros next to it that's
46:31 - not what we want we want 100 to be in
46:33 - the subscript so we need curly brackets
46:36 - there
46:39 - there we go so a Sub 0 a sub 1 a sub 2
46:42 - dot dot a sub 100.
46:48 - next let's look at some Greek letters
46:53 - we often use Greek letters in math
46:55 - notation and one of the most popular
46:58 - Greek letters that we use is the Greek
47:01 - letter Pi
47:02 - if you want to type Pi it's just
47:06 - backslash pi
47:10 - now that is the lowercase Pi if I wanted
47:13 - the capital Greek letter Pi
47:16 - backslash capital p i
47:19 - like so
47:21 - and that's the capital Pi if we want
47:23 - other Greek letters we can just type the
47:25 - name if you use a capital letter it's
47:27 - going to give you a a capital Greek
47:29 - letter if you use lowercase it's going
47:31 - to give you the lower case Greek letter
47:33 - for example we can do backslash Alpha
47:39 - and that's going to give us the
47:40 - lowercase Greek letter Alpha so you get
47:43 - the idea there
47:47 - and we might do something like a equals
47:50 - pi r squared right area of a circle so
47:54 - backslash Pi now it's important here
47:56 - that I enter a space and then do my r
48:00 - squared
48:02 - otherwise if I don't have the space
48:04 - there let me take out the space and show
48:06 - you that because it's all running
48:07 - together the compiler sees the command
48:10 - as backslash PIR
48:13 - th backslash PIR is not a valid latex
48:16 - command so it's going to get confused
48:18 - and we're going to get an error I'm
48:19 - pretty sure we're going to get an error
48:20 - let's try yep we're going to get an
48:23 - error and you can kind of see it's
48:24 - giving me a hint here of what what the
48:27 - error is it's something like that PIR
48:28 - see how to put a space between your
48:31 - command and the next thing
48:32 - and now it should be fine there we go
48:35 - area equals pi r squared right here
48:39 - okay so those are Greek letters there's
48:41 - you can do many other Greek letters I'm
48:43 - just showing you an example of a few
48:47 - let's talk about some trig functions
48:54 - if we want to enter for example y equals
48:57 - sine of x y equals you're going to use a
49:01 - first let me do it the wrong way
49:03 - because beginners might be beginner
49:06 - students often will just type this and
49:09 - they might not even think there's
49:11 - anything wrong with the way that looks
49:13 - right I mean you can read it it says y
49:15 - equals sign X but it is not displaying
49:18 - the way we would like our mathematical
49:19 - notation displayed the compiler because
49:23 - you're in math mode here thinks that the
49:25 - S is a variable the I is a variable the
49:28 - N is a variable and the x is a variable
49:30 - and so it's typesetting them all the
49:33 - same way and you can see it looks very
49:35 - uniform the way these letters have been
49:37 - typeset they're all italicized and
49:40 - spaced kind of the same way and they're
49:42 - all running together that's not how we
49:44 - want the sine of x to look so we put a
49:46 - backslash in front of our trig function
49:48 - sine cosine tangent secant cosecant
49:51 - cotangent and now when I compile
49:57 - you can see the difference the s-i-n is
50:00 - not italicized and there's a little bit
50:02 - of a space between the n and the X okay
50:06 - so this is how it's supposed to look we
50:09 - can do that for our other trig functions
50:11 - like I said y equals cosine X
50:18 - tangent X is t a n backslash t a n if we
50:22 - want to do the reciprocal trig functions
50:24 - y equals
50:26 - unless you do cosecant is CSC secant
50:30 - would be s e c cotangent would be c o t
50:33 - and instead of X let's just do theta so
50:36 - Theta is one of our Greek letters we're
50:38 - going to do backslash and then type out
50:40 - Theta I want a lowercase Theta here
50:43 - we've got y equals cosecant Theta and
50:46 - you can play around with it and see you
50:48 - know what happens if you did a capital
50:49 - Theta well we would get the Greek
50:51 - Capital Theta but that's not what we
50:53 - normally use for angles we use the
50:56 - lowercase
50:58 - there we go
51:00 - so you don't want to forget when you're
51:02 - doing your trig functions sine cosine
51:03 - tangent secant cosecant cotangent to put
51:06 - the backslash in front and the space
51:10 - between the trig command and then the
51:14 - argument or the angle
51:18 - we can do inverse trig functions as well
51:22 - so let's do sine inverse of negative one
51:26 - y equals
51:28 - sine inverse so backslash sine
51:31 - and then for inverse
51:34 - that we're going to use the notation
51:36 - where it puts a negative 1 as a
51:38 - subscript so remember how we did
51:40 - subscripts it's the carrot I want
51:42 - negative 1 in the subscript so I can't
51:44 - just do this that's not going to work
51:45 - that's only going to put the negative
51:47 - symbol in the exponent the one will not
51:49 - be in the exponent if I do that so I
51:51 - have to use curly brackets negative 1
51:53 - like so
51:55 - and then of X or Theta or whatever we
51:58 - happen to be using
52:02 - oh I did say sine inverse of negative 1
52:05 - didn't I although that's that's a little
52:08 - confusing because we would have negative
52:09 - one in two different places but if I
52:11 - wanted the sine inverse of one half for
52:15 - example we haven't done fractions yet
52:16 - we're about to do fractions let's keep
52:18 - it simple sine inverse of 1.
52:20 - there we go could do that or Theta
52:24 - or X or whatever we need there okay so
52:28 - that's sine inverse now we could also
52:30 - use the arc sine notation instead of
52:33 - using that negative one superscript we
52:35 - can just do
52:36 - y equals arc sine and it again is
52:40 - backslash and then you tarp type arc
52:44 - sine Arc s i n
52:47 - and then your angle
52:50 - okay so by putting the backslash in
52:53 - front of the arc sign it's indicating to
52:57 - the compiler hey these are not variables
52:58 - don't typeset them like variables so it
53:01 - looks like it's supposed to look here
53:04 - okay uh let's do log functions next
53:12 - and we will start with just a common log
53:15 - y equals log X now again
53:20 - think about what's going to happen if I
53:22 - compile this right now I'm in math mode
53:25 - it sees the Y the L the O the G the X
53:28 - thinks those are all variables so it's
53:30 - going to look funny
53:32 - I mean
53:33 - you can understand what it's supposed to
53:35 - be right but I do see beginning students
53:38 - doing this a lot in their papers and
53:40 - forgetting to put the backslash in front
53:42 - of the log use the backslash and then
53:45 - you need a space between the G and
53:46 - whatever comes next
53:48 - and then it will typeset this correctly
53:51 - so only the variables X and Y are
53:54 - italicized and the rest of the equation
53:56 - is not
53:57 - so there's the our common log y equals
54:00 - log of x let's change the base in our
54:02 - log so if we want
54:05 - log backslash log oh that's supposed to
54:07 - be equal y equals backslash log if we
54:10 - want base 5 for example we need a
54:13 - subscript so remember how we did
54:15 - subscripts it's the underscore five
54:18 - and then I'm going to type a space it's
54:21 - not strictly necessary because if I
54:24 - don't use curly brackets it will only
54:26 - subscript this the next digit but just
54:30 - to be clear I like to always put a space
54:32 - there like that so this log
54:36 - oh what did I do wrong oh I'm missing a
54:38 - dollar sign double dollar signs
54:41 - okay log base 5 of X and then let's do a
54:45 - natural log
54:48 - y equals backslash Ln
54:52 - Space X
54:54 - that's going to give us a natural log
54:58 - next let's talk about square roots and
55:03 - not necessarily square roots let's just
55:05 - say roots in general because we can see
55:07 - how to do cube roots or fifth roots or
55:09 - seventh roots
55:10 - so we'll just say roots in general
55:17 - we'll start simple
55:20 - square root of 2. so do a square root
55:23 - we're going to hit backslash
55:25 - s q r and tech maker is making two
55:29 - suggestions for me here so we can see
55:31 - it's backslash sqrt
55:35 - and then we have an option where there's
55:37 - square brackets curly brackets or we
55:39 - have an option where it's just curly
55:40 - brackets
55:41 - if you're just doing the square root of
55:43 - two you don't want the square brackets
55:45 - you just want the curly brackets so sqrt
55:48 - curly bracket two curly bracket like so
55:53 - and that's going to give us the square
55:55 - root of 2.
55:57 - the other option is for when you want
56:00 - roots that are not square roots so let's
56:03 - do the cube root of two
56:05 - you're still going to type backslash
56:08 - sqrt so it's like you're starting the
56:10 - square root command even if it's not a
56:12 - square root but then you're choosing the
56:15 - one that has the square brackets
56:16 - followed by the curly bracket so I can
56:18 - hit enter here to accept that and then
56:21 - start typing or I could just keep typing
56:22 - it manually so here the square brackets
56:25 - are for the root if I want a cube root
56:27 - then I type A 3. the curly brackets are
56:30 - for what goes inside of that radical
56:32 - symbol
56:33 - so we want the cube root of 2 it's going
56:36 - to look like so
56:39 - cube root of 2.
56:41 - now this one down here is my page number
56:43 - it's bugging me a little bit so I'm
56:45 - going to go ahead and turn off the page
56:48 - numbers and to do that I'm going to
56:49 - scroll back up
56:51 - and I am going to after document class
56:55 - I'm going to type
56:57 - backslash page Style
57:00 - curly brackets empty
57:03 - I think that'll take care of that so let
57:05 - me recompile
57:07 - and then yep our page number is gone so
57:10 - I'm turning that off just so that's not
57:12 - in our way
57:14 - okay back to more Roots let's do
57:17 - something more a little slightly more
57:19 - complicated like square root of x
57:21 - squared plus y squared
57:24 - so backslash square root
57:28 - x squared plus y squared
57:35 - okay looks good and now let's get
57:40 - um
57:42 - a little more complicated and put a
57:44 - square root inside of a square root so
57:46 - the square root of
57:47 - 1 plus square root of x
57:51 - so we'll start with the outside root the
57:53 - square root
58:00 - okay the square root of now
58:03 - once you start putting things inside of
58:06 - other things it can get a little bit
58:07 - confusing so what I will sometimes do is
58:10 - just insert some Extra Spaces just so
58:13 - it's easy for me to tell what's inside
58:15 - of what because it's got a little
58:17 - cushion around it so this is my like my
58:20 - outside square root my big square root
58:22 - and inside of the square root I'm going
58:23 - to put 1 plus the square root of x so 1
58:26 - plus backslash square root of x like so
58:32 - and compile
58:33 - and we've got one plus or the square
58:36 - root of 1 plus square root of x
58:40 - all right and then finally let's look at
58:43 - fractions
58:46 - so we'll do start with something really
58:48 - simple we'll just do the fraction
58:50 - two-thirds
58:52 - so the command is backslash Frac for
58:55 - fractions and you can see that tech
58:57 - maker is is prompting me I can hit enter
58:59 - to accept that
59:01 - and this is in general what it looks
59:03 - like when you want to make a fraction or
59:06 - if I'm typing it manually
59:07 - if I'm typing it manually I usually
59:10 - still do kind of a template thing so
59:12 - I'll do curly brackets for the numerator
59:14 - and then curly brackets for the
59:16 - denominator
59:18 - and then I'll just use my cursor and go
59:19 - back in
59:20 - uh and that way I don't forget to close
59:23 - my bracket so you have a pair of curly
59:24 - brackets for the numerator and then the
59:27 - next pair of curly brackets for the
59:29 - denominator so in the numerator is 2 and
59:33 - in the denominator we want three so this
59:35 - should give me the fraction two-thirds
59:38 - okay that looks good now I'm going to
59:40 - next I'm going to type this in a
59:41 - sentence
59:43 - so let's just say about
59:46 - and because I'm typing this in a
59:48 - sentence I'm not going to use double
59:49 - dollar signs I'm going to use single
59:51 - dollar signs because I want this to be
59:53 - inline Math mode
59:54 - so my fraction two thirds
59:58 - and I did that more quickly using my
60:01 - keyboard because
60:03 - let me do that one more time and explain
60:05 - backslash okay so here I just hit enter
60:08 - Because tech maker is going to populate
60:11 - that for me and notice it automatically
60:12 - highlighted the numerator so I type 2
60:15 - and then I can hit tab on my keyboard
60:17 - and then type the three so it goes
60:20 - pretty quick once you get the hang of it
60:22 - like that
60:23 - rather than just typing it manually so
60:25 - about two-thirds
60:27 - of the glass
60:29 - is full
60:32 - and there's that sentence
60:36 - so the two-thirds it's it's smaller
60:39 - obviously in this sentence than the
60:41 - two-thirds up here
60:43 - when you're in inline Math mode
60:45 - it's going to resize to to fit your
60:49 - sentence right you don't want this huge
60:52 - two-thirds but sometimes like if you're
60:54 - writing a homework problem quiz it
60:57 - worksheet something like that sometimes
60:59 - your fraction is too small in the
61:01 - sentence here and you do want to make it
61:03 - larger so easy way to do that is instead
61:06 - of backslash Frack use backslash defrac
61:10 - The D is going to put it in displayed
61:12 - Math mode
61:14 - defrac so now when I compile it it's
61:17 - going to be
61:19 - oh it didn't like that
61:22 - oh I may need a package in order to use
61:24 - that
61:26 - okay let me try this let me try this a
61:28 - different way
61:29 - because I haven't talked about packages
61:31 - yet
61:32 - but packages we will be using packages
61:35 - soon another way to get into displayed
61:38 - Math mode is to type backslash
61:40 - display Style
61:44 - let's try that
61:45 - there we go so now it made the
61:47 - two-thirds bigger same size as it made
61:50 - it up here when you use double dollar
61:52 - signs you're all you're automatically in
61:55 - displayed Math mode and so everything is
61:57 - large like this
61:59 - if you just do the slash Frac in inline
62:02 - math mode it's going to be small so this
62:04 - looks kind of silly the two-thirds is is
62:06 - really big compared to the rest of the
62:07 - sentence I don't like that so I'm gonna
62:09 - well I'll leave it in here just for
62:11 - tutorial purposes let's maybe copy that
62:15 - one more time
62:17 - and take it out take out the display
62:19 - Style
62:22 - so you can see a comparison now because
62:26 - I'm not
62:27 - using double dollar signs it's not
62:29 - automatically creating a new line so
62:32 - here's where we have to decide how we're
62:33 - going to break that line do we want to
62:36 - do a double backslash like that
62:39 - which will break the line
62:41 - you can see I I'm sort of running into
62:43 - an issue here because the lines are not
62:46 - far enough apart I can manually add some
62:49 - vertical spacing using square brackets
62:51 - and then inside the square brackets tell
62:53 - how much space I want so six and then
62:56 - you can use any unit of measurement here
62:58 - you can use centimeters six centimeters
62:59 - would obviously be way too big I usually
63:02 - use PT Point like Point size so give me
63:06 - six points of space at the end of this
63:09 - sentence and then when we compile you
63:11 - see it just it inserted some vertical
63:13 - space there for me
63:15 - your other option if you don't want to
63:16 - break the line that way would be to
63:19 - leave an empty line in between
63:21 - and that would also create a line break
63:23 - we talked about this in the last
63:25 - tutorial though notice it looks odd
63:28 - because this new line right here is
63:31 - starting a new paragraph and it's
63:33 - indented versus this line up here did
63:37 - not this this line up here is not
63:39 - indented so that's why it looks a bit
63:41 - funny there so I usually and it's just
63:44 - it just depends on what you need but I
63:47 - usually do something like this
63:50 - when I want line breaks
63:54 - and generally I if I want displayed
63:59 - um
64:00 - fractions display style fractions rather
64:03 - than typing out display style I just do
64:05 - backslash defrag
64:07 - but I did get an error when I tried that
64:08 - a moment ago
64:10 - let's try it again
64:12 - not that I'm expecting anything
64:13 - different
64:15 - two-thirds
64:17 - and I just have to figure out which
64:19 - package I need to use in order to get
64:21 - that to work properly so I'm going to go
64:23 - back up to the top and really quickly
64:25 - just figure this out
64:27 - use package
64:30 - and let's go with
64:34 - um
64:34 - AMS math I'm gonna I'm gonna use a
64:38 - couple packages here because I don't
64:39 - want to do them one at a time and try
64:40 - and figure this out AMS math AMS
64:44 - Sim
64:46 - and AMS fonts
64:50 - okay one of those worked because now it
64:53 - did compile correctly
64:57 - and
64:59 - oh that was
65:00 - unnecessary because I had double dollar
65:02 - signs so let me try that one more time
65:04 - because the double dollar signs
65:05 - automatically put it in displayed Math
65:07 - mode so it's kind of redundant that I
65:09 - used defrak inside of Double dollar
65:10 - signs it's not necessary to do that
65:13 - let's just try this again
65:19 - and verify that we are getting a large
65:21 - fraction here when we use defrac yep
65:24 - and I needed a line break there
65:30 - Okay so
65:32 - uh you can accomplish the same thing
65:34 - this way
65:36 - and this way
65:39 - let's try a more complicated fraction so
65:43 - I'm going to do a line break here
65:46 - again
65:49 - um
65:50 - now go ahead and put it in double dollar
65:52 - signs so this isn't technically
65:55 - necessary
65:57 - let's do this uh let's do
66:01 - a square root inside of our fraction so
66:04 - let's do the square root of X Plus 1
66:06 - over the square root of X Plus 2.
66:10 - so we'll start with fraction
66:13 - fraction like so in the numerator we
66:16 - want the square root of x plus one so
66:18 - backslash square root
66:22 - like so X plus one that's my numerator
66:25 - then here is my denominator so we're
66:28 - going to do square root
66:31 - X Plus 2.
66:34 - and then close our dollar signs
66:38 - and there we go so I did use you know
66:41 - tech maker to my advantage there I
66:44 - wasn't typing it all out manually if I
66:46 - wanted let's try that one more time if I
66:47 - were typing it out manually backslash
66:49 - Frac
66:50 - your curly bracket then slash square
66:53 - root you have to open another curly
66:55 - bracket so at this time you have to kind
66:56 - of mentally keep track that you have two
66:58 - curly brackets open and eventually you
67:00 - need to close the two curly brackets so
67:03 - X plus one close it for the square root
67:05 - close it for the numerator then we open
67:09 - curly brackets for the denominator
67:11 - backslash square root
67:13 - open curly bracket for the square root X
67:16 - plus two close the square root close the
67:19 - denominator
67:20 - and then close Math mode
67:23 - there we go
67:26 - now sometimes we work with complex
67:28 - fractions where you have a fraction
67:29 - inside of a fraction so let's try that
67:32 - so outside fraction
67:37 - and Let's do
67:39 - let's do one over
67:41 - so just one in the numerator that's it
67:44 - and then in the denominator let's do one
67:46 - plus one over X so 1 plus now I need a
67:50 - fraction so backslash frac
67:54 - 1 over X
67:57 - like so
67:59 - 1 over 1 plus 1 over X
68:03 - and you can of course have fractions
68:05 - inside of fractions inside of fractions
68:07 - you just want to pay attention to your
68:10 - brackets make sure that they're paired
68:13 - and like I showed you a moment ago
68:15 - sometimes it is helpful to space things
68:17 - out so my
68:19 - um
68:20 - denominator here
68:22 - had a bunch of stuff in it you might
68:24 - find it's helpful to kind of leave lots
68:27 - of space in the curly brackets for the
68:29 - denominator so that if you do get a
68:31 - compiling error you can go back and see
68:34 - that's probably where it would have
68:36 - occurred because that you've got you
68:38 - know complicated things inside of other
68:41 - things
68:42 - can be helpful as well
68:44 - that wraps up this tutorial on common
68:47 - math notation I do have another tutorial
68:50 - on calculus notation which will be much
68:53 - more involved there's lots of notation
68:56 - that we use in calculus that we need to
69:00 - use latex 4 because you can't type a lot
69:03 - of the calculus notation using your
69:05 - keyboard
69:06 - but in the next tutorial before we do
69:08 - that the next tutorial we're going to
69:10 - look at brackets tables and arrays so
69:12 - brackets include things like parentheses
69:14 - and square brackets and curly brackets
69:16 - and absolute value symbols we're going
69:18 - to see how to make those things expand
69:20 - in size because if you just type
69:25 - parentheses let me show you real quick
69:26 - right here around this
69:30 - it's going to look really bad
69:32 - well actually it doesn't look too
69:34 - terrible but the 1 over X here is
69:38 - longer vertically than the parentheses
69:41 - so we're going to see how you can fix
69:43 - that make your parentheses taller so
69:45 - that they do wrap around the content
69:47 - inside of the parentheses
69:49 - and then we will look at tables we'll do
69:51 - simple table we'll do a slightly more
69:53 - complex table and then we'll look at
69:54 - some arrays
69:59 - hello I'm Michelle cremolin in this
70:01 - video we are going to look at how to
70:03 - type set brackets tables and arrays
70:07 - using latex I'm working in tech maker
70:10 - but you can work in any text editor that
70:12 - you like or you can work online in
70:15 - overleaf and there are links in the
70:17 - description below to register for an
70:20 - overleaf account if you want to just
70:21 - work in your web browser so we have lots
70:23 - of different type of bracketing symbols
70:27 - when we use math notation but probably
70:29 - the most popular would be parentheses
70:31 - square brackets and curly brackets so
70:35 - let's start there if you have a short
70:37 - object then you don't need to do
70:39 - anything special for parentheses let's
70:42 - say for example
70:43 - the distributive property
70:48 - states that a times and notice I did use
70:52 - a dollar symbol to enter Math mode a
70:55 - times B plus c
70:58 - equals a times B plus a times C for all
71:03 - a b
71:07 - c i can get fancy here with my notation
71:11 - if I want I can use the element symbol
71:15 - or the backslash in
71:18 - and then if I want to say the set of
71:22 - real numbers then there's a special way
71:24 - to type that symbol as well backslash
71:27 - math BB
71:29 - curly brackets and then for the set of
71:30 - all real numbers I need a capital R now
71:32 - I think I'm going to have to load a
71:34 - special package to make this work let's
71:36 - see if I get a compiling error
71:38 - I do okay so let's come back up here
71:42 - in my Preamble everything before begin
71:45 - document it's called The Preamble and
71:48 - I'm going to use a package let's see AMS
71:51 - fonts
71:53 - AMS Sim
71:56 - AMS math I always load those three
72:00 - packages right off the bat so to be
72:02 - honest with you I don't even remember
72:03 - which one of the three I need it's only
72:05 - one of those three that I need to make
72:07 - this mathbv command work I'm just so in
72:10 - the habit of using all three packages
72:12 - all the time so don't remember which one
72:15 - does what
72:17 - that worked and we can see the result
72:19 - here the distributive property States
72:20 - and so here we have this in math mode a
72:23 - times B plus C the parentheses look good
72:26 - they are sized appropriately for what's
72:28 - inside equals a B plus AC for all a b
72:32 - and c in the set of real numbers
72:36 - now square brackets work in a similar
72:38 - way you can just type them using your
72:40 - keyboard so let's use a line break here
72:42 - there's a couple ways to do a line break
72:44 - I like to do the double backslash and
72:47 - then insert a little bit of extra space
72:50 - there are lots of other ways to get
72:52 - spacing between your lines things that
72:54 - you can do in your Preamble so that you
72:56 - don't have to do this every single time
72:57 - you can change the line spacing
72:59 - throughout your whole document but
73:00 - that's a little more complicated and
73:01 - we're trying to keep things really
73:03 - simple for right now so I'm just going
73:05 - to to do that and next we'll say the
73:08 - equivalence
73:10 - class
73:12 - of a I'm putting a in math mode is and
73:16 - then we'll use square brackets
73:19 - around the a there and I will typeset
73:21 - that
73:22 - so I'm just using F1 on my keyboard
73:24 - because that's a keyboard shortcut for
73:25 - tech maker to compile otherwise I could
73:28 - also come up here and click this Arrow
73:32 - okay so the equivalence class of a is a
73:35 - and you can see the square brackets
73:36 - appear as expected a is just a normal
73:41 - sized element so the brackets don't need
73:43 - to be larger smaller they're sized
73:45 - appropriately
73:47 - okay this does look a little weird
73:48 - though because the first sentence is
73:50 - indented and the second one is not this
73:53 - double backslash creates a soft return
73:54 - it doesn't start a new paragraph and so
73:56 - this
73:58 - um sentence that I have here is not
74:00 - considered a new paragraph and it is not
74:02 - indented I'm not in the habit of
74:05 - worrying about that because I almost
74:06 - always turn off indenting in my
74:09 - documents
74:10 - so I'm going to come back up into the
74:12 - Preamble it's the area before begin
74:14 - document I'm going to type slash pair
74:17 - indent
74:18 - is going to change the the rules for
74:20 - paragraph indenting I'm going to say 0px
74:24 - so indent my paragraphs by zero pixels
74:26 - in other words don't indent my
74:28 - paragraphs and then I'll recompile
74:31 - and you can see that none of my lines
74:33 - are indented that's just my preference
74:35 - the way that I like to work you
74:37 - certainly don't have to do that now
74:39 - let's take a look at curly brackets so
74:40 - parentheses easy you just type them on
74:42 - your keyboard square brackets easy just
74:44 - type them on your keyboard curly
74:45 - brackets not quite so easy
74:50 - say the sets
74:53 - a
74:57 - is defined to be
75:00 - and then we'll just call a the set of
75:03 - the numbers one two three so curly
75:06 - bracket one two one two three curly
75:11 - bracket close Math mode and then compile
75:16 - oh what did I do wrong here
75:19 - forgot my square brackets in front let's
75:22 - try that again okay now I didn't get the
75:25 - result I expected because I typed curly
75:28 - brackets around this set but the curly
75:32 - brackets didn't show up on my PDF and
75:35 - that's because the curly bracket is a
75:39 - symbol that is reserved for part of the
75:42 - coding in latex that is a special symbol
75:44 - that tells the compiler something and so
75:48 - you can't just type a curly bracket and
75:51 - get it to show up you have to do
75:52 - something different if you want the
75:53 - curly bracket to show up you type a
75:56 - backslash in front of it and that's true
75:58 - for this
75:59 - opening curly bracket and also the
76:01 - closing curly bracket you put a
76:03 - backslash in front of it and now when we
76:05 - compile
76:06 - the symbols will show in the PDF so the
76:09 - compiler knows that this is not
76:12 - um the coding curly bracket is actually
76:15 - one that needs to be displayed
76:17 - now another symbol that is reserved for
76:21 - special syntax in latex is the dollar
76:23 - symbol and we've seen that many times so
76:25 - far the dollar sign is used to indicate
76:29 - that we're starting Math mode but
76:30 - sometimes you might want to display a
76:33 - dollar sign right if we're talking about
76:35 - money so for example
76:40 - the movie tickets
76:43 - costs
76:45 - 11 and 50 cents
76:49 - okay so right away I know that I have a
76:52 - problem here because this has turned
76:54 - green
76:56 - this has turned green so the compiler
76:59 - thinks that I'm I've opened Math mode
77:01 - and I have not closed Math mode well I
77:04 - can close it here
77:06 - and that's a little better we're back to
77:08 - normal down here
77:10 - but now clearly the dollar sign this
77:12 - dollar sign is not going to be displayed
77:14 - because this is just telling me that I'm
77:15 - in math mode so let's compile that and I
77:18 - don't see the dollar sign so if you want
77:20 - to see a dollar sign well first of all
77:22 - if we type in extra one
77:24 - inside Math mode we're going to have
77:27 - issues you that confuses the compiler so
77:31 - if you want to display the dollar sign
77:33 - you just type A backslash in front of it
77:35 - same with the curly bracket and now when
77:37 - we compile it knows oh this dollar sign
77:40 - is meant to be displayed and so it will
77:42 - print it on our PDF and we've got 11.50
77:47 - now sometimes you want to put brackets
77:49 - whether they're parentheses or square
77:51 - brackets or curly brackets or absolute
77:54 - value symbols or some other symbol's
77:56 - greatest integer symbols that type of
77:58 - thing sometimes you want to put those
78:00 - around
78:02 - notation that is much bigger taller so
78:06 - let me show you what I mean by that
78:09 - and here I'll just do I'm just going to
78:11 - do a hard return here
78:14 - and let's type this fraction
78:17 - I'm going to do double dollar signs to
78:20 - get give me displayed Math mode so it's
78:22 - going to put this math on its own line
78:24 - Center it on the page and I'm going to
78:26 - type a fraction
78:28 - so my fraction is going to be 1 over x
78:31 - squared minus 1.
78:39 - here's my fraction 1 over x squared
78:41 - minus 1. let's say I want to put
78:44 - parentheses around that
78:46 - I don't know why maybe there's a
78:49 - two in front of it yeah let's do that
78:51 - okay that looks pretty bad the
78:54 - parentheses are not tall enough they're
78:56 - not surrounding the information inside
78:59 - of the parentheses now if I wasn't in
79:02 - displayed Math mode it would be a little
79:04 - better so instead of double dollar signs
79:06 - let me go back to single dollar signs
79:08 - and show you it's a little bit better
79:10 - it's still not perfect the parentheses
79:13 - still don't seem to be tall enough to
79:16 - cover what's inside of them so it's not
79:19 - just because I'm in displayed Math mode
79:21 - that that's an issue but it's more
79:23 - pronounced when you're in displayed Math
79:25 - mode
79:26 - how can we fix that well we can make the
79:28 - parentheses automatically
79:31 - change in size to fit whatever's inside
79:34 - of them
79:35 - by typing go to your your parentheses
79:38 - where they start so your left
79:39 - parenthesis I think is the singular of
79:41 - parentheses go to your left parenthesis
79:44 - and type backslash left in front of it
79:49 - and then go to the right parenthesis and
79:52 - type backslash right in front of that
79:55 - one and now let's compile that
79:58 - and you can see that they've
79:59 - automatically expanded
80:01 - to an appropriate size that looks much
80:04 - better
80:05 - so this works with
80:08 - lots of different bracketing symbols I'm
80:10 - just going to copy this a couple of
80:11 - times and we're going to change the
80:13 - parentheses to square brackets square
80:16 - bracket
80:19 - square brackets
80:21 - and curly bracket
80:23 - now remember to get the curly bracket to
80:26 - show up you have to put a backslash in
80:28 - front of it
80:35 - and compile
80:37 - and there we go so we've automatically
80:40 - expanded the size of our brackets in
80:42 - these three examples
80:45 - if you're working with vectors you might
80:47 - even want an angular bracket
80:51 - so
80:52 - let me delete I'm just going to space
80:56 - this out a bit
80:59 - um
81:03 - if we want parentheses we would type
81:06 - parentheses like this
81:09 - let's go back to parentheses
81:11 - okay that's normal parentheses but if
81:13 - you want an angular bracket instead of
81:15 - parentheses you're going to type
81:17 - backslash
81:19 - L angle so left angle and then over here
81:25 - instead of parentheses you're going to
81:27 - type slash R angle
81:30 - slash R angle for right angle and then
81:34 - when we compile that you get your
81:35 - angular brackets
81:37 - you might also need to do this for an
81:41 - absolute value expression so instead of
81:43 - this left angular bracket we can just
81:46 - use on the keyboard type the I think
81:49 - it's called a pipe
81:52 - but it's right above the return key or
81:55 - the enter key
81:56 - to get
81:58 - your absolute value symbol
82:03 - to expand
82:05 - so backslash left backslash right is
82:07 - going to expand the size of those
82:08 - brackets
82:10 - now there might be a case where you just
82:13 - need
82:15 - a bracket to show up on one side not the
82:18 - other an example of this could be in
82:22 - calculus
82:24 - if we have something like d y d x
82:28 - at x equals one we could use a notation
82:32 - so let me start with a fraction for the
82:34 - dydx to backslash frac d y d x
82:39 - and now I want dydx
82:42 - at x equals one or when x equals one so
82:45 - normally the way we write that is we
82:47 - would do a vertical bar
82:49 - and then a subscript so here's a
82:53 - subscript
82:54 - of x equals one now if I just type x
82:57 - equals one only the x is going to be in
82:59 - the subscript so I need to put curly
83:00 - brackets around my x equals 1 if I want
83:02 - that all in the subscript let's see how
83:05 - that looks
83:07 - so I'm almost there but that vertical
83:10 - bar that pipe symbol it's not tall
83:12 - enough I want it to expand so let's try
83:15 - that trick where we type A backslash
83:18 - left or backslash right in front of it
83:21 - let's do slash right
83:22 - to get it to be larger now when I try
83:26 - and compile this I'm going to get an
83:28 - error because when you use a slash write
83:31 - command you have to have a matching
83:33 - slash left and vice versa so when you do
83:36 - slash left you need a slash right but I
83:38 - don't want a symbol to show up on the
83:40 - left we can get around that though I'm
83:43 - going to go ahead and type the slash
83:45 - left
83:46 - and then in order to tell it to not
83:50 - display a symbol I'm just going to use a
83:52 - period just type a period on your
83:54 - keyboard and it won't display that so
83:57 - now the notation looks proper
84:00 - so hopefully that covers all of the the
84:02 - types of bracketing symbols that you
84:04 - need and you can certainly have bracket
84:07 - like brackets around something that's
84:10 - inside of something else so you could
84:12 - have multiple pairs of brackets
84:14 - all in sort of one expression
84:18 - for example let's let's kind of build
84:21 - off of
84:22 - well let's do
84:27 - a fraction we'll do a complex fraction
84:29 - so fraction we'll do one over one plus X
84:35 - to start with
84:37 - and let's say we want
84:41 - um
84:42 - to put parentheses around that
84:45 - so we'll do slash left and then the left
84:47 - parenthesis
84:50 - slash right and the right parenthesis
84:53 - compile that so that looks good and I'm
84:56 - going to put a One Plus in front of this
84:59 - okay so there we are now now I want to
85:02 - make this all the denominator of another
85:05 - fraction so it'll be one over one plus
85:07 - one over one plus X
85:09 - okay so this whole thing that I've typed
85:11 - right here I want to be in the
85:12 - denominator
85:14 - of a fraction so I'm going to put curly
85:16 - brackets around it that's the curly
85:17 - brackets for my denominator in front of
85:19 - that I'll do another pair of curly
85:21 - brackets for the numerator and the
85:22 - numerator is just going to be one and in
85:24 - front of that I need my fraction command
85:27 - let's compile that
85:29 - so there we go and notice that the
85:31 - parentheses are adjusting in size to fit
85:35 - like the container what's inside now
85:38 - let's say I want to put big parentheses
85:40 - around all of that so in front I'll do a
85:42 - slash left oh I'm in the wrong place
85:45 - sorry go to the very front
85:48 - there we are slash left parentheses
85:52 - and then go to the very end here slash
85:55 - right parentheses
85:58 - compile now you can see those
86:01 - parentheses are really big so they are
86:02 - automatically going to adjust to the
86:05 - content inside of the parentheses
86:07 - okay let's move on and talk about tables
86:10 - I'll just give myself some space here
86:14 - and
86:15 - we will look at tables
86:20 - we'll start with a very simple table and
86:23 - then we'll add some more components to
86:25 - it
86:26 - so first of all to start my table it's
86:28 - backslash begin curly brackets tabular
86:35 - actually I'm gonna yeah hit enter and
86:38 - let it kind of finish that out for me so
86:40 - with the begin tabular you'll have an
86:42 - end tabular and notice that we have an
86:44 - extra pair of curly brackets after begin
86:46 - tabular so here you have to
86:50 - establish like how many columns you want
86:53 - in your table
86:54 - let's say we're going to make a table
86:56 - with
86:58 - X values of one two three four five so
87:00 - we need six columns in our table six
87:03 - columns in our table I can type c c c c
87:06 - c I typed a c six times each one of
87:09 - those C's represents a column so this is
87:12 - going to be a table with six columns now
87:14 - the reason I typed C was not C doesn't
87:17 - stand for column C stands for centered
87:19 - because your the text or the whatever it
87:23 - is you're putting in the cell of your
87:25 - table it can be Center aligned left
87:27 - aligned or right aligned
87:30 - so right like normally I would say
87:32 - probably your mathematical tables your
87:35 - values are going to be centered in the
87:36 - table cell so I normally use seeds if I
87:39 - wanted items in my cells to be left
87:41 - aligned I could use else
87:44 - that would give me a table with six
87:47 - columns if I wanted the content to be
87:49 - right aligned
87:51 - I would use ours you can also do any
87:53 - kind of combination
87:56 - you identify for each column if you want
87:59 - the content to be aligned left Center or
88:02 - right
88:03 - let's go back to Center aligned
88:06 - and then we have to type some content
88:09 - for our table so I'm going to type this
88:12 - is what I want in my table x one two
88:14 - three four five
88:16 - so this is not going to work right now
88:19 - if I compile
88:20 - oh it actually did give me something but
88:23 - it's not a table
88:24 - this is just one this is all in one
88:28 - column right now all in one column the
88:30 - way that you
88:32 - separate items
88:34 - into columns is with the ampersand
88:37 - so now if I compile X is in the First
88:41 - Column and then right now one two three
88:43 - four five is in the second column
88:46 - so we want to go through here and put an
88:48 - ampersand in between
88:57 - like so
89:01 - okay now we have a table with
89:05 - six columns which is what I wanted I
89:08 - guess it would be easier to see you just
89:10 - kind of have to trust me right now how
89:11 - many columns I have it would be easier
89:13 - to see if we had you know lines
89:15 - separating
89:17 - so I should have done that let me go
89:19 - back and show you how to do that if you
89:20 - want vertical lines like in between your
89:23 - table columns then you come back up here
89:25 - and you use that pipe symbol on your
89:27 - keyboard it's above the return key or
89:29 - the enter key and
89:33 - put that in between each one of these
89:35 - like so let's recompile
89:38 - and we get those vertical bars so now I
89:40 - can see how many columns I had so let me
89:43 - take out my ampersands let me go back to
89:45 - what it was
89:46 - one two three four like that and you can
89:49 - see that it was all smushed into one
89:51 - cell which is not what we wanted so you
89:53 - need to use the ampersands
89:55 - to separate
89:57 - the the content into your different
89:59 - columns now when you get to the end of
90:02 - your first row you hit two backslashes
90:06 - to indicate that that is the end of the
90:08 - row
90:10 - okay so here we are
90:13 - then you can do your next line so the
90:16 - next line let's say we want f of x
90:19 - and and then whatever our f of x values
90:23 - are we'll just do
90:26 - 11
90:28 - [Music]
90:30 - .
90:41 - 10 11
90:44 - 12.
90:45 - 13.
90:47 - 14 and we'll end that line
90:52 - okay that's all right now the X and the
90:54 - f of x they don't look like math they're
90:57 - in text mode they're not in math mode so
90:58 - let's fix that put dollar symbols
91:01 - dollar signs around the X and around the
91:04 - f of x
91:08 - all right that looks much better now
91:10 - we're missing the lines that separate
91:13 - our rows right so in order to get a
91:16 - horizontal line we're going to type
91:18 - backslash H line
91:21 - I will compile that and it gives me a
91:23 - horizontal line so I did that at the end
91:26 - of the first row and I'm going to do
91:28 - that again at the end of the second row
91:31 - now I need to do that
91:34 - above my first row
91:38 - okay and there is a basic table
91:41 - sometimes I like to after the First
91:44 - Column put a double pipe here
91:51 - to separate the label x f of x from the
91:55 - values in the table like so so we can do
91:58 - that
91:59 - so that is a very basic table right
92:01 - there
92:02 - let me copy that
92:09 - and let's say that
92:12 - instead of 10 for f of 1 we had a
92:16 - fraction here so we'll do we'll do math
92:19 - mode
92:20 - slash Frac and we'll just use the
92:23 - fraction one half
92:27 - oh let's let's put let's separate these
92:29 - tables a little better
92:30 - so I'm going to insert some vertical
92:32 - space here slash V Space
92:36 - and then I can decide how much vertical
92:38 - space I'm going to put one centimeter of
92:40 - space right there to separate those
92:42 - tables
92:45 - and I'm going to turn off my page
92:47 - numbering as well so I'm going to go all
92:48 - the way back up to the top
92:50 - slash page Style
92:53 - empty
92:55 - compile and that turned off my page
92:58 - numbers okay so there are my tables let
93:01 - me scroll back down here
93:04 - so I'm working with that's the copy of
93:06 - my first table right here we changed F
93:09 - of one to equal one-half and you can see
93:11 - that the one half because it is taller
93:14 - than these other values is sort of
93:16 - touching the the top and the bottom of
93:19 - the row border we want to give this a
93:22 - little more space and so let me show you
93:25 - how you can add a little more to this
93:28 - table instead of starting with begin
93:30 - tabular we're actually going to start
93:32 - with Slash begin
93:34 - table now if I hit enter it's going to
93:37 - put my end table right here I need the
93:40 - end table to go after the end tabular
93:44 - it's like a sandwich right we've got
93:46 - begin table begin tabular and then at
93:49 - the end we have end tabular end table
93:51 - okay so I mean that hasn't changed
93:54 - anything yet let me recompile we're
93:56 - still in good shape
94:00 - actually I lost my second table
94:05 - I think that begin table
94:08 - requires a package hang on let me do
94:12 - full page I wasn't expecting that to
94:14 - have oh okay
94:16 - here's the second table up here yes so
94:19 - this is the frustrating thing about
94:21 - working with tables
94:23 - in a word processor when you enter a
94:25 - table you're very specific about where
94:27 - you want that table to appear it's
94:29 - wherever you type it wherever you enter
94:30 - it that's where it's going to be
94:32 - displayed right in a word processor not
94:35 - so here
94:36 - here when you enter a table
94:40 - the compiler is going to decide where it
94:43 - thinks that table will fit best on your
94:46 - page
94:46 - so you can see what happened to us here
94:49 - and the second table is the one that had
94:51 - the fraction one half for f of one so
94:54 - that's this table at the top here it it
94:57 - got moved up to the top of the page
94:59 - that's not where I want it I want it
95:01 - down here at the bottom of the page and
95:03 - normally you're particular about where
95:05 - you want your table to go if you're
95:07 - creating a a long paper you might not
95:10 - matter so much whether it's you know on
95:12 - the page before or on the next page or
95:14 - at the top of the page or at the bottom
95:16 - of the page like you might be fine with
95:18 - giving the compiler the flexibility to
95:20 - decide where it thinks the table will
95:22 - fit best
95:23 - there is a way that you can tell it no
95:25 - no no I want it to appear right here in
95:29 - the code where I've entered it and all
95:31 - we need to do for that is square
95:33 - brackets and a capital H so let me
95:36 - recompile
95:39 - and I think I need the flow package for
95:42 - this let me go back up to the top
95:46 - backslash use package
95:49 - float
95:53 - yes I did
95:55 - we'll talk about packages more in
95:57 - another tutorial but for certain
95:59 - commands in latex you need to load a
96:01 - package before the command is going to
96:03 - work
96:04 - so in order to use this right here we
96:07 - need to load the float package all right
96:11 - so now we're good to go let me make this
96:14 - larger again
96:17 - there's our second table
96:22 - and we were talking about the spacing
96:24 - issue I want to add more space in there
96:27 - so in between
96:30 - begin table and begin tabular I'm going
96:32 - to type backslash def that's going to
96:35 - define something new
96:38 - and then backslash array stretch
96:42 - and then in curly brackets you're going
96:45 - to type a number and the number that you
96:46 - type is going to determine how much
96:48 - extra spacing you have I usually go with
96:51 - 1.2
96:53 - so let's compile that and see how that
96:56 - looks so just added a little bit of
96:58 - space right you can make that bigger
97:01 - make like sometimes I'll go up to 1.8
97:05 - go with 2 and see what happens
97:08 - okay so if you go with two then you get
97:10 - that's too much space like now it's
97:12 - starting to look a little bit weird
97:13 - maybe we'll we'll split the difference
97:15 - we'll go like 1.5
97:19 - all right that looks pretty good it's
97:20 - not perfect like there's more space at
97:23 - the top than the bottom so you can play
97:25 - around with that if you don't like
97:27 - exactly how it looks but that's an easy
97:29 - way to get some extra padding if you
97:31 - will in your table cells
97:35 - the other thing we can do by starting
97:37 - our table with begin table
97:39 - in addition to the begin tabular is we
97:42 - can now add a caption to our table and
97:46 - you can add the caption above your table
97:48 - or you can add the caption below your
97:49 - table let's add it below
97:52 - and so after the in between the end
97:55 - tabular and the end table I'm going to
97:57 - type slash caption
98:00 - and then
98:01 - you can enter your caption
98:04 - so
98:08 - I don't know what we want to say these
98:11 - values represent
98:14 - the function f of x
98:18 - and we'll compile that
98:21 - and yeah that looks a little weird
98:24 - because let me go back full page
98:27 - the caption looks like it's being
98:29 - centered
98:31 - whereas the table is not being centered
98:33 - so that is a bit strange if I want my
98:36 - table centered
98:37 - then again in between begin table and
98:41 - Define and begin tabular I can do
98:43 - backslash centering
98:46 - and that will Center the table I
98:48 - normally Center my tables so I wasn't
98:51 - expecting that issue I'm not used to
98:53 - that popping up especially when I'm
98:54 - captioning things I'm just I like
98:56 - normally in my workflow I Center my
98:59 - tables
99:00 - so I'm sure there is a way to get the
99:03 - caption to go to the left you can force
99:06 - things to be flushed left if they're not
99:08 - automatically that way
99:11 - um but
99:12 - it's easy it's an easy fix if you just
99:15 - want everything settled centered and
99:17 - there we go
99:19 - now there are a lot of other things you
99:22 - can do to create more complex tables
99:28 - um I don't want to spend too much time
99:30 - but there are some instances where you
99:33 - might want
99:34 - um what's it called
99:37 - where you have like uh
99:41 - something that spans over two table
99:44 - columns I know there's a word for that I
99:46 - can't think of it off top of my head but
99:48 - you can do something oh oh merging cells
99:51 - I think is what it's called in like
99:53 - in the spreadsheet program where you can
99:54 - merge cells together so you can do
99:56 - things like that as well with tables
99:59 - you can also
100:01 - sometimes you might want to have
100:06 - a sentence in a table cell that sounds
100:08 - that sounds kind of weird but I I could
100:11 - think of of an instance let's just do
100:13 - one real quick I'm going to copy this
100:15 - table
100:20 - so here's a copy of that table
100:22 - which didn't fit on page one so it got
100:25 - pushed down to page two we'll make this
100:28 - a little bit bigger
100:31 - and
100:32 - um let's do something where we have just
100:37 - like
100:38 - two columns in our table
100:41 - and I'm gonna put text in here
100:43 - so we might want to set centered we
100:45 - might want it flush left we'll see how
100:48 - it goes I'm doing this off the top of my
100:49 - head
100:50 - and we'll only have two columns so it
100:54 - needs to look something more like
100:57 - this
101:01 - okay and we're going to say at the top f
101:06 - of x
101:11 - and then in the second column at the top
101:13 - we'll do F Prime of x
101:18 - and
101:21 - here we'll say x greater than zero
101:25 - and here we'll say
101:30 - function
101:32 - f of x
101:34 - is increasing so let's see what that
101:36 - looks like
101:38 - so this is a different kind of table is
101:40 - just doesn't have just numeric values in
101:42 - it
101:44 - it looks a little bit odd let's change
101:46 - the caption too so this makes a little
101:48 - more sense
101:49 - we'll say
101:51 - the relationship
101:54 - between f
101:56 - and F Prime
102:00 - okay and we could if we want to this
102:02 - time move the caption to the top
102:08 - and notice that that automatically
102:10 - numbered the tables I didn't point that
102:11 - that out either
102:13 - it didn't happen with this table because
102:15 - with this really simple table we just
102:17 - used begin tabular end tabular
102:20 - with these next two tables we started
102:22 - with begin table before we did the begin
102:24 - tabular and that gave us all these extra
102:27 - options and one of them is that it will
102:28 - number your tables as you go so I didn't
102:31 - type table one
102:33 - that was this table right here I did not
102:35 - type table one anywhere it just knows
102:37 - that that is the first table
102:39 - in this begin table sequence and then
102:43 - this next one when I began a new table
102:45 - now it knows oh that's table number two
102:47 - so it is numbering that for me which is
102:50 - nice
102:52 - okay
102:54 - um what I wanted to show you though was
102:57 - how you can deal with long sentences in
103:00 - your table
103:02 - so I'm going to copy this sentence a
103:04 - couple of times
103:05 - which isn't very realistic but let's
103:07 - just say like you had a lot of text to
103:09 - put in your table salt okay then this
103:11 - happens let me make this okay this looks
103:15 - horrible right the table got cut off
103:16 - because the the content inside of this
103:19 - one cell is so long it doesn't fit and
103:22 - so it ran off the page which is
103:25 - definitely not good we don't want that
103:27 - so an option if you're trying to type
103:29 - text like long text in a table instead
103:33 - of using a c here
103:36 - and let's go ahead and change these to
103:38 - L's anyway first just to show you
103:43 - that when I do that
103:44 - now in my table
103:49 - this became left Justified instead of
103:52 - centered all of this became left just
103:54 - Justified but what I can do with this
103:57 - instead
103:58 - this second column because I know that
104:01 - it has to accommodate such long text is
104:03 - to put a p and the P stands for
104:06 - paragraph So it's indicating that
104:08 - there's we want this cell to contain a
104:10 - paragraph and then in curly brackets you
104:13 - indicate how wide you want that
104:15 - paragraph to be so maybe we want it to
104:17 - be two centimeters you can use inches
104:18 - you can use other measurements that you
104:20 - want okay so now at least it fits on the
104:23 - page it still looks a little funky right
104:25 - but you can change this we could even go
104:27 - with two inches
104:31 - three inches you can adjust it to fit
104:34 - your needs and you can do that for each
104:36 - column so if you have multiple columns
104:38 - with a lot of text in it you can do that
104:42 - all right that's the basics of working
104:45 - with tables
104:47 - there are a lot of other ways to
104:48 - customize tables you can do shading you
104:50 - can do all sorts of things but this will
104:52 - get you through most of what you need to
104:54 - do with tables
104:56 - we're going to wrap up this video today
104:58 - by talking about equation arrays
105:02 - and so
105:04 - the easiest way I have found
105:07 - to create arrays is with the Align
105:11 - command now there is also an equation
105:13 - array command and by that I mean you can
105:16 - do backslash begin EQ n you can see
105:21 - right here begin equation array you can
105:25 - do it this way and I used to do it this
105:27 - way but now I have a different way that
105:29 - I prefer to do it so I'm going to do
105:32 - slap let me first of all just say put a
105:35 - little header here arrays
105:37 - and we're going to do backslash begin
105:41 - a line
105:43 - now we have two options here we've got a
105:45 - regular a line and then we have an align
105:47 - with an asterisks asterisk after it
105:50 - let's go with the regular one first and
105:52 - then I'll explain what the S drisk does
105:55 - okay so begin a line
105:58 - and we have to put some kind of content
106:02 - in here so let's use this to solve an
106:05 - equation 5X
106:08 - squared now notice when I type started
106:10 - typing this is in green and green
106:13 - indicates that we're in math mode but I
106:15 - didn't type a dollar sign when you're
106:17 - inside of the Align environment you are
106:20 - automatically in math mode
106:22 - so if I start typing text now see the
106:25 - text is still green that text is
106:27 - actually in math mode let me compile and
106:29 - show you right this this looks really
106:31 - wonky
106:33 - everything in a line is in math mode so
106:36 - if you actually want text you have to
106:40 - have some way to tell it wait wait I
106:42 - don't want this to be Math mode and you
106:43 - can do that with backslash text
106:46 - and then just type your text let me
106:48 - change the text
106:50 - um place your words here
106:54 - oops curly bracket let's compile that so
106:58 - now it knows that that's text and we
107:00 - still have a lot like a spacing issue
107:01 - here in math mode
107:04 - this hasn't come up yet but in math mode
107:07 - the compiler ignores spaces like after
107:10 - the between the five and the X here I
107:12 - can type as many spaces as I want
107:14 - they're not going to appear on the
107:16 - document when I compile it the 5 and the
107:18 - x squared are still right next to each
107:20 - other so in math mode spaces get ignored
107:23 - and that's why
107:25 - this space is being ignored so the p in
107:28 - this word is right next to the two if
107:32 - you need a space there's a couple things
107:34 - we can do in the text mode we can just
107:37 - type a space and that'll take care of
107:39 - that so that worked or in math mode if
107:43 - you need to force a space that will be
107:47 - displayed you do backslash comma so
107:50 - either one of those methods will work
107:52 - okay but that's not actually what we're
107:54 - trying to do here so let me take that
107:56 - out
107:57 - 5x squared we're going to solve an
107:59 - equation 5x squared minus 9
108:04 - equals X Plus 3.
108:12 - so what I want to do next is subtract
108:15 - the X on both sides subtract the 3 on
108:16 - both sides and then write the result
108:19 - okay so I need to end this line with a
108:22 - double backslash and on the next line
108:25 - type what I want next 5x squared
108:29 - minus X
108:31 - minus 12.
108:35 - oh equals zero right equals zero
108:39 - okay so that's all right notice that
108:42 - I've got my equations on their own lines
108:45 - and the equations are being numbered so
108:48 - I didn't have to tell it this is line
108:49 - number one this is line number two it's
108:51 - going to number them and if I create
108:53 - another
108:54 - a line just duplicate this one and
108:58 - compile it
108:59 - it continues numbering from where it
109:02 - left off before which is really nice in
109:04 - a math paper because your equations are
109:06 - all numbered and then when you're
109:07 - talking about them in your paragraphs
109:08 - you can refer to them by number you can
109:10 - say in equation four blah blah blah
109:13 - so that is that is nice there
109:17 - what I don't like about what I'm seeing
109:19 - though is that the equations are not
109:21 - aligned at the equal sign it's much
109:25 - easier for the reader to follow the
109:27 - mathematics when you're solving an
109:29 - equation or simplifying things you're
109:31 - going step by step if you line up your
109:33 - equal signs that's the proper way to do
109:34 - it so in order to line up the equal
109:36 - signs you just have to put an ampersand
109:39 - in front of them
109:42 - now if you only do it on the one and not
109:44 - the other it doesn't know what it's
109:46 - supposed to be lining up so that's not
109:48 - going to work it's going to be funky
109:51 - but if you put the Align in front of
109:53 - both equal signs it knows to line up
109:56 - those equal signs and this looks proper
109:58 - this is what I wanted to see here
110:03 - and we can of course add more lines than
110:06 - this just do double backslash and keep
110:08 - going
110:09 - if you get to the point where there's
110:12 - nothing on the left side of the equal
110:14 - sign that's okay too
110:17 - we can just say
110:19 - Ampersand equals and it's going to start
110:23 - with an equal sign and line it up
110:26 - um so I don't know we could do 12 plus x
110:29 - minus 5x squared
110:33 - like so
110:34 - and everything is lined up at the equal
110:36 - sign there
110:39 - now if you don't want the line numbers
110:41 - to appear not just appear but if you
110:44 - don't want your lines numbered that's
110:47 - when you would use the asterisk if you
110:50 - do it in the begin you have to also do
110:52 - it in the end if they don't match you'll
110:55 - get a compiling error so this is going
110:57 - to turn off the equation numbering so
111:00 - when I compile
111:02 - the 3 4 and the five have disappeared
111:05 - and then if I copy this one again
111:10 - and compile
111:12 - you'll see that it picks up where the
111:14 - first numbered one left off so it's not
111:17 - that it's just hiding the line numbers
111:18 - it's not even numbering them so think
111:20 - about that carefully when you use it
111:22 - which way you prefer to go
111:25 - okay that does it for this tutorial we
111:27 - looked at lots of ways to use brackets
111:29 - and to customize the height of the
111:31 - brackets
111:32 - we looked at tables and we looked at
111:34 - arrays
111:39 - hello I'm Michelle Cromwell and in this
111:41 - video I'm going to show you how you can
111:42 - create lists in latex so we'll be
111:45 - looking at enumerated lists which are
111:47 - numbered lists and then also itemized
111:50 - lists which are bulleted lists and let's
111:53 - begin by just listing some basic school
111:56 - supplies so pencil
111:59 - calculator
112:02 - ruler
112:05 - notebook
112:06 - if I compile now take a minute to think
112:09 - about what this is going to look like so
112:12 - pencil calculator ruler notebook in a
112:14 - word processor we would see these four
112:16 - words each on their own line but in
112:19 - latex
112:21 - we can see that that does not happen I
112:23 - don't have any line breaks coded here so
112:26 - the words are just kind of flowing all
112:28 - together on one line I could insert line
112:31 - breaks but that's not what I want to do
112:33 - I'm intending to make a numbered list
112:36 - here
112:37 - and so let's start over to create a
112:41 - numbered list we call this an enumerator
112:43 - list we start with backslash begin
112:47 - enumerate
112:49 - and when you have a begin enumerate you
112:51 - also have to have a matching and
112:53 - enumerate okay so this begins this
112:56 - environment enumerate environment but
112:58 - now I have to actually uh list out all
113:01 - of my items so then we're going to type
113:03 - backslash item
113:05 - and enter our first item which was
113:07 - pencil hit enter and I don't need to do
113:10 - anything to indicate a line break when I
113:13 - type backslash item again the compiler
113:15 - knows that this is a new item and it
113:18 - belongs on a new line so slash item
113:21 - calculator
113:23 - slash item ruler slash item notebook so
113:28 - let's try compiling this again and now
113:31 - we have our enumerated list so as simple
113:34 - as that
113:35 - if we want a bulleted list then we
113:38 - change from enumerate
113:40 - to itemize so an itemized list
113:45 - is a bulleted list and then when we
113:48 - compile that we see that we have bullets
113:50 - instead of numbers but I'm going to go
113:52 - back just undo that go back to my
113:55 - enumerated list because I want to show
113:57 - you how we can then have an like a
114:00 - nested list so another enumerated list
114:03 - inside of this one so let's say under
114:05 - notebook we have several items that we
114:08 - want to keep in our notebook so I'm
114:10 - going to hit return and I'm going to
114:13 - indent you can indent just once or twice
114:15 - however you like it and this is just
114:17 - kind of to help organize the code and
114:19 - make it easier to find things later if
114:22 - we need to
114:23 - so I'm going to do a new enumerated list
114:26 - so I started with backslash begin
114:28 - enumerate
114:31 - and I need to end this enumerate and you
114:34 - can see how it's indented and then
114:36 - backslash item to list my first item so
114:39 - in my notebook I have notes
114:43 - and then we'll do backslash item
114:45 - homework
114:47 - we'll say these are the sections in my
114:48 - notebook slash item assessments
114:52 - and let's compile that and see what that
114:54 - looks like so we have these sub items
114:58 - and the compiler automatically indented
115:03 - for us and instead of numbering it one
115:05 - two three four now these are numbered a
115:07 - b and c and you've got the parentheses
115:09 - around the number so all of the the
115:11 - numbering is happening automatically you
115:14 - don't have to enter any of that manually
115:16 - let's do this one more time let's see
115:19 - how we can have like another level
115:22 - and under assessments we'll say that we
115:24 - have different kinds of assessments so
115:27 - I'm going to hit enter I'm going to
115:28 - indent again and I'm going to start over
115:30 - with another begin enumerate
115:33 - slash item to list my first item so
115:37 - tests
115:41 - quizzes
115:44 - journal entries
115:46 - and we'll compile that
115:48 - and you'll see how that is now numbered
115:50 - differently as well instead of ABC now
115:53 - it's one two three
115:55 - and if I want to add a fifth item I just
115:57 - have to figure out where that belongs so
116:00 - this was item number one
116:03 - two
116:04 - three
116:05 - four and the indenting really helps to
116:08 - stay organized because now I if I want a
116:10 - fifth item I can kind of see where
116:13 - that's going to go that's going to go
116:15 - right here
116:19 - slash item and what's another Supply
116:22 - that we might need
116:24 - we'll say highlighters
116:29 - and that is now number five
116:33 - now there are some things you can do to
116:34 - change
116:35 - the way the numbering appears if maybe
116:38 - you don't want
116:40 - one two three four maybe you want
116:42 - capital a capital b capital c capital D
116:46 - or maybe you don't want the parentheses
116:48 - here
116:49 - so let's look at a few other options I'm
116:52 - just going to copy
116:54 - my first list
117:04 - and let's put some space in between
117:07 - there
117:08 - with V Space we'll do one centimeter of
117:11 - space to separate that and now instead
117:14 - of the default one two three four let's
117:17 - say I want capital letters here in
117:19 - square brackets I'm going to type it
117:22 - the way that I want it to appear so I
117:25 - want it like that capital A and then a
117:27 - period
117:28 - and let's compile
117:30 - okay so we ran into a compiling error in
117:34 - order to make this work we're going to
117:36 - need to load a package
117:39 - so I'm going to go into my Preamble
117:41 - that's before the begin document
117:44 - and use package
117:47 - enumerate
117:51 - okay use package enumerate let's come
117:53 - back down here and try this again
117:58 - and now you can see that that changed
118:00 - that for me instead of one two three
118:02 - four I've got the ABCD
118:06 - now let's try this again I'm going to
118:09 - copy
118:10 - this here so just made a copy and maybe
118:15 - I don't want it to be like that maybe I
118:17 - want to start out like that
118:21 - and we can do that maybe I want a
118:23 - numbered list but I don't want it to
118:25 - start with number one so here's just
118:27 - kind of the default really basic list
118:29 - right here but maybe I don't want it to
118:31 - start with number one for whatever
118:33 - reason maybe I'm creating a worksheet
118:36 - and I you know on the last page I left
118:39 - off with number five and now I want this
118:42 - list to begin with number six
118:44 - I'm going to type backslash set counter
118:49 - enumi
118:52 - and then six
118:59 - and you can see that now it started with
119:02 - number seven so that wasn't actually
119:04 - what I wanted I forgot that I need to
119:07 - say five if I want my list to start at
119:10 - 6 then I need to set the counters
119:13 - position at five so that the next time
119:16 - it sees an item it will think the last
119:19 - item was number five and it'll make the
119:22 - next item it sees number six so let's
119:25 - compile this there we go that gave me
119:27 - I'm starting a list starting with number
119:29 - six
119:30 - now let's create this list again I'm
119:32 - going to go back up
119:34 - and get this first list that I made with
119:36 - all the different levels
119:40 - we'll add some vertical space here
119:43 - to separate things out visually
119:50 - okay so this list started over with
119:52 - number one and just make this easier for
119:55 - you guys to see I'm going to insert a
119:57 - page break here
119:58 - instead of this vertical space we'll do
120:01 - backslash page break
120:04 - and that way this new list is on a new
120:06 - page
120:07 - and instead of an enumerated list I'm
120:10 - going to change it into an itemized list
120:14 - again
120:15 - itemize and then I'm just going to copy
120:19 - this
120:20 - and replace all of these enumerates with
120:24 - itemize
120:25 - so I have a begin and an end three times
120:29 - because I have three different levels of
120:31 - my list here
120:33 - and we'll compile that and I just wanted
120:36 - to show you how this works in a bulleted
120:38 - list so for the first level you've got
120:40 - the the solid round black bullets
120:44 - and then for the second level you've got
120:46 - these dashes and then the third level
120:49 - you have the asterisks
120:52 - now sometimes you want to create a list
120:56 - but maybe you don't want the numbers to
120:58 - show
121:00 - so let's just copy one of these basic
121:03 - ones we'll take this one
121:08 - I'm just going to copy that
121:13 - let's add some vertical space here
121:19 - okay and let me take out the
121:21 - customization
121:23 - and we have just a really basic
121:25 - enumerated list one two three four let's
121:28 - say for whatever reason we just don't
121:30 - want these numbers to show while you can
121:32 - simply type square brackets and leave
121:35 - them empty don't type anything in the
121:38 - bracket
121:40 - and then compile
121:42 - and there's a space there where the
121:45 - number should be but it's hidden it's
121:48 - not displayed okay so that's one way
121:50 - around it you can still have something
121:51 - formatted like a list with all of your
121:54 - items and then you're not showing any
121:56 - values you can also customize really
122:00 - however you want this numbering to look
122:02 - you can do it manually now it's not
122:05 - ideal to number things manually it's the
122:08 - wonderful thing about latex
122:11 - is that everything does get numbered
122:13 - automatically so if you come back later
122:15 - and in between calculator and ruler you
122:19 - want to add pen it's going to
122:21 - automatically renumber things for you
122:23 - whereas if you had manually said one two
122:25 - three four now you would have to
122:27 - renumber everything manually after that
122:31 - so here
122:33 - if you're okay with taking that risk you
122:36 - know that you're not gonna you know it's
122:37 - not that big of a deal to you you can do
122:39 - some customization here let's say for
122:41 - example you wanted this to be an A but
122:45 - you didn't like you didn't like the
122:48 - parentheses before and after you could
122:50 - just do something like that
122:52 - it's compile
122:53 - and we see that it it looks like that
122:56 - you can
122:59 - um I don't know what else you might do
123:00 - here you can even type words there if
123:02 - you wanted to you could do one I don't
123:04 - know why you would do that
123:05 - but just to point out that you can
123:08 - really customize this
123:12 - and so these are right Justified so that
123:15 - is one thing to be aware of it looks a
123:16 - little weird
123:18 - because it's ragged on the left
123:21 - but if you do these customized labels
123:22 - they're going to be right Justified here
123:24 - and then your items themselves will be
123:27 - left left Justified over here
123:32 - hello I'm Michelle krummel and in this
123:34 - video I'm going to show you some
123:35 - different ways you can format your text
123:38 - and your document so for example we'll
123:41 - be looking at how to make things
123:42 - italicized or bold how to change the
123:44 - font size how to create sections and
123:47 - subsections and organize everything with
123:49 - a table of contents so let's start with
123:53 - just some basic text formatting you can
123:55 - change the appearance and the size of
123:58 - your text to some extent so I'm going to
124:00 - begin by typing a simple sentence and
124:04 - we'll say this will produce
124:07 - italicized
124:11 - text so it won't of course because I
124:15 - haven't done anything to indicate that I
124:17 - need the text to be italicized this
124:20 - right now is just producing normal text
124:21 - but if I want the text to be italicized
124:24 - let's just italicize the word italicized
124:26 - then I'm going to in front of the word
124:28 - type backslash text i t
124:33 - curly bracket then I begin typing
124:36 - whatever I want in italics and when I
124:38 - get to the end of the text that I want
124:40 - to italicized I close the curly brackets
124:43 - so let's compile this now
124:46 - and we can see that the word italicized
124:48 - has been italicized so it's that
124:51 - backslash text i t that's going to
124:54 - italicize your text
124:56 - let's try making something bold so this
125:00 - will produce
125:02 - bold text now in order to make your text
125:05 - bold you use backslash text
125:09 - the F for bold face font
125:13 - so we'll say bold face is it face or
125:17 - faced I don't know but it will be bold
125:22 - and let's do small caps this will
125:26 - produce so for small caps it's backslash
125:29 - text S C
125:32 - curly bracket
125:34 - so we'll say small caps
125:37 - and your curly brackets
125:40 - and we'll compile that and we'll see
125:42 - that we have small caps
125:45 - and we can also do this will produce
125:50 - type writer font so backslash text TT
125:56 - nope
125:57 - TT
125:59 - so there's three T's there it's text TT
126:04 - uh
126:05 - hype writer font
126:10 - text
126:13 - so that typewriter font you might be
126:15 - wondering why anyone would want to use
126:17 - that but it is
126:19 - um like mono spaced so it's good in
126:22 - certain situations it's also I think
126:24 - good for urls
126:26 - to make them look a little bit different
126:28 - than the rest of the text you can offset
126:30 - something like saying please visit
126:37 - Michelle crumbles website at and then I
126:41 - can do my backslash text TT curly
126:46 - bracket Opening Our bracket
126:48 - and then it's http
126:51 - slash slash
126:53 - Michelle crumble.com
126:59 - and you can see that it just sets the
127:00 - text apart now if I were actually doing
127:02 - a hyperlink this isn't the way I would
127:04 - do it because we can load a package that
127:07 - will make this link clickable
127:10 - which would be even nice you can use the
127:12 - hyperref package for that
127:14 - I guess since I brought it up I'll go
127:16 - ahead and show you
127:18 - so we go into our Preamble which is
127:20 - before the begin document after the
127:22 - document class and we're going to do use
127:25 - package
127:28 - hyperref
127:29 - okay that and then instead of this
127:32 - backslash text TT I can just do
127:37 - um URL
127:39 - and let's compile that
127:41 - and now I have a clickable URL and you
127:44 - can see that it automatically put that
127:46 - in the typewriter font I didn't have to
127:48 - tell it to do that the that's just part
127:50 - of the hyperf package it's doing that
127:52 - and so now if I click on that in my PDF
127:55 - is going to take you to my website you
127:59 - can also customize this even more
128:01 - because sometimes websites are really
128:04 - long and ugly so you can do backslash
128:06 - href
128:09 - and then
128:10 - the URL but then you need another set of
128:13 - curly brackets and that's the text that
128:15 - you want displayed
128:17 - so maybe I'll just say my website
128:21 - and we'll compile that
128:23 - and now when you click on the words my
128:26 - website oh it didn't work
128:29 - oh it did work it just didn't give me
128:31 - the little
128:32 - um the little gloved hand icon
128:35 - okay
128:36 - so it did work when I clicked on it so
128:39 - those are the some of the things you can
128:40 - do to change the way that you're
128:42 - displaying your text we can also change
128:45 - our text size
128:47 - so let's play with the sentence
128:50 - please excuse my dear Aunt Sally which
128:55 - most math students are familiar with
128:58 - right order of operations parentheses
129:01 - exponents
129:02 - what is the m multiplication yes
129:04 - parentheses exponents multiplication
129:06 - division
129:07 - wait what's the a
129:09 - addition subtraction there we go it's
129:11 - been a while sorry parentheses exponents
129:14 - multiplication division addition and
129:17 - subtraction okay
129:19 - please excuse my dear Aunt Sally so
129:21 - let's compile this just so we can see
129:23 - what we're comparing this to and let me
129:25 - give myself some vertical separation
129:26 - here slash V Space
129:29 - I'll just do one centimeter of vertical
129:32 - space there
129:34 - separate it from the work that we did
129:36 - before
129:37 - and we are going to make dear Aunt Sally
129:41 - change size okay so let me copy this I'm
129:46 - going to paste it several times
129:51 - and this first time I'm going to make
129:53 - dear Aunt Sally
129:56 - large
129:57 - really large
129:59 - so to do that I there's a couple of ways
130:02 - I can do that
130:03 - let's start this way
130:05 - backslash begin
130:08 - large with a capital l
130:11 - and then the text that you want large
130:14 - I don't know should we include the
130:15 - period or not include the period
130:17 - I I guess we will not and then backslash
130:22 - end
130:23 - large with a capital l they have to
130:25 - match remember whenever we do a begin
130:26 - you're going to have to matching end so
130:28 - let's compile that and see what we've
130:30 - got
130:32 - so my or just the dear Aunt Sally part
130:35 - of that sentence let me zoom in here so
130:37 - you can see this better
130:41 - did get larger
130:44 - I can I you know what I sh I should have
130:48 - started even larger because we can go
130:50 - larger
130:53 - I'm gonna copy this
130:55 - and try this with a lowercase L instead
131:02 - which should not be quite as large as
131:04 - the large with the capital L so now
131:07 - we're going to have normal a little bit
131:09 - larger and then a lot larger
131:12 - here we go
131:15 - and we can make this even larger if we
131:19 - change large to huge
131:27 - okay and we can make that
131:33 - even larger if we change the lowercase H
131:36 - to a capital h
131:43 - and you can see that that got even
131:45 - larger now we can go in the other
131:47 - direction and make things smaller let's
131:49 - go back to to just normal
132:04 - and
132:06 - we'll go a little bit smaller than
132:09 - normal so normal you could also call it
132:12 - normal size
132:14 - so sometimes you need that if you have
132:15 - like your whole document as large but
132:17 - then you want one part of it to go back
132:18 - to regular regular size let's do that
132:23 - I'll show you that so you would just do
132:26 - normal size all smushed together as one
132:29 - word
132:35 - okay so that's the same as this this
132:39 - line oops
132:41 - this line right here the first one okay
132:44 - so let's go a little bit smaller than
132:47 - normal size
132:50 - and that's going to be script size
132:59 - and we can go even smaller than that
133:04 - and go I think I missed small I did we
133:09 - missed small so let's put small in here
133:11 - script size is smaller than small and
133:13 - I'm
133:14 - trying to do this in a logical way
133:16 - so normal size and then if you want it a
133:18 - little bit smaller you can go too small
133:20 - and then if you want a little bit
133:21 - smaller than that you can go to script
133:23 - size if you need it even smaller than
133:26 - that
133:27 - we'll go to Tiny
133:38 - okay
133:41 - and let's compile that and see what
133:43 - we've got there we go so progressively
133:46 - larger and then progressively smaller
133:48 - all the way down to Tiny
133:53 - now we can also change how our text is
133:58 - Justified so sometimes you want your
134:01 - text to be centered sometimes you want
134:02 - it left Justified sometimes you want it
134:04 - right Justified
134:08 - so add in some vertical space for this
134:10 - new section here
134:12 - and let's do centered text so for
134:16 - centered text begin
134:19 - Center
134:21 - and we're of course going to need an end
134:24 - Center as well
134:27 - then everything you put in between begin
134:28 - Center and and Center will be centered
134:31 - so this line is
134:34 - centered
134:36 - and I could do all of that on one line
134:38 - let's save some space
134:40 - so we can do something similar I'm going
134:42 - to copy that two more times instead of
134:45 - Center we can do flush left
134:49 - so we need to begin and end
134:55 - or we can do flush rights
135:06 - okay so then we can see our text and
135:08 - zoom out a little bit
135:13 - this line is centered this line is Oh I
135:16 - should change that
135:17 - is
135:19 - left
135:21 - Justified
135:23 - this one is right
135:26 - it's Justified
135:28 - that makes more sense
135:31 - all right so the begin and the end
135:34 - is a nice way to do this with either
135:36 - changing the font size or changing the
135:38 - way that it is Justified
135:40 - because it's just easy to see where that
135:42 - starts and where it stops it's very
135:44 - definitive like where that ends it's not
135:47 - the only way you can do it
135:49 - let me
135:51 - copy these sentences here
135:55 - and show you a different way and this
135:58 - would work not just with the
135:59 - justification but also with sizing as
136:01 - well
136:12 - if you do backslash centering
136:16 - now notice I don't have a begin and an
136:18 - end
136:18 - if I do backslash centering it's going
136:21 - to affect everything that comes
136:23 - afterwards so all of those lines are
136:26 - going to be centered
136:28 - if I were to do backslash large
136:33 - say for example then everything that
136:35 - comes after that is going to be large
136:41 - I don't know what's going on with the uh
136:44 - that's weird why is it
136:49 - oh I see this is indented all right I
136:52 - thought maybe it was like weirdly
136:54 - centered in one part of the page nope
136:55 - this is just end indented that's all
136:57 - that's going on because I did soft
136:58 - returns here
137:03 - there we go
137:04 - they're all indented now okay so uh if
137:08 - we change this to Tiny then everything
137:12 - after that becomes tiny so it just
137:15 - depends what you want to do if you want
137:17 - to change your whole document then you
137:20 - can do this something like this is very
137:22 - simple I usually like the begin and the
137:24 - end again because then when I'm going
137:26 - back and looking at my code it's very
137:27 - easy to see where that started and where
137:29 - it ended
137:33 - so that's what I've got for text
137:35 - formatting now let's talk a little more
137:37 - about document formatting
137:40 - if you want to create
137:42 - a little title section at the top of
137:46 - your document
137:48 - then you're going to come into your
137:50 - Preamble so before the begin document
137:53 - you're going to come up here and you're
137:55 - going to enter three different lines
137:57 - backslash title
137:59 - with curly brackets
138:01 - backslash author with curly brackets
138:06 - backslash date
138:08 - with curly brackets
138:11 - now you don't have to type anything in
138:13 - the curly brackets but obviously if you
138:15 - want your title to show then you would
138:17 - type something let me do a full page
138:19 - view here so we can see what's going on
138:22 - so let's just say for my title I'm going
138:25 - to write my latex
138:29 - documents and for author I'm going to
138:32 - put my name
138:33 - Michelle crummell and for the date I
138:36 - have a couple of options I can manually
138:39 - type the date what is today's date hang
138:42 - on let me check
138:43 - Sunday July 26th
138:46 - so I could say July 26th
138:49 - 2020 like so now I'm going to compile
138:54 - and notice nothing changed on the PDF my
138:57 - title is not showing up so I've entered
139:00 - the needed information to create the
139:02 - title but I haven't actually told the
139:04 - compiler to print the title in my PDF to
139:08 - make it we have to actually tell it to
139:09 - make the title so after begin document
139:12 - you're going to type backslash make
139:16 - title all one word and we'll compile and
139:20 - now I have a title
139:22 - so there's a couple of things I want to
139:24 - point out with the date if you want to
139:27 - manually enter the date you can
139:29 - change that to anything I want any text
139:32 - I want even if it's not a date if you
139:34 - just want to put some other kind of text
139:36 - there you can and you can still use the
139:38 - backslash date coming and to do that
139:40 - oftentimes what I will do for the date
139:43 - is backslash today
139:46 - and then when each time I compile
139:49 - it'll figure out what is today's date
139:51 - and then it'll display that date
139:53 - so if I come back make some edits
139:57 - compile this again later it'll always
139:59 - have the most current date on it
140:03 - my students don't always like to do that
140:05 - because sometimes they turn in things
140:07 - late and they don't want me to know that
140:08 - they compiled it late
140:10 - the other thing I want to fix here is
140:12 - the word latex my latex document so the
140:15 - word latex is normally typeset in a very
140:19 - special way and to accomplish that you
140:22 - have to do backslash and then you type
140:25 - l-a-t-e-x and it needs to be done like
140:28 - so with a capital l a lowercase a a
140:31 - capital T lowercase e capital x and then
140:34 - when we compile you'll see that it did
140:37 - change like the font and spacing and
140:40 - formatting of that latex let me zoom in
140:43 - because it doesn't look quite right
140:46 - because there's no space between the
140:48 - letter Chi and the letter d
140:52 - so I can create that space by typing
140:55 - another backslash at the end of that
140:57 - word and compiling it again and now we
141:01 - get the space between the chi and the D
141:04 - that is a basic little title section
141:09 - on your first page
141:11 - there's lots of other ways to create
141:13 - title pages that then wouldn't have
141:16 - other things on them
141:18 - but we'll get into that in another
141:20 - tutorial how to format a math paper
141:23 - what we want to do here next is to
141:26 - create some sections and subsections in
141:28 - our document
141:29 - so let me go to the end here
141:33 - but before my end document
141:35 - and create a section so my first section
141:40 - I'm going to hit backslash section and
141:43 - then in curly brackets type the name of
141:46 - your section or the title for your
141:47 - section so this will be linear
141:52 - functions that's my first section I'll
141:54 - compile that and you can see that
141:58 - there's some automatic formatting that
142:00 - happened to that that's not like normal
142:02 - text linear functions for my section
142:05 - here
142:06 - it's bold It's a larger font size and
142:09 - it's numbered and I didn't manually
142:11 - number it the compiler will number it
142:13 - and so if I create another section
142:15 - create another section and call it
142:18 - quadratic functions
142:22 - pile and now that's section number two
142:28 - we can create subsections
142:31 - so underneath section one
142:33 - I'm going to indent again just for my
142:36 - own organization it's not absolutely
142:38 - necessary I'm going to type backslash
142:40 - subsection
142:44 - curly bracket
142:46 - we'll say slope
142:48 - intercept form
142:51 - and then let's do another one backslash
142:55 - subsection
142:58 - standard form
143:01 - and one more slash subsection
143:07 - point-slope form
143:10 - let's compile that
143:12 - so now we have subsections and the
143:13 - subsections again are formatted in a
143:16 - special way and they're numbered 1.1 1.2
143:19 - 1.3
143:20 - if you don't like the way that the
143:22 - numbering scheme looks you can change
143:24 - that
143:26 - you can also add sub subsections so
143:30 - under our first subsection let's indent
143:33 - and do backslash Sub sub section
143:39 - example one
143:42 - and one more
143:43 - Sub sub section
143:47 - example two
143:49 - and compile
143:51 - and now we see those subsections are
143:53 - labeled 1.1.1 1.1.2
143:59 - okay let's add a couple subsections
144:02 - under quadratic functions and the reason
144:05 - I'm doing this is because we are going
144:07 - to build a table of contents so I want
144:08 - to have enough to fill out my table of
144:10 - contents so subsection here we'll do
144:13 - vertex form
144:21 - standard form
144:27 - and factored form
144:31 - and compile
144:32 - okay there we go now if you don't want
144:35 - the numbering to be displayed
144:38 - then you type in asterisk after the word
144:42 - section
144:43 - so if I don't want those section titles
144:46 - to have numbers in front of them I can
144:48 - suppress that
144:50 - same with the subsections
144:56 - and do asterisks
144:59 - and hide those so just hide a couple of
145:02 - those okay so you can decide if you want
145:04 - them numbered or not I'm going to undo
145:06 - that because I do want them numbered for
145:08 - my table of contents
145:11 - okay so here we are I'm going to go back
145:13 - up to the top of the document
145:17 - and let's say the very first thing we
145:21 - want after being in document is our
145:23 - table of contents so backslash table of
145:27 - contents all one word compile
145:31 - and let me go full page now the contents
145:34 - is blank
145:37 - that's going to happen because it
145:39 - requires two compilings in order to
145:42 - create the table of contents so don't
145:45 - panic if you don't see your table of
145:47 - contents once you compile just compile
145:49 - again so let's compile one more time and
145:52 - there it is our table of contents
145:54 - formatted very nicely with our page
145:57 - numbers
146:01 - hello I'm Michelle krummel and in this
146:03 - video we are going to look at packages
146:06 - macros and graphics
146:08 - let's start by saving our file so I have
146:11 - a file that I've already started and I
146:14 - am just going to save that as
146:19 - tutorial 6. so let me find the folder
146:23 - where I want to save that
146:26 - tutorial 6.
146:30 - and if we look at that folder here we
146:33 - can see that it is tutorial
146:37 - 06.tech and we're going to start by
146:39 - looking at some packages that we can use
146:42 - to change how this document looks
146:44 - packages are used to load special
146:47 - instructions for the compiler so you can
146:50 - do things like add features that aren't
146:52 - included in the standard distribution or
146:54 - modify the standard rules for fonts and
146:57 - document formatting if you want to use a
146:59 - package you place it in the Preamble so
147:02 - the Preamble is the section of code
147:05 - between document class and begin
147:08 - document so I'm going to come up here to
147:11 - line number two and just hit enter a few
147:14 - times to give myself some space and we
147:17 - can start entering the packages that we
147:20 - want to use so the first package I'm
147:22 - going to show you is one that I use in
147:25 - almost every document I create and that
147:27 - is going to affect the size of the
147:30 - margin
147:30 - for my output document if you'll notice
147:33 - and I'm going to change the zoom here so
147:37 - that we can see the entire page there's
147:40 - a lot of white space at the top and on
147:42 - the left and on the right and even at
147:44 - the bottom below the page number so this
147:47 - is just the default margins that are set
147:50 - here and normally these margins are too
147:54 - large for the kinds of documents that
147:56 - I'm creating I prefer to have about a
147:59 - one inch margin so we can use a package
148:02 - to deal with that now the easiest way if
148:04 - I just want one inch margins on all
148:07 - sides is to use a package called full
148:09 - page to use a package we're going to
148:12 - type backslash use package I'm going to
148:15 - choose the option with the curly
148:19 - brackets and then I'm going to type the
148:21 - name of the package inside of the curly
148:23 - brackets so it's just full page
148:26 - and then I'm going to compile so we can
148:29 - come up here to compile or I can just
148:31 - hit F2 as a keyboard shortcut so notice
148:34 - what happened now we've got a one inch
148:37 - margin at the top at the left at the
148:40 - bottom and let's go back to full page
148:42 - view
148:43 - and you can see we also now have
148:45 - decreased that margin at the bottom so
148:48 - that's just really quick easy package to
148:50 - use if you want one inch margins on all
148:52 - sides
148:54 - now you can use different size papers in
148:57 - the United States typically we use paper
149:00 - that is eight and a half inches by 11
149:01 - and if you want to make sure you are set
149:04 - up for that you can come up here and
149:07 - type letter paper to make sure we're
149:08 - using letter paper if you are using a
149:11 - four size paper you can type A4 paper up
149:15 - here and when I compile I don't know if
149:17 - you noticed that it went pretty quick
149:19 - there was only a very slight difference
149:20 - but look at the bottom of the page here
149:22 - that did make quite quite a difference
149:25 - so let me go back to letter paper
149:30 - and that's going to give me that eight
149:32 - and a half by 11 size paper now I might
149:36 - not want one inch margins on all sides
149:39 - we can customize this further if we use
149:41 - a different package so instead of the
149:43 - full page package I'm going to use the
149:45 - geometry package and this is the one
149:47 - that I use when I create all of my
149:50 - documents just because it does give me
149:52 - some more control so the geometry
149:54 - package I think if I compile right now
149:56 - it's not going to do anything I haven't
149:57 - really told it what I want it to do yeah
149:59 - it looks like it maybe it just went back
150:01 - to the default
150:03 - let's zoom in here a little bit now I'm
150:06 - just a fit to page width here
150:09 - and we can come in front of those curly
150:11 - brackets and put square brackets and
150:14 - that is where I'm going to enter the
150:16 - options that I want to use with this
150:18 - package so if I do want one inch margins
150:20 - I'm going to type margin equals one inch
150:24 - and compile
150:28 - um F1 to compile I may have said F2
150:30 - earlier I don't remember F1 to compile
150:33 - and now I have one inch margin so this
150:35 - really has the same effect as that full
150:37 - page package when I when I do it like
150:39 - this and just say give me one one inch
150:41 - margins all all the way around
150:43 - uh although it looks like we don't have
150:45 - a whole lot of space under the page
150:46 - number there
150:49 - I can make this really specific and say
150:53 - no I want the top
150:56 - to be one inch and the bottom to be one
151:01 - inch but the left
151:04 - to be 0.5 inches and the right to equal
151:11 - 0.5 inches and let's compile that and
151:15 - now you can see that I do have those
151:17 - larger margins on the top and bottom
151:20 - compared to what I have on the left and
151:23 - right okay
151:25 - um now my margins are a little bit too
151:27 - small for my taste so I might change
151:28 - that and you certainly don't have to use
151:30 - inches you can use centimeters you can
151:32 - use any valid measurement that latex
151:35 - will accept here
151:37 - okay typically I just use one inch but
151:40 - we will leave that like so for now and
151:44 - let's talk about
151:46 - another package
151:49 - actually before we move away from the
151:51 - geometry package you can also explicitly
151:55 - specify your paper size so let me just
151:58 - show you that real quick we could say
152:00 - paper width
152:02 - equals 8.5 inches if we're working with
152:06 - eight and a half by eleven and then we
152:07 - can say paper height
152:09 - equals 11 inches
152:13 - okay so if I did want to change the size
152:16 - of my output for my paper I don't know
152:19 - maybe I want to do something crazy like
152:21 - uh five by seven
152:27 - and then we can see what happens so when
152:30 - you print this it's going to print 5x7
152:32 - instead of now eight and a half by
152:34 - eleven so there might be some
152:36 - applications for that if you're if you
152:38 - want if maybe if you're making flash
152:39 - cards for example and you want them to
152:41 - be smaller
152:42 - then you could adjust that paper size
152:45 - even if your actual paper is not that
152:47 - size it would restrict the output to
152:51 - that size for you
152:52 - okay so let's just go back
152:56 - this is bugging me just because it's not
152:59 - what I like to use okay there we go
153:01 - that's making me feel more comfortable
153:03 - I've got one inch margins all around
153:06 - okay let's talk about another package
153:09 - and sometimes you're trying to type
153:12 - mathematical notation maybe you're
153:15 - looking up some syntax to do something
153:18 - like the symbol for the set of all real
153:20 - numbers and you try and type the code
153:23 - and then you get some kind of error well
153:25 - that actually requires a package
153:28 - some do use package
153:32 - and the name of the package that we're
153:34 - going to want to use for that is Ams
153:37 - fonts
153:38 - that package is going to allow us to use
153:42 - some specialized math notation so let me
153:44 - come over here to my questions and then
153:48 - add in before question number one uh
153:52 - let's just say I we want something
153:53 - something to do with all Runners I'm
153:55 - just going to type this is the symbol
153:58 - for all real numbers
154:02 - and the uh code for that we have to be
154:05 - in math mode we're going to backslash
154:07 - math BB you can see that it's popping up
154:10 - as a suggestion for me here and then
154:12 - we're just going to put capital r closed
154:15 - Math mode and compile and I will zoom in
154:19 - over here so we can get a better view of
154:22 - that but now we have there the symbol or
154:26 - a misspelled symbol the symbol for all
154:28 - real numbers
154:31 - and we of course have other symbols that
154:34 - we can use like the symbol for these set
154:37 - of integers
154:39 - so let me just copy that
154:43 - the symbol for
154:48 - and I probably should say for the set of
154:52 - yeah
154:53 - let's do that properly
154:55 - for
154:57 - the set of integers
155:01 - and that is going to be the capital z
155:05 - and we can see that it produces that
155:07 - symbol for us there we might want the
155:13 - set of rational numbers
155:19 - and that would be a q you get the idea
155:25 - now if I didn't have this package loaded
155:28 - I'm going to remove that and compile and
155:30 - you'll see that I get an error it's
155:33 - looking for when you see this undefined
155:35 - control sequence it doesn't recognize
155:37 - that command we do need to load a
155:40 - package I don't know if it tells me in
155:41 - the error message that which package I
155:44 - need but sometimes you will encounter
155:46 - that so we want to make sure that we're
155:48 - using that package and whenever I'm
155:50 - creating a document I automatically load
155:52 - the AMS fonts package whether I need it
155:55 - or not because I never know when I'm
155:56 - going to end up typing some
155:58 - mathematicals you know symbol that might
156:01 - require it and if you are not including
156:05 - any options so you're not using the
156:07 - square brackets to Define any specific
156:10 - options then you can actually load
156:12 - multiple packages all using one command
156:15 - so here I can type for example AMS fonts
156:18 - comma and then the name of another
156:20 - package that I want to use so I
156:22 - typically will load AMS fonts AMS
156:28 - Sim
156:29 - and what's the other one AMS math I
156:34 - think
156:35 - those three I just always when I start
156:37 - my documents I load those three packages
156:39 - just in case I end up needing them
156:41 - and you know in the end if you
156:45 - comment that out
156:47 - and compile and everything looks fine
156:49 - you didn't really need those packages
156:51 - you can always just leave a commented
156:53 - out or you can delete it from your code
156:54 - but I always just keep it in it's not
156:56 - harming anything
156:58 - all right so you load your packages
157:01 - again in the pre-ample that is before
157:04 - the backslash begin document
157:07 - now you can also load some macros in
157:10 - your preamble so macros are used to
157:14 - define your own custom latex commands
157:16 - and there are a few macros that I use
157:19 - often that I'm going to share with you
157:21 - but before I do that let's just you know
157:23 - look at how a macro might work in
157:26 - general so let's say you're working on a
157:28 - document and there's a little snippet of
157:30 - code that you know that you're going to
157:32 - use multiple times in your document
157:35 - you can Define it once using a custom
157:39 - latex command and then within the body
157:41 - of your document whenever you want to
157:43 - call that up you can just type that you
157:46 - know command that you've created instead
157:48 - of having to type the whole code so for
157:50 - example let's just say we were we were
157:52 - typing a paper and we were we knew that
157:54 - we were going to be working with a
157:56 - rational function
157:57 - and having to type it several times
158:00 - throughout the document so let's just
158:02 - say that that function is
158:04 - y equals
158:07 - and then we've got the fraction X over
158:10 - 3x squared
158:13 - plus X Plus 1.
158:18 - okay now I'm in the Preamble right now
158:20 - so compiling will probably give me an
158:22 - error like it doesn't make sense to have
158:24 - this up here I don't know that I've ever
158:26 - tried doing that before yeah I did get I
158:28 - did get an error because I'm trying to
158:30 - type this before my begin document
158:32 - doesn't like that but I just wanted to
158:35 - establish that this is an equation in
158:37 - fact let's move it on down
158:41 - here just so we can take a look at it on
158:44 - our document
158:45 - doesn't look that great at the moment
158:48 - if I want that to be a larger fraction I
158:51 - can go with d Frac instead
158:56 - and it would look more like that okay so
159:00 - let's go ahead and set up our macro and
159:03 - all we have to do is type backslash def
159:06 - for Define we are going to define a new
159:09 - command what do we want to call our
159:11 - rational function maybe we'll just call
159:13 - it backslash eq1 for equation one so
159:16 - we're defining equation one and then in
159:20 - curly brackets you're going to type the
159:23 - code that you want the compiler to run
159:26 - every time you type backslash eq1 inside
159:30 - of your document so you're gonna have to
159:32 - decide if you want to include the dollar
159:34 - signs as part of the command or exclude
159:38 - them I would say it's safer to exclude
159:41 - them just in case you're in a situation
159:43 - for example if you're doing an equation
159:46 - array or you're in a begin a line of
159:48 - environment where you don't want to use
159:50 - dollar signs uh you might run into
159:53 - issues there so I am going to omit the
159:56 - dollar signs
159:57 - and just type the actual equation part
160:00 - there now when we do want to call up
160:02 - this function within our document
160:04 - we're going to have to type the dollar
160:05 - signs so again you can decide if you
160:08 - want to include the dollar signs or not
160:09 - as part of the way that you have defined
160:12 - this special command slash eq1
160:15 - so now that it's defined we can use it
160:18 - and it didn't look great just sitting
160:21 - there above critical thinking questions
160:22 - let's just make this a new item in our
160:25 - list here
160:28 - let's
160:29 - examine
160:31 - the function
160:33 - backslash eq1 now again this is going to
160:37 - be problematic because it's going to try
160:39 - and display
160:41 - equation one but it's not in math mode
160:43 - so you can see if I compile it doesn't
160:45 - like that it's telling me right I can
160:47 - see right away oh you're missing a
160:48 - dollar sign so we just have to put
160:49 - dollar signs around our EQ one and we
160:53 - should be good to go there we are
160:57 - let's examine the phone so without
160:58 - having to retype the equation I can just
161:01 - call it up like this and then any at any
161:03 - point throughout my document I can call
161:06 - that up again quickly just using slash
161:08 - eq1 so that can be helpful
161:12 - let me show you
161:14 - um some of the macros that I commonly
161:18 - use in my documents I have this document
161:20 - open
161:23 - right here this is one that I use very
161:26 - frequently
161:27 - and this one again we're in the Preamble
161:31 - is where we're defining these custom
161:32 - commands so this one starts backslash
161:35 - new command
161:37 - and then the name of the command in
161:40 - curly brackets
161:41 - so this is the actual command that if I
161:45 - were not using a macro I would just type
161:47 - this out within the body of the document
161:49 - whenever I want to use it and this is
161:51 - going to increase the vertical space
161:54 - between items in my list so it's adding
161:58 - more separation if you want to think of
162:00 - it that way the item set it's adding
162:02 - separation between list items and
162:06 - this pound one is for is where I am
162:11 - going to input a value so each time I
162:15 - this is this one is a little bit
162:16 - different because it's not a a static
162:20 - command that is going to be the same
162:22 - every single time this one I have to
162:25 - enter a value when I use this command
162:27 - and this is the part in the code that's
162:29 - telling me that I'm going to enter a
162:30 - value right here where typically a
162:32 - number would be so how do we use that
162:35 - after my begin enumerate if I decide
162:38 - that I want more space between my list
162:41 - items I can just bring up this command
162:44 - and I'm going to just type backslash set
162:47 - like this
162:48 - backslash set and then in curly brackets
162:51 - I'm going to type how much space I want
162:53 - so I can type the number one here let's
162:57 - compile and that has added some space if
163:00 - I want more space I could type the
163:02 - number two
163:06 - and that gave me even more space let's
163:08 - just really exaggerate it I'm going to
163:10 - type the number five
163:12 - and that's giving me a lot of space
163:14 - typically I normally just stick with
163:17 - about 1.2 that's my my go-to unless I'm
163:21 - trying to leave room maybe if I'm typing
163:24 - a quiz I want to leave room for students
163:26 - to write answers although I typically do
163:28 - that with a V fill rather than the set
163:31 - command
163:34 - so that is one that I use often another
163:37 - one that I use often let's go over here
163:40 - um let's look at this one
163:44 - now this one is going to require I
163:47 - believe that we use a certain package
163:50 - yeah we're gonna have to use our
163:53 - packages you can see I have a lot of a
163:56 - lot more packages loaded in this sample
163:58 - document than the one we're working in
163:59 - right now but let me go ahead our
164:01 - commands go in the Preamble so I'm going
164:04 - to put that one up here and this one is
164:07 - going to insert a calculator symbol the
164:10 - command that I would be typing is just
164:12 - slash calculator but we are going to
164:14 - want to use
164:18 - these two packages tixi pgf plots
164:23 - so I'll come back up here where I've
164:25 - loaded all of my packages and let's
164:28 - compile
164:29 - or I haven't actually asked it to use
164:31 - that command so let's try using it and
164:33 - make sure it works so I'm just going to
164:35 - right here let's say I want
164:37 - um to let people know that this is a
164:39 - calculator active question I can type
164:41 - backslash
164:42 - calculator
164:48 - pile and then it's going to insert that
164:50 - little calculator symbol now I need a
164:53 - space between that and let's so I always
164:55 - just put an extra backslash like so and
164:58 - that's going to give me that little
165:00 - extra space that I need there and so if
165:03 - I'm typing up a set of homework problems
165:04 - and my students know that they can use a
165:06 - calculator on that particular question
165:09 - so that um
165:11 - is a really great use of this macro
165:14 - because I don't want to have to type
165:15 - this code every single time I want to
165:17 - insert that calculator icon I just do it
165:20 - once in the Preamble and then whenever I
165:22 - want to use it I can just type the
165:24 - backslash calculator so that's how you
165:26 - do custom commands in latex okay and
165:30 - then the last thing we're going to talk
165:31 - about here is inserting Graphics now
165:35 - it's important when you insert graphics
165:37 - and by Graphics I mean image files jpegs
165:41 - pngs are typically the ones that you're
165:44 - going to be working with it's important
165:46 - that you save those image files in the
165:48 - same folder where you've saved your Tech
165:51 - file so let me open my finder window
165:55 - this is the folder where I've saved my
165:57 - tech file this is the tech file we are
165:59 - working on right now it is in this
166:01 - folder
166:02 - latex tutorial 6 packages macros and
166:05 - Graphics so I'm going to find the image
166:07 - that I want to use I've saved it to my
166:09 - desktops to make it easy to find it's
166:12 - right here so I'm going to copy that and
166:16 - then I will come back here this is the
166:18 - folder where my tech file is and I'm
166:20 - going to paste that image file in this
166:22 - folder they need to be in the same
166:25 - folder for the compiler to find the
166:28 - image otherwise you will get a compiling
166:30 - error
166:32 - so let's go back up top because we do
166:35 - need to load a package in order to
166:37 - insert images so the package that we're
166:39 - going to use use package
166:44 - graphic X graphic X that is the package
166:48 - that we are going to use and then where
166:51 - I want to insert my image let me go back
166:53 - to a page width view here let's put the
166:56 - image
166:57 - right above question number one here
167:01 - where's statement number one here we'll
167:04 - put it before the enumerated list so in
167:06 - between critical thinking questions I'm
167:08 - going to insert my image right here and
167:10 - the most basic way to insert this image
167:12 - backslash include Graphics you can see
167:15 - that the suggestion is popping up
167:17 - the scale now I can go with a scale of
167:19 - one I find that typically a scale of one
167:22 - it sounds like it should be the right
167:24 - size right because it's 100 percent
167:27 - scale but it's usually really big so if
167:30 - I do use scale I find that I normally
167:32 - have to use a number between zero and
167:34 - one but we'll we'll just try it and see
167:36 - what happens so scale equals one and
167:38 - then you type the name of your file so
167:40 - let me go back to that folder because
167:41 - I've forgotten the name of it so the
167:43 - file is limit dot PNG
167:47 - so here I'm going to type limit I don't
167:50 - have to type the dot PNG you can it's
167:53 - fine but you don't have to you can omit
167:56 - the dot and then the file extension so
167:59 - if I had a limit dot JPEG file I could
168:02 - also just type limit and let's compile
168:06 - and there is our image so it is bigger
168:09 - than what I would like for this document
168:12 - you can see the font size here on the
168:15 - axis is a whole lot bigger than what I
168:17 - have in the rest of the document so we
168:20 - can
168:21 - decrease the scale maybe try 0.8
168:27 - still too big I mean let's go with 0.6
168:31 - I typically don't use scale I typically
168:34 - want to make sure that all of my images
168:36 - have a consistent width or maybe a
168:39 - consistent height so there is another
168:41 - option for sizing your image besides
168:43 - using scale you can specify the height
168:46 - of your image you can specify the width
168:48 - of your image so let's just do width
168:51 - equals
168:53 - and we will try five inches
168:59 - okay so that's pretty big I don't know
169:01 - why I went with that that big let's try
169:02 - 3.5 inches
169:05 - now you can also specify the height
169:07 - instead of the width or at the same time
169:09 - so if you change the aspect ratio things
169:12 - are going to look a little wonky let's
169:14 - try height equals five inches
169:18 - and you'll see that I haven't maintained
169:21 - that aspect ratio so typically I just do
169:24 - one or the other either width or height
169:27 - you don't have to use inches you can use
169:29 - centimeters you can also use percents so
169:33 - we could say something like with equals
169:35 - to do a percent you want to do something
169:38 - like this zero let's if we want 50 we
169:41 - could say 0.5 so slash text width so
169:45 - that's going to make the width of the
169:47 - image half of the text width
169:54 - yeah that looks about half right if I
169:57 - went with 0.75 that's going to be really
169:59 - big because it's going to take up
170:01 - three-fourths of the
170:04 - um I can't say page width because it's
170:07 - not including the margins but the text
170:09 - width right so that's another way that
170:12 - you can size your images there
170:16 - and if you want something smaller now
170:18 - it's only one-fourth of the text width
170:21 - now if you want the image to be centered
170:27 - let's go back to 0.4 if you want your
170:30 - image to be centered and this is the way
170:32 - that you're inserting your image then
170:35 - before the image we can do backslash
170:37 - begin Center
170:40 - and after the image backslash end Center
170:45 - so we don't want to Center everything on
170:47 - the page we just want to Center the
170:49 - image okay so that is the a really
170:52 - simple way to get uh Graphics into your
170:55 - document there's nothing fancy here we
170:57 - don't have a caption you know labels any
171:00 - of that kind of stuff so if you do want
171:02 - to have a little more control maybe you
171:04 - want to add a caption to your image or
171:06 - you want to have a little more control
171:08 - over the placement of your image then we
171:11 - can put our image inside of
171:13 - the figure environment so let me take
171:17 - away begin and end Center because
171:19 - there's a better way to do that if we
171:21 - right before the image backslash
171:26 - begin figure
171:29 - and then right after the image backslash
171:32 - and
171:33 - figure
171:34 - all right let's compile that
171:37 - and you'll see that it moved the image
171:40 - now in the code I've placed the image
171:43 - between critical thinking questions and
171:45 - my enumerated list
171:47 - but the compiler moved the image and it
171:51 - displayed it at the top of the page well
171:53 - if if you don't like that you have some
171:56 - options for telling it where to place
171:58 - the image here we can do in square
172:01 - brackets
172:03 - in h for here place the image here now
172:07 - that might not always work because
172:09 - sometimes the compiler thinks it knows
172:11 - better about where that image would fit
172:14 - best like if there's not quite enough
172:16 - space where you want to put it or I
172:19 - honestly I don't know how it how it
172:21 - decides exactly where to place the
172:23 - images but sometimes even this lowercase
172:25 - H doesn't work if you want it at the top
172:27 - of the page you can use a t if you want
172:30 - to place the image at the bottom of the
172:32 - page you can use a b
172:34 - that moved it down to the bottom of the
172:36 - page but normally I want my image to be
172:39 - right where I coded it and so I use a
172:41 - capital H but if I try and compile this
172:44 - I'm going to get an error because the
172:46 - capital H requires a special package and
172:50 - that
172:51 - is the float package so that is one that
172:54 - I almost always load in my documents in
172:57 - case I need it because it is also really
172:59 - useful for placing tables not just
173:01 - images but also tables and so if you
173:03 - load that flow package and you use the
173:05 - capital H here it will put the image
173:08 - right where you have the code for the
173:10 - image
173:11 - regardless of whether it fits well in
173:13 - that space or not
173:15 - and if you want to Center your image
173:17 - then inside of that figure environment
173:20 - you can just type slash
173:22 - centering so that will Center the image
173:26 - and also the caption if you use a
173:28 - caption so if we want to place a caption
173:31 - below the image I can end my line here
173:34 - and type backslash caption
173:39 - and then in the curly brackets type my
173:41 - caption so this is
173:44 - a visual or oh let's just call let's
173:48 - just say this
173:50 - The Squeeze theorem
173:56 - now notice all I said was caption The
173:59 - Squeeze theorem I never typed figure one
174:02 - but look when it displayed the caption
174:04 - it labeled or numbered this figure for
174:06 - me automatically which is really nice if
174:09 - you have several images in your paper
174:10 - it's going to number them as you go and
174:12 - then later if you go back and insert
174:15 - another image it will automatically you
174:17 - know reset all of the numbering and
174:19 - number everything appropriately now for
174:21 - those of you who are using overleaf
174:23 - let's talk about how to insert an image
174:25 - here so I've just copied and pasted the
174:29 - code from my techmaker file over here
174:32 - and when I hit compile I did get a
174:36 - compiling error it looks like I have two
174:37 - errors and it's because it can't find
174:41 - the image I've asked it to include in
174:44 - the document so it's looking for this
174:46 - this file called limit and it can't find
174:48 - it because I have not uploaded it here
174:50 - into overleaf so you're going to want it
174:52 - to appear in this list along with your
174:55 - Tech file so here's our you know main
174:58 - Tech file I can rename this if I want so
175:01 - that it matches the other one tutorial
175:03 - 06
175:06 - so you don't want to always have
175:07 - main.tech be your file names here
175:10 - because then when you start exporting
175:12 - things to your computer you'll have
175:13 - multiple Ted files that all have the
175:15 - same name so I do like if you're using
175:17 - overleaf get it in the habit of renaming
175:20 - those files okay so we need to upload an
175:23 - image and place it here in this list
175:27 - so here is the icon to upload and then
175:31 - you're going to find that image on your
175:33 - computer you can drag and drop it into
175:34 - the box I have that image on my desktop
175:37 - so let me do that
175:40 - I'm just going to drag it over here and
175:42 - drop it
175:44 - and it appears right here so now when I
175:47 - compile it should work out
175:52 - okay and there we go there is my image I
175:55 - had no problems finding that file
175:57 - because it is again in the same folder
175:59 - here in the same directory as the tech
176:02 - file itself
176:04 - so that does it for this tutorial we
176:06 - talked about loading packages we looked
176:08 - at defining some custom commands and
176:11 - then how to deal with inserting images
176:14 - into our documents
176:19 - I'm Michelle krummel and in this video
176:21 - we are going to take a look at errors
176:23 - and debugging so for errors I have
176:26 - intentionally made some very common
176:29 - errors and we're going to go through
176:31 - them one by one and see if we can fix
176:33 - them so I um haven't tried compiling
176:36 - this document yet I'm going to go ahead
176:37 - and compile it
176:39 - and when I do that I run into an error
176:42 - so I'm not actually seeing PDF output
176:44 - produced over here if the the file will
176:46 - not compile
176:48 - and so I have a number of errors and I
176:51 - can see in my log down here I can scroll
176:53 - through I have all kinds of errors and
176:56 - it's telling me it's giving me some
176:58 - Clues as to where these errors are and
177:00 - then what types of Errors they are so
177:03 - having the line numbers is very helpful
177:06 - and if you're not seeing your line
177:09 - numbers appear here you can go into your
177:11 - tech maker preferences and make sure you
177:13 - have line numbering turned on in your
177:16 - editor so that is a check box right here
177:19 - that you can select or deselect but I
177:22 - like having the line numbers show
177:24 - because it really does help when you're
177:26 - trying to find errors
177:29 - okay so let's look at that again now the
177:31 - first error apparently is occurring on
177:34 - line five and that's where my cursor is
177:36 - at the moment so it kind of worked its
177:39 - way through the file while it was trying
177:40 - to compile
177:42 - and there's a problem here on line five
177:44 - so the first thing I like to do is just
177:46 - read it very carefully and see if
177:47 - anything jumps out at me and I can you
177:50 - know make sometimes I'll just notice oh
177:52 - I see the mistake that I made there
177:54 - you know we're starting with double
177:56 - dollar signs we're closing with double
177:57 - dollar signs that's not an issue I have
178:00 - my left parentheses now whenever you use
178:03 - a slash left you need a matching slash
178:06 - right and I'm noticing I don't have a
178:08 - slash right so that's probably the issue
178:11 - and if we read the actual error it says
178:13 - right here missing slash right so that's
178:16 - a big clue to me to let me know what
178:19 - kind of mistake it is I'm dealing with
178:20 - so I do have clothing parentheses or
178:23 - parenthesis right here but I did not
178:26 - type slash right in front of it
178:30 - okay so I'm going to try compiling again
178:32 - to see if that fixed the error
178:35 - now it still did not successfully
178:38 - compile but that's because there are
178:40 - other errors in the document I can tell
178:43 - that I've fixed the error in line five
178:46 - because now when I look down at my error
178:48 - log the first error is occurring on line
178:51 - eight so we fix the problem in line five
178:53 - now let's deal with line eight notice we
178:56 - don't actually have any code in line
178:58 - eight so when that happens I usually go
179:01 - to the line right before it and and look
179:03 - for an error there
179:05 - another good tip when you're trying to
179:08 - troubleshoot here or debug your code if
179:11 - there are too many errors or you're just
179:14 - not sure exactly where their error is
179:16 - you can have the compiler temporarily
179:19 - ignore part of your code by commenting
179:22 - it out so anything you want to comment
179:24 - out you can type a percent symbol in
179:28 - front of it notice that this turned gray
179:30 - the line turned gray the compiler is
179:32 - going to completely ignore everything on
179:34 - line nine so sometimes you'll want to
179:37 - use that strategy just to narrow down
179:39 - where the error is
179:41 - now we the log says it's on line eight I
179:44 - know it's not actually on line eight
179:46 - so what I'm going to do just to show you
179:49 - how you can use this commenting thing
179:51 - I'm going to comment everything out
179:53 - except for endocument I don't want to
179:55 - comment that out because we have a begin
179:58 - document we need an end document or it's
180:00 - never going to compile so I highlighted
180:02 - everything else here and I can go
180:05 - individually and type percent symbols
180:07 - but there is a keyboard shortcut I can
180:10 - type command t on my Mac and that will
180:13 - comment all of the lines that I've
180:15 - highlighted alternatively you can come
180:17 - up here to edit and choose comment and
180:21 - it will do the same thing now I've just
180:23 - done it twice so I'm going to I think if
180:27 - I undo it'll only do one line so let me
180:29 - do edit and uncomment to okay there we
180:32 - go
180:33 - so now the only code that is going to
180:37 - run when I compile is the lines that are
180:40 - not grayed out here and I know that I
180:42 - fixed the error in line five so let's
180:44 - see what happens
180:46 - okay now it's just giving me errors on
180:49 - line eight supposedly line eight but I
180:51 - know for sure that it's happening right
180:53 - here because everything after that is
180:55 - being ignored and everything before that
180:57 - we have fixed
180:58 - so let's take a look at this and see if
181:00 - we can pinpoint what's missing the
181:02 - dollar signs look okay A lot of times
181:05 - um there's a missing dollar sign and
181:07 - that's an a common error that you can
181:09 - make but I'm noticing you know for every
181:11 - opening dollar sign I have closing
181:14 - dollar signs so that's good slash Frack
181:16 - I've got curly brackets around the
181:19 - numerator ah but I don't have curly
181:21 - brackets around the numerator because I
181:23 - accidentally typed parentheses here
181:25 - instead of the curly bracket so let's
181:27 - change that to a curly bracket now I
181:29 - think I've fixed it so I'm going to try
181:31 - compiling again
181:32 - and success the the file did compile now
181:36 - I've hidden all this other stuff so it's
181:38 - not showing
181:39 - so what I can do now is just unhide
181:42 - these lines one at a time I can
181:44 - uncomment
181:46 - uh them and back and then try and
181:49 - compile
181:51 - and we have an error now on line nine if
181:54 - I look at the error it says missing
181:56 - curly bracket so that's probably what
182:00 - the problem is and I sometimes I will
182:02 - count this is open number one open
182:05 - number two close number one
182:09 - open number three
182:11 - closed number two oh what did I just do
182:14 - there
182:15 - we go let's try that again actually when
182:18 - I'm doing this because it's hard to to
182:19 - kind of keep track I'll count all the
182:21 - open uh curly brackets and then all the
182:23 - closing curly brackets so I have open
182:25 - one
182:27 - two
182:28 - three
182:30 - I have three opening ones and then let's
182:32 - look for the closing ones
182:34 - we've got one
182:36 - and then two so I know that I'm missing
182:39 - a curly bracket somewhere now notice the
182:41 - color coding that's going on to help me
182:43 - if I put my cursor right after a closing
182:45 - curly bracket it shows me the pair it
182:47 - shows me the one that's opening and then
182:49 - being closed by this bracket
182:51 - so that's that pair is good this pair is
182:55 - good when I click here nothing nothing
182:58 - got highlighted like up here if I put my
183:01 - cursor next to that it's going to
183:02 - highlight the pair but when I put my
183:04 - cursor here it's not highlighting a pair
183:06 - so this opening one right here is
183:08 - missing a closing one so then you're
183:10 - going to look at your code and see
183:12 - okay where does the square root end and
183:16 - that means I have to put one at the end
183:18 - right here and now I've got that pair
183:19 - highlighted so let's compile and see if
183:23 - that worked that did work so that was
183:25 - successful
183:27 - let me go ahead and zoom in here
183:31 - okay so now I'm not going to just
183:33 - uncomment begin enumerate because that
183:35 - would certainly give me an error
183:37 - whenever you have a begin you need an
183:38 - end
183:40 - okay but now I don't I think I might get
183:43 - an error here because I'm saying hey I'm
183:45 - making an enumerated list but then I
183:47 - didn't put any items in my list so you
183:49 - need at least one item
183:51 - and if we compile that works there's my
183:54 - first item so I'm just going to take a
183:56 - chance maybe there's no errors in here
183:58 - and I'm going to highlight all of this
183:59 - and to uncomment them all back I can hit
184:03 - command U on my keyboard or I could have
184:05 - gone up here to edit uncomment and it
184:08 - would have the same effect and now we
184:10 - will compile that and I am getting an
184:13 - error so I know there's an error
184:15 - somewhere here
184:19 - okay so let's see if we can figure out
184:21 - what it is
184:22 - we've got the second item that looks
184:24 - fine begin enumerate and anytime you see
184:27 - begin something ask yourself do you have
184:30 - a matching end and I don't because the
184:33 - end enumerate right here matches the
184:35 - begin enumerate right here so this
184:38 - beginner numerate does not have an end
184:40 - enumerate
184:41 - so I need to come down right here
184:45 - and add an end enumerate that's a common
184:48 - error that happens especially when
184:50 - you're making nested lists and now
184:52 - everything is okay indenting can help
184:55 - with this if you don't indent and you
184:57 - have everything like this then it's hard
184:59 - to see which begin enumerate is paired
185:02 - with which and denumerate it's a lot
185:04 - easier if you indent and you can indent
185:06 - a bunch of lines at once if you
185:08 - highlight them and then
185:11 - for my Mac it's command shift and then
185:14 - the
185:15 - right angular bracket on the keyboard
185:17 - the one where you uh same key you hit
185:20 - for a period and you can do that
185:22 - multiple times if you want to indent
185:24 - more and if you want to go in the other
185:26 - direction you can use the left angular
185:28 - bracket to go the other direction
185:32 - okay so then let's comment out this next
185:35 - part
185:36 - and see if there's an issue there also
185:39 - I'm going to try compiling
185:40 - nope I've got a problem here
185:43 - and I'm if I read the error message it
185:46 - says undefined control sequence so
185:48 - undefined control sequence often happens
185:51 - if you well the compiler doesn't
185:54 - recognize a command so you typed
185:56 - backslash something and it doesn't
185:59 - recognize it and the most common reason
186:02 - common two reasons for that are one the
186:05 - commands you're trying to use requires a
186:07 - package that you don't have loaded or
186:09 - two there's a typo in your command you
186:12 - accidentally misspelled it which is the
186:14 - case here because I meant frack and I
186:16 - spelled farc so we'll change that to
186:19 - frack and see if that fixes that and it
186:23 - does there's my fraction there I'm going
186:25 - to go ahead and just uncomment all the
186:27 - rest of this stuff
186:29 - and we'll see how many more errors we
186:31 - have in this file
186:33 - okay scrolling down here it looks like
186:35 - we still have quite a few
186:37 - so I'm good up to line 24 even though
186:39 - it's telling me that the next error is
186:42 - on line 26 missing dollar sign inserted
186:46 - and I can see right away that it's a
186:48 - dollar sign issue because remember when
186:50 - you open Math mode using a dollar sign
186:52 - everything in math mode turns green and
186:54 - looking at this there is way too much
186:56 - green here too many things are green
186:59 - that aren't supposed to be green only
187:00 - the math should be green
187:02 - so this text if that discriminant that
187:05 - should not be green so I forgot to close
187:07 - my dollar sign right here
187:11 - and as soon as I type that dollar sign
187:13 - you can see that that text now turned
187:15 - black which is how it's supposed to be
187:17 - so let's try compiling
187:20 - now I still have errors in the document
187:22 - so it did not update the PDF this is the
187:25 - PDF from the last successful compile
187:28 - that we did
187:30 - so be aware of that as well if you feel
187:32 - like you're clicking compile and
187:34 - nothing's changing over here it could be
187:36 - because you have a compiling error and
187:38 - it's not updating your PDF for you
187:42 - and you can turn these this message log
187:43 - off so if you're not you know maybe you
187:46 - wouldn't realize that you had an error
187:48 - your PDF is just not updating but for me
187:51 - the message log automatically pops up
187:53 - when I have errors okay so now let's
187:55 - look at line 27 and see if we can figure
187:57 - out what issue we're having here so in
187:59 - the Align environment
188:01 - first of all I noticed something's weird
188:04 - because it's colored in a strange way
188:06 - I'm expecting the math to be green and
188:09 - things that aren't math to be black but
188:11 - this stuff right here I clicked a dollar
188:13 - sign to start Math mode
188:15 - but this is black why isn't it green if
188:18 - it's in math mode well when you're when
188:20 - you start the a line environment here
188:22 - when you type backslash begin a line
188:25 - it's it automatically puts that in math
188:27 - mode so I'm in math mode before I ever
188:30 - type anything when I do begin a line
188:33 - like that I'm in math mode right now so
188:35 - if I start typing you'll see it's green
188:38 - because it is in math mode now let me go
188:40 - back to what I had
188:42 - so what happened when I typed the dollar
188:44 - sign is it actually closed the math mode
188:47 - and that's causing me errors here so
188:50 - when you're working in a line never use
188:52 - the dollar symbols
188:54 - you're automatically in math mode now
188:55 - things look a bit more normal the math
188:57 - mode is green like I would expect it to
189:00 - be so let's compile
189:02 - and we still have an error it's still
189:04 - saying line 27. now obviously the
189:06 - problem is not on line 27 because
189:09 - there's nothing wrong with this code
189:10 - right here the syntax but it's
189:13 - something to do with my align
189:14 - environment here
189:17 - if you look at the other code messages
189:19 - that are popping up so sometimes this
189:22 - will give you a clue as to what's wrong
189:23 - and other times you know maybe it's not
189:25 - you're not real sure what this means
189:27 - miss it looks like missing dollar sign
189:29 - inserted but that's not really what the
189:31 - issue is here misplaced alignment tab
189:34 - character that's talking about the
189:36 - Ampersand that's not the issue here the
189:39 - issue here is that we have a blank line
189:42 - in our align environment and typically
189:44 - blank lines don't matter at all you can
189:46 - put as many blank lines in your code as
189:48 - you want
189:49 - it's not an issue it's not even going to
189:51 - show up as blank lines over here on your
189:53 - document in fact the compiler ignores
189:56 - spaces as well I don't know that I've
189:58 - mentioned that yet
189:59 - so not in text I don't not in text mode
190:03 - in text mode Let's see what happens if I
190:05 - put a bunch of spaces here actually I
190:07 - think it probably will still ignore it
190:10 - oh let me hide this because it won't
190:11 - compile so there's an error there so I'm
190:14 - commenting that out so we can see what
190:16 - happens here when I put in all these
190:17 - spaces
190:19 - there and look here then there are no
190:22 - real Roots it ignored all of those
190:24 - spaces you can type as many spaces as
190:25 - you want here and it's going to ignore
190:27 - it which is kind of nice because
190:30 - sometimes when you're you have a lot of
190:32 - code
190:34 - it's helpful to your eye to space things
190:37 - out for example up here where we have
190:41 - the square root
190:42 - especially when you're trying to find an
190:45 - error in fix and error sometimes I'll
190:47 - come in here and I will just put a bunch
190:48 - of space like I know the slash square
190:51 - root goes with that closing bracket
190:54 - right there and I'll just put a bunch of
190:55 - spaces just to visually separate it so I
190:58 - can focus on the interior because if I'm
191:00 - sure that this looks correct and it's
191:03 - matching with this right here then I
191:05 - don't need to focus on that part of the
191:07 - command I I really want to just focus
191:09 - what's in the middle here so spacing
191:10 - things out in your code can be helpful
191:12 - and this absolutely will not affect your
191:14 - output the compiler will ignore spaces
191:17 - sometimes it's frustrating frustrating
191:19 - because you want a space and it's
191:21 - ignoring the space when you type it but
191:23 - there is a way to hard code a space if I
191:26 - want to put a spacer I can just do
191:27 - backslash comma
191:30 - and then I could do that as many times
191:32 - as I want so let's insert some spaces
191:34 - here and now when I compile I should see
191:37 - the square root symbol and then a weird
191:39 - amount of space and then my fraction so
191:42 - that's happening right here I've
191:43 - inserted some extra space there let's
191:46 - take that away because that's not proper
191:51 - okay and now it looks normal again
191:54 - so let's go back to trying to fix our
191:56 - issue here and I think I already told
191:59 - you what the problem was in an align
192:01 - environment you cannot have an empty a
192:03 - blank line you cannot have a blank line
192:05 - so let's remove the blank line
192:09 - and try compiling
192:11 - and oh I still have another error okay I
192:15 - thought that was going to work okay so
192:17 - I'm not getting any any good Clues from
192:19 - the message here so I'm going to look at
192:22 - the code very carefully and make sure I
192:23 - didn't misspell something make sure that
192:26 - I have all the matching stuff that I
192:29 - need everything looks good so my next
192:34 - uh thing to check is is there a package
192:37 - missing that maybe I need
192:40 - so at this point I'm not sure what the
192:42 - issue is I always go to Google Google is
192:45 - your best friend when you are trying to
192:47 - troubleshoot latex errors so I am just
192:50 - going to
192:52 - Google's you know some kind of words
192:56 - that are going to indicate what my
192:57 - problem is so latex and then begin a
193:02 - line and let's see I think it's a
193:04 - package issue so let's see what pops up
193:14 - so a couple of Clues here I'm seeing use
193:18 - AMS math use package AMS math the very
193:22 - first hit aligning equations with AMS
193:25 - math so I think that was the package I
193:27 - needed and not that float package so
193:30 - let's come back up here and try AMS math
193:32 - AMS math
193:34 - and compile and sure enough that fixed
193:38 - the issue so that was the package I
193:40 - needed and I think I mentioned this in
193:42 - an earlier video whenever I create a
193:44 - document I always load AMS math
193:47 - AMS Sim and AMS fonts because I can
193:52 - never remember which one does what and I
193:55 - frequently need to use these three
193:56 - packages so just out of habit I go ahead
193:59 - and load those packages for all of my
194:01 - latex documents
194:03 - so that fixed the issue that we were
194:05 - having here
194:07 - okay so uh fixing errors you know it can
194:10 - be frustrating certainly but you want to
194:13 - try
194:15 - um just a systematic approach to it use
194:18 - that tip I showed you about commenting
194:19 - out parts of the code so you can really
194:22 - narrow in right where the error is use
194:24 - that error log to help provide clues to
194:26 - you so you can see what the error is and
194:29 - before we go let's just hop on over to
194:31 - overleaf and I'll show you what
194:33 - debugging looks like in overleaf it's a
194:36 - little bit different
194:37 - to be honest with you it uh it's not
194:41 - very pleasant okay and I think I made
194:44 - this sample document it was a copy of
194:46 - our tutorial with all of these errors in
194:49 - it so the reason I said it's not very
194:50 - pleasant is just because you see all of
194:52 - this red like it just induces panic when
194:55 - I see this I'm typing on a document and
194:57 - then things all of a sudden turn red
194:59 - right it's very jarring but it's showing
195:01 - me that I do have issues now in overleaf
195:05 - so I'm trying to compile it's not
195:07 - compiling clearly I'm having a problem
195:09 - because everything turned red it's
195:11 - giving me some indication of maybe what
195:14 - the problems are but but you see that
195:16 - it's not quite as
195:19 - um
195:20 - explicit as it was in tech maker where
195:22 - it said line five and then line eight
195:24 - and then line nine we are getting a
195:26 - little clue right here this l.5 is
195:28 - referring to line five
195:30 - uh and it looks like slash right it's
195:34 - also identifying what the problem might
195:36 - be there you really have to read these
195:39 - read these and look for Clues
195:41 - uh and then also this red X right here
195:44 - is indicating that we have an error on
195:46 - this line so we're going to try and fix
195:48 - it if you remember from last time the
195:50 - problem was we were missing the slash
195:51 - right in front of this other bracketing
195:54 - symbol
195:56 - okay now as soon as I fixed that notice
195:59 - what happened the Red X in front of line
196:01 - five disappeared but now I've got all
196:04 - these other red X's so these are
196:05 - indicating other problems now this one
196:08 - doesn't make a whole lot of sense
196:10 - uh backslash begin document like that's
196:13 - there's nothing wrong with that but if
196:15 - we hover over this and look at the
196:16 - message it's saying it's unclosed in
196:19 - other words like we have a begin
196:20 - document but we don't have an end
196:22 - document well clearly we do have an
196:24 - endocument it's down here
196:26 - but look what it says down here
196:28 - hey I found an unexpected end document
196:31 - after a begin enumerate so it's it's
196:34 - seeing this slash end and trying to
196:37 - close and enumerate so now I'm kind of
196:39 - piecing together the actual problem it's
196:41 - not the begin document it's not the end
196:42 - document it has something to do with a
196:45 - begin enumerate that probably wasn't
196:47 - closed and I have to really like hunt
196:50 - through here look very carefully at all
196:52 - my beginner numerates and make sure they
196:54 - have matching end in new rights and if
196:56 - you remember this one does not so it's a
196:59 - little harder I think to troubleshoot
197:01 - this problem in overleaf
197:03 - slash end
197:06 - enumerate and you can see as I'm fixing
197:08 - things some of that red is going away
197:10 - it's not panicking quite as much but now
197:13 - we have other coloring issues going on
197:16 - and oh things are turning red again
197:17 - that's not cool uh
197:20 - oh now we have a warning here this
197:23 - symbol is just a warning it's not
197:25 - necessarily going to cause a compiling
197:27 - error
197:28 - and if you read the message it's telling
197:30 - us something about the end of line which
197:32 - is happening all the way down here so to
197:34 - me like debugging an overleaf is
197:37 - definitely not as easy as it is in tech
197:39 - maker and I would highly suggest if
197:42 - you're working an overleaf that you use
197:44 - that strategy of commenting out a large
197:46 - chunk of your code so that you can
197:48 - really focus on one little section at a
197:50 - time but before you even get to this
197:53 - point the best piece of advice I have
197:55 - for you I can't believe I haven't said
197:57 - it before now in this video but the best
197:59 - way to
198:01 - prevent errors or to to debug errors is
198:05 - to compile all the time compile
198:08 - frequently right after you type a line
198:10 - of code compile and so you can see oh
198:13 - that works no errors keep going type A
198:16 - next little bit of code compiled don't
198:19 - try and type your whole document and
198:20 - then hit compile and end up with 25
198:22 - errors then it's a nightmare to try and
198:24 - fix them all so compile as you go
198:26 - frequently every line every couple of
198:28 - lines hit that compile button and make
198:31 - sure that everything is running properly
198:33 - okay I'm not going to go through fixing
198:34 - all the rest of these because we already
198:36 - saw how to do that how to fix them but I
198:38 - I did want to show you what the
198:40 - interface is like over here
198:42 - um even though it's tempting to fix them
198:44 - just to get rid of all of this red here
198:50 - I'm Michelle crumble and in this video
198:51 - I'm going to show you some tips for
198:53 - using tech maker and some tips for using
198:55 - overleaf
198:56 - so we're going to get started by opening
198:58 - up a tech file that I've already created
199:00 - techmaker is set to be the default
199:03 - program that will open Tech files that
199:06 - are stored on my computer so if I double
199:08 - click on this file it's automatically
199:10 - going to launch techmaker and open the
199:13 - file within techmaker so here is a file
199:16 - and this is what our tech maker window
199:19 - looks like yours might look a little
199:21 - different because I I may have changed
199:24 - some options some of my viewing options
199:26 - so in terms of what you see on the
199:28 - screen right now you can change that
199:30 - with these four buttons at the bottom if
199:34 - we open up the structure panel over here
199:38 - we see first of all our file structure
199:41 - and right now I just have the my my tech
199:44 - file here I don't have anything else
199:46 - added in here if I click on some of
199:48 - these other buttons we're going to see a
199:51 - list of symbols and if I click on one of
199:53 - these symbols it's going to insert the
199:55 - code for that symbol so I want to think
199:57 - about where I'm going to insert this
199:59 - let's just insert it at the end of this
200:02 - first list item so this particular
200:06 - symbol requires Math mode so I'm going
200:08 - to hit dollar sign and then let's say I
200:11 - forgot the symbol for plus or minus I
200:13 - can come over here click on plus or
200:15 - minus and it's going to insert the code
200:17 - for that symbol for me right here and
200:19 - now when I compile I should see the plus
200:21 - or minus appear so to compile my
200:24 - document I have a few options
200:26 - what I usually use is just F1 F1 is
200:29 - keyboard shortcut that is going to run
200:31 - the code for me so I hit F1 on my
200:34 - keyboard and my document compiles and I
200:38 - can see the result over here and sure
200:40 - enough I've got that plus or minus
200:42 - symbol right over here another way that
200:45 - I can compile my code is using the quick
200:48 - build option up here and in this drop
200:51 - down menu you can decide what's going to
200:54 - happen when you press on this Arrow so I
200:57 - like to have it set to Quick Build and
201:00 - quick build is going to do two things
201:02 - it's going to run the code it's going to
201:04 - turn it into the PDF and then it's going
201:07 - to show me the PDF
201:09 - so we can change what quick build is
201:12 - doing in our preferences if we go to
201:15 - tech maker preferences quick build right
201:19 - now when I run quick build when I press
201:22 - quick build it's going to run PDF latex
201:25 - view PDF so you can see that there are
201:27 - quite a few other options that you could
201:29 - select instead but this is probably the
201:32 - one that you're going to want to use so
201:34 - I would hit this Arrow right here and
201:36 - that like I said is going to run the
201:38 - code and then show me the PDF
201:42 - now if I let's say I take away the plus
201:45 - or minus
201:46 - okay so now when I run my code it should
201:49 - remove that plus or minus symbol and I
201:52 - should not see it on my PDF if I come
201:54 - over here view PDF and I click that
201:57 - nothing changed I still have the plus or
202:00 - minus there even though it's not over
202:01 - here in the code and that's because view
202:03 - PDF does not recompile your document it
202:08 - only shows you the PDF from the last
202:11 - successful compile I have not recompiled
202:14 - so just clicking on this Arrow right
202:18 - here is not going to do anything but
202:21 - show you the PDF from the last time you
202:23 - compiled it's not going to recompile so
202:26 - you have to make sure you're clicking on
202:27 - this Arrow
202:29 - not this one over here click on this one
202:31 - or like I said use your keyboard
202:33 - shortcut of F1 and that recompiles and
202:37 - we can see the plus or minus symbol has
202:39 - disappeared so you have other categories
202:42 - of symbols over here we've got arrows
202:45 - different symbols brackets Greek letters
202:49 - most used symbols this is going to
202:51 - populate automatically based on what
202:53 - you've clicked on in the past
202:55 - and then we've got our favorites the
202:57 - star here is a place where you can store
202:59 - your favorite symbols so if there is
203:01 - something that you think you'll use
203:02 - frequently maybe I don't know I'll just
203:05 - use this summation symbol you can right
203:08 - click add to favorites and then you can
203:11 - quickly find it by clicking on that star
203:13 - icon and then just choosing it over here
203:16 - if I click on this it's going to insert
203:18 - that into the code but I don't actually
203:20 - want that there
203:22 - okay I'm going to go ahead and close the
203:24 - structure panel so I'm not using it so I
203:27 - don't want it to take up space on my
203:28 - screen we have some other
203:31 - things that we can click on over here
203:35 - to call up some other commands so if you
203:38 - need to start a new section you can do
203:40 - that this way and you can type the name
203:42 - of the section that you want I'm not
203:44 - sure where I left my cursor so this is
203:47 - probably going to put it in a bad place
203:48 - in fact let me cancel let's say I want
203:50 - to create a section right here so I can
203:53 - go to section and I don't know what I
203:58 - want to call it
203:59 - section one
204:01 - and I'll hit OK and it's going to insert
204:04 - the code there to start this section for
204:06 - me and then if I compile we can see that
204:09 - it added section one for me there
204:12 - you have other options that you can use
204:15 - just click on here to see what you've
204:16 - got all of your different font sizes
204:18 - this one can be helpful it's hard to
204:20 - remember sometimes what the smaller font
204:22 - sizes commands are
204:25 - if you want to use this one right here
204:27 - to make something bold you want to
204:29 - highlight the text first so let's say I
204:32 - want to have chain rule in bold I would
204:35 - highlight chain Rule and then I would
204:37 - click on the B and you can see that it
204:39 - inserted slash text BF the curly
204:42 - brackets and my text is inside so now
204:44 - when I run my code
204:46 - chain rule is in bold okay so that can
204:49 - be a bit of a Time Saver
204:51 - and same thing here with italics
204:55 - emphasis is another way to do italics
205:00 - here we've got some justification
205:02 - symbols
205:04 - this one and if you hover your mouse
205:06 - over here it'll pop up a little box that
205:09 - tells you what it's going to do so this
205:10 - is going to insert a new line here we're
205:13 - going to get dollar signs a pair of
205:15 - dollar signs
205:16 - Etc so you can look at these different
205:18 - options a fraction is something that
205:20 - people frequently use so that's handy to
205:23 - have it right here in this toolbar same
205:26 - with the square root but remember in
205:28 - tech maker when you start typing a
205:30 - command so let's say we want to square
205:31 - root
205:33 - with open Math mode with a dollar sign
205:35 - if I start typing backslash SQ it's
205:38 - going to pop up some suggestions for me
205:40 - so the top one would be for an nth root
205:43 - and the bottom one would just be as for
205:45 - a square root so that would give me the
205:47 - square root of x so you can decide if
205:50 - it's faster to just type it by hand or
205:52 - maybe to click on some of the buttons
205:54 - over here
205:55 - before we look at some of the other
205:57 - things in our menu so let's go ahead and
205:59 - open the tech maker preferences and see
206:01 - what we have going on there under this
206:04 - commands tab
206:07 - I just want to point out that you do
206:09 - have the option with your PDF viewer to
206:11 - use the built-in viewer or an external
206:13 - viewer when you use the built-in viewer
206:16 - that's what allows the PDF to show up in
206:19 - this pane over here on the right which
206:21 - again you can toggle on and off at will
206:24 - if I switch to an external viewer let me
206:28 - go back into my preferences if I switch
206:30 - to an external viewer and it's one or
206:32 - the other you can't have both selected
206:34 - the external viewer is going to when I
206:37 - ask to view the PDF it's going to open
206:39 - it up in a different application outside
206:42 - of techmaker so by default my computer
206:45 - uses Adobe Reader to open PDFs so I'm
206:49 - pretty sure that's what where it's going
206:50 - to open so now you'll notice I don't
206:52 - have the option to view the PDF in a
206:55 - pane over here that went away so now
206:58 - when I want to view my PDF so I can
207:00 - quick build remember we'll also run view
207:01 - PDF or if I just want to view the last
207:04 - successful PDF I can click here and that
207:08 - popped open in Adobe Reader
207:12 - so there's my PDF I prefer to have the
207:15 - built-in PDF viewer
207:18 - because I'm constantly looking at my PDF
207:21 - I'm constantly compiling as I work
207:24 - to make sure that I catch any errors
207:26 - right when they happen
207:27 - so let me go back into my preferences
207:30 - and go back to that built-in viewer
207:34 - if you use something other than Adobe
207:36 - Acrobat you can always change the path
207:39 - here so click on this folder and then
207:42 - just go into your applications folder
207:44 - and find that executable file that will
207:47 - launch whatever PDF reader you have
207:51 - installed okay so let's move on to quick
207:53 - build actually nothing new to talk about
207:55 - here I showed you how you can change the
207:57 - setting but I'm
207:59 - confident that this is the one that most
208:01 - of you are going to want to use
208:02 - under the editor
208:04 - if you change the font family or the
208:08 - font size here it's not going to affect
208:10 - your PDF output it's only going to
208:13 - affect this little text editor part of
208:17 - your screen okay so it's not going to
208:20 - affect what's put on your PDF output
208:22 - document now for the purposes of this
208:25 - video tutorial I made my font size
208:27 - pretty large 24 point is pretty large
208:30 - because I wanted you to be able to see
208:31 - the text clearly when I'm working I
208:34 - normally work with it at size 16 so
208:37 - that's more comfortable for my eye and I
208:40 - can see more of the code on my screen
208:42 - this is normally the font size I work in
208:45 - but again you can change this you can
208:49 - make it smaller you can make it larger
208:51 - so when I'm recording videos I like to
208:55 - set it to 24.
208:58 - there are some options over here for you
209:00 - to consider word wrapping I like to have
209:02 - word wrapping turned on so in my text
209:05 - editor
209:06 - let's slide this over
209:08 - here
209:09 - uh we'll just slide that over some more
209:13 - when I get you know when I run out of
209:16 - room here it's just going to wrap down
209:18 - to the next line so I like that because
209:20 - I always want to see all of my code on
209:22 - the screen but it does make the this
209:26 - file take up a lot more space on the
209:28 - screen so if that's not something you
209:30 - want you can turn off the word wrap
209:32 - completion so this is that auto
209:34 - completion like when I started typing
209:36 - the code for a square root and it popped
209:39 - up the suggestion on how it thought I
209:40 - might want to complete that command then
209:43 - you just hit enter when you like the
209:45 - suggestion so that is
209:47 - um I find that to be a Time Saver I like
209:49 - having the completion turned on show
209:51 - line numbers is also really useful
209:53 - especially when you are trying to debug
209:56 - your code because an error message will
209:58 - come up and tell you hey there's an
210:00 - error on line 14 and then it's very easy
210:03 - to find that in your code you can just
210:05 - go right to line 14 and see the code
210:08 - you'll notice that some lines don't have
210:12 - numbers next to them and that's because
210:14 - of the word wrapping so this technically
210:17 - this part right here it's not going to
210:20 - let me click on it because I have this
210:21 - other window open this where it says to
210:23 - solve this is not a separate line it's
210:25 - part of the previous line so it doesn't
210:28 - get numbered as a new line versus this
210:31 - empty line here you know I had to hit
210:33 - return to get to this empty line and
210:35 - then return again to get to this line so
210:38 - even though there's nothing there this
210:40 - does count as a line number okay back
210:43 - over to our preferences here back up
210:45 - your document every 10 minutes you can
210:47 - certainly turn that on if that's
210:48 - important to you the reason I don't have
210:50 - that turned on is because when you do
210:52 - have this turned on then for all of the
210:55 - files you're working in it the compiler
210:58 - is going to or the program is going to
211:00 - create this extra file it's going to be
211:03 - also called tutorial 8 and it'll have
211:05 - the extension bank so in your folder
211:10 - let's see if I still have that fold yep
211:12 - in the folder here there would be
211:14 - another file that says tutorial
211:16 - underscore 08.bak and my folders I just
211:20 - feel like I have a lot of files them in
211:22 - them as is and I don't like having that
211:25 - extra file in there but it's no big deal
211:27 - if you want the safety of backing up
211:29 - your document every 10 minutes you can
211:31 - do that I almost always recompile more
211:34 - frequently than 10 minutes so it's not
211:37 - really useful for me because every time
211:39 - you compile it's going to save that file
211:43 - on your computer so that acts as backing
211:46 - up every so often as well now this is a
211:49 - good time to point out when I first
211:50 - launched this file
211:54 - these this
211:57 - tutorial8.aux.log and this dot syntax
212:00 - dot gz we're not here the only thing
212:03 - that was in here was this CMG project
212:06 - and then the tech file and the PDF but
212:10 - while you are compiling your file these
212:13 - other auxiliary files are being created
212:15 - these helper files are being created and
212:18 - they will stay in there and they will
212:20 - clutter up your folders and you really
212:22 - don't need them once I close uh tech
212:27 - maker I'm going to show you I'm just
212:28 - going to come in here and close tech oh
212:31 - it's not going to let me
212:32 - because I have this window open
212:34 - okay
212:36 - so now let me try closed techmaker and
212:39 - look those helper files disappeared that
212:42 - doesn't happen automatically that only
212:44 - happens because I set that up in my
212:46 - preferences to happen that way but it
212:48 - helps just clean up the folder so I
212:51 - don't have a lot of extra unneeded files
212:54 - cluttering up my folders so let me
212:57 - launch this again I'm just going to
212:58 - double click on this
213:00 - to open that up and if we look at that
213:03 - we see we just have these two files but
213:05 - now if I compile
213:07 - or I could have actually I could have
213:09 - stayed on this no I couldn't off there
213:11 - we go okay so now we've got all those
213:13 - helper files in there so how do we
213:15 - change that setting to get rid of those
213:17 - helper files when we don't need them in
213:20 - your preferences
213:23 - right here you're going to make sure
213:25 - this box is checked launch the clean
213:28 - tool when exiting techmaker so when you
213:31 - X Out of the program it's going to
213:34 - remove those extra files that are not
213:37 - needed
213:38 - okay so
213:41 - um we were looking at the editor window
213:44 - tap with number of spaces you can
213:46 - increase or decrease that as you like so
213:48 - that would be when I'm working on my
213:50 - code and I want to indent by hitting tab
213:54 - that's just how many spaces it will
213:56 - indent so you can customize that you can
213:59 - change the color of certain things so
214:02 - you'll have to know the hex code for the
214:04 - color that you want this is white
214:07 - so the background that I'm working in
214:09 - again it's not going to affect your PDF
214:12 - output it's just this editor panel here
214:15 - where you're typing your code if you
214:17 - want the white background there's a dark
214:19 - theme and there's a light theme so if
214:21 - you like working uh with like white text
214:23 - on a black background you can go with
214:25 - the Dark theme
214:26 - or I don't know if it's white text
214:27 - actually I don't typically use the Dark
214:29 - theme but right now the background color
214:31 - is set to White
214:32 - are the
214:34 - highlighted line
214:36 - I forget what color that is that might
214:38 - be correct I don't remember this is
214:40 - black
214:42 - this is gray
214:45 - um this is green so the when you're in
214:47 - math mode it's going to show up as green
214:48 - so you can customize that if you don't
214:49 - like the default colors you can come in
214:51 - here and change the hex code
214:53 - okay and then the shortcuts tab here is
214:56 - just going to give you a list of
214:58 - keyboard shortcuts and if there's
215:01 - something that you find you're doing
215:02 - frequently and there's not already a
215:04 - keyboard shortcut for it you can add a
215:06 - keyboard shortcut for it so the things
215:08 - that say none
215:09 - you can click on that and then you can
215:11 - Define your own custom keyboard shortcut
215:14 - all right so that takes care of
215:17 - preferences
215:19 - and we've looked at the this toolbar uh
215:23 - we sort of talked about the important
215:24 - stuff on this toolbar what have we got
215:27 - up here so tech maker this is where we
215:29 - found preferences if you're on the
215:31 - Windows version you may have to go to
215:34 - options to find preferences at least
215:37 - that's the way it used to be but on the
215:39 - Mac it's tech maker and then preferences
215:42 - file we've got uh standard stuff here
215:45 - edit these four commands are very
215:48 - helpful and I use the keyboard shortcuts
215:51 - for these all the time so if you want to
215:53 - comment out a line
215:56 - let's say for example I don't want these
216:00 - last four items in my list to show up on
216:03 - my PDF
216:04 - I can use the keyboard shortcut which is
216:07 - command T and it's going to put a
216:09 - percent sign at the beginning of each
216:11 - line and so by line I mean the number
216:15 - line is where they're numbered and then
216:18 - when I click off of that you'll see that
216:19 - it also changed the color to gray so it
216:22 - that's another indication to me that
216:25 - something is commented out and what we
216:28 - mean by commented out is that the
216:30 - compiler will ignore that line of code
216:32 - it will not even consider it when it is
216:34 - running your code it's just going to
216:36 - ignore it when it gets to that line
216:39 - that's been commented out so one use of
216:42 - commenting things out is you know maybe
216:45 - you don't want something in your
216:46 - document let's compile
216:48 - so there I just got rid of some of those
216:50 - questions but you don't want to delete
216:52 - it because maybe you're uncertain and
216:55 - you're you you want to show it later on
216:58 - so I do that sometimes when I'm writing
217:00 - a quiz or a test I have a question that
217:02 - I decide to Omit but I don't want to
217:04 - delete it because I think well maybe in
217:06 - the future or if I'm making
217:08 - um a makeup test I might want to then
217:10 - turn on that question so that's a good
217:13 - way if you're troubleshooting and you're
217:15 - trying to figure out where an error is
217:17 - commenting out a bunch of lines can
217:20 - really help you pinpoint exactly where
217:22 - the problem is and help you fix it
217:25 - now to undo that to a bunch of lines at
217:29 - once we can use the keyboard shortcut
217:31 - command U and that will make them all
217:34 - visible again
217:36 - another use for comments is just to
217:39 - leave little reminders for yourself
217:40 - especially when you're first learning
217:42 - latex maybe you don't you know remember
217:45 - what a certain piece of code means this
217:47 - for example on line three
217:49 - will remove paragraph indenting so I
217:52 - could leave a comment here for myself I
217:55 - just go to the end of the line not the
217:56 - beginning because then I won't run the
217:58 - code at the end of the line time type
218:00 - your percent symbol and make a note so
218:04 - this will
218:05 - remove the indents and it doesn't
218:08 - necessarily have to remove the indent
218:10 - but the zero is going to cause it to
218:11 - have an indent of zero space so I could
218:15 - put a number there instead if I wanted
218:18 - 10 ex is a unit of measure
218:21 - then that would give me large indents
218:24 - but I typically turn off indenting in my
218:27 - documents so another good use for
218:29 - comments there
218:33 - indent indent indent and unindent would
218:37 - be not for the PDF output
218:40 - not to confuse you because I was just
218:42 - talking about indenting here this is the
218:44 - code that will affect the indenting in
218:46 - your output document but sometimes you
218:48 - want to indent your code so maybe we
218:51 - want to indent these
218:55 - lines right here I can do that all at
218:57 - once if I hit and I'm on a Mac so it's
219:00 - command shift and then the right angle
219:03 - bracket and that will indent if I hit it
219:05 - again
219:06 - it will indent more so it's a good way
219:09 - to organize your code make sure things
219:11 - are lined up that all belong together
219:14 - and you can undo that or reverse that
219:18 - by command shift and then the left
219:21 - angular bracket
219:23 - and again if you forget the keyboard
219:25 - shortcut you can always just access it
219:27 - from the menu here or you can look and
219:29 - see what the keyboard shortcut is from
219:31 - the menu here under the latex
219:34 - menu here you've got all kinds of
219:36 - different options if you forget the code
219:39 - for something you've got it right here
219:41 - you can just click on it and it'll
219:42 - insert the code for you I don't know
219:43 - where my cursor is at the moment let's
219:45 - put my cursor in a good place
219:47 - well we'll just put it at the end of
219:49 - that sentence there
219:53 - okay so one that I find hard to remember
219:55 - I have a lot of this stuff memorized but
219:57 - one that I find hard to remember
219:58 - sometimes are the international accents
220:00 - and this comes up when I'm trying to
220:02 - type l'hopital's role so for low vital's
220:06 - role we need a special accent over the O
220:08 - and this is the command right here
220:12 - just put an O there so it's capital l
220:16 - apostrophe h o but it's the accented o
220:21 - will be tall
220:24 - and then let's build that
220:27 - and we can see it right there it's got
220:29 - the special accent over the o
220:32 - so the pull down menus are great for
220:34 - things that you don't use too often you
220:37 - don't remember what the code for them
220:39 - are it is our math we have other menus
220:44 - here
220:46 - if you just kind of hover over you'll
220:47 - see what's available there the wizard is
220:50 - cool
220:52 - um let's I'm going to just close this
220:56 - document I'm not going to close tech
220:58 - maker I just want to close this document
221:04 - and let's start a new document so this
221:07 - old PDF is just hanging out over here
221:09 - just because I haven't recompiled
221:10 - something yet so let's start a new
221:12 - document so I'll just click the new and
221:15 - you know we can start from scratch or we
221:17 - can use this wizard to get started quick
221:19 - start it's going to ask me for some
221:22 - basic settings we want uh and to use the
221:25 - document class article if you're doing a
221:27 - slide presentation you would use Beamer
221:29 - but we have article
221:31 - and you've got some options here you
221:33 - don't have to use any of these options
221:35 - you can ignore that if you don't need it
221:37 - I don't see anything here that I want
221:39 - you can decide if you want to go 10 11
221:41 - or 12 point let's go 12 point just so
221:44 - this is a little bigger for the video
221:46 - paper size you can choose the size of
221:49 - paper that you would be printing on so
221:52 - in the US we use letter paper
221:55 - the author if you want to include that
221:57 - if you know that you want to include
221:58 - your name in your document
222:00 - you can do that if you know the title of
222:02 - your document I mean you probably do
222:04 - this one that we're working on is
222:06 - critical thinking question or we'll just
222:08 - say IB math
222:11 - analysis and approaches
222:16 - HL
222:17 - okay geometry package do you want to
222:19 - load the geometry package that's pretty
222:21 - useful and then you can specify all of
222:23 - your margin sizes although I don't like
222:25 - the ones that are being offered here
222:28 - I would prefer one inch margins and if I
222:31 - don't want to if I want them all to be
222:33 - one inch I can just say margin
222:38 - equals one inch AMS packages absolutely
222:42 - I always include those the graphic X
222:43 - package if you're going to have images
222:45 - in your file so that one is useful and
222:49 - that's all I need I'm going to hit OK
222:50 - and I've got some basic stuff here to
222:53 - get me started I usually like to space
222:56 - out things a little bit here
223:00 - after my packages I'll leave an empty
223:02 - line
223:04 - okay that looks good and if this I don't
223:07 - know what's going to happen with the dot
223:09 - here let's see if we get an error
223:11 - yeah we do oh for but for a different
223:14 - reason it won't compile your document if
223:16 - you haven't saved it and named it
223:20 - so you got that could not start the
223:22 - command error it looks like hey I have
223:24 - code here why aren't you compiling it
223:26 - and it looks like it has a name but it
223:28 - actually doesn't I have not saved this
223:30 - file yet and named it so we have to do
223:32 - that
223:33 - so do file save as
223:37 - and then sure let's keep put it in the
223:40 - same folder tutorial underscore 08 B
223:48 - and we'll save that okay so now my file
223:51 - is named never never never never use
223:54 - spaces in your file name you'll notice I
223:56 - put the underscore there instead of
223:58 - typing a space do not put spaces in your
224:00 - in your Tech file names or your image
224:03 - file names it can cause issues okay now
224:06 - let's see if we can if this dot is gonna
224:08 - still result in an error
224:10 - it does not okay so sometimes people
224:14 - message me and they're having and they
224:16 - did something like this and then they
224:18 - try and compile and they get an error oh
224:20 - now it's not going to work because it
224:22 - still remembers this but if that happens
224:25 - to you the reason that you're getting a
224:27 - compiling error here is because you
224:29 - haven't actually typed anything between
224:32 - your begin document and your end
224:34 - document it looks like you know you have
224:35 - typed a lot of stuff up here but this is
224:37 - what we call the Preamble the part of
224:39 - the code that comes before begin
224:41 - document is just your Preamble it's like
224:44 - pre-setting certain things up and
224:48 - you can't run the code unless you
224:49 - actually have something
224:52 - in between your begin and end document
224:54 - so even if it's something simple like
224:56 - hello
224:58 - and then we can run that and no issues
225:01 - there
225:02 - okay so quick build not quick build the
225:05 - wizard quick wizard quick start there we
225:07 - go quick start can be helpful way to get
225:11 - you started from a blank document and
225:13 - you've got an option to do a quick start
225:15 - for a beamer presentation and some other
225:18 - options as well if you want to insert a
225:21 - table
225:22 - you can also use the wizard there
225:26 - quick tabular is going to bring up this
225:30 - window and you can enter how many rows
225:33 - and columns you want in your table and
225:34 - you've got other options here if you
225:36 - want to align the contents of your cells
225:38 - left right or centered or if you want
225:42 - them to be in like paragraph form if
225:44 - you're not entering numeric values if
225:46 - you're entering text you might want to
225:47 - switch to a paragraph and where you
225:51 - define the width of your columns there
225:54 - you can also merge some columns and
225:57 - decide if you want a border on the left
225:59 - and the right and at the top and at the
226:02 - bottom so you can have all of those or
226:04 - none of those or some but not all and
226:07 - you can check what you want there
226:10 - um
226:11 - you can add a vertical margin for each
226:13 - row if you want that and when you click
226:15 - on okay you can even come up here and
226:17 - type I think can you type contents yeah
226:19 - absolutely you can even type the
226:21 - contents of your
226:23 - table
226:25 - now that should be in math mode
226:30 - so tables can be a little bit tricky to
226:33 - code by hand
226:35 - so that's not cooperating
226:37 - so this is really nice to have sort of a
226:39 - visual way to create your table and then
226:42 - you hit OK and it's going to insert the
226:44 - code for you at least it's a good way to
226:46 - get started you can add more columns you
226:48 - I mean you can obviously edit this table
226:51 - now in any way that you like
226:53 - so let's take a look at that
226:55 - there we are it's pretty simple
226:58 - what else are we going to look at under
227:00 - user I want to show you this this is
227:02 - super helpful I use this all the time
227:05 - you can
227:07 - store bits of code and then just call
227:12 - them up instantly so this is really
227:14 - great when I am let's see which one do I
227:16 - want to look at well if you want to add
227:19 - your own you're going to go to edit user
227:21 - tags and then click on one you can only
227:24 - store up to ten so click on this one is
227:26 - empty we could do a new one here or we
227:28 - can just look at something I already
227:29 - have so this is something that I use
227:32 - often and I'm certainly not going to
227:34 - have this code memorized but this is
227:36 - going to insert a little calculator
227:37 - symbol
227:38 - so I often do this next to like
227:41 - calculator active problems if I'm
227:43 - assigning homework so I have this stored
227:46 - Under menu eight and I can type the code
227:48 - let's say
227:50 - um I want the little graphing calculator
227:54 - symbol right here so the command is
227:56 - slash calculator
227:59 - [Music]
228:01 - and then I need to put the code for that
228:03 - in the Preamble so I'm going to come up
228:06 - here
228:08 - now I can come up to user user tags and
228:11 - then just either click here for
228:12 - calculator icon or if I know the
228:14 - keyboard shortcut it's just shift F
228:17 - shift f8
228:19 - so I can just do shift f8 and that
228:23 - inserted all of these lines of code here
228:26 - for me so I don't have to have them
228:27 - memorized now I have lots of little code
228:30 - Snippets that I use over and over again
228:34 - and I only have 10 slots to store them
228:37 - here in techmaker so what I actually do
228:39 - is open Google Keep and I store all of
228:41 - my code snippets on separate little
228:44 - Google keep notes and so I can always
228:46 - find them easily there as well that's
228:48 - another tip for you
228:51 - okay so that is looking good and now
228:54 - when I run this I've got my little
228:56 - calculator symbol in front of hello okay
228:59 - view you can turn on and off different
229:02 - uh toolbars
229:04 - options help so notice under help you do
229:08 - have access to a latex reference and a
229:10 - user manual the user manual is going to
229:12 - help you with tech maker specific
229:15 - stuff that opens that up in a separate
229:18 - window here but you can learn all about
229:21 - tech maker and the different options and
229:25 - if you're having trouble with some
229:28 - aspect of tech maker that can be helpful
229:31 - you also have the latex reference
229:34 - which you can look up different types of
229:40 - commands so if you want to learn more
229:42 - about equation arrays you can click here
229:44 - and then read more about equation arrays
229:48 - and get some sample code and some
229:49 - explanation on how that works or any
229:52 - packages you might need like this one it
229:53 - tells you you have to use the AMS math
229:55 - package if you're going to use
229:57 - in equation array so that can be a great
230:00 - resource for you as well
230:02 - okay let's switch over to overleaf and
230:04 - I'll show you how to do a few things
230:06 - here so I am logged in if I want to
230:08 - start a new project I'm going to click
230:10 - on new project blank project notice that
230:12 - there are lots of templates available
230:14 - though in the and overleaf has a
230:16 - template library with with tons and tons
230:19 - and tons of templates that you can use
230:21 - so which is really great if you're
230:23 - typing up a science lab report they have
230:25 - some templates that you can start with
230:27 - resumes all kinds of things but we're
230:29 - just going to go with blank project
230:32 - and we will again call this tutorial
230:35 - eight
230:38 - overleaf
230:39 - and that's just the title of the project
230:42 - but notice that when we create this
230:45 - that's not the title of the file I told
230:47 - you never never put spaces in your file
230:49 - name and I did put spaces in the title
230:52 - but that is not the name of the file the
230:54 - name of the file is what we see right
230:56 - over here main.tech
230:59 - and I always recommend to my students
231:02 - when they're using overleaf to change
231:04 - the name of that file because every time
231:06 - you start
231:08 - a blank project in overleaf it's going
231:10 - to call the file main.tech and so it
231:12 - just gets confusing when you have lots
231:14 - of files that are different but they're
231:16 - all called main.tech so I always
231:18 - recommend renaming that we'll call this
231:21 - tutorial
231:24 - 8C there we go
231:27 - and you can
231:29 - um in this this pane is like the
231:31 - structure pain that we had in Tech
231:33 - makers so if you do add more files to
231:36 - this project they will appear in the
231:39 - list here
231:40 - if you want to go back to the main menu
231:42 - you would think that you should click on
231:44 - menu but that is actually not going to
231:46 - take you back to the main menu if you
231:48 - want to go back to the main menu you
231:49 - click on this Arrow right here and
231:51 - that's going to take you back to this
231:53 - main screen here so now to go back to my
231:55 - project I can just click here and we've
231:58 - got some basic code here to get us
232:00 - started if you don't like what's here
232:01 - you certainly can type over it or delete
232:03 - it and start with something else you can
232:06 - if you're loading a template you'll have
232:08 - lots of code in here for you and you can
232:10 - just edit it as you need to
232:13 - so I'm not going to do much with the
232:15 - code I just want to point out where
232:16 - certain things are in overleaf and also
232:19 - show you how you can download copies of
232:23 - your Tech file and your PDF document in
232:25 - case you need to send it to someone or
232:28 - submit it to your teacher
232:32 - this panel right here is just like in
232:35 - techmaker is where we're typing our code
232:37 - and you have the option to switch to the
232:39 - Rich Text Editor I don't recommend this
232:41 - but I guess it can be helpful if you're
232:44 - really you know kind of unsure of what
232:47 - something is going to look like and
232:49 - maybe it's not compiling because there's
232:51 - an error this might give you an idea of
232:54 - what your work is going to look like but
232:56 - I recommend sticking to source and just
232:59 - working with the actual code here
233:01 - when you're ready to run your code
233:03 - you're going to click on recompile and
233:06 - then it will refresh and show you your
233:09 - PDF output over here on this panel if
233:12 - you are working on a small screen and
233:15 - you you know this is very tiny and you
233:17 - can't see it very well you can also
233:19 - collapse some of these paints so you can
233:20 - click on right here
233:22 - to go full screen and now it's just the
233:25 - PDF so you get a nice big zoomed in view
233:28 - of your work and then you can go back
233:30 - split screen you can also drag this
233:34 - separator to the left which will
233:37 - increase the size here and has the same
233:39 - effect as zooming in or you can drag it
233:41 - to the right this side will get smaller
233:43 - this side will get larger so you have
233:45 - some options there you can also close
233:47 - these panels using these little arrow
233:51 - symbols right here so now I've hidden
233:53 - that PDF panel and then I can bring it
233:55 - back
233:55 - like so if you want to share your
233:58 - document and have multiple people
234:00 - working in this same document you can do
234:03 - that so here's what I recommend for my
234:05 - students when you want to share a
234:06 - document don't use this option here
234:10 - where it says share with your
234:11 - collaborators I mean intuitively it
234:12 - seems like that's what you should do
234:14 - right you type in someone's email
234:15 - address and then you share it with them
234:16 - well in the free version of overleaf you
234:19 - are limited to how many people you can
234:21 - collaborate with and so another option
234:24 - instead of doing that would be to turn
234:27 - on link sharing up here
234:29 - turn on link sharing and then anyone
234:33 - with the link can edit your project if
234:36 - you share this link with them or anyone
234:38 - with the link can view your project if
234:41 - you share this URL with them okay so if
234:44 - you are working in a group of four for
234:46 - example this is the way you want to go
234:47 - turn on your link sharing anyone with
234:50 - the link can edit the project send your
234:52 - collaborators this link and they will
234:54 - all be able to work in the document with
234:56 - you you can also turn on chat and so if
235:01 - multiple people are working in the
235:02 - document you can have a chat message
235:04 - going on about certain things you also
235:07 - have the option of commenting
235:09 - commenting in techmaker is gray when you
235:13 - comment here in overleaf it's this
235:15 - bright blue so it's really easy to see
235:19 - the con actually I like that maybe I'll
235:21 - change that in my tech maker and make it
235:23 - blue instead
235:25 - um so it's easy to see comments that's
235:26 - another way you can communicate with
235:28 - people is by leaving comments in parts
235:29 - of the code but the chat is another
235:32 - option for you
235:34 - okay let's say you're done with your
235:35 - project and you want to download a copy
235:38 - of your PDF so that is very easy to do
235:42 - you just click on this icon right here
235:44 - and it downloads the PDF for you
235:48 - and then you can open that on your
235:50 - device and it'll open in whatever PDF
235:53 - viewer you normally use there's my PDF
235:56 - and it downloaded it by default into my
235:59 - downloads folder so I can find it there
236:01 - on my computer
236:03 - if you want to download your Tech file
236:06 - that is not quite as easy in fact it's
236:08 - much more difficult to do that
236:09 - especially for my students who are
236:11 - working on a Chromebook
236:13 - but if you want to download
236:16 - your Tech file you're going to come over
236:18 - here and click on menu the thing that
236:20 - you think would take you back to the
236:22 - main menu but it doesn't so click on
236:24 - menu and then you've got two options
236:26 - here if you click on PDF it's going to
236:28 - download the PDF but frankly the other
236:30 - way to do it was easier or you can click
236:33 - here that says Source that's what you're
236:34 - going to want to do you want to click on
236:36 - source and it's going to download not
236:39 - your Tech file it's going to download a
236:42 - zip folder and in that zip folder you
236:47 - will find any of the files listed here
236:49 - so if you've uploaded images or you have
236:52 - multiple text files here or whatever
236:54 - files here any files you have here that
236:57 - are associated with this project when
236:59 - you click on Source it's going to
237:01 - download all of them in a single folder
237:05 - and zip that folder and send you the
237:08 - zipped folder so that folder is called
237:11 - tutorial 8 overleaf that's the title of
237:14 - my project dot zip now on a Mac this is
237:18 - really easy to deal with so I just find
237:21 - it I just clicked on on that and said
237:24 - show in finder
237:26 - but you can also just go to your
237:28 - downloads folder and it's right here
237:30 - tutorial 8 overleaf.zip all I have to do
237:33 - on my Mac is double click on that and it
237:36 - unzips it and actually when there's more
237:40 - than one folder it looks a little
237:41 - different so let's
237:43 - let's go back here and add something
237:46 - let's add an image in here I'm going to
237:48 - upload
237:49 - and I'm just going to drag an image from
237:52 - my desktop
237:54 - okay so I've added an image here and I
237:57 - warned you not to have spaces in your
237:59 - file name so I'm going to rename this
238:06 - okay so now I have an image and a text
238:09 - file and I'm going to I want to download
238:12 - at least my tech file but really it
238:14 - makes sense to download both because no
238:16 - one can run your Tech file if they don't
238:17 - have a copy of the image you'll get a
238:19 - compiling error
238:21 - okay so let's try this again
238:23 - all I have to do is click on this and
238:27 - it's going to
238:28 - this was the zipped file
238:31 - I already had one with the same name so
238:33 - that's why I put the one at the end this
238:35 - is the zipped file and when I double
238:38 - clicked on it
238:39 - it unzipped it or sometimes we call that
238:43 - extracting
238:45 - but now I just have a regular folder
238:48 - this is not zipped anymore so when I
238:49 - look inside that folder I see all of my
238:51 - individual files I've got my tech file
238:54 - and I have my image file what I don't
238:57 - have here is my PDF this doesn't make
238:59 - sense to me why don't they just don't
239:01 - also include the PDF as part of this
239:03 - that would be nice but you you if you
239:06 - need both you're going to have to
239:07 - download them separately okay so now you
239:09 - have access this is in my downloads
239:11 - folder I can move it anywhere else I
239:13 - want to on my computer I can upload it
239:15 - into Google Drive I can upload it into
239:17 - my learning management system like
239:19 - canvas
239:21 - or really I can do anything I want with
239:23 - it and to get back to our Tech file just
239:25 - click on it and then that will make that
239:27 - the active file again so I think that
239:29 - covers everything I wanted to show you
239:31 - in overleaf
239:32 - and I hope you're able to use some of
239:34 - these tips to help you work more
239:37 - efficiently
239:41 - hello and welcome to another video in my
239:43 - latex tutorial Series today we're going
239:45 - to be talking about some common notation
239:48 - that you would see in calculus such as
239:50 - limits integrals summations and Vector
239:53 - notation
239:56 - I'm starting with a very basic setup all
239:59 - latex documents start with the command
240:01 - backslash document class and I've set
240:04 - this one up to be 11 point and the type
240:06 - of document is an article
240:08 - the only package I'll be using for this
240:10 - tutorial is the geometry package and
240:13 - that is simply to adjust the size of my
240:16 - margin so that is optional you don't
240:17 - have to use that
240:19 - the body of our document will type in
240:22 - between the commands slash begin
240:24 - document and slash end document
240:29 - I'm going to begin by identifying the
240:32 - domain and range of a function
240:36 - the function and now I want to enter
240:38 - Math mode so I type my dollar sign
240:41 - f of x
240:43 - equals
240:45 - and in parentheses I want x minus 3
240:50 - squared so I raise that to the power 2.
240:55 - plus one half
240:57 - backslash frac
240:59 - and tech maker is going to fill in the
241:02 - rest of the command when I hit enter
241:06 - and I can tab to get to the next part
241:09 - and move my cursor outside of the braces
241:13 - and let's go ahead and compile this and
241:16 - make sure it looks the way we expect
241:17 - remember when you open a new document
241:20 - you must save it and give it a name
241:23 - before you try and compile it or you
241:24 - will get a compiling error
241:27 - now I usually hit F1 as a keyboard
241:30 - shortcut to compile my document but for
241:32 - the sake of the tutorial I'll probably
241:34 - move my cursor up here and build it by
241:36 - pressing the arrow
241:39 - that looks good we have the function f
241:41 - of x equals the quantity x minus 3
241:43 - squared plus one half
241:45 - so I'm going to continue typing
241:50 - has domain
241:52 - and now to describe the domain
241:54 - I want to name it with capital D and I'm
241:57 - going to go into Math mode
241:59 - I want a subscript of f because it's the
242:02 - domain of function f colon
242:06 - and
242:07 - the domain for this function is all real
242:09 - numbers now we do have the option of
242:11 - using the symbol for all real numbers
242:13 - but I'm going to use interval notation
242:15 - so our domain goes from we're using it's
242:18 - an open interval so parentheses negative
242:21 - Infinity
242:22 - negative we're just typing the minus key
242:24 - on the calculator for the infinity it's
242:26 - backslash i n f
242:30 - t y That's negative Infinity comma and
242:34 - now I want positive infinity or just
242:37 - Infinity so backslash i n f t y close my
242:42 - parentheses
242:44 - and let's end Math mode and compile that
242:47 - see what it looks like
242:52 - okay now the one thing I would like to
242:55 - change
242:56 - is the D I don't want it to be
242:58 - italicized because it's in math mode
243:00 - letters are always going to be
243:01 - italicized but I can make that not in
243:05 - italics if I come back to my code and I
243:07 - type I basically wrap it with the tag
243:10 - math RM so backs go move your cursor in
243:14 - front of the D
243:15 - backslash math RM and then the curly
243:21 - brackets around the D
243:23 - now when we compile it our D should not
243:26 - be italicized
243:29 - but the F still is because it's outside
243:32 - of those curly brackets
243:35 - so let's finish by describing the range
243:37 - so the function f of x has domain
243:42 - from negative Infinity to Infinity
243:44 - and range so I'm going to do something
243:47 - very similar here I'm going to use a
243:49 - capital R for the range so I'm going to
243:51 - go into Math mode
243:53 - but I don't want the r to be in italics
243:55 - so backslash math RM
243:59 - and in tech maker you can see it's
244:01 - trying to complete the command for me so
244:03 - if I hit enter it'll type the braces for
244:06 - me and I can just type my r
244:09 - r in the center there and use the right
244:13 - arrow to come out of the braces
244:16 - we want the subscript of f
244:19 - colon and now our range goes from
244:23 - one half to infinity and I do want to
244:27 - include the one-half so I'm going to use
244:28 - a square bracket around the one-half
244:31 - to get the one-half I'm using the
244:33 - command for a fraction
244:39 - comma Infinity so backslash i n f t y
244:45 - open parentheses
244:48 - close Math mode
244:50 - now let's typeset that and I have a
244:52 - feeling I'm not going to be happy with
244:54 - the way it looks let's try
244:57 - okay so what I'm not happy about
244:59 - is the square bracket here it's not
245:02 - large enough to surround the fraction
245:04 - one-half
245:06 - so I explained this in an earlier video
245:08 - on delimiters
245:10 - but if we want to expand automatically
245:13 - expand the size of the brackets or
245:18 - braces or parentheses then we can
245:22 - change the command slightly so I'm going
245:24 - to find where those where that bracket
245:27 - is so right here I'm going to put my
245:28 - cursor in front of it and I'm going to
245:30 - type slash left and that is going to
245:34 - expand automatically fit that bracket to
245:37 - the size of what comes after it and then
245:40 - the parentheses on the right I also want
245:42 - to
245:44 - insert my cursor just before it and Taps
245:47 - type slash right so if you use the slash
245:50 - left
245:51 - then you have to balance it somewhere
245:53 - with a slash right the compiler will be
245:56 - looking for that
245:58 - okay so now we can see that both of
246:00 - those delimiters have expanded
246:05 - the other thing I might want to do
246:06 - notice that the one-half is smaller than
246:09 - the three
246:11 - this has shrunk it to fit neatly on a
246:14 - line because it's in line
246:16 - if we wanted that to display at full
246:18 - size we could go back and use
246:21 - the display style command this doesn't
246:24 - bother me I think it looks good the way
246:26 - it is so we'll see how to use the
246:27 - display style in a in another example
246:30 - here in a moment
246:31 - let's move on and look at how we can
246:35 - type a limit
246:39 - and I'm going to go ahead and end this
246:40 - with two backslashes to give myself some
246:42 - more space
246:45 - and to type a limit the basic command in
246:48 - math mode is backslash l i m
246:53 - if I just end Math mode here and compile
246:58 - you can see all we get is Lim and even
247:01 - though we're in math mode these letters
247:03 - are not in italics because the compiler
247:06 - understands that this is a special
247:07 - string of letters
247:09 - now we want to adjust this we want to
247:11 - take the limit of something
247:13 - and we want to take the limit let's say
247:15 - we want to take the limit as X
247:17 - approaches a
247:21 - I'm going to use another command
247:23 - backslash limits
247:26 - and that is going to be followed by
247:30 - I'm trying to get as X approaches a so
247:34 - underscore
247:37 - and then in curly brackets
247:41 - I want to type X and then an arrow and
247:45 - then a so the symbol to get that right
247:48 - arrow is backslash 2 t o
247:52 - a and I'm going to close my curly
247:54 - brackets and now we should see when we
247:56 - compile it the limit as X approaches a
248:01 - okay if I did not use this limits
248:07 - take that out and recompile
248:13 - as X approaches a will not be underneath
248:15 - the Lim it will still be a subscript
248:19 - because we used that underline but it's
248:21 - going to appear to the right which you
248:23 - may want I don't like it like that so
248:26 - I'm going to go ahead and put the
248:27 - backslash limits
248:30 - command in front and now the
248:33 - X approaches a will be underneath the
248:35 - word limit
248:39 - if I want to take the limit and we have
248:43 - to take the limit of something so let's
248:44 - come back and add our function in
248:47 - general let's just call it f of x
248:49 - so we want the limit as X approaches a
248:51 - of f of x
248:53 - if I want to take the left hand limit
248:56 - the limit as X approaches a from the
248:59 - left I just come back to my code and
249:01 - after the a
249:02 - use the carrot
249:04 - you can type a plus if you want to
249:06 - approach from the right hand side if I
249:08 - want to approach from the left hand side
249:09 - I'll type A minus
249:22 - okay let's do one more example with
249:24 - limits
249:28 - we want the limit so backslash Lim and
249:32 - to make the notation look a bit nicer
249:35 - I'm going to use backslash limits
249:38 - underscore
249:40 - and I want again just the limit as X
249:43 - approaches a so in my curly brackets X
249:47 - backslash 2 t o
249:50 - the limit as X approaches a
249:53 - close my curly brackets
249:55 - and this time I'm going to use the
249:57 - definition of derivative at a point
250:00 - so the limit as X approaches a of now I
250:05 - want the fraction f of x minus F of a
250:08 - over x minus a so backslash frac
250:13 - in my numerator that's the first set of
250:15 - curly braces or curly brackets
250:19 - we're going to type f of x minus F of a
250:24 - in the denominator so this goes in the
250:26 - second pair of the curly brackets x
250:29 - minus a
250:32 - and that let's come outside of the
250:34 - brackets there
250:36 - is equal to F Prime of a so F and I'm
250:39 - just hitting the apostrophe for that
250:41 - Prime symbol of a
250:43 - close my math mode Let's compile this
250:46 - and see how it looks
250:49 - all right I forgot to end my line with
250:52 - two backslashes that'll give me a little
250:55 - bit more space in between there
250:58 - now this looks good but the fraction is
251:01 - displaying rather small and that's
251:02 - because it's trying to fit it nicely in
251:04 - with the line but I want to make it look
251:06 - normal size so I'm going to come back to
251:08 - my command
251:10 - and wrap the entire thing with display
251:12 - style backslash
251:14 - display Style
251:17 - curly bracket and then at the very end
251:20 - before the last before I exit Math mode
251:22 - put the closing curly bracket and let's
251:25 - compile this again
251:27 - okay so now the fraction looks much
251:29 - larger same size as the rest of the
251:32 - notation
251:33 - and that line with two backslashes and
251:36 - now let's look at how to type set in
251:38 - integral in math mode we're going to
251:40 - start with backslash int for integral
251:45 - let's take the integral of
251:48 - sine of x now if I just type S i n when
251:52 - I compile that it's going to be
251:53 - italicized I don't want that so for sine
251:55 - cosine tangent all the trig functions we
251:58 - do backslash first so backslash s i n
252:02 - of X and that should give me the
252:04 - integral of sine X
252:06 - now I also need my DX I can type DX just
252:11 - like this close Math mode Let's see what
252:13 - that looks like
252:17 - now notice that the X and the DX are
252:20 - kind of look like they're running
252:21 - together there
252:23 - so what I like to do here is just force
252:27 - a space to be inserted between those
252:30 - because remember just because you type
252:31 - type a space over here in the code
252:34 - doesn't mean it's going to appear as a
252:35 - space when you compile your document but
252:38 - to force a space right there I'm going
252:40 - to hit backslash comma
252:43 - so let's compile that and see if it
252:45 - makes a difference
252:46 - okay good so now there is a space
252:48 - between my X and my DX now if you don't
252:50 - want the d italicized we saw as we did
252:54 - when we were typing domain and range how
252:55 - we can wrap that lowercase D with the
252:58 - backslash math RM tag and it wouldn't be
253:02 - italicized but the italics don't bother
253:04 - me with the DX so I'm going to leave it
253:06 - like that
253:07 - let's go ahead and solve this integral
253:10 - so the integral of sine X DX equals
253:13 - negative cosine X so I'm going to do
253:16 - backslash cosine X now let's talk about
253:18 - spacing for a moment over here I left a
253:22 - space in between or in front of this
253:25 - slash sign that's optional
253:28 - I didn't over here but I did leave a
253:31 - space between the S and the X here
253:33 - otherwise the compiler might get
253:36 - confused and think your command is
253:37 - backslash cos x all is one thing so we
253:41 - want to separate that with a space
253:43 - and let's not forget R plus C very
253:47 - important
253:48 - and we'll compile that
253:51 - and there we go
253:54 - if I want my integral sign to be longer
253:58 - so when you see it in a textbook you see
254:00 - it online usually it doesn't look that
254:02 - short and it's shrunk here to kind of
254:05 - make it fit in that line neatly but we
254:07 - can expand that
254:09 - simply by using
254:11 - display Style
254:14 - so backslash
254:16 - display Style
254:17 - curly bracket and then just before we
254:20 - end math mode put the closing curly
254:22 - bracket
254:28 - and that elongated that integral symbol
254:31 - next let's look at a definite integral
254:34 - so we also start with backslash int
254:37 - that's the command for integral
254:40 - but this time we need to show that we
254:42 - want to take the integral from A to B
254:46 - now I can simply use an underscore
254:49 - and type a carrot B
254:54 - let me close Math mode and see what that
254:56 - looks like
254:57 - okay so that gives me the short integral
255:00 - but it is going from A to B and my lower
255:02 - limit and upper limit of integration
255:05 - appear to the right of the integral
255:07 - symbol we can also
255:10 - use backslash int with the backslash
255:14 - limits command
255:17 - underscore
255:18 - a carrot B
255:25 - and now we have
255:27 - an integral where the A and the B are
255:30 - not to the right of the integral symbol
255:32 - but they're above and below the symbol
255:34 - so you can decide which one of those you
255:37 - prefer if you want the integral symbol
255:39 - elongated simply wrap it with display
255:42 - Style
255:44 - I'm going to just copy
255:48 - those last two commands and we'll see
255:51 - what they look with display Style
255:54 - in front
256:12 - okay so we get logger integrals which
256:15 - sometimes looks nicer let's continue
256:17 - working with our definite integral
256:20 - to talk about some problems you may
256:22 - encounter along the way
256:25 - if you're one of your limits is more
256:28 - than one character then just using the
256:31 - carrot is not going to be sufficient so
256:34 - for example
256:35 - let's say for some reason you wanted to
256:38 - go from
256:40 - 2A to B let's see what happens when we
256:43 - compile this
256:46 - okay that's probably not what you were
256:48 - expecting to see
256:49 - so the what we're going to do to fix
256:51 - this
256:52 - is after the underscore the lower limit
256:55 - you want to wrap that in braces or curly
256:58 - brackets
256:59 - and then we can do the same for the
257:02 - upper limit now if it's just a single
257:04 - character it's not going to be a problem
257:06 - but if you have more than one character
257:08 - you will need to do that so just to be
257:10 - on the safe side you can always use the
257:12 - curly brackets then you shouldn't run
257:13 - into any trouble there so now we have
257:16 - our integral with the lower limit of 2A
257:18 - and the upper limit of B let's go back
257:21 - to Just A and B I'm going to keep the
257:23 - braces
257:25 - okay now I'm moving my cursor in front
257:27 - of the last
257:29 - curly bracket because that goes with the
257:31 - display style command
257:33 - so let's take the integral of something
257:36 - let's take the the integral of x squared
257:40 - DX and remember I want to insert a space
257:43 - just typing a space is not going to
257:46 - insert a space when I compile this so
257:48 - I'm going to use backslash comma DX
257:53 - and we'll compile that make sure it
257:55 - looks good so we have the integral of x
257:58 - squared DX from A to B
258:02 - and that is equal to
258:04 - now there are a couple different
258:06 - notations you might see for evaluating a
258:09 - definite integral I usually use the
258:11 - square brackets around the expression so
258:14 - I'm going to type
258:15 - the square bracket for the left side
258:18 - when we integrate this the
258:19 - antiderivative for x squared is X cubed
258:22 - over three so I could write 1 3 x cubed
258:26 - I'm just going to go ahead and write X
258:27 - cubed over 3 so I want the fraction
258:32 - x cubed
258:35 - over 3. because this is a definite
258:38 - integral we need to input our lower
258:41 - limit and upper limit so let me
258:43 - end with a square bracket
258:46 - and then to get my limits on there I'm
258:50 - going to use the underscore
258:53 - and then lower limit of a
258:57 - carrot upper limit of B so again if it's
259:00 - a single character you don't have to
259:02 - wrap it with the curly brackets
259:04 - but to be on the safe side we can go
259:07 - ahead and do that and just so you're
259:09 - familiar with the notation
259:12 - okay now let's see what we what that
259:14 - looks like because I have a fraction I
259:17 - have a feeling I'm not going to be happy
259:18 - with the brackets
259:19 - okay so the lower limit and upper limit
259:22 - do appear in the correct place in
259:25 - relation to the bracket but the bracket
259:27 - needs to be expanded to the height of
259:29 - the fraction so I'm going to go back
259:31 - where I typed my opening square bracket
259:33 - and in front of that backslash left
259:37 - where I typed my closing square bracket
259:42 - in front of that I type backslash right
259:47 - and we'll compile that and that looks
259:49 - much better
259:52 - and let's go ahead and
259:55 - finish evaluating our integral here so
259:57 - that is equal to backslash fraction
260:02 - B Cubed in the numerator
260:06 - over 3 in the denominator and I need to
260:09 - move my cursor to the right
260:11 - so that I'm outside of that first
260:13 - fraction
260:14 - and now it's minus we plug in our lower
260:16 - limit of a so I need another fraction
260:19 - backslash Frac our numerator is a to the
260:23 - power 3 denominator 3. let's compile
260:27 - that
260:29 - the next thing we're going to look at is
260:32 - summation notation
260:35 - to get the capital Sigma we're going to
260:37 - use the command backslash sum
260:41 - if I compile that
260:44 - it's going to be pretty short
260:46 - so usually that is written much larger
260:49 - than the text beside it so we can make
260:52 - it larger using
260:54 - display style backslash
260:57 - play style curly bracket and we go to
261:01 - the end and put the closing curly
261:03 - bracket if I compile that
261:06 - now you can see the size is much larger
261:08 - we want our sum to go from n equals 1 to
261:12 - Infinity I'm going to use backslash
261:15 - limits so I'm going to use then an
261:18 - underscore
261:19 - and on the bottom I want n equals one
261:23 - that's not a single character so this
261:25 - time I have to use the curly brackets n
261:27 - equals one
261:28 - close the curly brackets use the carrot
261:31 - and now we're going to type our upper
261:34 - bound so this time I want to go to
261:39 - Infinity
261:40 - so in the curly brackets I'm going to
261:42 - type backslash i n f t y and close the
261:47 - brackets
261:48 - let's compile and see what we have there
261:51 - okay so we have the sum
261:53 - from n equals 1 to infinity and let's
261:56 - keep going with that I need to be in
261:58 - front of the last curly bracket because
262:00 - that closes the display Style
262:02 - and we want to take let's see the sum of
262:06 - let's do geometric series a times R to
262:10 - the power n and that is equal to let's
262:13 - go ahead and compile so we can see where
262:15 - we are
262:16 - I'm going to go ahead and expand that
262:19 - sum
262:20 - so that is equal to a plus
262:24 - a times R Plus
262:27 - a times r squared
262:30 - Plus
262:33 - now I want dot dot dot
262:36 - plus my nth term a times R to the power
262:40 - n let's compile and see what we have I
262:44 - have the dot dot dot but the dot dot dot
262:47 - should be centered vertically so that
262:50 - it's kind of aligned with the horizontal
262:52 - crossbar of the plus sign and instead of
262:56 - typing dot dot dot there's a command for
262:59 - the three dots
263:02 - I don't need to insert space between it
263:04 - but just to keep the code nice and clean
263:06 - I will and that command is slash if you
263:10 - just want a single dot it's C Dot
263:15 - if you want the three dots put an S at
263:18 - the end backslash C Dots so when I
263:21 - compile this those three dots should be
263:24 - vertically Centered for our next command
263:26 - we're going to put
263:28 - all of this stuff together
263:30 - and give the definition of a Riemann sum
263:33 - using a definite integral
263:35 - so let's open Math mode and the first
263:38 - thing I want to type is the definite
263:40 - integral of f of x
263:42 - from A to B
263:44 - so we're going to do display Style
263:50 - open curly brackets I'm going to go
263:52 - ahead and end them and end the math mode
263:54 - and then just type in between those
263:56 - brackets
263:58 - so we're starting with an integral so
264:00 - backslash int underscore and then a
264:03 - carrot B my function will just be f of x
264:08 - and then to insert a space here
264:11 - backslash comma DX equals let's compile
264:16 - just make sure we don't have any errors
264:17 - to this point and everything looks the
264:20 - way we expect okay with the integral
264:22 - from a to b f of x DX is equal to now we
264:26 - want the limit as n approaches Infinity
264:29 - so backslash Lim I want to use backslash
264:33 - limits so that the X approaches Infinity
264:36 - part appears underneath the Lim
264:40 - so underscore
264:43 - curly brackets X
264:46 - and then to get the arrow backslash 2 to
264:51 - Infinity backslash i n f t y
264:56 - closing curly brackets so that should
264:58 - say the limit as X goes to Infinity
265:00 - let's compile
265:01 - make sure we're doing everything
265:03 - correctly that looks good
265:05 - let's put my cursor back in front of the
265:07 - last curly bracket because we still want
265:10 - to be working inside of display style
265:12 - now I want the sum as K goes from 1 to n
265:17 - so backslash s-u-m backslash limits
265:22 - underscore
265:24 - and I want k equals 1 on the bottom so
265:26 - in curly brackets k equals one close
265:29 - that
265:31 - carrot on the top I just want n the
265:34 - curly brackets are optional since it's a
265:36 - single character so let's make sure we
265:38 - have our sum
265:39 - displaying correctly good now we want to
265:42 - take the sum of f of x sub K so X
265:48 - underscore K and I don't think I need to
265:50 - expand the parentheses we can see what
265:52 - it looks like when we type set it
265:54 - times Delta X now this is optional but
265:58 - I'm going to go ahead and put the dot to
266:00 - indicate multiplication so backslash C
266:03 - dot that will be a single dot centered
266:05 - vertically and I'm multiplying that by
266:07 - Delta X now to get the Delta symbol
266:10 - for those Greek letters it's backslash
266:12 - and the name of the letter but if I just
266:14 - type
266:15 - all lowercase Delta
266:18 - X I'm going to get the lowercase Greek
266:21 - letter so let's see what happens there
266:24 - okay so I've got my f of x sub K the
266:26 - parentheses look fine I don't need to
266:28 - expand them I've got my DOT and that is
266:31 - not what I wanted to see for Delta X so
266:33 - the Delta symbol the triangle is
266:35 - actually the capital letter in the Greek
266:38 - alphabet so we're just going to go back
266:40 - and instead of lowercase T it's
266:43 - backslash Delta with an uppercase d
266:46 - and pile that again
266:47 - and now I have my Delta X we have one
266:51 - last thing to look at that you might run
266:53 - into
266:54 - in calculus notation and that is vectors
266:58 - so to get the vector symbol it's simply
267:01 - backslash v e c
267:05 - and then in curly brackets what you want
267:08 - to put the symbol over so I'm going to
267:09 - call this vector v
267:12 - ector V
267:13 - is equal to and let's do the IJ notation
267:19 - so we have our first component V sub 1
267:23 - times Vector I so backslash v e c Vector
267:27 - I plus v sub 2
267:31 - so V underscore 2 times Vector J so
267:35 - backslash v e c
267:38 - and J in the curly brackets and that is
267:41 - equal to if we want to write this in
267:43 - component form
267:45 - I like to use angular brackets
267:48 - so it would be for the left angular
267:51 - bracket it's backslash l
267:55 - angle and that's going to insert the
267:57 - bracket so now we need our first
267:59 - component V sub 1
268:02 - comma
268:03 - our second component
268:05 - V sub 2
268:07 - and then we want the closing bracket the
268:09 - right angular bracket so backslash r
268:13 - angle and that should do it let's close
268:15 - math mode compile and see how that looks
268:20 - and I forgot to
268:22 - put two backslashes earlier to give
268:24 - myself a little more vertical spacing
268:27 - okay that looks good so vector v equals
268:30 - V1 times Vector I plus v sub 2 times
268:33 - Vector J we're in component form just V1
268:35 - comma V2 in the angular brackets and
268:39 - that concludes this tutorial on calculus
268:42 - notation

Cleaned transcript:

latex is a type setting system for creating professional looking documents commonly used in Academia and scientific publishing with the focus on content rather than appearance Michelle crummel is your instructor in this latex course for beginners she is an experienced teacher with multiple mathematics degrees welcome I'm Michelle crummell and in this video I'm going to show you how to get started using latex latex is a document markup language and it's used to create professional looking documents with consistent formatting it's especially useful if you're typesetting mathematical notation so it's great if you're writing a paper that contains mathematics if you're creating tests and quizzes or typing up homework assignments I use it for other things too like creating slide presentations and even writing letters of recommendations it has many many uses as a teacher some of the main reasons I prefer using latex over word processors besides just how professional it the output looks is that latex is crossplatform it's backwards compatible it produces PDF files that are small and can be opened on any device and it's free open source and highly customizable but before you get started creating your own latex documents you have a decision to make do you want to work and store your files online or offline the advantages of working online are that you don't have to download install or update any software onto your computer so you can get started right away you can even work collaboratively in real time using shared documents the advantages of working offline on the other hand are that you have complete control over how you organize and store your files and you don't need an internet connection to work on your files both options work really well it just depends what's going to be best for you so I'm going to start by showing you how to work online because for a beginner that's probably the fastest and easiest way to get started so to work online we're going to use a website called overleaf so you can just do a Google search for overleaf or you can go right to overleaf.com now I already have an account set up so when I went to overleaf.com it automatically logged me in but if this is your first time visiting overleaf you will want to create an account and you can do that using an email address so because I don't have any files created so far in my account this is the screen I'm seeing when I log in once you create at least one Tech file you're going to see a different screen when you first log in and you'll see a list of all of your files but for now we're going to click on create first project and we want a blank project and you're going to have to come up with a name for your project I'm just going to call this tutorial one so when we create a new project in overleaf it's automatically going to populate some code for us this is really really just the basics here and we can see that we have sort of three Windows here on the far left this is going to show us our file structure the name of our Tech file is main.tech and then in the middle here we have the place where we're going to be typing our code and then over on the right we have our PDF output so we can see what our final document is going to look like so just a couple of things to point out here when you make any changes to the code and you want to see what they look like in the output you are going to have to click recompile when you make changes over here it's not going to automatically update on the right you do have to hit recompile and generally if you're not working in overleaf you're not going to get this sort of starter template here you're just going to have an empty slate to work with now if I try and compile right now I'm probably going to get an error because there is no code let's see what happens yeah so it's not giving us just a blank PDF it's actually coming back with an error and saying that it can't compile the code and that is of course because we don't have any code so let's just do some really basic code in here in overleaf and then I'm going to switch over and show you how you can work offline that's my preferred method and that's what I'm going to be using in my future tutorials so to start our document we're going to hit backslash and we want to make sure that we are always using the backslash and not the forward slash so the backslash is starting our Command and then I want document class now as I start typing document class you can see that it's kind of guessing what I'm going to be typing and I can now just click on that to complete the command or I could have just continued typing it out with my keyboard so we have document class then we have a pair of square brackets followed by a pair of curly brackets and we have to type something in these brackets this is part of the code so in the curly brackets at the end we're going to Define what kind of class that we're using and for us it's going to be an article now that doesn't mean we're writing an article like a newspaper article but that is just the name of the class the type of document that we are creating there are other document classes that you can use for example if we had entered Beamer there we would be creating slides almost like a PowerPoint presentation if we typed exam there then we have a different type of class where that I use for creating tests and quizzes but most of the time I use article now the square brackets these are for optional arguments so I could actually delete the square brackets and not use them at all I could even just leave them there blank with nothing inside but here we can type some options so one of the things that we can type in here is the font size so I think the default is 10 point I'm not sure I always use 11 points so now I can't even remember now what the default is but if we want to use 11 Point instead of 10 point or 12 point then we can type that the PT stands for point and that's going to change our font size now if I try compiling right now I have some code here right I suspect I'm still going to get an error yeah I'm still getting error because I haven't really started my document yet there's no real content in here so that's like the bare minimum that you need to declare before you actually begin your document the next thing we're going to type is backslash begin and then in curly brackets document so again it's anticipating what I want I can just hit enter and it will fill in for me or I could have continued to type it out on my keyboard now when I hit enter notice not only did it give me begin document but it also gave me end document so this is a command that comes in a pair it's got a begin and an end if you type backslash begin document and you forget to type backslash end document your file will not compile so it knows when it sees a begin to be looking for a matching end so we want to make sure and do that and it's a good idea to go ahead and just type the ending command and then move your cursor back in between and type the rest of your content so you don't forget and let's do just something really basic like hello and I'm going to compile recompile and see what we get so we do have something now something on the screen you can see that not everything I typed in the code is showing up on the screen the commands aren't going to show up but the text itself is and we can use the color coding to kind of give us an indication of what's what so the text that I typed is colored black whereas the commands the backslash document class backslash begin backslash end those are blue so we can distinguish between them so let's type a little bit more than that this is my first latex document and recompile it's a good idea to compile frequently because if you wait for too long before you compile you may end up with five or six errors and then it's very difficult to go back and figure out exactly where the errors happened you know it ideally you would only want you know one error to deal with at a time so it's it is a good idea to compile frequently and that way you can catch any errors right when they when they happen all right so hello this is my first latex document and you may have noticed if you've been kind of looking at things online that the the word latex is often typeset in a very particular way it's kind of got a special font if you will to make it look a certain way and we can very easily accomplish that here by putting a backslash in front of latex now you do have to spell it exactly how I spelled it with a capital l a lowercase a a capital t a lowercase e and a capital x so let's recompile and see what happens now actually this doesn't look great I mean it's nice that uh the word latex is typeset correctly but there's no space between the X and the word document so to get the space in there I'm going to just put another backslash at the end of that command okay and that fixed that right up now you might be wondering why it's spelled latex and I keep saying latex and not latex the letter at the end of the word is actually not an X it's actually the Greek letter Chi and the Greek letter Chi sounds more like a k than it does an X it doesn't sound exactly like a k but that's the closest I would say letter in our alphabet to what it sounds like so it's a it's like a hard k sound it's not an X sound at the end a lot of people say latex instead of latex both are correct it's just a matter of preference so there we are which is just a really basic document that we've gotten started here and I do want to do a little bit more with this to explain especially like how line breaks and some very basic format formatting works but I'm going to go ahead and switch over now to working offline and show you how to do that if you have lots of latex files like I do I mean I have thousands and thousands of latex files that I create um I prefer to be able to store them on my hard drive if I'm working an overleaf everything kind of gets let me go ahead and show you before we leave I'm going to hit this up Arrow to go back to kind of this main screen here and if I list all my projects I only have this one that I created tutorial one but as I start creating more projects you're just going to see a long list of files here I like to be able to put things in folders and subfolders and in some cases Sub sub folders and move things around on my computer to store things the way that I want so that's the one downside I personally find with using overleaf is just the file structure and how you store and find things now you can tag your files which does allow you to filter things and make it easier so instead of having a list of 100 files you know maybe you can narrow it down by by tags and that does help a bit so if you do want to work offline you are going to need to install some software on your computer and there are two pieces of software that you need to create latex documents you need a latex distribution and then you need a text editor so the latex distribution is what is going to turn your code into some kind of output file like a PDF file the text editor is just what you use to type the code and there are all kinds of text editors right you can even just use notepad something really basic as a text editor to type your code it's important when you're installing these two pieces of software that you do so in the correct order install the distribution first you need to install your latex distribution first so I get quite a few comments people asking for help and saying you know they're they're trying to compile their first file and it's not working they're getting errors it's really important that you install your distribution first so that's up and running and then install your text editor and try using your text editor okay so what you what are you what should you install where there's lots and lots of options and then your options are going to be different based on whether you are a Windows PC user or a Mac OS user so if you have a Windows computer then my recommendation is to install mictec as your latex distribution you're going to do that first and then to install tech maker as your text editor now mid Tech when you install it does come bundled with its own text editor and you can use that I just don't find it as user friendly as tech maker tech maker is so wonderful for people who are starting out with all of the nice options and and the way that it color codes things and the way that you can create macros I really love techmaker and even though I'm not a beginner I that's still my goto program for editing latex code if you are a Mac User I'm a Mac User then you want to install Mac Tech for your latex distribution and tech maker for your text editor okay so again please install your distribution first so that's either mctech or Mac Tech and then once that is installed you can install the text editor and all of this is absolutely free to download install and use so here I am in tech maker right so because I'm on a Mac I've got Mac Tech installed as my latex distribution now Mac Tech is not something that you would ever like click on and open it just works in the background the text edit editor is what you're going to interface with so I don't have to worry about Mac Tech or creating a shortcut um you know to it or anything like that you can once you have it installed and it's working you can just completely ignore it but tech maker my text editor is what I'm going to use to create my documents and type my code so right now I'm in techmaker now I this isn't a fresh install so I'm not sure that my screen looks exactly what like what you will see when you first log in it's possible that um that you have see this structure thing turned on here uh I'm just clicking through some of these other right now what I'm seeing looks more like what we saw in overleaf where you've got some um information over here I mean there's nothing here yet because we haven't created anything but some file structure information over here and then in the middle is where we will be typing our code and then over here on the right is where we will be viewing our PDF but to save on some screen space I really don't need to see the structure tag tab so I'm going to turn that off and then my messages log I mean it's I can turn it off it's going to automatically come back up when I compile so it's not that important the PDF viewer I do want to be able to see my PDFs as I work so I will leave that showing now we don't see anything because we we're not actually working in a file at the moment so the first thing we're going to do here is to create a file actually the first thing we should do is look at our preferences and and make sure that we have some good options selected so I'm going to go into tech maker sorry that's just a cut off you can't see that but if you go to your your menu here click on tech maker and preferences and I think it's different on the Mac version if you are on a Windows PC you might have to go to like preferences or options but somewhere in here you should be able to pull up the window that I'm seeing right now so it might be called options or it might be called preferences based on whether you have the Mac version or the windows version okay so what in this first screen for this commands tab you want to make sure that you have this box checked right here PDF viewer we want to embed the PDF that's what's going to allow us to see the PDF on the right and the code on the left so we want to check that box I'm using my builtin viewer to view the PDFs and then you also want to check this box down here launch the clean tool when exiting techmaker that's really useful when you create latex documents and you close your document you're going to see a lot of files that are created in that process you have your Tech file you have your PDF file and you have log files and a bunch of other files and really the only ones that you are going to need are the tech file which is you know your source code and then your PDF your output so just those two files so if you click launch the clean tool it will automatically delete all of those like helper files and make your just your folder structure and navigation so much easier to to deal with if we go to quick build you want to make sure that you've selected PDF latex view PDFs if your intention is to create PDF files under editor you can change some of these options if you like I normally don't have my font size this large but for the purposes of the video I want you to be able to see what I'm typing more clearly so I increased that I usually have it about 16. word wrapping I I recommend that you do keep that on and completion if you like that that's if you start to type a command it's going to suggest what it thinks that you're trying to type so you can just hit enter and then show line numbers is also really helpful because when you get error messages sometimes you can look at the line number and go right to that line number and try and figure out what the error is back up your document every 10 minutes you can turn that on if you like I I don't have any particular reason why I did not have it turned on let's see everything else looks pretty good shortcuts these are just keyboard shortcuts that that you probably don't want to worry about when you're first starting out but you might want to take a look at those as you get more comfortable with this okay so let's create our first document now you do have to actually create a document so I'm going to click on new here or you can use the menu and click on file new now this new document here it says Untitled we haven't saved it yet so I haven't actually created anything and even if I type some code and try and compile it I'm going to get an error message you have to save the file first name it and save it first before you're going to be able to compile it so don't skip that step because that can be frustrating you're wondering why this is not working you actually have to save the die it's not enough just to say I'm here I'm creating a new file you actually have to save it so file let's save this and I'm just going to call this tutorial one tutorial 01 now one thing I want to stress here is that you should never use spaces in your file names for your Tech files don't use spaces if you don't like your words all running together you can do something like a hyphen hyphens are fine if you want to do that you can do an underscore if you want to do that like if you have want to put multiple words in your title I usually do an underscore when I name my files but do not use a space so I'll just keep the underscore in here and the file extension is going to be dot Tech but that's you know that's going to happen by default so I don't really have to type the dot Tech when I am naming that so I'm going to just open up that folder and show you what I've just created okay here we go so this is my file that I just created tutorial01.tech and you can see that there aren't any other files in this folder so let's go ahead and recreate just the basic code that we had when we were using overleaf so backslash document class and I'm going to fill that in I think we had 11 points it's an article and then backslash begin documents and we have our end document and then we said hello this is my first latex document now to compile this we see that we don't have a recompile button like we did in overleaf I'm going to click on this Arrow to compile the code and it used to be I just clicked on this arrow and it would run both of these I'm not sure what my issue is at the moment but it's it's making me click both arrows like over here to compile and then here to view the PDF this isn't generally the way I do it the way I generally do it is to just hit F1 on the keyboard so as I'm working throughout these tutorials if you wonder like how how is it seem to be refreshing so quickly you didn't see me come up here and press on the Arrow it's because I just hit F1 on my keyboard that's a really fast way to do it oh wait I think I do know why that's not working quite right so the PDF latex will compile the code and then view PDF is going to is going to refresh the PDF so we can view it over here but if I want to do both of those things at once what I actually want to select here is quick build so that when I click on this Arrow it's going to do whatever I have saved in quick build and if we go back to our preferences quick build is right here I have PDF latex view PDF in my quick build so when I choose quick build it's going to do both of those two things and then while we're in here I'm going to go ahead and uncheck this backup every 10 minutes and the reason I'm going to uncheck that is because if I leave that on then not only am I going to be creating a tech file and a PDF but I'm also going to be creating a back Bak file and I just don't want to have all of that stuff in my folders it's absolutely not a big deal if you want to leave it on there and have backup files in your folders that is perfectly fine so here's what we have so far hello this is my first latex document and we can fit this to the width so it's a little easier to see we can you know zoom in or outfit it to a full page and so I'm going to continue to work in tech maker but if you are more comfortable working in overleaf you don't want to hassle with trying to get the software installed and up and running that is perfectly okay you can still type the same code that I'm typing and your output should look exactly the same I'm gonna go back to fit width so we have we can see this a little bit better it's not too small on your screen and let's move on so I have you know one line typed here next I want to type a little bit of math so I'm going to say a rectangle it has side lengths of X Plus 1 and X plus three so let me hit return and type that out and because this is in a sentence I know that it would look better if I used parentheses around the X Plus 1 and the X plus 3 so let me do that and let's compile and see how that looks so again you can use the arrows up here I'm just going to hit F1 on my keyboard and this is what we have now this might look okay to you it doesn't look that great to me there's a couple things I want to point out the first thing you might notice if you're used to working with a word processor is that a rectangle has side lengths of X Plus 1 and X plus 3 is not on a new line it just continued at the end of the first line and when we look at the code that's not what we might expect to happen because in in a word processor when you hit return right here then the output actually shows that you hit return right there and that's not going to happen here with our code our code is only going to create a line break if we tell it to create a line break and there are two ways to create line breaks and the same thing is true in a word processor there's two ways to create line breaks you can do a soft return you can do a hard return so a hard return is going to start a new paragraph if I want a hard return what I want to do is to just insert a blank line in between hello this is my first latex document and then the next sentence so if I leave a blank line in between those two sentences then the compiler knows to insert a hard return so let's compile recompile that and now we can see that we did in fact get a hard return so a rectangle has side lengths blah blah that is the second paragraph now that's a hard return if you want a soft return so let me go back here if you want a soft return then at the end of your line where you want the line break you type two backslashes okay so we will compile that and now we can see that we got a a new line for a rectangle has side lengths of however this looks a little bit strange right it looks different than what we saw before because a rectangle is starting further off to the left than hello this is a soft return so it didn't create a new paragraph and therefore the line is not indented so by default I haven't typed much code granted but by default here new paragraphs are going to be indented so the hello is indented a rectangle is not indented because it was just a soft return it's not a new paragraph now you can do something like this but it's it's not preferred what's going to happen if I do this let me turn on my messages log oh it actually didn't mind it okay I was expecting it to not like the combination of the soft and hard return there but it seems to be okay I like having this space in my code because it makes it easier you know for me to go back and find things versus this where everything just kind of runs together but you can decide which one you like better softer turn or a hard return there and you there are also ways that you can turn off the indenting because remember whether you do a softer turn or hard return is going to affect the way that your paragraphs are indented or your lines are indented so let's go ahead and do a hard return right these do seem like they're probably separate paragraphs and we'll update that I'm just using F1 to recompile and there's still an issue here something that's okay but it's not great and that is that the x that I typed doesn't look like math it just looks like the letter X as if I had typed a word with an X in it so when we type variables in math typically we want them to be italicized so they look like variables and that's going to happen automatically as long as we tell the compiler that hey this is math it's not text so we're going to use something called Math mode to enter Math mode you type a dollar sign to start Math mode and then another dollar sign to end Math mode and you can see that the color changed when I did that when I typed that first dollar sign everything after the dollar sign turned green so Math mode things are going to be green and then when you end Math mode everything that's outside of math mode is going to go back to its normal color so the word and is black that's text mode okay so Math mode text mode and I want this X plus 3 to be in math mode as well so I'm going to type dollar signs around the X plus 3 and let's recompile and we can see the difference visually now that X is italicized the spacing is a little nicer because it knows that it's math and it needs to space things in a certain way to make everything look uniform all right I'm going to add some more to this I'm going to add another sentence so we have a rectangle has side lengths of X Plus 1 and X plus three I'm going to say the equation a of x equals x squared plus 4X Plus 3. gives the area of the rectangle so I want you to just anticipate what's going to happen when I compile what do you think this is going to look like so I'm going to hit F1 to compile and I have encountered my first error okay I can see that below here these things are popping up in red something has gone wrong something's wrong on line six and line seven and it's kind of giving me an indication it says missing dollar sign inserted right it didn't actually insert it for me but that is a a clue for me of what went wrong oh I probably forgot a dollar sign somewhere so a of x equals x squared now the letter A the letter X like those could be text so that's not what caused the issue I think it was this symbol right here this carrot symbol is only going to work in math mode it's not going to work as text so I'm going to put my equation in math mode by typing dollar signs around it and now we should be okay so again we see that the paragraphs are indented now that now that the paragraph is long enough to wrap down to another line we can see the way the indenting is working here so things are not great right this is okay it's in math mode the math actually looks good except for the fact that a of x equals is on one line and then the rest of the equation is on another line so that's not great if you want to make sure that to um keep your equation on a line you can put curly brackets around it and now when I recompile it's going to protect that for me so a of x equals x squared plus 4X plus 3 all got pushed down to the next line okay so looking pretty good still like if I I mean I'm still not that happy with it I think there should be some space between the paragraphs right but you know we're just talking about the basics right now so the next thing I want to tell you about is the difference between there's kind of two different math modes there's displayed Math mode and then there's inline Math mode if you use displayed Math mode whatever is in your displayed Math mode is going to be on its own line so we often see this in math textbooks where equations are put on their own line and to enter displayed Math mode all you have to do is type two dollar signs to begin displayed Math mode and then two dollar signs to end displayed math modes let's recompile and now we see that the the math in displayed Math mode got centered on its own line and there's some nice spacing there to separate it from the text and then the text just continues after that it's this is still happening like within a paragraph versus inline Math mode like the X Plus 1 and the X plus three those just appear in line with the text Okay so we've covered some basic information let's go ahead and I'm going to close this and then just show you now what I have in my folder where I created my tech file okay so if we navigate back to the folder where I created and saved my tech file now I see there are actually two files there there's the tech file that ends with DOT Tex and then there's the PDF file so the tech file is our code and here we can just see what that what just the text the code itself looks like there's a little preview of that and then here is the PDF so that's not all fitting on the screen let me make that a little smaller and there we go okay so that is the PDF document that I created check the description below for links to the files I created in this video as well as links to the software that I recommend using in the next tutorial we'll look at how to typeset commonly used mathematical notation using latex hello I'm Michelle crummel and in this video I'm going to show you how to type commonly used mathematical notation in latex I'm working with the software program called tech maker but you can use any text editor that you like if you watched my previous video creating a latex document I showed you how you can use overleaf so that you don't have to download and install any software overleaf runs right in your web browser so there is a link in the description below that you can click on if you want to create an overleaf account and work purely online if you want your screen to match mine exactly you're going to want to download tech maker make sure that you do have mictec or Mac Tech installed before you install techmaker so I am in techmaker right now and I'm going to create a new file so just click on that icon here and it looks like I have you know a new file ready to go it looks like it might be called Untitled one but actually we haven't saved this we haven't really created it yet so before we start typing any code this is very important we need to save this file and name it otherwise guys you could type all kinds of code in here and when you go to compile you're just going to get an error and it's not going to be able to do anything we have to save this file and name it first before we're going to be able to compile it so let's do that file will save as and you can save it anywhere you like on your computer I'm just going to call this one tutorial two and I mentioned in my last video you don't want spaces in your file names your text files should not have any spaces in the file name so use an underscore or a hyphen or simply just you know run all of the words together and that will automatically assign an extension of dot t e x to that file so here's my tutorial O2 Tech file and now I can start typing my code so we always start with backslash document class and tech maker is making this suggestion for me so I can hit enter as a shortcut here and have it fill in some of that for me now the square brackets are where we would Place optional arguments here it's unnecessary if I didn't want that I could delete that and just have the curly brackets we do need the curly brackets here the clasp that we are using today is article so that's fine I can do that if I do want to include some optional arguments one of the more common ones would be to declare the font size so your choices are 10.11 point or 12 point I usually like to go with 11 point and then we're always going to have backslash begin document and backslash end document that pair of commands there so I'm not going to compile yet I don't actually have any content we have to start typing something first we're working on mathematical notation today so I'm just going to go through lots of different categories and then show you how to type various Expressions that you might need so let's start with superscripts so I'm just going to type the word superscripts and now that I have something here when I build we should be able to see that and I'm just going to set this to oops not that um let me just set the width here so that we're seeing the whole page that that looks about good right there okay so superscripts and we want to actually type something with the superscript in it so that was just in text mode and I'm going to type 2x to the power 3. so 2x cubed 2x for the exponent we use that carrot symbol from the keyboard so there's 2x cubed however if I compile this right now I'm going to get an error because this carrot symbol needs to be in math mode not in text mode so to put this in math mode remember we wrap it in dollar signs and now I can build so I'm building by hitting this Arrow up here which is quick building for me so it's doing two things it's compiling the code and producing the PDF that we see over here on the right but I usually prefer to use my keyboard shortcut which is just F1 so if you don't see me come up here and press this button in the video then it's because I just hit F1 on my keyboard if I hit F1 then it will compile so I can tell that the 2x cubed is in math mode because it turned green that's one of the nice features about tech maker that I like it does color code different parts of the code so it's easy to keep track of what you're doing and if we look at a result we've got I mean it's okay superscripts 2x cubed but I would like to separate the 2x cubed from the text and put it on its own line so we're going to do that by using displayed Math mode I'm going to use two dollar symbols at the beginning and the end of that and it puts the math mode on its own line centered on the line like so so next we're going to look at 2x to the power 34. again I'll use this displayed Math mode 2x to the power 34. so think about what that's going to look like the fact that I used double dollar signs means it's going to be placed on a separate line and it'll be centered on that line so I don't have to worry about putting in any kind of manual line break like we practiced in the first tutorial the double dollar signs will automatically start a new line for me so that's fine but if I want 2x to the power 34 what I'm expecting to see is x in the base and 34 in the exponent and if we build this and let me zoom in a little bit more so it's easier for you to see if we build this you can see that the 4 didn't go up into the exponent so by default when you use this Keras symbol only the single digit that comes next is going to be placed in the exponent if you want more than that in the exponent then you have to use curly brackets and you can use the curly brackets even if you only have a single digit but I normally don't bother if it's just a single digit I don't bother putting the curly brackets but now when we compile we can see that the 34 has moved up into the exponent which is what I had intended so another example let's do 2 times x to the power 3x Plus 4. 2 times x to the power 3x plus 4. so if I want 3x plus 4 all to be in the exponent then I need to put curly brackets around that and that looks like I expected it to look and then let's do 2x to the power 3x to the fourth plus 5. so we're going to have an exponent inside of an exponent so 2x to the power curly brackets now generally when I'm doing this I find it quicker and easier if when I type the first curly bracket I go ahead and type the end one as well so that way I don't forget it at the end especially if I'm going to be using multiple curly brackets just makes it less likely that I'm going to forget to close one of my opening brackets and then sometimes I'll even just go ahead and go and do the same thing with my dollar signs and then I can just back up and enter what I need to inside of the brackets so we're going to put 3x to the fourth plus 5. 3x to the power 4 plus 5. so this exponent here I didn't bother to use the curly brackets I could have wrapped the four and curly brackets but since it's just one single digit in the exponent it's unnecessary okay so now we have 3x to the power 4 plus 5 all in the exponent here and now let's move on to subscripts subscripts work in a similar way so let's start with x sub 1 x sub 1 to get the subscript you use the underscore is that what it's called underscore and then whatever you want in your Sub sub script and again it will only put the next single digit into the subscript unless you use curly brackets so here we've got x sub 1 and if I want x sub 12 for example x sub 12 this is not going to work it's still going to just do x sub 1 and then put a 2 right next to that so that's not what we want here we want 12 to be in the subscript so we put curly brackets around the 12. and now we've got 12 in our subscript you can have subscripts inside of subscripts as well so let's just do x sub 1 sub 2. and I think this might cause an error if we just type it like this yes it did cause an error so we have to use curly brackets here so the compiler knows what it is we're trying to do because it's different if you want x sub and then 1 sub 2 versus x sub 1 sub 2. so you have to decide how you're going to put your curly brackets where you're going to put your curly brackets generally I would say x sub and then everything you want in the subscript should go in curly brackets like this now look inside your curly brackets do we need more brackets well since there's just a single digit after the 2 right here is just a single digit after this subscript we should be okay with this and let's see how that looks so that's x sub 1 sub 2 and we could even go further with that if we wanted to do x sub 1 sub 2 Sub 3 like so but we're going to have to figure out our brackets so x sub and then use curly brackets around your entire subscript now within that Curly brackets we have we need more brackets because we've got two subscripts in there so we want to be clear one sub and then we'll put curly brackets around the two sub three so I'm like nesting my subscripts here let's see how that looks so one sub two sub three and you could continue you know to to do this as many times as you need to so let's do one more example let's say we have a sequence and I'm not going to to use the curly bracket notation and let me just list some values so we might have a sub 0 comma a sub 1 comma a sub 2 comma and then I want dot dot I'm not going to type the dot dot dot there is a latex command for that backslash L dots is going to do three dots the L is for lower they're going to be aligned at the bottom like lower aligned versus C Dots would be aligned in the center but ldots will work for me fine right here and then we'll say a sub 100. now with 100 again I'm not going to type it like this or it's only going to be a sub 1 and then two zeros next to it that's not what we want we want 100 to be in the subscript so we need curly brackets there there we go so a Sub 0 a sub 1 a sub 2 dot dot a sub 100. next let's look at some Greek letters we often use Greek letters in math notation and one of the most popular Greek letters that we use is the Greek letter Pi if you want to type Pi it's just backslash pi now that is the lowercase Pi if I wanted the capital Greek letter Pi backslash capital p i like so and that's the capital Pi if we want other Greek letters we can just type the name if you use a capital letter it's going to give you a a capital Greek letter if you use lowercase it's going to give you the lower case Greek letter for example we can do backslash Alpha and that's going to give us the lowercase Greek letter Alpha so you get the idea there and we might do something like a equals pi r squared right area of a circle so backslash Pi now it's important here that I enter a space and then do my r squared otherwise if I don't have the space there let me take out the space and show you that because it's all running together the compiler sees the command as backslash PIR th backslash PIR is not a valid latex command so it's going to get confused and we're going to get an error I'm pretty sure we're going to get an error let's try yep we're going to get an error and you can kind of see it's giving me a hint here of what what the error is it's something like that PIR see how to put a space between your command and the next thing and now it should be fine there we go area equals pi r squared right here okay so those are Greek letters there's you can do many other Greek letters I'm just showing you an example of a few let's talk about some trig functions if we want to enter for example y equals sine of x y equals you're going to use a first let me do it the wrong way because beginners might be beginner students often will just type this and they might not even think there's anything wrong with the way that looks right I mean you can read it it says y equals sign X but it is not displaying the way we would like our mathematical notation displayed the compiler because you're in math mode here thinks that the S is a variable the I is a variable the N is a variable and the x is a variable and so it's typesetting them all the same way and you can see it looks very uniform the way these letters have been typeset they're all italicized and spaced kind of the same way and they're all running together that's not how we want the sine of x to look so we put a backslash in front of our trig function sine cosine tangent secant cosecant cotangent and now when I compile you can see the difference the sin is not italicized and there's a little bit of a space between the n and the X okay so this is how it's supposed to look we can do that for our other trig functions like I said y equals cosine X tangent X is t a n backslash t a n if we want to do the reciprocal trig functions y equals unless you do cosecant is CSC secant would be s e c cotangent would be c o t and instead of X let's just do theta so Theta is one of our Greek letters we're going to do backslash and then type out Theta I want a lowercase Theta here we've got y equals cosecant Theta and you can play around with it and see you know what happens if you did a capital Theta well we would get the Greek Capital Theta but that's not what we normally use for angles we use the lowercase there we go so you don't want to forget when you're doing your trig functions sine cosine tangent secant cosecant cotangent to put the backslash in front and the space between the trig command and then the argument or the angle we can do inverse trig functions as well so let's do sine inverse of negative one y equals sine inverse so backslash sine and then for inverse that we're going to use the notation where it puts a negative 1 as a subscript so remember how we did subscripts it's the carrot I want negative 1 in the subscript so I can't just do this that's not going to work that's only going to put the negative symbol in the exponent the one will not be in the exponent if I do that so I have to use curly brackets negative 1 like so and then of X or Theta or whatever we happen to be using oh I did say sine inverse of negative 1 didn't I although that's that's a little confusing because we would have negative one in two different places but if I wanted the sine inverse of one half for example we haven't done fractions yet we're about to do fractions let's keep it simple sine inverse of 1. there we go could do that or Theta or X or whatever we need there okay so that's sine inverse now we could also use the arc sine notation instead of using that negative one superscript we can just do y equals arc sine and it again is backslash and then you tarp type arc sine Arc s i n and then your angle okay so by putting the backslash in front of the arc sign it's indicating to the compiler hey these are not variables don't typeset them like variables so it looks like it's supposed to look here okay uh let's do log functions next and we will start with just a common log y equals log X now again think about what's going to happen if I compile this right now I'm in math mode it sees the Y the L the O the G the X thinks those are all variables so it's going to look funny I mean you can understand what it's supposed to be right but I do see beginning students doing this a lot in their papers and forgetting to put the backslash in front of the log use the backslash and then you need a space between the G and whatever comes next and then it will typeset this correctly so only the variables X and Y are italicized and the rest of the equation is not so there's the our common log y equals log of x let's change the base in our log so if we want log backslash log oh that's supposed to be equal y equals backslash log if we want base 5 for example we need a subscript so remember how we did subscripts it's the underscore five and then I'm going to type a space it's not strictly necessary because if I don't use curly brackets it will only subscript this the next digit but just to be clear I like to always put a space there like that so this log oh what did I do wrong oh I'm missing a dollar sign double dollar signs okay log base 5 of X and then let's do a natural log y equals backslash Ln Space X that's going to give us a natural log next let's talk about square roots and not necessarily square roots let's just say roots in general because we can see how to do cube roots or fifth roots or seventh roots so we'll just say roots in general we'll start simple square root of 2. so do a square root we're going to hit backslash s q r and tech maker is making two suggestions for me here so we can see it's backslash sqrt and then we have an option where there's square brackets curly brackets or we have an option where it's just curly brackets if you're just doing the square root of two you don't want the square brackets you just want the curly brackets so sqrt curly bracket two curly bracket like so and that's going to give us the square root of 2. the other option is for when you want roots that are not square roots so let's do the cube root of two you're still going to type backslash sqrt so it's like you're starting the square root command even if it's not a square root but then you're choosing the one that has the square brackets followed by the curly bracket so I can hit enter here to accept that and then start typing or I could just keep typing it manually so here the square brackets are for the root if I want a cube root then I type A 3. the curly brackets are for what goes inside of that radical symbol so we want the cube root of 2 it's going to look like so cube root of 2. now this one down here is my page number it's bugging me a little bit so I'm going to go ahead and turn off the page numbers and to do that I'm going to scroll back up and I am going to after document class I'm going to type backslash page Style curly brackets empty I think that'll take care of that so let me recompile and then yep our page number is gone so I'm turning that off just so that's not in our way okay back to more Roots let's do something more a little slightly more complicated like square root of x squared plus y squared so backslash square root x squared plus y squared okay looks good and now let's get um a little more complicated and put a square root inside of a square root so the square root of 1 plus square root of x so we'll start with the outside root the square root okay the square root of now once you start putting things inside of other things it can get a little bit confusing so what I will sometimes do is just insert some Extra Spaces just so it's easy for me to tell what's inside of what because it's got a little cushion around it so this is my like my outside square root my big square root and inside of the square root I'm going to put 1 plus the square root of x so 1 plus backslash square root of x like so and compile and we've got one plus or the square root of 1 plus square root of x all right and then finally let's look at fractions so we'll do start with something really simple we'll just do the fraction twothirds so the command is backslash Frac for fractions and you can see that tech maker is is prompting me I can hit enter to accept that and this is in general what it looks like when you want to make a fraction or if I'm typing it manually if I'm typing it manually I usually still do kind of a template thing so I'll do curly brackets for the numerator and then curly brackets for the denominator and then I'll just use my cursor and go back in uh and that way I don't forget to close my bracket so you have a pair of curly brackets for the numerator and then the next pair of curly brackets for the denominator so in the numerator is 2 and in the denominator we want three so this should give me the fraction twothirds okay that looks good now I'm going to next I'm going to type this in a sentence so let's just say about and because I'm typing this in a sentence I'm not going to use double dollar signs I'm going to use single dollar signs because I want this to be inline Math mode so my fraction two thirds and I did that more quickly using my keyboard because let me do that one more time and explain backslash okay so here I just hit enter Because tech maker is going to populate that for me and notice it automatically highlighted the numerator so I type 2 and then I can hit tab on my keyboard and then type the three so it goes pretty quick once you get the hang of it like that rather than just typing it manually so about twothirds of the glass is full and there's that sentence so the twothirds it's it's smaller obviously in this sentence than the twothirds up here when you're in inline Math mode it's going to resize to to fit your sentence right you don't want this huge twothirds but sometimes like if you're writing a homework problem quiz it worksheet something like that sometimes your fraction is too small in the sentence here and you do want to make it larger so easy way to do that is instead of backslash Frack use backslash defrac The D is going to put it in displayed Math mode defrac so now when I compile it it's going to be oh it didn't like that oh I may need a package in order to use that okay let me try this let me try this a different way because I haven't talked about packages yet but packages we will be using packages soon another way to get into displayed Math mode is to type backslash display Style let's try that there we go so now it made the twothirds bigger same size as it made it up here when you use double dollar signs you're all you're automatically in displayed Math mode and so everything is large like this if you just do the slash Frac in inline math mode it's going to be small so this looks kind of silly the twothirds is is really big compared to the rest of the sentence I don't like that so I'm gonna well I'll leave it in here just for tutorial purposes let's maybe copy that one more time and take it out take out the display Style so you can see a comparison now because I'm not using double dollar signs it's not automatically creating a new line so here's where we have to decide how we're going to break that line do we want to do a double backslash like that which will break the line you can see I I'm sort of running into an issue here because the lines are not far enough apart I can manually add some vertical spacing using square brackets and then inside the square brackets tell how much space I want so six and then you can use any unit of measurement here you can use centimeters six centimeters would obviously be way too big I usually use PT Point like Point size so give me six points of space at the end of this sentence and then when we compile you see it just it inserted some vertical space there for me your other option if you don't want to break the line that way would be to leave an empty line in between and that would also create a line break we talked about this in the last tutorial though notice it looks odd because this new line right here is starting a new paragraph and it's indented versus this line up here did not this this line up here is not indented so that's why it looks a bit funny there so I usually and it's just it just depends on what you need but I usually do something like this when I want line breaks and generally I if I want displayed um fractions display style fractions rather than typing out display style I just do backslash defrag but I did get an error when I tried that a moment ago let's try it again not that I'm expecting anything different twothirds and I just have to figure out which package I need to use in order to get that to work properly so I'm going to go back up to the top and really quickly just figure this out use package and let's go with um AMS math I'm gonna I'm gonna use a couple packages here because I don't want to do them one at a time and try and figure this out AMS math AMS Sim and AMS fonts okay one of those worked because now it did compile correctly and oh that was unnecessary because I had double dollar signs so let me try that one more time because the double dollar signs automatically put it in displayed Math mode so it's kind of redundant that I used defrak inside of Double dollar signs it's not necessary to do that let's just try this again and verify that we are getting a large fraction here when we use defrac yep and I needed a line break there Okay so uh you can accomplish the same thing this way and this way let's try a more complicated fraction so I'm going to do a line break here again um now go ahead and put it in double dollar signs so this isn't technically necessary let's do this uh let's do a square root inside of our fraction so let's do the square root of X Plus 1 over the square root of X Plus 2. so we'll start with fraction fraction like so in the numerator we want the square root of x plus one so backslash square root like so X plus one that's my numerator then here is my denominator so we're going to do square root X Plus 2. and then close our dollar signs and there we go so I did use you know tech maker to my advantage there I wasn't typing it all out manually if I wanted let's try that one more time if I were typing it out manually backslash Frac your curly bracket then slash square root you have to open another curly bracket so at this time you have to kind of mentally keep track that you have two curly brackets open and eventually you need to close the two curly brackets so X plus one close it for the square root close it for the numerator then we open curly brackets for the denominator backslash square root open curly bracket for the square root X plus two close the square root close the denominator and then close Math mode there we go now sometimes we work with complex fractions where you have a fraction inside of a fraction so let's try that so outside fraction and Let's do let's do one over so just one in the numerator that's it and then in the denominator let's do one plus one over X so 1 plus now I need a fraction so backslash frac 1 over X like so 1 over 1 plus 1 over X and you can of course have fractions inside of fractions inside of fractions you just want to pay attention to your brackets make sure that they're paired and like I showed you a moment ago sometimes it is helpful to space things out so my um denominator here had a bunch of stuff in it you might find it's helpful to kind of leave lots of space in the curly brackets for the denominator so that if you do get a compiling error you can go back and see that's probably where it would have occurred because that you've got you know complicated things inside of other things can be helpful as well that wraps up this tutorial on common math notation I do have another tutorial on calculus notation which will be much more involved there's lots of notation that we use in calculus that we need to use latex 4 because you can't type a lot of the calculus notation using your keyboard but in the next tutorial before we do that the next tutorial we're going to look at brackets tables and arrays so brackets include things like parentheses and square brackets and curly brackets and absolute value symbols we're going to see how to make those things expand in size because if you just type parentheses let me show you real quick right here around this it's going to look really bad well actually it doesn't look too terrible but the 1 over X here is longer vertically than the parentheses so we're going to see how you can fix that make your parentheses taller so that they do wrap around the content inside of the parentheses and then we will look at tables we'll do simple table we'll do a slightly more complex table and then we'll look at some arrays hello I'm Michelle cremolin in this video we are going to look at how to type set brackets tables and arrays using latex I'm working in tech maker but you can work in any text editor that you like or you can work online in overleaf and there are links in the description below to register for an overleaf account if you want to just work in your web browser so we have lots of different type of bracketing symbols when we use math notation but probably the most popular would be parentheses square brackets and curly brackets so let's start there if you have a short object then you don't need to do anything special for parentheses let's say for example the distributive property states that a times and notice I did use a dollar symbol to enter Math mode a times B plus c equals a times B plus a times C for all a b c i can get fancy here with my notation if I want I can use the element symbol or the backslash in and then if I want to say the set of real numbers then there's a special way to type that symbol as well backslash math BB curly brackets and then for the set of all real numbers I need a capital R now I think I'm going to have to load a special package to make this work let's see if I get a compiling error I do okay so let's come back up here in my Preamble everything before begin document it's called The Preamble and I'm going to use a package let's see AMS fonts AMS Sim AMS math I always load those three packages right off the bat so to be honest with you I don't even remember which one of the three I need it's only one of those three that I need to make this mathbv command work I'm just so in the habit of using all three packages all the time so don't remember which one does what that worked and we can see the result here the distributive property States and so here we have this in math mode a times B plus C the parentheses look good they are sized appropriately for what's inside equals a B plus AC for all a b and c in the set of real numbers now square brackets work in a similar way you can just type them using your keyboard so let's use a line break here there's a couple ways to do a line break I like to do the double backslash and then insert a little bit of extra space there are lots of other ways to get spacing between your lines things that you can do in your Preamble so that you don't have to do this every single time you can change the line spacing throughout your whole document but that's a little more complicated and we're trying to keep things really simple for right now so I'm just going to to do that and next we'll say the equivalence class of a I'm putting a in math mode is and then we'll use square brackets around the a there and I will typeset that so I'm just using F1 on my keyboard because that's a keyboard shortcut for tech maker to compile otherwise I could also come up here and click this Arrow okay so the equivalence class of a is a and you can see the square brackets appear as expected a is just a normal sized element so the brackets don't need to be larger smaller they're sized appropriately okay this does look a little weird though because the first sentence is indented and the second one is not this double backslash creates a soft return it doesn't start a new paragraph and so this um sentence that I have here is not considered a new paragraph and it is not indented I'm not in the habit of worrying about that because I almost always turn off indenting in my documents so I'm going to come back up into the Preamble it's the area before begin document I'm going to type slash pair indent is going to change the the rules for paragraph indenting I'm going to say 0px so indent my paragraphs by zero pixels in other words don't indent my paragraphs and then I'll recompile and you can see that none of my lines are indented that's just my preference the way that I like to work you certainly don't have to do that now let's take a look at curly brackets so parentheses easy you just type them on your keyboard square brackets easy just type them on your keyboard curly brackets not quite so easy say the sets a is defined to be and then we'll just call a the set of the numbers one two three so curly bracket one two one two three curly bracket close Math mode and then compile oh what did I do wrong here forgot my square brackets in front let's try that again okay now I didn't get the result I expected because I typed curly brackets around this set but the curly brackets didn't show up on my PDF and that's because the curly bracket is a symbol that is reserved for part of the coding in latex that is a special symbol that tells the compiler something and so you can't just type a curly bracket and get it to show up you have to do something different if you want the curly bracket to show up you type a backslash in front of it and that's true for this opening curly bracket and also the closing curly bracket you put a backslash in front of it and now when we compile the symbols will show in the PDF so the compiler knows that this is not um the coding curly bracket is actually one that needs to be displayed now another symbol that is reserved for special syntax in latex is the dollar symbol and we've seen that many times so far the dollar sign is used to indicate that we're starting Math mode but sometimes you might want to display a dollar sign right if we're talking about money so for example the movie tickets costs 11 and 50 cents okay so right away I know that I have a problem here because this has turned green this has turned green so the compiler thinks that I'm I've opened Math mode and I have not closed Math mode well I can close it here and that's a little better we're back to normal down here but now clearly the dollar sign this dollar sign is not going to be displayed because this is just telling me that I'm in math mode so let's compile that and I don't see the dollar sign so if you want to see a dollar sign well first of all if we type in extra one inside Math mode we're going to have issues you that confuses the compiler so if you want to display the dollar sign you just type A backslash in front of it same with the curly bracket and now when we compile it knows oh this dollar sign is meant to be displayed and so it will print it on our PDF and we've got 11.50 now sometimes you want to put brackets whether they're parentheses or square brackets or curly brackets or absolute value symbols or some other symbol's greatest integer symbols that type of thing sometimes you want to put those around notation that is much bigger taller so let me show you what I mean by that and here I'll just do I'm just going to do a hard return here and let's type this fraction I'm going to do double dollar signs to get give me displayed Math mode so it's going to put this math on its own line Center it on the page and I'm going to type a fraction so my fraction is going to be 1 over x squared minus 1. here's my fraction 1 over x squared minus 1. let's say I want to put parentheses around that I don't know why maybe there's a two in front of it yeah let's do that okay that looks pretty bad the parentheses are not tall enough they're not surrounding the information inside of the parentheses now if I wasn't in displayed Math mode it would be a little better so instead of double dollar signs let me go back to single dollar signs and show you it's a little bit better it's still not perfect the parentheses still don't seem to be tall enough to cover what's inside of them so it's not just because I'm in displayed Math mode that that's an issue but it's more pronounced when you're in displayed Math mode how can we fix that well we can make the parentheses automatically change in size to fit whatever's inside of them by typing go to your your parentheses where they start so your left parenthesis I think is the singular of parentheses go to your left parenthesis and type backslash left in front of it and then go to the right parenthesis and type backslash right in front of that one and now let's compile that and you can see that they've automatically expanded to an appropriate size that looks much better so this works with lots of different bracketing symbols I'm just going to copy this a couple of times and we're going to change the parentheses to square brackets square bracket square brackets and curly bracket now remember to get the curly bracket to show up you have to put a backslash in front of it and compile and there we go so we've automatically expanded the size of our brackets in these three examples if you're working with vectors you might even want an angular bracket so let me delete I'm just going to space this out a bit um if we want parentheses we would type parentheses like this let's go back to parentheses okay that's normal parentheses but if you want an angular bracket instead of parentheses you're going to type backslash L angle so left angle and then over here instead of parentheses you're going to type slash R angle slash R angle for right angle and then when we compile that you get your angular brackets you might also need to do this for an absolute value expression so instead of this left angular bracket we can just use on the keyboard type the I think it's called a pipe but it's right above the return key or the enter key to get your absolute value symbol to expand so backslash left backslash right is going to expand the size of those brackets now there might be a case where you just need a bracket to show up on one side not the other an example of this could be in calculus if we have something like d y d x at x equals one we could use a notation so let me start with a fraction for the dydx to backslash frac d y d x and now I want dydx at x equals one or when x equals one so normally the way we write that is we would do a vertical bar and then a subscript so here's a subscript of x equals one now if I just type x equals one only the x is going to be in the subscript so I need to put curly brackets around my x equals 1 if I want that all in the subscript let's see how that looks so I'm almost there but that vertical bar that pipe symbol it's not tall enough I want it to expand so let's try that trick where we type A backslash left or backslash right in front of it let's do slash right to get it to be larger now when I try and compile this I'm going to get an error because when you use a slash write command you have to have a matching slash left and vice versa so when you do slash left you need a slash right but I don't want a symbol to show up on the left we can get around that though I'm going to go ahead and type the slash left and then in order to tell it to not display a symbol I'm just going to use a period just type a period on your keyboard and it won't display that so now the notation looks proper so hopefully that covers all of the the types of bracketing symbols that you need and you can certainly have bracket like brackets around something that's inside of something else so you could have multiple pairs of brackets all in sort of one expression for example let's let's kind of build off of well let's do a fraction we'll do a complex fraction so fraction we'll do one over one plus X to start with and let's say we want um to put parentheses around that so we'll do slash left and then the left parenthesis slash right and the right parenthesis compile that so that looks good and I'm going to put a One Plus in front of this okay so there we are now now I want to make this all the denominator of another fraction so it'll be one over one plus one over one plus X okay so this whole thing that I've typed right here I want to be in the denominator of a fraction so I'm going to put curly brackets around it that's the curly brackets for my denominator in front of that I'll do another pair of curly brackets for the numerator and the numerator is just going to be one and in front of that I need my fraction command let's compile that so there we go and notice that the parentheses are adjusting in size to fit like the container what's inside now let's say I want to put big parentheses around all of that so in front I'll do a slash left oh I'm in the wrong place sorry go to the very front there we are slash left parentheses and then go to the very end here slash right parentheses compile now you can see those parentheses are really big so they are automatically going to adjust to the content inside of the parentheses okay let's move on and talk about tables I'll just give myself some space here and we will look at tables we'll start with a very simple table and then we'll add some more components to it so first of all to start my table it's backslash begin curly brackets tabular actually I'm gonna yeah hit enter and let it kind of finish that out for me so with the begin tabular you'll have an end tabular and notice that we have an extra pair of curly brackets after begin tabular so here you have to establish like how many columns you want in your table let's say we're going to make a table with X values of one two three four five so we need six columns in our table six columns in our table I can type c c c c c I typed a c six times each one of those C's represents a column so this is going to be a table with six columns now the reason I typed C was not C doesn't stand for column C stands for centered because your the text or the whatever it is you're putting in the cell of your table it can be Center aligned left aligned or right aligned so right like normally I would say probably your mathematical tables your values are going to be centered in the table cell so I normally use seeds if I wanted items in my cells to be left aligned I could use else that would give me a table with six columns if I wanted the content to be right aligned I would use ours you can also do any kind of combination you identify for each column if you want the content to be aligned left Center or right let's go back to Center aligned and then we have to type some content for our table so I'm going to type this is what I want in my table x one two three four five so this is not going to work right now if I compile oh it actually did give me something but it's not a table this is just one this is all in one column right now all in one column the way that you separate items into columns is with the ampersand so now if I compile X is in the First Column and then right now one two three four five is in the second column so we want to go through here and put an ampersand in between like so okay now we have a table with six columns which is what I wanted I guess it would be easier to see you just kind of have to trust me right now how many columns I have it would be easier to see if we had you know lines separating so I should have done that let me go back and show you how to do that if you want vertical lines like in between your table columns then you come back up here and you use that pipe symbol on your keyboard it's above the return key or the enter key and put that in between each one of these like so let's recompile and we get those vertical bars so now I can see how many columns I had so let me take out my ampersands let me go back to what it was one two three four like that and you can see that it was all smushed into one cell which is not what we wanted so you need to use the ampersands to separate the the content into your different columns now when you get to the end of your first row you hit two backslashes to indicate that that is the end of the row okay so here we are then you can do your next line so the next line let's say we want f of x and and then whatever our f of x values are we'll just do 11 . 10 11 12. 13. 14 and we'll end that line okay that's all right now the X and the f of x they don't look like math they're in text mode they're not in math mode so let's fix that put dollar symbols dollar signs around the X and around the f of x all right that looks much better now we're missing the lines that separate our rows right so in order to get a horizontal line we're going to type backslash H line I will compile that and it gives me a horizontal line so I did that at the end of the first row and I'm going to do that again at the end of the second row now I need to do that above my first row okay and there is a basic table sometimes I like to after the First Column put a double pipe here to separate the label x f of x from the values in the table like so so we can do that so that is a very basic table right there let me copy that and let's say that instead of 10 for f of 1 we had a fraction here so we'll do we'll do math mode slash Frac and we'll just use the fraction one half oh let's let's put let's separate these tables a little better so I'm going to insert some vertical space here slash V Space and then I can decide how much vertical space I'm going to put one centimeter of space right there to separate those tables and I'm going to turn off my page numbering as well so I'm going to go all the way back up to the top slash page Style empty compile and that turned off my page numbers okay so there are my tables let me scroll back down here so I'm working with that's the copy of my first table right here we changed F of one to equal onehalf and you can see that the one half because it is taller than these other values is sort of touching the the top and the bottom of the row border we want to give this a little more space and so let me show you how you can add a little more to this table instead of starting with begin tabular we're actually going to start with Slash begin table now if I hit enter it's going to put my end table right here I need the end table to go after the end tabular it's like a sandwich right we've got begin table begin tabular and then at the end we have end tabular end table okay so I mean that hasn't changed anything yet let me recompile we're still in good shape actually I lost my second table I think that begin table requires a package hang on let me do full page I wasn't expecting that to have oh okay here's the second table up here yes so this is the frustrating thing about working with tables in a word processor when you enter a table you're very specific about where you want that table to appear it's wherever you type it wherever you enter it that's where it's going to be displayed right in a word processor not so here here when you enter a table the compiler is going to decide where it thinks that table will fit best on your page so you can see what happened to us here and the second table is the one that had the fraction one half for f of one so that's this table at the top here it it got moved up to the top of the page that's not where I want it I want it down here at the bottom of the page and normally you're particular about where you want your table to go if you're creating a a long paper you might not matter so much whether it's you know on the page before or on the next page or at the top of the page or at the bottom of the page like you might be fine with giving the compiler the flexibility to decide where it thinks the table will fit best there is a way that you can tell it no no no I want it to appear right here in the code where I've entered it and all we need to do for that is square brackets and a capital H so let me recompile and I think I need the flow package for this let me go back up to the top backslash use package float yes I did we'll talk about packages more in another tutorial but for certain commands in latex you need to load a package before the command is going to work so in order to use this right here we need to load the float package all right so now we're good to go let me make this larger again there's our second table and we were talking about the spacing issue I want to add more space in there so in between begin table and begin tabular I'm going to type backslash def that's going to define something new and then backslash array stretch and then in curly brackets you're going to type a number and the number that you type is going to determine how much extra spacing you have I usually go with 1.2 so let's compile that and see how that looks so just added a little bit of space right you can make that bigger make like sometimes I'll go up to 1.8 go with 2 and see what happens okay so if you go with two then you get that's too much space like now it's starting to look a little bit weird maybe we'll we'll split the difference we'll go like 1.5 all right that looks pretty good it's not perfect like there's more space at the top than the bottom so you can play around with that if you don't like exactly how it looks but that's an easy way to get some extra padding if you will in your table cells the other thing we can do by starting our table with begin table in addition to the begin tabular is we can now add a caption to our table and you can add the caption above your table or you can add the caption below your table let's add it below and so after the in between the end tabular and the end table I'm going to type slash caption and then you can enter your caption so I don't know what we want to say these values represent the function f of x and we'll compile that and yeah that looks a little weird because let me go back full page the caption looks like it's being centered whereas the table is not being centered so that is a bit strange if I want my table centered then again in between begin table and Define and begin tabular I can do backslash centering and that will Center the table I normally Center my tables so I wasn't expecting that issue I'm not used to that popping up especially when I'm captioning things I'm just I like normally in my workflow I Center my tables so I'm sure there is a way to get the caption to go to the left you can force things to be flushed left if they're not automatically that way um but it's easy it's an easy fix if you just want everything settled centered and there we go now there are a lot of other things you can do to create more complex tables um I don't want to spend too much time but there are some instances where you might want um what's it called where you have like uh something that spans over two table columns I know there's a word for that I can't think of it off top of my head but you can do something oh oh merging cells I think is what it's called in like in the spreadsheet program where you can merge cells together so you can do things like that as well with tables you can also sometimes you might want to have a sentence in a table cell that sounds that sounds kind of weird but I I could think of of an instance let's just do one real quick I'm going to copy this table so here's a copy of that table which didn't fit on page one so it got pushed down to page two we'll make this a little bit bigger and um let's do something where we have just like two columns in our table and I'm gonna put text in here so we might want to set centered we might want it flush left we'll see how it goes I'm doing this off the top of my head and we'll only have two columns so it needs to look something more like this okay and we're going to say at the top f of x and then in the second column at the top we'll do F Prime of x and here we'll say x greater than zero and here we'll say function f of x is increasing so let's see what that looks like so this is a different kind of table is just doesn't have just numeric values in it it looks a little bit odd let's change the caption too so this makes a little more sense we'll say the relationship between f and F Prime okay and we could if we want to this time move the caption to the top and notice that that automatically numbered the tables I didn't point that that out either it didn't happen with this table because with this really simple table we just used begin tabular end tabular with these next two tables we started with begin table before we did the begin tabular and that gave us all these extra options and one of them is that it will number your tables as you go so I didn't type table one that was this table right here I did not type table one anywhere it just knows that that is the first table in this begin table sequence and then this next one when I began a new table now it knows oh that's table number two so it is numbering that for me which is nice okay um what I wanted to show you though was how you can deal with long sentences in your table so I'm going to copy this sentence a couple of times which isn't very realistic but let's just say like you had a lot of text to put in your table salt okay then this happens let me make this okay this looks horrible right the table got cut off because the the content inside of this one cell is so long it doesn't fit and so it ran off the page which is definitely not good we don't want that so an option if you're trying to type text like long text in a table instead of using a c here and let's go ahead and change these to L's anyway first just to show you that when I do that now in my table this became left Justified instead of centered all of this became left just Justified but what I can do with this instead this second column because I know that it has to accommodate such long text is to put a p and the P stands for paragraph So it's indicating that there's we want this cell to contain a paragraph and then in curly brackets you indicate how wide you want that paragraph to be so maybe we want it to be two centimeters you can use inches you can use other measurements that you want okay so now at least it fits on the page it still looks a little funky right but you can change this we could even go with two inches three inches you can adjust it to fit your needs and you can do that for each column so if you have multiple columns with a lot of text in it you can do that all right that's the basics of working with tables there are a lot of other ways to customize tables you can do shading you can do all sorts of things but this will get you through most of what you need to do with tables we're going to wrap up this video today by talking about equation arrays and so the easiest way I have found to create arrays is with the Align command now there is also an equation array command and by that I mean you can do backslash begin EQ n you can see right here begin equation array you can do it this way and I used to do it this way but now I have a different way that I prefer to do it so I'm going to do slap let me first of all just say put a little header here arrays and we're going to do backslash begin a line now we have two options here we've got a regular a line and then we have an align with an asterisks asterisk after it let's go with the regular one first and then I'll explain what the S drisk does okay so begin a line and we have to put some kind of content in here so let's use this to solve an equation 5X squared now notice when I type started typing this is in green and green indicates that we're in math mode but I didn't type a dollar sign when you're inside of the Align environment you are automatically in math mode so if I start typing text now see the text is still green that text is actually in math mode let me compile and show you right this this looks really wonky everything in a line is in math mode so if you actually want text you have to have some way to tell it wait wait I don't want this to be Math mode and you can do that with backslash text and then just type your text let me change the text um place your words here oops curly bracket let's compile that so now it knows that that's text and we still have a lot like a spacing issue here in math mode this hasn't come up yet but in math mode the compiler ignores spaces like after the between the five and the X here I can type as many spaces as I want they're not going to appear on the document when I compile it the 5 and the x squared are still right next to each other so in math mode spaces get ignored and that's why this space is being ignored so the p in this word is right next to the two if you need a space there's a couple things we can do in the text mode we can just type a space and that'll take care of that so that worked or in math mode if you need to force a space that will be displayed you do backslash comma so either one of those methods will work okay but that's not actually what we're trying to do here so let me take that out 5x squared we're going to solve an equation 5x squared minus 9 equals X Plus 3. so what I want to do next is subtract the X on both sides subtract the 3 on both sides and then write the result okay so I need to end this line with a double backslash and on the next line type what I want next 5x squared minus X minus 12. oh equals zero right equals zero okay so that's all right notice that I've got my equations on their own lines and the equations are being numbered so I didn't have to tell it this is line number one this is line number two it's going to number them and if I create another a line just duplicate this one and compile it it continues numbering from where it left off before which is really nice in a math paper because your equations are all numbered and then when you're talking about them in your paragraphs you can refer to them by number you can say in equation four blah blah blah so that is that is nice there what I don't like about what I'm seeing though is that the equations are not aligned at the equal sign it's much easier for the reader to follow the mathematics when you're solving an equation or simplifying things you're going step by step if you line up your equal signs that's the proper way to do it so in order to line up the equal signs you just have to put an ampersand in front of them now if you only do it on the one and not the other it doesn't know what it's supposed to be lining up so that's not going to work it's going to be funky but if you put the Align in front of both equal signs it knows to line up those equal signs and this looks proper this is what I wanted to see here and we can of course add more lines than this just do double backslash and keep going if you get to the point where there's nothing on the left side of the equal sign that's okay too we can just say Ampersand equals and it's going to start with an equal sign and line it up um so I don't know we could do 12 plus x minus 5x squared like so and everything is lined up at the equal sign there now if you don't want the line numbers to appear not just appear but if you don't want your lines numbered that's when you would use the asterisk if you do it in the begin you have to also do it in the end if they don't match you'll get a compiling error so this is going to turn off the equation numbering so when I compile the 3 4 and the five have disappeared and then if I copy this one again and compile you'll see that it picks up where the first numbered one left off so it's not that it's just hiding the line numbers it's not even numbering them so think about that carefully when you use it which way you prefer to go okay that does it for this tutorial we looked at lots of ways to use brackets and to customize the height of the brackets we looked at tables and we looked at arrays hello I'm Michelle Cromwell and in this video I'm going to show you how you can create lists in latex so we'll be looking at enumerated lists which are numbered lists and then also itemized lists which are bulleted lists and let's begin by just listing some basic school supplies so pencil calculator ruler notebook if I compile now take a minute to think about what this is going to look like so pencil calculator ruler notebook in a word processor we would see these four words each on their own line but in latex we can see that that does not happen I don't have any line breaks coded here so the words are just kind of flowing all together on one line I could insert line breaks but that's not what I want to do I'm intending to make a numbered list here and so let's start over to create a numbered list we call this an enumerator list we start with backslash begin enumerate and when you have a begin enumerate you also have to have a matching and enumerate okay so this begins this environment enumerate environment but now I have to actually uh list out all of my items so then we're going to type backslash item and enter our first item which was pencil hit enter and I don't need to do anything to indicate a line break when I type backslash item again the compiler knows that this is a new item and it belongs on a new line so slash item calculator slash item ruler slash item notebook so let's try compiling this again and now we have our enumerated list so as simple as that if we want a bulleted list then we change from enumerate to itemize so an itemized list is a bulleted list and then when we compile that we see that we have bullets instead of numbers but I'm going to go back just undo that go back to my enumerated list because I want to show you how we can then have an like a nested list so another enumerated list inside of this one so let's say under notebook we have several items that we want to keep in our notebook so I'm going to hit return and I'm going to indent you can indent just once or twice however you like it and this is just kind of to help organize the code and make it easier to find things later if we need to so I'm going to do a new enumerated list so I started with backslash begin enumerate and I need to end this enumerate and you can see how it's indented and then backslash item to list my first item so in my notebook I have notes and then we'll do backslash item homework we'll say these are the sections in my notebook slash item assessments and let's compile that and see what that looks like so we have these sub items and the compiler automatically indented for us and instead of numbering it one two three four now these are numbered a b and c and you've got the parentheses around the number so all of the the numbering is happening automatically you don't have to enter any of that manually let's do this one more time let's see how we can have like another level and under assessments we'll say that we have different kinds of assessments so I'm going to hit enter I'm going to indent again and I'm going to start over with another begin enumerate slash item to list my first item so tests quizzes journal entries and we'll compile that and you'll see how that is now numbered differently as well instead of ABC now it's one two three and if I want to add a fifth item I just have to figure out where that belongs so this was item number one two three four and the indenting really helps to stay organized because now I if I want a fifth item I can kind of see where that's going to go that's going to go right here slash item and what's another Supply that we might need we'll say highlighters and that is now number five now there are some things you can do to change the way the numbering appears if maybe you don't want one two three four maybe you want capital a capital b capital c capital D or maybe you don't want the parentheses here so let's look at a few other options I'm just going to copy my first list and let's put some space in between there with V Space we'll do one centimeter of space to separate that and now instead of the default one two three four let's say I want capital letters here in square brackets I'm going to type it the way that I want it to appear so I want it like that capital A and then a period and let's compile okay so we ran into a compiling error in order to make this work we're going to need to load a package so I'm going to go into my Preamble that's before the begin document and use package enumerate okay use package enumerate let's come back down here and try this again and now you can see that that changed that for me instead of one two three four I've got the ABCD now let's try this again I'm going to copy this here so just made a copy and maybe I don't want it to be like that maybe I want to start out like that and we can do that maybe I want a numbered list but I don't want it to start with number one so here's just kind of the default really basic list right here but maybe I don't want it to start with number one for whatever reason maybe I'm creating a worksheet and I you know on the last page I left off with number five and now I want this list to begin with number six I'm going to type backslash set counter enumi and then six and you can see that now it started with number seven so that wasn't actually what I wanted I forgot that I need to say five if I want my list to start at 6 then I need to set the counters position at five so that the next time it sees an item it will think the last item was number five and it'll make the next item it sees number six so let's compile this there we go that gave me I'm starting a list starting with number six now let's create this list again I'm going to go back up and get this first list that I made with all the different levels we'll add some vertical space here to separate things out visually okay so this list started over with number one and just make this easier for you guys to see I'm going to insert a page break here instead of this vertical space we'll do backslash page break and that way this new list is on a new page and instead of an enumerated list I'm going to change it into an itemized list again itemize and then I'm just going to copy this and replace all of these enumerates with itemize so I have a begin and an end three times because I have three different levels of my list here and we'll compile that and I just wanted to show you how this works in a bulleted list so for the first level you've got the the solid round black bullets and then for the second level you've got these dashes and then the third level you have the asterisks now sometimes you want to create a list but maybe you don't want the numbers to show so let's just copy one of these basic ones we'll take this one I'm just going to copy that let's add some vertical space here okay and let me take out the customization and we have just a really basic enumerated list one two three four let's say for whatever reason we just don't want these numbers to show while you can simply type square brackets and leave them empty don't type anything in the bracket and then compile and there's a space there where the number should be but it's hidden it's not displayed okay so that's one way around it you can still have something formatted like a list with all of your items and then you're not showing any values you can also customize really however you want this numbering to look you can do it manually now it's not ideal to number things manually it's the wonderful thing about latex is that everything does get numbered automatically so if you come back later and in between calculator and ruler you want to add pen it's going to automatically renumber things for you whereas if you had manually said one two three four now you would have to renumber everything manually after that so here if you're okay with taking that risk you know that you're not gonna you know it's not that big of a deal to you you can do some customization here let's say for example you wanted this to be an A but you didn't like you didn't like the parentheses before and after you could just do something like that it's compile and we see that it it looks like that you can um I don't know what else you might do here you can even type words there if you wanted to you could do one I don't know why you would do that but just to point out that you can really customize this and so these are right Justified so that is one thing to be aware of it looks a little weird because it's ragged on the left but if you do these customized labels they're going to be right Justified here and then your items themselves will be left left Justified over here hello I'm Michelle krummel and in this video I'm going to show you some different ways you can format your text and your document so for example we'll be looking at how to make things italicized or bold how to change the font size how to create sections and subsections and organize everything with a table of contents so let's start with just some basic text formatting you can change the appearance and the size of your text to some extent so I'm going to begin by typing a simple sentence and we'll say this will produce italicized text so it won't of course because I haven't done anything to indicate that I need the text to be italicized this right now is just producing normal text but if I want the text to be italicized let's just italicize the word italicized then I'm going to in front of the word type backslash text i t curly bracket then I begin typing whatever I want in italics and when I get to the end of the text that I want to italicized I close the curly brackets so let's compile this now and we can see that the word italicized has been italicized so it's that backslash text i t that's going to italicize your text let's try making something bold so this will produce bold text now in order to make your text bold you use backslash text the F for bold face font so we'll say bold face is it face or faced I don't know but it will be bold and let's do small caps this will produce so for small caps it's backslash text S C curly bracket so we'll say small caps and your curly brackets and we'll compile that and we'll see that we have small caps and we can also do this will produce type writer font so backslash text TT nope TT so there's three T's there it's text TT uh hype writer font text so that typewriter font you might be wondering why anyone would want to use that but it is um like mono spaced so it's good in certain situations it's also I think good for urls to make them look a little bit different than the rest of the text you can offset something like saying please visit Michelle crumbles website at and then I can do my backslash text TT curly bracket Opening Our bracket and then it's http slash slash Michelle crumble.com and you can see that it just sets the text apart now if I were actually doing a hyperlink this isn't the way I would do it because we can load a package that will make this link clickable which would be even nice you can use the hyperref package for that I guess since I brought it up I'll go ahead and show you so we go into our Preamble which is before the begin document after the document class and we're going to do use package hyperref okay that and then instead of this backslash text TT I can just do um URL and let's compile that and now I have a clickable URL and you can see that it automatically put that in the typewriter font I didn't have to tell it to do that the that's just part of the hyperf package it's doing that and so now if I click on that in my PDF is going to take you to my website you can also customize this even more because sometimes websites are really long and ugly so you can do backslash href and then the URL but then you need another set of curly brackets and that's the text that you want displayed so maybe I'll just say my website and we'll compile that and now when you click on the words my website oh it didn't work oh it did work it just didn't give me the little um the little gloved hand icon okay so it did work when I clicked on it so those are the some of the things you can do to change the way that you're displaying your text we can also change our text size so let's play with the sentence please excuse my dear Aunt Sally which most math students are familiar with right order of operations parentheses exponents what is the m multiplication yes parentheses exponents multiplication division wait what's the a addition subtraction there we go it's been a while sorry parentheses exponents multiplication division addition and subtraction okay please excuse my dear Aunt Sally so let's compile this just so we can see what we're comparing this to and let me give myself some vertical separation here slash V Space I'll just do one centimeter of vertical space there separate it from the work that we did before and we are going to make dear Aunt Sally change size okay so let me copy this I'm going to paste it several times and this first time I'm going to make dear Aunt Sally large really large so to do that I there's a couple of ways I can do that let's start this way backslash begin large with a capital l and then the text that you want large I don't know should we include the period or not include the period I I guess we will not and then backslash end large with a capital l they have to match remember whenever we do a begin you're going to have to matching end so let's compile that and see what we've got so my or just the dear Aunt Sally part of that sentence let me zoom in here so you can see this better did get larger I can I you know what I sh I should have started even larger because we can go larger I'm gonna copy this and try this with a lowercase L instead which should not be quite as large as the large with the capital L so now we're going to have normal a little bit larger and then a lot larger here we go and we can make this even larger if we change large to huge okay and we can make that even larger if we change the lowercase H to a capital h and you can see that that got even larger now we can go in the other direction and make things smaller let's go back to to just normal and we'll go a little bit smaller than normal so normal you could also call it normal size so sometimes you need that if you have like your whole document as large but then you want one part of it to go back to regular regular size let's do that I'll show you that so you would just do normal size all smushed together as one word okay so that's the same as this this line oops this line right here the first one okay so let's go a little bit smaller than normal size and that's going to be script size and we can go even smaller than that and go I think I missed small I did we missed small so let's put small in here script size is smaller than small and I'm trying to do this in a logical way so normal size and then if you want it a little bit smaller you can go too small and then if you want a little bit smaller than that you can go to script size if you need it even smaller than that we'll go to Tiny okay and let's compile that and see what we've got there we go so progressively larger and then progressively smaller all the way down to Tiny now we can also change how our text is Justified so sometimes you want your text to be centered sometimes you want it left Justified sometimes you want it right Justified so add in some vertical space for this new section here and let's do centered text so for centered text begin Center and we're of course going to need an end Center as well then everything you put in between begin Center and and Center will be centered so this line is centered and I could do all of that on one line let's save some space so we can do something similar I'm going to copy that two more times instead of Center we can do flush left so we need to begin and end or we can do flush rights okay so then we can see our text and zoom out a little bit this line is centered this line is Oh I should change that is left Justified this one is right it's Justified that makes more sense all right so the begin and the end is a nice way to do this with either changing the font size or changing the way that it is Justified because it's just easy to see where that starts and where it stops it's very definitive like where that ends it's not the only way you can do it let me copy these sentences here and show you a different way and this would work not just with the justification but also with sizing as well if you do backslash centering now notice I don't have a begin and an end if I do backslash centering it's going to affect everything that comes afterwards so all of those lines are going to be centered if I were to do backslash large say for example then everything that comes after that is going to be large I don't know what's going on with the uh that's weird why is it oh I see this is indented all right I thought maybe it was like weirdly centered in one part of the page nope this is just end indented that's all that's going on because I did soft returns here there we go they're all indented now okay so uh if we change this to Tiny then everything after that becomes tiny so it just depends what you want to do if you want to change your whole document then you can do this something like this is very simple I usually like the begin and the end again because then when I'm going back and looking at my code it's very easy to see where that started and where it ended so that's what I've got for text formatting now let's talk a little more about document formatting if you want to create a little title section at the top of your document then you're going to come into your Preamble so before the begin document you're going to come up here and you're going to enter three different lines backslash title with curly brackets backslash author with curly brackets backslash date with curly brackets now you don't have to type anything in the curly brackets but obviously if you want your title to show then you would type something let me do a full page view here so we can see what's going on so let's just say for my title I'm going to write my latex documents and for author I'm going to put my name Michelle crummell and for the date I have a couple of options I can manually type the date what is today's date hang on let me check Sunday July 26th so I could say July 26th 2020 like so now I'm going to compile and notice nothing changed on the PDF my title is not showing up so I've entered the needed information to create the title but I haven't actually told the compiler to print the title in my PDF to make it we have to actually tell it to make the title so after begin document you're going to type backslash make title all one word and we'll compile and now I have a title so there's a couple of things I want to point out with the date if you want to manually enter the date you can change that to anything I want any text I want even if it's not a date if you just want to put some other kind of text there you can and you can still use the backslash date coming and to do that oftentimes what I will do for the date is backslash today and then when each time I compile it'll figure out what is today's date and then it'll display that date so if I come back make some edits compile this again later it'll always have the most current date on it my students don't always like to do that because sometimes they turn in things late and they don't want me to know that they compiled it late the other thing I want to fix here is the word latex my latex document so the word latex is normally typeset in a very special way and to accomplish that you have to do backslash and then you type latex and it needs to be done like so with a capital l a lowercase a a capital T lowercase e capital x and then when we compile you'll see that it did change like the font and spacing and formatting of that latex let me zoom in because it doesn't look quite right because there's no space between the letter Chi and the letter d so I can create that space by typing another backslash at the end of that word and compiling it again and now we get the space between the chi and the D that is a basic little title section on your first page there's lots of other ways to create title pages that then wouldn't have other things on them but we'll get into that in another tutorial how to format a math paper what we want to do here next is to create some sections and subsections in our document so let me go to the end here but before my end document and create a section so my first section I'm going to hit backslash section and then in curly brackets type the name of your section or the title for your section so this will be linear functions that's my first section I'll compile that and you can see that there's some automatic formatting that happened to that that's not like normal text linear functions for my section here it's bold It's a larger font size and it's numbered and I didn't manually number it the compiler will number it and so if I create another section create another section and call it quadratic functions pile and now that's section number two we can create subsections so underneath section one I'm going to indent again just for my own organization it's not absolutely necessary I'm going to type backslash subsection curly bracket we'll say slope intercept form and then let's do another one backslash subsection standard form and one more slash subsection pointslope form let's compile that so now we have subsections and the subsections again are formatted in a special way and they're numbered 1.1 1.2 1.3 if you don't like the way that the numbering scheme looks you can change that you can also add sub subsections so under our first subsection let's indent and do backslash Sub sub section example one and one more Sub sub section example two and compile and now we see those subsections are labeled 1.1.1 1.1.2 okay let's add a couple subsections under quadratic functions and the reason I'm doing this is because we are going to build a table of contents so I want to have enough to fill out my table of contents so subsection here we'll do vertex form standard form and factored form and compile okay there we go now if you don't want the numbering to be displayed then you type in asterisk after the word section so if I don't want those section titles to have numbers in front of them I can suppress that same with the subsections and do asterisks and hide those so just hide a couple of those okay so you can decide if you want them numbered or not I'm going to undo that because I do want them numbered for my table of contents okay so here we are I'm going to go back up to the top of the document and let's say the very first thing we want after being in document is our table of contents so backslash table of contents all one word compile and let me go full page now the contents is blank that's going to happen because it requires two compilings in order to create the table of contents so don't panic if you don't see your table of contents once you compile just compile again so let's compile one more time and there it is our table of contents formatted very nicely with our page numbers hello I'm Michelle krummel and in this video we are going to look at packages macros and graphics let's start by saving our file so I have a file that I've already started and I am just going to save that as tutorial 6. so let me find the folder where I want to save that tutorial 6. and if we look at that folder here we can see that it is tutorial 06.tech and we're going to start by looking at some packages that we can use to change how this document looks packages are used to load special instructions for the compiler so you can do things like add features that aren't included in the standard distribution or modify the standard rules for fonts and document formatting if you want to use a package you place it in the Preamble so the Preamble is the section of code between document class and begin document so I'm going to come up here to line number two and just hit enter a few times to give myself some space and we can start entering the packages that we want to use so the first package I'm going to show you is one that I use in almost every document I create and that is going to affect the size of the margin for my output document if you'll notice and I'm going to change the zoom here so that we can see the entire page there's a lot of white space at the top and on the left and on the right and even at the bottom below the page number so this is just the default margins that are set here and normally these margins are too large for the kinds of documents that I'm creating I prefer to have about a one inch margin so we can use a package to deal with that now the easiest way if I just want one inch margins on all sides is to use a package called full page to use a package we're going to type backslash use package I'm going to choose the option with the curly brackets and then I'm going to type the name of the package inside of the curly brackets so it's just full page and then I'm going to compile so we can come up here to compile or I can just hit F2 as a keyboard shortcut so notice what happened now we've got a one inch margin at the top at the left at the bottom and let's go back to full page view and you can see we also now have decreased that margin at the bottom so that's just really quick easy package to use if you want one inch margins on all sides now you can use different size papers in the United States typically we use paper that is eight and a half inches by 11 and if you want to make sure you are set up for that you can come up here and type letter paper to make sure we're using letter paper if you are using a four size paper you can type A4 paper up here and when I compile I don't know if you noticed that it went pretty quick there was only a very slight difference but look at the bottom of the page here that did make quite quite a difference so let me go back to letter paper and that's going to give me that eight and a half by 11 size paper now I might not want one inch margins on all sides we can customize this further if we use a different package so instead of the full page package I'm going to use the geometry package and this is the one that I use when I create all of my documents just because it does give me some more control so the geometry package I think if I compile right now it's not going to do anything I haven't really told it what I want it to do yeah it looks like it maybe it just went back to the default let's zoom in here a little bit now I'm just a fit to page width here and we can come in front of those curly brackets and put square brackets and that is where I'm going to enter the options that I want to use with this package so if I do want one inch margins I'm going to type margin equals one inch and compile um F1 to compile I may have said F2 earlier I don't remember F1 to compile and now I have one inch margin so this really has the same effect as that full page package when I when I do it like this and just say give me one one inch margins all all the way around uh although it looks like we don't have a whole lot of space under the page number there I can make this really specific and say no I want the top to be one inch and the bottom to be one inch but the left to be 0.5 inches and the right to equal 0.5 inches and let's compile that and now you can see that I do have those larger margins on the top and bottom compared to what I have on the left and right okay um now my margins are a little bit too small for my taste so I might change that and you certainly don't have to use inches you can use centimeters you can use any valid measurement that latex will accept here okay typically I just use one inch but we will leave that like so for now and let's talk about another package actually before we move away from the geometry package you can also explicitly specify your paper size so let me just show you that real quick we could say paper width equals 8.5 inches if we're working with eight and a half by eleven and then we can say paper height equals 11 inches okay so if I did want to change the size of my output for my paper I don't know maybe I want to do something crazy like uh five by seven and then we can see what happens so when you print this it's going to print 5x7 instead of now eight and a half by eleven so there might be some applications for that if you're if you want if maybe if you're making flash cards for example and you want them to be smaller then you could adjust that paper size even if your actual paper is not that size it would restrict the output to that size for you okay so let's just go back this is bugging me just because it's not what I like to use okay there we go that's making me feel more comfortable I've got one inch margins all around okay let's talk about another package and sometimes you're trying to type mathematical notation maybe you're looking up some syntax to do something like the symbol for the set of all real numbers and you try and type the code and then you get some kind of error well that actually requires a package some do use package and the name of the package that we're going to want to use for that is Ams fonts that package is going to allow us to use some specialized math notation so let me come over here to my questions and then add in before question number one uh let's just say I we want something something to do with all Runners I'm just going to type this is the symbol for all real numbers and the uh code for that we have to be in math mode we're going to backslash math BB you can see that it's popping up as a suggestion for me here and then we're just going to put capital r closed Math mode and compile and I will zoom in over here so we can get a better view of that but now we have there the symbol or a misspelled symbol the symbol for all real numbers and we of course have other symbols that we can use like the symbol for these set of integers so let me just copy that the symbol for and I probably should say for the set of yeah let's do that properly for the set of integers and that is going to be the capital z and we can see that it produces that symbol for us there we might want the set of rational numbers and that would be a q you get the idea now if I didn't have this package loaded I'm going to remove that and compile and you'll see that I get an error it's looking for when you see this undefined control sequence it doesn't recognize that command we do need to load a package I don't know if it tells me in the error message that which package I need but sometimes you will encounter that so we want to make sure that we're using that package and whenever I'm creating a document I automatically load the AMS fonts package whether I need it or not because I never know when I'm going to end up typing some mathematicals you know symbol that might require it and if you are not including any options so you're not using the square brackets to Define any specific options then you can actually load multiple packages all using one command so here I can type for example AMS fonts comma and then the name of another package that I want to use so I typically will load AMS fonts AMS Sim and what's the other one AMS math I think those three I just always when I start my documents I load those three packages just in case I end up needing them and you know in the end if you comment that out and compile and everything looks fine you didn't really need those packages you can always just leave a commented out or you can delete it from your code but I always just keep it in it's not harming anything all right so you load your packages again in the preample that is before the backslash begin document now you can also load some macros in your preamble so macros are used to define your own custom latex commands and there are a few macros that I use often that I'm going to share with you but before I do that let's just you know look at how a macro might work in general so let's say you're working on a document and there's a little snippet of code that you know that you're going to use multiple times in your document you can Define it once using a custom latex command and then within the body of your document whenever you want to call that up you can just type that you know command that you've created instead of having to type the whole code so for example let's just say we were we were typing a paper and we were we knew that we were going to be working with a rational function and having to type it several times throughout the document so let's just say that that function is y equals and then we've got the fraction X over 3x squared plus X Plus 1. okay now I'm in the Preamble right now so compiling will probably give me an error like it doesn't make sense to have this up here I don't know that I've ever tried doing that before yeah I did get I did get an error because I'm trying to type this before my begin document doesn't like that but I just wanted to establish that this is an equation in fact let's move it on down here just so we can take a look at it on our document doesn't look that great at the moment if I want that to be a larger fraction I can go with d Frac instead and it would look more like that okay so let's go ahead and set up our macro and all we have to do is type backslash def for Define we are going to define a new command what do we want to call our rational function maybe we'll just call it backslash eq1 for equation one so we're defining equation one and then in curly brackets you're going to type the code that you want the compiler to run every time you type backslash eq1 inside of your document so you're gonna have to decide if you want to include the dollar signs as part of the command or exclude them I would say it's safer to exclude them just in case you're in a situation for example if you're doing an equation array or you're in a begin a line of environment where you don't want to use dollar signs uh you might run into issues there so I am going to omit the dollar signs and just type the actual equation part there now when we do want to call up this function within our document we're going to have to type the dollar signs so again you can decide if you want to include the dollar signs or not as part of the way that you have defined this special command slash eq1 so now that it's defined we can use it and it didn't look great just sitting there above critical thinking questions let's just make this a new item in our list here let's examine the function backslash eq1 now again this is going to be problematic because it's going to try and display equation one but it's not in math mode so you can see if I compile it doesn't like that it's telling me right I can see right away oh you're missing a dollar sign so we just have to put dollar signs around our EQ one and we should be good to go there we are let's examine the phone so without having to retype the equation I can just call it up like this and then any at any point throughout my document I can call that up again quickly just using slash eq1 so that can be helpful let me show you um some of the macros that I commonly use in my documents I have this document open right here this is one that I use very frequently and this one again we're in the Preamble is where we're defining these custom commands so this one starts backslash new command and then the name of the command in curly brackets so this is the actual command that if I were not using a macro I would just type this out within the body of the document whenever I want to use it and this is going to increase the vertical space between items in my list so it's adding more separation if you want to think of it that way the item set it's adding separation between list items and this pound one is for is where I am going to input a value so each time I this is this one is a little bit different because it's not a a static command that is going to be the same every single time this one I have to enter a value when I use this command and this is the part in the code that's telling me that I'm going to enter a value right here where typically a number would be so how do we use that after my begin enumerate if I decide that I want more space between my list items I can just bring up this command and I'm going to just type backslash set like this backslash set and then in curly brackets I'm going to type how much space I want so I can type the number one here let's compile and that has added some space if I want more space I could type the number two and that gave me even more space let's just really exaggerate it I'm going to type the number five and that's giving me a lot of space typically I normally just stick with about 1.2 that's my my goto unless I'm trying to leave room maybe if I'm typing a quiz I want to leave room for students to write answers although I typically do that with a V fill rather than the set command so that is one that I use often another one that I use often let's go over here um let's look at this one now this one is going to require I believe that we use a certain package yeah we're gonna have to use our packages you can see I have a lot of a lot more packages loaded in this sample document than the one we're working in right now but let me go ahead our commands go in the Preamble so I'm going to put that one up here and this one is going to insert a calculator symbol the command that I would be typing is just slash calculator but we are going to want to use these two packages tixi pgf plots so I'll come back up here where I've loaded all of my packages and let's compile or I haven't actually asked it to use that command so let's try using it and make sure it works so I'm just going to right here let's say I want um to let people know that this is a calculator active question I can type backslash calculator pile and then it's going to insert that little calculator symbol now I need a space between that and let's so I always just put an extra backslash like so and that's going to give me that little extra space that I need there and so if I'm typing up a set of homework problems and my students know that they can use a calculator on that particular question so that um is a really great use of this macro because I don't want to have to type this code every single time I want to insert that calculator icon I just do it once in the Preamble and then whenever I want to use it I can just type the backslash calculator so that's how you do custom commands in latex okay and then the last thing we're going to talk about here is inserting Graphics now it's important when you insert graphics and by Graphics I mean image files jpegs pngs are typically the ones that you're going to be working with it's important that you save those image files in the same folder where you've saved your Tech file so let me open my finder window this is the folder where I've saved my tech file this is the tech file we are working on right now it is in this folder latex tutorial 6 packages macros and Graphics so I'm going to find the image that I want to use I've saved it to my desktops to make it easy to find it's right here so I'm going to copy that and then I will come back here this is the folder where my tech file is and I'm going to paste that image file in this folder they need to be in the same folder for the compiler to find the image otherwise you will get a compiling error so let's go back up top because we do need to load a package in order to insert images so the package that we're going to use use package graphic X graphic X that is the package that we are going to use and then where I want to insert my image let me go back to a page width view here let's put the image right above question number one here where's statement number one here we'll put it before the enumerated list so in between critical thinking questions I'm going to insert my image right here and the most basic way to insert this image backslash include Graphics you can see that the suggestion is popping up the scale now I can go with a scale of one I find that typically a scale of one it sounds like it should be the right size right because it's 100 percent scale but it's usually really big so if I do use scale I find that I normally have to use a number between zero and one but we'll we'll just try it and see what happens so scale equals one and then you type the name of your file so let me go back to that folder because I've forgotten the name of it so the file is limit dot PNG so here I'm going to type limit I don't have to type the dot PNG you can it's fine but you don't have to you can omit the dot and then the file extension so if I had a limit dot JPEG file I could also just type limit and let's compile and there is our image so it is bigger than what I would like for this document you can see the font size here on the axis is a whole lot bigger than what I have in the rest of the document so we can decrease the scale maybe try 0.8 still too big I mean let's go with 0.6 I typically don't use scale I typically want to make sure that all of my images have a consistent width or maybe a consistent height so there is another option for sizing your image besides using scale you can specify the height of your image you can specify the width of your image so let's just do width equals and we will try five inches okay so that's pretty big I don't know why I went with that that big let's try 3.5 inches now you can also specify the height instead of the width or at the same time so if you change the aspect ratio things are going to look a little wonky let's try height equals five inches and you'll see that I haven't maintained that aspect ratio so typically I just do one or the other either width or height you don't have to use inches you can use centimeters you can also use percents so we could say something like with equals to do a percent you want to do something like this zero let's if we want 50 we could say 0.5 so slash text width so that's going to make the width of the image half of the text width yeah that looks about half right if I went with 0.75 that's going to be really big because it's going to take up threefourths of the um I can't say page width because it's not including the margins but the text width right so that's another way that you can size your images there and if you want something smaller now it's only onefourth of the text width now if you want the image to be centered let's go back to 0.4 if you want your image to be centered and this is the way that you're inserting your image then before the image we can do backslash begin Center and after the image backslash end Center so we don't want to Center everything on the page we just want to Center the image okay so that is the a really simple way to get uh Graphics into your document there's nothing fancy here we don't have a caption you know labels any of that kind of stuff so if you do want to have a little more control maybe you want to add a caption to your image or you want to have a little more control over the placement of your image then we can put our image inside of the figure environment so let me take away begin and end Center because there's a better way to do that if we right before the image backslash begin figure and then right after the image backslash and figure all right let's compile that and you'll see that it moved the image now in the code I've placed the image between critical thinking questions and my enumerated list but the compiler moved the image and it displayed it at the top of the page well if if you don't like that you have some options for telling it where to place the image here we can do in square brackets in h for here place the image here now that might not always work because sometimes the compiler thinks it knows better about where that image would fit best like if there's not quite enough space where you want to put it or I honestly I don't know how it how it decides exactly where to place the images but sometimes even this lowercase H doesn't work if you want it at the top of the page you can use a t if you want to place the image at the bottom of the page you can use a b that moved it down to the bottom of the page but normally I want my image to be right where I coded it and so I use a capital H but if I try and compile this I'm going to get an error because the capital H requires a special package and that is the float package so that is one that I almost always load in my documents in case I need it because it is also really useful for placing tables not just images but also tables and so if you load that flow package and you use the capital H here it will put the image right where you have the code for the image regardless of whether it fits well in that space or not and if you want to Center your image then inside of that figure environment you can just type slash centering so that will Center the image and also the caption if you use a caption so if we want to place a caption below the image I can end my line here and type backslash caption and then in the curly brackets type my caption so this is a visual or oh let's just call let's just say this The Squeeze theorem now notice all I said was caption The Squeeze theorem I never typed figure one but look when it displayed the caption it labeled or numbered this figure for me automatically which is really nice if you have several images in your paper it's going to number them as you go and then later if you go back and insert another image it will automatically you know reset all of the numbering and number everything appropriately now for those of you who are using overleaf let's talk about how to insert an image here so I've just copied and pasted the code from my techmaker file over here and when I hit compile I did get a compiling error it looks like I have two errors and it's because it can't find the image I've asked it to include in the document so it's looking for this this file called limit and it can't find it because I have not uploaded it here into overleaf so you're going to want it to appear in this list along with your Tech file so here's our you know main Tech file I can rename this if I want so that it matches the other one tutorial 06 so you don't want to always have main.tech be your file names here because then when you start exporting things to your computer you'll have multiple Ted files that all have the same name so I do like if you're using overleaf get it in the habit of renaming those files okay so we need to upload an image and place it here in this list so here is the icon to upload and then you're going to find that image on your computer you can drag and drop it into the box I have that image on my desktop so let me do that I'm just going to drag it over here and drop it and it appears right here so now when I compile it should work out okay and there we go there is my image I had no problems finding that file because it is again in the same folder here in the same directory as the tech file itself so that does it for this tutorial we talked about loading packages we looked at defining some custom commands and then how to deal with inserting images into our documents I'm Michelle krummel and in this video we are going to take a look at errors and debugging so for errors I have intentionally made some very common errors and we're going to go through them one by one and see if we can fix them so I um haven't tried compiling this document yet I'm going to go ahead and compile it and when I do that I run into an error so I'm not actually seeing PDF output produced over here if the the file will not compile and so I have a number of errors and I can see in my log down here I can scroll through I have all kinds of errors and it's telling me it's giving me some Clues as to where these errors are and then what types of Errors they are so having the line numbers is very helpful and if you're not seeing your line numbers appear here you can go into your tech maker preferences and make sure you have line numbering turned on in your editor so that is a check box right here that you can select or deselect but I like having the line numbers show because it really does help when you're trying to find errors okay so let's look at that again now the first error apparently is occurring on line five and that's where my cursor is at the moment so it kind of worked its way through the file while it was trying to compile and there's a problem here on line five so the first thing I like to do is just read it very carefully and see if anything jumps out at me and I can you know make sometimes I'll just notice oh I see the mistake that I made there you know we're starting with double dollar signs we're closing with double dollar signs that's not an issue I have my left parentheses now whenever you use a slash left you need a matching slash right and I'm noticing I don't have a slash right so that's probably the issue and if we read the actual error it says right here missing slash right so that's a big clue to me to let me know what kind of mistake it is I'm dealing with so I do have clothing parentheses or parenthesis right here but I did not type slash right in front of it okay so I'm going to try compiling again to see if that fixed the error now it still did not successfully compile but that's because there are other errors in the document I can tell that I've fixed the error in line five because now when I look down at my error log the first error is occurring on line eight so we fix the problem in line five now let's deal with line eight notice we don't actually have any code in line eight so when that happens I usually go to the line right before it and and look for an error there another good tip when you're trying to troubleshoot here or debug your code if there are too many errors or you're just not sure exactly where their error is you can have the compiler temporarily ignore part of your code by commenting it out so anything you want to comment out you can type a percent symbol in front of it notice that this turned gray the line turned gray the compiler is going to completely ignore everything on line nine so sometimes you'll want to use that strategy just to narrow down where the error is now we the log says it's on line eight I know it's not actually on line eight so what I'm going to do just to show you how you can use this commenting thing I'm going to comment everything out except for endocument I don't want to comment that out because we have a begin document we need an end document or it's never going to compile so I highlighted everything else here and I can go individually and type percent symbols but there is a keyboard shortcut I can type command t on my Mac and that will comment all of the lines that I've highlighted alternatively you can come up here to edit and choose comment and it will do the same thing now I've just done it twice so I'm going to I think if I undo it'll only do one line so let me do edit and uncomment to okay there we go so now the only code that is going to run when I compile is the lines that are not grayed out here and I know that I fixed the error in line five so let's see what happens okay now it's just giving me errors on line eight supposedly line eight but I know for sure that it's happening right here because everything after that is being ignored and everything before that we have fixed so let's take a look at this and see if we can pinpoint what's missing the dollar signs look okay A lot of times um there's a missing dollar sign and that's an a common error that you can make but I'm noticing you know for every opening dollar sign I have closing dollar signs so that's good slash Frack I've got curly brackets around the numerator ah but I don't have curly brackets around the numerator because I accidentally typed parentheses here instead of the curly bracket so let's change that to a curly bracket now I think I've fixed it so I'm going to try compiling again and success the the file did compile now I've hidden all this other stuff so it's not showing so what I can do now is just unhide these lines one at a time I can uncomment uh them and back and then try and compile and we have an error now on line nine if I look at the error it says missing curly bracket so that's probably what the problem is and I sometimes I will count this is open number one open number two close number one open number three closed number two oh what did I just do there we go let's try that again actually when I'm doing this because it's hard to to kind of keep track I'll count all the open uh curly brackets and then all the closing curly brackets so I have open one two three I have three opening ones and then let's look for the closing ones we've got one and then two so I know that I'm missing a curly bracket somewhere now notice the color coding that's going on to help me if I put my cursor right after a closing curly bracket it shows me the pair it shows me the one that's opening and then being closed by this bracket so that's that pair is good this pair is good when I click here nothing nothing got highlighted like up here if I put my cursor next to that it's going to highlight the pair but when I put my cursor here it's not highlighting a pair so this opening one right here is missing a closing one so then you're going to look at your code and see okay where does the square root end and that means I have to put one at the end right here and now I've got that pair highlighted so let's compile and see if that worked that did work so that was successful let me go ahead and zoom in here okay so now I'm not going to just uncomment begin enumerate because that would certainly give me an error whenever you have a begin you need an end okay but now I don't I think I might get an error here because I'm saying hey I'm making an enumerated list but then I didn't put any items in my list so you need at least one item and if we compile that works there's my first item so I'm just going to take a chance maybe there's no errors in here and I'm going to highlight all of this and to uncomment them all back I can hit command U on my keyboard or I could have gone up here to edit uncomment and it would have the same effect and now we will compile that and I am getting an error so I know there's an error somewhere here okay so let's see if we can figure out what it is we've got the second item that looks fine begin enumerate and anytime you see begin something ask yourself do you have a matching end and I don't because the end enumerate right here matches the begin enumerate right here so this beginner numerate does not have an end enumerate so I need to come down right here and add an end enumerate that's a common error that happens especially when you're making nested lists and now everything is okay indenting can help with this if you don't indent and you have everything like this then it's hard to see which begin enumerate is paired with which and denumerate it's a lot easier if you indent and you can indent a bunch of lines at once if you highlight them and then for my Mac it's command shift and then the right angular bracket on the keyboard the one where you uh same key you hit for a period and you can do that multiple times if you want to indent more and if you want to go in the other direction you can use the left angular bracket to go the other direction okay so then let's comment out this next part and see if there's an issue there also I'm going to try compiling nope I've got a problem here and I'm if I read the error message it says undefined control sequence so undefined control sequence often happens if you well the compiler doesn't recognize a command so you typed backslash something and it doesn't recognize it and the most common reason common two reasons for that are one the commands you're trying to use requires a package that you don't have loaded or two there's a typo in your command you accidentally misspelled it which is the case here because I meant frack and I spelled farc so we'll change that to frack and see if that fixes that and it does there's my fraction there I'm going to go ahead and just uncomment all the rest of this stuff and we'll see how many more errors we have in this file okay scrolling down here it looks like we still have quite a few so I'm good up to line 24 even though it's telling me that the next error is on line 26 missing dollar sign inserted and I can see right away that it's a dollar sign issue because remember when you open Math mode using a dollar sign everything in math mode turns green and looking at this there is way too much green here too many things are green that aren't supposed to be green only the math should be green so this text if that discriminant that should not be green so I forgot to close my dollar sign right here and as soon as I type that dollar sign you can see that that text now turned black which is how it's supposed to be so let's try compiling now I still have errors in the document so it did not update the PDF this is the PDF from the last successful compile that we did so be aware of that as well if you feel like you're clicking compile and nothing's changing over here it could be because you have a compiling error and it's not updating your PDF for you and you can turn these this message log off so if you're not you know maybe you wouldn't realize that you had an error your PDF is just not updating but for me the message log automatically pops up when I have errors okay so now let's look at line 27 and see if we can figure out what issue we're having here so in the Align environment first of all I noticed something's weird because it's colored in a strange way I'm expecting the math to be green and things that aren't math to be black but this stuff right here I clicked a dollar sign to start Math mode but this is black why isn't it green if it's in math mode well when you're when you start the a line environment here when you type backslash begin a line it's it automatically puts that in math mode so I'm in math mode before I ever type anything when I do begin a line like that I'm in math mode right now so if I start typing you'll see it's green because it is in math mode now let me go back to what I had so what happened when I typed the dollar sign is it actually closed the math mode and that's causing me errors here so when you're working in a line never use the dollar symbols you're automatically in math mode now things look a bit more normal the math mode is green like I would expect it to be so let's compile and we still have an error it's still saying line 27. now obviously the problem is not on line 27 because there's nothing wrong with this code right here the syntax but it's something to do with my align environment here if you look at the other code messages that are popping up so sometimes this will give you a clue as to what's wrong and other times you know maybe it's not you're not real sure what this means miss it looks like missing dollar sign inserted but that's not really what the issue is here misplaced alignment tab character that's talking about the Ampersand that's not the issue here the issue here is that we have a blank line in our align environment and typically blank lines don't matter at all you can put as many blank lines in your code as you want it's not an issue it's not even going to show up as blank lines over here on your document in fact the compiler ignores spaces as well I don't know that I've mentioned that yet so not in text I don't not in text mode in text mode Let's see what happens if I put a bunch of spaces here actually I think it probably will still ignore it oh let me hide this because it won't compile so there's an error there so I'm commenting that out so we can see what happens here when I put in all these spaces there and look here then there are no real Roots it ignored all of those spaces you can type as many spaces as you want here and it's going to ignore it which is kind of nice because sometimes when you're you have a lot of code it's helpful to your eye to space things out for example up here where we have the square root especially when you're trying to find an error in fix and error sometimes I'll come in here and I will just put a bunch of space like I know the slash square root goes with that closing bracket right there and I'll just put a bunch of spaces just to visually separate it so I can focus on the interior because if I'm sure that this looks correct and it's matching with this right here then I don't need to focus on that part of the command I I really want to just focus what's in the middle here so spacing things out in your code can be helpful and this absolutely will not affect your output the compiler will ignore spaces sometimes it's frustrating frustrating because you want a space and it's ignoring the space when you type it but there is a way to hard code a space if I want to put a spacer I can just do backslash comma and then I could do that as many times as I want so let's insert some spaces here and now when I compile I should see the square root symbol and then a weird amount of space and then my fraction so that's happening right here I've inserted some extra space there let's take that away because that's not proper okay and now it looks normal again so let's go back to trying to fix our issue here and I think I already told you what the problem was in an align environment you cannot have an empty a blank line you cannot have a blank line so let's remove the blank line and try compiling and oh I still have another error okay I thought that was going to work okay so I'm not getting any any good Clues from the message here so I'm going to look at the code very carefully and make sure I didn't misspell something make sure that I have all the matching stuff that I need everything looks good so my next uh thing to check is is there a package missing that maybe I need so at this point I'm not sure what the issue is I always go to Google Google is your best friend when you are trying to troubleshoot latex errors so I am just going to Google's you know some kind of words that are going to indicate what my problem is so latex and then begin a line and let's see I think it's a package issue so let's see what pops up so a couple of Clues here I'm seeing use AMS math use package AMS math the very first hit aligning equations with AMS math so I think that was the package I needed and not that float package so let's come back up here and try AMS math AMS math and compile and sure enough that fixed the issue so that was the package I needed and I think I mentioned this in an earlier video whenever I create a document I always load AMS math AMS Sim and AMS fonts because I can never remember which one does what and I frequently need to use these three packages so just out of habit I go ahead and load those packages for all of my latex documents so that fixed the issue that we were having here okay so uh fixing errors you know it can be frustrating certainly but you want to try um just a systematic approach to it use that tip I showed you about commenting out parts of the code so you can really narrow in right where the error is use that error log to help provide clues to you so you can see what the error is and before we go let's just hop on over to overleaf and I'll show you what debugging looks like in overleaf it's a little bit different to be honest with you it uh it's not very pleasant okay and I think I made this sample document it was a copy of our tutorial with all of these errors in it so the reason I said it's not very pleasant is just because you see all of this red like it just induces panic when I see this I'm typing on a document and then things all of a sudden turn red right it's very jarring but it's showing me that I do have issues now in overleaf so I'm trying to compile it's not compiling clearly I'm having a problem because everything turned red it's giving me some indication of maybe what the problems are but but you see that it's not quite as um explicit as it was in tech maker where it said line five and then line eight and then line nine we are getting a little clue right here this l.5 is referring to line five uh and it looks like slash right it's also identifying what the problem might be there you really have to read these read these and look for Clues uh and then also this red X right here is indicating that we have an error on this line so we're going to try and fix it if you remember from last time the problem was we were missing the slash right in front of this other bracketing symbol okay now as soon as I fixed that notice what happened the Red X in front of line five disappeared but now I've got all these other red X's so these are indicating other problems now this one doesn't make a whole lot of sense uh backslash begin document like that's there's nothing wrong with that but if we hover over this and look at the message it's saying it's unclosed in other words like we have a begin document but we don't have an end document well clearly we do have an endocument it's down here but look what it says down here hey I found an unexpected end document after a begin enumerate so it's it's seeing this slash end and trying to close and enumerate so now I'm kind of piecing together the actual problem it's not the begin document it's not the end document it has something to do with a begin enumerate that probably wasn't closed and I have to really like hunt through here look very carefully at all my beginner numerates and make sure they have matching end in new rights and if you remember this one does not so it's a little harder I think to troubleshoot this problem in overleaf slash end enumerate and you can see as I'm fixing things some of that red is going away it's not panicking quite as much but now we have other coloring issues going on and oh things are turning red again that's not cool uh oh now we have a warning here this symbol is just a warning it's not necessarily going to cause a compiling error and if you read the message it's telling us something about the end of line which is happening all the way down here so to me like debugging an overleaf is definitely not as easy as it is in tech maker and I would highly suggest if you're working an overleaf that you use that strategy of commenting out a large chunk of your code so that you can really focus on one little section at a time but before you even get to this point the best piece of advice I have for you I can't believe I haven't said it before now in this video but the best way to prevent errors or to to debug errors is to compile all the time compile frequently right after you type a line of code compile and so you can see oh that works no errors keep going type A next little bit of code compiled don't try and type your whole document and then hit compile and end up with 25 errors then it's a nightmare to try and fix them all so compile as you go frequently every line every couple of lines hit that compile button and make sure that everything is running properly okay I'm not going to go through fixing all the rest of these because we already saw how to do that how to fix them but I I did want to show you what the interface is like over here um even though it's tempting to fix them just to get rid of all of this red here I'm Michelle crumble and in this video I'm going to show you some tips for using tech maker and some tips for using overleaf so we're going to get started by opening up a tech file that I've already created techmaker is set to be the default program that will open Tech files that are stored on my computer so if I double click on this file it's automatically going to launch techmaker and open the file within techmaker so here is a file and this is what our tech maker window looks like yours might look a little different because I I may have changed some options some of my viewing options so in terms of what you see on the screen right now you can change that with these four buttons at the bottom if we open up the structure panel over here we see first of all our file structure and right now I just have the my my tech file here I don't have anything else added in here if I click on some of these other buttons we're going to see a list of symbols and if I click on one of these symbols it's going to insert the code for that symbol so I want to think about where I'm going to insert this let's just insert it at the end of this first list item so this particular symbol requires Math mode so I'm going to hit dollar sign and then let's say I forgot the symbol for plus or minus I can come over here click on plus or minus and it's going to insert the code for that symbol for me right here and now when I compile I should see the plus or minus appear so to compile my document I have a few options what I usually use is just F1 F1 is keyboard shortcut that is going to run the code for me so I hit F1 on my keyboard and my document compiles and I can see the result over here and sure enough I've got that plus or minus symbol right over here another way that I can compile my code is using the quick build option up here and in this drop down menu you can decide what's going to happen when you press on this Arrow so I like to have it set to Quick Build and quick build is going to do two things it's going to run the code it's going to turn it into the PDF and then it's going to show me the PDF so we can change what quick build is doing in our preferences if we go to tech maker preferences quick build right now when I run quick build when I press quick build it's going to run PDF latex view PDF so you can see that there are quite a few other options that you could select instead but this is probably the one that you're going to want to use so I would hit this Arrow right here and that like I said is going to run the code and then show me the PDF now if I let's say I take away the plus or minus okay so now when I run my code it should remove that plus or minus symbol and I should not see it on my PDF if I come over here view PDF and I click that nothing changed I still have the plus or minus there even though it's not over here in the code and that's because view PDF does not recompile your document it only shows you the PDF from the last successful compile I have not recompiled so just clicking on this Arrow right here is not going to do anything but show you the PDF from the last time you compiled it's not going to recompile so you have to make sure you're clicking on this Arrow not this one over here click on this one or like I said use your keyboard shortcut of F1 and that recompiles and we can see the plus or minus symbol has disappeared so you have other categories of symbols over here we've got arrows different symbols brackets Greek letters most used symbols this is going to populate automatically based on what you've clicked on in the past and then we've got our favorites the star here is a place where you can store your favorite symbols so if there is something that you think you'll use frequently maybe I don't know I'll just use this summation symbol you can right click add to favorites and then you can quickly find it by clicking on that star icon and then just choosing it over here if I click on this it's going to insert that into the code but I don't actually want that there okay I'm going to go ahead and close the structure panel so I'm not using it so I don't want it to take up space on my screen we have some other things that we can click on over here to call up some other commands so if you need to start a new section you can do that this way and you can type the name of the section that you want I'm not sure where I left my cursor so this is probably going to put it in a bad place in fact let me cancel let's say I want to create a section right here so I can go to section and I don't know what I want to call it section one and I'll hit OK and it's going to insert the code there to start this section for me and then if I compile we can see that it added section one for me there you have other options that you can use just click on here to see what you've got all of your different font sizes this one can be helpful it's hard to remember sometimes what the smaller font sizes commands are if you want to use this one right here to make something bold you want to highlight the text first so let's say I want to have chain rule in bold I would highlight chain Rule and then I would click on the B and you can see that it inserted slash text BF the curly brackets and my text is inside so now when I run my code chain rule is in bold okay so that can be a bit of a Time Saver and same thing here with italics emphasis is another way to do italics here we've got some justification symbols this one and if you hover your mouse over here it'll pop up a little box that tells you what it's going to do so this is going to insert a new line here we're going to get dollar signs a pair of dollar signs Etc so you can look at these different options a fraction is something that people frequently use so that's handy to have it right here in this toolbar same with the square root but remember in tech maker when you start typing a command so let's say we want to square root with open Math mode with a dollar sign if I start typing backslash SQ it's going to pop up some suggestions for me so the top one would be for an nth root and the bottom one would just be as for a square root so that would give me the square root of x so you can decide if it's faster to just type it by hand or maybe to click on some of the buttons over here before we look at some of the other things in our menu so let's go ahead and open the tech maker preferences and see what we have going on there under this commands tab I just want to point out that you do have the option with your PDF viewer to use the builtin viewer or an external viewer when you use the builtin viewer that's what allows the PDF to show up in this pane over here on the right which again you can toggle on and off at will if I switch to an external viewer let me go back into my preferences if I switch to an external viewer and it's one or the other you can't have both selected the external viewer is going to when I ask to view the PDF it's going to open it up in a different application outside of techmaker so by default my computer uses Adobe Reader to open PDFs so I'm pretty sure that's what where it's going to open so now you'll notice I don't have the option to view the PDF in a pane over here that went away so now when I want to view my PDF so I can quick build remember we'll also run view PDF or if I just want to view the last successful PDF I can click here and that popped open in Adobe Reader so there's my PDF I prefer to have the builtin PDF viewer because I'm constantly looking at my PDF I'm constantly compiling as I work to make sure that I catch any errors right when they happen so let me go back into my preferences and go back to that builtin viewer if you use something other than Adobe Acrobat you can always change the path here so click on this folder and then just go into your applications folder and find that executable file that will launch whatever PDF reader you have installed okay so let's move on to quick build actually nothing new to talk about here I showed you how you can change the setting but I'm confident that this is the one that most of you are going to want to use under the editor if you change the font family or the font size here it's not going to affect your PDF output it's only going to affect this little text editor part of your screen okay so it's not going to affect what's put on your PDF output document now for the purposes of this video tutorial I made my font size pretty large 24 point is pretty large because I wanted you to be able to see the text clearly when I'm working I normally work with it at size 16 so that's more comfortable for my eye and I can see more of the code on my screen this is normally the font size I work in but again you can change this you can make it smaller you can make it larger so when I'm recording videos I like to set it to 24. there are some options over here for you to consider word wrapping I like to have word wrapping turned on so in my text editor let's slide this over here uh we'll just slide that over some more when I get you know when I run out of room here it's just going to wrap down to the next line so I like that because I always want to see all of my code on the screen but it does make the this file take up a lot more space on the screen so if that's not something you want you can turn off the word wrap completion so this is that auto completion like when I started typing the code for a square root and it popped up the suggestion on how it thought I might want to complete that command then you just hit enter when you like the suggestion so that is um I find that to be a Time Saver I like having the completion turned on show line numbers is also really useful especially when you are trying to debug your code because an error message will come up and tell you hey there's an error on line 14 and then it's very easy to find that in your code you can just go right to line 14 and see the code you'll notice that some lines don't have numbers next to them and that's because of the word wrapping so this technically this part right here it's not going to let me click on it because I have this other window open this where it says to solve this is not a separate line it's part of the previous line so it doesn't get numbered as a new line versus this empty line here you know I had to hit return to get to this empty line and then return again to get to this line so even though there's nothing there this does count as a line number okay back over to our preferences here back up your document every 10 minutes you can certainly turn that on if that's important to you the reason I don't have that turned on is because when you do have this turned on then for all of the files you're working in it the compiler is going to or the program is going to create this extra file it's going to be also called tutorial 8 and it'll have the extension bank so in your folder let's see if I still have that fold yep in the folder here there would be another file that says tutorial underscore 08.bak and my folders I just feel like I have a lot of files them in them as is and I don't like having that extra file in there but it's no big deal if you want the safety of backing up your document every 10 minutes you can do that I almost always recompile more frequently than 10 minutes so it's not really useful for me because every time you compile it's going to save that file on your computer so that acts as backing up every so often as well now this is a good time to point out when I first launched this file these this tutorial8.aux.log and this dot syntax dot gz we're not here the only thing that was in here was this CMG project and then the tech file and the PDF but while you are compiling your file these other auxiliary files are being created these helper files are being created and they will stay in there and they will clutter up your folders and you really don't need them once I close uh tech maker I'm going to show you I'm just going to come in here and close tech oh it's not going to let me because I have this window open okay so now let me try closed techmaker and look those helper files disappeared that doesn't happen automatically that only happens because I set that up in my preferences to happen that way but it helps just clean up the folder so I don't have a lot of extra unneeded files cluttering up my folders so let me launch this again I'm just going to double click on this to open that up and if we look at that we see we just have these two files but now if I compile or I could have actually I could have stayed on this no I couldn't off there we go okay so now we've got all those helper files in there so how do we change that setting to get rid of those helper files when we don't need them in your preferences right here you're going to make sure this box is checked launch the clean tool when exiting techmaker so when you X Out of the program it's going to remove those extra files that are not needed okay so um we were looking at the editor window tap with number of spaces you can increase or decrease that as you like so that would be when I'm working on my code and I want to indent by hitting tab that's just how many spaces it will indent so you can customize that you can change the color of certain things so you'll have to know the hex code for the color that you want this is white so the background that I'm working in again it's not going to affect your PDF output it's just this editor panel here where you're typing your code if you want the white background there's a dark theme and there's a light theme so if you like working uh with like white text on a black background you can go with the Dark theme or I don't know if it's white text actually I don't typically use the Dark theme but right now the background color is set to White are the highlighted line I forget what color that is that might be correct I don't remember this is black this is gray um this is green so the when you're in math mode it's going to show up as green so you can customize that if you don't like the default colors you can come in here and change the hex code okay and then the shortcuts tab here is just going to give you a list of keyboard shortcuts and if there's something that you find you're doing frequently and there's not already a keyboard shortcut for it you can add a keyboard shortcut for it so the things that say none you can click on that and then you can Define your own custom keyboard shortcut all right so that takes care of preferences and we've looked at the this toolbar uh we sort of talked about the important stuff on this toolbar what have we got up here so tech maker this is where we found preferences if you're on the Windows version you may have to go to options to find preferences at least that's the way it used to be but on the Mac it's tech maker and then preferences file we've got uh standard stuff here edit these four commands are very helpful and I use the keyboard shortcuts for these all the time so if you want to comment out a line let's say for example I don't want these last four items in my list to show up on my PDF I can use the keyboard shortcut which is command T and it's going to put a percent sign at the beginning of each line and so by line I mean the number line is where they're numbered and then when I click off of that you'll see that it also changed the color to gray so it that's another indication to me that something is commented out and what we mean by commented out is that the compiler will ignore that line of code it will not even consider it when it is running your code it's just going to ignore it when it gets to that line that's been commented out so one use of commenting things out is you know maybe you don't want something in your document let's compile so there I just got rid of some of those questions but you don't want to delete it because maybe you're uncertain and you're you you want to show it later on so I do that sometimes when I'm writing a quiz or a test I have a question that I decide to Omit but I don't want to delete it because I think well maybe in the future or if I'm making um a makeup test I might want to then turn on that question so that's a good way if you're troubleshooting and you're trying to figure out where an error is commenting out a bunch of lines can really help you pinpoint exactly where the problem is and help you fix it now to undo that to a bunch of lines at once we can use the keyboard shortcut command U and that will make them all visible again another use for comments is just to leave little reminders for yourself especially when you're first learning latex maybe you don't you know remember what a certain piece of code means this for example on line three will remove paragraph indenting so I could leave a comment here for myself I just go to the end of the line not the beginning because then I won't run the code at the end of the line time type your percent symbol and make a note so this will remove the indents and it doesn't necessarily have to remove the indent but the zero is going to cause it to have an indent of zero space so I could put a number there instead if I wanted 10 ex is a unit of measure then that would give me large indents but I typically turn off indenting in my documents so another good use for comments there indent indent indent and unindent would be not for the PDF output not to confuse you because I was just talking about indenting here this is the code that will affect the indenting in your output document but sometimes you want to indent your code so maybe we want to indent these lines right here I can do that all at once if I hit and I'm on a Mac so it's command shift and then the right angle bracket and that will indent if I hit it again it will indent more so it's a good way to organize your code make sure things are lined up that all belong together and you can undo that or reverse that by command shift and then the left angular bracket and again if you forget the keyboard shortcut you can always just access it from the menu here or you can look and see what the keyboard shortcut is from the menu here under the latex menu here you've got all kinds of different options if you forget the code for something you've got it right here you can just click on it and it'll insert the code for you I don't know where my cursor is at the moment let's put my cursor in a good place well we'll just put it at the end of that sentence there okay so one that I find hard to remember I have a lot of this stuff memorized but one that I find hard to remember sometimes are the international accents and this comes up when I'm trying to type l'hopital's role so for low vital's role we need a special accent over the O and this is the command right here just put an O there so it's capital l apostrophe h o but it's the accented o will be tall and then let's build that and we can see it right there it's got the special accent over the o so the pull down menus are great for things that you don't use too often you don't remember what the code for them are it is our math we have other menus here if you just kind of hover over you'll see what's available there the wizard is cool um let's I'm going to just close this document I'm not going to close tech maker I just want to close this document and let's start a new document so this old PDF is just hanging out over here just because I haven't recompiled something yet so let's start a new document so I'll just click the new and you know we can start from scratch or we can use this wizard to get started quick start it's going to ask me for some basic settings we want uh and to use the document class article if you're doing a slide presentation you would use Beamer but we have article and you've got some options here you don't have to use any of these options you can ignore that if you don't need it I don't see anything here that I want you can decide if you want to go 10 11 or 12 point let's go 12 point just so this is a little bigger for the video paper size you can choose the size of paper that you would be printing on so in the US we use letter paper the author if you want to include that if you know that you want to include your name in your document you can do that if you know the title of your document I mean you probably do this one that we're working on is critical thinking question or we'll just say IB math analysis and approaches HL okay geometry package do you want to load the geometry package that's pretty useful and then you can specify all of your margin sizes although I don't like the ones that are being offered here I would prefer one inch margins and if I don't want to if I want them all to be one inch I can just say margin equals one inch AMS packages absolutely I always include those the graphic X package if you're going to have images in your file so that one is useful and that's all I need I'm going to hit OK and I've got some basic stuff here to get me started I usually like to space out things a little bit here after my packages I'll leave an empty line okay that looks good and if this I don't know what's going to happen with the dot here let's see if we get an error yeah we do oh for but for a different reason it won't compile your document if you haven't saved it and named it so you got that could not start the command error it looks like hey I have code here why aren't you compiling it and it looks like it has a name but it actually doesn't I have not saved this file yet and named it so we have to do that so do file save as and then sure let's keep put it in the same folder tutorial underscore 08 B and we'll save that okay so now my file is named never never never never use spaces in your file name you'll notice I put the underscore there instead of typing a space do not put spaces in your in your Tech file names or your image file names it can cause issues okay now let's see if we can if this dot is gonna still result in an error it does not okay so sometimes people message me and they're having and they did something like this and then they try and compile and they get an error oh now it's not going to work because it still remembers this but if that happens to you the reason that you're getting a compiling error here is because you haven't actually typed anything between your begin document and your end document it looks like you know you have typed a lot of stuff up here but this is what we call the Preamble the part of the code that comes before begin document is just your Preamble it's like presetting certain things up and you can't run the code unless you actually have something in between your begin and end document so even if it's something simple like hello and then we can run that and no issues there okay so quick build not quick build the wizard quick wizard quick start there we go quick start can be helpful way to get you started from a blank document and you've got an option to do a quick start for a beamer presentation and some other options as well if you want to insert a table you can also use the wizard there quick tabular is going to bring up this window and you can enter how many rows and columns you want in your table and you've got other options here if you want to align the contents of your cells left right or centered or if you want them to be in like paragraph form if you're not entering numeric values if you're entering text you might want to switch to a paragraph and where you define the width of your columns there you can also merge some columns and decide if you want a border on the left and the right and at the top and at the bottom so you can have all of those or none of those or some but not all and you can check what you want there um you can add a vertical margin for each row if you want that and when you click on okay you can even come up here and type I think can you type contents yeah absolutely you can even type the contents of your table now that should be in math mode so tables can be a little bit tricky to code by hand so that's not cooperating so this is really nice to have sort of a visual way to create your table and then you hit OK and it's going to insert the code for you at least it's a good way to get started you can add more columns you I mean you can obviously edit this table now in any way that you like so let's take a look at that there we are it's pretty simple what else are we going to look at under user I want to show you this this is super helpful I use this all the time you can store bits of code and then just call them up instantly so this is really great when I am let's see which one do I want to look at well if you want to add your own you're going to go to edit user tags and then click on one you can only store up to ten so click on this one is empty we could do a new one here or we can just look at something I already have so this is something that I use often and I'm certainly not going to have this code memorized but this is going to insert a little calculator symbol so I often do this next to like calculator active problems if I'm assigning homework so I have this stored Under menu eight and I can type the code let's say um I want the little graphing calculator symbol right here so the command is slash calculator and then I need to put the code for that in the Preamble so I'm going to come up here now I can come up to user user tags and then just either click here for calculator icon or if I know the keyboard shortcut it's just shift F shift f8 so I can just do shift f8 and that inserted all of these lines of code here for me so I don't have to have them memorized now I have lots of little code Snippets that I use over and over again and I only have 10 slots to store them here in techmaker so what I actually do is open Google Keep and I store all of my code snippets on separate little Google keep notes and so I can always find them easily there as well that's another tip for you okay so that is looking good and now when I run this I've got my little calculator symbol in front of hello okay view you can turn on and off different uh toolbars options help so notice under help you do have access to a latex reference and a user manual the user manual is going to help you with tech maker specific stuff that opens that up in a separate window here but you can learn all about tech maker and the different options and if you're having trouble with some aspect of tech maker that can be helpful you also have the latex reference which you can look up different types of commands so if you want to learn more about equation arrays you can click here and then read more about equation arrays and get some sample code and some explanation on how that works or any packages you might need like this one it tells you you have to use the AMS math package if you're going to use in equation array so that can be a great resource for you as well okay let's switch over to overleaf and I'll show you how to do a few things here so I am logged in if I want to start a new project I'm going to click on new project blank project notice that there are lots of templates available though in the and overleaf has a template library with with tons and tons and tons of templates that you can use so which is really great if you're typing up a science lab report they have some templates that you can start with resumes all kinds of things but we're just going to go with blank project and we will again call this tutorial eight overleaf and that's just the title of the project but notice that when we create this that's not the title of the file I told you never never put spaces in your file name and I did put spaces in the title but that is not the name of the file the name of the file is what we see right over here main.tech and I always recommend to my students when they're using overleaf to change the name of that file because every time you start a blank project in overleaf it's going to call the file main.tech and so it just gets confusing when you have lots of files that are different but they're all called main.tech so I always recommend renaming that we'll call this tutorial 8C there we go and you can um in this this pane is like the structure pain that we had in Tech makers so if you do add more files to this project they will appear in the list here if you want to go back to the main menu you would think that you should click on menu but that is actually not going to take you back to the main menu if you want to go back to the main menu you click on this Arrow right here and that's going to take you back to this main screen here so now to go back to my project I can just click here and we've got some basic code here to get us started if you don't like what's here you certainly can type over it or delete it and start with something else you can if you're loading a template you'll have lots of code in here for you and you can just edit it as you need to so I'm not going to do much with the code I just want to point out where certain things are in overleaf and also show you how you can download copies of your Tech file and your PDF document in case you need to send it to someone or submit it to your teacher this panel right here is just like in techmaker is where we're typing our code and you have the option to switch to the Rich Text Editor I don't recommend this but I guess it can be helpful if you're really you know kind of unsure of what something is going to look like and maybe it's not compiling because there's an error this might give you an idea of what your work is going to look like but I recommend sticking to source and just working with the actual code here when you're ready to run your code you're going to click on recompile and then it will refresh and show you your PDF output over here on this panel if you are working on a small screen and you you know this is very tiny and you can't see it very well you can also collapse some of these paints so you can click on right here to go full screen and now it's just the PDF so you get a nice big zoomed in view of your work and then you can go back split screen you can also drag this separator to the left which will increase the size here and has the same effect as zooming in or you can drag it to the right this side will get smaller this side will get larger so you have some options there you can also close these panels using these little arrow symbols right here so now I've hidden that PDF panel and then I can bring it back like so if you want to share your document and have multiple people working in this same document you can do that so here's what I recommend for my students when you want to share a document don't use this option here where it says share with your collaborators I mean intuitively it seems like that's what you should do right you type in someone's email address and then you share it with them well in the free version of overleaf you are limited to how many people you can collaborate with and so another option instead of doing that would be to turn on link sharing up here turn on link sharing and then anyone with the link can edit your project if you share this link with them or anyone with the link can view your project if you share this URL with them okay so if you are working in a group of four for example this is the way you want to go turn on your link sharing anyone with the link can edit the project send your collaborators this link and they will all be able to work in the document with you you can also turn on chat and so if multiple people are working in the document you can have a chat message going on about certain things you also have the option of commenting commenting in techmaker is gray when you comment here in overleaf it's this bright blue so it's really easy to see the con actually I like that maybe I'll change that in my tech maker and make it blue instead um so it's easy to see comments that's another way you can communicate with people is by leaving comments in parts of the code but the chat is another option for you okay let's say you're done with your project and you want to download a copy of your PDF so that is very easy to do you just click on this icon right here and it downloads the PDF for you and then you can open that on your device and it'll open in whatever PDF viewer you normally use there's my PDF and it downloaded it by default into my downloads folder so I can find it there on my computer if you want to download your Tech file that is not quite as easy in fact it's much more difficult to do that especially for my students who are working on a Chromebook but if you want to download your Tech file you're going to come over here and click on menu the thing that you think would take you back to the main menu but it doesn't so click on menu and then you've got two options here if you click on PDF it's going to download the PDF but frankly the other way to do it was easier or you can click here that says Source that's what you're going to want to do you want to click on source and it's going to download not your Tech file it's going to download a zip folder and in that zip folder you will find any of the files listed here so if you've uploaded images or you have multiple text files here or whatever files here any files you have here that are associated with this project when you click on Source it's going to download all of them in a single folder and zip that folder and send you the zipped folder so that folder is called tutorial 8 overleaf that's the title of my project dot zip now on a Mac this is really easy to deal with so I just find it I just clicked on on that and said show in finder but you can also just go to your downloads folder and it's right here tutorial 8 overleaf.zip all I have to do on my Mac is double click on that and it unzips it and actually when there's more than one folder it looks a little different so let's let's go back here and add something let's add an image in here I'm going to upload and I'm just going to drag an image from my desktop okay so I've added an image here and I warned you not to have spaces in your file name so I'm going to rename this okay so now I have an image and a text file and I'm going to I want to download at least my tech file but really it makes sense to download both because no one can run your Tech file if they don't have a copy of the image you'll get a compiling error okay so let's try this again all I have to do is click on this and it's going to this was the zipped file I already had one with the same name so that's why I put the one at the end this is the zipped file and when I double clicked on it it unzipped it or sometimes we call that extracting but now I just have a regular folder this is not zipped anymore so when I look inside that folder I see all of my individual files I've got my tech file and I have my image file what I don't have here is my PDF this doesn't make sense to me why don't they just don't also include the PDF as part of this that would be nice but you you if you need both you're going to have to download them separately okay so now you have access this is in my downloads folder I can move it anywhere else I want to on my computer I can upload it into Google Drive I can upload it into my learning management system like canvas or really I can do anything I want with it and to get back to our Tech file just click on it and then that will make that the active file again so I think that covers everything I wanted to show you in overleaf and I hope you're able to use some of these tips to help you work more efficiently hello and welcome to another video in my latex tutorial Series today we're going to be talking about some common notation that you would see in calculus such as limits integrals summations and Vector notation I'm starting with a very basic setup all latex documents start with the command backslash document class and I've set this one up to be 11 point and the type of document is an article the only package I'll be using for this tutorial is the geometry package and that is simply to adjust the size of my margin so that is optional you don't have to use that the body of our document will type in between the commands slash begin document and slash end document I'm going to begin by identifying the domain and range of a function the function and now I want to enter Math mode so I type my dollar sign f of x equals and in parentheses I want x minus 3 squared so I raise that to the power 2. plus one half backslash frac and tech maker is going to fill in the rest of the command when I hit enter and I can tab to get to the next part and move my cursor outside of the braces and let's go ahead and compile this and make sure it looks the way we expect remember when you open a new document you must save it and give it a name before you try and compile it or you will get a compiling error now I usually hit F1 as a keyboard shortcut to compile my document but for the sake of the tutorial I'll probably move my cursor up here and build it by pressing the arrow that looks good we have the function f of x equals the quantity x minus 3 squared plus one half so I'm going to continue typing has domain and now to describe the domain I want to name it with capital D and I'm going to go into Math mode I want a subscript of f because it's the domain of function f colon and the domain for this function is all real numbers now we do have the option of using the symbol for all real numbers but I'm going to use interval notation so our domain goes from we're using it's an open interval so parentheses negative Infinity negative we're just typing the minus key on the calculator for the infinity it's backslash i n f t y That's negative Infinity comma and now I want positive infinity or just Infinity so backslash i n f t y close my parentheses and let's end Math mode and compile that see what it looks like okay now the one thing I would like to change is the D I don't want it to be italicized because it's in math mode letters are always going to be italicized but I can make that not in italics if I come back to my code and I type I basically wrap it with the tag math RM so backs go move your cursor in front of the D backslash math RM and then the curly brackets around the D now when we compile it our D should not be italicized but the F still is because it's outside of those curly brackets so let's finish by describing the range so the function f of x has domain from negative Infinity to Infinity and range so I'm going to do something very similar here I'm going to use a capital R for the range so I'm going to go into Math mode but I don't want the r to be in italics so backslash math RM and in tech maker you can see it's trying to complete the command for me so if I hit enter it'll type the braces for me and I can just type my r r in the center there and use the right arrow to come out of the braces we want the subscript of f colon and now our range goes from one half to infinity and I do want to include the onehalf so I'm going to use a square bracket around the onehalf to get the onehalf I'm using the command for a fraction comma Infinity so backslash i n f t y open parentheses close Math mode now let's typeset that and I have a feeling I'm not going to be happy with the way it looks let's try okay so what I'm not happy about is the square bracket here it's not large enough to surround the fraction onehalf so I explained this in an earlier video on delimiters but if we want to expand automatically expand the size of the brackets or braces or parentheses then we can change the command slightly so I'm going to find where those where that bracket is so right here I'm going to put my cursor in front of it and I'm going to type slash left and that is going to expand automatically fit that bracket to the size of what comes after it and then the parentheses on the right I also want to insert my cursor just before it and Taps type slash right so if you use the slash left then you have to balance it somewhere with a slash right the compiler will be looking for that okay so now we can see that both of those delimiters have expanded the other thing I might want to do notice that the onehalf is smaller than the three this has shrunk it to fit neatly on a line because it's in line if we wanted that to display at full size we could go back and use the display style command this doesn't bother me I think it looks good the way it is so we'll see how to use the display style in a in another example here in a moment let's move on and look at how we can type a limit and I'm going to go ahead and end this with two backslashes to give myself some more space and to type a limit the basic command in math mode is backslash l i m if I just end Math mode here and compile you can see all we get is Lim and even though we're in math mode these letters are not in italics because the compiler understands that this is a special string of letters now we want to adjust this we want to take the limit of something and we want to take the limit let's say we want to take the limit as X approaches a I'm going to use another command backslash limits and that is going to be followed by I'm trying to get as X approaches a so underscore and then in curly brackets I want to type X and then an arrow and then a so the symbol to get that right arrow is backslash 2 t o a and I'm going to close my curly brackets and now we should see when we compile it the limit as X approaches a okay if I did not use this limits take that out and recompile as X approaches a will not be underneath the Lim it will still be a subscript because we used that underline but it's going to appear to the right which you may want I don't like it like that so I'm going to go ahead and put the backslash limits command in front and now the X approaches a will be underneath the word limit if I want to take the limit and we have to take the limit of something so let's come back and add our function in general let's just call it f of x so we want the limit as X approaches a of f of x if I want to take the left hand limit the limit as X approaches a from the left I just come back to my code and after the a use the carrot you can type a plus if you want to approach from the right hand side if I want to approach from the left hand side I'll type A minus okay let's do one more example with limits we want the limit so backslash Lim and to make the notation look a bit nicer I'm going to use backslash limits underscore and I want again just the limit as X approaches a so in my curly brackets X backslash 2 t o the limit as X approaches a close my curly brackets and this time I'm going to use the definition of derivative at a point so the limit as X approaches a of now I want the fraction f of x minus F of a over x minus a so backslash frac in my numerator that's the first set of curly braces or curly brackets we're going to type f of x minus F of a in the denominator so this goes in the second pair of the curly brackets x minus a and that let's come outside of the brackets there is equal to F Prime of a so F and I'm just hitting the apostrophe for that Prime symbol of a close my math mode Let's compile this and see how it looks all right I forgot to end my line with two backslashes that'll give me a little bit more space in between there now this looks good but the fraction is displaying rather small and that's because it's trying to fit it nicely in with the line but I want to make it look normal size so I'm going to come back to my command and wrap the entire thing with display style backslash display Style curly bracket and then at the very end before the last before I exit Math mode put the closing curly bracket and let's compile this again okay so now the fraction looks much larger same size as the rest of the notation and that line with two backslashes and now let's look at how to type set in integral in math mode we're going to start with backslash int for integral let's take the integral of sine of x now if I just type S i n when I compile that it's going to be italicized I don't want that so for sine cosine tangent all the trig functions we do backslash first so backslash s i n of X and that should give me the integral of sine X now I also need my DX I can type DX just like this close Math mode Let's see what that looks like now notice that the X and the DX are kind of look like they're running together there so what I like to do here is just force a space to be inserted between those because remember just because you type type a space over here in the code doesn't mean it's going to appear as a space when you compile your document but to force a space right there I'm going to hit backslash comma so let's compile that and see if it makes a difference okay good so now there is a space between my X and my DX now if you don't want the d italicized we saw as we did when we were typing domain and range how we can wrap that lowercase D with the backslash math RM tag and it wouldn't be italicized but the italics don't bother me with the DX so I'm going to leave it like that let's go ahead and solve this integral so the integral of sine X DX equals negative cosine X so I'm going to do backslash cosine X now let's talk about spacing for a moment over here I left a space in between or in front of this slash sign that's optional I didn't over here but I did leave a space between the S and the X here otherwise the compiler might get confused and think your command is backslash cos x all is one thing so we want to separate that with a space and let's not forget R plus C very important and we'll compile that and there we go if I want my integral sign to be longer so when you see it in a textbook you see it online usually it doesn't look that short and it's shrunk here to kind of make it fit in that line neatly but we can expand that simply by using display Style so backslash display Style curly bracket and then just before we end math mode put the closing curly bracket and that elongated that integral symbol next let's look at a definite integral so we also start with backslash int that's the command for integral but this time we need to show that we want to take the integral from A to B now I can simply use an underscore and type a carrot B let me close Math mode and see what that looks like okay so that gives me the short integral but it is going from A to B and my lower limit and upper limit of integration appear to the right of the integral symbol we can also use backslash int with the backslash limits command underscore a carrot B and now we have an integral where the A and the B are not to the right of the integral symbol but they're above and below the symbol so you can decide which one of those you prefer if you want the integral symbol elongated simply wrap it with display Style I'm going to just copy those last two commands and we'll see what they look with display Style in front okay so we get logger integrals which sometimes looks nicer let's continue working with our definite integral to talk about some problems you may encounter along the way if you're one of your limits is more than one character then just using the carrot is not going to be sufficient so for example let's say for some reason you wanted to go from 2A to B let's see what happens when we compile this okay that's probably not what you were expecting to see so the what we're going to do to fix this is after the underscore the lower limit you want to wrap that in braces or curly brackets and then we can do the same for the upper limit now if it's just a single character it's not going to be a problem but if you have more than one character you will need to do that so just to be on the safe side you can always use the curly brackets then you shouldn't run into any trouble there so now we have our integral with the lower limit of 2A and the upper limit of B let's go back to Just A and B I'm going to keep the braces okay now I'm moving my cursor in front of the last curly bracket because that goes with the display style command so let's take the integral of something let's take the the integral of x squared DX and remember I want to insert a space just typing a space is not going to insert a space when I compile this so I'm going to use backslash comma DX and we'll compile that make sure it looks good so we have the integral of x squared DX from A to B and that is equal to now there are a couple different notations you might see for evaluating a definite integral I usually use the square brackets around the expression so I'm going to type the square bracket for the left side when we integrate this the antiderivative for x squared is X cubed over three so I could write 1 3 x cubed I'm just going to go ahead and write X cubed over 3 so I want the fraction x cubed over 3. because this is a definite integral we need to input our lower limit and upper limit so let me end with a square bracket and then to get my limits on there I'm going to use the underscore and then lower limit of a carrot upper limit of B so again if it's a single character you don't have to wrap it with the curly brackets but to be on the safe side we can go ahead and do that and just so you're familiar with the notation okay now let's see what we what that looks like because I have a fraction I have a feeling I'm not going to be happy with the brackets okay so the lower limit and upper limit do appear in the correct place in relation to the bracket but the bracket needs to be expanded to the height of the fraction so I'm going to go back where I typed my opening square bracket and in front of that backslash left where I typed my closing square bracket in front of that I type backslash right and we'll compile that and that looks much better and let's go ahead and finish evaluating our integral here so that is equal to backslash fraction B Cubed in the numerator over 3 in the denominator and I need to move my cursor to the right so that I'm outside of that first fraction and now it's minus we plug in our lower limit of a so I need another fraction backslash Frac our numerator is a to the power 3 denominator 3. let's compile that the next thing we're going to look at is summation notation to get the capital Sigma we're going to use the command backslash sum if I compile that it's going to be pretty short so usually that is written much larger than the text beside it so we can make it larger using display style backslash play style curly bracket and we go to the end and put the closing curly bracket if I compile that now you can see the size is much larger we want our sum to go from n equals 1 to Infinity I'm going to use backslash limits so I'm going to use then an underscore and on the bottom I want n equals one that's not a single character so this time I have to use the curly brackets n equals one close the curly brackets use the carrot and now we're going to type our upper bound so this time I want to go to Infinity so in the curly brackets I'm going to type backslash i n f t y and close the brackets let's compile and see what we have there okay so we have the sum from n equals 1 to infinity and let's keep going with that I need to be in front of the last curly bracket because that closes the display Style and we want to take let's see the sum of let's do geometric series a times R to the power n and that is equal to let's go ahead and compile so we can see where we are I'm going to go ahead and expand that sum so that is equal to a plus a times R Plus a times r squared Plus now I want dot dot dot plus my nth term a times R to the power n let's compile and see what we have I have the dot dot dot but the dot dot dot should be centered vertically so that it's kind of aligned with the horizontal crossbar of the plus sign and instead of typing dot dot dot there's a command for the three dots I don't need to insert space between it but just to keep the code nice and clean I will and that command is slash if you just want a single dot it's C Dot if you want the three dots put an S at the end backslash C Dots so when I compile this those three dots should be vertically Centered for our next command we're going to put all of this stuff together and give the definition of a Riemann sum using a definite integral so let's open Math mode and the first thing I want to type is the definite integral of f of x from A to B so we're going to do display Style open curly brackets I'm going to go ahead and end them and end the math mode and then just type in between those brackets so we're starting with an integral so backslash int underscore and then a carrot B my function will just be f of x and then to insert a space here backslash comma DX equals let's compile just make sure we don't have any errors to this point and everything looks the way we expect okay with the integral from a to b f of x DX is equal to now we want the limit as n approaches Infinity so backslash Lim I want to use backslash limits so that the X approaches Infinity part appears underneath the Lim so underscore curly brackets X and then to get the arrow backslash 2 to Infinity backslash i n f t y closing curly brackets so that should say the limit as X goes to Infinity let's compile make sure we're doing everything correctly that looks good let's put my cursor back in front of the last curly bracket because we still want to be working inside of display style now I want the sum as K goes from 1 to n so backslash sum backslash limits underscore and I want k equals 1 on the bottom so in curly brackets k equals one close that carrot on the top I just want n the curly brackets are optional since it's a single character so let's make sure we have our sum displaying correctly good now we want to take the sum of f of x sub K so X underscore K and I don't think I need to expand the parentheses we can see what it looks like when we type set it times Delta X now this is optional but I'm going to go ahead and put the dot to indicate multiplication so backslash C dot that will be a single dot centered vertically and I'm multiplying that by Delta X now to get the Delta symbol for those Greek letters it's backslash and the name of the letter but if I just type all lowercase Delta X I'm going to get the lowercase Greek letter so let's see what happens there okay so I've got my f of x sub K the parentheses look fine I don't need to expand them I've got my DOT and that is not what I wanted to see for Delta X so the Delta symbol the triangle is actually the capital letter in the Greek alphabet so we're just going to go back and instead of lowercase T it's backslash Delta with an uppercase d and pile that again and now I have my Delta X we have one last thing to look at that you might run into in calculus notation and that is vectors so to get the vector symbol it's simply backslash v e c and then in curly brackets what you want to put the symbol over so I'm going to call this vector v ector V is equal to and let's do the IJ notation so we have our first component V sub 1 times Vector I so backslash v e c Vector I plus v sub 2 so V underscore 2 times Vector J so backslash v e c and J in the curly brackets and that is equal to if we want to write this in component form I like to use angular brackets so it would be for the left angular bracket it's backslash l angle and that's going to insert the bracket so now we need our first component V sub 1 comma our second component V sub 2 and then we want the closing bracket the right angular bracket so backslash r angle and that should do it let's close math mode compile and see how that looks and I forgot to put two backslashes earlier to give myself a little more vertical spacing okay that looks good so vector v equals V1 times Vector I plus v sub 2 times Vector J we're in component form just V1 comma V2 in the angular brackets and that concludes this tutorial on calculus notation
