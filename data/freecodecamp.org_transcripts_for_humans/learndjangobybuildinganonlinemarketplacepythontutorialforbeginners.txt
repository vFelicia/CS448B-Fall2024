With timestamps:

00:00 - learn Django by building a simple Online
00:03 - Marketplace Django is a python framework
00:06 - that makes it easier to build websites
00:08 - with python Stein with code from Stein
00:11 - teaches this course Stein is a very
00:14 - experienced course creator the project
00:16 - you develop in this course features
00:19 - authentication communication between
00:21 - users a dashboard for items form
00:24 - handling and more in this tutorial I'm
00:27 - going to show you how to build an online
00:28 - marketplace where people can sell and
00:30 - buy new and used items first I just want
00:33 - to show you a little demo of the project
00:35 - so you know what we are going to build
00:41 - okay so here we can see the front page
00:44 - of the project we are building you have
00:46 - a simple menu with a few items you can
00:48 - go to the inbox dashboard you can browse
00:50 - items and you can create a new one on
00:53 - the front page the six newest items will
00:55 - be showing and at the bottom you can see
00:57 - the categories you'll also see how many
00:59 - items that belongs to each of the
01:01 - categories
01:04 - and if you go to for example new item
01:06 - you should be able to select the
01:07 - category for item fill out information
01:09 - at the name description price and add
01:13 - image
01:14 - the browse page you should search in
01:17 - title and the description of the product
01:20 - and you can go to categories if you just
01:22 - want to see toys for examples and you
01:25 - can clear the filters
01:27 - in the inbox you should see
01:29 - conversations that you have with other
01:31 - users and you can go into here and you
01:34 - can talk directly to the owner of an
01:36 - item you can also go into an item here
01:39 - and click contact seller if you want to
01:42 - do that on the dashboard you have your
01:44 - items here you can edit them and delete
01:47 - them so if you go into one of these then
01:50 - you have two buttons here edit and
01:52 - delete and on edit page you can just
01:54 - fill out information just like you did
01:56 - when you created it and you can set here
01:59 - if it was sold or not
02:03 - I'm going to begin by installing and
02:05 - setting up everything we need and then
02:07 - build the project piece by piece I would
02:10 - recommend that you know the basics of
02:11 - HTML before you start this course
02:15 - because I'm going to focus mainly on
02:17 - Django and a little bit of Tailwind
02:19 - okay let's get started building the
02:22 - project
02:25 - so first I go to a command line and the
02:28 - first thing I want to do here is to set
02:29 - up an environment that Django can work
02:31 - in Python comes with a built-in virtual
02:34 - environment called then which I'm going
02:36 - to use
02:37 - right now I'm inside a folder called
02:39 - puddle which is the name of our project
02:43 - then to create the environment I just
02:45 - run the command Python 3
02:48 - Dash M then and then the name which is
02:51 - just EnV what this command does is that
02:53 - it creates a virtual environment called
02:55 - EnV a virtual environment is an isolated
02:58 - little environment on your computer
03:00 - where you can install pattern packages
03:02 - like Django just for this project
03:06 - this makes it really easy to maintain
03:08 - deploy and similar
03:10 - in order to have the environment created
03:12 - we can activate it by running stores EnV
03:15 - bin activate
03:19 - and then you can see here that the name
03:20 - of the environment is prepended before
03:23 - the project name
03:25 - and when it's activated we can install
03:28 - Django busing pip install Django
03:31 - this will now install the newest
03:33 - unstable version of Django and if you
03:35 - dependencies that Django has
03:38 - great
03:40 - so the last step of this setup now is to
03:43 - create Django project and we can do that
03:45 - by running Django Dash admin start
03:48 - project and then the name which is
03:51 - puddle
03:52 - great so let's go into this CD puddle
03:56 - just to see what files we have there
03:59 - so we have a managed.pi and a puddle
04:02 - folder let me just go to visual studio
04:05 - code which I'd like to use where I have
04:07 - open up this folder with environment and
04:09 - the Django project
04:12 - so this manage.pi file is sort of a
04:15 - script for running administrative tasks
04:17 - like updating the database structure
04:20 - adding super users running the
04:22 - development server and similar
04:24 - plus you have another folder here with
04:27 - the same name of the project
04:30 - asgi.pi and wsgi Pi are entry points for
04:34 - the web server and you don't have to
04:36 - think about these files at this moment
04:39 - these are only going to deploy a project
04:41 - to a live server
04:44 - and then you have settings.pi which is
04:47 - kind of like a global configuration for
04:49 - the whole project
04:51 - here we have secret Keys installed apps
04:54 - and where templates are located
04:57 - information about the database how we
05:00 - want the password to be structured and
05:02 - similar
05:03 - and the last file is the urls.pi this is
05:07 - a file that can be thought of of like a
05:09 - table of contents for the whole project
05:11 - so this area will link the URL to a
05:14 - specific View
05:16 - so I'm not going to explain these files
05:19 - more right now it's easier to do that
05:21 - when we start using mm so you have some
05:23 - context
05:24 - okay let's go back to the command line
05:26 - and then we're going to run the Django
05:28 - development server and just to see that
05:30 - everything is okay
05:32 - and to run this with just a python
05:34 - Dimension by run server
05:37 - then you can see here that you get the
05:39 - warning I will come back to this later
05:42 - right now we can just copy this address
05:44 - and go to browser I like to use Google
05:47 - Chrome
05:49 - and then just paste it here
05:51 - then you can see here the install worked
05:53 - successfully congratulations nice
05:57 - so now that we have everything up and
05:59 - running we can create our first Django
06:01 - app
06:04 - a Django app is a folder with some files
06:07 - it's used to separate the views
06:09 - templates database models and similar
06:11 - for a specific part of a project
06:15 - for example the pages like the home page
06:17 - contact about and similar will each be
06:19 - stored in one Django app but we will
06:22 - also have one app for conversations and
06:26 - one app for items and so on but we'll
06:29 - come back to this later
06:30 - right now I just want to focus on the
06:32 - front page so I want to begin by
06:35 - creating a new Django app called core
06:37 - and to do that I need to go back to the
06:39 - command line stop the web server and
06:42 - then say python managed by see here that
06:45 - we use this file now
06:47 - start app and then core
06:52 - and this will now create a new folder
06:55 - with a few files so we can see that we
06:57 - have it here
06:59 - we have the migrations which is
07:01 - information about the database this is
07:03 - generated by Django so you don't have to
07:06 - think about it right now
07:08 - admendous pie is where we register the
07:10 - database models to be used inside the
07:13 - Django admin interface
07:16 - dot Pi is like a configuration file but
07:19 - just for this specific app
07:22 - models.pi is where we Define database
07:25 - models like information about what we
07:28 - want to store for an item for example
07:30 - the title description price and similar
07:34 - test.pi is where we can run automated
07:36 - tests and similar for this app
07:39 - and views does Pi is where we Define
07:41 - views for the app
07:44 - so it can be a bit hard to understand
07:45 - what all these files do but I promise
07:48 - you that you will get a better
07:49 - understanding of them when we start
07:51 - using them
07:52 - and now that we have created this app
07:54 - it's almost ready to be used we just
07:57 - need to tell Django that app exists and
07:59 - they're going to use it
08:01 - so if we go back to settings.coin you
08:04 - can see here that we have a little
08:05 - segment called installed apps we have a
08:08 - few of these built-in apps here already
08:11 - and then at the bottom you can add core
08:14 - and the functionality that comes from
08:17 - these built-in apps is something that
08:19 - most djangos that's used at some point
08:21 - for example you have the admin interface
08:23 - where we log in and can add the data to
08:26 - the project we have one for handling
08:28 - sessions a one for handling
08:30 - authentication and similar
08:33 - I will come back to a few of these later
08:35 - in this video so since you know I added
08:38 - core hair Django knows that this exists
08:41 - and is going to be used
08:43 - so then we can begin setting up the
08:45 - front page
08:47 - so if I just close this and find
08:49 - views.pi we can create our first View
08:52 - So Def index
08:54 - then we pass in a parameter called
08:57 - request this is information about the
08:59 - browser your IP address if it's a get or
09:03 - post request and similar
09:05 - so this has to be put in on all views
09:08 - that we use
09:10 - and then we just want to render a
09:12 - template very quickly by saying return
09:15 - render and we Post in the request
09:17 - parameter so this will now be available
09:19 - inside the template
09:22 - and then the template we're going to use
09:24 - which is core slash index.html
09:28 - and save so this is how simple a view
09:32 - can be
09:33 - and now that we have the view we can
09:36 - create the template so inside the core
09:38 - folder create a new folder called
09:41 - templates
09:42 - Django will automatically look for a
09:44 - folder called templates inside all of
09:46 - the register apps in the installed apps
09:48 - section
09:50 - and then inside the templates folder I
09:52 - want to create one more folder called
09:54 - core
09:57 - this refers to the core from The View we
10:00 - just created so this folder so Django
10:03 - automatically find this folder and then
10:05 - it will find the core index file in here
10:10 - and then in here we can just create a
10:13 - new file called
10:14 - index.html and this will do something
10:17 - like this so we add the doctype HTML
10:21 - the HTML tag head
10:24 - and then here we can set up the meta
10:26 - chart set
10:28 - charge it utf-8
10:31 - and then we can set up the viewport meta
10:33 - name view Port content this is so that
10:38 - page can be a mobile friendly
10:43 - width equals device Dash width and
10:47 - initial Dash scale s1.0
10:53 - and then I want to include Tailwind as a
10:56 - CSS or as a CDN so script SRC HTTP test
11:02 - colon slash
11:03 - cdn.tailwind css.com
11:07 - and then we can just close this tag
11:11 - right like that now we can add a title
11:13 - to the page title puddle close this one
11:17 - title close the head
11:20 - create an important tag and then in here
11:22 - you can say div class p x 6 py6 space in
11:28 - here and H1 the front page then we can
11:33 - oops sorry closed H1 close the div close
11:38 - the border and close HTML and Save
11:42 - so the last step now is to add this to
11:45 - the urls.pi file
11:47 - so if I just open up the folder here
11:50 - again and find puddle URL step by
11:53 - then we can import The View we just
11:55 - created so from
11:58 - core.views import index
12:01 - and we can add it to the top of the URL
12:04 - patterns path set the path to be empty
12:07 - since this is the front page
12:09 - and then we want to use the view called
12:11 - index now we can set the name for this
12:13 - to be index
12:15 - and Save
12:17 - so if I now go back to
12:21 - here again that we can run the server
12:24 - go back to Chrome and refresh and now
12:28 - I'm at the front page and we can see
12:30 - here that I have space above and on the
12:32 - side and this is now H1 from Tailwind
12:35 - nice
12:37 - okay so now that we have all of this we
12:39 - can create a new page a page for the
12:41 - contact information
12:43 - but let's begin by fixing up the front
12:45 - page a little bit first
12:47 - because right now all of this code is
12:49 - inside index.html file I want to move
12:52 - most of the code into a new file called
12:54 - base.html which the index.html file
12:58 - should extend this way we can reuse the
13:01 - code for more templates throughout this
13:03 - project
13:04 - so inside the same folder as index.html
13:08 - we can create a new file called
13:11 - base.html great so here I can actually
13:15 - just copy all of the code from the
13:19 - index.html copy this and paste it here
13:24 - and then save this
13:26 - actually I can take this cut it out save
13:31 - and then in index.html file to now
13:34 - extend the base file we can say extends
13:39 - core slash base dot HTML
13:42 - then below here and just paste this
13:44 - title
13:46 - so now this will make sure that we
13:47 - extend the best.html file but the
13:50 - content is missing so if I go to the
13:52 - browser and refresh the title is gone
13:56 - so we need to introduce something called
13:58 - a code block
13:59 - so let's go back to paste.html and add
14:02 - that inside this div here so block
14:06 - content
14:08 - and close it and block
14:11 - this will not help yet but if I copy
14:13 - this go back to HTML index.html
14:17 - wrap it around the content here
14:20 - then we make sure that everything we put
14:23 - in here will be rendered automatically
14:25 - in here by Django 7 now refresh you did
14:30 - that the title is gone but the content
14:33 - from here
14:35 - uh sorry this doesn't have to be inside
14:37 - all of the templates nice
14:40 - so let's add one more code block to the
14:43 - base.html file for the browsers tab
14:46 - title so in here
14:48 - you can say block title
14:51 - and then and block
14:54 - space and then we pipe it like that
14:57 - so then on the index.html file create
15:01 - the same code block block title
15:05 - and now we can say welcome here
15:08 - and block and then welcome will
15:11 - automatically be put here in front of
15:13 - the pipe pedal
15:15 - see if I now refresh it will say welcome
15:17 - pedal nice
15:20 - great so now we can continue to the
15:22 - contact page let's begin with the view
15:25 - so in views.pi we create a new view
15:27 - depth contact passing the request
15:30 - parameter return render request course
15:35 - Dash contact dot HTML and Save
15:39 - then we can create a template so let's
15:41 - just copy everything from index.html
15:44 - create a new file we'll paste this and
15:48 - save it as contact.html in the same
15:51 - folder
15:52 - then we can rename the title of the of
15:56 - the page to contact and then the contact
15:59 - page
16:01 - then we need to add this to the URLs
16:04 - also so let's begin by importing it
16:07 - contact
16:08 - and import contact and remember to end
16:12 - this with the Slash let me pause in
16:14 - contact here that the name to be contact
16:18 - and the name we put in here would make
16:21 - it easier to reference this URL later in
16:25 - the project
16:26 - so if I now go to the browser and just
16:29 - manually go to contact
16:31 - then you will see that we are on the
16:33 - contact page perfect before we dive
16:36 - deeper into Django I just don't add a
16:37 - menu and a footer so let's go back again
16:40 - to base with HTML and edit there
16:43 - so base.html
16:46 - and then above here add a new no close
16:51 - py6 PX
16:54 - 6 Flex because we want items to be next
16:58 - to each other
16:59 - justify Dash between so that all space
17:05 - is put between the logo and the links if
17:09 - you remember from the demo
17:11 - and then items Center so that the links
17:15 - is on the same height as the logo
17:18 - and then we want the border on the
17:19 - bottom one pixel so border Dash B for
17:24 - Border bottom and the color for the
17:26 - Border can be border Dash gray 200
17:30 - and then close the navigation bar like
17:33 - that
17:35 - and then on the left side we want a logo
17:38 - so a hrf
17:41 - slash I'll add a close to this text Dash
17:44 - XL
17:46 - and we want the form to be summable so
17:49 - font oops font semi bold
17:52 - purple
17:54 - so let me save now go to the browser see
17:58 - if this is correct yes so I don't have a
18:00 - navigation bar here which is white with
18:02 - the border on the bottom and then the
18:04 - logo to the left here nice
18:08 - and then I want some items on the right
18:11 - side here
18:12 - so then I need to create a new div oops
18:16 - div close
18:19 - space Dash X6 and this will
18:22 - automatically now add a space between
18:25 - each of the items I put in here
18:28 - so first can you begin with the new item
18:31 - link a hrf it's going to just be empty
18:35 - for now close text XL
18:39 - oh sorry text LG
18:41 - front semi bold
18:44 - and when we hover this I want it to be
18:46 - gray so hover colon text Dash gray 500
18:51 - new item
18:54 - so let me see if this looks good
18:57 - yes so now it's put here on the right
18:59 - side and when I hover it it becomes gray
19:02 - nice
19:03 - so let me copy this to make a browse
19:06 - link
19:09 - browse
19:11 - and then I want to sign up a button and
19:14 - a login button so this looks a little
19:17 - bit different so I just want to create a
19:19 - new element H or if can just be empty
19:22 - for now
19:23 - close
19:24 - and this I want to have some padding so
19:27 - px-6 and py3 text can also be LG and the
19:33 - font can be semi bold just like a pair
19:37 - but I wanted to have a background so PG
19:40 - teal 500 this is a dark green color then
19:43 - I want to set text to be white
19:46 - I want the corners for the button to be
19:48 - around that so I can either rounded Dash
19:51 - XL
19:52 - and when we hover this I want the
19:54 - background to be a little bit dark or
19:56 - green so hover PG teal 700
20:01 - and then we add the title sign up
20:05 - even I'll make a copy of this we can do
20:08 - the same thing for the login a sec I
20:10 - want this to be gray 500 and gray 700
20:15 - when we hover this
20:16 - then just replace the title with log in
20:19 - and Save
20:21 - so if I go back now refresh we have the
20:23 - new item browse and then these two with
20:26 - the hover functionality
20:29 - great
20:31 - then I wanted a very simple footer here
20:33 - as well
20:35 - so the nice thing is now that for
20:38 - but before I go there I just want to
20:40 - show that this comes from the base.html
20:42 - file so if I go to front page the menu
20:45 - is there as well that's what's so nice
20:47 - about extensions so let's go back to
20:51 - base.html and create the footer So Below
20:54 - this div you can add footer
20:57 - oops footer close
21:01 - py-6px-6
21:05 - Flex justify between just like up in the
21:09 - menu and we got the b g the background
21:12 - to be BG gray 800 so it's a dark gray
21:15 - color
21:16 - I can close this
21:19 - I'm done in here on the left side I want
21:22 - information about the project div clause
21:26 - W 2 3 so this will take up to a third of
21:31 - the footer
21:32 - padding rate can be set to 10.
21:35 - close this one
21:37 - and then in here I want the title so H3
21:41 - class
21:44 - mb-5
21:46 - front semi bold
21:49 - and this can be text Gray 400
21:52 - about
21:54 - so we can save this now see what this
21:57 - looks like
21:58 - refresh so here I have the dark footer
22:01 - and then the title and down below here I
22:04 - want just a little bit of random text
22:06 - some lorem ipsum so P close
22:11 - text LG text Gray 500 or if blah blah
22:18 - blah
22:21 - so just copy paste and close the
22:23 - paragraph
22:26 - so then we have a little bit information
22:27 - about the project here
22:29 - then on the right side I want one more
22:31 - menu where we can link to about page to
22:34 - contact privacy terms of use and similar
22:38 - so here with a div close
22:41 - W1 slash three
22:44 - this doesn't need any padding
22:48 - and then here we had just make a copy of
22:50 - this title
22:52 - same menu instead
22:55 - and then I want to use a UL for the menu
22:58 - so you are close space Dash Y dash 2 so
23:03 - each of the elements in here have some
23:05 - space between them close the URL and
23:09 - then Li a hrf can just be empty for now
23:13 - close text
23:15 - LG
23:17 - textile 500 so it's a green color
23:21 - and when we hover this I want this to be
23:23 - a little bit darker green color so text
23:26 - teal 700
23:28 - but
23:30 - closed link and close the Li
23:33 - so let's see what this looks like now
23:35 - don't have the menu here
23:37 - nice
23:38 - so let's add a few more elements here
23:41 - I mean that is the contact
23:45 - oops
23:47 - privacy
23:50 - and then we have the terms as well as
23:53 - terms of use
23:56 - privacy policy to be correct
23:59 - nice so if I refresh now we have the
24:01 - menu and everything we need
24:04 - so now I just want to activate this link
24:06 - here
24:09 - and let me go back here and then I want
24:12 - to use a code called URL let me just
24:17 - pass in contact and then Django will
24:20 - automatically use this URL function to
24:23 - find contact
24:25 - hair and give us this URL so if I
24:29 - refresh now click this one and I'm sent
24:31 - to the contact page nice
24:34 - by the way if you want to learn even
24:36 - more Django from me then check out my
24:38 - channel code with Stein you can find a
24:40 - link in the description below great now
24:43 - that we have the core app with a few
24:45 - pages it's time to start working on the
24:48 - categories and the items and for this we
24:50 - need one more Django app
24:54 - so go to the command line stop the web
24:56 - server then say python manager by start
25:00 - app
25:01 - item
25:03 - I want both of the categories and the
25:05 - item to be located in this app
25:08 - so that we need to register this with
25:11 - the Django so let's go back to
25:13 - settings.pi and add it in the list here
25:15 - save and we can close this
25:19 - so I want to begin with the categories
25:21 - since this is the simplest database
25:23 - model
25:26 - so if I just open up the browser here
25:28 - again find the item models.pi
25:32 - then we can create a new database model
25:34 - but then close
25:35 - category pausing models.model just so
25:39 - Django knows what we are using
25:42 - and the categories should only have one
25:44 - field which is the name so name equals
25:47 - models.char field
25:50 - and we need to set the max length there
25:52 - we can set this to 255 so don't have any
25:54 - limitations
25:55 - so then when we are created a database
25:58 - model we need to update the database by
26:01 - going to the command line and set python
26:04 - manage by make migrations
26:07 - so now you can see here that migration
26:10 - is for item we want to create a new
26:12 - model called category and if I open up
26:14 - the migrations folder and we have a new
26:17 - file here
26:18 - then you can see here what this is going
26:20 - to do so it's going to create a new
26:22 - table called category with the ID field
26:24 - and the name field
26:28 - so now that we have done this we just
26:30 - need to tell Django to actually execute
26:32 - this script and that's very easy we just
26:35 - python managed by migrate
26:39 - so now you can see here that it created
26:41 - it down here the item.001 and also a few
26:45 - other database tables this is from the
26:48 - authentication and similar that Django
26:51 - comes with
26:52 - now this warning should also be removed
26:56 - so to make it possible to add data or
26:59 - categories to your project we need to
27:00 - log into the admin interface and to do
27:03 - this we need a user so let's create one
27:05 - python managed by create super user
27:11 - admin
27:12 - admin at turtle.com and then a password
27:17 - then the super user created successfully
27:19 - then we can run the web server again try
27:22 - to log in
27:24 - so if I just copy this go to new tab
27:26 - slash admin
27:28 - then I need to log in with the user I
27:30 - just created
27:34 - okay so now you can see here that we
27:36 - have the authentication authorization we
27:38 - have users where is the admin user I
27:41 - just created but category model isn't
27:44 - there even though the database should
27:46 - have it already
27:48 - but you need to just tell Django that we
27:51 - want the database table to show in the
27:54 - admin interface so if you go to item and
27:57 - add the main.pi then we can first begin
27:59 - by importing the category model here so
28:02 - from dot models import category and I
28:06 - can say dot models because this admin.i
28:09 - file is in the same folder as models
28:12 - and then to register it we just say
28:14 - admin.site to register pass in the
28:17 - category
28:19 - so if I now go back and refresh the item
28:22 - that appeared here and we have the
28:25 - categories database table here nice
28:29 - let's try to add a few if I just click
28:32 - add let me add the toys I can add the
28:37 - furnitures
28:39 - I can add um
28:42 - clothes
28:45 - and save so if you see here now I see
28:48 - two things that I just want to fix first
28:51 - of all categories is misspelled that's
28:53 - because Django just automatically adds
28:56 - an add an S to the end of the app name
28:59 - but this should end in IES
29:02 - and same here category object three
29:05 - doesn't tell me anything about what this
29:07 - actually is so we need to set the string
29:10 - representation for this clause
29:13 - so if I just go back to the model Supply
29:15 - we can begin with the categories name
29:20 - so Class Matter
29:23 - and then we say verbose name plural
29:28 - categories
29:31 - and Save
29:32 - a very fresh now you can see here that
29:35 - this is now spelled correctly
29:37 - then I want to show the name of the
29:39 - category here so now we need to override
29:42 - the string representation so depth Str
29:45 - self return self.name so I just want to
29:49 - show the name the value from here
29:53 - it's even now refresh is it closed
29:55 - Furnitures and toys nice
29:58 - thing I just want to do now is to order
30:00 - this by name and this is also done in
30:03 - the meta which is kind of options for or
30:06 - configurations for the model so ordering
30:10 - name
30:12 - and since this is a typical we need to
30:14 - add a comma here since this is a
30:17 - iterable
30:20 - so refresh then everything looks great
30:22 - there nice
30:24 - and then I want to go to the next
30:26 - database model which is the item model
30:31 - so below here because I close item
30:34 - because in models.model
30:38 - I want this to have a name as well so I
30:41 - can just copy this paste it
30:44 - and I want the description so
30:47 - description equals models dot text field
30:50 - so this is now expected to be much
30:53 - longer than 255 characters that's why I
30:56 - want to use a text field and not a chart
30:57 - field
30:59 - I guess the blank equals true and null
31:01 - equals true in case the user doesn't
31:04 - want to provide a description for the
31:06 - project
31:07 - and then I want the price for the price
31:10 - field so price equals models.float field
31:15 - and I want a Boolean field to Mark if
31:20 - it's sold or not so is sold equals
31:24 - models.bully in field default should be
31:27 - just a defaults
31:30 - and I want to know when this was created
31:33 - so created at equals model dot date time
31:37 - field and I just want to add this
31:39 - automatically so then I can just add
31:42 - here Auto now add equals true then
31:45 - Django will handle this for us
31:48 - but I also want to know who created this
31:51 - so create that at night created by
31:54 - equals model dot foreign key now this is
31:58 - a index in the database between this
32:01 - item and the user for example adding a
32:04 - new user
32:05 - so here I can pass in the user which I
32:07 - will import very soon
32:09 - and then I need to set something about
32:11 - the related name to items so it's very
32:14 - easy to get all of the items belonging
32:17 - to a specific user
32:19 - and then the last parameter that we need
32:21 - here is the on delete models dot Cascade
32:23 - so if a user is deleted all of the items
32:27 - will also be deleted
32:31 - so now we can see here that I get an
32:33 - error because user is not defined so I
32:36 - need to imported a pair from
32:39 - django.comtrib dot auth dot models
32:42 - import user
32:45 - then the warning is now gone
32:48 - also I want one more foreign key after
32:50 - the category so category equals models
32:53 - Dot foreign key for send category
33:00 - and then we can set the related name
33:01 - here also to items and on delete models
33:05 - dot Cascade so if you delete the
33:08 - category all of the items belonging so
33:10 - let's category will also be deleted
33:13 - so the last field I want to add now is
33:15 - the image
33:17 - so for example below the price we can
33:20 - use the image equals model dot image
33:23 - field
33:24 - then I want to specify where on the
33:27 - server I want this to be uploaded so
33:29 - upload to
33:32 - item images and then Django we create
33:35 - this folder for us if it doesn't exist
33:38 - blank equals true and no equals true in
33:42 - case the user doesn't want to provide an
33:44 - image so if I now save we can go and
33:48 - update the database again so just go
33:50 - back to the terminal stop the web server
33:53 - then you can see here that I can't use
33:55 - the image view because pillow is not
33:57 - installed I'll just sort this I just
34:00 - need to run this command so clip install
34:02 - pillow a pillow is a python library for
34:06 - handling images like resizing saving
34:09 - them and similar
34:11 - so now that this is gone add-on I can
34:14 - run the make migration script again
34:16 - and you can see here that I changed the
34:18 - meta option for the category and I want
34:21 - to create a new model called item
34:23 - and then just pattern matched by migrate
34:28 - so the last step 10 or the next step is
34:32 - to register this in the atom interface
34:34 - again so import item and admin.site
34:38 - register item and Save
34:41 - so if I now go here refresh okay sorry I
34:45 - need to run the server again of course
34:48 - refresh and then I have the items here
34:51 - but before I can create any one I just
34:54 - need to do some configuration for the
34:55 - images
34:58 - so if I go to the settings.pi
35:02 - scroll down we find something called
35:04 - Static files this is formable CSS files
35:07 - and similar as you can see here but I
35:10 - need to do the same thing for the media
35:12 - files so media URL should be media slash
35:18 - and then where the root folder for the
35:21 - media file should be so media root
35:24 - equals base there
35:26 - slash media
35:28 - so now this will create a media folder
35:30 - inside the root folder of the project
35:33 - this variable is defined at the top pair
35:36 - unless just the root folder for the
35:39 - project
35:41 - so now we can try to add a few of these
35:45 - so if I click add item and I select the
35:48 - categories toys
35:50 - uh
35:52 - um for example Teddy Bear this is the
35:57 - description
35:59 - and then the price for example 100 and
36:03 - then an image
36:05 - then I can select the teddy bear
36:08 - and this is created by admin
36:10 - so then I can click save and add another
36:12 - one to create one more in the clothes
36:16 - and then check it blah blah blah just
36:21 - add some random information
36:24 - and then select an image
36:27 - okay it's shoes that I have here so shoe
36:30 - one
36:32 - and this is also created by admin
36:35 - so now you can see here that I have the
36:37 - same string representation problem here
36:39 - you just want to fix that before I do
36:41 - anything more just copy this paste and
36:44 - save refresh and I will see the name of
36:47 - the item so if I now go back to visual
36:50 - studio code you can see here that we got
36:52 - the new folder called media and then
36:54 - Django created a new folder called item
36:56 - images and in there the images is
36:58 - uploaded nice
37:01 - so now I want to show the newest
37:04 - products from the database on the front
37:06 - page
37:08 - so let's find core use.pi then we need
37:12 - to import the database models here
37:14 - so from item dot models import
37:19 - category because I want to show this as
37:21 - well and item
37:24 - and then I can get the six newest
37:26 - project products here the same items
37:30 - equals
37:31 - item.objects dot filter is soul equals
37:35 - false because I don't want products that
37:37 - is sold
37:39 - and to get six I can just say six like
37:43 - this 0 to 6.
37:45 - and then to get all of the categories he
37:48 - has a categories equals category Dot
37:51 - objects.old
37:53 - and then to post them in and to be able
37:55 - to use them in the template we need to
37:57 - add a context here so comma
38:00 - categories past n categories and items
38:06 - items now this here two points up to
38:09 - this
38:10 - nice okay so then we can begin by
38:14 - showing that
38:16 - items so in the index.html you can just
38:20 - remove this one and create a new div
38:22 - class
38:25 - margin top six so we have some space up
38:28 - to the menu
38:31 - px-6 py12
38:35 - PG gray 100 rounded Dash XL
38:41 - close that div and then in here I want
38:44 - to add a title so H2 close
38:48 - mb12
38:50 - text 2 times XL text Center and then the
38:55 - title newest items
38:58 - and save so let's go to front page just
39:01 - to see that it looks okay
39:04 - yes newest items and then I have a box
39:07 - here to show the items and so here I
39:10 - want to have a grid virtual three and
39:12 - three items
39:14 - So Below the title I can create a new
39:16 - div close
39:18 - grid grid calls three because I want to
39:22 - add three columns and then get three
39:25 - oops cap three which is the space
39:28 - between each of the items
39:31 - and then in here I want to Loop through
39:33 - the items that we provided in The View
39:38 - that is these ones which is a list of
39:41 - items and we can just F4 item and items
39:47 - close this one and four
39:50 - and then we create an element here div
39:54 - close it and a hrf
39:57 - just close that one as well it can just
40:00 - be empty for now
40:02 - and then we can show the image on the
40:04 - top so it did
40:07 - and then ink SRC
40:10 - item dot image
40:13 - dot URL now this will give us the full
40:16 - absolute URL to the image Clause rounded
40:21 - top
40:23 - XL so at the top of the image you'll
40:26 - have rounded corners
40:28 - and then below here I want to show the
40:30 - name and the price so div Clause P6 so I
40:34 - have padding on the side and on the top
40:37 - and bottom
40:38 - what the background to be white and
40:41 - rounded B Excel so the bottom of this
40:45 - div will be around that corners
40:48 - and then here we have a H2 for the title
40:52 - text to XL
40:54 - item.title
40:57 - I can close that one and below here I
41:00 - want to show the price P plus
41:03 - text Gray 500
41:06 - price
41:08 - item dot price
41:11 - and close
41:13 - so even now save this we should see a
41:16 - loop of the project the products we have
41:18 - added
41:20 - okay the name is there because it's name
41:24 - and not the title sorry
41:27 - so I had a teddy bear press 100 shoe
41:30 - price 50. nice but the image is missing
41:35 - and this is because that Django really
41:37 - doesn't handle media image for us but
41:40 - since we are just in development now we
41:43 - can do a little hack or use Django for
41:47 - this but in production you should never
41:48 - do this
41:50 - so inside the urls.pi we can import two
41:53 - new things
41:55 - from
41:56 - chango.conf import settings
41:59 - and from django.conf.urls
42:03 - static import
42:08 - static
42:09 - and then at the bottom here you can add
42:12 - this plus static
42:16 - settings Dot
42:18 - oops
42:19 - media
42:21 - URL
42:22 - so now this points to the URL that we
42:24 - set in the settings Supply and the
42:27 - document root to find its files
42:32 - is settings dot media
42:36 - root
42:37 - and Save
42:39 - so even now go back and refresh the
42:41 - images is loaded nice
42:45 - and then below the newest images I want
42:47 - to show the categories just like in the
42:50 - demo
42:51 - so let's go back to the template
42:54 - and make a copy
42:58 - of this
43:02 - and just paste it below here
43:05 - and instead of saying newest item to say
43:07 - categories
43:09 - close this there and I can close that
43:11 - div and then in here I would Loop
43:14 - through the categories
43:16 - so for category in categories
43:22 - and four
43:24 - and then I can show
43:28 - you can actually copy most of this
43:32 - and just paste it in here
43:34 - but the categories doesn't have image so
43:37 - let's remove that and the categories
43:40 - doesn't have
43:42 - uh price but we can show how many
43:46 - products or items is in here
43:49 - so to do that we can create a function
43:52 - or we can just say category dot items
43:56 - dot count
43:59 - and items so I think this should be
44:03 - correct
44:05 - one items zero items one items
44:09 - but this should of course be category
44:11 - dot name
44:14 - so now we uploads on items Furniture
44:17 - items toys phone items nice
44:20 - so now we have a working front page for
44:23 - this project
44:26 - next step now is to make it possible to
44:28 - go into the detail page of an item so
44:31 - let's begin with the view for this this
44:34 - view should be in the item views.pi
44:38 - so here we can set def detail crossing
44:41 - the request parameter but since we want
44:44 - to find the detail of an item we need an
44:47 - ID or a primary key for this so let's
44:50 - add one more parameter here PK for
44:52 - primary key
44:54 - and then to get this from the database
44:56 - with the item equals get object or 404
45:01 - right angle will give us a 404 error if
45:04 - this object doesn't exist in the
45:06 - database
45:07 - and we want to get this item from the
45:10 - item model where the primary key is
45:14 - primary key
45:15 - so this is now the primary key on the
45:18 - model itself and this is the one we get
45:21 - from the URL
45:23 - so you can see here that I get two
45:24 - warnings because I haven't imported this
45:27 - shortcut this can be together with
45:29 - render
45:31 - and I need to import this model
45:34 - so from dot models import item
45:38 - so now the warning is gone now we can
45:41 - return and render template so return
45:44 - render
45:46 - Quest
45:47 - in item slash detail.html
45:51 - and then the context which is item item
45:54 - and Save
45:57 - so the next step then is to create the
45:59 - folders and this template so here create
46:02 - a new folder templates
46:05 - and item
46:07 - and detail so detail.html
46:13 - and this should also extend the
46:16 - base.html so extends
46:20 - core slash paste.html
46:23 - I won't have the title here so block
46:26 - title
46:27 - and then in here we can show the name of
46:30 - the the items item.name
46:33 - and then just close this block and block
46:37 - then the block for the content block
46:40 - content
46:43 - and block
46:47 - so then in here I would have a grid for
46:50 - I want to show and then in here I want
46:52 - to have a grid because I want to have
46:54 - the image on the left and then
46:55 - information about the item on the right
46:58 - side so div class
47:00 - grid
47:02 - grid calls five
47:05 - and get can be set to six
47:12 - and then on the left side we have the
47:14 - image so div close
47:16 - call
47:19 - oops called spam
47:22 - call sorry call Dash span three because
47:26 - I want to take up three of the available
47:27 - filed columns
47:30 - msrc
47:32 - item dot image dot URL
47:36 - close rounded Excel because I want image
47:40 - to have rounded corners
47:43 - so before addending more hair I just
47:46 - want to see what this looks like
47:48 - so the next of them is to import this
47:51 - into the URLs file
47:54 - I want to have a separate URLs file for
47:56 - the items because this is a much cleaner
47:58 - way to do this
47:59 - so here I want to create new file
48:00 - urls.play
48:03 - and then we first need to import pod so
48:05 - from
48:07 - django.urls import path
48:11 - and we can import all of the views for
48:14 - the items from
48:16 - dot import oops views
48:20 - and URL patterns oops URL patterns
48:26 - path
48:27 - and when this has an integer
48:30 - primary key we want to use the views dot
48:33 - detail View
48:35 - the name can be detailed
48:38 - so this now expects an integer called
48:41 - primary key or PK and this PK has to be
48:45 - the same as we've set there
48:48 - and detail might be a little bit
48:50 - confusing now so I want to import or
48:52 - Implement something called at the name
48:55 - here
48:56 - name item I will show you very soon how
49:00 - this works this will now be a namespace
49:02 - for this app
49:04 - then I just need to import this URLs
49:07 - file to the main URLs file so in puddle
49:11 - urls
49:13 - at the topic part items
49:17 - include
49:20 - item.urls and this points to the URL
49:23 - file we just created
49:24 - and I get the warning here because you
49:26 - need import this together with pot
49:29 - and then all URS that begins with item
49:33 - will automatically take Lego into this
49:35 - and check if there is a pod with the
49:39 - primary key there
49:40 - nice
49:42 - so the last thing we can do now before
49:44 - we test this
49:46 - is to go into index.html and activate
49:50 - the link here
49:52 - so URL then we provide item which is the
49:56 - namespace or the app name detailed then
50:00 - we provide the primary key by saying
50:01 - item.id
50:04 - save so now Django will fix this URL for
50:08 - us so if I click this now teddy bear you
50:11 - can see that I'm sent into the detail
50:13 - page for the teddy bear and you can see
50:15 - the teddy bear name up there great so
50:18 - now I want to show some information on
50:20 - the right side here select the name the
50:22 - price who is selling this the
50:24 - description and similar
50:27 - so let's go back to the detail.html
50:30 - create a new div class
50:33 - call span
50:35 - span whoops
50:37 - Dash 2
50:39 - close that div
50:41 - actually I want some more classes here
50:43 - like p-6
50:45 - and BG gray 100 and rounded
50:50 - XL
50:52 - and then the first element in here I
50:54 - want to add is an H1 H1 Plus
51:00 - mb-6 text 3 XL and then item dot name
51:05 - close to H1 let's see what this looks
51:08 - like
51:09 - yes we have the gray box here with the
51:12 - title nice so now let's add the price
51:15 - and who's selling this so P close
51:18 - text Gray 500
51:22 - trunk price
51:27 - item dot price
51:30 - and close the paragraph
51:32 - if I just make a cooked this I can
51:35 - rename the tight layered cellular
51:37 - and then item dot created
51:41 - by dot username so basically give us the
51:44 - username for the person who added this
51:47 - so 100 and seller is admin
51:51 - below here I want to show the
51:52 - description for the product item
51:56 - so P plus
51:58 - text Gray 700 is a little bit darker
52:03 - strong
52:05 - and then close you can have a text Gray
52:08 - 500 and this
52:10 - description
52:11 - [Music]
52:14 - closed string at the BR for line break
52:18 - and then item dot description
52:23 - close that one
52:25 - and Save
52:28 - so I only want to show this description
52:31 - or this title if there is an actual
52:34 - description so we can test that up here
52:37 - if item.description
52:40 - so now this will only be rendered if the
52:42 - user filled in and description for the
52:44 - item
52:45 - so let's close this and if like that and
52:49 - then below here I can have a button
52:51 - which we will activate later a hrf
52:55 - class
52:57 - inline block
52:59 - margin top six we're gonna space on this
53:02 - padding X6 and py3
53:05 - text can be large and the font can be
53:08 - semi-bold
53:12 - and the background can be bjtl-500
53:16 - text can be set to White and if we hover
53:19 - this we want the background to be darker
53:22 - so hover PG TLD 700 and we can also have
53:27 - rounded Corners it's all rounded Dash XL
53:32 - and then the title contact seller
53:36 - so we'll come back to this and activate
53:38 - it later but let's make sure it's
53:40 - looking good and it does
53:43 - nice then below here I just want to show
53:46 - the related products or items so if
53:50 - there are more products in the same
53:52 - category
53:53 - so let's add one toy car
53:57 - blah blah
54:01 - and toy car
54:04 - is it by admin and then I want this to
54:07 - be showing at the bottom here
54:09 - so let's first make some changes in the
54:12 - view because here is where we get the
54:14 - related items related items equals
54:19 - item.objects
54:22 - filter
54:23 - and then I want to get all of them
54:27 - items in the same category as this one
54:31 - so category equals I10 dot category
54:36 - and I want to filter out the ones which
54:39 - set to sold so sold is still false
54:44 - and I want to exclude this item from the
54:48 - list so dot
54:50 - exclude
54:54 - PK equals PK
54:57 - and I only want to have three so zero
55:00 - colon 3 to split it
55:04 - and then
55:07 - we just need to append this related
55:09 - items list like this and Save
55:14 - and then to show this I just want to
55:16 - Loop through and show them just like we
55:18 - do on the front page so just copy this
55:21 - entire div here
55:23 - and paste it below this grid the bottom
55:28 - but instead of saying item in items you
55:31 - can say related items and
55:35 - place the title with the related items
55:38 - and Save
55:40 - so let's see what this looks like
55:42 - related items and I have the toy car
55:45 - here if I go into this the teddy bear
55:48 - will be a related product nice great so
55:51 - now that they have the basic browsing
55:53 - for this project I want to make it
55:54 - possible to sign up
55:58 - so I Can Begin by creating it
56:01 - new file in the core app
56:05 - so in the core app
56:07 - is where I want all of these views to be
56:09 - located let me just close a little bit
56:12 - of this and then in the core app I want
56:15 - to create a new URLs file file to clean
56:18 - up a little bit
56:19 - now you can import path again from
56:23 - django.urls import port
56:26 - and from Dot
56:28 - import views so import all of the views
56:31 - belonging to this app also one is that
56:35 - app name to be core now we set up the
56:39 - URL patterns can begin with empty one
56:42 - pot
56:43 - something
56:45 - views.index and the name is also index
56:50 - and we can also add above there so or
56:54 - contact or whatever we created if I just
56:57 - go to puddle URLs now we have this
57:01 - contact
57:02 - so let me move this in here and say
57:06 - views.contact and Save
57:09 - so now I can remove this from there and
57:12 - when the URL here is empty I want to use
57:17 - the include statement here as well so
57:19 - include
57:21 - core.urls so now it it will Loop through
57:24 - all of the paths here before it continue
57:27 - and tests with the items
57:31 - so then I don't need to import this here
57:33 - anymore but if I now save and go here
57:37 - and refresh I will get an error on this
57:39 - one in the footer because now this
57:42 - doesn't exist anymore
57:44 - so let me open up base.html and rename
57:47 - this to core colon contact
57:51 - since I added app name here
57:53 - it's a very fresh note everything is
57:55 - back as it was
57:57 - okay so let's continue with signing up a
58:00 - user
58:01 - so inside the core app I want to create
58:03 - one more file called forms.pi so Django
58:06 - helps us with creating users validation
58:09 - and similar let's first import forms
58:13 - from Django from Django import forms
58:18 - and we can import a user creation form
58:21 - from django.com trip
58:25 - oauth.forms import user creation form
58:30 - and I need to import the database model
58:32 - for the user so from django.com
58:37 - oauth models import user and then we can
58:42 - create it here so close sign up form now
58:47 - we pass in the user creation form which
58:49 - we imported a pair
58:52 - and then we need to do some
58:53 - configurations plus meta do we need to
58:57 - set the model we are going to use which
58:59 - is user that comes from Django
59:02 - and then I want to specify which Fields
59:04 - I want the user to fill out Fields
59:07 - equals username authentic fill out email
59:11 - password one
59:14 - one and password 2 which is the repeat
59:19 - password
59:20 - so let's save this for now
59:24 - and then we can create the view where we
59:27 - are going to show this form
59:30 - so inside you've used Pi we can import
59:32 - the form we just created from dot forms
59:36 - import
59:38 - sign up form
59:42 - and then we create the view so at the
59:45 - bottom here we can say def synapse in
59:47 - the request parameter
59:50 - and then we can create an instant deform
59:52 - form equals sign up form
59:56 - whoops
59:59 - and then we say return render request
60:03 - then the template which is course
60:06 - signup.html now you just need to post
60:09 - the form into the front end form like
60:13 - this
60:14 - and save then we need to create the
60:16 - template before we can test this so sign
60:20 - app.html I want this to extend the base
60:23 - as well
60:24 - oops
60:26 - extends core slash space dot HTML not
60:32 - add a block
60:33 - title
60:36 - sign up and oops and block
60:41 - okay have a double there
60:44 - block content
60:48 - and close this one and block
60:51 - and then in here we can begin with the
60:54 - Box around the form div clause
60:59 - W1 slash two which just filled out the
61:02 - half of the screen
61:03 - my6 to have space above and below this
61:06 - button my box and mx-auto so it's
61:10 - centered on the screen
61:11 - on the background to be PG gray 100 and
61:15 - have rounded corners
61:18 - close that one
61:19 - then we can have it title H1 close
61:24 - and b-6
61:26 - text 3XL sign up
61:31 - so before I add anything more here we
61:34 - can test that this is working
61:37 - so let's go to URL point in show where
61:41 - to add it there but sign up
61:46 - slash views DOT sign up and the name s
61:50 - sign up
61:51 - now we can update the menu so this link
61:54 - to the correct page
61:57 - so that is the first link here
62:01 - URL core colon sign up
62:05 - and Save
62:07 - so if I go back now refresh click sign
62:10 - up now we have this box that fills out
62:12 - off of the screen and is centered
62:17 - um looks like I forgot to add some
62:19 - padding to this box so let's go here and
62:23 - say p-6 save
62:26 - refresh and now it looks a little bit
62:28 - better down below here we can show the
62:31 - form so let's go back here
62:33 - create the form element form method
62:37 - should be that post action dot which is
62:41 - the same page we are on
62:43 - and since we are using a post request we
62:45 - need to add something called a csrf
62:47 - token this is security built in with
62:50 - Django to prevent cross-site reforce
62:52 - requests for jury I think it's good
62:55 - I can render the form by saying form.s
62:59 - p
63:01 - and then we have a button so button
63:03 - class
63:05 - py4 px8 text can be large the background
63:10 - can be teal 500 and only over this can
63:14 - be darker so BG teal
63:18 - 700 and I want the corners to be a
63:22 - rounded X L and the text to be white and
63:27 - we can just set the title to be submit
63:30 - and close the button
63:32 - save go back and refresh and we have the
63:35 - form here which doesn't look very good
63:38 - but we can try to customize this so it
63:41 - looks a little bit better
63:44 - so if I then go back here
63:49 - just remove this this is the easiest way
63:52 - to show the form
63:54 - and we can first make sure that if there
63:56 - are errors that are not connected to the
63:59 - fields we showed them here by saying
64:00 - form dot non field errors
64:05 - then we can add a div close mb-3
64:11 - and in here we have a label for the
64:13 - username label
64:15 - close
64:17 - inline block
64:20 - margin button to username
64:23 - close the label
64:26 - and then
64:27 - form dot user name
64:30 - close that Dev press save it now refresh
64:33 - we just have the username and it looks a
64:36 - little bit better but I will make it
64:38 - even better
64:39 - let's add a br here
64:42 - and we can copy this paste it for the
64:46 - email
64:47 - and form. email
64:50 - and the same with the password password
64:56 - one
65:00 - the repeat password repeat password
65:05 - repeat the password to
65:09 - and Save
65:11 - refresh so now the Forum looks a little
65:13 - bit better we will fix more styling I
65:16 - just want to make sure that we print out
65:17 - more errors down here if there are any
65:21 - so if form dot errors or
65:26 - form dot non field errors
65:30 - then we can close this pressing and if
65:34 - and if there are any we create a new div
65:36 - class and B three
65:40 - padding six in all Direction background
65:43 - can be PG red 100
65:46 - rounded XL
65:50 - there
65:51 - and then we just Loop through the images
65:53 - here and the errors
65:56 - form Dot sorry we need to Loop through
66:00 - rambasing for field in form
66:04 - field dot errors
66:07 - close this and four
66:11 - and I just want to move this down there
66:14 - sorry it shouldn't be up there
66:18 - paste and Save
66:20 - so if I now refresh it looks a little
66:23 - doesn't look any different and I can
66:26 - submit it yet but let's fix the rest of
66:30 - the styling here which is done inside
66:32 - the user creation or the sign up form
66:37 - so let's go back to forms.play and we
66:40 - need to do some
66:41 - changes here
66:44 - so the username let's begin with that
66:47 - username equals form dot Char field
66:52 - then we set something called widget
66:55 - equals form dot forms dot text input
67:00 - typeset attributes adders equals create
67:04 - the dictionary
67:05 - placeholder
67:07 - your username
67:10 - save this see if it works yes now we
67:13 - have a placeholder there now we can add
67:15 - some Clause let's do it as well so close
67:19 - W Dash full
67:21 - py4
67:23 - px6 and rounded XL
67:28 - nice so now this looks much better let's
67:31 - do this for the other three Fields as
67:33 - well
67:36 - email and this should be an email input
67:40 - so Django will validate it for us your
67:43 - email address
67:46 - and then password 1.
67:51 - this should be a password input
67:55 - or password
67:58 - I can just copy this
68:00 - password to
68:02 - and then
68:04 - repeat password and save so if I now go
68:08 - back and refresh the form looks much
68:10 - better
68:11 - still nothing happens if I try to submit
68:14 - this so I need to do some more changes
68:16 - in the views.pi
68:19 - here I need to check if the user has
68:21 - submitted and to do that like that if
68:23 - request dot method is post then I know
68:27 - that the form has been submitted so then
68:30 - you can create a new instance of the
68:31 - form I think form equals sign up form
68:34 - and passing request dot post which is
68:37 - all of the information from the form
68:40 - then I can check if it's valid so if 400
68:43 - is valid then I can say form dot save
68:48 - and then the user will be created in the
68:50 - database and when that is done we can
68:53 - redirect the user to the login page that
68:56 - doesn't exist yet we can just say return
68:58 - redirect
69:01 - login now we will get the 404 error but
69:04 - we'll fix it later
69:06 - and if it's not the post request
69:10 - then we just use the amped form like
69:12 - that
69:13 - now we get the new warning here because
69:15 - we haven't imported this so let's import
69:18 - it up here together with render
69:21 - so if I now refresh try to submit
69:25 - assign a pair
69:34 - so then I was redirected to the login
69:36 - there nice but it means that it was
69:39 - working so when I go to users I will
69:41 - have a code with Stein
69:44 - the email and the password you can see
69:46 - here that user is active but it's not
69:48 - status staff and it's not a super user
69:51 - that means that I cannot log in into the
69:54 - admin interface with its user only super
69:57 - users can do that so now we have the
70:00 - possibility to sign up a user
70:04 - then we can make a possible to log in a
70:06 - user
70:10 - so I Can Begin by creating the form so
70:13 - if I just go to forms.pi we want to
70:16 - still be using an authentication form
70:19 - from Django so where we import this we
70:22 - can also import Authentication
70:24 - [Music]
70:25 - form
70:27 - and then we create it at the top here
70:30 - doesn't really matter
70:32 - Clause login form
70:35 - or authentication form
70:39 - I'm done here I want to override the
70:43 - fields for the username and the password
70:46 - so I can copy this
70:50 - paste it and the password
70:54 - here it's just called password and not
70:56 - password one but besides this it's
70:59 - completely same
71:03 - so I don't need a view for this because
71:05 - I'm just going to be used a login view
71:07 - that Django comes with so if I now just
71:10 - go to uart Pi I Can Begin by importing
71:13 - this from Django so from jango.com trip
71:18 - dot oath import views now this will
71:23 - crash with this one so we need to rename
71:25 - this by saying s auth views
71:28 - then I can append it here port
71:31 - login
71:33 - slash
71:35 - and then the view we're going to use
71:37 - which is now auth views Dot Login view
71:40 - dot S View
71:44 - like that and now set the name to be
71:47 - login
71:48 - but now I need to specify that we are
71:50 - going to use the form we created here so
71:53 - we need to import it here
71:55 - from dot forms import login form
71:59 - so I can just say authentication oops
72:04 - Authentication
72:05 - [Music]
72:07 - form equals login form
72:11 - so if a note just go to
72:14 - base.html I can import this sorry fix
72:18 - this here URL core login
72:22 - save
72:24 - I can try to use it
72:26 - okay so now I get the template does not
72:28 - exist error because this doesn't exist
72:31 - but this isn't really not the file we
72:34 - are going to use
72:36 - so I need to update here to tell Django
72:39 - which files to use template name is core
72:44 - slash login.html
72:47 - and this will look very similar to the
72:50 - sign up for the file so just copy
72:54 - everything
72:55 - create a new file and save it as
72:57 - login.html
72:59 - here I don't need a repeat password this
73:03 - should be called formed password
73:05 - and I only need the username and the
73:08 - password
73:09 - so then I can just fix the title log in
73:13 - and Save
73:16 - Django automatically calls a form for
73:19 - form that's why I don't need to rename
73:21 - this and everything should now be
73:24 - working
73:25 - so let's go back refresh and now we see
73:29 - the login form so now I can try to log
73:31 - in with the user I created
73:34 - call it Stone and then my password
73:37 - so now I was automatically redirected to
73:39 - something about accounts slash profile
73:42 - this doesn't exist and we are not going
73:44 - to use it either it's just the default
73:46 - URL that Django tries to redirect you to
73:49 - so you can override this
73:52 - by going to settings time settings of
73:54 - Google login redirect
73:57 - URL so you can be sent to the front page
74:00 - when you are logged in
74:03 - login URL
74:05 - so again so if you try to visit the page
74:08 - you don't have access to you you will be
74:10 - redirected to this URL
74:13 - and you can also that log out redirect
74:15 - URL Wireless here
74:19 - to the front page or when you logout you
74:22 - will be sent to the front page
74:24 - so if I just remove this
74:26 - now it doesn't look like we are
74:28 - authenticated I want to hide these two
74:31 - buttons when we are authenticated and
74:34 - show an inbox button and a dashboard
74:36 - button instead
74:38 - so let me go to base.html
74:41 - and then above here you can say if
74:44 - request.user dot is authenticated
74:49 - then I want to show two buttons else
74:52 - then we can show these two
74:55 - so let me close this and if and save so
74:59 - I'll go back and refresh those two
75:01 - buttons are now gone that's because
75:02 - their Quest user is authenticated
75:07 - there is always a user and if it's not
75:09 - authenticated it's an anonymous user so
75:13 - then I can make a copy of these two
75:16 - buttons
75:20 - just paste it in there and the first one
75:24 - can be in box and the other one can be
75:27 - dashboard
75:30 - then they can just be empty for now
75:35 - say go back and refresh now we have
75:38 - inbox and the dashboard button instead
75:40 - nice
75:43 - okay so now I want to make it possible
75:45 - to add items for the users
75:48 - so we can begin by creating a new form
75:50 - for this
75:52 - so if I just go back to editor and find
75:55 - the app for this the item and then
75:58 - create a new file here for forms.pi
76:02 - then I Can Begin by importing forms from
76:04 - Django from Django import forms and I
76:08 - want to import the database model item
76:11 - so from dot models import item
76:14 - then I can create the form class new
76:18 - item form and pass in forms dot model
76:22 - form
76:24 - mm-hmm like is that the class matter so
76:27 - we can do some configurations we want to
76:29 - add the model to be item and the fields
76:32 - we want here is category and we want the
76:35 - name the description
76:39 - oops the price and the image
76:44 - great so now we can save this for now we
76:47 - will come back to The Styling in a
76:49 - little while
76:50 - but now we can go to reviews.pi to
76:53 - create the view for this
76:56 - So Def new request
76:59 - and I want this to be I want Django to
77:02 - require that you are logged in to access
77:05 - this error so to do that you can add
77:07 - something called a decorator so let's
77:10 - begin by importing this
77:12 - from django.com trip.org dot decorators
77:15 - import login required
77:20 - and under apply that to this view we
77:22 - just add login required so if you want
77:25 - to try to visit this without being
77:27 - authenticated you will be redirected to
77:29 - the front page now sorry to the login
77:31 - page and then here I can say form equals
77:34 - new
77:36 - item form we just need to import lists
77:39 - from dot forms import new item form
77:44 - and then we can say return render
77:47 - request
77:48 - Post in the template name which here
77:50 - should be item slash form dot HTML
77:53 - because I want to reuse this for the
77:55 - edit as well
77:57 - then we can pause in the form here form
78:02 - and form and Save
78:05 - and when that is done we can create the
78:08 - template
78:10 - so just open up here again and then
78:13 - inside the item folder create an equal
78:15 - form dot HTML so here we can begin by
78:19 - extending the template extends
78:22 - core slash base.html
78:25 - now we set up the title block title
78:30 - new item no sorry actually here I want
78:34 - to post in a variable called title
78:38 - you might wonder where this is coming
78:39 - from and I will show you under block
78:43 - in views here you can append it there
78:46 - title
78:47 - new item but then we can do the same
78:50 - with the edit view we just say edit edit
78:53 - item
78:55 - so when that is done you can go down
78:58 - here create a block content
79:03 - close it
79:05 - and then in here we can begin with the
79:07 - title H1 close
79:10 - mb-6 text 3XL
79:14 - and then the value here should also be
79:16 - title which will be new item
79:20 - and then we can set up the form form
79:22 - method should be post the action can be
79:26 - the page we are on and here we also need
79:28 - to set something called Inc type to
79:31 - multi port
79:33 - form data and this is needed to be able
79:37 - to upload images
79:39 - and then here we add the csrf token
79:42 - close
79:45 - space dashy 4 to have space between all
79:49 - of the fields
79:50 - and then just form dot s
79:53 - p
79:54 - so we can close this one and then I want
79:57 - to show the errors there you just want
79:59 - to copy that from the
80:01 - from the sign up form because this is
80:04 - identical
80:06 - or the login form that doesn't matter
80:09 - let me just copy this go back and paste
80:12 - it here
80:13 - and then below here we can have the
80:15 - button which is also the same as in the
80:17 - sign up or login
80:20 - so just copy this
80:22 - go back and paste it and then you just
80:24 - want to close the form element
80:27 - okay
80:29 - um you should be there
80:32 - like that I think everything is okay
80:34 - here now
80:37 - last step done is to import this to the
80:40 - URLs page
80:41 - so here you can add this above here but
80:45 - new
80:48 - views Dot
80:50 - a new item
80:53 - isn't that what I called it
80:56 - not just new okay
80:58 - and then we set the name to be new
81:05 - like that
81:06 - great so if I now save
81:09 - then I can go to the menu in base.html
81:13 - to add the button here so we can have
81:15 - this together with these two the Inbox
81:18 - and the dashboard
81:21 - can I have it first there
81:25 - URL should go to item colon
81:32 - new
81:34 - like that
81:35 - and then we can rename the title the
81:38 - link to new item and Save
81:41 - so even now go back and refresh
81:44 - should have a new okay I will already
81:47 - have this of course so I don't need the
81:49 - button there
81:50 - sorry but okay sorry let me just
81:54 - copy this and paste it there because it
81:58 - should be on that link it doesn't need a
82:00 - separate button
82:02 - so save again refresh and if I click
82:05 - this now I will be redirected to the
82:07 - login page because I wasn't logged in
82:10 - so let me log in with code with Stein
82:12 - and then my password
82:13 - let me try to click it again new item
82:16 - and then I have the form here nice
82:19 - so then I just want to fix the style
82:21 - length for this
82:24 - so if I go back to forms.pi
82:28 - I can add it there I can do it a little
82:30 - bit differently here than the other
82:32 - places just to see another way we can do
82:34 - this so the Jets oops digits equals
82:40 - and I create the dictionary
82:41 - category
82:43 - colon forms dot select
82:47 - and then I want to set the attribute so
82:49 - Etters create a new dictionary close
82:53 - W full
82:56 - py4
82:58 - px6 rounded XL and border and Save
83:05 - so we can see if this is working
83:09 - that did not work
83:13 - okay so I need to have this inside the
83:15 - meta class of course
83:18 - so save this now
83:20 - refresh and then I have the styling
83:22 - there nice
83:25 - then I can do the same thing for the
83:26 - other just that I want to have this as a
83:30 - variable so up here I can say input
83:33 - Clauses equals paste it and then I got
83:38 - the input Clauses like that so I don't
83:40 - have to repeat this multiple times
83:42 - and this is still working nice
83:45 - so then I can copy this just at the
83:48 - comma here
83:49 - replace this for name and then forms dot
83:54 - text input
83:56 - like that
83:58 - and the same with the description
84:03 - there should be a forms dot text area
84:07 - and then the price which would be text
84:12 - input
84:13 - and the last one image
84:17 - which is the file input
84:20 - so then I can save this now go back and
84:23 - refresh and now the styling here is also
84:25 - working
84:26 - perfect
84:27 - I want some space between these two
84:31 - by the way so this should have an empty
84:33 - six
84:36 - that's better
84:38 - great so then the last thing we need to
84:40 - do now is to add a check if this form is
84:44 - submitted assimilar just like we did in
84:46 - the sign up so in the views.pi here we
84:50 - can see if request dot method
84:53 - method is post
84:57 - then form equals
84:59 - new item form and here we need to pause
85:02 - in request dot post and also requested
85:05 - files so we get the files that user
85:08 - uploads
85:10 - and then we can say if form dot is valid
85:13 - but instead of saying just form dot save
85:16 - here we need to do some changes
85:18 - here we can say item equals form dot
85:21 - save and pause and commit equals false
85:24 - because if we try to save to the
85:26 - database now the created by field is not
85:29 - added therefore we will get an error if
85:32 - we try to do this that's why we need to
85:34 - set commit false so this will just
85:36 - create an object but not save it in the
85:38 - database and then item dot created by
85:42 - equals request.user which is always
85:45 - authenticated since we have this login
85:47 - decorator
85:49 - item.save
85:51 - and that is done we can just redirect
85:53 - the user back to the detail page of the
85:55 - item they just created so return
85:58 - redirect
86:01 - pause in item colon detail
86:04 - and we need to set the primary key
86:06 - equals item.id which is the item we just
86:10 - created
86:11 - so I get the warning here now because I
86:13 - haven't imported redirect together from
86:16 - the Django shortcuts
86:19 - and if it's not a post request then it's
86:21 - a get request and we can do it like this
86:25 - so that is the whole new view perfect
86:30 - so we can try it out now if I go here
86:33 - now select the category furniture
86:37 - chair test the description blah blah
86:41 - two hundred dollars then I want to
86:44 - select an image
86:46 - so I can take the chair there submit
86:51 - okay enter a number
86:54 - okay
86:55 - let me do that instead 200 maybe I
86:58 - should use a DOT instead of a comma
87:00 - submit
87:02 - the image attribute has no file
87:04 - associated with it
87:07 - okay so that didn't work
87:12 - requested files that's correct
87:17 - then form as the angk type multipart
87:21 - slash form Terror
87:23 - this is weird
87:30 - let me just try to log in here again
87:32 - with the admin user
87:35 - oops
87:37 - admin
87:43 - like that and I just want to delete this
87:46 - here
87:47 - or I can set them
87:49 - chair one with it just so it's working
87:52 - now it's working here but why didn't the
87:55 - image get uploaded
87:57 - okay let me just try one more time it's
88:01 - a new item Furniture chair two
88:06 - hundred choose file chair two submit I
88:11 - guess now it was working so I don't know
88:13 - what the error was because I haven't
88:14 - changed anything
88:16 - but at least now it was working perfect
88:19 - so that means that now we have to
88:21 - possibility to add items
88:25 - okay so now I want to start building the
88:28 - dashboard where you can see your items
88:30 - edit them delete them and similar
88:33 - so let's start by creating a new app so
88:36 - python managed by start app dashboard
88:42 - now we can add this to the settings file
88:46 - dashboard
88:49 - and Save
88:51 - um here I don't want any database tables
88:54 - but I want to view
88:56 - so if I just open up dashboard views.pi
89:00 - then I Can Begin by importing the item
89:03 - model so from item dot models import
89:06 - oops
89:08 - import item
89:10 - and I can import the login decorator so
89:13 - from
89:16 - django.comtrib.auth.models import sorry
89:19 - decorators import login required
89:23 - then I can create the view just begin
89:26 - with adding this decorator def index
89:29 - request
89:32 - and then I want to get all that items
89:34 - that you have created so items equals
89:38 - item.objects.filter created by equals
89:42 - request.user
89:44 - and then I want to render the template
89:46 - render
89:48 - sorry return of course render passing
89:52 - the request parameter
89:54 - then set the template which should be
89:56 - dashboard
89:58 - slash index.html
90:00 - and then here we can pause in the items
90:05 - and Save
90:07 - so then I can set up the template for
90:10 - this
90:11 - I think it will be similar to top pair
90:14 - so
90:15 - no it will not that it will be very
90:18 - similar to the front page the beginning
90:22 - of the front page
90:23 - so down to the box for the categories
90:27 - let me just copy everything here
90:30 - and then create a folder templates
90:34 - and then
90:35 - dashboard and then the file for that
90:38 - index.html
90:41 - paste this and then I can just say and
90:43 - block
90:46 - this can just be like it is
90:50 - and the title here can be dashboard and
90:54 - instead of the newest items I can say my
90:56 - items
91:00 - and then
91:01 - just save this so now we have the view
91:04 - and the template then we just want to
91:06 - create a separate URLs file here
91:09 - so URL Point begin with importing from
91:13 - django.urls import path import import
91:16 - all of the views from dot import views
91:19 - setup app name to be dashboard
91:24 - and then the URL patterns
91:26 - then I just want one haircut empty
91:29 - because I want to prefix this in the
91:31 - main URLs file we use that index set the
91:34 - name to be
91:36 - index
91:38 - and save then I just want to import this
91:40 - to the main URLs so puddle slash urls.pi
91:46 - I can add it here below the items or
91:49 - above that doesn't matter Port dashboard
91:55 - include
91:57 - dashboard.urls
92:00 - and Save
92:02 - so if I now just open up base.html I can
92:05 - activate
92:06 - this button here called dashboard
92:10 - URL
92:11 - dashboard
92:13 - colon index
92:16 - and Save
92:18 - so then we can see if this is working
92:20 - now just refresh sorry I need to run the
92:23 - server again
92:25 - refresh again click dashboard
92:28 - my items and then I can see them here
92:30 - nice
92:34 - so now we can continue to make it
92:37 - possible to delete your items
92:40 - so I can create a view for this
92:43 - so inside the dashboard views.play
92:49 - here
92:50 - say at login required because you need
92:53 - to be logged in to delete your item
92:56 - def delete because in the request
92:58 - parameter and the PK which is the ID for
93:01 - the item we want to delete
93:03 - now we get the item from the database by
93:06 - saying item equals get object or 404
93:10 - so it's importance
93:13 - we want to use the item model and we
93:16 - want to get to where the primary key is
93:18 - primary key from the URL and we are
93:20 - created by equals request.user so we
93:24 - can't get objects that you haven't
93:26 - created yourself
93:27 - and to delete it you just say item dot
93:30 - delete now we can redirect you back to
93:33 - the index page of the
93:36 - of the
93:38 - of the dashboard
93:40 - and when I think about it I actually
93:42 - want to have this in the item I item
93:46 - views instead so just copy and remove it
93:49 - from there go to item views.pi
93:54 - paste it below here
93:56 - then we can redirect user to the
93:58 - dashboard so return redirect
94:02 - dashboard colon index
94:06 - like that
94:07 - then we can import it to the URLs and
94:10 - add it here just copy this
94:13 - add delete at the end
94:15 - use dot delete and name is also delete
94:20 - so if I now go to the detail page
94:24 - you need to do some changes here
94:27 - so here where we show the price
94:30 - I want to have a box telling it that
94:33 - it's your
94:36 - is telling it that it's your item
94:40 - and that should go here below the
94:42 - description
94:44 - together with this contact seller so
94:47 - here I can say if
94:49 - request.user equals item dot created by
94:53 - then I know that you are the one who
94:55 - created this
94:57 - create a new theme here mt6 to some
95:00 - space above
95:02 - p-6 to get Space Inside the Box PG white
95:06 - and rounded XL to get around that
95:08 - corners
95:11 - if you are not the one who owns the ad
95:14 - then and only done will I show the
95:17 - button for contacting a seller
95:19 - and if
95:21 - and then in here we can say p this is
95:24 - your
95:25 - item
95:28 - and then I can have the delete button
95:30 - here so a hrf
95:33 - URL
95:35 - item colon delete pause in the item.id
95:39 - which is the one you are visiting
95:42 - then it is at classes on this button in
95:45 - line block
95:48 - ing top 6
95:50 - px-6 py3
95:54 - text LG
95:56 - font semi bold
95:59 - PG red Dash 500 so we know that it's
96:03 - dangerous button to click
96:05 - text white and around the dash XL
96:09 - let me pause and delete here
96:13 - so let's see if this is working now if I
96:15 - go back here go into one of the items
96:18 - nice this is your item and delete
96:21 - because now I'm logged in as the admin
96:23 - user
96:24 - okay I just want to add a edit button
96:26 - here as well so I have it so make a copy
96:29 - of this one
96:31 - paste it
96:32 - replace the title with edit and the
96:35 - button here can be green instead so teal
96:39 - 500
96:41 - and the link can just be empty for now
96:45 - at least now I have these two buttons
96:47 - great
96:49 - so let me try to delete this one by
96:51 - clicking this
96:52 - delete and now it's gone from the list
96:54 - there nice
96:58 - okay so now I want to make it possible
97:00 - to edit an item
97:03 - so if I go to the forums.pi inside the
97:07 - item folder
97:09 - then I can make a copy of this
97:11 - I could reuse this but I want to have an
97:15 - extra field
97:16 - and I don't want the category here so
97:19 - let me remove the category remove it
97:22 - from the list here as well
97:24 - and then rename this to edit item form
97:28 - plus I want to add one more field here
97:30 - is sold like the one we have in the
97:34 - models.pi
97:35 - this doesn't need any styling so the
97:38 - form can just be like it is now
97:41 - and then if I go to view stockpile I can
97:44 - make a copy of the new view
97:48 - paste that I rename it to edit here we
97:51 - need a primary key so we can get the
97:53 - correct item from the database
97:55 - and I want to get that just like we do
97:57 - down here in the delete View
98:01 - here I do not want to use the new item
98:03 - form I want to use the update item form
98:05 - and the same down here edit item four
98:09 - as you can see here and it's import this
98:11 - so let me scroll to the top where we
98:14 - import the new item form and also import
98:16 - the edit item form
98:19 - so let me scroll down and then error is
98:22 - now gone we also need to do some other
98:24 - changes first and it's important I edit
98:27 - the title there
98:29 - and here I do not need to do this here I
98:32 - can actually just say form dot save
98:35 - because now the created by is already
98:37 - set
98:39 - one more problem now is that if you try
98:42 - to go to this page the form will be
98:43 - empty so we need to pause in some data
98:46 - here and to do that we can say instance
98:49 - equals item
98:52 - and the next problem is that this if we
98:54 - just try to save this the form will get
98:58 - an error because the instance is not set
99:00 - on this one so let me set it here as
99:03 - well instant equals four no sorry item
99:07 - so now everything here should be okay
99:11 - so then I just need to update the URL
99:14 - urls.pi in the item folder
99:18 - a copy of this edit
99:21 - a date and add it
99:24 - the last step done is to find a detailed
99:26 - page so we can update the URL so URL
99:29 - item colon edit
99:32 - and pass in item.id
99:34 - and Save
99:36 - so now this should work so if I try to
99:38 - go to the teddy bear
99:40 - edit now you can see that I have it here
99:44 - and it said
99:46 - and Save
99:48 - so teddy bear edited that means that it
99:52 - was working so you can now create edit
99:55 - and delete items perfect
99:59 - now I want to work a little bit on the
100:02 - browse page so we can search filter on
100:04 - categories and similar
100:06 - so let's begin with the view for this
100:09 - and just close all the files so it's
100:11 - easier for you to follow along so if I
100:13 - open up item views.pi
100:16 - then you can have it this on the top so
100:20 - I like to have the list View and then
100:22 - the detail View and then more specified
100:24 - view below
100:25 - So Def items or you can call it browse
100:28 - if you want to because in the request
100:31 - parameter
100:33 - here I want to get all of the items from
100:35 - the database that is not sold so items
100:39 - equals
100:42 - item.objects.filter is sole equals false
100:45 - now we can render the template return
100:48 - render
100:50 - request pass in
100:52 - item
100:54 - slash items.html
100:56 - [Music]
100:57 - and then we just need to pass in the
100:59 - items
101:01 - and Save
101:03 - so let me import this into the URLs file
101:07 - in the item folder
101:09 - this can just be empty since the items
101:13 - is added in the main URLs file views dot
101:16 - items
101:18 - and name items
101:22 - and Save
101:24 - so if I now open up a base.html we can
101:28 - update the URL here
101:31 - URL
101:32 - I oops item items
101:37 - save I can just close that one so now we
101:39 - can test I will get an error now because
101:42 - you have not created the template so
101:45 - that is the next step
101:46 - so let me go back to visual studio code
101:49 - create a new file
101:51 - browse dot h sorry items.html
101:58 - this should also extend the core slash
102:00 - paste.html file set the title block
102:05 - title
102:07 - and here we can just call this items we
102:10 - can call it browse or search or whatever
102:13 - you want actually
102:15 - and block and then block type now
102:18 - content content
102:22 - close it and block
102:25 - and then here I want this to be split
102:28 - into just like in the demo
102:30 - so I need to add a grid here div class
102:36 - pb-6 so we get some padding on the
102:39 - bottom of the screen here
102:41 - enter the grid grid calls for Gap four
102:48 - close this one
102:49 - and then I want one to the left which
102:52 - should be this sidebar where we can
102:54 - select the filter search similar so div
102:57 - clause
102:58 - call span dash one
103:01 - just close it
103:04 - and in here should be the Side Bar
103:09 - and then you have the div clock oops div
103:13 - clause
103:14 - call span 3
103:18 - close and in here I want to list out the
103:22 - the
103:23 - items just like on the front page so if
103:26 - I open up index.html
103:29 - you can make a copy of this one
103:32 - and just paste it in here
103:35 - and Save
103:37 - so let me try this now so if I refresh
103:40 - the template is there we have the
103:42 - sidebar and then the list of items
103:46 - perfect so then I can begin working with
103:49 - the sidebar here
103:51 - should maybe have a background here on
103:54 - this
103:56 - hair maybe if I just add it there BJ
103:59 - gray 100
104:03 - fresh so then I get the white background
104:05 - and these and simpler which is a little
104:07 - bit better
104:08 - so then the next step is to add the
104:10 - sidebar
104:12 - so we can begin with adding a form
104:14 - method get and not post
104:18 - action should be URL
104:21 - item items that is the one we are on
104:25 - but I like to do it like this now
104:29 - okay
104:30 - that one
104:32 - and since this is a get request we do
104:34 - not need the csrf token
104:37 - and then first here we can add the input
104:39 - field for the query input name query
104:43 - and close W Dash full
104:47 - py4
104:49 - px6 on this to be border and around that
104:53 - XL
104:55 - you can set the type the text
104:58 - and the value to be
105:00 - query I will get this from the back end
105:04 - very soon set the placeholder to be find
105:07 - a bike
105:09 - chair
105:11 - or a car
105:14 - or whatever you want
105:16 - and then below here I want to have a
105:18 - search button so button close
105:23 - empty-2 the lesson space up to input
105:26 - field
105:27 - py4 PX
105:30 - eight
105:31 - text LG bgt 500
105:36 - and text white around the Excel
105:40 - search
105:42 - the button and the form is closed okay
105:47 - so if I save now go back and refresh you
105:50 - should now have the search bar there
105:52 - nice
105:54 - so let me just fix the backend for this
105:56 - as well
105:57 - so that we get the query and we post it
106:00 - into the front end when we have it
106:03 - so at the top here we can say query
106:05 - equals
106:06 - request.get.get query default this to be
106:10 - empty now we can pause it into the front
106:12 - end as well
106:14 - like that so if I now try this about
106:17 - today the search will not work but you
106:20 - can see up here the third day is a panda
106:21 - there and we also have it in the form
106:24 - here nice
106:25 - so let me try to filter the search as
106:28 - well if there is any query so below here
106:31 - we can say if query and we know that the
106:34 - user has filled it out items equals
106:37 - items dot filter
106:39 - and then name I contains
106:42 - equals query so if the name contains the
106:47 - query I
106:49 - insensitive then the query will be
106:52 - filled out
106:54 - or processed it's probably more correct
106:56 - so if I refresh now you can see that
106:59 - only this is there if I empty this all
107:02 - of the items are there but if I want to
107:05 - search in the description as well I need
107:07 - to introduce something called Q
107:09 - so let's import this
107:12 - from Django Dot
107:16 - db.models import Q this makes it easier
107:19 - to search in multiple fields
107:22 - and then in here add the queue around
107:24 - this
107:25 - so if it's in the name
107:28 - or use a pi pair queue the description
107:33 - I contains
107:34 - equals query so if the title or the
107:38 - description contains it it will be
107:40 - searched perfect
107:43 - great so now that you have this we can
107:45 - continue with the categories first we
107:48 - can get all of the categories from the
107:50 - database
107:51 - so categories equals category Dot
107:55 - objects.org
107:57 - so let's import this up here
108:00 - and we need to append this down here in
108:02 - the context
108:05 - so now I can go back here and then below
108:07 - the form I can Loop through them and
108:09 - make it possible to click them
108:11 - so I'll just separate this a little bit
108:13 - by adding HR Clause empty to our my six
108:19 - and then p plus font summative
108:22 - bold cut the chorus p
108:27 - then I'll Loop through them inside an
108:30 - unordered list
108:32 - four category and categories
108:38 - closed and four
108:41 - and then in here because Ally close
108:44 - py2 px2 rounded Dash XL
108:50 - and then in here I want to have a link
108:52 - so a hrf
108:54 - URL should be item
108:57 - item colon items
109:00 - and
109:02 - close it like that and now we can append
109:04 - the query so query equals query from the
109:08 - form up here but I also need to specify
109:12 - the category category equals
109:16 - category dot ID which is the iteration
109:20 - we are on now
109:22 - and then here you can say category dot
109:25 - name
109:26 - let me close the link and I can close
109:28 - the Li
109:29 - and save so if now go back and refresh
109:33 - you know where the category is showing
109:35 - here great
109:37 - um but if I now click this nothing
109:38 - happens and this is not showing as
109:41 - active either so it can be again when
109:43 - making it possible to show as active
109:46 - so in the close here we can say if
109:48 - category dot ID equals category ID I
109:54 - need to provide this from the backend
109:55 - times at PG
109:58 - gray 200
110:01 - and if
110:03 - so this will not work now because we
110:04 - don't have access to this yet so we need
110:07 - to go back to the Views pi
110:09 - then I guess category ID equals
110:12 - request.get.get
110:17 - pausing category ID there
110:20 - and then just default this to be zero
110:24 - and Save
110:26 - if I refresh now
110:29 - it's still not working you just try to
110:33 - inspect this
110:45 - okay so that does not work
110:49 - maybe if I default it to this no sorry I
110:52 - forgot to provide it down here of course
110:56 - and Save
110:57 - so refresh
110:59 - and it's still not working
111:03 - maybe if I take it back to zero
111:07 - nope
111:09 - okay
111:11 - no items if the category.id equals
111:15 - category ID
111:18 - okay remove category ID from there so
111:20 - this will just be category which is the
111:22 - name we have a pair
111:26 - so this is still not working
111:30 - so if I just convert this to integer
111:33 - down here set this to Zero Save on the
111:37 - refresh now you can see this has a gray
111:40 - background color nice so then I need to
111:43 - just make it possible to filter on the
111:45 - categories so above here I can say if
111:48 - category ID then I know that you have
111:51 - selected a category
111:53 - items equals items filter
111:55 - where
111:58 - category
112:01 - ID equals category
112:05 - ID
112:06 - and save so let me refresh and now it's
112:10 - only getting this if I select clothes it
112:13 - doesn't get anything twice you get these
112:15 - two nice so that is now working perfect
112:19 - so the last thing I want to do here now
112:21 - is make it possible to clear the filters
112:25 - so if I just go back to the template
112:28 - make a copy of these two
112:33 - and that's a clear filters and then in
112:36 - here I just want to add this input
112:37 - button
112:40 - so make a copy of the UL
112:46 - I and then in here we have the button
112:50 - ahref which can go to URL item colon
112:55 - items and this will then reset the
112:57 - filters reset
113:00 - or
113:01 - clear
113:03 - does not add some Clauses so this is
113:05 - more like a button close
113:09 - empty two
113:12 - py-4 px8 inline block
113:16 - PG yellow 500 text and G
113:21 - and around that Dash XL and text can be
113:25 - white
113:27 - so refresh and then we have the care
113:30 - filters so if I click this now the
113:33 - categories are cleared and the search is
113:35 - cleared perfect so everything here is
113:38 - now working as it should
113:42 - so now automobile was about to
113:43 - communicate with each other I want to
113:45 - make it possible for users to send
113:47 - messages to the owner of a product or an
113:51 - item
113:52 - so we can begin by so we can begin by
113:54 - creating a new app so let's go to the
113:56 - web server python managed by start app
114:00 - conversation
114:02 - hit enter
114:04 - then we can register this in
114:06 - settings.play
114:07 - close these other files
114:11 - conversation
114:13 - [Music]
114:14 - and Save
114:16 - so when we have this now we can create a
114:19 - new database model for this
114:22 - so in models.toy I want to create a new
114:25 - model for the conversation
114:28 - close conversation passing model dot
114:32 - model
114:34 - and here I want the reference to the
114:36 - item so we also need to import this from
114:39 - item dot models import item
114:42 - and item equals model dot foreign key
114:47 - pause in the item and then we set a
114:49 - relate name to
114:51 - conversations
114:54 - and if you delete an item also want to
114:57 - delete all of the conversations so here
115:00 - we say models dot Cascade
115:05 - great and then I want to know who is the
115:09 - members of these conversations so
115:11 - members
115:13 - equals models dot many to many field
115:16 - because the conversation needs a
115:18 - multiple users the owner and the one who
115:21 - is contacting you
115:23 - there on depositing the user because the
115:25 - user's object are going to be used
115:28 - so to relate the name to be
115:29 - conversations
115:31 - so now I get the warning here because I
115:33 - haven't imported this so I'll do that
115:36 - from django.com
115:38 - Models import user
115:42 - and then I want to know when this was
115:45 - created Created at equals small dot date
115:48 - time field
115:50 - person Auto now add
115:54 - is true and I also want to know when it
115:58 - was modified so we can update an order
116:00 - by this
116:02 - modified at all models dot date time
116:06 - field
116:07 - and here it is using for Auto Now equals
116:10 - true so every time we save this object
116:13 - this will automatically update it
116:16 - threat magic claws meta here so we can
116:18 - set ordering by default
116:21 - percent minus modified at
116:26 - and Save
116:29 - um but before we update the database we
116:32 - can add one more table here close
116:35 - conversation message pause in
116:39 - models.model I would love to just use
116:42 - message but that would crash with some
116:44 - built-in functionality that Django has
116:47 - so we can begin by adding a reference
116:50 - app to the conversation
116:53 - models.4ind key
116:55 - conversation related name is messages
117:00 - and on delete
117:02 - models dot Cascade
117:04 - so if you delete an item the
117:06 - conversation will be deleted and also
117:08 - the messages that makes it very easy
117:11 - I need a feel for the content of the
117:14 - message also text field
117:19 - and when it was created so let me just
117:22 - copy this and I want to know who created
117:24 - it so created by equals models.49k
117:30 - user related name can be created
117:34 - messages
117:36 - and if you delete user also delete all
117:39 - of the messages so model dot Cascade
117:45 - great now we need to update the database
117:48 - from the make migrations and then the
117:51 - migrate script then I can just run the
117:54 - server so we have it running
117:57 - so before I do anything more I want to
118:00 - add open up the admin okay so we can
118:03 - register them in the admin interface
118:05 - from dot models import conversation and
118:09 - conversation message
118:13 - admin dot sorry
118:16 - admin.site.register conversation
118:18 - [Music]
118:21 - admin.site.register conversation message
118:25 - so that's done nice
118:28 - so then I want to create a new file here
118:31 - for the forms so we can have validation
118:33 - and similar
118:35 - forms.play Can Begin by importing the
118:38 - forms
118:39 - so from Django
118:42 - import forms and we need to import the
118:45 - conversation message model from dot
118:48 - models import conversation message and
118:51 - then we create the form
118:54 - conversation message
118:57 - form
118:59 - percent forms.model form
119:04 - and then we can add a class meta
119:07 - set the model to be conversation message
119:09 - the fields we want to use is only
119:12 - content
119:15 - then we can set up the widgets so we get
119:17 - some nice styling
119:19 - only for the content field
119:23 - forms.txt area
119:25 - actors
119:27 - new dictionary close
119:31 - probably full
119:34 - py4px6 rounded Excel and we want to have
119:38 - a border on it
119:41 - great so if I now save this we can open
119:45 - up the views.pi in the conversation app
119:47 - and create the first view here so I'm
119:50 - going to have a separate view for new
119:52 - conversation so when you click the
119:56 - the contact seller you will be sent this
119:59 - page to Def new conversation
120:02 - pass in request and the primary key and
120:05 - the primary key here is for the item
120:09 - and to make it easier to know this maybe
120:13 - I should just call it item underscore
120:15 - primary key just so I know that it's not
120:17 - for a conversation
120:19 - and then I can get item from the
120:21 - database
120:22 - get object or
120:25 - 404 item where the primary key is item
120:30 - primary key
120:33 - then I need to import these two here so
120:36 - we can begin with the get object or 404
120:38 - I'm from item that models import item
120:45 - and then I want to check here if you are
120:48 - the owner then you should not be able to
120:50 - visit this page so if item dot created
120:53 - by equals request user
120:56 - sorry to equal sign here
121:00 - then just return read erect
121:04 - to dashboard colon index
121:08 - or you can redirect user wherever you
121:10 - want but I think this is a good place
121:12 - and import this shortcut as well
121:16 - and then I want to get all of the
121:19 - conversations connected to this item
121:21 - where you are a member so conversations
121:26 - equals conversation
121:30 - dot objects
121:33 - filter item
121:36 - equals item
121:38 - and then filter where members
121:41 - in remember to double underscore
121:44 - equals request.user.id
121:48 - so this is checking now is that if this
121:51 - ID is one of the members then we can
121:54 - proceed
121:55 - so now I get a new error here because I
121:58 - haven't imported this
122:00 - so from dot models import conversation
122:06 - and I can also import the form which is
122:08 - create this from dot forms import
122:12 - conversation message form
122:15 - and the reason why I want to do this
122:17 - here is I want to check if there already
122:19 - is a conversation with you and the owner
122:21 - and in that case I want to redirect you
122:24 - to that conversation so if conversations
122:27 - then there is an actual conversation so
122:30 - you can just pause it there for now
122:32 - redirect
122:33 - to
122:35 - conversation because we don't have that
122:37 - page yet
122:40 - and then down here we can check if the
122:43 - form has been submitted if requested
122:46 - method is post
122:49 - then we can check the form using form
122:51 - equals conversation form conversation
122:56 - message form passing request.post data
123:00 - not put post
123:02 - and then if form dot is valid and the
123:07 - contact field is filled out correctly
123:09 - and we can create a new conversation so
123:12 - conversation
123:15 - equals conversation.objects
123:19 - dot create item equals item so to do
123:23 - this before I create the message
123:26 - and then we need to add U to the members
123:29 - list and the owner of the item to the
123:31 - members list
123:32 - so conversation.members.ed
123:36 - request dot user
123:39 - and conversation dot members dot add
123:43 - item dot created by and I will save it
123:47 - conversation
123:48 - dot save
123:50 - then we can create the conversation
123:53 - message conversation message equals form
123:57 - dot save and posting the commit equals
124:00 - false so we don't get error from the
124:03 - database
124:04 - then we need to set the reference to the
124:06 - conversation
124:08 - conversation oops
124:11 - so let's just points up to this one and
124:14 - who created it so created by equals
124:17 - request
124:18 - dot user
124:20 - now we can save this as well and then we
124:23 - can redirect it back to the item
124:25 - so return redirect
124:29 - items item sorry item colon detail where
124:34 - primary key is item primary key
124:38 - and if it's not post request let me just
124:40 - create an empty form
124:42 - equals conversation message form
124:46 - then we can return and render the
124:48 - template return render request
124:52 - pause in the template which here should
124:55 - be conversation Slash new DOT HTML
124:59 - and we can pause in the form like this
125:02 - save
125:03 - so now I want to create a URLs file for
125:05 - this app as well oops that's wrong place
125:08 - in the conversation app
125:11 - urls.pi
125:12 - crunch Django import port and then the
125:16 - views
125:18 - from dot import views
125:22 - and app name should be conversation
125:27 - and it's the URL patterns pod can be
125:31 - new
125:32 - and here we want to pass in the integer
125:35 - called item primary key
125:38 - and then we just have used dot new
125:41 - conversation and the name should be new
125:44 - so then to link to this we just say
125:46 - conversation colon new
125:50 - so let's import this to the main URLs
125:52 - file which is in the puddle folder
125:56 - thought inbox
125:59 - or you can call it conversation if you
126:01 - want to do that
126:02 - include
126:03 - conversation dot urls
126:07 - save and close that file
126:10 - so now I want to create a template for
126:13 - this
126:14 - so let's begin with the folder templates
126:19 - conversation and then the template
126:22 - itself new.html
126:26 - and then again I want to extend the base
126:28 - template so extend core slash paste.html
126:34 - set up the title block title
126:38 - here we can say new conversation and
126:42 - look
126:44 - oops
126:45 - and block
126:47 - and block content
126:52 - and we can add the title layer H1 close
126:54 - oops and b-6
126:58 - and text
127:00 - 3XL new conversation close this one and
127:06 - we can close the and block
127:08 - then I just want to fix the link to this
127:10 - page so we can test that everything is
127:13 - working
127:14 - so let me just open up
127:17 - detail.html I can activate this button
127:20 - URL conversation colon new and then the
127:25 - item ID
127:28 - so if you now go into one of these
127:31 - okay you need to run
127:33 - cannot import from Django
127:37 - from
127:38 - django.urls import pod
127:41 - okay so now that is working refresh and
127:45 - now I can see this since I'm owning this
127:47 - if I go into toy car and set the code
127:50 - with Stein as the owner just save
127:54 - fresh now I can click contact seller and
127:57 - then I sent it to the new conversation
127:59 - page so that is working so now I'm just
128:02 - going to show the rest of this form
128:05 - and I can copy this form from the item
128:09 - form page this will be very similar
128:14 - so let me just copy this entire form tag
128:20 - and paste that here
128:22 - here don't need the multi Port because
128:25 - you're not going to send images but the
128:27 - rest can be like it is
128:29 - maybe you can say send instead of submit
128:32 - so save go back and refresh and then we
128:36 - have the content which is the message
128:37 - itself perfect
128:41 - so that means that now I could try to
128:43 - send this hello
128:46 - code with Stein I'm
128:50 - interested
128:52 - sound
128:53 - so now we're standing back here which
128:55 - means that it was working and if I
128:57 - refresh then I should have a
128:59 - conversation there I have one
129:01 - conversation between these two users for
129:03 - the toy car
129:05 - and then the message which contains the
129:07 - hello code it's time I'm interested
129:08 - message great
129:11 - so now we just want to set up the inbox
129:14 - page so we can list out all of the
129:18 - all of the conversations that we have
129:24 - so let me go back to views.play
129:27 - and I think I also want to add the login
129:30 - required here
129:33 - before I forget that so let me import
129:34 - this as well from django.com
129:38 - decorator Support login required
129:42 - then we can create the inbox view that
129:45 - login required inbox
129:48 - Quest
129:50 - and then here I want to get all of the
129:52 - conversations that you are a member of
129:55 - so I can actually just copy the
129:57 - statement from up here
130:01 - this can be a conversation you have
130:03 - created or
130:05 - I suggest that I've been sent to you
130:07 - just to remove the filter for the item
130:10 - then we can return and render the
130:11 - template return render
130:14 - Quest
130:16 - conversation slash inbox.html
130:20 - forcing the conversations for the
130:23 - template
130:24 - and Save
130:26 - so if I now import this into the URLs I
130:29 - can just put empty here so the URL will
130:31 - just be in books
130:34 - then we use dot inbox name is inbox
130:40 - you have an open up best.html I think I
130:43 - have a button for this this one yes
130:45 - inbox
130:47 - URL
130:49 - conversation colon inbox
130:52 - save
130:54 - and then go back here refresh click
130:57 - inbox and then I get the template does
130:58 - not exist error but that's great because
131:01 - it makes sense since I have not created
131:04 - it yet
131:06 - so let me find a template I can copy a
131:09 - little bit
131:10 - take this one
131:12 - and then create a new file inbox.html
131:17 - paste it
131:19 - say inbox
131:21 - in books
131:24 - and block
131:27 - let's say refresh and then it's there
131:29 - great so I'm just going to Loop through
131:32 - all of the conversations that we have
131:34 - here
131:35 - so below here I said div clause
131:39 - space Dash y 6 space between the
131:42 - conversations
131:44 - for
131:46 - conversation and conversations
131:49 - I can close this and four
131:53 - and then we can have a link a hrf it can
131:57 - be empty for now since we don't have a
131:59 - detailed page close block
132:04 - don't think that is correct actually
132:06 - maybe it's
132:08 - I'm just messing up a little bit and
132:11 - then we have a div for the image of the
132:13 - item so div clause
132:16 - p dash six
132:19 - Flex because I want this to be a flex
132:21 - container PG gray 100 and rounded XL
132:28 - close that one then out the image to the
132:31 - left div Clause padding right can be set
132:34 - to six
132:35 - in SRC
132:38 - conversation Dot item Dot image.url
132:44 - close
132:45 - w20 rounded Excel so that the width 20
132:50 - and we have a rounded corners on the
132:53 - image as well
132:55 - save us save now we can try to see if
132:58 - this is working yes then I have the
133:00 - image for the toy car there then I want
133:03 - to show here who the member I'm talking
133:05 - to is and the item we are talking about
133:10 - so here we can say div
133:13 - close it right under there
133:16 - then I want to Loop through the members
133:17 - the four member in
133:19 - conversation.members.old
133:24 - so this is how you get all of the
133:26 - members and using many to many field
133:29 - and four
133:31 - and if the member is not you then I want
133:34 - to show it here so if member not equals
133:39 - request.user
133:42 - and four
133:46 - and then create paragraph
133:49 - Class B Class mb-4
133:53 - strong
133:55 - member dot username
133:58 - first strong and now we can show when it
134:01 - was sent
134:03 - so
134:06 - conversation
134:08 - dot modified that and we know when the
134:12 - last message was sent
134:13 - so close this one and then below here we
134:17 - can show what the item is so
134:19 - conversation dot item dot name
134:25 - and Save
134:26 - so hopefully now
134:28 - I've done something wrong invalid block
134:31 - tag so this will be and if
134:35 - fresh and let me see Hue we are talking
134:37 - to when the message was last sent and
134:41 - the name of this item great next step
134:45 - now is make it possible to click this
134:46 - conversation so you can see the detail
134:48 - page and make it possible to talk to
134:51 - each other
134:52 - so let me just go to views.pi create a
134:57 - new view
134:58 - at login required because you need to be
135:00 - logged in
135:02 - def detail request and the primary key
135:05 - and this primary key is for the
135:08 - conversation and not the item
135:11 - so now we can get the conversation by
135:14 - getting all of the conversations you
135:16 - have first
135:18 - so we just set this in not singular not
135:22 - plural
135:23 - dot get where primary key is primary key
135:28 - and then
135:29 - we can just return this turn render
135:33 - request
135:35 - conversation
135:37 - [Music]
135:38 - detail.html
135:41 - and I will pass in the conversation
135:45 - conversation and Save
135:48 - great so before we do anything with the
135:51 - form here I just want to create a
135:53 - template so that we have it
135:58 - um I think I can just just copy all of
136:01 - this create a new file and save it as
136:04 - detail.html
136:06 - and then for the title we can say
136:09 - conversation Capital C same thing with
136:13 - H1 here
136:15 - and I want to have this and I want to
136:17 - have this but here I want to say for
136:18 - message in conversation dot messages
136:23 - all so we pause in the conversation here
136:26 - and we get the messages because they are
136:28 - linked in this here
136:31 - so go back to the detailed page
136:34 - then I can remove the anchor tag because
136:37 - this is not going to link to anything
136:41 - and then here I want to show the message
136:43 - so
136:45 - here I do not need an image for each of
136:48 - these so let me just remove everything
136:52 - in here
136:54 - so I still want to have the padding the
136:56 - flexed around it and messages are
136:58 - similar
136:59 - and then here I can create a new div
137:05 - and a paragraph be closed and b-4 so we
137:10 - have some styling for the name
137:14 - and then strong
137:16 - message dot created by
137:19 - that username
137:24 - and when it was sent sorry I need to
137:26 - close the strong
137:28 - pipe or at if you want that message dot
137:32 - created at
137:34 - I can close that paragraph
137:37 - and I can show the message so message
137:40 - dot content
137:44 - close that and Save
137:47 - so if I now go back sorry before I can
137:50 - test it I need to update to the URLs
137:52 - here
137:54 - pot where int is named primary key I can
137:59 - use the views dot detail
138:01 - name detail
138:04 - so if I now go to the inbox I can update
138:06 - the URL here
138:08 - URL conversation column detail pass in
138:12 - the conversation.id and ID and primary
138:16 - key is always the same
138:18 - so let me save that now refresh whenever
138:21 - I click it I'm sent to the conversation
138:22 - and here you can see the message
138:26 - and if I have sent the message I want
138:29 - this to be blue and if you have sent the
138:32 - message I want it to be Gray
138:35 - so let me just close the inbox go back
138:37 - to detail
138:39 - and then here before we add the
138:41 - background I can say if
138:43 - message dot created by equals
138:48 - request.user name is BG blue 100
138:52 - else
138:54 - then it's gray
138:56 - and if and save so notice it would be
138:59 - blue because I sent this message great
139:02 - but let me make it so that it was the
139:06 - code with Stein who sent this
139:09 - refresh and then it's gray
139:11 - okay so now I want to add the form below
139:14 - here so I can send message back and talk
139:17 - to the other person
139:21 - So Below this div I create a new the
139:23 - form so form method should be post
139:27 - action dot which is the page we are on
139:30 - and it's at the csrf token and we can
139:33 - generate or show the form here form.sp
139:38 - then I need a button I can just go to
139:40 - the sign up page and copy this
139:46 - like that and we can close the form
139:50 - and let me just really notice the sun
139:52 - since we are sending a message
139:55 - if I save now go back and refresh
139:58 - nothing happens except the button is
140:00 - showing because we are not having any
140:02 - forums there yet
140:04 - so we need to go back to boost.pi and
140:07 - fix it here
140:09 - first we can import okay we have
140:12 - imported it
140:13 - but we can see if the form has been
140:15 - submitted so if
140:18 - request dot method equals post then form
140:23 - equals
140:25 - conversation message form and we need to
140:28 - pause in the request dot post data
140:31 - and if form dot is
140:34 - formed is valid then we can create a new
140:38 - conversation message so conversation
140:41 - message equals
140:44 - form dot save and need to say commit
140:47 - equals false
140:50 - and then we need to set a link up to
140:53 - this conversation
140:57 - and we need to set to create edit or
141:00 - created by requested user and I will
141:03 - save it and to update the modified date
141:06 - of the conversation you can just add
141:09 - conversation dot save since we have it
141:11 - already up here
141:13 - and when that is done we can redirect
141:15 - the user back to the conversation page
141:17 - so return redirect
141:22 - conversation column detail because
141:25 - that's a primary key to be a primary key
141:29 - and else we just create an empty
141:31 - instance of this form
141:35 - and Save
141:37 - so if I now refresh I can't see that
141:40 - because I forgot to add it down here
141:44 - form form save
141:47 - refresh and then we have it here hello
141:50 - back
141:52 - send and now this is blue because I sent
141:55 - it nice
141:57 - it's just a space between this
142:01 - close
142:02 - empty six
142:05 - better
142:08 - okay so now we have the conversation
142:10 - here and everything seems to be in order
142:12 - just want to fix the redirect that I did
142:15 - up here
142:17 - where is it the new conversation yes
142:21 - here if there are any conversation now
142:23 - we can now return internet return
142:25 - redirect
142:28 - conversation
142:31 - colon detail
142:33 - and then we can pause in the primary key
142:36 - equals
142:38 - we want to get the first one from this
142:40 - zero sorry put first Dot
142:45 - ID I think it's the correct way to do
142:48 - this let me try so if I just go back to
142:51 - browse the toy car contact seller then I
142:54 - sent directly to the conversation page
142:57 - perfect
143:00 - so now we have the possibility to create
143:03 - items we can edit them delete them you
143:06 - can set them as sold we can view our
143:09 - items here in the my items section we
143:13 - can go into them at the temp delete them
143:15 - everything is working we have a
143:16 - conversation between the users and
143:19 - similar
143:20 - so that is a wrap for this tutorial I
143:23 - hope you enjoyed it and that it was able
143:25 - to follow along
143:27 - if you want to keep practicing your
143:28 - Django skills feel free to keep building
143:30 - on this project you can add things like
143:32 - email verification image Galleries and
143:36 - admin dashboard and similar if you have
143:39 - any questions about the code or anything
143:40 - feel free to leave a comment below and I
143:43 - will answer as soon as I can

Cleaned transcript:

learn Django by building a simple Online Marketplace Django is a python framework that makes it easier to build websites with python Stein with code from Stein teaches this course Stein is a very experienced course creator the project you develop in this course features authentication communication between users a dashboard for items form handling and more in this tutorial I'm going to show you how to build an online marketplace where people can sell and buy new and used items first I just want to show you a little demo of the project so you know what we are going to build okay so here we can see the front page of the project we are building you have a simple menu with a few items you can go to the inbox dashboard you can browse items and you can create a new one on the front page the six newest items will be showing and at the bottom you can see the categories you'll also see how many items that belongs to each of the categories and if you go to for example new item you should be able to select the category for item fill out information at the name description price and add image the browse page you should search in title and the description of the product and you can go to categories if you just want to see toys for examples and you can clear the filters in the inbox you should see conversations that you have with other users and you can go into here and you can talk directly to the owner of an item you can also go into an item here and click contact seller if you want to do that on the dashboard you have your items here you can edit them and delete them so if you go into one of these then you have two buttons here edit and delete and on edit page you can just fill out information just like you did when you created it and you can set here if it was sold or not I'm going to begin by installing and setting up everything we need and then build the project piece by piece I would recommend that you know the basics of HTML before you start this course because I'm going to focus mainly on Django and a little bit of Tailwind okay let's get started building the project so first I go to a command line and the first thing I want to do here is to set up an environment that Django can work in Python comes with a builtin virtual environment called then which I'm going to use right now I'm inside a folder called puddle which is the name of our project then to create the environment I just run the command Python 3 Dash M then and then the name which is just EnV what this command does is that it creates a virtual environment called EnV a virtual environment is an isolated little environment on your computer where you can install pattern packages like Django just for this project this makes it really easy to maintain deploy and similar in order to have the environment created we can activate it by running stores EnV bin activate and then you can see here that the name of the environment is prepended before the project name and when it's activated we can install Django busing pip install Django this will now install the newest unstable version of Django and if you dependencies that Django has great so the last step of this setup now is to create Django project and we can do that by running Django Dash admin start project and then the name which is puddle great so let's go into this CD puddle just to see what files we have there so we have a managed.pi and a puddle folder let me just go to visual studio code which I'd like to use where I have open up this folder with environment and the Django project so this manage.pi file is sort of a script for running administrative tasks like updating the database structure adding super users running the development server and similar plus you have another folder here with the same name of the project asgi.pi and wsgi Pi are entry points for the web server and you don't have to think about these files at this moment these are only going to deploy a project to a live server and then you have settings.pi which is kind of like a global configuration for the whole project here we have secret Keys installed apps and where templates are located information about the database how we want the password to be structured and similar and the last file is the urls.pi this is a file that can be thought of of like a table of contents for the whole project so this area will link the URL to a specific View so I'm not going to explain these files more right now it's easier to do that when we start using mm so you have some context okay let's go back to the command line and then we're going to run the Django development server and just to see that everything is okay and to run this with just a python Dimension by run server then you can see here that you get the warning I will come back to this later right now we can just copy this address and go to browser I like to use Google Chrome and then just paste it here then you can see here the install worked successfully congratulations nice so now that we have everything up and running we can create our first Django app a Django app is a folder with some files it's used to separate the views templates database models and similar for a specific part of a project for example the pages like the home page contact about and similar will each be stored in one Django app but we will also have one app for conversations and one app for items and so on but we'll come back to this later right now I just want to focus on the front page so I want to begin by creating a new Django app called core and to do that I need to go back to the command line stop the web server and then say python managed by see here that we use this file now start app and then core and this will now create a new folder with a few files so we can see that we have it here we have the migrations which is information about the database this is generated by Django so you don't have to think about it right now admendous pie is where we register the database models to be used inside the Django admin interface dot Pi is like a configuration file but just for this specific app models.pi is where we Define database models like information about what we want to store for an item for example the title description price and similar test.pi is where we can run automated tests and similar for this app and views does Pi is where we Define views for the app so it can be a bit hard to understand what all these files do but I promise you that you will get a better understanding of them when we start using them and now that we have created this app it's almost ready to be used we just need to tell Django that app exists and they're going to use it so if we go back to settings.coin you can see here that we have a little segment called installed apps we have a few of these builtin apps here already and then at the bottom you can add core and the functionality that comes from these builtin apps is something that most djangos that's used at some point for example you have the admin interface where we log in and can add the data to the project we have one for handling sessions a one for handling authentication and similar I will come back to a few of these later in this video so since you know I added core hair Django knows that this exists and is going to be used so then we can begin setting up the front page so if I just close this and find views.pi we can create our first View So Def index then we pass in a parameter called request this is information about the browser your IP address if it's a get or post request and similar so this has to be put in on all views that we use and then we just want to render a template very quickly by saying return render and we Post in the request parameter so this will now be available inside the template and then the template we're going to use which is core slash index.html and save so this is how simple a view can be and now that we have the view we can create the template so inside the core folder create a new folder called templates Django will automatically look for a folder called templates inside all of the register apps in the installed apps section and then inside the templates folder I want to create one more folder called core this refers to the core from The View we just created so this folder so Django automatically find this folder and then it will find the core index file in here and then in here we can just create a new file called index.html and this will do something like this so we add the doctype HTML the HTML tag head and then here we can set up the meta chart set charge it utf8 and then we can set up the viewport meta name view Port content this is so that page can be a mobile friendly width equals device Dash width and initial Dash scale s1.0 and then I want to include Tailwind as a CSS or as a CDN so script SRC HTTP test colon slash cdn.tailwind css.com and then we can just close this tag right like that now we can add a title to the page title puddle close this one title close the head create an important tag and then in here you can say div class p x 6 py6 space in here and H1 the front page then we can oops sorry closed H1 close the div close the border and close HTML and Save so the last step now is to add this to the urls.pi file so if I just open up the folder here again and find puddle URL step by then we can import The View we just created so from core.views import index and we can add it to the top of the URL patterns path set the path to be empty since this is the front page and then we want to use the view called index now we can set the name for this to be index and Save so if I now go back to here again that we can run the server go back to Chrome and refresh and now I'm at the front page and we can see here that I have space above and on the side and this is now H1 from Tailwind nice okay so now that we have all of this we can create a new page a page for the contact information but let's begin by fixing up the front page a little bit first because right now all of this code is inside index.html file I want to move most of the code into a new file called base.html which the index.html file should extend this way we can reuse the code for more templates throughout this project so inside the same folder as index.html we can create a new file called base.html great so here I can actually just copy all of the code from the index.html copy this and paste it here and then save this actually I can take this cut it out save and then in index.html file to now extend the base file we can say extends core slash base dot HTML then below here and just paste this title so now this will make sure that we extend the best.html file but the content is missing so if I go to the browser and refresh the title is gone so we need to introduce something called a code block so let's go back to paste.html and add that inside this div here so block content and close it and block this will not help yet but if I copy this go back to HTML index.html wrap it around the content here then we make sure that everything we put in here will be rendered automatically in here by Django 7 now refresh you did that the title is gone but the content from here uh sorry this doesn't have to be inside all of the templates nice so let's add one more code block to the base.html file for the browsers tab title so in here you can say block title and then and block space and then we pipe it like that so then on the index.html file create the same code block block title and now we can say welcome here and block and then welcome will automatically be put here in front of the pipe pedal see if I now refresh it will say welcome pedal nice great so now we can continue to the contact page let's begin with the view so in views.pi we create a new view depth contact passing the request parameter return render request course Dash contact dot HTML and Save then we can create a template so let's just copy everything from index.html create a new file we'll paste this and save it as contact.html in the same folder then we can rename the title of the of the page to contact and then the contact page then we need to add this to the URLs also so let's begin by importing it contact and import contact and remember to end this with the Slash let me pause in contact here that the name to be contact and the name we put in here would make it easier to reference this URL later in the project so if I now go to the browser and just manually go to contact then you will see that we are on the contact page perfect before we dive deeper into Django I just don't add a menu and a footer so let's go back again to base with HTML and edit there so base.html and then above here add a new no close py6 PX 6 Flex because we want items to be next to each other justify Dash between so that all space is put between the logo and the links if you remember from the demo and then items Center so that the links is on the same height as the logo and then we want the border on the bottom one pixel so border Dash B for Border bottom and the color for the Border can be border Dash gray 200 and then close the navigation bar like that and then on the left side we want a logo so a hrf slash I'll add a close to this text Dash XL and we want the form to be summable so font oops font semi bold purple so let me save now go to the browser see if this is correct yes so I don't have a navigation bar here which is white with the border on the bottom and then the logo to the left here nice and then I want some items on the right side here so then I need to create a new div oops div close space Dash X6 and this will automatically now add a space between each of the items I put in here so first can you begin with the new item link a hrf it's going to just be empty for now close text XL oh sorry text LG front semi bold and when we hover this I want it to be gray so hover colon text Dash gray 500 new item so let me see if this looks good yes so now it's put here on the right side and when I hover it it becomes gray nice so let me copy this to make a browse link browse and then I want to sign up a button and a login button so this looks a little bit different so I just want to create a new element H or if can just be empty for now close and this I want to have some padding so px6 and py3 text can also be LG and the font can be semi bold just like a pair but I wanted to have a background so PG teal 500 this is a dark green color then I want to set text to be white I want the corners for the button to be around that so I can either rounded Dash XL and when we hover this I want the background to be a little bit dark or green so hover PG teal 700 and then we add the title sign up even I'll make a copy of this we can do the same thing for the login a sec I want this to be gray 500 and gray 700 when we hover this then just replace the title with log in and Save so if I go back now refresh we have the new item browse and then these two with the hover functionality great then I wanted a very simple footer here as well so the nice thing is now that for but before I go there I just want to show that this comes from the base.html file so if I go to front page the menu is there as well that's what's so nice about extensions so let's go back to base.html and create the footer So Below this div you can add footer oops footer close py6px6 Flex justify between just like up in the menu and we got the b g the background to be BG gray 800 so it's a dark gray color I can close this I'm done in here on the left side I want information about the project div clause W 2 3 so this will take up to a third of the footer padding rate can be set to 10. close this one and then in here I want the title so H3 class mb5 front semi bold and this can be text Gray 400 about so we can save this now see what this looks like refresh so here I have the dark footer and then the title and down below here I want just a little bit of random text some lorem ipsum so P close text LG text Gray 500 or if blah blah blah so just copy paste and close the paragraph so then we have a little bit information about the project here then on the right side I want one more menu where we can link to about page to contact privacy terms of use and similar so here with a div close W1 slash three this doesn't need any padding and then here we had just make a copy of this title same menu instead and then I want to use a UL for the menu so you are close space Dash Y dash 2 so each of the elements in here have some space between them close the URL and then Li a hrf can just be empty for now close text LG textile 500 so it's a green color and when we hover this I want this to be a little bit darker green color so text teal 700 but closed link and close the Li so let's see what this looks like now don't have the menu here nice so let's add a few more elements here I mean that is the contact oops privacy and then we have the terms as well as terms of use privacy policy to be correct nice so if I refresh now we have the menu and everything we need so now I just want to activate this link here and let me go back here and then I want to use a code called URL let me just pass in contact and then Django will automatically use this URL function to find contact hair and give us this URL so if I refresh now click this one and I'm sent to the contact page nice by the way if you want to learn even more Django from me then check out my channel code with Stein you can find a link in the description below great now that we have the core app with a few pages it's time to start working on the categories and the items and for this we need one more Django app so go to the command line stop the web server then say python manager by start app item I want both of the categories and the item to be located in this app so that we need to register this with the Django so let's go back to settings.pi and add it in the list here save and we can close this so I want to begin with the categories since this is the simplest database model so if I just open up the browser here again find the item models.pi then we can create a new database model but then close category pausing models.model just so Django knows what we are using and the categories should only have one field which is the name so name equals models.char field and we need to set the max length there we can set this to 255 so don't have any limitations so then when we are created a database model we need to update the database by going to the command line and set python manage by make migrations so now you can see here that migration is for item we want to create a new model called category and if I open up the migrations folder and we have a new file here then you can see here what this is going to do so it's going to create a new table called category with the ID field and the name field so now that we have done this we just need to tell Django to actually execute this script and that's very easy we just python managed by migrate so now you can see here that it created it down here the item.001 and also a few other database tables this is from the authentication and similar that Django comes with now this warning should also be removed so to make it possible to add data or categories to your project we need to log into the admin interface and to do this we need a user so let's create one python managed by create super user admin admin at turtle.com and then a password then the super user created successfully then we can run the web server again try to log in so if I just copy this go to new tab slash admin then I need to log in with the user I just created okay so now you can see here that we have the authentication authorization we have users where is the admin user I just created but category model isn't there even though the database should have it already but you need to just tell Django that we want the database table to show in the admin interface so if you go to item and add the main.pi then we can first begin by importing the category model here so from dot models import category and I can say dot models because this admin.i file is in the same folder as models and then to register it we just say admin.site to register pass in the category so if I now go back and refresh the item that appeared here and we have the categories database table here nice let's try to add a few if I just click add let me add the toys I can add the furnitures I can add um clothes and save so if you see here now I see two things that I just want to fix first of all categories is misspelled that's because Django just automatically adds an add an S to the end of the app name but this should end in IES and same here category object three doesn't tell me anything about what this actually is so we need to set the string representation for this clause so if I just go back to the model Supply we can begin with the categories name so Class Matter and then we say verbose name plural categories and Save a very fresh now you can see here that this is now spelled correctly then I want to show the name of the category here so now we need to override the string representation so depth Str self return self.name so I just want to show the name the value from here it's even now refresh is it closed Furnitures and toys nice thing I just want to do now is to order this by name and this is also done in the meta which is kind of options for or configurations for the model so ordering name and since this is a typical we need to add a comma here since this is a iterable so refresh then everything looks great there nice and then I want to go to the next database model which is the item model so below here because I close item because in models.model I want this to have a name as well so I can just copy this paste it and I want the description so description equals models dot text field so this is now expected to be much longer than 255 characters that's why I want to use a text field and not a chart field I guess the blank equals true and null equals true in case the user doesn't want to provide a description for the project and then I want the price for the price field so price equals models.float field and I want a Boolean field to Mark if it's sold or not so is sold equals models.bully in field default should be just a defaults and I want to know when this was created so created at equals model dot date time field and I just want to add this automatically so then I can just add here Auto now add equals true then Django will handle this for us but I also want to know who created this so create that at night created by equals model dot foreign key now this is a index in the database between this item and the user for example adding a new user so here I can pass in the user which I will import very soon and then I need to set something about the related name to items so it's very easy to get all of the items belonging to a specific user and then the last parameter that we need here is the on delete models dot Cascade so if a user is deleted all of the items will also be deleted so now we can see here that I get an error because user is not defined so I need to imported a pair from django.comtrib dot auth dot models import user then the warning is now gone also I want one more foreign key after the category so category equals models Dot foreign key for send category and then we can set the related name here also to items and on delete models dot Cascade so if you delete the category all of the items belonging so let's category will also be deleted so the last field I want to add now is the image so for example below the price we can use the image equals model dot image field then I want to specify where on the server I want this to be uploaded so upload to item images and then Django we create this folder for us if it doesn't exist blank equals true and no equals true in case the user doesn't want to provide an image so if I now save we can go and update the database again so just go back to the terminal stop the web server then you can see here that I can't use the image view because pillow is not installed I'll just sort this I just need to run this command so clip install pillow a pillow is a python library for handling images like resizing saving them and similar so now that this is gone addon I can run the make migration script again and you can see here that I changed the meta option for the category and I want to create a new model called item and then just pattern matched by migrate so the last step 10 or the next step is to register this in the atom interface again so import item and admin.site register item and Save so if I now go here refresh okay sorry I need to run the server again of course refresh and then I have the items here but before I can create any one I just need to do some configuration for the images so if I go to the settings.pi scroll down we find something called Static files this is formable CSS files and similar as you can see here but I need to do the same thing for the media files so media URL should be media slash and then where the root folder for the media file should be so media root equals base there slash media so now this will create a media folder inside the root folder of the project this variable is defined at the top pair unless just the root folder for the project so now we can try to add a few of these so if I click add item and I select the categories toys uh um for example Teddy Bear this is the description and then the price for example 100 and then an image then I can select the teddy bear and this is created by admin so then I can click save and add another one to create one more in the clothes and then check it blah blah blah just add some random information and then select an image okay it's shoes that I have here so shoe one and this is also created by admin so now you can see here that I have the same string representation problem here you just want to fix that before I do anything more just copy this paste and save refresh and I will see the name of the item so if I now go back to visual studio code you can see here that we got the new folder called media and then Django created a new folder called item images and in there the images is uploaded nice so now I want to show the newest products from the database on the front page so let's find core use.pi then we need to import the database models here so from item dot models import category because I want to show this as well and item and then I can get the six newest project products here the same items equals item.objects dot filter is soul equals false because I don't want products that is sold and to get six I can just say six like this 0 to 6. and then to get all of the categories he has a categories equals category Dot objects.old and then to post them in and to be able to use them in the template we need to add a context here so comma categories past n categories and items items now this here two points up to this nice okay so then we can begin by showing that items so in the index.html you can just remove this one and create a new div class margin top six so we have some space up to the menu px6 py12 PG gray 100 rounded Dash XL close that div and then in here I want to add a title so H2 close mb12 text 2 times XL text Center and then the title newest items and save so let's go to front page just to see that it looks okay yes newest items and then I have a box here to show the items and so here I want to have a grid virtual three and three items So Below the title I can create a new div close grid grid calls three because I want to add three columns and then get three oops cap three which is the space between each of the items and then in here I want to Loop through the items that we provided in The View that is these ones which is a list of items and we can just F4 item and items close this one and four and then we create an element here div close it and a hrf just close that one as well it can just be empty for now and then we can show the image on the top so it did and then ink SRC item dot image dot URL now this will give us the full absolute URL to the image Clause rounded top XL so at the top of the image you'll have rounded corners and then below here I want to show the name and the price so div Clause P6 so I have padding on the side and on the top and bottom what the background to be white and rounded B Excel so the bottom of this div will be around that corners and then here we have a H2 for the title text to XL item.title I can close that one and below here I want to show the price P plus text Gray 500 price item dot price and close so even now save this we should see a loop of the project the products we have added okay the name is there because it's name and not the title sorry so I had a teddy bear press 100 shoe price 50. nice but the image is missing and this is because that Django really doesn't handle media image for us but since we are just in development now we can do a little hack or use Django for this but in production you should never do this so inside the urls.pi we can import two new things from chango.conf import settings and from django.conf.urls static import static and then at the bottom here you can add this plus static settings Dot oops media URL so now this points to the URL that we set in the settings Supply and the document root to find its files is settings dot media root and Save so even now go back and refresh the images is loaded nice and then below the newest images I want to show the categories just like in the demo so let's go back to the template and make a copy of this and just paste it below here and instead of saying newest item to say categories close this there and I can close that div and then in here I would Loop through the categories so for category in categories and four and then I can show you can actually copy most of this and just paste it in here but the categories doesn't have image so let's remove that and the categories doesn't have uh price but we can show how many products or items is in here so to do that we can create a function or we can just say category dot items dot count and items so I think this should be correct one items zero items one items but this should of course be category dot name so now we uploads on items Furniture items toys phone items nice so now we have a working front page for this project next step now is to make it possible to go into the detail page of an item so let's begin with the view for this this view should be in the item views.pi so here we can set def detail crossing the request parameter but since we want to find the detail of an item we need an ID or a primary key for this so let's add one more parameter here PK for primary key and then to get this from the database with the item equals get object or 404 right angle will give us a 404 error if this object doesn't exist in the database and we want to get this item from the item model where the primary key is primary key so this is now the primary key on the model itself and this is the one we get from the URL so you can see here that I get two warnings because I haven't imported this shortcut this can be together with render and I need to import this model so from dot models import item so now the warning is gone now we can return and render template so return render Quest in item slash detail.html and then the context which is item item and Save so the next step then is to create the folders and this template so here create a new folder templates and item and detail so detail.html and this should also extend the base.html so extends core slash paste.html I won't have the title here so block title and then in here we can show the name of the the items item.name and then just close this block and block then the block for the content block content and block so then in here I would have a grid for I want to show and then in here I want to have a grid because I want to have the image on the left and then information about the item on the right side so div class grid grid calls five and get can be set to six and then on the left side we have the image so div close call oops called spam call sorry call Dash span three because I want to take up three of the available filed columns msrc item dot image dot URL close rounded Excel because I want image to have rounded corners so before addending more hair I just want to see what this looks like so the next of them is to import this into the URLs file I want to have a separate URLs file for the items because this is a much cleaner way to do this so here I want to create new file urls.play and then we first need to import pod so from django.urls import path and we can import all of the views for the items from dot import oops views and URL patterns oops URL patterns path and when this has an integer primary key we want to use the views dot detail View the name can be detailed so this now expects an integer called primary key or PK and this PK has to be the same as we've set there and detail might be a little bit confusing now so I want to import or Implement something called at the name here name item I will show you very soon how this works this will now be a namespace for this app then I just need to import this URLs file to the main URLs file so in puddle urls at the topic part items include item.urls and this points to the URL file we just created and I get the warning here because you need import this together with pot and then all URS that begins with item will automatically take Lego into this and check if there is a pod with the primary key there nice so the last thing we can do now before we test this is to go into index.html and activate the link here so URL then we provide item which is the namespace or the app name detailed then we provide the primary key by saying item.id save so now Django will fix this URL for us so if I click this now teddy bear you can see that I'm sent into the detail page for the teddy bear and you can see the teddy bear name up there great so now I want to show some information on the right side here select the name the price who is selling this the description and similar so let's go back to the detail.html create a new div class call span span whoops Dash 2 close that div actually I want some more classes here like p6 and BG gray 100 and rounded XL and then the first element in here I want to add is an H1 H1 Plus mb6 text 3 XL and then item dot name close to H1 let's see what this looks like yes we have the gray box here with the title nice so now let's add the price and who's selling this so P close text Gray 500 trunk price item dot price and close the paragraph if I just make a cooked this I can rename the tight layered cellular and then item dot created by dot username so basically give us the username for the person who added this so 100 and seller is admin below here I want to show the description for the product item so P plus text Gray 700 is a little bit darker strong and then close you can have a text Gray 500 and this description closed string at the BR for line break and then item dot description close that one and Save so I only want to show this description or this title if there is an actual description so we can test that up here if item.description so now this will only be rendered if the user filled in and description for the item so let's close this and if like that and then below here I can have a button which we will activate later a hrf class inline block margin top six we're gonna space on this padding X6 and py3 text can be large and the font can be semibold and the background can be bjtl500 text can be set to White and if we hover this we want the background to be darker so hover PG TLD 700 and we can also have rounded Corners it's all rounded Dash XL and then the title contact seller so we'll come back to this and activate it later but let's make sure it's looking good and it does nice then below here I just want to show the related products or items so if there are more products in the same category so let's add one toy car blah blah and toy car is it by admin and then I want this to be showing at the bottom here so let's first make some changes in the view because here is where we get the related items related items equals item.objects filter and then I want to get all of them items in the same category as this one so category equals I10 dot category and I want to filter out the ones which set to sold so sold is still false and I want to exclude this item from the list so dot exclude PK equals PK and I only want to have three so zero colon 3 to split it and then we just need to append this related items list like this and Save and then to show this I just want to Loop through and show them just like we do on the front page so just copy this entire div here and paste it below this grid the bottom but instead of saying item in items you can say related items and place the title with the related items and Save so let's see what this looks like related items and I have the toy car here if I go into this the teddy bear will be a related product nice great so now that they have the basic browsing for this project I want to make it possible to sign up so I Can Begin by creating it new file in the core app so in the core app is where I want all of these views to be located let me just close a little bit of this and then in the core app I want to create a new URLs file file to clean up a little bit now you can import path again from django.urls import port and from Dot import views so import all of the views belonging to this app also one is that app name to be core now we set up the URL patterns can begin with empty one pot something views.index and the name is also index and we can also add above there so or contact or whatever we created if I just go to puddle URLs now we have this contact so let me move this in here and say views.contact and Save so now I can remove this from there and when the URL here is empty I want to use the include statement here as well so include core.urls so now it it will Loop through all of the paths here before it continue and tests with the items so then I don't need to import this here anymore but if I now save and go here and refresh I will get an error on this one in the footer because now this doesn't exist anymore so let me open up base.html and rename this to core colon contact since I added app name here it's a very fresh note everything is back as it was okay so let's continue with signing up a user so inside the core app I want to create one more file called forms.pi so Django helps us with creating users validation and similar let's first import forms from Django from Django import forms and we can import a user creation form from django.com trip oauth.forms import user creation form and I need to import the database model for the user so from django.com oauth models import user and then we can create it here so close sign up form now we pass in the user creation form which we imported a pair and then we need to do some configurations plus meta do we need to set the model we are going to use which is user that comes from Django and then I want to specify which Fields I want the user to fill out Fields equals username authentic fill out email password one one and password 2 which is the repeat password so let's save this for now and then we can create the view where we are going to show this form so inside you've used Pi we can import the form we just created from dot forms import sign up form and then we create the view so at the bottom here we can say def synapse in the request parameter and then we can create an instant deform form equals sign up form whoops and then we say return render request then the template which is course signup.html now you just need to post the form into the front end form like this and save then we need to create the template before we can test this so sign app.html I want this to extend the base as well oops extends core slash space dot HTML not add a block title sign up and oops and block okay have a double there block content and close this one and block and then in here we can begin with the Box around the form div clause W1 slash two which just filled out the half of the screen my6 to have space above and below this button my box and mxauto so it's centered on the screen on the background to be PG gray 100 and have rounded corners close that one then we can have it title H1 close and b6 text 3XL sign up so before I add anything more here we can test that this is working so let's go to URL point in show where to add it there but sign up slash views DOT sign up and the name s sign up now we can update the menu so this link to the correct page so that is the first link here URL core colon sign up and Save so if I go back now refresh click sign up now we have this box that fills out off of the screen and is centered um looks like I forgot to add some padding to this box so let's go here and say p6 save refresh and now it looks a little bit better down below here we can show the form so let's go back here create the form element form method should be that post action dot which is the same page we are on and since we are using a post request we need to add something called a csrf token this is security built in with Django to prevent crosssite reforce requests for jury I think it's good I can render the form by saying form.s p and then we have a button so button class py4 px8 text can be large the background can be teal 500 and only over this can be darker so BG teal 700 and I want the corners to be a rounded X L and the text to be white and we can just set the title to be submit and close the button save go back and refresh and we have the form here which doesn't look very good but we can try to customize this so it looks a little bit better so if I then go back here just remove this this is the easiest way to show the form and we can first make sure that if there are errors that are not connected to the fields we showed them here by saying form dot non field errors then we can add a div close mb3 and in here we have a label for the username label close inline block margin button to username close the label and then form dot user name close that Dev press save it now refresh we just have the username and it looks a little bit better but I will make it even better let's add a br here and we can copy this paste it for the email and form. email and the same with the password password one the repeat password repeat password repeat the password to and Save refresh so now the Forum looks a little bit better we will fix more styling I just want to make sure that we print out more errors down here if there are any so if form dot errors or form dot non field errors then we can close this pressing and if and if there are any we create a new div class and B three padding six in all Direction background can be PG red 100 rounded XL there and then we just Loop through the images here and the errors form Dot sorry we need to Loop through rambasing for field in form field dot errors close this and four and I just want to move this down there sorry it shouldn't be up there paste and Save so if I now refresh it looks a little doesn't look any different and I can submit it yet but let's fix the rest of the styling here which is done inside the user creation or the sign up form so let's go back to forms.play and we need to do some changes here so the username let's begin with that username equals form dot Char field then we set something called widget equals form dot forms dot text input typeset attributes adders equals create the dictionary placeholder your username save this see if it works yes now we have a placeholder there now we can add some Clause let's do it as well so close W Dash full py4 px6 and rounded XL nice so now this looks much better let's do this for the other three Fields as well email and this should be an email input so Django will validate it for us your email address and then password 1. this should be a password input or password I can just copy this password to and then repeat password and save so if I now go back and refresh the form looks much better still nothing happens if I try to submit this so I need to do some more changes in the views.pi here I need to check if the user has submitted and to do that like that if request dot method is post then I know that the form has been submitted so then you can create a new instance of the form I think form equals sign up form and passing request dot post which is all of the information from the form then I can check if it's valid so if 400 is valid then I can say form dot save and then the user will be created in the database and when that is done we can redirect the user to the login page that doesn't exist yet we can just say return redirect login now we will get the 404 error but we'll fix it later and if it's not the post request then we just use the amped form like that now we get the new warning here because we haven't imported this so let's import it up here together with render so if I now refresh try to submit assign a pair so then I was redirected to the login there nice but it means that it was working so when I go to users I will have a code with Stein the email and the password you can see here that user is active but it's not status staff and it's not a super user that means that I cannot log in into the admin interface with its user only super users can do that so now we have the possibility to sign up a user then we can make a possible to log in a user so I Can Begin by creating the form so if I just go to forms.pi we want to still be using an authentication form from Django so where we import this we can also import Authentication form and then we create it at the top here doesn't really matter Clause login form or authentication form I'm done here I want to override the fields for the username and the password so I can copy this paste it and the password here it's just called password and not password one but besides this it's completely same so I don't need a view for this because I'm just going to be used a login view that Django comes with so if I now just go to uart Pi I Can Begin by importing this from Django so from jango.com trip dot oath import views now this will crash with this one so we need to rename this by saying s auth views then I can append it here port login slash and then the view we're going to use which is now auth views Dot Login view dot S View like that and now set the name to be login but now I need to specify that we are going to use the form we created here so we need to import it here from dot forms import login form so I can just say authentication oops Authentication form equals login form so if a note just go to base.html I can import this sorry fix this here URL core login save I can try to use it okay so now I get the template does not exist error because this doesn't exist but this isn't really not the file we are going to use so I need to update here to tell Django which files to use template name is core slash login.html and this will look very similar to the sign up for the file so just copy everything create a new file and save it as login.html here I don't need a repeat password this should be called formed password and I only need the username and the password so then I can just fix the title log in and Save Django automatically calls a form for form that's why I don't need to rename this and everything should now be working so let's go back refresh and now we see the login form so now I can try to log in with the user I created call it Stone and then my password so now I was automatically redirected to something about accounts slash profile this doesn't exist and we are not going to use it either it's just the default URL that Django tries to redirect you to so you can override this by going to settings time settings of Google login redirect URL so you can be sent to the front page when you are logged in login URL so again so if you try to visit the page you don't have access to you you will be redirected to this URL and you can also that log out redirect URL Wireless here to the front page or when you logout you will be sent to the front page so if I just remove this now it doesn't look like we are authenticated I want to hide these two buttons when we are authenticated and show an inbox button and a dashboard button instead so let me go to base.html and then above here you can say if request.user dot is authenticated then I want to show two buttons else then we can show these two so let me close this and if and save so I'll go back and refresh those two buttons are now gone that's because their Quest user is authenticated there is always a user and if it's not authenticated it's an anonymous user so then I can make a copy of these two buttons just paste it in there and the first one can be in box and the other one can be dashboard then they can just be empty for now say go back and refresh now we have inbox and the dashboard button instead nice okay so now I want to make it possible to add items for the users so we can begin by creating a new form for this so if I just go back to editor and find the app for this the item and then create a new file here for forms.pi then I Can Begin by importing forms from Django from Django import forms and I want to import the database model item so from dot models import item then I can create the form class new item form and pass in forms dot model form mmhmm like is that the class matter so we can do some configurations we want to add the model to be item and the fields we want here is category and we want the name the description oops the price and the image great so now we can save this for now we will come back to The Styling in a little while but now we can go to reviews.pi to create the view for this So Def new request and I want this to be I want Django to require that you are logged in to access this error so to do that you can add something called a decorator so let's begin by importing this from django.com trip.org dot decorators import login required and under apply that to this view we just add login required so if you want to try to visit this without being authenticated you will be redirected to the front page now sorry to the login page and then here I can say form equals new item form we just need to import lists from dot forms import new item form and then we can say return render request Post in the template name which here should be item slash form dot HTML because I want to reuse this for the edit as well then we can pause in the form here form and form and Save and when that is done we can create the template so just open up here again and then inside the item folder create an equal form dot HTML so here we can begin by extending the template extends core slash base.html now we set up the title block title new item no sorry actually here I want to post in a variable called title you might wonder where this is coming from and I will show you under block in views here you can append it there title new item but then we can do the same with the edit view we just say edit edit item so when that is done you can go down here create a block content close it and then in here we can begin with the title H1 close mb6 text 3XL and then the value here should also be title which will be new item and then we can set up the form form method should be post the action can be the page we are on and here we also need to set something called Inc type to multi port form data and this is needed to be able to upload images and then here we add the csrf token close space dashy 4 to have space between all of the fields and then just form dot s p so we can close this one and then I want to show the errors there you just want to copy that from the from the sign up form because this is identical or the login form that doesn't matter let me just copy this go back and paste it here and then below here we can have the button which is also the same as in the sign up or login so just copy this go back and paste it and then you just want to close the form element okay um you should be there like that I think everything is okay here now last step done is to import this to the URLs page so here you can add this above here but new views Dot a new item isn't that what I called it not just new okay and then we set the name to be new like that great so if I now save then I can go to the menu in base.html to add the button here so we can have this together with these two the Inbox and the dashboard can I have it first there URL should go to item colon new like that and then we can rename the title the link to new item and Save so even now go back and refresh should have a new okay I will already have this of course so I don't need the button there sorry but okay sorry let me just copy this and paste it there because it should be on that link it doesn't need a separate button so save again refresh and if I click this now I will be redirected to the login page because I wasn't logged in so let me log in with code with Stein and then my password let me try to click it again new item and then I have the form here nice so then I just want to fix the style length for this so if I go back to forms.pi I can add it there I can do it a little bit differently here than the other places just to see another way we can do this so the Jets oops digits equals and I create the dictionary category colon forms dot select and then I want to set the attribute so Etters create a new dictionary close W full py4 px6 rounded XL and border and Save so we can see if this is working that did not work okay so I need to have this inside the meta class of course so save this now refresh and then I have the styling there nice then I can do the same thing for the other just that I want to have this as a variable so up here I can say input Clauses equals paste it and then I got the input Clauses like that so I don't have to repeat this multiple times and this is still working nice so then I can copy this just at the comma here replace this for name and then forms dot text input like that and the same with the description there should be a forms dot text area and then the price which would be text input and the last one image which is the file input so then I can save this now go back and refresh and now the styling here is also working perfect I want some space between these two by the way so this should have an empty six that's better great so then the last thing we need to do now is to add a check if this form is submitted assimilar just like we did in the sign up so in the views.pi here we can see if request dot method method is post then form equals new item form and here we need to pause in request dot post and also requested files so we get the files that user uploads and then we can say if form dot is valid but instead of saying just form dot save here we need to do some changes here we can say item equals form dot save and pause and commit equals false because if we try to save to the database now the created by field is not added therefore we will get an error if we try to do this that's why we need to set commit false so this will just create an object but not save it in the database and then item dot created by equals request.user which is always authenticated since we have this login decorator item.save and that is done we can just redirect the user back to the detail page of the item they just created so return redirect pause in item colon detail and we need to set the primary key equals item.id which is the item we just created so I get the warning here now because I haven't imported redirect together from the Django shortcuts and if it's not a post request then it's a get request and we can do it like this so that is the whole new view perfect so we can try it out now if I go here now select the category furniture chair test the description blah blah two hundred dollars then I want to select an image so I can take the chair there submit okay enter a number okay let me do that instead 200 maybe I should use a DOT instead of a comma submit the image attribute has no file associated with it okay so that didn't work requested files that's correct then form as the angk type multipart slash form Terror this is weird let me just try to log in here again with the admin user oops admin like that and I just want to delete this here or I can set them chair one with it just so it's working now it's working here but why didn't the image get uploaded okay let me just try one more time it's a new item Furniture chair two hundred choose file chair two submit I guess now it was working so I don't know what the error was because I haven't changed anything but at least now it was working perfect so that means that now we have to possibility to add items okay so now I want to start building the dashboard where you can see your items edit them delete them and similar so let's start by creating a new app so python managed by start app dashboard now we can add this to the settings file dashboard and Save um here I don't want any database tables but I want to view so if I just open up dashboard views.pi then I Can Begin by importing the item model so from item dot models import oops import item and I can import the login decorator so from django.comtrib.auth.models import sorry decorators import login required then I can create the view just begin with adding this decorator def index request and then I want to get all that items that you have created so items equals item.objects.filter created by equals request.user and then I want to render the template render sorry return of course render passing the request parameter then set the template which should be dashboard slash index.html and then here we can pause in the items and Save so then I can set up the template for this I think it will be similar to top pair so no it will not that it will be very similar to the front page the beginning of the front page so down to the box for the categories let me just copy everything here and then create a folder templates and then dashboard and then the file for that index.html paste this and then I can just say and block this can just be like it is and the title here can be dashboard and instead of the newest items I can say my items and then just save this so now we have the view and the template then we just want to create a separate URLs file here so URL Point begin with importing from django.urls import path import import all of the views from dot import views setup app name to be dashboard and then the URL patterns then I just want one haircut empty because I want to prefix this in the main URLs file we use that index set the name to be index and save then I just want to import this to the main URLs so puddle slash urls.pi I can add it here below the items or above that doesn't matter Port dashboard include dashboard.urls and Save so if I now just open up base.html I can activate this button here called dashboard URL dashboard colon index and Save so then we can see if this is working now just refresh sorry I need to run the server again refresh again click dashboard my items and then I can see them here nice so now we can continue to make it possible to delete your items so I can create a view for this so inside the dashboard views.play here say at login required because you need to be logged in to delete your item def delete because in the request parameter and the PK which is the ID for the item we want to delete now we get the item from the database by saying item equals get object or 404 so it's importance we want to use the item model and we want to get to where the primary key is primary key from the URL and we are created by equals request.user so we can't get objects that you haven't created yourself and to delete it you just say item dot delete now we can redirect you back to the index page of the of the of the dashboard and when I think about it I actually want to have this in the item I item views instead so just copy and remove it from there go to item views.pi paste it below here then we can redirect user to the dashboard so return redirect dashboard colon index like that then we can import it to the URLs and add it here just copy this add delete at the end use dot delete and name is also delete so if I now go to the detail page you need to do some changes here so here where we show the price I want to have a box telling it that it's your is telling it that it's your item and that should go here below the description together with this contact seller so here I can say if request.user equals item dot created by then I know that you are the one who created this create a new theme here mt6 to some space above p6 to get Space Inside the Box PG white and rounded XL to get around that corners if you are not the one who owns the ad then and only done will I show the button for contacting a seller and if and then in here we can say p this is your item and then I can have the delete button here so a hrf URL item colon delete pause in the item.id which is the one you are visiting then it is at classes on this button in line block ing top 6 px6 py3 text LG font semi bold PG red Dash 500 so we know that it's dangerous button to click text white and around the dash XL let me pause and delete here so let's see if this is working now if I go back here go into one of the items nice this is your item and delete because now I'm logged in as the admin user okay I just want to add a edit button here as well so I have it so make a copy of this one paste it replace the title with edit and the button here can be green instead so teal 500 and the link can just be empty for now at least now I have these two buttons great so let me try to delete this one by clicking this delete and now it's gone from the list there nice okay so now I want to make it possible to edit an item so if I go to the forums.pi inside the item folder then I can make a copy of this I could reuse this but I want to have an extra field and I don't want the category here so let me remove the category remove it from the list here as well and then rename this to edit item form plus I want to add one more field here is sold like the one we have in the models.pi this doesn't need any styling so the form can just be like it is now and then if I go to view stockpile I can make a copy of the new view paste that I rename it to edit here we need a primary key so we can get the correct item from the database and I want to get that just like we do down here in the delete View here I do not want to use the new item form I want to use the update item form and the same down here edit item four as you can see here and it's import this so let me scroll to the top where we import the new item form and also import the edit item form so let me scroll down and then error is now gone we also need to do some other changes first and it's important I edit the title there and here I do not need to do this here I can actually just say form dot save because now the created by is already set one more problem now is that if you try to go to this page the form will be empty so we need to pause in some data here and to do that we can say instance equals item and the next problem is that this if we just try to save this the form will get an error because the instance is not set on this one so let me set it here as well instant equals four no sorry item so now everything here should be okay so then I just need to update the URL urls.pi in the item folder a copy of this edit a date and add it the last step done is to find a detailed page so we can update the URL so URL item colon edit and pass in item.id and Save so now this should work so if I try to go to the teddy bear edit now you can see that I have it here and it said and Save so teddy bear edited that means that it was working so you can now create edit and delete items perfect now I want to work a little bit on the browse page so we can search filter on categories and similar so let's begin with the view for this and just close all the files so it's easier for you to follow along so if I open up item views.pi then you can have it this on the top so I like to have the list View and then the detail View and then more specified view below So Def items or you can call it browse if you want to because in the request parameter here I want to get all of the items from the database that is not sold so items equals item.objects.filter is sole equals false now we can render the template return render request pass in item slash items.html and then we just need to pass in the items and Save so let me import this into the URLs file in the item folder this can just be empty since the items is added in the main URLs file views dot items and name items and Save so if I now open up a base.html we can update the URL here URL I oops item items save I can just close that one so now we can test I will get an error now because you have not created the template so that is the next step so let me go back to visual studio code create a new file browse dot h sorry items.html this should also extend the core slash paste.html file set the title block title and here we can just call this items we can call it browse or search or whatever you want actually and block and then block type now content content close it and block and then here I want this to be split into just like in the demo so I need to add a grid here div class pb6 so we get some padding on the bottom of the screen here enter the grid grid calls for Gap four close this one and then I want one to the left which should be this sidebar where we can select the filter search similar so div clause call span dash one just close it and in here should be the Side Bar and then you have the div clock oops div clause call span 3 close and in here I want to list out the the items just like on the front page so if I open up index.html you can make a copy of this one and just paste it in here and Save so let me try this now so if I refresh the template is there we have the sidebar and then the list of items perfect so then I can begin working with the sidebar here should maybe have a background here on this hair maybe if I just add it there BJ gray 100 fresh so then I get the white background and these and simpler which is a little bit better so then the next step is to add the sidebar so we can begin with adding a form method get and not post action should be URL item items that is the one we are on but I like to do it like this now okay that one and since this is a get request we do not need the csrf token and then first here we can add the input field for the query input name query and close W Dash full py4 px6 on this to be border and around that XL you can set the type the text and the value to be query I will get this from the back end very soon set the placeholder to be find a bike chair or a car or whatever you want and then below here I want to have a search button so button close empty2 the lesson space up to input field py4 PX eight text LG bgt 500 and text white around the Excel search the button and the form is closed okay so if I save now go back and refresh you should now have the search bar there nice so let me just fix the backend for this as well so that we get the query and we post it into the front end when we have it so at the top here we can say query equals request.get.get query default this to be empty now we can pause it into the front end as well like that so if I now try this about today the search will not work but you can see up here the third day is a panda there and we also have it in the form here nice so let me try to filter the search as well if there is any query so below here we can say if query and we know that the user has filled it out items equals items dot filter and then name I contains equals query so if the name contains the query I insensitive then the query will be filled out or processed it's probably more correct so if I refresh now you can see that only this is there if I empty this all of the items are there but if I want to search in the description as well I need to introduce something called Q so let's import this from Django Dot db.models import Q this makes it easier to search in multiple fields and then in here add the queue around this so if it's in the name or use a pi pair queue the description I contains equals query so if the title or the description contains it it will be searched perfect great so now that you have this we can continue with the categories first we can get all of the categories from the database so categories equals category Dot objects.org so let's import this up here and we need to append this down here in the context so now I can go back here and then below the form I can Loop through them and make it possible to click them so I'll just separate this a little bit by adding HR Clause empty to our my six and then p plus font summative bold cut the chorus p then I'll Loop through them inside an unordered list four category and categories closed and four and then in here because Ally close py2 px2 rounded Dash XL and then in here I want to have a link so a hrf URL should be item item colon items and close it like that and now we can append the query so query equals query from the form up here but I also need to specify the category category equals category dot ID which is the iteration we are on now and then here you can say category dot name let me close the link and I can close the Li and save so if now go back and refresh you know where the category is showing here great um but if I now click this nothing happens and this is not showing as active either so it can be again when making it possible to show as active so in the close here we can say if category dot ID equals category ID I need to provide this from the backend times at PG gray 200 and if so this will not work now because we don't have access to this yet so we need to go back to the Views pi then I guess category ID equals request.get.get pausing category ID there and then just default this to be zero and Save if I refresh now it's still not working you just try to inspect this okay so that does not work maybe if I default it to this no sorry I forgot to provide it down here of course and Save so refresh and it's still not working maybe if I take it back to zero nope okay no items if the category.id equals category ID okay remove category ID from there so this will just be category which is the name we have a pair so this is still not working so if I just convert this to integer down here set this to Zero Save on the refresh now you can see this has a gray background color nice so then I need to just make it possible to filter on the categories so above here I can say if category ID then I know that you have selected a category items equals items filter where category ID equals category ID and save so let me refresh and now it's only getting this if I select clothes it doesn't get anything twice you get these two nice so that is now working perfect so the last thing I want to do here now is make it possible to clear the filters so if I just go back to the template make a copy of these two and that's a clear filters and then in here I just want to add this input button so make a copy of the UL I and then in here we have the button ahref which can go to URL item colon items and this will then reset the filters reset or clear does not add some Clauses so this is more like a button close empty two py4 px8 inline block PG yellow 500 text and G and around that Dash XL and text can be white so refresh and then we have the care filters so if I click this now the categories are cleared and the search is cleared perfect so everything here is now working as it should so now automobile was about to communicate with each other I want to make it possible for users to send messages to the owner of a product or an item so we can begin by so we can begin by creating a new app so let's go to the web server python managed by start app conversation hit enter then we can register this in settings.play close these other files conversation and Save so when we have this now we can create a new database model for this so in models.toy I want to create a new model for the conversation close conversation passing model dot model and here I want the reference to the item so we also need to import this from item dot models import item and item equals model dot foreign key pause in the item and then we set a relate name to conversations and if you delete an item also want to delete all of the conversations so here we say models dot Cascade great and then I want to know who is the members of these conversations so members equals models dot many to many field because the conversation needs a multiple users the owner and the one who is contacting you there on depositing the user because the user's object are going to be used so to relate the name to be conversations so now I get the warning here because I haven't imported this so I'll do that from django.com Models import user and then I want to know when this was created Created at equals small dot date time field person Auto now add is true and I also want to know when it was modified so we can update an order by this modified at all models dot date time field and here it is using for Auto Now equals true so every time we save this object this will automatically update it threat magic claws meta here so we can set ordering by default percent minus modified at and Save um but before we update the database we can add one more table here close conversation message pause in models.model I would love to just use message but that would crash with some builtin functionality that Django has so we can begin by adding a reference app to the conversation models.4ind key conversation related name is messages and on delete models dot Cascade so if you delete an item the conversation will be deleted and also the messages that makes it very easy I need a feel for the content of the message also text field and when it was created so let me just copy this and I want to know who created it so created by equals models.49k user related name can be created messages and if you delete user also delete all of the messages so model dot Cascade great now we need to update the database from the make migrations and then the migrate script then I can just run the server so we have it running so before I do anything more I want to add open up the admin okay so we can register them in the admin interface from dot models import conversation and conversation message admin dot sorry admin.site.register conversation admin.site.register conversation message so that's done nice so then I want to create a new file here for the forms so we can have validation and similar forms.play Can Begin by importing the forms so from Django import forms and we need to import the conversation message model from dot models import conversation message and then we create the form conversation message form percent forms.model form and then we can add a class meta set the model to be conversation message the fields we want to use is only content then we can set up the widgets so we get some nice styling only for the content field forms.txt area actors new dictionary close probably full py4px6 rounded Excel and we want to have a border on it great so if I now save this we can open up the views.pi in the conversation app and create the first view here so I'm going to have a separate view for new conversation so when you click the the contact seller you will be sent this page to Def new conversation pass in request and the primary key and the primary key here is for the item and to make it easier to know this maybe I should just call it item underscore primary key just so I know that it's not for a conversation and then I can get item from the database get object or 404 item where the primary key is item primary key then I need to import these two here so we can begin with the get object or 404 I'm from item that models import item and then I want to check here if you are the owner then you should not be able to visit this page so if item dot created by equals request user sorry to equal sign here then just return read erect to dashboard colon index or you can redirect user wherever you want but I think this is a good place and import this shortcut as well and then I want to get all of the conversations connected to this item where you are a member so conversations equals conversation dot objects filter item equals item and then filter where members in remember to double underscore equals request.user.id so this is checking now is that if this ID is one of the members then we can proceed so now I get a new error here because I haven't imported this so from dot models import conversation and I can also import the form which is create this from dot forms import conversation message form and the reason why I want to do this here is I want to check if there already is a conversation with you and the owner and in that case I want to redirect you to that conversation so if conversations then there is an actual conversation so you can just pause it there for now redirect to conversation because we don't have that page yet and then down here we can check if the form has been submitted if requested method is post then we can check the form using form equals conversation form conversation message form passing request.post data not put post and then if form dot is valid and the contact field is filled out correctly and we can create a new conversation so conversation equals conversation.objects dot create item equals item so to do this before I create the message and then we need to add U to the members list and the owner of the item to the members list so conversation.members.ed request dot user and conversation dot members dot add item dot created by and I will save it conversation dot save then we can create the conversation message conversation message equals form dot save and posting the commit equals false so we don't get error from the database then we need to set the reference to the conversation conversation oops so let's just points up to this one and who created it so created by equals request dot user now we can save this as well and then we can redirect it back to the item so return redirect items item sorry item colon detail where primary key is item primary key and if it's not post request let me just create an empty form equals conversation message form then we can return and render the template return render request pause in the template which here should be conversation Slash new DOT HTML and we can pause in the form like this save so now I want to create a URLs file for this app as well oops that's wrong place in the conversation app urls.pi crunch Django import port and then the views from dot import views and app name should be conversation and it's the URL patterns pod can be new and here we want to pass in the integer called item primary key and then we just have used dot new conversation and the name should be new so then to link to this we just say conversation colon new so let's import this to the main URLs file which is in the puddle folder thought inbox or you can call it conversation if you want to do that include conversation dot urls save and close that file so now I want to create a template for this so let's begin with the folder templates conversation and then the template itself new.html and then again I want to extend the base template so extend core slash paste.html set up the title block title here we can say new conversation and look oops and block and block content and we can add the title layer H1 close oops and b6 and text 3XL new conversation close this one and we can close the and block then I just want to fix the link to this page so we can test that everything is working so let me just open up detail.html I can activate this button URL conversation colon new and then the item ID so if you now go into one of these okay you need to run cannot import from Django from django.urls import pod okay so now that is working refresh and now I can see this since I'm owning this if I go into toy car and set the code with Stein as the owner just save fresh now I can click contact seller and then I sent it to the new conversation page so that is working so now I'm just going to show the rest of this form and I can copy this form from the item form page this will be very similar so let me just copy this entire form tag and paste that here here don't need the multi Port because you're not going to send images but the rest can be like it is maybe you can say send instead of submit so save go back and refresh and then we have the content which is the message itself perfect so that means that now I could try to send this hello code with Stein I'm interested sound so now we're standing back here which means that it was working and if I refresh then I should have a conversation there I have one conversation between these two users for the toy car and then the message which contains the hello code it's time I'm interested message great so now we just want to set up the inbox page so we can list out all of the all of the conversations that we have so let me go back to views.play and I think I also want to add the login required here before I forget that so let me import this as well from django.com decorator Support login required then we can create the inbox view that login required inbox Quest and then here I want to get all of the conversations that you are a member of so I can actually just copy the statement from up here this can be a conversation you have created or I suggest that I've been sent to you just to remove the filter for the item then we can return and render the template return render Quest conversation slash inbox.html forcing the conversations for the template and Save so if I now import this into the URLs I can just put empty here so the URL will just be in books then we use dot inbox name is inbox you have an open up best.html I think I have a button for this this one yes inbox URL conversation colon inbox save and then go back here refresh click inbox and then I get the template does not exist error but that's great because it makes sense since I have not created it yet so let me find a template I can copy a little bit take this one and then create a new file inbox.html paste it say inbox in books and block let's say refresh and then it's there great so I'm just going to Loop through all of the conversations that we have here so below here I said div clause space Dash y 6 space between the conversations for conversation and conversations I can close this and four and then we can have a link a hrf it can be empty for now since we don't have a detailed page close block don't think that is correct actually maybe it's I'm just messing up a little bit and then we have a div for the image of the item so div clause p dash six Flex because I want this to be a flex container PG gray 100 and rounded XL close that one then out the image to the left div Clause padding right can be set to six in SRC conversation Dot item Dot image.url close w20 rounded Excel so that the width 20 and we have a rounded corners on the image as well save us save now we can try to see if this is working yes then I have the image for the toy car there then I want to show here who the member I'm talking to is and the item we are talking about so here we can say div close it right under there then I want to Loop through the members the four member in conversation.members.old so this is how you get all of the members and using many to many field and four and if the member is not you then I want to show it here so if member not equals request.user and four and then create paragraph Class B Class mb4 strong member dot username first strong and now we can show when it was sent so conversation dot modified that and we know when the last message was sent so close this one and then below here we can show what the item is so conversation dot item dot name and Save so hopefully now I've done something wrong invalid block tag so this will be and if fresh and let me see Hue we are talking to when the message was last sent and the name of this item great next step now is make it possible to click this conversation so you can see the detail page and make it possible to talk to each other so let me just go to views.pi create a new view at login required because you need to be logged in def detail request and the primary key and this primary key is for the conversation and not the item so now we can get the conversation by getting all of the conversations you have first so we just set this in not singular not plural dot get where primary key is primary key and then we can just return this turn render request conversation detail.html and I will pass in the conversation conversation and Save great so before we do anything with the form here I just want to create a template so that we have it um I think I can just just copy all of this create a new file and save it as detail.html and then for the title we can say conversation Capital C same thing with H1 here and I want to have this and I want to have this but here I want to say for message in conversation dot messages all so we pause in the conversation here and we get the messages because they are linked in this here so go back to the detailed page then I can remove the anchor tag because this is not going to link to anything and then here I want to show the message so here I do not need an image for each of these so let me just remove everything in here so I still want to have the padding the flexed around it and messages are similar and then here I can create a new div and a paragraph be closed and b4 so we have some styling for the name and then strong message dot created by that username and when it was sent sorry I need to close the strong pipe or at if you want that message dot created at I can close that paragraph and I can show the message so message dot content close that and Save so if I now go back sorry before I can test it I need to update to the URLs here pot where int is named primary key I can use the views dot detail name detail so if I now go to the inbox I can update the URL here URL conversation column detail pass in the conversation.id and ID and primary key is always the same so let me save that now refresh whenever I click it I'm sent to the conversation and here you can see the message and if I have sent the message I want this to be blue and if you have sent the message I want it to be Gray so let me just close the inbox go back to detail and then here before we add the background I can say if message dot created by equals request.user name is BG blue 100 else then it's gray and if and save so notice it would be blue because I sent this message great but let me make it so that it was the code with Stein who sent this refresh and then it's gray okay so now I want to add the form below here so I can send message back and talk to the other person So Below this div I create a new the form so form method should be post action dot which is the page we are on and it's at the csrf token and we can generate or show the form here form.sp then I need a button I can just go to the sign up page and copy this like that and we can close the form and let me just really notice the sun since we are sending a message if I save now go back and refresh nothing happens except the button is showing because we are not having any forums there yet so we need to go back to boost.pi and fix it here first we can import okay we have imported it but we can see if the form has been submitted so if request dot method equals post then form equals conversation message form and we need to pause in the request dot post data and if form dot is formed is valid then we can create a new conversation message so conversation message equals form dot save and need to say commit equals false and then we need to set a link up to this conversation and we need to set to create edit or created by requested user and I will save it and to update the modified date of the conversation you can just add conversation dot save since we have it already up here and when that is done we can redirect the user back to the conversation page so return redirect conversation column detail because that's a primary key to be a primary key and else we just create an empty instance of this form and Save so if I now refresh I can't see that because I forgot to add it down here form form save refresh and then we have it here hello back send and now this is blue because I sent it nice it's just a space between this close empty six better okay so now we have the conversation here and everything seems to be in order just want to fix the redirect that I did up here where is it the new conversation yes here if there are any conversation now we can now return internet return redirect conversation colon detail and then we can pause in the primary key equals we want to get the first one from this zero sorry put first Dot ID I think it's the correct way to do this let me try so if I just go back to browse the toy car contact seller then I sent directly to the conversation page perfect so now we have the possibility to create items we can edit them delete them you can set them as sold we can view our items here in the my items section we can go into them at the temp delete them everything is working we have a conversation between the users and similar so that is a wrap for this tutorial I hope you enjoyed it and that it was able to follow along if you want to keep practicing your Django skills feel free to keep building on this project you can add things like email verification image Galleries and admin dashboard and similar if you have any questions about the code or anything feel free to leave a comment below and I will answer as soon as I can
