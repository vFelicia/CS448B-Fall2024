With timestamps:

00:00 - hello everyone here on the free curcum
00:02 - Channel my name is Anu Kubo and I will
00:05 - be your Guide to the wonderful world of
00:07 - coding this tutorial is for anyone who
00:10 - has never touch code before and would
00:12 - like to get started with the basics such
00:14 - as where to even write code in the first
00:16 - place and how do we get text images and
00:20 - even tables and lists showing up on our
00:23 - web browsers for this we will focus on
00:26 - getting the right tools we need in order
00:28 - to get started as well as a fundamentals
00:30 - course in the HTML language or in
00:33 - non-code speak the thing that gives
00:35 - structure to our websites and apps this
00:39 - two-hour course is actually the very
00:41 - beginning part of my full stack coding
00:43 - course in which we go further and learn
00:45 - how to style things up using CSS make
00:49 - our code actually do things using
00:51 - JavaScript learn how to work with apis
00:53 - or in other words plugins such as this
00:56 - core map API right here in our travel
00:58 - app we built learn how to work with
01:00 - databases as well as builds are secure
01:03 - backends using node.js and express and
01:05 - on how to build apps that we can sign up
01:08 - log in and log out of while using
01:11 - popular front-end libraries such as
01:13 - react so that we have a full and
01:16 - experienced resume that we write
01:18 - together in which we can showcase
01:20 - projects out of the 22 that we built
01:23 - okay so what are we waiting for let's
01:27 - get to it
01:28 - so before we get started with anything
01:31 - let's talk about the tools we'll be
01:33 - using in order to help us code
01:36 - the most important tool we developers
01:38 - need is a way for us to write and edit
01:41 - code
01:42 - we could technically write our code in a
01:45 - text editor like this but luckily for us
01:48 - technology has evolved and we can now
01:50 - write code in code editors that are
01:53 - built specifically to make our lives
01:55 - easier as developers by Auto indenting
01:58 - lines and adding color-coded helpers for
02:00 - readability
02:02 - some code editors even go a step further
02:05 - and give us prompts when they detect
02:07 - that we have made an error this makes
02:09 - debugging code a heck of a lot easier
02:13 - there are so many current addresses out
02:15 - there some are hosted on your computer
02:18 - and some you can access online meaning
02:21 - you don't have to download anything you
02:24 - can just use it
02:25 - it is also worth noting that is sup up
02:28 - from a code editor is an IDE or
02:32 - integrated development environment
02:34 - it essentially does the same as a text
02:37 - editor a code editor but also acts as a
02:40 - compiler all in one space as well as a
02:44 - bunch of other stuff
02:45 - this tool is a bit too robust for what
02:48 - we will be needing in this course but it
02:51 - is worth knowing the difference between
02:52 - each of these tools
02:54 - today hybrids of these tools exist so it
02:57 - is much harder to fit a specific
02:59 - technology into one of these categories
03:02 - there are many types of code editors out
03:06 - there
03:06 - as mentioned we 've ones that we can
03:08 - download directly onto our computer and
03:11 - ones that are hosted online
03:13 - for this course I'll be showing you how
03:16 - to use one that is downloaded onto your
03:19 - computer I'm going to be using the code
03:21 - editor vs code
03:23 - I am doing this for no other reason than
03:26 - I had to choose one but if you would
03:29 - like you have all of these other code
03:31 - editors Ides or hybrids of both to
03:34 - choose from
03:35 - for those of you who would like to get
03:37 - coding straight away without downloading
03:39 - anything onto your computer you also
03:42 - have the option of these online code
03:44 - editors please take a moment here to
03:47 - decide which choice is right for you
03:51 - okay so by now we should have our
03:54 - preferred code editor of choice up and
03:56 - running as mentioned in the previous
03:58 - section I will be using vs code on my
04:01 - Mac
04:02 - this means I have downloaded it and it
04:04 - should look like this on your computer
04:06 - when it opens up
04:08 - the next thing we need to decide is
04:11 - where our project is going to live
04:13 - a website essentially consists of a
04:16 - bunch of files or organized together in
04:18 - a particular structure you design
04:20 - here we can see a project that holds my
04:23 - HTML file another folder that holds my
04:26 - style sheet or css files another folder
04:30 - that holds my JavaScript files and a
04:33 - folder that holds my images
04:35 - don't worry if none of this makes sense
04:37 - we will be building up a project called
04:39 - my portfolio slowly throughout this
04:42 - course starting with creating the folder
04:44 - in this section
04:46 - if you are like me and have downloaded
04:48 - vs code you will have to store these
04:51 - files locally on your computer
04:53 - you can store them wherever you like
04:55 - just make sure they are organized in the
04:57 - same way inside your project folder
04:59 - which we have called my Dash portfolio
05:03 - on this occasion I want to store the
05:06 - folder for my Dash portfolio on my
05:08 - desktop so that we can see it visually
05:11 - too
05:12 - if you have chosen to use an online code
05:14 - editor you will not need to do this as
05:16 - your files will be hosted online along
05:18 - with your project however I would still
05:22 - strongly advise watching along so you
05:24 - know how to do this in the future
05:26 - so on my desktop I'm simply going to
05:29 - press Ctrl and left click on my screen
05:31 - and then create a new folder okay and
05:35 - rename it to my Dash portfolio just like
05:39 - so
05:40 - next I'm going to open up vs code that I
05:43 - just downloaded so it should look like
05:44 - this and I'm going to open up that
05:47 - folder I just created
05:49 - so to do this I'm going to just select
05:52 - open folder and navigate to my desktop
05:55 - where I will find the my portfolio
05:58 - folder that I just created
06:00 - I'm just simply going to click on it and
06:03 - open it up by pressing the blue open
06:04 - button and there we go
06:08 - that is now looking good
06:10 - you will notice how I am keeping the
06:13 - folder name in lower case this is
06:15 - because many computers especially web
06:18 - servers are case sensitive this means
06:21 - that if you want to find a file in your
06:23 - project and you use a capital when none
06:25 - exists it might not work to be on the
06:29 - safe side I recommend sticking to
06:31 - lowercase when naming or folders and
06:33 - image files in our project
06:35 - this is also the case for having spaces
06:37 - in the names
06:38 - browsers web servers and programming
06:41 - languages do not handle spaces in the
06:43 - same way as each other causing potential
06:45 - chaos
06:47 - for example if you use spaces in your
06:50 - file name some systems May treat the
06:52 - file name as two file names and some
06:55 - servers might even replace the areas in
06:58 - your file names so the spaces with
07:00 - percentage 20 instead it is for this
07:04 - reason that I would strongly suggest
07:06 - using a hyphen instead of a space when
07:09 - naming files and folders
07:11 - okay
07:12 - and that's it we have created our
07:15 - project folder next let's learn a little
07:18 - bit about HTML so we can create our HTML
07:21 - file for our web page
07:26 - okay everyone and welcome to the first
07:29 - coding section of this course in which
07:31 - we will be learning about HTML in this
07:35 - section we are going to get started with
07:37 - the very basics of coding by looking at
07:40 - the language that essentially started it
07:42 - all for web development without it we
07:45 - would not have the pretty pages that
07:47 - make up things such as this very
07:49 - platform you are currently viewing our
07:51 - course videos on
07:53 - to understand a little bit more about
07:56 - how it all works I'll be starting off by
07:59 - giving you a brief overview of where
08:01 - HTML sits in context of a web page as
08:05 - well as understand how it came about and
08:07 - move on to a tutorial with interactive
08:09 - questions and code examples in order to
08:12 - learn how to use it the tutorial part of
08:15 - this section will take up the majority
08:18 - of this course
08:19 - we will start off by learning what
08:22 - exactly HTML is
08:24 - understanding where it came from looking
08:27 - at HTML elements understanding HTML
08:30 - syntax or in other words it's structure
08:33 - and then looking at HTML Anatomy once we
08:37 - have grasp the basics of HTML and how to
08:40 - use it we will be using everything we
08:42 - have learned by building out a project
08:44 - that we can be proud of we are doing
08:47 - this as throughout this course I will be
08:49 - giving you projects that you can choose
08:51 - to put in your developer portfolio
08:53 - these projects will be ones that I have
08:56 - chosen in order to help you approach
08:58 - potential hiring managers in a bid to
09:00 - try and get you your first developer job
09:04 - each of these projects will be appearing
09:06 - to you at various points in this course
09:08 - so while skipping lessons is optional I
09:11 - would strongly recommend you watch each
09:13 - lesson in order to fully build out your
09:15 - portfolio to its most wonderful
09:18 - action-packed self
09:19 - okay so what are we waiting for let's
09:23 - get to it
09:24 - before we get to any coding at all let's
09:28 - actually understand what HTML is
09:30 - HTML stands for hypertext markup
09:33 - language it is considered to be a
09:36 - comparatively simple language that helps
09:38 - create the building blocks that make up
09:40 - web pages and apps we use today
09:43 - we essentially use it to describe the
09:46 - structure of web pages what I mean by
09:50 - this is that we use it on a document
09:52 - designed to be displayed in our web
09:55 - browser by adding annotations that will
09:58 - change what certain elements look like
10:00 - think of it and the way a teacher marks
10:03 - your work with a big fat red pen
10:06 - they will make annotations on your text
10:08 - in order for you to change it it might
10:11 - be to change something like spelling or
10:14 - it might also be to make a heading
10:15 - larger or something bold
10:18 - these annotations are not to be seen by
10:20 - the end but we applied behind the scenes
10:23 - if you will
10:24 - same goes for applying markup language
10:27 - in computer text processing you are
10:30 - annotating a document that is
10:32 - syntactically different to the existing
10:34 - text
10:35 - now what you cannot currently use HTML
10:39 - to change the spelling of things you can
10:41 - use it to transform tags into a heading
10:44 - or make it bold as well as a bunch of
10:46 - other things
10:48 - in fact we can apply the hypertext
10:50 - markup language or HTML to this boring
10:54 - lump of text and make it look like an
10:56 - actual recipe we see online
10:59 - so we can take this and make it look
11:02 - like this
11:03 - so as you can see we have taken the text
11:06 - made satin text bold made some text into
11:09 - headings hyperlink some text and change
11:12 - some text into a segregated paragraph As
11:16 - we mentioned we have done this thanks to
11:18 - annotating the document using hypertext
11:21 - markup language or HTML
11:24 - this mock-up looks like this
11:28 - so here we can see the text and here we
11:31 - can see the markup or more specifically
11:34 - the hypertext markup language we
11:37 - colloquially call HTML
11:40 - let's have a look at some of these in
11:42 - the next section
11:45 - so we have now seen what the hypertext
11:48 - markup language or HTML looks like in a
11:52 - real life example let's break it down by
11:54 - looking at one of these elements first
11:57 - and understanding its syntax
11:59 - syntax is just a fancy word for the
12:02 - structure of statements in a computer
12:04 - language and that is exactly what we're
12:07 - going to be looking at we're going to be
12:09 - looking at the structure of HTML
12:11 - elements in the next four minutes I'm
12:13 - going to really deep dive into HTML but
12:16 - don't worry we're going to go through
12:18 - all of these sections video by video
12:20 - coming up next okay so bear with me this
12:24 - will be a lot
12:25 - this right here is what makes the text
12:28 - in between it bold it is referred to as
12:32 - an HTML element
12:34 - almost all HTML elements will have an
12:37 - opening tag and a closing tag like this
12:40 - one we can also pair this with a
12:43 - paragraph element that will make the
12:45 - text below this appear to look more like
12:48 - a standard paragraph
12:50 - when writing like this so by using the
12:53 - angle brackets in this fashion with a
12:56 - slanty line or solidus to close the
12:59 - element browsers know not to display
13:02 - these HTML tags but use them to
13:05 - interpret the content of the page
13:08 - by mixing and matching these HTML
13:11 - elements we are slowly starting to build
13:14 - out what looks more like a recipe page
13:16 - than a lump of text we originally saw
13:20 - in fact we can mix and match over 100
13:23 - different types of HTML elements here
13:27 - are just some of the more popular ones
13:29 - to our disposal
13:31 - let's start by looking at the paragraph
13:33 - element
13:34 - the Syntax for the paragraph element
13:37 - looks like this let's talk through this
13:40 - in more detail
13:42 - so first off we have the opening tab
13:44 - HTML elements are defined by tags
13:47 - written using angle brackets as we
13:50 - touched on before
13:51 - this opening tag tells our browser Hey
13:54 - listen up an HTML element is about to
13:57 - start
13:58 - next we have the closing tag which is
14:00 - just like the opening tag apart from
14:02 - this slanty line or solidus this tells
14:06 - our browser that the HTML element is now
14:08 - finished any text after this tag should
14:12 - not be applied the paragraph styling and
14:15 - then of course we have the content
14:17 - itself this is the text I want to apply
14:20 - the paragraph styling to
14:22 - it is in between the opening tag and the
14:25 - closing tag
14:26 - all together this is called a paragraph
14:29 - element ta-da
14:32 - and of course we have other elements an
14:35 - interesting one is the heading element I
14:38 - say this as there are six of them the H1
14:41 - tag is the biggest heading and the H6
14:44 - tag is the smallest heading you can use
14:47 - the tags as a main heading for example
14:49 - or a subheader in the browser The
14:53 - Heading tags would look like this so
14:56 - each of the tags would have a certain
14:57 - size assigned to it what is interesting
15:00 - about this is that giving texts and tags
15:03 - gives it semantic meaning to the browser
15:06 - meaning that the browser will read the
15:08 - text with some kind of meaning
15:10 - in this case the H1 tag will be treated
15:13 - as the most important title on the page
15:17 - I did also mention that most elements
15:20 - have an opening and closing tag I say
15:23 - most as some elements do not need both
15:26 - this applies to the image element for
15:28 - example
15:29 - we use image elements embed images onto
15:32 - our pages
15:34 - image elements do this by a specific
15:36 - attribute which is the source attribute
15:39 - represented by this SRC right here that
15:43 - takes the path to our image file
15:46 - I have also chosen to include the
15:48 - alternative attribute with a description
15:50 - of what my image is
15:52 - I say this as a choice but if you want
15:55 - to make your website accessible to all
15:57 - people it is something I would strongly
15:59 - advise
16:00 - this is because users who are visually
16:02 - impaired will be able to use tools to
16:04 - read out this alternative text to them
16:07 - it also helps others know what the image
16:09 - is all about if the file based to load
16:11 - or if the path to your image file is
16:14 - broken
16:15 - we will go into more detail about
16:17 - attributes and paths in the dedicated
16:19 - section on image elements further in
16:21 - this course
16:22 - now we can also add comments to our code
16:25 - that will not be visible in the browser
16:27 - but will be visible to us and other
16:29 - developers looking at our code
16:31 - to add a comment that will not be
16:34 - visible in the browser just like the
16:36 - tags we need to put that text in between
16:38 - two things
16:40 - in this case it's the two bracket arrows
16:42 - right here again making sure that these
16:45 - syntax is identical to this example
16:48 - now so far with these examples if we
16:51 - just put them in a document open it in
16:53 - the browser we would not be writing
16:55 - about an HTML this is because we are yet
16:58 - to do a few things which would include
17:01 - building up the anatomy of an HTML
17:03 - document we will do so in the next
17:06 - section
17:08 - in this course you will see me saving
17:10 - files a lot by using a shortcut on vs
17:13 - code vs code comes with many shortcuts
17:16 - that are available to you here are just
17:18 - a few of those for now I just want you
17:21 - to focus on using the savings shortcut
17:23 - which is essentially the command button
17:26 - or control button depending on your
17:27 - laptop plus the S button whilst on vs
17:30 - code okay so if you are unsure of if
17:34 - your file has been saved or not you
17:36 - should see this white dot disappear
17:38 - once that happens you know your file has
17:41 - been saved we will be needing this file
17:43 - to be saved as our next step will be to
17:45 - view the latest version of that file in
17:48 - the browser so if we already have that
17:50 - page up we will need to refresh the
17:52 - browser to see the latest version of it
17:55 - okay so save the file using command s
17:58 - and then we will go to the browser and
18:00 - refresh the page that we are viewing in
18:03 - there
18:03 - save refresh save refresh you got it so
18:09 - keep this in mind as we will be using
18:11 - this in the next section and pretty much
18:13 - all the lessons from now on until the
18:15 - end of the JavaScript module
18:19 - here is a basic file structure for when
18:22 - working with an HTML file when we use
18:25 - HTML elements outside of the correct
18:27 - HTML structure we're not writing valid
18:30 - HTML even if the browser can fix our
18:33 - mistakes
18:34 - the markup is only applied if the
18:37 - elements are in the correct environment
18:39 - we will go into what that environment is
18:42 - in this section it is important to note
18:45 - that for this course we are going to be
18:47 - using the latest version of HTML and
18:50 - that is HTML5 standard let's go ahead
18:54 - and recreate this HTML file in our code
18:56 - editors
18:58 - so here I am on my code editor of choice
19:01 - all I'm going to do is make sure I am in
19:04 - my project which I have named my
19:06 - portfolio and I am simply going to add a
19:08 - new file like so
19:10 - I'm going to choose to call it index
19:13 - next by giving it the HTML extension my
19:17 - code editor knows to treat this as an
19:20 - HTML file you can and as many HTML files
19:25 - as you wish your project naming them
19:27 - whatever you want
19:29 - just make sure to put dot HTML to tell
19:33 - your code Editor to treat them as HTML
19:36 - files
19:38 - now that we have created our file let's
19:40 - add some boilerplate code
19:42 - so I'm just going to paste them in here
19:45 - and talk you through it
19:47 - the first tag I want to show you is this
19:50 - right here it is a tag that tells the
19:52 - browser that this is an HTML5 document
19:57 - as mentioned there are previous older
19:59 - versions of HTML so just be aware of
20:02 - that on your journey as a web developer
20:05 - the browser needs to know what version
20:07 - of HTML the document is in order to
20:10 - render it correctly
20:12 - next we tell the browser where our HTML
20:15 - is starting we are doing this as even
20:18 - though we only have HTML in here for now
20:21 - we can actually write CSS and JavaScript
20:23 - in this document too something that I
20:26 - will show you later down the line in
20:28 - this course
20:30 - we are going to be using this HTML
20:33 - opening tag and closing tag as the root
20:36 - of our document everything else that we
20:39 - want to get picked up by the browser has
20:41 - to live inside of it
20:43 - next we have the head tag this is where
20:47 - we store information mainly this is not
20:50 - to be confused with a heading tab the
20:53 - head tag will store information that is
20:55 - not visible in the browser it is for
20:57 - storing not displaying
21:00 - you will see that in my head tag I have
21:03 - a meta tag with a Char set attribute the
21:06 - charset attribute specifies the
21:08 - character encoding for the HTML document
21:11 - this is not too important for now it
21:14 - simply says that we want to cover most
21:16 - of the characters and symbols in the
21:18 - world so in other words we can handle
21:20 - anything from Arabic to English to this
21:23 - funky little guy right here
21:25 - there are other meta tags we can use
21:28 - also but for now let's keep it simple
21:30 - and just use the ones we most need
21:33 - next up we have our title tag this is
21:36 - for naming our project we do this so we
21:39 - can store what we want to call what we
21:41 - are working on and we store this in the
21:44 - head
21:45 - so make sure it is in between the
21:47 - opening tag and the closing tag of our
21:50 - head
21:51 - once again this is not a title we will
21:54 - see in the browser however if you look
21:56 - at the tab of the browser your project
21:58 - is in you should be able to see it
22:01 - it will also show up in search results
22:03 - so for example in Google
22:06 - next we have the body now this is where
22:09 - the visible stuff will be
22:11 - this is essentially where you can put
22:13 - elements such as the ones we have
22:15 - discussed already such as the paragraph
22:18 - element The Heading elements the image
22:20 - element and many more
22:23 - we can also set the primary language for
22:26 - our document
22:27 - we can do so by simply adding the Lang
22:29 - attribute to the opening HTML tag select
22:33 - this this is useful as it will be
22:36 - indexed more effectively by search
22:38 - engines allowing you to appear in more
22:40 - relevant search results
22:42 - okay and there we have it
22:45 - let's start deep diving into some more
22:48 - elements next
22:49 - we briefly touch on headings so far in
22:52 - this HTML module however I would like to
22:55 - take a breath to Deep dive into them a
22:58 - little bit so you really get a good
23:00 - grasp of what they are and what they are
23:02 - used for
23:04 - so once again the heading element comes
23:06 - in six variations with the H1 element
23:09 - being visually the biggest and the H6
23:11 - heading being visually the smallest
23:14 - each one has an opening tag and a
23:16 - closing tag
23:17 - in addition to this it also tells our
23:21 - document which heading is the most
23:23 - important behind the scenes so for
23:26 - example if I was to give a web page an
23:28 - H1 element our web page knows to treat
23:31 - this as the most important title on the
23:33 - page kind of like giving an essay its
23:35 - title so we know what it's about
23:37 - you should also only have one H1 element
23:41 - on a web page hey you wouldn't name your
23:43 - essay twice would you
23:45 - after the H1 element you also should use
23:48 - these subheadings in order meaning the
23:50 - H2 element should come next and then the
23:53 - H3 and so on but you can have multiple
23:56 - subheadings of the same size again just
23:59 - like when writing an essay so for
24:02 - example this is good and this is not so
24:05 - good
24:06 - however there might be occasions where
24:08 - you might see these conventions broken
24:10 - in addition to this nesting multiple H1
24:13 - elements was allowed in older versions
24:15 - of the HTML standard however it was
24:18 - never considered a best practice so just
24:20 - keep that in mind
24:22 - now you might be thinking oh this does
24:25 - not look very fun
24:27 - well don't worry we can actually change
24:29 - what these headings look like using a
24:31 - programming language called CSS
24:34 - CSS will allow us to change the font
24:37 - size of these headings but not only that
24:39 - allows to change the color weight style
24:41 - and much more we will be looking at CSS
24:44 - right after the HTML module in this
24:47 - course
24:49 - another great and popular tax related
24:52 - HMR element is the paragraph element it
24:55 - is essentially this cute little p-tag
24:57 - right here
24:58 - the P element represents a paragraph or
25:01 - in other words a block of text we can
25:03 - use it to Bunch up text that goes
25:05 - together so like this
25:07 - this means if we put another paragraph
25:10 - element after this one again with a
25:12 - bunch of text it will appear spaced out
25:15 - from the other one now it does not
25:18 - matter what line you put the text on
25:20 - after all if you put all of this on one
25:22 - line it's kind of hard to read
25:25 - so you can put the text on multiple
25:28 - lines in your code editor if you want it
25:30 - will not affect how it looks like in the
25:32 - browser
25:33 - you might see p elements written like
25:36 - this or like this or other ways too both
25:40 - of these approaches I am showing you are
25:42 - valid just like with the heading element
25:44 - we can add CSS or in other words styling
25:47 - to change the default styling of the
25:49 - paragraph element meaning you can change
25:51 - this spacing amount but not only that we
25:54 - can change the font size the color the
25:57 - line spacing of the text and so much
25:59 - more
26:00 - we will be doing that in the CSS part of
26:02 - this course
26:04 - so by now we have had a very quick look
26:07 - at how do I offer elements this included
26:10 - the paragraph element and heading
26:12 - element now let's put what we learned
26:15 - into practice by creating an online
26:17 - recipe for macaroni and cheese
26:20 - so the first thing we're going to do is
26:22 - think about the website structure I
26:25 - would like my recipe page to have a
26:27 - heading followed by some sort of
26:29 - description an ideal element to hold the
26:32 - content of a description would be a
26:34 - paragraph element
26:35 - after this I want to use a smaller
26:38 - heading as a subtitle to let people know
26:41 - that this section is for the ingredients
26:43 - necessary
26:44 - after that I will need some sort of list
26:46 - to list out all the ingredients and next
26:49 - another subheading followed by the
26:51 - instructions in a numbered fashion
26:53 - wonderful I think this is a good start
26:56 - now let's get to actually creating this
26:58 - with HTML
27:00 - so first off I'm going to ask you to
27:03 - create another folder on your desktop
27:05 - this time I want you to call it HTML
27:08 - project one
27:10 - once you have done that I would like you
27:12 - to use what we have learned in order to
27:14 - create an HTML file in the project
27:16 - called index.html as well as add the
27:20 - correct boilerplate to it in order to
27:22 - get started
27:23 - please post here and have a go at doing
27:25 - this once you are done let's go through
27:27 - the solution to getting this done
27:29 - together
27:32 - okay so what I would do is well first
27:35 - off I will just open up vs code so
27:37 - please go ahead and do that and now I'm
27:39 - just going to open up that folder we
27:42 - just made so that directory just made so
27:45 - just go ahead and on your desktop find
27:47 - it click on it and open it up so there
27:50 - we go there's our empty directory or in
27:52 - other words empty folder and all I'm
27:55 - going to do is just create that
27:56 - index.html file so to do this I'm just
28:00 - going to click on here and I'm going to
28:02 - call the file index and I'm going to
28:05 - give it the HTML extension so dot HTML
28:08 - in order to let our code editor know to
28:10 - treat this like an HTML file
28:13 - wonderful now that we have that let's
28:17 - get going with our project
28:19 - so first off I'm just going to put in my
28:21 - boilerplate code I've just taken this
28:23 - from the previous project I have not
28:25 - remembered it please don't try and
28:26 - memorize this okay just make sure that
28:29 - you have your HTML element your header
28:32 - element and your body element and the
28:34 - body element is essentially what's going
28:36 - to hold all our visible elements next
28:39 - also make sure you have the meta tag up
28:42 - here as well so that we can see all the
28:44 - characters that we need okay so our
28:47 - project is looking good at the moment
28:49 - there is a few things we need to do
28:51 - outside of the meta chart set the other
28:53 - thing we have in this head element is
28:55 - the title that is going to hold the
28:58 - title of our project it will not be
29:01 - visible in the browser once again it
29:03 - will be visible in the tag and will also
29:06 - be visible as a title in Google search
29:08 - results
29:10 - okay so let's go ahead and call this
29:13 - something I'm going to go ahead and call
29:15 - it recipe as that is what best describes
29:17 - what this webpage is gonna hold the
29:20 - first one I'm going to put in is the H1
29:22 - element
29:23 - by choosing the H1 element I am also
29:26 - doing something behind the scenes
29:28 - search engines indexing our web pages
29:30 - will consider the contents of the H1
29:32 - heading more important than that of an
29:35 - H2 heading for example without any
29:38 - headings at all our page will perform
29:40 - poorly in terms of search ability online
29:42 - or in other words poorly in terms of SEO
29:46 - one other thing that is happening is
29:49 - that we are defining this as the most
29:51 - important heading on the page for screen
29:53 - readers used by the visually impaired if
29:57 - no headings are provided users of the
30:00 - screen reader will not be able to jump
30:01 - from heading to heading and instead will
30:04 - be forced to read all of the text on the
30:06 - page as a lump of text
30:08 - once we have a heading I'm going to move
30:11 - on to using a paragraph element for our
30:13 - description
30:15 - so here is what our paragraph element
30:17 - will look like
30:19 - now we can make certain words or phrases
30:22 - more important in the paragraph by using
30:24 - these strong element inside of this
30:26 - paragraph element
30:28 - we would do so with the strong tag
30:31 - Now when using a screen reader this word
30:34 - will be read out in a different tone of
30:36 - voice
30:37 - now we can also visually see this has
30:40 - been applied bold styling however if we
30:44 - do not want the screen reader to read
30:45 - this out differently and just want to
30:48 - make this word look bold we can use the
30:50 - ball tag instead other things we can do
30:53 - is emphasize using the EM element once
30:56 - again the screen reader will use a
30:58 - different tone for this and if we just
31:01 - want to make it look italic we can use
31:03 - the eye element like so
31:05 - and great I think we should now check
31:09 - this out in the browser so what it looks
31:11 - like in the browser next before doing
31:14 - anything don't forget to save this file
31:16 - once again a shortcut to save this file
31:19 - is to press command s on your keyboard
31:22 - so please go ahead and do that you will
31:24 - see the little dot disappear at the top
31:27 - of the file tab now in order to actually
31:30 - view this file on the internet you're
31:32 - going to have to get the actual file so
31:35 - go ahead and left click on it and then
31:38 - just go ahead and copy the path so this
31:41 - one right here that first one get up
31:44 - your browser and paste it like so and
31:48 - there we have it we can view that whole
31:51 - file in a browser you're viewing your
31:53 - local file on your computer on your
31:55 - browser right now
31:57 - great now let's add a subheading for our
32:01 - list of ingredients
32:02 - so by now we know that a subheading is
32:06 - any heading below our H1 heading I'm
32:09 - going to choose the H2 heading element
32:12 - for this
32:13 - and wonderful now it's time to look at
32:16 - lists in the next section
32:20 - in this section I want to talk to you a
32:23 - little bit about the readability and
32:25 - presentability of code
32:27 - for this in HTML I'm going to talk about
32:29 - indentation and spacing indentation and
32:33 - spacing should be consistent throughout
32:36 - your code we can use either the four
32:38 - space or two space indentation in HTML
32:41 - this means that each nested element
32:44 - should be indented exactly once inside
32:47 - their parent tag by either four spaces
32:50 - or two spaces okay so as you can see
32:55 - here is what it looked like when it's
32:57 - all beautiful and neat with four spaces
32:59 - of indentation
33:01 - as you can probably see everything is a
33:04 - bunch more readable everything is kind
33:07 - of lumped together and you can see which
33:09 - opening tag and which closing tag go
33:11 - together just like the top article tag
33:13 - and bottom article tag
33:16 - this is in contrast to Bad Code like
33:19 - this
33:20 - I mean you can hardly tell which tag is
33:23 - starting where what the parent elements
33:25 - are which makes this overall a lot less
33:28 - readable than the previous version
33:31 - trust me this would make it much more
33:33 - difficult when debugging and trying to
33:36 - find tags that go together in the future
33:38 - another thing you should do is format
33:41 - lines so for example in this case you'll
33:44 - see that the text in my paragraph
33:46 - element is too long I would suggest
33:48 - splitting it out into multiple lines
33:51 - okay so kind of like this okay so this
33:55 - was just a quick break to talk about
33:57 - indentation and spacing please keep an
34:00 - eye on this moving forward
34:03 - in this section we're going to learn how
34:05 - to make a list such as this section
34:07 - right here that shows the ingredients of
34:10 - a recipe as well as this list right here
34:13 - a ordered list that shows these steps in
34:16 - making our wonderful macaroni and cheese
34:20 - list elements are actually made up of at
34:22 - least two elements a wrapping element
34:24 - and the individual list item elements
34:27 - themselves
34:29 - your list can be an unordered list like
34:32 - this one meaning that the order will not
34:34 - matter or an order list an unordered
34:37 - list is however perfect for listing out
34:39 - the items that we need to buy in order
34:41 - to make macaroni and cheese as the order
34:43 - in which we buy them doesn't matter the
34:46 - wrapping element for an unordered list
34:48 - is this UL element right here
34:51 - and of course we have the ordered list
34:53 - an ordered list will give order to our
34:57 - list items so just like we see here we
35:00 - get one two three the element in order
35:02 - to make an ordered list is Ol as you can
35:06 - see by the wrapping element right here
35:09 - as a default the order list comes
35:12 - numbered like so but we can also change
35:14 - it to be lettered no matter which list
35:17 - type you choose so the unorder list or
35:20 - the order list it should have the list
35:22 - item elements inside once again these
35:25 - Syntax for a list item looks like this
35:28 - it comes with an opening tag and a
35:31 - closing tag that will take content
35:33 - inside the list item element in this
35:36 - case it is some text but it can also be
35:39 - much more let's have a look at this in
35:42 - code okay so the first thing we're going
35:45 - to add is as we discuss an unordered
35:47 - list add the ingredients as the
35:49 - ingredients do not need to be in a
35:51 - specific order right because it doesn't
35:54 - matter what order we buy them in we
35:56 - might already have some in the kitchen
35:58 - or we might need to buy some more it
36:00 - really doesn't matter to us so let's get
36:04 - up our unordered list element which we
36:06 - now know is made up by these two tags
36:09 - with UL in them like this next let's
36:12 - open it up because it's gonna have to
36:14 - take some list items so let's put in our
36:17 - list item elements they are made up of
36:20 - the LI tags and opening and closing tag
36:23 - and we're going to put in seven of them
36:25 - so there we go I've just gone ahead and
36:27 - created all seven each with an opening
36:30 - tag and a closing tag that will take
36:32 - content inside of each one okay so as a
36:36 - reminder the content does not have to be
36:37 - just text it could be images it could be
36:40 - a bunch of elements nested inside of
36:42 - each other that really is up to us
36:45 - in this case however I'm just going to
36:47 - put some text okay so let's go ahead and
36:50 - do that I'm just going to paste it in
36:52 - from somewhere I have written previously
36:54 - so I'm just going to put it in for all
36:56 - seven of these list items I'm just
36:58 - putting in some text and it's the
37:00 - ingredients for macaroni and cheese
37:03 - okay
37:04 - so there we go we now need to save this
37:06 - page so save it pressing command s and
37:09 - let's check out what this looks like in
37:11 - the browser don't forget that we of
37:13 - course need to refresh our browser to
37:15 - see those changes and great there is our
37:19 - unordered list now that we have finished
37:21 - this let's move on to make our ordered
37:23 - list
37:24 - so once again just like before I'm just
37:27 - going to put in an H2 title okay so this
37:30 - is a subheading that I'm going to put in
37:32 - it's just going to say how to make it
37:34 - and underneath that is where we're going
37:36 - to put our orders list element so the
37:39 - wrapping element that will take list
37:41 - item elements so ol is the tag that
37:45 - we're going to use is going to have an
37:46 - opening and a closing tag and inside of
37:49 - it I'm just going to go ahead and put in
37:51 - three list item elements this time so
37:54 - please go ahead and do the same put in
37:56 - three and I'm just going to paste in
37:58 - these steps into making macaroni and
38:01 - cheese so they're pretty simple it's
38:03 - just going to be brewing a pot of water
38:06 - to boil
38:07 - next I'm just going to paste in a longer
38:10 - sentence okay so you will see I have
38:12 - formatted it to put it on different
38:14 - lines so we can see it and finally just
38:17 - the final this item element and that's
38:20 - going to say add cheese and macaroni and
38:23 - that's it how simple is that so simple
38:26 - recipe we're not going to win any
38:28 - Michelin stars for this but we will have
38:31 - a cool recipe web page that we have
38:34 - built so once again don't forget to save
38:37 - this page pressing command s and then go
38:40 - to your browser and refresh it so we can
38:43 - see the latest version of the document
38:44 - and ta-da there we have it
38:49 - our order list is now on there too
38:53 - in this next section we're going to look
38:55 - at links links are great as they allow
38:59 - us to essentially link to other pages on
39:02 - our website link to specific Parts on a
39:05 - web page that we built link outside of
39:07 - the webpage that we built all together
39:09 - and some are completely new on the
39:11 - Internet or even open up a prompt to
39:13 - email someone or call them a link
39:16 - element syntax looks like an a element
39:19 - like this and stands for anchor so if
39:22 - you hear someone calling in anchor link
39:24 - do not be surprised let's look at what
39:27 - makes up a link element now so we have
39:30 - the opening and closing anchor tags in
39:33 - between these Tags I'm going to put some
39:35 - text so that our browser knows that if
39:38 - we click on this text it will take us
39:40 - somewhere so for example I could put the
39:43 - words my YouTube channel
39:44 - here is what this will now look like in
39:47 - the browser so it just looks like some
39:49 - text for now nothing special
39:51 - at the moment of course if we click on
39:53 - this link it won't do anything we have
39:56 - not given it enough information about
39:58 - what we want to happen if we click it
40:00 - and why we want this link to take us
40:03 - to do this we need to Define where we
40:05 - want the link to take us using the href
40:08 - attribute we put the href attribute in
40:10 - the opening tag now in the value if we
40:14 - want to link it to my YouTube channel I
40:17 - would take the full path to my channel
40:19 - and put it here okay so now let's save
40:23 - this refresh and check it out and
40:26 - wonderful if we click on the link we are
40:28 - now taken to my YouTube channel page
40:31 - we can also use links to open up a mail
40:34 - option or option 2 call all you need to
40:37 - do is put the mail to prefix followed by
40:40 - semicolons and the email address you
40:42 - want to populate to your email recipient
40:44 - address with so here we go and if we
40:48 - save this file and go to the browser and
40:50 - refresh you will see another link
40:52 - if we click on this link however a
40:55 - prompted email we will show up we can
40:57 - also add a hyperlink to prompt calling
41:00 - so once again we will get the anchor tag
41:03 - but this time for the value for the href
41:06 - we will add the tell prefix like this
41:08 - followed by a phone number
41:11 - this isn't my number by the way so
41:13 - please don't go calling this random
41:14 - number and apologies to the owner of
41:16 - this number in advance
41:18 - this time if we save this page and go to
41:21 - the browse and hit refresh then click on
41:23 - the link a prompt for calling that
41:25 - number will show up
41:27 - as mentioned we can also link to
41:29 - specific places on our web page but this
41:32 - time using IDs
41:34 - for this you'd first need to create the
41:36 - element you want to link to let's say
41:38 - this is a heading for example so here we
41:41 - have my heading element as you can see
41:43 - it has an ID that says other recipes and
41:47 - here we have my link element which has a
41:49 - href to the ID okay so hash here
41:52 - represents an ID and we're looking for
41:55 - the ID of other recipes
41:58 - so here we have my heading element as we
42:02 - know using two H1 elements isn't really
42:05 - best practice but this is just an
42:07 - example that I want to show you in terms
42:08 - of how to scroll to another main header
42:11 - so for now I'm just going to allow it
42:13 - and here we have my link element
42:16 - I would have to give my a-links opening
42:18 - tag the attribute of href and then pass
42:21 - through the ID so hash means ID add the
42:25 - element we want to link to
42:27 - so by giving it the value of hashtag
42:30 - other recipes I am now saying I want to
42:33 - link to my H1 element with the ID of
42:35 - other recipes
42:37 - and if I want my page to scroll to the
42:39 - element with the idea of other recipes I
42:42 - would have to give the link the href of
42:44 - the ID right
42:46 - so let's grab the ID and let's stick it
42:49 - up here great I am now just gonna add an
42:53 - unordered list here in order to give
42:56 - length to the page
42:57 - just so that the scroll is more obvious
42:59 - but when we scroll to this H1 element
43:01 - and now let's check it out
43:03 - so save the page first and let's go over
43:06 - to the browser and hit refresh I'm just
43:09 - going to go ahead and increase the size
43:10 - of this page so that it is more obvious
43:13 - everyone for when we scroll so just
43:15 - increase the zoom on yours too if you
43:17 - need so now let's test it out I'm just
43:20 - going to click on here and wonderful
43:24 - we managed to scroll to the H1 element
43:26 - we have now finished building out our
43:29 - recipe project using HTML so give
43:32 - yourself a round of applause I think we
43:35 - did great
43:36 - now we have not covered IDs in full just
43:39 - yet there is a bunch more stuff we can
43:42 - do with them this was just a quick
43:44 - taster we will cover them in more detail
43:47 - later on in this course
43:49 - so by now we know that we can build web
43:52 - pages to link to external resources or
43:55 - link them to specific elements we built
43:57 - in order to scroll to them visibly on
43:59 - our web page another thing we can do
44:02 - with the link element is take a user to
44:04 - a specific page that we built on our
44:06 - site
44:07 - to do this let's go back to our project
44:09 - that we called my portfolio
44:12 - and let's have a look at our project
44:13 - structure first
44:15 - so say we are on the index HTML page
44:18 - right here and we want to access another
44:20 - HTML page one of these Pages for example
44:24 - we would have to write a path from where
44:26 - we are currently in the project tree to
44:29 - this folder called pages and then to the
44:32 - file we want out of these two this is
44:34 - how you would do so so bear in mind we
44:37 - are starting from the index HTML page we
44:40 - are going to go into the folder called
44:42 - Pages using the forward slash I'm going
44:45 - to enter that folder and pick out a file
44:48 - I want to show let's just say that file
44:51 - that I want to show is called abami HTML
44:53 - so let's just specify that in that path
44:57 - Now by clicking on this element we will
45:00 - be taken to the about me page
45:03 - okay let's test it out to see if what
45:05 - I'm saying is true
45:07 - so first off let's make sure we are
45:09 - opening the correct project so let's go
45:12 - ahead and get the project my portfolio
45:14 - so here we have our project
45:17 - I'm going to go ahead and create a
45:18 - directory or folder for our extra pages
45:21 - called pages
45:24 - and in it I'm going to create one file
45:26 - called about dash me.html making sure to
45:30 - not have a space but have a dash
45:32 - and paste in some boilerplate code as
45:35 - well as change the title of the page so
45:37 - that we know which page we are dealing
45:39 - with of course don't forget to save this
45:42 - page now on the home page let's go ahead
45:45 - and add this link that we saw on this
45:47 - slide okay so just added this like so
45:51 - now let's open up the index HTML file
45:54 - not the about me HTML file so save the
45:58 - page and copy the path to the index.html
46:01 - file and paste it into your browser now
46:05 - don't forget to reload the page in order
46:07 - to get the latest documents and let's go
46:10 - ahead and click here and ta-da we are on
46:14 - the about me page it as works now let's
46:19 - have a quick look at the parts to this
46:20 - file here in the browser okay so as this
46:24 - project is stored on my computer I am
46:26 - starting at the root so going into a
46:29 - directory called users on my computer
46:30 - then going into a directory called Annie
46:33 - Kubo then into another directory called
46:36 - desktop and then into the directory that
46:39 - we made for my portfolio enter the Pages
46:42 - directory I just made and then getting
46:44 - the about me HTML file to show up in our
46:48 - browser of course when you host your
46:51 - projects online after buying your own
46:53 - domain this will not look the same I
46:55 - will most likely look something like
46:58 - this but we will leave that to the end
47:00 - now what if we want to link back to the
47:03 - home page from the about me page
47:05 - well we need to navigate back to do this
47:08 - I'll go one level back in the tree or in
47:12 - other words out of the pages folder we
47:14 - need these two dots like this followed
47:17 - by the Slash and then get the file we
47:19 - want to show
47:20 - so let's test it out so back in my
47:24 - project I'm just going to go to the
47:26 - about me page so I'm just going to go
47:28 - right here and add an anchor link with
47:30 - the href and as the part I'm going to go
47:32 - back so the two does mean we go out of
47:35 - the folder and then I'm going to
47:37 - essentially specify which file we want
47:39 - to show okay so that's all I have done
47:42 - so now let's check it out
47:44 - so let's go back to our browser hit
47:47 - refresh click on the go to about me page
47:50 - and here we are we're on the about me
47:52 - page and here's the link we just made
47:55 - that says go to the home page
47:57 - so let's test it out let's check that
47:59 - this takes us back to the home page and
48:02 - it does okay we are on the index HTML
48:05 - page that lives in my portfolio and
48:08 - amazing this is looking great so the
48:12 - slashes that we see in the path are
48:14 - essentially us jumping either backwards
48:15 - or forwards in the tree of my project
48:17 - from folder to folder essentially
48:19 - imagine each of the folders in this tree
48:22 - as a slash and if you follow the path to
48:24 - your next location and pick up a slant
48:27 - it's like you've just added it to the
48:29 - path that you are constructing okay so
48:32 - you're just picking them up like a train
48:33 - same thing for if you are leaving the
48:35 - folders you will need to use the dot dot
48:38 - to go all the way back to your spot in
48:39 - the tree where the train is safe to
48:41 - proceed to get to its destination
48:44 - got it now let's do another one
48:48 - imagine you are in this park called
48:50 - Contact HTML what part would you have to
48:53 - put in your href in order to get to the
48:56 - about me page have a think about it
48:59 - using this graphic of our project tree
49:01 - right here please post here and do that
49:04 - and once you are ready just hit play
49:08 - well as we are on the same location so
49:11 - in the pages folder we don't need any
49:14 - slashes our train literally stops pretty
49:16 - much at the destination
49:18 - so we just put the file name now let's
49:21 - test it out so first let's create a
49:24 - contact page in the Pages directory so
49:26 - contact.html and I'm just going to put
49:28 - in some boilerplate code and once again
49:31 - just change the title to say contact
49:32 - like we just did before with the about
49:34 - me page now in the contact page I'm just
49:38 - going to put another link so another
49:39 - anchor tag and I'm just going to put go
49:42 - to the about me page and of course we
49:45 - need to link this to that page so I'm
49:47 - going to use the href and I'm just going
49:48 - to put the about me page about Dash
49:51 - me.html Okay so just like we did an
49:54 - exercise if we click on this link it
49:56 - should take me to the about me page so
49:59 - this one right here
50:00 - and actually in here I'm just going to
50:03 - put in another link so from the about me
50:05 - page I also want to be able to go to the
50:07 - contact page so let's go ahead and add
50:11 - an a link and then I'm just going to put
50:13 - go to the contacts me page and as the
50:16 - href I'm just going to put
50:18 - contacts.html so exactly what our
50:20 - contact page is called
50:22 - great now let's check it out so save
50:26 - those files go back to the browser and
50:28 - hit refresh
50:30 - and now click on the about me page link
50:32 - and great we see both those links so we
50:35 - go to the home page or we go to the
50:37 - newly made contact me page so let's
50:39 - click that and wait we are on the
50:42 - contact me page we see the title in the
50:45 - browser tab we also see the path going
50:47 - to the Pages directory and getting the
50:50 - contact.html page and we see that link
50:52 - that we made on that page which takes us
50:54 - to the about me page and let's test this
50:57 - one out too and wonderful that's exactly
51:01 - where it goes once again as you can see
51:03 - by the tab name and the path that we
51:06 - have here
51:08 - okay great so hopefully this explains a
51:11 - little bit about how you would navigate
51:12 - from page to page on a website once you
51:15 - have this down let's carry on
51:19 - we are now going to move on from looking
51:20 - at how we can manipulate text in HTML
51:23 - and look at how we can add images to our
51:25 - web pages we have already touched on
51:28 - images before but for good practice
51:31 - let's recap what we have learned so far
51:33 - about this wonderful element
51:35 - in the introduction to HTML we learned
51:39 - that unlike most HTML elements the image
51:41 - element is one of the ones that uses a
51:43 - self-closing tag meaning it only needs
51:47 - one tag like this
51:49 - we also learned that it is the source
51:51 - attribute that contains the path to the
51:53 - image we want to embed
51:56 - this image can be in our project folder
51:59 - and we can navigate to it by writing a
52:02 - path to the correct file so we can use
52:05 - the URL address of an image that is
52:07 - hosted online
52:09 - just be aware that if the person or
52:11 - company hosting that image chooses to
52:14 - take it offline you will no longer have
52:16 - an image here to display you will see
52:19 - this broken URL icon right here instead
52:23 - you will also see the alternative text
52:26 - if you choose to add that to your image
52:28 - element
52:29 - the alt attribute is super helpful in
52:32 - occasions like this when they're linked
52:34 - to the images broken or the image won't
52:36 - load as it will allow the user to know
52:39 - roughly what it was about
52:42 - it is also wonderful for the visually
52:44 - impaired who might use a screen reader
52:47 - to see what is on a web page
52:49 - let's try to put an image on the about
52:51 - me page of our portfolio by putting an
52:54 - image of ourselves
52:56 - okay so I'm going to choose to store an
52:58 - image in my project all I'm going to do
53:00 - is find an image of me so I'm going to
53:03 - choose this Square jpeg so just make
53:06 - sure yours is also a JPEG or a PNG file
53:09 - and next I'm actually going to create a
53:11 - directory so making sure you're on the
53:14 - root of the project so the same level as
53:16 - the index HTML file just go ahead and
53:19 - create a directory called images
53:21 - and it's going to store all our image
53:23 - files from now on
53:24 - so there we go I just created a
53:28 - directory it's on the same level as the
53:30 - Pages directory and the index HTML file
53:34 - so let's go ahead and put an image in
53:37 - there I'm simply going to drag an image
53:38 - in for my computer like this and drop it
53:41 - in wonderful
53:43 - so there we have it that is now done and
53:47 - now let's go to the about me page and
53:50 - once again I'm just going to use this
53:51 - code right here so from the slide and
53:54 - I'm just going to paste it in like so
53:56 - so we now know that we need to get the
53:58 - path to this image and assign it to the
54:01 - source attribute and I'm also going to
54:04 - provide some alternative text just in
54:06 - case this doesn't work for whatever
54:07 - reason or just to make it accessible for
54:09 - everyone so I'm just going to put an
54:11 - image of Amir Cuba you can choose to put
54:14 - whatever you wish
54:15 - now the part to this well once again
54:19 - let's look at the project tree so I need
54:22 - to go back to the root of the project so
54:26 - I need these two dots and then I need to
54:28 - go into the images directory so I need
54:31 - to go into the folder I'm jumping into
54:33 - the folder and I'm just going to put the
54:35 - name of the file that I want to access
54:37 - okay so that's it now if we save
54:41 - everything that we've done so far and
54:43 - just refresh the browser making sure
54:45 - you're on the about me page amazing you
54:49 - will see that image it's unselt at the
54:52 - moment so it might be very big or it
54:54 - might be very small but we will work on
54:56 - that when it comes to the styling
54:57 - section of this course for now this is
55:00 - looking good let's carry on if you are
55:04 - having issues with this at any point the
55:06 - final code will be attached to this
55:09 - lesson so please go check it out
55:13 - in this section I want to show you how
55:15 - to work with tables this is going to
55:18 - involve a lot of nested elements so our
55:21 - HTML elements are getting a bit more
55:23 - complex
55:24 - by the end of this lesson you will have
55:27 - built something like this but don't
55:30 - worry we will build up to it step by
55:32 - step starting with a tiny table first
55:35 - so the simplest table elements can take
55:38 - three types of elements the table row
55:41 - element the table header element and the
55:43 - table data element we would start off by
55:46 - creating the table element which will
55:48 - wrap up all our content nicely so it all
55:51 - stays together
55:52 - inside I need to start off by making
55:55 - some table rows so let's say we want our
55:58 - table to have three horizontal rows I
56:01 - would add three table row Elements which
56:03 - look like this
56:05 - so now we have some rows I next need to
56:09 - decide what kind of columns I'm going to
56:12 - have
56:13 - let's say I want my first column to
56:15 - contain last names and my second column
56:17 - to contain last names
56:19 - I would need to add the table header
56:22 - element to tell our browser we want this
56:24 - to be the name of the column it would
56:27 - look like this
56:28 - now that we have defined the columns
56:30 - names we can fill out the rest of our
56:33 - data using the table data element it
56:35 - would look like this
56:37 - and that's it that's a table in its
56:40 - simplest format
56:41 - if you would like to give your table
56:43 - more semantic meaning for the browser
56:45 - you can also Define that the first table
56:48 - row belongs to the table's head by
56:51 - wrapping it in a t head element and the
56:54 - rest in a table body element so t-body
56:57 - visually it will not change what you see
57:00 - in the browser but it will help your
57:02 - website SEO as well as screen readers
57:04 - know what is going on
57:07 - okay
57:08 - cool got it good because now we are
57:12 - about to put all of this into practice
57:14 - by implementing a simple table onto our
57:17 - portfolio project
57:19 - okay so back on the about me page I want
57:22 - you to put in a table in order to
57:24 - organize our future projects this is
57:27 - what I want the end result to look like
57:29 - so three columns one for the hyperlink
57:33 - to the project which we will leave the
57:35 - href blank for now another column for
57:39 - the title of the project and another
57:41 - column for a quick description of what
57:43 - the project is about and what
57:44 - technologies we used for it
57:47 - for those of you thinking wait this is a
57:49 - pretty ugly table are you sure we want
57:51 - to put this on our portfolio don't worry
57:54 - the fun styling stuff is yet to be done
57:57 - for now let's just get building using
58:00 - the basic building blocks we have at our
58:02 - disposal okay so what are we waiting for
58:05 - let's get to it please have a go at
58:07 - building this Yourself by pausing here
58:09 - once you have built your table unpause
58:12 - and we will go through my chosen
58:14 - solution together
58:19 - okay so what I would do is well on the
58:23 - about me page I would start off with my
58:25 - wrapper element as mentioned this will
58:28 - be the table element as that's going to
58:30 - hold or our child elements together so
58:34 - go ahead and create your table elements
58:36 - so there we go there is an opening tag
58:38 - and a closing tag and in here well I'm
58:42 - going to do the more advanced version of
58:45 - the table so what I'm going to do is put
58:48 - in a t head element as the first child
58:51 - on my table
58:53 - so the T head element looks like this
58:56 - and it's essentially going to hold our
58:58 - head up for our table and then let's put
59:00 - the tea body element as the second child
59:03 - of the table element and that's going to
59:05 - hold the rest okay
59:08 - great so one child and a second child
59:12 - next I'm going to create a table Row for
59:15 - the head
59:16 - so for this I'm going to use the TR
59:19 - element once again it has an opening tag
59:22 - and a closing tag and once we do that
59:25 - I'm just going to put in two of these in
59:28 - the body as well so that we have three
59:30 - table rows in total Okay so let's go
59:34 - ahead and do that I'm going to put in
59:35 - the second table Rook here and then just
59:38 - put in another one great I'm just going
59:41 - to open them up because we're going to
59:42 - put content into here
59:45 - now in my first table row I'm going to
59:47 - use the table header element and we're
59:50 - going to have three of these because we
59:51 - want to have three columns or
59:53 - essentially three table headers and then
59:55 - I'm going to mirror that in the other
59:57 - table rows however with table data
59:59 - elements so that we can sort data for
60:02 - each of our columns so the first table
60:04 - header is going to have project the
60:06 - second is going to have title and the
60:08 - third is going to have description as
60:10 - that is what I want my columns to be
60:12 - called
60:13 - so there we go so now if I refresh the
60:16 - page so save your project and refresh
60:18 - the page I'm just going to make this
60:19 - bigger ta-da you should see right at the
60:22 - bottom are three table column names or
60:26 - in other words table header names
60:28 - great so now let's get to putting in the
60:32 - data
60:33 - so let's go ahead and do that back on my
60:36 - project in the first table data element
60:39 - well I'm just going to put project one
60:42 - and in the second table this element I'm
60:45 - going to put the title of that project
60:46 - is the one we made is the macaroni and
60:49 - cheese recipe and then I'm just going to
60:51 - put in a short description of that
60:54 - project okay so this is what a table is
60:56 - going to look like it's going to have a
60:58 - project it's going to have the title and
60:59 - it's also going to have a short
61:00 - description
61:02 - wonderful and let's do the same for the
61:05 - other one for this one I'm just going to
61:07 - put project two and this is going to be
61:10 - our table tennis leaderboard so let's go
61:12 - ahead and put table tennis leaderboard
61:14 - okay and then again let's just put in a
61:18 - description it's very long so I'm just
61:19 - going to format it a little bit better
61:21 - to make this more readable this will not
61:24 - be shown in the browser this is for us
61:26 - just to be able to see this in our
61:28 - project right now so there we go
61:31 - and there we have it that is our table
61:33 - I'm just going to put some more text in
61:36 - here just to Pat it out of it
61:38 - wonderful so now ta-da that is what our
61:43 - table looks like it's got three rows two
61:46 - for the data and one for the column I
61:49 - think this looks great
61:51 - now I'm just gonna go ahead and add one
61:54 - final table row just to kind of prepare
61:57 - us for what we are going to be putting
61:59 - in in the future so let's go ahead and
62:02 - make that table row let's put in a table
62:04 - data element with project three and of
62:07 - course we haven't made this yet so I'm
62:09 - going to put TBD as the project title as
62:12 - well as TBD for the project description
62:14 - but essentially we're going to add a
62:16 - bunch more projects into here so just so
62:19 - you know what this looks like I've gone
62:21 - ahead and added another table row and
62:25 - wonderful
62:27 - so this is looking great I'm really
62:29 - happy with how this is looking so far of
62:32 - course without any styling yet the last
62:34 - thing I want to do is just wrap the
62:36 - First Column entries in a links so an
62:41 - anchor links because we're going to want
62:43 - to link to this in the future at the
62:45 - moment I'm just going to leave an empty
62:47 - href attribute okay so this will just
62:50 - give this the appearance of links but
62:53 - without actually going anywhere so just
62:55 - do that for all the a elements like so
62:59 - and great so we have now created some
63:02 - links of course they will not work but
63:04 - visually at least this column looks like
63:06 - links this is the final look that I want
63:09 - to aim for
63:11 - wonderful
63:13 - okay so I think we are done with this
63:16 - project for now let's move on
63:21 - now that we have covered some of the
63:23 - many text related HTML elements let's
63:26 - move on to the fun stuff which allows us
63:28 - to create shapes add colors to our
63:30 - website starting with the content
63:33 - division element or in other words the
63:35 - dev
63:36 - I like to think of the div as a
63:38 - beautiful being that could be anything
63:40 - you want it to be we can get the div a
63:43 - height we can give it a whip and we can
63:46 - give it a background color using CSS or
63:48 - another one styling which we will cover
63:50 - in the next section we can also use it
63:53 - in a very basic form without styling to
63:56 - hold other elements together
63:58 - so for example we can create a div put a
64:02 - heading in it and put a paragraph in it
64:04 - and now these two elements will be
64:06 - gripped together
64:07 - so you might think great so with this
64:11 - div I can now group together pieces of
64:13 - information to start adding structure to
64:15 - my web page well not to throw a spanner
64:18 - in the works but you are partially
64:20 - correct the div should only be used if
64:23 - the section element article element nav
64:26 - element header element or footer element
64:28 - don't apply why you ask this is because
64:32 - these elements all have semantic meaning
64:35 - and will be interpreted by your browser
64:37 - to be an element that holds a section an
64:40 - element that holds an article an element
64:43 - an element that is the header of your
64:46 - website and the footer of your website
64:49 - djib does not have this it's like a
64:52 - mysterious ghost
64:54 - let's have a look at some elements with
64:56 - semantic meaning in the next section
65:01 - by now we should know the elements that
65:03 - make up a web page can have semantic
65:05 - meaning
65:06 - this means that the web browser will see
65:08 - them and recognize what the element is
65:11 - meant for this makes it good for users
65:14 - of assistive Technologies like screen
65:15 - readers and they are also good for SEO
65:18 - we have the header element which
65:21 - represents quite literally a header this
65:24 - can hold things such as your website's
65:26 - logo a search bar and other things
65:28 - typically seen in a website's top
65:30 - element
65:31 - the header element is not to be confused
65:34 - with the head element which as we now
65:36 - know holds the website's metadata so all
65:39 - the invisible stuff
65:41 - just like the header element we have the
65:43 - footer element which literally
65:45 - represents the footer of your web page
65:48 - you can put anything you want in the
65:50 - footer however typically you would see
65:53 - something like information about the
65:55 - company copyright data or any links that
65:57 - you would want to give the website
65:59 - viewer
66:00 - next up we have the nav element which
66:03 - represents the navigation bar on your
66:05 - website it will usually contain a menu
66:07 - or a list that will allow you to
66:09 - navigate between all the pages on your
66:11 - website we also have the section element
66:14 - which represents a standard section of a
66:16 - document
66:18 - sections should have headings in them
66:21 - after all think of when you read a book
66:23 - it would be kind of strange to see a new
66:26 - section that didn't have a header for
66:28 - you to know what the text in this
66:29 - section was about right without this
66:32 - heading the element will not appear in
66:34 - the document outline if you do not want
66:37 - to put a heading element in the section
66:39 - perhaps it's not really a section you
66:41 - are after perhaps a div would work
66:44 - better on this occasion
66:45 - the last populous sectioning element I
66:48 - want to cover is the article element an
66:51 - article element can represent things
66:53 - such as newspaper articles a blog entry
66:56 - a product card a user submit a comment
66:58 - or a forum post amongst other things
67:02 - just as with this section the article
67:04 - element should include a heading element
67:06 - nested inside of it
67:08 - now I must stress there are many more
67:11 - semantic sectioning elements to your
67:13 - disposal I have simply covered the most
67:16 - popular ones or the ones that might be a
67:19 - bit tricky however there are all these
67:22 - other ones as well at the time of
67:24 - recording if you have the time I would
67:27 - suggest doing a quick Google of each if
67:29 - you are interested I feel most are
67:32 - pretty self-explanatory so you don't
67:34 - feel like Googling it's fine let's carry
67:37 - on
67:40 - so by now we have covered the most
67:42 - popular text-based HTML elements as well
67:45 - as some semantic sectioning elements and
67:47 - the dip I am now going to ask you to put
67:50 - all of your knowledge to the test by
67:52 - building out this table tennis
67:53 - leaderboard
67:55 - unlike in the first project I'm going to
67:57 - leave you two at this time
67:59 - the goal is to create a directory or in
68:02 - other words folder called HTML project
68:05 - to create an HTML page to go into the
68:08 - project with the correct boilerplate
68:10 - code and then use the elements we have
68:13 - covered to recreate what we visually see
68:16 - here
68:17 - you are of course free to refer to the
68:19 - previous lessons we did in this course
68:21 - so far and don't worry that is in no way
68:24 - cheating no one is expecting you to
68:27 - memorize these things even I still copy
68:30 - and paste HTML boilerplate code
68:33 - so once again this project will utilize
68:35 - everything we have learned so far as
68:37 - well as three new elements that I
68:40 - briefly listed out in the semantic
68:42 - sectioning elements video okay so these
68:45 - three will be used in this project
68:46 - section it is a hairline element which
68:50 - is essentially a line an element that
68:52 - will allow us to write captions and the
68:55 - figure element as well so please go
68:58 - ahead and do some Googling by yourself
69:00 - on these three this is an excellent
69:02 - lesson in Googling and once you are
69:05 - ready please have a go at this
69:08 - once you are happy with your project and
69:10 - you want to see how I would choose to
69:12 - create this page please click on the
69:14 - next video and remember there is no one
69:17 - way to create this page there are
69:19 - literally thousands of ways you could do
69:22 - it so get going and I will see you soon
69:29 - okay so now I'm going to show you the
69:31 - solution to how I personally would
69:33 - create a table tennis leaderboard that
69:36 - looks like this
69:37 - okay so I'm excited to show you first
69:41 - things I'm just going to create a new
69:43 - folder on my desktop I'm going to call
69:45 - it HTML project two just like we decided
69:48 - in the previous video
69:50 - okay and once I've done that I'm just
69:53 - going to open it up in vs code so I'm
69:56 - just going to open that folder so please
69:58 - go ahead and do the same open it up in
70:01 - your code editors just simply by
70:03 - pressing open folder finding that
70:05 - project on your desktop
70:07 - clicking on it and opening it up
70:10 - so great I'm now in my project there is
70:13 - nothing in here at the moment so let's
70:15 - put in our first file
70:17 - so all I'm going to do is click on here
70:20 - and create an indexed HTML page not
70:23 - forgetting to give it that HTML
70:25 - extension to let our code editor know to
70:28 - treat this as an HTML file okay so go
70:32 - ahead and do that and now I'm just going
70:34 - to put in my boilerplate code
70:38 - so as we know for our boilerplate code
70:41 - we can just copy paste it so that's what
70:44 - I've done I've pasted it from another
70:46 - project and now I'm going to put in the
70:49 - title of my project this title will not
70:52 - be visible to us okay in the browser it
70:55 - will be visible in the tab of the
70:57 - browser and it will be visible if you
71:00 - uploaded this onto the internet and
71:03 - search for it in Google
71:04 - okay
71:06 - great so I'm gonna go ahead and call
71:09 - this table tennis so please go ahead and
71:12 - do the same
71:13 - great before we get to putting in
71:16 - anything in our body elements I just
71:18 - want to open this up in the browser so
71:20 - we can see what it looks like so all I'm
71:22 - going to do is just left click on the
71:24 - index.html document right here and then
71:28 - copy the path and then go to my browser
71:31 - and just paste in that URL like so so
71:34 - there we go that is what index.html page
71:38 - looks like and as you will see you can
71:39 - see table tennis in the tab name great
71:44 - now let's get to adding some elements in
71:46 - the body elements so first off I'm just
71:49 - going to put an H1 element and for my H1
71:51 - element I'm just going to put table
71:53 - tennis just like so
71:56 - so now if we say that file and refresh
71:58 - the page this is what it should look
72:00 - like we can see that H1 element in our
72:04 - browsers
72:05 - great
72:06 - next let's move on by putting an H2
72:09 - element in here
72:10 - so in my H2 element this is going to be
72:13 - a sub heading and all I'm going to do is
72:17 - put in some text so I'm going to put
72:19 - classroom tournament leaderboard just
72:22 - like so and now if we save this file and
72:26 - go ahead and look in the browser so
72:27 - let's refresh the browser you will see
72:30 - classroom tournament leaderboard showing
72:32 - up
72:33 - wonderful we have an H1 element and we
72:37 - have an H2 element so a subheading
72:39 - element let's carry on
72:42 - next let's get to creating some semantic
72:46 - sectioning in here and first off I'm
72:49 - just going to start off with creating a
72:50 - table
72:51 - so here's my table element it is a
72:54 - wrapping element that's going to take a
72:56 - bunch of other elements in order to
72:57 - create our table the first one being the
73:00 - T head element so just go ahead and put
73:03 - in a t-head element and then put in a
73:05 - cheap body element for the rest of our
73:07 - table rows okay
73:10 - so our table heads element well we know
73:12 - this has to contain a row so let's go
73:15 - ahead and put that in so that is my
73:18 - whole table head and in my table row
73:21 - well I'm going to Define our table
73:22 - headings one is going to be a position
73:25 - heading so just go ahead and put
73:27 - position one is going to be for the name
73:30 - of the person playing in the tournament
73:32 - that that is going to be for if they won
73:34 - or not and the fourth is going to be if
73:37 - they lost or not so it's going to be a
73:39 - count of one and lost tournaments so if
73:42 - we refresh the page in our browser that
73:44 - is what it looks like at the moment we
73:46 - have created four table headings or in
73:49 - other words four table columns
73:51 - great
73:53 - this is looking good next I'm just going
73:56 - to put in some table rows that are in
73:58 - the body so essentially for our data our
74:01 - first table row is going to have a table
74:03 - data element so I'm just mirroring the
74:05 - table heading so I'm going to have four
74:07 - okay so we're essentially going to
74:09 - create table rows for these columns well
74:12 - our first table data cell is going to
74:14 - have the position so we're going to have
74:16 - position one then we're going to have
74:18 - the name of the player who's in position
74:20 - one it's going to be my name Gomez and
74:24 - she's gonna have one five and lost zero
74:27 - so save this and refresh the browser and
74:30 - amazing we have just created our first
74:32 - table row to go on our table
74:35 - let's go ahead and create another one
74:37 - next
74:41 - okay now let's create our next table row
74:44 - so we know how to do this now just go
74:46 - ahead and use the TR tags to create a
74:49 - table row and then in here I'm going to
74:51 - put four table data elements because we
74:54 - want to essentially put data for a
74:56 - position and name a one and a lost value
74:59 - so let's go ahead and do that in fact
75:02 - I'm just going to copy this as we're
75:03 - going to have a few of these so we have
75:05 - one table row let's go ahead and paste
75:08 - another so we have two and three and
75:10 - four and five okay and let's do it so my
75:14 - first single row I'm going to put
75:15 - position two the name is going to be
75:17 - Mohammed Leroy and he's going to have
75:20 - won four and lost one okay next as
75:24 - position three I'm going to have the
75:27 - name of let's go with Patricia Bennett
75:31 - okay so that's the name I have chosen
75:34 - Patricia Bennett and she is one three
75:37 - and lost two position four is going to
75:40 - go to Sam Lehmann he has won two and
75:43 - lost three position five is gonna go to
75:47 - Young
75:49 - Lee he has one won and lost four and
75:54 - then let's do position six as well and
75:57 - this person is Astrid Genevieve and she
76:00 - has won zero and lost five
76:03 - and I think that's it so we just need
76:05 - six so let's save that let's go back to
76:07 - our browser and refresh and ta-da there
76:11 - is our classroom tournament leaderboard
76:13 - we have just completed our table this is
76:16 - looking great
76:17 - so let's carry on
76:19 - the next thing I want to do is just put
76:21 - in a line and for this I'm going to use
76:23 - the HR element that I did say to Google
76:25 - previously so if you Googled it you
76:28 - would know that the results would look
76:29 - like this and it's just a nice way to
76:31 - split this out okay
76:34 - wonderful so we have just split this out
76:37 - by creating a line thanks to the HR
76:39 - element which looks like this
76:42 - let's move on
76:43 - the next thing I'm going to ask you to
76:45 - do is put in another subheading this is
76:48 - going to be smaller than the other
76:50 - subheading we have so I'm going to use
76:51 - an H3 element for this so please go
76:54 - ahead and do the same just use your H3
76:56 - element and put in the title or the
76:59 - subtitle of rules of table tennis and a
77:02 - colon just like so so just like I have
77:05 - now the rules of table tennis this was
77:07 - an ordered list
77:09 - so I'm going to choose use the ol
77:11 - element so here are my ol tags and
77:14 - inside I'm going to have to put list
77:16 - elements now first this element is going
77:18 - to contain the texts of games are played
77:21 - two and then I'm going to make a bold
77:24 - number so I'm using the Bold
77:26 - tags or if I want to give this semantic
77:30 - meaning to the browser I can use the
77:32 - strong tags so each was fine to use okay
77:36 - whichever one you use is okay and then
77:38 - I'm just going to put space and points
77:40 - great
77:42 - our next item is going to have the text
77:45 - of alternative
77:47 - serves every two points are mandatory
77:50 - and this time I'm going to put the
77:52 - number 2 in strong so let's just get up
77:55 - on strong tags and I'm just going to put
77:58 - the number two in there great let's just
78:01 - minimize this for now
78:02 - let's make our third list element so our
78:05 - third list element this one is going to
78:07 - have the text of make sure to toss the
78:10 - all straight up when serving
78:14 - okay so that is my thirdest item let's
78:17 - check it out so say that page on refresh
78:19 - and wonderful so we've just made our
78:22 - rules of table tennis it is an ordered
78:24 - list and you can see the 10 and 2 are in
78:27 - bold so that is looking great let's
78:30 - carry on
78:32 - now what else do we need to create well
78:36 - I just want to create a paragraph
78:37 - element that's going to take some text
78:40 - and that text is going to be in italic
78:42 - so I'm going to use the I element for
78:44 - this okay you could have also used the
78:47 - EM element if you wanted to give the
78:49 - page semantic meaning but I'm just going
78:51 - to give it the I element from now so
78:53 - again each one is good
78:55 - in here I'm going to put official
79:02 - rules can be found on the international
79:07 - making sure to spell International
79:09 - correctly table tennis website so that
79:14 - is now going to appear italic on our
79:16 - page and I'm going to actually hyperlink
79:19 - here so to do this I need to get here
79:22 - and put it in some eighties or the
79:24 - anchor link and next I need to give the
79:27 - anchor link First tag so let's just
79:30 - space this out a little bit making sure
79:33 - that the indentation is correct
79:35 - so let's just make sure that those eye
79:37 - tags are on the same level and the P
79:39 - tags are on the same level
79:41 - next to make this link work I need to
79:44 - give the first tag of the a link and
79:47 - href attribute and I'm just going to go
79:50 - ahead and type in the URL to the actual
79:52 - International table tennis website so
79:55 - this is it for all of those curious okay
79:57 - that is the link to the international
79:59 - table tennis website
80:01 - great so now if I refresh this amazing
80:05 - we get some tags in italic and the here
80:08 - is hyperlinked and if we click on it it
80:10 - does take us to the official table
80:12 - tennis page how cool is that let's carry
80:17 - on
80:20 - let's just make the official Spell
80:21 - correctly first
80:25 - and great
80:27 - next I'm going to put in another line so
80:29 - let's go ahead and use our HR element
80:31 - again
80:32 - now I'm going to put another subheading
80:35 - so I'm going to use my H3 element again
80:37 - and this time I'm going to have the game
80:41 - set up so game setup is going to be my
80:44 - subtitle now I'm going to have a p
80:47 - element in here and this is essentially
80:49 - just going to give us some more
80:50 - information so it's just going to say
80:52 - the game should be set up as per the
80:56 - table tennis tournament
80:59 - at Liga Pro okay so just giving some
81:02 - insight into how the table tenants table
81:04 - should be set up and finally I'm going
81:07 - to show a picture of this so I'm going
81:09 - to use the figure element this is
81:10 - another element that I asked you to
81:12 - Google in the previous video so
81:14 - hopefully you did that and this figure
81:16 - element okay so for this we're going to
81:20 - actually have to put in an image element
81:22 - in here so go ahead and do the same it's
81:26 - a self-closing tag and then for this
81:28 - image we can have a figure caption so
81:31 - that is my figure caption element the
81:33 - third element that I asked you to Google
81:35 - in the previous video so hopefully you
81:37 - did that as well
81:39 - great
81:40 - now in my fig caption I want this to
81:43 - appear in italics so I can use the eye
81:46 - element or I can use the EM element if
81:48 - you want to give it semantic meaning
81:49 - that is up to you and I'm just going to
81:51 - give this image taken from Wikipedia
81:55 - okay so that is what I'm going to do and
81:58 - I'm actually going to hyperlink
81:59 - Wikipedia too so just whack in Wikipedia
82:02 - here and as the opening tag of my a
82:04 - element I need to give it the href
82:06 - attribute along with the link to
82:08 - Wikipedia which is this for table tense
82:11 - great
82:13 - okay so this is looking good let's go
82:16 - ahead and find an image so just whack in
82:19 - that Wikipedia URL and then copy the
82:21 - image address to this table tennis image
82:24 - and then as the source of this just put
82:27 - in the URL to that so as long as that
82:30 - web page exists as long as that picture
82:32 - exists this picture should appear in our
82:35 - own project so just go ahead and do that
82:38 - or you can put a picture in here okay
82:41 - that is up to you just like we did
82:42 - previously you can put a picture in here
82:45 - that you uploaded and made an image
82:47 - directory you could have done it both
82:49 - ways both ways are absolutely fine so I
82:52 - hope you did either of those or if not
82:54 - let me know what you did
82:56 - finally I'm going to put an alternative
82:58 - tag to this image element so I'm just
83:01 - going to space it out so we can read it
83:03 - a little bit better and put alt as the
83:06 - attribute and then some alternative text
83:08 - which in this case I'm going to have
83:10 - table tennis tournament as
83:14 - great
83:16 - okay so this is looking wonderful so far
83:20 - shall we check it out on the browser I'm
83:22 - just going to space this out a little
83:24 - bit so it's more readable so essentially
83:26 - I am just putting everything on new
83:29 - lines and making sure that each element
83:32 - is essentially in line with each other
83:35 - in terms of indentation okay
83:39 - so that we go each nested element is
83:42 - more indented than the other
83:44 - wonderful
83:46 - this is looking great that is my whole
83:48 - URL
83:50 - so now let's recap what we've done so we
83:53 - add in an H3 element as a subheading we
83:55 - added a p element as a subheading so now
83:58 - this is a lot I think we've done well
84:01 - one other thing we probably should do as
84:04 - all of this game setup is essentially
84:07 - associated with each other we should
84:09 - probably put it in a section element to
84:11 - hold it all together and we can do that
84:14 - as we have an H3 element so we have a
84:16 - title so let's go ahead and create our
84:19 - section element so our section element
84:22 - looks like this and in here we're
84:24 - essentially going to store all of that
84:26 - that's associated with game setup so
84:29 - there we go that is it and finally let's
84:32 - format it to make sure that all the tags
84:35 - are indented on the same level and that
84:38 - each nested element has indentation as
84:41 - well
84:41 - great let's do the same for the rules of
84:44 - table tennis I'm just going to put that
84:46 - in its own section so there we go and
84:49 - now let's format it so that each nested
84:51 - element is on the right level and great
84:55 - so now let's check it out save that page
84:57 - refresh and there we go that is what our
85:00 - table tennis leaderboard looks like it
85:03 - looks amazing it looks exactly like we
85:05 - wanted you to it looks exactly like the
85:07 - image that I showed you at the beginning
85:08 - I hope you also have this and if you've
85:11 - done it in any other way please do share
85:13 - your code with me on Twitter please
85:16 - either paste a link to your codepen or a
85:19 - picture of your code I would love to see
85:22 - foreign
85:25 - s I'm going to be focusing on creating
85:28 - forms forms are a fantastic way of
85:31 - submitting a bunch of information
85:32 - together
85:34 - we use them on sites to get back
85:36 - feedback write in or even sign up and
85:39 - log in
85:40 - forms are made up of a bunch of elements
85:42 - that are nested in between the two form
85:45 - tags
85:46 - some typical tags that can live inside
85:48 - the form element are the input elements
85:50 - label elements or field set elements
85:53 - however you can technically put in any
85:56 - elements you like
85:58 - the form opening tag can take certain
86:00 - attributes it can take the action
86:03 - attribute which takes a URL that will
86:06 - take care of the form's submission as
86:08 - well as the method which takes the HTTP
86:11 - method to submit to the form
86:13 - don't worry about this for now as this
86:15 - is an advanced topic we will cover later
86:18 - or you need to know for now is that the
86:21 - input with the type submit is how you
86:23 - would essentially trigger the action
86:25 - attribute with the method attribute to
86:27 - submit form data when you wish
86:30 - the input element with the type submit
86:33 - generally does not need a label element
86:36 - associated with it this is unlike an
86:39 - email input for example which would
86:41 - benefit from having a label element
86:43 - in the next section we are going to look
86:45 - at the other types of input types as
86:48 - well as the various attributes that we
86:50 - can use
86:51 - how an input tag looks and works wholly
86:55 - depends on the type attribute and the
86:57 - value you assigned to it
86:59 - by default if no type is provided it
87:02 - will take the form of a text input to
87:05 - use the text type here is a full list of
87:09 - the different types available to us
87:12 - I'm not going to go through all of them
87:14 - as some will be self-explanatory but to
87:17 - help you get the gist of how input types
87:20 - work let's whiz through the most popular
87:22 - ones now
87:24 - try to remember them as there will be an
87:26 - exercise straight after this
87:28 - so let's start with the text input in
87:31 - fact the Ember element like I said will
87:34 - default to the text type even if we
87:36 - don't Supply it with a type so this is
87:38 - an easy one to remember we can also add
87:42 - other attributes to the text input for
87:44 - example we can control what the minimum
87:47 - length of text and or maximum length of
87:49 - text can be with the mid length and max
87:52 - length attributes
87:53 - we can also add a placeholder to provide
87:56 - a hint as to what type of text we want
87:59 - in here we can also make it required
88:02 - with the required attribute or we can
88:04 - make it read only
88:06 - if we start working with JavaScript we
88:09 - might want to use the name and value of
88:11 - the input so we can work with it in a
88:13 - more readable way this means that we can
88:16 - send over the value of what we put into
88:18 - the input along with the input's name if
88:21 - we have loads and loads of inputs in our
88:23 - form
88:24 - in this case it would be first name Anya
88:28 - next let's look at the button type if we
88:31 - take the input element and assign the
88:33 - type button to it it will look like this
88:35 - so a button at the moment and of course
88:38 - won't have any functionality but it
88:40 - certainly does look like a button
88:41 - doesn't it we can also add a value in
88:44 - order to change the text inside the
88:45 - button too
88:47 - another attribute that goes in the
88:48 - button element can be disabled this will
88:51 - visually disable the button and prevent
88:53 - users from being able to interact with
88:55 - it
88:56 - now what if we switch this to a checkbox
88:59 - type
89:00 - well we got a checkbox visually that we
89:03 - can choose to tick or untick it can also
89:06 - take a value however this time this is
89:09 - not displayed in the browser or in other
89:11 - words on a client side it is used on the
89:14 - server side so that we can take the
89:16 - value of the checkbox and use it for our
89:19 - Computing needs along with the checkbox
89:21 - name
89:22 - this means that when the form is
89:24 - submitted the data name value pair will
89:27 - be subscribe newsletter if no value is
89:30 - supplied the new value pair would simply
89:33 - be subscribe on if the checkbox is
89:36 - ticked
89:37 - next up let's see what happens if we
89:39 - change this to be a color type
89:41 - the Empire element then takes the form
89:43 - of a Color Picker as we can see here we
89:46 - can click on the element and then drag
89:48 - the cursor to select say color which
89:51 - will generate an RGB value for it or a
89:54 - hsl value or a hex value
89:56 - we can also choose what color we want to
89:59 - start on by assigning a value to the
90:01 - input element
90:02 - now let's move on to the date type by
90:06 - supplying the date type we are creating
90:08 - an input that looks like this so
90:10 - essentially a date pickup with a year
90:12 - month and day when active in supporting
90:14 - browsers this input is fun as we can of
90:18 - course set a default value using the
90:20 - value attribute but we can also set a
90:23 - Min and Max state
90:24 - this means you will not be able to
90:26 - select dates in the date picker outside
90:28 - of this range and if we change this to
90:32 - date time local an option to select the
90:35 - time will show up to
90:37 - next up let's look at the email type now
90:40 - this might look like a normal text input
90:43 - but it has certain validation parameters
90:45 - meaning it won't accept the field unless
90:48 - you give it a at sign and a domain we
90:52 - can actually change these validation
90:54 - parameters by using the pattern
90:56 - attribute and using regex
90:58 - regex or regular expressions are rules
91:01 - that govern which sequence of characters
91:03 - come up in as such there is much to
91:06 - learn on Regis which we will not be
91:08 - covering in this course but if you would
91:11 - like to know more about how to write
91:12 - these rules please check it out in the
91:15 - link below
91:16 - in addition to the pattern attribute we
91:20 - can also have other attributes such as
91:22 - max length Min length multiple for
91:25 - multiple email addresses and placeholder
91:28 - for displaying some placeholder text
91:31 - next up we have the radio type you might
91:34 - be thinking hold on this is just the
91:37 - checkbox type of the circle well there
91:40 - is one big difference only one radio
91:43 - button in a given group can be selected
91:45 - at any point in time this is different
91:48 - to the checkbox in which you can select
91:50 - multiple check boxes
91:52 - here is what a group of radio inputs can
91:55 - look like and behave like we can even
91:57 - give them label elements and Link them
92:00 - to the respective input with the full
92:02 - attribute which correlates to the radio
92:04 - elements ID
92:06 - the range input is another fun one in
92:09 - that it has this cool slider we can set
92:12 - a bin and max range for the slider as
92:14 - well as hardcore the value it is
92:16 - currently at with the value attribute if
92:19 - we want to increment the slider to our
92:21 - biggest steps we can do that quite
92:23 - literally with the step attribute too
92:26 - and finally the last input type I want
92:28 - to show you is the submit type which we
92:31 - briefly touched on already
92:33 - just like the button type we can change
92:35 - the text and the button using the value
92:38 - attribute however we should only use the
92:41 - submit type to actually trigger
92:43 - submitting the form the form element and
92:46 - the input or the type submit are linked
92:48 - if you want to have other uses for the
92:51 - button inside the form and write your
92:53 - own custom JavaScript such as to update
92:56 - the value of an input dynamically or
92:58 - select something I would suggest using
93:00 - the button type
93:02 - and that's it we have just covered the
93:04 - most popular input types let's move on
93:07 - with some exercises
93:10 - foreign
93:14 - everything we have learned so far in the
93:16 - last section on inputs in order to
93:19 - really hone in our skills all about
93:21 - inputs so we're going to have three
93:23 - exercises we're gonna have to replicate
93:26 - what we see visually with code
93:28 - so to do this let's create a kind of
93:31 - scratch bar that we're going to work
93:33 - with
93:34 - so all I'm going to do on my desktop is
93:37 - create a project that I'm going to call
93:39 - classwork so there we go there we have
93:42 - our classwork folder and now let's open
93:44 - it up in vs code
93:46 - so go over to vs code and find that
93:50 - project
93:51 - so go ahead and find it on your desktop
93:54 - click on it and open it up
93:57 - okay great and now what do we do well we
94:02 - need to create our index HTML file so go
94:05 - ahead and create an index HTML file
94:07 - making sure to use the HTML extension
94:10 - okay so that code editor knows to treat
94:13 - this as an HTML file and there we go
94:17 - step two is going to be to add the
94:19 - boilerplate code so please paste some in
94:22 - from a previous project and let's just
94:24 - call this scratch pad for now
94:27 - great please go ahead and save this file
94:31 - now let's open it on the browser by
94:33 - grabbing the path and pasting it in the
94:35 - browser like we've been doing so far
94:38 - great
94:39 - now that we have that done let's
94:41 - continue
94:43 - so now that our setup is done let's have
94:46 - a look at the exercises that we need to
94:48 - replicate
94:49 - so for exercise one I want you to create
94:53 - an input that will take an email and
94:56 - it's obviously a company email that
94:58 - takes a certain domain
95:00 - so please take that into account and
95:02 - also take into account the fact that
95:04 - this has to be an email
95:06 - so three things here and you also have a
95:09 - placeholder visible so that is also
95:11 - something you're going to have to add
95:13 - and of course we also have a submit
95:15 - button that will submit our attempt at
95:18 - putting in an email
95:20 - so let's go ahead and do it
95:23 - I'm going to lead you to this I will
95:25 - however lead you with the knowledge that
95:27 - all of this has to come in a form
95:29 - element okay otherwise it will not work
95:33 - as intended when submitting okay so here
95:37 - we have the form element now please go
95:39 - ahead and make sure all your work is
95:41 - done in between these two tags so I'm
95:44 - going to leave you here please pause
95:46 - here and unpause when you're ready to go
95:48 - through my solution together
95:52 - thank you
95:55 - okay so what I would do is and of course
95:58 - this is just my solution there are many
96:00 - ways to do this is first off I would
96:03 - create an input element so let's go
96:06 - ahead and create one like so so it is
96:09 - just one tag like this and I'm gonna go
96:12 - ahead and give this the type of you
96:14 - guessed it email
96:16 - so there we go
96:17 - so now if we look in the browser and hit
96:20 - refresh I'm just going to make this a
96:22 - little bit bigger we have the input with
96:25 - a type of email right so it looks like a
96:28 - text type but we know it has a different
96:30 - semantic meaning and different
96:32 - functionality
96:34 - so now let's go back as we just add a
96:37 - few more things into this input element
96:39 - and also I'm also going to add a label
96:42 - element as we did see that in the
96:44 - example and This is 40 below input so
96:47 - let's link it up and how do we link it
96:49 - up using for an ID so let's add the four
96:53 - attribute to the label and let's add the
96:56 - ID attribute to the input so let's go
96:58 - ahead and give this the ID of emot input
97:01 - you can go ahead and call it whatever
97:03 - you wish and now let's grab that ID and
97:07 - just paste it into the four attribute on
97:10 - the label so now both are linked up okay
97:13 - we've just linked it up using before an
97:16 - ID attributes great let's go ahead and
97:20 - add some tags into the label I'm going
97:22 - to just go ahead and put please use a
97:26 - udemy.com email
97:30 - okay just like so so now if we look in
97:33 - here ta-da the label is now showing up
97:37 - this is looking good
97:39 - the next thing I want to work on is the
97:42 - placeholder so to add a placeholder I
97:46 - would do this on the input tag it's
97:48 - going to minimize this for us and I'm
97:50 - going to put placeholder and I'm just
97:52 - going to put Ania at udemy.com of course
97:56 - I don't work at udemy so this is fake
97:59 - let's go check this works
98:01 - um great we will now see some
98:03 - placeholder text that will be replaced
98:05 - as soon as we start typing
98:07 - now let's go ahead and add something
98:10 - else visually and that is the submit
98:12 - button
98:12 - so we know by now that we don't use an
98:15 - actual button we're going to use an
98:17 - input with a type of submit and that
98:20 - input will trigger submitting the form
98:22 - as both are linked so let's go ahead and
98:26 - put an input with a type of submit so
98:28 - just like that and refresh the page in
98:30 - order to see it as a default the value
98:33 - of this is submit but we can change it
98:36 - with a value attribute so let's go ahead
98:38 - and do that I'm just going to put that
98:40 - in like so okay so there we go
98:44 - however right now I can go ahead and put
98:47 - Dan at dan'sworld.com and sign in and
98:51 - that will submit okay so that has
98:54 - technically worked it is refreshed it's
98:57 - technically submitted we haven't put any
98:59 - extra functionality at the moment so our
99:02 - form by default is just refreshing the
99:04 - page but we know that we need this real
99:06 - udemy address right so we would like an
99:08 - error message shown up to do this we
99:12 - need to add the pattern attribute
99:14 - so my pattern attribute well I'm just
99:17 - going to add the string of Plus at
99:20 - udemy.com and now I am saying that I
99:24 - want the domain to be udemy.com for the
99:27 - email I'm just going to space this out
99:29 - so it looks a little bit more readable
99:31 - at the moment okay so just go ahead and
99:34 - do the same
99:35 - great
99:37 - so we have just added the pattern make
99:39 - sure there's a DOT there let's check it
99:42 - out so now I'm just going to refresh
99:45 - this page to load the changes and type
99:48 - Dan at dan'sworld.com and try to sign in
99:53 - we get that error message
99:55 - so there we go we have essentially
99:58 - blocked other email addresses from
100:00 - signing up
100:01 - just like when we do a d that won't work
100:04 - it will say there's no email present so
100:06 - now we've officially made some
100:08 - validation happen on our email
100:10 - great so the form is not submitting it's
100:13 - not refreshing so we are being stopped
100:15 - from signing in
100:17 - wonderful so we have now completed
100:19 - exercise one this is how I would solve
100:22 - it however if you have done it another
100:24 - way then please do share that with me on
100:26 - Twitter I would absolutely love to see
100:29 - okay so look forward to seeing your
100:32 - Solutions over there
100:35 - in the meantime let's move on to
100:37 - exercise number two
100:40 - in exercise two I would like you to
100:43 - build this range input that will
100:46 - essentially allow us to increment the
100:48 - steps by 20 in order to get from 0 to
100:52 - 100 to percent of this range okay so
100:56 - that's all that I would like you to do
100:58 - for this exercise please go ahead and do
101:00 - this once again the main body will be
101:03 - zero and the max value will be 100 and I
101:06 - want the increment to be in 20s in
101:09 - addition to this I would like the
101:11 - default to start right here okay so make
101:14 - sure to make that happen as well as well
101:16 - as add a label to the input
101:18 - so please go ahead and do this and once
101:21 - you are happy with your solution we'll
101:23 - go through a solution together
101:27 - okay so first off I would just start off
101:30 - by putting an input element and
101:32 - assigning it the type of range so a
101:35 - range that is very smooth in its
101:37 - movement so there's a few things that we
101:39 - need to change
101:41 - so we need this to increment in 20. so
101:44 - let's go ahead and add the attribute of
101:47 - step with the value of 20 so that if we
101:49 - now refresh our page our range input
101:52 - will now look and behave like this so
101:55 - not as smooth but it's incrementing in
101:57 - 20. so let's carry on
102:00 - the next thing I want to do is just give
102:02 - it a Min and a max value so I'm going to
102:05 - send meant to be 0 and Max to be 100 so
102:08 - just like this if we actually change
102:10 - this to be an 80 well I'm just going to
102:12 - show you what happens I'll step that
102:15 - implements in 20 has four steps as 4
102:19 - times 20 makes 80 so that's four steps
102:22 - but we want this to be a hundred so
102:23 - let's just go back and change it to be
102:25 - 100. great so as default this will be
102:29 - 100 but I just wanted to emphasize that
102:31 - by putting it here
102:33 - next I also want to code these start
102:35 - values so I want this to be at 20
102:37 - because I want it to appear around about
102:39 - here so that's exactly where it is I
102:42 - just hard-coded 20.
102:44 - and finally let's just give it a label
102:46 - so I'm just going to use the label
102:48 - element for this by creating a label
102:51 - element and then putting in some text
102:53 - this text is going to be volume and now
102:56 - let's link the label to the input using
102:58 - the for an ID attributes so four I'm
103:02 - going to put volume input and for the ID
103:05 - I'm going to put the same so volume
103:06 - input so great they are now linked so
103:10 - we've done it we have our input it's
103:12 - looking exactly like the exercise at the
103:16 - beginning now you should actually put
103:19 - this in a form element like I said so if
103:22 - you want to submit this eventually two
103:25 - things you will need are the form
103:27 - elements like so as a wrapping element
103:29 - as well as the input or the type of
103:32 - submit okay so if you would like to
103:35 - submit the value of this input with the
103:37 - type of range those two things will be
103:40 - needed great so this looks great I hope
103:44 - you've enjoyed this exercise please do
103:46 - share your solution with me on Twitter
103:48 - via the link below if you've done this
103:50 - another way I would absolutely love to
103:53 - see
103:56 - and finally for the third and final
103:59 - exercise I want you to essentially build
104:01 - out this form that will allow us to pick
104:04 - one of the three options about how our
104:07 - experience was at a theme park so this
104:10 - is what I want you to build you're gonna
104:12 - have to think of a way to pick out one
104:14 - option out of a bunch of options and
104:17 - then submit it via a form
104:19 - so please think about this pause here
104:23 - and I'm excited to see how you do this
104:25 - by yourself and then go through a
104:27 - solution together
104:29 - so see you in a bit
104:33 - okay so I would do is well here we have
104:37 - our form first off I'm just going to
104:39 - create an H1 element okay because this
104:42 - was bigger than a label so I'm going to
104:44 - use the H1 element for this and I'm
104:47 - going to put how was your time at Happy
104:50 - Land
104:51 - okay so that's what my H1 element is
104:54 - going to look like now we can have this
104:57 - in the form that is absolutely fine okay
104:59 - so I've decided to put in the form and
105:02 - next we need to decide what kind of
105:04 - input type we're going to use for the
105:07 - multiple choices
105:09 - the type I'm going to use is Radio why
105:12 - radio and why not checkbox this is
105:14 - because the radio will allow us to
105:16 - choose one of the three options and not
105:18 - allow us to select multiple options like
105:21 - the checkbox type
105:23 - so in the input I'm of course going to
105:25 - have the type radio but I'm also going
105:28 - to give it a label the label is going to
105:30 - say bad and I'm going to link it to the
105:32 - above input we'll do for an ID
105:34 - attributes so let's link them up by the
105:37 - same name let's have bad input and let's
105:41 - put the ID as bad input as well great
105:45 - so there we go and for good measure I'm
105:49 - just going to give this a name just in
105:51 - case you know in the future we want to
105:53 - link this up to JavaScript we don't
105:56 - really need to do this now but I think
105:57 - it's good practice to start adding names
106:00 - to these types of inputs so as a name
106:03 - I'm just going to give this the name of
106:06 - experience okay because it's all related
106:09 - to one experience
106:11 - so well done if you choose to add that
106:13 - name attribute there you're already
106:16 - thinking about the future
106:18 - so let's check out what this looks like
106:19 - at the moment great so we've got our bad
106:21 - input let's let's create another input
106:24 - so let's go ahead and use the input
106:26 - element and create a label for it this
106:29 - is going to say okay let's link them up
106:31 - using the for and ID attributes and I'm
106:35 - going to put OK input here and give this
106:38 - the ID of ok input
106:41 - great
106:43 - now let's also give this the type of
106:45 - radio and leads essentially link it to
106:49 - the other input by the name attribute of
106:52 - experience
106:53 - okay so once again when it comes to
106:56 - JavaScript this will be important for
106:58 - when we want to essentially get the
107:01 - value of our inputs for the type
107:03 - gradient in addition to having this name
107:05 - attribute for when it comes to work with
107:07 - JavaScript we're also going to have to
107:09 - give both of these a value so remember a
107:13 - key value pair made up of the name and
107:15 - value so I'm just going to give the top
107:17 - one the value band and the second one
107:19 - the value is okay
107:21 - wonderful once again these are important
107:24 - for the key value pair for when we start
107:27 - working with JavaScript it's not nearly
107:29 - necessary now so if you don't add them
107:30 - don't worry and now the final input
107:33 - let's go ahead and create that input
107:35 - element let's go ahead and create a
107:37 - label element this one's going to have
107:39 - the text of good and let's look them up
107:42 - with the for and ID attributes let's
107:45 - call this Good input and give this the
107:48 - idea of good input and give this a type
107:50 - radio and again give it the
107:53 - name of experience and value of good
107:57 - wonderful we are now done
107:59 - so this is how it looks like on the
108:02 - radio inputs we can also have one
108:05 - checked as a default if we want simply
108:07 - by adding the checked attribute so I'm
108:09 - just going to go ahead and do it on this
108:11 - one and that will mean that this one is
108:14 - checked by default and of course we can
108:16 - change it and we are not selecting
108:18 - multiple ones as you will notice right
108:21 - now
108:22 - wait the final thing we need to do is
108:25 - just add an input with a type of submit
108:26 - that has the visual appearance of a
108:29 - button but essentially it will allow us
108:31 - to submit this form if we click on it
108:34 - along with the value of the one we've
108:38 - chosen hopefully in the future when we
108:40 - hook this up in JavaScript
108:43 - and there we go once again I hope you
108:47 - had fun with these exercises please do
108:49 - share them with me on Twitter because I
108:51 - would love to see what you have done
108:53 - with yours otherwise let's continue
108:57 - in this next section we're going to talk
108:59 - about the select element in order to
109:01 - create one ourselves
109:03 - this select element allows us to select
109:05 - an option from a drop down menu and
109:07 - looks like this
109:09 - so we have this select element which we
109:11 - will name with the name attribute for
109:14 - when we want to pick it out with our
109:15 - JavaScript and then we have all these
109:18 - option elements nested inside of it now
109:21 - each option element has a value again
109:24 - for when we need to pick it up with our
109:26 - JavaScript and then the text of what we
109:29 - want to see visually in the browser in
109:31 - between the two option tags
109:33 - this select element is usually
109:35 - accompanied by a label element which is
109:38 - linked to the select element with the
109:40 - for and ID attributes
109:42 - so that is the code for writing a select
109:44 - drop down and this is how it behaves it
109:47 - is for this reason that it could be wise
109:50 - to have the first option element contain
109:52 - new tags please choose an option with no
109:55 - value so just an empty string to
109:57 - represent nothing being chosen even if
109:59 - we click on it but this is not required
110:03 - one other thing we can do is hard code
110:06 - these selected value by using the
110:08 - selected attribute on the option element
110:11 - on this select element itself we can
110:13 - have many attributes some of these
110:16 - include the disabled attribute that
110:19 - looks like this the required attribute
110:21 - or the multiple attribute to be able to
110:24 - select more than one option
110:27 - got it good now it's time for a little
110:31 - exercise
110:32 - okay so let's get to practicing what we
110:35 - learned in the previous section by
110:37 - building a select drop down
110:39 - so this time we're not going to be using
110:42 - snacks let's go ahead and recreate what
110:46 - we see on a e-commerce site by having a
110:49 - drop down of sizes so we're going to
110:51 - have extra small small medium large
110:54 - extra large and extra extra large okay
110:57 - so let's go ahead and do it first off
111:00 - we're going to start off the label right
111:02 - so there we have our label and this
111:06 - label is going to say select your size
111:10 - and next under here we're gonna have
111:13 - this select of course
111:16 - so it's going to have an opening tag and
111:19 - a closing tag and I'm just going to
111:21 - pause here and ask you to complete the
111:24 - rest of this exercise next
111:26 - so once again it's a drop down for an
111:29 - e-commerce site that will allow us to
111:31 - pick sizes for our garment okay pause
111:35 - here and let's go to the solution in a
111:38 - bit
111:39 - okay before we do anything I'm just
111:42 - going to link up the label to the select
111:44 - with the for an ID attributes as a
111:47 - reminder I'm just linking the label to
111:49 - the select or this attribute so let's
111:52 - make sure that these are the same I'm
111:54 - going to have a size list and size list
111:57 - right here for the id2 okay so there we
112:00 - go and now let's add some options so my
112:03 - first option is just going to have the
112:05 - value of blank I'm just going to leave
112:08 - it a blank string and this is going to
112:10 - say please
112:12 - select your option
112:15 - so there we go our first option is
112:18 - essentially a blank value and our
112:20 - section option is going to have the text
112:23 - extra small next we're going to have
112:25 - another option or the size small and
112:28 - then we're going to have a third option
112:31 - let's actually just paste in a few with
112:34 - medium large and extra large and then
112:37 - one more for extra extra large
112:40 - Grace
112:41 - so there we have it visually this will
112:44 - look fine but we know we have more to do
112:46 - we need to add a value to this as well
112:49 - so that when it comes to picking this up
112:51 - JavaScript we are prepared
112:53 - so let's go ahead and give this the
112:57 - value so I'm just going to give this a
113:00 - readable value for when we need to pick
113:02 - this out later on and it's just going to
113:04 - be the string XS this value I'm going to
113:06 - give the value of s here I'm going to
113:09 - put an M for this one I'm just going to
113:12 - put an L for this one I'm going to put
113:15 - the value of XL and you guessed it for
113:18 - the last one I'm just going to put the
113:20 - value of x Excel and there we go
113:24 - so this is looking good and for good
113:26 - measure we of course we know we need to
113:28 - give the select a name and let's go
113:31 - ahead and call this sizes so once again
113:34 - this is for eventually picking it out
113:36 - with JavaScript
113:38 - so now if we look in here
113:41 - we can select our size and we can see
113:43 - the options
113:44 - now if I was to change this to be extra
113:47 - small like so and Save
113:51 - you will see that that has changed
113:53 - however I'm just going to put that back
113:55 - to the way it was if I put extra small
113:58 - here
114:03 - nothing will change okay once again this
114:05 - is because this is for our JavaScript
114:08 - and should actually technically be
114:10 - written as one word or two words
114:12 - connected by a dash in order for this
114:14 - value to get picked up okay
114:17 - so there we go that is some knowledge
114:20 - for you for when it comes to picking
114:22 - stuff up without JavaScript later on
114:25 - and wonderful so that is our select
114:28 - exercise done I hope you enjoyed it
114:30 - let's move on
114:32 - now I just want to take a quick break to
114:35 - talk to you about the inspector
114:37 - Google Chrome's inspect tool can give us
114:39 - a lot of information about what is going
114:42 - on in our browser in fact it can show us
114:45 - exactly what code we are sending to the
114:48 - browser and in what state
114:51 - I'm going to show you how to inspect
114:53 - this browser to our browser right here
114:56 - now
114:57 - so here we are back on our select
115:00 - exercise that we just did and here is
115:03 - the select drop down that we just made
115:06 - now if I go ahead and left click on the
115:10 - browser while pressing Ctrl on my laptop
115:12 - you will see this show up I'm simply
115:16 - going to click on the inspect tool in
115:18 - order to get up this inspect tool for us
115:21 - this will show us many tabs including
115:24 - the elements tab which will show us the
115:26 - elements making up our web page that we
115:28 - are viewing
115:29 - as you will see this is exactly our
115:31 - document that we're working on so you
115:34 - will see the HTML element you will see
115:36 - the title element that we give our
115:38 - document and you will also see the body
115:40 - tag in which we added a label element
115:43 - and the select element with all the
115:46 - options that we just coded just right
115:49 - here
115:51 - so this is pretty cool and we can now
115:53 - hover over so we can choose to select
115:56 - items in our browser
115:58 - which will show us exactly which element
116:00 - we are selecting or we can select them
116:03 - here so just click on that and select
116:06 - maybe this label and this will show you
116:09 - that label in the browser along with the
116:11 - size of that element along with any
116:14 - styling that has been applied to it at
116:16 - the moment there has not been any
116:18 - styling added by us this is just the
116:21 - default styling under the Styles tab
116:24 - what is also cool is that we get a
116:26 - console we will not be using this now
116:29 - but we will be using this in the
116:31 - JavaScript section very heavily so just
116:33 - keep that in mind so this is the inspect
116:36 - tool it's really useful for us as
116:38 - developers now and especially in the
116:40 - future
116:42 - now I feel like I've saved this one to
116:45 - show you as I am really fond of the data
116:48 - attribute and I want to talk to you
116:50 - about how you can make custom-ish
116:52 - attributes
116:54 - to give us flexibility HTML5 allows us
116:57 - to store extra information on standard
117:00 - HTML elements using the data attribute
117:03 - the Syntax for it looks like this we can
117:07 - of course have data or we can have data
117:11 - Dash and put in whatever word we want to
117:13 - make a custom attribute now why would we
117:17 - want this well we can have a div that's
117:21 - served like a card so here we go here is
117:24 - my div styled like a card okay so I
117:28 - can't wait to show you how to style
117:30 - stuff in the CSS part of this course but
117:33 - for now just stick with me
117:35 - now say I want to flip this card and
117:38 - display some text such as a question and
117:41 - two possible answers we can actually
117:43 - store that information on the div itself
117:46 - without actually visually seeing it we
117:50 - will do so like this
117:51 - so we can have data question data option
117:55 - one or data option two
117:58 - so now that information is stored on the
118:00 - div but we can't see it with our eyes on
118:02 - the div
118:03 - so for example we can sort a data
118:06 - question attribute that says what color
118:08 - are the carrots okay we can also store
118:12 - another attribute so let's have data
118:14 - Dash option one which will give us an
118:16 - option of let's say blue and then we can
118:19 - also have data option two that will give
118:22 - us a second option as well that we are
118:25 - storing on that element let's go with
118:27 - orange so that's a lot of information
118:29 - that's custom information that I am
118:32 - essentially putting on an element
118:34 - now with the magic of JavaScript we can
118:38 - then get these attributes and show them
118:40 - and they did on the click of the element
118:43 - but we will leave that magic for when
118:45 - the time is right
118:47 - now it is also worth noting that this
118:50 - information is not fully secret and is
118:52 - still on the client we just can't see it
118:55 - visually however if we inspect the
118:59 - browser like we just learned and look at
119:01 - the HTML document that makes it up we
119:04 - can see that information here
119:07 - if you really want something to be
119:08 - hidden you would have to store it on a
119:11 - server and retrieve it when you need
119:14 - in this section I want to talk to you
119:17 - about how you can add little notes in
119:19 - your code that won't affect anything in
119:21 - the browser but why do this well as
119:25 - developers we might want to annotate
119:26 - things we have done things we need to do
119:29 - or simply leave notes for another
119:31 - developer that comes along in the form
119:33 - of an explainer or to do action item
119:36 - for beginners I would strongly recommend
119:39 - annotating or in other words adding
119:41 - pseudocode as often as possible
119:43 - all you need to do is make sure the text
119:46 - you and add is in between these
119:49 - these you can add this manually or in vs
119:52 - code you can highlight the text and
119:54 - press command forward slash
119:57 - so for example here we have some code if
120:01 - I wanted to add a reminder on the form
120:04 - that I want to add another input I can
120:07 - simply write some text that says to do
120:09 - and then I would comment out by
120:12 - highlighting the code and pressing
120:14 - command forward slash obvious code
120:16 - so that's what I've done or you can
120:19 - manually add the characters you see at
120:21 - the beginning and end of this line
120:24 - another thing you can do as mentioned is
120:27 - put reminders so add code to yourself so
120:31 - for example here I'm going to remember
120:32 - the pattern can take regex Google this
120:36 - later so this is great for as a beginner
120:39 - you can leave yourself little notes
120:41 - about what certain parts of code does or
120:43 - little reminders about what we learned
120:45 - in that lesson so once again two copies
120:47 - out just highlight it all and press
120:49 - command forward slash on vs code and
120:53 - finally we can also add little reminders
120:54 - to other developers too
120:56 - so for example if you're sharing this
120:58 - code base with someone and you think
121:00 - they might not know the intention of
121:02 - some code that you put you could leave
121:05 - them a note so for example I have put
121:07 - this input will trigger the action on
121:09 - the form when provided because of course
121:11 - we have not provided an action on this
121:13 - form by at least this lets someone know
121:16 - that we have thought about it
121:18 - okay great
121:20 - so there we go hope this was useful that
121:23 - is how you can comment that code so that
121:25 - it's not visible in the browser
121:28 - foreign
121:30 - that's it for the HTML section let's
121:33 - recap what we have learned
121:35 - so wheeler what exactly HTML is or
121:39 - hypertext markup language and how we can
121:42 - use it
121:43 - we also learned how to create our first
121:45 - HTML page using the correct anatomy and
121:48 - use it to create a recipe page together
121:50 - using popular text elements we then
121:53 - learned about how to navigate between
121:55 - Pages or do different things altogether
121:57 - as well as about semantic sectioning and
122:00 - elements we also learned about The
122:03 - Versatile dip which is essentially a
122:05 - great shell to create anything and use
122:07 - our knowledge to create a table tennis
122:09 - leaderboard
122:10 - after that we looked at forms and input
122:13 - options as well as how to create our own
122:15 - costume-ish attributes
122:17 - phew so we learned a lot
122:20 - now where to go next
122:23 - well I would really strongly recommend
122:25 - going over everything we have learned so
122:27 - far and try built out another recipe
122:29 - page okay so this time perhaps a
122:33 - different recipe than the one we
122:35 - previously did and add it to your
122:37 - portfolio
122:38 - next I would try build a Wikipedia page
122:41 - clone so similar to the format of the
122:45 - table tennis leaderboard I would like
122:47 - you to use your knowledge of everything
122:49 - you've learned so far in order to build
122:50 - a Wikipedia page next I would also like
122:54 - you to try practice your Googling we did
122:56 - a little bit of practice in Googling so
122:58 - far in this tutorial but you're going to
123:00 - be needing it a lot more as you progress
123:02 - positive
123:03 - develop in CSS especially there are many
123:05 - many properties and attributes that
123:08 - exist so being able to Google them
123:10 - correctly is definitely a skill that we
123:13 - should acquire
123:14 - if you have time I would also suggest
123:16 - looking at the remaining HTML elements
123:18 - that we did not look at in this course
123:21 - as mentioned at the beginning there are
123:23 - over a hundred so please take some time
123:26 - here if you want to familiarize yourself
123:28 - with the ones that we did not cover
123:31 - I do think most are pretty
123:33 - self-explanatory so if you don't want to
123:35 - do this don't worry
123:37 - next I would suggest also playing around
123:39 - the inspector that we are now acquainted
123:41 - with
123:42 - please go ahead and search random pages
123:44 - on the internet and inspect them using
123:46 - the tool seeing what they have under the
123:48 - hood
123:49 - and finally let's get ready for some CSS
123:52 - this part is going to be great as we're
123:54 - actually going to learn how to make
123:56 - stuff look pretty in our browsers so see
123:59 - you then

Cleaned transcript:

hello everyone here on the free curcum Channel my name is Anu Kubo and I will be your Guide to the wonderful world of coding this tutorial is for anyone who has never touch code before and would like to get started with the basics such as where to even write code in the first place and how do we get text images and even tables and lists showing up on our web browsers for this we will focus on getting the right tools we need in order to get started as well as a fundamentals course in the HTML language or in noncode speak the thing that gives structure to our websites and apps this twohour course is actually the very beginning part of my full stack coding course in which we go further and learn how to style things up using CSS make our code actually do things using JavaScript learn how to work with apis or in other words plugins such as this core map API right here in our travel app we built learn how to work with databases as well as builds are secure backends using node.js and express and on how to build apps that we can sign up log in and log out of while using popular frontend libraries such as react so that we have a full and experienced resume that we write together in which we can showcase projects out of the 22 that we built okay so what are we waiting for let's get to it so before we get started with anything let's talk about the tools we'll be using in order to help us code the most important tool we developers need is a way for us to write and edit code we could technically write our code in a text editor like this but luckily for us technology has evolved and we can now write code in code editors that are built specifically to make our lives easier as developers by Auto indenting lines and adding colorcoded helpers for readability some code editors even go a step further and give us prompts when they detect that we have made an error this makes debugging code a heck of a lot easier there are so many current addresses out there some are hosted on your computer and some you can access online meaning you don't have to download anything you can just use it it is also worth noting that is sup up from a code editor is an IDE or integrated development environment it essentially does the same as a text editor a code editor but also acts as a compiler all in one space as well as a bunch of other stuff this tool is a bit too robust for what we will be needing in this course but it is worth knowing the difference between each of these tools today hybrids of these tools exist so it is much harder to fit a specific technology into one of these categories there are many types of code editors out there as mentioned we 've ones that we can download directly onto our computer and ones that are hosted online for this course I'll be showing you how to use one that is downloaded onto your computer I'm going to be using the code editor vs code I am doing this for no other reason than I had to choose one but if you would like you have all of these other code editors Ides or hybrids of both to choose from for those of you who would like to get coding straight away without downloading anything onto your computer you also have the option of these online code editors please take a moment here to decide which choice is right for you okay so by now we should have our preferred code editor of choice up and running as mentioned in the previous section I will be using vs code on my Mac this means I have downloaded it and it should look like this on your computer when it opens up the next thing we need to decide is where our project is going to live a website essentially consists of a bunch of files or organized together in a particular structure you design here we can see a project that holds my HTML file another folder that holds my style sheet or css files another folder that holds my JavaScript files and a folder that holds my images don't worry if none of this makes sense we will be building up a project called my portfolio slowly throughout this course starting with creating the folder in this section if you are like me and have downloaded vs code you will have to store these files locally on your computer you can store them wherever you like just make sure they are organized in the same way inside your project folder which we have called my Dash portfolio on this occasion I want to store the folder for my Dash portfolio on my desktop so that we can see it visually too if you have chosen to use an online code editor you will not need to do this as your files will be hosted online along with your project however I would still strongly advise watching along so you know how to do this in the future so on my desktop I'm simply going to press Ctrl and left click on my screen and then create a new folder okay and rename it to my Dash portfolio just like so next I'm going to open up vs code that I just downloaded so it should look like this and I'm going to open up that folder I just created so to do this I'm going to just select open folder and navigate to my desktop where I will find the my portfolio folder that I just created I'm just simply going to click on it and open it up by pressing the blue open button and there we go that is now looking good you will notice how I am keeping the folder name in lower case this is because many computers especially web servers are case sensitive this means that if you want to find a file in your project and you use a capital when none exists it might not work to be on the safe side I recommend sticking to lowercase when naming or folders and image files in our project this is also the case for having spaces in the names browsers web servers and programming languages do not handle spaces in the same way as each other causing potential chaos for example if you use spaces in your file name some systems May treat the file name as two file names and some servers might even replace the areas in your file names so the spaces with percentage 20 instead it is for this reason that I would strongly suggest using a hyphen instead of a space when naming files and folders okay and that's it we have created our project folder next let's learn a little bit about HTML so we can create our HTML file for our web page okay everyone and welcome to the first coding section of this course in which we will be learning about HTML in this section we are going to get started with the very basics of coding by looking at the language that essentially started it all for web development without it we would not have the pretty pages that make up things such as this very platform you are currently viewing our course videos on to understand a little bit more about how it all works I'll be starting off by giving you a brief overview of where HTML sits in context of a web page as well as understand how it came about and move on to a tutorial with interactive questions and code examples in order to learn how to use it the tutorial part of this section will take up the majority of this course we will start off by learning what exactly HTML is understanding where it came from looking at HTML elements understanding HTML syntax or in other words it's structure and then looking at HTML Anatomy once we have grasp the basics of HTML and how to use it we will be using everything we have learned by building out a project that we can be proud of we are doing this as throughout this course I will be giving you projects that you can choose to put in your developer portfolio these projects will be ones that I have chosen in order to help you approach potential hiring managers in a bid to try and get you your first developer job each of these projects will be appearing to you at various points in this course so while skipping lessons is optional I would strongly recommend you watch each lesson in order to fully build out your portfolio to its most wonderful actionpacked self okay so what are we waiting for let's get to it before we get to any coding at all let's actually understand what HTML is HTML stands for hypertext markup language it is considered to be a comparatively simple language that helps create the building blocks that make up web pages and apps we use today we essentially use it to describe the structure of web pages what I mean by this is that we use it on a document designed to be displayed in our web browser by adding annotations that will change what certain elements look like think of it and the way a teacher marks your work with a big fat red pen they will make annotations on your text in order for you to change it it might be to change something like spelling or it might also be to make a heading larger or something bold these annotations are not to be seen by the end but we applied behind the scenes if you will same goes for applying markup language in computer text processing you are annotating a document that is syntactically different to the existing text now what you cannot currently use HTML to change the spelling of things you can use it to transform tags into a heading or make it bold as well as a bunch of other things in fact we can apply the hypertext markup language or HTML to this boring lump of text and make it look like an actual recipe we see online so we can take this and make it look like this so as you can see we have taken the text made satin text bold made some text into headings hyperlink some text and change some text into a segregated paragraph As we mentioned we have done this thanks to annotating the document using hypertext markup language or HTML this mockup looks like this so here we can see the text and here we can see the markup or more specifically the hypertext markup language we colloquially call HTML let's have a look at some of these in the next section so we have now seen what the hypertext markup language or HTML looks like in a real life example let's break it down by looking at one of these elements first and understanding its syntax syntax is just a fancy word for the structure of statements in a computer language and that is exactly what we're going to be looking at we're going to be looking at the structure of HTML elements in the next four minutes I'm going to really deep dive into HTML but don't worry we're going to go through all of these sections video by video coming up next okay so bear with me this will be a lot this right here is what makes the text in between it bold it is referred to as an HTML element almost all HTML elements will have an opening tag and a closing tag like this one we can also pair this with a paragraph element that will make the text below this appear to look more like a standard paragraph when writing like this so by using the angle brackets in this fashion with a slanty line or solidus to close the element browsers know not to display these HTML tags but use them to interpret the content of the page by mixing and matching these HTML elements we are slowly starting to build out what looks more like a recipe page than a lump of text we originally saw in fact we can mix and match over 100 different types of HTML elements here are just some of the more popular ones to our disposal let's start by looking at the paragraph element the Syntax for the paragraph element looks like this let's talk through this in more detail so first off we have the opening tab HTML elements are defined by tags written using angle brackets as we touched on before this opening tag tells our browser Hey listen up an HTML element is about to start next we have the closing tag which is just like the opening tag apart from this slanty line or solidus this tells our browser that the HTML element is now finished any text after this tag should not be applied the paragraph styling and then of course we have the content itself this is the text I want to apply the paragraph styling to it is in between the opening tag and the closing tag all together this is called a paragraph element tada and of course we have other elements an interesting one is the heading element I say this as there are six of them the H1 tag is the biggest heading and the H6 tag is the smallest heading you can use the tags as a main heading for example or a subheader in the browser The Heading tags would look like this so each of the tags would have a certain size assigned to it what is interesting about this is that giving texts and tags gives it semantic meaning to the browser meaning that the browser will read the text with some kind of meaning in this case the H1 tag will be treated as the most important title on the page I did also mention that most elements have an opening and closing tag I say most as some elements do not need both this applies to the image element for example we use image elements embed images onto our pages image elements do this by a specific attribute which is the source attribute represented by this SRC right here that takes the path to our image file I have also chosen to include the alternative attribute with a description of what my image is I say this as a choice but if you want to make your website accessible to all people it is something I would strongly advise this is because users who are visually impaired will be able to use tools to read out this alternative text to them it also helps others know what the image is all about if the file based to load or if the path to your image file is broken we will go into more detail about attributes and paths in the dedicated section on image elements further in this course now we can also add comments to our code that will not be visible in the browser but will be visible to us and other developers looking at our code to add a comment that will not be visible in the browser just like the tags we need to put that text in between two things in this case it's the two bracket arrows right here again making sure that these syntax is identical to this example now so far with these examples if we just put them in a document open it in the browser we would not be writing about an HTML this is because we are yet to do a few things which would include building up the anatomy of an HTML document we will do so in the next section in this course you will see me saving files a lot by using a shortcut on vs code vs code comes with many shortcuts that are available to you here are just a few of those for now I just want you to focus on using the savings shortcut which is essentially the command button or control button depending on your laptop plus the S button whilst on vs code okay so if you are unsure of if your file has been saved or not you should see this white dot disappear once that happens you know your file has been saved we will be needing this file to be saved as our next step will be to view the latest version of that file in the browser so if we already have that page up we will need to refresh the browser to see the latest version of it okay so save the file using command s and then we will go to the browser and refresh the page that we are viewing in there save refresh save refresh you got it so keep this in mind as we will be using this in the next section and pretty much all the lessons from now on until the end of the JavaScript module here is a basic file structure for when working with an HTML file when we use HTML elements outside of the correct HTML structure we're not writing valid HTML even if the browser can fix our mistakes the markup is only applied if the elements are in the correct environment we will go into what that environment is in this section it is important to note that for this course we are going to be using the latest version of HTML and that is HTML5 standard let's go ahead and recreate this HTML file in our code editors so here I am on my code editor of choice all I'm going to do is make sure I am in my project which I have named my portfolio and I am simply going to add a new file like so I'm going to choose to call it index next by giving it the HTML extension my code editor knows to treat this as an HTML file you can and as many HTML files as you wish your project naming them whatever you want just make sure to put dot HTML to tell your code Editor to treat them as HTML files now that we have created our file let's add some boilerplate code so I'm just going to paste them in here and talk you through it the first tag I want to show you is this right here it is a tag that tells the browser that this is an HTML5 document as mentioned there are previous older versions of HTML so just be aware of that on your journey as a web developer the browser needs to know what version of HTML the document is in order to render it correctly next we tell the browser where our HTML is starting we are doing this as even though we only have HTML in here for now we can actually write CSS and JavaScript in this document too something that I will show you later down the line in this course we are going to be using this HTML opening tag and closing tag as the root of our document everything else that we want to get picked up by the browser has to live inside of it next we have the head tag this is where we store information mainly this is not to be confused with a heading tab the head tag will store information that is not visible in the browser it is for storing not displaying you will see that in my head tag I have a meta tag with a Char set attribute the charset attribute specifies the character encoding for the HTML document this is not too important for now it simply says that we want to cover most of the characters and symbols in the world so in other words we can handle anything from Arabic to English to this funky little guy right here there are other meta tags we can use also but for now let's keep it simple and just use the ones we most need next up we have our title tag this is for naming our project we do this so we can store what we want to call what we are working on and we store this in the head so make sure it is in between the opening tag and the closing tag of our head once again this is not a title we will see in the browser however if you look at the tab of the browser your project is in you should be able to see it it will also show up in search results so for example in Google next we have the body now this is where the visible stuff will be this is essentially where you can put elements such as the ones we have discussed already such as the paragraph element The Heading elements the image element and many more we can also set the primary language for our document we can do so by simply adding the Lang attribute to the opening HTML tag select this this is useful as it will be indexed more effectively by search engines allowing you to appear in more relevant search results okay and there we have it let's start deep diving into some more elements next we briefly touch on headings so far in this HTML module however I would like to take a breath to Deep dive into them a little bit so you really get a good grasp of what they are and what they are used for so once again the heading element comes in six variations with the H1 element being visually the biggest and the H6 heading being visually the smallest each one has an opening tag and a closing tag in addition to this it also tells our document which heading is the most important behind the scenes so for example if I was to give a web page an H1 element our web page knows to treat this as the most important title on the page kind of like giving an essay its title so we know what it's about you should also only have one H1 element on a web page hey you wouldn't name your essay twice would you after the H1 element you also should use these subheadings in order meaning the H2 element should come next and then the H3 and so on but you can have multiple subheadings of the same size again just like when writing an essay so for example this is good and this is not so good however there might be occasions where you might see these conventions broken in addition to this nesting multiple H1 elements was allowed in older versions of the HTML standard however it was never considered a best practice so just keep that in mind now you might be thinking oh this does not look very fun well don't worry we can actually change what these headings look like using a programming language called CSS CSS will allow us to change the font size of these headings but not only that allows to change the color weight style and much more we will be looking at CSS right after the HTML module in this course another great and popular tax related HMR element is the paragraph element it is essentially this cute little ptag right here the P element represents a paragraph or in other words a block of text we can use it to Bunch up text that goes together so like this this means if we put another paragraph element after this one again with a bunch of text it will appear spaced out from the other one now it does not matter what line you put the text on after all if you put all of this on one line it's kind of hard to read so you can put the text on multiple lines in your code editor if you want it will not affect how it looks like in the browser you might see p elements written like this or like this or other ways too both of these approaches I am showing you are valid just like with the heading element we can add CSS or in other words styling to change the default styling of the paragraph element meaning you can change this spacing amount but not only that we can change the font size the color the line spacing of the text and so much more we will be doing that in the CSS part of this course so by now we have had a very quick look at how do I offer elements this included the paragraph element and heading element now let's put what we learned into practice by creating an online recipe for macaroni and cheese so the first thing we're going to do is think about the website structure I would like my recipe page to have a heading followed by some sort of description an ideal element to hold the content of a description would be a paragraph element after this I want to use a smaller heading as a subtitle to let people know that this section is for the ingredients necessary after that I will need some sort of list to list out all the ingredients and next another subheading followed by the instructions in a numbered fashion wonderful I think this is a good start now let's get to actually creating this with HTML so first off I'm going to ask you to create another folder on your desktop this time I want you to call it HTML project one once you have done that I would like you to use what we have learned in order to create an HTML file in the project called index.html as well as add the correct boilerplate to it in order to get started please post here and have a go at doing this once you are done let's go through the solution to getting this done together okay so what I would do is well first off I will just open up vs code so please go ahead and do that and now I'm just going to open up that folder we just made so that directory just made so just go ahead and on your desktop find it click on it and open it up so there we go there's our empty directory or in other words empty folder and all I'm going to do is just create that index.html file so to do this I'm just going to click on here and I'm going to call the file index and I'm going to give it the HTML extension so dot HTML in order to let our code editor know to treat this like an HTML file wonderful now that we have that let's get going with our project so first off I'm just going to put in my boilerplate code I've just taken this from the previous project I have not remembered it please don't try and memorize this okay just make sure that you have your HTML element your header element and your body element and the body element is essentially what's going to hold all our visible elements next also make sure you have the meta tag up here as well so that we can see all the characters that we need okay so our project is looking good at the moment there is a few things we need to do outside of the meta chart set the other thing we have in this head element is the title that is going to hold the title of our project it will not be visible in the browser once again it will be visible in the tag and will also be visible as a title in Google search results okay so let's go ahead and call this something I'm going to go ahead and call it recipe as that is what best describes what this webpage is gonna hold the first one I'm going to put in is the H1 element by choosing the H1 element I am also doing something behind the scenes search engines indexing our web pages will consider the contents of the H1 heading more important than that of an H2 heading for example without any headings at all our page will perform poorly in terms of search ability online or in other words poorly in terms of SEO one other thing that is happening is that we are defining this as the most important heading on the page for screen readers used by the visually impaired if no headings are provided users of the screen reader will not be able to jump from heading to heading and instead will be forced to read all of the text on the page as a lump of text once we have a heading I'm going to move on to using a paragraph element for our description so here is what our paragraph element will look like now we can make certain words or phrases more important in the paragraph by using these strong element inside of this paragraph element we would do so with the strong tag Now when using a screen reader this word will be read out in a different tone of voice now we can also visually see this has been applied bold styling however if we do not want the screen reader to read this out differently and just want to make this word look bold we can use the ball tag instead other things we can do is emphasize using the EM element once again the screen reader will use a different tone for this and if we just want to make it look italic we can use the eye element like so and great I think we should now check this out in the browser so what it looks like in the browser next before doing anything don't forget to save this file once again a shortcut to save this file is to press command s on your keyboard so please go ahead and do that you will see the little dot disappear at the top of the file tab now in order to actually view this file on the internet you're going to have to get the actual file so go ahead and left click on it and then just go ahead and copy the path so this one right here that first one get up your browser and paste it like so and there we have it we can view that whole file in a browser you're viewing your local file on your computer on your browser right now great now let's add a subheading for our list of ingredients so by now we know that a subheading is any heading below our H1 heading I'm going to choose the H2 heading element for this and wonderful now it's time to look at lists in the next section in this section I want to talk to you a little bit about the readability and presentability of code for this in HTML I'm going to talk about indentation and spacing indentation and spacing should be consistent throughout your code we can use either the four space or two space indentation in HTML this means that each nested element should be indented exactly once inside their parent tag by either four spaces or two spaces okay so as you can see here is what it looked like when it's all beautiful and neat with four spaces of indentation as you can probably see everything is a bunch more readable everything is kind of lumped together and you can see which opening tag and which closing tag go together just like the top article tag and bottom article tag this is in contrast to Bad Code like this I mean you can hardly tell which tag is starting where what the parent elements are which makes this overall a lot less readable than the previous version trust me this would make it much more difficult when debugging and trying to find tags that go together in the future another thing you should do is format lines so for example in this case you'll see that the text in my paragraph element is too long I would suggest splitting it out into multiple lines okay so kind of like this okay so this was just a quick break to talk about indentation and spacing please keep an eye on this moving forward in this section we're going to learn how to make a list such as this section right here that shows the ingredients of a recipe as well as this list right here a ordered list that shows these steps in making our wonderful macaroni and cheese list elements are actually made up of at least two elements a wrapping element and the individual list item elements themselves your list can be an unordered list like this one meaning that the order will not matter or an order list an unordered list is however perfect for listing out the items that we need to buy in order to make macaroni and cheese as the order in which we buy them doesn't matter the wrapping element for an unordered list is this UL element right here and of course we have the ordered list an ordered list will give order to our list items so just like we see here we get one two three the element in order to make an ordered list is Ol as you can see by the wrapping element right here as a default the order list comes numbered like so but we can also change it to be lettered no matter which list type you choose so the unorder list or the order list it should have the list item elements inside once again these Syntax for a list item looks like this it comes with an opening tag and a closing tag that will take content inside the list item element in this case it is some text but it can also be much more let's have a look at this in code okay so the first thing we're going to add is as we discuss an unordered list add the ingredients as the ingredients do not need to be in a specific order right because it doesn't matter what order we buy them in we might already have some in the kitchen or we might need to buy some more it really doesn't matter to us so let's get up our unordered list element which we now know is made up by these two tags with UL in them like this next let's open it up because it's gonna have to take some list items so let's put in our list item elements they are made up of the LI tags and opening and closing tag and we're going to put in seven of them so there we go I've just gone ahead and created all seven each with an opening tag and a closing tag that will take content inside of each one okay so as a reminder the content does not have to be just text it could be images it could be a bunch of elements nested inside of each other that really is up to us in this case however I'm just going to put some text okay so let's go ahead and do that I'm just going to paste it in from somewhere I have written previously so I'm just going to put it in for all seven of these list items I'm just putting in some text and it's the ingredients for macaroni and cheese okay so there we go we now need to save this page so save it pressing command s and let's check out what this looks like in the browser don't forget that we of course need to refresh our browser to see those changes and great there is our unordered list now that we have finished this let's move on to make our ordered list so once again just like before I'm just going to put in an H2 title okay so this is a subheading that I'm going to put in it's just going to say how to make it and underneath that is where we're going to put our orders list element so the wrapping element that will take list item elements so ol is the tag that we're going to use is going to have an opening and a closing tag and inside of it I'm just going to go ahead and put in three list item elements this time so please go ahead and do the same put in three and I'm just going to paste in these steps into making macaroni and cheese so they're pretty simple it's just going to be brewing a pot of water to boil next I'm just going to paste in a longer sentence okay so you will see I have formatted it to put it on different lines so we can see it and finally just the final this item element and that's going to say add cheese and macaroni and that's it how simple is that so simple recipe we're not going to win any Michelin stars for this but we will have a cool recipe web page that we have built so once again don't forget to save this page pressing command s and then go to your browser and refresh it so we can see the latest version of the document and tada there we have it our order list is now on there too in this next section we're going to look at links links are great as they allow us to essentially link to other pages on our website link to specific Parts on a web page that we built link outside of the webpage that we built all together and some are completely new on the Internet or even open up a prompt to email someone or call them a link element syntax looks like an a element like this and stands for anchor so if you hear someone calling in anchor link do not be surprised let's look at what makes up a link element now so we have the opening and closing anchor tags in between these Tags I'm going to put some text so that our browser knows that if we click on this text it will take us somewhere so for example I could put the words my YouTube channel here is what this will now look like in the browser so it just looks like some text for now nothing special at the moment of course if we click on this link it won't do anything we have not given it enough information about what we want to happen if we click it and why we want this link to take us to do this we need to Define where we want the link to take us using the href attribute we put the href attribute in the opening tag now in the value if we want to link it to my YouTube channel I would take the full path to my channel and put it here okay so now let's save this refresh and check it out and wonderful if we click on the link we are now taken to my YouTube channel page we can also use links to open up a mail option or option 2 call all you need to do is put the mail to prefix followed by semicolons and the email address you want to populate to your email recipient address with so here we go and if we save this file and go to the browser and refresh you will see another link if we click on this link however a prompted email we will show up we can also add a hyperlink to prompt calling so once again we will get the anchor tag but this time for the value for the href we will add the tell prefix like this followed by a phone number this isn't my number by the way so please don't go calling this random number and apologies to the owner of this number in advance this time if we save this page and go to the browse and hit refresh then click on the link a prompt for calling that number will show up as mentioned we can also link to specific places on our web page but this time using IDs for this you'd first need to create the element you want to link to let's say this is a heading for example so here we have my heading element as you can see it has an ID that says other recipes and here we have my link element which has a href to the ID okay so hash here represents an ID and we're looking for the ID of other recipes so here we have my heading element as we know using two H1 elements isn't really best practice but this is just an example that I want to show you in terms of how to scroll to another main header so for now I'm just going to allow it and here we have my link element I would have to give my alinks opening tag the attribute of href and then pass through the ID so hash means ID add the element we want to link to so by giving it the value of hashtag other recipes I am now saying I want to link to my H1 element with the ID of other recipes and if I want my page to scroll to the element with the idea of other recipes I would have to give the link the href of the ID right so let's grab the ID and let's stick it up here great I am now just gonna add an unordered list here in order to give length to the page just so that the scroll is more obvious but when we scroll to this H1 element and now let's check it out so save the page first and let's go over to the browser and hit refresh I'm just going to go ahead and increase the size of this page so that it is more obvious everyone for when we scroll so just increase the zoom on yours too if you need so now let's test it out I'm just going to click on here and wonderful we managed to scroll to the H1 element we have now finished building out our recipe project using HTML so give yourself a round of applause I think we did great now we have not covered IDs in full just yet there is a bunch more stuff we can do with them this was just a quick taster we will cover them in more detail later on in this course so by now we know that we can build web pages to link to external resources or link them to specific elements we built in order to scroll to them visibly on our web page another thing we can do with the link element is take a user to a specific page that we built on our site to do this let's go back to our project that we called my portfolio and let's have a look at our project structure first so say we are on the index HTML page right here and we want to access another HTML page one of these Pages for example we would have to write a path from where we are currently in the project tree to this folder called pages and then to the file we want out of these two this is how you would do so so bear in mind we are starting from the index HTML page we are going to go into the folder called Pages using the forward slash I'm going to enter that folder and pick out a file I want to show let's just say that file that I want to show is called abami HTML so let's just specify that in that path Now by clicking on this element we will be taken to the about me page okay let's test it out to see if what I'm saying is true so first off let's make sure we are opening the correct project so let's go ahead and get the project my portfolio so here we have our project I'm going to go ahead and create a directory or folder for our extra pages called pages and in it I'm going to create one file called about dash me.html making sure to not have a space but have a dash and paste in some boilerplate code as well as change the title of the page so that we know which page we are dealing with of course don't forget to save this page now on the home page let's go ahead and add this link that we saw on this slide okay so just added this like so now let's open up the index HTML file not the about me HTML file so save the page and copy the path to the index.html file and paste it into your browser now don't forget to reload the page in order to get the latest documents and let's go ahead and click here and tada we are on the about me page it as works now let's have a quick look at the parts to this file here in the browser okay so as this project is stored on my computer I am starting at the root so going into a directory called users on my computer then going into a directory called Annie Kubo then into another directory called desktop and then into the directory that we made for my portfolio enter the Pages directory I just made and then getting the about me HTML file to show up in our browser of course when you host your projects online after buying your own domain this will not look the same I will most likely look something like this but we will leave that to the end now what if we want to link back to the home page from the about me page well we need to navigate back to do this I'll go one level back in the tree or in other words out of the pages folder we need these two dots like this followed by the Slash and then get the file we want to show so let's test it out so back in my project I'm just going to go to the about me page so I'm just going to go right here and add an anchor link with the href and as the part I'm going to go back so the two does mean we go out of the folder and then I'm going to essentially specify which file we want to show okay so that's all I have done so now let's check it out so let's go back to our browser hit refresh click on the go to about me page and here we are we're on the about me page and here's the link we just made that says go to the home page so let's test it out let's check that this takes us back to the home page and it does okay we are on the index HTML page that lives in my portfolio and amazing this is looking great so the slashes that we see in the path are essentially us jumping either backwards or forwards in the tree of my project from folder to folder essentially imagine each of the folders in this tree as a slash and if you follow the path to your next location and pick up a slant it's like you've just added it to the path that you are constructing okay so you're just picking them up like a train same thing for if you are leaving the folders you will need to use the dot dot to go all the way back to your spot in the tree where the train is safe to proceed to get to its destination got it now let's do another one imagine you are in this park called Contact HTML what part would you have to put in your href in order to get to the about me page have a think about it using this graphic of our project tree right here please post here and do that and once you are ready just hit play well as we are on the same location so in the pages folder we don't need any slashes our train literally stops pretty much at the destination so we just put the file name now let's test it out so first let's create a contact page in the Pages directory so contact.html and I'm just going to put in some boilerplate code and once again just change the title to say contact like we just did before with the about me page now in the contact page I'm just going to put another link so another anchor tag and I'm just going to put go to the about me page and of course we need to link this to that page so I'm going to use the href and I'm just going to put the about me page about Dash me.html Okay so just like we did an exercise if we click on this link it should take me to the about me page so this one right here and actually in here I'm just going to put in another link so from the about me page I also want to be able to go to the contact page so let's go ahead and add an a link and then I'm just going to put go to the contacts me page and as the href I'm just going to put contacts.html so exactly what our contact page is called great now let's check it out so save those files go back to the browser and hit refresh and now click on the about me page link and great we see both those links so we go to the home page or we go to the newly made contact me page so let's click that and wait we are on the contact me page we see the title in the browser tab we also see the path going to the Pages directory and getting the contact.html page and we see that link that we made on that page which takes us to the about me page and let's test this one out too and wonderful that's exactly where it goes once again as you can see by the tab name and the path that we have here okay great so hopefully this explains a little bit about how you would navigate from page to page on a website once you have this down let's carry on we are now going to move on from looking at how we can manipulate text in HTML and look at how we can add images to our web pages we have already touched on images before but for good practice let's recap what we have learned so far about this wonderful element in the introduction to HTML we learned that unlike most HTML elements the image element is one of the ones that uses a selfclosing tag meaning it only needs one tag like this we also learned that it is the source attribute that contains the path to the image we want to embed this image can be in our project folder and we can navigate to it by writing a path to the correct file so we can use the URL address of an image that is hosted online just be aware that if the person or company hosting that image chooses to take it offline you will no longer have an image here to display you will see this broken URL icon right here instead you will also see the alternative text if you choose to add that to your image element the alt attribute is super helpful in occasions like this when they're linked to the images broken or the image won't load as it will allow the user to know roughly what it was about it is also wonderful for the visually impaired who might use a screen reader to see what is on a web page let's try to put an image on the about me page of our portfolio by putting an image of ourselves okay so I'm going to choose to store an image in my project all I'm going to do is find an image of me so I'm going to choose this Square jpeg so just make sure yours is also a JPEG or a PNG file and next I'm actually going to create a directory so making sure you're on the root of the project so the same level as the index HTML file just go ahead and create a directory called images and it's going to store all our image files from now on so there we go I just created a directory it's on the same level as the Pages directory and the index HTML file so let's go ahead and put an image in there I'm simply going to drag an image in for my computer like this and drop it in wonderful so there we have it that is now done and now let's go to the about me page and once again I'm just going to use this code right here so from the slide and I'm just going to paste it in like so so we now know that we need to get the path to this image and assign it to the source attribute and I'm also going to provide some alternative text just in case this doesn't work for whatever reason or just to make it accessible for everyone so I'm just going to put an image of Amir Cuba you can choose to put whatever you wish now the part to this well once again let's look at the project tree so I need to go back to the root of the project so I need these two dots and then I need to go into the images directory so I need to go into the folder I'm jumping into the folder and I'm just going to put the name of the file that I want to access okay so that's it now if we save everything that we've done so far and just refresh the browser making sure you're on the about me page amazing you will see that image it's unselt at the moment so it might be very big or it might be very small but we will work on that when it comes to the styling section of this course for now this is looking good let's carry on if you are having issues with this at any point the final code will be attached to this lesson so please go check it out in this section I want to show you how to work with tables this is going to involve a lot of nested elements so our HTML elements are getting a bit more complex by the end of this lesson you will have built something like this but don't worry we will build up to it step by step starting with a tiny table first so the simplest table elements can take three types of elements the table row element the table header element and the table data element we would start off by creating the table element which will wrap up all our content nicely so it all stays together inside I need to start off by making some table rows so let's say we want our table to have three horizontal rows I would add three table row Elements which look like this so now we have some rows I next need to decide what kind of columns I'm going to have let's say I want my first column to contain last names and my second column to contain last names I would need to add the table header element to tell our browser we want this to be the name of the column it would look like this now that we have defined the columns names we can fill out the rest of our data using the table data element it would look like this and that's it that's a table in its simplest format if you would like to give your table more semantic meaning for the browser you can also Define that the first table row belongs to the table's head by wrapping it in a t head element and the rest in a table body element so tbody visually it will not change what you see in the browser but it will help your website SEO as well as screen readers know what is going on okay cool got it good because now we are about to put all of this into practice by implementing a simple table onto our portfolio project okay so back on the about me page I want you to put in a table in order to organize our future projects this is what I want the end result to look like so three columns one for the hyperlink to the project which we will leave the href blank for now another column for the title of the project and another column for a quick description of what the project is about and what technologies we used for it for those of you thinking wait this is a pretty ugly table are you sure we want to put this on our portfolio don't worry the fun styling stuff is yet to be done for now let's just get building using the basic building blocks we have at our disposal okay so what are we waiting for let's get to it please have a go at building this Yourself by pausing here once you have built your table unpause and we will go through my chosen solution together okay so what I would do is well on the about me page I would start off with my wrapper element as mentioned this will be the table element as that's going to hold or our child elements together so go ahead and create your table elements so there we go there is an opening tag and a closing tag and in here well I'm going to do the more advanced version of the table so what I'm going to do is put in a t head element as the first child on my table so the T head element looks like this and it's essentially going to hold our head up for our table and then let's put the tea body element as the second child of the table element and that's going to hold the rest okay great so one child and a second child next I'm going to create a table Row for the head so for this I'm going to use the TR element once again it has an opening tag and a closing tag and once we do that I'm just going to put in two of these in the body as well so that we have three table rows in total Okay so let's go ahead and do that I'm going to put in the second table Rook here and then just put in another one great I'm just going to open them up because we're going to put content into here now in my first table row I'm going to use the table header element and we're going to have three of these because we want to have three columns or essentially three table headers and then I'm going to mirror that in the other table rows however with table data elements so that we can sort data for each of our columns so the first table header is going to have project the second is going to have title and the third is going to have description as that is what I want my columns to be called so there we go so now if I refresh the page so save your project and refresh the page I'm just going to make this bigger tada you should see right at the bottom are three table column names or in other words table header names great so now let's get to putting in the data so let's go ahead and do that back on my project in the first table data element well I'm just going to put project one and in the second table this element I'm going to put the title of that project is the one we made is the macaroni and cheese recipe and then I'm just going to put in a short description of that project okay so this is what a table is going to look like it's going to have a project it's going to have the title and it's also going to have a short description wonderful and let's do the same for the other one for this one I'm just going to put project two and this is going to be our table tennis leaderboard so let's go ahead and put table tennis leaderboard okay and then again let's just put in a description it's very long so I'm just going to format it a little bit better to make this more readable this will not be shown in the browser this is for us just to be able to see this in our project right now so there we go and there we have it that is our table I'm just going to put some more text in here just to Pat it out of it wonderful so now tada that is what our table looks like it's got three rows two for the data and one for the column I think this looks great now I'm just gonna go ahead and add one final table row just to kind of prepare us for what we are going to be putting in in the future so let's go ahead and make that table row let's put in a table data element with project three and of course we haven't made this yet so I'm going to put TBD as the project title as well as TBD for the project description but essentially we're going to add a bunch more projects into here so just so you know what this looks like I've gone ahead and added another table row and wonderful so this is looking great I'm really happy with how this is looking so far of course without any styling yet the last thing I want to do is just wrap the First Column entries in a links so an anchor links because we're going to want to link to this in the future at the moment I'm just going to leave an empty href attribute okay so this will just give this the appearance of links but without actually going anywhere so just do that for all the a elements like so and great so we have now created some links of course they will not work but visually at least this column looks like links this is the final look that I want to aim for wonderful okay so I think we are done with this project for now let's move on now that we have covered some of the many text related HTML elements let's move on to the fun stuff which allows us to create shapes add colors to our website starting with the content division element or in other words the dev I like to think of the div as a beautiful being that could be anything you want it to be we can get the div a height we can give it a whip and we can give it a background color using CSS or another one styling which we will cover in the next section we can also use it in a very basic form without styling to hold other elements together so for example we can create a div put a heading in it and put a paragraph in it and now these two elements will be gripped together so you might think great so with this div I can now group together pieces of information to start adding structure to my web page well not to throw a spanner in the works but you are partially correct the div should only be used if the section element article element nav element header element or footer element don't apply why you ask this is because these elements all have semantic meaning and will be interpreted by your browser to be an element that holds a section an element that holds an article an element an element that is the header of your website and the footer of your website djib does not have this it's like a mysterious ghost let's have a look at some elements with semantic meaning in the next section by now we should know the elements that make up a web page can have semantic meaning this means that the web browser will see them and recognize what the element is meant for this makes it good for users of assistive Technologies like screen readers and they are also good for SEO we have the header element which represents quite literally a header this can hold things such as your website's logo a search bar and other things typically seen in a website's top element the header element is not to be confused with the head element which as we now know holds the website's metadata so all the invisible stuff just like the header element we have the footer element which literally represents the footer of your web page you can put anything you want in the footer however typically you would see something like information about the company copyright data or any links that you would want to give the website viewer next up we have the nav element which represents the navigation bar on your website it will usually contain a menu or a list that will allow you to navigate between all the pages on your website we also have the section element which represents a standard section of a document sections should have headings in them after all think of when you read a book it would be kind of strange to see a new section that didn't have a header for you to know what the text in this section was about right without this heading the element will not appear in the document outline if you do not want to put a heading element in the section perhaps it's not really a section you are after perhaps a div would work better on this occasion the last populous sectioning element I want to cover is the article element an article element can represent things such as newspaper articles a blog entry a product card a user submit a comment or a forum post amongst other things just as with this section the article element should include a heading element nested inside of it now I must stress there are many more semantic sectioning elements to your disposal I have simply covered the most popular ones or the ones that might be a bit tricky however there are all these other ones as well at the time of recording if you have the time I would suggest doing a quick Google of each if you are interested I feel most are pretty selfexplanatory so you don't feel like Googling it's fine let's carry on so by now we have covered the most popular textbased HTML elements as well as some semantic sectioning elements and the dip I am now going to ask you to put all of your knowledge to the test by building out this table tennis leaderboard unlike in the first project I'm going to leave you two at this time the goal is to create a directory or in other words folder called HTML project to create an HTML page to go into the project with the correct boilerplate code and then use the elements we have covered to recreate what we visually see here you are of course free to refer to the previous lessons we did in this course so far and don't worry that is in no way cheating no one is expecting you to memorize these things even I still copy and paste HTML boilerplate code so once again this project will utilize everything we have learned so far as well as three new elements that I briefly listed out in the semantic sectioning elements video okay so these three will be used in this project section it is a hairline element which is essentially a line an element that will allow us to write captions and the figure element as well so please go ahead and do some Googling by yourself on these three this is an excellent lesson in Googling and once you are ready please have a go at this once you are happy with your project and you want to see how I would choose to create this page please click on the next video and remember there is no one way to create this page there are literally thousands of ways you could do it so get going and I will see you soon okay so now I'm going to show you the solution to how I personally would create a table tennis leaderboard that looks like this okay so I'm excited to show you first things I'm just going to create a new folder on my desktop I'm going to call it HTML project two just like we decided in the previous video okay and once I've done that I'm just going to open it up in vs code so I'm just going to open that folder so please go ahead and do the same open it up in your code editors just simply by pressing open folder finding that project on your desktop clicking on it and opening it up so great I'm now in my project there is nothing in here at the moment so let's put in our first file so all I'm going to do is click on here and create an indexed HTML page not forgetting to give it that HTML extension to let our code editor know to treat this as an HTML file okay so go ahead and do that and now I'm just going to put in my boilerplate code so as we know for our boilerplate code we can just copy paste it so that's what I've done I've pasted it from another project and now I'm going to put in the title of my project this title will not be visible to us okay in the browser it will be visible in the tab of the browser and it will be visible if you uploaded this onto the internet and search for it in Google okay great so I'm gonna go ahead and call this table tennis so please go ahead and do the same great before we get to putting in anything in our body elements I just want to open this up in the browser so we can see what it looks like so all I'm going to do is just left click on the index.html document right here and then copy the path and then go to my browser and just paste in that URL like so so there we go that is what index.html page looks like and as you will see you can see table tennis in the tab name great now let's get to adding some elements in the body elements so first off I'm just going to put an H1 element and for my H1 element I'm just going to put table tennis just like so so now if we say that file and refresh the page this is what it should look like we can see that H1 element in our browsers great next let's move on by putting an H2 element in here so in my H2 element this is going to be a sub heading and all I'm going to do is put in some text so I'm going to put classroom tournament leaderboard just like so and now if we save this file and go ahead and look in the browser so let's refresh the browser you will see classroom tournament leaderboard showing up wonderful we have an H1 element and we have an H2 element so a subheading element let's carry on next let's get to creating some semantic sectioning in here and first off I'm just going to start off with creating a table so here's my table element it is a wrapping element that's going to take a bunch of other elements in order to create our table the first one being the T head element so just go ahead and put in a thead element and then put in a cheap body element for the rest of our table rows okay so our table heads element well we know this has to contain a row so let's go ahead and put that in so that is my whole table head and in my table row well I'm going to Define our table headings one is going to be a position heading so just go ahead and put position one is going to be for the name of the person playing in the tournament that that is going to be for if they won or not and the fourth is going to be if they lost or not so it's going to be a count of one and lost tournaments so if we refresh the page in our browser that is what it looks like at the moment we have created four table headings or in other words four table columns great this is looking good next I'm just going to put in some table rows that are in the body so essentially for our data our first table row is going to have a table data element so I'm just mirroring the table heading so I'm going to have four okay so we're essentially going to create table rows for these columns well our first table data cell is going to have the position so we're going to have position one then we're going to have the name of the player who's in position one it's going to be my name Gomez and she's gonna have one five and lost zero so save this and refresh the browser and amazing we have just created our first table row to go on our table let's go ahead and create another one next okay now let's create our next table row so we know how to do this now just go ahead and use the TR tags to create a table row and then in here I'm going to put four table data elements because we want to essentially put data for a position and name a one and a lost value so let's go ahead and do that in fact I'm just going to copy this as we're going to have a few of these so we have one table row let's go ahead and paste another so we have two and three and four and five okay and let's do it so my first single row I'm going to put position two the name is going to be Mohammed Leroy and he's going to have won four and lost one okay next as position three I'm going to have the name of let's go with Patricia Bennett okay so that's the name I have chosen Patricia Bennett and she is one three and lost two position four is going to go to Sam Lehmann he has won two and lost three position five is gonna go to Young Lee he has one won and lost four and then let's do position six as well and this person is Astrid Genevieve and she has won zero and lost five and I think that's it so we just need six so let's save that let's go back to our browser and refresh and tada there is our classroom tournament leaderboard we have just completed our table this is looking great so let's carry on the next thing I want to do is just put in a line and for this I'm going to use the HR element that I did say to Google previously so if you Googled it you would know that the results would look like this and it's just a nice way to split this out okay wonderful so we have just split this out by creating a line thanks to the HR element which looks like this let's move on the next thing I'm going to ask you to do is put in another subheading this is going to be smaller than the other subheading we have so I'm going to use an H3 element for this so please go ahead and do the same just use your H3 element and put in the title or the subtitle of rules of table tennis and a colon just like so so just like I have now the rules of table tennis this was an ordered list so I'm going to choose use the ol element so here are my ol tags and inside I'm going to have to put list elements now first this element is going to contain the texts of games are played two and then I'm going to make a bold number so I'm using the Bold tags or if I want to give this semantic meaning to the browser I can use the strong tags so each was fine to use okay whichever one you use is okay and then I'm just going to put space and points great our next item is going to have the text of alternative serves every two points are mandatory and this time I'm going to put the number 2 in strong so let's just get up on strong tags and I'm just going to put the number two in there great let's just minimize this for now let's make our third list element so our third list element this one is going to have the text of make sure to toss the all straight up when serving okay so that is my thirdest item let's check it out so say that page on refresh and wonderful so we've just made our rules of table tennis it is an ordered list and you can see the 10 and 2 are in bold so that is looking great let's carry on now what else do we need to create well I just want to create a paragraph element that's going to take some text and that text is going to be in italic so I'm going to use the I element for this okay you could have also used the EM element if you wanted to give the page semantic meaning but I'm just going to give it the I element from now so again each one is good in here I'm going to put official rules can be found on the international making sure to spell International correctly table tennis website so that is now going to appear italic on our page and I'm going to actually hyperlink here so to do this I need to get here and put it in some eighties or the anchor link and next I need to give the anchor link First tag so let's just space this out a little bit making sure that the indentation is correct so let's just make sure that those eye tags are on the same level and the P tags are on the same level next to make this link work I need to give the first tag of the a link and href attribute and I'm just going to go ahead and type in the URL to the actual International table tennis website so this is it for all of those curious okay that is the link to the international table tennis website great so now if I refresh this amazing we get some tags in italic and the here is hyperlinked and if we click on it it does take us to the official table tennis page how cool is that let's carry on let's just make the official Spell correctly first and great next I'm going to put in another line so let's go ahead and use our HR element again now I'm going to put another subheading so I'm going to use my H3 element again and this time I'm going to have the game set up so game setup is going to be my subtitle now I'm going to have a p element in here and this is essentially just going to give us some more information so it's just going to say the game should be set up as per the table tennis tournament at Liga Pro okay so just giving some insight into how the table tenants table should be set up and finally I'm going to show a picture of this so I'm going to use the figure element this is another element that I asked you to Google in the previous video so hopefully you did that and this figure element okay so for this we're going to actually have to put in an image element in here so go ahead and do the same it's a selfclosing tag and then for this image we can have a figure caption so that is my figure caption element the third element that I asked you to Google in the previous video so hopefully you did that as well great now in my fig caption I want this to appear in italics so I can use the eye element or I can use the EM element if you want to give it semantic meaning that is up to you and I'm just going to give this image taken from Wikipedia okay so that is what I'm going to do and I'm actually going to hyperlink Wikipedia too so just whack in Wikipedia here and as the opening tag of my a element I need to give it the href attribute along with the link to Wikipedia which is this for table tense great okay so this is looking good let's go ahead and find an image so just whack in that Wikipedia URL and then copy the image address to this table tennis image and then as the source of this just put in the URL to that so as long as that web page exists as long as that picture exists this picture should appear in our own project so just go ahead and do that or you can put a picture in here okay that is up to you just like we did previously you can put a picture in here that you uploaded and made an image directory you could have done it both ways both ways are absolutely fine so I hope you did either of those or if not let me know what you did finally I'm going to put an alternative tag to this image element so I'm just going to space it out so we can read it a little bit better and put alt as the attribute and then some alternative text which in this case I'm going to have table tennis tournament as great okay so this is looking wonderful so far shall we check it out on the browser I'm just going to space this out a little bit so it's more readable so essentially I am just putting everything on new lines and making sure that each element is essentially in line with each other in terms of indentation okay so that we go each nested element is more indented than the other wonderful this is looking great that is my whole URL so now let's recap what we've done so we add in an H3 element as a subheading we added a p element as a subheading so now this is a lot I think we've done well one other thing we probably should do as all of this game setup is essentially associated with each other we should probably put it in a section element to hold it all together and we can do that as we have an H3 element so we have a title so let's go ahead and create our section element so our section element looks like this and in here we're essentially going to store all of that that's associated with game setup so there we go that is it and finally let's format it to make sure that all the tags are indented on the same level and that each nested element has indentation as well great let's do the same for the rules of table tennis I'm just going to put that in its own section so there we go and now let's format it so that each nested element is on the right level and great so now let's check it out save that page refresh and there we go that is what our table tennis leaderboard looks like it looks amazing it looks exactly like we wanted you to it looks exactly like the image that I showed you at the beginning I hope you also have this and if you've done it in any other way please do share your code with me on Twitter please either paste a link to your codepen or a picture of your code I would love to see foreign s I'm going to be focusing on creating forms forms are a fantastic way of submitting a bunch of information together we use them on sites to get back feedback write in or even sign up and log in forms are made up of a bunch of elements that are nested in between the two form tags some typical tags that can live inside the form element are the input elements label elements or field set elements however you can technically put in any elements you like the form opening tag can take certain attributes it can take the action attribute which takes a URL that will take care of the form's submission as well as the method which takes the HTTP method to submit to the form don't worry about this for now as this is an advanced topic we will cover later or you need to know for now is that the input with the type submit is how you would essentially trigger the action attribute with the method attribute to submit form data when you wish the input element with the type submit generally does not need a label element associated with it this is unlike an email input for example which would benefit from having a label element in the next section we are going to look at the other types of input types as well as the various attributes that we can use how an input tag looks and works wholly depends on the type attribute and the value you assigned to it by default if no type is provided it will take the form of a text input to use the text type here is a full list of the different types available to us I'm not going to go through all of them as some will be selfexplanatory but to help you get the gist of how input types work let's whiz through the most popular ones now try to remember them as there will be an exercise straight after this so let's start with the text input in fact the Ember element like I said will default to the text type even if we don't Supply it with a type so this is an easy one to remember we can also add other attributes to the text input for example we can control what the minimum length of text and or maximum length of text can be with the mid length and max length attributes we can also add a placeholder to provide a hint as to what type of text we want in here we can also make it required with the required attribute or we can make it read only if we start working with JavaScript we might want to use the name and value of the input so we can work with it in a more readable way this means that we can send over the value of what we put into the input along with the input's name if we have loads and loads of inputs in our form in this case it would be first name Anya next let's look at the button type if we take the input element and assign the type button to it it will look like this so a button at the moment and of course won't have any functionality but it certainly does look like a button doesn't it we can also add a value in order to change the text inside the button too another attribute that goes in the button element can be disabled this will visually disable the button and prevent users from being able to interact with it now what if we switch this to a checkbox type well we got a checkbox visually that we can choose to tick or untick it can also take a value however this time this is not displayed in the browser or in other words on a client side it is used on the server side so that we can take the value of the checkbox and use it for our Computing needs along with the checkbox name this means that when the form is submitted the data name value pair will be subscribe newsletter if no value is supplied the new value pair would simply be subscribe on if the checkbox is ticked next up let's see what happens if we change this to be a color type the Empire element then takes the form of a Color Picker as we can see here we can click on the element and then drag the cursor to select say color which will generate an RGB value for it or a hsl value or a hex value we can also choose what color we want to start on by assigning a value to the input element now let's move on to the date type by supplying the date type we are creating an input that looks like this so essentially a date pickup with a year month and day when active in supporting browsers this input is fun as we can of course set a default value using the value attribute but we can also set a Min and Max state this means you will not be able to select dates in the date picker outside of this range and if we change this to date time local an option to select the time will show up to next up let's look at the email type now this might look like a normal text input but it has certain validation parameters meaning it won't accept the field unless you give it a at sign and a domain we can actually change these validation parameters by using the pattern attribute and using regex regex or regular expressions are rules that govern which sequence of characters come up in as such there is much to learn on Regis which we will not be covering in this course but if you would like to know more about how to write these rules please check it out in the link below in addition to the pattern attribute we can also have other attributes such as max length Min length multiple for multiple email addresses and placeholder for displaying some placeholder text next up we have the radio type you might be thinking hold on this is just the checkbox type of the circle well there is one big difference only one radio button in a given group can be selected at any point in time this is different to the checkbox in which you can select multiple check boxes here is what a group of radio inputs can look like and behave like we can even give them label elements and Link them to the respective input with the full attribute which correlates to the radio elements ID the range input is another fun one in that it has this cool slider we can set a bin and max range for the slider as well as hardcore the value it is currently at with the value attribute if we want to increment the slider to our biggest steps we can do that quite literally with the step attribute too and finally the last input type I want to show you is the submit type which we briefly touched on already just like the button type we can change the text and the button using the value attribute however we should only use the submit type to actually trigger submitting the form the form element and the input or the type submit are linked if you want to have other uses for the button inside the form and write your own custom JavaScript such as to update the value of an input dynamically or select something I would suggest using the button type and that's it we have just covered the most popular input types let's move on with some exercises foreign everything we have learned so far in the last section on inputs in order to really hone in our skills all about inputs so we're going to have three exercises we're gonna have to replicate what we see visually with code so to do this let's create a kind of scratch bar that we're going to work with so all I'm going to do on my desktop is create a project that I'm going to call classwork so there we go there we have our classwork folder and now let's open it up in vs code so go over to vs code and find that project so go ahead and find it on your desktop click on it and open it up okay great and now what do we do well we need to create our index HTML file so go ahead and create an index HTML file making sure to use the HTML extension okay so that code editor knows to treat this as an HTML file and there we go step two is going to be to add the boilerplate code so please paste some in from a previous project and let's just call this scratch pad for now great please go ahead and save this file now let's open it on the browser by grabbing the path and pasting it in the browser like we've been doing so far great now that we have that done let's continue so now that our setup is done let's have a look at the exercises that we need to replicate so for exercise one I want you to create an input that will take an email and it's obviously a company email that takes a certain domain so please take that into account and also take into account the fact that this has to be an email so three things here and you also have a placeholder visible so that is also something you're going to have to add and of course we also have a submit button that will submit our attempt at putting in an email so let's go ahead and do it I'm going to lead you to this I will however lead you with the knowledge that all of this has to come in a form element okay otherwise it will not work as intended when submitting okay so here we have the form element now please go ahead and make sure all your work is done in between these two tags so I'm going to leave you here please pause here and unpause when you're ready to go through my solution together thank you okay so what I would do is and of course this is just my solution there are many ways to do this is first off I would create an input element so let's go ahead and create one like so so it is just one tag like this and I'm gonna go ahead and give this the type of you guessed it email so there we go so now if we look in the browser and hit refresh I'm just going to make this a little bit bigger we have the input with a type of email right so it looks like a text type but we know it has a different semantic meaning and different functionality so now let's go back as we just add a few more things into this input element and also I'm also going to add a label element as we did see that in the example and This is 40 below input so let's link it up and how do we link it up using for an ID so let's add the four attribute to the label and let's add the ID attribute to the input so let's go ahead and give this the ID of emot input you can go ahead and call it whatever you wish and now let's grab that ID and just paste it into the four attribute on the label so now both are linked up okay we've just linked it up using before an ID attributes great let's go ahead and add some tags into the label I'm going to just go ahead and put please use a udemy.com email okay just like so so now if we look in here tada the label is now showing up this is looking good the next thing I want to work on is the placeholder so to add a placeholder I would do this on the input tag it's going to minimize this for us and I'm going to put placeholder and I'm just going to put Ania at udemy.com of course I don't work at udemy so this is fake let's go check this works um great we will now see some placeholder text that will be replaced as soon as we start typing now let's go ahead and add something else visually and that is the submit button so we know by now that we don't use an actual button we're going to use an input with a type of submit and that input will trigger submitting the form as both are linked so let's go ahead and put an input with a type of submit so just like that and refresh the page in order to see it as a default the value of this is submit but we can change it with a value attribute so let's go ahead and do that I'm just going to put that in like so okay so there we go however right now I can go ahead and put Dan at dan'sworld.com and sign in and that will submit okay so that has technically worked it is refreshed it's technically submitted we haven't put any extra functionality at the moment so our form by default is just refreshing the page but we know that we need this real udemy address right so we would like an error message shown up to do this we need to add the pattern attribute so my pattern attribute well I'm just going to add the string of Plus at udemy.com and now I am saying that I want the domain to be udemy.com for the email I'm just going to space this out so it looks a little bit more readable at the moment okay so just go ahead and do the same great so we have just added the pattern make sure there's a DOT there let's check it out so now I'm just going to refresh this page to load the changes and type Dan at dan'sworld.com and try to sign in we get that error message so there we go we have essentially blocked other email addresses from signing up just like when we do a d that won't work it will say there's no email present so now we've officially made some validation happen on our email great so the form is not submitting it's not refreshing so we are being stopped from signing in wonderful so we have now completed exercise one this is how I would solve it however if you have done it another way then please do share that with me on Twitter I would absolutely love to see okay so look forward to seeing your Solutions over there in the meantime let's move on to exercise number two in exercise two I would like you to build this range input that will essentially allow us to increment the steps by 20 in order to get from 0 to 100 to percent of this range okay so that's all that I would like you to do for this exercise please go ahead and do this once again the main body will be zero and the max value will be 100 and I want the increment to be in 20s in addition to this I would like the default to start right here okay so make sure to make that happen as well as well as add a label to the input so please go ahead and do this and once you are happy with your solution we'll go through a solution together okay so first off I would just start off by putting an input element and assigning it the type of range so a range that is very smooth in its movement so there's a few things that we need to change so we need this to increment in 20. so let's go ahead and add the attribute of step with the value of 20 so that if we now refresh our page our range input will now look and behave like this so not as smooth but it's incrementing in 20. so let's carry on the next thing I want to do is just give it a Min and a max value so I'm going to send meant to be 0 and Max to be 100 so just like this if we actually change this to be an 80 well I'm just going to show you what happens I'll step that implements in 20 has four steps as 4 times 20 makes 80 so that's four steps but we want this to be a hundred so let's just go back and change it to be 100. great so as default this will be 100 but I just wanted to emphasize that by putting it here next I also want to code these start values so I want this to be at 20 because I want it to appear around about here so that's exactly where it is I just hardcoded 20. and finally let's just give it a label so I'm just going to use the label element for this by creating a label element and then putting in some text this text is going to be volume and now let's link the label to the input using the for an ID attributes so four I'm going to put volume input and for the ID I'm going to put the same so volume input so great they are now linked so we've done it we have our input it's looking exactly like the exercise at the beginning now you should actually put this in a form element like I said so if you want to submit this eventually two things you will need are the form elements like so as a wrapping element as well as the input or the type of submit okay so if you would like to submit the value of this input with the type of range those two things will be needed great so this looks great I hope you've enjoyed this exercise please do share your solution with me on Twitter via the link below if you've done this another way I would absolutely love to see and finally for the third and final exercise I want you to essentially build out this form that will allow us to pick one of the three options about how our experience was at a theme park so this is what I want you to build you're gonna have to think of a way to pick out one option out of a bunch of options and then submit it via a form so please think about this pause here and I'm excited to see how you do this by yourself and then go through a solution together so see you in a bit okay so I would do is well here we have our form first off I'm just going to create an H1 element okay because this was bigger than a label so I'm going to use the H1 element for this and I'm going to put how was your time at Happy Land okay so that's what my H1 element is going to look like now we can have this in the form that is absolutely fine okay so I've decided to put in the form and next we need to decide what kind of input type we're going to use for the multiple choices the type I'm going to use is Radio why radio and why not checkbox this is because the radio will allow us to choose one of the three options and not allow us to select multiple options like the checkbox type so in the input I'm of course going to have the type radio but I'm also going to give it a label the label is going to say bad and I'm going to link it to the above input we'll do for an ID attributes so let's link them up by the same name let's have bad input and let's put the ID as bad input as well great so there we go and for good measure I'm just going to give this a name just in case you know in the future we want to link this up to JavaScript we don't really need to do this now but I think it's good practice to start adding names to these types of inputs so as a name I'm just going to give this the name of experience okay because it's all related to one experience so well done if you choose to add that name attribute there you're already thinking about the future so let's check out what this looks like at the moment great so we've got our bad input let's let's create another input so let's go ahead and use the input element and create a label for it this is going to say okay let's link them up using the for and ID attributes and I'm going to put OK input here and give this the ID of ok input great now let's also give this the type of radio and leads essentially link it to the other input by the name attribute of experience okay so once again when it comes to JavaScript this will be important for when we want to essentially get the value of our inputs for the type gradient in addition to having this name attribute for when it comes to work with JavaScript we're also going to have to give both of these a value so remember a key value pair made up of the name and value so I'm just going to give the top one the value band and the second one the value is okay wonderful once again these are important for the key value pair for when we start working with JavaScript it's not nearly necessary now so if you don't add them don't worry and now the final input let's go ahead and create that input element let's go ahead and create a label element this one's going to have the text of good and let's look them up with the for and ID attributes let's call this Good input and give this the idea of good input and give this a type radio and again give it the name of experience and value of good wonderful we are now done so this is how it looks like on the radio inputs we can also have one checked as a default if we want simply by adding the checked attribute so I'm just going to go ahead and do it on this one and that will mean that this one is checked by default and of course we can change it and we are not selecting multiple ones as you will notice right now wait the final thing we need to do is just add an input with a type of submit that has the visual appearance of a button but essentially it will allow us to submit this form if we click on it along with the value of the one we've chosen hopefully in the future when we hook this up in JavaScript and there we go once again I hope you had fun with these exercises please do share them with me on Twitter because I would love to see what you have done with yours otherwise let's continue in this next section we're going to talk about the select element in order to create one ourselves this select element allows us to select an option from a drop down menu and looks like this so we have this select element which we will name with the name attribute for when we want to pick it out with our JavaScript and then we have all these option elements nested inside of it now each option element has a value again for when we need to pick it up with our JavaScript and then the text of what we want to see visually in the browser in between the two option tags this select element is usually accompanied by a label element which is linked to the select element with the for and ID attributes so that is the code for writing a select drop down and this is how it behaves it is for this reason that it could be wise to have the first option element contain new tags please choose an option with no value so just an empty string to represent nothing being chosen even if we click on it but this is not required one other thing we can do is hard code these selected value by using the selected attribute on the option element on this select element itself we can have many attributes some of these include the disabled attribute that looks like this the required attribute or the multiple attribute to be able to select more than one option got it good now it's time for a little exercise okay so let's get to practicing what we learned in the previous section by building a select drop down so this time we're not going to be using snacks let's go ahead and recreate what we see on a ecommerce site by having a drop down of sizes so we're going to have extra small small medium large extra large and extra extra large okay so let's go ahead and do it first off we're going to start off the label right so there we have our label and this label is going to say select your size and next under here we're gonna have this select of course so it's going to have an opening tag and a closing tag and I'm just going to pause here and ask you to complete the rest of this exercise next so once again it's a drop down for an ecommerce site that will allow us to pick sizes for our garment okay pause here and let's go to the solution in a bit okay before we do anything I'm just going to link up the label to the select with the for an ID attributes as a reminder I'm just linking the label to the select or this attribute so let's make sure that these are the same I'm going to have a size list and size list right here for the id2 okay so there we go and now let's add some options so my first option is just going to have the value of blank I'm just going to leave it a blank string and this is going to say please select your option so there we go our first option is essentially a blank value and our section option is going to have the text extra small next we're going to have another option or the size small and then we're going to have a third option let's actually just paste in a few with medium large and extra large and then one more for extra extra large Grace so there we have it visually this will look fine but we know we have more to do we need to add a value to this as well so that when it comes to picking this up JavaScript we are prepared so let's go ahead and give this the value so I'm just going to give this a readable value for when we need to pick this out later on and it's just going to be the string XS this value I'm going to give the value of s here I'm going to put an M for this one I'm just going to put an L for this one I'm going to put the value of XL and you guessed it for the last one I'm just going to put the value of x Excel and there we go so this is looking good and for good measure we of course we know we need to give the select a name and let's go ahead and call this sizes so once again this is for eventually picking it out with JavaScript so now if we look in here we can select our size and we can see the options now if I was to change this to be extra small like so and Save you will see that that has changed however I'm just going to put that back to the way it was if I put extra small here nothing will change okay once again this is because this is for our JavaScript and should actually technically be written as one word or two words connected by a dash in order for this value to get picked up okay so there we go that is some knowledge for you for when it comes to picking stuff up without JavaScript later on and wonderful so that is our select exercise done I hope you enjoyed it let's move on now I just want to take a quick break to talk to you about the inspector Google Chrome's inspect tool can give us a lot of information about what is going on in our browser in fact it can show us exactly what code we are sending to the browser and in what state I'm going to show you how to inspect this browser to our browser right here now so here we are back on our select exercise that we just did and here is the select drop down that we just made now if I go ahead and left click on the browser while pressing Ctrl on my laptop you will see this show up I'm simply going to click on the inspect tool in order to get up this inspect tool for us this will show us many tabs including the elements tab which will show us the elements making up our web page that we are viewing as you will see this is exactly our document that we're working on so you will see the HTML element you will see the title element that we give our document and you will also see the body tag in which we added a label element and the select element with all the options that we just coded just right here so this is pretty cool and we can now hover over so we can choose to select items in our browser which will show us exactly which element we are selecting or we can select them here so just click on that and select maybe this label and this will show you that label in the browser along with the size of that element along with any styling that has been applied to it at the moment there has not been any styling added by us this is just the default styling under the Styles tab what is also cool is that we get a console we will not be using this now but we will be using this in the JavaScript section very heavily so just keep that in mind so this is the inspect tool it's really useful for us as developers now and especially in the future now I feel like I've saved this one to show you as I am really fond of the data attribute and I want to talk to you about how you can make customish attributes to give us flexibility HTML5 allows us to store extra information on standard HTML elements using the data attribute the Syntax for it looks like this we can of course have data or we can have data Dash and put in whatever word we want to make a custom attribute now why would we want this well we can have a div that's served like a card so here we go here is my div styled like a card okay so I can't wait to show you how to style stuff in the CSS part of this course but for now just stick with me now say I want to flip this card and display some text such as a question and two possible answers we can actually store that information on the div itself without actually visually seeing it we will do so like this so we can have data question data option one or data option two so now that information is stored on the div but we can't see it with our eyes on the div so for example we can sort a data question attribute that says what color are the carrots okay we can also store another attribute so let's have data Dash option one which will give us an option of let's say blue and then we can also have data option two that will give us a second option as well that we are storing on that element let's go with orange so that's a lot of information that's custom information that I am essentially putting on an element now with the magic of JavaScript we can then get these attributes and show them and they did on the click of the element but we will leave that magic for when the time is right now it is also worth noting that this information is not fully secret and is still on the client we just can't see it visually however if we inspect the browser like we just learned and look at the HTML document that makes it up we can see that information here if you really want something to be hidden you would have to store it on a server and retrieve it when you need in this section I want to talk to you about how you can add little notes in your code that won't affect anything in the browser but why do this well as developers we might want to annotate things we have done things we need to do or simply leave notes for another developer that comes along in the form of an explainer or to do action item for beginners I would strongly recommend annotating or in other words adding pseudocode as often as possible all you need to do is make sure the text you and add is in between these these you can add this manually or in vs code you can highlight the text and press command forward slash so for example here we have some code if I wanted to add a reminder on the form that I want to add another input I can simply write some text that says to do and then I would comment out by highlighting the code and pressing command forward slash obvious code so that's what I've done or you can manually add the characters you see at the beginning and end of this line another thing you can do as mentioned is put reminders so add code to yourself so for example here I'm going to remember the pattern can take regex Google this later so this is great for as a beginner you can leave yourself little notes about what certain parts of code does or little reminders about what we learned in that lesson so once again two copies out just highlight it all and press command forward slash on vs code and finally we can also add little reminders to other developers too so for example if you're sharing this code base with someone and you think they might not know the intention of some code that you put you could leave them a note so for example I have put this input will trigger the action on the form when provided because of course we have not provided an action on this form by at least this lets someone know that we have thought about it okay great so there we go hope this was useful that is how you can comment that code so that it's not visible in the browser foreign that's it for the HTML section let's recap what we have learned so wheeler what exactly HTML is or hypertext markup language and how we can use it we also learned how to create our first HTML page using the correct anatomy and use it to create a recipe page together using popular text elements we then learned about how to navigate between Pages or do different things altogether as well as about semantic sectioning and elements we also learned about The Versatile dip which is essentially a great shell to create anything and use our knowledge to create a table tennis leaderboard after that we looked at forms and input options as well as how to create our own costumeish attributes phew so we learned a lot now where to go next well I would really strongly recommend going over everything we have learned so far and try built out another recipe page okay so this time perhaps a different recipe than the one we previously did and add it to your portfolio next I would try build a Wikipedia page clone so similar to the format of the table tennis leaderboard I would like you to use your knowledge of everything you've learned so far in order to build a Wikipedia page next I would also like you to try practice your Googling we did a little bit of practice in Googling so far in this tutorial but you're going to be needing it a lot more as you progress positive develop in CSS especially there are many many properties and attributes that exist so being able to Google them correctly is definitely a skill that we should acquire if you have time I would also suggest looking at the remaining HTML elements that we did not look at in this course as mentioned at the beginning there are over a hundred so please take some time here if you want to familiarize yourself with the ones that we did not cover I do think most are pretty selfexplanatory so if you don't want to do this don't worry next I would suggest also playing around the inspector that we are now acquainted with please go ahead and search random pages on the internet and inspect them using the tool seeing what they have under the hood and finally let's get ready for some CSS this part is going to be great as we're actually going to learn how to make stuff look pretty in our browsers so see you then
