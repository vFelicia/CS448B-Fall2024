With timestamps:

00:00 - if you want to learn css this is the
00:02 - course for you
00:03 - dave gray teaches this comprehensive css
00:06 - course for beginners we've already
00:07 - published a popular html course from
00:09 - dave and this course is a great next
00:12 - step after you learn html hello and
00:14 - welcome to over 11 hours of css
00:17 - tutorials and instruction this video is
00:20 - made up of 24 tutorials that build upon
00:22 - each other much like the chapters of a
00:24 - book
00:25 - throughout the lessons in this video i
00:27 - will mention links being available in
00:29 - the description below i've compiled all
00:31 - of these links into one github resource
00:34 - that you will find in the description
00:36 - hi i'm dave gray and i'm the creator of
00:38 - these css tutorials you can subscribe to
00:41 - my youtube channel for more tutorials
00:43 - like this one you can also follow me on
00:45 - twitter and if you're feeling generous
00:47 - you can even buy me a cup of coffee a
00:49 - quick thank you to boa free code camp
00:51 - for sharing this video and to everyone
00:53 - at free code camp for providing such an
00:55 - outstanding resource that helps people
00:57 - learn how to code for free it's truly my
01:00 - honor to contribute this video let's get
01:02 - started learning css with chapter one
01:06 - what is css
01:09 - css is an acronym that stands for
01:11 - cascading style sheets so css is a style
01:15 - sheet language that's used to describe
01:17 - the presentation of a document it's most
01:20 - known for being used with html although
01:23 - it can be applied to other media like
01:25 - you see here i've got xml spg mathml
01:30 - xhtml and other things listed here for
01:32 - on paper in speech other media but we
01:35 - will be working with html now when we
01:38 - think about the difference between html
01:40 - and css consider html as the foundation
01:44 - and structure so if you think about a
01:47 - new building or a house that is being
01:49 - built and you see that structure go up
01:52 - that is the foundation that's everything
01:54 - that holds it together however the css
01:58 - is the
02:00 - paint and the carpet and the wallpaper
02:03 - or anything any decorations anything
02:05 - that makes it look good so the structure
02:08 - holds it all together it's the
02:09 - foundation the css is really what makes
02:13 - the appearance that actual presentation
02:16 - of the building or in our case we're
02:18 - working with documents okay now before
02:21 - we start writing css let's get the tools
02:24 - we need and first of all i will be using
02:27 - the chrome browser in this course so you
02:29 - can download chrome if you don't have it
02:32 - from google.com slash chrome
02:35 - and it should be available for every
02:37 - platform and it will probably identify
02:40 - what platform you have here as well
02:42 - after that we're going to use an
02:44 - integrated development environment
02:46 - really a code editor and what we will
02:49 - use is visual studio code so that is at
02:54 - code.visualstudio.com it should also
02:56 - recognize what platform you're on
02:58 - already but if it doesn't you can click
03:00 - other platforms and you can find it for
03:03 - all the different platforms that we're
03:05 - probably using okay go ahead and
03:07 - download the version you need and if you
03:09 - need chrome download that as well
03:11 - install the software and then come back
03:13 - to the video okay at this point i'm
03:15 - going to assume you've got everything
03:17 - downloaded and installed and now i've
03:19 - got visual studio code open right here
03:21 - you may have a welcome screen i closed
03:23 - that out already but what you need to do
03:26 - if you haven't already is create a
03:28 - folder on your computer for your project
03:31 - for this lesson you'll probably want to
03:33 - create a new folder for each lesson or
03:35 - at least build upon the lesson in the
03:38 - same folder either way you need a folder
03:40 - and the first thing we want to do is
03:42 - create an index.html file because once
03:45 - again
03:46 - we will apply
03:48 - our css to html
03:50 - now if you're not familiar with image
03:52 - shortcuts we can take an image shortcut
03:55 - here to quickly create an html document
03:58 - just type the
03:59 - exclamation mark and press
04:01 - enter
04:02 - and now this gives us
04:04 - a very basic html document and of course
04:08 - it has a title just of document it has a
04:10 - couple of meta tags up here you might
04:12 - not have seen but they're handy to go
04:15 - ahead and leave in the page for now what
04:17 - we want to do is just put some content
04:19 - so let's put a paragraph here and let's
04:22 - say
04:23 - i'm learning
04:25 - css with an exclamation mark and save
04:28 - and really that's all we need in our
04:30 - html document right now now there are
04:32 - three different ways to apply css to our
04:35 - document there is an external style
04:37 - sheet we could have an internal style
04:40 - sheet or we could apply css inline with
04:43 - an element let's look at each option and
04:46 - i'll start out with the external style
04:48 - sheet so i want to create a link element
04:51 - here and i'll press tab and visual
04:54 - studio code helps us out it already
04:56 - gives us the rel attribute that says
04:57 - it's a style sheet and we need to link
04:59 - to a style sheet but we haven't created
05:01 - one yet so over here in the file tree
05:04 - let's create a new directory and name it
05:06 - css
05:08 - now inside the css directory let's go
05:11 - ahead and create a new file named
05:13 - style.css
05:16 - and now we have our stylesheet file and
05:19 - inside of this let's put a p for our
05:22 - paragraph element a curly brace
05:25 - now one return and we'll go ahead and
05:28 - put a style here this will be a rule
05:31 - actually or a declaration if you will
05:33 - and let's just change the color of our
05:36 - paragraph and let's make it purple and
05:39 - end with a semicolon and save this is a
05:42 - very very simple style sheet right now
05:45 - and now back in our html we can go ahead
05:48 - and link to that style sheet by putting
05:50 - in the css directory and you can see
05:52 - visual studio code wants to help us out
05:54 - so we'll click on that and then it knows
05:57 - the style.css is in there so we can
05:59 - click on that
06:00 - and now that should link
06:02 - you may see
06:04 - some older code that has a type
06:07 - attribute here
06:08 - but
06:09 - mozilla now points out that this is no
06:12 - longer required and is actually kind of
06:14 - frowned upon so we do not want to
06:16 - include that but you may see older code
06:19 - with it it doesn't break the code if
06:21 - it's there it's just
06:22 - not the modern way of doing that so
06:25 - there is our link to the style sheet and
06:27 - now one thing we haven't done yet is add
06:30 - the live server extension so if you
06:32 - don't have that click on the extension
06:35 - icon over here on the left and then in
06:37 - the search extensions type live
06:40 - server
06:41 - and when those options come up we should
06:43 - see one from ritwik day and you want to
06:46 - select that and then you want to go
06:49 - ahead and install
06:51 - and i already have it installed so i
06:53 - don't need to do that but this will let
06:55 - us not only launch our html and css but
06:59 - anytime we make a change in save it will
07:01 - immediately reload just as if it's on a
07:03 - web server you don't want to load these
07:05 - files into your browser directly from
07:08 - your hard drive you want to
07:10 - really kind of have a development
07:11 - environment that simulates a web server
07:14 - and that's what live server does for you
07:15 - so go ahead and install that
07:18 - once you have that installed and i'll
07:20 - click on the explore icon over here to
07:22 - look at our files again but now you'll
07:24 - have some options in visual studio code
07:26 - you could click go live down here at the
07:28 - bottom right
07:29 - and it says
07:30 - click to run live server when we mouse
07:32 - over or you can right click just in the
07:35 - file and you can choose open with live
07:37 - server and i'll go ahead and do that now
07:39 - and there we have our very very basic
07:43 - web page but we can see it is super
07:45 - small i don't know if you can even see
07:47 - that i would have to zoom in and enlarge
07:49 - that but it says i'm learning css so we
07:52 - could add another style in our style
07:54 - sheet
07:55 - and let's just go ahead and put it above
07:58 - the color style and i will put font dash
08:01 - size and i'm going to change this to 64
08:04 - pixels it should be pretty big now so
08:06 - i'll save
08:08 - resize visual studio code
08:10 - much better so we've got a purple i'm
08:12 - learning css with large font now let's
08:16 - go back to the html file
08:18 - and i'm going to expand visual studio
08:21 - code again so we have a little more room
08:22 - now in this head section
08:24 - directly underneath our link element i'm
08:28 - going to type style and press tab and
08:30 - there is such a thing as a style element
08:33 - now inside of the style element here
08:36 - between the opening and closing tags
08:38 - that is we can write css so i'm also
08:42 - going to style a paragraph
08:44 - and here i'm going to put the color
08:47 - as lime green
08:49 - now i'll save this and let's go back and
08:51 - look at our page and see what we've got
08:54 - now we have i'm learning css and it is
08:57 - lime green notice it's still large font
09:00 - though so the other style sheet i'll
09:02 - press ctrl b to hide the file tree for a
09:05 - second so we can see this better the
09:06 - other style sheet is still being applied
09:10 - but we have overwritten the purple rule
09:12 - for the color with green
09:15 - now does one take precedent over the
09:17 - other does the
09:19 - internal style sheet which is what we
09:21 - just built right here with the style
09:23 - elements that's the internal does it
09:25 - take precedence over the external
09:28 - not really
09:29 - just it's interpreted as another style
09:32 - sheet either way now normally i use
09:34 - external style sheets but there is no
09:37 - difference as far as the browser is
09:39 - concerned what is the different is the
09:41 - cascade or the order in which they're
09:44 - red so it read this style sheet
09:47 - first
09:48 - and then it read this one last so the
09:51 - last color that it saw for our paragraph
09:53 - was lime green we can further highlight
09:56 - that
09:56 - by highlighting our link element and
09:59 - cutting it with ctrl x
10:02 - and then pasting it with ctrl v
10:04 - underneath
10:05 - our internal style sheet
10:08 - and so now our external style sheet is
10:10 - read last and i will save
10:13 - and now we've got a purple i'm learning
10:15 - css again and the final way to apply css
10:19 - inside an html document is with inline
10:22 - css this is really not the way to do it
10:25 - though you really want to avoid inline
10:28 - css if you can i just want to
10:30 - demonstrate what it is because you can
10:32 - use style as an attribute
10:34 - and now we don't need a selector which
10:37 - is what the p is up here this is
10:39 - selecting the paragraph we already know
10:41 - it's being applied to a paragraph so
10:43 - here i'll just say color
10:45 - and i'm going to say blue i really don't
10:47 - need a semicolon because i don't have
10:49 - any other declaration here if i had more
10:51 - than one i'd have a semicolon in between
10:53 - now if i save this
10:56 - notice it's now blue over here
10:58 - this does take precedent over either
11:01 - type of style sheet internal or external
11:03 - because it's applied directly to the
11:05 - element itself but what we want is a
11:08 - separation of concerns so the best way
11:12 - the way that is commonly
11:13 - used is the external style sheet it
11:17 - keeps your css
11:19 - code completely separate from your html
11:22 - okay let's remove our inline styling
11:24 - from the paragraph
11:26 - and let's also remove the style element
11:29 - because we will be focusing on using
11:31 - external style sheets for the rest of
11:33 - the course so we can save that
11:36 - and let's go ahead and scroll up to the
11:38 - top of the html document and now let's
11:40 - move over to the external style sheet
11:43 - and then in the browser notice of course
11:46 - this is already back to purple now
11:48 - let's go to another mdn page that's the
11:50 - mozilla developer network and we get an
11:53 - anatomy of a css rule set so let's break
11:56 - this down and we can look at our own
11:58 - example to the left as well but we have
12:00 - our selector that means we're selecting
12:02 - the paragraph or paragraphs if we had
12:05 - more than one
12:07 - now we have a property and a property
12:09 - value so the property being the color
12:11 - the value being read
12:13 - and then the declaration is the property
12:16 - and the property value together so we
12:18 - have the same thing over here just color
12:20 - and purple and the full declaration is
12:23 - both now it says the whole structure is
12:25 - called a rule set but also notice it
12:28 - says the term rule set is often referred
12:30 - to just as rule so you could consider
12:33 - this a css
12:35 - rule if you will okay let's go back to
12:38 - our html document in the browser and
12:40 - something i need to note here about css
12:44 - is it's using the american spelling of
12:47 - color there could be other english words
12:49 - that are different but notice how visual
12:50 - studio code knows there's already a
12:52 - problem here and if i save this
12:55 - purple is not applied to our document
12:57 - it's back to the default black text so
13:00 - we need to spell things
13:02 - with american english i guess is the
13:04 - best way to put it our dialect
13:06 - without the u in color and there could
13:09 - be some other words as well but notice
13:11 - we didn't get an error or anything if we
13:14 - do put in color the wrong way
13:16 - it's just ignored and that is something
13:19 - about css
13:20 - and sometimes it's hard to detect when
13:22 - you've done something wrong because
13:24 - you're not getting an error thrown like
13:26 - programming languages the rule or the
13:28 - declaration i should say not the entire
13:31 - rule but this declaration is just being
13:33 - ignored because we didn't spell color in
13:36 - the way css expects so if i change that
13:39 - back once again we have purple text now
13:41 - one way we can detect problems in our
13:44 - css is to validate our css files so
13:49 - let's pull up a page that will do that
13:51 - and we go to css validation service from
13:55 - w3c that's the world wide web consortium
13:59 - and we want to choose file by upload
14:02 - where we can select the css
14:05 - style.css from our folder and you need
14:07 - to choose file and then browse to the
14:10 - folder where your css is which should be
14:13 - in the folder you created and then if
14:14 - you created a css folder it would be in
14:17 - there here's my style.css so i'll select
14:20 - it and choose open
14:22 - and now we'll just click the check
14:24 - button and this page will show us if
14:26 - there are any errors but if there's not
14:28 - you should get this congratulations no
14:30 - error found message just like i did so i
14:33 - will put a link to this css validator in
14:36 - the description of the video or with the
14:38 - resources and then in the next video
14:41 - we're going to learn all about css
14:43 - selectors
14:45 - today we're working with css selectors
14:47 - and there are three levels of selectors
14:49 - that are the most common now i've got
14:51 - visual studio code open here on the left
14:54 - and i have a blank style.css file that
14:57 - is linked to our html file and the html
15:01 - file is open in chrome already i'm using
15:03 - the live server extension with visual
15:05 - studio code so we will instantly see our
15:07 - changes in our page
15:09 - the structure of the html page has an h1
15:13 - heading and after that we have three
15:16 - articles each article has its own h2
15:19 - heading and paragraph inside
15:21 - so as we talk about the three different
15:23 - types of basic selectors in css let's
15:26 - start with the most common which is an
15:29 - element selector and i'm going to select
15:31 - the body element now there is only one
15:34 - body element per page but we have some
15:36 - very small font and i will get into more
15:40 - properties for each of the declarations
15:42 - as we go through tutorials but i'm going
15:44 - to use a few today just for examples
15:47 - and i'm going to set the font size to 22
15:49 - pixels and save now we can see this made
15:53 - all of our text on our page larger and
15:56 - this is due to inheritance so these
15:58 - other elements actually inherited from
16:01 - the body element and we'll get more into
16:04 - inheritance in just a little bit too but
16:06 - this
16:07 - in itself is an element selector now
16:10 - there's only one body element per page
16:12 - but say i went ahead and selected the
16:15 - paragraph using the paragraph selector
16:18 - and now i can set the color of the text
16:21 - and i'm going to set the color of the
16:22 - text to purple
16:24 - and i'll save and notice it changed all
16:27 - three of our paragraphs to purple so
16:30 - element selectors select all of the
16:32 - elements of that type so just specifying
16:35 - p for the paragraph element selects
16:39 - all paragraph elements and now the
16:41 - second type of selector is a class and
16:43 - so let's define a class selector i'm
16:46 - going to call this class gray
16:48 - note that a class starts with a period
16:50 - before whatever you name the class and
16:52 - you can choose the name of the class but
16:54 - make sure it makes sense and remember
16:57 - your writing code for others to read not
16:59 - just yourself okay inside of this i'm
17:01 - going to set the color to gray that
17:04 - makes sense to me
17:05 - now i'll save that and notice paragraphs
17:09 - 2 and 3 turn the gray color and if we
17:12 - look at our html which is a little
17:14 - crowded over here but if i scroll down
17:16 - to the second paragraph here we have a
17:19 - class
17:20 - set equal to gray on that paragraph
17:23 - likewise we have a class set equal to
17:26 - gray on the third paragraph as well so
17:29 - classes can be used more than once and
17:32 - they're very useful that way you're
17:33 - creating styles that you can apply
17:35 - throughout your project or throughout
17:37 - your page
17:38 - and then they can be reused with more
17:40 - than one element and note classes are
17:42 - more specific than selecting all
17:45 - paragraphs for example and because
17:48 - they're more specific they overruled the
17:50 - purple setting that we had for all
17:52 - paragraphs and now gray applied to these
17:55 - last two paragraphs here and we will
17:58 - also discuss specificity in more detail
18:00 - in just a few minutes as well now
18:02 - classes are the most common type of
18:04 - selector with css
18:06 - but the more specific
18:08 - selector yet is an id selector and i
18:12 - have an id named second an id attribute
18:15 - inside of the html and here i'm going to
18:18 - apply a font style and we'll set that to
18:21 - italic
18:23 - and i like to have a space afterwards
18:25 - now i'll save and notice the second
18:27 - paragraph
18:28 - became italic as well so it specifically
18:32 - addressed the second paragraph now ids
18:36 - should only exist once in an html
18:39 - document they should be unique in other
18:41 - words however it is not good practice to
18:44 - really use ids inside of your css now it
18:48 - will validate your code has no problem
18:51 - using an id
18:53 - however typically you should use classes
18:56 - and sometimes element selectors but
18:59 - rarely if ever should you use an id
19:01 - selector inside of your css they do have
19:04 - other valid uses if you remember from
19:06 - html linking a form input back to a
19:10 - label element and then as you learn
19:12 - javascript you may have some other uses
19:14 - for id attributes as well but we try to
19:17 - keep them out of css and now that we've
19:20 - covered the three basic types of
19:21 - selectors let's discuss what you can do
19:24 - with some of them just a little bit more
19:26 - so let's have our h1 here and let's set
19:29 - the color for the h1 to blue
19:32 - and we'll save and we can see it only
19:34 - selected the h1 we only have one h1 on
19:37 - our page
19:38 - but we can also group selectors so let's
19:41 - set all of the h2s as well to blue and
19:44 - you can see i just put a comma between
19:47 - and then
19:48 - this declaration or this rule set the
19:50 - entire rule set if we had more rules in
19:52 - here more declarations i should say
19:55 - it would apply to both the h1 and the h2
19:58 - so you can go ahead and group selectors
20:02 - with a comma in between now notice what
20:04 - happens if i remove the comma and save
20:06 - this declaration or our full rule set
20:10 - especially if we had more declarations
20:12 - none of it would apply to the h1 or the
20:14 - h2 now what's going on here this
20:16 - selector is looking for any h2s that
20:20 - exist inside of an h1 it's not looking
20:23 - for an h1 or an h2 it's only looking for
20:26 - h2s that exist or are nested if you will
20:30 - inside of an h1 so that's why that
20:33 - didn't work that may be useful to know
20:35 - in the future but what we need is a
20:38 - comma in between and then we can select
20:40 - both the h1 and all h2s on the page with
20:44 - this rule set so let's look at an
20:46 - example of where we would select an
20:48 - element that's inside another element so
20:51 - let's start with our paragraph elements
20:52 - again and now we'll look for any span
20:55 - element inside
20:57 - any paragraph element and here let's set
21:00 - a couple of values so we'll set
21:02 - text dash
21:04 - transform
21:05 - and i'm going to choose
21:07 - uppercase here
21:09 - and then i'm also going to set a
21:11 - background
21:13 - color
21:15 - and let's set this to gold so it stands
21:17 - out we're essentially highlighting what
21:19 - we want to see and now we can see
21:22 - we have set this word whatever this word
21:25 - is this is latin from our lorem epson
21:28 - we've set it to uppercase and same with
21:30 - epsom and then we also set gold behind
21:34 - each of these words with this however
21:36 - this doesn't make a lot of sense this is
21:39 - a much better example of where we should
21:41 - use a class we might name our class
21:45 - something like
21:46 - highlight
21:48 - and then apply that to our span elements
21:52 - inside
21:53 - of the index so we've come in here and
21:57 - find our span
21:59 - and i'll select both of these
22:02 - and then
22:03 - we can add the class highlight
22:10 - and that makes it reusable if i spell
22:12 - highlight correctly there we go and save
22:15 - and now it's once again applied but this
22:17 - would keep our css much more organized
22:21 - and actually more reusable it's more
22:23 - flexible this way because we might have
22:25 - some span elements doing other things
22:28 - that we didn't want to apply
22:30 - this rule set to and now one last
22:33 - selector to discuss it exists we
22:35 - wouldn't use it that often but it is the
22:38 - universal selector and this means it's
22:41 - selecting everything on the page you
22:44 - typically only see this for what is
22:46 - called a css reset that we will cover in
22:48 - the future but just so you know it
22:50 - exists this selects everything so let's
22:54 - think about what we could apply here
22:56 - that would be applicable to everything
22:59 - so let's change the font
23:01 - and we'll set it to this mono space font
23:04 - and save and now you can see all of the
23:06 - text on the page
23:08 - turned into this monospace font instead
23:11 - of the default font that we had now this
23:13 - is not how we would use this again in
23:15 - the future we'll learn about a css reset
23:18 - that would use that selector but
23:20 - typically that's the only time you see
23:22 - that universal selector used okay let's
23:25 - discuss the cascade
23:27 - css is an acronym for cascading style
23:30 - sheets and essentially that means css
23:32 - works like a waterfall it works from the
23:35 - top down and that means if i were to put
23:38 - in another definition i'll just copy
23:40 - this down for paragraph and where we
23:43 - have
23:43 - the color purple on our first paragraph
23:46 - it really applies to all but then of
23:48 - course the gray class overrides that on
23:51 - the final two but if i came here and
23:54 - said
23:55 - red
23:56 - instead of purple notice how this
23:58 - paragraph
24:00 - turns red and that's because
24:02 - it read this rule set last so first css
24:07 - looked at this at the top it starts at
24:09 - the top and it works its way down and so
24:11 - it read this last essentially this is
24:14 - the last rule and that means whichever
24:17 - definition it reads
24:19 - at the last will be applied now
24:22 - specificity can override this and that's
24:24 - where we talked about elements and then
24:27 - classes classes are more specific for
24:30 - example
24:31 - than just an element selector so we have
24:33 - our class here that has the color gray
24:36 - and it is overriding the red now if we
24:39 - remove this class and we save
24:42 - now they're all red but even though
24:45 - we're looking at the cascade and
24:46 - starting from the top down even if i put
24:49 - this class above
24:51 - the paragraph selectors and save
24:54 - it still applies to these last two
24:56 - paragraphs because it has more
24:58 - specificity
25:00 - than an element selector and the element
25:03 - selector here purple of course is
25:06 - overridden
25:07 - with the last rule being the element
25:09 - selector here for red so we start out
25:11 - with a red paragraph and it's really
25:14 - applied to all paragraphs except
25:16 - that then
25:17 - css sees there is a gray class applied
25:21 - to the second and third paragraphs and
25:23 - that has more specificity so it
25:26 - overrules whatever is set by the element
25:29 - selector now a problem you can have is
25:32 - when you have a large css file and maybe
25:34 - you have set this gray class on these
25:37 - paragraphs and later on let's say you're
25:40 - way down a couple of hundred lines and
25:43 - you're setting a color on a paragraph
25:45 - and you can't understand why it's not
25:47 - being applied so let's go ahead and
25:50 - expand chrome here and you can right
25:53 - click and choose
25:54 - inspect and once you inspect your page
25:58 - then you can look at the different
26:00 - classes and css rules that are applied
26:03 - so here's a good example of that we have
26:05 - got our third paragraph highlighted up
26:07 - here in the elements tab
26:09 - and then we're looking at the styles and
26:12 - we can see we've got paragraph rules
26:15 - here these element selectors but color
26:17 - purple is crossed out and then color red
26:20 - is crossed out so css knows these rule
26:23 - sets exist for paragraph but it also
26:26 - knows it should follow what is the most
26:28 - specific using the rules of specificity
26:31 - so here we have a color gray that is
26:34 - being applied so you can see
26:36 - sometimes when you're struggling with
26:38 - your css and you have written a rule and
26:40 - you're not understanding why it is not
26:43 - being applied you should inspect your
26:45 - code with dev tools and once again you
26:47 - right click and choose inspect to do
26:50 - that and then just go to the correct
26:52 - tabs elements
26:53 - highlight the element that you want look
26:55 - at the styles and you'll see how it is
26:58 - being read by css in the browser or how
27:01 - the browser is reading your css and then
27:03 - see how those rule sets are being
27:05 - applied which ones are being overridden
27:08 - and which ones are actually being
27:09 - applied okay i'm going to close that out
27:11 - now and i'll resize chrome so i'll come
27:14 - back over here to our style and as we go
27:16 - to the top let's talk about inheritance
27:18 - as i got into specificity a little bit
27:21 - already but inheritance
27:23 - that is where
27:24 - another element inherits the settings
27:28 - from or the properties from its parent
27:31 - element so the body element is parent to
27:35 - every other element here and so when we
27:37 - set the font size all of these other
27:39 - elements inherited that font size now
27:43 - typically anything related to font or
27:45 - typography
27:46 - is inherited and that can include things
27:49 - like color line height alignment all
27:52 - sorts of settings dealing with the font
27:54 - and the typography however any
27:56 - properties that are not related to those
27:58 - things
27:59 - are not inherited and i know that'll
28:01 - just take a little bit of getting used
28:03 - to as you learn more about css so for
28:06 - example this font size was inherited but
28:09 - another setting we could put is a border
28:11 - and i'll put three pixels so it's easy
28:13 - to see solid black and i'll save this
28:17 - now notice the border only went around
28:20 - the body element it didn't apply to all
28:23 - the other elements inside of the body so
28:25 - that's an example of something that is
28:28 - not inherited and i'll go ahead and
28:30 - remove that again now we did briefly
28:32 - talk about that universal selector let
28:34 - me go back to that and show you that
28:36 - this is not inheritance this is actually
28:39 - selecting all elements so here if i said
28:43 - a border
28:44 - and i'll put one pixel solid red
28:47 - and save notice it does apply to all
28:50 - elements that's because we selected all
28:52 - the elements here so
28:54 - setting something here with the
28:56 - universal selector is not going to cause
29:00 - inheritance really because it's actually
29:02 - selecting all the elements itself okay
29:05 - i'll remove the universal selector again
29:07 - but getting back to just the inheritance
29:09 - overall this can be very handy because
29:12 - it keeps us from writing repeated code
29:15 - in other words it keeps our code dry
29:18 - which is an acronym that stands for
29:19 - don't repeat yourself so we want to
29:21 - write less code and be more efficient
29:24 - and inheritance helps us do that now
29:26 - some things are not inherited like i
29:28 - mentioned the border would be one of
29:30 - those also form elements do not inherit
29:33 - say the font size and other typography
29:36 - settings so it wouldn't be that unusual
29:39 - to see something like this that would
29:41 - take a button and let's say an input
29:45 - a text area and let me see if i'm
29:48 - leaving anything else out maybe a select
29:51 - anything like that and we might see then
29:53 - font and set it to inherit and that
29:57 - would go ahead and make those elements
29:59 - inherit the font settings because
30:02 - just a mental note that form elements do
30:04 - not typically inherit those font
30:07 - settings but now to take advantage of
30:09 - inheritance and write dry code we can
30:11 - use the body element which appears only
30:14 - once per page or we could use the html
30:16 - element
30:18 - and either would work
30:19 - oftentimes if you're just starting out
30:22 - and just remembering it might be best to
30:23 - just use the body
30:25 - oftentimes i use the html element
30:28 - because once again the inheritance
30:30 - applies there so we can save here
30:32 - without see the difference now i'll go
30:34 - ahead and apply it in html and once
30:37 - again
30:37 - we have the larger font because there
30:40 - are for me at least some specific
30:42 - settings for the body and i like to see
30:45 - those separate so i often put all of my
30:47 - font settings in the html selector but
30:50 - again either would work one other
30:53 - element selector that i do use at times
30:56 - is the main element it is a semantic
30:59 - element and it should appear only once
31:00 - per page but then you have to be aware
31:02 - that you're only selecting the things
31:05 - inside of the main element so if we look
31:07 - at our page i've got the h1 inside of a
31:10 - header element and not inside of the
31:12 - main element so if i were to change
31:15 - the font family inside of our main
31:17 - selector and i changed this to mono
31:20 - space which is easy to see the change
31:22 - with
31:23 - go ahead and save you can see
31:26 - all of the articles switched to mono
31:28 - space but our h1 heading is still using
31:30 - the other font okay coming back to
31:33 - specificity just something we talked
31:35 - about so a quick review that element
31:37 - selector is the least specific and then
31:40 - a class selector is more specific and
31:43 - then although we don't want to use them
31:45 - in our css an id selector is even more
31:48 - specific than that sometimes something's
31:51 - not working out and you're wanting to
31:53 - figure out why it's not working out or
31:55 - you just can't figure it out and you get
31:57 - frustrated i'm going to show you
31:59 - something that will work but i'm going
32:00 - to recommend that you do not use it it's
32:03 - kind of the nuclear option if you will
32:06 - and it's to put an exclamation mark and
32:08 - put important now see how red should be
32:11 - applied to this first paragraph but with
32:14 - the important flag right here after our
32:16 - purple setting and now i save
32:19 - notice what happened
32:21 - it turned the first paragraph purple
32:23 - notice what else happened it also turned
32:25 - the second paragraph and the third
32:27 - paragraph purple
32:28 - now why is that well this important
32:31 - essentially ruins everything else it
32:33 - overrides everything so
32:36 - really when you see it in code it's kind
32:38 - of an indication that it's not well
32:40 - organized or it's sloppy there's only a
32:42 - few reasons you would really want to use
32:45 - this and i feel i mean i'm hesitant to
32:47 - even show it because i feel like
32:49 - beginners could abuse this however
32:52 - you'll see it somewhere i just want you
32:53 - to know it exists
32:55 - don't use it don't use it you need to
32:57 - learn how to organize your code and
33:00 - apply it correctly and only after you've
33:03 - learned css well enough to understand
33:06 - when to use that important flag that's
33:09 - the only time you should use it you
33:11 - should really not give up the struggle
33:13 - you will learn more by struggling and
33:15 - learning how to apply these selectors in
33:18 - the proper way without using that
33:20 - important flag i do want to show you one
33:22 - thing that will help you learn and that
33:24 - is the specificity calculator and i will
33:27 - give a link to this in the resources you
33:29 - can see they've got some basic values
33:31 - here that are already fairly complicated
33:34 - but you can zero these out and you can
33:36 - compare two selectors to see why they
33:38 - are working and why they aren't working
33:41 - or why one overrules the other you can
33:43 - see an element selector here for an h2
33:46 - has a score of zero zero one
33:49 - but if i put in my class of gray it has
33:52 - a score of 0 1 0 in other words 10
33:55 - which is a higher score
33:57 - than 1 so the class overrules
34:01 - the element selector and likewise if we
34:03 - put in an id selector like we had second
34:07 - it has a score of 100 over 10 so
34:11 - that is better now you could apply more
34:13 - than one class for example to an element
34:15 - so let's see what happens if we had a
34:16 - second class and we had our highlight
34:18 - class
34:19 - now
34:20 - this has a score of 20 but it's still
34:22 - not going to be as high as a score of
34:24 - 100 so this specificity calculator will
34:28 - certainly help you understand why one
34:30 - rule is being applied or why one
34:32 - selector i should say is being applied
34:34 - over another
34:36 - today we're learning about css colors
34:38 - i've got visual studio code here on the
34:40 - left and our web page on the right it is
34:43 - a basic web page and i'm using the live
34:45 - server extension so when we make changes
34:47 - in our css and save we'll instantly see
34:50 - the changes here in our page i've got an
34:52 - h1 heading and then i've got three
34:55 - articles and each article has its own h2
34:58 - heading and a paragraph
35:00 - okay and that's really all there is you
35:02 - can see it's got the default colors a
35:04 - white background and black text and
35:06 - that's usually what browsers default to
35:08 - i've got just a few declarations over
35:11 - here for our page just to make it
35:13 - readable i've got a larger font size
35:16 - i've declared the font family and line
35:18 - height and we'll learn more about those
35:20 - when we get to typography in this series
35:22 - right now i want to show you just how to
35:24 - set a background color first
35:27 - and the first declaration we'll look at
35:29 - is setting background dash color and
35:31 - then notice visual studio code instantly
35:34 - wants to help us it pops up a list of
35:37 - color names and there are 140 color
35:40 - names available in html and visual
35:42 - studio code recognizes all these names
35:44 - and notice it's going alphabetical so if
35:47 - i type something like the letter p
35:49 - it suddenly shows us all of the color
35:51 - names that start with the letter p
35:54 - and so on so we can just pick any one of
35:56 - those i'm just going to go ahead and
35:58 - pick something like blue and i'll go
36:01 - ahead and save
36:02 - and you can see visual studio code also
36:04 - shows us a little square of blue beside
36:07 - the name blue
36:08 - and now if we look at the page it has a
36:10 - blue background now that's not nearly as
36:12 - legible because we also have a dark font
36:15 - so we also have to consider the contrast
36:18 - when we pick colors to make it legible
36:20 - and readable for our viewers and it also
36:23 - needs to be accessible and there are
36:26 - contrast ratios that are specified and
36:28 - we'll look more at that here in the near
36:30 - future
36:31 - right now besides just setting the
36:33 - background color with the background
36:35 - dash color
36:37 - declaration we can also go ahead and
36:40 - just say background that's shorthand and
36:42 - it also allows us to set other
36:44 - properties that we won't learn about
36:45 - today but we can just set a color by
36:48 - saying background and that's often the
36:50 - case because it's shorter to type than
36:52 - background dash color so you'll see this
36:54 - often
36:55 - instead of blue let's change our
36:57 - background color to an interesting color
36:59 - name i like papaya whip so i'll save and
37:03 - that's much easier to read as well so
37:06 - our dark text looks good on this
37:08 - background okay now that we know how to
37:10 - set a background color let's change our
37:13 - font color as well and we do that just
37:15 - with the color property so in the
37:18 - declaration we can once again name a
37:20 - color so i could just say black
37:23 - and that looks okay let's see if there's
37:25 - a dark color yep a dark blue let's see
37:28 - how that looks on top of our papaya whip
37:30 - background
37:31 - well not too bad it is definitely
37:33 - legible so we have determined two
37:36 - different color names and we chose those
37:39 - through visual studio code there the
37:40 - color palette just popped up and we'll
37:42 - go over that in a minute too but this is
37:44 - where you'll typically see color set
37:46 - background and font color and you can
37:49 - set the background color to a lot of
37:51 - different elements and we often have
37:53 - fonts on top of those elements or inside
37:56 - of the elements but on top of those
37:57 - colors now let's discuss another way to
38:00 - set colors instead of color names we
38:02 - know we can look for color names and
38:04 - visual studio code will help us
38:06 - also we can use rgb which stands for red
38:09 - green blue
38:11 - and then we put parentheses and now this
38:13 - takes three values a red value and the
38:16 - max value is 255
38:18 - then a green value
38:20 - and a blue value notice i put zero for
38:22 - both of those so this is all red and you
38:24 - can see visual studio code even tells us
38:27 - it's going to be red before we save our
38:29 - file if i go ahead and save now all of
38:32 - our text turned red
38:34 - likewise i could change this and say no
38:36 - red all green and no blue
38:40 - and we have green text and that looks
38:42 - absolutely horrible on top of that
38:43 - background let's try blue now and there
38:46 - we have blue text on top of the
38:47 - background which is okay if we wanted
38:50 - black we would go back to
38:52 - all zeros and likewise if we wanted
38:54 - white we would have 255 for each value
38:57 - now as we previously learned about the
38:59 - cascade we can go ahead and define a
39:02 - color of text on the body but then we
39:05 - can override it inside of some of the
39:07 - elements so let's say our paragraphs
39:09 - here and we want to override that with a
39:12 - different color so maybe we want
39:14 - a blue text for the paragraphs and we
39:17 - can put that here and style all of our
39:19 - paragraphs now with blue text but i
39:21 - don't think that looks the greatest i'm
39:22 - going to go back to black but then also
39:25 - there is something called rgba which
39:28 - adds an alpha channel and that alpha
39:30 - channel guides the transparency now
39:33 - instead of 0 to 255 it has a value from
39:36 - 0 to 1.
39:39 - 1 is just like the alpha channel wasn't
39:41 - there that's normal and so that would be
39:43 - the full black color and it matches the
39:46 - headings that we have on the page so you
39:48 - don't see a difference
39:49 - but 0 would make it completely
39:51 - transparent and all of our paragraphs
39:54 - have now disappeared however we could
39:56 - put it at fifty percent
39:58 - and we should see the difference so the
40:00 - paragraphs are not as dark as the
40:02 - headings because they are fifty percent
40:04 - transparent now that we've looked at rgb
40:07 - and rgba let's go ahead and look at
40:10 - hexadecimal which is a common way to
40:12 - specify colors here the color palette
40:14 - keeps wanting to help me so we will be
40:16 - using that very soon hexadecimal also
40:19 - works like rgb and it has its own way of
40:23 - coding the values though it goes from 0
40:26 - to 9 and then also uses letters a
40:30 - through f
40:31 - and now 0 just like we learned with rgb
40:35 - is the absence of color so six zeros is
40:39 - once again black and you'll notice our
40:41 - paragraph text is totally black
40:44 - likewise the highest value being the
40:47 - letter f
40:48 - that is full red green and blue and so
40:51 - now we have white paragraphs because we
40:54 - set those all the way to the highest
40:56 - value so two fs in the beginning
40:59 - position
41:00 - means red then zero green
41:02 - and zero blue and we should have a red
41:06 - paragraph
41:07 - and we do likewise we could say two
41:09 - zeros two f's and two zeros
41:12 - and we get green
41:14 - and finally if we did four zeros and two
41:17 - f's
41:18 - it should be blue so we can kind of code
41:22 - those in the same way once you learn hex
41:24 - now if you noticed earlier when i was
41:26 - typing color names
41:28 - like dark blue and everything else here
41:31 - that starts with dark
41:32 - look at the hex codes over here to the
41:34 - right visual studio code is already
41:36 - helping show you all the different
41:38 - hexadecimal codes for these
41:40 - so we can of course get those codes by
41:43 - typing color names if we want the code
41:46 - of a name
41:47 - but there are many more colors than
41:49 - there are color names and you can really
41:51 - expand your palette by using rgb or hex
41:54 - codes now we can also type shorthand
41:57 - when the color codes match so two zeros
42:00 - two zeros and two zeros is black but it
42:04 - could be represented just by saying zero
42:06 - zero zero
42:08 - because each pair matched likewise
42:12 - two f's two f's and two f's is white so
42:15 - we could just say fff and each single f
42:19 - represents a pair
42:21 - so if we had
42:22 - two f's two zeros and two zeros for red
42:26 - we could just say f zero zero and we
42:30 - still have red so our shorthand for
42:32 - green would be 0f0
42:35 - and then our shorthand for blue would be
42:37 - 0 0
42:38 - f but they have to be pairs so a hex
42:41 - code like 80 80 80
42:44 - doesn't have shorthand it's gray but
42:47 - the 8 0 isn't a pair so it's not a 0 0
42:50 - or an 8 8 so you can't really do a
42:53 - shorthand for a hex code like this so
42:56 - not all hex codes have shorthands just
42:58 - the ones that have
42:59 - pairs for the red green and blue values
43:02 - but i can save this and we can see kind
43:04 - of a dark gray color here as well so
43:07 - those are the ways to provide hex values
43:10 - okay let's look at the color palette the
43:12 - visual studio code has had popping up
43:14 - every now and then all you have to do is
43:16 - mouse over the little color square and
43:18 - we get a color palette now when i grab
43:20 - the circle and drag it around notice
43:22 - what it's doing it's giving us all these
43:25 - different hex codes up at the top
43:27 - and here if i come all the way to the
43:29 - bottom right you can see it's all black
43:31 - all the way to the top right it's red
43:34 - and that's because we have our hue over
43:36 - here set to red as well but we can pull
43:38 - this down into the blues
43:40 - and we can get different colors that way
43:42 - as well then we could drag this around
43:45 - and if you click the bar at the top you
43:47 - can switch this to hsl which we haven't
43:50 - covered yet and there's rgb as well so
43:53 - you can go through those different
43:54 - values i'll leave it on rgb here and we
43:57 - can pull
43:58 - down our transparency and it immediately
44:01 - goes to rgba notice we have that alpha
44:04 - channel now so i'm pulling this down and
44:06 - we're setting a transparent value on
44:08 - there as well so now
44:10 - when i leave it there and go back to
44:12 - visual studio code it's already changed
44:14 - our code to represent that rgba value
44:18 - and i can save our file and now that is
44:21 - the color of our paragraphs now that's a
44:23 - little light so i want to go back
44:25 - and i probably don't want it to be that
44:27 - transparent so i could bring this back
44:29 - up here closer to the top and save and
44:32 - now we have a much darker color we would
44:34 - still want to check the contrast on that
44:35 - i'm not sure if there's enough contrast
44:38 - or not and we'll look at a contrast
44:40 - checker in just a few minutes let's go
44:42 - back to the visual studio code color
44:43 - palette and as i talked about hsl here i
44:47 - clicked again and we had hexadecimal i'm
44:49 - going to take this all the way up hsl
44:52 - also has hsla which adds the alpha
44:55 - channel but hsl stands for hue
44:58 - saturation and lightness so i'm going to
45:01 - pull this over here kind of to the
45:03 - middle
45:04 - and that looks good and there we go
45:08 - and i'll take this all the way to the
45:09 - top so we're back to zero there for red
45:12 - and overall i'll maybe try this in the
45:14 - top corner there we go that's what i
45:16 - want so we've got zero 100 percent
45:19 - and 50 50
45:22 - means it's right in the middle for
45:23 - lightness so there's 50 percent more
45:26 - lightness available or there's 50 we
45:28 - could take away 100 percent would be
45:31 - white and 0 here in the third value
45:34 - would be black
45:35 - likewise
45:36 - 100 percent here for saturation gives us
45:40 - the full color and 0
45:42 - gives us gray if i can pull this in here
45:45 - we get the color gray no matter what
45:48 - once we get down to fifty percent here
45:50 - there we go fifty percent is totally
45:53 - gray
45:54 - and then if we were at a hundred percent
45:55 - there on the right that's white
45:58 - and zero percent
46:00 - that's black so we want to be right in
46:02 - the middle which would give us the gray
46:04 - there but likewise then we don't have
46:06 - the saturation so we'll come back across
46:09 - here to the right
46:11 - and try to get back up to 100 in the
46:14 - middle and 50 percent there that went
46:16 - away and now the zero we have here for
46:19 - the hue well that's represented over
46:20 - here on the right with this slider
46:22 - notice at the top and the bottom we have
46:24 - red
46:25 - and the max value here is 360. and that
46:29 - means this is usually a circle it's
46:31 - usually represented as a color wheel you
46:33 - may have heard of a color wheel before
46:35 - and we can drag this
46:37 - all through the different hues so
46:40 - we get all the different colors there
46:42 - and once we get to about 360 we're back
46:44 - to red it went back to zero so you can
46:47 - see that takes through all the hues all
46:49 - the different color ranges we could have
46:51 - there so hue
46:53 - saturation and lightness and this is
46:55 - worth playing around with as well and as
46:58 - you get a little bit more advanced and
46:59 - learn about css variables you may decide
47:02 - you really like working with hsl but
47:04 - most beginners start out working with
47:07 - hexadecimal rgb and color names so it
47:10 - doesn't hurt to learn about any of those
47:12 - let's switch this back over to rgb
47:15 - switch it back to hexadecimal or you
47:17 - could just switch it back to a good old
47:19 - color name
47:20 - like red although red is not going to
47:23 - look that great
47:24 - as far as our page goes so i want to
47:27 - take this over and pick a color i like
47:29 - to use which is not quite
47:32 - solid black but it is a dark color and
47:34 - there we go for the paragraphs i used
47:36 - use 333 which as you know is the same as
47:39 - saying
47:40 - 3 3 3 3 3
47:42 - 3 and we save and we still have the same
47:45 - color it's just that shortcut can be
47:47 - used for those pairs okay we've covered
47:50 - a lot of different ways to pick colors
47:52 - and we've covered the visual studio code
47:55 - color picker here that really helps us
47:57 - out but we also need to look at some
47:59 - tools so let's look at the tools we've
48:02 - got here coolers
48:04 - dot co that's c o o l o r s dot c o this
48:10 - is a great
48:11 - color palette picking tool and you can
48:14 - start the generator and start picking
48:16 - your color palettes as you go here it
48:18 - takes it just a minute to fire up but
48:21 - then you can choose these color palettes
48:23 - or press the space bar to generate all
48:25 - new palettes tell it which color you
48:27 - want to keep and which ones you want to
48:29 - get rid of
48:30 - and then you can just copy these colors
48:32 - here's a copy right here to copy the hex
48:34 - that it shows there
48:36 - and so on so this is a great source for
48:38 - picking colors but what i really like on
48:40 - this site is the contrast checker now i
48:43 - also have the web aim contrast checker
48:47 - this is web accessibility in mind and
48:49 - this is really a great site for checking
48:52 - accessibility features and as much as i
48:54 - like their checker the one on coolers.co
48:58 - is even a little bit better for me so
49:00 - i've got a background i want to go with
49:02 - i'm going to put this hex code in here
49:06 - and now it's dark and now i'm going to
49:08 - put in
49:10 - white for the text color and you can see
49:12 - it checks out a 7.2 which is considered
49:15 - very good and if we scroll down just a
49:18 - little bit it talks about the web
49:20 - content accessibility guidelines so a
49:23 - minimum is a double a minimum contrast
49:26 - and there you want to have a contrast
49:29 - ratio of at least 4.5 to 1 for normal
49:32 - text and you can see we've got 7.42
49:36 - so that is good you want to have 3.1 or
49:39 - 3 to 1 for large text
49:41 - and it shows here we've got 3 stars for
49:43 - large text as well so we're doing good
49:45 - there but a triple a requires at least
49:49 - seven to one and we barely made the cut
49:51 - there with or 7.4 here and then
49:54 - four and a half to one for large text so
49:57 - this will just grade your color contrast
49:59 - for you and make sure it works out so we
50:02 - could go back to our code and check out
50:04 - another one so let's go back to papaya
50:07 - whip and here's the great thing about
50:09 - visual studio code now i can click here
50:12 - find the hex and it changes my papaya
50:14 - whip color name to the hexadecimal code
50:18 - so i'm going to put this in as the
50:20 - background
50:21 - and then for the color i'm going to put
50:24 - in
50:25 - my hex for the 333 and it just changed
50:28 - it to the full hex code but you can see
50:30 - this is great contrast with 11.17
50:34 - and it gives the example of it here up
50:35 - above as well legibility and
50:37 - accessibility are very important
50:39 - considerations as you pick colors for
50:42 - your web page now i'm going to give
50:43 - links to these resources in the
50:45 - description below this video as well and
50:48 - what i suggest you do as a beginner is
50:50 - just play around with the different
50:51 - colors play around with the visual
50:53 - studio code color picker or color
50:55 - palette here as well
50:57 - and just kind of get comfortable with
50:59 - setting colors on your page and of
51:01 - course always come back and check the
51:03 - contrast ratio and make sure you're
51:05 - meeting those minimum requirements for
51:07 - web pages
51:09 - let's move on to css units units
51:11 - determine the size of everything in your
51:13 - page today we're going to cover the most
51:15 - common css units on the left i have
51:18 - visual studio code on the right i have
51:20 - the chrome browser it has an h1 heading
51:23 - on the page and we have one paragraph on
51:26 - our page and we're displaying this page
51:28 - with the live server extension so
51:30 - anytime we make a change and save our
51:32 - css file we'll automatically see the
51:34 - changes over here on the page i'm going
51:36 - to start out by just putting in a
51:37 - paragraph selector
51:39 - and then i'm going to put in the font
51:42 - size
51:43 - and after that without even typing
51:45 - anything look what visual studio code
51:47 - gives us a lot of suggestions there are
51:50 - so many different units we could choose
51:52 - from so today we'll cover only the most
51:55 - popular ones as we don't need to cover
51:57 - all of them just the ones that you'll
51:58 - see and construct your pages with most
52:01 - frequently so i'm not even going to put
52:03 - in a definition right now let's just
52:05 - delete that and switch over to the mdn
52:08 - page for values and units and we can see
52:12 - a chart here of absolute length units
52:15 - and really the only absolute length unit
52:17 - we will use commonly is pixels and you
52:20 - can see here is the equivalency it's one
52:23 - pixel is equal to 196 of an inch and
52:26 - really one pixel as you might guess
52:28 - means one pixel on your screen we
52:30 - abbreviate that with px and i say it's
52:33 - the only absolute value we're going to
52:35 - cover because as mdn says it's really
52:38 - the only value that you will commonly
52:40 - use as far as absolute units go
52:43 - so let's switch back to our page and now
52:46 - here in our css page i'll once again
52:49 - select the paragraph
52:52 - and we can set a absolute size to the
52:55 - font in our paragraph if we want to the
52:58 - default in any browser is usually 16 so
53:01 - if i set it to 16
53:03 - we don't see a change but if i set it to
53:05 - 32
53:07 - we definitely see a change it gets twice
53:09 - as big but i don't usually want to use
53:12 - an absolute value like pixels for a font
53:15 - size and let me show you why
53:17 - normally
53:18 - we have a default browser size as i
53:20 - mentioned that's usually 16 pixels
53:23 - however if i set that on the root
53:25 - element
53:26 - font size
53:28 - 16 pixels we don't see a change here but
53:31 - if i go into my settings in chrome which
53:33 - you can do with the three dots and then
53:35 - choose settings once you launch that
53:38 - you'll be on a settings page and then
53:40 - you can choose appearance
53:42 - you go to a font size user preference
53:45 - and medium is what most are on but
53:47 - there's also other choices from very
53:49 - small to very large i'll choose very
53:51 - large we definitely see a change on the
53:53 - settings page right when i do that back
53:56 - in our document
53:57 - we don't see a change it didn't change
54:00 - at all i can refresh and it won't make
54:02 - any difference it did not change our
54:04 - font size with the user settings and
54:06 - that's because we took that choice away
54:08 - when we said no these absolutely must be
54:11 - 16 pixels here that's our root size but
54:14 - if i delete this
54:16 - and we just let the browser handle the
54:18 - default size
54:19 - instantly all of our font gets bigger
54:21 - and our user settings take over we don't
54:23 - want to take that choice away from the
54:25 - users so we don't want to use an
54:27 - absolute font size such as a pixel
54:30 - setting so i'll go ahead and delete that
54:33 - so where would we want to use pixels in
54:36 - absolute value there are other settings
54:38 - that we might want an absolute value for
54:40 - so i'll select the h1 that i have here
54:43 - and i'm going to set a border on it and
54:45 - i'll set it to 2 pixels
54:47 - and then just so we can see it better
54:49 - i'll set it to dashed and red so it
54:51 - really stands out and save and now we
54:53 - can see this border around our h1
54:56 - element and we have this absolute value
54:58 - for the pixel width and no matter what
55:01 - happens to the page on a small viewport
55:03 - large viewport whether it's a mobile
55:05 - device
55:06 - or a large desktop screen this will
55:09 - remain as two pixels and that's okay in
55:12 - this instance let's go back to our mdn
55:14 - page
55:15 - and now that we've covered the only
55:16 - pixel size that we were going to cover
55:18 - and that was down here on our pixel
55:20 - chart
55:21 - we're going to now cover percentage and
55:24 - we see that up here in a different chart
55:26 - this is a numbers links and percentages
55:28 - chart here
55:29 - so we're going to use percentage and it
55:31 - says it represents a fraction of some
55:33 - other value so 50 of something else
55:37 - percentages are always relative to
55:40 - another quantity so that's a
55:42 - consideration as well now when we set
55:44 - percentages we wouldn't normally do that
55:47 - with a font size either so let's set a
55:49 - percentage for a width
55:52 - on our h1
55:53 - and now by default an h1 is a block
55:56 - level element and so by default it has a
55:58 - width of 100 so if we do that we're not
56:01 - really changing anything and now it's
56:04 - just 100 percent as expected so let's go
56:07 - ahead and change that it looks at the
56:09 - parent though it's taking up 100 percent
56:11 - of the parents with or whatever was
56:14 - given to it so whatever it has available
56:17 - to it it took up 100
56:19 - and now this is only taking up 50
56:22 - so let's look at the parent for the h1
56:25 - it is inside of a header element so if
56:28 - we take this header element and we set
56:30 - it to a width
56:32 - of 50 percent
56:33 - then we should see a difference and yes
56:36 - it's even smaller so we're taking up
56:39 - only 50 percent of the header element
56:41 - which is taking up 50 percent of the
56:43 - page so really this h1 would be 25
56:46 - percent of the page likewise if we
56:48 - change this to a hundred for the header
56:51 - then we'll see our h1 takes up
56:53 - 50 percent of the page so that's the
56:56 - thing to remember about setting a
56:58 - percentage for the width
57:00 - is that you are putting it relative to
57:02 - the parent it's only using what it has
57:04 - available to it if the header is a
57:07 - hundred percent
57:08 - then the h1 that is the child has a
57:10 - hundred percent of the page available to
57:12 - it however if the header is smaller
57:15 - let's put it at eighty percent
57:17 - then
57:18 - we're only using up fifty percent of
57:21 - eighty percent of the page and once
57:23 - again if you want an element that is a
57:25 - block level element to take up 100
57:28 - of the width of the page you don't
57:29 - really need to set it because that is
57:31 - the default value already so now we're
57:33 - taking up half of the page by setting
57:36 - the h1 to 50 percent because it is 50
57:40 - of the full 100 width and you may see
57:43 - other uses for percentages as well but
57:46 - you commonly see them to set the sizing
57:49 - of different elements as far as the
57:52 - width of the page or sometimes the
57:54 - height but also we don't need to set the
57:56 - height because it will grow as the
57:59 - content grows i'm going to go back to my
58:01 - settings and set it from very large back
58:04 - to medium which is where most have their
58:06 - browser default to now when we look at
58:09 - our page the font is smaller but let's
58:11 - talk about another relative unit and
58:14 - this one does show on the mdn page in
58:17 - the chart down here under relative
58:19 - length units and it's the rem this is
58:22 - the unit that we'll typically use for
58:23 - font size and it relates to the font
58:26 - size of the root element now i already
58:29 - suggested we shouldn't set a font size
58:32 - on the root element so for our html
58:35 - element we typically wouldn't set a font
58:38 - size in here because we want to let the
58:40 - browser handle that and set the default
58:43 - font size so let's not do this for the
58:46 - html element i'll just go ahead and cut
58:48 - this i'm going to put it below the h1
58:51 - and i'm going to set a font size for our
58:54 - paragraphs instead and this font size if
58:57 - we set it to one ram
58:59 - that's already the default so it
59:00 - shouldn't change anything and we see the
59:02 - size is the same so it says one root
59:06 - element which the root element is the
59:08 - default font size set by the browser the
59:11 - em doesn't stand for element by the way
59:13 - that's m so we have one root em or one
59:16 - root m but that means the root size that
59:21 - is defined and in our case when we don't
59:23 - set it then it's set by the browser so
59:26 - hopefully that clears up some confusion
59:28 - but if we put in two m's then it's going
59:30 - to double the default size
59:32 - and now we're probably at 36 pixels
59:34 - right here because most browsers default
59:36 - to that 16 pixel size
59:39 - so you can see how this relates back to
59:41 - the root now if we set a font size on
59:44 - the parent because our paragraph is in a
59:46 - main element
59:48 - we set this font size to to rem also
59:53 - it doesn't change the paragraph font
59:55 - size at all because the font
59:57 - set here is not relative to the main
60:01 - element it's not relative to the parent
60:03 - it's relative to the root which is
60:05 - defined by the browser so it's always
60:07 - going to look back to that default root
60:09 - size if we had set a font size in the
60:12 - html element it would be looking at that
60:16 - but without setting it it's the default
60:17 - size
60:18 - so what happens though if we switch
60:20 - these units if we're not using rem
60:24 - if we're using
60:25 - m just em so now
60:28 - i'll delete the r there and save
60:31 - oh boy that got a lot bigger well here's
60:34 - the problem that we would have if we
60:36 - were using m's for our font size it gets
60:39 - amplified so our main element was
60:42 - looking at the root so it doubled that
60:45 - to 32 pixels
60:47 - and then using two ms
60:49 - is looking at the main element which is
60:51 - the parent of the paragraph and so then
60:54 - it doubled that so now we're at 64
60:56 - pixels so that's what happens and you
60:59 - can get unintended consequences if you
61:02 - just use m's and that's why using the
61:04 - rim and always looking at the root
61:06 - definitely helps because the way we can
61:09 - get confused for example is if i remove
61:11 - this setting on the main and i save
61:14 - well now this is also looking at the
61:16 - root because there's no other font size
61:18 - saved and so we think okay we're good to
61:20 - use just m's but the problem is
61:23 - if somewhere along the way in our
61:25 - project and we have many elements we're
61:27 - styling
61:28 - we set another font size on a parent
61:30 - element suddenly it's amplified when we
61:33 - use m's so i'm going to switch this back
61:35 - to two rims and get closer to the size
61:38 - we'd want and it's going to look at the
61:40 - root so when would we use
61:42 - ms instead of rims we know we want to
61:44 - use rems on font size well when we set
61:47 - the font size on an element
61:49 - m doesn't look at the parent it looks at
61:51 - the element itself and so we could use
61:54 - it for something like margin or padding
61:56 - which i know we haven't covered and we
61:58 - will in more detail when we look at the
62:00 - css box model but i'm going to go ahead
62:03 - and do that here for the h1 so if i set
62:05 - a font size for the h1 and let's make it
62:09 - bigger let's make it three
62:11 - rem here and we save we instantly have
62:14 - a bigger font size on the h1
62:17 - but now i can set
62:19 - the padding
62:21 - to
62:22 - 1
62:23 - m
62:24 - which is the equivalent
62:26 - of the font size of that element so now
62:29 - this would also be 3 rims so it should
62:31 - be a pretty good size padding yes we
62:33 - have a lot of padding so i probably
62:35 - don't want that much maybe i want to
62:36 - drop it to
62:38 - 0.5
62:39 - and now that's that's more reasonable
62:41 - that looks pretty good for a heading
62:43 - there so we added that padding which is
62:45 - inside this border it added extra
62:48 - padding and that is essentially half of
62:52 - three rims which would be one and a half
62:54 - and if we relate all this back to the
62:56 - default 16 pixel size
62:59 - one and a half of those would be 24
63:02 - pixels whereas three rims would be
63:06 - 48 pixels another instance where we may
63:08 - use m's instead of rims would be for the
63:11 - padding or margin setting on say a
63:14 - button if we created a button we would
63:16 - have text in the button we could set the
63:18 - font size for that button with rem but
63:22 - then we could go ahead and set the
63:23 - padding and or margin with the m units
63:27 - let's go back to the mdn page and look
63:29 - at our chart one other relative unit i'd
63:32 - like to look at today is the ch that
63:35 - stands for character and we have the
63:37 - advanced measure width of the glyph zero
63:40 - which essentially means the character
63:42 - zero of the elements font so whatever
63:45 - font we're using it's the measurement of
63:48 - 0 and that helps us determine the
63:50 - character width and that kind of comes
63:52 - from print
63:54 - magazine newspaper layout and those sort
63:56 - of things where you only want to have a
63:58 - certain width based on the character
64:01 - size so in this example we have a font
64:04 - size here for our paragraph i'm going to
64:07 - go ahead and set the width of the
64:08 - paragraph and let's say we don't want
64:10 - any more than an estimated
64:13 - 40 characters per line before the line
64:15 - wraps in the paragraph if we set that
64:18 - width notice it now has approximately 40
64:21 - characters before the line wraps and
64:23 - that kind of helps us define columns if
64:26 - we're doing that in some type of layout
64:28 - now we've acknowledged that the browser
64:31 - sets a default font size but it actually
64:33 - sets a lot of different default styles
64:36 - as well so let's go ahead and right
64:39 - click on this h1 heading and choose
64:41 - inspect or you could press ctrl shift
64:44 - and the letter i
64:46 - either way what we're doing is opening
64:48 - up the dev tools it may scrunch our page
64:50 - here a little bit but that's okay if i
64:52 - highlight this h1
64:54 - now it is showing several things about
64:56 - the page it's showing that there's a
64:59 - large margin that's going to be the
65:01 - orange when i highlight over
65:03 - it's showing the green area and that's
65:05 - padding that we set
65:07 - and then the blue area is the h1 itself
65:10 - right here so we see all of those things
65:12 - in dev tools when we hover over these
65:15 - elements and by the way i'm on the
65:16 - elements tab of dev tools
65:19 - and then if you don't have your dev
65:20 - tools on the right you can click the
65:22 - three dots here and there's a dock side
65:24 - setting maybe it's on the bottom for you
65:26 - but if you want it on the right you can
65:28 - choose dock to the right just like i
65:30 - have here so we can really see more
65:32 - about all of these elements in dev tools
65:35 - what we can also see as we come down
65:37 - here are the styles
65:39 - and then we see the h1 and the styles
65:42 - that i have set on the h1 element but
65:45 - underneath that we see some others as
65:47 - well and it says user agent stylesheet
65:50 - this is what the browser is setting on
65:52 - the h1 element by default that we don't
65:54 - have to and you can see we have put in a
65:57 - different font size so we have
65:59 - overridden the font size for the h1
66:01 - element so it has crossed that out
66:03 - everything else here the display block
66:06 - and the different margins and even the
66:07 - font weight are applied from that user
66:10 - style sheet so those are default styles
66:12 - and we can override them just like i did
66:14 - with the font size and before we get
66:16 - into these next two relative units we
66:19 - are going to override some of these so
66:21 - what i want to do
66:23 - is start a css reset which i'll talk
66:26 - about more in the tutorial of the css
66:29 - box model as well but i'm going to use
66:32 - the selector that selects all elements
66:34 - again our wildcard selector and here i'm
66:37 - going to set the margin to zero
66:40 - the padding
66:41 - to zero and one other setting that says
66:44 - box
66:45 - sizing and i'm going to set that to
66:47 - border box and when i save
66:49 - notice all the padding and margin is
66:52 - gone now
66:53 - our h1 is right up in the left corner we
66:56 - don't have any space between the
66:58 - paragraph and the h1 we got rid of all
67:00 - of those default margins and paddings
67:02 - that were creating that extra space but
67:05 - that's important when we go back to the
67:07 - mdn page and we look at these next two
67:09 - relative units we have viewport width
67:12 - which is one percent of the viewport's
67:14 - width
67:14 - and viewport height which is one percent
67:16 - of the viewport's height so let's look
67:18 - at how we can apply those but if we had
67:21 - that extra margin and padding there we
67:23 - wouldn't be able to see the detail that
67:25 - i want to show okay i'm going to take
67:27 - our main element here and set a width on
67:30 - it with our viewport width units
67:33 - just so we can see
67:35 - what it is capable of and so i'll do
67:37 - that i also need to set a background
67:39 - color just so we can see what we're
67:40 - doing better
67:42 - and i'll set this to let's say sky blue
67:45 - and save so now we can see the width of
67:48 - our paragraph is actually wider than the
67:51 - width of our main element and so it is
67:54 - overflowing that main element but we
67:56 - have actually set the main element to 50
68:00 - of the width of the full page and you
68:02 - can see that's matching the 50
68:05 - width that we have up here but i'm using
68:08 - the viewport width units right here
68:10 - there may be times when you want to use
68:12 - the viewport width but most of the time
68:14 - i find myself using the percentage and
68:18 - getting the same result and i'll give an
68:20 - example where the percentage is actually
68:22 - a better choice so let me remove that 50
68:25 - percent and i'll remove this background
68:27 - color that's making our page look bad
68:29 - and we'll come back up to the top and
68:32 - underneath our select all i'm going to
68:34 - choose the body element here and as i'd
68:37 - said before we don't need to set a width
68:39 - of a hundred percent but i'll put this
68:41 - in and i'm going to set this to
68:44 - 100 viewport with units instead and save
68:48 - now we don't really notice a change and
68:51 - i have seen this on pages and i've even
68:52 - done it myself but i figured out the
68:55 - problem if we have a width of 100
68:58 - viewport width units we do have a
69:00 - problem when the content out the
69:02 - vertical content outgrows the page and
69:04 - i'll show you why so i need to go back
69:06 - to the html
69:08 - and in the html i'm going to quickly add
69:11 - some more content so i'll say
69:14 - paragraph times 10 and we'll do this
69:16 - with some just sample lorem text that's
69:19 - an image abbreviation so when i press
69:22 - tab it adds all those extra paragraphs
69:24 - and save now we've got lots of content
69:26 - here
69:27 - and now we have a problem and here's the
69:30 - problem
69:31 - our scroll bar showed up on the right
69:34 - which is good we need that to see all of
69:36 - this content but what also happened is
69:39 - we had a scroll bar show up down here on
69:41 - the bottom
69:42 - and that is because our viewport width
69:45 - when we set it to 100 as we did on the
69:47 - body right here does not account for
69:49 - this scroll bar on the right so as soon
69:52 - as this scroll bar on the right shows up
69:54 - and it shows up when our content
69:56 - outgrows
69:57 - our height
69:58 - so when we need to scroll to see the
70:00 - content is when this shows up as it
70:02 - should
70:02 - but then
70:04 - that little extra bit that we can't see
70:06 - creates this scroll bar so we can see it
70:09 - and that's annoying and most developers
70:11 - don't like that horizontal scroll bar
70:13 - showing up
70:14 - so if you were to set the width
70:16 - 100 would be much more desirable because
70:19 - now we still get the scroll bar here
70:22 - where we can scroll up and down
70:23 - vertically we do not have a scroll bar
70:25 - on the bottom and we don't usually want
70:27 - that but overall as i've mentioned
70:29 - before we don't even need to set 100
70:32 - width on the body as it should default
70:35 - to that anyway i'm going to jump back to
70:37 - the html and go ahead and undo all of
70:40 - that extra content we added
70:42 - and save so we're back to our normal
70:44 - content for the page
70:46 - let's go back to style as well
70:48 - and let's right click once again on the
70:51 - page and i just kind of i think i
70:52 - selected the paragraph here so when
70:54 - devtools opens up it should be on the
70:57 - paragraph and we'll see that here in
70:59 - just a second
71:00 - yep i'm on the paragraph now let's
71:02 - highlight the body notice the body is
71:04 - not the full height of the page it only
71:06 - grows with the content but sometimes we
71:10 - want a body element that is the full
71:13 - height of the page even if we don't have
71:15 - enough content to do that and we can do
71:18 - that with the viewport height unit and
71:20 - i'm going to do that over here
71:22 - in our code i'll choose the body element
71:25 - but i don't want to set height because
71:27 - that would also limit it to 100 vh and
71:30 - then we could outgrow that if our
71:32 - content were to outgrow what i want to
71:34 - do is set the
71:36 - min height to 100 vh
71:38 - and save and now that will still allow
71:41 - the body to grow with the content if it
71:43 - outgrows the viewport but at the same
71:46 - time it's now the full page and there
71:48 - could be instances where you want that
71:51 - let's move on to the css box model today
71:54 - you'll learn that everything in css is a
71:56 - box but before we finish i'll show you
71:58 - how to turn a box into a circle if you
72:00 - want to so let's get started on the left
72:03 - i have visual studio code and i have the
72:05 - code from the last tutorial we'll modify
72:08 - that in just a second on the right i
72:10 - have a basic web page once again with an
72:13 - h1 header and a paragraph and i'm using
72:16 - the live server extension so any changes
72:19 - i make in the css and when i save the
72:22 - file will immediately show
72:24 - then in the web page okay so everything
72:27 - we have over here except the h1 has got
72:29 - to go so i'm going to delete everything
72:31 - above
72:32 - and below
72:33 - and leave the styles for the h1 and we
72:36 - can now save and we see those changes so
72:38 - our paragraph
72:40 - text has gotten smaller
72:42 - and everything else is pretty much the
72:44 - same except we do now have the default
72:46 - styles from the browser again and we'll
72:49 - get back to that css reset in just a bit
72:52 - but right now we want to look at this
72:53 - box model and we've already drawn a box
72:56 - by putting a border around our h1
72:59 - element we can see this border here
73:00 - defined with shorthand and we'll get
73:02 - into what all of that means in just a
73:05 - second too but what i want to do first
73:08 - is drag
73:09 - our visual studio code over as far as i
73:11 - possibly can and give us some more room
73:13 - in the browser because we're going to
73:15 - open up dev tools so once you do that
73:17 - you can press shift alt or i'm sorry not
73:21 - shift alt it is control shift i believe
73:23 - and the letter i
73:25 - to open dev tools
73:27 - and if that's not working then you
73:29 - should be able to no that is going to
73:30 - work it just took a second here on my
73:32 - computer
73:33 - and if that doesn't work you could right
73:35 - click and choose inspect as well once
73:37 - you have it open you may not have your
73:39 - dev tools on the right and if you don't
73:41 - you can click the three dots and choose
73:43 - where it is docked i like to have mine
73:45 - on the right and then you can select any
73:48 - of the elements in the html here and you
73:51 - see it flashing over on the web page
73:53 - because it highlights what element
73:54 - you've selected and i am in the elements
73:57 - tab that you can choose as well
73:59 - after that i'm going to select that h1
74:02 - so it's inside of our header element
74:04 - here
74:04 - and after i select it i've got h1 and
74:06 - notice the colors changed on the web
74:08 - page this is already showing us the box
74:11 - model right here so what we have for the
74:14 - orange is the margin and then we can
74:17 - clearly see our border that we put in
74:19 - with two pixels and it is dashed and
74:22 - then inside of that we see green and
74:25 - that is the padding and then inside of
74:27 - that we see blue and that's actually the
74:29 - content and now if we go down here where
74:32 - we have a styles tab let's choose the
74:34 - computed tab and we actually see the box
74:37 - model inside of our dev tools so we can
74:39 - highlight any aspect of this so i'll go
74:41 - to the content first and now we only see
74:44 - the blue highlighted on the web page and
74:46 - that is our content and it's showing us
74:48 - the actual size of the content in pixels
74:51 - here as well and then we go to padding
74:53 - which is the next layer the padding is
74:55 - once again inside of the border and it
74:58 - just wraps around our content it gives
75:00 - some extra space inside of the border
75:03 - gives our content a little room to
75:05 - breathe if you will so here you can see
75:07 - it's 24 pixels then we have our border
75:10 - which it shows it as
75:12 - 1.993 pixels we set it to 2 pixels hey
75:15 - close enough right and after the border
75:18 - we have margin and you can see we didn't
75:21 - set a margin so this margin is just
75:23 - showing the space that is left
75:26 - after our element is there so on top we
75:29 - have 32 pixels and then we have 32
75:33 - pixels on the bottom as well and that's
75:35 - probably just because of the default of
75:37 - the h1 we didn't set a margin on the
75:40 - right but we do see a big margin over
75:42 - there and that's just because
75:44 - we have set that 50 percent width on our
75:47 - h1 so it's not taking up the full page
75:51 - space and what's left is occupied by
75:53 - margin so it's important that you
75:55 - remember how to get here in dev tools
75:57 - we're on this computed tab below and you
76:00 - always want to be able to bring up the
76:01 - box model to see exactly what's going on
76:03 - with your elements after that it's also
76:06 - important to just memorize the different
76:08 - layers of the css box model so starting
76:11 - on the inside we have content then we
76:14 - have padding then we have border and
76:16 - finally we have margin on the outside
76:19 - and now concerning our h1 and the margin
76:21 - that i have highlighted notice it's 32
76:24 - pixels actually
76:25 - 32.16 pixels and we didn't set that so
76:28 - that's a default style on the h1 we've
76:31 - got the h1 selected let's go back to the
76:34 - styles tab instead of the computed tab
76:37 - and we can see this if we scroll just a
76:39 - little bit there's the styles we set and
76:41 - then here are the default styles from
76:43 - the browser this is a user agent style
76:46 - sheet that's assigned by the browser and
76:48 - here you can see they assigned some
76:51 - margin settings here it's
76:53 - 0.67 em so that's essentially two thirds
76:58 - now if we remember about our units an em
77:01 - responds to the font size of the element
77:04 - and we set a font size of three rim
77:07 - which would essentially be 48 pixels so
77:11 - two-thirds of that is coming in right
77:13 - around where we see it on our box model
77:15 - here at
77:16 - 32.16 pixels so now that we know our
77:19 - font size is impacting the default
77:22 - margin let's go ahead and change our
77:24 - font size and of course it will also
77:26 - change our padding that we based on em
77:28 - units i'm going to change this to
77:31 - 2 rim if i can type here to rim and save
77:35 - and now things have changed notice our
77:38 - margin got smaller it's
77:40 - 21.44 because our font size got smaller
77:44 - and this is based on an em unit an m
77:47 - as far as the browser is concerned so
77:50 - once again it's still 0.67 em
77:53 - but the actual size is smaller it's
77:56 - 21.44 pixels now changes like this can
77:59 - be really hard to keep track of and so
78:01 - that's why sometimes we just want to
78:03 - reset the browser settings for all the
78:06 - margins and all the padding and just
78:08 - take control of them ourselves and
78:11 - that's why we use a css reset and a very
78:14 - basic css restart starts with the wild
78:17 - card at the top and then we set margin
78:20 - for all elements because remember this
78:22 - wild card selects all elements so we set
78:24 - the margin to zero
78:26 - and we set the padding to zero
78:29 - and we can save and now all of that
78:32 - margin and padding that is set by
78:33 - default is taken away and you can see
78:36 - the body actually had a little bit of
78:38 - margin set to it as well because now
78:40 - we're right up to the edge of the body
78:42 - here on our page and this border we set
78:45 - around our h1
78:46 - is right up to the edge of the page as
78:48 - well and there's one more setting i
78:50 - always put inside of the css reset and
78:53 - that is box
78:55 - dash sizing there we go
78:57 - and now the default
78:59 - is content box and if we save we won't
79:03 - really notice a change here it didn't
79:05 - really change anything because that is
79:07 - the default
79:08 - so what the content box does is it says
79:11 - okay the size that we're setting is this
79:14 - for the content and the content only it
79:16 - doesn't include calculating the size of
79:19 - the padding or of the border or of the
79:22 - margin at all so instead of 50 percent
79:25 - i'm going to set an absolute width on
79:27 - here so we can compare and i'll set this
79:30 - to say
79:31 - 400 pixels and save now let's look over
79:35 - here in our box and we can see the
79:38 - content is 400 pixels but that doesn't
79:41 - account for the padding what we have
79:43 - here is not the 400 pixels we were
79:45 - expecting we took up more space than
79:48 - that but if we set this to border box
79:51 - instead of content box
79:53 - then we'll get what we expect and it's
79:55 - much easier to calculate so now notice
79:58 - our content over here is not 400 pixels
80:00 - is 348
80:03 - and then we can add in
80:04 - 24 pixels of padding on each side and
80:08 - two pixels of border on each side and
80:12 - then we can get our total of 400. so
80:14 - what borderbox does is it really helps
80:17 - us calculate
80:18 - the sizes that we are assigning because
80:20 - it goes ahead and includes the border
80:22 - and the padding it does not include the
80:25 - margin the margin is on the outside
80:28 - of our css boxes that we create
80:31 - whichever elements that we're styling so
80:33 - the margin is not included in that
80:35 - calculation however the rest is so the
80:38 - border and the padding and the content
80:40 - all add up to that 400 pixels that i set
80:42 - right here okay now that we've broken
80:44 - down how the border box setting works
80:47 - and looked at the css box model let's go
80:50 - ahead and close devtools and let's just
80:52 - style our page a little bit with some of
80:54 - these properties i'm going to resize the
80:56 - page a little bit so we have some more
80:58 - room for visual studio code over here on
81:00 - the left i'll pull this over
81:02 - there we go and now let's make some
81:04 - changes so one thing i have thought
81:06 - about is our h1 right here has some
81:09 - settings i normally probably wouldn't
81:11 - put on an h1 i'm just more concerned
81:13 - with the font there but the font size
81:15 - that would be assigned by default is
81:18 - okay too so i'm going to get rid of that
81:20 - and now these other settings i would
81:23 - actually be more likely to put on the
81:25 - container than i would on the h1 itself
81:28 - and the h1 is inside of a header element
81:31 - so let's go ahead and save that and it
81:34 - changed just a little bit but that's
81:36 - okay i'm going to change these ems back
81:39 - to rims because now i'm not setting a
81:41 - font size on the header so i'm going to
81:42 - use 1.5 rim here and save and now we've
81:46 - got our padding back to about where it
81:48 - was but now what if i wanted to assign
81:50 - these same settings to the container
81:53 - that our paragraph is in and that's in
81:54 - the main element so maybe i don't want
81:57 - this on the header maybe i want to
81:59 - assign a container class so i can
82:02 - provide these same settings for more
82:03 - than one container so i'm going to
82:05 - quickly go over to the html
82:07 - and in the html we'll set a class called
82:10 - container on each of these elements so
82:13 - we have the header element
82:15 - and we'll set the class equal to
82:17 - container
82:18 - and i've got one extra
82:22 - quote there there we go and now i'm just
82:24 - going to copy this and i'll paste it
82:26 - into our
82:28 - main element as well
82:31 - and save that
82:33 - and there we go so now we've got dashes
82:35 - around both of these boxes here let's go
82:37 - back to the css and make these bigger so
82:40 - we can see them better on the page right
82:42 - now i'm going to get rid of this 100
82:44 - pixel or 400 pixel width let's go ahead
82:47 - and let them take up the full 100 for
82:50 - now okay let's go ahead and add a font
82:53 - size to the container and it will apply
82:55 - to both of these differently but we'll
82:56 - set it to 1.5
82:58 - rim and save
83:00 - now our fonts a little bit bigger but
83:03 - notice how the edges of the border are
83:05 - right up against the page so on the
83:07 - outside of our box we can set a margin
83:10 - and also set that to 1.5 ram and save
83:13 - and now we have our two boxes and the
83:16 - margin has pushed them away from the
83:18 - edge the margin has also provided space
83:21 - between the two boxes here and now that
83:23 - we have a font size on our container we
83:25 - could go ahead and switch this back to
83:27 - ems and remember
83:29 - one m one e m would be the same as the
83:32 - font size so it would be equal to the
83:34 - 1.5 rim so if we make this change we
83:38 - just change it to 1m
83:40 - and our sizing should stay the same and
83:42 - it does if we change this to 1.5 it will
83:46 - get bigger yes and now we have more
83:49 - padding we could add more margin by
83:51 - doing the same if we want to so let's go
83:53 - ahead and do that
83:54 - and now let's go ahead
83:56 - and experiment with the margin and the
83:58 - padding because we don't have to have
84:00 - the same setting on the top right bottom
84:03 - and left and i did say that order
84:06 - specifically for a reason because for
84:08 - the margin we could just say margin
84:11 - top and here let's go ahead and say 1.5
84:15 - em and save
84:16 - and look what happens to our other
84:18 - margins the left and right margins are
84:20 - gone and you can't really see that we
84:22 - lost the margin on the bottom but we did
84:25 - the only thing separating these
84:26 - containers now is the margin on the top
84:29 - so now let's go ahead and add some
84:31 - margin on the right
84:34 - and here we'll set this to 2em and save
84:36 - so it's just a little bigger and now we
84:38 - do have margin on the right but still no
84:41 - margin on the bottom and no margin on
84:43 - the left i'm going to press shift alt
84:44 - and the down arrow
84:46 - and now instead of the right i'm going
84:49 - to switch this one to
84:50 - bottom
84:51 - and save and now we have some more
84:54 - margin here on the bottom so the
84:56 - separation between these two boxes got
84:58 - bigger that's the only thing you could
84:59 - really see right there
85:01 - and now on the right let's go ahead and
85:04 - switch i mean on the left let's go ahead
85:06 - and switch this to two ems as well and
85:08 - you can see we got the same thing as if
85:11 - we just said
85:12 - margin 2em except we wanted a margin on
85:16 - top of 1.5 amps so there is shorthand
85:19 - for this so i'm going to comment all
85:21 - four of these out and i'll press shift
85:24 - alt and the letter a to do that
85:26 - there you can see a css comment so it
85:29 - commented those out so right now there
85:30 - will be no margin once again now the
85:32 - boxes are next to each other no margin
85:35 - on the left and right but our shorthand
85:37 - is just saying margin and when i say
85:39 - this 1.5
85:42 - em
85:42 - that applies it to top bottom
85:46 - left and right and it actually goes in
85:47 - the order top right bottom left so now
85:50 - we can put in different settings with
85:52 - the shorthand if we wanted to so 1.5 on
85:55 - top
85:56 - and then
85:58 - 2 m's on the right and the left and then
86:02 - 2 m's on the bottom and i can save
86:05 - and that is the same thing as when we
86:07 - had all four of these right here now if
86:10 - i just wanted to have
86:12 - 1.5 on the top and the bottom and two on
86:16 - the left and the right i could delete
86:18 - this third setting right here
86:20 - and that's what we get so now it will
86:22 - take 1.5 and apply it to the top and the
86:25 - bottom
86:26 - and 2 and apply it to the right and the
86:29 - left however you can provide all four
86:32 - settings so we could go 3
86:35 - and four
86:37 - and then we would have the shorthand
86:39 - notice the left margin the final value
86:42 - here is much larger twice as large
86:44 - actually as the right margin and then
86:46 - the bottom
86:47 - is definitely larger than the top margin
86:49 - because here you can see only the top
86:51 - margin as it applies to the first
86:53 - container and now you can see
86:56 - the top margin and the bottom margin
86:58 - here combined to create the space
87:00 - between the two boxes now this same idea
87:03 - for shorthand also applies to padding so
87:06 - i will copy these actually cut them and
87:09 - just go back to the one setting for
87:11 - margins so that looks a little bit more
87:13 - normal again but now let's apply the
87:16 - same thing to the padding and we'll see
87:18 - how that changes so now we have a much
87:21 - larger left padding of four twice as
87:24 - much as we have on the right
87:26 - and then we have a larger bottom than we
87:28 - do on top this is easier to see because
87:30 - it's inside of our container and
87:32 - remember if you're ever having a hard
87:34 - time seeing all of this different white
87:36 - space i guess i dragged visual studio
87:38 - code i meant to grab the edge of chrome
87:39 - here i'll pull this over
87:42 - right click choose inspect
87:44 - open up the dev tools again and we can
87:46 - see all of this hidden white space much
87:49 - clearer when we look at the box model so
87:52 - once again in dev tools choosing the
87:54 - computed tab
87:55 - but we also need to highlight what we're
87:57 - going to look at so i'm going to choose
87:59 - this main container and now we can see
88:02 - the space as it's applied here so here's
88:04 - the content
88:05 - here's the padding and see we have 48
88:08 - pixels on the right but 96 on the left
88:10 - twice as much we have 36 on top but 72
88:15 - on the bottom which is twice as much
88:16 - also so we can definitely see that our
88:19 - padding settings over here once i drag
88:21 - this over are being applied as we
88:24 - specified them in the shorthand okay
88:26 - back to visual studio code i'm going to
88:28 - resize chrome once again so we can see
88:31 - our code better
88:32 - dragging this over
88:34 - dragging visual studio code back over
88:36 - here there we go and we can do the same
88:38 - thing you might expect with border
88:41 - actually first worth discussing you can
88:43 - just delete the two pixels
88:45 - and then when we save it actually gets a
88:47 - little thicker because the default is
88:49 - more like three pixels
88:51 - for the size here i'm going to delete
88:53 - this odd sizing for the padding that i
88:55 - used just to
88:56 - indicate the different
88:58 - sides for the padding and we'll go back
89:00 - to kind of a normal look here we've got
89:02 - two containers and they have equal
89:05 - padding and equal margin around them
89:07 - these settings also apply to the
89:09 - individual border sides so that means we
89:11 - can say border dash top and here we
89:14 - could say
89:15 - 5 pixels
89:17 - solid and then i'll go ahead and press
89:19 - shift alt and the down arrow and then
89:21 - instead of border top i'll go ahead and
89:23 - say border
89:25 - right and i'll say
89:28 - 10 pixels and here i'll say dotted
89:33 - and save
89:34 - and now we can see we had some major
89:36 - changes here and we didn't specify a
89:38 - color so these settings
89:40 - were to override what we had set with
89:42 - shorthand above and so the default color
89:45 - is black but we have a dotted right and
89:47 - we have a solid top so we could have
89:49 - specified different colors here as well
89:51 - so we could say
89:53 - green
89:54 - and then of course over here we can say
89:56 - something different like
89:58 - yellow
89:59 - and save and now
90:01 - that is ugly that definitely changed our
90:03 - borders though so i'll switch that to
90:05 - blue and save our eyes just a little bit
90:08 - and if we wanted to specify these
90:10 - individually we could even say border
90:12 - top
90:13 - width and then we wouldn't specify the
90:16 - solid or green here so you can break out
90:18 - each
90:19 - individual setting as well so now you
90:22 - can see we just changed the width of the
90:24 - top one likewise instead of width
90:27 - there's also border top let me switch
90:29 - that there we go style and this is where
90:32 - we're specifying dotted or anything else
90:35 - here's ridge is another value we'll save
90:38 - that and so now the top is a little bit
90:40 - different it looks pretty much like the
90:42 - solid setting does and then of course
90:44 - there would be border top
90:46 - color
90:47 - and we could turn this to any color we
90:49 - want so i'll choose blue here as well
90:52 - and now we have a dashed blue line
90:55 - across the top of our border so so many
90:57 - settings for the border when you break
91:00 - them out individually we had border top
91:02 - but then we also specified border top
91:04 - width border top style border top color
91:08 - and then of course you can do that
91:09 - instead of for top you can do right
91:11 - bottom and left as well
91:13 - often because of this because there's so
91:15 - many i'll delete this i just use the
91:18 - shorthand i usually want my borders to
91:20 - have the same width all the way around
91:22 - so previously i'd had two pixels here
91:25 - and then i chose dash let's choose a
91:27 - different one here let's use
91:29 - outset
91:31 - and we'll save and we can see it changed
91:34 - our frame around the box another one
91:36 - that i like is called double
91:38 - and i'll put a link to the border page
91:41 - from mdn in the description and you can
91:43 - see all of the different values there
91:45 - let's make this larger so we can really
91:47 - see
91:48 - the double what it does here we'll save
91:50 - and there you go we've got our double
91:52 - lines now around each container while
91:54 - we're covering border one other setting
91:56 - to cover is outline outline is not part
91:59 - of the box model because the difference
92:01 - between it and the border is that it
92:03 - doesn't take up space but you style
92:05 - outline much like you would the border
92:08 - so here i'm going to choose 5 pixels and
92:11 - i'll choose solid
92:13 - and then let's make the outline a
92:14 - different color entirely let's go with
92:17 - purple
92:19 - and if i save this now we can see purple
92:22 - wrapping outside of our border but again
92:25 - the outline is not calculated because it
92:28 - doesn't take up space so it's not
92:30 - calculated into that box model equation
92:33 - another property that the outline has
92:35 - that is very handy
92:37 - is outline dash offset so instead of
92:40 - being right up against our box we can
92:42 - say we want the offset to be 5 pixels
92:46 - and save and see how we pushed it now 5
92:49 - pixels further out from our border so
92:52 - it's offset 5 pixels from the rest of
92:55 - our box and something worth considering
92:57 - sometimes is using a negative value so
93:00 - if i put in negative 10 pixels
93:02 - we'll now see the outside the outline
93:05 - is inside of our box here and so let's
93:09 - go ahead and change this some more so we
93:10 - get it a little further inside maybe
93:12 - even 20 pixels and save and we can
93:15 - clearly see the outline is now inside of
93:18 - our box model okay in the beginning i
93:20 - promised to show how to turn a box into
93:23 - a circle before we were finished so
93:25 - let's do that i need to go back to the
93:27 - file tree
93:28 - and find our index html and hide the
93:31 - file tree with control b
93:33 - and i just want to put a div down here
93:35 - i'm going to keep it in the side of the
93:37 - main element so i'll just type
93:40 - div and then i want to give this div
93:43 - a class and set this equal
93:46 - to
93:47 - there we go to circle
93:49 - i still didn't spell circle right i'm
93:51 - having a rough time today save there
93:53 - we've got a div with the class of circle
93:55 - okay we can close the html and now let's
93:59 - style our circle class
94:01 - so we'll start with circle definition
94:03 - here for the class
94:05 - and let's give the circle a background
94:08 - color
94:11 - of gold but we haven't given it any size
94:14 - yet so let's say a width
94:16 - of 100 pixels
94:19 - and a height of 100 pixels
94:22 - and that doesn't look like much of a
94:24 - circle yet but it will let's go ahead
94:26 - and add a border now of 2 pixels
94:28 - we'll make this solid black
94:31 - and now we see our border applied to our
94:33 - square
94:34 - and let's add an outline as well well we
94:37 - need a new line for that outline
94:40 - now the outline can be 2 pixels let's
94:43 - say solid and let's go with red for now
94:45 - so it'll match everything else a little
94:47 - bit and stand out now let's give it an
94:50 - offset also
94:52 - and we'll make this 0.25 round
94:55 - and save so yeah we've got just a little
94:57 - space there now let's create some
94:59 - separation from the other content and so
95:02 - i'll just leave this at the top but i'll
95:03 - make the margin
95:05 - three rim
95:06 - and save and now it's pushed itself away
95:10 - but something we didn't cover with the
95:11 - margin if you set the margin this
95:14 - doesn't work for top and bottom but if
95:15 - you set it for
95:17 - left and right notice we've got three
95:19 - ram for top and bottom now we can use
95:21 - the keyword auto for left and right
95:25 - and this will center it horizontally
95:28 - that means in the middle left and right
95:30 - so now we put what will be a circle our
95:33 - gold square inside
95:35 - of our main element and it's at the
95:38 - center horizontally not vertically but
95:40 - at least it is horizontally and now to
95:42 - calculate our circle we essentially just
95:44 - need to set one other border property
95:47 - and we set it to half the value of the
95:51 - width and the height so this border
95:53 - property is called border radius i'll
95:55 - put it right under border
95:58 - and we'll set it first just so you can
96:01 - see how it works let's set it to 20
96:02 - pixels and you'll see what border radius
96:05 - does look how it rounded the corners
96:08 - of our square so now we have more like a
96:11 - cool button kind of like you would see
96:13 - there and we can continue to round that
96:15 - but if we set it to 50 pixels which is
96:19 - half of the width and half of the height
96:22 - and save
96:23 - we've now got a circle now there's
96:25 - always more than one way to do things in
96:27 - css and typically in programming in
96:29 - general so if you've got other ways you
96:31 - like to make circles in css go ahead and
96:34 - leave those in the comments below but i
96:36 - hope this has helped you learn about the
96:37 - box model today so we have the content
96:40 - on the inside then we have the padding
96:43 - then we have the border and finally on
96:45 - the outside we have the margin and when
96:47 - we apply our basic css reset and we set
96:50 - the box siding to border box the box
96:54 - sizing to border box
96:56 - then the calculation includes the
96:58 - content the padding and the border
97:01 - instead of just the content
97:04 - let's move on to css typography and i'm
97:07 - going to paste a definition here
97:09 - typography is the way that text is
97:12 - arranged and presented so today we'll be
97:14 - working with text and font in our css
97:18 - you can see i've got a css folder with a
97:21 - style.css file and i have an index.html
97:24 - file today
97:26 - i'll save the style.css file and for the
97:29 - index.html file let's just take a quick
97:32 - look we've got a basic web page here and
97:35 - inside the body of the web page we have
97:38 - a header element and we have a main
97:41 - element inside the header element we
97:43 - have an h1 and inside the main we have a
97:46 - paragraph
97:47 - and then we have a simple form and our
97:50 - form has a label input and button we'll
97:52 - be working with all of those today let's
97:55 - go back to the style i'm also going to
97:57 - press ctrl b to hide the file tree and
98:00 - now i'm going to resize vs code here so
98:03 - it's only on the left of our screen and
98:05 - on the right we'll have our web page and
98:07 - i'm using the live server extension so
98:09 - any changes we make in the css will show
98:12 - immediately over here in the web page
98:14 - you can see the simple web page that we
98:16 - just went over in vs code it's got our
98:18 - h1 it's got our paragraph with some
98:20 - lorem epsom text and it's got our simple
98:23 - form here with the label input and
98:25 - button i'm going to start our css by
98:28 - selecting the body and inside the body
98:31 - i'm just going to set a padding of 25
98:34 - percent and if you remember the css box
98:36 - model setting padding of 25 sets that on
98:40 - all sides top right bottom and left so
98:43 - you can see it put our text right here
98:45 - kind of in the middle of the page not
98:46 - exactly centered but it lets us work
98:49 - with it and see it in that regard now
98:51 - we've covered a few things about text
98:53 - and font already in this series and one
98:56 - of those was setting the font size and
98:58 - we already know we want to let the
99:00 - browser set the default font size so
99:02 - that enables the user to make a choice
99:05 - as far as their settings and it also
99:07 - helps accessibility and then when we do
99:09 - set a font size like i'm about to here
99:12 - on the body we want to use root ems that
99:16 - is referencing the roots font size or
99:19 - that default font size that the browser
99:21 - sets which is usually defaults to 16
99:23 - pixels so if i say two
99:26 - root ems here rem this will probably set
99:29 - it to about 32 pixels and there you can
99:31 - see we have a much larger font size and
99:34 - now i can see the padding is a little
99:35 - too large for what i want to do so i'll
99:37 - put this back to 10 percent in there
99:39 - it's kind of in the part of the page
99:41 - where we'll see it the best and we'll be
99:44 - able to reference the different things
99:45 - we're going to do to the text and font
99:47 - today now also notice and we learned
99:50 - this as well in the past
99:52 - that through inheritance font and text
99:55 - settings are usually inherited so the
99:57 - children of this body element would
100:00 - inherit the font size of two realms
100:02 - unless we set a specific one on those
100:05 - child elements however
100:07 - they do not
100:08 - inherit the size here inside of a form
100:11 - so notice the label has that font size
100:14 - inherited but it did not get inherited
100:16 - in the input or the button so after the
100:20 - body here we could also
100:22 - select both the input
100:25 - and the button
100:27 - and then inside of this we could say
100:29 - font
100:30 - and inherit
100:32 - and now they will both inherit that font
100:35 - size that we put on everything else one
100:38 - other thing we've already learned is
100:40 - that we can change the color of the
100:41 - different text on our page and we can
100:43 - just do that through the color property
100:45 - so i'll change this to purple so it's a
100:48 - noticeable change we can see everything
100:50 - changed here to purple i really don't
100:52 - want to do that today but it is one of
100:54 - the things we've already covered so i'm
100:56 - going to remove that but now we do know
100:57 - how to change the different colors
101:00 - of our text on the page now i want to go
101:02 - ahead and remove this form as we're not
101:04 - going to use it for the rest of the
101:05 - tutorial so just quickly back inside of
101:08 - the index.html
101:10 - i'll select the form and i can press
101:13 - shift alt and the letter a to just
101:15 - comment that form out so we don't see it
101:17 - on the page but it's still there in the
101:19 - source code if we want to go back to it
101:21 - and we can do the same here inside of
101:23 - our css so i'll highlight the input and
101:26 - the button style press shift alt and the
101:28 - letter a and vs code will comment out
101:31 - the style in the css so we've removed it
101:34 - essentially from our html and css but
101:37 - it's still there to reference if you
101:39 - want to go back and work with form
101:41 - elements now when i'm speaking sometimes
101:43 - i will say font when i mean text but
101:45 - they are really two different things
101:47 - notice i'm creating a little extra space
101:48 - here in our css so we have some text
101:51 - settings that aren't impacted by the
101:54 - font choice at all and let's go over
101:56 - those first so let's select our
101:57 - paragraph here on the page and we'll set
102:00 - some text settings for that and the
102:02 - first one we should go over is text dash
102:05 - decoration and we can see the different
102:08 - choices we get right away
102:10 - when we choose text decoration because
102:12 - vs code wants to help us one typical
102:14 - text declaration to set would be
102:17 - underline so let's go ahead and save
102:19 - this and now we can see our full
102:21 - paragraph text is underline another
102:24 - choice which is just the opposite is
102:27 - line
102:28 - and when we set that you can see now we
102:30 - have a line above the text instead of
102:32 - below it
102:33 - and then there's also
102:35 - line dash through and if we save that it
102:38 - does exactly what you expect it to it
102:40 - puts a line through the text maybe you
102:43 - just have a few words you want to cross
102:45 - out and you surround those words in a
102:47 - span element and then you set this line
102:50 - through property for that specific span
102:53 - element and that would probably be a
102:55 - class you would create to do that
102:57 - so after we've gone over those text
102:58 - declaration settings the other one you
103:01 - may see is none
103:02 - now that is the default for a paragraph
103:05 - text like this but what if you had a
103:06 - link text links are usually underlined
103:09 - by default and so setting none would
103:11 - remove the underline on a link and those
103:14 - are the typical settings i'm not going
103:15 - to go over every setting today because
103:17 - there are so many for text but i'll go
103:19 - over the most common the next text
103:21 - setting we'll look at is text
103:23 - transform
103:25 - and after that you can see our
103:26 - selections pop up here in visual studio
103:28 - code again so if we choose capitalize
103:31 - and save now it capitalized the first
103:34 - letter of every word in our paragraph
103:37 - likewise we could choose lowercase
103:40 - and now every letter is lowercase not
103:43 - just the first letter but every letter
103:45 - and then we could choose uppercase and
103:48 - we'll get the opposite as well and now
103:50 - we have all upper case okay now after
103:53 - text transform another very common text
103:56 - setting is text align
103:59 - what we normally have
104:00 - is a line left so this is typically the
104:03 - default for paragraphs and you see this
104:05 - and look to the right this is not
104:07 - uniform over here each line has kind of
104:09 - a different ending point and this is how
104:11 - we typically see a paragraph when we're
104:14 - looking at a paper or something like
104:16 - that like a a school paper however a
104:20 - newspaper might choose to justify or a
104:23 - magazine paragraphs and now notice
104:26 - the right hand column is uniform here
104:29 - where it all ends at the same place just
104:32 - like the left side does and then of
104:34 - course we can text align right which is
104:37 - the opposite of text align left and now
104:40 - it's uniform on the right but it is not
104:43 - on the left and sometimes when we write
104:45 - a paragraph we want to indent that first
104:47 - line so let's remove this and save so
104:50 - you can see the default settings so
104:51 - here's our paragraph we have no indent
104:54 - up here at all but we can choose text
104:56 - dash
104:57 - indent and here is a good spot to use
105:00 - em units so i'll say 2em
105:04 - and save and now we have an indent of
105:08 - two m's that's em units and it just
105:11 - indents that first line of course we can
105:13 - set it to a bigger number and you can
105:15 - see it go over even further so you can
105:17 - really see it
105:18 - go into action however two seems about
105:21 - right here so if we need to indent that
105:23 - first line we can do that with text
105:25 - indent and of course there are more text
105:28 - settings that you can pull up as well
105:30 - and
105:31 - refer to mdn the mozilla developer
105:34 - network where they have great
105:35 - documentation for all of these another
105:37 - way to find out about text properties
105:39 - besides mdn is to just type text and
105:43 - then you can see visual studio code
105:44 - start to make suggestions here for some
105:47 - other settings you may want to look up
105:49 - but i've gone over the ones that i
105:51 - believe are the most commonly used okay
105:53 - i'm going to save again so we get back
105:55 - to the default for our paragraph and
105:57 - there's a few other properties that
105:59 - impact typography that do not start with
106:02 - text or font so let's quickly go over
106:04 - those and one is line height
106:07 - line height accepts units just like we
106:10 - went over in our unit and sizes tutorial
106:13 - so we could use different percentages
106:16 - and things like that however it also
106:17 - just accepts a number and the default is
106:20 - usually right around 1.2 so we probably
106:22 - won't see much of a change to our
106:24 - paragraph when i set the line height to
106:26 - 1.2
106:27 - however it starts to look much better
106:30 - around 1.4 or 1.5 so i'll go with 1.5
106:35 - and i think that really increases the
106:36 - readability of our paragraph not that i
106:39 - can read latin but just the line height
106:42 - increase here made a big difference so
106:45 - i'll go ahead and cut this and save and
106:47 - you can compare see how it looks much
106:49 - more crowded and it's a little more
106:52 - jumbled to my eyes at least but if i
106:54 - paste this in
106:55 - and save
106:56 - that would make it much more readable
106:58 - especially at a distance and on a screen
107:01 - sometimes my eyes get weary so i believe
107:03 - that helps okay i'm going to leave line
107:05 - height there because i believe that does
107:07 - help the readability but i'm also going
107:10 - to add letter dash
107:12 - spacing
107:13 - and this does exactly what you'd think
107:15 - it would do it increases the space
107:17 - between the letters of the words so if
107:20 - we put in
107:21 - oh let's go with
107:23 - 1 m
107:25 - and save
107:26 - it really spaces those letters out
107:28 - doesn't it we probably don't want to
107:30 - stick with that unless we're going for
107:32 - some kind of special effect
107:34 - maybe down to 0.25 well it's definitely
107:38 - more readable but it looks kind of weird
107:40 - to me still maybe 0.1
107:44 - and you may see text like that somewhere
107:47 - some time in a heading or something to
107:49 - draw attention to that looks like it may
107:51 - work but i wouldn't use letter spacing
107:54 - too often because it seems normal to me
107:56 - when it's just at the normal setting
107:59 - presented by the browser and in addition
108:01 - to letter spacing there is word spacing
108:04 - so let's go with
108:06 - 2m there and notice the difference it
108:09 - really spaced those words out so we
108:11 - could come back maybe 0.5
108:15 - and yes we've got some extra space
108:16 - between the words once again it's an
108:18 - effect more to me than it does anything
108:21 - to really increase the readability
108:23 - however maybe if we got to a much
108:25 - smaller size maybe it would help let's
108:28 - see
108:29 - well it's noticeable still i don't know
108:31 - if i like it better but it is an option
108:33 - so we have letter spacing and word
108:35 - spacing but i do believe
108:37 - increasing the line height just a little
108:39 - bit from the default that's around 1.2
108:41 - to more like 1.4 or 1.5
108:44 - depending on the text you're working
108:46 - with could really help that readability
108:49 - okay moving on to some font properties
108:51 - now that actually start with the word
108:53 - font and i can put in a dash
108:55 - and let me do that again put in a dash
108:57 - in visual studio code starts to suggest
109:00 - some things the first one it does is
109:02 - font size which we've already gone over
109:04 - let's skip font family for now and go to
109:07 - font weight
109:08 - so for the font weight that's
109:10 - essentially whether it's bold or not in
109:12 - normal or the default is right around
109:15 - 400 so if i save this we won't notice
109:18 - much of a change well i noticed a bit of
109:20 - a change let's see what 300 is like
109:23 - and yet maybe normal was more like 300
109:26 - for this particular font but overall
109:29 - for 300 to 400 is kind of normal let's
109:32 - go back and see what visual studio code
109:34 - offers for values that we could choose
109:36 - from so now you see we've got 100
109:39 - through 900 900 being
109:41 - very bold and 100 being not bold at all
109:45 - and then there's also just some words we
109:47 - could choose bold bolder lighter and
109:50 - then of course normal so let's go with
109:52 - normal
109:53 - and see what that looks like well normal
109:55 - looks more like what we had at 400 there
109:57 - let's go with
109:59 - lighter
110:02 - and save and
110:04 - it's not too light but it's noticeably
110:06 - lighter than it was let's go with
110:08 - bolder
110:10 - and that's very bold we can definitely
110:12 - see the difference there so
110:14 - 100 would be very light
110:17 - and 900 would be very bold and if you
110:20 - don't set the font weight you can expect
110:22 - it to be somewhere right around what
110:24 - normal was to begin with now let's look
110:27 - at font
110:29 - dash style
110:31 - and if we set font style we're setting
110:34 - possibly
110:35 - the italic
110:37 - setting and if we save that's exactly
110:39 - what you expect we have italic text
110:42 - there is also
110:44 - oblique which essentially is a stronger
110:47 - italic it just has a little bit more
110:50 - emphasis there and as you might expect
110:52 - after learning about font weight it also
110:54 - has a normal setting so that is the
110:57 - default and it's basically that without
110:59 - setting a font style as well okay now we
111:02 - get to the big settings something we
111:04 - typically set not on an individual
111:06 - paragraph unless we want to change the
111:08 - font specifically for the paragraph but
111:11 - let's set this on the overall body of
111:13 - the page
111:14 - this is the font family property notice
111:18 - visual studio code is providing lots of
111:20 - suggestions here that we'll go over in
111:22 - just a minute but there are some main
111:24 - generic families and one is serif
111:27 - and if i save
111:29 - it's pretty much what the browser
111:31 - default already was and this is the type
111:33 - of font family that we see in academic
111:36 - papers
111:37 - newspapers
111:39 - papers you'd see in school overall
111:41 - however on the web it's much more
111:43 - popular to use the sans serif family
111:47 - if i save that you can definitely see
111:49 - the change here
111:51 - and this text is more like you would see
111:53 - on many popular web pages even though
111:56 - there may be variations of
111:58 - then another generic family is mono
112:02 - space
112:04 - oops i didn't spell that right i need
112:06 - mono space there we go
112:08 - if i save that you can see mono space
112:11 - has the same spacing for every character
112:15 - so
112:16 - this looks much more like an old
112:18 - typewriter or something like that where
112:20 - it gives each character equal spacing
112:23 - then there is also the cursive family
112:28 - and that looks a little different as
112:29 - well you may have seen fonts like that
112:31 - before
112:32 - and i believe there's the fantasy family
112:36 - save that yes and that also looks
112:38 - different here
112:39 - i would possibly think about using just
112:41 - a little bit of letter spacing it looks
112:43 - a little crowded to me but overall those
112:45 - are the generic families but those are
112:48 - usually used as a fallback because we
112:51 - have more specific fonts that make some
112:53 - changes so when visual studio code was
112:56 - suggesting these font family values
112:59 - let's go with this first one we see here
113:01 - courier new
113:02 - and then courier
113:04 - and i'm going to press alt z so the code
113:07 - wraps over here on the left so you can
113:08 - see this full font family setting so
113:11 - courier new is the first choice and then
113:14 - the second choice is a fallback so if
113:17 - our computer whether it's windows mac or
113:19 - whatever and they do have different
113:21 - fonts installed
113:23 - if our computer doesn't have courier new
113:26 - then it's going to look for courier and
113:28 - finally after that it's going to look
113:30 - for mono space so it doesn't
113:33 - necessarily use all three it uses the
113:36 - first choice if available if not it uses
113:38 - the second choice and if not the third
113:40 - also notice the courier new has a space
113:43 - in it and anytime the font name has a
113:45 - space in it you need to put quotes
113:48 - around the name to handle that spacing
113:51 - the names that don't have a space do not
113:53 - need any quotes at all so let's save
113:55 - this
113:56 - and here we are using courier new i
113:59 - believe on the page which looks a little
114:00 - different
114:01 - now let's choose something else from a
114:04 - different font family so we had the
114:05 - monospace family right there let's go
114:08 - with
114:09 - ariel and you can see visual studio code
114:11 - instantly suggests a full font stack
114:14 - which is what these are when you have
114:16 - multiple choices
114:17 - this suggests ariel then helvetica and
114:20 - then finally the sans serif generic
114:22 - family so let's save that
114:24 - and this is a font you see much more
114:26 - often on the web overall and arial is
114:29 - fairly commonly installed on both mac
114:32 - and windows and probably linux any other
114:35 - type of computer okay after that maybe
114:37 - verdania is another one in that
114:39 - sans-serif family you would see and here
114:41 - this font stack has four choices
114:43 - actually for dania geneva tahoma and
114:47 - then eventually sans serif also notice
114:50 - that sans serif does not need quotes
114:52 - around it because it has a dash it does
114:54 - not have any spaces so if we save that
114:57 - this looks just a little bit different
114:58 - than when we had arial now if we did
115:00 - want to choose a serif font instead of a
115:03 - sans serif font a very popular one is
115:07 - times new roman and you can see the
115:08 - suggestions here from vs code we've got
115:11 - times new roman in quotes again then
115:13 - times and then serif so if we save that
115:16 - this is more like what the default
115:18 - browser font looked like and i've got a
115:20 - couple of good links about what are
115:22 - called web safe fonts and that's
115:24 - essentially what is being suggested here
115:27 - by visual studio code when you use these
115:28 - stacks they're fairly web safe they
115:31 - don't need to be installed from an
115:33 - external source typically the computers
115:35 - would already have these available to
115:37 - the browser i'm going to switch this
115:39 - back to arial
115:41 - choose that and save and i'll leave the
115:43 - page like this now okay i'm going to
115:45 - grab the browser and take it to full
115:47 - screen now
115:48 - and now that we're there i'm going to go
115:50 - to my next tab which is
115:52 - fonts.google.com and now we're going to
115:55 - choose an external font from google
115:58 - fonts and this is very common practice
116:00 - and we can load this in and then use it
116:02 - on our page so here's a very popular
116:05 - font roboto so we can select it and it
116:08 - says it has 12 different styles so now
116:10 - it takes us to the ribato page and you
116:13 - can see the different styles
116:15 - notice this says thin 100 here for this
116:19 - style
116:20 - now this means that that
116:23 - font weight is 100 essentially here's
116:25 - light 300 light 300 italic so you can
116:29 - choose some of the styling right here at
116:32 - google fonts i typically choose not to
116:35 - and just get a generic font and then try
116:37 - to apply my own styles as well but you
116:40 - can see the different ways the font will
116:42 - appear and that's really nice to look at
116:44 - like that so i would typically just
116:45 - choose the regular 400 and see if i
116:48 - could modify it with my own css now
116:51 - there are different ways we can link to
116:53 - this
116:54 - google fonts lets us choose a link that
116:57 - we can put in the head element of our
116:59 - html
117:01 - or
117:02 - it lets us choose an import let's look
117:04 - at the link version first so if i were
117:06 - to do that i would be choosing this link
117:08 - section here and it says i have more
117:10 - than one link selected so i previously
117:12 - had selected another font here i'm going
117:15 - to click the minus symbol remove it so i
117:18 - only have roboto
117:19 - and now there is still this link section
117:21 - i would need to copy all of this and
117:24 - then i would do that with control c for
117:27 - example now i would need to go back to
117:29 - my code so let's do that
117:32 - and here inside of the code i'm going to
117:35 - need to go to the html
117:37 - and then let's make this take up the
117:39 - full screen for a little bit
117:42 - and inside of the html in the head
117:44 - section
117:45 - before the link to my style sheet
117:48 - because it needs to use the fonts i need
117:51 - to paste in
117:52 - these extra link elements that google
117:54 - provided so it's going to get the
117:56 - information from google fonts loaded in
117:59 - and then my style sheet can read it but
118:01 - although we're loading it in here we're
118:03 - not quite finished because we haven't
118:05 - applied it to our css so they will not
118:07 - be used yet at this point i'll drag this
118:09 - back over and now google is also saying
118:12 - we need to apply this line in our css to
118:15 - use it notice roboto has a sans-serif
118:18 - fallback so it's part of that font
118:20 - family
118:21 - i'll copy that
118:23 - go to the css and where i had ariel
118:26 - helvetica and sans serif here
118:29 - i will replace it with what google
118:31 - suggested and provide roboto and sans
118:34 - serif now note they put quotes around
118:36 - roboto and that won't hurt anything
118:38 - either so we'll leave it as they suggest
118:41 - now let's go back to our document
118:43 - and notice we're using the google font
118:45 - roboto now now you can choose more than
118:48 - one font from google as well the more
118:51 - you attempt to load in from google
118:53 - though the longer your page will take to
118:55 - load so i suggest grabbing no more than
118:58 - you absolutely think is necessary i do
119:01 - want to show you how to use the import
119:03 - in your css instead of the link in your
119:06 - html so let's click
119:08 - the at import here and now you can see
119:11 - it's not quite as much code and what
119:14 - else i like about this is it goes right
119:16 - in your css if you want to notice they
119:18 - put it between the style element which
119:21 - could still go inside of the head of
119:23 - your html if you were to copy all of
119:25 - this i'm not going to select the style
119:28 - element tag the opening or closing just
119:31 - what's in between because i'm going to
119:33 - put this directly
119:34 - into my css file so now that i've copied
119:38 - the at import statement i would normally
119:40 - put it right up here at the top of my
119:42 - css
119:44 - and you want it before it would load
119:46 - anything in now of course this is
119:48 - wrapping the code because it's a longer
119:49 - line with the url
119:51 - but i'm going to save this i'm going to
119:53 - go back to the html
119:56 - i'm going to remove all of those links
119:58 - that we had of course leave our own
120:00 - style sheet
120:02 - and now we'll still be able to use the
120:04 - roboto font even though i've removed
120:07 - those links from the head section of the
120:09 - html i now have the import statement at
120:12 - the top of my css and if i go back to
120:14 - our document i can even reload and we
120:17 - still have the roboto font ready to use
120:20 - because we've imported it at the top of
120:22 - the css
120:24 - let's move on to styling links with css
120:27 - you can see i've got visual studio code
120:29 - open i have some basic styles in from
120:32 - the last tutorial where we have some
120:34 - padding a font size and a font family a
120:38 - small font stack set on the body element
120:41 - we're also importing in a font from
120:44 - google fonts you can do that if you want
120:47 - to and the starter code is available or
120:49 - you can set your own font family stack
120:51 - if you want to as well
120:52 - also over in the file tree you'll see i
120:56 - have an
120:57 - index.html and in this index i have not
121:00 - only a header with an h1 heading i have
121:03 - a main element that has about five
121:06 - paragraphs and at least four of those
121:08 - paragraphs have links in them and then i
121:10 - have a couple of other html files
121:13 - very very basic they just contain an h1
121:15 - element in the body that's because i
121:18 - needed something to link to so i created
121:20 - a couple of those files as well
121:22 - so let's go back to the style and i will
121:25 - resize visual studio code to pull it
121:27 - over to this half of the page and i'm
121:29 - going to hide the file tree by pressing
121:31 - ctrl b
121:33 - and we'll pretty much be able to see our
121:34 - styles here the only thing is a long
121:36 - line like this import of the font will
121:39 - wrap now over on the right you can see
121:42 - i've got chrome open and i'm using the
121:44 - live server extension so anytime we make
121:46 - an update to our css we'll automatically
121:48 - see it over here on the right styling
121:51 - our hypertext links
121:53 - is really an extension of the typography
121:56 - that we just covered in the last
121:57 - tutorial in this series because it's
121:59 - still text so a lot of the things we
122:02 - learn about typography we can apply
122:04 - to our links but also these links have
122:07 - their own default styles that are
122:09 - different from the rest of the text on a
122:11 - page and when we talk about links in
122:14 - html we're talking about an anchor tag
122:16 - and usually that links to something with
122:19 - an href attribute so these first two
122:21 - links that i have linked to google
122:23 - searches they're different searches one
122:25 - searches for web links and one searches
122:27 - for hyper text links
122:29 - and then i've got a couple of links that
122:31 - just go to the other two html pages we
122:33 - created guitars and javascript although
122:36 - those pages actually do not have that
122:37 - content
122:38 - just went ahead and created links that
122:40 - would hold that content so let's note
122:42 - the default styles of these links
122:45 - they're underlined that's the first
122:46 - thing to note
122:48 - also if the link has not been visited
122:50 - it's a blue color but notice the
122:53 - hypertext links link that we have here
122:56 - and it is purple so we know this is a
122:58 - visited link and we can tell all of this
123:00 - just by looking at the page
123:02 - also when we point at a link it changes
123:05 - our cursor from this arrow
123:07 - to a pointer it's a little hand pointing
123:09 - its finger at the link so that is called
123:12 - a pointer cursor and then there's
123:14 - another default style that we can't even
123:16 - see yet and that is when we click on a
123:18 - link so i'm going to click and hold down
123:20 - on this link
123:21 - and it turns red so this is when the
123:24 - link is active and that is another
123:26 - default style that is set
123:28 - so i'm going to go ahead and let go and
123:30 - it goes back to purple without visiting
123:32 - the link
123:33 - and if we did visit the link and come
123:35 - back it would still be purple as visited
123:37 - so now that we know the default styles
123:39 - let's look at how those are set the
123:41 - first one being text decoration
123:45 - that we would set and that is what
123:47 - controls the underline so the default
123:49 - would be underline and if we save we
123:52 - shouldn't see any difference
123:54 - but oftentimes developers want to take
123:56 - away that underline and style something
123:59 - different you do want to make sure that
124:02 - it still indicates somehow that these
124:04 - are links you want them to stand out in
124:06 - some way and an underline is a good way
124:08 - for that to happen but if you want to
124:10 - take that away you can but you have to
124:13 - do something else to make the link stand
124:15 - out okay we also mentioned the cursor so
124:18 - we can set a cursor
124:20 - but really cursors have semantic values
124:22 - and i'll see what visual studio code
124:24 - pulls up there's lots of different
124:25 - choices here but let's look for example
124:28 - at a not allowed cursor and it has a
124:31 - semantic value it tells us something
124:34 - just when we see it so when i point at
124:36 - javascript you can see we get the little
124:39 - icon that says this is not allowed and
124:41 - we know what that means so really we
124:44 - don't want to change that from a pointer
124:46 - most of the time there is
124:48 - not really a reason to do that so let's
124:50 - keep that as pointer but i'll leave that
124:52 - here so you know the cursor can be set
124:55 - to different values and of course the
124:57 - starting color before the link has been
124:59 - clicked is just set by color and here we
125:02 - see blue is the default color and i
125:05 - believe that is the actual default color
125:07 - and not some variant of blue let me save
125:10 - again and see if i see a difference
125:12 - and no it really looks the same to me
125:15 - but it may look different to you
125:17 - but once i set this to blue notice what
125:19 - happens to the visited link it's changed
125:22 - because it overwrote the default value
125:25 - and then we haven't set anything for the
125:28 - visited link so we need to learn how to
125:30 - do that as well so what i'm about to
125:32 - show you is called a pseudo class so
125:35 - we'll once again select the anchor
125:37 - element but now we put a colon
125:40 - and now i can put
125:42 - a definition after here that defines
125:44 - which pseudo class that i want to select
125:47 - and right now i want to select
125:49 - the visited pseudo class and pseudo
125:52 - classes represent the current state of
125:54 - the element because a state of an anchor
125:57 - element can change it is either been
126:00 - visited or it hasn't and there are some
126:01 - others that will cover as well so for
126:04 - visited let's go ahead and put this back
126:06 - to the default
126:08 - and save
126:09 - and now you can see our hypertext link
126:12 - is once again purple now our other links
126:14 - haven't been visited so they're still
126:16 - blue now let's look at another pseudo
126:18 - class that we can define and this pseudo
126:21 - class is called hover when we hover over
126:23 - the link it doesn't have a default value
126:25 - right now if we hover over a link it
126:27 - doesn't change at all either the visited
126:29 - or the not visited link both of them
126:32 - still just stay the same so let's go
126:34 - ahead and change this
126:36 - and for now let's just choose a
126:37 - different blue and i'm going to show you
126:40 - a trick or two where you can choose
126:42 - something kind of in the same range of
126:44 - the color you have selected for your
126:46 - link but first let's just
126:48 - choose a blue randomly here so now when
126:50 - we hover
126:52 - notice javascript is changing colors
126:54 - when i hover over it and even the
126:56 - visited hypertext links will change
126:59 - color as well because now when we hover
127:01 - over the link we have changed that state
127:03 - it's now in the hover state and it is
127:06 - changing the color of the link and then
127:07 - remember we still have the active state
127:10 - as well but
127:12 - right now that's not working either
127:14 - because that was a default style and we
127:17 - have overwritten that what has followed
127:19 - has been visited and hover
127:21 - and really we don't have the default
127:23 - style applied anymore so let's go ahead
127:26 - and put in that active link
127:29 - and we can change it to something like
127:31 - what it was i think it was red so that
127:33 - will definitely stand out
127:35 - select that and now when i click hyper
127:37 - text link it definitely turns red and i
127:40 - think i visited the link and now we're
127:42 - searching for hypertext links so i'll go
127:44 - back to our page
127:45 - and we can see that this link was
127:47 - visited but if i click and hold down we
127:49 - can see that it's active and now i'll
127:51 - just pull away and not visit the link
127:53 - now we have to consider specificity and
127:55 - we also have to consider the order these
127:58 - are in for the cascade so if we put
128:01 - visited
128:02 - above
128:04 - our anchor selector
128:06 - visited will still be applied here even
128:09 - though the anchor selector comes
128:11 - afterwards in the cascade and that's
128:13 - because this visited pseudo class has
128:16 - more specificity than just an element
128:19 - just the anchor element and we can see
128:20 - that if we go to the specificity
128:22 - calculator and i have this linked to in
128:24 - the resources and now if i just put in
128:27 - an anchor element you can see the score
128:29 - is just 0 0 1 but if i put in an anchor
128:32 - element with a visited or any other
128:36 - pseudo selector now the pseudo selector
128:39 - here is a class i said pseudo selector a
128:41 - pseudo class i'm selecting the pseudo
128:44 - class classes attributes and pseudo
128:46 - classes so this has more specificity and
128:50 - that's why the visited link continues to
128:53 - stay purple even though the anchor
128:55 - element comes afterwards in the cascade
128:58 - but that's not usually the order we want
129:00 - things we usually kind of want to think
129:01 - about it in the order that we would have
129:03 - them so i'm going to put that visited
129:05 - back
129:06 - but now visited hover and active all
129:09 - have the same specificity and one can
129:12 - overwrite the other so we really have to
129:15 - think about the order we put those in
129:17 - let me save this and right now they're
129:19 - all working because this is the proper
129:21 - order have your anchor tag and then have
129:23 - your visited pseudo class your hover
129:26 - pseudo class and finally you're active
129:28 - and they should all work so when we
129:30 - hover it works
129:31 - visited of course is working and if i
129:34 - click active it is working however if i
129:37 - rearrange these they may not so let me
129:40 - go ahead and take hover
129:42 - and put it above visited and so now
129:45 - visited comes after in the cascade and
129:47 - when i hover that still works it hasn't
129:50 - been visited but let's check our visited
129:52 - link
129:53 - the hover doesn't work anymore so it's
129:56 - important to have these in the correct
129:57 - order i'll take hover
129:59 - and put it back where it belongs in this
130:02 - order so you want your anchor tag
130:05 - then your pseudo class of visited
130:07 - then your pseudo class of hover and
130:10 - finally your pseudo class of active
130:13 - and there's one more very important
130:15 - pseudo class and you usually see it
130:17 - added to the same style as the hover and
130:20 - we can do that here
130:22 - just by putting a comma
130:24 - and then putting in the focus pseudo
130:26 - class and this really makes your page
130:29 - more accessible because
130:31 - if a visitor or a user of your page is
130:34 - using a screen reader and instead of
130:36 - using a mouse they are tabbing through
130:38 - your page
130:39 - notice that right now we've selected the
130:42 - first link here and it has the outline
130:44 - around it i am tabbing through the links
130:47 - and by doing that
130:49 - when it has focus it is changing the
130:52 - color of the link just like we did with
130:54 - the hover and that's important to make
130:56 - your page accessible as well okay i'm
130:59 - going to take the focus off of that link
131:01 - and i'm going to remove all of these in
131:03 - the anchor tag all of these styles
131:04 - because they're the default styles
131:06 - anyway and what i do want to put in here
131:09 - is a different color
131:11 - we often see
131:12 - a color of black we already have black
131:15 - text
131:16 - but notice
131:17 - now the links are underlined with the
131:19 - black text and i commonly see this on
131:22 - web pages as well so we don't always
131:24 - take away the underlines sometimes we
131:26 - use the same color as the rest of the
131:28 - text but we add the underline to make
131:30 - them stand out notice you can still have
131:33 - a hover you can still have a visited
131:35 - color if you want to but oftentimes you
131:37 - don't see a visited color either so we
131:40 - can just comment that out and leave it
131:41 - in the code
131:42 - and now we don't have a different color
131:45 - for a visited link and that's okay if
131:47 - you want to do that
131:48 - but we still have a hover color and we
131:51 - still have a focus color as well
131:54 - so now let me back this up just i wanted
131:56 - to show a different version of that i'll
131:58 - go ahead and put the visited color back
132:01 - in
132:02 - and up here let's go ahead and put in
132:04 - blue
132:06 - let's do a different color though let's
132:08 - do steel blue i like that color
132:10 - we'll save and now we have steel blue
132:13 - links
132:14 - and when we mouse over it looks okay but
132:17 - let me show you a couple of things you
132:19 - can do to stay within the same color and
132:22 - yet make it noticeable that you are
132:24 - hovering going back to when we covered
132:27 - colors in the different tutorial we
132:30 - learned how to use the vs code color
132:32 - selector so i moused over the color here
132:34 - and it pulled up the color selector and
132:36 - i can click on the color bar
132:38 - and go to hex from the rgb and i can
132:42 - also go to hsl and i'm going to choose
132:44 - hsl here
132:46 - and now let's leave it at that and
132:48 - notice it's 207 44 and 49.
132:52 - now let me just copy this
132:56 - and i'm going to take it to our hover
132:58 - instead of the dodger blue and now right
133:00 - here this number is the number we want
133:03 - to change it changes the color and so
133:06 - that pulled it up
133:07 - and now we can just make this a little
133:10 - lighter
133:11 - choosing something different on the
133:12 - color wheel if you remember the way
133:15 - these numbers work it's just something
133:16 - different in the wheel i'll take it down
133:18 - to 189 notice the other numbers are
133:20 - still the same 44 and 49 so we've just
133:24 - changed the shade just a little bit on
133:26 - the color wheel and when we mouse over
133:29 - it kind of goes with the color theme and
133:32 - that is a good way to change that so in
133:33 - hsl you're really only changing
133:36 - the first number and you're selecting a
133:38 - number
133:39 - close to what you had and that is one
133:42 - way to get a similar color that
133:44 - complements what you originally had
133:47 - another approach and i will go ahead and
133:49 - comment out the color
133:53 - but another approach is to use an
133:55 - opacity property which is making
133:58 - something transparent
134:00 - and remember with colors we could add
134:03 - that right inside of this hsl as well
134:06 - but i'll show you how to do it here with
134:08 - the opacity property and let's put this
134:10 - to
134:11 - 1 would be the max and 0 would be
134:14 - completely
134:15 - invisible transparent so let's put this
134:18 - around 0.9
134:20 - to just give it a little bit of
134:22 - transparency when we mouse over
134:25 - and you can see the color changes it's
134:27 - keeping the same color but it just gets
134:30 - a little bit lighter and maybe the 0.8
134:32 - would even be more noticeable let's try
134:34 - that
134:37 - and that also works but when you learn
134:40 - about this
134:41 - note that opacity will change everything
134:43 - so if you use this on something else
134:46 - let's go up here
134:48 - and let's put in the main element
134:52 - now if i put this in
134:55 - it made everything on the page a little
134:57 - bit lighter i'll make it much more
134:58 - noticeable here
135:00 - now that made all of the paragraphs
135:03 - much more transparent so you want to be
135:05 - careful when you use that now remember
135:07 - also
135:08 - in the hsl and also in rgba there is a
135:13 - channel that allows you to add a
135:15 - transparency value so here we could also
135:18 - do 0.8
135:22 - and now when i mouse over we'll still
135:24 - get a transparency
135:26 - as well
135:27 - and it's also changing color there so if
135:29 - we wanted to we can put this back to the
135:31 - exact same color but now we've added the
135:34 - transparency
135:36 - so if we save and mouse over we still
135:39 - get a little lighter color and it's
135:40 - really the same exact shade we're just
135:43 - lightening it up with a little bit of
135:44 - transparency there okay before we finish
135:47 - i just want to emphasize that these
135:49 - pseudo classes are not just for changing
135:52 - colors you can adjust other things
135:54 - although changing the color of links and
135:57 - the visited hover focus active all of
136:00 - those pseudo classes that's a common
136:02 - application of this
136:04 - but we could do other things as well one
136:06 - thing i've seen is changing a background
136:09 - so let's change the background here to
136:11 - gold and it will be kind of like a
136:14 - highlighter so when we focus and i'm
136:17 - tabbing through we're kind of
136:18 - highlighting the links of course you'd
136:20 - want to choose a complementary color
136:22 - there as well
136:23 - but that is something else i have seen
136:26 - before is kind of adding a highlight to
136:28 - each link as it has focus or as it's
136:31 - hovered over
136:32 - let's move on to styling lists with css
136:36 - you can see i've got visual studio code
136:38 - open and the starter code has an
136:40 - index.html file and in this index.html
136:44 - file we have a header inside the body
136:47 - that has an h1
136:49 - and then we have a main element and this
136:51 - main element has two articles in it the
136:54 - first article element has an ordered
136:58 - list and we can see that with the h2
137:00 - title and then the ordered list
137:01 - underneath the second article has an
137:04 - unordered list and we can see that with
137:06 - the h2 title and the unordered list so
137:09 - the only difference between these two
137:11 - lists
137:11 - is the beginning element the ol or the
137:15 - ul ol being ordered list and ul being
137:18 - unordered list so i wanted to take a
137:20 - look at the html first
137:22 - the css that we're starting out with
137:26 - just has a couple of basic things an
137:28 - import from google fonts where we're
137:31 - using the roboto font that you see here
137:34 - and then just a little bit of padding
137:35 - and setting the font size to two rims in
137:38 - the body so the default for the browser
137:41 - is probably 16 pixels so when we double
137:44 - that with two rims we're now at 32
137:46 - pixels for anything in the body let me
137:49 - pull visual studio code over to the left
137:51 - side of the screen and here in chrome we
137:54 - can see this page and so we have our
137:56 - ordered list here on top
137:58 - our unordered list underneath you can
138:00 - see the ordered list has ordinal numbers
138:02 - here one two three the unordered list
138:05 - just has bullet points
138:07 - now i'm going to go ahead and hide the
138:08 - file tree so we can see our css a little
138:11 - bit better also press alt z so anything
138:13 - that would be longer like this url for
138:16 - our google font wraps to the next line
138:18 - also worth noting that we're using the
138:20 - live server extension so
138:22 - any change we make here in the css will
138:24 - automatically see over here in the
138:26 - browser as it will update immediately
138:29 - let's style the ordered list first and
138:31 - the first property we want to look at
138:33 - for the ordered list is list dash style
138:36 - dash type and here we get a list from vs
138:39 - code and we can choose different things
138:43 - to appear to the left where we see the
138:45 - numbers so for example let's choose
138:48 - lower alpha and i'll save and now we can
138:51 - see we have
138:53 - lower alphabet letters here so abc
138:56 - otherwise we could choose some other
138:58 - things that i don't even recognize they
139:00 - have in here like
139:02 - let's get this reference again let's
139:04 - look at
139:05 - oh georgian
139:07 - and maybe somebody else would understand
139:09 - these symbols i certainly don't but here
139:11 - we see symbols to the left that
139:13 - represent whatever georgian is
139:16 - usually the default here is
139:19 - decimal and so if i save that we're back
139:21 - to our numbers that's the default value
139:24 - you could also see
139:26 - i believe it said decimal leading 0.
139:28 - there we go so if we chose that we would
139:31 - get a 0 in front of each of the numbers
139:34 - so you've got lots of choices to make
139:36 - and by the way list style type and all
139:38 - the properties we'll look at can apply
139:40 - to unordered lists as well we're just
139:42 - looking at this first with the ordered
139:44 - list
139:45 - so i'm going to go ahead and choose
139:47 - something here that will make this look
139:49 - like an unordered list at first so let's
139:50 - look at
139:52 - bullet i believe it was bullet let me
139:54 - check the selection
139:56 - and did i see bullet here
139:59 - not bullet it's disk there we go i call
140:02 - it bullet points but they're actually
140:04 - disks is what they're referred to
140:06 - so this looks just like our unordered
140:08 - list now so the only way we could tell
140:10 - that this is an ordered list is to
140:12 - actually look at the html code at this
140:14 - point so we can make one look like the
140:16 - other another choice i often see
140:19 - is circle but because it's an ordered
140:22 - list let's stick with something that is
140:25 - in order so i believe i saw an upper
140:28 - roman let's choose that one and save and
140:31 - so now we see roman numerals one two and
140:33 - three now while we're mostly focusing on
140:36 - the css primarily let's go to the html
140:40 - quickly and there's a couple of
140:41 - attributes we can add that will change
140:44 - how our list appears one is the start
140:47 - attribute so let's tell this to start
140:49 - at three and when i save now you can see
140:52 - we get the numbers three four and five
140:55 - and then we can also add a
140:58 - reversed attribute
141:00 - and as you might guess now it counts
141:02 - down three two one because it starts at
141:06 - three so if we started this at five
141:09 - knot would count down five four three
141:12 - it's also worth noting that if we are
141:14 - not using numbers over here such as the
141:16 - roman numerals or decimals we still need
141:18 - to use a number value here for this
141:21 - start attribute so if i switch this back
141:23 - it's just going to be what references
141:25 - that so i will switch this to
141:28 - lower alpha once again and save and
141:31 - you'll see it references the fifth
141:33 - letter of the alphabet the fourth letter
141:35 - and the third letter as it's counting
141:37 - down from five to three let's also
141:40 - consider that we could not have any kind
141:42 - of bullet or numeric out to the left so
141:45 - let's just put none here and save and
141:48 - you'll see that that's eliminated but
141:50 - notice it's still indented and that's
141:52 - because we have some default padding so
141:54 - we would have to set the padding to zero
141:57 - if we want our list items to go all the
141:59 - way back to the left let's take a look
142:01 - at that unordered list now so i'll put
142:03 - ul here in our style sheet and let's set
142:07 - the list style type on it as well i'm
142:10 - going to set that to square instead of
142:12 - the disks and if we save we can see we
142:15 - have square bullet points now now the
142:18 - next list property to look at
142:20 - is list style position but first let's
142:24 - look at an issue that might get caused
142:26 - with list style position so in our
142:28 - unordered list if i set the text align
142:32 - to center and save
142:34 - notice what happens to the bullet points
142:36 - i've centered the text but the bullet
142:38 - points are still to the left
142:40 - some browsers have been known to handle
142:42 - this differently
142:43 - and send the bullet points to the middle
142:46 - and some leave them to the left and the
142:48 - difference is the list
142:51 - style
142:52 - position default value some browsers
142:55 - have a default of outside such as chrome
142:58 - and some have it inside or at least they
143:01 - have at one point i haven't checked
143:02 - browsers in a while instead of chrome
143:05 - but right now i have to set the list
143:07 - style position to inside to get the
143:09 - bullet points to align
143:11 - with the text
143:13 - but if we set them to the default
143:15 - outside they stay out to the left i'm
143:17 - going to scroll up for some more room as
143:19 - we look at this unordered list and now
143:22 - notice if i set the color to
143:25 - a blue here with hexadecimal
143:27 - and save
143:29 - it changes
143:30 - all list items to blue so that is worth
143:33 - noting as well if you set the color
143:34 - property it changes the bullet points
143:37 - and the text to blue we can set other
143:40 - text properties to or typography
143:42 - properties such as line height so i'm
143:44 - going to set this to 1.6 and you'll see
143:47 - some extra space between each of the
143:49 - list items now the last list style
143:52 - property we want to look at is list
143:55 - style
143:56 - image and we can set an image to use
143:58 - instead of the bullet points now let's
144:01 - quickly look at the file tree notice
144:03 - i've got an images file and in that i've
144:05 - got a check mark image it's check mark
144:08 - dot png and we're going to use that as
144:11 - we set this i'll hide the file tree
144:12 - again but now we have to specify url and
144:16 - then parentheses
144:17 - and then navigate the file path to the
144:20 - image so we're going up out of the css
144:23 - folder with two dots
144:24 - now we put a slash and go into the
144:27 - images folder and then we choose our
144:29 - check mark and i will save
144:32 - and notice those bullets have now got
144:35 - changed to these green circles with a
144:37 - check mark in them and that's our check
144:39 - mark png and there's also shorthand for
144:42 - all three of these list style properties
144:44 - i'm going to press shift alt and the
144:46 - down arrow to copy down our list style
144:48 - image
144:49 - and then i'm going to remove the image
144:52 - and we just say list style and we can
144:55 - put all three properties here with
144:56 - shorthand so i'll quickly
144:59 - cut this with ctrl x and first we'll
145:01 - just set this to square and you'll see
145:04 - how it overrides
145:05 - the list style image so we're back to
145:08 - our squares here for the bullet points
145:10 - but then we can also supply an image and
145:13 - when we do that the square becomes the
145:16 - fallback in case the image would not
145:18 - load and so now when i save we've once
145:21 - again got the image and then finally we
145:24 - can provide the position and so i'll say
145:27 - inside and now the images are over with
145:30 - the text of each list item so this is
145:32 - called shorthand we just say list style
145:35 - and we can provide one two or all three
145:38 - of these values that would be the list
145:40 - style type the list style image and the
145:44 - list style position we can also override
145:47 - styles from the unordered list for
145:49 - example on each list item now this would
145:52 - apply to all list items even in the
145:54 - ordered list because i'm just saying li
145:57 - and not specifying the unordered list or
145:59 - the ordered list as well but we can
146:00 - override styles because this comes later
146:03 - in the cascade as well but it's also
146:05 - more specific
146:06 - because we're down to the nested list
146:08 - items so if i wanted to change the color
146:11 - of all list items
146:13 - let's do something obvious here to red
146:16 - and there i put a hashtag first there we
146:17 - go just the word red now they've all
146:20 - changed to red however if i just wanted
146:22 - to change the unordered list items i'd
146:25 - have to put the ul first and then save
146:28 - and now it just applies to the unordered
146:30 - list items however what if i just wanted
146:33 - to make the second list item read now we
146:36 - can use another pseudo class i'll put a
146:39 - colon and then nth which is nth des
146:43 - child
146:44 - and then parentheses and now i'll just
146:45 - put the number 2 inside the parentheses
146:48 - and notice it only changed the second
146:51 - list item in the unordered list to red
146:54 - so we were more specific and we just
146:57 - changed one list item likewise our nth
147:00 - child pseudo class also accepts the
147:02 - words
147:03 - odd so if we pass in odd now the odd
147:07 - numbered list items are red and likewise
147:10 - we could pass in even and do the same so
147:13 - now we're back to just number two
147:15 - because it's the only even number and it
147:17 - has turned red and of course you could
147:19 - apply other styles besides just the
147:21 - color here as well if you wanted to
147:23 - as you select each individual line item
147:25 - or all line items in any specific list
147:28 - okay from that i want to move on from
147:31 - the pseudo class of nth child to a
147:34 - pseudo element which we have not
147:36 - introduced any of those yet in this
147:37 - series this pseudo element is called
147:39 - marker and it starts with two colons and
147:42 - then the word marker and all pseudo
147:44 - elements should start with two colons
147:46 - instead of one like a pseudo class now
147:49 - we can change some things about the
147:51 - marker and that's usually what we would
147:52 - have here for a bullet or letters
147:55 - outside of an ordered list or numbers so
147:57 - let's go ahead and comment out the list
148:00 - style image and i do that with shift alt
148:03 - in the letter a and then it comments
148:05 - that out here in visual studio code and
148:07 - i'll save now we're back to
148:10 - blue and red
148:12 - squares which we specified up here in
148:15 - our unordered list so let's say we want
148:17 - to change all of those back to a black
148:19 - color but keep the text in blue and red
148:23 - so here we can specify a color for the
148:25 - marker and specify the hex code for
148:28 - black and save and now you can see once
148:31 - again we have black squares out here as
148:34 - markers i'm going to scroll up for some
148:35 - more room because there's a few other
148:37 - properties we can add here as well i'm
148:40 - going to change this to red actually
148:42 - because
148:42 - we'll highlight something like we would
148:44 - on a sale page i'll change the font
148:46 - family of the markers and here i'll put
148:49 - fantasy
148:50 - and might change the size a little bit
148:52 - but they're currently still squares
148:55 - we can set the font size if we wanted
148:57 - bigger markers like 1.5 m and save you
149:00 - can see those markers got quite a bit
149:02 - bigger i think we'll just go with one m
149:04 - for now
149:05 - and then we can also provide content and
149:08 - this is where it gets interesting so
149:10 - imagine we had a page
149:12 - selling sub sandwiches or pizzas or some
149:15 - food item whatever was on sale and we
149:18 - said only five dollars and put a couple
149:20 - of arrows
149:21 - and now if we save you can see that
149:24 - applied here but notice we didn't
149:26 - specify a list either so it also applied
149:29 - to the un or i mean to the ordered list
149:32 - we have the unordered list down here but
149:33 - before we had told the ordered list to
149:36 - have a list style type of none but when
149:39 - we provide content it's still applied so
149:42 - in that regard you want to be more
149:44 - specific and we could say just apply
149:46 - that to our unordered list and this is
149:48 - just like above where we supplied the ul
149:51 - we could also actually say
149:53 - li here and it would be the same result
149:55 - as well but it's all markers in our
149:58 - unordered list so we don't have to put
150:00 - the li there and it identifies the
150:02 - unordered list and changes now what if
150:04 - you want a space well currently we have
150:07 - set the list style position to inside so
150:10 - when we centered the text this kind of
150:13 - threw that off a little bit
150:14 - but also
150:16 - we didn't allow a space so maybe we just
150:18 - put a space in our content and save and
150:20 - that did create a little bit of space
150:22 - you could do it that way you could add
150:24 - left padding
150:26 - but since these are positioned inside
150:28 - the left padding would be to the left of
150:30 - the markers so that wouldn't work if you
150:33 - did have your markers over here on the
150:35 - left and provided left padding and of
150:38 - course that would be by setting this to
150:40 - outside i could do that really quick and
150:42 - you would see what happens
150:44 - now the padding would come after the
150:46 - markers but really we're going to have
150:49 - it
150:50 - inside
150:51 - and now we just provided that space with
150:54 - a little bit of space right there now as
150:56 - you learn more about web development you
150:58 - can get creative with this content you
151:00 - can put in what is called an spg and
151:03 - those are often used for images and
151:05 - icons you could also put in something
151:07 - called font awesome icons and other
151:09 - types of icons as well so this does hold
151:12 - different types of content but it's easy
151:13 - just to type in here and show an example
151:16 - like that now before i finish there is
151:18 - one other html attribute that can be
151:21 - helpful although it's rarely used i do
151:24 - want to show it before we're finished so
151:26 - let's go ahead and switch this back
151:28 - to something like
151:30 - lower alpha there we go for our ordered
151:33 - list and now our edc shows up and if you
151:36 - remember that's because
151:38 - we are starting with the number five and
151:40 - it's reversed so if these were numbers
151:43 - it would be five four three it
151:45 - corresponds to the letters but we can
151:47 - also specify a value so
151:50 - if we say value here and we put in 26
151:55 - this will definitely make a difference
151:57 - now notice
151:58 - z is the 26th letter of the alphabet so
152:02 - the number corresponds still to whatever
152:04 - the order is and we're going in reverse
152:06 - order so instead of x y z it went z
152:09 - y right here but this remained as number
152:12 - five because that's where this started
152:14 - so this value attribute
152:16 - may come in useful in rare occasions i
152:18 - definitely wanted to cover it i almost
152:20 - forgot to but there we go i hope you
152:23 - have learned a lot about styling lists
152:26 - let's build a mini project for beginners
152:29 - after completing several lessons in this
152:31 - css tutorial series i think it's a good
152:33 - idea to bring all of these different
152:35 - pieces together and apply what you've
152:37 - learned
152:38 - i've got visual studio code open and in
152:40 - the starter code you can see i have an
152:43 - index.html file
152:45 - and when we look at the body of this
152:47 - index file you can see it has a nav
152:50 - element and inside the nav element we
152:52 - have an h2
152:54 - and
152:55 - a unordered list and this unordered list
152:58 - has several list items all have their
153:01 - own anchor links and it doesn't really
153:03 - matter where they're linking to today i
153:04 - just have it linking to our
153:06 - other pages one and two that were there
153:08 - just to link to in previous tutorials
153:11 - but what we have is a list of appetizers
153:14 - entrees desserts beverages and then it
153:17 - just says about things you might
153:19 - actually find on a menu in a restaurant
153:21 - as well as a menu on a restaurant's
153:23 - website and then at the very bottom here
153:26 - we have one paragraph that says learn
153:28 - more about amazing foods and i just
153:30 - linked to an article on amazing foods
153:32 - that's because we want to have one link
153:34 - that is not in the list so we can select
153:37 - it separately or avoid selecting it if
153:40 - we want to so what i'm going to do now
153:42 - is drag visual studio code to the left
153:44 - and we can see chrome on the right i'm
153:46 - using the live server extension so we'll
153:48 - immediately see any changes and here is
153:51 - our basic page really no styles applied
153:53 - yet i'll press ctrl b to hide the file
153:56 - tree and click on the style.css
153:59 - you can see we're importing the roboto
154:01 - font from google fonts like we learned
154:03 - how to do in the typography chapter but
154:06 - we're not even using it yet so really no
154:08 - styles applied to the index.html so
154:12 - let's start now and if you remember from
154:14 - the box model chapter we covered a small
154:17 - css reset so the first thing i'm going
154:19 - to do is apply that reset so a margin of
154:22 - 0
154:23 - padding of 0 and then we'll set box
154:26 - sizing to
154:28 - border box and when we save this will
154:30 - eliminate some default styles and now we
154:33 - can see everything is way up here in the
154:35 - corner so any of that default padding
154:38 - and margin
154:39 - is gone
154:40 - now let's select the body and we'll add
154:42 - a few styles to it
154:44 - that will be inherited throughout the
154:46 - page however the first one will not be
154:48 - it just applies to the body and that's
154:49 - to put just a little bit of a margin
154:51 - there i actually want rem
154:53 - and that way when we save it pushes the
154:56 - text away from the top and the left just
154:58 - a little bit okay after that we're going
155:01 - to go ahead and set the font family so
155:03 - we start using that roboto font and
155:05 - we'll set it to
155:07 - roboto with a fallback of sans serif and
155:12 - we can save that change and instantly we
155:14 - see the the
155:16 - font change over there to the right
155:18 - after that i want to go ahead and align
155:21 - the text for everything on this page to
155:24 - the center normally we might put that
155:26 - just inside of one area we were building
155:30 - but in this case in this example
155:32 - everything on the page will be centered
155:33 - for a menu and now you can see that
155:35 - centered over there on the right okay if
155:37 - we look back at our html notice we're
155:40 - using a nav element inside the body so
155:43 - the next thing we're going to select in
155:44 - our css is the nav element i'll scroll
155:47 - up just a little bit and select the nav
155:50 - let's put a border around the nav so
155:53 - we'll say border 2 pixels solid and then
155:56 - we'll choose
155:58 - 333 which is just a little bit lighter
156:01 - shade of black instead of 0 0 0. so if
156:03 - we save that you can see the border
156:05 - around our nav now now let's add a
156:08 - border radius
156:10 - and that will let us round the corners
156:12 - off just a little bit we'll set that to
156:13 - two ram and when we save you can see
156:16 - those corners now change to rounded
156:18 - corners we learned about border and
156:19 - border radius in our box model lesson we
156:22 - also learn about margin i'll set the
156:24 - margin for the top of the nav to zero
156:28 - i'm going to set the margin for the left
156:29 - and right to auto which will center it
156:32 - if our page is wide enough and it needs
156:34 - to be in the center and that means the
156:37 - margin will eat up the space that's left
156:39 - on the left and the right and then we'll
156:41 - also have a margin on the bottom of one
156:44 - rim now we won't notice that auto
156:46 - spacing because right now the nav is a
156:48 - block level element so it has a hundred
156:50 - percent width except for the little bit
156:53 - of margin that we provided on the body
156:55 - here so we have some space but if we set
156:58 - a max width
157:00 - for this to let's set it to 600 pixels
157:05 - now if we expand the page
157:07 - the nav element won't expand to the full
157:09 - 100 width so let me grab this and drag
157:13 - it over so it takes up the full page and
157:15 - we can see now that our nav
157:19 - is not the full width of the page so we
157:22 - have limited it to a max width of 600
157:24 - pixels and setting the margin to auto on
157:27 - the left and the right has
157:29 - resulted in centering the nav on our
157:31 - page notice we also haven't
157:34 - styled the list item yet so we see these
157:36 - bullet points here outside of the nav
157:39 - we've centered our text but as we
157:40 - learned in the list
157:42 - tutorial that the bullet points here are
157:46 - set to default to be on the outside if
157:48 - we want them at all and i think we're
157:50 - going to remove them so i'll pull this
157:51 - back over to the right and we'll
157:53 - continue styling the page i'll scroll up
157:55 - just a little bit but before we move on
157:57 - from the nav we can set some typography
157:59 - here that will be inherited so let's set
158:01 - the font size now to three rim
158:05 - and let's set the line height
158:08 - to
158:09 - seven rim and when we save things should
158:11 - be much bigger looking back at our index
158:14 - html again now inside the nav we have an
158:16 - h2 before we get to the unordered list
158:19 - so let's style that h2
158:23 - the first thing we'll do is give it just
158:25 - a little bit of padding so we'll set
158:26 - that to one rim
158:28 - and now let's set a
158:30 - well let's set a background color first
158:34 - and we'll set this to gold so if we save
158:37 - now we can see we have a background
158:39 - color on our h1 and it has the full
158:42 - width of the nav because it's a block
158:44 - level element so it has a hundred
158:46 - percent width of what's available to it
158:48 - but notice our border radius is not
158:50 - being respected up here the gold
158:53 - continues to look like a square although
158:55 - we set a border radius on the nav
158:58 - to have those curled or rounded corners
159:01 - so now we need to adjust the border
159:03 - radius here on our h2 as well and what
159:06 - we'll do is start in the top left we'll
159:09 - set this to
159:10 - two rim and now the top right is also
159:13 - two rim because that's where the curved
159:16 - corners are then we'll have zero on the
159:18 - bottom right and zero on the bottom left
159:21 - because that still needs to be
159:23 - the square corners so we'll save and now
159:26 - notice the gold matches the curve of our
159:30 - menu on the top left and top right okay
159:33 - i'll scroll up for some more room and
159:35 - we're ready to start styling our
159:37 - unordered lists we'll put a ul here the
159:39 - first thing we want to look at is the
159:41 - list
159:42 - style
159:43 - position i mentioned those bullets
159:45 - before if we put them inside
159:47 - we can now see them but we don't really
159:50 - want them do we so we don't really need
159:52 - the list style position i just brought
159:54 - that in so we can see that yes they are
159:56 - still there what we want to do is say
159:59 - list style type and then just set that
160:02 - to none
160:03 - and they will disappear now we can apply
160:06 - a style to each list item so we'll say
160:08 - li
160:09 - and here we're just going to select
160:12 - the border top we'll set this to 1
160:15 - pixel solid and 333 to match the outer
160:19 - border of the nav and now we have some
160:22 - nice separation here between each of our
160:25 - list items okay next we want to style
160:28 - the links that are inside of our list
160:31 - but notice we have a link that is not
160:33 - inside the list down here it says learn
160:35 - more about amazing foods so we do not
160:38 - want to select this link so in order to
160:40 - select the links that are only inside
160:42 - the list we'll start with list item and
160:46 - then the anchor tag and note we also
160:49 - want to select list item the anchor tag
160:52 - and the visited pseudo class and then
160:55 - here we're going to say
160:57 - text
160:58 - decoration
161:00 - set that to none and we'll set the color
161:04 - to that 333 color so we have a dark
161:07 - color and so now we have a dark color
161:10 - here for visited links and links that
161:13 - haven't been visited so let's quickly
161:15 - visit one we just have our simple page
161:17 - two we go back and it remains the same
161:20 - color let's scroll up for some more room
161:22 - again and now we'll go ahead and style
161:25 - some other pseudo classes here so we'll
161:27 - have the hover sudo class
161:30 - and we'll also have
161:32 - the focus pseudo class
161:34 - and for those we'll set the background
161:37 - to the 333 so just the opposite and here
161:40 - we'll set the color
161:42 - to
161:43 - white smoke which is just a little bit
161:45 - of an off-white color and let's set the
161:48 - cursor
161:49 - to pointer
161:51 - and now
161:52 - when we select that or save that now we
161:55 - should see
161:56 - the mouse over changes and so now
161:59 - the text is that white smoke color and
162:02 - we get a black background but that's not
162:04 - really what we want we don't want it
162:06 - just on the words we want it on the full
162:10 - list item so we're going to have to make
162:12 - a change to make that happen so above
162:15 - where the styling began on the different
162:17 - anchor tags in the list item
162:19 - i'm going to say
162:21 - li with the anchor tag and only that not
162:24 - the visited pseudo class so this is a
162:26 - separate selector we'll set this to
162:28 - display block which displays a property
162:32 - we haven't covered yet in a previous
162:33 - module but we did if you took the
162:36 - beginner's html course as well we did
162:39 - cover block display and inline display
162:43 - so this is a block level element
162:45 - normally the anchor tag is an inline
162:47 - level element so we are changing it to a
162:50 - block level element the bonus here is
162:52 - the block level elements have 100
162:55 - percent width so when i save this
162:58 - this will change and now when i mouse
163:01 - over any one of these
163:03 - this anchor tag has the full width and
163:05 - is filling the entire space here of each
163:08 - one of these list items
163:10 - so now
163:11 - this makes a big difference so i don't
163:13 - even have to click on the text i could
163:15 - click just over here to the left
163:18 - and we still go to page one so
163:20 - everything works there as expected but
163:23 - there's still one change we need to make
163:25 - can you guess what it is here's a hint
163:27 - it's right here look at those bottom
163:30 - corners they're not rounding either
163:32 - they're not respecting that border
163:34 - radius that we set on the nav so we need
163:36 - to make a change to help enforce that as
163:38 - well i'm going to scroll up so this will
163:40 - be the last thing we put in our file
163:42 - this is a little more difficult than
163:44 - when we rounded the corners for the h2
163:47 - because the h2 is easy to select it was
163:49 - the only one on the page
163:51 - but what about
163:53 - this bottom one we have five different
163:55 - list items so how do we just select the
163:58 - last list item we're going to do that
164:00 - with a pseudo selector and this will be
164:02 - called last dash
164:05 - child
164:06 - and then we can go ahead and i guess we
164:08 - need to put the a there
164:10 - and then under that we can say border
164:13 - dash radius
164:15 - and now it will be zero on the top
164:17 - because that still needs to be a square
164:19 - zero on the top right as well so top
164:21 - left top right now this is bottom right
164:24 - needs to have that same
164:26 - two rem setting
164:27 - and then bottom left as well so let's
164:29 - save and now let's mouse over
164:32 - and you can see
164:33 - that the border radius is respected here
164:36 - as we mouse over the list items so there
164:38 - is our basic menu and we selected all of
164:41 - these without changing the link that we
164:44 - had here in the bottom so again a
164:46 - beginner's project but it certainly
164:48 - showed you how to apply some of the
164:50 - different things we've learned up to
164:51 - this point we'll be learning more about
164:53 - that display property that we introduced
164:56 - and there's a lot more yet to learn
164:57 - about css too let's move on to css
165:01 - display types you can see i have visual
165:03 - studio code here on the left and i have
165:05 - an html file and in the html file i have
165:09 - a body element a main element then that
165:12 - is surrounding the other elements and
165:14 - inside this main element i have two
165:16 - paragraphs and in the second paragraph
165:18 - i'm using a span element and that span
165:22 - element has a class on it of opposite
165:24 - around the word another you can also see
165:26 - i've commented out a nav element that
165:29 - contains an unordered list that we will
165:31 - get to later i've also got a basic css
165:36 - style sheet here and inside this i'm
165:39 - pulling in a font from google fonts as
165:41 - we learned in the typography lesson and
165:43 - i've applied a basic font size and font
165:46 - family then to the body element here in
165:48 - the css so that's what we see over here
165:50 - in the right in chrome and i'm using the
165:52 - live server extension so you'll see our
165:54 - changes automatically over here in the
165:56 - browser as soon as we save our css
165:59 - now the display property in css relates
166:03 - back to something we learned in the
166:05 - beginning html course and that is about
166:08 - block level elements versus inline level
166:11 - elements now the paragraphs that you saw
166:13 - we've included in the html are block
166:16 - level elements and they have some
166:18 - default properties so let's look at
166:20 - those first i'm going to apply a basic
166:22 - style here to the paragraph element and
166:24 - we'll say background
166:26 - dash
166:27 - color
166:29 - and set that to let's do a light gray
166:33 - and when i save you can see the light
166:36 - gray extends
166:37 - all the way across the page so
166:40 - it has a hundred percent width by
166:42 - default automatically block level
166:44 - elements have a default 100 percent
166:47 - width and they stack on top of each
166:50 - other as we see here now they've also
166:52 - got some default margin as well which is
166:54 - why you see space between the paragraphs
166:56 - but this is important to know so every
166:58 - time we use another block level element
167:01 - doesn't have to be a paragraph it could
167:03 - be any element that is a block element
167:06 - then they will stack on top of each
167:09 - other now when i say 100 percent width i
167:11 - mean of what is available to them it's
167:14 - not always 100
167:16 - of the viewport here that we see so
167:18 - let's look at an example of that and
167:20 - that's why i have a main element that
167:22 - the paragraphs are inside of the main
167:24 - element is also a block level element so
167:27 - let's set the background color for it to
167:29 - a different color so we can see it get
167:31 - something kind of ugly that stands out
167:33 - here just for this example so let's go
167:35 - with aqua
167:37 - we set that you can see
167:39 - we are covering part of the main element
167:41 - with the paragraphs but the part that
167:43 - you can see where there is margin it
167:45 - turned aqua so now we could take away
167:48 - this background color and you can see
167:49 - aqua across the whole thing so now that
167:52 - we've done that let's also go ahead
167:55 - and change the width of the main element
167:57 - so let's set it to a width of 50 percent
168:01 - and now you can see the paragraphs do
168:04 - not extend all the way across our page
168:07 - they are limited to their container
168:09 - their parent element which is the main
168:11 - element so they do have a hundred
168:13 - percent width default setting but it's a
168:16 - width of what they are given so i say
168:19 - they have 100 width of what they are
168:21 - given it's not necessarily 100 of the
168:24 - page and of course we could return this
168:27 - background color once again so we could
168:30 - see exactly how much room they're taking
168:32 - up and let's say light gray again
168:35 - and save and once again we see they're
168:37 - taking up 100 percent
168:39 - of that main element with block level
168:42 - elements we can also apply margin and
168:45 - padding and height or anything like that
168:47 - to all four sides so let's say margin
168:50 - and i'll say 100 pixels on the top and
168:53 - bottom and 50 pixels on each side and if
168:57 - we save that definitely changed
168:59 - everything because now this has a 100
169:02 - pixel margin up here and then we've
169:04 - added more extra margin in between the
169:06 - paragraphs and then you don't even see
169:08 - the margin that's underneath as well but
169:10 - we can do that to block level elements
169:12 - but this is where some of the change
169:14 - comes in when we switch over to an
169:17 - inline level element so i'm going to
169:19 - remove that and let's remove the main
169:22 - styles as well so we're back to spanning
169:24 - the full page and remember i put a span
169:28 - element around the word another which is
169:30 - an inline level element
169:33 - and that doesn't cause a new line break
169:35 - so let's go ahead and style that
169:38 - opposite class that was applied
169:40 - to that span element just to make it
169:43 - stand out we'll start with a different
169:44 - background color
169:47 - and i'll make this a flat black and then
169:50 - we'll use a color that is
169:52 - not quite full white white smoke and now
169:55 - you can see we've styled this element
169:58 - and it is just surrounding the word
170:00 - another so our span element has a class
170:03 - of opposite and we change the color for
170:06 - the background and the text
170:08 - but let's see what we can and can't do
170:11 - with an inline element and so now let's
170:14 - go ahead and try to put a margin
170:16 - on the top of 100 pixels
170:20 - and you can see nothing changes we can't
170:23 - apply a top or bottom margin to a inline
170:27 - element likewise we'll try a different
170:30 - one let's go with
170:32 - height
170:33 - 200 pixels
170:35 - it doesn't change once again height
170:37 - cannot be applied
170:39 - and padding applies just a little
170:41 - differently so let's look at that and
170:42 - let's go with
170:44 - one rim
170:46 - and it looks like everything is as as
170:48 - expected here where we have
170:50 - a one rim padding top bottom left and
170:54 - right however
170:56 - if we go ahead and increase that let's
170:57 - say 4m look what happens it overlaps
171:01 - the above paragraph and we probably
171:03 - wouldn't want that so now let's apply
171:06 - the display property
171:08 - and we've talked about this being
171:10 - already as a default
171:12 - inline
171:14 - and then of course paragraphs default to
171:17 - block and many other elements as well
171:19 - like the main element we talked about
171:21 - however there is another option and that
171:23 - is inline
171:25 - dash block and let's see what happens
171:27 - when we apply that to our opposite class
171:29 - now our padding is still applied but
171:32 - it's not overlapping the other paragraph
171:34 - so it is now respecting the top and the
171:36 - bottom
171:37 - likewise if we come back
171:39 - and apply that margin and let's just say
171:42 - margin dash top it could be bottom as
171:44 - well but we'll just put 100 pixels for
171:46 - the top
171:47 - and that worked as well now you can see
171:49 - we have extra space here and again this
171:52 - is applying just to that span element so
171:54 - not to the full paragraph itself and now
171:56 - we could even add the height that we
171:58 - applied earlier that didn't work and we
172:00 - say 200 pixels and now
172:03 - our span element just got a lot taller
172:06 - so the inline block
172:07 - property value is kind of a hybrid here
172:10 - because we stayed in line in our
172:12 - paragraph this didn't create a new line
172:14 - like block would and at the same time it
172:18 - now allows some properties to be applied
172:21 - that normally wouldn't apply to the
172:23 - inline display so to quickly recap block
172:27 - level elements stack on top of each
172:29 - other and always create a new line
172:31 - inline elements do not stack on top of
172:34 - each other and do not create a new line
172:37 - block level elements automatically have
172:39 - a 100 percent width of whatever they are
172:42 - given if they're not inside of something
172:44 - that is limiting their width they will
172:46 - be the full width of the page inline
172:48 - level elements only take up the width of
172:51 - their content of course unless we put
172:53 - extra padding on them and then it has a
172:55 - little bit more width here because of
172:57 - that padding and then when we switch to
172:59 - inline block we get kind of a hybrid
173:01 - here where we can keep the content in
173:03 - line but we can go ahead and apply a top
173:06 - and bottom margin or a height and other
173:09 - things that typically only block level
173:11 - elements have so when would inline block
173:14 - be handy this could be handy if we were
173:16 - trying to turn a link into a button and
173:18 - sometimes people do style links as
173:21 - buttons and then you can of course have
173:23 - a row of those
173:25 - and likewise it could be something like
173:27 - turning a list into a row instead of a
173:30 - vertical list so it would be horizontal
173:34 - so let's look at an example of that and
173:36 - i'm going to go back to the index.html
173:39 - i'm going to select our paragraphs and
173:41 - press shift alt and the letter a to
173:43 - comment those out
173:45 - and then select our nav element with the
173:48 - unordered list in it once again shift
173:50 - alt and the letter a to uncomment that
173:53 - and now i'll save
173:54 - and now we see a basic list with three
173:57 - links over here to the right they say
173:59 - intro portfolio and projects something
174:02 - that we might use as a menu on a
174:04 - portfolio website
174:06 - so here we have the nav element and then
174:08 - an unordered list and three list items
174:10 - inside and then of course each list item
174:13 - is an anchor link so a hypertext link
174:16 - and those are inline elements however
174:19 - the list items themselves are block
174:22 - level elements and each one is taking up
174:24 - one hundred percent width of what they
174:26 - are given right now let's go back to the
174:28 - css and apply some styles here so i'm
174:31 - going to select these styles the
174:33 - paragraph and the opposite class and go
174:35 - ahead and delete those and save once
174:37 - again so we can start fresh
174:39 - and now let's apply something to the
174:41 - unordered list first and we'll start
174:44 - with a list
174:46 - style
174:48 - type and then we'll say
174:50 - none and that removes those bullets that
174:52 - we have after that you can see we're
174:55 - still moved over to the right so we do
174:57 - have some default padding on the list so
174:59 - let's say padding dash left and we'll
175:02 - just set that to zero
175:04 - and then we'll save again and then after
175:06 - that let's go ahead and say
175:09 - text dash
175:11 - align
175:12 - right well what happened to my
175:15 - css i've got an extra line in there you
175:17 - can see what happened now so we know we
175:19 - have 100 width and if we change the
175:22 - background color here we can really see
175:24 - that in action so let's say background
175:27 - color let's go back to our light gray
175:30 - and you can see we've got 100 width
175:32 - going on once again and when we set the
175:35 - text align right we sent all of our
175:37 - links or all of our list items over to
175:39 - the right and finally let's apply a
175:41 - margin of 0 to the unordered list as
175:44 - well
175:45 - and now you can see it pulled it up
175:46 - closer to the top of the page we could
175:48 - actually apply a
175:50 - css reset as well so let's do that
175:56 - and that will put everything flush with
175:58 - the edges of the page so we have margin
175:59 - of zero
176:01 - padding of zero and then
176:04 - box sizing will set to border box and
176:07 - save and you could refer back to our box
176:10 - model module where we covered all of
176:12 - this and setting a basic css reset but
176:15 - now you can see we are flush with the
176:17 - edges of the browser and our links are
176:19 - once again all to the right now let's go
176:22 - ahead and change this background color
176:24 - and let's just change it to black and
176:26 - save
176:27 - and now we don't see the links as well
176:28 - but we'll change that in just a little
176:30 - bit for the list items let's change
176:33 - those now and we'll say
176:35 - display
176:37 - inline dash block instead of their
176:40 - default of block
176:42 - and now when we save
176:43 - you can see they are all side by side in
176:47 - horizontal order instead of top to
176:49 - bottom as they would be with the block
176:51 - display now let's apply some margin
176:54 - between each one of them and what we can
176:56 - do here instead of saying top right
176:59 - bottom left as we typically would with
177:01 - the shorthand for margin we can just say
177:03 - margin
177:04 - inline and this will just apply to the
177:07 - left and the right so i'll say 0.5 rim
177:11 - and let's see how that looks
177:13 - that looks okay
177:15 - and we need a little bit of extra space
177:17 - maybe over here on the right so let's
177:20 - change the padding setting here we had
177:22 - padding left of zero for the unordered
177:24 - list
177:25 - and that's okay but maybe we just want
177:28 - to apply a little padding all the way
177:30 - around so maybe 0.5 rem
177:32 - everywhere on the unordered list top
177:35 - bottom
177:36 - right and left oh and that is just set
177:39 - to padding jack's left right now so
177:41 - let's go ahead and make that shorthand
177:42 - for padding and apply it to all four
177:45 - areas top right bottom and left now that
177:48 - looks a little bit better so what we
177:50 - need to do now is just apply some color
177:52 - and maybe some hover styles for our
177:55 - links so let's say
177:57 - link and then the anchor tag so this
177:59 - will only apply to anchor tags inside of
178:02 - the list item i said link list item in
178:05 - the anchor tag and now we'll say color
178:09 - we'll make them white and then we'll
178:10 - have a text
178:12 - decoration
178:14 - of none and when we save we now see the
178:17 - words in white with no underlines
178:20 - after that let's scroll for a little
178:21 - more room
178:22 - and we'll say
178:24 - list item anchor tag
178:26 - hover sudo class and once again list
178:28 - item
178:29 - anchor tag
178:31 - focus pseudo class
178:34 - and for that let's just change the text
178:37 - decoration instead of the color
178:39 - let's just go back to the underline
178:41 - style so when we hover over they now
178:44 - show as links now there are other
178:46 - display values that we could use and
178:48 - we're going to have separate modules on
178:51 - the display type of flex and the display
178:54 - type of grid and when we do that we'll
178:56 - learn how to complete our menu bar that
178:59 - might have something over here on the
179:01 - left as well but before we go there's
179:03 - one other value i do want to cover and
179:06 - instead of inline block
179:08 - block or just inline
179:10 - you might have a value of none and look
179:12 - what happens all the list items just
179:15 - disappeared so let's go ahead and change
179:17 - that back so they show up and maybe we
179:20 - want our entire bar to disappear and
179:23 - right now that is an unordered list so
179:26 - let's say display
179:28 - and none up here
179:30 - and now it's entirely gone and that is
179:32 - exactly what happens it completely
179:35 - removes it from the document now we
179:37 - would still see it over here in our html
179:40 - but as far as the browser is concerned
179:42 - when it interprets the code the
179:43 - unordered list is not there now we
179:46 - rarely want to use this and that is
179:48 - because it removes it from that document
179:50 - flow and that means anyone using
179:52 - assistive technology screen reader would
179:54 - not be able to read anything there there
179:57 - are other ways to remove something from
179:59 - being visible from actually being viewed
180:02 - on the page but still have it in the
180:04 - document flow where accessibility
180:07 - might be still available and so we'll
180:09 - cover that in the future as well but
180:11 - right now just know that display none is
180:15 - a possibility
180:17 - let's move on to css floats you can see
180:19 - i've got visual studio code open i have
180:22 - an empty frame for a page we have
180:25 - absolutely nothing in the body of the
180:27 - page and then the style page the css has
180:32 - an import of our roboto font from google
180:35 - fonts and we've only set styles on the
180:37 - body so far we've set the font size to
180:39 - 1.5 ram and we're using the roboto font
180:42 - family so quickly if i pull vs code over
180:45 - to the left you can see our page is
180:47 - completely blank i'll let vs code take
180:50 - up the full size of the page again
180:52 - and let's start by creating some
180:54 - elements in the body of the html that we
180:57 - can style so i'm going to start off with
181:00 - the div and give it a class of block
181:04 - after that we can just put in the word
181:06 - float for now because we will apply a
181:08 - float to it and then we're going to
181:10 - create some paragraphs so i'll use an
181:12 - image abbreviation here and type p for
181:15 - paragraph and then say times five then
181:18 - the greater than symbol
181:20 - lorem and 20 which means each paragraph
181:23 - will be lorem epsom which is just
181:25 - generic verbiage we can put on a page
181:27 - for generic text content and each
181:30 - paragraph will have 20 words so when i
181:32 - press tab it should create five
181:34 - paragraphs
181:36 - and there we can save now let's go back
181:38 - and look at our page and see what we
181:39 - have so far
181:40 - you can see our div has the word float
181:43 - in it and there's nothing remarkable
181:44 - about that div and then we see five
181:47 - different paragraphs here on our page so
181:50 - that's a good start to having some
181:51 - content but now we want to apply some
181:54 - css and explore what this float will
181:57 - actually do with the class of block
182:00 - so to
182:01 - give that example let's go back to our
182:03 - style and i'll hide the file tree by
182:05 - pressing ctrl b
182:07 - and now we'll be able to see most of our
182:09 - css here so let's style this block class
182:13 - that we created for that div i'm going
182:15 - to apply a width first and i'm going to
182:17 - set it to 30 viewport width units
182:21 - and then i'm going to set a height and
182:23 - i'm going to make that also 30 viewport
182:25 - width units now you might wonder why i
182:27 - didn't use percent but that wouldn't be
182:29 - the same i wanted to use the exact same
182:31 - units for the width and height and
182:34 - create a square and we'll be able to see
182:36 - that if i apply a background dash color
182:40 - and then set that to black and i save we
182:44 - now have a square that is 30 viewport
182:47 - width units wide and it also has the
182:51 - same height which truly does make it a
182:53 - square
182:54 - okay after that i'm going to go ahead
182:56 - and apply a color so we can see that
182:58 - word float and i'll make that white just
183:00 - the opposite so there's the word float
183:02 - now let's give it some padding maybe
183:05 - one rim of padding and
183:08 - there we have just a little bit of
183:09 - padding that pulls the word float out of
183:11 - the corner but now our div and all of
183:14 - our paragraphs are block elements and so
183:17 - they stack on top of each other but when
183:19 - we float
183:21 - this div element that we've created here
183:23 - it will take it out of the normal flow
183:25 - of the page and we should see our text
183:29 - wrap around this and you could picture
183:31 - this as being an image if you want to
183:33 - but whatever content we would float and
183:35 - we can float it left or right the text
183:38 - will wrap so let's create another class
183:40 - and i'll just call this class left
183:43 - and then inside of this we'll apply the
183:45 - style float and we'll say left
183:49 - and when we save we don't get a change
183:51 - yet because we haven't applied it to our
183:53 - html so let's go ahead and apply this
183:55 - second class to our div and now save and
183:59 - we can see the text has wrapped up
184:01 - around the div
184:03 - so now it's more like you're used to
184:06 - seeing in a newspaper where you would
184:07 - have an image or something
184:09 - over to the left or the right and the
184:11 - text would go around it but now notice
184:14 - this is flush it's right up against it
184:17 - we might want a little space there and
184:19 - we need to talk about how to do that
184:21 - because your first instinct may be to
184:23 - apply
184:24 - some padding or margin to the paragraph
184:28 - and i'll scroll for some more room let's
184:30 - just look at the margin
184:32 - left for the paragraph and say i applied
184:34 - 10 pixels
184:36 - look what happens it still is flush here
184:40 - you see it moved 10 pixels over here
184:43 - this float is not
184:45 - inside the normal flow so
184:48 - the margin is applied from the left over
184:50 - here and not where we would expect it to
184:52 - be
184:53 - at the left edge of our text and we can
184:56 - see that even more so if i do something
184:58 - greater like say 20 percent
185:01 - and now yes it moved this way over but
185:04 - it didn't move the text here at all so
185:06 - we can't really apply that correctly by
185:09 - applying it to the paragraph instead
185:12 - we can apply some to the actual block
185:15 - itself so let's do that and we can say
185:18 - well let's do it to the left because we
185:20 - might do it differently for the right so
185:22 - let's do it to our left class here so we
185:24 - would have a margin
185:26 - on the right side of let's say one rim
185:30 - so we should be able to see that and now
185:32 - that makes the difference that we wanted
185:35 - right here and also it makes our text
185:37 - once again flush with
185:40 - what would be our image or our div that
185:42 - we currently have here on the left now
185:45 - i'm going to highlight our left class
185:47 - and then press shift alt and the down
185:50 - arrow to copy it down
185:52 - and i'm also going to create a right
185:54 - class i need to select that correctly
185:56 - there we go it's a right class so
185:58 - instead of float
186:00 - left it will be float right
186:02 - but then instead of margin right let's
186:05 - put a margin
186:08 - left on it
186:09 - and i'll save but we don't have it
186:11 - applied once again to any div so we need
186:13 - to come back into our code and let's say
186:16 - after we've gone down three paragraphs
186:18 - we want to have one more so we'll say
186:20 - div
186:22 - dot block
186:23 - dot right and that should apply those
186:26 - classes and it did so now we can save
186:29 - and we have another div and it's floated
186:32 - right and of course it is after
186:35 - the first three paragraphs and we see
186:37 - that one two three
186:40 - and then it begins here with our fourth
186:42 - paragraph and it's floated to the right
186:44 - now i didn't put the word float in there
186:46 - let's go ahead and do that just to make
186:48 - them alike and this is the basic use
186:51 - that we would have to float things to
186:53 - the left or the right but there could
186:56 - become some instances where we want to
186:58 - handle this a little differently maybe
187:00 - we want to
187:01 - wrap this first paragraph and this div
187:05 - that i've floated to the left in a
187:06 - container and kind of highlight that at
187:09 - the top and then have the second
187:10 - paragraph start afterwards we might have
187:13 - to handle that differently or let's say
187:15 - we didn't even have the container but we
187:17 - didn't want this second paragraph to
187:19 - wrap and in the past it was handled a
187:22 - little differently than it currently is
187:25 - so let's create one more class and i'll
187:27 - show you something you may see once
187:29 - again i would say in more legacy code
187:32 - let's call this a clear class
187:35 - and then inside of this class we'll say
187:38 - clear
187:39 - and we can say
187:40 - just
187:42 - right
187:43 - or just left if you want to clear
187:45 - something that is specifically floated
187:47 - left or right but it's very easy to just
187:49 - say both and then it will clear both and
187:52 - you'll see what this does in just a
187:54 - moment here so what i need to do
187:57 - is come back
187:58 - and then after the first paragraph if i
188:01 - wanted to clear that the old way would
188:02 - be to apply another div to the page
188:06 - and give it this class of clear and just
188:08 - leave it empty and we would save
188:11 - and then you can see the second
188:13 - paragraph doesn't start
188:15 - until after this div so it is cleared
188:18 - and that allows us to go ahead and start
188:20 - the second paragraph after both of these
188:23 - but this could still be a problem if we
188:26 - had this in a container and i will show
188:29 - an example of that so let's apply a
188:32 - container to the div and the first
188:35 - paragraph and i'll just make it a
188:38 - section element
188:39 - and wrap it around those
188:41 - so i'll
188:42 - cut that closing tag
188:45 - and put it here after the first
188:47 - paragraph and save well i want the
188:49 - formatting it didn't do it for me
188:52 - tab that in and save and then we can
188:54 - style our section to make it a little
188:57 - more obvious what's going on i think
188:59 - i'll scroll up just a little bit more
189:01 - there we go and so now we have a section
189:04 - and inside the section i'll say
189:07 - background color
189:10 - and we'll give this a color of bisque
189:12 - which is kind of a neat color
189:15 - and after bisque let's go ahead and
189:17 - apply a border so we'll say border
189:20 - one pixel solid
189:22 - give it a flat black color and a little
189:26 - bit of padding
189:28 - one rim
189:29 - okay and let's save and see what we get
189:31 - well this looks okay right now i don't
189:33 - see a problem but what if we removed
189:36 - this div with the class of clear
189:40 - and save well still no problem let me
189:43 - shorten up this paragraph by several
189:45 - words and then see what we get
189:48 - and now when i save i just had too long
189:50 - of a paragraph to actually highlight the
189:52 - problem before but now when i say we can
189:54 - see the problem this float is once again
189:57 - not in the normal flow of the page so
190:01 - the container is only expanding based on
190:04 - the text content and when i had more
190:06 - text content it looked okay but you can
190:09 - really highlight the problem if you
190:11 - don't have enough text content to push
190:14 - the container down so we can definitely
190:16 - see a problem that needs to be rectified
190:19 - and that is because
190:21 - we don't want the container to just go
190:24 - halfway we want it to
190:26 - go ahead and contain the full item the
190:29 - full element that we have floated left
190:31 - or right so we think why not go ahead
190:34 - and put that div back in place that had
190:36 - clear well let's try that
190:38 - and see what happens i've got the clear
190:40 - div there now and you can see it clears
190:43 - the paragraph but it doesn't help the
190:46 - container so let's once again remove
190:49 - that div i'll just press ctrl z to undo
190:52 - those changes
190:53 - and control s to save so now the
190:56 - paragraph is coming back up and i will
190:58 - show two different ways to fix this one
191:01 - past approach that you may see in code
191:03 - is to set the overflow
191:06 - to auto
191:07 - but this is in more legacy code once
191:09 - again but notice it does work so i
191:11 - wanted to show that overflow auto is a
191:13 - possibility to go ahead and get the
191:16 - container element to extend all the way
191:19 - down and contain the full element that
191:22 - is floated either left or right however
191:25 - the correct current way as
191:28 - noted by mdn is to say display
191:32 - and then say
191:33 - flow dash root and if we save that we
191:37 - once again have fixed the problem so if
191:40 - i remove that
191:43 - save we have the problem i'll put the
191:45 - display flow root back in
191:48 - and the problem is fixed so this is
191:50 - considered the current modern way to fix
191:53 - this problem in the past floats were
191:55 - also used to create columns on a page
191:58 - but that was because there was no other
192:00 - method available and now with modern css
192:03 - we do have other methods available
192:05 - including display flex and display grid
192:08 - that i will be covering
192:10 - very soon in future modules but right
192:12 - now just remember floats are used to
192:15 - float things to the left and the right
192:17 - really any element that you want to and
192:19 - you can wrap text around it and then you
192:22 - can also use floats inside of a
192:24 - container if you want to but remember to
192:27 - apply
192:28 - display flow root
192:30 - to the container so the container
192:33 - contains the full floated element and
192:37 - doesn't shrink based on the text content
192:40 - alone
192:42 - let's move on to css columns you can see
192:44 - i've got visual studio code open here
192:47 - with just an empty frame of a page once
192:49 - again i've got the title of css columns
192:52 - nothing in the body of the html at this
192:55 - point and if we look at the style.css
192:58 - you can see i'm once again importing in
193:00 - the roboto font from the google fonts
193:04 - and then i also have a couple of styles
193:06 - on the body we're applying the roboto
193:08 - font with font family and we've set the
193:11 - font size to 1.5 rem and that's it so
193:14 - far so let's go back to the html and the
193:17 - first thing i want to do is create five
193:19 - paragraphs so i'm going to use an emmet
193:21 - abbreviation i'll type p
193:23 - times five and then i'll just say lorem
193:27 - 20 and press tab and we should have five
193:30 - paragraphs now so i'll save that much
193:32 - i'll go ahead and press ctrl b so we can
193:34 - see a little more i'm not going to wrap
193:36 - the lines as it would just
193:38 - clutter and of course wrap each one of
193:41 - these lines down just a little bit i
193:42 - don't need to do that right now what i
193:44 - do want to do now is add a section that
193:47 - will be a container for the first four
193:50 - paragraphs so we'll take this section
193:53 - and after the fourth paragraph we'll put
193:56 - the closing element right there the
193:57 - closing tag and we can save it didn't
194:00 - auto format for me so i'm going to
194:01 - select these and press tab so it comes
194:04 - over and now i've got the first four
194:06 - paragraphs inside of this section
194:09 - element as a container and then the
194:10 - final paragraph is outside of the
194:13 - section element i'm also going to apply
194:16 - a class here let's call this class
194:19 - columns i want it inside the quotes
194:23 - and now we're finished with the basic
194:25 - html so far so now let's move on to the
194:28 - css i'll click the file tree again go to
194:32 - style.css
194:34 - now with all of this saved i guess we
194:36 - could quickly look at it in the browser
194:38 - and we just see our five paragraphs over
194:40 - here so we're going to make some changes
194:42 - now and i'll drag vs code back over to
194:45 - fill the full screen as we apply the
194:48 - columns okay let's create our columns
194:51 - class so dot
194:53 - columns and inside this class i'm going
194:56 - to set a column
194:58 - dash count and let's set it to four
195:01 - columns so far and save and now let's go
195:04 - look at our code or our browser and look
195:08 - what we have here in the browser now
195:10 - i've spread it out a little bit so the
195:12 - first four paragraphs are in four
195:15 - columns and we can see of course this
195:17 - fifth paragraph that's not inside of
195:19 - that section element that has the class
195:21 - columns is not split into columns at all
195:24 - but it automatically split the first
195:26 - four and just as it would resize here as
195:29 - luck would have it with the browser
195:31 - there's actually one paragraph per
195:33 - column right now however i'm going to
195:36 - right click and choose inspect so we can
195:38 - open dev tools and resize this and
195:41 - notice what happens here we can scrunch
195:44 - it down and now it's not necessarily
195:47 - paragraph per column it just adapts to
195:51 - whatever the screen size is now we can
195:54 - change this as well so i'm going to go
195:56 - back
195:57 - to vs code and then we'll make a change
196:00 - here instead of this column count being
196:02 - just four let's go ahead and add a
196:05 - column width as well so let's tell it
196:07 - that our column
196:09 - width should essentially never be less
196:12 - than
196:13 - 250 pixels per column so that should
196:17 - change things a little bit now you can
196:19 - see we only have two columns even though
196:21 - we told it four it's going to add here
196:24 - to that width and never go below that
196:27 - now once it can support three columns of
196:30 - 250 pixels then it switches to three and
196:33 - it will go up to four columns if that's
196:36 - available to it however if not it will
196:39 - stick with three let me see if i can
196:41 - squeeze this just a little more to get
196:42 - all four columns to show now we're back
196:44 - to our four columns but as we resize the
196:47 - browser width
196:49 - it only supports what it can for the 250
196:53 - pixels and once it can't support that it
196:56 - should condense down to just one column
196:59 - so that makes it very flexible as far as
197:01 - the design goes because if it can only
197:03 - support one column it will never make it
197:06 - smaller than that 250 pixels we set but
197:09 - if it can support two it does all the
197:12 - way up to the column number that we
197:14 - specified which was 4. i'm going to pull
197:17 - vs code back up and there's shorthand
197:19 - for this so we don't always have to type
197:22 - column count and column width we can
197:25 - just say
197:26 - columns and there we could specify 4
197:30 - 250 pixels and it would be the same so
197:33 - i'm going to comment these out
197:36 - and now save and we shouldn't really see
197:38 - any changes in our page because that
197:40 - should mean the same thing just in
197:42 - shorthand we can also provide dividers
197:46 - so this would be with the column
197:49 - dash rule property and here we can say
197:52 - we want three pixels and i'll press ctrl
197:55 - b to hide the file tree so we can see
197:57 - all of this but three pixels let's say
198:00 - solid
198:01 - and now let's just give some kind of
198:04 - color here i'll just go with that flat
198:06 - black and save and notice this column
198:08 - rule is just like when we provide a
198:10 - border and the values go in the same
198:12 - order so
198:13 - when i have provided a border in the
198:15 - past around any kind of element you have
198:17 - seen the size and then the type of
198:20 - border and then the color and that's the
198:22 - same for the column rule now let's see
198:24 - what it does to our page and here we see
198:26 - the rules between each column now and of
198:29 - course they will disappear when the
198:32 - columns disappear if the sizing dictates
198:34 - that and so once we get down to one
198:36 - column even though we've said column
198:39 - rule should exist it won't if there's
198:41 - only one column but if there are columns
198:43 - to separate that's when the column rules
198:45 - start to show up and this will once
198:47 - again
198:48 - divide up to how many columns we've
198:50 - created so if we say a max of four
198:52 - columns we could have up to three column
198:55 - rules and we can also provide some
198:57 - spacing between those columns so let's
198:59 - say column
199:01 - dash gap and i'm going to choose a
199:03 - larger value so we definitely see the
199:05 - spacing so three rounds and let's see
199:07 - how that spaced everything out
199:09 - now we only have three columns because
199:11 - we have some extra spacing so it
199:13 - wouldn't fit into the four columns as
199:15 - before but it does look a little bit
199:18 - better with that extra spacing between
199:20 - the columns and with dev tools open now
199:23 - is a good time to draw your attention to
199:25 - a problem that exists right here i'll
199:27 - squeeze this over so we can see a little
199:29 - more and i want to pull this down so we
199:31 - can see some of the html above now as we
199:34 - get into our columns section and you can
199:36 - see it highlighted on the page as i
199:38 - highlight the elements here in devtools
199:40 - notice we have margin at the top and the
199:44 - bottom of each paragraph we didn't use a
199:46 - css reset so far so those margins have
199:49 - not been set to zero and that's okay we
199:51 - want spacing between the paragraphs but
199:53 - notice here in this first paragraph we
199:55 - also have spacing above the first
199:58 - paragraph so it's not setting flush with
200:00 - the top as the other columns are and
200:03 - then as we come down notice each
200:05 - paragraph is going to have its own top
200:08 - and bottom margin
200:10 - but there's one thing to consider here
200:11 - we need to remove
200:13 - that top margin from the first paragraph
200:16 - but let's see if we can just remove it
200:18 - from all of the paragraphs and what
200:20 - happens notice our margin spacing
200:22 - between the paragraphs as we see between
200:25 - the first and the second for example
200:27 - just is the spacing for that one margin
200:30 - essentially so here we see it again
200:33 - between the third and the second we just
200:36 - see that top spacing but if i highlight
200:38 - the second we just see the bottom
200:39 - spacing and they seem to overlap let's
200:42 - also discuss what's going on there so
200:44 - we'll go back to the code and i'm going
200:47 - to set another rule here and we want to
200:49 - say just our paragraphs that are inside
200:52 - the columns container so we'll say the
200:55 - columns class and then p
200:57 - let's say margin dash top
201:00 - and set that to zero and save now we go
201:03 - back to the browser
201:04 - and our first paragraph is flush at the
201:07 - top with the others but notice our
201:09 - spacing between the paragraphs did not
201:12 - change and that's a good thing it
201:13 - automatically happens in css and i don't
201:16 - believe i've discussed this before but
201:18 - that is margin collapsing so it's not
201:21 - going to double up the margin between
201:23 - the second and the third paragraph just
201:26 - based on having a bottom margin on say
201:29 - the first one and a top margin on the
201:32 - second one however now we've removed
201:34 - that top margin but the spacing remained
201:36 - the same but previously it wasn't twice
201:38 - as much because of margin collapsing so
201:42 - that's a good thing and it's worth
201:43 - noting so we can actually just remove
201:46 - the top margin from each paragraph and
201:48 - not change the spacing of the others but
201:51 - it does fix the top alignment here
201:53 - making it flush with the other columns
201:55 - as we want it to now let's go back to
201:57 - our html and add another element inside
202:00 - of this file so we have a couple of
202:02 - paragraphs inside of our columns
202:05 - container now let's add an h2 and inside
202:08 - the h2 let's just say
202:10 - next topic just some kind of generic
202:13 - header here and we can save that now
202:15 - let's go to our style css and let's go
202:19 - ahead and style that header as well
202:21 - we'll once again be specific so we'll
202:23 - say columns and then any h2 inside of
202:26 - our columns container
202:28 - let's set the margin top to zero just
202:31 - like we did for the paragraph so there's
202:33 - not an issue there
202:34 - let's set the background color
202:37 - to that flat black 333 and then let's
202:40 - set the color
202:42 - to white
202:43 - which is fff as far as hexadecimal code
202:46 - goes
202:47 - then we can provide some padding let's
202:49 - say one rem
202:51 - and let's save and let's take a look now
202:53 - at our web page and we have our next
202:56 - topic right here but let's see what
202:58 - happens as we resize
203:00 - that looks a little weird we have part
203:02 - of the padding at the top of the second
203:05 - column and the rest of the header here
203:08 - at the bottom of the first column that's
203:10 - kind of strange we might not want that
203:12 - let's get some more room and drag it
203:14 - over and see if anything else weird
203:16 - happens well not with the room we have
203:18 - but as this resizing occurs strange
203:22 - things could happen but we can prevent
203:24 - some of those strange things by applying
203:26 - another property inside of our h2 so now
203:30 - let's say break
203:31 - dash inside and we'll say avoid
203:35 - we'll save that come back to the page
203:38 - and now as we get to our two columns we
203:41 - notice it's on the second column which
203:43 - may not be the best thing that we want
203:46 - we might want that at the top of the
203:47 - second column but it's not splitting the
203:50 - header into two different pieces with
203:52 - part of it at the top and then part of
203:54 - it to the right and once we get down to
203:56 - one column it's just the one header
203:58 - there now we can apply one other
204:01 - property let's bring vs code back up and
204:04 - here we could say
204:05 - break dash before
204:08 - and we'll set this to column
204:10 - and there's good and bad with this so
204:12 - let's look at this overall so now notice
204:15 - we're at the top of the second column
204:18 - and that's fine and as we scroll and we
204:20 - have two columns now we're at the top of
204:22 - the second column again which is what we
204:24 - want instead of being at the bottom of
204:26 - the second column as we were before the
204:29 - problem comes when we want to size down
204:31 - to one column notice what happens
204:34 - instead everything shrinks and we got
204:36 - three columns and that's not maybe what
204:38 - you would expect but this break before
204:42 - actually forces a column break so it
204:44 - forces there to be more than one column
204:47 - and the browser is trying to fit all of
204:48 - that in which is why it shrinks so
204:51 - probably
204:52 - not a great idea to use this break
204:55 - before column property if you know
204:57 - you're going to be shrinking your page
204:59 - down to that one column however the
205:01 - break inside with the avoid
205:04 - will keep your header that you might
205:06 - create or something else from being
205:08 - split between the two columns now let's
205:11 - go back to our html
205:13 - and here's the html file i'm going to
205:15 - remove this header for now i'll leave it
205:17 - in the code so
205:19 - you can see it there but we've just
205:21 - commented it out but what i do want to
205:23 - provide is a quote so let's provide a
205:26 - quote that we would have maybe something
205:28 - we would be highlighting on the page so
205:31 - here's one more paragraph and inside
205:33 - this paragraph i'm going to say
205:37 - where's
205:38 - my rug
205:41 - and then man which is course from the
205:43 - movie the big lebowski and then we can
205:46 - say that was from
205:48 - the dude who is the author of that quote
205:51 - now let's provide some things here that
205:52 - will make this stand out a little more
205:54 - so we can say class
205:56 - equals
205:57 - quote and we'll style this class
205:59 - and here let's go ahead and fill the
206:01 - page right now as we see this code so we
206:04 - can see the full quote here but then
206:06 - there's some other things we want to
206:07 - apply as well so i'll save this much and
206:10 - actually just as i filled the page i
206:12 - want to go back to the browser
206:14 - and now on the browser we'll go ahead
206:16 - and open up this page it's unicode dash
206:19 - table dot com and it lets us look up
206:22 - other characters like html entities that
206:25 - you may have learned about when you were
206:27 - going through my html course or one like
206:29 - it but there's also unicode characters
206:32 - and there's different way to provide
206:34 - there's different ways to provide these
206:36 - different characters so it says popular
206:38 - character sets we want quotation marks
206:41 - kind of the fancy ones so let's just go
206:43 - to this page full of quotation marks and
206:45 - you can see we want these opening
206:47 - quotation marks right here the left one
206:49 - i'll click on that it gives us several
206:52 - different codes we can use in our page
206:54 - so here's the html code for this opening
206:58 - quotation mark there's also an html
207:00 - entity here so we could probably use
207:03 - either one i'm just going to select this
207:06 - ampersand pound sign 8220
207:09 - and the semicolon and that's going to be
207:11 - our opening quotation mark so i'll pull
207:14 - visual studio code back up and inside of
207:17 - our quote right here it looks like i've
207:19 - got an extra quotation mark there for
207:21 - the class okay our class quote is
207:23 - correct now i'm going to paste in that
207:25 - code and now we should have that opening
207:28 - quotation mark here to go along with our
207:30 - quote likewise if we go back to the page
207:33 - you can see they're saying with this
207:35 - symbol these are often used let's click
207:37 - on this other quotation mark
207:39 - and oh it just took us back to quotation
207:41 - marks so here was the opening one now
207:44 - let's get the closing one so we'll click
207:46 - on this
207:47 - scroll down and as you might have
207:49 - guessed it's just the next number
207:51 - instead of eight two two zero it's eight
207:54 - two two one i'll go ahead and select all
207:56 - of that again we'll go back to vs code
207:59 - and inside of vs code i'm going to
208:02 - expand this just a little bit so we can
208:04 - get to the end of the quote
208:06 - and after that we have got this wrapped
208:10 - in these fancy quotes with this html
208:14 - character that is kind of like an html
208:16 - entity but it's also kind of unicode in
208:19 - a way and this is just another way html
208:22 - handles these characters and we can put
208:24 - this in to wrap the quotes and there's
208:26 - many other symbols you could use and
208:28 - find on this website and one of those
208:30 - symbols that we want to put right here
208:32 - beside our author is a long hyphen so
208:34 - let's see if we can search for that
208:36 - above i'll type in
208:38 - long
208:39 - hyphen and we'll see what comes up well
208:42 - there's the hyphen minus soft minus
208:45 - not seeing it right now well maybe this
208:47 - one maybe not but i know what the code
208:50 - is so let me see if i can just search
208:51 - for that and it will come up it's eight
208:53 - two
208:54 - one two
208:55 - and here we've got the em dash is what
208:58 - it's called i wanted to call it a long
209:00 - hyphen
209:00 - and there was a copy right there in the
209:03 - search results but i'm just going to
209:04 - once again get the code here from the
209:06 - html code
209:08 - and this again is called an em dash so
209:11 - we'll go back to our visual studio code
209:14 - html code i'm going to put that right
209:16 - before the dude so we'll have that
209:18 - longer dash or hyphen before the author
209:22 - is attributed and now before we look at
209:24 - our html or before we look at our web
209:27 - page i'll save that and let's go to the
209:29 - style once again and let's style this
209:31 - quote class so we'll say quote dot quote
209:35 - actually and then
209:36 - we'll apply several things here so the
209:38 - first is a font dash size and let's put
209:42 - three rim
209:43 - now let's put text align
209:46 - center because we want this quote
209:47 - centered and now we can provide a color
209:50 - let's do something we'll adjust this a
209:53 - little bit let's do that flat black
209:54 - color again and now for the main thing
209:57 - that we want to highlight here is the
209:59 - column span property and we can say all
210:03 - so this will span all of the columns
210:05 - that we have on the page okay now let's
210:07 - go back
210:08 - and look at our web page
210:11 - and we see our big quote and it's
210:13 - spanning all three of the columns and we
210:15 - have a kind of our fancy quote symbols
210:17 - here that are wrapped around it as well
210:19 - and we have our em dash or long hyphen
210:23 - after are actually before the author and
210:26 - this is kind of like you might see in a
210:28 - magazine as well where they highlight a
210:30 - quote as you're reading the article but
210:33 - something doesn't look quite right does
210:35 - it we've got all this space underneath
210:36 - but no space on top that's because this
210:39 - is a paragraph that's inside of our
210:42 - section container and remember we set
210:44 - the margin top to zero for all of those
210:46 - so let's go back to our code
210:48 - and now that we're inside of this quote
210:50 - class let's set the
210:53 - margin dash top
210:54 - to to rem and go back and take a look
210:57 - and i think you'll be surprised at what
210:59 - we see
211:00 - there's absolutely no change
211:03 - so what's going on
211:04 - well let's once again look at our code
211:07 - and see the problem
211:09 - what we have here is columns the class
211:12 - columns and then an element columns p
211:15 - where we set the margin top to zero
211:18 - that is more specific than just having a
211:21 - class so let's go ahead and look at our
211:24 - specificity calculator
211:26 - and we can see how this is calculated so
211:29 - i'll put our first one here at the top
211:32 - and that is columns which gives it a
211:35 - score of 10 as a class and then p
211:39 - as an element so it's got a score of 11.
211:42 - and as you might guess if we were down
211:44 - here
211:45 - and just said quote
211:47 - we only have a score of 10. so even
211:49 - though quote comes after
211:51 - this column's p definition in the
211:54 - cascade it's not as specific so that
211:58 - margin is not applying what we could do
212:00 - is say dot
212:02 - columns
212:04 - dot quote and then notice we have a
212:05 - score of 20 so that would work let's go
212:08 - back and apply that in our code and i
212:11 - bet we see the margin change so instead
212:13 - of just quote
212:15 - we'll say
212:16 - columns quote
212:18 - save
212:19 - go back to our page
212:21 - and now we have a margin on top as
212:24 - expected so there's another learning
212:26 - experience about specificity now let's
212:29 - resize the page a little bit and we're
212:30 - going to see something else we might not
212:32 - like
212:33 - i don't like how this breaks our author
212:36 - down to the next line we've got the on
212:38 - one line with his long dash and then
212:41 - dude on the second line so we want to be
212:44 - able to control that break we just
212:46 - definitely don't want the long dash on
212:47 - the first line and then the author on
212:49 - the second
212:50 - eventually it kind of catches up but
212:53 - those breaks in between aren't what we
212:54 - want and we can fix that with css back
212:58 - in vs code let's go back to our html
213:01 - first and let's wrap our author in a
213:04 - span element which is an inline element
213:07 - and let's give this a class equal to
213:10 - no wrap
213:11 - and of course now we'll need to take i'm
213:13 - going to wrap the code here with alt z
213:16 - because we'll need to take this closing
213:17 - span
213:18 - and put it
213:20 - after dude right here so now we can save
213:23 - that and our html is taken care of now
213:25 - we just need to style our no wrap class
213:29 - so underneath our columns quote let's
213:32 - put
213:33 - no wrap
213:35 - inside of no wrap we're going to use the
213:37 - white dash space property
213:40 - and set that to no wrap and so now when
213:43 - we go back to our browser and we resize
213:47 - our quote should not break the dude our
213:51 - author should always stay on the same
213:53 - line including
213:54 - that long dash and that's exactly what
213:57 - happened it all went down to the second
213:59 - line at the same time so we're no longer
214:02 - breaking the dude
214:04 - with his long dash into separate lines
214:07 - and that's the way we want to style that
214:09 - so overall i hope this tutorial has
214:11 - helped you learn how to apply columns to
214:14 - your content on a web page the simple
214:17 - way really without even using flexbox or
214:20 - grid which will be covered in upcoming
214:22 - modules as well
214:25 - today we're going to discuss the css
214:27 - position property you can see on the
214:30 - left i've got visual studio code on the
214:32 - right i've got chrome and we're using
214:34 - the live server extension so any changes
214:36 - we make in our html or css today should
214:39 - immediately show up over here in the
214:41 - browser now first let's look at the html
214:44 - page that i have here on the left in
214:46 - visual studio code and you can see it's
214:49 - a basic layout and i'm really using more
214:52 - divs than i'm normally comfortable with
214:54 - all of these div elements they are block
214:57 - elements but they are not semantic they
214:59 - do not provide any additional meaning to
215:01 - a page and they don't really help
215:04 - accessibility at all so in a typical
215:06 - project i wouldn't use a lot of divs but
215:08 - they are good for today's example so you
215:10 - can see we have an outer container and
215:12 - this outer container in the browser
215:15 - is a dashed black border that outlines
215:18 - this container and then we have an inner
215:20 - container and it is a solid blue line
215:24 - here in the inner container and then
215:25 - inside of this inner container and you
215:27 - can't see them right now we have four
215:30 - other divs they all have the class of
215:32 - box but then each has an individual
215:35 - class absolute relative fixed
215:38 - and sticky and those are possible values
215:42 - for the position property and we'll look
215:44 - at each of those let's jump over to the
215:46 - style.css file you can see i'm importing
215:50 - in that roboto font as i have been in
215:52 - the last several tutorials for this css
215:55 - series and then i also i guess i have
215:57 - the lobster font here too although i'm
215:59 - not using it right now i've also got
216:02 - this css reset already in place with a
216:05 - margin of zero padding of zero and box
216:08 - sizing equal to border box
216:11 - for the body we're using that roboto
216:13 - font family and then we also have a font
216:16 - size of one and a half rims and then a
216:19 - min height of 200 viewport units so that
216:23 - means besides what you see here we've
216:25 - got another full page that we can scroll
216:28 - down to and we'll need that in just a
216:30 - little bit
216:31 - then we have the styles for the outer
216:33 - container already here you can see the
216:35 - dashed border it's three pixels we've
216:38 - got a width and a height set on it just
216:40 - for this example and a top and bottom
216:43 - margin of 40 pixels the auto for left
216:46 - and right centers the container and then
216:48 - we'll see something very similar here
216:50 - for the inner container of course the
216:52 - different styles just sizing it a little
216:54 - differently and the color and size of
216:56 - the border and then we have the box
216:58 - class that applies to the four divs that
217:00 - you cannot currently see
217:02 - you can't see them because their font
217:05 - color is white other than that they are
217:07 - a box with 150 pixels width and height
217:11 - and a little bit of padding in there
217:13 - okay with all of that said let's go
217:15 - ahead and style our first class and that
217:17 - was the absolute class
217:20 - so what we'll do for it is set a
217:22 - background color that's different than
217:23 - the others so we can tell them apart a
217:25 - little better let's just set that to a
217:27 - blue we'll use hexadecimal there and
217:29 - then let's go ahead and set the position
217:32 - but the first position value we're going
217:34 - to use is static and that is the default
217:37 - of all elements they're
217:39 - static just already when you put them on
217:41 - the page so essentially it's not going
217:44 - to change anything i just wanted you to
217:46 - see that value to know that's the
217:48 - default even if you don't set it so now
217:51 - let's go ahead and set a position of
217:53 - absolute and see what we get when we
217:56 - save it really didn't change anything
217:58 - and that's because we didn't set any
218:01 - other value when we set these values we
218:04 - need to go ahead and set
218:06 - a top
218:07 - left right or bottom we don't have to
218:10 - set all of them but it needs at least
218:12 - one to change where it's at so let's set
218:15 - the top to zero see what we get
218:18 - it moved it all the way to the top of
218:20 - the browser now what if we set
218:24 - left to zero now moved it all the way to
218:27 - the left so it's in the upper left
218:29 - corner so absolute positioning needs a
218:33 - relative parent
218:35 - and if it doesn't have an ancestor
218:37 - element that is positioned relative
218:41 - then it takes the initial boundary or
218:43 - the initial box which is essentially the
218:45 - browser window and so that's why it went
218:48 - up here to the top and then the left
218:50 - when we set that position but now we can
218:53 - scroll up and we can set a position on
218:55 - this outer container
218:57 - you see i'll set the position to
218:59 - relative
219:00 - and now look what happens to our
219:02 - absolute box it now has an ancestor that
219:05 - is positioned relative so this
219:07 - positioning is no longer relative to the
219:10 - browser window it's relative to this
219:13 - ancestor that has the position set to
219:15 - relative
219:16 - but what if we set the position to
219:18 - relative on more than one ancestor
219:21 - i'll do that here if i could spell
219:23 - relative again
219:24 - and i'll save and now you can see
219:27 - this is back where we started inside the
219:30 - inner container and that is because it
219:34 - picks the ancestor that is closest to it
219:37 - and so
219:38 - our box started inside of this inner
219:41 - container so with the outer container
219:43 - set to relative and the inner container
219:45 - set to relative it picks the closest one
219:48 - the nearest one and that is the inner
219:50 - container so we're back here now as you
219:52 - might have guessed the zeros are
219:55 - essentially the default choices there so
219:57 - if we save we don't really see a change
220:00 - from position absolute with the top and
220:02 - left 0 to where they are now of course
220:05 - if we change
220:07 - which ancestor it was relative to we
220:09 - would see a change as it would move to
220:11 - whichever ancestor it was relative to
220:14 - however we can put in other values so
220:17 - let's do something like 100 pixels
220:21 - and then we could also do left 50 pixels
220:24 - and see what happens and now it moved
220:27 - it's once again absolutely positioned
220:29 - but it's relative to this inner
220:32 - container and it moved down 100 pixels
220:35 - and it moved to the right essentially 50
220:39 - pixels from the left that's how you want
220:42 - to read that and you would say from the
220:44 - top so that's a good way to read those
220:45 - from the top from the left so let's once
220:48 - again change the position relative and
220:51 - put it on the outer container only
220:54 - and save and now we can see the same
220:56 - thing we have moved 100 pixels and 50
221:00 - pixels as we set right here okay i'm
221:03 - going to switch these values back to 0
221:05 - to get our absolute box out of the way
221:08 - and now we'll look at the next box which
221:10 - is the relative one that we have inside
221:14 - the inner container so here we'll say
221:17 - relative for the relative class
221:19 - let's set a different background color
221:21 - let's go with red on this one
221:24 - and then after that
221:27 - we can save that much and we see it
221:28 - already after that we're going to say
221:30 - position
221:32 - relative and we already know that won't
221:35 - change anything by just setting that
221:37 - much
221:38 - but now if i were to say
221:40 - top and here say 100 pixels
221:43 - and then say left and here i could say
221:46 - 100 pixels also
221:49 - it's going to move
221:51 - 100 pixels from the top and 100 pixels
221:53 - from the left so much like we saw the
221:56 - absolute do when it was relative to its
221:59 - parent container and now relative here
222:02 - means it's going to be relative to its
222:04 - parent container already without having
222:06 - to define that relative
222:08 - on the parent so inside of here by
222:12 - setting it relative it's always going to
222:14 - be relative to its parent container
222:16 - let's scroll up for some more room and
222:18 - let's change that top by a few more
222:20 - pixels maybe 300 pixels and get our
222:23 - relative block out of the way as well
222:25 - and now we can pick our fixed class
222:29 - and here let's give this a background
222:31 - color
222:34 - of green if i did it with hex i don't
222:36 - like the bright color i get there so if
222:38 - i say green
222:40 - i get a darker green color so that's
222:42 - what i'm going with
222:44 - position is going to be fixed
222:47 - and here
222:49 - not absolute we just want fixed and then
222:51 - here
222:52 - we're going to say
222:54 - well let's just not put anything yet and
222:56 - we'll save and there we can see our
222:58 - fixed box but now let's say something
223:01 - like
223:03 - top and this will be 100 pixels and if i
223:07 - save notice
223:09 - now it just moved 100 pixels from the
223:12 - top and we can confirm that by removing
223:16 - our position relative here to make sure
223:18 - it's not responding to this outer
223:20 - container and if we save
223:23 - now we have our absolute up here in the
223:26 - corner but the fix stayed exactly where
223:29 - it was so it's only 100 pixels from the
223:32 - top
223:33 - and then after that
223:35 - what will happen is it will just stay
223:37 - right there even if we scroll so that's
223:40 - what it means to be in a fixed position
223:42 - so i scroll
223:44 - and that's why we have that 200 viewport
223:47 - unit height so i can scroll down to a
223:49 - second page our fixed block is staying
223:51 - in a fixed position the entire time and
223:55 - so it's out of the flow of the page
223:58 - just like our other blocks are
224:00 - but
224:01 - it is never moving even when we scroll
224:04 - the page and this is a good time to
224:06 - point out that the fixed block is over
224:09 - the absolute block right now
224:11 - that is decided by what element comes
224:14 - first and what element comes last in the
224:17 - html so if we go back to the html and i
224:20 - took this fixed div
224:22 - and i put it before the absolute div and
224:26 - now i save
224:28 - absolutes on top but that's not always
224:31 - convenient
224:32 - when we're working with pages to go and
224:34 - change the structure of the html so we
224:37 - can also do this with css if we want
224:40 - that absolute block on top we would just
224:43 - come over here
224:44 - and change the z dash index you might
224:48 - call that z
224:49 - but it's i call it z the z dash index
224:53 - and the default value is zero so that's
224:56 - not going to change anything but if we
224:58 - give it a higher value and we don't need
225:01 - to go 10 or 20 or 100 higher we can just
225:04 - go
225:05 - one higher and save and now our absolute
225:08 - block is on top of the fixed block but i
225:11 - can scroll and the absolute block goes
225:13 - away our fixed block is still there okay
225:16 - we've got one more left and that is
225:19 - sticky sticky is just a little different
225:22 - than fixed
225:23 - and that's because it will stay in its
225:25 - normal flow until it reaches a spot that
225:29 - you have defined so here we're going to
225:32 - say
225:33 - background color and let's just make
225:35 - this black
225:38 - and then we'll say position
225:40 - sticky and we can save
225:43 - and there it is and now we haven't put
225:45 - any spot essentially say a top where it
225:49 - would stick so right now if we scroll it
225:52 - just scrolls right off the page
225:54 - but we could say
225:57 - top 0 and save and now let's see what
226:01 - happens when we scroll i scroll our
226:03 - sticky block
226:04 - stays at 0 momentarily but it's running
226:08 - out of the container notice when the
226:10 - container that it is in
226:13 - reaches the end and begins to scroll off
226:15 - the page
226:17 - then the sticky block goes ahead and
226:19 - scrolls off the page unlike the fixed so
226:22 - now when we scroll back down it stays
226:25 - and so maybe we could push that down a
226:27 - little further
226:29 - or something but overall or i could make
226:31 - this a little longer but overall you see
226:33 - it stick at the top
226:35 - and then
226:37 - it moves again when the container
226:39 - catches up to it and scrolls off the
226:41 - page okay it's good to see all these
226:43 - examples but it's better to even put
226:45 - some of them to use and you will see how
226:48 - they're used in page construction so
226:50 - i've got a quick example coming up for
226:52 - that before we do that i want to go back
226:55 - to something we talked about a few
226:56 - lessons ago and that's how to make
226:58 - something disappear we covered display
227:00 - none
227:01 - and we covered the opacity where we
227:04 - could make something fade all the way
227:05 - down to being not only see-through but
227:08 - completely disappearing but i said both
227:11 - of those were not good for accessibility
227:13 - display none completely removes it from
227:15 - the page a screen reader would not read
227:17 - what we were doing
227:19 - opacity makes it invisible and it might
227:23 - not be the best way to do what we're
227:26 - talking about but what if we had
227:28 - something
227:29 - that needed to still be part of the
227:31 - document but we wanted it off the page
227:34 - well position absolute is great for that
227:37 - so i'm going to
227:38 - go ahead and comment out well we don't
227:41 - really need to comment this out i'll
227:42 - just change this value because we would
227:44 - take the left value
227:46 - for example and i'll set it to minus
227:50 - 10 000 pixels
227:52 - and save
227:54 - notice
227:55 - it's gone but it's still part of the
227:57 - document it's still in our html
228:00 - and when it's processed by a screen
228:02 - reader it would still be read say it was
228:05 - a paragraph or the label for an input
228:07 - and that's important to accessibility so
228:10 - often times when i need to remove
228:12 - something visibly from a page but i
228:14 - still need it to be part of the page for
228:16 - accessibility reasons i position it
228:19 - absolute and i move it say a random
228:22 - number here but minus 10 000 pixels is
228:25 - kind of my go to
228:26 - way off to the left where it will not be
228:28 - seen but it will still be red so i'll
228:31 - change this back but overall just
228:34 - remember that trick for taking something
228:36 - off of the page okay now let's move on
228:38 - to our second example so what i'm going
228:40 - to do is grab everything we see here
228:43 - from line 13 down to line 28
228:47 - if i can get to the right spot line 28
228:50 - and comment that out i do that with
228:52 - shift alt and the letter a in visual
228:54 - studio code now i'm going to grab the
228:56 - rest of the html i have here and
228:58 - uncomment it and i do that the same way
229:01 - shift alt and the letter a
229:03 - and now you can see
229:04 - i have a button element with a class of
229:07 - social and it just has this little
229:09 - rocket emoji on it after that i've got
229:12 - some sections one two
229:14 - three sections each one has an id one
229:18 - two and three inside each section there
229:21 - is a header with a class of blue
229:24 - header one
229:25 - header with a class of red header two
229:28 - and a header with a class of green which
229:31 - is header three then you can see each
229:33 - one has an h2 heading inside of it just
229:36 - to have a little bit of text one two and
229:37 - three as well and then there is a footer
229:40 - and inside the footer we have anchor
229:43 - links to those different parts of the
229:46 - page one two and three if you remember
229:48 - from learning basic html you don't just
229:50 - have to link away from a page you can
229:53 - link to different parts of a page with
229:55 - that anchor link and we're linking back
229:57 - to each id
229:59 - for each section so i'm going to save
230:01 - this now and we see the basic html over
230:05 - here to the right
230:06 - now i'm going to jump back to the css
230:08 - i'll leave all of this here because it
230:10 - won't hurt anything but i'm going to put
230:12 - in a dividing line and a reminder for
230:14 - you that will be available in the source
230:16 - code that says remember how to make
230:18 - things disappear that we just talked
230:19 - about now after that we can apply some
230:22 - new styles to what we now have in our
230:24 - html but i'll leave these old styles in
230:26 - there as well as well as
230:28 - leaving in the commented out divs from
230:32 - the first part of this tutorial okay now
230:34 - we're going to take each section element
230:36 - and we're going to set the height of
230:38 - each section to 100 viewport units so
230:42 - now you can see on the first page we
230:45 - have header 1 and the rocket is here too
230:47 - then we have a second page with header
230:49 - two and a third page with header three
230:52 - and eventually we have a footer with
230:54 - three links in it as well
230:57 - okay let's scroll up a little bit and
230:59 - then after this section we can go ahead
231:02 - and define a let's say a blue clasp
231:05 - because we need one for each color that
231:06 - we had this would be background color
231:09 - and i'm going to choose blue here
231:12 - now at the end of this line i can press
231:14 - shift alt and the down arrow to copy
231:16 - down a couple of times and then i'm
231:18 - going to change this one
231:20 - to red and i'll change this hex color to
231:23 - red
231:24 - and then this last one will be green
231:28 - and i'm going to change this to the
231:30 - keyword green because i like that green
231:32 - just a little bit better so now i'll
231:34 - save and we can see the header colors
231:37 - have changed for each page after that
231:40 - let's put in some styles for the header
231:43 - and the footer they can share these
231:44 - styles so we have header comma footer
231:46 - and it will apply to both so i'll say
231:48 - color
231:49 - and we'll set the text to white
231:51 - then we'll set the text align
231:54 - to center
231:56 - then let's set the height of the header
231:58 - and the footer both to 100 pixels and
232:01 - let's pick a big font size so let's go
232:03 - with like five rims here and save and we
232:06 - can see that got very big for each one
232:09 - okay time to scroll just a little bit
232:11 - more and now a couple of styles just for
232:13 - the header
232:15 - we'll say position
232:17 - this will be sticky or i should say
232:19 - headers because there is more than one
232:20 - header element
232:22 - and then the top will be zero so that is
232:25 - set for all three header elements that
232:27 - we have on the page now now we'll set
232:29 - some style for the footer
232:32 - say background dash color let's make
232:35 - this one black
232:37 - now let's set the
232:38 - position to fixed and this will give us
232:41 - something to talk about and compare to
232:43 - sticky
232:45 - and we'll set the bottom to zero and
232:47 - we'll see what we get with that okay so
232:50 - what we have so far
232:52 - is a header one now we still have this
232:54 - rocket button above
232:56 - and then it's stopping at the top notice
232:58 - we scrolled now the word one disappeared
233:01 - but header one stops at the top here
233:03 - comes header two
233:06 - now it stops at the top
233:08 - and the text scrolled on up and now
233:10 - here's header three
233:12 - now our bottom here it looks like we got
233:15 - maybe a little bit of a large font issue
233:17 - there so let's pull this font size five
233:21 - out of the definition for both
233:23 - and let's just put it here
233:25 - in the header if we save now we get more
233:28 - what i wanted to see down here and
233:30 - notice
233:31 - since we used position fixed it pulled
233:34 - it out of the normal flow of the page
233:37 - what would normally be a block element
233:40 - and span the full width here is not
233:42 - spanning the full width now so what we
233:45 - would need to do if we were going to use
233:47 - position fixed is set the width to 100
233:50 - percent
233:51 - and then our footer would work but there
233:54 - is a fix also
233:55 - even though it's not really going to
233:57 - scroll or move that we just always want
234:00 - it to be in place we could just set this
234:02 - to position sticky
234:04 - and
234:05 - set bottom to zero and it's always going
234:07 - to be there so now let's just set a
234:09 - little bit larger font
234:12 - for the footer as well so let's say font
234:14 - size maybe three rims and all the links
234:17 - will stay okay that looks good so
234:20 - one two three links and we have each of
234:23 - our pages as well you can see how this
234:25 - is coming together already as an example
234:28 - let's scroll down just a little bit more
234:30 - and under the footer i'm going to put a
234:33 - visited
234:35 - pseudo class here for the links
234:38 - and say that's going to be
234:40 - white so our links there in the footer
234:42 - change to white much easier to see
234:44 - and now our rocket here at the top our
234:46 - social link
234:50 - so for that we'll set the background
234:52 - color once again and here let's use a
234:55 - royal blue
234:57 - after that
234:58 - we'll set the color to white
235:02 - and let's say a font size because it's a
235:05 - button and it will not already just
235:08 - inherit everything that we would
235:10 - normally inherit in paragraphs when we
235:13 - set that font size
235:14 - at the top of the page so here we're
235:16 - just going to say inherit so it catches
235:18 - up to the font size of everything else
235:21 - padding of one ram again
235:23 - now we'll set a position
235:25 - of fixed
235:27 - and we want this to stay in the same
235:29 - place all the time so let's say
235:31 - 30 percent from the top and then the
235:34 - left is going to just be zero
235:37 - now this looks more like a social button
235:39 - and maybe you're used to seeing several
235:41 - buttons over here for different social
235:43 - media but it should stay in place as we
235:45 - scroll so let's check it out
235:47 - and it sure is it's staying right there
235:50 - as we scroll past each one of our pages
235:52 - so we have header one two and three now
235:55 - if we wanted it always on top we could
235:57 - go ahead and set that z index
236:01 - and set that to one and now when we
236:03 - scroll we should see it on top of each
236:06 - header as goes by and we do so an ugly
236:10 - example but an example nonetheless where
236:12 - each page section say this is a single
236:15 - page application or a spa if you will
236:18 - each page section has its own header and
236:21 - sticky allows those to scroll up and
236:23 - then stay in place until the content for
236:26 - that particular section is gone
236:29 - and then we have our social media button
236:31 - over here with the rocket to the left
236:33 - and at the bottom i showed you how to
236:35 - use fixed or sticky and you've got links
236:39 - to each section okay now let's check out
236:41 - these links so if i click three
236:44 - it instantly shows three
236:46 - two we're at section two
236:49 - one we're at section one there's one
236:51 - more thing we can do that will make that
236:53 - look just a little cooler if we want to
236:56 - when we are choosing those different
236:58 - sections
236:59 - of our single page application and we
237:01 - need to put this back up here i'll put
237:03 - it at the top of this new example but it
237:06 - needs to go in the root element this
237:08 - won't work in the body element but we
237:09 - can set the scroll dash
237:12 - behavior
237:14 - to smooth and if we save that
237:18 - now let's click number three
237:21 - and notice how we get that little scroll
237:23 - action that's kind of nice
237:26 - so
237:27 - that one setting makes that scroll go
237:30 - from instantaneous to just a smooth
237:33 - little scroll between the sections so i
237:35 - hope this example has showed you how you
237:38 - can apply the position property with css
237:41 - and i hope the previous example gave you
237:44 - some pretty good differences between all
237:46 - the different values that you can use
237:48 - let's move on to css flexbox
237:51 - fundamentals we'll be learning the css
237:53 - properties that you'll use most
237:55 - frequently when working with flexbox you
237:57 - can see i've got visual studio code here
237:59 - on the left and it's in a smaller window
238:01 - today i've got a larger browser window
238:03 - here on the right and i'll quickly look
238:06 - at the html file as well that we're
238:07 - starting out with and this will be
238:09 - available in the source code that you
238:11 - can download but we've just got six divs
238:14 - right here and all of them have a class
238:16 - box and then they each have their own
238:18 - number as we see on the page one two
238:20 - three four five and six
238:22 - divs are block elements and so they're
238:25 - spanning the full width of the container
238:27 - and they're stacked on top of each other
238:29 - and you can see we have a main element
238:32 - with the class container as well
238:34 - okay back inside of our css file we're
238:37 - starting out by bringing in the roboto
238:39 - font from google fonts we've got a very
238:42 - basic css reset here at the top
238:45 - on the body we're setting up that roboto
238:48 - font we've got a min height of 100
238:51 - viewport units so it's the full screen
238:53 - or the full browser window and then
238:55 - we've got padding of 20 pixels so you
238:58 - see it pushing down
238:59 - our main container from the top that 20
239:01 - pixels here it's also on the left right
239:04 - and bottom it's just harder to see that
239:06 - and then we have some styles on the
239:08 - container so it's got a max width of 800
239:10 - pixels a minimum height of 400 pixels
239:14 - margin in line set to auto so it is
239:17 - centered horizontally here and we should
239:19 - have the same amount of space on the
239:20 - left and the right we've also got a
239:23 - black border going around the main
239:25 - container but you really can't see that
239:26 - right now because the contents are black
239:28 - as well
239:29 - and then the boxes they have a min width
239:32 - and min height of 100 pixels and
239:34 - remember the boxes are the six divs
239:37 - it's got a background color of black a
239:39 - color of white that we see on the
239:41 - numbers font size is two rims so the
239:43 - numbers are a little bigger and just a
239:45 - little bit of padding of 0.5 rim and
239:48 - that's what we're starting out with for
239:50 - our code but we're going to apply flex
239:53 - and the area that we'll apply that to
239:55 - first is the container we'll make our
239:58 - container a flex container and as soon
240:01 - as we apply flex
240:03 - i need to spell display properly
240:06 - things will change on the page so i will
240:08 - save and now we see some big differences
240:10 - over here we've got one two three four
240:12 - five six going horizontally instead of
240:15 - vertically and they're not stacked on
240:17 - top of each other so the divs are a min
240:20 - width of 100 pixels so they're about 100
240:23 - pixels wide each and then their height
240:26 - is filling out the full 400 pixels we
240:28 - have for min height on our container you
240:30 - can now see the border over here on the
240:32 - right side of the container at least
240:34 - but they are now considered to be flex
240:37 - items and so they're starting out at the
240:40 - position flex start and that's where
240:42 - they default to in this alignment so
240:44 - they're just all over here to the left
240:46 - so let's look at how we can align these
240:48 - horizontally first
240:50 - we're going to do that with the justify
240:53 - content property
240:55 - and the place they're starting is called
240:57 - flex start so we'll say flex
241:00 - start and yes i'm already wrapping the
241:02 - code i pressed alt z and visual studio
241:04 - code to do that so we don't see any
241:06 - change but what if we switch this to
241:09 - flex
241:10 - end and save well now they're all over
241:13 - to the right instead of being all the
241:16 - way over to the left
241:17 - likewise we can set this to flex center
241:22 - and now they're all in the center
241:24 - you know let's go ahead and add another
241:26 - property here called gap
241:29 - and we'll set this to one rim and now
241:31 - look at what happens we get a one rem
241:34 - gap between each flex item so that helps
241:37 - us see each individual one just a little
241:39 - bit better now continuing with the
241:41 - justify content there are some other
241:43 - good values worth looking into center is
241:46 - often used but there's also space around
241:51 - and now look at that now this isn't used
241:53 - as often and maybe you can see why we've
241:55 - got
241:56 - some space between each one
241:59 - but look the space at the edges before
242:02 - the end and beginning of the container
242:04 - aren't quite as big
242:05 - and also if we remove the gap now at
242:08 - this point we should still see that
242:10 - space around evenly space everything out
242:13 - except at the beginning and the end so
242:16 - what if we did the other one that we saw
242:18 - space between
242:20 - well now there's no space at the
242:22 - beginning and no space at the end but
242:24 - it's evenly spaced between all of the
242:26 - flex items and then there is a little
242:29 - newer value that is much better to use i
242:32 - think it was probably requested and that
242:35 - is space evenly so not only between the
242:37 - items but also at the beginning and the
242:40 - end we have evenly spaced the items
242:43 - throughout the container okay i'm going
242:45 - to change this min height on our boxes
242:48 - to a height of 100 pixels so we can
242:51 - clearly see each box and some space in a
242:54 - vertical way because now we're going to
242:56 - align the items vertically as well so we
242:58 - use justify content for horizontal as
243:02 - things are currently set to a row and
243:04 - that's why we use justify content for
243:06 - the horizontal now let's go ahead and
243:09 - align the items
243:10 - so this would be the other axis
243:13 - and that's going to be vertically so if
243:15 - we align the items to
243:18 - flex start
243:20 - they're where they are by default right
243:23 - at the top but likewise we can say flex
243:26 - end
243:27 - and now all of the items are at the
243:30 - bottom
243:31 - as you might guess
243:32 - we could say flex or align items center
243:36 - and now they're centered vertically as
243:39 - well now we don't have the other options
243:41 - with the line items like space around
243:43 - space between because if you think about
243:45 - it it's only one item at a time when
243:48 - we're aligning the items
243:50 - horizontally here we had six items in
243:52 - this row but if we look vertically we've
243:55 - just got one item for each alignment so
243:58 - that's why we don't have the space
243:59 - options now we can change the direction
244:02 - as well so let's look at flex
244:05 - direction and by default we're in a row
244:08 - so we could say
244:10 - column and now if we save we've got all
244:14 - of our blocks stacked once again as a
244:16 - column and remember i removed that gap
244:20 - that we had so there's no longer a space
244:22 - between them and they're also taking up
244:24 - the full height of our container
244:26 - remember our container has a min height
244:28 - of 400 pixels but we've got at least 600
244:32 - pixels worth of divs right here so
244:35 - they're filling this up so there's no
244:37 - extra space to space out as well
244:40 - now if we go ahead and change something
244:42 - let's change the align items and we'll
244:45 - see if you think we're going to get what
244:48 - we get i will save and now everything's
244:51 - to the left because our align items
244:53 - became the horizontal alignment again
244:56 - just one item at a time instead of all
244:59 - six all six are now on the vertical
245:02 - alignment so by having flex end they
245:05 - will all go to the right
245:07 - and of course we were back at center and
245:10 - that put everything in the center so if
245:13 - we change our justify content we not
245:15 - might not see much of a difference right
245:17 - now because we're taking up all that
245:19 - space so if i said flex start for
245:21 - example
245:23 - it didn't really change that's because
245:25 - we're eating up all of the space of the
245:27 - container already so there's no real
245:30 - change to notice
245:32 - when we have this set with 600 pixels
245:35 - inside of a container where we're taking
245:37 - up all of the space but if we change
245:39 - this to row
245:41 - now we'll see our center where they're
245:43 - all together once again with no gap
245:46 - whatsoever if we wanted a gap
245:49 - we could put our gap property back in
245:51 - and say one rim and now we have that one
245:54 - rem gap between each one of these but
245:56 - they're centered now of course if we
245:58 - change this back to space evenly we
246:00 - might not want that gap property at all
246:03 - now since we have the flex direction
246:05 - property in here there's more that we
246:06 - can do than just row or column what
246:09 - about row
246:11 - reverse and if i save
246:13 - notice now
246:15 - six that was to the far right is now to
246:17 - the left we reversed the order of the
246:20 - elements here so row reverse is an
246:22 - option and as you might guess column
246:25 - reverse is also an option now let's look
246:27 - at one other property here i can leave
246:29 - the row reversed for this for now but
246:32 - what i need to do
246:33 - is drag this all the way over to take up
246:36 - the full screen and open up dev tools
246:39 - and once we have devtools here we're
246:41 - going to notice something as i resize
246:43 - the window
246:45 - the flexbox row our row of boxes
246:49 - it's
246:50 - really not changing it's outgrowing it's
246:53 - not resizing or shrinking to stay inside
246:56 - of the container or the page so that is
246:58 - considered an overflow so there is a
247:01 - setting for that let me bring up visual
247:04 - studio code again and the setting that
247:06 - we could use is called flex dash wrap
247:10 - and so we would want to set that to wrap
247:13 - and now if we save and we have our dev
247:16 - tool still open in the window you can
247:18 - see it wrapped into two rows
247:20 - and we have it reversed now you might be
247:22 - surprised at this because 6 isn't at the
247:24 - top now but our rows have reversed so 3
247:28 - is to the far left and 1 is to the right
247:31 - 6 is to the far left of row 2
247:33 - and 4 is to the right now we could
247:35 - change this back of course to row
247:38 - see everything in the order that we
247:40 - would normally see it in one two three
247:42 - four five six
247:43 - and then there's also shorthand that we
247:45 - could use instead of flex direction and
247:48 - flex wrap and that would just be called
247:51 - flex flow so let me just select both of
247:54 - these and now we'll have flex flow
247:56 - and then the first is the direction so
247:59 - we'll say row the second value
248:01 - is wrap and now by default
248:05 - you noticed our row did not wrap so the
248:07 - default value is no wrap but we want it
248:10 - to wrap so we'll set that and now
248:12 - nothing should change about the page the
248:14 - way we had it see if i can resize just a
248:16 - little more here
248:18 - and yep we've got
248:20 - wrapping of the rows as it needs to and
248:23 - it will even get down to just one column
248:26 - and now we'll bring it back to two
248:27 - columns or
248:29 - three rows is what we should consider
248:31 - that since we have it set to rows and
248:33 - there's
248:34 - again back to two rows and
248:37 - still two rows with this width because
248:39 - we've just got one square that carries
248:40 - down i'll bring it back to about even
248:42 - here
248:43 - and now that we've got that this is
248:45 - shorthand so remember the first is the
248:48 - flex direction the second is the flex
248:51 - wrap with flex flow okay there's one
248:54 - more property to consider on our
248:56 - container remember we're putting all of
248:57 - these properties on the flex container
249:00 - right now that i've outlined here with
249:02 - our one pixel black border i'm going to
249:04 - scroll just a little for some more room
249:06 - here
249:07 - underneath let's put align
249:10 - content
249:12 - now this aligns the rows so you can see
249:15 - by default we have two rows and they're
249:18 - spaced out here there's some room
249:20 - between them now this will take values
249:22 - just like justify content but it's
249:24 - aligning the row so we'll put in flex
249:27 - start first and if we save
249:29 - notice both our rows move up to the top
249:33 - likewise flex end
249:37 - move them both to the bottom
249:38 - and flex are not flexed just
249:41 - center
249:42 - has them both in the center so that
249:44 - wasn't the default either what about
249:47 - space
249:49 - between that we could also use on
249:51 - justify content yep it puts one on the
249:53 - top one on the bottom
249:55 - space around
249:57 - so that's a little different as well
250:00 - and then space evenly that we might like
250:03 - if i could spell evenly once again
250:05 - and save and yes that changed the
250:07 - alignment just a little bit as well okay
250:10 - now we're ready to move on to the
250:12 - individual flex items because we can
250:14 - also set properties on the flex items
250:17 - instead of just the container and that
250:19 - will also change how flexbox handles the
250:22 - layout so the first thing we can do is
250:25 - apply some of the things we learned from
250:27 - above let's go ahead and make each one
250:30 - of these flex items a flex container now
250:34 - once again we will be applying
250:35 - properties as a flex item soon but if we
250:39 - make these a flex container
250:41 - then we could go ahead and display those
250:44 - numbers
250:45 - centered right in the middle of each box
250:47 - so if we say display flex
250:50 - justify content
250:52 - center
250:53 - and then align items
250:57 - center
250:59 - and save now all of our numbers are in
251:01 - the middle of each box
251:03 - and yes as you might guess you could use
251:06 - these three properties to center any
251:09 - element inside of a container or you
251:12 - could center an element inside of the
251:15 - body which would be considered a
251:17 - container the body element of a page so
251:20 - now you essentially know how to center
251:22 - something in the middle of the page if
251:23 - you want to okay now we have a few
251:26 - properties to look at four flex items
251:29 - again these three properties made each
251:31 - item a flex container of its own but
251:34 - they are still flex items
251:36 - inside of the larger flex container as
251:38 - well so what i want to do besides create
251:41 - some extra space here is go back to the
251:43 - html i'm going to select the last four
251:47 - divs there that have the class box and
251:49 - i'm going to comment them out for now by
251:51 - pressing shift alt and the letter a
251:54 - and then saving and now we'll just have
251:57 - two divs with number one and number two
251:59 - that we can work with in the css so
252:02 - before we put a min width on each box a
252:05 - min width of 100 pixels and i'm going to
252:08 - go ahead and comment that out as well
252:10 - again shift alt in the letter a
252:13 - and now no width will be set and you can
252:16 - see they're only
252:17 - getting the width of the content
252:19 - essentially here on the page right now
252:21 - but we can set a property called flex
252:24 - basis and you can give that an absolute
252:27 - value or a percentage if you want so
252:30 - what i'm going to do is give it
252:32 - three well now let's go with 100 pixels
252:35 - again just to compare to what we had so
252:37 - if we'll save now that's essentially
252:39 - giving it a minimum width right now now
252:42 - that could change it it's not the same
252:44 - as min width but that's essentially what
252:46 - it's doing in this case and now another
252:48 - property we can provide is called flex
252:51 - dash grow
252:53 - and we'll set that to 1 and that's
252:54 - setting this
252:56 - the same value and it's a unitless value
252:58 - but we're setting the same value on both
253:01 - boxes which is essentially saying if
253:03 - they need to grow to fill out the page
253:06 - they will grow the same amount so if we
253:08 - save you can see now our items both grew
253:12 - and they are filling out the page they
253:15 - do have that gap in between but other
253:17 - than that they grew as much as they
253:19 - needed to to take up the rest of the
253:21 - container i'm going to scroll up just a
253:24 - little bit and we're going to use a
253:26 - pseudo selector to select just one of
253:28 - these elements now so i'll say
253:31 - inf
253:31 - i'm sorry not inf i need the class first
253:34 - and class was box and then it's in
253:36 - child
253:37 - and let's select the second element here
253:40 - and let's override
253:42 - that flex grow and set it to two so now
253:46 - this second one should take up more than
253:49 - the first but it's not going to be
253:51 - double and i'll tell you why notice it
253:53 - did grow more than the first but they
253:56 - both have a flex basis of 100 pixels so
253:59 - what we're telling the elements to do
254:02 - here with flex grow
254:03 - is after the 100 pixels so each element
254:06 - gets their 100 pixels then whatever is
254:09 - left
254:11 - the one that has flex grow 2 is going to
254:13 - get twice as much of that extra space as
254:16 - the element that has flex grow 1. so
254:19 - it's saying whatever space is left you
254:22 - take two for every one that i take
254:24 - essentially now the other one to
254:26 - consider is flex shrink now before we
254:30 - get to flex shrink notice we currently
254:32 - have
254:33 - flex wrap still set so once they get to
254:36 - where they can't fit in
254:38 - that 100 pixel size they essentially
254:41 - wrap down to two rows here with our
254:43 - current setup we're going to have to
254:45 - really remove that wrap setting so we
254:49 - can see what flex shrink does for us so
254:51 - i'm going to select grow here ctrl d to
254:54 - select the second grow and then change
254:56 - them both to shrink
254:58 - so now we have flex shrink in place i'm
255:01 - going to scroll back up to our container
255:03 - and instead of wrap i'm going to set
255:06 - no wrap
255:07 - so now
255:09 - with the larger value here of shrink 2
255:12 - our second box is set to shrink more
255:16 - than the first box and this might be
255:18 - easier to see if we make the boxes
255:19 - larger as well so let me come out here
255:22 - as far as i can for the page with dev
255:24 - tools open and maybe set these to
255:27 - let me try
255:28 - 250 pixels and see if that fits inside
255:32 - the screen we have yep so that works
255:35 - right now they look like they're
255:36 - basically equal size
255:38 - but as we shrink the page down we should
255:42 - see the one on the right and we do
255:44 - number two is getting smaller than
255:47 - number one so that is because number two
255:50 - has a larger value of flex shrink than
255:53 - number one so it's the same concept as
255:55 - flex grow except now we're shrinking and
255:58 - that's preventing the overflow out of
256:01 - the box that shrinkage is what that does
256:04 - so i wanted to eliminate the wrap or it
256:06 - would go ahead and wrap instead of
256:09 - shrink at some point so there we go for
256:11 - flex grow and flex rank flex basis is
256:15 - giving that size basis but notice over
256:18 - here we are now shrinking below 250
256:22 - pixels here for number two so just like
256:25 - flex grow lets something extend above
256:28 - the basis flex shrink lets something
256:31 - shrink below the basis so either way
256:34 - now that we've covered all three of
256:36 - those different properties we can put
256:38 - all of them into a shorthand as well so
256:41 - here
256:42 - with the 250 pixels i guess i'll keep
256:44 - that we can just say flex
256:47 - the first value is grow
256:49 - the second value is shrink and the third
256:52 - value is basis so we could do that
256:55 - remember we could also put something
256:57 - over here like a percentage let's say
257:00 - maybe 40
257:01 - percent see if that works out for us
257:04 - that's about the same and then we could
257:06 - do the same here so we could
257:08 - say flex two
257:11 - for grow two for shrink
257:14 - and forty percent here as well now when
257:16 - we save they look the same size
257:19 - but if we grow
257:20 - number two is going to get a little
257:22 - larger than number one and if we shrink
257:24 - number two is going to get a little
257:26 - smaller than number one although they're
257:28 - both shrinking quite a bit right there
257:30 - and that could be because i'm using a
257:31 - percentage as we get down it's still
257:32 - just taking up 40 percent let's go back
257:35 - to a
257:36 - set value an absolute value we should be
257:38 - able to see this example just a little
257:40 - bit better for the shrinkage so number
257:42 - two gets smaller than number one yep it
257:44 - was because i was using that relative 40
257:47 - before so when it grows number two still
257:50 - gets a little bit larger let me close
257:51 - dev tool well if i close dev tools i
257:53 - won't be able to pull it over at all
257:56 - but number two is larger than number one
257:57 - here it's just a little harder to see
257:59 - maybe if i change the absolute value
258:01 - again
258:02 - to 150 pixels
258:05 - yup number two got even larger there but
258:08 - then as we shrink it down number two
258:10 - does get smaller than number one okay
258:12 - with that complete i'm going to go back
258:14 - to the html and uncomment those other
258:18 - four divs shift alt and the letter a
258:20 - once again to uncomment after we
258:22 - highlight them
258:23 - now you can see number two shrank more
258:26 - than the other divs because we have it
258:28 - set up to shrink more if it needs to
258:31 - right here with our nth child
258:33 - so we could remove that or we could just
258:35 - leave it for now but there is another
258:37 - property i want to cover and it won't
258:39 - impact it so i will just leave that and
258:41 - this would be order so let's go ahead
258:44 - and change the order of this second
258:46 - child as well and let's say
258:49 - order is going to be
258:50 - 4
258:51 - and save
258:53 - now look what happened it has the
258:55 - highest number so it went to the end it
258:58 - didn't go to where the fourth element is
259:01 - it actually went to the end
259:03 - however if we say order zero
259:06 - it's going to be right back where it was
259:08 - but if we want it at the beginning we
259:10 - could say order
259:11 - minus one and now two is there now if
259:14 - you are using this order property on
259:17 - individual elements
259:19 - and then you're also using something
259:21 - like row reverse that we had available
259:24 - up here and let's change this back to
259:26 - wrap as well
259:27 - and now if we switch this to row
259:31 - reverse
259:33 - you might be thinking you were going to
259:35 - move number two to the very beginning
259:37 - but we didn't
259:39 - we moved it to the right and it's to the
259:42 - right of the first row
259:44 - and that is because we reversed it so
259:47 - essentially it was here at the beginning
259:50 - and then we reversed the row so if we
259:52 - went ahead and set this back to its
259:54 - normal position with zero
259:56 - then we would see it's in the middle
259:57 - because it would normally be one two
259:59 - three and that's three two one so that
260:01 - would just be the same
260:03 - but we that is all because we have row
260:06 - reverse at the top so minus one would
260:08 - take it to the right instead of the left
260:11 - likewise a larger number say one
260:15 - totally switched it around and now it's
260:17 - down here at the bottom left and that is
260:19 - because of row reverse again so if we go
260:22 - ahead and remove the reverse up here
260:25 - it may be where we would expect it to be
260:27 - and that's at the very end of the list
260:28 - now because all of the rest of these
260:30 - would be where they were placed
260:33 - essentially with a value of zero so that
260:35 - one makes it a larger value than all of
260:38 - the rest of them so we would give it 0
260:40 - to put it back in place
260:42 - a higher number above 0 to put it at the
260:45 - end and a number like -1 something lower
260:49 - than 0 to put it at the beginning we've
260:51 - covered a lot of flexbox properties
260:53 - today and we will be building some
260:55 - things with it in the future but right
260:58 - now i think the best way for you to get
260:59 - some practice with it besides just
261:01 - playing around with it in your own html
261:04 - and css is to go to this website called
261:07 - flexbox froggy and it's got 24
261:10 - challenges to help you learn flexbox and
261:13 - if i expand it out i think it looks a
261:14 - little bit better in the full screen
261:17 - there we go and you can work through
261:19 - these 24 challenges and learn how to
261:22 - place the frog on the lily pad with
261:24 - flexbox and there's some good challenges
261:26 - in there and it will get you thinking
261:28 - about the different ways to use the
261:30 - different properties that we've just
261:31 - reviewed for flexbox
261:34 - let's learn about css grid layout
261:36 - fundamentals we'll be learning the css
261:38 - properties that you will use most
261:40 - frequently when working with grids
261:42 - so for starter code we've got html here
261:45 - and inside the body we have a main
261:47 - element with the class of container and
261:50 - we have six divs
261:52 - labeled box one two three four five and
261:54 - six by their content they all have the
261:56 - same class box
261:58 - if we look at the style that is
262:00 - currently applied you can see we're
262:02 - importing in the roboto font from google
262:04 - fonts we have a basic css reset
262:08 - inside the body we are just setting the
262:10 - roboto font and setting the body to a
262:12 - min height of 100 viewport units and
262:15 - then we have the box class for those
262:17 - divs background color of black
262:19 - a white font color and font size two ram
262:22 - padding of 0.5 ram and that's all we
262:25 - have to start so i'll drag vs code over
262:27 - to the left
262:29 - and we're using the live server visual
262:31 - studio code extension so any changes we
262:33 - make to the css we should see
262:35 - immediately here in chrome on the web
262:38 - page so here are our six divs now we
262:41 - haven't set any size the main element is
262:44 - a block element so it automatically has
262:46 - 100 width and then so are the divs so
262:49 - they're stacked on top of each other and
262:52 - all six of them have a width of 100
262:54 - percent so they're filling up that main
262:56 - element we're going to cover several
262:58 - different ways to apply grid to our page
263:01 - into these divs so let's start out by
263:03 - styling that container class that we
263:06 - have on the main element and we'll say
263:08 - display grid now instantly when we do
263:10 - this and save we don't see a change but
263:13 - all of these divs instantly become grid
263:16 - items now within the grid after that the
263:19 - quickest way to apply a grid is to use
263:21 - grid dash auto dash flow
263:24 - and you can say row which
263:27 - essentially leaves it as it is because
263:29 - they're stacked on top of each other
263:30 - which now makes six rows
263:33 - or we could change this
263:35 - to column and we will have six columns
263:39 - one for each of the six divs now many
263:41 - times we want more control than just
263:44 - setting the auto flow to column and
263:45 - letting all the columns be defined just
263:48 - automatically like that so let me go
263:50 - ahead and remove grid auto flow and in
263:52 - its place i'm going to put grid dash
263:55 - template
263:56 - dash whoops there we go dash columns
263:59 - that's what i want and now we can set
264:01 - the columns and the width of each now
264:03 - notice i'm wrapping the code so it will
264:05 - wrap to the next line but i'll say 200
264:07 - pixels then i could say
264:10 - 100 pixels and then i could say 200
264:13 - pixels and when i save we now have three
264:16 - columns and you can see the first column
264:19 - is 200 pixels the second is 100 and the
264:22 - third is again 200 but we don't have to
264:25 - use absolute values like pixels we can
264:28 - use fraction units which is a unit
264:30 - that's specifically used with css grids
264:33 - so let's say we've got
264:35 - two fractions for the first column and
264:37 - then one fraction for the second and one
264:40 - fraction for the third now when we save
264:43 - you can see
264:44 - it used all of the available space but
264:46 - it made the first column twice as big as
264:50 - it did the second or the third call and
264:53 - we can also mix so we could say 200
264:56 - pixels and then one fraction one
264:58 - fraction and you see our first column's
265:00 - 200 pixels then the next two columns
265:03 - since they're equal both have one
265:04 - fraction a piece they're splitting the
265:07 - available width that is remaining and so
265:10 - they're eating up all of that so it
265:11 - still has 100 width for the row
265:15 - but
265:16 - the five and six here or the two and
265:18 - three are much wider than what we see
265:20 - for the 1 and the 4. and now something
265:22 - very useful instead of specifying every
265:25 - column especially if many of the columns
265:27 - have the same value you can use a
265:31 - shortcut for that and so we're here
265:32 - we're going to say repeat i could spell
265:35 - repeat and let's say we have four
265:37 - columns and each one is one fraction and
265:40 - now when we save you can see we have
265:42 - four equal columns each being one
265:45 - fraction and then when we get to the
265:46 - second row that is automatically created
265:49 - by grid we've got two columns here
265:52 - because we only had six total grid items
265:55 - so a grid can have empty space and
265:57 - that's what we have here to the right
265:59 - now while this value does not always
266:00 - have to be equal it does have to be a
266:02 - pattern so we could say instead of just
266:05 - one fraction let's say we start with one
266:07 - fraction and then the next column is two
266:11 - fractions and instead of repeating four
266:13 - let's just repeat this twice because
266:15 - it's going to repeat this pattern so
266:17 - with this pattern we're going to have
266:19 - four columns because we've defined two
266:21 - different columns here with the pattern
266:23 - so when i save you can see the first
266:25 - column is one fraction the second column
266:28 - is twice as big two fractions the third
266:30 - column again one fraction and the fourth
266:32 - column following that pattern is twice
266:34 - as big with two fractions now while
266:37 - we've defined our columns here we really
266:39 - haven't applied anything to the rows so
266:41 - everything about the rows is currently
266:44 - implicitly created by css grid we
266:47 - haven't explicitly defined anything for
266:50 - those rows but let's go ahead and do
266:52 - that and to do that we'll use grid dash
266:55 - auto dash rows and let's say 200 pixels
266:59 - to start out
267:00 - and you can see
267:01 - now each row became 200 pixels tall but
267:04 - once again we're not locked into just
267:06 - using 200 pixels here with grid auto
267:09 - rows so we could say
267:11 - min max which is a function and this
267:13 - lets us say the minimum first so we'll
267:16 - say a minimum
267:17 - of let's say 150 pixels tall and then
267:21 - we'll say auto for the max so it could
267:23 - allow it to be taller so now both rows
267:27 - are essentially 150 pixels tall but we
267:30 - have auto here so if our container
267:33 - was taller right now we've got 150 and
267:36 - 150 so that would be a total of 300 but
267:39 - if our container was taller this auto
267:41 - would let it grow so let's set
267:44 - a height
267:46 - or let's set a min height i like that
267:48 - better let's set a min height
267:51 - of 400 pixels
267:53 - and save and now you can see they got
267:55 - taller they should be 200 each so
267:59 - 200 height on the first row 200 height
268:01 - on the second row and that's because of
268:03 - this auto but they will not get smaller
268:06 - than 150 pixels a piece per row now
268:10 - while i'm giving this example of grid
268:12 - template rows and grid our grid template
268:15 - columns pardon me and grid auto rows you
268:18 - should know that the opposite also
268:20 - exists so you could have
268:23 - grid template
268:25 - rows and you could have grid auto
268:30 - columns so i'm giving one example and
268:32 - i'll let you play around with the
268:34 - opposite of those now what else we have
268:37 - are gaps between the rows or between the
268:39 - columns so we could define a
268:42 - row dash gap and we could set that to 1m
268:45 - and save and you can see we now have
268:48 - that gap between the rows
268:50 - likewise there is a column dash gap so
268:53 - instead we could say
268:54 - column gap and save and now we have one
268:58 - em as a gap between each of the columns
269:01 - now these spaces are essentially called
269:03 - gutters that's the space between the
269:05 - cells so it could be a column gap
269:07 - a row gap or we could just define it as
269:11 - gap and as you might guess
269:14 - gap combines both and it will define the
269:17 - row first so if we say row
269:20 - 1 em and just to show the difference we
269:23 - could say 0.5 em for the column and save
269:26 - and you can see the column gap
269:28 - is smaller so you can define each of
269:31 - those separately many times we want them
269:34 - all to be the same and we just leave it
269:36 - all at one size and while i've got em
269:38 - there i kind of want to make that rim
269:40 - instead so i know i'm going back to my
269:43 - default font size there okay now let's
269:45 - look at the individual grid items which
269:48 - we have applied the class of box to all
269:50 - of them so let's use pseudo selectors to
269:53 - just select the ones we want to change
269:55 - and i'll start off with the box class
269:58 - and then i'll use the pseudo selector
269:59 - first dash child
270:02 - and after first child i'm going to set
270:04 - the background color first so background
270:08 - color there we go and i'll make this
270:10 - blue
270:11 - we can save and make sure we have
270:13 - selected the correct grid item that
270:15 - first child and after that let's go
270:18 - ahead and define how many columns this
270:21 - child takes up and this is based on the
270:24 - lines of the grid which i will explain
270:26 - after i set this definition so let's say
270:29 - grid
270:30 - dash column
270:32 - yeah there we go column then we say dash
270:34 - start
270:36 - and we'll start at 1 and then we'll say
270:38 - grid dash
270:40 - column dash end and let's end at four
270:45 - and now if i save
270:47 - well that looks way different doesn't it
270:49 - so what we have done the first line is
270:52 - here on the left hand side of the grid
270:56 - the second line
270:57 - is here
270:58 - when we get to the second column the
271:01 - third line
271:02 - is here when we get to the third column
271:05 - and the fourth line is over here after
271:08 - the third column and before the fourth
271:11 - column and so you can see we told it to
271:14 - start at the first line and end at the
271:17 - fourth line so it really spans the first
271:20 - three columns we can do the same with
271:22 - the row so let's say grid dash row dash
271:26 - start
271:26 - and we'll go ahead and start again at
271:29 - one then we'll say grid dash row dash
271:32 - end and let's end at 3 and save and see
271:36 - what happens when that happens
271:38 - we took up two rows so the starting line
271:41 - was at the top and then the second line
271:44 - was between the first and second row
271:47 - and the third line is between the second
271:50 - and third row so when we told it to stop
271:53 - at line three it stops before the third
271:56 - row now we can see this better with dev
271:59 - tools so i'm going to drag our page over
272:01 - so it takes up the full window and then
272:04 - i'm going to press ctrl shift and the
272:05 - letter i to get to dev tools
272:08 - and then i want to go to elements i
272:10 - believe yep and i'm going to drag this
272:13 - up
272:14 - and no we don't need the console let's
272:16 - look at layout there we go so i don't
272:18 - need to drag that up i need to bring
272:20 - this down maybe i can close that there
272:22 - we go so
272:23 - now we're in layout here not styles not
272:26 - computed but layout and we can scroll up
272:29 - and we can overlay the grid
272:33 - on our main container and look at it in
272:35 - the browser so now we see this and the
272:37 - lines are labeled so you can see one
272:41 - two
272:42 - three
272:43 - four
272:44 - likewise at the top we have one and then
272:47 - two and then three coming down so for
272:49 - the row we start at one and we end at
272:51 - three
272:52 - for the column we start at one
272:55 - and end at four and you can always do
272:57 - this in chrome dev tools just make sure
273:00 - you open it up go down to this second
273:03 - area here and not styles not computed
273:06 - but choose layout and then you can go to
273:08 - grid overlays and there are some other
273:10 - things that you can apply as well it
273:12 - should default to show line numbers and
273:14 - that's what you definitely want when you
273:15 - see the overlays okay with that said i'm
273:19 - going to close this i'm going to drag
273:22 - our chrome window back to the right so
273:23 - we can see our code and let's apply just
273:26 - a little bit more to this grid i'm going
273:28 - to scroll up for just a little more room
273:30 - and i'm going to show you what i do
273:31 - instead of typing all of these out
273:33 - because this gets to be a little bit
273:36 - much so instead of grid column start and
273:39 - end and grid row start and end i would
273:42 - type
273:43 - grid dash
273:45 - column and then i would specify start at
273:48 - the first line then put a slash and end
273:52 - at the fourth
273:53 - and if i save you can see that's what
273:55 - happens likewise i can do that with grid
273:58 - dash row and say start at the first line
274:01 - and at the third line and save and we're
274:04 - back to where we were with fewer
274:06 - properties as long as you understand
274:08 - that these are shorthand and this
274:10 - essentially is the starting number
274:12 - and the ending number for both of these
274:14 - properties let's go ahead and select one
274:17 - more of these grid items so once again
274:20 - use the box class and now i'll use nth
274:23 - dash child
274:24 - and we'll select the second item now for
274:27 - the second item we'll change the
274:29 - background color once again and i'll
274:31 - make this one purple so it stands out
274:33 - and we save we can see that it is now up
274:36 - in the top right
274:37 - after that we'll come down to the next
274:39 - line
274:40 - and let's put our grid
274:42 - dash column
274:44 - and let's say it starts at the first
274:46 - line but ends at the fifth and that
274:48 - should make it span
274:50 - the entire row or the entire container
274:53 - if you will so when i save
274:55 - that made a big change right there
274:58 - then let's use grid row say grid dash
275:00 - row
275:01 - let's have it start
275:03 - at the third line
275:05 - and end at the fourth line and when i
275:08 - save you can see that made some changes
275:10 - too now instead of three and four being
275:12 - below it
275:13 - they came back up here by default in the
275:16 - grid so again that's implicit the grid
275:18 - is calculating where to put everything
275:20 - that we do not explicitly tell it to and
275:23 - now just like flexbox where something
275:26 - that was a flex item could also be a
275:28 - flex container we can do that with grid
275:31 - too so we can nest a grid inside of a
275:34 - grid item so i'm going to take this
275:36 - first child and put
275:38 - display and set that to grid
275:41 - and now inside of that i'm going to say
275:44 - align dash content
275:47 - and just to change it up here i'm going
275:49 - to say end to begin with and we save
275:52 - and look what it did it took the number
275:55 - one down here to the bottom so it
275:56 - aligned the content to the end as you
275:59 - might guess you could choose
276:01 - center
276:02 - and you could have start as well
276:05 - so what i'm going to do is say center
276:09 - and then after center i'm also going to
276:11 - say
276:12 - justify content and we could say for
276:16 - that it could be start and if we save
276:19 - you can see that's to the left
276:21 - and end
276:22 - all the way to the right and if we say
276:25 - center
276:26 - it should be right in the middle so now
276:28 - we have centered both vertically and
276:30 - horizontally so that's how you can
276:32 - center with grid but we can shorten this
276:34 - up by using the place content shorthand
276:38 - and then we could say both properties so
276:41 - we could say
276:43 - end and center and i'll get rid of these
276:45 - other two
276:47 - and you'll see what happens the first
276:49 - one is the align content so it's at the
276:51 - bottom
276:52 - but then horizontally it's centered
276:54 - because that is the justify content and
276:57 - this is the align content but if we just
277:00 - put one value it takes that value for
277:03 - both so we can just say place content
277:05 - center and center anything we want to
277:08 - inside of a grid so now we've looked at
277:10 - how you can quickly use auto flow to
277:12 - create a grid or how you can place grid
277:15 - template columns and rows and then
277:18 - assign different starting and ending
277:19 - points to put the grid items basically
277:22 - anywhere you want them in the grid but
277:24 - there is another way to set up grids too
277:27 - and that is with named grid items and
277:30 - grid template areas so let's do that now
277:32 - but we'll continue to keep this on our
277:34 - page as part of the page so i'm going to
277:37 - go back to the html and i'm going to
277:39 - drag visual studio code back over to the
277:42 - full window to start out okay we want to
277:44 - add a header element first and it's
277:47 - going to have two classes we'll give it
277:49 - a header class and then just an el class
277:51 - for element i'll put an h1 element
277:54 - inside the header and i'll just say
277:56 - header for that
277:58 - after that we'll have our main element
278:01 - then we'll have an aside element that is
278:04 - going to have a
278:05 - sidebar class and also the el class
278:08 - inside the aside element i'm going to
278:11 - use an h2 and we'll just say sidebar
278:14 - inside this h2
278:16 - we'll do much the same for the footer so
278:18 - a footer element with a class of footer
278:21 - and a class of el for element and then
278:24 - inside of that we'll use h2 and we'll
278:27 - say footer as well so let's save our
278:29 - html and you can see we've now outlined
278:31 - more of a traditional page with a header
278:34 - a main area and a side and a footer i'm
278:37 - going to jump back to the style page and
278:40 - drag visual studio code back over to the
278:42 - left
278:43 - and now you can see this on the page
278:45 - we've got a header at the top a sidebar
278:47 - and a footer they're not much to look at
278:49 - you can just see the text not really an
278:51 - outline of the elements at all they are
278:53 - block elements so they are expanding 100
278:56 - across the page right now i'm going to
278:58 - scroll all the way back up and we're
279:00 - going to make the body element of the
279:02 - page a grid container so we'll start out
279:05 - by saying
279:06 - display
279:08 - grid
279:09 - and then we'll say grid
279:11 - dash template
279:13 - dash columns
279:16 - and let's set this to repeat and we'll
279:18 - have nine columns and we'll use one
279:20 - fraction for each column so let's save
279:23 - that and boy did we see some changes on
279:26 - the page this is going to drastically
279:27 - change from here though as well so now
279:29 - let's say
279:30 - grid dash auto dash rows
279:33 - and we'll say 75 pixels
279:36 - and then we'll say auto and then we'll
279:38 - say
279:39 - 75 pixels again and let's save and that
279:43 - didn't change too much but it will here
279:45 - in the near future because we're going
279:47 - to say grid
279:48 - dash
279:49 - template dash areas
279:52 - now this is where we can define names
279:56 - of our items on the page but we're also
279:58 - going to have to apply these to each
280:00 - item we're going to call our header hd
280:03 - so i'm going to tab in just a little bit
280:05 - and this would be hd now we have nine
280:07 - columns and this is where we can really
280:09 - visualize our grid and i may need to
280:11 - pull visual studio code back over to get
280:14 - some more room but i'm going to type hd
280:16 - nine times once for each column so
280:18 - there's two three four five six seven
280:22 - eight nine yep i'm going to go ahead and
280:24 - bring visual studio code back over
280:28 - and then once we have the full page
280:30 - we'll be able to visualize this better
280:32 - and then we'll come back and look at our
280:34 - browser afterwards so now we've got main
280:37 - which will be named mn i'm going to use
280:39 - it
280:41 - and we're putting it in for each column
280:43 - but when i get to the last two i'm going
280:44 - to put an sb for sidebar that will be to
280:47 - the right of the main element and then
280:50 - as you might guess at the bottom oh we
280:52 - need quotes first
280:53 - i'm going to put ft for footer
280:58 - and now this is kind of visualizing how
281:00 - our page is going to look this is going
281:02 - to be the header
281:03 - this is going to be the main area
281:05 - the sb will be the sidebar
281:08 - and then the footer will be across the
281:10 - bottom
281:11 - but with all of this it won't apply yet
281:13 - because we haven't defined those areas
281:15 - we haven't really named them on the
281:17 - items yet i'm going to save this much
281:19 - and now let's scroll down and define the
281:22 - rest of this so after
281:24 - the body definition let's go ahead and
281:26 - define that el that we applied the class
281:29 - that we applied to these new elements
281:31 - and we'll give them a background color
281:35 - of rebecca purple just a little bit
281:37 - different than the other purple we used
281:39 - a color
281:41 - of white
281:43 - we'll set each one of these to a display
281:45 - that's grid and we'll just center the
281:47 - content that we put in which were
281:49 - essentially the labels
281:51 - okay after that we need to go ahead and
281:54 - identify each class that we applied so
281:56 - we'll have our header
281:58 - and this is where we can define our name
282:00 - so we'll just say grid dash area
282:03 - set that to hd is what we have in our
282:06 - template
282:07 - for the header okay so now let's do the
282:09 - same for the sidebar so we'll say dot
282:12 - sidebar because we have a class for that
282:14 - this will be grid dash area this will be
282:17 - sb but let's go ahead and color the
282:20 - sidebar as well so background color
282:22 - here is going to be blue
282:25 - and then we also have a footer so we'll
282:28 - say dot footer for the class
282:30 - and here we'll say grid dash area
282:33 - set that to ft
282:35 - so now we should be good except we
282:37 - haven't named our main area yet so you
282:40 - can see everything else in the grid so
282:42 - let's just come down to our container
282:44 - and that is the main element and here
282:47 - we'll put grid dash area and we'll name
282:50 - it mn for main and save
282:53 - now let's go ahead and pull visual
282:55 - studio code back to the left and see
282:57 - what we have well that looks pretty good
282:59 - we've got our header across the top
283:01 - we've got our sidebar on the right we've
283:03 - got our footer at the bottom and here is
283:06 - our main element the container that we
283:08 - were previously working with that still
283:10 - has our grid so now this is a nested
283:12 - grid and then inside of this nested grid
283:15 - we created this grid item and made it a
283:18 - grid so we could center the content so
283:21 - it's nested once again i think the only
283:24 - thing i may want to add would be some
283:26 - space for our grid that's on the body so
283:30 - after we've defined this and you can see
283:31 - it's scrunched now with the lines
283:33 - wrapping
283:34 - but here i'm going to put a gap
283:36 - once again say one rim
283:38 - and so now well now i have an error
283:40 - because i didn't put a semicolon at the
283:42 - end of our template areas which is very
283:44 - easy to do so let's save that bring it
283:46 - back and now i'll say gap
283:49 - and one rim
283:50 - and now we can see this gap now it
283:52 - pushes our page down here just a little
283:55 - bit when we did that so we might need to
283:57 - change that resize something but overall
284:00 - we've got a gap of one rim between the
284:04 - header and the main element and the
284:06 - sidebar once again we see that gap
284:09 - between the sidebar and main element and
284:11 - footer and then we see that right here
284:14 - with the column as well so let me drag
284:16 - this over to take up the rest of the
284:18 - page and once again i'm going to press
284:21 - ctrl shift and i to open up dev tools
284:23 - we're going to look at the layout
284:26 - scroll up and do the overlay here so we
284:28 - want to overlay the body now and now we
284:31 - see the body has nine columns
284:34 - and we can see each one of these columns
284:36 - defined but here's the only one that we
284:38 - really see the gap on for the column
284:41 - which is right here around line number
284:43 - eight now we do see the gap here around
284:47 - line number two for the row and then
284:49 - once again around
284:51 - i can see a line number down here but
284:53 - right right here as well no not right
284:55 - here here it is line number three down
284:58 - here between the footer and the main
285:00 - element as well so we had a similar
285:03 - sized gap here inside of our nested grid
285:06 - which was throwing me off so we could
285:07 - change that as well we could change
285:09 - pretty much anything we want to
285:11 - so for that let me go ahead close the
285:13 - dev tools just to get everything to fit
285:16 - a little bit better let's bring this
285:18 - back
285:18 - change our gap to
285:20 - 0.5 ram and let's also go ahead and
285:23 - change the size we're using here
285:26 - from 75 and i'll select both of those to
285:29 - 50 pixels
285:30 - and yeah it's fitting on the page a
285:32 - little bit better there's no scroll up
285:34 - or down now and we might even just want
285:36 - to have a column gap
285:40 - instead of a row gap so if we save and
285:42 - do that
285:43 - you can see now we've got a small footer
285:45 - a small header and we have this small
285:48 - column gap here and it doesn't match the
285:49 - column gap inside our nested grid so
285:51 - there could be other styles we want to
285:53 - change and play around with but overall
285:56 - i hope this has helped you see how grid
285:58 - can be applied in many different ways
286:00 - and give you a good start and much like
286:03 - flexbox froggy that i recommended at the
286:05 - end of the flexbox module let's go ahead
286:08 - and look at grid garden which is a game
286:11 - that will help you learn how to use css
286:13 - grid as well i'll link to this in the
286:15 - description it's at
286:18 - cssgridgarden.com but once again 28
286:21 - different challenges here that will help
286:23 - you master css grid or at least learn a
286:26 - lot more about it
286:28 - let's learn about styling images with
286:30 - css we'll be looking at foreground
286:33 - images and background images today
286:35 - foreground images are the images on the
286:37 - page and as you might expect background
286:39 - images are in the background so let's
286:41 - look at our starter code we have a basic
286:44 - html page here with nothing in the body
286:46 - right now and then for the style.css
286:50 - file we're importing a font from google
286:53 - and i have changed this from roboto that
286:55 - i've used in previous lessons to nanito
286:57 - i believe that's how that's pronounced
286:59 - and you can see it is used right here
287:01 - you can use that or you could still use
287:03 - roboto or really any font you want to
287:06 - that's just a preference thing and you
287:08 - don't have to go back to the google font
287:10 - site to do that you can just change it
287:12 - in the string here where family equals
287:14 - and puts the font name and then of
287:16 - course
287:17 - match that here now if you choose a
287:19 - different font of course make sure it
287:20 - matches up with everything you have
287:22 - chosen that the fonts
287:24 - google.com site recommends okay so then
287:28 - we've just got our basic css reset and
287:31 - on the body we are applying that font
287:33 - family and a minimum height of 100
287:35 - viewport units we've got a lot to learn
287:38 - about images today so let's get started
287:40 - inside of the html and we'll add some
287:42 - content that we can style we'll start
287:44 - with a section and i'm going to apply
287:47 - the class example because i'm just going
287:49 - to give this as an example for now then
287:51 - we want a paragraph
287:53 - and then inside the paragraph let's go
287:55 - ahead and put an image element and you
287:57 - can see it automatically gives us a
287:59 - source and an alt attribute for the
288:02 - source you can see inside of our image
288:04 - folder we've got several images and
288:07 - we're going to use this pat1.png
288:10 - i'll click on this you can see in visual
288:12 - studio code it is just a square with a
288:15 - pattern on it
288:16 - and then you can see at the bottom it
288:18 - has 200 width by 200 height that is the
288:21 - dimension of the image now as we learned
288:24 - in the html lesson we'll want to apply
288:26 - that width and height to let the browser
288:29 - reserve that space to prevent content
288:32 - layout shift but what i'm going to do
288:34 - right now is type the image folder
288:36 - because we need to look inside of that
288:38 - folder for the image press tab and then
288:41 - it gives us a list in vs code of the
288:43 - images we can choose i'm going to choose
288:45 - this pat1.png
288:48 - and then i'll just say
288:50 - pattern1 here as the alt text which you
288:53 - always want to provide for images but
288:55 - then let's go ahead and apply the width
288:57 - and set that equal to 200 there
288:59 - shouldn't be pixels or any type of unit
289:02 - on this we just apply this intrinsic
289:05 - value and you can reference that in mdn
289:08 - as well as it suggests to do that
289:10 - and this is just once again reserving
289:12 - that space in the browser it's not
289:14 - really going to use these settings we
289:16 - can override that with css but in case
289:19 - of a failure of the css file to load or
289:22 - anything else we are telling the browser
289:25 - to reserve this space so let's go ahead
289:28 - and set that and then i want to put some
289:30 - text inside of this paragraph as well
289:33 - and i'll just say
289:34 - yeah this is a
289:37 - paragraph and we'll look at what gets
289:39 - rendered on the page with this so i've
289:42 - already started the page with live
289:43 - server and you can see it is running
289:45 - down here i'm going to drag this to the
289:47 - left as we'll split the screen and we
289:50 - can see what we have on the page now we
289:52 - have got our image and we have got the
289:55 - paragraph next to it but we need to
289:57 - apply some styles to what we have put on
289:59 - the page so i'm going to drag this back
290:01 - over and let's go look at the
290:04 - style.css let's start by styling our
290:07 - section element that has the class of
290:09 - example
290:10 - and we'll put a margin at the top just
290:12 - to push it down just a little of one rim
290:15 - and then we'll say padding dash left to
290:18 - give it just a little padding from the
290:19 - left
290:20 - and we'll give that 20 pixels and now
290:22 - let's give a border i often do this just
290:25 - to see or highlight what i am designing
290:28 - and remove it later so one pixel solid
290:31 - red border that's fairly common to see
290:34 - what we're working with on the page okay
290:36 - after we've applied that class let's go
290:39 - ahead and apply something to the image
290:42 - so we'll choose that class and the image
290:44 - within
290:45 - and now we'll say width
290:46 - 25
290:48 - but that's not where we'll stop because
290:50 - we did apply a height in the html and it
290:53 - will not ignore that height now i have
290:55 - heard others say do not apply a height
290:57 - because if you just apply a width then
290:59 - the height will respond that's true if
291:02 - you have not set the width and the
291:04 - height
291:05 - inside of the html but as currently
291:07 - recommended we are doing so so since we
291:10 - have done that we need to go ahead and
291:11 - set the height to auto and then it will
291:14 - respond to the width so let's just save
291:17 - this now once again know this width is
291:19 - not 25 of the image size is 25 of the
291:24 - container size so i'm going to drag this
291:26 - back to the left and now we can look at
291:28 - this and we see we have got a red line
291:31 - around our section
291:33 - and then we have our image
291:35 - and then we have our paragraph now
291:37 - there's several things i want to look at
291:39 - here one since i've talked about the
291:41 - width of 25 percent we have made that
291:44 - image responsive so i've drug this over
291:47 - to the full page now and i'm opening up
291:49 - dev tools so i can resize the window now
291:52 - notice how the image shrinks as i resize
291:55 - the window and it expands as i make the
291:58 - window bigger that is a responsive image
292:01 - we have given it a percentage width and
292:03 - we have the height responding by setting
292:05 - to auto again we have applied the height
292:08 - because we applied the height in the
292:10 - html as recommended by mdn and the way
292:13 - to make it responsive then is apply the
292:15 - height of auto in your css as it will
292:18 - respond to the percentage of the width
292:20 - that you set okay i'm closing devtools
292:23 - now and dragging this back over to half
292:26 - the screen and what we really want to
292:28 - look at now
292:29 - is this paragraph
292:31 - notice the y
292:32 - and also the p here and the g and
292:36 - another p
292:37 - these are the letters that have
292:39 - something that sticks down below the
292:41 - line we're typically writing on now
292:43 - notice what happens over here with the
292:45 - image
292:46 - it's the same way also notice it's on
292:48 - the same line as it was even before we
292:50 - highlighted the container that's because
292:53 - images or image elements are not block
292:56 - level elements they're actually in line
292:58 - and this was the original specification
293:00 - with html but we often don't want this
293:03 - behavior so even if i removed this
293:05 - paragraph right here
293:07 - you would still see this space we didn't
293:09 - apply padding or margin or anything to
293:12 - create this space here but it's often
293:14 - wondered how do we remove the space
293:16 - below an image well that's because an
293:18 - image is actually an inline element
293:21 - and it allows that space because it was
293:23 - originally envisioned as being used with
293:27 - paragraphs or with text overall so you
293:30 - get this space you don't want here even
293:32 - though you don't provide a margin or
293:34 - padding i'm going to show you how to
293:35 - remove that first so let's go back to
293:38 - our css and this is part of a reset that
293:41 - you can just typically do now it doesn't
293:43 - go inside of the asterisk because that
293:46 - selects all elements so just at the top
293:50 - we want to have image
293:52 - and then display
293:54 - block
293:55 - and we can save and now let's go back
294:00 - and we can look and with a block element
294:02 - of course it wraps down to the next line
294:04 - because you know a block element takes
294:06 - up the full width of the page so let's
294:09 - go ahead and go back to our
294:11 - html
294:13 - and i guess i need this full page once
294:15 - again so we can see what we're doing but
294:16 - i want to remove this text right here
294:19 - and even though it's inside the
294:21 - paragraph and we could remove the
294:23 - paragraph if we want to i guess i'll go
294:25 - ahead and do that too
294:26 - but just inside this section i'll save
294:29 - and bring this back over
294:31 - you can see there is now no space
294:33 - underneath and i'll switch back to the
294:35 - style here if we did not have this and
294:38 - i'll comment this out with shift alt and
294:40 - the letter a
294:42 - and save
294:43 - even without the paragraph we have this
294:45 - space underneath the image so you want
294:48 - to set those to block because they're
294:50 - originally in line
294:52 - and then you remove that space that you
294:53 - weren't expecting now let's move on to
294:55 - our next example so i'm going to pull
294:58 - visual studio code back over to full
295:00 - screen
295:01 - go to the html and i'm going to comment
295:04 - out what we put in for our first section
295:06 - i'll leave it in there for you so if you
295:08 - download the code though you can see
295:10 - that example so now the next thing we
295:12 - want to do is create another section i'm
295:15 - going to give this a class
295:17 - and i'll set this class well not class i
295:20 - typed class i should have typed hero
295:22 - there we go so i'll give it a class of
295:24 - hero
295:25 - and now inside this
295:27 - instead of just an image i'm going to
295:29 - put a figure element because that's what
295:31 - we usually put images in and i'll give
295:34 - this a class of profile dash pic
295:38 - dash figure so we know exactly what
295:41 - we're talking about there now inside the
295:43 - figure i'm going to put
295:45 - the image element and then we don't
295:48 - really need to apply a class there we'll
295:50 - just use that profile pic figure to
295:52 - reference the image inside of it and
295:54 - you'll see how i do that
295:56 - now we once again want to look inside of
295:58 - our image folder for the source and then
296:01 - pick one of our images and you can see
296:02 - i've got a profile dash 800 by 800 and
296:07 - if we look at that image in visual
296:08 - studio code you can see the image here
296:11 - and you can see the dimensions below
296:12 - that's 800 by 800. i'll go ahead and
296:16 - close that out let's give it an alt and
296:18 - i'll just say
296:20 - profile picture
296:22 - and then we need to apply the width and
296:24 - height again we could also apply a title
296:27 - if you remember that attribute from html
296:30 - and there we'll just say my
296:32 - profile picture and that shows up when
296:34 - we mouse over the image
296:36 - okay after that let's apply the width
296:39 - and that would be 800
296:41 - and then let's apply the height and
296:44 - that's also going to be 800. i'm going
296:46 - to press alt z to wrap the code that way
296:48 - we see it without scrolling over to the
296:50 - right like it was now if you remember
296:52 - the figure element we also need a fig
296:56 - caption element so let's add that
296:59 - and inside the fig caption i'm just
297:01 - going to say
297:02 - jane doe so the name of the page that
297:05 - this image belongs to or the name of the
297:08 - person in the image if you will so we
297:10 - want to add that it helps accessibility
297:13 - and i'll show you how to hide it if we
297:15 - don't want it on the screen
297:17 - so let's save that much and now we can
297:19 - look at our page and see what we've got
297:21 - so far it's pretty big it's filling up
297:24 - the whole page isn't it so we can
297:26 - definitely change that with css i'm
297:28 - going to hide the file tree by pressing
297:30 - ctrl b and we can make our changes here
297:33 - i'll make them below the body but above
297:36 - the previous example let's start with
297:38 - the profile dash pic dash figure class
297:43 - and there we'll just say a width of 35
297:48 - and that would be the width of the page
297:51 - it's referring to because that is
297:52 - currently the container actually it's
297:54 - that hero that we created so that
297:58 - section and it should be the width of
298:00 - the page so after that let's go ahead
298:03 - and apply the next to the profile pic
298:06 - figure
298:07 - and then the image within and here let's
298:09 - give the image
298:11 - a width of 100 because it's in a
298:13 - container
298:14 - and the height once again auto and this
298:17 - does make it responsive we've got a
298:20 - percentage for the width and the height
298:22 - set to auto remember we set the width
298:24 - and height once again in the html to
298:26 - avoid that content layout shift
298:28 - okay now we've got min
298:30 - width
298:31 - let's set that to 100 pixels we just
298:33 - don't want the image to get any smaller
298:35 - than that when it does shrink
298:37 - and then let's put a border around it so
298:39 - let's say border
298:41 - five pixels
298:43 - double
298:44 - gray so it's not just one solid line it
298:46 - should be two
298:48 - and now let's go ahead and save first
298:51 - and you can see what we've got here is
298:53 - our fig caption we're only taking up 35
298:56 - percent of the width of the full page
298:58 - right now because that section container
299:00 - element
299:01 - is a hundred percent and so the figures
299:03 - 35 and then the image fills out a
299:06 - hundred percent of that figure that is
299:08 - 35
299:10 - of the page then we've got this double
299:12 - line around the image and you can see
299:13 - the fig caption underneath one more
299:15 - thing i want to do to our image though
299:18 - is make it round and since we have a
299:20 - square image this wouldn't work if we
299:22 - had a rectangle but with a square
299:25 - we can do this and let's say
299:27 - border
299:28 - radius
299:29 - say 50 percent and when we save we now
299:33 - have our profile image in a circle let's
299:35 - go back to the html and add just a
299:38 - little bit more inside of our hero
299:40 - section that we have right here so after
299:42 - the figure
299:44 - i want to add an h1 to the page i'm
299:46 - going to give this a class of h1 as well
299:49 - inside the h1 i'm going to go ahead and
299:52 - give a span element and give a class of
299:56 - no wrap because i won't want what's
299:58 - inside the span to wrap if you remember
300:01 - a span element is an inline element i'm
300:04 - going to say hello and then i'm going to
300:06 - paste in a little wave emoji here so
300:09 - i'll just paste this over
300:12 - and you can get those wave emojis from
300:13 - different places i use
300:15 - emojipedia.com i believe to get that one
300:18 - after that i'm going to provide another
300:20 - span element and once again give the no
300:23 - wrap class
300:25 - and here i'm just going to say
300:27 - i'm jane
300:29 - as that's who's in our picture and now
300:31 - we can instantly see that on the page as
300:33 - well so we've got our h1 we've got a
300:35 - couple of no wrap classes here and we've
300:38 - got the h1 class on the h1 element let's
300:41 - go back to the css now okay let's start
300:44 - below the body but above our profile
300:46 - pick figure class and if you remember we
300:48 - have a hero class
300:50 - and that is the container that is that
300:52 - section element let's put a border on
300:54 - the bottom only so we can see it we'll
300:57 - say 2 pixels
300:58 - solid we'll give that a color of black
301:01 - when we save we can see that change
301:03 - instantly
301:04 - let's add a few more styles to our hero
301:06 - let's give some padding here of 20
301:08 - pixels to push everything a little bit
301:10 - away from the edges
301:12 - there we go
301:13 - and now let's give this a display of
301:16 - flex and by default flex is a row so
301:19 - we'll already have our content in a row
301:22 - then instead of stacked on top of each
301:24 - other now let's say
301:26 - justify
301:28 - dash content and let's say flex start
301:31 - here
301:32 - and then after we put that at the start
301:34 - let's align
301:35 - the items to center
301:38 - and after we align the items to center
301:41 - let's apply a gap between the items of
301:43 - about 30 pixels and save
301:46 - and that's what we've got now we've got
301:48 - our image over here on the left and
301:50 - we've got the hello i'm jane on the
301:52 - right now let's go below the hero
301:54 - section and add our h1 class
301:57 - and inside the h1 class let's make this
302:00 - font a lot larger let's say font size
302:03 - 500 percent
302:05 - and we'll save and see how big that gets
302:08 - nice and big that works okay what i'd
302:10 - like to do though is make the page full
302:12 - screen once again and look at dev tools
302:15 - so we can resize the page and see some
302:17 - things right now even though we put
302:20 - those classes on we haven't defined
302:21 - those yet so we're getting the text to
302:24 - wrap in some strange ways that aren't
302:26 - always the way we want here but notice
302:28 - our image is shrinking nicely but it
302:30 - stops at the 100 pixel
302:33 - minimum width that we left it and we
302:35 - still have that fig caption on there
302:37 - that we'll want to remove as well so
302:39 - just checking out the resizability of
302:41 - everything at this point let's close
302:43 - devtools move chrome back over to the
302:46 - right and let's define those utility
302:48 - classes so if we come up to the top we
302:51 - can put some notes in here
302:53 - and we can say
302:54 - begin reset
302:56 - with our comments and then after our
302:58 - image we can say
303:01 - end reset
303:03 - and there we go and now let's go ahead
303:06 - and put
303:08 - utility
303:09 - classes
303:11 - just organizing this css a little bit
303:13 - and then we'll say
303:15 - end
303:16 - utility
303:18 - classes
303:20 - okay so we can define these utility
303:22 - classes right in here the first one will
303:24 - be
303:25 - no wrap now these are things we've
303:27 - covered in previous lessons but it's a
303:29 - good review so we'll set white space
303:32 - to no wrap
303:34 - now when we save notice what instantly
303:36 - happened on the page i'm was over here
303:39 - but we've got it to where i'm jane
303:42 - should not split that should not wrap
303:44 - the same with the hello and the wave so
303:46 - now they're on the lines that they
303:49 - should be on and we don't want to see
303:51 - the word i'm and the word jane break and
303:53 - we don't want to see the hello and the
303:55 - wave break and that's why we applied
303:56 - those
303:57 - classes of no wrap the way we did now
304:00 - let's go ahead and apply an off-screen
304:02 - class also so this off-screen class will
304:06 - still allow the fig caption to be read
304:08 - for accessibility but it will hide it
304:10 - from the visible page so we'll say
304:12 - position set this to absolute
304:15 - and then let's just send it left minus
304:19 - 10 000 pixels and save
304:22 - and it looks like it's still on the page
304:24 - maybe we don't have that on our fig
304:26 - caption yet and we don't i forgot to put
304:28 - it on there so let's give it a class
304:30 - equal to
304:33 - off screen
304:35 - and save and now our fig caption is gone
304:38 - as i expected it to be we've got the
304:40 - basics of a hero section here a header
304:43 - for our page but it's pretty plain right
304:45 - now so let's start working with
304:47 - background images so now that we have
304:50 - put our utility classes here let's
304:51 - scroll back down below the body and back
304:54 - to the hero section now after this gap
304:57 - for our flexbox display i'll put an
305:00 - extra line so we can see these new
305:02 - properties we're going to work with the
305:04 - first one is a property you have seen
305:06 - before and that is background dash color
305:10 - we want to put a fallback and that is if
305:12 - the background image doesn't load we at
305:14 - least want to have a color behind it so
305:17 - let's put rgb and i'm going to go with
305:20 - the color i discovered that i think i
305:22 - like
305:23 - and just put these three values in there
305:25 - you can see it's kind of a peach or gold
305:27 - i'll save this
305:29 - and there you can see the background
305:30 - color that we now have for the hero
305:33 - section but that's a fallback so let's
305:36 - go ahead and put in a background image
305:39 - that is background dash image now you
305:42 - would think we might specify image here
305:44 - but actually we need url
305:47 - and inside of the parentheses then we
305:50 - put quotes and now we need to go inside
305:53 - of the image folder again but remember
305:55 - we were doing that in html simply by
305:58 - typing image but we're not in that
306:01 - folder now we're in the css folder so we
306:03 - need to go up out of the folder that's
306:06 - two dots to go up
306:07 - then a slash and now you can see visual
306:10 - studio code says our image folder is
306:12 - there and now let's pick this
306:14 - pat one that we looked at before it has
306:17 - a pattern on it
306:18 - and i guess i need to put a semicolon
306:21 - there where that ends that was right at
306:22 - the end of the line and now let's save
306:26 - and of course our text is black so that
306:28 - doesn't look too good there but
306:30 - otherwise you can see this pattern
306:32 - behind
306:34 - everything and it's a repeating pattern
306:36 - and we'll talk about that too let's go
306:38 - ahead and quickly
306:40 - add a color to our h1
306:43 - so we can see our text again so now
306:45 - we've got hello i'm jane in white
306:47 - but
306:48 - what is happening by default is our
306:51 - by 200
306:52 - image is repeating both on the x-axis
306:56 - and the y-axis in both directions and
306:59 - it's filling this out and the pattern
307:00 - looks pretty good you can't see where it
307:02 - starts or ends really so what we can do
307:05 - to control that
307:06 - is the background
307:08 - dash repeat property and we can just say
307:12 - no repeat and now let's look at what
307:14 - happens
307:15 - now we just have our 200 by 200 image up
307:18 - here in the top left by default
307:20 - likewise we've already seen what happens
307:23 - with the default
307:24 - repeat value and it repeats everywhere
307:27 - but we can just say repeat y for the y
307:30 - axis
307:31 - and it just stays all on the up and down
307:34 - essentially the y-axis or repeat x and
307:37 - it's all on the x-axis which would be
307:39 - horizontal or across let's just leave it
307:42 - to repeat for now even though that's the
307:43 - default i'll just leave that property in
307:45 - there and let's change out this image
307:48 - let's look at another pattern that i
307:50 - have saved in there which is pat two we
307:53 - can save that now our white font doesn't
307:55 - look as good on top of it and it's
307:57 - always important we want to emphasize
307:59 - this the font is the most important
308:01 - thing so you have to work with that to
308:03 - be visible because if it's not the
308:07 - background image is essentially that
308:09 - it's just background it's not really
308:11 - what's important you can see the lines
308:14 - if you look closely to see how this
308:16 - image repeats just a little bit more
308:17 - often so if we set this to no repeat i
308:20 - believe it's once again 200 by 200 or
308:23 - something like that you can see the
308:25 - image by itself there
308:27 - and if i save you can see it repeat
308:28 - across now if you have a transparent
308:31 - image and i set up a transparency of
308:33 - this image as well
308:36 - and you save you can see now this kind
308:38 - of looks cool because we have some of
308:40 - that color that's underneath
308:42 - coming through the image
308:44 - and i'm not going to show how to create
308:47 - transparencies in this tutorial that
308:49 - would be more like a photoshop or other
308:51 - image editing tutorial however if you do
308:53 - have access to images that are somewhat
308:56 - transparent like this it is a cool
308:58 - effect to do that of course i would
309:00 - probably switch this text back to a
309:02 - black font or something that would show
309:04 - up better on top of it at that point now
309:07 - let's also look at some more images like
309:10 - you would use and once again i want to
309:12 - emphasize how important it would be to
309:15 - make your text visible no matter what
309:17 - image you're using and we're just seeing
309:19 - the clouds right now but this is a much
309:21 - larger image if i go over to the file
309:23 - tree and click on the scenic image drag
309:26 - visual studio code back over where you
309:28 - can see it all we've got a waterfall
309:30 - lots of things in this image that we
309:32 - might want to see so we can change that
309:34 - let me bring this back over
309:37 - hide the file tree so we have some room
309:39 - underneath our background repeat let's
309:41 - put in background dash size and set this
309:44 - to cover when we save
309:46 - now we see much more of that image
309:49 - but it still might be a little
309:51 - concerning how readable this text is so
309:54 - you might want to work with that of
309:56 - course to make it stand out some more
309:58 - but that does look good now let's drag
310:00 - this over as well
310:02 - and if we open this up you can see it's
310:04 - definitely bigger here and looks
310:06 - different let's open up dev tools and
310:09 - once i have dev tools open you can see
310:11 - how the image resizes with that cover
310:14 - setting and there are other settings for
310:16 - background size as well you could put in
310:18 - an absolute or percentage or other
310:21 - things you might want to but cover is a
310:24 - very nice one to use i'll go ahead and
310:26 - close this and move this back
310:28 - another word that you might use in there
310:30 - besides cover is contain so let's at
310:32 - least see what it does it's not what we
310:34 - want to use but since it's repeating you
310:37 - can see that we have two of the image
310:39 - now because it does repeat if we set
310:41 - this to no repeat
310:44 - and save you can see cover or i'm sorry
310:47 - contain
310:48 - fits the full image in here and contains
310:50 - it but it doesn't make it cover the
310:52 - space that we want it to so let's put
310:54 - this back to cover for our use
310:57 - and we can leave the no repeat there as
310:58 - well because that's what we want but
311:00 - let's say we showed this to jane and
311:02 - she's not quite liking it of course the
311:04 - text isn't popping out and she wants to
311:07 - be more about discovering things not
311:09 - just about an image of some cool scenery
311:12 - so we're going to change this scenic
311:14 - image and let's change it to an image of
311:17 - a map and you can see it's a rather
311:20 - large image which is something else i
311:21 - didn't discuss now this would be a
311:24 - different tutorial to talk about image
311:26 - optimization a lot of times you want to
311:28 - shrink images down and this is a rather
311:30 - large image but that said you also have
311:33 - to be careful because some devices have
311:36 - different amounts of pixels and if you
311:38 - use too small of an image
311:40 - then it will look blurry on the devices
311:43 - that possibly have more pixels so
311:46 - one rule of thumb i have heard is always
311:48 - use an image that's twice as big as what
311:51 - you plan on displaying and that would
311:53 - help it
311:54 - up size to that extra pixel setting
311:57 - essentially and still look good without
311:59 - looking blurry because otherwise you're
312:01 - essentially stretching an image to
312:03 - increase the size of it and that does
312:05 - make images look blurry so again
312:08 - optimization would be something to
312:10 - consider but jane likes this image a bit
312:13 - better it gives maps and she's talking
312:15 - about exploring and taking pictures and
312:18 - so here we've got a background image
312:21 - with maps on it but still the font isn't
312:23 - popping out quite as much as we want so
312:26 - there's some things we can do there
312:27 - let's go back to the css and i need to
312:29 - scroll back over here a little bit we
312:31 - can add some more to our h1 so this
312:34 - color
312:35 - the
312:36 - white looks good i mean it does pop out
312:38 - a little bit but let's do something
312:40 - that's not quite white let's give
312:42 - alice blue a try which is kind of a
312:45 - different
312:46 - white you can see it's not quite the
312:49 - same white but it does look white it
312:51 - doesn't really look blue to me at least
312:53 - and after that we can apply a text
312:56 - shadow to make it pop off the page just
312:59 - a bit
313:00 - this is applied to the x-axis so we'll
313:03 - say 2 pixels y-axis 2 pixels and then
313:06 - there is a blur value and that makes the
313:08 - shadow not as crisp but a little blurry
313:12 - so i'll put that at 5 pixels
313:14 - and then we say what color we want the
313:16 - shadow and we'll just make it black when
313:18 - we save you can see that text pops off
313:21 - the page just a little more so that's
313:23 - something you can do to help your text
313:25 - stand out as well don't abuse it though
313:28 - you can do way too much with that but of
313:30 - course it's set to preference then after
313:33 - that we could put a background color so
313:37 - let's talk about that if we put in
313:39 - background color
313:40 - and we just set it to black
313:43 - that's not going to look that great but
313:44 - let's go ahead and do it for the moment
313:46 - and now if you remember from our color
313:48 - lesson we can click on this square
313:50 - open this up i'm going to go over to hsl
313:54 - and then i'll drag the transparency down
313:57 - here and i'm thinking maybe let's go to
314:00 - 40 percent and see what we get
314:03 - if we leave that and now we save well
314:06 - now we can see the image because it's a
314:07 - transparent color and that helps a
314:09 - little bit now we could add and again
314:12 - this is to preference complete
314:14 - preference here
314:15 - we could go ahead and add some padding
314:17 - so let's do that try it out we'll say
314:19 - padding
314:21 - and let's go 0.25 round
314:24 - and then after that we can also add a
314:26 - border radius
314:29 - to that background and let's just go
314:31 - with 10 pixels to round the corners and
314:33 - so now you see this kind of contained
314:36 - here but
314:37 - i don't know if i like that or not but
314:39 - there is another trick we can do that
314:41 - kind of applies the same thing but it
314:43 - does it more broadly so you don't really
314:45 - see this box around there so i'm going
314:48 - to comment these out but once again
314:50 - leave them in the code for you because
314:52 - that is to preference now let's jump
314:54 - back to our html and what i'm going to
314:56 - do
314:57 - is put a container around our hero
315:00 - section and here i'm going to use a div
315:03 - and i'll just say class of container
315:06 - i'll take that closing div control x to
315:08 - cut it out come down to the bottom of
315:10 - the section paste it in with control v
315:13 - and save and now we have a container
315:16 - around our code i guess i could
315:17 - highlight this and tab it over to make
315:19 - it a little more uniform there we go
315:22 - and now that we have the container we
315:24 - can style that container so we'll go
315:26 - back to our css and again this is a work
315:28 - workaround only if you're trying to make
315:30 - the text a little more legible you want
315:32 - a little more control
315:34 - and to get that separation between the
315:36 - background and the text so this is
315:39 - nothing that is required it's just
315:41 - something that you might want to know
315:42 - how to do and what we're going to do is
315:45 - essentially create a filter or a mask by
315:47 - having this extra layer so it's just a
315:50 - little bit more of an advanced concept
315:52 - but it's not too difficult to do i'm
315:54 - going to take everything we have here
315:56 - for the background of the heroes section
315:59 - and i'm going to put it in the container
316:02 - and now that we have that we can save
316:03 - and we shouldn't really see any
316:05 - difference because the container is
316:07 - going to be the parent of the hero so we
316:10 - would still see all of this behind it
316:12 - and now instead of in the h1 where we
316:14 - had this background color here let me go
316:16 - ahead and just copy this
316:18 - and we might want to use a different
316:20 - color but we'll try out the black at
316:22 - first
316:22 - we can put in
316:24 - that background color that we were
316:26 - putting just on the h1 but now this will
316:29 - apply to the full hero so let's go ahead
316:31 - and save this and see what it looks like
316:34 - and you can see everything got darker
316:36 - we've essentially put a filter that we
316:39 - can lighten or darken as we choose so i
316:42 - want to put a different color here and
316:44 - try this out so let's make this
316:46 - 100 percent right here and save again
316:50 - that lightened it up now you see more of
316:52 - a light filter on it as well so you can
316:55 - experiment with this and of course you
316:56 - can go into the colors and choose
316:59 - anything you want to as well here in
317:00 - visual studio code i'm going to press
317:02 - alt z just so we can see that wrap down
317:04 - here so if we didn't want that maybe we
317:07 - want a little more transparency
317:10 - consider that 35 percent and maybe you
317:13 - liked the darker color instead of the
317:15 - light color so if we went back
317:17 - and made that a zero that's essentially
317:19 - working with black there so now you've
317:22 - got a darker color but it's a little
317:24 - more see-through maybe make it 25
317:27 - i think i liked the lighter color myself
317:30 - so i'll go back to 35
317:32 - and then i'll put the 100 percent here
317:34 - in the third value and yeah that kind of
317:37 - pops off but it still has that filter
317:39 - and you can see the maps i like how that
317:41 - looks just personally but you could
317:43 - change any way you want to maybe you'd
317:45 - want to make the double circle around
317:47 - jane here in black instead of gray now
317:50 - that we'd have a darker color and that's
317:52 - something you could do as well but we've
317:53 - made a nice hero section overall now
317:56 - let's talk about one other property that
317:58 - i didn't bring up for the background yet
318:00 - and this would be background position
318:02 - i'm going to put it after the repeat
318:06 - and it's background dash position there
318:09 - we go and now it has an x and a y as
318:12 - well so you might see this adjust and
318:14 - it's how it moves the image so if we put
318:17 - center center
318:18 - you can see yeah the map moved a little
318:20 - bit so
318:22 - even though we're working with one image
318:24 - that's covering the whole span you might
318:26 - see it move so you could say top right
318:29 - just see how the map moves around for
318:31 - you a little bit and top left
318:34 - and not really noticing a change there
318:36 - what if we said
318:38 - bottom right
318:40 - and move it yeah the map moved again
318:42 - because now we're seeing the bottom of
318:43 - the image that's the biggest change
318:45 - right there now if we switch it to top
318:48 - we'll see the top of the image instead i
318:51 - like that a little bit better because
318:52 - it's a little darker up there towards
318:53 - the top i believe
318:55 - and you could just provide one value i
318:58 - think as well
318:59 - and if we did center
319:02 - yep it's somewhere right in the middle
319:04 - now we're not seeing the top or the
319:06 - bottom
319:08 - but if we went back to playing around
319:10 - with a smaller 200 by 200
319:13 - pixel image you would actually see that
319:15 - one image
319:16 - move around the page as well so this is
319:19 - just something worth checking out to see
319:21 - what part of the image you want to
319:23 - display for the background so i'm just
319:25 - going to leave this as top now because
319:27 - that makes it a little darker
319:29 - and looks okay to me it's time to move
319:31 - on to another example i'm once again
319:34 - going to leave this css in the code i'll
319:36 - just come to the html i'm going to bring
319:39 - this back to full page and i will
319:42 - comment out what we currently have here
319:44 - as well and leave it in the code for you
319:46 - again pressing shift alt and the letter
319:48 - a to make that
319:50 - comment after i selected all of that and
319:52 - so now we're ready to add something new
319:54 - to the page so we'll come back over here
319:56 - so we can see the page again and it
319:58 - should be blank and it is
320:00 - let's add something to the body itself
320:04 - let's start with our fallback background
320:06 - color so we'll say background color oh
320:08 - that just said background which is
320:10 - shorthand we'll get it to in a minute
320:12 - but we've got our background color and
320:14 - just so we know it's changed let's go to
320:15 - this alice blue again which isn't quite
320:17 - the same as the white default and now
320:20 - you can see it's a different shade here
320:22 - and after that let's provide an image so
320:25 - we'll say background
320:27 - dash image
320:29 - and here we'll say url once again and
320:31 - inside the url we need quotes and
320:34 - remember we're in the css so we go up
320:36 - out of the css folder and then into the
320:39 - image folder and now i'm going to go
320:41 - ahead
320:42 - and well you know what instead of this
320:44 - image at first let's do a linear
320:47 - gradient first and then we'll see how we
320:49 - can put an image on top of that so let's
320:51 - go with linear gradient and let's talk
320:54 - about this this is how we can switch
320:56 - from one color to another so i'll supply
320:59 - the first color
321:01 - steel blue it's a color that i like and
321:04 - the second color let's go with white and
321:06 - when i save we'll see the default
321:08 - behavior it's starting at steel blue at
321:11 - the top
321:12 - and going to white at the bottom of the
321:15 - page and we could put other colors in
321:17 - here as well so if we wanted purple in
321:19 - the middle
321:21 - we can provide purple as well and now
321:23 - when we look it goes from steel blue to
321:25 - purple to white so you can use
321:29 - pretty much as many colors as you want
321:30 - to and you could have a veritable
321:33 - rainbow i should say going from top to
321:36 - bottom or as we'll find out here any
321:38 - direction you want so i'm going to say
321:41 - to left and save and you can see it's
321:45 - white on the left
321:47 - and it's blue on the right so it starts
321:49 - at the right and it goes to left we
321:51 - could do the opposite of that
321:53 - to right
321:54 - and there you got blue on the left to
321:56 - white on the right
321:58 - you could go to bottom which is
321:59 - essentially the default or you could go
322:03 - to top as well
322:04 - so nice changes there i'm going to go
322:07 - to
322:08 - well let's go to left and leave it like
322:11 - that so now we have this background and
322:13 - imagine we were typing
322:15 - paragraphs over here on the left and we
322:17 - stopped somewhere and it gets darker
322:18 - over here on the right and that would
322:21 - work for us now let's look at how we can
322:23 - apply a second background image and you
322:26 - can apply more than two if you want to
322:28 - but i'm just going to do an example with
322:30 - two
322:31 - so now i'll say url provide the
322:33 - parentheses here
322:35 - a comma after that so we clearly have
322:37 - our two images defined and i want to go
322:40 - ahead and space this over if it will and
322:42 - i may need to go ahead and drag this to
322:44 - the full page and now we've definitely
322:46 - got some space there so let me remove
322:48 - those spaces i just wasn't seeing them
322:50 - before
322:51 - bring this down to another line and i
322:53 - like to have the images lined up like
322:55 - this when i set it so or a gradient and
322:57 - an image if you will
322:59 - so now i'll put in the quotes we need to
323:00 - go up out of the css folder
323:03 - into the image folder and now i'm going
323:06 - to pick bubbles so we have a bubbles
323:08 - background image and a linear gradient
323:11 - both let's save and drag this back over
323:14 - to see what we've got well now we have
323:16 - bubbles all over the page and that may
323:18 - not be what we want as well
323:20 - this isn't responding like i want it to
323:22 - when i drag this back over so i'm going
323:24 - to put these back to back so we just
323:27 - it's one long line essentially is what
323:29 - this is for the background image we
323:31 - supply the first one
323:33 - and then a comma
323:35 - and then the second one and a gradient
323:37 - qualifies as a background image as well
323:39 - so now when we define our background
323:41 - repeat
323:42 - we can put in a value for both of these
323:45 - images so the first one i want to repeat
323:48 - on the y-axis that's our bubbles they're
323:50 - going to go from top to bottom but not
323:53 - left to right then we put a comma and
323:55 - the second one the gradient i'll just
323:57 - put no repeat and when we save
324:01 - now we only have bubbles on the left but
324:03 - we can change this as well so let's go
324:05 - ahead and put in a background
324:08 - position so we'll say background dash
324:12 - position
324:13 - and now we'll say
324:15 - we want them on the right
324:17 - and
324:18 - let's use the center so now when we save
324:21 - there we go our bubbles are on the right
324:23 - and they show up much better this is a
324:25 - transparent image that i have over here
324:27 - so if we just look at the image
324:30 - and i pull this over you can see it here
324:32 - in visual studio code it's originally
324:34 - 300 by 300 has a transparent background
324:37 - with white bubbles
324:39 - okay we'll drag this back over and that
324:41 - looks good with this steel blue
324:43 - background that we're seeing on the
324:44 - right with everything we've set up i
324:46 - can't see the code too well going to
324:48 - press ctrl b to hide that so our
324:50 - background position has moved the
324:52 - bubbles much like we want them to be but
324:55 - the bubbles still look a little too big
324:57 - so let's say background dash size
325:00 - and now this first one will be for the
325:02 - bubbles so this stacks in this order the
325:05 - bubbles go on top of the gradient so
325:07 - they come first in the background image
325:10 - and the gradient comes second likewise
325:12 - with repeat y applies to the bubbles no
325:15 - repeat to the gradient background size
325:18 - 20 for the bubbles and then we'll put
325:21 - auto for the gradient when you save we
325:23 - have smaller bubbles now over on the far
325:26 - right now we've wrapped up our example
325:28 - of linear gradients which are fun to
325:30 - play around with and also layering
325:32 - background images so we've got one more
325:35 - example to look at today and once again
325:38 - i'm going to comment out previous code
325:40 - we're using as you can see we don't have
325:42 - any other in the html but i'll add a
325:44 - little here
325:45 - and then i'll comment out some of what
325:47 - we have in the css just so we don't have
325:49 - that bubbly background for this new
325:51 - example so i'm going to provide another
325:53 - section
325:54 - and i'll give this a class well this
325:56 - doesn't need a class but just inside the
325:58 - section let's go with a paragraph that
326:01 - has a class of clip and now inside this
326:04 - paragraph i'm just going to type jane's
326:06 - name and save and we can see her name up
326:09 - here in the top right for now let's go
326:11 - back to this style once again i'll
326:14 - comment out this background that we
326:16 - currently see here i'll leave the
326:18 - background color but everything else but
326:20 - i'll leave it in the code for you again
326:22 - shift alt in the letter a to comment
326:24 - that out and if i save that should all
326:26 - be gone we still have jane's name so now
326:29 - i'll scroll down here all the way to the
326:31 - bottom below our first example
326:34 - and i'll provide this clip class
326:37 - and there's several things we want to do
326:38 - here we want to give this a very heavy
326:41 - font weight so i'm going to give it 800.
326:43 - if we save that you can see it's very
326:45 - bold now but it's still very small so
326:48 - let's make this big we'll say font size
326:50 - let's go with 18 rim we want to fill the
326:53 - page for the most part and i think that
326:55 - will do it after that let's say text
326:58 - align
326:59 - and set this to center and now we've
327:01 - centered jane's name as well
327:03 - okay after that let's provide
327:06 - a background
327:08 - and
327:09 - we could just say background once again
327:12 - with this shorthand or we could say
327:14 - background image so i'm going to go
327:15 - ahead and say image
327:17 - we'll provide url and now we go up
327:20 - into the image folder and then let's
327:24 - take that scenic image that we
327:26 - previously had and save and now of
327:28 - course we see the clouds we haven't
327:30 - changed the position or anything else of
327:32 - the image but we'll do some of that here
327:34 - let's at least change the size so
327:36 - background size is going to be
327:38 - 100
327:40 - and now we can see that full image
327:42 - behind
327:44 - jane's name
327:45 - so now let's go ahead and text dash
327:49 - transform
327:50 - set jane's name to uppercase
327:53 - and it's really filling out the page now
327:56 - now the property i want to talk about is
327:58 - background clip so let's look this up at
328:01 - can i use dot com
328:03 - because there's something specific about
328:05 - it background dash clip we'll select
328:07 - that and you see background dash clip
328:09 - text and it says a non-standard method
328:13 - of clipping a background image to the
328:15 - foreground text
328:17 - so
328:18 - it says unprefixed is only supported by
328:20 - about 19 of browsers
328:23 - but
328:24 - there is a prefix that we need to use
328:26 - with this so we can see the support for
328:28 - edge not explore and we're not really
328:30 - going to worry about explorer ever
328:32 - probably but for chrome you see the
328:35 - little yellow here and it says supported
328:37 - with prefix
328:39 - webkit firefox doesn't need that
328:42 - but just about everybody else does so we
328:45 - need to use that prefix when we apply
328:48 - this property so what we're going to do
328:51 - is say dash
328:53 - webkit
328:54 - dash
328:57 - background dash clip
328:59 - and now we'll say text
329:01 - now this won't do everything that we
329:03 - want but it did take the background away
329:06 - here in chrome as expected let's set the
329:09 - color and we want this to be transparent
329:11 - so first i'm just going to choose this
329:13 - black color and now we'll do the work
329:15 - here by clicking on the color
329:18 - getting that pop-up i'm going to switch
329:20 - this over to hsl
329:22 - we'll pull this down to about 20 percent
329:25 - right in there and take a look
329:27 - at what we get now
329:29 - so now it's a little dark because we can
329:31 - still see 20 percent of the black but
329:34 - essentially
329:35 - we're seeing the image inside the text
329:38 - only which is kind of a cool way to do
329:40 - that we'll go ahead and put this to zero
329:42 - and see if it makes much of a difference
329:44 - and yeah it might have lightened up just
329:46 - a little bit so you could make this a
329:48 - little darker by adding about twenty
329:50 - percent and there you can see the
329:51 - difference and you could do this with
329:53 - other colors too we're essentially
329:55 - creating that same mask
329:57 - over the image or you could make it
329:59 - totally transparent and i believe to do
330:02 - that you could just say
330:03 - transparent
330:05 - and save and yep that works too so if
330:08 - you want it totally transparent you
330:09 - don't even have to put a color there at
330:11 - all now
330:13 - this will not be working in firefox you
330:16 - would need to of course use that as a
330:18 - fallback
330:19 - for when
330:20 - it is not supported in browsers and
330:23 - otherwise you need to have this will
330:25 - this impact chrome by putting it there
330:28 - no but now this would also make it work
330:30 - in firefox and now every other browser
330:33 - that needs this webkit prefix also works
330:36 - so we just have to have both there and
330:38 - before we wrap up i am realizing we
330:41 - didn't really cover that background
330:43 - shorthand which can be very confusing
330:45 - and i like to use the individual ones
330:47 - like background color and background
330:49 - image when possible but let's come back
330:52 - up to what i commented out on the body
330:54 - and uncomment that so we'll see
330:57 - jane's name over the bubbles and we can
330:59 - save that much but now what we
331:01 - essentially want to provide here when i
331:03 - do use the background shorthand is just
331:06 - a few of these properties three
331:08 - specifically so we'll start with the
331:10 - repeat we'll say
331:12 - repeat
331:14 - dash y
331:16 - and then we'll say right
331:17 - center
331:18 - for the position and then we'll have our
331:21 - url
331:22 - which was
331:24 - dot dot slash image slash and then we
331:27 - had our bubbles selected and then we can
331:30 - put a comma and we can supply the values
331:32 - for that second image as well so now
331:35 - we'll say no dash
331:37 - repeat
331:38 - and then we'll have our linear
331:40 - dash
331:42 - gradient if i could spell once again and
331:45 - then we'll say two left
331:48 - we had steel blue
331:50 - and then we had
331:52 - i believe just our regular white yep
331:54 - there we go
331:56 - and then we can go ahead and put the
331:57 - semicolon there now let's put size after
332:00 - that because we didn't attempt to
332:02 - include the size in the background
332:04 - shorthand however you can it's just
332:07 - fairly complex and it gets confusing so
332:09 - you could look that up on mdn if you
332:10 - want to i'll provide a link in the
332:12 - resources
332:14 - but this is about as complex as i like
332:16 - to get with that shorthand or it just
332:18 - starts get to get too confusing so what
332:21 - we've done is eliminate the background
332:22 - image background repeat and background
332:25 - position properties that were
332:26 - individually there so i'll just comment
332:28 - those out we save we have the same
332:31 - result using the background shorthand
332:35 - let's move on to css media queries media
332:38 - queries allow you to modify your site
332:40 - based on specific characteristics and
332:42 - parameters and most often we look at the
332:44 - browser viewport width
332:46 - this is key to responsive design as our
332:48 - web pages will respond to the width of a
332:50 - device viewport
332:52 - so let's look at the starter code i have
332:54 - got some basic html here and i have a
332:57 - page outline that has a header a nav
333:00 - inside the header element
333:02 - a main element and a footer element and
333:05 - so we're just going to outline a page
333:07 - and see how it changes based on viewport
333:10 - changes and then in the css i've got
333:13 - some basic css here we're importing the
333:15 - nanito font from google other than that
333:19 - we have the basic css reset and a basic
333:22 - style a change you may notice is i'm
333:24 - using the font shorthand property now
333:27 - that sets both the font size
333:29 - and the font family all in one right
333:31 - here in the body other than that min
333:33 - height of 100 viewport units okay before
333:36 - we do anything with css we really need
333:39 - to look at the html there is a meta tag
333:42 - here that enables responsive design and
333:45 - that meta tag has the name viewport and
333:48 - you can see the content is width equals
333:51 - device width and then initial scale of
333:54 - 1.0 this is necessary to enable our
333:57 - media queries and allow responsive
333:59 - design in our web pages now do you have
334:02 - to memorize how to type that out not
334:04 - really because vs code helps us a lot
334:06 - i'm going to just select everything
334:08 - quickly with control a
334:10 - cut it out of the page with control x so
334:12 - i have a blank html page
334:14 - and now in vs code if i type an
334:16 - exclamation mark you can see it says
334:18 - emit abbreviation when i press tab
334:22 - it fills out the basic skeleton of an
334:24 - html page and you can see
334:27 - it includes this meta tag with the name
334:29 - viewport the content with width equal to
334:33 - device width and the initial scale set
334:35 - to 1.0 it's very important to have that
334:38 - as we work with responsive design and
334:41 - visual studio code helps you do that i'm
334:43 - going to press ctrl a now to select all
334:45 - of this and then ctrl v to paste over
334:48 - and just go back to the page outline
334:50 - that i already had with the header nav
334:52 - main and footer ctrl s to save and we're
334:55 - ready to move on to the css okay before
334:58 - we add any actual css to what we already
335:01 - have let's just talk about the syntax of
335:03 - a media query first so i'm going to
335:04 - paste this in and look at the syntax
335:07 - that is how we write it so we start out
335:09 - with at media
335:11 - and then we give the media type and then
335:13 - we specify a condition or conditions as
335:16 - we can link those with logical operators
335:19 - and and or
335:21 - and then we specify a break point and
335:23 - that depends on the condition as what
335:25 - type of break point we'll use there's
335:27 - lots of different types of break points
335:30 - and conditions we can apply and then
335:32 - just like we do with anything else we
335:34 - put the css rules between the curly
335:36 - braces so now that we've looked at that
335:38 - syntax let's go ahead and write a media
335:41 - query and see how that applies so we can
335:44 - start out with at media and instead of
335:47 - media type here
335:48 - we can say
335:49 - screen that is the most common one
335:51 - you'll see you might also see all or
335:54 - print or even speech for screen readers
335:57 - and devices that read the screen back to
335:59 - you and then after condition or as the
336:02 - condition i should say you often see min
336:06 - width and you should read min width as
336:08 - starting from so whatever the width we
336:11 - specify is these styles will start from
336:15 - that width when we say min width
336:18 - likewise max width would be up two so
336:21 - the styles would apply up to the width
336:23 - we would provide if we said max width
336:26 - there we usually do this with min width
336:28 - and that is because we design from the
336:30 - smallest to the largest and that is what
336:33 - is called mobile first design and
336:36 - responsive design
336:37 - and the reason we do that is well think
336:39 - about it this way as an analogy when you
336:42 - get a box you unpack something it's
336:45 - often hard to put everything back in the
336:47 - box the way it was packed and get the
336:48 - lid to close it's kind of like that when
336:50 - we design a page it's easier to start
336:52 - with the smallest and work our way
336:55 - towards the largest rather than start
336:57 - with the largest and then try to squeeze
336:59 - everything into a smaller and smaller
337:01 - box if you will so that's kind of the
337:03 - analogy i used to explain that so we'll
337:05 - start out with a mobile device screen
337:07 - usually that's a one column design and
337:10 - we can spread things out as we go so for
337:13 - this first min width for the break point
337:15 - let's say i would put and remember this
337:18 - is starting from
337:20 - so i would put something like oh let's
337:22 - go with 481
337:25 - pixels so all of our styles before this
337:29 - media query
337:30 - would be applied until we got to 481
337:34 - pixels and then they would still be
337:36 - applied
337:37 - unless we were to overwrite them because
337:39 - the cascade still works so here we could
337:43 - change something maybe about the body
337:44 - maybe the font maybe a background color
337:47 - and that's what we'll experiment with
337:49 - today because it's so easy to see those
337:50 - background color changes
337:52 - and
337:53 - then we can overwrite the previous style
337:56 - we had other styles if we do not
337:58 - overwrite those they will still apply if
338:00 - they were applied before the media query
338:02 - now as always i'll give a link to the
338:04 - mdn references in the description below
338:07 - but let's talk about some of the other
338:09 - conditions and break points we could
338:11 - have although as i've said min width and
338:13 - max width with pixels as a breakpoint is
338:16 - very common but you could also have
338:18 - something like
338:20 - orientation and then you would set that
338:23 - to uh possibly landscape which would be
338:26 - kind of turning your phone to the
338:28 - horizontal instead of the vertical
338:30 - orientation something like that there's
338:33 - also something like
338:35 - min dash aspect
338:38 - dash ratio and there you can actually
338:41 - set a ratio and there are many different
338:43 - sizes of phones so while landscape would
338:47 - actually apply to anything that was
338:49 - wider than it was tall
338:51 - here we could set something more like
338:53 - specific like 16 by nine or say
338:58 - seven by four something like that then
339:00 - when the aspect ratio reached that size
339:04 - so the width would be
339:05 - 7 and the
339:07 - height would be 4 in that ratio or 16 by
339:11 - 9 or whatever we put
339:13 - that is when that would apply now
339:15 - remember we can also put more than one
339:17 - rule here and we'll look at that very
339:19 - soon as well so how do we decide what
339:22 - breakpoints to apply and what values to
339:24 - use well there are some common ones and
339:27 - we can also look at some css frameworks
339:30 - and see what they have applied because
339:33 - they have probably researched that and
339:34 - worked with it a little bit more than we
339:36 - have so let's look at what some others
339:38 - have done i'm going to open up the file
339:40 - tree here you can see i have a notes dot
339:43 - md that i'm going to include in this
339:45 - repository dot md means markdown so it's
339:48 - a markdown file when i click on this
339:50 - you'll see the outline here but i'm
339:52 - using an extension and if you want to
339:54 - get that extension it's called markdown
339:56 - all-in-one you can search for that in
339:58 - the visual studio code extensions area
340:01 - and then you can install it if you want
340:03 - to use that as well so when you have
340:04 - markdown all in one
340:06 - then you can go ahead and preview the
340:09 - markdown and that's what i'm going to do
340:11 - with control shift in the letter v and
340:14 - now i've got a markdown preview and this
340:16 - is how github would read our markdown so
340:18 - i've provided a table here so some
340:20 - common media query breakpoints you can
340:22 - see
340:23 - mobile devices are often considered to
340:25 - be
340:27 - pixels width or less
340:30 - and then from 481 to 768 usually ipads
340:34 - tablets
340:36 - 769 to 1024 small screens and laptops
340:40 - 1025 to 1200 desktops and large screens
340:45 - and 1201 and greater extra large screens
340:48 - and tvs now that's just kind of a common
340:51 - general guideline of course there are no
340:53 - standards so you can set these how you
340:55 - want but let's look at what the
340:57 - bootstrap css framework does
341:00 - and i tend to like these
341:02 - and i'm i guess maybe i'm just used to
341:04 - these but
341:05 - 576 instead of 481 as we saw referenced
341:09 - above
341:10 - is considered extra small and then
341:12 - anything greater than 576 is small
341:17 - 768 and above is medium 992 is large
341:21 - 1200 is extra large and then they have a
341:24 - sec extra-large which is double xl at
341:27 - 1400. now tailwind is another css
341:31 - framework that is very popular now in
341:34 - recent times and you can see they've
341:36 - also differed somewhat they consider the
341:39 - extra small to be less than 640.
341:42 - maybe that's because in recent years our
341:44 - devices have seemed to have grown into
341:47 - larger sizes after that 640 and above is
341:50 - small now we meet up and agree at 768
341:54 - and that is where the ipad
341:57 - is usually at the traditional ipad and
342:00 - then we've got 1024 here which is a
342:02 - little different than 992 as far as
342:05 - bootstrap was concerned then 1280 and
342:08 - 1536 so you can see even professional
342:12 - opinions vary and you can set your
342:14 - breakpoints how you want to as your page
342:17 - needs to respond so it can respond to
342:19 - the content you can work with your
342:21 - content and set the breakpoints
342:23 - according to that you could target
342:25 - specific devices or just use some
342:27 - general guidelines as well let's go back
342:30 - to the css now and start to write some
342:32 - code and we'll see how this applies okay
342:35 - i'm going to drag visual studio code to
342:37 - the left and we can see our page on the
342:39 - right it currently has very little
342:42 - applied as far as styles just our css
342:44 - reset and our basic body styles right
342:47 - here
342:48 - and then we have our media query i'm
342:50 - going to hide the file tree with control
342:52 - b so we have a little more room to write
342:54 - code i'll go ahead and remove this media
342:56 - query for now just so we can start out
342:58 - with our basic page first and remember
343:00 - we're designing for the smallest screen
343:03 - first and we'll work our way up so we'll
343:05 - just put in some basic styles here the
343:07 - easiest thing to see as we're learning
343:09 - about media queries is to change the
343:11 - background color and let's do that by
343:14 - first setting a background color here on
343:16 - the body i'm going to set it to four
343:18 - seven five five six nine
343:21 - kind of a nice grayish color if we save
343:24 - that we can see that doesn't highlight
343:27 - our lettering as well but we'll change
343:29 - this of course as we change media
343:31 - queries
343:32 - and now after that we can change a
343:35 - little bit about how this displays as we
343:38 - learned in the last lesson about images
343:40 - so we'll set background image and now
343:43 - instead of linear gradient that we
343:45 - learned about before there's one other
343:46 - one i would like to show and that's
343:48 - called a radial gradient
343:51 - and now this starts in the center and
343:53 - works its way out instead of top to
343:55 - bottom bottom to top left to right or
343:57 - right to left or any direction that we
344:00 - would send a linear gradient this will
344:02 - always start from the center
344:04 - i'm going to use
344:05 - white smoke as the first color and then
344:08 - we'll use that color that we specified
344:10 - as the fallback background color
344:13 - for the second color and when i save now
344:16 - you can see it lightens up here in the
344:18 - center and it works its way out to a
344:19 - darker color on the left and the right
344:22 - top and bottom now let's make well i'll
344:25 - put a semicolon there let's make
344:28 - our body a flex container and then let's
344:31 - set the flex direction
344:34 - and we'll set that to column because
344:36 - row is the default and we want our
344:38 - elements to stack instead of being a row
344:41 - i'm going to scroll for a little more
344:42 - room and now let's go ahead and identify
344:45 - each piece here we have a header
344:48 - a nav
344:49 - a main and a footer and we will apply
344:52 - this style to all of those elements so
344:54 - we'll set each one of those to display
344:57 - grid
344:58 - and then we'll center our content by
345:01 - saying place content center and when we
345:04 - save now we see that has been saved in
345:07 - the center of each one so this really
345:08 - means we've stacked our elements and
345:11 - nothing is below so we want this to take
345:13 - up the full page and we'll take that on
345:15 - here very shortly so i'll scroll for
345:18 - some more room here on the left and now
345:20 - i'm going to put a style on just the
345:22 - header
345:23 - and the footer
345:25 - and here we'll say position
345:28 - sticky as we want these at the top and
345:30 - the bottom
345:31 - let's identify these with a different
345:33 - background color
345:35 - and here we'll say 1
345:38 - e 2 9 3 b there we go a little darker
345:42 - but then let's give the font the color
345:44 - of white smoke as well
345:48 - we can save that and now we can see our
345:50 - header and footer and remember the nav
345:52 - is nested inside the header and now
345:54 - we've applied position sticky but we
345:56 - didn't provide the other value that we
345:59 - need to stick the header or the footer
346:02 - in a
346:03 - specific position so here i'm going to
346:05 - say header now because it will have a
346:07 - different position than the footer we'll
346:09 - say top 0 and now that is in the same
346:13 - place but after that we can come down
346:16 - below and say footer
346:18 - and here we'll say
346:20 - bottom 0 and save and now right now it
346:24 - looks like it's in the same position
346:25 - because we haven't expanded the page but
346:28 - the footer will be stuck to the bottom
346:30 - and the header will be stuck to the top
346:32 - and we can see the difference in that
346:34 - i'll scroll for a little more room
346:36 - and in our main element and it is a flex
346:40 - item right now as it's inside the body
346:42 - that is a flex container we can say flex
346:45 - dash grow set that to a value of 1
346:49 - and now the main element has grown to
346:52 - fill out whatever space was available
346:54 - now before we move on to a media query
346:56 - let's go ahead and style the nav just a
346:59 - little bit more to make it stand out so
347:01 - let's give it a background dash
347:04 - color
347:05 - set that equal to white
347:07 - after that we'll set its color or font
347:10 - color to black
347:12 - let's give it just a little bit of
347:13 - padding here 0.5
347:16 - rim and let's give it a border
347:20 - bottom and let's set this a little
347:22 - thicker two pixels
347:23 - solid
347:24 - black and let's see what we get
347:27 - well that looks good except we don't
347:29 - quite have the width we want yet we can
347:31 - easily solve this by going back to where
347:33 - we place the grid on each of these
347:36 - elements the header nav main and footer
347:39 - we've got it centered but we don't have
347:42 - block elements at this point that are
347:44 - 100 percent width so let's add grid dash
347:48 - template columns and set that to 100
347:50 - percent
347:51 - now when we center
347:53 - those or actually give them 100 width
347:56 - and we've centered them and you can see
347:58 - main is centered here vertically but
348:00 - it's not horizontally now but the
348:03 - elements do have 100 percent width and
348:05 - this is text content
348:07 - text content pardon me so we just need
348:10 - to say text align center
348:12 - and now we get everything where we want
348:14 - it but we actually have 100 percent
348:17 - width for each of those elements once
348:19 - again and now we have our basic page
348:22 - layout so let's go ahead and add a media
348:24 - query now that will change things up a
348:26 - little bit
348:27 - so underneath our footer we first want
348:30 - to indicate that's what we're doing so
348:31 - i'll put a comment
348:33 - and here let's say
348:35 - small that's where we'll start out with
348:37 - our media query i'll say at media
348:40 - and then we'll use screen
348:42 - and
348:43 - i'll say min width
348:45 - and here we'll say
348:47 - 576 pixels so the styles we have put in
348:51 - are valid up to 576 pixels and they will
348:55 - still be valid if we do not overwrite
348:57 - them here so now let's go ahead and
349:00 - style the body here
349:02 - and the first thing we'll do is set a
349:04 - background dash color
349:06 - let's just set it to green something
349:08 - we'll definitely notice a change on and
349:10 - then we can go ahead and use that same
349:12 - background image
349:14 - style that we're using with a radial
349:16 - gradient
349:17 - and inside there we'll start out with
349:19 - white smoke once again and then we'll
349:21 - just switch to green
349:23 - okay besides the body let's do one other
349:26 - thing let's take the nav
349:29 - and let's just set the display to none
349:32 - so it will disappear
349:34 - and now look what happened we're already
349:36 - past that 576
349:38 - width so we see those changes instantly
349:41 - we no longer have a nav on the page and
349:44 - now our background for the body is main
349:47 - now we still have our background color
349:50 - on the header and footer that we set
349:51 - because we did not overwrite those with
349:53 - a new style here
349:55 - so that is what has changed based on
349:57 - that width now how can we go back and
350:00 - forth this is interesting and something
350:02 - you should learn how to do so i'll drag
350:04 - this over till it's full screen
350:06 - you want to go to dev tools and there's
350:09 - certain ways to do that one is to right
350:11 - click and choose inspect at the bottom
350:13 - of the pop-up menu another is to press
350:16 - ctrl shift and the letter i which is
350:18 - what i tend to do and now devtools
350:21 - opened here on the right it's fairly
350:23 - small and i have got the console here
350:26 - for javascript right now but yours may
350:28 - open to elements and you can see and
350:30 - highlight these elements here and that's
350:33 - really what we want as we style things
350:34 - and you can see layout but now let's
350:37 - look at some details about this layout
350:40 - and how we can adjust that notice the
350:42 - little mobile devices icon up here let's
350:45 - go ahead and click that it says toggle
350:47 - device toolbar
350:48 - that gives us more tools now we can
350:51 - choose dimensions and we see the
350:53 - dimensions here we see the percentage
350:55 - that's showing so i'm going to set this
350:57 - to 100 and now i can see that these are
351:00 - the dimensions for an iphone 6 7 and 8.
351:03 - we can change this to a responsive
351:05 - screen or choose different devices so
351:08 - i'm using the responsive screen now and
351:10 - i can drag it to make it
351:13 - narrower or wider and you saw that
351:16 - change and there we went past our 576
351:20 - we're now at 602 pixels wide and we can
351:23 - see the change likewise we can look at
351:25 - devices like i was talking about before
351:28 - so i'll choose iphone five slash se one
351:31 - of the smaller devices
351:33 - now not every device has this available
351:36 - but some do you can go to the three dots
351:38 - here
351:39 - in our
351:41 - new responsive menu bar that popped up
351:44 - and here we can say show device frame
351:47 - and now i have a frame that looks like a
351:49 - phone around my page and now we can once
351:52 - again change that i want to make it so i
351:54 - can see the whole phone so there we go
351:57 - and now we see how it looks on the phone
351:59 - you can even change to the horizontal
352:02 - display as you would turn your phone or
352:05 - back to the normal display here and we
352:07 - can do that for several different phones
352:09 - i'll choose the iphone 6 7 and 8 for
352:11 - example or we can just go back to
352:13 - responsive and drag the page around
352:16 - which is what we'll do now because now
352:18 - up until 576 and we can even type in
352:21 - here i can say
352:23 - 576
352:25 - we're going to switch over so if i said
352:27 - 575
352:29 - yep we're back to the original
352:31 - background color so we can check our
352:33 - breakpoints right there also there are
352:36 - break points here that are suggested by
352:38 - chrome and you can click on these to
352:41 - change your width as well and see how it
352:43 - displays and these are a little bit
352:45 - different than what we reviewed in our
352:47 - notes markdown file as well so you might
352:49 - check those out okay let's drag this
352:51 - back over to the right and then let's
352:53 - take visual studio code and fill up the
352:56 - page let's put in some more break points
352:58 - and then we'll come back and check all
353:00 - of those out what i'm going to do now is
353:02 - highlight all of this code then press
353:04 - shift alt and the down arrow to copy it
353:06 - down and now let's make our next break
353:09 - point and we'll label this one
353:12 - medium
353:14 - and we're not going to change the nav
353:16 - anymore it is gone for now so we'll just
353:18 - leave it gone so all we really want to
353:20 - do is change the color here for our next
353:22 - break point and of course the break
353:24 - point value itself so here i'll switch
353:27 - this to gold i could have changed those
353:28 - both at the same time i'll try to
353:30 - remember to do that next time
353:32 - so min width instead of 576 this is our
353:35 - medium let's set it to 768. we want the
353:38 - pixels behind that to indicate that
353:41 - after that let's copy this down again so
353:45 - shift alt and the down arrow
353:47 - and now this would be our large break
353:49 - point
353:50 - we'll relabel that
353:52 - i'll highlight gold and press control d
353:54 - to select the other gold i'm going to
353:57 - change this to fire brick
353:59 - and so that will give us a nice color
354:01 - change as well we'll set this to 992
354:04 - pixels much like the bootstrap framework
354:07 - does
354:08 - now let's select our large
354:10 - shift alt and the down arrow
354:13 - i'll give another line break there and
354:15 - then this will be our xl setting
354:18 - and for that let's go ahead and switch
354:20 - to another color that will be noticeable
354:22 - rebecca purple i didn't select that fire
354:24 - brick i'll do ctrl z to go back to
354:27 - firebrick
354:28 - highlight the first one ctrl d to select
354:30 - the second one and now rebecca purple is
354:33 - what we want
354:34 - save that and let's do one more but this
354:38 - will be different so i'm going to copy
354:40 - this down but we'll make some changes
354:43 - just to give an example of how you could
354:44 - do something differently and look for a
354:47 - different type of breakpoint as well so
354:49 - this is still at media screen
354:52 - but let's go ahead and label this
354:55 - here we go i can type there we go mobile
354:58 - and i want that all caps mobile
355:01 - device
355:03 - landscape
355:04 - so now let's combine some things here
355:07 - instead of min width
355:09 - let's say
355:11 - lowercase max height and we'll set the
355:14 - max height
355:16 - to 425 pixels and after that let's do
355:20 - another and
355:22 - now let's say min aspect ratio you might
355:26 - have thought i would have said
355:27 - orientation but i want to
355:29 - actually be a little more specific here
355:31 - and say the min aspect ratio of seven to
355:34 - four so it's noticeably taller than it
355:37 - is wide
355:39 - and let's change our rebecca purple
355:42 - to
355:43 - dodger blue
355:45 - and save that as well now inside of this
355:49 - we'll also do a couple of other changes
355:51 - so let's say
355:53 - h1 and h2 that we have for labels we'll
355:56 - make the font size just a little smaller
355:58 - to 1.5 rim
356:01 - and then let's also set that nav
356:05 - to display none and we need to do that
356:08 - again because
356:09 - we didn't hit our other min width when
356:12 - we hit our max height here so that's a
356:14 - little different but we'd just be
356:16 - looking at a different size so we need
356:18 - to go ahead and switch that to display
356:20 - none or i believe it would show once
356:23 - again
356:23 - so now that we've made those changes
356:26 - let's drag visual studio code over and
356:28 - see if they all take place in our page
356:30 - so we'll drag chrome back over
356:33 - we'll start down here at the smallest
356:35 - and there we have our original color
356:37 - we get a little wider we've got green
356:40 - a little wider yet we have gold
356:43 - a little wider yet we have rebecca
356:46 - purple
356:47 - it seems like maybe we skipped over the
356:49 - fire bricks so let's see what happened
356:51 - there we'll bring this back over
356:53 - and look at our fire brick and maybe all
356:56 - it takes is one typo to get something
356:58 - wrong maybe i did something wrong and i
357:00 - sure did i did not change
357:03 - the min width for the rebecca purple for
357:05 - the xl so we had 992 here and 992 here
357:09 - again so this essentially was overriding
357:13 - this so we wanted to change this 992
357:16 - here and set it to 1200 pixels and now
357:20 - we should see all of the changes we
357:22 - expected and here's purple there is our
357:25 - fire brick color
357:27 - gold green and back to normal there so
357:30 - we might see those changes in different
357:32 - devices as well
357:34 - so let's go ahead and check that we'll
357:36 - see our iphone
357:39 - and we can choose maybe a larger setting
357:41 - here that's too large let's go with 75
357:44 - percent there's the iphone
357:46 - let's go with the ipad and yes it's gold
357:50 - let's go with the ipad pro
357:52 - yes that's the fire brick size and you
357:55 - can see a device frame is not available
357:57 - for it and then we could even switch up
358:00 - to say well let's go back to a small
358:02 - phone first there is that iphone 5se
358:05 - now let's go ahead and change the
358:07 - orientation
358:09 - and now we get our dodger blue color as
358:11 - we switched because the aspect ratio and
358:15 - the max height were both met it meant
358:17 - most both of those conditions and now
358:20 - you can see how those media queries
358:22 - apply and we can change the page based
358:24 - on what the device is the viewing
358:27 - orientation and of course you're not
358:30 - going to have someone that typically
358:32 - changes their screen size as they're
358:35 - working with your application so you
358:37 - don't really need to worry about these
358:38 - smooth transitions in between changes
358:42 - and that's because nobody will be
358:43 - changing their device or really their
358:45 - screen size as they use the application
358:47 - so you just need to make sure
358:49 - it appears as you want it to at each
358:52 - separate break point
358:54 - today we'll use css to apply responsive
358:57 - web design as we create profile cards
358:59 - for the staff of a small company it's
359:01 - time for another css mini project and
359:03 - we'll be applying many of the concepts
359:05 - we've learned from previous lessons in
359:07 - the css for beginners tutorial series
359:10 - let's look at our finished project first
359:12 - this is our end goal i've already got
359:14 - dev tools open i'm already showing the
359:17 - toolbar at the top and you can click the
359:20 - little mobile icon at the top of chrome
359:22 - dev tools to toggle that device toolbar
359:25 - and if you click the three dots you can
359:26 - also show or hide the device frame if
359:28 - it's available and it is available for
359:30 - the iphone five slash se which is
359:33 - currently probably the smallest mobile
359:36 - device we would design for as of the
359:38 - making of this tutorial at least and
359:40 - it's got 320 pixels with
359:43 - 568 high and you can see the project
359:46 - right here and we can scroll through the
359:48 - cards for each employee now if we choose
359:51 - this drop menu and choose responsive
359:54 - there you can see the page definitely
359:56 - changes we can see all employees at once
359:58 - and we see the new width and height at
360:00 - the top and we can type in here too and
360:02 - i'm going to actually highlight the
360:04 - width and change it to 1920
360:06 - by 1080 and we can see what our page
360:09 - would look like on a full 16 by 9 or
360:13 - 1920 by 1080 widescreen so this is our
360:17 - end goal i can grab the side now and
360:20 - squeeze the page back and we can see how
360:22 - it adapts to each width all the way back
360:24 - to our 320 pixels of course we've got
360:27 - more height than we did in the iphone
360:29 - right now
360:30 - but we can see how it adapts to all of
360:32 - these different sizes and changes as i
360:35 - drag it all the way back to above 1920
360:38 - now so now let's look at the code our
360:40 - starter code today is the finished code
360:42 - from the last lesson that we had on
360:44 - media queries but don't worry if you
360:46 - don't have that you can download it in
360:48 - the description
360:49 - or i won't move so fast that you can't
360:51 - follow along and add the other styles i
360:54 - will cover all of the styles and as we
360:56 - see in the file tree over here we've got
361:00 - a notes.md in the last lesson we
361:02 - discussed breakpoints and i included
361:04 - those that's a markdown file
361:06 - we have our index.html but i've also
361:09 - added an image folder img and we see
361:13 - three different profile pictures here so
361:16 - those are also available for download
361:17 - with the source code from github and
361:20 - here's our css once again let's make our
361:22 - changes to the html first because we
361:25 - need to add more here so let's switch
361:27 - the title first from css media queries
361:30 - to css mini dash
361:33 - project and then put a colon and we'll
361:36 - put
361:37 - let's do profile cards
361:40 - okay now that we've changed our title we
361:42 - can change more of the content so
361:44 - instead of saying header here we're
361:46 - going to say
361:48 - our staff
361:49 - and then inside of the nav we're going
361:52 - to put some other details instead of
361:54 - that h2 so let's just put links here and
361:58 - we'll have an a
361:59 - with an href attribute and we
362:02 - automatically get that in there now this
362:04 - is going to be an anchor tag we can put
362:06 - the hashtag and i'll put profile1 and
362:09 - we'll match that to an id later and here
362:11 - let's just put the first employee's name
362:13 - so we'll say joe
362:15 - we're making a nav menu here the next
362:18 - one will do the same and actually i'll
362:20 - just go to this line and press shift alt
362:22 - and the down arrow to copy down twice
362:25 - and that will save some time for sure
362:28 - okay after i get rid of that line i'm
362:29 - going to switch the profile to two and
362:31 - the next one to three
362:33 - and then after joe i believe we have
362:35 - matt
362:36 - and then we have jane so now we have our
362:40 - nav menu and our title for our staff
362:42 - page let's move on to the main element
362:46 - and we can remove this h2 as well
362:48 - and now we're going to add an article
362:52 - and this article element will have an id
362:55 - equal to
362:57 - profile
362:58 - of one and now inside the article we can
363:01 - put several things but first let's also
363:02 - add a class and set that equal to
363:06 - card there we go
363:08 - now inside the article let's add a
363:10 - figure and if you completed my html for
363:13 - beginners course you know we'll probably
363:15 - put an image inside the figure as well
363:18 - as a figure caption so let's start with
363:21 - the image and now we have a source
363:23 - attribute and an alt attribute so for
363:25 - the source we're going to look in the
363:27 - image folder then put a slash and now vs
363:30 - code gives us the options of what we
363:32 - have in here and we'll pick the profile
363:34 - picture
363:35 - now we'll also put the employee's name
363:38 - under the alt attribute so there's joe
363:40 - coder but then if you also remember our
363:43 - discussion in the images lesson we need
363:45 - to put a width and a height and this
363:48 - prevents a code layout shift or i should
363:51 - say a page layout shift or i believe
363:54 - the proper term is content layout shift
363:56 - but as long as you get the concept that
363:59 - it already reserves that space in the
364:01 - browser essentially and i've got links
364:04 - to that in the description with all of
364:06 - the other resource links okay so we have
364:08 - a width
364:09 - equal
364:11 - 500 and we're also going to have a
364:13 - height equal to 500 there we go we need
364:16 - that on all images now let's go ahead
364:18 - and add the fig
364:20 - caption
364:21 - and this big caption is once again just
364:24 - going to be the employee's name so now
364:26 - we have joe coder in the fig caption
364:28 - and then underneath our figure is where
364:31 - we want to put
364:33 - actually not underneath just the figure
364:35 - this fig caption goes in that's what i
364:37 - was doing wrong the fig caption goes in
364:39 - the figure there we go now underneath
364:42 - the figure we're going to have a
364:43 - paragraph but inside the paragraph we
364:46 - want to use another element we haven't
364:48 - talked about before we talked about how
364:50 - to add quotes with html entities
364:53 - and unicode but we didn't talk about how
364:56 - to add quotes just with the quote
364:58 - element itself so i'd like to add that
365:00 - to this series and hopefully your
365:02 - knowledge that you can also add quote
365:04 - symbols with the quote element so here
365:06 - we put i code stuff this is basically
365:09 - joe's statement about what he does very
365:12 - simplified but there we go for joe okay
365:15 - now that we've got the profile card html
365:18 - here i'm going to highlight this
365:20 - and i'm going to copy it down
365:22 - twice with shift alt and the down arrow
365:24 - so now we just need to make some changes
365:26 - for each one of these so now it will be
365:28 - profile two we've changed both of those
365:31 - the images are all the same but the next
365:34 - one is going to be for matte designer so
365:37 - let's highlight everywhere we had joe
365:39 - coder here so one and then control d to
365:43 - select the next one we can put matte
365:46 - designer
365:47 - and imagine instead of i code stuff he's
365:50 - going to say
365:52 - i design stuff
365:54 - and then the final employee profile
365:57 - number three and really i can highlight
365:59 - one and press ctrl d to highlight it
366:01 - again and switch that to a three instead
366:04 - of joe coder so i highlight that ctrl d
366:06 - again this is going to be jane
366:10 - devrell for short for developer
366:12 - relations of course but we just put it
366:14 - as somebody's last name for what they do
366:17 - and after that
366:18 - here we want to put i
366:20 - teach stuff again all over
366:22 - simplifications of every job but we just
366:25 - have a small example now i have prettier
366:28 - enabled also and notice it just
366:31 - wrapped all of these attributes down to
366:33 - different lines if you don't like that
366:34 - you don't have to use prettier or you
366:36 - can go to your vs code extensions and
366:39 - you can search for
366:41 - prettier
366:42 - and then you can click on prettier and
366:44 - install that and it does some auto
366:46 - formatting and i happen to have it
366:48 - enabled as i'm making this video so that
366:51 - when i saved that is why you saw that
366:53 - auto formatting it put each one of these
366:55 - attributes on a separate line which is
366:57 - fine too it still works out the same
366:59 - okay we're finished with our main
367:01 - content let's just move down to the
367:03 - footer where we're not going to say
367:05 - footer here and we're not going to have
367:06 - an h2 so let's just put a paragraph and
367:09 - inside this paragraph now we'll use an
367:12 - html entity we'll put and copy it's an
367:14 - ampersand
367:16 - the word copy and then a semicolon and
367:18 - that's the copyright symbol and then
367:20 - we'll just say acme co
367:22 - if you're a fan of the old looney tunes
367:24 - this is the company that made all of the
367:26 - stuff for the coyote and now we've
367:28 - completed our html so let's shift over
367:31 - to the css and then i'm going to press
367:33 - ctrl b to hide the file tree and then
367:36 - i'm going to drag vs code over to the
367:38 - left half of the page and we'll look at
367:41 - our page here on the right now we can
367:43 - see we've added some content but it is
367:46 - not conforming at all to the size of
367:48 - screen we have we need to make some
367:50 - changes in the css to apply this
367:53 - correctly to our page i'm going to press
367:55 - alt z to wrap the code so we can see it
367:58 - all on the window so if the line is too
368:00 - long it wraps down to the next line such
368:03 - as this import from google fonts where
368:05 - we have
368:06 - the nanito font here we have our basic
368:09 - reset with a margin of zero padding of
368:12 - zero and box sizing border box and now
368:15 - i'm going to add to this reset something
368:17 - that we cover covered in the image
368:20 - lesson
368:21 - was adding an image reset where we need
368:23 - it to say display block and that removes
368:26 - the little space that is by default
368:29 - under images because they are inline
368:31 - elements
368:32 - but then instead of width 100 which you
368:35 - would often see here i just want to say
368:37 - max width of 100
368:39 - and that means
368:41 - it will not overflow its container and
368:44 - at the same time we need to add a height
368:47 - of auto now you'll see many say do not
368:50 - add a height to images however
368:54 - we're doing this because we added a
368:56 - height in the html to prevent that
368:58 - content layout shift and that is the new
369:00 - approach so i recommend following that
369:03 - at this point and if you don't add the
369:05 - height it will stick with the height
369:06 - assigned in the html which would be the
369:08 - original 500 pixels so this height auto
369:11 - then will adjust according to the width
369:14 - as well so if we save that we have
369:16 - completed our basic reset now so we have
369:20 - our asterisk which selects all elements
369:22 - and then our image selection here for
369:25 - the full reset we're applying and we can
369:27 - already see a change our images are
369:29 - actually now fitting into the design
369:31 - even though the design isn't the way we
369:33 - want things yet it does look a little
369:36 - better than it did okay we'll scroll for
369:38 - some more room and i'm going to select
369:40 - this general styles comment and i want
369:42 - to make another comment in between
369:45 - and instead of general styles here i'm
369:47 - going to keep it all caps and i'll type
369:51 - utility
369:53 - classes and after that i'm going to add
369:55 - a utility class and it's going to be
369:57 - called no wrap
369:59 - and then inside the no wrap class we'll
370:02 - choose the white space property it's
370:04 - white dash space and there we'll say no
370:07 - wrap i'm going to use this because jane
370:10 - has a last name that has a space in it
370:14 - and we don't want her name to break in
370:16 - half if the text wraps so let's go back
370:19 - to the html
370:21 - and hear
370:22 - jane's name in the fig caption and we'll
370:24 - put a span element with a class
370:27 - of no wrap
370:30 - and now we still need to scroll over or
370:32 - i could wrap the code but since we're
370:34 - only doing this one thing i'll just
370:35 - scroll i'm going to collect the closing
370:37 - span that was automatically added and
370:39 - put it after the end of her last name
370:42 - we'll save that you won't really notice
370:44 - a change but now if the text wraps it
370:47 - will not break her last name into
370:49 - okay back to the style css now we're
370:53 - going to move on to the general styles
370:55 - section
370:56 - and here we have the font shorthand
370:59 - which adds a font size and a font family
371:02 - all in one then we have a min height of
371:04 - 100 viewport units we'll keep all of
371:07 - that and get rid of this blank line
371:09 - we have a fallback background color
371:12 - and then we have a background image set
371:15 - with a radial gradient which starts in
371:17 - the center at white smoke and works its
371:19 - way out to this darker color
371:21 - and then we have display flex and flex
371:24 - direction column and that is what stacks
371:26 - our header on top of the main on top of
371:29 - the footer and keeps it in that order
371:32 - okay after that we have a section where
371:34 - we applied grid to the header nav main
371:37 - and footer and we're just going to
371:39 - delete that so if you are following
371:42 - along with the starter code go ahead and
371:44 - remove that if you're following along
371:46 - without it well you don't need to do
371:47 - anything there now we have the header
371:50 - and the footer position sticky because
371:52 - we have the header at the top the footer
371:54 - at the bottom and we want them to stay
371:55 - there especially if the page scrolls
371:58 - and then a background color of a darker
372:00 - color and then white smoke for the font
372:03 - color but what else we would like to add
372:06 - here
372:07 - is a text dash align
372:11 - put center so we'll go ahead and add
372:13 - that so we can center this text okay
372:15 - just below we have the header with a top
372:18 - of zero and that keeps the header at the
372:20 - top notice we also have a footer down
372:22 - here with the bottom of zero
372:24 - in between we have the nav and the main
372:27 - so for the nav we're going to keep the
372:29 - background color of white we can remove
372:32 - this color of black for the font color
372:36 - the padding at one half rim that's fine
372:39 - and we still want the two pixel border
372:41 - on the bottom but now let's add some new
372:44 - styles here let's put the font dash
372:46 - weight and make that bolder
372:49 - there we go bolder and then i'm going to
372:52 - put display
372:53 - flex here
372:55 - and then we'll say justify content and
372:58 - we'll space dash
373:00 - evenly to spread out
373:02 - the employee names in this nav menu and
373:05 - now you can see they are in bold and
373:07 - they are spaced out evenly here in our
373:09 - nav menu i'm going to scroll up just a
373:11 - little bit more and after the nav and
373:14 - before the main we're going to style
373:16 - these links so let's add
373:18 - nav and then a for the anchor element
373:21 - and also nav
373:22 - and then a with the visited pseudo class
373:26 - for after a link has been visited and
373:28 - let's just shift that color back to the
373:30 - black color that we had before so when
373:32 - we save we should see those change to
373:34 - black now now after the nav anchor and
373:37 - the anchor visited we also want to style
373:40 - nav anchor with the hover
373:43 - and nav
373:45 - anchor with a focus
373:48 - and you might even want to add an active
373:50 - in there or you might like to see it
373:52 - flash a different color which is another
373:53 - pseudo class you could do i'm not doing
373:55 - that one right now but let's put a color
373:57 - here
373:58 - and i'll go with hsla which you can also
374:01 - of course
374:02 - pick by navigating through the visual
374:05 - studio code color picker but i've
374:06 - already got this picked out it's zero
374:08 - zero percent here
374:10 - 20 in the last one that's easy to
374:12 - remember and then 0.6 or essentially 60
374:16 - transparency and then i'll put the
374:19 - semicolon there at the end and save and
374:21 - we're not going to see this in mobile
374:22 - mode because we're not really going to
374:24 - hover but as we get to a wider design if
374:26 - we were to show that we could notice
374:29 - noticeably see that change as we hovered
374:32 - over now if they had focus here we could
374:34 - possibly see that so let me tab through
374:36 - there we see the lighter color as we tab
374:38 - to each of the names so we can test that
374:42 - in mobile view
374:43 - by tabbing through and setting that
374:45 - focus
374:46 - okay we're ready to style the main
374:48 - element now so i will scroll up for that
374:50 - we want to keep that flex grow so it
374:53 - does fill out the page no matter what
374:55 - but after flex grow we can add a few
374:57 - more things here so let's put
374:59 - display of flex once again and then
375:02 - we'll have a flex dash direction
375:05 - and we'll set that to column
375:07 - and then we're going to align
375:10 - dash items and we'll set that to center
375:13 - now let's put a gap which is shorthand
375:16 - essentially for column and row gap this
375:19 - is going to be 1.5 rim
375:21 - and a padding
375:23 - of one rim and if we save we should see
375:26 - some changes there we do a little bit so
375:28 - the images aren't to the full edge of
375:30 - the screen and it moved a few things
375:33 - around for us but we still have more
375:35 - changes to apply directly to the cards
375:37 - themselves i'm going to copy the comment
375:40 - we have here for the small media query
375:43 - and i'm going to create a section for
375:45 - the profile card class so here i can
375:48 - just switch this from small to
375:50 - profile card
375:52 - and underneath that we will start to
375:54 - style the card class so i'll scroll this
375:56 - up as we continue to grow the styles and
375:59 - here it would be a card class now inside
376:02 - this class one thing i'm going to put is
376:05 - scroll dash margin dash top and you
376:08 - would have to experiment with this to
376:09 - get the right size i've played around
376:12 - with a little bit and i believe eight
376:13 - rim is the right size what this does is
376:16 - when we scroll to joe or matt or jane
376:20 - when that is scrolled then it pushes
376:22 - down from the top so it doesn't scroll
376:24 - underneath the header so you want to
376:26 - have a little margin on the top from the
376:28 - scroll and this property will do that
376:31 - after that let's set a width and we're
376:33 - going to use the min function now the
376:36 - min function says hey at a minimum
376:39 - use this width and we'll set it to 100
376:41 - percent so it can grow to 100 width of
376:44 - the container but it also takes a max so
376:47 - it says do not grow any larger than and
376:49 - we'll put 350 pixels here
376:52 - so we'll fill out whatever the container
376:55 - is up to 350 pixels and we can specify
376:59 - all of that in one line
377:01 - for the width if we use the min function
377:04 - after that let's go ahead and put
377:05 - another background color for this
377:08 - area of the page which will be the cards
377:11 - i'm going to go with cbd
377:14 - 5e1 that i've previously picked up more
377:16 - of a gray or a lighter gray
377:18 - and then we can go ahead and put a
377:20 - border and i'll go 2 pixels
377:23 - solid black
377:25 - and then let's add a border dash
377:28 - radius and we'll go 15 pixels here let's
377:32 - save that much and see the change
377:34 - there's some definite change there now
377:36 - let's add a padding
377:38 - of one rim all the way around
377:41 - and that changed that up a little bit so
377:43 - now we have some space in there once
377:44 - again
377:45 - now let's add a display of flex for the
377:48 - card itself
377:50 - the flex direction
377:52 - is going to be column once again
377:55 - and then we'll also say align items
377:59 - there it is and we'll choose center and
378:02 - save now something you may notice right
378:04 - away is the employee name didn't center
378:07 - that's because it's inside the figure so
378:09 - this paragraph is outside and it became
378:11 - a flex item however the fig caption did
378:14 - not become a flex item because it's
378:17 - inside the figure which is the flex item
378:19 - so we'll still need to make a change for
378:21 - that so underneath the card now we can
378:23 - select
378:25 - the card class and the figure element
378:27 - within
378:29 - we'll also set it to flex
378:31 - and then we'll set the flex flow
378:34 - and that will be columns so that's
378:35 - column direction and then it's also the
378:37 - flex wrap property and we'll set it to
378:39 - no wrap and if we save we don't really
378:41 - see a change at this point but it will
378:43 - be good to have that there okay then
378:46 - let's set the card
378:48 - image element itself and now we can say
378:51 - border and let's put a thick border on
378:53 - that five pixels
378:55 - double
378:56 - and a flat black with the 333
378:59 - hexadecimal code
379:01 - and then a border dash radius of 50
379:05 - because it's a square so we can turn it
379:07 - into a circle and now finally before we
379:09 - move on to media queries or different
379:11 - sizes let's add the card
379:14 - fig caption styles
379:17 - and for the fig caption we're going to
379:19 - say font dash weight input bolder
379:22 - put a font dash size of two rim
379:26 - a margin of one rim and now we need to
379:29 - text align
379:31 - center
379:32 - for that fig caption
379:34 - and there we have joe's name in bold and
379:36 - it's centered and really we're finished
379:39 - with our smallest screen design before
379:41 - we get to our first media query so we've
379:43 - applied all of the main
379:45 - general styles and then the specific
379:48 - card class styles
379:50 - and now we have our design here there's
379:53 - one more thing i would like to add
379:55 - though
379:56 - because right now if i click on joe
379:58 - of course he's right there if i click on
380:00 - jane
380:01 - it just jumps to her automatically and
380:03 - if you remember i believe it was our
380:05 - flexbox lesson we allowed that to scroll
380:08 - and just have a nice little feature and
380:10 - we need to add that actually under
380:12 - general styles but it will be under the
380:15 - html element and there we should put
380:18 - scroll behavior
380:21 - there it is and we'll put smooth
380:24 - then we can just leave that all on one
380:26 - line but i would like to put a space
380:28 - between the html and the body styles oh
380:31 - and then of course using prettier it
380:33 - auto format it for me so now with that
380:36 - scroll behavior of smooth and if i click
380:38 - on joe
380:39 - it just scrolls to joe and we've got
380:41 - that scroll margin top set so he didn't
380:44 - stop underneath the header
380:47 - and then it scrolls to matt and it
380:49 - scrolls to jane all like it should now
380:51 - we're ready to go to our first media
380:52 - query which is at
380:55 - 576 pixels for the small media query
380:58 - that we have here let's go ahead and
380:59 - delete the styles we were using before
381:02 - in the previous lesson that just
381:03 - displayed the changes for us and let's
381:06 - apply what we're actually going to
381:07 - change so we'll select the main element
381:10 - and here we're going to change the
381:11 - justify content
381:14 - and it's going to be center and before
381:16 - if we look at the main element and what
381:18 - we had before this will overwrite that
381:20 - property and we didn't have justify
381:23 - content here before so that's okay it
381:26 - will be set now when we get to this size
381:29 - after justify content we're going to set
381:32 - the flex
381:33 - flow and it would be row
381:36 - and wrap so now we do want them to wrap
381:39 - if they will take up more than the width
381:42 - that they have we'll have two rows of
381:45 - profile and finally let's switch the
381:47 - padding to one rim
381:49 - and then after the main element we're
381:51 - going to adjust something about the card
381:52 - class as well and this will be the width
381:56 - and the min will still set at 100
381:58 - percent but the max will now let go up
382:00 - to 400 pixels and then let's rearrange
382:04 - the order so it'll be easier to see our
382:06 - break point so here we'll take the card
382:08 - and the last child which would be jane
382:11 - and we'll make her first by setting the
382:13 - order
382:14 - to minus one
382:16 - so now let's grab chrome i'll make it
382:18 - full screen and we'll switch over to
382:20 - responsive and if we do that
382:23 - we'll drag this down to where we're at
382:26 - 576 right now we're still not at that
382:29 - break point so this was our mobile phone
382:32 - that we had and now we just passed 576
382:35 - and you can see jane's at the top so it
382:38 - just got a little wider it doesn't
382:39 - change much but it changes changes a
382:42 - little bit we can make the cards a
382:44 - little bit bigger
382:45 - just because
382:47 - of where they're at and then if we get
382:49 - bigger before the next break point well
382:51 - we hit it there so it didn't wrap yet
382:54 - but changing the width might allow them
382:56 - to wrap because we did switch that to
382:58 - allow wrap at this size okay i'll bring
383:01 - chrome back to the right and now this
383:04 - switch because our width once again
383:06 - switched but we'll go ahead and tackle
383:08 - the rest of the media queries and then
383:10 - we'll see the changes at each breakpoint
383:12 - as we go so now for medium let's go
383:14 - ahead and remove these styles as well
383:16 - and here we'll put the nav
383:19 - and the first thing we'll do is set it
383:21 - to display of none at this point because
383:24 - we're at ipad size and they should all
383:26 - fit on the screen now without scrolling
383:28 - the next would be a card once again
383:31 - we'll put a width
383:32 - and as you might guess we'll use the min
383:35 - function we'll say 100 again but now
383:38 - we'll make them smaller so we definitely
383:40 - fit a couple side by side and they all
383:43 - fit on the page so after that let's
383:45 - select the card figure element
383:48 - and there we'll set flex flow
383:51 - and we'll say column dash
383:54 - reverse so we'll notice a change there
383:56 - as well
383:58 - in the order that would appear and then
384:00 - we'll set the card
384:02 - fig caption
384:05 - and now let's set the margin to very
384:08 - very small here 0.1 em
384:11 - and then just zero and maybe we'll want
384:14 - to keep that maybe we want we can play
384:16 - around with that then card and the
384:19 - paragraph for the card i'll leave that a
384:21 - lowercase
384:22 - and i'll set that to margin dash top
384:26 - one rim
384:27 - and save let's see if we can make this
384:29 - any larger here so we're at 594 we made
384:32 - our first break point
384:34 - but we're not making it to the next one
384:36 - unless we make vs code a little bit
384:38 - bigger again so we'll drag this over
384:41 - and now as we get a little larger
384:44 - there we go now let's switch this to the
384:46 - ipad size itself and you can see they
384:49 - all fit on the page for the ipad and if
384:53 - we get smaller than that we're somewhere
384:54 - in between maybe a surface duo there
384:57 - we're at 540 so we didn't hit the first
384:59 - break point yet so it's just kind of a
385:02 - weird spot in between where we are there
385:04 - but it does work it's just a little bit
385:06 - larger view
385:08 - of the mobile view
385:09 - as we look at it that way so now we've
385:11 - covered our first two break points as
385:14 - well as our starting point let's go
385:15 - ahead and add the third at the large
385:18 - stop and that's
385:20 - 992 pixels let's delete what we had here
385:23 - for the body from the last tutorial and
385:25 - once again select the card class
385:28 - we'll select the width again and we'll
385:30 - use the min function we'll say 100
385:34 - and then 400 pixels here and if you
385:36 - remember we made it smaller so it would
385:39 - all fit on an ipad we were at 325 pixels
385:42 - so even though previously before that we
385:44 - were at 400 pixels we need to switch it
385:47 - back because it hits that break point in
385:50 - between
385:51 - okay after the card selection there
385:53 - let's switch the order around again so
385:55 - we once again know this has changed so
385:57 - we'll say card and now we'll say nth
386:00 - child and we'll select
386:01 - the second child element and we'll give
386:04 - that an order of minus one and it should
386:07 - switch the order for us again those are
386:09 - the only changes we're going to make
386:11 - there so let's go on to the xl size as
386:13 - well
386:14 - and we'll select what we have there and
386:17 - delete it from the previous tutorial
386:19 - we'll select the card class
386:22 - now we'll set width again use the min
386:24 - function but now i'm going to use a
386:26 - function inside of the min function and
386:28 - that is the calc function
386:30 - calc function is great because it lets
386:33 - us mix
386:34 - other units together or different units
386:37 - together i should say so i'm going to
386:38 - set the width of each card to 33 percent
386:43 - minus
386:45 - one rim
386:46 - and then we'll have a max of 500 pixels
386:49 - because that is the size the images are
386:51 - and we don't want the images to get any
386:54 - larger than their original size or
386:56 - they'll start to get blurry so we'll
386:57 - leave that as the max but this will
387:00 - allow them to grow dynamically with a
387:02 - percentage value so let's stop there and
387:05 - save our file i'll once again take this
387:08 - to the larger screen now something else
387:11 - we can do is click the three dots here
387:13 - and say show media queries so now we can
387:15 - see our media queries here so there's
387:17 - 576
387:19 - 768 we're only seeing the width we're
387:22 - not seeing a good height
387:24 - 992 and finally
387:26 - 1200 so now let's switch this to some
387:29 - sizes we might normally see such as 1920
387:33 - by 1080
387:35 - and then i'll just
387:36 - make this smaller and smaller as we go
387:39 - notice
387:40 - we have got joe's name and jane's name
387:43 - and matt's name all on top of their
387:44 - cards now because of that column reverse
387:48 - that we did so that was a nice change to
387:50 - let us know we have made something
387:52 - different now this is using the
387:54 - percentage size that we used with that
387:56 - calc function so notice how they just
387:58 - gradually get smaller
388:00 - until we're at the next break point
388:01 - which is 1200
388:04 - there we go now this is at 50 percent so
388:06 - it looks a little tiny here but overall
388:08 - we're squeezing it down because of these
388:10 - two but overall we can see what is
388:12 - happening
388:13 - and so now they're stacked on top of
388:14 - each other with two rows
388:18 - and now they're stacked on top of each
388:19 - other again and we're kind of in that
388:22 - larger ipad size getting a little
388:24 - smaller
388:26 - now we're at that larger mobile size and
388:29 - now we're down to finally underneath 576
388:31 - which becomes definitely a mobile device
388:34 - so
388:35 - we really have identified several
388:37 - devices or sizes along the way that we
388:40 - could target and you can specifically
388:42 - target more than that one we haven't
388:44 - talked about yet though is taking
388:46 - something like an iphone i'll go ahead
388:48 - and remove these media queries now i'll
388:50 - hide them
388:51 - and turning it
388:53 - horizontal right now this isn't going to
388:56 - work so let's make some changes for this
388:58 - as well i'll leave the phone like this
389:01 - and drag vs code back and we can make
389:03 - some changes for our final break point
389:06 - which is the mobile device landscape
389:08 - scrolling all the way up here let's look
389:10 - at this break point you can see we're
389:12 - selecting a max height of 425 pixels
389:15 - and a minimum aspect ratio of 7 to 4 so
389:20 - the width would be 7 units and the
389:22 - height would be 4 in comparison so let's
389:25 - select everything we have here now
389:27 - except this display none for the nav we
389:29 - want to keep that
389:31 - and let's go ahead and put an h1 here
389:33 - with a font dash size
389:36 - 1.5 rim
389:39 - and we can leave that all on one line
389:41 - but when we save it will get formatted
389:44 - if we're using prettier like i am that
389:46 - prettier code extension or vs code
389:48 - extension
389:49 - now i'll go ahead and put some styles on
389:51 - the main element we'll go with flex flow
389:53 - which will set the direction to row
389:56 - and then no wrap so we should have only
389:58 - one row
390:00 - then justify content we'll set this to
390:02 - space evenly
390:05 - and after that let's align items
390:08 - and let's set this to stretch to give
390:10 - them all the same height in case the
390:12 - content would make them different
390:14 - heights
390:15 - and then we can go ahead and style the
390:17 - card just a little bit so
390:19 - under here i'll type the card class
390:22 - and i'm going to put a width
390:24 - use the min function
390:26 - and now instead of 100 width right away
390:28 - i'll use that calc function again
390:31 - i'll say 33
390:32 - this time minus
390:34 - 0.25 rim instead of one rim and we'll
390:38 - put the max for any card
390:40 - at 200 pixels
390:43 - okay then we can set something more
390:45 - specific on the card let's do the fig
390:47 - caption
390:50 - looks like i need to scroll up for some
390:52 - room here so i'll do that as well
390:54 - and for the fig caption let's put the
390:56 - font size
390:57 - 1.25 round
390:59 - and then let's go ahead and select the
391:02 - paragraph below
391:03 - and we could put these on the same line
391:06 - actually so let's just go ahead and put
391:07 - a comma here
391:09 - and put
391:10 - dot card paragraph and we're going to go
391:13 - ahead and set that same style on both
391:15 - and save
391:16 - okay now that we've made those changes
391:19 - let's drag this back over
391:21 - and then we'll turn our phone
391:23 - horizontally
391:25 - and we fit all of the cards right in
391:27 - here together which is nice let's see if
391:30 - we could do that in a different size as
391:32 - well maybe the iphone plus
391:35 - yes it works as well too it may not work
391:38 - as well in the smallest screen i have a
391:40 - feeling these will be just a little
391:41 - taller than we would want probably let's
391:44 - see
391:45 - yeah they're a little taller but it's
391:46 - not too bad you might expect to have to
391:48 - scroll when you have one of the smaller
391:50 - phones so that wouldn't be
391:52 - really a breaking thing to me but you
391:54 - could work with that if you really
391:56 - wanted to target this specific device
391:58 - but overall for most phones i believe
392:00 - this would work well in the horizontal
392:02 - mode so there's some nice changes you
392:05 - can go back through and tweak a few
392:06 - things one thing i want to check is that
392:09 - very very small margin that we set
392:12 - and let me find what size that was on
392:14 - again because i wondered if we even
392:16 - needed that or if i was just playing
392:18 - around with that back when i was working
392:20 - with the code that is such a small
392:22 - margin on the top and bottom and this is
392:24 - at the ipad size so let's see what it
392:27 - looks like if i comment this out i'll
392:30 - select it all press shift alt and the
392:32 - letter a
392:34 - comments out that code
392:36 - bring this over so i can switch to an
392:38 - ipad
392:40 - and there's the ipad size
392:43 - and let's make it a little bit bigger so
392:45 - we can see everything there we go yeah
392:48 - it looks good without it so i would
392:49 - probably remove that as well and i'll
392:52 - drag this back over
392:54 - and then we'll just take this out of the
392:56 - code
392:58 - and the rest i think i'll leave as is
393:00 - and of course you can play around with
393:02 - this i do not do this perfectly myself
393:04 - everything is trial and error basically
393:07 - as you go so mess around with this code
393:10 - don't accept it just the way it is see
393:12 - what you can change what you like better
393:14 - one way or the other
393:16 - let's move on to css pseudo selectors
393:19 - pseudo selectors include both pseudo
393:21 - classes and pseudo elements so the
393:23 - obvious question is what is the
393:25 - difference between a pseudo class and a
393:27 - pseudo element well a pseudo class is a
393:30 - selector that selects elements that are
393:32 - in a specific state so if we look at our
393:35 - starter code and this is the code that
393:38 - wrapped up the mini project in the last
393:40 - lesson so we're just starting with that
393:43 - and if we scroll down to the links we
393:46 - can see some of these different states
393:48 - we're styling for the focus state
393:51 - the hover state the visited state and
393:54 - then just a basic link which we actually
393:56 - could have added on
393:57 - the pseudo class link here as well if we
394:00 - wanted to because that is the unvisited
394:02 - link so there's different states there
394:04 - there's even an active one that we could
394:06 - have styled
394:07 - and for all of those those are different
394:09 - specific states of the element so a
394:13 - pseudo class now a pseudo element is
394:15 - similar but they act like you've added a
394:17 - new html element into your document and
394:20 - also pseudo elements use two colons
394:24 - instead of the one we see here with
394:25 - pseudo classes so we'll look at those as
394:28 - well but we're going to look at pseudo
394:30 - classes first and again this starter
394:32 - code is what we have from the previous
394:34 - tutorial the mini project that created
394:37 - this small staff page of three employees
394:41 - for the acme co that we see here and
394:43 - created profile cards for each one so
394:46 - that link will be available in the
394:48 - description if you want to download the
394:50 - starter source code we're not really
394:52 - going to change the project for the
394:54 - better today i'm just going to use it
394:55 - for some examples that you may not want
394:58 - to keep in the project at all but i'm
395:00 - going to show you how pseudo classes and
395:02 - pseudo elements work now we're already
395:04 - familiar with the different pseudo
395:06 - classes here that we've applied to links
395:08 - and we've looked at a couple of other
395:09 - pseudo classes along the way during this
395:11 - css for beginners tutorial series one
395:14 - other one that we could add here is
395:16 - active so let's go ahead and put a nav
395:19 - and an anchor
395:20 - and then we'll put
395:22 - active
395:23 - and let's just style this so we can
395:25 - really tell the difference so we'll say
395:28 - red so it'll just really stand out this
395:30 - should be when we hold down on the
395:32 - button on the link and then it turns red
395:35 - i have my mouse button for the click
395:37 - held down right now when i let go of
395:40 - course it goes ahead and completes and
395:42 - scrolls to the id for the employee that
395:45 - we expect it to but that is the active
395:48 - state now let's refactor a couple of
395:50 - these for the better with things we can
395:53 - learn about new pseudo classes today so
395:56 - notice here we have a descendant
395:58 - selector and that means we have a nav
396:01 - and then we're selecting any anchor
396:03 - element inside the nav element and then
396:06 - we're applying the state but then when
396:07 - we choose focus besides hover we have to
396:09 - say nav a again well we can stop some of
396:13 - that by using the is pseudo class so if
396:16 - i put is here
396:18 - and then put a parenthesis after it
396:21 - then i can eliminate repeating this nav
396:24 - element here
396:25 - and then just once again say anchor
396:28 - focus so we're just putting the one nav
396:30 - but now we're saying inside of that if
396:32 - it is an anchor with hover or anchor
396:35 - with focus
396:36 - then style accordingly so this should
396:39 - give us the same results and as i mouse
396:41 - over here on our page we see that it
396:43 - still works and we've made our code a
396:46 - little drier and dry is an acronym for
396:48 - do not repeat
396:50 - so we managed to write just a little
396:52 - less code and get the same result by
396:55 - using the is pseudo selector now
396:57 - sometimes we can discover a pseudo
397:00 - selector and again these are pseudo
397:01 - classes i say pseudo selector
397:04 - synonymously but we are making a
397:06 - selection but make no mistake we are
397:08 - using pseudo classes right now
397:10 - sometimes we can discover a pseudo class
397:13 - that will also save us some time and
397:15 - that is the case here besides link and
397:18 - visited where we're styling both let me
397:21 - remove all of this
397:23 - and then i can just put any dash
397:26 - link
397:27 - and the any link pseudo class selects
397:31 - both the link and the visited pseudo
397:33 - class so now when i save we should once
397:36 - again have the same results now this is
397:39 - unvisited or
397:40 - if we click jane now we visited jane and
397:43 - she still has the styling that we expect
397:45 - that we had previously in the project
397:47 - but we have once again made our code
397:49 - just a little drier by learning more
397:52 - about pseudo classes now just for an
397:54 - example i'm going to scroll up where we
397:56 - have our header and footer right here
397:58 - and we're choosing both of those in a
398:01 - list of elements essentially to apply
398:03 - the same styles now i will not make this
398:05 - code drier by applying this but i just
398:07 - want to show the example we could use is
398:10 - here
398:11 - and then list these elements inside
398:14 - and
398:15 - there's really no reason to do it other
398:17 - than this example right now but i do
398:19 - want to show the difference so i'm going
398:21 - to go ahead and save right now this will
398:24 - be the same as what we had before but
398:25 - we've just added this extra code but
398:28 - notice when i mouse over here in visual
398:29 - studio code we get the selector
398:32 - specificity and it is displayed it's 0 0
398:35 - 1 so it's not high specificity we could
398:39 - override it
398:40 - just in this header area here we can
398:42 - overwrite what's on the header or we
398:44 - have a footer area down here just a
398:46 - little bit lower and we could put
398:48 - something there and it would overwrite
398:50 - what we have in here
398:52 - but if we put something else in here
398:54 - like a class and i'll temporarily do
398:56 - this it won't make our project look good
398:58 - but now we have put a class
399:01 - inside the is as well
399:03 - and notice our specificity selector is
399:06 - going to pop up and it's changed instead
399:08 - of 0 0 1
399:10 - now it's a whole level higher it is 0 1
399:12 - 0 so it has higher specificity and now
399:16 - if i were to put a different color here
399:18 - in the header for example so i will go
399:20 - ahead and do that
399:22 - and
399:23 - i'll just give it red so we would
399:24 - definitely notice and save notice the
399:27 - text in our header is still the white
399:30 - smoke color it is not red and that's
399:32 - because this has a higher specificity
399:34 - even though it comes first and it's not
399:37 - down here in the cascade
399:39 - the higher specificity keeps these
399:41 - styles however if i remove
399:44 - this class
399:46 - and it goes back to the lower
399:47 - specificity
399:49 - now it turned red so that's something to
399:51 - note about using is it's going to adopt
399:55 - whatever has the highest specificity
399:57 - within its parentheses now one other
400:00 - thing we can do let me put card back
400:05 - is instead of using is
400:07 - there is another pseudo class that works
400:10 - almost identically and it's where it
400:13 - will accomplish the same thing except
400:16 - it does not have any specificity so
400:18 - notice when i mouse over it the
400:20 - specificity is 0 0 0 or basically a lack
400:24 - thereof it does not have any so you can
400:27 - overwrite whatever is inside the where
400:29 - pseudo class so that's also worth
400:31 - knowing so i just wanted to use this to
400:34 - demonstrate we're not really going to
400:35 - leave these here
400:37 - for your finished code but just remember
400:39 - those tips about the specificity when it
400:42 - comes to is
400:43 - and where pseudo classes now i'm going
400:46 - to scroll down to the card class so we
400:49 - have that right here is the profile card
400:51 - right underneath the card class i'm
400:54 - going to type card once again and then
400:56 - i'm going to give it
400:58 - a target pseudo class
401:01 - inside the target pseudo class i'm going
401:03 - to say border 2 pixels
401:05 - solid and give this rebecca purple
401:08 - and save now let's see what this does
401:11 - you can see jane has a purple border now
401:14 - two pixels solid purple all around her
401:17 - profile card
401:18 - she is the last profile card that we
401:21 - selected here so if i choose joe instead
401:25 - now he has the purple border because he
401:28 - was the target if i scroll back up jane
401:30 - no longer has that purple border so what
401:33 - we're saying with the target pseudo
401:35 - class is whoever is selected whoever is
401:38 - the target
401:39 - of our selection will have that purple
401:42 - border and now matt has that purple
401:44 - border so that could be a useful class
401:46 - if you really want to highlight whatever
401:49 - was selected and if you remember in our
401:51 - html how we're doing that is using the
401:54 - anchor tag but then it is a page link
401:57 - it's not going to a different page it
401:59 - just has the pound sign or the hashtag
402:02 - if you will for profile 1 or profile 2
402:04 - or profile 3 that matches up with the
402:07 - ids
402:08 - of these cards which are in article
402:10 - elements so there is the id of profile 1
402:13 - and then if we come down to the next
402:15 - article profile 2 and so on so these are
402:18 - just on page links with anchors and
402:21 - whoever is the target gets that outline
402:24 - now i'm going to scroll down just a
402:25 - little bit further under the card class
402:28 - once again and then the image element so
402:31 - after that let's add another card
402:34 - and then let's add an image and first
402:37 - let's go ahead and just put in
402:40 - alt now if you haven't seen this yet
402:42 - this means i'm selecting
402:44 - any image with the alt attribute so we
402:48 - can base our selectors on attributes
402:51 - inside this i'm going to once again add
402:53 - a border let's make this really big so
402:55 - 10 pixels
402:56 - solid red and if i save we should see
402:59 - that around all of our images because
403:02 - they do all have alt tags or alt
403:04 - attributes added to their image tag
403:07 - actually is how i should say that so
403:10 - what if we wanted to say
403:11 - just let us know which images we forgot
403:14 - to put an alt attribute on well we can
403:17 - do that with the not pseudo class so
403:20 - after image
403:22 - we'll say not and then wrap the
403:24 - attribute
403:26 - in parentheses so this would actually
403:29 - serve to help us check our page to make
403:31 - sure we've remembered to add alt
403:34 - attributes to each image so now
403:37 - none of the images have the red border
403:40 - because we did provide alt attributes
403:42 - for all of them so let's just go here
403:44 - temporarily
403:45 - to our html
403:47 - and let's remove the alt attribute from
403:50 - one of these images so here we have
403:52 - joe's alt attribute we'll just go ahead
403:54 - and delete and save and now if we look
403:58 - at our page
403:59 - joe has the red border because we forgot
404:02 - to put an alt attribute there for him
404:04 - now i'm going of course fix that with
404:06 - ctrl z
404:07 - put that back and save and that fixes
404:10 - our page but that could be very useful
404:13 - and you could use not the pseudo class
404:15 - not for other things as well remember
404:17 - it's going to select whatever does not
404:20 - have what you specify and now let's look
404:22 - at the nth child selector which we have
404:26 - used a little bit in previous tutorials
404:28 - so we'll say card and then no space
404:30 - we'll say nth dash
404:32 - child now this can be confusing and it's
404:35 - somewhat because of the way it's worded
404:37 - you would think we were looking for the
404:39 - child
404:40 - of the card class but that's not really
404:42 - true
404:43 - we're going to be selecting the cards
404:45 - themselves so if we say nth child and
404:49 - the second one we would be selecting the
404:52 - second profile card so now let's go
404:54 - ahead and change the background color so
404:57 - we can really see which card we've
404:58 - selected and i'll say papaya whip
405:02 - and we'll save
405:04 - and
405:05 - here's the thing to consider now we've
405:06 - got matt
405:08 - selected but he's the last profile card
405:11 - and we said we wanted the second but if
405:14 - you remember from the previous lesson
405:16 - we've used media queries to rearrange
405:18 - the order of our cards however if we
405:21 - look back at the html
405:23 - matt truly is the second card in our
405:27 - html so this nth child selector is going
405:30 - to be based on the actual original order
405:34 - within the html and maybe not what we
405:37 - see on the page if we have reordered
405:40 - the order that was in the html with
405:43 - media queries or even without media
405:46 - queries we could go ahead and reorder
405:48 - them if we wanted to but the nth child
405:50 - will not be based on that now we could
405:53 - put in other selectors here too so let's
405:55 - put in odd and save
405:58 - and now notice
406:00 - matt was the second child
406:02 - so the first and the third are odd and
406:04 - that would be jane and joe
406:07 - likewise we could put in even instead
406:10 - and it will probably select matt once
406:12 - again and not select jane and joe
406:14 - because matt is the second which is even
406:17 - and of course joe and jane first and
406:19 - third are odd so i think you get the
406:22 - idea for pseudo classes so now let's
406:24 - move on to some pseudo elements that we
406:27 - can add right underneath the card class
406:30 - and the fig caption element
406:32 - and this would be a descendant selector
406:33 - so we've got the card class and the
406:35 - descendants are any fig captions within
406:37 - the card class so now after that let's
406:40 - specify
406:42 - card and fig caption once again
406:46 - but now we'll use two colons
406:48 - and then let's say after
406:51 - and what we'll do after is create a
406:53 - pseudo element that will have content
406:56 - and then we can specify what content
406:58 - goes inside let's just put hello to
406:59 - start with
407:01 - and after that well i'll just leave it
407:03 - at that to begin with here i need to get
407:05 - rid of that extra quote there we go and
407:07 - save and now let's look at our page so
407:10 - now we've got jane devrell hello it says
407:13 - hello right at the end
407:14 - after joe's last name coder hello is
407:17 - immediately after so maybe we should put
407:19 - a space and we could highlight that and
407:21 - now we'll see the hello at the end of
407:23 - each last name a little easier but it
407:25 - was added to each one of the fig
407:27 - captions now we could notice something
407:30 - else about this too i can select all
407:32 - that text but i can't select the text
407:34 - that here that is our pseudo element
407:37 - content again it's not really an element
407:40 - it was just added in
407:42 - with this after pseudo element selector
407:44 - so now instead of hello i want to go
407:46 - ahead and remove that and i'm going to
407:48 - put in an emoji just some sparkles here
407:51 - and then
407:52 - i'll put display and block so this will
407:55 - be on its own line and save and now
407:58 - we've got an emoji following each name
408:00 - on each of our profile cards and
408:02 - likewise i could switch this to before
408:05 - and what it would normally be on the
408:07 - left side or before their first name but
408:09 - now because it's a block display
408:12 - it's above each name so i'm going to
408:14 - scroll for a little more room and let's
408:16 - add some more new content here for our
408:18 - fig caption as well actually for our
408:20 - paragraph now so let's say card
408:23 - and then the paragraph
408:25 - and we'll select the before sudo element
408:28 - and for content here we can type a
408:31 - specific value say open dash quote
408:35 - and now if i save this
408:38 - we will get a double quote added to the
408:41 - left as we see here it's actually
408:43 - probably a single quote that's added
408:45 - after our other single quote but we can
408:47 - also add a close quote so i'm just going
408:50 - to
408:51 - copy this down with shift alt and the
408:53 - down arrow
408:54 - and i'll switch this to an after
408:59 - and instead of open quote we'll have
409:02 - close quote
409:04 - and save and now they've turned into
409:06 - double quotes and they're wrapping
409:08 - around the single quotes that we already
409:10 - had but we've added quotes here without
409:13 - having that quote element that we were
409:16 - relying on here inside of our html
409:18 - notice inside of each paragraph we have
409:20 - the q element which is a quote that we
409:23 - were using for quotes so we could remove
409:25 - those because one handy thing here is we
409:28 - can style these however we want to so
409:31 - let's look at an example of that we
409:33 - could say font dash size i'll put it 3
409:36 - em so that's going to rely on whatever
409:39 - the font size is of the paragraph
409:42 - element to get the em size
409:44 - and then let's say position
409:48 - absolute if you remember when we learned
409:50 - about positions
409:52 - we'll say top and we can make this a
409:54 - minus so minus
409:55 - 0.25 em
409:58 - and then left minus 0.5 en
410:02 - now something else to remember about
410:04 - position absolute it always needs its
410:07 - parent to have position relative so here
410:10 - we need to select the paragraph
410:12 - itself and give it position
410:16 - relative
410:17 - we can save that and notice our quote on
410:20 - the left got a lot larger so we were
410:22 - able to really style this quote
410:24 - separately
410:25 - from the rest of the paragraph now let's
410:28 - do something similar for the after quote
410:30 - so once again
410:32 - give it a font size of 3 em
410:36 - position
410:37 - absolute
410:39 - give it the same top as well so that
410:42 - would be minus 0.25 em
410:45 - but now we'll say right
410:47 - minus 0.5 em and save and now we have
410:51 - matching closing quotes on the right
410:53 - again we're adding these as pseudo
410:56 - elements so let's go back to our html
410:58 - quickly and remove those other quotes
411:00 - that we had so that would be
411:02 - the q element i'll highlight that press
411:04 - ctrl d twice to get the other two
411:07 - hit backspace and now i'll select the
411:10 - closing queue
411:12 - ctrl d twice to get the other two
411:14 - backspace and save so we remove those
411:17 - other quotes that we had and now we have
411:19 - our big quotes in place of those and we
411:22 - can see they've applied to each one of
411:24 - the profile cards with our pseudo
411:26 - elements just a couple of more pseudo
411:29 - elements to look at before we're
411:30 - finished so for the fig caption let's
411:32 - once again
411:34 - say card and then fig
411:37 - caption
411:38 - two colons and now let's say first dash
411:42 - letter
411:43 - and here inside of this we'll say font
411:45 - dash size
411:47 - once again go to
411:48 - three let's say rem here because we're
411:51 - applying it directly to that letter and
411:53 - we should get a larger letter to start
411:56 - out with but we don't
411:58 - and why don't we that's because
412:02 - this got larger itself let me go ahead
412:04 - and comment that out and save and now
412:07 - notice our emoji is back to a smaller
412:10 - size so this first letter actually
412:12 - applied
412:13 - to the emoji so let me uncomment that
412:15 - and save and you'll see the emoji get
412:17 - larger again so what happens if we put
412:20 - this
412:21 - after instead of before
412:23 - now the first letter of each name got
412:26 - larger so that's something to consider
412:28 - too if you use the first letter pseudo
412:32 - element it's going to apply
412:34 - to the before pseudo element
412:37 - if the before pseudo element exists now
412:40 - instead of just the first letter you
412:42 - could also choose first line if i
412:45 - remember correctly and yes we just made
412:47 - the whole name larger by choosing the
412:50 - first line
412:52 - let's move on to css variables
412:54 - css variables are very very useful
412:58 - imagine a large project if you will and
413:00 - we have a hexadecimal color code as you
413:03 - see here for our body element and i've
413:05 - had to use this code twice just inside
413:08 - of this body element but imagine in a
413:10 - large project where we have had to apply
413:13 - this color code many times throughout
413:16 - the project and then our boss says he
413:19 - wants to change that color in the
413:20 - project we would need to go through and
413:22 - find every instance of this hexadecimal
413:26 - code and change it but when we use css
413:28 - variables we would only need to change
413:31 - this hexadecimal code in one place and
413:34 - that's what makes them so useful let's
413:36 - see how this is accomplished you can see
413:38 - we just have a basic page here with a
413:41 - header nav main area and a footer and
413:44 - we're going to refactor some of this
413:46 - using css variables so let's start out
413:50 - by putting in a comment for our
413:51 - variables so i'm just going to copy this
413:54 - reset comment
413:55 - and right underneath it i'll paste it
413:59 - and change this text
414:01 - to variables
414:02 - and now we're going to put our variables
414:04 - inside of a pseudo class that you may
414:07 - not have seen yet and that is the root
414:09 - pseudo class
414:11 - everything inherits from that that is
414:14 - referencing the document root so the
414:17 - html tag would even inherit from this
414:20 - root pseudo class so we put it at the
414:22 - top and now we can define variables
414:25 - inside that will apply everywhere in the
414:27 - project we're going to start out with
414:29 - color because if you do not use
414:31 - variables for anything else in css it
414:34 - makes much sense to use them for colors
414:38 - now we start out by naming a variable
414:40 - and they all start with two hyphens or
414:43 - two dashes if you will now you can name
414:45 - them in upper or lower case i prefer
414:48 - uppercase
414:49 - i am a developer and overall we usually
414:54 - name
414:55 - static values in javascript and other
414:58 - programming languages
414:59 - with uppercase they're referred to as
415:01 - constants so i kind of like to see them
415:04 - in uppercase and that tells me as a
415:06 - developer the definition for this
415:08 - variable is probably near the top of the
415:11 - file as a constant and so that's how i
415:14 - remember it you do not have to do it
415:16 - that way but i'm going to use
415:18 - all uppercase today for these variable
415:20 - names so for our background color let's
415:23 - just pull what we have inside of our
415:26 - project already we have this hexadecimal
415:28 - code i will copy
415:30 - and then i'll put in
415:31 - the hashtag and put in the code
415:34 - and now we have created a variable for
415:37 - the background color now to apply this
415:40 - in the rest of our css instead of the
415:43 - code here
415:44 - we're going to use a small function
415:46 - that's available in css called var and
415:49 - then parentheses
415:51 - and then we put in
415:52 - our variable name
415:54 - and it's as simple as that now we will
415:57 - still have that background color and we
415:59 - can copy this
416:01 - and we can also use it here or anywhere
416:04 - else in the page that we're using that
416:06 - color code and once we save
416:09 - i'm going to go ahead and go live i did
416:11 - not have live server serving this page
416:13 - so we should see it again and now it
416:16 - looks the same because we applied this
416:18 - variable you will see if i remove this
416:21 - ctrl x just to cut it out temporarily
416:24 - and i guess i didn't change our
416:26 - background color here i should remove
416:28 - because that is the fallback so let me
416:30 - switch this to
416:32 - black just quickly and now i'll go ahead
416:35 - and remove this
416:38 - and apply and we can see it's black and
416:40 - that's all i wanted to show you was that
416:41 - the variable is applying and so we're
416:44 - using the background color actually as a
416:46 - fallback to this background image
416:48 - statement that's using a radial gradient
416:51 - but we want both there so i'm going to
416:53 - replace black once again with our
416:55 - variable
416:56 - and save and that's how we're applying
416:58 - now the background color saved in this
417:00 - variable okay now let's do the next one
417:03 - so i'm going to name this
417:06 - alt
417:07 - once again capitals here alt
417:09 - bg color
417:11 - and now let's find our alt bg color
417:13 - where we had a little darker color down
417:16 - here and here it is our background color
417:18 - for the header and the footer
417:21 - so i can go ahead and control x to just
417:24 - cut that out notice it doesn't take the
417:26 - hashtag so we'll have to put that back
417:29 - but now i'll put the hashtag
417:31 - the color code and now we have our alt
417:33 - background color so we can just copy
417:36 - this variable
417:37 - and we can scroll down to where that was
417:40 - for the header and the footer i believe
417:43 - there it is
417:44 - and we'll put in
417:46 - of course it needs to be in the var
417:49 - function and put parentheses around it
417:53 - and save and we still have that same
417:56 - background color now notice we're using
417:58 - white smoke in more than one place and
418:00 - then we used white down here but white
418:02 - smoke would also be sufficient so if we
418:04 - wanted to go ahead and replace this
418:06 - with white smoke it will still look
418:08 - about the same and it does
418:10 - so now we should create a variable for
418:12 - the white smoke as well but we're using
418:15 - it in two different spots we're also
418:17 - using it as a radial so if we want to
418:20 - remember that it's okay to go ahead and
418:23 - create two variables that have the same
418:25 - value and that's what i'm going to do
418:27 - right now so i'll have a radial color so
418:30 - anywhere in my project that i will use a
418:32 - radial gradient
418:33 - i might want to use this white smoke but
418:36 - then i'm also just going to have a
418:39 - light color for parts of the page
418:42 - and i'll use white smoke there too but
418:44 - it would be weird if i put radial color
418:47 - in another part of the page i might be
418:49 - able to get away with putting light
418:51 - color in as part of that radial gradient
418:55 - but i just wanted to show this example
418:57 - that you could use two variables and
419:00 - they could have the same value and it's
419:02 - okay to do that so let's go ahead and
419:04 - copy this radial color variable first
419:10 - and actually before copying that i want
419:12 - to show you something else about using a
419:14 - var function
419:16 - and how we can type this out and how
419:18 - visual visual studio code will help you
419:20 - so now we have our var with the
419:22 - parentheses if i start to type the two
419:24 - hyphens notice vs code gives me a list
419:28 - of the variables that we've created
419:30 - already so that's very handy and it even
419:33 - gives you their values over here to the
419:34 - right i'm just going to choose radial
419:36 - color and use it in my radial gradient
419:39 - and once again nothing is changing so if
419:41 - we're making the conversions right and
419:43 - refactoring our page we shouldn't see
419:45 - changes it should continue to remain as
419:47 - it is over here
419:49 - now let's go ahead and replace
419:51 - any area that has white smoke and i can
419:54 - press ctrl f and just search for white
419:56 - smoke
419:58 - and it says there's three or four three
420:00 - of 4 so we have 4 actual instances so
420:03 - now
420:04 - i'm going to say
420:06 - var
420:07 - parentheses dash dash and choose
420:10 - light color
420:12 - and that will also be our white smoke
420:14 - value so now i can select white smoke
420:18 - press ctrl d
420:20 - to select the other instances but notice
420:22 - two of the instances are
420:25 - the value that we have
420:27 - in our variables so we don't want to
420:29 - replace those so let's just find the one
420:31 - that we do want to replace which is the
420:33 - background for the nav
420:36 - and now paste that in and save our
420:38 - project continues to look good and now
420:40 - you can see we're also using the color
420:42 - black here for text in the nav for the
420:45 - bottom border for the nav and maybe in
420:49 - other places in the project as well so
420:51 - let's go ahead and create one more
420:53 - variable and that will just be our dark
420:55 - color for the our color theme
420:59 - and that's what i'll name it and here
421:01 - we'll just put in the hexadecimal code
421:03 - for black
421:05 - and now that we have that we can find
421:07 - other places that are using that code
421:10 - and replace it
421:11 - so we'll once again do control f
421:14 - i'll paste in that value and it says two
421:17 - of three so these are the only two
421:19 - actually the third one would be our
421:21 - variable above
421:23 - so we need that then type far now dash
421:26 - dash and it is our dark color
421:30 - now i'll copy this and simply replace
421:33 - the code down here with that
421:36 - and we have replaced it as well now
421:38 - notice for the border we still have two
421:40 - pixels solid and then we're just
421:42 - providing the var for the color value we
421:44 - can also use css variables for far more
421:47 - than just colors so let's scroll back up
421:49 - to the top
421:50 - and look in our body element and we see
421:53 - a font
421:54 - property here first and this is a
421:57 - shorthand because we're supplying not
421:59 - only the font size but we're also
422:01 - supplying the font family so let's
422:03 - define a couple of variables and we can
422:06 - use both in the same definition here so
422:09 - as we come up to the top again inside of
422:11 - our root i'm going to put slash and here
422:14 - i'm going to put
422:16 - font
422:17 - for our comment and now for the first
422:19 - variable i'll do two dashes and ff for
422:22 - font family
422:24 - and then we can just copy the value we
422:26 - have here
422:27 - which is nunito with the fallback sans
422:30 - serif
422:32 - so i copy that i'll bring it up to our
422:33 - variable
422:35 - and we've added that now i'll do two
422:36 - more dashes and in fs or capital fs for
422:41 - font size and here i'll put 1.5
422:45 - rim and then in case we want a larger
422:48 - font size somewhere i'm going to put in
422:50 - an fs
422:52 - dash xl for an extra large font that we
422:56 - may use somewhere later and i can put
422:58 - three rim for it
423:00 - and save and now we've defined our font
423:03 - family font size and font size extra
423:06 - large so let's put the font family and
423:08 - font size to work right away and we can
423:11 - do that here so we'll put a
423:14 - var variable or a var function actually
423:17 - and now we can pull our variable from
423:19 - our list and this is font size
423:22 - then we'll highlight the font family
423:25 - put another var
423:28 - two dashes and we'll highlight the font
423:30 - family variable there and save and it
423:33 - should look the same now as you may be
423:35 - gathering we're not limited as to what
423:37 - we can put in these variables so it's
423:40 - not limited to the font or the color we
423:42 - can also use it for other things let's
423:44 - quickly scroll down and take a look at
423:47 - our nav area here you can see we have
423:49 - the light color the dark color
423:52 - and the dark color again used as a
423:53 - border but then we have a padding here
423:56 - of 0.5 rim and we could possibly also
424:00 - add a property or two here so let's
424:02 - start with the padding and let's define
424:05 - that above as a general style because we
424:07 - could give this padding to other parts
424:09 - of the page as well in a project
424:12 - so i'll just put general here
424:15 - and then we'll do two dashes
424:18 - new padding
424:19 - and we'll put in our 0.5
424:22 - ram
424:23 - lowercase rim there we go
424:25 - save that quickly scroll down to the nav
424:28 - and apply that as well so instead of the
424:31 - 0.5 here we'll be using a var
424:33 - parentheses two dashes
424:35 - choose padding from the list
424:38 - that's good now what if we wanted to
424:40 - apply a shadow so let's look at how to
424:43 - apply a shadow we'll use a box
424:47 - shadow property
424:49 - and here we're looking at an x offset
424:52 - for the first value which i'll put in a
424:54 - 0
424:55 - a y offset for the second value i'm
424:58 - going to put in 6 pixels for that
425:01 - and then there is a blur value which
425:03 - i'll put in 5 pixels
425:05 - and then there is a spread value and i'm
425:08 - going to put in minus 5 pixels here and
425:11 - what this does is essentially creates a
425:14 - shadow right underneath you could
425:16 - provide an x and y and have the shadow
425:19 - off to the right and underneath or
425:22 - coming from another direction if you're
425:23 - picturing the sun overhead essentially
425:26 - that's what this shadow is going to
425:27 - create because it should come straight
425:29 - down
425:30 - okay after supplying that then we also
425:33 - need to have a color and we already have
425:36 - a dark color so let's put in the var and
425:39 - dash dash
425:40 - dark dash color
425:44 - and save and if we look at our nav now
425:46 - it has a nice little shadow right
425:49 - underneath the bottom line i could try
425:51 - to make this bigger so it stands out let
425:53 - me put it like 15 pixels
425:55 - and there we see the big shadow
425:57 - underneath but that's not what we want
425:59 - we want just a subtle shadow and we can
426:01 - save that but what if we wanted to use
426:04 - this shadow in other parts of the
426:06 - project also so maybe we should just
426:09 - highlight
426:10 - that or we could highlight all of this
426:13 - and that's what i'm going to do and i'll
426:15 - copy that
426:16 - and then bring it up here under our
426:18 - general styles that we have for our
426:21 - variables not the general styles
426:22 - underneath
426:23 - and here i'll put
426:27 - shadows because it would look kind of
426:30 - strange to have the shadows coming from
426:32 - different directions as if there was
426:34 - more than one sun looking at your
426:36 - project so having the shadows fall all
426:38 - in the same direction makes sense
426:40 - and then
426:41 - we can define shadows using
426:45 - another variable and that's okay we've
426:47 - defined this variable above it and it
426:49 - knows what it is and there we're putting
426:51 - it in and this definition is completely
426:54 - legitimate so we'll save that and then
426:57 - we'll scroll back down to our nav and
427:00 - just bring in our shadows variable for
427:02 - the whole thing so i'm going to delete
427:04 - that much
427:05 - and then change what we have here
427:08 - to our shadows variable
427:11 - and save and the shadow still applies
427:14 - now we could use this same concept for
427:16 - our borders as well so this is a border
427:19 - bottom
427:20 - but we've also just defined borders
427:22 - before and it uses the same structure so
427:24 - let's just take this value which is two
427:26 - pixels solid in the dark color copy that
427:31 - and create a borders variable above as
427:33 - well
427:34 - just underneath shadows
427:38 - and i want all caps again
427:40 - and then we'll put in that value and it
427:43 - uses the dark color variable
427:45 - we can save that and then come back down
427:48 - once again to the nav and where we have
427:50 - the borders
427:52 - we'll just put in that value and it will
427:55 - only apply to the border bottom as we
427:57 - define it here so here's our borders and
427:59 - save now let's move to the html file i'm
428:02 - going to close our find window as well
428:05 - it's time to add some extra content to
428:07 - our main area of the page so i'm going
428:09 - to scroll down to the main area
428:11 - highlight the h2 we have hit backspace
428:14 - to remove that and i want to put in 12
428:17 - divs so i'm going to type div i want
428:20 - lower case here div and then dot and i'm
428:23 - going to name the class that applies to
428:25 - all 12 divs square
428:28 - so now we have div dot square and then
428:31 - with an emmet abbreviation i can type
428:33 - times 12 and press tab and instantly
428:37 - have 12 divs
428:39 - now that i have that i have no content
428:41 - inside the divs so i'm going to select
428:45 - the last one which is just the closing
428:48 - tag
428:49 - for the div and then we can go to i
428:51 - believe the edit menu
428:53 - and let's find no it might be the
428:56 - selection menu there it is and let's
428:58 - find select all occurrences and that is
429:02 - control shift and l control d selects
429:05 - the next occurrence but the combination
429:08 - of control shift and l will select all
429:11 - or you can just select it here from the
429:13 - selection menu so now we've selected all
429:16 - of those
429:17 - and i'm going to press the left arrow
429:19 - key to go to the beginning and i'm going
429:21 - to paste in an emoji i have of a laptop
429:25 - and i want that in the last
429:28 - well i guess the last 11 number 2
429:30 - through 12. the very first one i'm going
429:33 - to put in a paragraph and just put the
429:35 - word hey in so we see something
429:37 - different and if we save that you can
429:40 - see we have hey and then 11 laptops
429:44 - after that i'm going to come down to
429:45 - let's say the eighth one right about
429:48 - here and i'm also going to put in
429:51 - square dash dash
429:53 - not important let's do
429:56 - highlight because we just might want to
429:58 - apply another class to one of these divs
430:01 - and you can see i have my code wrapping
430:03 - so this line wraps down to the next line
430:06 - but that is the change we are making to
430:08 - the html we'll make all other changes
430:10 - now back in the css i'm going to scroll
430:13 - up just a little bit if you'll notice
430:15 - the header nav main and footer all have
430:18 - these values and the display is grid i
430:21 - no longer want that for the main element
430:24 - so i'm going to remove the main element
430:26 - from that and save and you can see our
430:29 - content is now stacked on top of each
430:31 - other as divs or block elements one on
430:34 - top of each other on the far left so now
430:37 - let's move down to the main area and
430:39 - apply some more styles here
430:41 - right now main is just a flex item in
430:45 - the larger
430:46 - flex container that is the body element
430:49 - but we're going to make it a flex
430:52 - display as well or i should say display
430:55 - flex
430:56 - after that let's justify the content and
431:00 - space dash evenly
431:03 - and then after that we can align
431:06 - items and we'll align the items to the
431:08 - center if we save we have definitely
431:11 - seen our flex items inside the main now
431:14 - change
431:15 - let's change flex dash flow
431:18 - to row
431:19 - and then wrap if it needs to
431:22 - now let's add a gap and i'm going to use
431:25 - the min function here that will pick the
431:27 - smaller of whichever of these values so
431:30 - i'll say
431:31 - 4 viewport units or 15 pixels so
431:35 - whichever would be smaller it will use
431:37 - for the gap and remember gap is
431:39 - shorthand for row gap and column gap as
431:43 - well okay now let's put a padding value
431:45 - and i'll put it up here above
431:47 - and i'll just say padding
431:49 - and i want 10 pixels on the top and
431:51 - bottom but 0 on the left and right and
431:54 - this is different than the padding
431:55 - variable we applied you could have other
431:57 - parts of your project that have
431:59 - different padding but if you know
432:01 - there's a value you will reuse more than
432:04 - once then it's also a good time to
432:06 - declare a variable for that okay now
432:08 - that we've defined those things for the
432:10 - main we won't see a huge change here
432:12 - because we haven't defined our class for
432:16 - the square yet now what we have done
432:18 - previously is take the code that i had
432:21 - and extract those values
432:23 - into variables and i often do that when
432:26 - i'm designing something however now i
432:28 - know what variables i want to use so i'm
432:30 - just going to write them at the top for
432:32 - the square and then we will come down
432:35 - and define the class for the square but
432:37 - just know this is a little backwards
432:39 - typically i would probably define them
432:42 - first and then extract them like we
432:45 - previously did for these other variables
432:48 - okay for the square we have a couple of
432:50 - variables to create and the first one is
432:53 - going to be dash dash
432:55 - square we'll start all of them out with
432:57 - that and let's do the background
432:59 - color here i'm going to choose papaya
433:03 - whip
433:04 - and that's kind of a cool name for a
433:06 - color after that we will go with
433:09 - square once again
433:11 - and then
433:12 - dash not a space just a dash and size
433:15 - now we're going to have the same height
433:17 - and width when we create a square i'm
433:20 - going to use the max function now and
433:21 - this will pick the larger of these two
433:23 - values either 150 pixels
433:27 - or 20 viewport units so it will continue
433:30 - to grow as the page window gets bigger
433:33 - okay with our variables now defined i
433:35 - want to come down to the class
433:37 - and let me highlight an area here we had
433:40 - general styles i'll take this comment as
433:43 - well
433:43 - so we can comment before we begin the
433:45 - square and if there were other features
433:48 - for our app this is the area that i
433:49 - would put them and i might say features
433:52 - right here you also might comment each
433:54 - individual feature if you wanted to i'll
433:57 - just say features for now and we'll put
433:59 - in our square class so we'll start out
434:02 - with a background dash color
434:05 - here we can use our var
434:07 - two dashes and we want to pick square
434:10 - background color
434:12 - after that we're going to have a width
434:14 - and that would be a var
434:16 - two dashes and it looks like we have
434:18 - enough variables now we need to scroll
434:20 - which is okay we'll choose
434:22 - square size now i'm going to do shift
434:24 - alt and the down arrow because we want
434:27 - the same value
434:28 - for the height of the squares as well
434:31 - okay after the width and the height
434:34 - let's create a border we've already got
434:36 - a variable for that so we'll stick with
434:38 - the same border that we had previously
434:41 - defined
434:42 - and after that border we want a border
434:45 - dash radius here we have not defined
434:47 - anything so we'll just go with 15 pixels
434:50 - then let's use a display of grid
434:54 - and let's place that content in the
434:57 - center so this will center our content
434:59 - let's save what we have so far
435:02 - well that's a big difference so now we
435:04 - have our squares we have the content in
435:06 - each one centered and we have a
435:08 - different color background as well just
435:10 - a couple more properties now for the
435:12 - square so let's define a font dash size
435:17 - use our var again
435:18 - and now we defined an extra large font
435:21 - size let's use that and when we save our
435:24 - emojis get larger and so does the text
435:27 - okay let's apply a box shadow here too i
435:30 - need lowercase there we go box shadow
435:32 - and let's once again use a variable we
435:35 - created for shadows
435:37 - there it is and if we save we'll get a
435:39 - little shadow under each square also now
435:42 - if you remember inside of our html we
435:45 - also added this square highlight class
435:47 - so let's go ahead and create it also
435:50 - and underneath our features i'll type
435:53 - square dash dash
435:55 - highlight again in lowercase
435:57 - and now i want to show an example of
436:00 - when you might redefine a variable so
436:04 - we want to apply this square background
436:08 - color and imagine we had all of these
436:10 - squares
436:11 - and now we just want to overwrite one
436:14 - rather than having to go in and change
436:16 - different things about our definition
436:19 - for square
436:20 - so this will only apply to the class
436:23 - square highlight and we can change the
436:26 - value
436:27 - of this variable so let's choose
436:30 - background color once again and let's
436:32 - make this corn flower
436:34 - blue
436:35 - that is an interesting name as well when
436:37 - we save
436:38 - this only applies to the one square we
436:42 - added the square highlight class to but
436:44 - we have redefined this variable
436:47 - for that class now let's add a feature
436:50 - that css variables makes very easy to do
436:54 - and it's in high demand let's add a dark
436:57 - mode
436:58 - in addition to our light mode that we
437:01 - have here so to add a dark mode we're
437:04 - just going to define a separate color
437:07 - theme but we're going to do it inside of
437:10 - a media query so just underneath our
437:13 - styles we can put this media query
437:15 - towards the top so we'll say at media
437:19 - and then parentheses we have prefers
437:22 - dash color dash
437:25 - scheme
437:26 - and then we'll say
437:28 - dark
437:29 - and then inside of this media query
437:32 - let's put our pseudo class once again
437:35 - and now we can define our dark mode
437:38 - inside of this class so for
437:40 - the bg color and notice we're using the
437:44 - same variable names that we did here so
437:47 - we don't have to go and change those
437:49 - anywhere else in our code so we're just
437:51 - redefining these variables
437:54 - we'll put black for the background color
437:57 - then for the alt dash bg color
438:01 - let's put a flat black
438:03 - and then for the
438:05 - radial color
438:08 - we'll go ahead and put in kind of a gray
438:11 - let's see if we can lighten this up any
438:14 - i don't know if it will take the caps
438:15 - yep it will so let's try to lighten up
438:18 - the gray just a little bit but we still
438:20 - want a gray color
438:24 - something like that so we'll just go
438:26 - with that for now and we'll see how it
438:28 - looks
438:29 - after that let's put in
438:31 - the square
438:33 - background color
438:34 - and here let's go with more like a
438:37 - purple and then we'll try to lighten it
438:39 - up
438:40 - so after we get the purple
438:42 - let's come over here towards the light
438:45 - and something in that range and i'm just
438:48 - kind of guessing but we'll see what we
438:49 - get so when we save
438:52 - it switches to the dark mode and that's
438:54 - because i prefer the dark mode and have
438:57 - my system set that way and i'll show you
438:59 - how to do that now if you do not prefer
439:02 - the dark mode this won't go into effect
439:05 - so if i just put prefers light here just
439:08 - some other value it doesn't really
439:10 - matter i could put prefers dave for all
439:12 - that
439:13 - for the anything else that would change
439:16 - essentially it's going to ignore what's
439:18 - inside of here so
439:19 - prefers light and we're back to this
439:22 - because
439:23 - we prefer the dark mode and
439:25 - we're already using the opposite of that
439:28 - so again like i said i could put my name
439:30 - here it doesn't make a difference but if
439:32 - we put prefers dark
439:36 - then it does switch to this dark mode so
439:39 - now just to show you let's look inside
439:42 - i'm on windows let's look inside of the
439:44 - settings i right click on the desktop
439:46 - and choose personalize
439:48 - and then i go to colors and it says
439:50 - choose your color so if i actually did
439:53 - prefer light mode
439:55 - then the dark doesn't apply and you can
439:57 - see how it even changes my window here
440:00 - but i am going to set it back to dark
440:02 - and our web page responds so that is how
440:05 - you set up a custom dark mode
440:08 - with your css as well so you've got your
440:11 - app media prefers color scheme and dark
440:14 - and then just define your dark mode
440:15 - theme inside of here by overriding the
440:19 - other color
440:20 - variable values that you've already
440:22 - defined
440:23 - today we're going to look at css
440:25 - functions
440:27 - our starter code is much like the ending
440:30 - code for the last lesson however let's
440:32 - quickly look at the html and as you can
440:34 - see our page over here on the right i
440:36 - have added an h2 heading a paragraph
440:41 - and then a link inside of a section
440:44 - element that is inside of the main
440:47 - element and i have commented out the
440:49 - divs we previously had in the last
440:51 - lesson but we will come back to those so
440:53 - i wanted to leave those in our css
440:56 - remains the same from the last lesson
440:58 - and we can look at some functions we
441:01 - have already used in previous lessons if
441:04 - we just scroll down there are color
441:06 - functions and we can see here inside of
441:09 - our prefers color scheme this is one
441:11 - change i've already made because i
441:13 - wanted the light theme to show up but if
441:15 - you remember if we put dark here i need
441:18 - lowercase or prefer lowercase if i save
441:21 - i get dark mode because my system
441:23 - preferences
441:24 - are for dark mode but you can switch
441:26 - this to light
441:27 - and then this dark mode will not apply
441:30 - so let's look at this we've got rgb
441:32 - which is a function and if i were to
441:35 - click here inside the color for vs code
441:38 - and then we click the bar at the top as
441:40 - we've learned about colors we can see
441:42 - other values in hsl it has parentheses
441:45 - as well and a value or values inside
441:48 - that's also a function hwb is a function
441:52 - so these are color functions and that's
441:54 - what you see here we've also used image
441:57 - functions and if i scroll down just a
441:59 - little further and we get to the body or
442:02 - the main element we should have
442:04 - something yep there in the body we've
442:06 - got a radial gradient function and as
442:09 - we've learned in the past we can also
442:11 - use linear gradient but those are
442:13 - functions they have the term radial
442:16 - gradient or linear gradient and then
442:18 - parentheses and then something is passed
442:21 - inside some value and then as we see
442:23 - here we're also using a reference
442:25 - function which is var and we learned
442:28 - about var just in the previous lesson as
442:31 - we're using css variables so we use var
442:34 - and put the variable inside to get the
442:36 - value from that variable another
442:38 - reference function we learned in the
442:40 - past when we were working with images
442:42 - was url with parentheses and that's how
442:45 - we loaded images into a background image
442:47 - spot and there are many useful css
442:50 - functions so many that i can't cover
442:52 - them all but i will put a link in the
442:54 - description and the resources to the mdn
442:56 - page that does list all of the css
442:59 - functions today i want to cover some
443:01 - that i think you will use often or
443:03 - frequently
443:04 - and a few of those are math functions
443:07 - and we've used some of those too but i
443:08 - want to dive just a little bit deeper so
443:11 - let's scroll back up to where we have
443:13 - defined our font size right now it's
443:15 - currently 1.5 rim which one ram would be
443:19 - 16 pixels so 1.5 is currently 24 pixels
443:24 - if we were to select our paragraph here
443:26 - and look at what was applied inside of
443:28 - dev tools we would be able to see that
443:31 - but now let's talk about the min
443:33 - function first so instead of 1.5 we can
443:36 - type min
443:37 - and then let's put something like 2.25
443:41 - rim
443:42 - and then we'll put 3 vh which is
443:45 - viewport units but it's also
443:47 - specifically referencing the height not
443:50 - the width and that is very useful when
443:52 - you're working with fonts now let's talk
443:54 - about what this min function does it's
443:57 - always going to select the smallest of
443:59 - the two available and notice one of
444:01 - these is an absolute value so it
444:04 - wouldn't make sense to put in 2.75
444:08 - ram or something like that here for the
444:09 - second value because it would then
444:11 - always select the smallest so we've put
444:14 - in one absolute value and one value that
444:16 - will change based on the height of the
444:20 - page so let's save this
444:22 - and then we don't see a whole lot
444:24 - changing here right now but we will when
444:27 - we look at the height of the page so i
444:29 - will bring this over to take up the full
444:31 - page
444:32 - and then let's inspect to open the dev
444:35 - tools you could also do control shift
444:37 - and the letter i whichever you prefer
444:39 - then i'm going to choose the computed
444:41 - tab here inside of devtools and we'll
444:43 - scroll till we see the font size and
444:47 - that should be coming up here shortly
444:49 - there it is 36 pixels so that is 2.5 rim
444:54 - which we set
444:55 - as one of the values and remember it
444:58 - will always choose the smallest of the
445:00 - two the second value was three viewport
445:03 - units of height so if we start to shrink
445:06 - the page we'll notice our font is
445:09 - shrinking now let's look at the font
445:11 - size again and i'll have to scroll but
445:13 - it's 28.632
445:16 - you can always tell it's being
445:17 - calculated when you get a decimal
445:19 - afterwards because we're not usually
445:21 - going to enter that in ourselves so the
445:23 - font size is changing now the three
445:26 - viewport units of height are smaller
445:29 - than the 2.5 rims so it's choosing that
445:32 - instead but then what we should consider
445:35 - is the absolute value is actually a
445:38 - maximum it will never get larger
445:41 - than that 2.5 rim so if we scroll back
445:45 - at some point it should stop growing and
445:46 - we noticed it stopped growing now
445:49 - if we come back to 2.5 rim we have 36
445:52 - pixels and i said 2.5 ram i believe this
445:55 - is actually
445:57 - 2.25 rim which would be 2 2 rim would be
446:01 - 32 pixels and then 0.25 would be another
446:04 - 4 for 36. let's look back at our code
446:07 - when i close devtools pull this over and
446:09 - we can verify yes 2.25 rim and then
446:13 - three
446:14 - viewport units of height i'm going to
446:16 - quickly scroll down to the main element
446:18 - because having this centered is just
446:20 - bothering me a little bit so i'll scroll
446:22 - down and make some changes here so we
446:25 - won't keep what we have right here let's
446:28 - comment all of this out that we were
446:30 - using previously in the last lesson with
446:32 - those divs
446:33 - and now instead let's say
446:36 - display
446:37 - flex
446:38 - and then we'll say flex
446:40 - flow and we'll make it a column and say
446:43 - no wrap
446:44 - and then justify content and there we'll
446:47 - say flex
446:49 - dash start and we can save and now it is
446:52 - all pulled up towards the top let's pull
446:54 - in some padding though but not the 10
446:57 - pixels that we had here let's pull in
446:59 - our padding variable i can put the
447:01 - comment after that so for that
447:04 - we'll say var and then dash dash
447:07 - padding
447:09 - and save that now let's go ahead and
447:12 - remove the padding from our nav because
447:15 - it has a little extra padding compared
447:17 - to the header and footer
447:19 - and then let's change the value of the
447:22 - padding just a little bit as i scroll
447:24 - back up to the top let's look for that
447:26 - padding variable we see 0.5
447:30 - rem so let's make this
447:32 - ems and then it's based on the font size
447:35 - of the element it is applied to so if we
447:38 - save don't notice much of a difference
447:40 - but that's what i would prefer to do for
447:42 - that padding okay as i scroll back up
447:45 - we've looked at men and we've decided or
447:47 - learned
447:48 - that it will select the smallest of the
447:50 - two values it's given it doesn't really
447:52 - matter which order you provide these
447:53 - values but because of that there are
447:56 - some things to consider when we provide
447:58 - the values one you should only provide
448:00 - one absolute value or you know which one
448:02 - it will always choose so the other one
448:04 - should be relative and it's better to
448:07 - choose viewport height units for fonts
448:10 - than it is viewport width so we're
448:13 - keeping a certain size in there and you
448:15 - can play around with it but i think
448:17 - you'll see why
448:18 - i lean towards choosing viewport height
448:20 - units and i don't put a percentage here
448:23 - because
448:24 - really that percentage is really easy to
448:27 - just kind of equal
448:29 - what the rim is as well so 100 percent
448:32 - would be 16 ram uh which would be army
448:35 - not 16 ram 16 pixels which would be one
448:38 - rim so two rims would be 200
448:41 - so this would be the equivalent of 225
448:44 - percent so i choose to put in the
448:46 - viewport height units as my relative
448:48 - unit when i'm applying this to font now
448:50 - you can use this min function for images
448:53 - and other things and i believe we did
448:55 - that just a little bit in the past but i
448:57 - wanted to explain more about that so now
448:59 - let's move on to the max function
449:02 - which is essentially the opposite of the
449:05 - min function so max is always going to
449:08 - choose the larger of the two values we
449:11 - provide so just so we can better see a
449:13 - change i'm going to switch this from
449:15 - 2.25 to 1.75
449:19 - now it's always going to choose
449:20 - whichever is larger either three
449:22 - viewport height units or 1.75 rim so
449:26 - let's once again take a look at our page
449:29 - and i'll open up the dev tools once
449:32 - again as well go over to the computed
449:34 - side
449:35 - and now i'm going to inspect this
449:37 - specific element so we can see
449:39 - that the font size is currently 37.68
449:43 - so that's fairly large but it's based on
449:46 - the height will it shrink if i bring
449:48 - this down yes it's instantly shrinking
449:49 - now it's down to 34.56
449:52 - but at some point it will stop shrinking
449:54 - as well and now it has and as we look
449:57 - that's 28 pixels which i put
450:00 - 1.75 rem if i remember correctly so that
450:04 - would be 16 would be one ram and .75
450:07 - would be 12 and that gives us 28 pixels
450:11 - so now we see the opposite in effect and
450:13 - it continues to grow as the page gets
450:15 - taller but at some point it stops
450:18 - shrinking
450:19 - and that's what we have there for the 28
450:21 - pixels okay so let's close this and go
450:24 - back and look at our max once again now
450:27 - the same applies here you should have
450:29 - one absolute value and then you should
450:32 - have a value that is relative that
450:35 - adjusts itself and the viewport height
450:37 - units again for font makes total sense
450:40 - to do that so just like with min the
450:42 - absolute value we provided was the
450:45 - largest it would ever get well now the
450:47 - absolute value that we provide inside of
450:50 - max is the smallest it will ever get and
450:53 - i know that is like contrary to what
450:55 - they're named so remember max actually
450:58 - provides a minimum absolute value and
451:01 - min actually provides
451:03 - a
451:04 - maximum absolute value so which of these
451:07 - would i use well actually i won't use
451:10 - either one of these there is a third
451:13 - function we can use and it is called
451:15 - clamp and it's a newer function it
451:17 - hasn't been around as long but it has
451:19 - good support now and there we can
451:21 - provide a minimum so i'm going to say
451:24 - 1.75 just like we used in our max
451:27 - and then we put in the ideal size which
451:29 - i'll put in our relative units of
451:31 - viewport height of 3 units and then we
451:34 - can put in a maximum so i'll put in our
451:37 - 2.25 that we used inside of our min
451:41 - function so this lets us provide both we
451:44 - had
451:45 - a maximum inside of the min function and
451:47 - that's right here and then we had a
451:50 - minimum that was inside of the max
451:52 - function and i've got it right here and
451:54 - then we always use the viewport height
451:57 - units of 3 for that relative and it's in
452:00 - between so you've got minimum ideal and
452:03 - maximum so now if we save and bring this
452:06 - back once again we should see some
452:09 - changes but it will stop growing and
452:11 - stop shrinking at different points
452:14 - okay so we're
452:16 - on the paragraph we'll inspect that
452:17 - specifically go to the computed tab
452:20 - and now we'll look at the font size is
452:23 - currently 35.376
452:26 - so that is somewhere in between now we
452:29 - can shrink this down and we're noticing
452:30 - the font size is shrinking but it stops
452:33 - shrinking now at 28 pixels now we can
452:36 - bring this back up and i believe we said
452:40 - 2.25 so 36 pixels would be the largest
452:44 - it would get and we achieved that now so
452:46 - if we scroll back down there it starts
452:48 - to shrink
452:49 - so clamp works with both the minimum and
452:52 - maximum and we'll choose an ideal size
452:55 - in between when necessary let's close
452:57 - dev tools again and bring the browser
452:59 - back over to the right and now let's go
453:01 - ahead and apply clamp to one more
453:04 - variable that we can create here and i'm
453:06 - going to create a font size dash
453:09 - sm for small and here i'll change this
453:12 - to 1.25
453:14 - and then instead of three i'll use two
453:16 - viewport units and then instead of 2.25
453:20 - i'm going to make this
453:21 - one
453:22 - well then i've still got the two
453:24 - 1.5 rim for the maximum and save so now
453:28 - we have a small size as well now let's
453:31 - add just a little more content to see
453:32 - how this can apply so i'm scrolling back
453:34 - down to the main area
453:37 - and we'll take our padding that we have
453:38 - inside the main i'm going to cut that
453:40 - out with control x and underneath main
453:44 - i'm going to style that section that we
453:46 - have so i want lower case though
453:49 - main section
453:51 - inside the section i'm going to say flex
453:53 - dash
453:54 - grow set that to 1 and then i'll put in
453:58 - our padding and then we're going to add
454:00 - an aside variable
454:02 - underneath that section i said variable
454:05 - a aside element underneath that section
454:08 - element in our html so i'm going to say
454:10 - main aside
454:12 - and now let's go ahead and style this
454:14 - choose a background dash color
454:17 - and i've got a color picked out and
454:19 - we'll use this hsla function here i'll
454:22 - say zero
454:23 - zero percent
454:25 - twenty percent and remember the last one
454:27 - is the opacity which is the transparency
454:31 - say zero point eight
454:33 - and then we have a color that we'll use
454:36 - and this will be for the font and we'll
454:37 - just use our light color variable that
454:40 - we've already constructed
454:42 - then we'll use our font size
454:44 - and here we'll say vr and then our var
454:48 - dash dash fs dash
454:51 - sm for that small size we just created
454:54 - let's make this font italic so we can
454:57 - really tell the difference
454:58 - and then the padding
455:00 - will once again
455:02 - be that padding variable we created
455:05 - there it is
455:06 - and save
455:07 - now we also want to provide a media
455:11 - query and this will help adjust our
455:13 - aside because when the screen gets too
455:15 - small we should stack them so underneath
455:18 - all of our current css let's go ahead
455:21 - and add at
455:23 - media screen
455:25 - and then we'll say min dash width
455:28 - and we'll choose our small break point
455:30 - that we had in previous lessons of 576
455:33 - pixels
455:34 - and now for the main here
455:36 - we'll say flex dash flow and we'll
455:39 - switch it to row
455:41 - no wrap so now they'll be side by side
455:44 - and we'll say justify content
455:47 - space
455:48 - between
455:50 - okay after we've styled that main
455:52 - element let's go ahead and add the main
455:55 - section here
455:57 - and now we'll adjust the width of the
455:59 - section and we'll use another css
456:01 - function to do that and that is calc and
456:05 - for calc we'll say 70 percent and you
456:07 - can mix different units so we're mixing
456:10 - a percent
456:11 - and a pixel
456:13 - and then after that we'll go ahead and
456:15 - provide a width for the aside as well so
456:18 - we'll say main aside
456:20 - and here we'll say width we'll use calc
456:22 - once again and we'll say 30 percent
456:26 - minus
456:27 - 5 pixels so
456:29 - what we have here is actually 10 pixels
456:32 - that will be between the section and the
456:34 - aside on larger screens anything larger
456:37 - than
456:38 - 500 or as large as 576 pixels or greater
456:43 - i'm going to jump over to the html and
456:45 - scroll down here and this will be in the
456:48 - starter code as well or the at least the
456:50 - finish code but i'm going to paste in
456:53 - this aside here so it also has an h2 and
456:56 - a paragraph
456:57 - and that's it so we save and now we can
457:00 - see the column over here on the right
457:02 - because we are larger than 576 or we are
457:06 - at least 576 pixels wide so we have our
457:10 - section
457:11 - and our aside and we can see that font
457:13 - let's see how they both resize now as
457:16 - we've applied the two different font
457:17 - sizes so i will inspect open up dev
457:21 - tools i want to go to computed
457:23 - and i'm on the section or we could
457:25 - choose the aside either one and see how
457:28 - those font sizes apply so i'll look at
457:30 - the content here
457:32 - and now they look fairly small because
457:34 - we're at 50 percent inside of devtools
457:36 - just to get it all to fit let's go ahead
457:38 - and start to shrink and notice the text
457:41 - shrinks for both but then it eventually
457:43 - stops for both as well so we've reached
457:45 - that minimum
457:47 - and now it starts to grow in the main
457:49 - and now it's growing in the aside and at
457:51 - some point they both stop growing as
457:54 - well so clamp is working well for both
457:56 - of those and again remember if this
457:58 - looks a little small it's because we're
458:00 - at 50 percent here when we have dev
458:02 - tools open so i'll close that now we see
458:04 - the full page and now i'll drag it back
458:07 - over to the right let's go back to our
458:09 - css those paragraphs that we have are
458:12 - both content so just underneath the
458:15 - aside i'm going to put in a content
458:17 - class and that's what we've applied to
458:19 - those paragraphs let's just say margin
458:21 - top
458:22 - of 20 pixels and see how that looks yeah
458:25 - that gives a little space from the
458:26 - heading down to where the rest of the
458:28 - content starts i like that just a little
458:30 - better okay now what about this google
458:33 - link here let's talk about that so just
458:35 - underneath the footer we'll go ahead and
458:37 - style this and as we learned in our
458:39 - pseudo lesson
458:41 - we can choose any link and that should
458:43 - apply to both the non-visited and
458:46 - visited links
458:47 - so let's color this
458:49 - fire break
458:50 - that will look a little better on the
458:52 - colors that we have
458:53 - but after that
458:55 - let's go ahead and look at the hover and
458:58 - the focus so we'll say anchor hover
459:01 - comma and then we'll also have anchor
459:05 - focus
459:07 - and then inside of those we'll apply a
459:09 - filter and there are filter functions so
459:12 - in the past actually before we do that
459:15 - let's look at what we were doing in the
459:16 - past we were choosing a color maybe hsla
459:19 - and putting that transparency in there
459:21 - or if we could just leave it the color
459:23 - it is and just put in opacity and maybe
459:26 - we'd put that to 0.8
459:28 - and then when we mouse over
459:30 - it just gets a little fainter you can't
459:32 - tell as good with the fire brick maybe
459:34 - i'll take that down to 0.6
459:37 - yes now it gets a little weaker when we
459:39 - hover over it's a little transparent so
459:41 - that's how you can do that on its own or
459:43 - you can provide that fourth value inside
459:46 - of hsla
459:47 - and choose the color as well
459:49 - but what we want to do now is provide a
459:52 - filter and filter has several functions
459:55 - so one thing i like to do with filter is
459:57 - use the brightness and here i'm going to
459:59 - say 150 percent so instead of adding
460:04 - transparency now when i mouse over the
460:06 - link gets brighter i actually really
460:08 - like that i just wasn't able to do it
460:10 - earlier in the lessons so i frequently
460:13 - do that for the hover focus i like the
460:15 - filter brightness now something else you
460:18 - can do that is a cool effect instead of
460:20 - brightness is choose hue rotate and
460:24 - you'll always get a complementary color
460:27 - if you say 180 degrees so if we save
460:30 - that let's see what is 180 degrees
460:32 - difference in the color wheel if you
460:34 - think about colors than firebrick and
460:37 - it's this kind of teal or green i don't
460:40 - know if i like that one there so some
460:42 - will have better luck than others and
460:44 - you could play around with the degrees
460:46 - with that as well myself i'll probably
460:48 - go back to brightness so i'm just going
460:50 - to ctrl z to undo until i'm back to that
460:53 - brightness and i like how that works
460:56 - okay one more function to work with
460:58 - while we're working with these
460:59 - paragraphs let's jump to the html again
461:02 - and inside of our aside we have this
461:05 - lorem text and notice we provided a span
461:08 - element that is an inline element and
461:10 - it's wrapping around it and then it has
461:12 - a class of tool tip and then it also has
461:16 - an attribute that is data dash tool tip
461:19 - and we can really provide custom
461:21 - attributes as long as they all start
461:23 - with data dash and then we can name it
461:25 - whatever we want so we named this data
461:27 - dash tooltip and it says this is latin
461:31 - so now let's make a custom tool tip that
461:33 - will show when we hover over lorem
461:36 - inside of our aside over here so we
461:39 - should see it right up here in the top
461:40 - right let's jump back to the css
461:43 - and then just underneath the well let's
461:46 - do it underneath the content there we
461:48 - are
461:49 - so now let's put in a
461:51 - tooltip class
461:53 - and inside this tool tip we'll say
461:55 - border dash bottom so this will indicate
461:57 - that a tool tip exists we'll say one
462:00 - pixel dash and let's try orange to see
462:02 - how that looks if we save we see the
462:05 - little dashed border under lorem that
462:07 - indicates there is something about that
462:10 - now we also want to get this position
462:12 - relative because we will be using a
462:15 - position absolute when we choose where
462:18 - the tooltip shows up
462:20 - so after we've applied those styles to
462:22 - the tooltip class then we need
462:24 - tool tip
462:26 - hover pseudo class but now we can stack
462:30 - a pseudo element and this is the before
462:33 - pseudo element so now we've applied the
462:36 - tooltip class the hover pseudo class and
462:40 - now the before pseudo element and with
462:43 - that i'm going to choose content
462:45 - and here is where we can use a function
462:48 - it's the attribute function and now we
462:50 - just name the attribute so this is our
462:53 - data dash
462:54 - tool tip
462:56 - and if i save this we'll notice this
462:59 - appear when i hover over
463:01 - and now it just appeared at the
463:02 - beginning in front of lorem it says this
463:04 - is latin lorem
463:06 - when i hover over and that's not what we
463:08 - want but you can see how this works okay
463:11 - let's go ahead and style the rest so
463:13 - we'll say
463:14 - position
463:16 - absolute let's put the position at minus
463:20 - 20 pixels which should put it up on top
463:23 - if we save now and i mouse over it shows
463:26 - the top but now it's all scrunched and
463:28 - it comes down in there so to get it to
463:30 - avoid wrapping on each of those words we
463:33 - can say
463:34 - white dash space and then say no wrap
463:38 - now if we save and look now it says this
463:41 - is latin up above
463:43 - okay from there let's give this a
463:45 - background color
463:47 - and now we could use our
463:50 - var and say
463:52 - dark color there it is which was black
463:54 - if i remember correctly
463:56 - and after that we can give it padding
463:59 - and here we could say
464:01 - var and give it our padding as well so
464:04 - there we go
464:06 - and then finally let's give it a border
464:08 - dash radius of 15
464:11 - pixels and save now when we mouse over
464:14 - lorem
464:15 - we get a this is latin tooltip that pops
464:18 - up we've learned a lot about css
464:19 - functions with these paragraphs and this
464:22 - layout but now it's time to go back to
464:24 - grid and learn about some of the grid
464:26 - functions so first i'll go to the html
464:28 - and i'm going to select both our section
464:31 - and our aside element inside of the main
464:34 - element i'll hold down shift and click
464:37 - and now i'll press shift alt and the
464:39 - letter a to comment that all out and now
464:42 - i'm going to select the divs from the
464:45 - previous lesson once again hold down
464:47 - shift alt and the letter a to uncomment
464:50 - those and now we should have those back
464:52 - on the page when we save we should
464:54 - definitely see a difference but we need
464:56 - to make some changes to the css also
464:59 - back in the css file i'll need to scroll
465:02 - up to the main section and we can
465:05 - comment out the flex flex flow or
465:08 - display flex flex flow and justify
465:11 - content
465:12 - and now we will uncomment what we
465:15 - previously had here but now we'll change
465:18 - some of this and we'll actually just
465:20 - delete these three middle rows as well
465:23 - okay we want this to be a display
465:26 - grid instead of display flex
465:29 - after that we're going to apply grid
465:32 - dash template columns and now we can use
465:35 - a grid function and we used this when we
465:38 - learned about grid in a lesson and that
465:40 - is the repeat function so we're going to
465:42 - say repeat this 4 times so that will
465:45 - give us four columns and then we're
465:47 - going to use a math function that is
465:49 - specific to grid and that is min max
465:53 - and here we provide a min and a max so
465:55 - i'm going to provide 100 pixels for the
465:58 - smallest grid item that we would want
466:01 - and 300 pixels for the largest now after
466:05 - that i also want to adjust this gap i
466:07 - did this in a previous tutorial as well
466:10 - but four viewport width units are almost
466:13 - always going to be bigger than 15 pixels
466:16 - so min's probably always going to select
466:18 - 15 pixels here so i will change this to
466:21 - 2
466:22 - and then i will also switch this to 20
466:25 - pixels and it should probably adjust
466:28 - now based on that and after i save you
466:30 - can see the changes on the page over
466:32 - here on the right but we will resize the
466:34 - page and look at some more changes there
466:36 - as well but the reason we're not seeing
466:38 - the grid adapt to the page the way i
466:41 - would like it to is because we still
466:43 - have in a size for the squares we had in
466:46 - a width and height previously so let's
466:48 - select both of those lines
466:50 - shift alt and the letter a to comment
466:52 - those out and save once again and now we
466:55 - see the grid is filling up the entire
466:58 - space that is available i think we
467:00 - should probably provide just a little
467:02 - bit of padding inside that main element
467:04 - as well so let's scroll back up to where
467:06 - we were and just above here the display
467:09 - grid and below the flex grow let's say
467:12 - padding and let's provide the padding
467:15 - that we have already defined
467:18 - and now once we save we should see it
467:20 - give just a little space and that looks
467:22 - better and it should adapt to all sizes
467:25 - so let's go ahead and drag this over and
467:28 - see how everything has applied now it
467:30 - did adapt to this size so we see all 12
467:32 - grid items and you can see once they've
467:34 - reached that 300 width
467:37 - then the gap here between the columns is
467:40 - going to get larger as the page has to
467:42 - adapt but it kept whatever gap we had
467:45 - defined between the rows now as we
467:47 - resize we'll see that change so i'm once
467:49 - again going to right click and choose
467:51 - inspect
467:52 - remember you can also get into dev tools
467:54 - by choosing control shift and the letter
467:57 - i all at the same time or pressing those
467:59 - all at the same time okay now that we're
468:01 - here i will select one item
468:04 - and inspect so we've got a div square
468:06 - highlighted and we can see it has a
468:08 - width of 300 pixels as i mouse over that
468:11 - but we can also go to computed
468:13 - scroll down and see that width as well
468:16 - now let's resize
468:18 - and as we get in here to a size where
468:20 - they're not the grid items themselves
468:23 - aren't changing right now it's the space
468:24 - between the columns but as we squeeze
468:27 - them in now they're changing and now we
468:30 - can see that width here is changing as
468:32 - well so if we scroll down it should be
468:34 - that same number well it's close
468:37 - 251.8 right now and as we continue to
468:40 - squeeze and it keeps scrolling on me but
468:42 - as we continue to squeeze it will go
468:44 - down until they are 100 pixels and we're
468:48 - getting close i think
468:51 - and let's take a look now
468:53 - and now we're at 105 so we're very very
468:55 - close and now the page starts to shift
468:57 - as we'd have to put in a media query to
468:59 - get it to adapt
469:00 - after that because
469:02 - they will no longer shrink in any way
469:04 - they at this point when the page starts
469:07 - to break essentially is when they have
469:08 - stopped adjusting so they are at 100
469:11 - pixels
469:12 - right there and if i bring this down we
469:13 - should now see that 100 pixels and if we
469:16 - bring it out they begin to grow so now
469:19 - 250 pixels apiece all the way up to 300.
469:23 - now notice our grid gap that we defined
469:26 - and it stays what we defined it as until
469:30 - they stop growing and after they stop
469:33 - growing then they start to separate the
469:35 - columns because it needs to fill out the
469:37 - page
469:38 - but as they are scrunched in it keeps
469:41 - that space between the rows and the
469:43 - columns because remember the gap
469:45 - property is both a grid gap and a row
469:48 - gap value it's a shorthand so we can see
469:51 - how all of that works together so we
469:53 - provided the min max we used repeat as
469:55 - well and then we used min once again on
469:58 - the gap property
470:00 - let's move on to css transforms
470:03 - transitions and animations and before we
470:05 - finish today we'll make a css only
470:08 - animated hamburger icon and drop down
470:10 - nav menu as you see here let's look at
470:13 - our starter code today you can see i've
470:14 - got an
470:15 - index.html file and inside this
470:18 - index.html file i've just got a main
470:20 - element and it contains three divs i
470:23 - don't usually use divs but for this
470:25 - example they're good we're just creating
470:28 - squares with all of them and you can see
470:29 - i have a class of squares set on each
470:31 - one the final div also has a class of
470:34 - animate and then i've got a different
470:37 - emoji inside of each div and then in the
470:40 - file tree you can see i've got some
470:42 - other files as well but for these first
470:45 - examples of transforms transitions and
470:48 - animations i'm just going to use the
470:50 - index.html file and then the style.c
470:54 - file after this though we will go ahead
470:57 - and create an animated mobile menu and
471:00 - it will have an animated hamburger icon
471:03 - as well as the drop down navigation menu
471:05 - inside of it but for now let's just
471:08 - learn about the basics of transforms
471:10 - transitions and animations now inside of
471:13 - the style.css file you can see i'm
471:15 - importing the nunito font from google
471:18 - i've got a basic css reset here inside
471:21 - the html element styles i've set the
471:24 - font just a little larger to one and a
471:26 - half rims and we're applying the nunito
471:29 - font that we've imported and then the
471:31 - body element is set to a min height of
471:33 - 100 viewport units it's a display of
471:36 - flex and a column so the main element
471:39 - that's inside of the body is set to flex
471:42 - grow one so it also extends to the full
471:46 - visible page that we see the body take
471:49 - up and from there the main element is
471:51 - also set to display flex for anything
471:53 - within it and it's set to a column as
471:56 - well and everything is centered and then
471:59 - there will be a gap of one rim between
472:02 - the flex items within the main element
472:04 - and those flex items are the three divs
472:06 - that we previously looked at inside of
472:08 - the html file they've got a width and a
472:11 - height of 200 pixels so they're squares
472:14 - they've got a border of one pixel solid
472:16 - black and then i set each one to display
472:20 - grid so we can center the content easily
472:22 - just by saying place content center so
472:25 - it centers those emojis i'll drag our
472:28 - code over to the left side of the screen
472:30 - and we can see this page right now with
472:32 - our starter code here on the right we've
472:34 - got our three divs each one is 200 by
472:37 - 200 pixels and then we've centered the
472:39 - emoji inside of each one now we're ready
472:41 - to apply some individual styles to each
472:43 - of these divs so i'm going to scroll for
472:45 - some more room inside of the css file
472:48 - i'm also going to press ctrl
472:50 - b to hide the file tree so i have a
472:52 - little more room to type and we'll
472:54 - review some pseudo class selectors to
472:59 - select each one of these divs so first
473:01 - i'll put in div in lowercase and then
473:03 - the first pseudo class i'm going to use
473:05 - is first child so this should select the
473:08 - first div and we can test that by
473:10 - changing the color change the background
473:12 - color to dodger blue and save and
473:15 - using the live server extension it
473:17 - updates automatically when we save and
473:19 - we can see that first div gets a
473:21 - background color of dodger blue so i'm
473:23 - going to highlight this div selector and
473:26 - press shift alt and the down arrow twice
473:28 - so i get it twice more inside of our
473:30 - code and then i can just change this to
473:33 - nth child and then we need a parenthesis
473:36 - and i'll put in the number two and now
473:39 - i'll switch the second div
473:41 - to yellow
473:42 - and then finally we can use last child
473:45 - for the last div and we just need one s
473:48 - there we go and i'll change this one to
473:51 - lime green so now let's save and see if
473:54 - the colors change and they do so we've
473:56 - successfully selected all three of these
473:59 - divs individually now the first property
474:01 - we'll look at is transform so inside of
474:04 - the first child
474:06 - i'll select that and use transform
474:10 - and then what we'll put in for a value
474:12 - first is translate x you can see we have
474:15 - different choices here that visual
474:16 - studio code gives us now x will move it
474:19 - left or right and if we use percents it
474:23 - bases the percent on the size of the div
474:26 - so when i put in 50 percent it should
474:29 - move it halfway over and we can compare
474:31 - to the other divs to see if this is
474:33 - correct and yes it moves our first div
474:36 - 50
474:37 - of the way over of the width of the div
474:40 - not of the page or the element that it's
474:42 - within but of the element itself so that
474:46 - is the 50
474:47 - and the positive number moves it to the
474:49 - right
474:50 - a negative number would move it to the
474:53 - left now we can use other units besides
474:55 - percents so in the next div i'll say
474:58 - transform once again
475:01 - and then i'll use translate y which
475:04 - should move it up or down and here i'll
475:06 - use two rim and let's see what happens
475:10 - it moved it down to ram so likewise if i
475:13 - give it a negative two rim it should
475:16 - move it up and as you might have guessed
475:18 - instead of just translate x or translate
475:21 - y
475:22 - we can use the shorthand and use them
475:24 - together so in the third one i'll say
475:27 - transform
475:28 - and then i'll just use translate and now
475:31 - the first value is the x value so i'll
475:33 - say 100 percent
475:35 - and we can combine different units so
475:37 - here i'll say minus 2 ram
475:40 - and save
475:41 - and now you can see it moves it to the
475:43 - right 100 percent
475:45 - and then the minus 2 rim did move it up
475:48 - so now we're back to our original gap
475:50 - between the second div and the third div
475:53 - because we also moved that second div
475:56 - minus two rims so if we were to just
475:58 - switch this to translate x and then
476:01 - remove the -2 room you can see that the
476:04 - gap is larger so if we wanted to move
476:06 - this up even more to make it obvious i
476:09 - could just delete the translate x go
476:11 - back to translate and let's say
476:13 - minus
476:14 - 5 rim and save and now you can see it
476:17 - moves way up so it's a little easier to
476:19 - see that it's working so we now know
476:20 - that translate x moves things left and
476:23 - right and translate y moves things up
476:26 - and down and we can use them both
476:27 - together but for now let's just comment
476:29 - these out so i'll press shift alt and
476:32 - the letter a to comment them out after i
476:34 - have highlighted them
476:36 - and do that for the third one as well
476:38 - and we'll move on to the next value that
476:40 - we can use for transform which is rotate
476:43 - so i'll once again put in transform and
476:46 - i'm going to leave these commented out
476:47 - values in here so you can play around
476:49 - with them from my source code if you
476:51 - want to so this transform will be
476:54 - rotate and you can see once again we
476:56 - have choices like x y and z so i'm going
476:58 - to choose x and now let's say rotate
477:03 - 180 degrees and this will of course
477:06 - apply to the first one and when i save
477:08 - these other changes will revert because
477:09 - we've commented them out too
477:11 - so there we have now rotated
477:15 - 180 degrees let's do a smaller rotation
477:19 - and you can see what happens as well so
477:21 - something looks a little strange about
477:23 - this box doesn't it that's because it's
477:26 - rotating
477:27 - from the top
477:29 - backwards so it's kind of like a pizza
477:32 - box if you consider it that way this
477:34 - bottom part is coming towards you and
477:36 - the top part is moving away from you as
477:39 - far as that rotation and that means once
477:42 - we get to 90 degrees
477:44 - it disappears because
477:46 - you are now at eye level with that flat
477:50 - top or the card consider this a card as
477:53 - well instead of just a pizza box and
477:55 - you're flipping it over from the top and
477:57 - so once we go 180 degrees it has flipped
478:00 - all the way over
478:02 - and now notice the rocket is pointing to
478:04 - the bottom right instead of the top
478:06 - right and that's because that card has
478:08 - been flipped over
478:10 - from top to bottom so as you might guess
478:13 - then if we apply transform
478:15 - and then rotate
478:18 - y
478:19 - let's choose that out of our list here
478:21 - and now if we sit this to say 45 degrees
478:24 - so we can see what's happening first
478:27 - it will be just the opposite so
478:30 - this now looks a little skinnier because
478:33 - we're flipping it i believe from left to
478:35 - right let's go ahead and do the 180
478:40 - and yes now the flame is just the
478:42 - opposite so we took the right side and
478:46 - made it the left side but it's flipped
478:48 - over so imagine having the same image on
478:50 - both sides but it's the opposite of that
478:52 - so we're flipping this side to this side
478:56 - and then of course what was here over to
478:58 - this side so we're seeing this from the
479:00 - back as if the image was burned all the
479:02 - way through and so
479:04 - left to right
479:06 - would be the way to consider y as far as
479:08 - the rotation and top to bottom would be
479:11 - the way to consider x for the rotation
479:14 - and now let's apply one more down here
479:16 - to our final div so we'll say
479:18 - transform and now we'll use rotate z
479:22 - and let's go ahead and choose 90 degrees
479:25 - with rotate z and see what happens
479:28 - it didn't disappear did it it turned so
479:32 - we did have our taco facing the normal
479:34 - way and now it is turned over here so
479:37 - this might be clockwise let's see what
479:39 - happens if we do 180 yes and now it's
479:42 - upside down so that's actually what this
479:45 - is doing is rotating clockwise with a
479:47 - positive number a negative number of
479:50 - course would take it counterclockwise
479:52 - it's worth noting that although we can
479:54 - use rotate z it is just the same as if
479:57 - we just said rotate so if i save this we
480:00 - won't see a change likewise if we make
480:02 - it 135 degrees it'll move on around and
480:06 - yes we did see the change now you can
480:07 - tell it rotated because of the taco has
480:10 - a different position here in the middle
480:12 - but we could put this some odd number as
480:14 - well and it won't have such a perfect
480:15 - rotation to see the change so there we
480:18 - once again go it does rotate the full
480:20 - box not just the emoji okay i'll once
480:23 - again comment these out but leave them
480:24 - in the code so if you do download the
480:27 - source code you can see these in there
480:29 - and we're going to move on to the next
480:31 - possible transformation
480:33 - and that's going to be scale it's very
480:36 - useful at times i meant for this to be
480:37 - on the same line here for the comment
480:40 - okay for scale we'll say transform once
480:43 - again and then we'll say
480:44 - scale x as you might guess and let's
480:47 - make this 120
480:49 - and see what happens to this top box
480:52 - it got bigger but only to the left and
480:54 - the right as with x which is a lot like
480:57 - the translate x but now it just grew to
481:00 - a hundred and twenty percent of the size
481:02 - but it only expanded
481:04 - on the horizontal plane here to the left
481:07 - and the right not up and down at all so
481:10 - as you might guess if we apply the
481:12 - opposite to the second div transform y
481:16 - oops i transform and then we need
481:18 - actually
481:19 - scale y there we go put that at 120
481:22 - percent we'll see the growth goes to the
481:25 - top and the bottom and it doesn't expand
481:27 - on the left and the right at all and
481:29 - finally if we look at this last child
481:31 - and now i'm going to scroll for just a
481:33 - little room i'll put in transform once
481:35 - again and here i'll just put scale and
481:38 - like translate we can put in both the x
481:40 - and the y values so i'll say 50
481:43 - x
481:44 - and 50 y and save and we can see
481:48 - instead of growing it actually shrank
481:50 - because it's just half the size that it
481:52 - was now before we finish with transform
481:55 - there is one more possible thing to
481:57 - cover with it and i'll comment all of
481:59 - these out as well
482:01 - and what we want to do there it's called
482:03 - skew oops i selected that below there it
482:06 - is
482:07 - and now one more to select before we
482:09 - move on to transform sku
482:11 - so now once again on this first div
482:13 - we'll say
482:15 - transform and we'll say
482:17 - skew x and with that we'll say minus 10
482:20 - degrees and let's see what happens
482:23 - and you can see now we've got a leaning
482:26 - box instead of the normal box that we
482:28 - had and that's kind of cool sometimes
482:30 - when you want to get that effect now
482:32 - let's do the opposite with y so
482:35 - transform and then we'll say
482:38 - skew if i could spell skew correctly and
482:41 - here we'll once again say a degree but
482:44 - let's choose a different value maybe
482:46 - minus 10 degrees instead of 10 no we
482:49 - said minus 10 before maybe i should go
482:51 - 10 degrees let me go ahead and try that
482:54 - and yeah we can see we get the opposite
482:56 - if we use a positive number instead of
482:58 - the negative but we skewed this y also
483:02 - so it's leaning a little differently
483:04 - than this one here on the top where the
483:06 - sides tilted now the top line's tilted
483:10 - at the top and the bottom actually
483:11 - instead of the left and the right and
483:13 - finally as we did with scale and
483:15 - translate we can provide both in the
483:18 - same so transform and now we'll just say
483:20 - skew instead of skew x or y and here
483:22 - i'll say minus 10 degrees and now i'll
483:25 - stick with minus 10 degrees here as well
483:27 - and when we save we can see that applies
483:30 - to both so it's leaning on the left and
483:32 - the right and the lines have changed on
483:34 - the top and the bottom as well now i've
483:36 - touched on some of the basic uses with
483:39 - all of these transformations and there
483:41 - are many more that you can reference in
483:43 - mdn and so as always i'm putting the mdn
483:46 - link for transform and all of these
483:49 - different possibilities in the course
483:51 - description inside of the resources so
483:54 - you'll find that on github when you go
483:55 - to the course resources and now that
483:57 - we've covered everything you can do with
483:59 - transform i'll reset these back and
484:01 - we're going to start looking at
484:02 - transitions let's apply a transition to
484:05 - when we hover over the divs so we'll say
484:08 - div and then use our pseudo class
484:10 - selector hover and then inside of this
484:13 - we'll change the background color when
484:15 - we hover over that will be easy to tell
484:17 - and let's use the color midnight blue
484:19 - next we need to provide the transition
484:21 - property that we are changing and that
484:24 - is the background dash color
484:27 - from there let's set the transition dash
484:30 - duration and we'll set that to two
484:32 - seconds and save so now when we mouse
484:36 - over one of these i'll do the middle one
484:38 - it takes two seconds and it changes to
484:40 - midnight blue the same with the top
484:43 - and the same with the bottom now we can
484:45 - also provide a transition
484:48 - dash delay there it is let's set this to
484:52 - just a half second we don't want to wait
484:54 - too long and now when i mouse over it
484:56 - doesn't change immediately but then it
484:58 - starts to so it waits that half second
485:00 - first now this is important to know if
485:02 - you put two transitions together that
485:05 - transition delay does not go between the
485:08 - transitions it's just before it starts
485:10 - so we have a half second delay and then
485:13 - it goes ahead and does the two second
485:14 - transition to midnight blue now i
485:17 - mentioned having a second transition or
485:19 - a second transform that we're providing
485:21 - here so let's go ahead and do one other
485:24 - pseudo selector i'll say div hover again
485:27 - but now we'll only apply this to the
485:29 - last child actually i need to say last
485:31 - child first
485:32 - and then hover there we go
485:34 - now for this i'll say
485:37 - transform and we'll just rotate
485:41 - and let's rotate 180 degrees so this
485:44 - would just apply to the last one but we
485:46 - don't have a transition applied to that
485:49 - yet either but we can up here if we want
485:51 - to in the same line so after background
485:54 - color i can just put a comma
485:56 - and say
485:58 - transform
485:59 - and then during the duration if i want
486:01 - that to be a different duration i can
486:03 - just say three seconds here and then if
486:06 - i don't want to delay or i want the same
486:08 - delay i could just leave it as is so
486:11 - let's just leave it as is so we've got
486:13 - background color two seconds transform
486:16 - three seconds and we'll save and now if
486:20 - i hover over this last one it waits that
486:23 - half second and then it begins to rotate
486:25 - and notice it takes three seconds to
486:28 - rotate but only two seconds to change
486:31 - colors once i'll do this again you can
486:33 - see the color is fully changed before it
486:35 - stops rotating okay but that is a lot of
486:38 - different lines here we've got
486:39 - transition property transition duration
486:42 - transition delay
486:43 - and as you might guess there is a
486:45 - shorthand so i'm going to comment all of
486:48 - those out with shift alt and the letter
486:50 - a
486:51 - and now i'm just going to say
486:53 - transition
486:55 - and here i can say
486:57 - all of the transitions
486:59 - instead of any specific one i'll say i
487:02 - want them all to last two seconds and
487:04 - all of them to have a half second delay
487:07 - and i can save that and handle it all in
487:10 - one line so now when i mouse over
487:12 - it just takes two seconds and it
487:15 - finishes these still apply the same
487:17 - just a two second switch to the color
487:20 - now we can also provide a timing
487:22 - function here and there are some
487:24 - definitions or other ones that are
487:26 - already defined essentially that we can
487:28 - put in here so the default
487:30 - is ease but we could also put in some
487:33 - others let's go ahead and set this up by
487:36 - saying
487:37 - transition and now let's see timing
487:40 - function this is what we would be
487:41 - looking for a lot of different values
487:43 - that could go in here but the default is
487:45 - ease but once i start typing ease you
487:48 - can also see there's ease in ease in and
487:50 - out or just ease out now what this means
487:54 - and i usually can't tell much of a
487:55 - difference between ease and ease in and
487:57 - out but it starts slow and then it
487:59 - speeds up and then once again it slows
488:02 - down at the end so i'll just choose ease
488:04 - even though that's the default
488:06 - and let's go ahead and look at this now
488:08 - well we can see more in the rotation so
488:10 - it starts slow it speeds up and it ends
488:12 - slow now the opposite of that would be
488:15 - to say linear so it does everything at
488:18 - an even pace and now you can see
488:21 - it just there's not a huge difference
488:23 - but there's a little bit of difference
488:24 - so you can provide this function and if
488:27 - you do so you can provide it right here
488:29 - after how long the transition will take
488:31 - so right here is where we might say
488:33 - linear and of course move this comment
488:36 - over here
488:38 - and save and now this should still apply
488:41 - the linear see it's not as fast as the
488:43 - e's i kind of like the ease or let's try
488:46 - ease in and out and see if we notice
488:48 - much of a change i don't usually but
488:51 - let's see what we get does speed up and
488:53 - slows back down so i do like that a
488:55 - little bit better personally than linear
488:56 - but both are available and remember if
488:58 - you don't apply one ease on its own is
489:01 - the default so even if we didn't say
489:04 - ease in and out or linear or anything
489:06 - and we just left it as this it would
489:07 - apply the e's timing function as is now
489:10 - we've learned about transform and
489:12 - transitions that can help us make a
489:14 - little more impact with the
489:16 - transformations let's scroll for some
489:17 - more room and now learn about animations
489:21 - that's just a little different so i'm
489:22 - going to go ahead and start defining the
489:24 - class animate if you remember we applied
489:27 - this class to this last div
489:30 - inside of the html so for animate the
489:33 - first thing we need to do is name our
489:35 - animation so we should have animation
489:38 - dash
489:39 - name and here i'm just going to name
489:40 - this slide
489:42 - then an animation
489:44 - dash duration and i'll give this five
489:47 - seconds
489:48 - an animation let's spell that correctly
489:51 - again
489:52 - timing function and thank goodness
489:55 - visual studio code helps me spell here
489:57 - i'll say ease in and out so you can see
490:00 - this is a lot like a transition so far
490:03 - but you will notice a difference as well
490:06 - and we can provide an animation delay
490:09 - let's let's delay this by one second
490:11 - that's just a little bit longer we can
490:13 - also give an animation iteration count
490:17 - so i'm going to have it repeat this
490:19 - animation
490:20 - five times now let's go ahead and just
490:22 - go with those properties for now
490:24 - but this in itself won't apply the
490:27 - animation we need to define key frames
490:30 - for the animation so we say at
490:33 - keyframes and then we need to have an
490:35 - identifier here and the identifier is
490:38 - the animation name slide
490:40 - so now inside of this we'll say at zero
490:44 - percent essentially at the beginning of
490:46 - the animation we will
490:48 - transform
490:50 - and then we'll translate x
490:53 - and here inside of translate x i'll just
490:55 - say zero so we're starting at square one
490:59 - we're not doing anything right when it
491:01 - begins but then at 33 percent or one
491:04 - third of the way through we'll once
491:06 - again say
491:07 - transform and now i'll say translate
491:11 - x
491:12 - and we'll move this 600 pixels to the
491:15 - right so this will probably go way off
491:17 - the screen
491:18 - and then we'll rotate
491:21 - 180
491:22 - degrees and notice there's no comma
491:25 - between those which is strange but
491:28 - that's the way it likes it in css so
491:30 - we'll just leave it like that after that
491:33 - i'm going to highlight this and do shift
491:35 - alt and the down arrow we'll change this
491:37 - 6
491:38 - 33 to a 66 so now we're two thirds of
491:41 - the way through and now i'll switch this
491:43 - to a minus 600 pixels
491:46 - and a minus 180 degrees so we're
491:49 - applying more than one thing here again
491:51 - no comma
491:52 - and then finally we'll get to a hundred
491:54 - percent
491:55 - and at a hundred percent
491:58 - i'm going to go ahead and say
492:01 - transform
492:02 - and our translate
492:05 - x once again will be back to the zero
492:08 - position
492:09 - and after that let's change the
492:11 - background color when we get to the
492:13 - final position to rebecca purple and
492:15 - there will be a reason we want to see
492:17 - this and how it changes so notice now it
492:19 - started animating right when i saved it
492:21 - didn't wait for a hover it's an
492:23 - animation and let me go ahead and pull
492:26 - this over to the full screen so we can
492:28 - see the full animation
492:31 - and there's at least three
492:33 - now notice it changes back to green when
492:35 - the animation starts again and that's
492:37 - something else to discuss
492:39 - but let's go ahead and let it finish the
492:41 - five times and you can see it's going
492:42 - the 600 pixels in each direction it's
492:45 - rotating as we want it to and it changes
492:47 - colors at the end but then it changes
492:49 - back to green and it's back in that
492:51 - starting state so since we have a
492:53 - smaller screen over here let's maybe
492:55 - change these to 300 it'll probably still
492:57 - make it to the edge or beyond of the
492:59 - screen but we'll leave it at that and
493:01 - then let's go ahead and add some more
493:03 - animation properties above and the next
493:06 - one that i want to add is the animation
493:09 - dash direction now the default here is
493:12 - just normal
493:13 - but that's not exactly what we have to
493:16 - choose so let's get those back up here
493:18 - and there's alternate alternate reverse
493:20 - reverse let's say alternate so that
493:23 - means it's going to go forward the first
493:25 - time and then it's going to reverse the
493:28 - next time so when i save this it will
493:30 - start again
493:31 - had that one second delay it went a
493:33 - little to the left a little to the right
493:36 - and then it stops now it went to the
493:37 - left instead of the right first back to
493:39 - the right and stops and so on so now
493:42 - we've seen those changes the next
493:44 - property to look at is animation fill
493:47 - mode so we'll say animation dash
493:50 - fill mode and now what happens here is
493:53 - we are talking about the actual ending
493:56 - state so the default is backwards as you
493:59 - see visual studio code brings up and
494:01 - that means it goes back to the original
494:03 - state it now has that green background
494:05 - again but if we say
494:08 - forwards
494:09 - when it stops it should now go to that
494:13 - other state then i'm going to shorten
494:15 - this up so here we'll save it so it goes
494:17 - forward once and then backwards once and
494:20 - then we'll be at the ending state so
494:22 - there was our forward now we go backward
494:25 - but when we get to the very end let's
494:27 - see if it goes back to green or not well
494:29 - it did because we alternated so let's
494:31 - switch this alternation back to normal
494:34 - because
494:35 - it was the opposite when it did the
494:37 - alternate the second time so there we
494:39 - end at purple
494:41 - then it goes back to green and starts
494:42 - again and now we're back to purple and
494:46 - it stayed purple that's the point of
494:48 - this animation fill mode since we set it
494:51 - to forwards instead of backwards it
494:54 - keeps the ending state so it stayed
494:56 - purple now again there are some other
494:58 - animation properties that you can dive
495:00 - into the mdn link that i'm going to
495:02 - leave in the course resources because
495:04 - there's a lot more you can do i'm just
495:06 - touching on the basics here today but
495:08 - once again look at how many properties
495:10 - we had to use and we can use shorthand
495:12 - instead of all those so i will comment
495:14 - all of those out and now let's just
495:17 - apply the shorthand we'll say
495:19 - animation
495:20 - that's going to last five seconds let's
495:23 - use ease in and out and then we'll say
495:27 - one second delay and then let's do the
495:30 - animation twice
495:32 - let's say normal so it does it the same
495:34 - way both times and then the ending state
495:37 - will be forwards
495:38 - and the animation name of course we have
495:41 - to provide and that is slide
495:43 - so if we do that this should apply the
495:45 - same as we had all of these properties
495:48 - above but this is shorthand so you can
495:50 - see how all of these values fit into
495:52 - that one shorthand line here for
495:54 - animation now we've completed the basics
495:57 - about transformations transitions and
496:00 - animations so let's go ahead and begin
496:02 - working on that animated mobile nav menu
496:06 - that will give us an animated hamburger
496:08 - icon and animated drop down menu that
496:11 - users could apply so to do that we need
496:14 - to look at our other starter code i'm
496:16 - going to show the file tree again i'm
496:18 - also going to stop live server for now
496:20 - because we'll launch a different html
496:22 - file and i'm going to drag this back
496:24 - over to the full window
496:26 - and then we'll look at the menu.html
496:29 - this will also be in your starter code
496:32 - and for the menu html we have got a
496:35 - basic page here but there's a little
496:37 - more than in the previous example we
496:39 - have a header element inside of the body
496:42 - and you can see this header element has
496:44 - a section inside of it and it has the
496:47 - class header title line and here we have
496:50 - our h1 that says acme co and then we
496:53 - have a button as well and inside this
496:56 - button is a div
496:58 - and it has the class menu icon the
497:00 - button has the class menu button and
497:03 - then we have a nav element and inside
497:06 - the nav element is an unordered list
497:08 - with four list items now they are
497:10 - basically fake links with just the
497:13 - hashtag that you would use as an anchor
497:15 - for the same page but i am going ahead
497:18 - and passing one link to a products page
497:21 - and this products page is basically just
497:23 - like the menu.html page but of course it
497:26 - links back to the menu.html page just so
497:29 - we can see the difference there i have
497:31 - absolutely nothing in the main element
497:33 - this is all about the header and
497:36 - creating the menu around this header
497:39 - structure so from there let me close
497:41 - this style css and the index.html let's
497:44 - look at the menu css that is being
497:47 - imported and what we have for starter
497:49 - code before we really start animating
497:51 - this menu so what we have again is the
497:54 - import of the font basic css reset and
497:57 - then we're setting two css variables
498:00 - just for the colors that we'll reuse in
498:02 - different areas the background colors of
498:04 - flat black and then white smoke for the
498:06 - font color
498:07 - and then the html itself once again just
498:10 - like the previous example has a font
498:12 - size of one and a half rim set the font
498:14 - family to nanito so that's all inherited
498:17 - the body has 100 viewport units min
498:20 - height and then is set to flex and a
498:23 - column again and then the header itself
498:26 - has a background color that's the header
498:27 - background color and we set the basic
498:29 - color here so we don't see a whole lot
498:32 - of difference but i'm going to go ahead
498:33 - and launch this page now with live
498:36 - server and drag visual studio code over
498:38 - to the left and it looks like it
498:40 - launched the other page so i'll need to
498:43 - change that
498:44 - and then inside of here i'm going to say
498:47 - slash
498:48 - menu dot html now right now this doesn't
498:51 - look too great we don't have a whole lot
498:53 - that looks good for sure we have our
498:55 - acme co here and then we've got our
498:57 - links here as well and maybe a little
499:00 - something odd there but now we'll start
499:02 - to apply some other styles i'm going to
499:03 - do control b again to hide the file tree
499:06 - and we can start with that header title
499:08 - line and if you remember i believe
499:11 - that's what this is is the button we had
499:13 - the acme co h1 and then we had a button
499:16 - all inside of that section element that
499:18 - had the class header title line so i'll
499:21 - put
499:22 - header dash
499:24 - title dash line
499:26 - and we'll start to apply a few styles
499:27 - there let's give a padding
499:29 - 0.25 rim on top and bottom and 0.5 rim
499:34 - on the left and the right we'll set it
499:36 - to a display of flex
499:39 - and from there let's go ahead and set
499:41 - the flex dash flow
499:43 - and this will be a row instead of a
499:45 - column and we'll say no wrap again
499:48 - and then after that let's justify the
499:50 - content and we want space between so we
499:53 - go hard left and hard right with the
499:55 - content we have which should be the h1
499:58 - and the button i'll save this much and
500:00 - we do see the change so now we see a
500:02 - line over here that would be the button
500:05 - we didn't really do much with it yet and
500:07 - we've got our h1 over here okay after
500:10 - our
500:11 - header title line class let's get the
500:13 - next class which was menu dash button
500:16 - this is the button itself and i did use
500:18 - a button element so we don't have to
500:20 - apply some other things and it's great
500:22 - for accessibility such as hitting the
500:24 - tab button it will automatically get
500:26 - focus on a button element if we used a
500:29 - div for example we'd have to put in a
500:31 - tab index and there's some other
500:33 - advantages as well but that's a big one
500:35 - okay for the menu button we'll say
500:37 - background dash color
500:39 - and now we'll set that to transparent
500:42 - because we don't want that normal button
500:44 - color that we get and then we'll also
500:46 - set the border to none because buttons
500:49 - usually do come with a border now let's
500:51 - go ahead and give this some shape with
500:52 - the width
500:53 - of 48 pixels and a height
500:57 - of 48 pixels which is kind of thumb size
501:00 - i'll save this much and we definitely
501:02 - see a change it's gone we don't see the
501:05 - 48 by 48 because we haven't done
501:07 - anything else with it yet at this point
501:09 - let's set the display
501:11 - to flex
501:13 - justify content and we want that
501:17 - center
501:18 - we also want to
501:19 - align the items
501:22 - center
501:23 - and i'll scroll just a little bit and
501:25 - after that we're going to set a position
501:27 - to
501:28 - relative if you remember the position
501:31 - tutorial earlier in the css series that
501:34 - means we're probably going to position
501:35 - something absolute inside of the button
501:38 - but those are the button styles and if
501:40 - we say we really won't see a change at
501:42 - this point because we don't have
501:43 - anything inside of that button and we've
501:45 - set it to be transparent
501:47 - okay now we want the menu icon which is
501:50 - the div
501:51 - inside of the button but we're also
501:54 - going to select the menu dash icon
501:57 - before pseudo element and the menu dash
502:01 - icon
502:02 - after pseudo element so all three of
502:05 - these will be affected by this
502:07 - and we'll say
502:08 - background dash color
502:11 - now let's use our variable
502:13 - and we want the header color just it's
502:16 - that white smoke color that we defined
502:18 - above now here we'll set the width
502:21 - to 40 pixels and we'll give this a
502:24 - height
502:25 - of 5 pixels
502:27 - and then i'll go ahead and save so you
502:28 - can see what we have we have one line
502:31 - essentially here a big dash that's 40
502:33 - pixels wide and 5 pixels high so now
502:37 - let's go ahead and set the
502:39 - border
502:40 - radius and we'll set that to 5 pixels
502:43 - and now this is going to be position
502:47 - absolute i'll scroll again for a little
502:49 - more room and after that we're going to
502:51 - go ahead and set our transition
502:54 - right here because it will apply to all
502:56 - of these
502:57 - so we'll say all instead of any specific
503:00 - property and then we want it to apply
503:03 - faster than we did in our examples in
503:04 - just a half second
503:06 - and we'll save that much now notice we
503:08 - only have
503:09 - the one line and it does have the
503:11 - rounded edges so it's one of the three
503:14 - lines we expect in our hamburger menu
503:16 - but we applied this to all so where are
503:18 - the others well the quick answer is
503:20 - they're all stacked on top of each other
503:22 - right now so we need to make a few more
503:25 - changes before we see them the first
503:27 - change is just going to apply to the
503:29 - menu icon
503:30 - before
503:32 - and the menu dash icon
503:34 - after but not the menu icon itself and
503:38 - here we just need to set the content to
503:41 - a blank basically an empty quotes here
503:43 - because
503:44 - if we don't do that they won't be
503:46 - visible so even though we didn't put
503:48 - anything in there we need to set the
503:50 - content to empty value and then we can
503:54 - go ahead and set the menu dash icon
503:57 - before
503:58 - and we're going to need to transform it
504:00 - now so we'll say transform
504:03 - and now we'll translate and we're going
504:05 - to provide two values here so
504:07 - i guess i could just do one first let's
504:10 - do translate
504:11 - y and i'll show you why we need to do
504:13 - two values so i'll say minus 12 pixels
504:17 - and save
504:18 - and now look they're not even up here at
504:21 - all that is not what we want so
504:24 - really it starts in the middle and since
504:26 - this is 40 pixels we need to have
504:29 - translate because the x value needs to
504:31 - be minus
504:33 - 20 pixels and then the y value can be
504:35 - the minus 12 to put it up above
504:38 - the actual one that was in the middle
504:40 - defined by menu icon so now when i save
504:43 - it gets pulled back over and i was
504:45 - expecting them to be the same length let
504:47 - me make sure i put everything that i
504:49 - thought i did and i'll come back and go
504:51 - over that but right now two different
504:53 - links of lines however
504:56 - what i expected here did happen we've
504:58 - got the minus 20 pixels to pull it back
505:01 - even and the minus 12 pixels to put it
505:03 - on top i'm going to select this now do
505:06 - shift alt and the down arrow and then
505:08 - change the before
505:11 - to after
505:12 - and now i'll also need minus 20 pixels
505:15 - here but now i'll need a plus 12 pixels
505:17 - to put this next one underneath
505:20 - and save and now they have straightened
505:22 - out that's what i needed was the
505:24 - hamburger menu all three the same so the
505:27 - menu icon is the one in the middle and
505:29 - then the top one is the before and the
505:33 - bottom one is the after pseudo element
505:35 - and now i know why it was longer before
505:37 - because they were stacked on top of each
505:39 - other but this bottom one started in the
505:41 - middle which then made it look like it
505:43 - extended the middle line which was
505:45 - actually the two together but not
505:48 - starting at the same place
505:50 - okay from there we can go ahead and
505:52 - apply some more styles to the nav i'm
505:55 - going to scroll for some more room and
505:56 - we'll select the nav element now the nav
505:59 - element is going to start out with a
506:01 - display of none but i'm going to go
506:03 - ahead and set up block here first so we
506:05 - can actually see what we're doing with
506:07 - the nav element and then i'll come back
506:08 - and change it we also want a transform
506:11 - dash origin telling the transformation
506:14 - where to start and we want it in the top
506:17 - and center because it's going to drop
506:19 - down and now we're going to apply an
506:22 - animation but we haven't defined that
506:24 - animation yet so let's go ahead and
506:26 - define it first and underneath here
506:28 - we'll say
506:30 - at
506:31 - keyframes
506:33 - and then we'll say show menu
506:36 - and now we'll say at the zero percent
506:41 - we will transform
506:43 - and then we want scale
506:46 - y
506:46 - and we'll set that to zero
506:49 - and then after that we want the next one
506:51 - to be at 80 percent
506:54 - and that's going to also be a transform
506:57 - and this will also be a scale y
507:00 - but this will be 1.2 notice we don't
507:02 - have to just stop at one so it actually
507:04 - will go 20 percent beyond the intended
507:08 - size and that's going to give it just a
507:10 - little bit of a bounce like kind of like
507:11 - stretching a blind down and then letting
507:14 - go of the blind and it snaps back up
507:16 - just a little bit
507:17 - so then we'll say at one hundred percent
507:19 - we use
507:20 - transform
507:22 - and we'll say scale y and now we'll just
507:25 - put it back to one and then after it
507:26 - snaps back up it will lose that twenty
507:29 - percent so let's save that and that will
507:31 - be our show menu keyframes for how this
507:34 - transition will work i'm going to come
507:36 - back to the nav and again like i said
507:38 - change the display to none and i'm also
507:41 - going to apply that animation but right
507:43 - now we just want to see what we're doing
507:44 - and not really have the animation or
507:47 - have the nav hidden so we'll go ahead
507:50 - and come back to both of those things
507:52 - right now we'll grab that unordered list
507:54 - inside of the nav
507:56 - we'll say list style type but not disk
507:58 - we'll set that to none
508:00 - and then we can set that unordered list
508:03 - to a display
508:04 - of flex
508:05 - and then we'll set the flex flow there
508:08 - to
508:09 - column and no wrap
508:12 - and after that we can select the list
508:14 - items so nav and li
508:17 - and then we'll give them a padding of
508:19 - 0.5 ram all the way around
508:22 - and let's put a border on top
508:25 - to one pixel
508:26 - solid and here i'll need var so i can
508:30 - set that
508:31 - header dash color
508:33 - let's save this much and see what we've
508:35 - got well we can see the menu is coming
508:37 - together we haven't really styled the
508:39 - links or positioned these at all but we
508:42 - now clearly have a menu that would drop
508:44 - down that has individual sections to it
508:46 - so let's go ahead and style those links
508:48 - now so after the nav li we'll have nav
508:52 - lowercase please and the anchor tag so
508:56 - all of the links will be
508:58 - display
509:00 - block instead of what they normally are
509:02 - which is inline
509:04 - and then we'll say text align and set
509:06 - them center
509:08 - and then i'm going to give them a width
509:10 - of 80 percent
509:12 - if i were to not be applying an
509:14 - animation if i did not apply an
509:16 - animation to these links
509:18 - then i would probably set them to a
509:20 - hundred percent and just change the
509:22 - background color and the text link so
509:24 - they would take up the whole space
509:27 - but
509:28 - because i want to apply an animation
509:30 - today i'm setting these to 80 percent
509:31 - because the animation will make it grow
509:34 - so that is the consideration there and
509:36 - because of that i'm also setting the
509:38 - margin to
509:39 - auto so it will center these block
509:42 - elements that they are now block
509:44 - elements when they normally aren't but
509:45 - what we get
509:46 - are centered links right now we don't
509:48 - have an animation or a transformation i
509:50 - should say applied to any of these yet
509:53 - but we will
509:54 - after that we'll go ahead and select
509:57 - the nav
509:58 - we need the anchor and there we go the
510:00 - any link pseudo selector which is a
510:03 - pseudo class so this applies to both the
510:06 - non-visited and visited links
510:09 - and we'll say color we'll set our var
510:12 - to the
510:13 - header color once again so they stay
510:15 - that same color whether they've been
510:17 - visited or not
510:18 - we'll set the font weight
510:21 - to bold
510:23 - and text
510:24 - decoration
510:25 - to none and that will remove the
510:27 - outlines we have under those words now
510:30 - when we save they're nice and bold and
510:32 - they are that white smoke color that we
510:34 - expect them to be and finally let's go
510:37 - ahead and apply this transformation
510:39 - which will animate the links just a
510:41 - little bit so we'll say nav and then
510:43 - hover
510:44 - and then we'll also apply this to the
510:46 - nav and if they have focus both of those
510:50 - we'll say transform
510:53 - and now we can say scale and we'll go to
510:55 - 1.2 which is essentially saying 120
510:59 - so they should grow 20 percent
511:01 - and then we can set the transition right
511:03 - here as well so i'll just say all
511:05 - 0.3 seconds so we don't want to wait too
511:08 - long and now when i mouse over
511:11 - notice how they grow
511:13 - and that works just great and this will
511:15 - also happen if we tab through the page
511:17 - you can see the outline and this is good
511:19 - for accessibility we'll select each one
511:22 - of these as we go through so you do not
511:23 - want to remove the outline you could
511:25 - change the colors or style it if you
511:28 - want to but i usually leave it basically
511:30 - as the default it does help with
511:32 - accessibility so you definitely want it
511:34 - there so you can tab through these as
511:36 - well now let's go back to our nav menu
511:39 - and make those changes i talked about so
511:41 - nav instead of display block should be
511:44 - none to start out
511:45 - and then we also want to apply that
511:47 - animation which will be animation
511:50 - using the shorthand here so we'll say
511:52 - show menu that's the name of the
511:54 - animation
511:55 - 0.5 seconds is the duration the default
511:58 - would be ease so we could say ease or
512:01 - ease in and out again i can't tell much
512:04 - of a difference between the two and then
512:06 - we'll go with forwards so it leaves it
512:08 - in that finishing state as we noticed in
512:10 - our example before
512:11 - the square changed to purple and stayed
512:14 - purple at the end instead of reverting
512:16 - back to green so we'll say forwards here
512:18 - now this won't apply a whole lot yet but
512:21 - when i save it will disappear
512:24 - so now we need to do some other things
512:26 - so it will appear when we hover over the
512:29 - header or when we have focus anywhere in
512:32 - the header i'll put these final styles
512:34 - right above the nav here in our css and
512:37 - they're going to start with the is sudo
512:39 - selector which will save us a little
512:41 - space i'm going to say header
512:43 - and then hover but this will also apply
512:46 - to the header
512:48 - focus dash within
512:50 - and now after that we can specify
512:53 - the menu dash icon so you can see what
512:56 - the is sudo selector helped us with
512:59 - otherwise we would have had to say
513:00 - header hover menu icon header focus
513:03 - within menu icon so it saved us just a
513:05 - little bit so what we're going to do say
513:08 - background
513:09 - color and we'll set that to transparent
513:15 - and then we'll also
513:17 - go ahead and say transform
513:20 - well let me hold off on the transform
513:22 - i'll come back to the transform let's
513:24 - just go with background color
513:26 - transparent to start out with for the
513:27 - menu icon
513:29 - and after that i'm just going to select
513:31 - this
513:33 - and drop this down now remember the menu
513:35 - icon itself is just this middle line
513:38 - which means we'll be
513:39 - losing the middle line when we mouse
513:41 - over
513:42 - now after that we'll say menu icon
513:46 - before
513:47 - so now we're selecting just the top line
513:50 - and instead of background color here i'm
513:52 - going to want
513:54 - transform
513:56 - and then i'm going to set a couple of
513:58 - things one thing is the translate x and
514:00 - that is because remember we already had
514:02 - to translate x back minus 20 pixels we
514:05 - need to do this again or it will end up
514:08 - in a different area so we'll once again
514:10 - say minus 20 pixels for the translate x
514:13 - and then we're going to rotate and we'll
514:15 - rotate this line 45 degrees
514:19 - and we'll leave it at that now i'm going
514:21 - to select all of this and do shift alt
514:23 - and the down arrow again i'm also going
514:25 - to press alt z just so you can see what
514:27 - isn't showing over there so it's is
514:30 - header hover header focus within and
514:33 - then we're selecting the menu icon
514:34 - before
514:36 - and now i'm switching this one to after
514:39 - once again i need translate x minus 20
514:42 - pixels but now instead of 45 degrees i
514:45 - need minus 45 degrees
514:48 - finally i'm going to copy this one more
514:50 - time
514:51 - select all of that down but instead of
514:53 - the menu icon before or after
514:56 - i'm going to switch this
514:58 - to the nav element itself it's not a
515:01 - class this is going to be the element
515:02 - there we go and now we need to change
515:05 - that display to block so it actually
515:07 - shows up because before remember we had
515:10 - none
515:12 - so those are the different changes we
515:14 - have made for when we hover over the
515:16 - header or when we have focus within the
515:18 - header which is important if we're going
515:20 - to tab through so now let me hover over
515:22 - the header
515:24 - and you can see our hamburger menu
515:26 - changes to an x and that's usually
515:29 - desirable so the middle line disappeared
515:32 - we set that background color to
515:34 - transparent then we rotated the other
515:37 - lines the before and the after so now
515:39 - they form an x and of course we also had
515:42 - to set this to display block for the
515:44 - menu to show and now as i hover over
515:47 - these that other transformation of
515:49 - course makes each one of the words grow
515:52 - by 20 so we can tell what we're hovering
515:54 - over and then likewise if there's focus
515:57 - within here now i remove this and it
516:00 - changes so there we go and we can see
516:02 - that little bounce at the bottom too
516:05 - there we go
516:06 - now maybe we want to set a background
516:08 - color on the nav itself because i'm
516:12 - noticing that's bouncing a little bit
516:14 - lower and going into the white there so
516:16 - let's go back to the nav
516:19 - and find where oh it was actually
516:21 - underneath here so let's set a
516:23 - background color on the nav itself
516:26 - and here we'll say
516:28 - var and grab that same
516:30 - header background color
516:32 - and save now let's check out the bounce
516:34 - with the menu and yeah now we see that
516:37 - color stays with this last word instead
516:39 - of dipping into the white there that
516:42 - looks good but there's one more
516:44 - transform that we can apply and it's the
516:46 - one that i didn't before this goes to an
516:47 - x which is great but let's apply this to
516:49 - the hamburger menu as well so this is
516:51 - the
516:52 - menu icon and right here we'll say
516:55 - transform and now let's rotate
516:59 - and let's do
517:00 - 720 degrees so that's going to be
517:03 - a few full turns there at least a couple
517:05 - so now when i hover over you get the
517:08 - spin and then we have the x
517:11 - and that's a nice little effect as well
517:13 - so there everything is complete i hope
517:16 - this has helped you learn a lot about
517:18 - transformations transitions and even
517:20 - animations because they're very useful
517:23 - but you don't want to overdo it too many
517:25 - on a page can just be too much
517:28 - before we get to the final project in
517:30 - this css for beginner series there's one
517:32 - more topic to cover and that's
517:34 - organizing your css i've included a
517:37 - markdown file with this lesson and the
517:40 - sample code and it just is going to
517:42 - contain an outline of suggestions to
517:44 - organize your css and i say suggestions
517:47 - because there are no hard and fast rules
517:50 - there are different theories and
517:51 - different takes on this but the first
517:53 - one
517:54 - is possibly the most important and that
517:56 - is follow
517:57 - your team
517:59 - that's a very important rule to go with
518:01 - because if your team has already
518:03 - established how they're organizing the
518:05 - file you need to follow that pattern
518:07 - you're probably a junior dev getting
518:09 - started with them and you don't really
518:11 - want to rock the boat there just follow
518:14 - and
518:14 - of course use the pattern that they have
518:16 - and i'm sure there are reasons for that
518:18 - pattern
518:19 - after that we're going to have code
518:21 - examples to look at so our second reason
518:24 - here or second suggestion is to use
518:27 - comments to create headers or you might
518:31 - call them dividers as well labels if you
518:33 - will inside of your css now we've seen
518:36 - this already throughout this series as
518:39 - we've done a few mini projects and
518:41 - you've seen that i've provided these
518:42 - headers which are much like what mdn
518:45 - suggests throughout the css so here's
518:48 - our reset labeled and then i have one
518:51 - for the variables and then inside of the
518:53 - root pseudo selector here you can see i
518:55 - labeled colors there might be other
518:57 - variables that i would create and so i
519:00 - might have sub labels here inside of
519:02 - that pseudo selector for that then i
519:04 - have utility classes general styles and
519:07 - now we get down to blocks which is
519:09 - something we're going to talk about in
519:10 - just a little bit but this is just our
519:12 - starter css for the day but you can see
519:14 - how i've already organized it and those
519:17 - comments will really help you get back
519:19 - up to speed if you come back to your
519:21 - project a month later or anybody else
519:23 - that's working with you they'll easily
519:25 - find the section that they're looking
519:27 - for
519:27 - okay the third suggestion here is to
519:30 - sort properties
519:32 - and typically you sort those properties
519:35 - alphabetically but this is not
519:37 - everybody's choice some people prefer to
519:40 - sort properties in their own groups that
519:43 - they have
519:44 - chosen and mdn has some suggestions for
519:46 - that too so i'm going to put a link in
519:48 - the resources to that mdn page that has
519:51 - those other suggestions and also a link
519:53 - to an article that discusses sorting
519:55 - your css properties alphabetically now
519:58 - that's not how we write them so i'm
520:00 - going to show you what i do here in just
520:02 - a second but i want to give you a memory
520:04 - technique to remember this by sorting
520:06 - alphabetically at least in the english
520:09 - language we usually say that abc's which
520:11 - would be our alphabet so just remember
520:14 - abcss and that will help you remember
520:16 - sort alphabetically so a b c
520:19 - s s if you will okay i'll save the
520:22 - markdown file now let me show you an
520:23 - example of this and how to do this in
520:25 - visual studio code typically in a small
520:28 - project it's easy to find these and
520:31 - really i don't sort them so you can see
520:33 - i have margin padding and box sizing now
520:36 - if i did this alphabetically box sizing
520:38 - would be on top but that's not how i
520:41 - write css it's not what i'm thinking of
520:44 - when i write the properties like if i
520:46 - create a flexbox for example and we'll
520:48 - see that as we get down here to the body
520:52 - i have these properties i had display
520:54 - flex and then flex flow justify content
520:57 - and then align items well that starts
520:59 - with a but i don't think of it in that
521:01 - order i would write my css in this order
521:05 - but then to sort it alphabetically say
521:07 - when i'm done if i'm working with others
521:10 - and or i want to come back to the
521:12 - project later and of course just find
521:13 - the properties easily select all of
521:16 - these properties
521:17 - and then control p now i'm on windows
521:20 - that may be a little different on mac
521:22 - but control p to open up the command
521:24 - palette in visual studio code and then
521:26 - the greater than symbol and type the
521:29 - word sort you can see it shows mine says
521:32 - recently used sort lines ascending but
521:34 - you may not have that so type the word
521:36 - sort and then you'll see the different
521:38 - sort choices choose sort lines ascending
521:41 - and you can see it sorted these
521:42 - alphabetically for me so sort lines
521:45 - ascending is what you want from the
521:46 - command palette now they're sorted and i
521:49 - know what property say the specific
521:51 - property i'm looking for maybe align
521:53 - items it's right at the top or gap i
521:55 - know it's going to be right here
521:56 - alphabetically
521:58 - likewise this helps you find issues say
522:01 - you had a second
522:03 - gap or a second
522:05 - min height or display just you
522:07 - accidentally put the property in twice
522:09 - and one was defeating the other due to
522:10 - the cascade well you would find it when
522:13 - you sorted because then it would say put
522:15 - both displays on lines right beside each
522:18 - other so you would find those issues so
522:21 - sorting alphabetically the abcss is a
522:24 - good way to go now i'm going to press
522:26 - ctrl z to undo that because i'm going to
522:29 - come back and change this in a little
522:30 - bit and once again i'm thinking about
522:33 - these flex properties especially justify
522:35 - content and align items in that order
522:38 - and i know right where to find those
522:40 - again small projects it's much easier to
522:42 - just leave it this way
522:43 - okay back in the markdown here's the big
522:47 - one that we're going to spend most of
522:48 - our time on today and this is for larger
522:51 - projects you wouldn't typically do this
522:54 - in a small project but on a team larger
522:57 - projects they usually have a naming
522:59 - convention
523:00 - methodology so i'll put
523:02 - follow a
523:04 - naming
523:05 - convention
523:07 - methodology if i could spell that right
523:10 - there we go
523:11 - methodology and a very popular naming
523:14 - convention methodology
523:16 - is b e m which stands for block element
523:21 - modifier so block
523:24 - element
523:26 - modifier there we go so there are others
523:29 - this is just a popular one so i want to
523:31 - go over
523:32 - this popular version and of course your
523:34 - team may not use this they this may not
523:37 - be the one you adopt going forward but
523:39 - do know it exists and know that it is
523:42 - used a lot so you may see it out there
523:43 - in code example so now let's go back to
523:45 - our code
523:47 - and besides what we have here we start
523:49 - with a block here at the bottom so you
523:51 - can see i've defined a button class now
523:54 - typically even frameworks and libraries
523:57 - that you may learn later to work with on
523:59 - larger projects will apply classes to
524:02 - put most of the styles on the page and
524:05 - you can see other than the html and the
524:08 - body i'm really starting out here with
524:10 - the class and now above i have a utility
524:13 - class here and some variables but other
524:16 - than that just here in the reset i had
524:18 - of course the button and i might put an
524:20 - image here and set the display to block
524:22 - or anything else i'd want to do in the
524:23 - reset but after i get past the big
524:26 - elements of html and body i'm probably
524:29 - going to use classes and these naming
524:32 - conventions other frameworks and
524:33 - libraries that have been built by third
524:35 - parties those usually apply classes as
524:38 - well so we start out with a block
524:41 - and here it is also it says aka
524:44 - components you may hear some people
524:46 - refer to these as components instead of
524:48 - blocks but they're talking about the
524:49 - same thing now this has a semantic
524:51 - meaning it's important it's saying we're
524:54 - defining a button so the button has a
524:57 - width of 100 a height of 100 pixels both
524:59 - and a border radius of 15. this is our
525:02 - basic button style that we want to use
525:05 - on the page and when we go to our html
525:08 - we see three buttons and they all have
525:10 - that class button and of course they can
525:12 - have different content but then we get
525:14 - to the next part of block element
525:17 - modifier methodology and we're first
525:20 - going to look at the modifiers i'm going
525:22 - to scroll for a little more room here
525:24 - and i'll get that just right up to the
525:26 - top of the page and underneath i'm going
525:29 - to paste in some code and we can see
525:31 - those changes but notice what i've done
525:33 - i've i put another
525:35 - comment here that says modifiers now
525:37 - this isn't something you would need to
525:38 - do in your code i am just identifying
525:41 - these for you for the tutorial but what
525:43 - modifiers are about
525:45 - are about incremental style changes so
525:48 - here we're going to have blocks with
525:51 - modifiers so our button is the block
525:54 - and then we have two dashes not one if
525:57 - we were to name something
525:59 - we might have two words in the name and
526:00 - we could put one dash in between and
526:02 - this is why bem uses two dashes and
526:05 - later we'll see two underlines but these
526:07 - two dashes indicate that this is going
526:09 - to be a modifier and then you can see
526:12 - i've got the name secondary
526:14 - the other one i've got the name lean and
526:16 - the third one i've got border and here
526:18 - you see a name that has
526:20 - one dash in it so border and then lg
526:23 - stands for large so a large border so
526:26 - these are incremental changes we can
526:28 - make to the blocks with modifiers now we
526:32 - don't replace what we previously had the
526:34 - button class we add this in addition in
526:37 - our code so for example here on our
526:41 - second button
526:42 - we could put
526:43 - btn-secondary
526:45 - [Music]
526:48 - and i'll save once i spell secondary
526:50 - correctly and now you can see we have a
526:53 - yellow button notice in the html we've
526:55 - applied both the button class and the
526:58 - button secondary class likewise on the
527:01 - third button we could put our button
527:02 - dash dash
527:04 - lean
527:05 - and now we have applied that modifier as
527:08 - well to our block so our button lean
527:12 - modifier and the third button here is
527:14 - leaning and i believe we had another one
527:17 - let me look back yep
527:18 - border large so we could apply another
527:22 - class you can apply as many as you want
527:24 - to so we have button dash dash
527:26 - and then we said border dash
527:30 - large and save
527:31 - and of course now it's outlined in white
527:34 - so it's a little harder to see than what
527:36 - we had with the black border before but
527:38 - we'll change that here in the future but
527:39 - it did of course make it a little harder
527:41 - to see right now i could press alt z so
527:44 - that wraps well it didn't there it is
527:46 - it's already wrapping it just wrapped on
527:48 - part of that closing element but there
527:50 - we've applied
527:51 - modifiers to the blocks and these
527:54 - modifiers have provided incremental
527:57 - changes to our more important semantic
528:00 - blocks our buttons and those are the
528:03 - starting styles that we want and then of
528:06 - course we can modify them with each
528:08 - class that we apply okay let's move on
528:11 - to elements now but before we do that i
528:13 - need to add some html over here we're
528:16 - going to turn our three buttons into a
528:18 - header so i just need to add the rest of
528:20 - the header so i'll type header and add a
528:22 - class of header to start out but that
528:24 - closing header tag is going to need to
528:27 - come after all of our buttons as well
528:30 - so we'll add that much and save and you
528:32 - can see the changes will be over here to
528:34 - the right
528:34 - after that i'm going to add an h1
528:38 - and it's going to have a different class
528:40 - so it's going to have header two
528:42 - underscores
528:43 - and then title
528:45 - and there we go and then for the title
528:47 - i'll just put b-e-m for our block
528:50 - element modifier lesson and save that
528:52 - much now we see bem on the page
528:55 - after that i'm going to add a nav that
528:57 - will be wrapped around these buttons and
529:00 - it's going to have a class also that is
529:03 - header two underscores and nav and of
529:06 - course i need to put the closing nav
529:09 - after the buttons as well
529:12 - and i can save now we could say we're
529:15 - finished with this and apply some
529:16 - classes but let me first describe what
529:18 - i'm doing here so you can see
529:21 - our component is the header it is the
529:23 - important semantic element
529:26 - and now what's within it depends upon
529:29 - the header so we have a header with two
529:32 - underscores and then a title this is the
529:35 - element the e in bem the block element
529:38 - modifier methodology
529:40 - and then we also have another element
529:42 - that is dependent on the header and that
529:44 - is the nav
529:46 - now inside here we could say
529:49 - are these buttons dependent on the
529:51 - header or not because if we have a
529:54 - button style we're using throughout our
529:56 - site and not just in the header
529:58 - we would want to leave this as it is
530:01 - because this would be important so we
530:03 - don't have to redefine the same button
530:05 - style somewhere else however if these
530:08 - are buttons that we're designing a
530:10 - specific way
530:12 - just for the header then they would
530:14 - become dependent on that header and if
530:16 - that was the case then we would say
530:18 - header
530:19 - two underscores
530:21 - button and of course we would change
530:23 - everything else here so i'm going to
530:24 - select one button
530:26 - and then ctrl d to get the next
530:29 - and the next and there's one more there
530:31 - i've got all five of them now
530:33 - and now i'll arrow to the left and i'll
530:35 - put header
530:37 - two underscores
530:38 - and save and you can see we've changed
530:41 - each one of those classes now because
530:44 - they are dependent on the header it's
530:46 - also important to note that this does
530:49 - not display the structure so you might
530:52 - think you need to put header two
530:54 - underscores then nav and two underscores
530:56 - and then button that is not the case you
531:00 - only wanna start out with the major
531:02 - component the block name the b here so
531:05 - header
531:06 - two underscores and then whatever the
531:08 - actual element is so in this case it's a
531:11 - button in this case it's a nav and in
531:14 - this case well it's an h1 but we're
531:16 - going to call it title because that
531:18 - semantically makes more sense to me and
531:20 - you can do that again there are no hard
531:22 - and fast rules but if you're following
531:24 - this pattern
531:26 - the actual rules for the pattern are two
531:28 - underscores and then element likewise
531:31 - for the modifier two dashes and then the
531:34 - modifier so i'm going to save these
531:36 - changes and then let's go back and
531:39 - modify the styles that we have over here
531:41 - and include those elements as well so
531:43 - there is our block section and we
531:46 - actually need to include the header
531:48 - itself now inside of our block so i'll
531:50 - start here under our comments and say
531:53 - header
531:55 - then we're going to have a background
531:57 - color and i'm going to say var and
532:00 - change this to our
532:02 - header color or background color that
532:04 - was defined before so there's the b
532:07 - after that we would also have a color
532:11 - there we go color
532:13 - and i'm going to put another var
532:15 - two dashes and
532:17 - choose
532:19 - color
532:20 - after that we're going to have some
532:22 - padding i'm going to say one rim
532:24 - on the top one rim on the left and right
532:27 - and one half rim
532:29 - on the bottom
532:31 - we'll make this a display
532:33 - of flex
532:35 - flex
532:36 - dash flow
532:38 - whoops flex dash flow is going to be row
532:41 - and no wrap
532:43 - and then we'll justify content and we'll
532:45 - say space dash
532:48 - between
532:50 - we'll save that we definitely see a
532:51 - change but not everything we want yet
532:54 - let's go up and remove some things from
532:56 - the body all we really need to keep
532:58 - are the first three properties let's get
533:01 - rid of these bottom three
533:03 - and we'll save that and we see a few
533:06 - changes at the top not exactly
533:08 - everything we want yet but we're getting
533:09 - closer and i think i see i forgot the
533:11 - word header on the color so if i put
533:14 - that
533:15 - should change those to white letters
533:16 - that looks a little better as well and
533:18 - now let's add an element section that
533:20 - i'm going to put right after our button
533:22 - class and i'll just put the comments
533:24 - there it looks like it's wrapping here
533:26 - but what i wanted to add along with just
533:28 - the elements editor is
533:30 - the comment no standalone meaning in
533:33 - other words they're semantically tied to
533:35 - the block they are dependent upon that
533:38 - block so it's not just a button it's
533:40 - going to be the header button style and
533:43 - likewise it does not represent the
533:45 - structure so what we do not want
533:48 - is the header underscore two underscores
533:51 - nav to underscores button you would not
533:53 - want that you would just want header
533:55 - underscore button and i don't know why i
533:58 - have the period there looks well that's
534:00 - weird i'll control z to change that
534:03 - again maybe that's marking something
534:05 - let's see if i can just back up one
534:07 - not
534:08 - header nav underscore button and save
534:11 - okay i've got the comments there now i
534:13 - actually need to put in the style well
534:15 - it's going to be the same as the button
534:17 - so i'll just copy this
534:19 - control x to move it down put it
534:22 - underneath
534:23 - and paste it in but we're going to
534:25 - change this now to our
534:28 - header to underscores and button now we
534:31 - have our button style back in place for
534:33 - the header but we don't have any of the
534:35 - modifiers in place that we applied to
534:38 - the html so i'm going to select
534:40 - all three instances of the dot btn here
534:44 - arrow to the left
534:45 - one arrow to the right and type header
534:48 - two underscores and now they should once
534:50 - again be applied and we can see that so
534:52 - we have the yellow background here
534:55 - and we also have the leaning button here
534:59 - on the third one let's check that border
535:01 - large maybe we just need to change that
535:03 - color to see it better or we could apply
535:06 - another class that would help us see it
535:08 - better so besides
535:10 - the button
535:11 - lean and border large let's go ahead and
535:15 - apply the
535:17 - header to underscore
535:18 - button dash dash
535:20 - secondary to this third button as well
535:24 - and now we can see the yellow color here
535:26 - and then we see the white border as well
535:28 - notice there is a space between each
535:31 - class that we apply to these elements in
535:33 - the html okay jumping back to the style
535:37 - now we have modifiers that are applied
535:40 - to the elements instead of the blocks
535:42 - you can apply a modifier to either one
535:45 - but just know an element is going to
535:47 - have the two underscores and of course a
535:50 - block is just going to be the class
535:52 - defined such as header or previously we
535:55 - had dot btn for button now this all
535:57 - helps with organization and like i said
535:59 - when you're working on teams it's great
536:01 - to have that document communicate what
536:04 - you're working on as fast as possible
536:06 - and follow the pattern of the team and
536:09 - if you just have a large project on your
536:11 - own this may help as well one other
536:13 - thing this can help with and i want to
536:15 - show this with the element section is
536:18 - when we're selecting something
536:20 - it's good to say a class like dot header
536:23 - has a specificity of 10
536:26 - and we've seen that with the specificity
536:28 - calculator that should still be linked
536:30 - in the course resources however if we
536:33 - did this and then instead of using an
536:35 - element selector such as bem which is a
536:38 - class when it's all said and done this
536:40 - is just a class a header two underscores
536:42 - button instead of
536:45 - header space button if we did this which
536:48 - says the class and then the element
536:50 - within the class or any button elements
536:53 - within the class this has a specificity
536:56 - of 11 instead of 10 it's much better to
536:59 - keep that specificity even and using
537:03 - classes like this helps you do that as
537:05 - well so that is just an added bonus that
537:07 - i wanted to go ahead and mention i hope
537:10 - all of these suggestions help you
537:12 - organize your css in the future and i
537:14 - plan to use some of them coming up next
537:16 - on the final project
537:18 - welcome to the final project of this css
537:21 - for beginners course at the end of my
537:23 - html for beginners course we built a
537:25 - full website for the little taco shop
537:27 - that you see here
537:29 - it's a basic website with very minimal
537:31 - css applied but it provides a great
537:34 - foundation for our css final project
537:37 - we're going to take this basic html
537:39 - website and turn it into
537:41 - this modern website with responsive
537:43 - design by applying much of what we've
537:46 - learned about css
537:47 - let's get started today by looking at
537:50 - the starter code and this is available
537:53 - in the course resources you'll want to
537:55 - download this code because it is the
537:57 - full website that we completed at the
538:00 - end of my html for beginners course and
538:02 - it will give us a great foundation for
538:04 - this project now if you completed that
538:07 - you already know what all is in the code
538:10 - however if you hadn't let's quickly go
538:11 - over it we have a few html pages and
538:14 - we're going to make a few changes to
538:16 - those not many though
538:18 - and then we have an image folder img
538:21 - inside this image folder i've included
538:23 - some larger images today so we will be
538:26 - able to delete the smaller images i left
538:28 - those in as well though in case you
538:30 - wanted to launch the project as it was
538:34 - in the beginning as we finished it in
538:36 - the html for beginners course but the
538:38 - top names when you see the double names
538:41 - they end with the dimensions and of
538:44 - course the width on the smaller the
538:46 - older images is 400 pixels
538:49 - the width on the newer images is 1000
538:51 - pixels and i've included those
538:53 - dimensions in the file names so for the
538:55 - duplicates you always want to choose the
538:57 - one on top
538:59 - and then i have a fourth image that does
539:01 - not have a duplicate because we will add
539:03 - one page today
539:05 - but let's
539:06 - select those duplicates and then i'm
539:08 - going to press the delete key and now
539:10 - we're left with just our larger images
539:14 - likewise there was an examples folder
539:16 - and this just gave us example images
539:19 - of what the project looked like at the
539:22 - end of that html course if you wanted to
539:24 - complete the challenge at that point you
539:26 - were welcome to try to look at these
539:28 - images and complete that and then look
539:31 - at my code so let's click that examples
539:33 - folder and also press delete as we no
539:36 - longer need those files now there is
539:38 - very very minimal css applied to this
539:41 - project so we will be cleaning out
539:44 - everything that is in the css file you
539:46 - can press ctrl a to select all and hit
539:50 - backspace and delete those 19 lines of
539:53 - css that did exist so that gets us
539:56 - started now let's go to the index.html
539:59 - which is the home page and we'll start
540:01 - by looking at the head section the head
540:04 - section contains all of the meta tags
540:06 - that we would need in a project you can
540:08 - see author and description however there
540:11 - is one missing that we're going to have
540:12 - to add but since we're creating another
540:15 - new page and we're going to just include
540:17 - the about content that is currently
540:20 - in the index html we had an about
540:23 - section we're just going to make that a
540:24 - new page and abstract that just remove
540:27 - it
540:28 - from the index and put it in its own
540:30 - page today so let's go ahead and do that
540:33 - and then i'll show you what's missing
540:34 - from the head section in all of the
540:37 - pages we already have so let's click the
540:39 - new file icon
540:41 - then type well it looks like maybe i
540:43 - already included it here before i
540:45 - actually do that but you would want to
540:46 - click the new file icon because the
540:49 - about page would not be in the starter
540:51 - code i guess i typed that in earlier but
540:54 - now we have a blank html file i'm going
540:57 - to type an exclamation mark which is an
541:00 - image shortcut but if the shortcut
541:02 - doesn't pop up for you you can press
541:04 - control and the space bar and then you
541:06 - should see the shortcut menu and select
541:08 - this top
541:09 - abbreviation
541:10 - and this gives us the outline of a page
541:13 - now there's a couple of things it
541:14 - includes that we don't have in the other
541:16 - html files from that html beginners
541:19 - project one is this meta tag that has
541:23 - xua compatible ie equals edge
541:26 - they still include that with this image
541:28 - shortcut but it's not really necessary
541:31 - unless you're concerned about possibly
541:33 - supporting internet explorer which at
541:35 - this point
541:36 - has been discontinued and for the most
541:39 - part is no longer in use but you could
541:41 - include that the one that i want to make
541:43 - sure we include today is the next one
541:46 - meta with the name equal to viewport
541:49 - then the content is equal to width
541:51 - equals device width and initial scale of
541:54 - 1.0 we absolutely need that meta tag in
541:58 - the header of all of our html pages so
542:01 - we can make them responsive so i'm going
542:03 - to copy this and then i'll go back to
542:06 - that index.html
542:08 - and i'm just going to put it right
542:09 - underneath the utf-8
542:13 - that we have in the medic
542:15 - care set which is character set here in
542:17 - the head and of course we can remove
542:19 - that space and save and then i'm going
542:21 - to want to do that in the hours.html as
542:24 - well
542:25 - so i'll put that in get rid of the blank
542:27 - line ctrl s to save
542:29 - one more time in the contact dot html
542:33 - and we'll put it right after the utf
542:35 - dash eight line and save so now that
542:38 - we've done that back here in our about
542:40 - we could fill in all of these blank
542:42 - things that we have or we could just
542:44 - copy the pattern that we already have
542:47 - inside of the index.html so i'm just
542:49 - going to copy
542:51 - the full head section here the entire
542:54 - head element with the opening and
542:56 - closing tags
542:57 - go back to about
542:59 - and then i'm going to select it here
543:02 - and paste it in now i'll just change
543:04 - some information now i can see some of
543:06 - that's going off the screen so i'll
543:07 - press alt z
543:09 - and get that code to wrap so i can see
543:12 - everything you'll want to change of
543:14 - course my name in the author meta tag to
543:17 - your name
543:18 - and now for the description instead of
543:20 - the official website here we would just
543:22 - want
543:23 - about the little taco shop
543:26 - so this is the about page and that's
543:28 - what we have and we could put the same
543:31 - in the title about the little taco shop
543:34 - everything else is pretty much as we
543:36 - need it for now so i'll press ctrl s to
543:39 - save that
543:40 - and of course we see a little auto
543:42 - formatting now where it included the
543:44 - lines the spaces that you see here but
543:46 - we'll just leave it as is and then we
543:48 - will come back and get that information
543:50 - or abstract that out of the index dot
543:53 - html when we get to that point now
543:56 - moving back to the index.html file i'm
543:59 - going to scroll down and we have a
544:01 - header section already clearly defined
544:04 - but we can see it goes clear off the
544:05 - page i don't have the closing tag here
544:07 - yet however everything we see here is
544:10 - really all i want in the header now we
544:12 - had a figure here with an image but
544:15 - we're going to pull that out of the
544:16 - header and put it inside of its own
544:18 - section so select everything from the
544:21 - opening figure to the closing figure and
544:24 - i press control x to cut
544:27 - and then i'm going to backspace and
544:28 - remove those spaces and then i'm going
544:31 - to type
544:32 - section and press tab and so i get a
544:35 - closing tag as well
544:36 - and then press return
544:38 - or enter so i get a new line and then
544:40 - i'm going to control v to paste that
544:43 - figure in so now the section contains
544:46 - the figure and the header contains the
544:48 - nav and the h1 and i'm going to do that
544:51 - on all of the pages
544:53 - but and i'll remove that hr which was
544:55 - the horizontal rule
544:57 - however i want to apply some classes
545:00 - here as well that will help us format
545:02 - our css so before i make these changes
545:04 - to the other pages let's apply those
545:07 - classes in the final lesson before this
545:09 - project we learned about the bem block
545:12 - element modifier naming convention and
545:15 - i'm going to use that sum today for each
545:17 - section of the page so we'll start here
545:20 - with a class and we're going to set this
545:22 - equal to
545:24 - header the same as the element name and
545:26 - it will be the parent class for
545:29 - everything inside so when we label the
545:31 - h1
545:33 - we'll say class
545:34 - and here i'm going to say header two
545:36 - underscores and h1
545:39 - likewise for the nav we'll say class
545:41 - equals and then we'll have header two
545:44 - underscores
545:45 - and nav
545:47 - and when we get to the unordered list
545:49 - we'll say class equals
545:51 - and then we'll have header
545:53 - two underscores if i could find that
545:55 - underscore key again and then ul
545:58 - but then i'm not going to apply classes
546:01 - to the list items some may want to do
546:03 - that and that would be okay this is a
546:06 - small project and i don't have any plans
546:09 - to put styles directly on these list
546:12 - items so i can accomplish everything
546:14 - we're doing today without doing that so
546:17 - i'll leave that as is however we do need
546:19 - to rearrange some of the menu so i'm
546:23 - going to select this top list item for
546:25 - about and press control x to cut it out
546:28 - we'll leave the menu as the first
546:30 - selection the second selection will be
546:32 - the hours page the third will be the
546:35 - contact.html
546:37 - so at the bottom i'm going to paste in
546:40 - the
546:41 - what was the first list item it's now
546:43 - the last list item but it will no longer
546:46 - be an anchor tag that goes to part of
546:48 - this page it's going to go to the
546:51 - about.html page so we'll switch that
546:54 - over
546:55 - and we don't really need to have the
546:58 - whole abbreviation here so i'm going to
547:00 - remove that it was good to learn about
547:01 - abbreviations in the html course but now
547:05 - we'll just use the word about because
547:07 - that pretty much sums it up likewise we
547:09 - can change contact us to contact
547:13 - and store hours can just simply be
547:16 - changed to hours likewise our menu
547:20 - can just be menu and that will still
547:23 - indicate what these pages are all about
547:26 - now let's scroll down to our section
547:28 - that contains the figure and we're going
547:30 - to call this a hero section it's the
547:32 - part of the page after the header where
547:34 - you usually see a large image or an
547:36 - attention getter that's often referred
547:38 - to as the hero section so let's give
547:41 - this section a class
547:43 - and we'll just set it equal to hero and
547:46 - then inside we're going to put an h2
547:49 - element that is not currently there so
547:51 - we'll type h2 press tab and we can
547:54 - complete the closing tag that way
547:57 - now let's give this h2 a class equal to
548:01 - hero two underscores and h2 and we're
548:05 - going to put a welcome here that the
548:07 - owner of the little taco shop wants us
548:09 - to add and it's going to say
548:11 - bien
548:12 - benitos which i believe is saying
548:15 - welcome in spanish as well so we'll just
548:17 - have that h2 there and this won't be on
548:20 - every page it's only going to be on the
548:22 - home page after that we have some
548:25 - changes to make to our figure itself now
548:28 - the figure can just stay there as is so
548:31 - really what needs to be changed is the
548:33 - image and maybe applying a new class to
548:36 - the fig caption so we're going to start
548:38 - off with the image and it's still the
548:40 - tacos and drink image but the dimensions
548:43 - have changed so we just need to change
548:44 - the name so it's going to be 1000 and
548:47 - you can see vs code knows what's in our
548:49 - image folder and it wants to help us
548:51 - complete that the alt will stay the same
548:54 - the alt attribute the title will stay
548:57 - the same but now we need to go ahead and
548:59 - supply the actual dimensions so we can
549:02 - avoid that content layout shift
549:04 - that may happen and that was discussed
549:06 - previously in a lesson as well of course
549:08 - we will be styling this image to be a
549:11 - responsive image too
549:13 - and then we're going to give the fig
549:15 - caption a class while we're here and
549:17 - this class is going to be off screen
549:20 - and what that does if you remember when
549:23 - we had covered that in a previous lesson
549:25 - is it will take this caption
549:28 - off the screen but it will leave it
549:30 - available for screen readers for
549:32 - accessibility so that is important as
549:35 - well so it won't be viewable but it will
549:37 - be readable and now we need to structure
549:39 - these top two sections the header and
549:42 - the hero section in all of the other
549:44 - html files as well so we have a good
549:46 - foundation before we start in on the css
549:49 - so i'm going to scroll up for now
549:52 - and select
549:53 - this header on line 15 and scroll all
549:56 - the way down to line 44 where the
549:58 - section ends i'll hold down the shift
550:00 - key and click my mouse
550:03 - select all of that because right now our
550:05 - about.html does not have any of this
550:07 - content so i'll press ctrl c to copy
550:11 - and now i'll go to the
550:12 - about.html page
550:14 - and inside the body element i'm going to
550:17 - paste all of that in now it will
550:19 - currently be the same as we have on the
550:22 - index page but we can make some changes
550:24 - here and the first change we're going to
550:26 - make is to select this last list item
550:30 - and control x to remove it from the
550:33 - bottom of the list and it will now go
550:35 - once again
550:37 - at the top of the list so ctrl v to
550:39 - paste but it's not going to go to the
550:41 - about page we just want to put in a
550:44 - slash which means it will be the root
550:46 - page that will take us back to the home
550:49 - page so we'll type home there
550:51 - and then the next one should go to not
550:53 - just
550:54 - hashtag menu because that means it would
550:56 - be on the same page it should go to the
550:58 - home page which is the slash and then
551:01 - hashtag menu and that will take
551:04 - the
551:05 - visitor back to not only the home page
551:07 - but then to that particular spot on the
551:10 - home page which is the menu so now we've
551:13 - completed or adjusted the menu
551:15 - for our about page but then we also need
551:19 - to change this header so instead of
551:21 - welcome to the little taco shop let's
551:23 - just put
551:25 - little taco shop at the top of our about
551:28 - here
551:29 - and then after that we can scroll down
551:31 - and change our hero section just a
551:34 - little bit as well so we're not going to
551:36 - have the h2 bian benitos on
551:39 - the about page we're just going to have
551:41 - the figure and this is going to be a
551:44 - different
551:45 - image here so this one will take the
551:47 - last part of this image file because
551:49 - this is named taco delicioso tacos
551:53 - delicioso if i could pronounce that
551:55 - correctly and then we'll have a
551:57 - different caption here as well which
551:59 - should say
552:00 - tacos
552:02 - delicioso
552:04 - i could double check my spelling on that
552:07 - as well
552:08 - and let me go ahead and check the title
552:11 - tag the title is basically the same so
552:13 - i'll copy that but we'll put an
552:15 - exclamation mark in there because the
552:17 - title and the alt do not have to be the
552:19 - same the dimensions are the same 1000 by
552:23 - 667 we're once again going to have a
552:26 - class of off screen on the fig caption
552:28 - but the caption should be different so
552:30 - this will be try these
552:33 - delicious
552:35 - tacos and we can save and now we have
552:38 - the header
552:39 - and the hero section complete
552:41 - on the about page so now we can make the
552:45 - same similar changes to the other two
552:47 - pages we have but we won't need to paste
552:50 - in the content we really already have it
552:52 - there so let's go to the hours page
552:55 - and we can scroll down
552:56 - and look at that menu and what we're
552:59 - going to have to do is apply those
553:00 - classes once again but we essentially
553:03 - already have the menu that we're going
553:05 - to need to have on the hours page we're
553:07 - already linking to home
553:09 - however the next one should be menu so
553:12 - let's cut out that about with the
553:14 - control x
553:17 - and we will link to the home page and
553:20 - then the hashtag menu
553:22 - and then we'll have hours after that i'm
553:26 - sorry we won't have hours after that
553:27 - we're on the hours page we're going to
553:29 - have contact and then we'll have the
553:32 - about page which once again
553:34 - needs to remove the slash in the hashtag
553:37 - and we'll say about
553:38 - dot html
553:40 - and alt z to wrap this code because we
553:43 - no longer need the about lts it will
553:46 - just be about and then we'll make those
553:48 - similar changes here no longer contact
553:51 - us it will be contact no longer our menu
553:54 - it will just be menu
553:55 - and then home so we can save now let's
553:58 - scroll down and we'll take that figure
554:01 - once again ctrl x to remove it
554:04 - and then underneath the header
554:06 - create just a little space i'll
554:08 - highlight that hr to remove it we'll
554:10 - type
554:11 - section and now in the section we'll
554:13 - paste in our figure
554:15 - and then i'll give just a empty line
554:18 - after the section and we're now ready to
554:20 - apply the classes as we expect to have
554:23 - them here on the hours page as well or
554:25 - we i guess we could go ahead and change
554:27 - the details on the figure it's going to
554:29 - be tacos tray again but it's going to be
554:33 - 1000 by 667 i believe but let's check
554:36 - this because vs code will help us so
554:39 - tacos tray there we go 1000 by 667
554:44 - and then the rest of this won't change
554:46 - except the dimensions so 1000 by 667
554:51 - and then the fig caption once again is
554:53 - going to need that class
554:55 - equal to
554:57 - off screen
554:58 - there we go now we need to add the class
555:01 - up above which is hero
555:04 - and save now let's go ahead and scroll
555:06 - up and we'll apply those header classes
555:08 - once again at the top for the hours page
555:11 - so we have
555:12 - class equals
555:14 - header and then i'm just going to copy
555:17 - this to save just a little time
555:20 - paste it into the h1 paste it into the
555:22 - nav and paste it into the ul
555:25 - and now this first one is going to be
555:26 - two underscores in h1 the next one is
555:29 - going to be two underscores and nav and
555:32 - the last one is going to be two
555:34 - underscores and ul and now we've added
555:37 - the classes we need one more time let's
555:39 - make those same changes to the contact
555:42 - page now so our starter will be the
555:44 - header with a class of header the h1
555:48 - will then have a class of header
555:50 - two underscores in h1
555:52 - the nav will have the class of
555:55 - net our header two underscores and nav
555:58 - and the unordered list will have a class
556:02 - of header
556:03 - two underscores and ul for an ordered
556:05 - list looks like i put some extra spaces
556:07 - in there i'll remove but we've applied
556:10 - the class to the header let's look and
556:12 - see if we have the menu in the order
556:14 - that we want it as well so we want to
556:16 - start with home and then about is okay
556:19 - but once again it needs to be to the
556:21 - about page here so we'll say about
556:24 - dot html
556:26 - and we're going to remove the
556:28 - abbreviation alt z to just wrap that
556:30 - code so we can see it all remove the
556:32 - abbreviation so it's just an about link
556:35 - which we will select with control x then
556:38 - and remove
556:39 - and put it at the bottom of the list
556:42 - and the second one should be menu which
556:44 - is where we really want customers to go
556:46 - then hours
556:48 - and about there so that is in the
556:49 - correct order we'll remove the extra
556:51 - wording so we just have menu
556:54 - hours and about and save and now finally
556:57 - one more figure to remove to put in its
556:59 - own section element so highlight that
557:01 - control x to remove it
557:04 - we'll leave the header to itself i'll
557:06 - delete that horizontal rule element
557:09 - then above here we'll add the section
557:11 - element inside we'll go ahead and add
557:13 - the figure the section will be a class
557:16 - equal to
557:17 - hero
557:18 - and then here we have tacos close up so
557:21 - this is going to change as well so we'll
557:24 - say tacos now we've got close up 1000 by
557:27 - 649 which is just a little different so
557:31 - delete that and now the height here is
557:34 - 6.49
557:35 - the fig caption once again gets the
557:37 - class
557:38 - equal to
557:40 - off screen and save and now we are
557:43 - finally ready to write some css and what
557:46 - we're going to do at the top is what
557:47 - you've seen me do at a lot in a lot of
557:50 - different tutorials and that is import
557:52 - some fonts from google i'm going to
557:54 - control b so you can see this full line
557:56 - for just a second
557:58 - and notice i'm importing two fonts here
558:00 - so after the url you see family equals
558:03 - and there's fugaz one and then there's
558:06 - also nunito that you've seen me use in
558:08 - several tutorials using both of those
558:11 - fonts today and if you remember from the
558:14 - typography lesson of how we can go get
558:16 - those fonts from fonts.google.com
558:20 - you can do that and then import those
558:22 - into your css as i have after that we're
558:25 - going to have a css reset it will be
558:28 - fairly minimal
558:29 - and you have seen minimal ones
558:31 - throughout some of the lessons but let's
558:33 - go ahead and label our sections as we
558:35 - create our style sheet today it's going
558:37 - to start out with the everything
558:40 - selector the all selector but then a
558:42 - couple that you may not have seen that
558:45 - are commonly in resets that i did not
558:48 - add in the lesson on sudo elements but
558:51 - you see these pseudo elements so you
558:53 - also see the all selector with the after
558:56 - and the all selector
558:58 - with before so we're going to do that
559:00 - for all of those
559:01 - and then we'll put in what you typically
559:03 - see me put the margin
559:04 - zero padding of zero
559:07 - and then a box sizing of border box now
559:11 - that's not all of the reset that i want
559:13 - to use today but that's a great start we
559:15 - also need to put something in for the
559:17 - images and this will make all of the
559:18 - images display block which gets rid of
559:22 - that minimal little space below the
559:24 - images that they were originally
559:27 - designed to be in line so they have that
559:29 - little spacing problem and that will
559:30 - remove that then we'll set the max width
559:33 - to 100
559:35 - and we'll set the height to auto and
559:38 - this will make the images responsive for
559:40 - our project
559:41 - i'm going to ctrl s to save that much
559:44 - and then scroll just a little bit
559:45 - there's a few more styles to add to this
559:48 - reset
559:49 - the
559:50 - form elements like input text area and
559:53 - button for example the ones that we're
559:55 - going to use today so we'll say input
559:58 - button
559:59 - text area all three of these and other
560:01 - form elements that you may use do not
560:04 - inherit font properties
560:06 - like other elements do so we need to say
560:09 - font
560:10 - inherit if we want that to happen and
560:12 - when i save we'll probably see them
560:14 - formatted yep on three separate lines
560:16 - there but that is the end of my reset
560:19 - for this project
560:21 - okay after that i'm going to add another
560:23 - section and this is where i will define
560:26 - css variables now i'll define these as i
560:30 - need them and then be able to come back
560:32 - and reference them so i'll just say
560:34 - variables here
560:35 - and then as you know that starts in the
560:39 - root selector so i'll just have a
560:41 - selector here and then inside i'm going
560:44 - to have some labels too and the first
560:46 - one that we will do today is font and i
560:49 - know what i'm already going to do for
560:50 - font so i can at least add one variable
560:52 - now and that will be ff for font family
560:56 - and the main one that i'm going to use
560:58 - is that
560:59 - nanito font and then after that i'm
561:02 - going to have the fallback of sans serif
561:05 - and then for the headings on the project
561:08 - is where i'm going to use the other font
561:09 - so i'll say font family headings and
561:12 - here i'm going to use
561:15 - let me spell this correctly fugaz
561:18 - 1
561:19 - and then it has a fallback of cursive
561:22 - okay i can add just a few more variables
561:24 - that i know i'm going to use right away
561:26 - and the other one for fonts is the font
561:29 - size so i'll just call that fs and i'm
561:32 - going to use the clamp function that we
561:34 - learned about so the font can grow and
561:37 - shrink and this is modern css this helps
561:40 - us
561:41 - prevent adding it prevents us or keeps
561:44 - us from adding
561:45 - many media queries as some older css
561:48 - might have done so our page can stay
561:50 - more responsive without having an
561:52 - abundance of media queries attached to
561:55 - it
561:55 - so our minimum size today will be one
561:58 - rem
561:59 - and then we'll allow it to grow
562:01 - at 2.2
562:03 - viewport units based on the height
562:05 - and then the max size would be 1.5 rent
562:08 - that's what we'll put in and so that
562:10 - will allow the font to grow as the page
562:12 - gets larger and of course it will stop
562:15 - so it doesn't get any smaller than one
562:17 - rim okay after these fonts variables i'm
562:21 - also going to put in another
562:23 - note here for colors i like to define
562:26 - all of the colors
562:28 - in variables and that way i can just
562:30 - change them in one spot and see how they
562:32 - work together i will be coming back to
562:34 - add more colors here but i'm going to
562:36 - start off with a background color and i
562:39 - just want a basic
562:40 - orange it's going to match something
562:43 - that's in the photo that we have
562:45 - and i think that's going to look good
562:47 - then i'm also going to use a background
562:50 - color dash
562:52 - fade and that's because we're going to
562:54 - use a linear gradient now i've picked
562:55 - out this color it is a
562:57 - fade of the orange color so i'm using
563:00 - rgb and that's 2 5 2 2 two zero
563:04 - one six zero
563:06 - and you'll see it's a faded orange
563:09 - after that
563:10 - i'm going to use background image to
563:12 - create this gradient that we're going to
563:15 - fade with
563:16 - so here i'll say
563:18 - linear gradient
563:20 - and then we'll go to the bottom
563:23 - and then we'll put in our variables that
563:25 - we just created above so we'll start
563:27 - with the background color
563:30 - and after the background color we'll put
563:32 - a comma
563:33 - another variable
563:35 - and we'll start in and we'll go to the
563:37 - background color fade so we'll start at
563:39 - the top with the full orange and we'll
563:41 - fade down to that faded color
563:44 - okay that's looking like a pretty good
563:46 - start but i could put in just a couple
563:48 - more for the body so
563:51 - just underneath this i'm going to put in
563:53 - two dashes
563:54 - and
563:56 - body dash
563:58 - background color so i'm planning on a
564:01 - different background color for the body
564:03 - element than i am the html element and
564:05 - you'll see how that works here i'm just
564:07 - going to put in a basic white with
564:10 - hexadecimal code
564:12 - and it looks like i left out the
564:14 - semicolon over there there we go so now
564:16 - everything formats better
564:18 - and then we'll just have our standard
564:20 - font color i don't even need to say body
564:22 - font color it's going to be the main
564:24 - font color
564:25 - and this will just be a black with
564:28 - hexadecimal code as well okay i will be
564:30 - coming back to add more variables but
564:33 - right now i want to move on to the next
564:34 - section and just add a few
564:37 - utility classes that i always use so i
564:41 - know what i need to put here i'll put in
564:43 - utility classes normally i would
564:45 - probably just copy and paste these from
564:48 - a file that i would already have written
564:49 - them in before but we'll go ahead and
564:51 - write these out we've got our
564:53 - off-screen class and this is a style i
564:56 - use to move elements off the screen but
564:59 - yet keep in the document flow so a
565:01 - screen reader will still read the
565:03 - content but maybe i don't want them to
565:05 - appear visually on the page so i'm going
565:07 - to say
565:09 - position
565:10 - and we'll set that to absolute
565:13 - and then i'll say left and we'll say
565:15 - minus 10 000 pixels so it will be way
565:19 - off the page
565:20 - the next class i need is no wrap and
565:23 - this is when i want to ensure that some
565:26 - of the text does not wrap in an area
565:28 - that is awkward and we can do that with
565:30 - the white space property and then we'll
565:33 - just set that to no wrap and we'll see
565:35 - how we apply that class later and the
565:38 - final one is simply a center when i want
565:40 - to center text that say in a paragraph
565:43 - or in a heading we need the
565:46 - text align and we can set that to center
565:49 - with the utility styles complete we're
565:51 - now ready to finally start applying some
565:54 - styles directly to elements and classes
565:57 - so i'm going to bring vs code to the
565:59 - left and go ahead and launch the project
566:02 - to the right now remember we removed the
566:05 - few styles that did exist
566:08 - and everything we've created so far
566:10 - really doesn't apply to the page except
566:13 - for that reset at the beginning so we
566:16 - have removed more than we have added to
566:18 - the current project but we now have
566:20 - variables ready to apply and utility
566:23 - classes ready to apply but we also want
566:26 - to add what i would call general styles
566:29 - so let's put in a section here
566:32 - and we'll
566:33 - label this the same way we have the
566:35 - other sections are in the same style
566:37 - and now with our general styles heading
566:40 - we'll start with the html element itself
566:43 - now i'm going to use a different color
566:46 - on the html element that will be the
566:48 - background for the body element but if
566:50 - you remember from some previous lessons
566:53 - we also use scroll behavior on the html
566:56 - element and we'll set this to smooth and
566:59 - this allows a smooth transition to when
567:01 - we
567:02 - link to other parts of the page and
567:04 - we'll still be doing that on the home
567:06 - page this index.html
567:09 - when we go to the menu that will be
567:11 - located
567:12 - below the big image and so in the second
567:15 - half of the page so we'll have scroll
567:17 - behavior smooth
567:19 - and if i save that you won't see any
567:21 - changes to the page because that affects
567:24 - more of a behavior but i'm going to try
567:26 - to save after every property applied so
567:28 - you can see those changes the next one
567:30 - we'll apply is font size and we'll use a
567:33 - variable for font size that we already
567:35 - created
567:36 - and now when i apply that we'll save and
567:39 - you see the font size instantly got
567:41 - larger and that reminds me earlier when
567:45 - i applied the font size variable above i
567:48 - believe or that was in the background
567:51 - color fade let me bring this back to
567:52 - full screen quickly because i think it's
567:54 - in the linear gradient
567:56 - vs code tried to help me out and it
567:58 - accidentally added a second var to each
568:01 - of these that should have been noted
568:03 - when the video was created as well so
568:06 - hopefully you've already caught that
568:08 - error but i need to correct it here so
568:10 - now we just want one bar each in that
568:12 - linear gradient and we'll save and if we
568:14 - come back now to the page
568:17 - we don't see a difference yet because
568:18 - that's not applied but it will be
568:20 - applied here very soon so down here in
568:23 - the general styles once again in the
568:24 - html we have increased the font size now
568:28 - let's say font
568:30 - family
568:31 - and we'll use the other variable we
568:33 - created there which was ff
568:36 - and if i save again we should see the
568:38 - font family has changed and it does for
568:40 - the page
568:41 - after that we're going to set a
568:43 - background color
568:46 - and this will be a variable as well and
568:49 - it's the bg color we see here in the
568:51 - list and i just want to make sure vs
568:53 - code doesn't add a second var
568:55 - now you can see we've changed to that
568:57 - orange that we set but now this is
569:00 - actually the fallback because we're
569:01 - going to use the background
569:04 - dash image
569:06 - and here we're going to use that
569:07 - background image variable we created
569:10 - and we'll find that here in the list as
569:12 - well and save and now we should see it
569:15 - go from orange to that lighter orange as
569:18 - we scroll down the screen and that's
569:20 - what happens so it's a linear gradient
569:22 - from a full orange to a lighter orange
569:25 - but this will change as well as we apply
569:27 - some styles to the body so we'll see how
569:30 - this is going to be applied to the
569:32 - overall page now here we're going to
569:34 - have a background dash color as well and
569:37 - this is the variable
569:39 - and here we started this with body so
569:41 - it's the body background color
569:45 - and now we'll go to the next line and
569:47 - save i can see this is wrapping just a
569:48 - little bit so i'm going to press alt z
569:51 - so anytime it wraps it'll just go down
569:53 - to the next line for us so we can see
569:55 - everything
569:56 - okay now we want to set a font color now
569:59 - currently you notice it changed
570:01 - everything because the body is
570:02 - completely over the html element that
570:05 - will change when we adjust the width of
570:07 - the body as well but for now we'll just
570:10 - see white again so now the color for the
570:12 - font will be
570:14 - variable and this will be the font color
570:16 - variable that we set
570:18 - and really we shouldn't see a change
570:20 - because it's basically the default font
570:22 - color of black
570:24 - now let's have a min height for the body
570:27 - and we'll set that to 100 viewport units
570:29 - of height
570:30 - and if i save we shouldn't see much of a
570:33 - change because it's already taking up
570:35 - over 100 viewport units of height
570:38 - already
570:39 - after that we'll set a max width
570:42 - to 800 pixels now i'm not sure of the
570:45 - width here to the left but we can see
570:48 - really 800 pixels is still within the
570:51 - range of this so let's drag this over
570:53 - and look at the full page expanded now
570:56 - and now we can see here was the 800
570:59 - pixels and now we see the html element
571:01 - behind that goes ahead and expands to
571:04 - the full width of whatever
571:06 - viewport is available so we see that
571:09 - orange that linear gradient fade here we
571:12 - will change this so the body will be in
571:14 - the middle and we'll see orange to the
571:16 - left and the right
571:17 - i'll move this back to the right for now
571:19 - and now underneath this we need to
571:21 - define a couple more things one is going
571:23 - to be the margin for the body zero on
571:27 - the top and bottom but auto on the left
571:30 - and right will center this so when i
571:32 - save again we don't see the change here
571:33 - but when i drag this over we now see the
571:36 - body is centered bringing this back to
571:39 - the right we want to add some borders a
571:41 - border on the left and the right so i
571:44 - need to set a borders variable and a
571:46 - border color variable so i'm going to
571:49 - scroll back up here to the colors
571:52 - and let's set this border color variable
571:54 - first so we'll say border
571:57 - dash color
571:58 - and this is going to be a flat black so
572:01 - 333 for the hexadecimal you can see it's
572:04 - a flatter black compared to the true
572:06 - black that's above it here with zero
572:08 - zero zero then i'm going to put in
572:10 - another comment here and just put
572:14 - borders some might put the border color
572:17 - under borders but i want all of the
572:19 - colors grouped together so that's just
572:20 - my preference
572:22 - now here four borders let's go ahead
572:25 - and set this borders variable that we
572:27 - might use more than once in our project
572:30 - as well
572:31 - and this is going to be
572:32 - one pixel
572:34 - solid
572:35 - and now let's go ahead and use the
572:37 - borders color variable that we created
572:41 - now vs code once again put in
572:43 - two vars so i have to watch out for that
572:46 - when i've already typed var sometimes it
572:48 - wants to insert that for me okay we've
572:50 - created a border color variable and a
572:53 - borders variable we'll scroll back down
572:56 - to the body element
572:58 - and to finish out the body element we're
573:00 - going to say
573:01 - border left
573:03 - we're going to set this to
573:06 - borders
573:09 - and now i'm going to press shift alt and
573:11 - the down arrow so it just copies that
573:13 - down because i also want a border
573:16 - dash right but i don't want it on the
573:18 - top or the bottom and then i'm going to
573:21 - set well let me go ahead and save and if
573:23 - i bring this over you can probably see
573:26 - the borders
573:28 - just barely outlining the left and the
573:30 - right
573:31 - but now i want to set a box shadow as
573:34 - well on the body
573:37 - and that will be 0 0
573:40 - so what we would typically see for the x
573:42 - and y but then there's a blur and i'll
573:44 - set that to 10 pixels
573:46 - and i'll use that border color again
573:50 - there we go
573:51 - and
573:52 - save
573:54 - and now of course we can't see it here
573:56 - but when i drag this back over we can
573:58 - see there's a little bit of blur
574:01 - along each side and that's what we want
574:03 - just a nice subtle effect so as we
574:06 - scroll the page and we'll see it stand
574:07 - out even more on this lighter orange at
574:10 - the bottom you can see the blur
574:12 - along the left and the right of the body
574:15 - here where we have our center column
574:17 - okay dragging this back i'm going to
574:19 - scroll for some more room and then we
574:21 - have just a few more general styles to
574:23 - apply before we get to classes and the
574:25 - different sections of the page let's
574:28 - have our and i'll want lower case here
574:30 - h1 h2 and h3 headings on the page
574:34 - we're going to apply the font family
574:37 - which was for the headings so that's
574:39 - dash dash ff and then we'll select
574:42 - headings
574:43 - and that will change
574:45 - the headings font you can see that
574:46 - change on the page immediately and then
574:49 - we're going to apply some letter spacing
574:51 - now we could do this with pixels or
574:54 - different values i'm going to use ems
574:56 - which would essentially be the same
574:59 - as referring to the font size that's
575:02 - already on each heading so the spacing
575:05 - will vary
575:06 - based on which type of heading that it
575:08 - is
575:09 - and if we looked at this as a rim
575:11 - instead of an em
575:13 - then it would be one tenth of that
575:17 - setting so what we have for the font
575:20 - size already at the smallest was one rim
575:23 - but at the largest it was one and a half
575:25 - so that could be anywhere from 16 pixels
575:28 - to 24 pixels so one tenth of that would
575:32 - be anywhere from 1.6 pixels to 2.4
575:35 - pixels but this will just space out this
575:38 - font i think this heading font
575:40 - needs just a little extra space so when
575:42 - we save you can see the letters have now
575:45 - spaced out just a little bit more
575:48 - now i'll select the h2 and the h3 but
575:51 - not the h1 we have a couple of styles we
575:54 - want to apply here so we have a margin
575:56 - dash
575:57 - bottom
575:58 - so on the bottom only we'll set that to
576:00 - 1 m
576:02 - and now we're going to use a separate
576:03 - color so i need to define a highlight
576:05 - color up above in the variables again so
576:08 - here we have
576:09 - dash dash and i'll say highlight dash
576:12 - color because we might highlight other
576:14 - things on the page besides headers with
576:16 - this variable as well so i called it
576:18 - highlight color it's a color i've picked
576:20 - out to go with the orange but it's not
576:22 - orange it's 51
576:25 - 178 51
576:27 - and save and you can see it's a green
576:30 - color much like we'd see here on the
576:33 - bottle of giarito's
576:35 - over here this mandarin has a nice
576:37 - orange but it also has a bit of a green
576:39 - in the label so let's try that with the
576:42 - highlight color as well so now using
576:44 - this highlight color
576:46 - and scrolling back down to the h2 and
576:48 - the h3 we'll set the color here and
576:52 - we'll be var
576:53 - and we'll use
576:55 - highlight color
576:57 - now that we have that and saved we
576:58 - should see that change on the page and
577:00 - yes our bienvenidos
577:02 - and about lts and taco trivia has all
577:06 - changed as well as our menu and remember
577:08 - this about section is going to get moved
577:11 - to the about page we just haven't moved
577:13 - it yet
577:14 - okay after the h2 and the h3
577:17 - i'm going to select the paragraphs on
577:19 - the page
577:20 - and set their line height which this is
577:22 - something i frequently do it looks a
577:24 - little bit better
577:26 - and
577:27 - we'll just set it to a little bit larger
577:29 - value it doesn't have to have a specific
577:31 - m or ram or pixel here line height going
577:34 - way back to our typography lesson can
577:36 - just be a numerical value here so we've
577:39 - set it to 1.5 you might not see much of
577:41 - a change from that but there's a little
577:43 - bit let me take it away
577:46 - and save
577:47 - and yeah you might see just a bit of a
577:49 - change there but not a whole lot but i
577:51 - like something i do like to add okay the
577:54 - paragraph has the line height
577:56 - let's look at our links on the page up
577:59 - here so these are going to be our main
578:01 - links
578:02 - on the whole project really we don't
578:04 - have a whole lot of extra links so i'm
578:06 - going to select
578:07 - the anchor which would be
578:10 - a link of course you have to have an
578:11 - href with it but just to select the link
578:13 - itself and then we can say
578:15 - any link which is a pseudo class
578:18 - selector
578:19 - and this any link pseudo class selector
578:21 - if you remember selects both the
578:24 - links that have not been clicked and
578:27 - links that have already been visited and
578:30 - so here we'll say color
578:32 - and now we're going to need to set a
578:34 - link color variable as well as hover and
578:38 - active so i'm going to scroll back up
578:40 - and find that colors list of variables
578:43 - and we'll go ahead
578:45 - and set the
578:47 - link color variable link
578:49 - dash color
578:50 - this will just be a black color again
578:53 - and then we'll set also
578:55 - link
578:56 - dash hover
578:58 - and here we'll use hsla which will allow
579:01 - us to
579:02 - have a black color but then we'll also
579:05 - have this transparency and i'm going to
579:07 - say
579:08 - 0.6 so it's 40 percent transparent
579:12 - and 60
579:14 - visible essentially
579:16 - after the link hover variable we'll also
579:18 - set a link dash
579:20 - active
579:21 - and for that we're going to set it to
579:22 - orange which is the same as that html
579:25 - background
579:26 - let's save those three variables and
579:29 - scroll back to our links that we're
579:31 - styling and here for link color we'll
579:34 - say var and then dash dash
579:37 - link and it is our link color that we're
579:39 - selecting
579:41 - and then the next one we'll have would
579:43 - be the anchor
579:45 - with a hover
579:46 - but then also let's say anchor and you
579:49 - could say focus but here i'm going to
579:50 - use focus
579:52 - visible which the difference is
579:55 - the focus might remain on the selected
579:59 - element
580:00 - however focus visible after it's used it
580:03 - will change and it might not not make
580:04 - much of a difference in this project but
580:07 - it's something i've started to use more
580:09 - and more instead of just using focus so
580:12 - here i'm going to say color
580:14 - var and we'll set this to once again
580:16 - link but it's link hover
580:19 - and we'll put the semicolon after that
580:21 - as well we can save those changes we see
580:24 - we've got black links here the hover of
580:27 - course is already working so you can see
580:29 - it fade now as we hover over each one of
580:32 - those but then after both of those we
580:35 - still need the active state as well so
580:38 - we have the active pseudo class selector
580:40 - and here we're going to say color
580:43 - and not color with parentheses color and
580:45 - then var
580:46 - parentheses dash dash
580:49 - link and it's going to be active there
580:52 - we go
580:53 - save and so now if we were actively
580:56 - selecting a link so when i click on it
580:58 - you can see it turns orange and menu is
581:00 - still fairly small up here
581:02 - but when i hold down the mouse button
581:04 - the link turns orange and now our
581:06 - general styles are finished for the
581:08 - project so we are ready to move on to
581:10 - the header section so i'll add a label
581:13 - inside of our style sheet for the header
581:16 - and then we will start applying styles
581:18 - to the header section i'll scroll up so
581:20 - this header is at the very top here
581:23 - and well at the very top there we go and
581:26 - then the first style will apply is now
581:28 - to the header class because we started
581:30 - using bem the block element modifier
581:34 - naming convention when we get to the
581:36 - sections and the first one we applied
581:39 - that to was the header so we'll say
581:41 - position
581:42 - and we'll make the header a sticky
581:44 - positioned element
581:46 - we'll put the top at zero so it's at the
581:48 - very top and then we need to put the z
581:50 - index to a setting of one so it stays on
581:53 - top of everything else that might scroll
581:55 - under it and when i save
581:57 - we don't see much of a change yet but we
581:59 - certainly will soon
582:01 - the next thing we'll style is the header
582:03 - two underscores and the h1 so the title
582:05 - of the page itself and here we're going
582:08 - to say
582:10 - text
582:11 - align
582:13 - and we'll set that to center and save
582:15 - and you can see that text did center now
582:18 - we've got just a few more variables to
582:20 - add so i'm going to scroll back up to
582:21 - the variables once again and we're at
582:24 - the colors list and i'm going to add a
582:27 - header dash bg color
582:30 - and here we're going to set that
582:31 - background color to black as well
582:34 - after that we'll set a header dash color
582:37 - and i'm going to set that to white
582:40 - and then after the header color while
582:42 - i'm here i'm going to go ahead and set a
582:44 - nav
582:45 - background color and set that to white
582:48 - also so we've set three new colors there
582:51 - then underneath the border section i'm
582:54 - going to add another label and say
582:56 - standard
582:58 - padding
582:59 - and i'm going to create a couple of
583:00 - variables here so
583:03 - padding let's say dash tb and that means
583:06 - top bottom so you might want to
583:08 - abbreviate that differently to
583:11 - communicate that better i just happen to
583:13 - use that abbreviation this time i'm
583:14 - going to set this just a 0.25
583:18 - em
583:19 - and then the next one is
583:21 - padding dash side not size but side so
583:26 - on the left and the right and
583:27 - differently here i want this to be 2.5
583:30 - percent so total if i apply this to both
583:34 - sides it will take up five percent of
583:36 - the width i'm going to save that you
583:38 - won't see a change applied because we
583:39 - haven't applied any of these variables
583:42 - yet and then while i'm here one more to
583:44 - add will be a
583:47 - standard margin
583:49 - and underneath that we'll just say
583:51 - margin variable and i'm going to use
583:53 - clamp again here so
583:55 - at the smallest it will be 1 em and then
583:58 - we'll set it to 2.5 viewport height
584:01 - units and then 1.5 em will be the
584:04 - largest it would possibly be now that
584:06 - this is for the top and the bottom on
584:08 - the left and the right i'm going to set
584:10 - it to zero so even though that wrapped
584:13 - what we did was apply clamp to the first
584:15 - value of the margin shorthand and then
584:18 - we applied 0 to the second value which
584:21 - would be the left and the right
584:23 - okay with those variables defined now
584:25 - let's scroll back down to that header
584:28 - section where we were applying other
584:30 - styles so we had the header and we were
584:32 - at the header h1 i'm going to apply the
584:35 - background color now so i'll say
584:36 - background dash color
584:39 - this will be var and then we'll have our
584:42 - header background color that we could
584:44 - select
584:46 - and i'll save and we can see that change
584:48 - now it is all black so we need to apply
584:50 - a color
584:51 - and this will be var as well two dashes
584:54 - and header color
584:57 - and now that we've selected that we will
584:59 - save and now we can see welcome to the
585:01 - little taco shop across the top once
585:03 - again
585:04 - after the color let's apply some padding
585:07 - and we're using the shorthand here for
585:09 - padding so we'll say var
585:11 - two dashes and padding and this will be
585:13 - top and bottom first and then we'll say
585:16 - var
585:17 - two dashes for
585:18 - padding and this would be the padding on
585:20 - the sides and we'll save and we got just
585:23 - a little bit of padding now to apply
585:26 - itself to the top and the bottom left
585:28 - and the right
585:29 - for the header it looks like i'm not
585:31 - closing that out properly so put that
585:34 - extra curly brace there we go and we're
585:37 - finished with the header h1 now so now
585:39 - let's move down to
585:41 - header two underscores and nav
585:44 - now for the nav we're going to have a
585:46 - separate background color variable that
585:48 - we created so var two dashes
585:51 - and here it will say
585:53 - nav background color
585:55 - and now something to discuss quickly you
585:57 - may be wondering why i created these
585:59 - extra variables and yet some of them
586:01 - have the same color values well i'm
586:04 - specifically naming them so i know where
586:06 - they apply and later on when we create a
586:08 - dark mode they may vary more than they
586:11 - are varying now in the light mode so
586:13 - it's good to have that extra control and
586:15 - extra labeling over these color
586:17 - variables
586:18 - okay now that i've applied that
586:20 - background color let's add a
586:23 - border i want lower case here border
586:25 - dash bottom to our nav
586:28 - and there i'm going to say var and apply
586:30 - that
586:31 - borders variable that we created so
586:34 - there's borders
586:36 - and i can save that and we now see a
586:39 - line across the bottom here of the nav
586:42 - because it's also within this header
586:44 - element
586:46 - and then after that border let's say
586:48 - font dash weight we'll set that to bold
586:51 - when we save we should see those links
586:53 - change a little bit the font definitely
586:55 - changed there
586:56 - and what else can we apply let's say box
586:59 - dash
587:00 - shadow
587:02 - 0 for the x 6 pixels for the y
587:06 - 5 pixels for the blur but this is going
587:08 - to be a shadow that looks like it's
587:10 - coming straight down so then we'll also
587:12 - set a minus 5 pixels
587:15 - and that offsets that blur and then
587:18 - we'll have
587:19 - var and we'll set the color here to the
587:21 - border dash
587:23 - color and save
587:25 - and now we get this nice little straight
587:27 - down shadow underneath that bottom
587:30 - border
587:31 - of the nav the navigation but also
587:34 - essentially the header itself and
587:36 - finally we need to style the unordered
587:39 - list so adding the
587:42 - header to underscores unordered list
587:45 - and here we'll start out with some
587:47 - padding and i'll say var
587:49 - dash dash
587:51 - padding and this would be the top and
587:52 - the bottom and then once again we'll say
587:55 - var
587:56 - hash dash padding and this would be the
587:59 - side value
588:01 - save that now you can see those dots for
588:03 - the unordered list were brought back in
588:05 - so we know we've added that extra
588:07 - padding it has just a little more room
588:09 - but now let's say list
588:10 - style
588:12 - type we'll set that to none which should
588:15 - remove those dots beside each list item
588:18 - now a display of flex and when i save
588:21 - you'll see that change because it
588:23 - instantly makes it a row by default
588:26 - we'll say justify content
588:29 - space
588:30 - bash
588:31 - evenly
588:32 - and we'll save and now it spaces out
588:34 - those items
588:36 - and then let's add a gap
588:38 - and let's call the gap one rim so
588:42 - what we expect there and so we
588:43 - definitely have
588:45 - a
588:46 - gap between those items even if they
588:48 - were all squeezed together if the screen
588:50 - got smaller and now a couple of quick
588:52 - notes on the header before we move on
588:54 - one is we did learn how to make an
588:56 - animated mobile header but we're not
588:58 - applying it to this project because it
589:00 - would essentially be overkill we've just
589:03 - got the four links
589:04 - and four pages to the project and we can
589:07 - easily link to those on mobile or in
589:10 - desktop by just listing them out here on
589:12 - the page so you don't always have to
589:15 - apply everything you know how to do to
589:17 - every project and i didn't want to do
589:19 - that to this project and it's worth
589:20 - noting why
589:22 - also we previously had welcome to the
589:24 - little taco shop across here but that's
589:27 - really a lot so quickly i will open the
589:30 - file tree
589:31 - go to the index.html
589:34 - and bring this back and let's scroll up
589:36 - and find our h1
589:39 - welcome to the little taco shop and
589:41 - let's just remove the welcome to the
589:44 - because what we really want is just
589:46 - little taco shop across the top after
589:49 - that we can go back to the file tree
589:51 - once again select the css and hide the
589:55 - file tree i know we're squeezing all the
589:57 - code over here to half the screen so we
589:59 - can see the page more often but when i
590:02 - bring it back you'll find that it's not
590:03 - wrapping and it may be a little easier
590:06 - for you to read so if you're working on
590:07 - it with me maybe you're just viewing the
590:09 - code like this so you can see those
590:12 - longer lines where we've used some
590:13 - variables are not wrapping to a second
590:16 - line now when i bring it over and look
590:18 - at it like this
590:19 - so i just wanted to show you that i'm
590:21 - going to bring this back to the left and
590:24 - now likewise we can bring the project
590:26 - over and look at it in full screen as
590:27 - well and you'll see it's coming together
590:29 - a little bit better we've definitely got
590:31 - some changes to make yet however this
590:35 - has certainly helped and if we look at
590:36 - the other pages since we put in that
590:38 - work ahead of time to put in the correct
590:41 - image
590:42 - changes to the html to create those hero
590:45 - sections
590:46 - and of course apply the classes to the
590:48 - header and the nav as well we see those
590:50 - changes applied as we go to each page
590:53 - already so we're making a lot of
590:55 - progress we just have some more progress
590:58 - yet to make so now i'll drag this back
591:00 - to the right and we can begin the next
591:03 - section and that next section is our
591:06 - hero section so right underneath our
591:08 - last header style we'll create a new
591:10 - label and we'll call this the hero
591:13 - section with the label
591:14 - and for that we'll start out with our
591:16 - hero class which if you remember is
591:18 - applied to that section element and
591:20 - we'll say it's position relative because
591:23 - we're going to place something absolute
591:26 - inside of that hero section as well
591:29 - after that we have a hero h2 and if you
591:32 - remember this is only
591:35 - on the home page our index.html and that
591:38 - is our bienvenidos welcome here so after
591:41 - that we can go ahead and apply some
591:43 - styles to that and the background dash
591:46 - color
591:47 - for that h2
591:49 - is going to be a new variable i need to
591:51 - create so let's scroll back up to this
591:54 - color that will have in our variables
591:56 - list once again there's all the colors
591:59 - so at the bottom here we're going to
592:01 - call this two dashes in hero dash color
592:04 - and now this color is very much like our
592:06 - highlight color so it's rgb
592:09 - 517851
592:12 - but then we also need
592:15 - a transparency color here so we could
592:18 - make this rgb a so we can have that
592:22 - transparency and then this will be 0.75
592:27 - and i don't need the extra parentheses
592:29 - so that means it will be 75 viewable and
592:33 - 25
592:34 - transparent so when we scroll back down
592:37 - let's apply this to that hero background
592:40 - color here so we'll say var
592:43 - dash dash hero and there's the hero
592:46 - color
592:48 - after this hero color and i can save and
592:51 - we're not seeing much of a change right
592:53 - now but we will here in the future we'll
592:54 - say a color and actually i'm realizing i
592:57 - just labeled that wrong and i also need
592:59 - a hero color but i also need a hero
593:01 - background color so if i could label
593:04 - those correctly in my mind it would
593:05 - definitely help us out so let's go back
593:07 - up here this should be the hero
593:09 - background color that i just created
593:12 - instead of the hero color so let's label
593:14 - this
593:15 - bg there we go underneath this we're
593:17 - going to have a
593:20 - hero dash color
593:22 - and the hero color itself should just be
593:25 - white once again for now okay now we
593:28 - should apply these correctly you can see
593:30 - when you get many colors it can be very
593:33 - helpful to label those and think about
593:35 - them in
593:36 - a good order and i'm not always doing
593:39 - that even when i do take all the other
593:41 - precautions so now i've got a hero
593:43 - background color for the background
593:45 - color and here
593:46 - this should be var
593:48 - dash dash hero
593:51 - color for the font and now save and
593:54 - since it disappeared i think i may have
593:57 - possibly applied something incorrectly
593:59 - even now so let me shoot back up to the
594:01 - top and take a second look at these hero
594:04 - colors here and i see what i've done
594:05 - wrong i have rbga instead of rgba so it
594:09 - just takes one typo to set something off
594:12 - rgba and now we should be good and we
594:14 - have the green color there and you can
594:16 - see our green background now for that h2
594:20 - with the white lettering here at the top
594:22 - and of course we're going to change this
594:24 - some more if you remember when i
594:26 - previewed the project at the beginning
594:28 - we saw this is really an animated
594:30 - drop down let's add some more styles to
594:33 - this h2 before we approach the animation
594:36 - so we'll say padding
594:37 - and here we'll have 0.25
594:40 - m and then 0.5 m on the left and the
594:43 - right we save that we can see that extra
594:46 - padding applied
594:48 - letter spacing
594:49 - and here let's give this a 0.1
594:52 - rim so again just that 10 percent which
594:55 - should space it out just a little bit
594:58 - after the letter spacing let's say
595:00 - text dash shadow
595:03 - and so we can apply a shadow to this
595:05 - lettering we'll say 2 pixels x offset 2
595:08 - pixels y
595:09 - 5 pixels blur
595:11 - and now let's use that border color
595:14 - variable
595:15 - that we have used in the past for
595:17 - shadows and we save now that helps that
595:19 - white stand out just a little bit it
595:22 - lifts it up off of that green background
595:24 - just a bit because of that shadow
595:27 - now we need to say position
595:31 - absolute
595:32 - and we're going to move this to the top
595:36 - and it's going to be
595:38 - minus 100
595:41 - pixels
595:42 - and first let me save this before i move
595:45 - it so you can see what changes it
595:46 - instantly
595:48 - makes it
595:49 - an element that is not in the document
595:51 - flow and a block element would of course
595:54 - span the 100 width but now because it is
595:57 - removed from that flow due to position
596:00 - absolute it does not have 100 width as a
596:03 - block element normally would okay now
596:06 - let's go ahead and move it off the page
596:09 - to start out when the page loads so this
596:11 - would be minus
596:13 - 100 pixels but before i do that even i
596:16 - guess i should show where we're going to
596:18 - place it to the left and the left would
596:20 - be 20 pixels this value will not change
596:23 - so it's just moved in just a little bit
596:25 - but now
596:27 - the top will be minus 100 pixels and now
596:30 - it should disappear
596:32 - and it will disappear it has disappeared
596:34 - but it will of course be animated and
596:37 - drop down and reappear once we apply
596:40 - that animation
596:41 - and now we need to create the animation
596:44 - itself and then we'll apply it so here
596:47 - let's say at
596:48 - keyframes as we learned in our animation
596:51 - lesson
596:52 - and let's say show welcome is the name
596:54 - of our animation
596:56 - we'll start out with a zero percent so
596:59 - where it starts out at the very
597:00 - beginning
597:01 - we'll say the top is going to be minus
597:04 - 20 pixels instead of that minus 100
597:07 - and now we'll transform we're going to
597:09 - do two transforms we're going to have a
597:11 - skew
597:12 - and that will make that lean just a
597:14 - little bit we'll say zero degrees
597:17 - and then minus five degrees
597:20 - after that we'll also have a scale y
597:24 - and we'll set that to zero to start out
597:27 - with
597:28 - okay after the zero percent now let's
597:30 - say at eighty percent
597:33 - and this is where i like to give it just
597:35 - a little bit more than it actually ends
597:37 - up with so it gives it just a little bit
597:39 - of extra movement or bounce so we'll say
597:42 - the top is 30 pixels now will definitely
597:44 - be visible
597:45 - the transform it needs to start out
597:48 - essentially with the skew again and
597:51 - we're going to move the skew just a
597:52 - little bit so i'm just going to copy
597:54 - these so we can just change the values
597:55 - inside
597:56 - paste those in and so now instead of 0
597:59 - degrees it's going to be 10 degrees here
598:01 - we'll leave that at -5 degrees and the
598:04 - scale instead of 0 is going to be
598:06 - 1.2
598:08 - and now let's get our finishing values
598:10 - at 100 for the animation
598:13 - here this will be a top at 20 pixels
598:17 - and then we'll once again have the
598:19 - transform and i'm just going to copy
598:20 - that down
598:22 - and this would be a
598:24 - minus 10 degrees and a minus five
598:27 - degrees and then the scale is going to
598:30 - be one instead of 1.2
598:33 - and when i save you won't see anything
598:34 - yet because we haven't applied the
598:36 - animation but now let's go ahead and
598:38 - apply that animation here so we'll say
598:40 - animation
598:42 - and this is the show
598:44 - welcome animation
598:46 - we'll make it take a half second to
598:48 - complete we'll start with the ease in
598:51 - and out transition
598:53 - and let's give it a delay now i could
598:57 - make this longer to be more dramatic but
598:59 - let's give it say a
599:01 - one second delay so we see the page load
599:03 - and then we get a little welcome drop
599:05 - down
599:06 - and we'll use the forwards property here
599:08 - which means it will keep the state
599:11 - of when the animation ends so it will
599:13 - remain visible as well let's save and
599:16 - see what happens
599:17 - there's our welcome now to see it again
599:20 - we'll have to of course navigate away
599:22 - and come back to the home page
599:24 - but then we see our welcome drop down
599:26 - that's a nice little animation to go
599:28 - with our project now let's move this
599:31 - over to a full screen
599:33 - and of course this is how it appears
599:35 - here but if i go ahead and press ctrl
599:37 - shift and i or we were to right click
599:40 - and choose inspect let's choose a mobile
599:43 - device like the iphone 6 7 and 8 and
599:46 - make sure it's still positioned
599:48 - correctly i can go to a hundred percent
599:50 - view we can see it a little bit better
599:53 - let's reload
599:55 - and there's our welcome so yes it's not
599:57 - crowding into the image too much and
599:59 - everything looks good it's always good
600:01 - of course to check your mobile design as
600:04 - you go and i've been leaving the screen
600:06 - open so we can see everything but
600:09 - typically i do design for the smallest
600:11 - first and you do want to check this
600:13 - along the way and we will continue to
600:15 - check it so for now i'm going to go back
600:17 - to full screen
600:18 - and drag this back over to the right
600:20 - with the animation complete i'm going to
600:22 - drag vs code back over to full screen
600:25 - now and we need to look at a couple of
600:27 - sections in the html that are on every
600:30 - page before we get to specifics about
600:33 - each page and those remaining sections
600:36 - are the main element and the footer
600:39 - element so let's go to the footer of the
600:42 - index html first
600:44 - because i usually like to style that
600:46 - after the header so once we get down to
600:49 - the footer itself we can see we have
600:51 - footer here with no class currently
600:53 - let's go ahead and add the class of
600:55 - footer as we did with the header before
601:00 - and then let's also apply some classes
601:02 - here to our copyright line so we have
601:05 - copyright and then the html entity which
601:09 - is the copyright symbol right here and
601:12 - then we have the little taco shot well
601:14 - we want to wrap this in some span
601:16 - elements inside of this paragraph so
601:19 - these lines do not break where we do not
601:22 - expect them to we don't want the little
601:24 - taco shop or we could just put little
601:26 - taco shop we don't want this line to
601:28 - break so let's put a span element here
601:32 - and now of course it generates the
601:33 - closing span element immediately i'll
601:36 - put the closing paragraph
601:38 - tag on a separate line and paste the
601:41 - closing span afterwards i'm going to do
601:43 - the same here too for copyright
601:47 - i guess i need to create the element
601:49 - instead of just typing span there we go
601:51 - we can copy that
601:53 - closing span and put it here so we've
601:55 - wrapped both of these in span elements
601:58 - now let's give them both the class
602:00 - equal to no wrap one of those utility
602:03 - classes we created that ensures
602:05 - that this line will not break in the
602:07 - middle of this content and this line
602:09 - will not break in the middle of this
602:11 - content
602:12 - so that helps us by
602:14 - ensuring this presents itself in the way
602:16 - we want it to this will not
602:18 - prevent it from being all on one line
602:20 - but if we're on a smaller device and it
602:22 - needs to wrap the lines it's going to
602:24 - break where we want it to and not in the
602:26 - middle of that content somewhere else
602:28 - let me go ahead and remove that extra
602:30 - line there
602:32 - and then let's apply some styles to the
602:34 - footer but we can also put this footer
602:37 - in each of the html pages so after i
602:41 - save the index and copy the footer i can
602:44 - go to the hours page and i can replace
602:47 - the footer that is here and we will not
602:49 - need that hr that horizontal rule so
602:52 - i'll highlight it as well just to remove
602:54 - it when i paste that in let's do the
602:57 - same for the contact page
603:00 - and put that in here paste and save and
603:03 - then we'll also need to do that in the
603:05 - about page but if you remember the about
603:07 - page doesn't have everything else yet so
603:10 - it doesn't even have a main element that
603:12 - we will be adding but let's save this
603:14 - for now and now go back to the index now
603:17 - that we've updated the html for the
603:19 - footer let's do the same for the main
603:22 - element and this will not take much at
603:24 - all
603:24 - right now we have a main element with no
603:27 - class and as you can expect we'll put a
603:29 - class equal
603:31 - to main here
603:32 - and then here we have an article that
603:34 - has the id of about well this is going
603:38 - to be moved to the about page so let's
603:40 - select this full article here
603:43 - down to the closing tag and then i'll
603:45 - control x
603:47 - i'll go to the about dot html
603:50 - and this is going to go inside
603:53 - of a main element that has the class of
603:56 - main and you can see i created that with
603:59 - the image shortcut by typing main dot
604:01 - main and it instantly created the main
604:03 - element that has a class of main
604:05 - inside we'll paste that article which
604:08 - will be the content inside of this main
604:10 - element now i'll save this much and
604:12 - we'll come back but now let's go back to
604:14 - the index.html
604:16 - where we need to label the article
604:18 - that's inside of this main element so
604:21 - i'm going to highlight that hr and
604:23 - remove it as well
604:25 - but now the article that's in here has
604:27 - an id of menu but it also needs to have
604:30 - some classes and the first class we're
604:33 - going to apply here is going to be main
604:35 - two underscores
604:37 - article because each main element on
604:40 - each of these index pages in the project
604:42 - contains an article if not more than one
604:45 - article so we will label that and we'll
604:48 - make sure that this is the only article
604:50 - that's inside the main and if it's not
604:52 - we will need to change it but it looks
604:54 - like it is and that's fine it contains
604:57 - the menu which we will come back to as
604:59 - well but those are the two main classes
605:02 - that every html page in the project will
605:05 - need so let's go to the hours now
605:08 - scroll up to the main here and it looks
605:11 - like it doesn't currently have an
605:13 - article but we need to apply the class
605:16 - equal
605:17 - main and to stay consistent here let's
605:19 - go ahead and add an article element to
605:22 - this html page so we have article
605:25 - i will go ahead and cut out the closing
605:28 - tag and paste it above the closing main
605:31 - tag and now let's give this the class
605:34 - that is expected as well so it is
605:37 - main two underscores
605:39 - article
605:40 - and save that now let's go to the
605:42 - contact page
605:44 - and here in the contact page you can see
605:47 - we have two sections
605:49 - and an h2 so let's go ahead and apply
605:52 - the
605:53 - class equal to main and let's change
605:55 - these section elements to articles to
605:58 - stay consistent with the rest of the
606:00 - main content here and you can see we
606:02 - have
606:03 - a opening and closing and we have two
606:05 - section elements so i'm going to press
606:06 - ctrl d and i got the closing ctrl d
606:09 - again to get the opening of the second
606:11 - one and ctrl d one more time to get that
606:14 - closing tag now i can just type article
606:16 - once and it changed all of those
606:19 - but now i need to select just the
606:22 - opening article so i'm going to select
606:24 - the full thing including the less than
606:26 - and greater than sign ctrl d again and
606:29 - it just selects the opening article of
606:31 - the second one
606:33 - the right arrow to get to the end the
606:35 - left arrow wants to get just behind the
606:38 - word article and now i can add a space
606:41 - type class
606:42 - and then set that equal
606:44 - to main two underscores
606:46 - and article and now this should be
606:48 - applied to both so we've got it here on
606:51 - the top article and we've got it on the
606:54 - second article that is on the contact
606:56 - page one other quick change to the
606:58 - contact page is i want to put the our
607:01 - location information above the contact
607:04 - form so let's control x
607:07 - and then just move up here above this
607:10 - article
607:11 - and paste in our other article so we've
607:14 - just switched that information around so
607:16 - now that our location information with
607:17 - the telephone is on top and the contact
607:20 - form is on bottom and finally let's go
607:22 - to the about html and you can see we
607:25 - have a class of main that we applied
607:26 - already but now
607:28 - let's apply the same class here that is
607:31 - main two underscores and article and
607:34 - save because i believe if i remember
607:36 - correctly there was only one article for
607:38 - this page as well so now we've made all
607:41 - the adjustments for the main element and
607:43 - the footer element on each of the html
607:46 - pages let's select the
607:48 - style.css file once again and pull our
607:50 - code over to the left so we can see the
607:52 - project on the right and now we can
607:54 - continue to make some more changes after
607:57 - we have styled the hero section we're
608:00 - now ready for the footer section so i'm
608:02 - going to put in a label in the style
608:05 - sheet for footer
608:07 - and now we can apply those styles with
608:09 - the footer class
608:11 - and here this is going to be
608:13 - position
608:15 - sticky as well as the header because we
608:17 - want it to stay in place so the bottom
608:20 - will be zero so that will put it
608:22 - directly at the bottom
608:24 - and i'll save that much and let's go
608:26 - ahead and scroll so we can see the
608:28 - footer down here it's our copyright with
608:30 - copyright symbol and the little taco
608:32 - shop
608:33 - now let's go ahead and add a background
608:36 - color
608:38 - and this background color
608:40 - will be the variable and we'll just
608:42 - apply
608:43 - the header background color so it stays
608:46 - in sync with the header
608:48 - and if i save yes it all turns black so
608:51 - we need to of course apply the color
608:54 - and this should be the header color as
608:57 - well
608:59 - and we can save that and now we see the
609:02 - font is white they're on top of the
609:04 - black background
609:05 - let's apply some padding as it looks
609:07 - pretty scrunched right now so we'll say
609:10 - padding top and bottom we are using that
609:13 - shorthand again so the next one would be
609:17 - padding side
609:19 - and now we'll go ahead and save that so
609:21 - there's just a little extra padding
609:23 - around that
609:24 - now let's put text
609:26 - align
609:27 - and set that to center and save and so
609:30 - now we can see our copyright with the
609:31 - copyright symbol and the little taco
609:33 - shop is centered and we have our footer
609:36 - across the bottom it stays in place when
609:38 - we scroll as does the header i'm going
609:41 - to copy this heading we put in here for
609:43 - the footer and then i'm going to scroll
609:45 - up and put in a very similar heading for
609:48 - the main element so i want all caps
609:51 - again to make that change after that
609:53 - let's directly style that main class
609:55 - first
609:57 - and speaking of copying it's going to
609:59 - get the same padding that we had here so
610:01 - i'll just copy that
610:02 - and put that in for the main and when i
610:05 - save we'll see we get a little extra
610:07 - space here with our menu our menu is not
610:09 - looking so great right now and it's one
610:11 - of the last things we'll do so let's
610:13 - start looking at some of these other
610:14 - pages the hours look pretty good they
610:16 - got just a little bit of extra space
610:18 - from that padding or the about has a
610:20 - little more information on it as well
610:22 - and so we can see some of that there
610:24 - let's go back to the hours for now okay
610:27 - after we've applied that basic padding
610:30 - to the main element itself
610:32 - we have the main
610:33 - two underscore
610:35 - article class
610:36 - and here let's apply a scroll dash
610:39 - margin dash top
610:41 - and this will be 6.5 rims you usually
610:44 - have to play around with this value to
610:46 - see what works based on your project and
610:48 - how much space possibly your nav is
610:50 - taking up because what this is going to
610:52 - do is enable the article information to
610:55 - show instead of scrolling underneath the
610:58 - header and then let's set a margin here
611:00 - and we'll just use our var
611:02 - and margin and save now this is
611:05 - something we actually would see back on
611:06 - the home page now if we choose menu and
611:09 - it scrolls well we're not on a device
611:12 - right now that would actually use up the
611:14 - page or we haven't expanded this menu to
611:16 - take up more room but what will happen
611:19 - will
611:20 - be it will prevent the menu from
611:22 - scrolling underneath this header if we
611:24 - have a taller menu or we're taking up
611:26 - more room by the time we have finished
611:28 - the styles that's probably what will
611:30 - happen
611:31 - okay a couple of extra things to put now
611:34 - and one of these at least we'll see
611:37 - differently on maybe the contact page
611:39 - because it has some extra room here
611:41 - already
611:43 - so let's go ahead and apply these styles
611:44 - let's say
611:47 - main and we'll select the article as
611:51 - well and now let's say the first
611:54 - child pseudo selector
611:57 - and we'll give this a margin dash top
612:00 - of 1 em so this would be the first child
612:05 - that we would see here the first article
612:07 - and that would be the same on any page
612:09 - it gives just a little more room between
612:11 - that hero image and the rest
612:14 - and now i'm going to copy this down so
612:16 - shift alt and the down arrow
612:19 - add the extra space and this will be for
612:22 - the last child and we do have the one
612:24 - page that has
612:26 - two different children and that has the
612:29 - our location and the contact form so for
612:32 - this last child we want to calculate
612:35 - some height here so
612:37 - let's say min dash
612:40 - height we're going to calculate
612:43 - we'll take 100
612:45 - vh which would be 100 width or 100
612:48 - height pardon me of what is available
612:51 - now let's just subtract 20
612:54 - rims from that and save
612:56 - to give it just a little extra room to
612:58 - scroll and this might be more visible
613:00 - when we don't have as much content such
613:03 - as well the about page has some if we go
613:05 - to the hours page
613:07 - let's see now we have some extra room
613:09 - here as well so if we remove this
613:13 - and then save
613:14 - we don't have that extra room it's kind
613:16 - of scrunched it's nice to have that
613:17 - extra scrolling room and that's why that
613:20 - is being applied so again preference as
613:22 - a lot of cs css is a preference
613:25 - now we have just a little extra room
613:27 - there for the scroll and now we're ready
613:29 - to move on to individual page sections
613:32 - i'm going to drag vs code back over to
613:34 - full screen i'll scroll up here and
613:37 - copy the main comment divider that we
613:40 - have or label if you will
613:42 - and here i'm going to switch this
613:45 - to
613:45 - about and save so we'll start in on our
613:48 - about page in the about section i'm
613:51 - going to do something different here
613:53 - that some may agree with or may not
613:56 - agree with with bem but i don't want to
613:59 - refer to the main
614:01 - as the parent for the about information
614:04 - i want the word about there so we know
614:07 - it's on the about page so i'm going to
614:09 - add another class here
614:12 - that is just called about and that goes
614:15 - to the article so then what i refer to
614:17 - inside of this article instead of
614:19 - referencing main as the parent i'm going
614:22 - to reference about it just makes more
614:24 - sense to me for these classes in
614:27 - particular and i've only got a couple to
614:29 - apply but i want class
614:31 - about and then i'm going to use two
614:33 - underscores trivia
614:35 - and then on the paragraph that has the
614:37 - answer i'm going to say class
614:40 - and then equals this will be about
614:43 - answer so we have about trivia and about
614:46 - answer and even better than that i think
614:49 - i might put the word trivia here as well
614:51 - so trivia dash answer it's just a two
614:53 - word label but that makes more sense to
614:56 - me as well so we've got about trivia and
614:58 - about trivia answer and i did want
615:01 - two underscores
615:03 - there as well so there we go
615:05 - now let's switch back to the style css
615:08 - and put those classes in here
615:10 - so we'll have our about two underscores
615:13 - in trivia remember i put in about class
615:15 - in there but i don't really have any
615:17 - styles in addition to apply there i just
615:20 - wanted to refer to that about class as
615:22 - the parent
615:24 - and so we'll leave it at that margin
615:26 - will be that variable that we defined
615:28 - for a margin
615:31 - and then for the about trivia answer so
615:34 - we'll have about two underscores trivia
615:36 - dash answer
615:39 - and here we're going to set a margin
615:41 - dash top
615:42 - equal to 1m and save let's pull this
615:45 - over and see those changes applied to
615:48 - the about so here we go
615:51 - and see we've got a little extra space
615:53 - here too which also helps our scroll and
615:55 - then when we show the answer
615:58 - that is nicely formatted as well moving
616:01 - on to the contact form so i will focus
616:03 - on that and let's scroll up to see this
616:06 - content that we have on this page we
616:08 - definitely have enough height here when
616:10 - we have two different articles working
616:12 - with forms can be difficult but let's
616:13 - see how we can apply the styles here i'm
616:16 - going to put in a new label in our style
616:18 - sheet
616:19 - and i will put
616:21 - contact right here and then let's scroll
616:23 - up to make that the very top of the page
616:26 - and now let's start off with our
616:28 - contact two underscores in h2 but i
616:31 - don't believe we've applied these
616:33 - classes yet so let's drag this over to
616:36 - full screen
616:37 - look at our contact page and see what
616:39 - classes we need to apply to the rest of
616:43 - this html i'm going to leave the address
616:45 - as is it needs no further classes
616:48 - however the contact form itself does and
616:50 - i'm going to apply that same philosophy
616:52 - that i did to the about page where i
616:54 - have main article but i don't want to
616:57 - refer to the main element as the parent
617:00 - i want to refer to contact so i'm going
617:03 - to put a contact class here at the
617:05 - beginning for the article now for the h2
617:09 - i'm going to put class and i'm going to
617:10 - set that equal to contact two
617:13 - underscores nh2
617:15 - likewise for the form we can make this a
617:18 - contact form so i'll put class
617:21 - equals
617:23 - contact two underscores and form we'll
617:25 - do the same for the field set i'm going
617:27 - to start copying this so i just have to
617:29 - change the one word
617:31 - and instead of contact form this would
617:33 - be contact
617:36 - field set
617:37 - and now for the legend we're not going
617:40 - to apply that class but we're just going
617:42 - to put this off screen and we already
617:44 - have a utility class for that so this
617:46 - class will be
617:48 - off screen
617:49 - for the p here we'll go ahead and put in
617:52 - this
617:53 - contact form once again but we're just
617:55 - going to change the word form
617:57 - to p for paragraph and it looks like i
618:00 - should have selected the full element
618:02 - and then the next one as well and now
618:04 - i'll arrow to the end one arrow to go
618:06 - inside
618:07 - and paste in this class and now i can
618:10 - change
618:11 - both at the same time and put in the p
618:13 - for paragraph we'll save now we need to
618:16 - do something similar
618:18 - for the label so let's go ahead and
618:20 - select all three of the labels
618:24 - and then we can arrow to the end
618:27 - paste in our class
618:29 - and then once again arrow over
618:32 - change form and change this to contact
618:35 - label now let's do this for the inputs
618:38 - so select the first one ctrl d and
618:41 - there are only two inputs so that's all
618:43 - we need arrow to the right
618:46 - and paste in the class and then change
618:49 - the contact form once again and i
618:53 - shouldn't have done that but now i can
618:54 - control d to select it as well
618:57 - and then we have contact input as well
618:59 - but now we're going to have a contact
619:02 - text area so i just need to paste that
619:04 - in and switch this
619:06 - to text area
619:08 - and i believe nope there's one more and
619:10 - that would be the button and we have two
619:13 - buttons so ctrl d to select the second
619:16 - one
619:17 - arrow to the right to be at the end
619:19 - paste this in
619:20 - and this class is contact button so ctrl
619:24 - d to select both of those now that we've
619:26 - applied all of the classes that we're
619:28 - going to use in the form let's go back
619:30 - to the style sheet and drag it back to
619:33 - the left and we'll be looking at the
619:35 - form here on the right for the h2 we're
619:38 - simply going to set the margin to zero
619:41 - and save that
619:43 - now the field set and notice the label
619:46 - of the field set is already gone because
619:48 - we applied or the legend because we
619:51 - applied that off screen so it no longer
619:53 - had the contactless words here but we'll
619:56 - put in
619:58 - contact two underscores and field set
620:01 - and this will be a border of none so it
620:04 - will just remove that look even though
620:06 - the field set is still there
620:09 - after that contact two underscores
620:12 - paragraph here we'll set a margin to one
620:16 - m on the top and bottom zero on the left
620:19 - and the right that gives us some more
620:21 - space we can certainly tell that
620:22 - difference
620:24 - then the contact two underscores label
620:27 - here we'll say display
620:29 - of block
620:31 - and font weight
620:35 - of bold and we'll definitely see these
620:37 - changes
620:38 - makes our form look better as well
620:41 - now we'll select both
620:43 - the contact two underscores input
620:46 - and the contact two underscores
620:50 - text
620:51 - area
620:53 - for this we'll say padding is 0.5 m
620:57 - you can save and we'll see some change
620:59 - there the inputs got a little larger
621:02 - then we'll say a border dash
621:05 - radius of 15 pixels save and you can see
621:08 - they're rounded i'm going to scroll now
621:10 - that the form has grown a little larger
621:12 - so we can see everything again
621:14 - okay after the border radius we're going
621:16 - to have a border dash
621:19 - width of 2 pixels to just make it a
621:22 - little larger around each of the inputs
621:25 - and then a width of 100 percent and save
621:29 - and now those inputs take up the full
621:31 - width that they have available to them
621:33 - our buttons down here still need a
621:35 - little bit of help so let's say dot
621:38 - contact two underscores
621:40 - button
621:41 - now we'll say padding
621:43 - 0.5 m for those and save we can see the
621:46 - padding gets a little larger for those
621:48 - now
621:49 - and then we'll apply a border radius to
621:51 - match the other border radius 15 pixels
621:54 - and this should possibly be a variable
621:56 - that i have not created but that would
621:59 - allow us to just change it in one place
622:01 - and it would change it for the form as
622:03 - well as the button
622:04 - underneath that we should have
622:06 - border
622:07 - width
622:09 - and oh not border width on the buttons
622:11 - i'm sorry let's have a background
622:14 - color
622:16 - let's say bar and let's pick that
622:18 - highlight color so we can have a
622:20 - different color on these buttons
622:22 - that looks good except the font doesn't
622:25 - look so great there so for the var let's
622:27 - say the header color
622:30 - and that should turn that white and make
622:32 - it stand out just a little bit more
622:34 - those buttons definitely look better
622:36 - than they did before so a quick check
622:38 - let's take the border radius property
622:40 - and control c and then i'm going to do
622:43 - control f to search for it and let's see
622:46 - how many times it has occurred
622:48 - it's just twice here inside of our
622:50 - project so if you wanted to
622:53 - you could absolutely make a contact
622:56 - border radius
622:58 - variable and then you would just change
623:00 - it in one spot and of course the form
623:02 - the inputs and the buttons would match
623:04 - but you don't have to i did not clearly
623:07 - at this point but that would be an
623:09 - option so now before moving on to the
623:11 - menu let's look at each section that
623:13 - we've already styled for our page and
623:16 - here's the full page so our about page
623:19 - has a nice huge hero image
623:21 - and we see the about lts some
623:24 - information and our taco trivia that
623:27 - looks good the hours page another nice
623:29 - hero section and a simple bit of
623:32 - information about the hours
623:35 - and let's look at the
623:37 - contact page
623:39 - we scroll down we see the our location
623:41 - information after the hero and the
623:43 - contact form as well so that all looks
623:46 - good i think the menu is still going to
623:49 - need some work and we might apply
623:51 - another style or two yet that we haven't
623:53 - but we're making a lot of good progress
623:55 - let's go ahead and ctrl shift i to see
623:58 - how everything's looking in a mobile
624:00 - device as well so maybe we could choose
624:02 - fit to window and we see this iphone 6 7
624:05 - and 8 let's look at the iphone
624:09 - 5 and that also looks good let's reload
624:12 - and see how that animation works
624:14 - that works as well so yes the menu needs
624:16 - some help but how do the other
624:19 - pages look oh the other pages still say
624:22 - the little taco shop hours instead of
624:24 - just little taco shop
624:26 - or something similar and again we're on
624:28 - the smallest device that we might ever
624:31 - see right now which is the iphone 5 se
624:34 - things may have changed in the future of
624:36 - course if you're viewing this at a later
624:38 - time so here
624:40 - it wraps the two lines on the header but
624:42 - anything larger than the absolute
624:44 - smallest device it looks like it won't
624:47 - as long as we adjust our headers here
624:49 - instead of say the little taco shop
624:51 - hours we can just say little taco shop
624:53 - here it just says contact us
624:56 - and on the about page once again it just
624:58 - says little taco shop i think we want
625:00 - our header to be consistent and say
625:03 - little taco shop
625:04 - no matter which page
625:06 - we go to so let's go ahead and make
625:10 - those changes as well in the html as we
625:13 - go back to the code so i'm going to
625:15 - close this back out
625:17 - drag this back to the right
625:19 - and bring the code over to the full
625:21 - screen quickly going to each html page
625:24 - we'll make sure that the heading matches
625:27 - so it should just say
625:29 - little taco shop where we have the
625:31 - header h1 for each page
625:34 - scroll to the top of the hours and we'll
625:36 - see what we have here it says
625:38 - the little taco shop hours so we'll go
625:41 - ahead and remove
625:42 - the and ours
625:44 - save that file the contact page
625:47 - said contact us well we would prefer it
625:50 - still say
625:52 - little
625:54 - taco shop here and of course the h2s
625:57 - will handle the other labels on the page
626:00 - so
626:01 - we had our location and below that we
626:04 - should also have the contact form as
626:07 - well there we go let's see what was here
626:09 - yep our contact form so that looks good
626:12 - and the about html
626:14 - should also just say little taco shop
626:16 - and it does and of course the titles of
626:19 - the page say more about the page as well
626:21 - so about the little taco shop here
626:24 - the title at the top of this says
626:26 - contact us lts i guess to keep
626:29 - consistency we could say about lts on
626:33 - this other page as we're going with that
626:35 - abbreviation several places so
626:38 - about lts there the description can
626:41 - still say about the little taco shop
626:43 - and then hours let's see what the
626:45 - title is here lts hours that's great and
626:48 - of course for the index we want the
626:50 - title to be the little taco shop so
626:53 - everything is looking good once again in
626:55 - the html let's go back to the css and
626:58 - start working on the menu now before
627:01 - applying styles to the menu i want to
627:03 - pull up an mdn reference so i'm just
627:05 - going to paste this link in and i'll
627:07 - make sure it is in the course materials
627:09 - as well so the course resources but here
627:12 - on the grid layout and accessibility
627:15 - page in mdn it says grid and the dangers
627:18 - of markup flattening so what we're going
627:21 - to be doing is taking the html table
627:25 - that's in the index page that comprises
627:28 - the menu that is displayed and we're
627:30 - going to make it a grid
627:32 - too often
627:34 - many people just use div elements to
627:36 - make their grid and a grid needs
627:39 - that flat structure essentially for the
627:42 - grid items so it can review or refer to
627:45 - each grid item
627:47 - in that regard because it's not going to
627:49 - look at subgrid items subgrid is a
627:52 - proposal they're discussing here but
627:54 - it's not implemented as well so
627:56 - we want to avoid that dangers i'm going
627:59 - to pull the code back over and bring up
628:01 - the index.html
628:04 - and we can see our table and right now
628:07 - the table is not flat notice how it has
628:10 - parent
628:11 - elements like the t head element and of
628:13 - course table row elements and then
628:15 - inside
628:17 - we get the
628:18 - th and td elements for those table cells
628:22 - whether they're a header element or
628:24 - they're just a table data element and so
628:27 - grid doesn't work that way it needs flat
628:30 - elements but we can still work with this
628:32 - we don't want to remove the semantic
628:34 - markup of a table to further illustrate
628:37 - my point
628:38 - instead of just having this here
628:40 - underneath i'm going to paste in what
628:43 - you might see a table constructed of for
628:46 - a grid using divs
628:48 - now this is a flattened markup table
628:52 - essentially that would be applied to
628:54 - grid and notice how i just used divs and
628:57 - applied all of these classes
629:00 - and this is what you do not want to do
629:03 - but i guarantee you will probably see
629:05 - this somewhere when a grid is applied
629:08 - and you see a table on the page i'm
629:10 - going to press ctrl z though because
629:12 - this once again is not what we want to
629:14 - do and you can tell by this markup
629:17 - it is not flattened however there is a
629:19 - solution for this and it is a display
629:22 - setting that we can put in the css that
629:25 - will help us convert
629:27 - our table to a grid i'm going to drag
629:30 - this back to the left so we can look at
629:32 - one more web page and i will link to
629:34 - this as well in the course resources and
629:37 - it's the can i use web page and i'm
629:39 - looking at display
629:41 - contents
629:42 - notice what it says about display
629:44 - contents it causes an element's children
629:46 - to appear as if they were the direct
629:49 - children of the element's parent
629:51 - essentially
629:53 - that ignores that parent element and
629:55 - that will flatten the elements for grid
629:59 - to use without removing those elements
630:01 - so we just need to put display contents
630:04 - on some of these parent elements that
630:06 - grid will not use it says this can be a
630:09 - useful
630:10 - or this can be useful when a wrapper
630:12 - element should be ignored when using css
630:14 - grid or similar layout techniques
630:17 - and then when we scroll and look at
630:20 - everything as far as how well it is
630:21 - applied now let me pull this out to the
630:23 - full page so we can see everything from
630:25 - can i use
630:26 - you can see it's got basically 95
630:29 - percent acceptance here and we're not
630:32 - going to worry about internet explorer
630:34 - again and most every other major browser
630:38 - is accepting that use here opera mini is
630:41 - one that's not in uc browser for android
630:43 - but chrome safari
630:46 - safari on ios chrome for android we're
630:49 - good in almost every major use case here
630:52 - so i'm comfortable with using that as we
630:55 - switch our html table over to a grid and
630:59 - again i will link to both of those for
631:01 - you back to our website here
631:04 - back to the right and now i will pull
631:07 - this back over to look at our code in a
631:10 - full screen so we can get the ideas of
631:12 - what we're doing with the table as i did
631:14 - with the contact and about pages i
631:17 - applied a separate class here to refer
631:20 - to as the parent and i'm going to do the
631:21 - same here it's going to be the menu
631:23 - class
631:24 - and then i will refer to these
631:26 - again with bem notation but i'm going to
631:30 - refer to menu as the parent so here
631:33 - we're going to have a class i'm going to
631:35 - set this equal to menu two underscores
631:38 - and h2
631:39 - for the our menu heading then the table
631:42 - itself
631:43 - say class and then menu two underscores
631:46 - and container because this is going to
631:49 - contain our menu for the caption for the
631:51 - table
631:52 - we'll use this class
631:54 - and set this to off screen our utility
631:57 - class once again as we will not want to
631:59 - view this caption on the page but we do
632:02 - want to retain it for accessibility now
632:04 - we will be setting the table head and
632:07 - the tr element the table body element
632:10 - and the table foot element to that
632:12 - display contents so grid actually
632:16 - ignores those the content we want for
632:18 - the grid and the content that we
632:19 - actually want screen readers to read
632:21 - will be inside of the th
632:24 - and td elements so that's where we'll
632:27 - apply the classes here so all of the
632:29 - opening
632:30 - th's that we have here i'm going to
632:33 - select
632:35 - three right there and we might even have
632:37 - a fourth but i think we just want three
632:39 - right now for the menu headers so
632:42 - we'll take this over with the arrow to
632:44 - the right and i'll say class
632:46 - equals and this is going to be menu two
632:48 - underscores and header now something
632:52 - else i want to do here one thing i
632:54 - noticed and i must have done this in the
632:56 - html course as well so if you went
632:59 - through that you can apply the scope
633:01 - column to this first cell as well and
633:05 - i'm not sure why i didn't before it
633:07 - might have just been an oversight the
633:09 - second thing is
633:11 - we were looking once again at how to do
633:12 - abbreviations in html but i want the
633:15 - full word quantity here now so i'm going
633:17 - to remove the abbreviation
633:19 - and just have the word quantity in the
633:22 - second th cell for the table
633:26 - okay after we have got the menu headers
633:28 - now we're going to have menu item
633:30 - classes so we will come through here
633:34 - and then whether it is the th or the td
633:38 - in these other cells i'm going to make
633:40 - it a menu item so i'm going to start off
633:43 - with the remainder of these
633:45 - table data cells
633:48 - because there are several i'm pressing
633:50 - ctrl d to get all of them selected
633:54 - and i think that's going to be it nope
633:56 - one more maybe there we go one more so
633:59 - at the end of that i'll arrow to the
634:01 - right i'll put class
634:04 - and i'm going to set this equal to menu
634:06 - two underscores and item okay scrolling
634:08 - back up to where we have the crunchy and
634:11 - then of course we have the soft label
634:12 - down here we're going to apply classes
634:14 - here as well i'll have a class
634:16 - i'm going to set this equal to menu two
634:18 - underscores item and then i want a
634:20 - second class here that is just going to
634:22 - be menu two underscores and cr for
634:24 - crunchy as we'll need to refer to that
634:27 - later for the grid possibly
634:29 - and then for soft we're going to do the
634:31 - same thing so it's going to be a class
634:34 - equals menu two underscores item and
634:36 - then menu two underscores sf for soft
634:40 - and finally let's scroll down to the
634:42 - very bottom where we have chips and
634:44 - salsa it spans three columns so besides
634:47 - menu item here i also want menu two
634:49 - underscores
634:51 - and cs and i believe i have now applied
634:54 - all of the classes that i wanted to
634:56 - apply for the menu itself one other
634:59 - thing i am going to do while i'm here in
635:01 - the html is remove this line break
635:04 - and then we have a paragraph here and
635:06 - i'm going to apply our utility class
635:09 - of center
635:11 - to this paragraph that has our back to
635:13 - top link that should appear underneath
635:15 - the table let's go back to our style
635:17 - sheet and let's drag this to the left so
635:20 - we can see changes applied to the table
635:22 - now as we apply these styles i'll start
635:25 - by scrolling up so we can start at the
635:27 - very top of our available space and i'm
635:30 - going to put in a label for the style
635:33 - sheet for the menu
635:36 - now underneath this the first thing i'm
635:37 - going to do is select the t head element
635:40 - the t body element
635:42 - the t foot element
635:44 - and the tr element and this is the only
635:46 - table in the project so i feel safe
635:49 - doing this without classes if it was a
635:51 - larger project i might have made a
635:54 - display contents class and then applied
635:57 - this to each that class to each one of
636:00 - these elements so here i'm going to say
636:02 - display
636:03 - contents it also
636:05 - took those parents out of the flow so
636:07 - now
636:08 - even though they're still in the page it
636:11 - made them all run into one line so we
636:14 - will definitely see changes now as we
636:16 - make the table
636:18 - so or the grid i should say
636:20 - let's create that menu container class
636:23 - if you remember this is applied to the
636:25 - table element itself so we'll say
636:27 - display grid and if i save after each
636:30 - change we should definitely see changes
636:33 - as we go so now just by applying display
636:36 - grid
636:37 - it changed how that viewed after our
636:39 - display contents
636:41 - was applied now let's say grid dash
636:44 - template dash
636:45 - columns
636:46 - and we're going to use the repeat
636:48 - function
636:49 - we want three columns
636:51 - each with
636:52 - one fragment so let's save now and we
636:55 - once again see changes to that table
636:58 - now let's go ahead and map out our grid
637:01 - template
637:03 - areas but we really haven't assigned any
637:06 - specific classes like those that we
637:08 - applied to crunchy or soft so it might
637:11 - still look a little strange when we do
637:13 - this
637:13 - essentially though
637:15 - we only need to assign
637:17 - the labels to the ones that are going to
637:20 - take up more than one grid square so
637:23 - other in other words i can just kind of
637:25 - create the other labels without
637:26 - assigning them to elements so i'm going
637:28 - to have hd1 hd2
637:30 - and hd3 i won't end up assigning those
637:33 - to classes at all
637:35 - then i'm going to have cr
637:37 - cr1 this is crunchy as you might guess
637:40 - the abbreviation hd was for header and
637:43 - then crunchy one price for one taco now
637:46 - i'm just going to
637:48 - ctrl alt
637:49 - and the down arrow a couple of times
637:51 - because one here is going to get changed
637:55 - to
637:56 - two and then one here is going to get
637:59 - changed to three
638:01 - okay after that let's create one line
638:03 - here for soft so we'll have soft taco
638:06 - soft one
638:07 - and then
638:08 - soft
638:09 - one price
638:10 - after that
638:12 - shift alt down arrow shift alt down
638:14 - arrow
638:15 - select one control d change those to a
638:18 - two select one control d change those to
638:21 - a three
638:22 - and save and so now we have the
638:25 - crunchyrose and the soft rose and the
638:28 - header so at the very end we're going to
638:30 - have the chips and salsa row so cscs cs
638:33 - because it had a row span of three
638:36 - after that we have essentially mapped
638:39 - out those grid areas it doesn't look
638:40 - like we want it to yet though because we
638:42 - haven't assigned
638:44 - that crunchy label to the crunchy label
638:47 - that we or class that we have and the
638:50 - soft label to the soft class or the
638:52 - chips and salsa label to that class so
638:54 - we still need to add those
638:56 - likewise let's go ahead and add a small
638:59 - gap 0.1 em so as we discussed before
639:03 - that could be as small as 1.6 pixels or
639:06 - about as large as 2.4 depending on the
639:09 - font size applied
639:10 - then let's give a margin bottom of one
639:13 - em as well now let's apply some of those
639:16 - labels so our grid looks a little bit
639:18 - better so we'll start out with the menu
639:20 - two underscores cr for crunchy and here
639:23 - we'll apply the grid area label of cr
639:27 - when we save we don't see much of a
639:29 - change yet but i hope to in the near
639:31 - future
639:32 - menu two underscores and sf for soft and
639:36 - here we'll say grid area
639:39 - sf
639:40 - save again so we see a little bit more
639:42 - of a change
639:44 - and then we'll say
639:46 - menu two underscores cs
639:49 - this will be grid
639:50 - area cs
639:53 - and save we definitely have seen some
639:55 - changes in the grid it's not what we
639:57 - want yet but we're getting there let's
639:59 - make the color
640:01 - here a
640:02 - var
640:03 - dash dash
640:06 - highlight
640:07 - color for this
640:09 - okay so we've got a chips and salsa that
640:11 - is now green and then we'll say font
640:14 - weight
640:15 - bold as well and save that looks good
640:19 - now let's go ahead and apply some of
640:21 - this to the other areas as well so let's
640:24 - say
640:26 - menu two underscore cr and
640:29 - menu two underscores sf
640:33 - here i'm going to take these two and
640:35 - maybe i should have organized this
640:36 - differently on my thought pattern but i
640:38 - want both of those there as well however
640:41 - there's also some other styles so i want
640:43 - a height
640:45 - of 100
640:47 - as it takes up some of that extra space
640:50 - why is that not applying to crunchy i
640:52 - may have to go back and see what i did
640:54 - wrong there
640:55 - but let's go ahead and say these are
640:58 - also grids
641:01 - and then we want to
641:03 - place the content
641:06 - center which is the point of making them
641:07 - a grid so we could do that yes the
641:09 - crunchy style is not being applied so we
641:12 - have menu cr
641:15 - and that is what needs to be applied
641:17 - there let's go back and look at our
641:20 - html
641:21 - and see if that class was applied
641:23 - properly
641:25 - to the cr section oh it's just one
641:28 - underscore it needs to be two
641:31 - save and now
641:33 - go back to style and bring this over and
641:36 - now crunchy and soft both have that same
641:38 - style and everything is aligned better
641:40 - that makes more sense as to why it
641:41 - wasn't coming together quite as quickly
641:43 - as i expected and before we move on
641:45 - let's see if we could apply this
641:47 - differently now we still need the grid
641:49 - area here for menu cs but we could
641:52 - possibly remove these
641:55 - and let's see if we could include
641:58 - the dot menu to underscore cs without
642:01 - really making something strange there i
642:03 - think that's fine and it's a little more
642:05 - efficient we aren't repeating those two
642:07 - lines and now let's look at these
642:08 - headers and we could possibly add those
642:11 - in as well so one more comma and we'll
642:13 - say menu two underscores header
642:16 - and save and yes i think that style is
642:18 - going to work out as well however we
642:20 - still need menu to underscores header
642:24 - because we want to add a border dash
642:28 - bottom
642:29 - to each of those so we'll say bar
642:31 - and bring in our borders variable that
642:34 - we have created
642:36 - and save so now we have a border across
642:39 - each one of those headings now let's
642:41 - scroll for some more room and we're
642:43 - going to select that menu header again
642:46 - like it's fill menu two underscores
642:48 - header and then we also want
642:50 - menu two underscores item
642:53 - now for both of these we want a width of
642:55 - one hundred percent
642:57 - and then we'll set a padding to one em
643:00 - and let's put a
643:02 - border
643:04 - and then let's set medium
643:06 - [Music]
643:07 - ridge and we'll set the var equal to
643:11 - border color there we go
643:16 - and when we save that we've got borders
643:17 - around everything so in that regard
643:20 - maybe we could remove
643:21 - that border bottom
643:24 - and still be good and we save yes and it
643:26 - looks the same so one was just
643:28 - overriding the other and now let's
643:29 - select just the menu items
643:34 - and here we'll put a display of grid and
643:37 - we will once again place the content
643:40 - in the center and when we save that
643:42 - looks good as well now we didn't apply
643:44 - that above to the menu item where we set
643:47 - the same grid and center because we also
643:49 - really didn't want to apply these other
643:51 - styles to those menu items we wanted to
643:54 - keep them this separate color and not
643:57 - have the font be bold but that's looking
644:00 - pretty good right now as far as
644:01 - converting this menu table and leaving
644:05 - that semantic html in place we can apply
644:08 - some final touches to this menu as well
644:11 - but earlier when we were referencing the
644:14 - border
644:15 - dash radius property we said we were
644:17 - only doing it twice
644:19 - and therefore i didn't go ahead and
644:20 - create a variable but now i want to use
644:22 - it again and so now that i'm using it in
644:25 - another place i definitely do want to
644:27 - create that variable so i'm going to
644:29 - scroll back up
644:30 - to the variable section and underneath
644:33 - borders
644:34 - i'm going to create a
644:36 - border dash radius variable
644:39 - and just set that to 15 pixels so now
644:42 - that i've created that we can use that
644:44 - variable
644:45 - in all of the places that we are
644:47 - applying a border radius so now let's go
644:50 - ahead and change
644:52 - these two that currently exist to var
644:56 - dash border
644:58 - radius there we go
645:01 - and save that so no other changes will
645:03 - be made there but now we can apply these
645:06 - final touches to our menu table as well
645:09 - and we can use that border radius
645:11 - property now i could apply classes to
645:14 - the header and the footer but i'm not
645:16 - and they are being ignored for some
645:18 - things concerning the grid when we set
645:20 - that to display contents however they
645:24 - are still part of the document so we can
645:26 - still use them for selectors so i'm
645:28 - going to select the t head
645:30 - and then the th inside of the t head and
645:33 - say the first
645:35 - child which should be the very first
645:37 - cell that says tacos and here we're
645:40 - going to set the border dash top
645:43 - dash left
645:44 - dash radius
645:46 - and now we'll use our
645:49 - border radius variable once again
645:52 - and when we save we can see this now has
645:55 - the border radius of 15 pixels
645:58 - so likewise i'm going to just copy this
646:01 - down so i don't have to retype
646:02 - everything shift alt and the down arrow
646:05 - this is going to be the t head th
646:09 - last child and instead of the top left
646:12 - it's going to be
646:13 - the top right everything else should be
646:15 - the same and now we see that same border
646:17 - radius applied over here to the right
646:20 - finally we have this one large chips and
646:24 - salsa cell along the bottom of this
646:27 - table for the menu
646:28 - so here this will be the
646:31 - t foot
646:32 - and then we'll select the table data
646:34 - cell inside here we can set the border
646:37 - dash bottom dash left dash radius
646:42 - and this will once again be var
646:45 - two dashes border and use that border
646:47 - radius variable
646:49 - and once we save this we see
646:52 - that applied to the left corner so it
646:54 - just needs to be applied to the right
646:56 - corner so inside this same
646:58 - selector here for t foot td we can now
647:02 - also
647:03 - apply this
647:05 - to the right corner and save and there
647:08 - we have our rounded corners for our
647:10 - table as well we're getting near the end
647:12 - but there is a little more to do let's
647:14 - go ahead and look at the page in full
647:16 - screen or at the full site now and
647:18 - here's our back to top we can click we
647:20 - have the smooth scrolling that goes
647:22 - there
647:23 - we can go to the hours page everything
647:25 - looks pretty good there
647:26 - the contact form everything is good here
647:30 - the about page and the trivia
647:33 - that's all working well and our
647:35 - animation shows here let's look by shift
647:38 - control and the letter i to go into a
647:41 - mobile view
647:42 - notice how well our grid conforms it
647:47 - automatically adapts we didn't have to
647:49 - apply a media query the grid just works
647:52 - in this mobile view and that's great
647:55 - let's look at some other views here's a
647:57 - little bit maybe larger phone there we
647:59 - go so it is quite a bit larger it is the
648:02 - iphone 6 7 8 plus
648:05 - and there will size it down to 75
648:07 - percent
648:08 - let's go ahead and look at the iphone x
648:10 - that gets taller so that should also
648:13 - make our text just a little larger based
648:15 - on how we used clamp with that
648:17 - everything's still looking pretty good
648:20 - the form
648:21 - still adapts to the screen size the menu
648:24 - looks good and it took us right to the
648:25 - menu when i click the menu link the
648:28 - about page
648:30 - the hours
648:31 - all is looking pretty good i think we
648:33 - could apply possibly a little bit of
648:36 - space or a class we might have to back
648:38 - to the top that we applied
648:40 - down here i think we at least centered
648:42 - it so we might change something there
648:44 - but overall it's good to just evaluate
648:46 - your project and see how everything
648:48 - looks to you as you go and you can tell
648:50 - it's looking good on mobile as well so
648:52 - let's go back to full screen view and
648:54 - we're going to make just a couple of
648:56 - changes there is one media query i would
648:59 - like to apply to this project although
649:01 - using modern css for the most part we've
649:04 - been able to avoid media queries we are
649:07 - going to put this media query at the
649:09 - bottom of the page so we'll say at
649:12 - media
649:13 - and then we'll say screen
649:15 - and now say min width
649:18 - and we'll say
649:19 - 576 pixels which is our small break
649:23 - point and that is similar to what
649:25 - bootstrap uses the css library or
649:28 - framework if you will
649:30 - and here we have header
649:32 - 200 scores h1
649:34 - now let's select the pseudo element here
649:37 - and this is the before pseudo element
649:40 - and we're going to set some content
649:42 - on this h1 let's give a space and what i
649:46 - want to do
649:48 - is put a taco emoji in here and actually
649:51 - i want to put the taco emoji and then
649:53 - the space so we have a taco space and
649:56 - then we have the heading as you might
649:58 - expect i also want to do this
650:00 - with the after so i will just copy that
650:03 - down again shift alt and the down arrow
650:06 - will switch before to
650:08 - after
650:09 - and now with the after
650:11 - we want the space to come first and then
650:14 - the taco so we've got taco space heading
650:17 - space
650:18 - taco so this should show up on any
650:20 - screen that's larger than 576 pixels in
650:24 - width so when we save
650:26 - now we have tacos in the heading as well
650:28 - and that's a great addition for the
650:31 - little taco shop and it applies to all
650:33 - the pages where we set up our classes
650:36 - correctly but if we go to a smaller
650:38 - screen
650:40 - where we might not be able to fit all of
650:42 - that in
650:43 - they disappear and that is great too so
650:46 - that only shows in larger viewports
650:49 - let's go to an ipad
650:51 - there we have the tacos so just mobile
650:54 - it will not try to squeeze those tacos
650:56 - in and that is fine let's drag this back
650:59 - over we can apply just a little bit more
651:02 - to the
651:04 - media query as well and this is just
651:05 - something i want to do for the
651:08 - menu 200 scores header
651:11 - then we're also going to have it in the
651:12 - menu to underscore cr which was the
651:14 - crunchy
651:17 - menu two underscores sf which was the
651:19 - soft
651:21 - menu two underscore cs which was the
651:24 - chips and salsa we're going to set the
651:26 - font size to 125 percent so just a
651:29 - little larger
651:30 - on these larger screens for the headings
651:33 - you really if you wanted to you could do
651:35 - it to all of these but i just really
651:37 - wanted to make the headings stand out
651:38 - and so everything we've wrapped around
651:40 - here that you see in green
651:42 - has applied that larger font now just
651:45 - another 25 larger than it was there is
651:49 - one more media query to apply but it's
651:51 - not based on the width it's based on the
651:54 - preference of light and dark mode we
651:56 - have styled our light mode this would be
651:59 - our normal viewing for the website but
652:01 - many prefer dark mode these days and
652:04 - that includes myself so i definitely
652:07 - like to add dark mode when the
652:09 - preferences are set for that so if your
652:11 - system preference is dark mode that's
652:13 - what will display my system preference
652:16 - is dark mode so i'm going to put this
652:18 - media query directly under the variables
652:22 - we defined so
652:23 - it will be applied right away because
652:26 - all it really does is change the
652:28 - variables
652:29 - for those colors that we're using on the
652:32 - site so we'll say at media put our
652:34 - parentheses then put prefers dash
652:38 - color dash scheme
652:41 - and here i'm going to say dark so that
652:44 - is what my system is already set to so
652:47 - anything we put in here we'll start to
652:48 - overwrite what we already have for those
652:51 - variables so we need the root pseudo
652:54 - selector it's the pseudo class
652:56 - and now let's overwrite
652:58 - the background color
653:01 - and this is going to be
653:03 - black now we will not really see the
653:05 - change here because we're not seeing
653:07 - that orange color until we drag this
653:09 - over to full screen so if i save
653:12 - drag this over to the full screen now
653:15 - you can see it's dark but it's still
653:17 - fading to that light orange because we
653:19 - haven't changed that other variable yet
653:21 - either so let's change the
653:24 - bg
653:26 - color dash fade variable as well
653:29 - and i'll just make that gray just like
653:31 - my last name i'll save and now let's
653:34 - drag this over once again you can see
653:36 - it's fading to a gray instead of the
653:39 - orange to a light orange
653:41 - the next color we'll put in here will be
653:43 - the header background color now we'll
653:46 - start to see these changes so
653:48 - header bg color
653:50 - oh i'm sorry just header color not bg
653:53 - color
653:54 - let's make this
653:58 - white smoke
653:59 - and save
654:01 - and then let's go ahead and change the
654:06 - nav
654:08 - i said color now i need background color
654:11 - and by the way the white smoke i just
654:13 - find that to be easier on my eyes than
654:15 - the pure white that we've used in other
654:17 - spots let's set this to
654:20 - rgb
654:21 - 20 20
654:22 - 20 which is just a different shade of
654:26 - black essentially and now you can see
654:28 - that background color for the nav menu
654:30 - definitely got darker
654:32 - okay so we're going to have to change
654:34 - that text eventually too
654:36 - let's set the hero color and this is for
654:39 - our little animated part that drops down
654:42 - so our hero color is going to be a
654:44 - different flat black now when it drops
654:48 - down you can see that has also changed
654:50 - now let's set the body background color
654:53 - itself so this will be a big change when
654:55 - we first see it that will also be this
654:58 - flat black
655:00 - and that has made a difference
655:02 - now let's go to the font color itself
655:05 - which is what's being used on most of
655:07 - the page and we'll go with that
655:09 - white smoke that's just a little easier
655:12 - on the eyes than the pure bright white
655:15 - and so let's find a page that's using
655:17 - well here we see it inside of these
655:20 - table cells here but if we go look at a
655:22 - different page you can see it is being
655:24 - used right here as well
655:26 - okay after the font color
655:28 - let's apply the
655:30 - highlight color
655:32 - and where this was that green let's use
655:35 - white smoke here as well so when we save
655:38 - i believe that's in the animation
655:40 - and i'm not seeing that applied right
655:43 - now i'm not seeing the animation because
655:44 - i'm not on the right page here we go and
655:46 - oh no it wasn't in the animation because
655:48 - that has the separate uh background
655:51 - color that is slightly transparent but
655:53 - it is in some other areas like we were
655:55 - using it for
655:57 - the h2s and h3s and the table headings
656:00 - so we can see that's now using white
656:02 - smoke as well
656:04 - okay now let's switch the
656:06 - border color that's being used let's
656:09 - also make that white smoke
656:12 - now our table is standing out
656:15 - and now that border color was a bit of
656:16 - the shadow behind the lettering so now
656:19 - we've got a little bit of white shadow
656:21 - behind bienvenidos and that stands out
656:24 - on that green as well helping the dark
656:26 - lettering stand out and we still need to
656:28 - change our link colors so
656:32 - link dash color
656:34 - we'll make that white smoke you can see
656:36 - we're really making use of that color
656:38 - for this setting
656:40 - also say link hover is now going to be
656:43 - orange
656:44 - and then
656:46 - link active
656:48 - is going to be the lighter orange so rgb
656:51 - 252 200 103.
656:56 - and save so now when we hover over a
656:59 - link
657:00 - it becomes orange
657:02 - when i hold down it's a lighter orange
657:05 - and then we go to hours
657:08 - everything looks pretty good now you may
657:10 - have your own preferences for dark mode
657:12 - as well but just scan over the site see
657:15 - how you think it looks does everything
657:17 - look like you want it to oh these
657:19 - buttons need a little bit of help yet
657:20 - let's check our other page and make sure
657:23 - everything else looks good and then we
657:25 - might need to change something about
657:26 - those buttons we'll have to see what is
657:29 - going on there
657:30 - and that might be a correction that
657:32 - needs to be made in how they're
657:34 - initially
657:35 - being set as well so let's find
657:38 - where we had a
657:40 - button which was a contact button and
657:43 - you can see the header color which
657:45 - remained white or white smoke was being
657:48 - used but then that highlight color was
657:51 - the background and that has changed i
657:54 - think we need to change this from header
657:56 - color to button color and give us some
657:59 - or give ourselves some control over what
658:02 - color
658:03 - is the text on top of the buttons so
658:06 - we've added a button color variable now
658:08 - we need to define that above and then of
658:11 - course change it when it gets to dark
658:13 - mode as well so we were fine with it at
658:15 - first when it was the same as the header
658:18 - color so that's what we'll start off
658:20 - with and i believe that is just white so
658:23 - we'll put that and also put it in as
658:27 - white here but now we need to change
658:30 - this when we get to dark mode so let's
658:32 - bring this down into our dark mode
658:35 - definitions
658:36 - add this and let's change it to black
658:39 - right here
658:40 - and save now let's go ahead and go to
658:43 - our contact page
658:45 - scroll down and now we can see the text
658:48 - on our buttons and so that looks good
658:50 - the about page is looking good let's
658:53 - make sure the answer looks good for
658:54 - trivia that's fine here's an additional
658:57 - link in our page
658:58 - to the reference for the trivia
659:01 - the menu we scroll right to that
659:03 - everything looks good there
659:05 - hours
659:06 - pretty good i still might want to create
659:08 - a little space here with the back to top
659:10 - but other than that it's fine
659:12 - and back to the home okay so we are down
659:16 - to the final touches of the project so
659:18 - one of those things might be to organize
659:21 - the css now this is your own project but
659:23 - if you're working in a team for example
659:26 - you might want to organize that i'm
659:27 - going to drag this over to full screen
659:29 - for this discussion let's say the colors
659:31 - we have here there's there's probably
659:33 - the largest list that we have of
659:35 - anything
659:36 - in this project is the colors it might
659:39 - help to just use the abcss
659:42 - technique here to organize these so if
659:44 - we highlight all of those press control
659:47 - p
659:48 - and then the greater than symbol and now
659:50 - we might choose sort lines ascending so
659:54 - now all of our colors are ordered
659:56 - alphabetically and i could find them
659:59 - probably much faster now that i've done
660:01 - this so considering that maybe we should
660:04 - do the same thing for our dark mode
660:06 - we'll highlight all of those
660:08 - control p
660:10 - greater than symbol and choose sort
660:13 - lines ascending now you're welcome to do
660:15 - that for any or all of the properties
660:18 - and styles that are within this project
660:20 - if you so choose now before we finish
660:23 - this project there's one more thing we
660:25 - can add that would be a very nice touch
660:27 - but it is a preview of what's to come
660:30 - for you yet and that's because it's a
660:32 - touch of javascript
660:34 - just a little bit and i'll show you what
660:36 - it does it will update the year so
660:39 - it will put in the current year no
660:40 - matter what year it is and you will not
660:42 - have to come back and update the
660:44 - copyright on your site so let's put in a
660:47 - time element right here i want lowercase
660:50 - so i'll give this a time with an id
660:54 - attribute of
660:55 - year
660:57 - so there is our time element and we
660:59 - don't really need to put anything in it
661:00 - we'll just leave it as is
661:02 - with the id of year right there now
661:06 - let's go over to our file tree
661:09 - and inside the file tree let's create a
661:11 - js folder
661:13 - and inside the js folder let's create a
661:16 - new file name it main.js
661:20 - now we only have a few simple lines to
661:23 - put in here so i'm going to type
661:26 - const which will help me define a
661:28 - variable and i'm going to name that
661:29 - variable year i'm going to set that
661:32 - equal to document and when i refer to
661:34 - document i am referring to the html
661:37 - document
661:38 - and then get
661:40 - element by id and this will be year so
661:44 - you know we just set that attribute
661:46 - and then we are selecting it so we're
661:49 - selecting that time element on whichever
661:51 - page we load this javascript into from
661:55 - there i'm going to define another
661:57 - variable and i want it to be called this
661:59 - year notice i'm using camelcase to
662:01 - define that i'm going to set this equal
662:04 - to a new
662:05 - date
662:06 - and then i'm going to call the get full
662:09 - year method for that date so now i have
662:13 - the current full year in the this year
662:17 - variable
662:18 - and i have the element that we just
662:20 - created the time element in the year
662:23 - variable so i'm going to say
662:24 - year
662:26 - set
662:28 - attribute and then i'm going to select
662:32 - date time
662:34 - and i'm going to set it
662:36 - to the this year variable
662:38 - and then to display it on the page i
662:40 - once again want that year element and
662:42 - now i'm going to select the text content
662:45 - that's what's displayed on the page
662:47 - and set it equal to this year and save
662:50 - that's all i need are these four lines
662:52 - of code
662:54 - and with that we can import this into
662:56 - our page so we'll go back to the index
663:00 - let's scroll to the top because we want
663:02 - to load the javascript last after the
663:04 - css
663:06 - and we do that with a script tag and it
663:09 - will have a source attribute and there
663:11 - it is so we'll say js slash
663:15 - and then we'll just pick our main js
663:17 - nothing goes between the opening and
663:20 - closing script tags however you have to
663:22 - put it this way it always has a closing
663:24 - script tag it's not like some of the
663:26 - other elements that just has a slash to
663:29 - close out the first one you always see
663:31 - it this way we want to add one other
663:33 - attribute though and that is defer and
663:36 - that tells the script to wait until
663:38 - everything else is loaded before
663:41 - loading the javascript and we will save
663:45 - now if we go back
663:47 - to our page
663:49 - notice it says copyright
663:51 - 2022 little taco shop
663:54 - if you're watching this in a different
663:56 - year and you add this same code it will
663:59 - say whatever the current year is there
664:01 - now if we go to our other pages
664:03 - notice it still just says copyright
664:06 - symbol in little taco shop because we
664:08 - haven't added that javascript to the
664:11 - other pages yet but we can do that now
664:14 - so let's drag this over
664:16 - and we also need to make that same
664:18 - change to the footer on every page so
664:21 - inside of our copyright line here that
664:23 - has the span class
664:25 - let's select that with the c
664:28 - and then we'll go to the hours page
664:30 - scroll down
664:32 - and we will select the same line and
664:35 - paste in the new line and save
664:38 - the contact page scroll down select the
664:41 - copyright line
664:43 - paste in the new line and save
664:46 - and we also need the about page i
664:48 - believe so now let's scroll down
664:51 - and here we'll select that same
664:53 - copyright line
664:54 - and we'll paste in the new line
664:56 - but we haven't added the javascript yet
664:59 - so let's go back to our index html now
665:02 - we could just copy this same script line
665:04 - and we can use the same javascript file
665:07 - for every page so back to the hours page
665:11 - paste it in underneath our style sheet
665:14 - line
665:15 - back to the contact page we should do
665:16 - the exact same thing
665:20 - and then finally the about page we
665:23 - should do the exact same thing
665:27 - then save and now let's once again look
665:30 - at our site
665:31 - and notice that no matter which page
665:33 - we're on we now have the year referenced
665:36 - in the footer along with our copyright
665:38 - notice and everything looks
665:41 - just as it should okay guys just a few
665:44 - closing notes and you could call them
665:47 - corrections if you want to i just want
665:49 - to adjust a couple of things we're
665:51 - currently on the hours page for the
665:53 - little taco shop and i previously forgot
665:56 - to put in an h2
665:58 - for this page so i'm going to do that
666:00 - here on line 48
666:02 - and i'm just going to put hours in there
666:04 - and save something else that's been
666:06 - bothering me about this page the whole
666:07 - time was the back to the top
666:09 - link that we really don't need anymore
666:11 - there's not enough content on this page
666:13 - for it really to even be there so i'm
666:15 - going to remove that
666:17 - back to the top link on the hours page
666:20 - other than that i'm happy with how this
666:22 - page turned out of course
666:24 - everything is preference when it comes
666:26 - to css your design choices your
666:28 - preferences may be different than mine
666:30 - so feel free to make your own changes
666:33 - also at the
666:34 - contact.html page i previously removed
666:38 - every hr the horizontal rule element but
666:41 - i think i'd like to put one back here
666:43 - just between the two sections on this
666:45 - page or between the two articles if you
666:47 - will so i'm going to put this
666:49 - horizontal rule back
666:51 - between those two different articles on
666:53 - this one page one other thing i want to
666:56 - do
666:57 - is just change the text a little bit on
666:59 - the buttons so i'm going to click the
667:01 - file tree quickly go to the style.css
667:04 - file
667:05 - and here under the contact to underscore
667:09 - button class
667:10 - i'm just going to add a font
667:13 - weight
667:14 - of bold and save and now once we want
667:17 - look at these buttons i just like how
667:18 - they look a little bit better with the
667:20 - bold font always go back and re-evaluate
667:22 - your code make your own choices and of
667:25 - course you don't have to agree with my
667:26 - choices the best way to learn is
667:28 - experiment and see how it works out for
667:31 - you so that's the end of the project
667:33 - congratulations you've completed a large
667:36 - overhaul on the little taco shop website
667:39 - and styled it with modern css
667:42 - very few media queries necessary we
667:45 - added a nice animation and it does work
667:48 - in mobile devices as well even though we
667:51 - didn't need those extra media queries so
667:54 - if we go back to an iphone 6 7 and 8
667:56 - style we can now see how all of this
667:59 - looks in a dark mode and it is still
668:01 - working
668:02 - as we expect it to great job completing
668:05 - the project and completing the full css
668:08 - for beginners course

Cleaned transcript:

if you want to learn css this is the course for you dave gray teaches this comprehensive css course for beginners we've already published a popular html course from dave and this course is a great next step after you learn html hello and welcome to over 11 hours of css tutorials and instruction this video is made up of 24 tutorials that build upon each other much like the chapters of a book throughout the lessons in this video i will mention links being available in the description below i've compiled all of these links into one github resource that you will find in the description hi i'm dave gray and i'm the creator of these css tutorials you can subscribe to my youtube channel for more tutorials like this one you can also follow me on twitter and if you're feeling generous you can even buy me a cup of coffee a quick thank you to boa free code camp for sharing this video and to everyone at free code camp for providing such an outstanding resource that helps people learn how to code for free it's truly my honor to contribute this video let's get started learning css with chapter one what is css css is an acronym that stands for cascading style sheets so css is a style sheet language that's used to describe the presentation of a document it's most known for being used with html although it can be applied to other media like you see here i've got xml spg mathml xhtml and other things listed here for on paper in speech other media but we will be working with html now when we think about the difference between html and css consider html as the foundation and structure so if you think about a new building or a house that is being built and you see that structure go up that is the foundation that's everything that holds it together however the css is the paint and the carpet and the wallpaper or anything any decorations anything that makes it look good so the structure holds it all together it's the foundation the css is really what makes the appearance that actual presentation of the building or in our case we're working with documents okay now before we start writing css let's get the tools we need and first of all i will be using the chrome browser in this course so you can download chrome if you don't have it from google.com slash chrome and it should be available for every platform and it will probably identify what platform you have here as well after that we're going to use an integrated development environment really a code editor and what we will use is visual studio code so that is at code.visualstudio.com it should also recognize what platform you're on already but if it doesn't you can click other platforms and you can find it for all the different platforms that we're probably using okay go ahead and download the version you need and if you need chrome download that as well install the software and then come back to the video okay at this point i'm going to assume you've got everything downloaded and installed and now i've got visual studio code open right here you may have a welcome screen i closed that out already but what you need to do if you haven't already is create a folder on your computer for your project for this lesson you'll probably want to create a new folder for each lesson or at least build upon the lesson in the same folder either way you need a folder and the first thing we want to do is create an index.html file because once again we will apply our css to html now if you're not familiar with image shortcuts we can take an image shortcut here to quickly create an html document just type the exclamation mark and press enter and now this gives us a very basic html document and of course it has a title just of document it has a couple of meta tags up here you might not have seen but they're handy to go ahead and leave in the page for now what we want to do is just put some content so let's put a paragraph here and let's say i'm learning css with an exclamation mark and save and really that's all we need in our html document right now now there are three different ways to apply css to our document there is an external style sheet we could have an internal style sheet or we could apply css inline with an element let's look at each option and i'll start out with the external style sheet so i want to create a link element here and i'll press tab and visual studio code helps us out it already gives us the rel attribute that says it's a style sheet and we need to link to a style sheet but we haven't created one yet so over here in the file tree let's create a new directory and name it css now inside the css directory let's go ahead and create a new file named style.css and now we have our stylesheet file and inside of this let's put a p for our paragraph element a curly brace now one return and we'll go ahead and put a style here this will be a rule actually or a declaration if you will and let's just change the color of our paragraph and let's make it purple and end with a semicolon and save this is a very very simple style sheet right now and now back in our html we can go ahead and link to that style sheet by putting in the css directory and you can see visual studio code wants to help us out so we'll click on that and then it knows the style.css is in there so we can click on that and now that should link you may see some older code that has a type attribute here but mozilla now points out that this is no longer required and is actually kind of frowned upon so we do not want to include that but you may see older code with it it doesn't break the code if it's there it's just not the modern way of doing that so there is our link to the style sheet and now one thing we haven't done yet is add the live server extension so if you don't have that click on the extension icon over here on the left and then in the search extensions type live server and when those options come up we should see one from ritwik day and you want to select that and then you want to go ahead and install and i already have it installed so i don't need to do that but this will let us not only launch our html and css but anytime we make a change in save it will immediately reload just as if it's on a web server you don't want to load these files into your browser directly from your hard drive you want to really kind of have a development environment that simulates a web server and that's what live server does for you so go ahead and install that once you have that installed and i'll click on the explore icon over here to look at our files again but now you'll have some options in visual studio code you could click go live down here at the bottom right and it says click to run live server when we mouse over or you can right click just in the file and you can choose open with live server and i'll go ahead and do that now and there we have our very very basic web page but we can see it is super small i don't know if you can even see that i would have to zoom in and enlarge that but it says i'm learning css so we could add another style in our style sheet and let's just go ahead and put it above the color style and i will put font dash size and i'm going to change this to 64 pixels it should be pretty big now so i'll save resize visual studio code much better so we've got a purple i'm learning css with large font now let's go back to the html file and i'm going to expand visual studio code again so we have a little more room now in this head section directly underneath our link element i'm going to type style and press tab and there is such a thing as a style element now inside of the style element here between the opening and closing tags that is we can write css so i'm also going to style a paragraph and here i'm going to put the color as lime green now i'll save this and let's go back and look at our page and see what we've got now we have i'm learning css and it is lime green notice it's still large font though so the other style sheet i'll press ctrl b to hide the file tree for a second so we can see this better the other style sheet is still being applied but we have overwritten the purple rule for the color with green now does one take precedent over the other does the internal style sheet which is what we just built right here with the style elements that's the internal does it take precedence over the external not really just it's interpreted as another style sheet either way now normally i use external style sheets but there is no difference as far as the browser is concerned what is the different is the cascade or the order in which they're red so it read this style sheet first and then it read this one last so the last color that it saw for our paragraph was lime green we can further highlight that by highlighting our link element and cutting it with ctrl x and then pasting it with ctrl v underneath our internal style sheet and so now our external style sheet is read last and i will save and now we've got a purple i'm learning css again and the final way to apply css inside an html document is with inline css this is really not the way to do it though you really want to avoid inline css if you can i just want to demonstrate what it is because you can use style as an attribute and now we don't need a selector which is what the p is up here this is selecting the paragraph we already know it's being applied to a paragraph so here i'll just say color and i'm going to say blue i really don't need a semicolon because i don't have any other declaration here if i had more than one i'd have a semicolon in between now if i save this notice it's now blue over here this does take precedent over either type of style sheet internal or external because it's applied directly to the element itself but what we want is a separation of concerns so the best way the way that is commonly used is the external style sheet it keeps your css code completely separate from your html okay let's remove our inline styling from the paragraph and let's also remove the style element because we will be focusing on using external style sheets for the rest of the course so we can save that and let's go ahead and scroll up to the top of the html document and now let's move over to the external style sheet and then in the browser notice of course this is already back to purple now let's go to another mdn page that's the mozilla developer network and we get an anatomy of a css rule set so let's break this down and we can look at our own example to the left as well but we have our selector that means we're selecting the paragraph or paragraphs if we had more than one now we have a property and a property value so the property being the color the value being read and then the declaration is the property and the property value together so we have the same thing over here just color and purple and the full declaration is both now it says the whole structure is called a rule set but also notice it says the term rule set is often referred to just as rule so you could consider this a css rule if you will okay let's go back to our html document in the browser and something i need to note here about css is it's using the american spelling of color there could be other english words that are different but notice how visual studio code knows there's already a problem here and if i save this purple is not applied to our document it's back to the default black text so we need to spell things with american english i guess is the best way to put it our dialect without the u in color and there could be some other words as well but notice we didn't get an error or anything if we do put in color the wrong way it's just ignored and that is something about css and sometimes it's hard to detect when you've done something wrong because you're not getting an error thrown like programming languages the rule or the declaration i should say not the entire rule but this declaration is just being ignored because we didn't spell color in the way css expects so if i change that back once again we have purple text now one way we can detect problems in our css is to validate our css files so let's pull up a page that will do that and we go to css validation service from w3c that's the world wide web consortium and we want to choose file by upload where we can select the css style.css from our folder and you need to choose file and then browse to the folder where your css is which should be in the folder you created and then if you created a css folder it would be in there here's my style.css so i'll select it and choose open and now we'll just click the check button and this page will show us if there are any errors but if there's not you should get this congratulations no error found message just like i did so i will put a link to this css validator in the description of the video or with the resources and then in the next video we're going to learn all about css selectors today we're working with css selectors and there are three levels of selectors that are the most common now i've got visual studio code open here on the left and i have a blank style.css file that is linked to our html file and the html file is open in chrome already i'm using the live server extension with visual studio code so we will instantly see our changes in our page the structure of the html page has an h1 heading and after that we have three articles each article has its own h2 heading and paragraph inside so as we talk about the three different types of basic selectors in css let's start with the most common which is an element selector and i'm going to select the body element now there is only one body element per page but we have some very small font and i will get into more properties for each of the declarations as we go through tutorials but i'm going to use a few today just for examples and i'm going to set the font size to 22 pixels and save now we can see this made all of our text on our page larger and this is due to inheritance so these other elements actually inherited from the body element and we'll get more into inheritance in just a little bit too but this in itself is an element selector now there's only one body element per page but say i went ahead and selected the paragraph using the paragraph selector and now i can set the color of the text and i'm going to set the color of the text to purple and i'll save and notice it changed all three of our paragraphs to purple so element selectors select all of the elements of that type so just specifying p for the paragraph element selects all paragraph elements and now the second type of selector is a class and so let's define a class selector i'm going to call this class gray note that a class starts with a period before whatever you name the class and you can choose the name of the class but make sure it makes sense and remember your writing code for others to read not just yourself okay inside of this i'm going to set the color to gray that makes sense to me now i'll save that and notice paragraphs 2 and 3 turn the gray color and if we look at our html which is a little crowded over here but if i scroll down to the second paragraph here we have a class set equal to gray on that paragraph likewise we have a class set equal to gray on the third paragraph as well so classes can be used more than once and they're very useful that way you're creating styles that you can apply throughout your project or throughout your page and then they can be reused with more than one element and note classes are more specific than selecting all paragraphs for example and because they're more specific they overruled the purple setting that we had for all paragraphs and now gray applied to these last two paragraphs here and we will also discuss specificity in more detail in just a few minutes as well now classes are the most common type of selector with css but the more specific selector yet is an id selector and i have an id named second an id attribute inside of the html and here i'm going to apply a font style and we'll set that to italic and i like to have a space afterwards now i'll save and notice the second paragraph became italic as well so it specifically addressed the second paragraph now ids should only exist once in an html document they should be unique in other words however it is not good practice to really use ids inside of your css now it will validate your code has no problem using an id however typically you should use classes and sometimes element selectors but rarely if ever should you use an id selector inside of your css they do have other valid uses if you remember from html linking a form input back to a label element and then as you learn javascript you may have some other uses for id attributes as well but we try to keep them out of css and now that we've covered the three basic types of selectors let's discuss what you can do with some of them just a little bit more so let's have our h1 here and let's set the color for the h1 to blue and we'll save and we can see it only selected the h1 we only have one h1 on our page but we can also group selectors so let's set all of the h2s as well to blue and you can see i just put a comma between and then this declaration or this rule set the entire rule set if we had more rules in here more declarations i should say it would apply to both the h1 and the h2 so you can go ahead and group selectors with a comma in between now notice what happens if i remove the comma and save this declaration or our full rule set especially if we had more declarations none of it would apply to the h1 or the h2 now what's going on here this selector is looking for any h2s that exist inside of an h1 it's not looking for an h1 or an h2 it's only looking for h2s that exist or are nested if you will inside of an h1 so that's why that didn't work that may be useful to know in the future but what we need is a comma in between and then we can select both the h1 and all h2s on the page with this rule set so let's look at an example of where we would select an element that's inside another element so let's start with our paragraph elements again and now we'll look for any span element inside any paragraph element and here let's set a couple of values so we'll set text dash transform and i'm going to choose uppercase here and then i'm also going to set a background color and let's set this to gold so it stands out we're essentially highlighting what we want to see and now we can see we have set this word whatever this word is this is latin from our lorem epson we've set it to uppercase and same with epsom and then we also set gold behind each of these words with this however this doesn't make a lot of sense this is a much better example of where we should use a class we might name our class something like highlight and then apply that to our span elements inside of the index so we've come in here and find our span and i'll select both of these and then we can add the class highlight and that makes it reusable if i spell highlight correctly there we go and save and now it's once again applied but this would keep our css much more organized and actually more reusable it's more flexible this way because we might have some span elements doing other things that we didn't want to apply this rule set to and now one last selector to discuss it exists we wouldn't use it that often but it is the universal selector and this means it's selecting everything on the page you typically only see this for what is called a css reset that we will cover in the future but just so you know it exists this selects everything so let's think about what we could apply here that would be applicable to everything so let's change the font and we'll set it to this mono space font and save and now you can see all of the text on the page turned into this monospace font instead of the default font that we had now this is not how we would use this again in the future we'll learn about a css reset that would use that selector but typically that's the only time you see that universal selector used okay let's discuss the cascade css is an acronym for cascading style sheets and essentially that means css works like a waterfall it works from the top down and that means if i were to put in another definition i'll just copy this down for paragraph and where we have the color purple on our first paragraph it really applies to all but then of course the gray class overrides that on the final two but if i came here and said red instead of purple notice how this paragraph turns red and that's because it read this rule set last so first css looked at this at the top it starts at the top and it works its way down and so it read this last essentially this is the last rule and that means whichever definition it reads at the last will be applied now specificity can override this and that's where we talked about elements and then classes classes are more specific for example than just an element selector so we have our class here that has the color gray and it is overriding the red now if we remove this class and we save now they're all red but even though we're looking at the cascade and starting from the top down even if i put this class above the paragraph selectors and save it still applies to these last two paragraphs because it has more specificity than an element selector and the element selector here purple of course is overridden with the last rule being the element selector here for red so we start out with a red paragraph and it's really applied to all paragraphs except that then css sees there is a gray class applied to the second and third paragraphs and that has more specificity so it overrules whatever is set by the element selector now a problem you can have is when you have a large css file and maybe you have set this gray class on these paragraphs and later on let's say you're way down a couple of hundred lines and you're setting a color on a paragraph and you can't understand why it's not being applied so let's go ahead and expand chrome here and you can right click and choose inspect and once you inspect your page then you can look at the different classes and css rules that are applied so here's a good example of that we have got our third paragraph highlighted up here in the elements tab and then we're looking at the styles and we can see we've got paragraph rules here these element selectors but color purple is crossed out and then color red is crossed out so css knows these rule sets exist for paragraph but it also knows it should follow what is the most specific using the rules of specificity so here we have a color gray that is being applied so you can see sometimes when you're struggling with your css and you have written a rule and you're not understanding why it is not being applied you should inspect your code with dev tools and once again you right click and choose inspect to do that and then just go to the correct tabs elements highlight the element that you want look at the styles and you'll see how it is being read by css in the browser or how the browser is reading your css and then see how those rule sets are being applied which ones are being overridden and which ones are actually being applied okay i'm going to close that out now and i'll resize chrome so i'll come back over here to our style and as we go to the top let's talk about inheritance as i got into specificity a little bit already but inheritance that is where another element inherits the settings from or the properties from its parent element so the body element is parent to every other element here and so when we set the font size all of these other elements inherited that font size now typically anything related to font or typography is inherited and that can include things like color line height alignment all sorts of settings dealing with the font and the typography however any properties that are not related to those things are not inherited and i know that'll just take a little bit of getting used to as you learn more about css so for example this font size was inherited but another setting we could put is a border and i'll put three pixels so it's easy to see solid black and i'll save this now notice the border only went around the body element it didn't apply to all the other elements inside of the body so that's an example of something that is not inherited and i'll go ahead and remove that again now we did briefly talk about that universal selector let me go back to that and show you that this is not inheritance this is actually selecting all elements so here if i said a border and i'll put one pixel solid red and save notice it does apply to all elements that's because we selected all the elements here so setting something here with the universal selector is not going to cause inheritance really because it's actually selecting all the elements itself okay i'll remove the universal selector again but getting back to just the inheritance overall this can be very handy because it keeps us from writing repeated code in other words it keeps our code dry which is an acronym that stands for don't repeat yourself so we want to write less code and be more efficient and inheritance helps us do that now some things are not inherited like i mentioned the border would be one of those also form elements do not inherit say the font size and other typography settings so it wouldn't be that unusual to see something like this that would take a button and let's say an input a text area and let me see if i'm leaving anything else out maybe a select anything like that and we might see then font and set it to inherit and that would go ahead and make those elements inherit the font settings because just a mental note that form elements do not typically inherit those font settings but now to take advantage of inheritance and write dry code we can use the body element which appears only once per page or we could use the html element and either would work oftentimes if you're just starting out and just remembering it might be best to just use the body oftentimes i use the html element because once again the inheritance applies there so we can save here without see the difference now i'll go ahead and apply it in html and once again we have the larger font because there are for me at least some specific settings for the body and i like to see those separate so i often put all of my font settings in the html selector but again either would work one other element selector that i do use at times is the main element it is a semantic element and it should appear only once per page but then you have to be aware that you're only selecting the things inside of the main element so if we look at our page i've got the h1 inside of a header element and not inside of the main element so if i were to change the font family inside of our main selector and i changed this to mono space which is easy to see the change with go ahead and save you can see all of the articles switched to mono space but our h1 heading is still using the other font okay coming back to specificity just something we talked about so a quick review that element selector is the least specific and then a class selector is more specific and then although we don't want to use them in our css an id selector is even more specific than that sometimes something's not working out and you're wanting to figure out why it's not working out or you just can't figure it out and you get frustrated i'm going to show you something that will work but i'm going to recommend that you do not use it it's kind of the nuclear option if you will and it's to put an exclamation mark and put important now see how red should be applied to this first paragraph but with the important flag right here after our purple setting and now i save notice what happened it turned the first paragraph purple notice what else happened it also turned the second paragraph and the third paragraph purple now why is that well this important essentially ruins everything else it overrides everything so really when you see it in code it's kind of an indication that it's not well organized or it's sloppy there's only a few reasons you would really want to use this and i feel i mean i'm hesitant to even show it because i feel like beginners could abuse this however you'll see it somewhere i just want you to know it exists don't use it don't use it you need to learn how to organize your code and apply it correctly and only after you've learned css well enough to understand when to use that important flag that's the only time you should use it you should really not give up the struggle you will learn more by struggling and learning how to apply these selectors in the proper way without using that important flag i do want to show you one thing that will help you learn and that is the specificity calculator and i will give a link to this in the resources you can see they've got some basic values here that are already fairly complicated but you can zero these out and you can compare two selectors to see why they are working and why they aren't working or why one overrules the other you can see an element selector here for an h2 has a score of zero zero one but if i put in my class of gray it has a score of 0 1 0 in other words 10 which is a higher score than 1 so the class overrules the element selector and likewise if we put in an id selector like we had second it has a score of 100 over 10 so that is better now you could apply more than one class for example to an element so let's see what happens if we had a second class and we had our highlight class now this has a score of 20 but it's still not going to be as high as a score of 100 so this specificity calculator will certainly help you understand why one rule is being applied or why one selector i should say is being applied over another today we're learning about css colors i've got visual studio code here on the left and our web page on the right it is a basic web page and i'm using the live server extension so when we make changes in our css and save we'll instantly see the changes here in our page i've got an h1 heading and then i've got three articles and each article has its own h2 heading and a paragraph okay and that's really all there is you can see it's got the default colors a white background and black text and that's usually what browsers default to i've got just a few declarations over here for our page just to make it readable i've got a larger font size i've declared the font family and line height and we'll learn more about those when we get to typography in this series right now i want to show you just how to set a background color first and the first declaration we'll look at is setting background dash color and then notice visual studio code instantly wants to help us it pops up a list of color names and there are 140 color names available in html and visual studio code recognizes all these names and notice it's going alphabetical so if i type something like the letter p it suddenly shows us all of the color names that start with the letter p and so on so we can just pick any one of those i'm just going to go ahead and pick something like blue and i'll go ahead and save and you can see visual studio code also shows us a little square of blue beside the name blue and now if we look at the page it has a blue background now that's not nearly as legible because we also have a dark font so we also have to consider the contrast when we pick colors to make it legible and readable for our viewers and it also needs to be accessible and there are contrast ratios that are specified and we'll look more at that here in the near future right now besides just setting the background color with the background dash color declaration we can also go ahead and just say background that's shorthand and it also allows us to set other properties that we won't learn about today but we can just set a color by saying background and that's often the case because it's shorter to type than background dash color so you'll see this often instead of blue let's change our background color to an interesting color name i like papaya whip so i'll save and that's much easier to read as well so our dark text looks good on this background okay now that we know how to set a background color let's change our font color as well and we do that just with the color property so in the declaration we can once again name a color so i could just say black and that looks okay let's see if there's a dark color yep a dark blue let's see how that looks on top of our papaya whip background well not too bad it is definitely legible so we have determined two different color names and we chose those through visual studio code there the color palette just popped up and we'll go over that in a minute too but this is where you'll typically see color set background and font color and you can set the background color to a lot of different elements and we often have fonts on top of those elements or inside of the elements but on top of those colors now let's discuss another way to set colors instead of color names we know we can look for color names and visual studio code will help us also we can use rgb which stands for red green blue and then we put parentheses and now this takes three values a red value and the max value is 255 then a green value and a blue value notice i put zero for both of those so this is all red and you can see visual studio code even tells us it's going to be red before we save our file if i go ahead and save now all of our text turned red likewise i could change this and say no red all green and no blue and we have green text and that looks absolutely horrible on top of that background let's try blue now and there we have blue text on top of the background which is okay if we wanted black we would go back to all zeros and likewise if we wanted white we would have 255 for each value now as we previously learned about the cascade we can go ahead and define a color of text on the body but then we can override it inside of some of the elements so let's say our paragraphs here and we want to override that with a different color so maybe we want a blue text for the paragraphs and we can put that here and style all of our paragraphs now with blue text but i don't think that looks the greatest i'm going to go back to black but then also there is something called rgba which adds an alpha channel and that alpha channel guides the transparency now instead of 0 to 255 it has a value from 0 to 1. 1 is just like the alpha channel wasn't there that's normal and so that would be the full black color and it matches the headings that we have on the page so you don't see a difference but 0 would make it completely transparent and all of our paragraphs have now disappeared however we could put it at fifty percent and we should see the difference so the paragraphs are not as dark as the headings because they are fifty percent transparent now that we've looked at rgb and rgba let's go ahead and look at hexadecimal which is a common way to specify colors here the color palette keeps wanting to help me so we will be using that very soon hexadecimal also works like rgb and it has its own way of coding the values though it goes from 0 to 9 and then also uses letters a through f and now 0 just like we learned with rgb is the absence of color so six zeros is once again black and you'll notice our paragraph text is totally black likewise the highest value being the letter f that is full red green and blue and so now we have white paragraphs because we set those all the way to the highest value so two fs in the beginning position means red then zero green and zero blue and we should have a red paragraph and we do likewise we could say two zeros two f's and two zeros and we get green and finally if we did four zeros and two f's it should be blue so we can kind of code those in the same way once you learn hex now if you noticed earlier when i was typing color names like dark blue and everything else here that starts with dark look at the hex codes over here to the right visual studio code is already helping show you all the different hexadecimal codes for these so we can of course get those codes by typing color names if we want the code of a name but there are many more colors than there are color names and you can really expand your palette by using rgb or hex codes now we can also type shorthand when the color codes match so two zeros two zeros and two zeros is black but it could be represented just by saying zero zero zero because each pair matched likewise two f's two f's and two f's is white so we could just say fff and each single f represents a pair so if we had two f's two zeros and two zeros for red we could just say f zero zero and we still have red so our shorthand for green would be 0f0 and then our shorthand for blue would be 0 0 f but they have to be pairs so a hex code like 80 80 80 doesn't have shorthand it's gray but the 8 0 isn't a pair so it's not a 0 0 or an 8 8 so you can't really do a shorthand for a hex code like this so not all hex codes have shorthands just the ones that have pairs for the red green and blue values but i can save this and we can see kind of a dark gray color here as well so those are the ways to provide hex values okay let's look at the color palette the visual studio code has had popping up every now and then all you have to do is mouse over the little color square and we get a color palette now when i grab the circle and drag it around notice what it's doing it's giving us all these different hex codes up at the top and here if i come all the way to the bottom right you can see it's all black all the way to the top right it's red and that's because we have our hue over here set to red as well but we can pull this down into the blues and we can get different colors that way as well then we could drag this around and if you click the bar at the top you can switch this to hsl which we haven't covered yet and there's rgb as well so you can go through those different values i'll leave it on rgb here and we can pull down our transparency and it immediately goes to rgba notice we have that alpha channel now so i'm pulling this down and we're setting a transparent value on there as well so now when i leave it there and go back to visual studio code it's already changed our code to represent that rgba value and i can save our file and now that is the color of our paragraphs now that's a little light so i want to go back and i probably don't want it to be that transparent so i could bring this back up here closer to the top and save and now we have a much darker color we would still want to check the contrast on that i'm not sure if there's enough contrast or not and we'll look at a contrast checker in just a few minutes let's go back to the visual studio code color palette and as i talked about hsl here i clicked again and we had hexadecimal i'm going to take this all the way up hsl also has hsla which adds the alpha channel but hsl stands for hue saturation and lightness so i'm going to pull this over here kind of to the middle and that looks good and there we go and i'll take this all the way to the top so we're back to zero there for red and overall i'll maybe try this in the top corner there we go that's what i want so we've got zero 100 percent and 50 50 means it's right in the middle for lightness so there's 50 percent more lightness available or there's 50 we could take away 100 percent would be white and 0 here in the third value would be black likewise 100 percent here for saturation gives us the full color and 0 gives us gray if i can pull this in here we get the color gray no matter what once we get down to fifty percent here there we go fifty percent is totally gray and then if we were at a hundred percent there on the right that's white and zero percent that's black so we want to be right in the middle which would give us the gray there but likewise then we don't have the saturation so we'll come back across here to the right and try to get back up to 100 in the middle and 50 percent there that went away and now the zero we have here for the hue well that's represented over here on the right with this slider notice at the top and the bottom we have red and the max value here is 360. and that means this is usually a circle it's usually represented as a color wheel you may have heard of a color wheel before and we can drag this all through the different hues so we get all the different colors there and once we get to about 360 we're back to red it went back to zero so you can see that takes through all the hues all the different color ranges we could have there so hue saturation and lightness and this is worth playing around with as well and as you get a little bit more advanced and learn about css variables you may decide you really like working with hsl but most beginners start out working with hexadecimal rgb and color names so it doesn't hurt to learn about any of those let's switch this back over to rgb switch it back to hexadecimal or you could just switch it back to a good old color name like red although red is not going to look that great as far as our page goes so i want to take this over and pick a color i like to use which is not quite solid black but it is a dark color and there we go for the paragraphs i used use 333 which as you know is the same as saying 3 3 3 3 3 3 and we save and we still have the same color it's just that shortcut can be used for those pairs okay we've covered a lot of different ways to pick colors and we've covered the visual studio code color picker here that really helps us out but we also need to look at some tools so let's look at the tools we've got here coolers dot co that's c o o l o r s dot c o this is a great color palette picking tool and you can start the generator and start picking your color palettes as you go here it takes it just a minute to fire up but then you can choose these color palettes or press the space bar to generate all new palettes tell it which color you want to keep and which ones you want to get rid of and then you can just copy these colors here's a copy right here to copy the hex that it shows there and so on so this is a great source for picking colors but what i really like on this site is the contrast checker now i also have the web aim contrast checker this is web accessibility in mind and this is really a great site for checking accessibility features and as much as i like their checker the one on coolers.co is even a little bit better for me so i've got a background i want to go with i'm going to put this hex code in here and now it's dark and now i'm going to put in white for the text color and you can see it checks out a 7.2 which is considered very good and if we scroll down just a little bit it talks about the web content accessibility guidelines so a minimum is a double a minimum contrast and there you want to have a contrast ratio of at least 4.5 to 1 for normal text and you can see we've got 7.42 so that is good you want to have 3.1 or 3 to 1 for large text and it shows here we've got 3 stars for large text as well so we're doing good there but a triple a requires at least seven to one and we barely made the cut there with or 7.4 here and then four and a half to one for large text so this will just grade your color contrast for you and make sure it works out so we could go back to our code and check out another one so let's go back to papaya whip and here's the great thing about visual studio code now i can click here find the hex and it changes my papaya whip color name to the hexadecimal code so i'm going to put this in as the background and then for the color i'm going to put in my hex for the 333 and it just changed it to the full hex code but you can see this is great contrast with 11.17 and it gives the example of it here up above as well legibility and accessibility are very important considerations as you pick colors for your web page now i'm going to give links to these resources in the description below this video as well and what i suggest you do as a beginner is just play around with the different colors play around with the visual studio code color picker or color palette here as well and just kind of get comfortable with setting colors on your page and of course always come back and check the contrast ratio and make sure you're meeting those minimum requirements for web pages let's move on to css units units determine the size of everything in your page today we're going to cover the most common css units on the left i have visual studio code on the right i have the chrome browser it has an h1 heading on the page and we have one paragraph on our page and we're displaying this page with the live server extension so anytime we make a change and save our css file we'll automatically see the changes over here on the page i'm going to start out by just putting in a paragraph selector and then i'm going to put in the font size and after that without even typing anything look what visual studio code gives us a lot of suggestions there are so many different units we could choose from so today we'll cover only the most popular ones as we don't need to cover all of them just the ones that you'll see and construct your pages with most frequently so i'm not even going to put in a definition right now let's just delete that and switch over to the mdn page for values and units and we can see a chart here of absolute length units and really the only absolute length unit we will use commonly is pixels and you can see here is the equivalency it's one pixel is equal to 196 of an inch and really one pixel as you might guess means one pixel on your screen we abbreviate that with px and i say it's the only absolute value we're going to cover because as mdn says it's really the only value that you will commonly use as far as absolute units go so let's switch back to our page and now here in our css page i'll once again select the paragraph and we can set a absolute size to the font in our paragraph if we want to the default in any browser is usually 16 so if i set it to 16 we don't see a change but if i set it to 32 we definitely see a change it gets twice as big but i don't usually want to use an absolute value like pixels for a font size and let me show you why normally we have a default browser size as i mentioned that's usually 16 pixels however if i set that on the root element font size 16 pixels we don't see a change here but if i go into my settings in chrome which you can do with the three dots and then choose settings once you launch that you'll be on a settings page and then you can choose appearance you go to a font size user preference and medium is what most are on but there's also other choices from very small to very large i'll choose very large we definitely see a change on the settings page right when i do that back in our document we don't see a change it didn't change at all i can refresh and it won't make any difference it did not change our font size with the user settings and that's because we took that choice away when we said no these absolutely must be 16 pixels here that's our root size but if i delete this and we just let the browser handle the default size instantly all of our font gets bigger and our user settings take over we don't want to take that choice away from the users so we don't want to use an absolute font size such as a pixel setting so i'll go ahead and delete that so where would we want to use pixels in absolute value there are other settings that we might want an absolute value for so i'll select the h1 that i have here and i'm going to set a border on it and i'll set it to 2 pixels and then just so we can see it better i'll set it to dashed and red so it really stands out and save and now we can see this border around our h1 element and we have this absolute value for the pixel width and no matter what happens to the page on a small viewport large viewport whether it's a mobile device or a large desktop screen this will remain as two pixels and that's okay in this instance let's go back to our mdn page and now that we've covered the only pixel size that we were going to cover and that was down here on our pixel chart we're going to now cover percentage and we see that up here in a different chart this is a numbers links and percentages chart here so we're going to use percentage and it says it represents a fraction of some other value so 50 of something else percentages are always relative to another quantity so that's a consideration as well now when we set percentages we wouldn't normally do that with a font size either so let's set a percentage for a width on our h1 and now by default an h1 is a block level element and so by default it has a width of 100 so if we do that we're not really changing anything and now it's just 100 percent as expected so let's go ahead and change that it looks at the parent though it's taking up 100 percent of the parents with or whatever was given to it so whatever it has available to it it took up 100 and now this is only taking up 50 so let's look at the parent for the h1 it is inside of a header element so if we take this header element and we set it to a width of 50 percent then we should see a difference and yes it's even smaller so we're taking up only 50 percent of the header element which is taking up 50 percent of the page so really this h1 would be 25 percent of the page likewise if we change this to a hundred for the header then we'll see our h1 takes up 50 percent of the page so that's the thing to remember about setting a percentage for the width is that you are putting it relative to the parent it's only using what it has available to it if the header is a hundred percent then the h1 that is the child has a hundred percent of the page available to it however if the header is smaller let's put it at eighty percent then we're only using up fifty percent of eighty percent of the page and once again if you want an element that is a block level element to take up 100 of the width of the page you don't really need to set it because that is the default value already so now we're taking up half of the page by setting the h1 to 50 percent because it is 50 of the full 100 width and you may see other uses for percentages as well but you commonly see them to set the sizing of different elements as far as the width of the page or sometimes the height but also we don't need to set the height because it will grow as the content grows i'm going to go back to my settings and set it from very large back to medium which is where most have their browser default to now when we look at our page the font is smaller but let's talk about another relative unit and this one does show on the mdn page in the chart down here under relative length units and it's the rem this is the unit that we'll typically use for font size and it relates to the font size of the root element now i already suggested we shouldn't set a font size on the root element so for our html element we typically wouldn't set a font size in here because we want to let the browser handle that and set the default font size so let's not do this for the html element i'll just go ahead and cut this i'm going to put it below the h1 and i'm going to set a font size for our paragraphs instead and this font size if we set it to one ram that's already the default so it shouldn't change anything and we see the size is the same so it says one root element which the root element is the default font size set by the browser the em doesn't stand for element by the way that's m so we have one root em or one root m but that means the root size that is defined and in our case when we don't set it then it's set by the browser so hopefully that clears up some confusion but if we put in two m's then it's going to double the default size and now we're probably at 36 pixels right here because most browsers default to that 16 pixel size so you can see how this relates back to the root now if we set a font size on the parent because our paragraph is in a main element we set this font size to to rem also it doesn't change the paragraph font size at all because the font set here is not relative to the main element it's not relative to the parent it's relative to the root which is defined by the browser so it's always going to look back to that default root size if we had set a font size in the html element it would be looking at that but without setting it it's the default size so what happens though if we switch these units if we're not using rem if we're using m just em so now i'll delete the r there and save oh boy that got a lot bigger well here's the problem that we would have if we were using m's for our font size it gets amplified so our main element was looking at the root so it doubled that to 32 pixels and then using two ms is looking at the main element which is the parent of the paragraph and so then it doubled that so now we're at 64 pixels so that's what happens and you can get unintended consequences if you just use m's and that's why using the rim and always looking at the root definitely helps because the way we can get confused for example is if i remove this setting on the main and i save well now this is also looking at the root because there's no other font size saved and so we think okay we're good to use just m's but the problem is if somewhere along the way in our project and we have many elements we're styling we set another font size on a parent element suddenly it's amplified when we use m's so i'm going to switch this back to two rims and get closer to the size we'd want and it's going to look at the root so when would we use ms instead of rims we know we want to use rems on font size well when we set the font size on an element m doesn't look at the parent it looks at the element itself and so we could use it for something like margin or padding which i know we haven't covered and we will in more detail when we look at the css box model but i'm going to go ahead and do that here for the h1 so if i set a font size for the h1 and let's make it bigger let's make it three rem here and we save we instantly have a bigger font size on the h1 but now i can set the padding to 1 m which is the equivalent of the font size of that element so now this would also be 3 rims so it should be a pretty good size padding yes we have a lot of padding so i probably don't want that much maybe i want to drop it to 0.5 and now that's that's more reasonable that looks pretty good for a heading there so we added that padding which is inside this border it added extra padding and that is essentially half of three rims which would be one and a half and if we relate all this back to the default 16 pixel size one and a half of those would be 24 pixels whereas three rims would be 48 pixels another instance where we may use m's instead of rims would be for the padding or margin setting on say a button if we created a button we would have text in the button we could set the font size for that button with rem but then we could go ahead and set the padding and or margin with the m units let's go back to the mdn page and look at our chart one other relative unit i'd like to look at today is the ch that stands for character and we have the advanced measure width of the glyph zero which essentially means the character zero of the elements font so whatever font we're using it's the measurement of 0 and that helps us determine the character width and that kind of comes from print magazine newspaper layout and those sort of things where you only want to have a certain width based on the character size so in this example we have a font size here for our paragraph i'm going to go ahead and set the width of the paragraph and let's say we don't want any more than an estimated 40 characters per line before the line wraps in the paragraph if we set that width notice it now has approximately 40 characters before the line wraps and that kind of helps us define columns if we're doing that in some type of layout now we've acknowledged that the browser sets a default font size but it actually sets a lot of different default styles as well so let's go ahead and right click on this h1 heading and choose inspect or you could press ctrl shift and the letter i either way what we're doing is opening up the dev tools it may scrunch our page here a little bit but that's okay if i highlight this h1 now it is showing several things about the page it's showing that there's a large margin that's going to be the orange when i highlight over it's showing the green area and that's padding that we set and then the blue area is the h1 itself right here so we see all of those things in dev tools when we hover over these elements and by the way i'm on the elements tab of dev tools and then if you don't have your dev tools on the right you can click the three dots here and there's a dock side setting maybe it's on the bottom for you but if you want it on the right you can choose dock to the right just like i have here so we can really see more about all of these elements in dev tools what we can also see as we come down here are the styles and then we see the h1 and the styles that i have set on the h1 element but underneath that we see some others as well and it says user agent stylesheet this is what the browser is setting on the h1 element by default that we don't have to and you can see we have put in a different font size so we have overridden the font size for the h1 element so it has crossed that out everything else here the display block and the different margins and even the font weight are applied from that user style sheet so those are default styles and we can override them just like i did with the font size and before we get into these next two relative units we are going to override some of these so what i want to do is start a css reset which i'll talk about more in the tutorial of the css box model as well but i'm going to use the selector that selects all elements again our wildcard selector and here i'm going to set the margin to zero the padding to zero and one other setting that says box sizing and i'm going to set that to border box and when i save notice all the padding and margin is gone now our h1 is right up in the left corner we don't have any space between the paragraph and the h1 we got rid of all of those default margins and paddings that were creating that extra space but that's important when we go back to the mdn page and we look at these next two relative units we have viewport width which is one percent of the viewport's width and viewport height which is one percent of the viewport's height so let's look at how we can apply those but if we had that extra margin and padding there we wouldn't be able to see the detail that i want to show okay i'm going to take our main element here and set a width on it with our viewport width units just so we can see what it is capable of and so i'll do that i also need to set a background color just so we can see what we're doing better and i'll set this to let's say sky blue and save so now we can see the width of our paragraph is actually wider than the width of our main element and so it is overflowing that main element but we have actually set the main element to 50 of the width of the full page and you can see that's matching the 50 width that we have up here but i'm using the viewport width units right here there may be times when you want to use the viewport width but most of the time i find myself using the percentage and getting the same result and i'll give an example where the percentage is actually a better choice so let me remove that 50 percent and i'll remove this background color that's making our page look bad and we'll come back up to the top and underneath our select all i'm going to choose the body element here and as i'd said before we don't need to set a width of a hundred percent but i'll put this in and i'm going to set this to 100 viewport with units instead and save now we don't really notice a change and i have seen this on pages and i've even done it myself but i figured out the problem if we have a width of 100 viewport width units we do have a problem when the content out the vertical content outgrows the page and i'll show you why so i need to go back to the html and in the html i'm going to quickly add some more content so i'll say paragraph times 10 and we'll do this with some just sample lorem text that's an image abbreviation so when i press tab it adds all those extra paragraphs and save now we've got lots of content here and now we have a problem and here's the problem our scroll bar showed up on the right which is good we need that to see all of this content but what also happened is we had a scroll bar show up down here on the bottom and that is because our viewport width when we set it to 100 as we did on the body right here does not account for this scroll bar on the right so as soon as this scroll bar on the right shows up and it shows up when our content outgrows our height so when we need to scroll to see the content is when this shows up as it should but then that little extra bit that we can't see creates this scroll bar so we can see it and that's annoying and most developers don't like that horizontal scroll bar showing up so if you were to set the width 100 would be much more desirable because now we still get the scroll bar here where we can scroll up and down vertically we do not have a scroll bar on the bottom and we don't usually want that but overall as i've mentioned before we don't even need to set 100 width on the body as it should default to that anyway i'm going to jump back to the html and go ahead and undo all of that extra content we added and save so we're back to our normal content for the page let's go back to style as well and let's right click once again on the page and i just kind of i think i selected the paragraph here so when devtools opens up it should be on the paragraph and we'll see that here in just a second yep i'm on the paragraph now let's highlight the body notice the body is not the full height of the page it only grows with the content but sometimes we want a body element that is the full height of the page even if we don't have enough content to do that and we can do that with the viewport height unit and i'm going to do that over here in our code i'll choose the body element but i don't want to set height because that would also limit it to 100 vh and then we could outgrow that if our content were to outgrow what i want to do is set the min height to 100 vh and save and now that will still allow the body to grow with the content if it outgrows the viewport but at the same time it's now the full page and there could be instances where you want that let's move on to the css box model today you'll learn that everything in css is a box but before we finish i'll show you how to turn a box into a circle if you want to so let's get started on the left i have visual studio code and i have the code from the last tutorial we'll modify that in just a second on the right i have a basic web page once again with an h1 header and a paragraph and i'm using the live server extension so any changes i make in the css and when i save the file will immediately show then in the web page okay so everything we have over here except the h1 has got to go so i'm going to delete everything above and below and leave the styles for the h1 and we can now save and we see those changes so our paragraph text has gotten smaller and everything else is pretty much the same except we do now have the default styles from the browser again and we'll get back to that css reset in just a bit but right now we want to look at this box model and we've already drawn a box by putting a border around our h1 element we can see this border here defined with shorthand and we'll get into what all of that means in just a second too but what i want to do first is drag our visual studio code over as far as i possibly can and give us some more room in the browser because we're going to open up dev tools so once you do that you can press shift alt or i'm sorry not shift alt it is control shift i believe and the letter i to open dev tools and if that's not working then you should be able to no that is going to work it just took a second here on my computer and if that doesn't work you could right click and choose inspect as well once you have it open you may not have your dev tools on the right and if you don't you can click the three dots and choose where it is docked i like to have mine on the right and then you can select any of the elements in the html here and you see it flashing over on the web page because it highlights what element you've selected and i am in the elements tab that you can choose as well after that i'm going to select that h1 so it's inside of our header element here and after i select it i've got h1 and notice the colors changed on the web page this is already showing us the box model right here so what we have for the orange is the margin and then we can clearly see our border that we put in with two pixels and it is dashed and then inside of that we see green and that is the padding and then inside of that we see blue and that's actually the content and now if we go down here where we have a styles tab let's choose the computed tab and we actually see the box model inside of our dev tools so we can highlight any aspect of this so i'll go to the content first and now we only see the blue highlighted on the web page and that is our content and it's showing us the actual size of the content in pixels here as well and then we go to padding which is the next layer the padding is once again inside of the border and it just wraps around our content it gives some extra space inside of the border gives our content a little room to breathe if you will so here you can see it's 24 pixels then we have our border which it shows it as 1.993 pixels we set it to 2 pixels hey close enough right and after the border we have margin and you can see we didn't set a margin so this margin is just showing the space that is left after our element is there so on top we have 32 pixels and then we have 32 pixels on the bottom as well and that's probably just because of the default of the h1 we didn't set a margin on the right but we do see a big margin over there and that's just because we have set that 50 percent width on our h1 so it's not taking up the full page space and what's left is occupied by margin so it's important that you remember how to get here in dev tools we're on this computed tab below and you always want to be able to bring up the box model to see exactly what's going on with your elements after that it's also important to just memorize the different layers of the css box model so starting on the inside we have content then we have padding then we have border and finally we have margin on the outside and now concerning our h1 and the margin that i have highlighted notice it's 32 pixels actually 32.16 pixels and we didn't set that so that's a default style on the h1 we've got the h1 selected let's go back to the styles tab instead of the computed tab and we can see this if we scroll just a little bit there's the styles we set and then here are the default styles from the browser this is a user agent style sheet that's assigned by the browser and here you can see they assigned some margin settings here it's 0.67 em so that's essentially two thirds now if we remember about our units an em responds to the font size of the element and we set a font size of three rim which would essentially be 48 pixels so twothirds of that is coming in right around where we see it on our box model here at 32.16 pixels so now that we know our font size is impacting the default margin let's go ahead and change our font size and of course it will also change our padding that we based on em units i'm going to change this to 2 rim if i can type here to rim and save and now things have changed notice our margin got smaller it's 21.44 because our font size got smaller and this is based on an em unit an m as far as the browser is concerned so once again it's still 0.67 em but the actual size is smaller it's 21.44 pixels now changes like this can be really hard to keep track of and so that's why sometimes we just want to reset the browser settings for all the margins and all the padding and just take control of them ourselves and that's why we use a css reset and a very basic css restart starts with the wild card at the top and then we set margin for all elements because remember this wild card selects all elements so we set the margin to zero and we set the padding to zero and we can save and now all of that margin and padding that is set by default is taken away and you can see the body actually had a little bit of margin set to it as well because now we're right up to the edge of the body here on our page and this border we set around our h1 is right up to the edge of the page as well and there's one more setting i always put inside of the css reset and that is box dash sizing there we go and now the default is content box and if we save we won't really notice a change here it didn't really change anything because that is the default so what the content box does is it says okay the size that we're setting is this for the content and the content only it doesn't include calculating the size of the padding or of the border or of the margin at all so instead of 50 percent i'm going to set an absolute width on here so we can compare and i'll set this to say 400 pixels and save now let's look over here in our box and we can see the content is 400 pixels but that doesn't account for the padding what we have here is not the 400 pixels we were expecting we took up more space than that but if we set this to border box instead of content box then we'll get what we expect and it's much easier to calculate so now notice our content over here is not 400 pixels is 348 and then we can add in 24 pixels of padding on each side and two pixels of border on each side and then we can get our total of 400. so what borderbox does is it really helps us calculate the sizes that we are assigning because it goes ahead and includes the border and the padding it does not include the margin the margin is on the outside of our css boxes that we create whichever elements that we're styling so the margin is not included in that calculation however the rest is so the border and the padding and the content all add up to that 400 pixels that i set right here okay now that we've broken down how the border box setting works and looked at the css box model let's go ahead and close devtools and let's just style our page a little bit with some of these properties i'm going to resize the page a little bit so we have some more room for visual studio code over here on the left i'll pull this over there we go and now let's make some changes so one thing i have thought about is our h1 right here has some settings i normally probably wouldn't put on an h1 i'm just more concerned with the font there but the font size that would be assigned by default is okay too so i'm going to get rid of that and now these other settings i would actually be more likely to put on the container than i would on the h1 itself and the h1 is inside of a header element so let's go ahead and save that and it changed just a little bit but that's okay i'm going to change these ems back to rims because now i'm not setting a font size on the header so i'm going to use 1.5 rim here and save and now we've got our padding back to about where it was but now what if i wanted to assign these same settings to the container that our paragraph is in and that's in the main element so maybe i don't want this on the header maybe i want to assign a container class so i can provide these same settings for more than one container so i'm going to quickly go over to the html and in the html we'll set a class called container on each of these elements so we have the header element and we'll set the class equal to container and i've got one extra quote there there we go and now i'm just going to copy this and i'll paste it into our main element as well and save that and there we go so now we've got dashes around both of these boxes here let's go back to the css and make these bigger so we can see them better on the page right now i'm going to get rid of this 100 pixel or 400 pixel width let's go ahead and let them take up the full 100 for now okay let's go ahead and add a font size to the container and it will apply to both of these differently but we'll set it to 1.5 rim and save now our fonts a little bit bigger but notice how the edges of the border are right up against the page so on the outside of our box we can set a margin and also set that to 1.5 ram and save and now we have our two boxes and the margin has pushed them away from the edge the margin has also provided space between the two boxes here and now that we have a font size on our container we could go ahead and switch this back to ems and remember one m one e m would be the same as the font size so it would be equal to the 1.5 rim so if we make this change we just change it to 1m and our sizing should stay the same and it does if we change this to 1.5 it will get bigger yes and now we have more padding we could add more margin by doing the same if we want to so let's go ahead and do that and now let's go ahead and experiment with the margin and the padding because we don't have to have the same setting on the top right bottom and left and i did say that order specifically for a reason because for the margin we could just say margin top and here let's go ahead and say 1.5 em and save and look what happens to our other margins the left and right margins are gone and you can't really see that we lost the margin on the bottom but we did the only thing separating these containers now is the margin on the top so now let's go ahead and add some margin on the right and here we'll set this to 2em and save so it's just a little bigger and now we do have margin on the right but still no margin on the bottom and no margin on the left i'm going to press shift alt and the down arrow and now instead of the right i'm going to switch this one to bottom and save and now we have some more margin here on the bottom so the separation between these two boxes got bigger that's the only thing you could really see right there and now on the right let's go ahead and switch i mean on the left let's go ahead and switch this to two ems as well and you can see we got the same thing as if we just said margin 2em except we wanted a margin on top of 1.5 amps so there is shorthand for this so i'm going to comment all four of these out and i'll press shift alt and the letter a to do that there you can see a css comment so it commented those out so right now there will be no margin once again now the boxes are next to each other no margin on the left and right but our shorthand is just saying margin and when i say this 1.5 em that applies it to top bottom left and right and it actually goes in the order top right bottom left so now we can put in different settings with the shorthand if we wanted to so 1.5 on top and then 2 m's on the right and the left and then 2 m's on the bottom and i can save and that is the same thing as when we had all four of these right here now if i just wanted to have 1.5 on the top and the bottom and two on the left and the right i could delete this third setting right here and that's what we get so now it will take 1.5 and apply it to the top and the bottom and 2 and apply it to the right and the left however you can provide all four settings so we could go 3 and four and then we would have the shorthand notice the left margin the final value here is much larger twice as large actually as the right margin and then the bottom is definitely larger than the top margin because here you can see only the top margin as it applies to the first container and now you can see the top margin and the bottom margin here combined to create the space between the two boxes now this same idea for shorthand also applies to padding so i will copy these actually cut them and just go back to the one setting for margins so that looks a little bit more normal again but now let's apply the same thing to the padding and we'll see how that changes so now we have a much larger left padding of four twice as much as we have on the right and then we have a larger bottom than we do on top this is easier to see because it's inside of our container and remember if you're ever having a hard time seeing all of this different white space i guess i dragged visual studio code i meant to grab the edge of chrome here i'll pull this over right click choose inspect open up the dev tools again and we can see all of this hidden white space much clearer when we look at the box model so once again in dev tools choosing the computed tab but we also need to highlight what we're going to look at so i'm going to choose this main container and now we can see the space as it's applied here so here's the content here's the padding and see we have 48 pixels on the right but 96 on the left twice as much we have 36 on top but 72 on the bottom which is twice as much also so we can definitely see that our padding settings over here once i drag this over are being applied as we specified them in the shorthand okay back to visual studio code i'm going to resize chrome once again so we can see our code better dragging this over dragging visual studio code back over here there we go and we can do the same thing you might expect with border actually first worth discussing you can just delete the two pixels and then when we save it actually gets a little thicker because the default is more like three pixels for the size here i'm going to delete this odd sizing for the padding that i used just to indicate the different sides for the padding and we'll go back to kind of a normal look here we've got two containers and they have equal padding and equal margin around them these settings also apply to the individual border sides so that means we can say border dash top and here we could say 5 pixels solid and then i'll go ahead and press shift alt and the down arrow and then instead of border top i'll go ahead and say border right and i'll say 10 pixels and here i'll say dotted and save and now we can see we had some major changes here and we didn't specify a color so these settings were to override what we had set with shorthand above and so the default color is black but we have a dotted right and we have a solid top so we could have specified different colors here as well so we could say green and then of course over here we can say something different like yellow and save and now that is ugly that definitely changed our borders though so i'll switch that to blue and save our eyes just a little bit and if we wanted to specify these individually we could even say border top width and then we wouldn't specify the solid or green here so you can break out each individual setting as well so now you can see we just changed the width of the top one likewise instead of width there's also border top let me switch that there we go style and this is where we're specifying dotted or anything else here's ridge is another value we'll save that and so now the top is a little bit different it looks pretty much like the solid setting does and then of course there would be border top color and we could turn this to any color we want so i'll choose blue here as well and now we have a dashed blue line across the top of our border so so many settings for the border when you break them out individually we had border top but then we also specified border top width border top style border top color and then of course you can do that instead of for top you can do right bottom and left as well often because of this because there's so many i'll delete this i just use the shorthand i usually want my borders to have the same width all the way around so previously i'd had two pixels here and then i chose dash let's choose a different one here let's use outset and we'll save and we can see it changed our frame around the box another one that i like is called double and i'll put a link to the border page from mdn in the description and you can see all of the different values there let's make this larger so we can really see the double what it does here we'll save and there you go we've got our double lines now around each container while we're covering border one other setting to cover is outline outline is not part of the box model because the difference between it and the border is that it doesn't take up space but you style outline much like you would the border so here i'm going to choose 5 pixels and i'll choose solid and then let's make the outline a different color entirely let's go with purple and if i save this now we can see purple wrapping outside of our border but again the outline is not calculated because it doesn't take up space so it's not calculated into that box model equation another property that the outline has that is very handy is outline dash offset so instead of being right up against our box we can say we want the offset to be 5 pixels and save and see how we pushed it now 5 pixels further out from our border so it's offset 5 pixels from the rest of our box and something worth considering sometimes is using a negative value so if i put in negative 10 pixels we'll now see the outside the outline is inside of our box here and so let's go ahead and change this some more so we get it a little further inside maybe even 20 pixels and save and we can clearly see the outline is now inside of our box model okay in the beginning i promised to show how to turn a box into a circle before we were finished so let's do that i need to go back to the file tree and find our index html and hide the file tree with control b and i just want to put a div down here i'm going to keep it in the side of the main element so i'll just type div and then i want to give this div a class and set this equal to there we go to circle i still didn't spell circle right i'm having a rough time today save there we've got a div with the class of circle okay we can close the html and now let's style our circle class so we'll start with circle definition here for the class and let's give the circle a background color of gold but we haven't given it any size yet so let's say a width of 100 pixels and a height of 100 pixels and that doesn't look like much of a circle yet but it will let's go ahead and add a border now of 2 pixels we'll make this solid black and now we see our border applied to our square and let's add an outline as well well we need a new line for that outline now the outline can be 2 pixels let's say solid and let's go with red for now so it'll match everything else a little bit and stand out now let's give it an offset also and we'll make this 0.25 round and save so yeah we've got just a little space there now let's create some separation from the other content and so i'll just leave this at the top but i'll make the margin three rim and save and now it's pushed itself away but something we didn't cover with the margin if you set the margin this doesn't work for top and bottom but if you set it for left and right notice we've got three ram for top and bottom now we can use the keyword auto for left and right and this will center it horizontally that means in the middle left and right so now we put what will be a circle our gold square inside of our main element and it's at the center horizontally not vertically but at least it is horizontally and now to calculate our circle we essentially just need to set one other border property and we set it to half the value of the width and the height so this border property is called border radius i'll put it right under border and we'll set it first just so you can see how it works let's set it to 20 pixels and you'll see what border radius does look how it rounded the corners of our square so now we have more like a cool button kind of like you would see there and we can continue to round that but if we set it to 50 pixels which is half of the width and half of the height and save we've now got a circle now there's always more than one way to do things in css and typically in programming in general so if you've got other ways you like to make circles in css go ahead and leave those in the comments below but i hope this has helped you learn about the box model today so we have the content on the inside then we have the padding then we have the border and finally on the outside we have the margin and when we apply our basic css reset and we set the box siding to border box the box sizing to border box then the calculation includes the content the padding and the border instead of just the content let's move on to css typography and i'm going to paste a definition here typography is the way that text is arranged and presented so today we'll be working with text and font in our css you can see i've got a css folder with a style.css file and i have an index.html file today i'll save the style.css file and for the index.html file let's just take a quick look we've got a basic web page here and inside the body of the web page we have a header element and we have a main element inside the header element we have an h1 and inside the main we have a paragraph and then we have a simple form and our form has a label input and button we'll be working with all of those today let's go back to the style i'm also going to press ctrl b to hide the file tree and now i'm going to resize vs code here so it's only on the left of our screen and on the right we'll have our web page and i'm using the live server extension so any changes we make in the css will show immediately over here in the web page you can see the simple web page that we just went over in vs code it's got our h1 it's got our paragraph with some lorem epsom text and it's got our simple form here with the label input and button i'm going to start our css by selecting the body and inside the body i'm just going to set a padding of 25 percent and if you remember the css box model setting padding of 25 sets that on all sides top right bottom and left so you can see it put our text right here kind of in the middle of the page not exactly centered but it lets us work with it and see it in that regard now we've covered a few things about text and font already in this series and one of those was setting the font size and we already know we want to let the browser set the default font size so that enables the user to make a choice as far as their settings and it also helps accessibility and then when we do set a font size like i'm about to here on the body we want to use root ems that is referencing the roots font size or that default font size that the browser sets which is usually defaults to 16 pixels so if i say two root ems here rem this will probably set it to about 32 pixels and there you can see we have a much larger font size and now i can see the padding is a little too large for what i want to do so i'll put this back to 10 percent in there it's kind of in the part of the page where we'll see it the best and we'll be able to reference the different things we're going to do to the text and font today now also notice and we learned this as well in the past that through inheritance font and text settings are usually inherited so the children of this body element would inherit the font size of two realms unless we set a specific one on those child elements however they do not inherit the size here inside of a form so notice the label has that font size inherited but it did not get inherited in the input or the button so after the body here we could also select both the input and the button and then inside of this we could say font and inherit and now they will both inherit that font size that we put on everything else one other thing we've already learned is that we can change the color of the different text on our page and we can just do that through the color property so i'll change this to purple so it's a noticeable change we can see everything changed here to purple i really don't want to do that today but it is one of the things we've already covered so i'm going to remove that but now we do know how to change the different colors of our text on the page now i want to go ahead and remove this form as we're not going to use it for the rest of the tutorial so just quickly back inside of the index.html i'll select the form and i can press shift alt and the letter a to just comment that form out so we don't see it on the page but it's still there in the source code if we want to go back to it and we can do the same here inside of our css so i'll highlight the input and the button style press shift alt and the letter a and vs code will comment out the style in the css so we've removed it essentially from our html and css but it's still there to reference if you want to go back and work with form elements now when i'm speaking sometimes i will say font when i mean text but they are really two different things notice i'm creating a little extra space here in our css so we have some text settings that aren't impacted by the font choice at all and let's go over those first so let's select our paragraph here on the page and we'll set some text settings for that and the first one we should go over is text dash decoration and we can see the different choices we get right away when we choose text decoration because vs code wants to help us one typical text declaration to set would be underline so let's go ahead and save this and now we can see our full paragraph text is underline another choice which is just the opposite is line and when we set that you can see now we have a line above the text instead of below it and then there's also line dash through and if we save that it does exactly what you expect it to it puts a line through the text maybe you just have a few words you want to cross out and you surround those words in a span element and then you set this line through property for that specific span element and that would probably be a class you would create to do that so after we've gone over those text declaration settings the other one you may see is none now that is the default for a paragraph text like this but what if you had a link text links are usually underlined by default and so setting none would remove the underline on a link and those are the typical settings i'm not going to go over every setting today because there are so many for text but i'll go over the most common the next text setting we'll look at is text transform and after that you can see our selections pop up here in visual studio code again so if we choose capitalize and save now it capitalized the first letter of every word in our paragraph likewise we could choose lowercase and now every letter is lowercase not just the first letter but every letter and then we could choose uppercase and we'll get the opposite as well and now we have all upper case okay now after text transform another very common text setting is text align what we normally have is a line left so this is typically the default for paragraphs and you see this and look to the right this is not uniform over here each line has kind of a different ending point and this is how we typically see a paragraph when we're looking at a paper or something like that like a a school paper however a newspaper might choose to justify or a magazine paragraphs and now notice the right hand column is uniform here where it all ends at the same place just like the left side does and then of course we can text align right which is the opposite of text align left and now it's uniform on the right but it is not on the left and sometimes when we write a paragraph we want to indent that first line so let's remove this and save so you can see the default settings so here's our paragraph we have no indent up here at all but we can choose text dash indent and here is a good spot to use em units so i'll say 2em and save and now we have an indent of two m's that's em units and it just indents that first line of course we can set it to a bigger number and you can see it go over even further so you can really see it go into action however two seems about right here so if we need to indent that first line we can do that with text indent and of course there are more text settings that you can pull up as well and refer to mdn the mozilla developer network where they have great documentation for all of these another way to find out about text properties besides mdn is to just type text and then you can see visual studio code start to make suggestions here for some other settings you may want to look up but i've gone over the ones that i believe are the most commonly used okay i'm going to save again so we get back to the default for our paragraph and there's a few other properties that impact typography that do not start with text or font so let's quickly go over those and one is line height line height accepts units just like we went over in our unit and sizes tutorial so we could use different percentages and things like that however it also just accepts a number and the default is usually right around 1.2 so we probably won't see much of a change to our paragraph when i set the line height to 1.2 however it starts to look much better around 1.4 or 1.5 so i'll go with 1.5 and i think that really increases the readability of our paragraph not that i can read latin but just the line height increase here made a big difference so i'll go ahead and cut this and save and you can compare see how it looks much more crowded and it's a little more jumbled to my eyes at least but if i paste this in and save that would make it much more readable especially at a distance and on a screen sometimes my eyes get weary so i believe that helps okay i'm going to leave line height there because i believe that does help the readability but i'm also going to add letter dash spacing and this does exactly what you'd think it would do it increases the space between the letters of the words so if we put in oh let's go with 1 m and save it really spaces those letters out doesn't it we probably don't want to stick with that unless we're going for some kind of special effect maybe down to 0.25 well it's definitely more readable but it looks kind of weird to me still maybe 0.1 and you may see text like that somewhere some time in a heading or something to draw attention to that looks like it may work but i wouldn't use letter spacing too often because it seems normal to me when it's just at the normal setting presented by the browser and in addition to letter spacing there is word spacing so let's go with 2m there and notice the difference it really spaced those words out so we could come back maybe 0.5 and yes we've got some extra space between the words once again it's an effect more to me than it does anything to really increase the readability however maybe if we got to a much smaller size maybe it would help let's see well it's noticeable still i don't know if i like it better but it is an option so we have letter spacing and word spacing but i do believe increasing the line height just a little bit from the default that's around 1.2 to more like 1.4 or 1.5 depending on the text you're working with could really help that readability okay moving on to some font properties now that actually start with the word font and i can put in a dash and let me do that again put in a dash in visual studio code starts to suggest some things the first one it does is font size which we've already gone over let's skip font family for now and go to font weight so for the font weight that's essentially whether it's bold or not in normal or the default is right around 400 so if i save this we won't notice much of a change well i noticed a bit of a change let's see what 300 is like and yet maybe normal was more like 300 for this particular font but overall for 300 to 400 is kind of normal let's go back and see what visual studio code offers for values that we could choose from so now you see we've got 100 through 900 900 being very bold and 100 being not bold at all and then there's also just some words we could choose bold bolder lighter and then of course normal so let's go with normal and see what that looks like well normal looks more like what we had at 400 there let's go with lighter and save and it's not too light but it's noticeably lighter than it was let's go with bolder and that's very bold we can definitely see the difference there so 100 would be very light and 900 would be very bold and if you don't set the font weight you can expect it to be somewhere right around what normal was to begin with now let's look at font dash style and if we set font style we're setting possibly the italic setting and if we save that's exactly what you expect we have italic text there is also oblique which essentially is a stronger italic it just has a little bit more emphasis there and as you might expect after learning about font weight it also has a normal setting so that is the default and it's basically that without setting a font style as well okay now we get to the big settings something we typically set not on an individual paragraph unless we want to change the font specifically for the paragraph but let's set this on the overall body of the page this is the font family property notice visual studio code is providing lots of suggestions here that we'll go over in just a minute but there are some main generic families and one is serif and if i save it's pretty much what the browser default already was and this is the type of font family that we see in academic papers newspapers papers you'd see in school overall however on the web it's much more popular to use the sans serif family if i save that you can definitely see the change here and this text is more like you would see on many popular web pages even though there may be variations of then another generic family is mono space oops i didn't spell that right i need mono space there we go if i save that you can see mono space has the same spacing for every character so this looks much more like an old typewriter or something like that where it gives each character equal spacing then there is also the cursive family and that looks a little different as well you may have seen fonts like that before and i believe there's the fantasy family save that yes and that also looks different here i would possibly think about using just a little bit of letter spacing it looks a little crowded to me but overall those are the generic families but those are usually used as a fallback because we have more specific fonts that make some changes so when visual studio code was suggesting these font family values let's go with this first one we see here courier new and then courier and i'm going to press alt z so the code wraps over here on the left so you can see this full font family setting so courier new is the first choice and then the second choice is a fallback so if our computer whether it's windows mac or whatever and they do have different fonts installed if our computer doesn't have courier new then it's going to look for courier and finally after that it's going to look for mono space so it doesn't necessarily use all three it uses the first choice if available if not it uses the second choice and if not the third also notice the courier new has a space in it and anytime the font name has a space in it you need to put quotes around the name to handle that spacing the names that don't have a space do not need any quotes at all so let's save this and here we are using courier new i believe on the page which looks a little different now let's choose something else from a different font family so we had the monospace family right there let's go with ariel and you can see visual studio code instantly suggests a full font stack which is what these are when you have multiple choices this suggests ariel then helvetica and then finally the sans serif generic family so let's save that and this is a font you see much more often on the web overall and arial is fairly commonly installed on both mac and windows and probably linux any other type of computer okay after that maybe verdania is another one in that sansserif family you would see and here this font stack has four choices actually for dania geneva tahoma and then eventually sans serif also notice that sans serif does not need quotes around it because it has a dash it does not have any spaces so if we save that this looks just a little bit different than when we had arial now if we did want to choose a serif font instead of a sans serif font a very popular one is times new roman and you can see the suggestions here from vs code we've got times new roman in quotes again then times and then serif so if we save that this is more like what the default browser font looked like and i've got a couple of good links about what are called web safe fonts and that's essentially what is being suggested here by visual studio code when you use these stacks they're fairly web safe they don't need to be installed from an external source typically the computers would already have these available to the browser i'm going to switch this back to arial choose that and save and i'll leave the page like this now okay i'm going to grab the browser and take it to full screen now and now that we're there i'm going to go to my next tab which is fonts.google.com and now we're going to choose an external font from google fonts and this is very common practice and we can load this in and then use it on our page so here's a very popular font roboto so we can select it and it says it has 12 different styles so now it takes us to the ribato page and you can see the different styles notice this says thin 100 here for this style now this means that that font weight is 100 essentially here's light 300 light 300 italic so you can choose some of the styling right here at google fonts i typically choose not to and just get a generic font and then try to apply my own styles as well but you can see the different ways the font will appear and that's really nice to look at like that so i would typically just choose the regular 400 and see if i could modify it with my own css now there are different ways we can link to this google fonts lets us choose a link that we can put in the head element of our html or it lets us choose an import let's look at the link version first so if i were to do that i would be choosing this link section here and it says i have more than one link selected so i previously had selected another font here i'm going to click the minus symbol remove it so i only have roboto and now there is still this link section i would need to copy all of this and then i would do that with control c for example now i would need to go back to my code so let's do that and here inside of the code i'm going to need to go to the html and then let's make this take up the full screen for a little bit and inside of the html in the head section before the link to my style sheet because it needs to use the fonts i need to paste in these extra link elements that google provided so it's going to get the information from google fonts loaded in and then my style sheet can read it but although we're loading it in here we're not quite finished because we haven't applied it to our css so they will not be used yet at this point i'll drag this back over and now google is also saying we need to apply this line in our css to use it notice roboto has a sansserif fallback so it's part of that font family i'll copy that go to the css and where i had ariel helvetica and sans serif here i will replace it with what google suggested and provide roboto and sans serif now note they put quotes around roboto and that won't hurt anything either so we'll leave it as they suggest now let's go back to our document and notice we're using the google font roboto now now you can choose more than one font from google as well the more you attempt to load in from google though the longer your page will take to load so i suggest grabbing no more than you absolutely think is necessary i do want to show you how to use the import in your css instead of the link in your html so let's click the at import here and now you can see it's not quite as much code and what else i like about this is it goes right in your css if you want to notice they put it between the style element which could still go inside of the head of your html if you were to copy all of this i'm not going to select the style element tag the opening or closing just what's in between because i'm going to put this directly into my css file so now that i've copied the at import statement i would normally put it right up here at the top of my css and you want it before it would load anything in now of course this is wrapping the code because it's a longer line with the url but i'm going to save this i'm going to go back to the html i'm going to remove all of those links that we had of course leave our own style sheet and now we'll still be able to use the roboto font even though i've removed those links from the head section of the html i now have the import statement at the top of my css and if i go back to our document i can even reload and we still have the roboto font ready to use because we've imported it at the top of the css let's move on to styling links with css you can see i've got visual studio code open i have some basic styles in from the last tutorial where we have some padding a font size and a font family a small font stack set on the body element we're also importing in a font from google fonts you can do that if you want to and the starter code is available or you can set your own font family stack if you want to as well also over in the file tree you'll see i have an index.html and in this index i have not only a header with an h1 heading i have a main element that has about five paragraphs and at least four of those paragraphs have links in them and then i have a couple of other html files very very basic they just contain an h1 element in the body that's because i needed something to link to so i created a couple of those files as well so let's go back to the style and i will resize visual studio code to pull it over to this half of the page and i'm going to hide the file tree by pressing ctrl b and we'll pretty much be able to see our styles here the only thing is a long line like this import of the font will wrap now over on the right you can see i've got chrome open and i'm using the live server extension so anytime we make an update to our css we'll automatically see it over here on the right styling our hypertext links is really an extension of the typography that we just covered in the last tutorial in this series because it's still text so a lot of the things we learn about typography we can apply to our links but also these links have their own default styles that are different from the rest of the text on a page and when we talk about links in html we're talking about an anchor tag and usually that links to something with an href attribute so these first two links that i have linked to google searches they're different searches one searches for web links and one searches for hyper text links and then i've got a couple of links that just go to the other two html pages we created guitars and javascript although those pages actually do not have that content just went ahead and created links that would hold that content so let's note the default styles of these links they're underlined that's the first thing to note also if the link has not been visited it's a blue color but notice the hypertext links link that we have here and it is purple so we know this is a visited link and we can tell all of this just by looking at the page also when we point at a link it changes our cursor from this arrow to a pointer it's a little hand pointing its finger at the link so that is called a pointer cursor and then there's another default style that we can't even see yet and that is when we click on a link so i'm going to click and hold down on this link and it turns red so this is when the link is active and that is another default style that is set so i'm going to go ahead and let go and it goes back to purple without visiting the link and if we did visit the link and come back it would still be purple as visited so now that we know the default styles let's look at how those are set the first one being text decoration that we would set and that is what controls the underline so the default would be underline and if we save we shouldn't see any difference but oftentimes developers want to take away that underline and style something different you do want to make sure that it still indicates somehow that these are links you want them to stand out in some way and an underline is a good way for that to happen but if you want to take that away you can but you have to do something else to make the link stand out okay we also mentioned the cursor so we can set a cursor but really cursors have semantic values and i'll see what visual studio code pulls up there's lots of different choices here but let's look for example at a not allowed cursor and it has a semantic value it tells us something just when we see it so when i point at javascript you can see we get the little icon that says this is not allowed and we know what that means so really we don't want to change that from a pointer most of the time there is not really a reason to do that so let's keep that as pointer but i'll leave that here so you know the cursor can be set to different values and of course the starting color before the link has been clicked is just set by color and here we see blue is the default color and i believe that is the actual default color and not some variant of blue let me save again and see if i see a difference and no it really looks the same to me but it may look different to you but once i set this to blue notice what happens to the visited link it's changed because it overwrote the default value and then we haven't set anything for the visited link so we need to learn how to do that as well so what i'm about to show you is called a pseudo class so we'll once again select the anchor element but now we put a colon and now i can put a definition after here that defines which pseudo class that i want to select and right now i want to select the visited pseudo class and pseudo classes represent the current state of the element because a state of an anchor element can change it is either been visited or it hasn't and there are some others that will cover as well so for visited let's go ahead and put this back to the default and save and now you can see our hypertext link is once again purple now our other links haven't been visited so they're still blue now let's look at another pseudo class that we can define and this pseudo class is called hover when we hover over the link it doesn't have a default value right now if we hover over a link it doesn't change at all either the visited or the not visited link both of them still just stay the same so let's go ahead and change this and for now let's just choose a different blue and i'm going to show you a trick or two where you can choose something kind of in the same range of the color you have selected for your link but first let's just choose a blue randomly here so now when we hover notice javascript is changing colors when i hover over it and even the visited hypertext links will change color as well because now when we hover over the link we have changed that state it's now in the hover state and it is changing the color of the link and then remember we still have the active state as well but right now that's not working either because that was a default style and we have overwritten that what has followed has been visited and hover and really we don't have the default style applied anymore so let's go ahead and put in that active link and we can change it to something like what it was i think it was red so that will definitely stand out select that and now when i click hyper text link it definitely turns red and i think i visited the link and now we're searching for hypertext links so i'll go back to our page and we can see that this link was visited but if i click and hold down we can see that it's active and now i'll just pull away and not visit the link now we have to consider specificity and we also have to consider the order these are in for the cascade so if we put visited above our anchor selector visited will still be applied here even though the anchor selector comes afterwards in the cascade and that's because this visited pseudo class has more specificity than just an element just the anchor element and we can see that if we go to the specificity calculator and i have this linked to in the resources and now if i just put in an anchor element you can see the score is just 0 0 1 but if i put in an anchor element with a visited or any other pseudo selector now the pseudo selector here is a class i said pseudo selector a pseudo class i'm selecting the pseudo class classes attributes and pseudo classes so this has more specificity and that's why the visited link continues to stay purple even though the anchor element comes afterwards in the cascade but that's not usually the order we want things we usually kind of want to think about it in the order that we would have them so i'm going to put that visited back but now visited hover and active all have the same specificity and one can overwrite the other so we really have to think about the order we put those in let me save this and right now they're all working because this is the proper order have your anchor tag and then have your visited pseudo class your hover pseudo class and finally you're active and they should all work so when we hover it works visited of course is working and if i click active it is working however if i rearrange these they may not so let me go ahead and take hover and put it above visited and so now visited comes after in the cascade and when i hover that still works it hasn't been visited but let's check our visited link the hover doesn't work anymore so it's important to have these in the correct order i'll take hover and put it back where it belongs in this order so you want your anchor tag then your pseudo class of visited then your pseudo class of hover and finally your pseudo class of active and there's one more very important pseudo class and you usually see it added to the same style as the hover and we can do that here just by putting a comma and then putting in the focus pseudo class and this really makes your page more accessible because if a visitor or a user of your page is using a screen reader and instead of using a mouse they are tabbing through your page notice that right now we've selected the first link here and it has the outline around it i am tabbing through the links and by doing that when it has focus it is changing the color of the link just like we did with the hover and that's important to make your page accessible as well okay i'm going to take the focus off of that link and i'm going to remove all of these in the anchor tag all of these styles because they're the default styles anyway and what i do want to put in here is a different color we often see a color of black we already have black text but notice now the links are underlined with the black text and i commonly see this on web pages as well so we don't always take away the underlines sometimes we use the same color as the rest of the text but we add the underline to make them stand out notice you can still have a hover you can still have a visited color if you want to but oftentimes you don't see a visited color either so we can just comment that out and leave it in the code and now we don't have a different color for a visited link and that's okay if you want to do that but we still have a hover color and we still have a focus color as well so now let me back this up just i wanted to show a different version of that i'll go ahead and put the visited color back in and up here let's go ahead and put in blue let's do a different color though let's do steel blue i like that color we'll save and now we have steel blue links and when we mouse over it looks okay but let me show you a couple of things you can do to stay within the same color and yet make it noticeable that you are hovering going back to when we covered colors in the different tutorial we learned how to use the vs code color selector so i moused over the color here and it pulled up the color selector and i can click on the color bar and go to hex from the rgb and i can also go to hsl and i'm going to choose hsl here and now let's leave it at that and notice it's 207 44 and 49. now let me just copy this and i'm going to take it to our hover instead of the dodger blue and now right here this number is the number we want to change it changes the color and so that pulled it up and now we can just make this a little lighter choosing something different on the color wheel if you remember the way these numbers work it's just something different in the wheel i'll take it down to 189 notice the other numbers are still the same 44 and 49 so we've just changed the shade just a little bit on the color wheel and when we mouse over it kind of goes with the color theme and that is a good way to change that so in hsl you're really only changing the first number and you're selecting a number close to what you had and that is one way to get a similar color that complements what you originally had another approach and i will go ahead and comment out the color but another approach is to use an opacity property which is making something transparent and remember with colors we could add that right inside of this hsl as well but i'll show you how to do it here with the opacity property and let's put this to 1 would be the max and 0 would be completely invisible transparent so let's put this around 0.9 to just give it a little bit of transparency when we mouse over and you can see the color changes it's keeping the same color but it just gets a little bit lighter and maybe the 0.8 would even be more noticeable let's try that and that also works but when you learn about this note that opacity will change everything so if you use this on something else let's go up here and let's put in the main element now if i put this in it made everything on the page a little bit lighter i'll make it much more noticeable here now that made all of the paragraphs much more transparent so you want to be careful when you use that now remember also in the hsl and also in rgba there is a channel that allows you to add a transparency value so here we could also do 0.8 and now when i mouse over we'll still get a transparency as well and it's also changing color there so if we wanted to we can put this back to the exact same color but now we've added the transparency so if we save and mouse over we still get a little lighter color and it's really the same exact shade we're just lightening it up with a little bit of transparency there okay before we finish i just want to emphasize that these pseudo classes are not just for changing colors you can adjust other things although changing the color of links and the visited hover focus active all of those pseudo classes that's a common application of this but we could do other things as well one thing i've seen is changing a background so let's change the background here to gold and it will be kind of like a highlighter so when we focus and i'm tabbing through we're kind of highlighting the links of course you'd want to choose a complementary color there as well but that is something else i have seen before is kind of adding a highlight to each link as it has focus or as it's hovered over let's move on to styling lists with css you can see i've got visual studio code open and the starter code has an index.html file and in this index.html file we have a header inside the body that has an h1 and then we have a main element and this main element has two articles in it the first article element has an ordered list and we can see that with the h2 title and then the ordered list underneath the second article has an unordered list and we can see that with the h2 title and the unordered list so the only difference between these two lists is the beginning element the ol or the ul ol being ordered list and ul being unordered list so i wanted to take a look at the html first the css that we're starting out with just has a couple of basic things an import from google fonts where we're using the roboto font that you see here and then just a little bit of padding and setting the font size to two rims in the body so the default for the browser is probably 16 pixels so when we double that with two rims we're now at 32 pixels for anything in the body let me pull visual studio code over to the left side of the screen and here in chrome we can see this page and so we have our ordered list here on top our unordered list underneath you can see the ordered list has ordinal numbers here one two three the unordered list just has bullet points now i'm going to go ahead and hide the file tree so we can see our css a little bit better also press alt z so anything that would be longer like this url for our google font wraps to the next line also worth noting that we're using the live server extension so any change we make here in the css will automatically see over here in the browser as it will update immediately let's style the ordered list first and the first property we want to look at for the ordered list is list dash style dash type and here we get a list from vs code and we can choose different things to appear to the left where we see the numbers so for example let's choose lower alpha and i'll save and now we can see we have lower alphabet letters here so abc otherwise we could choose some other things that i don't even recognize they have in here like let's get this reference again let's look at oh georgian and maybe somebody else would understand these symbols i certainly don't but here we see symbols to the left that represent whatever georgian is usually the default here is decimal and so if i save that we're back to our numbers that's the default value you could also see i believe it said decimal leading 0. there we go so if we chose that we would get a 0 in front of each of the numbers so you've got lots of choices to make and by the way list style type and all the properties we'll look at can apply to unordered lists as well we're just looking at this first with the ordered list so i'm going to go ahead and choose something here that will make this look like an unordered list at first so let's look at bullet i believe it was bullet let me check the selection and did i see bullet here not bullet it's disk there we go i call it bullet points but they're actually disks is what they're referred to so this looks just like our unordered list now so the only way we could tell that this is an ordered list is to actually look at the html code at this point so we can make one look like the other another choice i often see is circle but because it's an ordered list let's stick with something that is in order so i believe i saw an upper roman let's choose that one and save and so now we see roman numerals one two and three now while we're mostly focusing on the css primarily let's go to the html quickly and there's a couple of attributes we can add that will change how our list appears one is the start attribute so let's tell this to start at three and when i save now you can see we get the numbers three four and five and then we can also add a reversed attribute and as you might guess now it counts down three two one because it starts at three so if we started this at five knot would count down five four three it's also worth noting that if we are not using numbers over here such as the roman numerals or decimals we still need to use a number value here for this start attribute so if i switch this back it's just going to be what references that so i will switch this to lower alpha once again and save and you'll see it references the fifth letter of the alphabet the fourth letter and the third letter as it's counting down from five to three let's also consider that we could not have any kind of bullet or numeric out to the left so let's just put none here and save and you'll see that that's eliminated but notice it's still indented and that's because we have some default padding so we would have to set the padding to zero if we want our list items to go all the way back to the left let's take a look at that unordered list now so i'll put ul here in our style sheet and let's set the list style type on it as well i'm going to set that to square instead of the disks and if we save we can see we have square bullet points now now the next list property to look at is list style position but first let's look at an issue that might get caused with list style position so in our unordered list if i set the text align to center and save notice what happens to the bullet points i've centered the text but the bullet points are still to the left some browsers have been known to handle this differently and send the bullet points to the middle and some leave them to the left and the difference is the list style position default value some browsers have a default of outside such as chrome and some have it inside or at least they have at one point i haven't checked browsers in a while instead of chrome but right now i have to set the list style position to inside to get the bullet points to align with the text but if we set them to the default outside they stay out to the left i'm going to scroll up for some more room as we look at this unordered list and now notice if i set the color to a blue here with hexadecimal and save it changes all list items to blue so that is worth noting as well if you set the color property it changes the bullet points and the text to blue we can set other text properties to or typography properties such as line height so i'm going to set this to 1.6 and you'll see some extra space between each of the list items now the last list style property we want to look at is list style image and we can set an image to use instead of the bullet points now let's quickly look at the file tree notice i've got an images file and in that i've got a check mark image it's check mark dot png and we're going to use that as we set this i'll hide the file tree again but now we have to specify url and then parentheses and then navigate the file path to the image so we're going up out of the css folder with two dots now we put a slash and go into the images folder and then we choose our check mark and i will save and notice those bullets have now got changed to these green circles with a check mark in them and that's our check mark png and there's also shorthand for all three of these list style properties i'm going to press shift alt and the down arrow to copy down our list style image and then i'm going to remove the image and we just say list style and we can put all three properties here with shorthand so i'll quickly cut this with ctrl x and first we'll just set this to square and you'll see how it overrides the list style image so we're back to our squares here for the bullet points but then we can also supply an image and when we do that the square becomes the fallback in case the image would not load and so now when i save we've once again got the image and then finally we can provide the position and so i'll say inside and now the images are over with the text of each list item so this is called shorthand we just say list style and we can provide one two or all three of these values that would be the list style type the list style image and the list style position we can also override styles from the unordered list for example on each list item now this would apply to all list items even in the ordered list because i'm just saying li and not specifying the unordered list or the ordered list as well but we can override styles because this comes later in the cascade as well but it's also more specific because we're down to the nested list items so if i wanted to change the color of all list items let's do something obvious here to red and there i put a hashtag first there we go just the word red now they've all changed to red however if i just wanted to change the unordered list items i'd have to put the ul first and then save and now it just applies to the unordered list items however what if i just wanted to make the second list item read now we can use another pseudo class i'll put a colon and then nth which is nth des child and then parentheses and now i'll just put the number 2 inside the parentheses and notice it only changed the second list item in the unordered list to red so we were more specific and we just changed one list item likewise our nth child pseudo class also accepts the words odd so if we pass in odd now the odd numbered list items are red and likewise we could pass in even and do the same so now we're back to just number two because it's the only even number and it has turned red and of course you could apply other styles besides just the color here as well if you wanted to as you select each individual line item or all line items in any specific list okay from that i want to move on from the pseudo class of nth child to a pseudo element which we have not introduced any of those yet in this series this pseudo element is called marker and it starts with two colons and then the word marker and all pseudo elements should start with two colons instead of one like a pseudo class now we can change some things about the marker and that's usually what we would have here for a bullet or letters outside of an ordered list or numbers so let's go ahead and comment out the list style image and i do that with shift alt in the letter a and then it comments that out here in visual studio code and i'll save now we're back to blue and red squares which we specified up here in our unordered list so let's say we want to change all of those back to a black color but keep the text in blue and red so here we can specify a color for the marker and specify the hex code for black and save and now you can see once again we have black squares out here as markers i'm going to scroll up for some more room because there's a few other properties we can add here as well i'm going to change this to red actually because we'll highlight something like we would on a sale page i'll change the font family of the markers and here i'll put fantasy and might change the size a little bit but they're currently still squares we can set the font size if we wanted bigger markers like 1.5 m and save you can see those markers got quite a bit bigger i think we'll just go with one m for now and then we can also provide content and this is where it gets interesting so imagine we had a page selling sub sandwiches or pizzas or some food item whatever was on sale and we said only five dollars and put a couple of arrows and now if we save you can see that applied here but notice we didn't specify a list either so it also applied to the un or i mean to the ordered list we have the unordered list down here but before we had told the ordered list to have a list style type of none but when we provide content it's still applied so in that regard you want to be more specific and we could say just apply that to our unordered list and this is just like above where we supplied the ul we could also actually say li here and it would be the same result as well but it's all markers in our unordered list so we don't have to put the li there and it identifies the unordered list and changes now what if you want a space well currently we have set the list style position to inside so when we centered the text this kind of threw that off a little bit but also we didn't allow a space so maybe we just put a space in our content and save and that did create a little bit of space you could do it that way you could add left padding but since these are positioned inside the left padding would be to the left of the markers so that wouldn't work if you did have your markers over here on the left and provided left padding and of course that would be by setting this to outside i could do that really quick and you would see what happens now the padding would come after the markers but really we're going to have it inside and now we just provided that space with a little bit of space right there now as you learn more about web development you can get creative with this content you can put in what is called an spg and those are often used for images and icons you could also put in something called font awesome icons and other types of icons as well so this does hold different types of content but it's easy just to type in here and show an example like that now before i finish there is one other html attribute that can be helpful although it's rarely used i do want to show it before we're finished so let's go ahead and switch this back to something like lower alpha there we go for our ordered list and now our edc shows up and if you remember that's because we are starting with the number five and it's reversed so if these were numbers it would be five four three it corresponds to the letters but we can also specify a value so if we say value here and we put in 26 this will definitely make a difference now notice z is the 26th letter of the alphabet so the number corresponds still to whatever the order is and we're going in reverse order so instead of x y z it went z y right here but this remained as number five because that's where this started so this value attribute may come in useful in rare occasions i definitely wanted to cover it i almost forgot to but there we go i hope you have learned a lot about styling lists let's build a mini project for beginners after completing several lessons in this css tutorial series i think it's a good idea to bring all of these different pieces together and apply what you've learned i've got visual studio code open and in the starter code you can see i have an index.html file and when we look at the body of this index file you can see it has a nav element and inside the nav element we have an h2 and a unordered list and this unordered list has several list items all have their own anchor links and it doesn't really matter where they're linking to today i just have it linking to our other pages one and two that were there just to link to in previous tutorials but what we have is a list of appetizers entrees desserts beverages and then it just says about things you might actually find on a menu in a restaurant as well as a menu on a restaurant's website and then at the very bottom here we have one paragraph that says learn more about amazing foods and i just linked to an article on amazing foods that's because we want to have one link that is not in the list so we can select it separately or avoid selecting it if we want to so what i'm going to do now is drag visual studio code to the left and we can see chrome on the right i'm using the live server extension so we'll immediately see any changes and here is our basic page really no styles applied yet i'll press ctrl b to hide the file tree and click on the style.css you can see we're importing the roboto font from google fonts like we learned how to do in the typography chapter but we're not even using it yet so really no styles applied to the index.html so let's start now and if you remember from the box model chapter we covered a small css reset so the first thing i'm going to do is apply that reset so a margin of 0 padding of 0 and then we'll set box sizing to border box and when we save this will eliminate some default styles and now we can see everything is way up here in the corner so any of that default padding and margin is gone now let's select the body and we'll add a few styles to it that will be inherited throughout the page however the first one will not be it just applies to the body and that's to put just a little bit of a margin there i actually want rem and that way when we save it pushes the text away from the top and the left just a little bit okay after that we're going to go ahead and set the font family so we start using that roboto font and we'll set it to roboto with a fallback of sans serif and we can save that change and instantly we see the the font change over there to the right after that i want to go ahead and align the text for everything on this page to the center normally we might put that just inside of one area we were building but in this case in this example everything on the page will be centered for a menu and now you can see that centered over there on the right okay if we look back at our html notice we're using a nav element inside the body so the next thing we're going to select in our css is the nav element i'll scroll up just a little bit and select the nav let's put a border around the nav so we'll say border 2 pixels solid and then we'll choose 333 which is just a little bit lighter shade of black instead of 0 0 0. so if we save that you can see the border around our nav now now let's add a border radius and that will let us round the corners off just a little bit we'll set that to two ram and when we save you can see those corners now change to rounded corners we learned about border and border radius in our box model lesson we also learn about margin i'll set the margin for the top of the nav to zero i'm going to set the margin for the left and right to auto which will center it if our page is wide enough and it needs to be in the center and that means the margin will eat up the space that's left on the left and the right and then we'll also have a margin on the bottom of one rim now we won't notice that auto spacing because right now the nav is a block level element so it has a hundred percent width except for the little bit of margin that we provided on the body here so we have some space but if we set a max width for this to let's set it to 600 pixels now if we expand the page the nav element won't expand to the full 100 width so let me grab this and drag it over so it takes up the full page and we can see now that our nav is not the full width of the page so we have limited it to a max width of 600 pixels and setting the margin to auto on the left and the right has resulted in centering the nav on our page notice we also haven't styled the list item yet so we see these bullet points here outside of the nav we've centered our text but as we learned in the list tutorial that the bullet points here are set to default to be on the outside if we want them at all and i think we're going to remove them so i'll pull this back over to the right and we'll continue styling the page i'll scroll up just a little bit but before we move on from the nav we can set some typography here that will be inherited so let's set the font size now to three rim and let's set the line height to seven rim and when we save things should be much bigger looking back at our index html again now inside the nav we have an h2 before we get to the unordered list so let's style that h2 the first thing we'll do is give it just a little bit of padding so we'll set that to one rim and now let's set a well let's set a background color first and we'll set this to gold so if we save now we can see we have a background color on our h1 and it has the full width of the nav because it's a block level element so it has a hundred percent width of what's available to it but notice our border radius is not being respected up here the gold continues to look like a square although we set a border radius on the nav to have those curled or rounded corners so now we need to adjust the border radius here on our h2 as well and what we'll do is start in the top left we'll set this to two rim and now the top right is also two rim because that's where the curved corners are then we'll have zero on the bottom right and zero on the bottom left because that still needs to be the square corners so we'll save and now notice the gold matches the curve of our menu on the top left and top right okay i'll scroll up for some more room and we're ready to start styling our unordered lists we'll put a ul here the first thing we want to look at is the list style position i mentioned those bullets before if we put them inside we can now see them but we don't really want them do we so we don't really need the list style position i just brought that in so we can see that yes they are still there what we want to do is say list style type and then just set that to none and they will disappear now we can apply a style to each list item so we'll say li and here we're just going to select the border top we'll set this to 1 pixel solid and 333 to match the outer border of the nav and now we have some nice separation here between each of our list items okay next we want to style the links that are inside of our list but notice we have a link that is not inside the list down here it says learn more about amazing foods so we do not want to select this link so in order to select the links that are only inside the list we'll start with list item and then the anchor tag and note we also want to select list item the anchor tag and the visited pseudo class and then here we're going to say text decoration set that to none and we'll set the color to that 333 color so we have a dark color and so now we have a dark color here for visited links and links that haven't been visited so let's quickly visit one we just have our simple page two we go back and it remains the same color let's scroll up for some more room again and now we'll go ahead and style some other pseudo classes here so we'll have the hover sudo class and we'll also have the focus pseudo class and for those we'll set the background to the 333 so just the opposite and here we'll set the color to white smoke which is just a little bit of an offwhite color and let's set the cursor to pointer and now when we select that or save that now we should see the mouse over changes and so now the text is that white smoke color and we get a black background but that's not really what we want we don't want it just on the words we want it on the full list item so we're going to have to make a change to make that happen so above where the styling began on the different anchor tags in the list item i'm going to say li with the anchor tag and only that not the visited pseudo class so this is a separate selector we'll set this to display block which displays a property we haven't covered yet in a previous module but we did if you took the beginner's html course as well we did cover block display and inline display so this is a block level element normally the anchor tag is an inline level element so we are changing it to a block level element the bonus here is the block level elements have 100 percent width so when i save this this will change and now when i mouse over any one of these this anchor tag has the full width and is filling the entire space here of each one of these list items so now this makes a big difference so i don't even have to click on the text i could click just over here to the left and we still go to page one so everything works there as expected but there's still one change we need to make can you guess what it is here's a hint it's right here look at those bottom corners they're not rounding either they're not respecting that border radius that we set on the nav so we need to make a change to help enforce that as well i'm going to scroll up so this will be the last thing we put in our file this is a little more difficult than when we rounded the corners for the h2 because the h2 is easy to select it was the only one on the page but what about this bottom one we have five different list items so how do we just select the last list item we're going to do that with a pseudo selector and this will be called last dash child and then we can go ahead and i guess we need to put the a there and then under that we can say border dash radius and now it will be zero on the top because that still needs to be a square zero on the top right as well so top left top right now this is bottom right needs to have that same two rem setting and then bottom left as well so let's save and now let's mouse over and you can see that the border radius is respected here as we mouse over the list items so there is our basic menu and we selected all of these without changing the link that we had here in the bottom so again a beginner's project but it certainly showed you how to apply some of the different things we've learned up to this point we'll be learning more about that display property that we introduced and there's a lot more yet to learn about css too let's move on to css display types you can see i have visual studio code here on the left and i have an html file and in the html file i have a body element a main element then that is surrounding the other elements and inside this main element i have two paragraphs and in the second paragraph i'm using a span element and that span element has a class on it of opposite around the word another you can also see i've commented out a nav element that contains an unordered list that we will get to later i've also got a basic css style sheet here and inside this i'm pulling in a font from google fonts as we learned in the typography lesson and i've applied a basic font size and font family then to the body element here in the css so that's what we see over here in the right in chrome and i'm using the live server extension so you'll see our changes automatically over here in the browser as soon as we save our css now the display property in css relates back to something we learned in the beginning html course and that is about block level elements versus inline level elements now the paragraphs that you saw we've included in the html are block level elements and they have some default properties so let's look at those first i'm going to apply a basic style here to the paragraph element and we'll say background dash color and set that to let's do a light gray and when i save you can see the light gray extends all the way across the page so it has a hundred percent width by default automatically block level elements have a default 100 percent width and they stack on top of each other as we see here now they've also got some default margin as well which is why you see space between the paragraphs but this is important to know so every time we use another block level element doesn't have to be a paragraph it could be any element that is a block element then they will stack on top of each other now when i say 100 percent width i mean of what is available to them it's not always 100 of the viewport here that we see so let's look at an example of that and that's why i have a main element that the paragraphs are inside of the main element is also a block level element so let's set the background color for it to a different color so we can see it get something kind of ugly that stands out here just for this example so let's go with aqua we set that you can see we are covering part of the main element with the paragraphs but the part that you can see where there is margin it turned aqua so now we could take away this background color and you can see aqua across the whole thing so now that we've done that let's also go ahead and change the width of the main element so let's set it to a width of 50 percent and now you can see the paragraphs do not extend all the way across our page they are limited to their container their parent element which is the main element so they do have a hundred percent width default setting but it's a width of what they are given so i say they have 100 width of what they are given it's not necessarily 100 of the page and of course we could return this background color once again so we could see exactly how much room they're taking up and let's say light gray again and save and once again we see they're taking up 100 percent of that main element with block level elements we can also apply margin and padding and height or anything like that to all four sides so let's say margin and i'll say 100 pixels on the top and bottom and 50 pixels on each side and if we save that definitely changed everything because now this has a 100 pixel margin up here and then we've added more extra margin in between the paragraphs and then you don't even see the margin that's underneath as well but we can do that to block level elements but this is where some of the change comes in when we switch over to an inline level element so i'm going to remove that and let's remove the main styles as well so we're back to spanning the full page and remember i put a span element around the word another which is an inline level element and that doesn't cause a new line break so let's go ahead and style that opposite class that was applied to that span element just to make it stand out we'll start with a different background color and i'll make this a flat black and then we'll use a color that is not quite full white white smoke and now you can see we've styled this element and it is just surrounding the word another so our span element has a class of opposite and we change the color for the background and the text but let's see what we can and can't do with an inline element and so now let's go ahead and try to put a margin on the top of 100 pixels and you can see nothing changes we can't apply a top or bottom margin to a inline element likewise we'll try a different one let's go with height 200 pixels it doesn't change once again height cannot be applied and padding applies just a little differently so let's look at that and let's go with one rim and it looks like everything is as as expected here where we have a one rim padding top bottom left and right however if we go ahead and increase that let's say 4m look what happens it overlaps the above paragraph and we probably wouldn't want that so now let's apply the display property and we've talked about this being already as a default inline and then of course paragraphs default to block and many other elements as well like the main element we talked about however there is another option and that is inline dash block and let's see what happens when we apply that to our opposite class now our padding is still applied but it's not overlapping the other paragraph so it is now respecting the top and the bottom likewise if we come back and apply that margin and let's just say margin dash top it could be bottom as well but we'll just put 100 pixels for the top and that worked as well now you can see we have extra space here and again this is applying just to that span element so not to the full paragraph itself and now we could even add the height that we applied earlier that didn't work and we say 200 pixels and now our span element just got a lot taller so the inline block property value is kind of a hybrid here because we stayed in line in our paragraph this didn't create a new line like block would and at the same time it now allows some properties to be applied that normally wouldn't apply to the inline display so to quickly recap block level elements stack on top of each other and always create a new line inline elements do not stack on top of each other and do not create a new line block level elements automatically have a 100 percent width of whatever they are given if they're not inside of something that is limiting their width they will be the full width of the page inline level elements only take up the width of their content of course unless we put extra padding on them and then it has a little bit more width here because of that padding and then when we switch to inline block we get kind of a hybrid here where we can keep the content in line but we can go ahead and apply a top and bottom margin or a height and other things that typically only block level elements have so when would inline block be handy this could be handy if we were trying to turn a link into a button and sometimes people do style links as buttons and then you can of course have a row of those and likewise it could be something like turning a list into a row instead of a vertical list so it would be horizontal so let's look at an example of that and i'm going to go back to the index.html i'm going to select our paragraphs and press shift alt and the letter a to comment those out and then select our nav element with the unordered list in it once again shift alt and the letter a to uncomment that and now i'll save and now we see a basic list with three links over here to the right they say intro portfolio and projects something that we might use as a menu on a portfolio website so here we have the nav element and then an unordered list and three list items inside and then of course each list item is an anchor link so a hypertext link and those are inline elements however the list items themselves are block level elements and each one is taking up one hundred percent width of what they are given right now let's go back to the css and apply some styles here so i'm going to select these styles the paragraph and the opposite class and go ahead and delete those and save once again so we can start fresh and now let's apply something to the unordered list first and we'll start with a list style type and then we'll say none and that removes those bullets that we have after that you can see we're still moved over to the right so we do have some default padding on the list so let's say padding dash left and we'll just set that to zero and then we'll save again and then after that let's go ahead and say text dash align right well what happened to my css i've got an extra line in there you can see what happened now so we know we have 100 width and if we change the background color here we can really see that in action so let's say background color let's go back to our light gray and you can see we've got 100 width going on once again and when we set the text align right we sent all of our links or all of our list items over to the right and finally let's apply a margin of 0 to the unordered list as well and now you can see it pulled it up closer to the top of the page we could actually apply a css reset as well so let's do that and that will put everything flush with the edges of the page so we have margin of zero padding of zero and then box sizing will set to border box and save and you could refer back to our box model module where we covered all of this and setting a basic css reset but now you can see we are flush with the edges of the browser and our links are once again all to the right now let's go ahead and change this background color and let's just change it to black and save and now we don't see the links as well but we'll change that in just a little bit for the list items let's change those now and we'll say display inline dash block instead of their default of block and now when we save you can see they are all side by side in horizontal order instead of top to bottom as they would be with the block display now let's apply some margin between each one of them and what we can do here instead of saying top right bottom left as we typically would with the shorthand for margin we can just say margin inline and this will just apply to the left and the right so i'll say 0.5 rim and let's see how that looks that looks okay and we need a little bit of extra space maybe over here on the right so let's change the padding setting here we had padding left of zero for the unordered list and that's okay but maybe we just want to apply a little padding all the way around so maybe 0.5 rem everywhere on the unordered list top bottom right and left oh and that is just set to padding jack's left right now so let's go ahead and make that shorthand for padding and apply it to all four areas top right bottom and left now that looks a little bit better so what we need to do now is just apply some color and maybe some hover styles for our links so let's say link and then the anchor tag so this will only apply to anchor tags inside of the list item i said link list item in the anchor tag and now we'll say color we'll make them white and then we'll have a text decoration of none and when we save we now see the words in white with no underlines after that let's scroll for a little more room and we'll say list item anchor tag hover sudo class and once again list item anchor tag focus pseudo class and for that let's just change the text decoration instead of the color let's just go back to the underline style so when we hover over they now show as links now there are other display values that we could use and we're going to have separate modules on the display type of flex and the display type of grid and when we do that we'll learn how to complete our menu bar that might have something over here on the left as well but before we go there's one other value i do want to cover and instead of inline block block or just inline you might have a value of none and look what happens all the list items just disappeared so let's go ahead and change that back so they show up and maybe we want our entire bar to disappear and right now that is an unordered list so let's say display and none up here and now it's entirely gone and that is exactly what happens it completely removes it from the document now we would still see it over here in our html but as far as the browser is concerned when it interprets the code the unordered list is not there now we rarely want to use this and that is because it removes it from that document flow and that means anyone using assistive technology screen reader would not be able to read anything there there are other ways to remove something from being visible from actually being viewed on the page but still have it in the document flow where accessibility might be still available and so we'll cover that in the future as well but right now just know that display none is a possibility let's move on to css floats you can see i've got visual studio code open i have an empty frame for a page we have absolutely nothing in the body of the page and then the style page the css has an import of our roboto font from google fonts and we've only set styles on the body so far we've set the font size to 1.5 ram and we're using the roboto font family so quickly if i pull vs code over to the left you can see our page is completely blank i'll let vs code take up the full size of the page again and let's start by creating some elements in the body of the html that we can style so i'm going to start off with the div and give it a class of block after that we can just put in the word float for now because we will apply a float to it and then we're going to create some paragraphs so i'll use an image abbreviation here and type p for paragraph and then say times five then the greater than symbol lorem and 20 which means each paragraph will be lorem epsom which is just generic verbiage we can put on a page for generic text content and each paragraph will have 20 words so when i press tab it should create five paragraphs and there we can save now let's go back and look at our page and see what we have so far you can see our div has the word float in it and there's nothing remarkable about that div and then we see five different paragraphs here on our page so that's a good start to having some content but now we want to apply some css and explore what this float will actually do with the class of block so to give that example let's go back to our style and i'll hide the file tree by pressing ctrl b and now we'll be able to see most of our css here so let's style this block class that we created for that div i'm going to apply a width first and i'm going to set it to 30 viewport width units and then i'm going to set a height and i'm going to make that also 30 viewport width units now you might wonder why i didn't use percent but that wouldn't be the same i wanted to use the exact same units for the width and height and create a square and we'll be able to see that if i apply a background dash color and then set that to black and i save we now have a square that is 30 viewport width units wide and it also has the same height which truly does make it a square okay after that i'm going to go ahead and apply a color so we can see that word float and i'll make that white just the opposite so there's the word float now let's give it some padding maybe one rim of padding and there we have just a little bit of padding that pulls the word float out of the corner but now our div and all of our paragraphs are block elements and so they stack on top of each other but when we float this div element that we've created here it will take it out of the normal flow of the page and we should see our text wrap around this and you could picture this as being an image if you want to but whatever content we would float and we can float it left or right the text will wrap so let's create another class and i'll just call this class left and then inside of this we'll apply the style float and we'll say left and when we save we don't get a change yet because we haven't applied it to our html so let's go ahead and apply this second class to our div and now save and we can see the text has wrapped up around the div so now it's more like you're used to seeing in a newspaper where you would have an image or something over to the left or the right and the text would go around it but now notice this is flush it's right up against it we might want a little space there and we need to talk about how to do that because your first instinct may be to apply some padding or margin to the paragraph and i'll scroll for some more room let's just look at the margin left for the paragraph and say i applied 10 pixels look what happens it still is flush here you see it moved 10 pixels over here this float is not inside the normal flow so the margin is applied from the left over here and not where we would expect it to be at the left edge of our text and we can see that even more so if i do something greater like say 20 percent and now yes it moved this way over but it didn't move the text here at all so we can't really apply that correctly by applying it to the paragraph instead we can apply some to the actual block itself so let's do that and we can say well let's do it to the left because we might do it differently for the right so let's do it to our left class here so we would have a margin on the right side of let's say one rim so we should be able to see that and now that makes the difference that we wanted right here and also it makes our text once again flush with what would be our image or our div that we currently have here on the left now i'm going to highlight our left class and then press shift alt and the down arrow to copy it down and i'm also going to create a right class i need to select that correctly there we go it's a right class so instead of float left it will be float right but then instead of margin right let's put a margin left on it and i'll save but we don't have it applied once again to any div so we need to come back into our code and let's say after we've gone down three paragraphs we want to have one more so we'll say div dot block dot right and that should apply those classes and it did so now we can save and we have another div and it's floated right and of course it is after the first three paragraphs and we see that one two three and then it begins here with our fourth paragraph and it's floated to the right now i didn't put the word float in there let's go ahead and do that just to make them alike and this is the basic use that we would have to float things to the left or the right but there could become some instances where we want to handle this a little differently maybe we want to wrap this first paragraph and this div that i've floated to the left in a container and kind of highlight that at the top and then have the second paragraph start afterwards we might have to handle that differently or let's say we didn't even have the container but we didn't want this second paragraph to wrap and in the past it was handled a little differently than it currently is so let's create one more class and i'll show you something you may see once again i would say in more legacy code let's call this a clear class and then inside of this class we'll say clear and we can say just right or just left if you want to clear something that is specifically floated left or right but it's very easy to just say both and then it will clear both and you'll see what this does in just a moment here so what i need to do is come back and then after the first paragraph if i wanted to clear that the old way would be to apply another div to the page and give it this class of clear and just leave it empty and we would save and then you can see the second paragraph doesn't start until after this div so it is cleared and that allows us to go ahead and start the second paragraph after both of these but this could still be a problem if we had this in a container and i will show an example of that so let's apply a container to the div and the first paragraph and i'll just make it a section element and wrap it around those so i'll cut that closing tag and put it here after the first paragraph and save well i want the formatting it didn't do it for me tab that in and save and then we can style our section to make it a little more obvious what's going on i think i'll scroll up just a little bit more there we go and so now we have a section and inside the section i'll say background color and we'll give this a color of bisque which is kind of a neat color and after bisque let's go ahead and apply a border so we'll say border one pixel solid give it a flat black color and a little bit of padding one rim okay and let's save and see what we get well this looks okay right now i don't see a problem but what if we removed this div with the class of clear and save well still no problem let me shorten up this paragraph by several words and then see what we get and now when i save i just had too long of a paragraph to actually highlight the problem before but now when i say we can see the problem this float is once again not in the normal flow of the page so the container is only expanding based on the text content and when i had more text content it looked okay but you can really highlight the problem if you don't have enough text content to push the container down so we can definitely see a problem that needs to be rectified and that is because we don't want the container to just go halfway we want it to go ahead and contain the full item the full element that we have floated left or right so we think why not go ahead and put that div back in place that had clear well let's try that and see what happens i've got the clear div there now and you can see it clears the paragraph but it doesn't help the container so let's once again remove that div i'll just press ctrl z to undo those changes and control s to save so now the paragraph is coming back up and i will show two different ways to fix this one past approach that you may see in code is to set the overflow to auto but this is in more legacy code once again but notice it does work so i wanted to show that overflow auto is a possibility to go ahead and get the container element to extend all the way down and contain the full element that is floated either left or right however the correct current way as noted by mdn is to say display and then say flow dash root and if we save that we once again have fixed the problem so if i remove that save we have the problem i'll put the display flow root back in and the problem is fixed so this is considered the current modern way to fix this problem in the past floats were also used to create columns on a page but that was because there was no other method available and now with modern css we do have other methods available including display flex and display grid that i will be covering very soon in future modules but right now just remember floats are used to float things to the left and the right really any element that you want to and you can wrap text around it and then you can also use floats inside of a container if you want to but remember to apply display flow root to the container so the container contains the full floated element and doesn't shrink based on the text content alone let's move on to css columns you can see i've got visual studio code open here with just an empty frame of a page once again i've got the title of css columns nothing in the body of the html at this point and if we look at the style.css you can see i'm once again importing in the roboto font from the google fonts and then i also have a couple of styles on the body we're applying the roboto font with font family and we've set the font size to 1.5 rem and that's it so far so let's go back to the html and the first thing i want to do is create five paragraphs so i'm going to use an emmet abbreviation i'll type p times five and then i'll just say lorem 20 and press tab and we should have five paragraphs now so i'll save that much i'll go ahead and press ctrl b so we can see a little more i'm not going to wrap the lines as it would just clutter and of course wrap each one of these lines down just a little bit i don't need to do that right now what i do want to do now is add a section that will be a container for the first four paragraphs so we'll take this section and after the fourth paragraph we'll put the closing element right there the closing tag and we can save it didn't auto format for me so i'm going to select these and press tab so it comes over and now i've got the first four paragraphs inside of this section element as a container and then the final paragraph is outside of the section element i'm also going to apply a class here let's call this class columns i want it inside the quotes and now we're finished with the basic html so far so now let's move on to the css i'll click the file tree again go to style.css now with all of this saved i guess we could quickly look at it in the browser and we just see our five paragraphs over here so we're going to make some changes now and i'll drag vs code back over to fill the full screen as we apply the columns okay let's create our columns class so dot columns and inside this class i'm going to set a column dash count and let's set it to four columns so far and save and now let's go look at our code or our browser and look what we have here in the browser now i've spread it out a little bit so the first four paragraphs are in four columns and we can see of course this fifth paragraph that's not inside of that section element that has the class columns is not split into columns at all but it automatically split the first four and just as it would resize here as luck would have it with the browser there's actually one paragraph per column right now however i'm going to right click and choose inspect so we can open dev tools and resize this and notice what happens here we can scrunch it down and now it's not necessarily paragraph per column it just adapts to whatever the screen size is now we can change this as well so i'm going to go back to vs code and then we'll make a change here instead of this column count being just four let's go ahead and add a column width as well so let's tell it that our column width should essentially never be less than 250 pixels per column so that should change things a little bit now you can see we only have two columns even though we told it four it's going to add here to that width and never go below that now once it can support three columns of 250 pixels then it switches to three and it will go up to four columns if that's available to it however if not it will stick with three let me see if i can squeeze this just a little more to get all four columns to show now we're back to our four columns but as we resize the browser width it only supports what it can for the 250 pixels and once it can't support that it should condense down to just one column so that makes it very flexible as far as the design goes because if it can only support one column it will never make it smaller than that 250 pixels we set but if it can support two it does all the way up to the column number that we specified which was 4. i'm going to pull vs code back up and there's shorthand for this so we don't always have to type column count and column width we can just say columns and there we could specify 4 250 pixels and it would be the same so i'm going to comment these out and now save and we shouldn't really see any changes in our page because that should mean the same thing just in shorthand we can also provide dividers so this would be with the column dash rule property and here we can say we want three pixels and i'll press ctrl b to hide the file tree so we can see all of this but three pixels let's say solid and now let's just give some kind of color here i'll just go with that flat black and save and notice this column rule is just like when we provide a border and the values go in the same order so when i have provided a border in the past around any kind of element you have seen the size and then the type of border and then the color and that's the same for the column rule now let's see what it does to our page and here we see the rules between each column now and of course they will disappear when the columns disappear if the sizing dictates that and so once we get down to one column even though we've said column rule should exist it won't if there's only one column but if there are columns to separate that's when the column rules start to show up and this will once again divide up to how many columns we've created so if we say a max of four columns we could have up to three column rules and we can also provide some spacing between those columns so let's say column dash gap and i'm going to choose a larger value so we definitely see the spacing so three rounds and let's see how that spaced everything out now we only have three columns because we have some extra spacing so it wouldn't fit into the four columns as before but it does look a little bit better with that extra spacing between the columns and with dev tools open now is a good time to draw your attention to a problem that exists right here i'll squeeze this over so we can see a little more and i want to pull this down so we can see some of the html above now as we get into our columns section and you can see it highlighted on the page as i highlight the elements here in devtools notice we have margin at the top and the bottom of each paragraph we didn't use a css reset so far so those margins have not been set to zero and that's okay we want spacing between the paragraphs but notice here in this first paragraph we also have spacing above the first paragraph so it's not setting flush with the top as the other columns are and then as we come down notice each paragraph is going to have its own top and bottom margin but there's one thing to consider here we need to remove that top margin from the first paragraph but let's see if we can just remove it from all of the paragraphs and what happens notice our margin spacing between the paragraphs as we see between the first and the second for example just is the spacing for that one margin essentially so here we see it again between the third and the second we just see that top spacing but if i highlight the second we just see the bottom spacing and they seem to overlap let's also discuss what's going on there so we'll go back to the code and i'm going to set another rule here and we want to say just our paragraphs that are inside the columns container so we'll say the columns class and then p let's say margin dash top and set that to zero and save now we go back to the browser and our first paragraph is flush at the top with the others but notice our spacing between the paragraphs did not change and that's a good thing it automatically happens in css and i don't believe i've discussed this before but that is margin collapsing so it's not going to double up the margin between the second and the third paragraph just based on having a bottom margin on say the first one and a top margin on the second one however now we've removed that top margin but the spacing remained the same but previously it wasn't twice as much because of margin collapsing so that's a good thing and it's worth noting so we can actually just remove the top margin from each paragraph and not change the spacing of the others but it does fix the top alignment here making it flush with the other columns as we want it to now let's go back to our html and add another element inside of this file so we have a couple of paragraphs inside of our columns container now let's add an h2 and inside the h2 let's just say next topic just some kind of generic header here and we can save that now let's go to our style css and let's go ahead and style that header as well we'll once again be specific so we'll say columns and then any h2 inside of our columns container let's set the margin top to zero just like we did for the paragraph so there's not an issue there let's set the background color to that flat black 333 and then let's set the color to white which is fff as far as hexadecimal code goes then we can provide some padding let's say one rem and let's save and let's take a look now at our web page and we have our next topic right here but let's see what happens as we resize that looks a little weird we have part of the padding at the top of the second column and the rest of the header here at the bottom of the first column that's kind of strange we might not want that let's get some more room and drag it over and see if anything else weird happens well not with the room we have but as this resizing occurs strange things could happen but we can prevent some of those strange things by applying another property inside of our h2 so now let's say break dash inside and we'll say avoid we'll save that come back to the page and now as we get to our two columns we notice it's on the second column which may not be the best thing that we want we might want that at the top of the second column but it's not splitting the header into two different pieces with part of it at the top and then part of it to the right and once we get down to one column it's just the one header there now we can apply one other property let's bring vs code back up and here we could say break dash before and we'll set this to column and there's good and bad with this so let's look at this overall so now notice we're at the top of the second column and that's fine and as we scroll and we have two columns now we're at the top of the second column again which is what we want instead of being at the bottom of the second column as we were before the problem comes when we want to size down to one column notice what happens instead everything shrinks and we got three columns and that's not maybe what you would expect but this break before actually forces a column break so it forces there to be more than one column and the browser is trying to fit all of that in which is why it shrinks so probably not a great idea to use this break before column property if you know you're going to be shrinking your page down to that one column however the break inside with the avoid will keep your header that you might create or something else from being split between the two columns now let's go back to our html and here's the html file i'm going to remove this header for now i'll leave it in the code so you can see it there but we've just commented it out but what i do want to provide is a quote so let's provide a quote that we would have maybe something we would be highlighting on the page so here's one more paragraph and inside this paragraph i'm going to say where's my rug and then man which is course from the movie the big lebowski and then we can say that was from the dude who is the author of that quote now let's provide some things here that will make this stand out a little more so we can say class equals quote and we'll style this class and here let's go ahead and fill the page right now as we see this code so we can see the full quote here but then there's some other things we want to apply as well so i'll save this much and actually just as i filled the page i want to go back to the browser and now on the browser we'll go ahead and open up this page it's unicode dash table dot com and it lets us look up other characters like html entities that you may have learned about when you were going through my html course or one like it but there's also unicode characters and there's different way to provide there's different ways to provide these different characters so it says popular character sets we want quotation marks kind of the fancy ones so let's just go to this page full of quotation marks and you can see we want these opening quotation marks right here the left one i'll click on that it gives us several different codes we can use in our page so here's the html code for this opening quotation mark there's also an html entity here so we could probably use either one i'm just going to select this ampersand pound sign 8220 and the semicolon and that's going to be our opening quotation mark so i'll pull visual studio code back up and inside of our quote right here it looks like i've got an extra quotation mark there for the class okay our class quote is correct now i'm going to paste in that code and now we should have that opening quotation mark here to go along with our quote likewise if we go back to the page you can see they're saying with this symbol these are often used let's click on this other quotation mark and oh it just took us back to quotation marks so here was the opening one now let's get the closing one so we'll click on this scroll down and as you might have guessed it's just the next number instead of eight two two zero it's eight two two one i'll go ahead and select all of that again we'll go back to vs code and inside of vs code i'm going to expand this just a little bit so we can get to the end of the quote and after that we have got this wrapped in these fancy quotes with this html character that is kind of like an html entity but it's also kind of unicode in a way and this is just another way html handles these characters and we can put this in to wrap the quotes and there's many other symbols you could use and find on this website and one of those symbols that we want to put right here beside our author is a long hyphen so let's see if we can search for that above i'll type in long hyphen and we'll see what comes up well there's the hyphen minus soft minus not seeing it right now well maybe this one maybe not but i know what the code is so let me see if i can just search for that and it will come up it's eight two one two and here we've got the em dash is what it's called i wanted to call it a long hyphen and there was a copy right there in the search results but i'm just going to once again get the code here from the html code and this again is called an em dash so we'll go back to our visual studio code html code i'm going to put that right before the dude so we'll have that longer dash or hyphen before the author is attributed and now before we look at our html or before we look at our web page i'll save that and let's go to the style once again and let's style this quote class so we'll say quote dot quote actually and then we'll apply several things here so the first is a font dash size and let's put three rim now let's put text align center because we want this quote centered and now we can provide a color let's do something we'll adjust this a little bit let's do that flat black color again and now for the main thing that we want to highlight here is the column span property and we can say all so this will span all of the columns that we have on the page okay now let's go back and look at our web page and we see our big quote and it's spanning all three of the columns and we have a kind of our fancy quote symbols here that are wrapped around it as well and we have our em dash or long hyphen after are actually before the author and this is kind of like you might see in a magazine as well where they highlight a quote as you're reading the article but something doesn't look quite right does it we've got all this space underneath but no space on top that's because this is a paragraph that's inside of our section container and remember we set the margin top to zero for all of those so let's go back to our code and now that we're inside of this quote class let's set the margin dash top to to rem and go back and take a look and i think you'll be surprised at what we see there's absolutely no change so what's going on well let's once again look at our code and see the problem what we have here is columns the class columns and then an element columns p where we set the margin top to zero that is more specific than just having a class so let's go ahead and look at our specificity calculator and we can see how this is calculated so i'll put our first one here at the top and that is columns which gives it a score of 10 as a class and then p as an element so it's got a score of 11. and as you might guess if we were down here and just said quote we only have a score of 10. so even though quote comes after this column's p definition in the cascade it's not as specific so that margin is not applying what we could do is say dot columns dot quote and then notice we have a score of 20 so that would work let's go back and apply that in our code and i bet we see the margin change so instead of just quote we'll say columns quote save go back to our page and now we have a margin on top as expected so there's another learning experience about specificity now let's resize the page a little bit and we're going to see something else we might not like i don't like how this breaks our author down to the next line we've got the on one line with his long dash and then dude on the second line so we want to be able to control that break we just definitely don't want the long dash on the first line and then the author on the second eventually it kind of catches up but those breaks in between aren't what we want and we can fix that with css back in vs code let's go back to our html first and let's wrap our author in a span element which is an inline element and let's give this a class equal to no wrap and of course now we'll need to take i'm going to wrap the code here with alt z because we'll need to take this closing span and put it after dude right here so now we can save that and our html is taken care of now we just need to style our no wrap class so underneath our columns quote let's put no wrap inside of no wrap we're going to use the white dash space property and set that to no wrap and so now when we go back to our browser and we resize our quote should not break the dude our author should always stay on the same line including that long dash and that's exactly what happened it all went down to the second line at the same time so we're no longer breaking the dude with his long dash into separate lines and that's the way we want to style that so overall i hope this tutorial has helped you learn how to apply columns to your content on a web page the simple way really without even using flexbox or grid which will be covered in upcoming modules as well today we're going to discuss the css position property you can see on the left i've got visual studio code on the right i've got chrome and we're using the live server extension so any changes we make in our html or css today should immediately show up over here in the browser now first let's look at the html page that i have here on the left in visual studio code and you can see it's a basic layout and i'm really using more divs than i'm normally comfortable with all of these div elements they are block elements but they are not semantic they do not provide any additional meaning to a page and they don't really help accessibility at all so in a typical project i wouldn't use a lot of divs but they are good for today's example so you can see we have an outer container and this outer container in the browser is a dashed black border that outlines this container and then we have an inner container and it is a solid blue line here in the inner container and then inside of this inner container and you can't see them right now we have four other divs they all have the class of box but then each has an individual class absolute relative fixed and sticky and those are possible values for the position property and we'll look at each of those let's jump over to the style.css file you can see i'm importing in that roboto font as i have been in the last several tutorials for this css series and then i also i guess i have the lobster font here too although i'm not using it right now i've also got this css reset already in place with a margin of zero padding of zero and box sizing equal to border box for the body we're using that roboto font family and then we also have a font size of one and a half rims and then a min height of 200 viewport units so that means besides what you see here we've got another full page that we can scroll down to and we'll need that in just a little bit then we have the styles for the outer container already here you can see the dashed border it's three pixels we've got a width and a height set on it just for this example and a top and bottom margin of 40 pixels the auto for left and right centers the container and then we'll see something very similar here for the inner container of course the different styles just sizing it a little differently and the color and size of the border and then we have the box class that applies to the four divs that you cannot currently see you can't see them because their font color is white other than that they are a box with 150 pixels width and height and a little bit of padding in there okay with all of that said let's go ahead and style our first class and that was the absolute class so what we'll do for it is set a background color that's different than the others so we can tell them apart a little better let's just set that to a blue we'll use hexadecimal there and then let's go ahead and set the position but the first position value we're going to use is static and that is the default of all elements they're static just already when you put them on the page so essentially it's not going to change anything i just wanted you to see that value to know that's the default even if you don't set it so now let's go ahead and set a position of absolute and see what we get when we save it really didn't change anything and that's because we didn't set any other value when we set these values we need to go ahead and set a top left right or bottom we don't have to set all of them but it needs at least one to change where it's at so let's set the top to zero see what we get it moved it all the way to the top of the browser now what if we set left to zero now moved it all the way to the left so it's in the upper left corner so absolute positioning needs a relative parent and if it doesn't have an ancestor element that is positioned relative then it takes the initial boundary or the initial box which is essentially the browser window and so that's why it went up here to the top and then the left when we set that position but now we can scroll up and we can set a position on this outer container you see i'll set the position to relative and now look what happens to our absolute box it now has an ancestor that is positioned relative so this positioning is no longer relative to the browser window it's relative to this ancestor that has the position set to relative but what if we set the position to relative on more than one ancestor i'll do that here if i could spell relative again and i'll save and now you can see this is back where we started inside the inner container and that is because it picks the ancestor that is closest to it and so our box started inside of this inner container so with the outer container set to relative and the inner container set to relative it picks the closest one the nearest one and that is the inner container so we're back here now as you might have guessed the zeros are essentially the default choices there so if we save we don't really see a change from position absolute with the top and left 0 to where they are now of course if we change which ancestor it was relative to we would see a change as it would move to whichever ancestor it was relative to however we can put in other values so let's do something like 100 pixels and then we could also do left 50 pixels and see what happens and now it moved it's once again absolutely positioned but it's relative to this inner container and it moved down 100 pixels and it moved to the right essentially 50 pixels from the left that's how you want to read that and you would say from the top so that's a good way to read those from the top from the left so let's once again change the position relative and put it on the outer container only and save and now we can see the same thing we have moved 100 pixels and 50 pixels as we set right here okay i'm going to switch these values back to 0 to get our absolute box out of the way and now we'll look at the next box which is the relative one that we have inside the inner container so here we'll say relative for the relative class let's set a different background color let's go with red on this one and then after that we can save that much and we see it already after that we're going to say position relative and we already know that won't change anything by just setting that much but now if i were to say top and here say 100 pixels and then say left and here i could say 100 pixels also it's going to move 100 pixels from the top and 100 pixels from the left so much like we saw the absolute do when it was relative to its parent container and now relative here means it's going to be relative to its parent container already without having to define that relative on the parent so inside of here by setting it relative it's always going to be relative to its parent container let's scroll up for some more room and let's change that top by a few more pixels maybe 300 pixels and get our relative block out of the way as well and now we can pick our fixed class and here let's give this a background color of green if i did it with hex i don't like the bright color i get there so if i say green i get a darker green color so that's what i'm going with position is going to be fixed and here not absolute we just want fixed and then here we're going to say well let's just not put anything yet and we'll save and there we can see our fixed box but now let's say something like top and this will be 100 pixels and if i save notice now it just moved 100 pixels from the top and we can confirm that by removing our position relative here to make sure it's not responding to this outer container and if we save now we have our absolute up here in the corner but the fix stayed exactly where it was so it's only 100 pixels from the top and then after that what will happen is it will just stay right there even if we scroll so that's what it means to be in a fixed position so i scroll and that's why we have that 200 viewport unit height so i can scroll down to a second page our fixed block is staying in a fixed position the entire time and so it's out of the flow of the page just like our other blocks are but it is never moving even when we scroll the page and this is a good time to point out that the fixed block is over the absolute block right now that is decided by what element comes first and what element comes last in the html so if we go back to the html and i took this fixed div and i put it before the absolute div and now i save absolutes on top but that's not always convenient when we're working with pages to go and change the structure of the html so we can also do this with css if we want that absolute block on top we would just come over here and change the z dash index you might call that z but it's i call it z the z dash index and the default value is zero so that's not going to change anything but if we give it a higher value and we don't need to go 10 or 20 or 100 higher we can just go one higher and save and now our absolute block is on top of the fixed block but i can scroll and the absolute block goes away our fixed block is still there okay we've got one more left and that is sticky sticky is just a little different than fixed and that's because it will stay in its normal flow until it reaches a spot that you have defined so here we're going to say background color and let's just make this black and then we'll say position sticky and we can save and there it is and now we haven't put any spot essentially say a top where it would stick so right now if we scroll it just scrolls right off the page but we could say top 0 and save and now let's see what happens when we scroll i scroll our sticky block stays at 0 momentarily but it's running out of the container notice when the container that it is in reaches the end and begins to scroll off the page then the sticky block goes ahead and scrolls off the page unlike the fixed so now when we scroll back down it stays and so maybe we could push that down a little further or something but overall or i could make this a little longer but overall you see it stick at the top and then it moves again when the container catches up to it and scrolls off the page okay it's good to see all these examples but it's better to even put some of them to use and you will see how they're used in page construction so i've got a quick example coming up for that before we do that i want to go back to something we talked about a few lessons ago and that's how to make something disappear we covered display none and we covered the opacity where we could make something fade all the way down to being not only seethrough but completely disappearing but i said both of those were not good for accessibility display none completely removes it from the page a screen reader would not read what we were doing opacity makes it invisible and it might not be the best way to do what we're talking about but what if we had something that needed to still be part of the document but we wanted it off the page well position absolute is great for that so i'm going to go ahead and comment out well we don't really need to comment this out i'll just change this value because we would take the left value for example and i'll set it to minus 10 000 pixels and save notice it's gone but it's still part of the document it's still in our html and when it's processed by a screen reader it would still be read say it was a paragraph or the label for an input and that's important to accessibility so often times when i need to remove something visibly from a page but i still need it to be part of the page for accessibility reasons i position it absolute and i move it say a random number here but minus 10 000 pixels is kind of my go to way off to the left where it will not be seen but it will still be red so i'll change this back but overall just remember that trick for taking something off of the page okay now let's move on to our second example so what i'm going to do is grab everything we see here from line 13 down to line 28 if i can get to the right spot line 28 and comment that out i do that with shift alt and the letter a in visual studio code now i'm going to grab the rest of the html i have here and uncomment it and i do that the same way shift alt and the letter a and now you can see i have a button element with a class of social and it just has this little rocket emoji on it after that i've got some sections one two three sections each one has an id one two and three inside each section there is a header with a class of blue header one header with a class of red header two and a header with a class of green which is header three then you can see each one has an h2 heading inside of it just to have a little bit of text one two and three as well and then there is a footer and inside the footer we have anchor links to those different parts of the page one two and three if you remember from learning basic html you don't just have to link away from a page you can link to different parts of a page with that anchor link and we're linking back to each id for each section so i'm going to save this now and we see the basic html over here to the right now i'm going to jump back to the css i'll leave all of this here because it won't hurt anything but i'm going to put in a dividing line and a reminder for you that will be available in the source code that says remember how to make things disappear that we just talked about now after that we can apply some new styles to what we now have in our html but i'll leave these old styles in there as well as well as leaving in the commented out divs from the first part of this tutorial okay now we're going to take each section element and we're going to set the height of each section to 100 viewport units so now you can see on the first page we have header 1 and the rocket is here too then we have a second page with header two and a third page with header three and eventually we have a footer with three links in it as well okay let's scroll up a little bit and then after this section we can go ahead and define a let's say a blue clasp because we need one for each color that we had this would be background color and i'm going to choose blue here now at the end of this line i can press shift alt and the down arrow to copy down a couple of times and then i'm going to change this one to red and i'll change this hex color to red and then this last one will be green and i'm going to change this to the keyword green because i like that green just a little bit better so now i'll save and we can see the header colors have changed for each page after that let's put in some styles for the header and the footer they can share these styles so we have header comma footer and it will apply to both so i'll say color and we'll set the text to white then we'll set the text align to center then let's set the height of the header and the footer both to 100 pixels and let's pick a big font size so let's go with like five rims here and save and we can see that got very big for each one okay time to scroll just a little bit more and now a couple of styles just for the header we'll say position this will be sticky or i should say headers because there is more than one header element and then the top will be zero so that is set for all three header elements that we have on the page now now we'll set some style for the footer say background dash color let's make this one black now let's set the position to fixed and this will give us something to talk about and compare to sticky and we'll set the bottom to zero and we'll see what we get with that okay so what we have so far is a header one now we still have this rocket button above and then it's stopping at the top notice we scrolled now the word one disappeared but header one stops at the top here comes header two now it stops at the top and the text scrolled on up and now here's header three now our bottom here it looks like we got maybe a little bit of a large font issue there so let's pull this font size five out of the definition for both and let's just put it here in the header if we save now we get more what i wanted to see down here and notice since we used position fixed it pulled it out of the normal flow of the page what would normally be a block element and span the full width here is not spanning the full width now so what we would need to do if we were going to use position fixed is set the width to 100 percent and then our footer would work but there is a fix also even though it's not really going to scroll or move that we just always want it to be in place we could just set this to position sticky and set bottom to zero and it's always going to be there so now let's just set a little bit larger font for the footer as well so let's say font size maybe three rims and all the links will stay okay that looks good so one two three links and we have each of our pages as well you can see how this is coming together already as an example let's scroll down just a little bit more and under the footer i'm going to put a visited pseudo class here for the links and say that's going to be white so our links there in the footer change to white much easier to see and now our rocket here at the top our social link so for that we'll set the background color once again and here let's use a royal blue after that we'll set the color to white and let's say a font size because it's a button and it will not already just inherit everything that we would normally inherit in paragraphs when we set that font size at the top of the page so here we're just going to say inherit so it catches up to the font size of everything else padding of one ram again now we'll set a position of fixed and we want this to stay in the same place all the time so let's say 30 percent from the top and then the left is going to just be zero now this looks more like a social button and maybe you're used to seeing several buttons over here for different social media but it should stay in place as we scroll so let's check it out and it sure is it's staying right there as we scroll past each one of our pages so we have header one two and three now if we wanted it always on top we could go ahead and set that z index and set that to one and now when we scroll we should see it on top of each header as goes by and we do so an ugly example but an example nonetheless where each page section say this is a single page application or a spa if you will each page section has its own header and sticky allows those to scroll up and then stay in place until the content for that particular section is gone and then we have our social media button over here with the rocket to the left and at the bottom i showed you how to use fixed or sticky and you've got links to each section okay now let's check out these links so if i click three it instantly shows three two we're at section two one we're at section one there's one more thing we can do that will make that look just a little cooler if we want to when we are choosing those different sections of our single page application and we need to put this back up here i'll put it at the top of this new example but it needs to go in the root element this won't work in the body element but we can set the scroll dash behavior to smooth and if we save that now let's click number three and notice how we get that little scroll action that's kind of nice so that one setting makes that scroll go from instantaneous to just a smooth little scroll between the sections so i hope this example has showed you how you can apply the position property with css and i hope the previous example gave you some pretty good differences between all the different values that you can use let's move on to css flexbox fundamentals we'll be learning the css properties that you'll use most frequently when working with flexbox you can see i've got visual studio code here on the left and it's in a smaller window today i've got a larger browser window here on the right and i'll quickly look at the html file as well that we're starting out with and this will be available in the source code that you can download but we've just got six divs right here and all of them have a class box and then they each have their own number as we see on the page one two three four five and six divs are block elements and so they're spanning the full width of the container and they're stacked on top of each other and you can see we have a main element with the class container as well okay back inside of our css file we're starting out by bringing in the roboto font from google fonts we've got a very basic css reset here at the top on the body we're setting up that roboto font we've got a min height of 100 viewport units so it's the full screen or the full browser window and then we've got padding of 20 pixels so you see it pushing down our main container from the top that 20 pixels here it's also on the left right and bottom it's just harder to see that and then we have some styles on the container so it's got a max width of 800 pixels a minimum height of 400 pixels margin in line set to auto so it is centered horizontally here and we should have the same amount of space on the left and the right we've also got a black border going around the main container but you really can't see that right now because the contents are black as well and then the boxes they have a min width and min height of 100 pixels and remember the boxes are the six divs it's got a background color of black a color of white that we see on the numbers font size is two rims so the numbers are a little bigger and just a little bit of padding of 0.5 rim and that's what we're starting out with for our code but we're going to apply flex and the area that we'll apply that to first is the container we'll make our container a flex container and as soon as we apply flex i need to spell display properly things will change on the page so i will save and now we see some big differences over here we've got one two three four five six going horizontally instead of vertically and they're not stacked on top of each other so the divs are a min width of 100 pixels so they're about 100 pixels wide each and then their height is filling out the full 400 pixels we have for min height on our container you can now see the border over here on the right side of the container at least but they are now considered to be flex items and so they're starting out at the position flex start and that's where they default to in this alignment so they're just all over here to the left so let's look at how we can align these horizontally first we're going to do that with the justify content property and the place they're starting is called flex start so we'll say flex start and yes i'm already wrapping the code i pressed alt z and visual studio code to do that so we don't see any change but what if we switch this to flex end and save well now they're all over to the right instead of being all the way over to the left likewise we can set this to flex center and now they're all in the center you know let's go ahead and add another property here called gap and we'll set this to one rim and now look at what happens we get a one rem gap between each flex item so that helps us see each individual one just a little bit better now continuing with the justify content there are some other good values worth looking into center is often used but there's also space around and now look at that now this isn't used as often and maybe you can see why we've got some space between each one but look the space at the edges before the end and beginning of the container aren't quite as big and also if we remove the gap now at this point we should still see that space around evenly space everything out except at the beginning and the end so what if we did the other one that we saw space between well now there's no space at the beginning and no space at the end but it's evenly spaced between all of the flex items and then there is a little newer value that is much better to use i think it was probably requested and that is space evenly so not only between the items but also at the beginning and the end we have evenly spaced the items throughout the container okay i'm going to change this min height on our boxes to a height of 100 pixels so we can clearly see each box and some space in a vertical way because now we're going to align the items vertically as well so we use justify content for horizontal as things are currently set to a row and that's why we use justify content for the horizontal now let's go ahead and align the items so this would be the other axis and that's going to be vertically so if we align the items to flex start they're where they are by default right at the top but likewise we can say flex end and now all of the items are at the bottom as you might guess we could say flex or align items center and now they're centered vertically as well now we don't have the other options with the line items like space around space between because if you think about it it's only one item at a time when we're aligning the items horizontally here we had six items in this row but if we look vertically we've just got one item for each alignment so that's why we don't have the space options now we can change the direction as well so let's look at flex direction and by default we're in a row so we could say column and now if we save we've got all of our blocks stacked once again as a column and remember i removed that gap that we had so there's no longer a space between them and they're also taking up the full height of our container remember our container has a min height of 400 pixels but we've got at least 600 pixels worth of divs right here so they're filling this up so there's no extra space to space out as well now if we go ahead and change something let's change the align items and we'll see if you think we're going to get what we get i will save and now everything's to the left because our align items became the horizontal alignment again just one item at a time instead of all six all six are now on the vertical alignment so by having flex end they will all go to the right and of course we were back at center and that put everything in the center so if we change our justify content we not might not see much of a difference right now because we're taking up all that space so if i said flex start for example it didn't really change that's because we're eating up all of the space of the container already so there's no real change to notice when we have this set with 600 pixels inside of a container where we're taking up all of the space but if we change this to row now we'll see our center where they're all together once again with no gap whatsoever if we wanted a gap we could put our gap property back in and say one rim and now we have that one rem gap between each one of these but they're centered now of course if we change this back to space evenly we might not want that gap property at all now since we have the flex direction property in here there's more that we can do than just row or column what about row reverse and if i save notice now six that was to the far right is now to the left we reversed the order of the elements here so row reverse is an option and as you might guess column reverse is also an option now let's look at one other property here i can leave the row reversed for this for now but what i need to do is drag this all the way over to take up the full screen and open up dev tools and once we have devtools here we're going to notice something as i resize the window the flexbox row our row of boxes it's really not changing it's outgrowing it's not resizing or shrinking to stay inside of the container or the page so that is considered an overflow so there is a setting for that let me bring up visual studio code again and the setting that we could use is called flex dash wrap and so we would want to set that to wrap and now if we save and we have our dev tool still open in the window you can see it wrapped into two rows and we have it reversed now you might be surprised at this because 6 isn't at the top now but our rows have reversed so 3 is to the far left and 1 is to the right 6 is to the far left of row 2 and 4 is to the right now we could change this back of course to row see everything in the order that we would normally see it in one two three four five six and then there's also shorthand that we could use instead of flex direction and flex wrap and that would just be called flex flow so let me just select both of these and now we'll have flex flow and then the first is the direction so we'll say row the second value is wrap and now by default you noticed our row did not wrap so the default value is no wrap but we want it to wrap so we'll set that and now nothing should change about the page the way we had it see if i can resize just a little more here and yep we've got wrapping of the rows as it needs to and it will even get down to just one column and now we'll bring it back to two columns or three rows is what we should consider that since we have it set to rows and there's again back to two rows and still two rows with this width because we've just got one square that carries down i'll bring it back to about even here and now that we've got that this is shorthand so remember the first is the flex direction the second is the flex wrap with flex flow okay there's one more property to consider on our container remember we're putting all of these properties on the flex container right now that i've outlined here with our one pixel black border i'm going to scroll just a little for some more room here underneath let's put align content now this aligns the rows so you can see by default we have two rows and they're spaced out here there's some room between them now this will take values just like justify content but it's aligning the row so we'll put in flex start first and if we save notice both our rows move up to the top likewise flex end move them both to the bottom and flex are not flexed just center has them both in the center so that wasn't the default either what about space between that we could also use on justify content yep it puts one on the top one on the bottom space around so that's a little different as well and then space evenly that we might like if i could spell evenly once again and save and yes that changed the alignment just a little bit as well okay now we're ready to move on to the individual flex items because we can also set properties on the flex items instead of just the container and that will also change how flexbox handles the layout so the first thing we can do is apply some of the things we learned from above let's go ahead and make each one of these flex items a flex container now once again we will be applying properties as a flex item soon but if we make these a flex container then we could go ahead and display those numbers centered right in the middle of each box so if we say display flex justify content center and then align items center and save now all of our numbers are in the middle of each box and yes as you might guess you could use these three properties to center any element inside of a container or you could center an element inside of the body which would be considered a container the body element of a page so now you essentially know how to center something in the middle of the page if you want to okay now we have a few properties to look at four flex items again these three properties made each item a flex container of its own but they are still flex items inside of the larger flex container as well so what i want to do besides create some extra space here is go back to the html i'm going to select the last four divs there that have the class box and i'm going to comment them out for now by pressing shift alt and the letter a and then saving and now we'll just have two divs with number one and number two that we can work with in the css so before we put a min width on each box a min width of 100 pixels and i'm going to go ahead and comment that out as well again shift alt in the letter a and now no width will be set and you can see they're only getting the width of the content essentially here on the page right now but we can set a property called flex basis and you can give that an absolute value or a percentage if you want so what i'm going to do is give it three well now let's go with 100 pixels again just to compare to what we had so if we'll save now that's essentially giving it a minimum width right now now that could change it it's not the same as min width but that's essentially what it's doing in this case and now another property we can provide is called flex dash grow and we'll set that to 1 and that's setting this the same value and it's a unitless value but we're setting the same value on both boxes which is essentially saying if they need to grow to fill out the page they will grow the same amount so if we save you can see now our items both grew and they are filling out the page they do have that gap in between but other than that they grew as much as they needed to to take up the rest of the container i'm going to scroll up just a little bit and we're going to use a pseudo selector to select just one of these elements now so i'll say inf i'm sorry not inf i need the class first and class was box and then it's in child and let's select the second element here and let's override that flex grow and set it to two so now this second one should take up more than the first but it's not going to be double and i'll tell you why notice it did grow more than the first but they both have a flex basis of 100 pixels so what we're telling the elements to do here with flex grow is after the 100 pixels so each element gets their 100 pixels then whatever is left the one that has flex grow 2 is going to get twice as much of that extra space as the element that has flex grow 1. so it's saying whatever space is left you take two for every one that i take essentially now the other one to consider is flex shrink now before we get to flex shrink notice we currently have flex wrap still set so once they get to where they can't fit in that 100 pixel size they essentially wrap down to two rows here with our current setup we're going to have to really remove that wrap setting so we can see what flex shrink does for us so i'm going to select grow here ctrl d to select the second grow and then change them both to shrink so now we have flex shrink in place i'm going to scroll back up to our container and instead of wrap i'm going to set no wrap so now with the larger value here of shrink 2 our second box is set to shrink more than the first box and this might be easier to see if we make the boxes larger as well so let me come out here as far as i can for the page with dev tools open and maybe set these to let me try 250 pixels and see if that fits inside the screen we have yep so that works right now they look like they're basically equal size but as we shrink the page down we should see the one on the right and we do number two is getting smaller than number one so that is because number two has a larger value of flex shrink than number one so it's the same concept as flex grow except now we're shrinking and that's preventing the overflow out of the box that shrinkage is what that does so i wanted to eliminate the wrap or it would go ahead and wrap instead of shrink at some point so there we go for flex grow and flex rank flex basis is giving that size basis but notice over here we are now shrinking below 250 pixels here for number two so just like flex grow lets something extend above the basis flex shrink lets something shrink below the basis so either way now that we've covered all three of those different properties we can put all of them into a shorthand as well so here with the 250 pixels i guess i'll keep that we can just say flex the first value is grow the second value is shrink and the third value is basis so we could do that remember we could also put something over here like a percentage let's say maybe 40 percent see if that works out for us that's about the same and then we could do the same here so we could say flex two for grow two for shrink and forty percent here as well now when we save they look the same size but if we grow number two is going to get a little larger than number one and if we shrink number two is going to get a little smaller than number one although they're both shrinking quite a bit right there and that could be because i'm using a percentage as we get down it's still just taking up 40 percent let's go back to a set value an absolute value we should be able to see this example just a little bit better for the shrinkage so number two gets smaller than number one yep it was because i was using that relative 40 before so when it grows number two still gets a little bit larger let me close dev tool well if i close dev tools i won't be able to pull it over at all but number two is larger than number one here it's just a little harder to see maybe if i change the absolute value again to 150 pixels yup number two got even larger there but then as we shrink it down number two does get smaller than number one okay with that complete i'm going to go back to the html and uncomment those other four divs shift alt and the letter a once again to uncomment after we highlight them now you can see number two shrank more than the other divs because we have it set up to shrink more if it needs to right here with our nth child so we could remove that or we could just leave it for now but there is another property i want to cover and it won't impact it so i will just leave that and this would be order so let's go ahead and change the order of this second child as well and let's say order is going to be 4 and save now look what happened it has the highest number so it went to the end it didn't go to where the fourth element is it actually went to the end however if we say order zero it's going to be right back where it was but if we want it at the beginning we could say order minus one and now two is there now if you are using this order property on individual elements and then you're also using something like row reverse that we had available up here and let's change this back to wrap as well and now if we switch this to row reverse you might be thinking you were going to move number two to the very beginning but we didn't we moved it to the right and it's to the right of the first row and that is because we reversed it so essentially it was here at the beginning and then we reversed the row so if we went ahead and set this back to its normal position with zero then we would see it's in the middle because it would normally be one two three and that's three two one so that would just be the same but we that is all because we have row reverse at the top so minus one would take it to the right instead of the left likewise a larger number say one totally switched it around and now it's down here at the bottom left and that is because of row reverse again so if we go ahead and remove the reverse up here it may be where we would expect it to be and that's at the very end of the list now because all of the rest of these would be where they were placed essentially with a value of zero so that one makes it a larger value than all of the rest of them so we would give it 0 to put it back in place a higher number above 0 to put it at the end and a number like 1 something lower than 0 to put it at the beginning we've covered a lot of flexbox properties today and we will be building some things with it in the future but right now i think the best way for you to get some practice with it besides just playing around with it in your own html and css is to go to this website called flexbox froggy and it's got 24 challenges to help you learn flexbox and if i expand it out i think it looks a little bit better in the full screen there we go and you can work through these 24 challenges and learn how to place the frog on the lily pad with flexbox and there's some good challenges in there and it will get you thinking about the different ways to use the different properties that we've just reviewed for flexbox let's learn about css grid layout fundamentals we'll be learning the css properties that you will use most frequently when working with grids so for starter code we've got html here and inside the body we have a main element with the class of container and we have six divs labeled box one two three four five and six by their content they all have the same class box if we look at the style that is currently applied you can see we're importing in the roboto font from google fonts we have a basic css reset inside the body we are just setting the roboto font and setting the body to a min height of 100 viewport units and then we have the box class for those divs background color of black a white font color and font size two ram padding of 0.5 ram and that's all we have to start so i'll drag vs code over to the left and we're using the live server visual studio code extension so any changes we make to the css we should see immediately here in chrome on the web page so here are our six divs now we haven't set any size the main element is a block element so it automatically has 100 width and then so are the divs so they're stacked on top of each other and all six of them have a width of 100 percent so they're filling up that main element we're going to cover several different ways to apply grid to our page into these divs so let's start out by styling that container class that we have on the main element and we'll say display grid now instantly when we do this and save we don't see a change but all of these divs instantly become grid items now within the grid after that the quickest way to apply a grid is to use grid dash auto dash flow and you can say row which essentially leaves it as it is because they're stacked on top of each other which now makes six rows or we could change this to column and we will have six columns one for each of the six divs now many times we want more control than just setting the auto flow to column and letting all the columns be defined just automatically like that so let me go ahead and remove grid auto flow and in its place i'm going to put grid dash template dash whoops there we go dash columns that's what i want and now we can set the columns and the width of each now notice i'm wrapping the code so it will wrap to the next line but i'll say 200 pixels then i could say 100 pixels and then i could say 200 pixels and when i save we now have three columns and you can see the first column is 200 pixels the second is 100 and the third is again 200 but we don't have to use absolute values like pixels we can use fraction units which is a unit that's specifically used with css grids so let's say we've got two fractions for the first column and then one fraction for the second and one fraction for the third now when we save you can see it used all of the available space but it made the first column twice as big as it did the second or the third call and we can also mix so we could say 200 pixels and then one fraction one fraction and you see our first column's 200 pixels then the next two columns since they're equal both have one fraction a piece they're splitting the available width that is remaining and so they're eating up all of that so it still has 100 width for the row but the five and six here or the two and three are much wider than what we see for the 1 and the 4. and now something very useful instead of specifying every column especially if many of the columns have the same value you can use a shortcut for that and so we're here we're going to say repeat i could spell repeat and let's say we have four columns and each one is one fraction and now when we save you can see we have four equal columns each being one fraction and then when we get to the second row that is automatically created by grid we've got two columns here because we only had six total grid items so a grid can have empty space and that's what we have here to the right now while this value does not always have to be equal it does have to be a pattern so we could say instead of just one fraction let's say we start with one fraction and then the next column is two fractions and instead of repeating four let's just repeat this twice because it's going to repeat this pattern so with this pattern we're going to have four columns because we've defined two different columns here with the pattern so when i save you can see the first column is one fraction the second column is twice as big two fractions the third column again one fraction and the fourth column following that pattern is twice as big with two fractions now while we've defined our columns here we really haven't applied anything to the rows so everything about the rows is currently implicitly created by css grid we haven't explicitly defined anything for those rows but let's go ahead and do that and to do that we'll use grid dash auto dash rows and let's say 200 pixels to start out and you can see now each row became 200 pixels tall but once again we're not locked into just using 200 pixels here with grid auto rows so we could say min max which is a function and this lets us say the minimum first so we'll say a minimum of let's say 150 pixels tall and then we'll say auto for the max so it could allow it to be taller so now both rows are essentially 150 pixels tall but we have auto here so if our container was taller right now we've got 150 and 150 so that would be a total of 300 but if our container was taller this auto would let it grow so let's set a height or let's set a min height i like that better let's set a min height of 400 pixels and save and now you can see they got taller they should be 200 each so 200 height on the first row 200 height on the second row and that's because of this auto but they will not get smaller than 150 pixels a piece per row now while i'm giving this example of grid template rows and grid our grid template columns pardon me and grid auto rows you should know that the opposite also exists so you could have grid template rows and you could have grid auto columns so i'm giving one example and i'll let you play around with the opposite of those now what else we have are gaps between the rows or between the columns so we could define a row dash gap and we could set that to 1m and save and you can see we now have that gap between the rows likewise there is a column dash gap so instead we could say column gap and save and now we have one em as a gap between each of the columns now these spaces are essentially called gutters that's the space between the cells so it could be a column gap a row gap or we could just define it as gap and as you might guess gap combines both and it will define the row first so if we say row 1 em and just to show the difference we could say 0.5 em for the column and save and you can see the column gap is smaller so you can define each of those separately many times we want them all to be the same and we just leave it all at one size and while i've got em there i kind of want to make that rim instead so i know i'm going back to my default font size there okay now let's look at the individual grid items which we have applied the class of box to all of them so let's use pseudo selectors to just select the ones we want to change and i'll start off with the box class and then i'll use the pseudo selector first dash child and after first child i'm going to set the background color first so background color there we go and i'll make this blue we can save and make sure we have selected the correct grid item that first child and after that let's go ahead and define how many columns this child takes up and this is based on the lines of the grid which i will explain after i set this definition so let's say grid dash column yeah there we go column then we say dash start and we'll start at 1 and then we'll say grid dash column dash end and let's end at four and now if i save well that looks way different doesn't it so what we have done the first line is here on the left hand side of the grid the second line is here when we get to the second column the third line is here when we get to the third column and the fourth line is over here after the third column and before the fourth column and so you can see we told it to start at the first line and end at the fourth line so it really spans the first three columns we can do the same with the row so let's say grid dash row dash start and we'll go ahead and start again at one then we'll say grid dash row dash end and let's end at 3 and save and see what happens when that happens we took up two rows so the starting line was at the top and then the second line was between the first and second row and the third line is between the second and third row so when we told it to stop at line three it stops before the third row now we can see this better with dev tools so i'm going to drag our page over so it takes up the full window and then i'm going to press ctrl shift and the letter i to get to dev tools and then i want to go to elements i believe yep and i'm going to drag this up and no we don't need the console let's look at layout there we go so i don't need to drag that up i need to bring this down maybe i can close that there we go so now we're in layout here not styles not computed but layout and we can scroll up and we can overlay the grid on our main container and look at it in the browser so now we see this and the lines are labeled so you can see one two three four likewise at the top we have one and then two and then three coming down so for the row we start at one and we end at three for the column we start at one and end at four and you can always do this in chrome dev tools just make sure you open it up go down to this second area here and not styles not computed but choose layout and then you can go to grid overlays and there are some other things that you can apply as well it should default to show line numbers and that's what you definitely want when you see the overlays okay with that said i'm going to close this i'm going to drag our chrome window back to the right so we can see our code and let's apply just a little bit more to this grid i'm going to scroll up for just a little more room and i'm going to show you what i do instead of typing all of these out because this gets to be a little bit much so instead of grid column start and end and grid row start and end i would type grid dash column and then i would specify start at the first line then put a slash and end at the fourth and if i save you can see that's what happens likewise i can do that with grid dash row and say start at the first line and at the third line and save and we're back to where we were with fewer properties as long as you understand that these are shorthand and this essentially is the starting number and the ending number for both of these properties let's go ahead and select one more of these grid items so once again use the box class and now i'll use nth dash child and we'll select the second item now for the second item we'll change the background color once again and i'll make this one purple so it stands out and we save we can see that it is now up in the top right after that we'll come down to the next line and let's put our grid dash column and let's say it starts at the first line but ends at the fifth and that should make it span the entire row or the entire container if you will so when i save that made a big change right there then let's use grid row say grid dash row let's have it start at the third line and end at the fourth line and when i save you can see that made some changes too now instead of three and four being below it they came back up here by default in the grid so again that's implicit the grid is calculating where to put everything that we do not explicitly tell it to and now just like flexbox where something that was a flex item could also be a flex container we can do that with grid too so we can nest a grid inside of a grid item so i'm going to take this first child and put display and set that to grid and now inside of that i'm going to say align dash content and just to change it up here i'm going to say end to begin with and we save and look what it did it took the number one down here to the bottom so it aligned the content to the end as you might guess you could choose center and you could have start as well so what i'm going to do is say center and then after center i'm also going to say justify content and we could say for that it could be start and if we save you can see that's to the left and end all the way to the right and if we say center it should be right in the middle so now we have centered both vertically and horizontally so that's how you can center with grid but we can shorten this up by using the place content shorthand and then we could say both properties so we could say end and center and i'll get rid of these other two and you'll see what happens the first one is the align content so it's at the bottom but then horizontally it's centered because that is the justify content and this is the align content but if we just put one value it takes that value for both so we can just say place content center and center anything we want to inside of a grid so now we've looked at how you can quickly use auto flow to create a grid or how you can place grid template columns and rows and then assign different starting and ending points to put the grid items basically anywhere you want them in the grid but there is another way to set up grids too and that is with named grid items and grid template areas so let's do that now but we'll continue to keep this on our page as part of the page so i'm going to go back to the html and i'm going to drag visual studio code back over to the full window to start out okay we want to add a header element first and it's going to have two classes we'll give it a header class and then just an el class for element i'll put an h1 element inside the header and i'll just say header for that after that we'll have our main element then we'll have an aside element that is going to have a sidebar class and also the el class inside the aside element i'm going to use an h2 and we'll just say sidebar inside this h2 we'll do much the same for the footer so a footer element with a class of footer and a class of el for element and then inside of that we'll use h2 and we'll say footer as well so let's save our html and you can see we've now outlined more of a traditional page with a header a main area and a side and a footer i'm going to jump back to the style page and drag visual studio code back over to the left and now you can see this on the page we've got a header at the top a sidebar and a footer they're not much to look at you can just see the text not really an outline of the elements at all they are block elements so they are expanding 100 across the page right now i'm going to scroll all the way back up and we're going to make the body element of the page a grid container so we'll start out by saying display grid and then we'll say grid dash template dash columns and let's set this to repeat and we'll have nine columns and we'll use one fraction for each column so let's save that and boy did we see some changes on the page this is going to drastically change from here though as well so now let's say grid dash auto dash rows and we'll say 75 pixels and then we'll say auto and then we'll say 75 pixels again and let's save and that didn't change too much but it will here in the near future because we're going to say grid dash template dash areas now this is where we can define names of our items on the page but we're also going to have to apply these to each item we're going to call our header hd so i'm going to tab in just a little bit and this would be hd now we have nine columns and this is where we can really visualize our grid and i may need to pull visual studio code back over to get some more room but i'm going to type hd nine times once for each column so there's two three four five six seven eight nine yep i'm going to go ahead and bring visual studio code back over and then once we have the full page we'll be able to visualize this better and then we'll come back and look at our browser afterwards so now we've got main which will be named mn i'm going to use it and we're putting it in for each column but when i get to the last two i'm going to put an sb for sidebar that will be to the right of the main element and then as you might guess at the bottom oh we need quotes first i'm going to put ft for footer and now this is kind of visualizing how our page is going to look this is going to be the header this is going to be the main area the sb will be the sidebar and then the footer will be across the bottom but with all of this it won't apply yet because we haven't defined those areas we haven't really named them on the items yet i'm going to save this much and now let's scroll down and define the rest of this so after the body definition let's go ahead and define that el that we applied the class that we applied to these new elements and we'll give them a background color of rebecca purple just a little bit different than the other purple we used a color of white we'll set each one of these to a display that's grid and we'll just center the content that we put in which were essentially the labels okay after that we need to go ahead and identify each class that we applied so we'll have our header and this is where we can define our name so we'll just say grid dash area set that to hd is what we have in our template for the header okay so now let's do the same for the sidebar so we'll say dot sidebar because we have a class for that this will be grid dash area this will be sb but let's go ahead and color the sidebar as well so background color here is going to be blue and then we also have a footer so we'll say dot footer for the class and here we'll say grid dash area set that to ft so now we should be good except we haven't named our main area yet so you can see everything else in the grid so let's just come down to our container and that is the main element and here we'll put grid dash area and we'll name it mn for main and save now let's go ahead and pull visual studio code back to the left and see what we have well that looks pretty good we've got our header across the top we've got our sidebar on the right we've got our footer at the bottom and here is our main element the container that we were previously working with that still has our grid so now this is a nested grid and then inside of this nested grid we created this grid item and made it a grid so we could center the content so it's nested once again i think the only thing i may want to add would be some space for our grid that's on the body so after we've defined this and you can see it's scrunched now with the lines wrapping but here i'm going to put a gap once again say one rim and so now well now i have an error because i didn't put a semicolon at the end of our template areas which is very easy to do so let's save that bring it back and now i'll say gap and one rim and now we can see this gap now it pushes our page down here just a little bit when we did that so we might need to change that resize something but overall we've got a gap of one rim between the header and the main element and the sidebar once again we see that gap between the sidebar and main element and footer and then we see that right here with the column as well so let me drag this over to take up the rest of the page and once again i'm going to press ctrl shift and i to open up dev tools we're going to look at the layout scroll up and do the overlay here so we want to overlay the body now and now we see the body has nine columns and we can see each one of these columns defined but here's the only one that we really see the gap on for the column which is right here around line number eight now we do see the gap here around line number two for the row and then once again around i can see a line number down here but right right here as well no not right here here it is line number three down here between the footer and the main element as well so we had a similar sized gap here inside of our nested grid which was throwing me off so we could change that as well we could change pretty much anything we want to so for that let me go ahead close the dev tools just to get everything to fit a little bit better let's bring this back change our gap to 0.5 ram and let's also go ahead and change the size we're using here from 75 and i'll select both of those to 50 pixels and yeah it's fitting on the page a little bit better there's no scroll up or down now and we might even just want to have a column gap instead of a row gap so if we save and do that you can see now we've got a small footer a small header and we have this small column gap here and it doesn't match the column gap inside our nested grid so there could be other styles we want to change and play around with but overall i hope this has helped you see how grid can be applied in many different ways and give you a good start and much like flexbox froggy that i recommended at the end of the flexbox module let's go ahead and look at grid garden which is a game that will help you learn how to use css grid as well i'll link to this in the description it's at cssgridgarden.com but once again 28 different challenges here that will help you master css grid or at least learn a lot more about it let's learn about styling images with css we'll be looking at foreground images and background images today foreground images are the images on the page and as you might expect background images are in the background so let's look at our starter code we have a basic html page here with nothing in the body right now and then for the style.css file we're importing a font from google and i have changed this from roboto that i've used in previous lessons to nanito i believe that's how that's pronounced and you can see it is used right here you can use that or you could still use roboto or really any font you want to that's just a preference thing and you don't have to go back to the google font site to do that you can just change it in the string here where family equals and puts the font name and then of course match that here now if you choose a different font of course make sure it matches up with everything you have chosen that the fonts google.com site recommends okay so then we've just got our basic css reset and on the body we are applying that font family and a minimum height of 100 viewport units we've got a lot to learn about images today so let's get started inside of the html and we'll add some content that we can style we'll start with a section and i'm going to apply the class example because i'm just going to give this as an example for now then we want a paragraph and then inside the paragraph let's go ahead and put an image element and you can see it automatically gives us a source and an alt attribute for the source you can see inside of our image folder we've got several images and we're going to use this pat1.png i'll click on this you can see in visual studio code it is just a square with a pattern on it and then you can see at the bottom it has 200 width by 200 height that is the dimension of the image now as we learned in the html lesson we'll want to apply that width and height to let the browser reserve that space to prevent content layout shift but what i'm going to do right now is type the image folder because we need to look inside of that folder for the image press tab and then it gives us a list in vs code of the images we can choose i'm going to choose this pat1.png and then i'll just say pattern1 here as the alt text which you always want to provide for images but then let's go ahead and apply the width and set that equal to 200 there shouldn't be pixels or any type of unit on this we just apply this intrinsic value and you can reference that in mdn as well as it suggests to do that and this is just once again reserving that space in the browser it's not really going to use these settings we can override that with css but in case of a failure of the css file to load or anything else we are telling the browser to reserve this space so let's go ahead and set that and then i want to put some text inside of this paragraph as well and i'll just say yeah this is a paragraph and we'll look at what gets rendered on the page with this so i've already started the page with live server and you can see it is running down here i'm going to drag this to the left as we'll split the screen and we can see what we have on the page now we have got our image and we have got the paragraph next to it but we need to apply some styles to what we have put on the page so i'm going to drag this back over and let's go look at the style.css let's start by styling our section element that has the class of example and we'll put a margin at the top just to push it down just a little of one rim and then we'll say padding dash left to give it just a little padding from the left and we'll give that 20 pixels and now let's give a border i often do this just to see or highlight what i am designing and remove it later so one pixel solid red border that's fairly common to see what we're working with on the page okay after we've applied that class let's go ahead and apply something to the image so we'll choose that class and the image within and now we'll say width 25 but that's not where we'll stop because we did apply a height in the html and it will not ignore that height now i have heard others say do not apply a height because if you just apply a width then the height will respond that's true if you have not set the width and the height inside of the html but as currently recommended we are doing so so since we have done that we need to go ahead and set the height to auto and then it will respond to the width so let's just save this now once again know this width is not 25 of the image size is 25 of the container size so i'm going to drag this back to the left and now we can look at this and we see we have got a red line around our section and then we have our image and then we have our paragraph now there's several things i want to look at here one since i've talked about the width of 25 percent we have made that image responsive so i've drug this over to the full page now and i'm opening up dev tools so i can resize the window now notice how the image shrinks as i resize the window and it expands as i make the window bigger that is a responsive image we have given it a percentage width and we have the height responding by setting to auto again we have applied the height because we applied the height in the html as recommended by mdn and the way to make it responsive then is apply the height of auto in your css as it will respond to the percentage of the width that you set okay i'm closing devtools now and dragging this back over to half the screen and what we really want to look at now is this paragraph notice the y and also the p here and the g and another p these are the letters that have something that sticks down below the line we're typically writing on now notice what happens over here with the image it's the same way also notice it's on the same line as it was even before we highlighted the container that's because images or image elements are not block level elements they're actually in line and this was the original specification with html but we often don't want this behavior so even if i removed this paragraph right here you would still see this space we didn't apply padding or margin or anything to create this space here but it's often wondered how do we remove the space below an image well that's because an image is actually an inline element and it allows that space because it was originally envisioned as being used with paragraphs or with text overall so you get this space you don't want here even though you don't provide a margin or padding i'm going to show you how to remove that first so let's go back to our css and this is part of a reset that you can just typically do now it doesn't go inside of the asterisk because that selects all elements so just at the top we want to have image and then display block and we can save and now let's go back and we can look and with a block element of course it wraps down to the next line because you know a block element takes up the full width of the page so let's go ahead and go back to our html and i guess i need this full page once again so we can see what we're doing but i want to remove this text right here and even though it's inside the paragraph and we could remove the paragraph if we want to i guess i'll go ahead and do that too but just inside this section i'll save and bring this back over you can see there is now no space underneath and i'll switch back to the style here if we did not have this and i'll comment this out with shift alt and the letter a and save even without the paragraph we have this space underneath the image so you want to set those to block because they're originally in line and then you remove that space that you weren't expecting now let's move on to our next example so i'm going to pull visual studio code back over to full screen go to the html and i'm going to comment out what we put in for our first section i'll leave it in there for you so if you download the code though you can see that example so now the next thing we want to do is create another section i'm going to give this a class and i'll set this class well not class i typed class i should have typed hero there we go so i'll give it a class of hero and now inside this instead of just an image i'm going to put a figure element because that's what we usually put images in and i'll give this a class of profile dash pic dash figure so we know exactly what we're talking about there now inside the figure i'm going to put the image element and then we don't really need to apply a class there we'll just use that profile pic figure to reference the image inside of it and you'll see how i do that now we once again want to look inside of our image folder for the source and then pick one of our images and you can see i've got a profile dash 800 by 800 and if we look at that image in visual studio code you can see the image here and you can see the dimensions below that's 800 by 800. i'll go ahead and close that out let's give it an alt and i'll just say profile picture and then we need to apply the width and height again we could also apply a title if you remember that attribute from html and there we'll just say my profile picture and that shows up when we mouse over the image okay after that let's apply the width and that would be 800 and then let's apply the height and that's also going to be 800. i'm going to press alt z to wrap the code that way we see it without scrolling over to the right like it was now if you remember the figure element we also need a fig caption element so let's add that and inside the fig caption i'm just going to say jane doe so the name of the page that this image belongs to or the name of the person in the image if you will so we want to add that it helps accessibility and i'll show you how to hide it if we don't want it on the screen so let's save that much and now we can look at our page and see what we've got so far it's pretty big it's filling up the whole page isn't it so we can definitely change that with css i'm going to hide the file tree by pressing ctrl b and we can make our changes here i'll make them below the body but above the previous example let's start with the profile dash pic dash figure class and there we'll just say a width of 35 and that would be the width of the page it's referring to because that is currently the container actually it's that hero that we created so that section and it should be the width of the page so after that let's go ahead and apply the next to the profile pic figure and then the image within and here let's give the image a width of 100 because it's in a container and the height once again auto and this does make it responsive we've got a percentage for the width and the height set to auto remember we set the width and height once again in the html to avoid that content layout shift okay now we've got min width let's set that to 100 pixels we just don't want the image to get any smaller than that when it does shrink and then let's put a border around it so let's say border five pixels double gray so it's not just one solid line it should be two and now let's go ahead and save first and you can see what we've got here is our fig caption we're only taking up 35 percent of the width of the full page right now because that section container element is a hundred percent and so the figures 35 and then the image fills out a hundred percent of that figure that is 35 of the page then we've got this double line around the image and you can see the fig caption underneath one more thing i want to do to our image though is make it round and since we have a square image this wouldn't work if we had a rectangle but with a square we can do this and let's say border radius say 50 percent and when we save we now have our profile image in a circle let's go back to the html and add just a little bit more inside of our hero section that we have right here so after the figure i want to add an h1 to the page i'm going to give this a class of h1 as well inside the h1 i'm going to go ahead and give a span element and give a class of no wrap because i won't want what's inside the span to wrap if you remember a span element is an inline element i'm going to say hello and then i'm going to paste in a little wave emoji here so i'll just paste this over and you can get those wave emojis from different places i use emojipedia.com i believe to get that one after that i'm going to provide another span element and once again give the no wrap class and here i'm just going to say i'm jane as that's who's in our picture and now we can instantly see that on the page as well so we've got our h1 we've got a couple of no wrap classes here and we've got the h1 class on the h1 element let's go back to the css now okay let's start below the body but above our profile pick figure class and if you remember we have a hero class and that is the container that is that section element let's put a border on the bottom only so we can see it we'll say 2 pixels solid we'll give that a color of black when we save we can see that change instantly let's add a few more styles to our hero let's give some padding here of 20 pixels to push everything a little bit away from the edges there we go and now let's give this a display of flex and by default flex is a row so we'll already have our content in a row then instead of stacked on top of each other now let's say justify dash content and let's say flex start here and then after we put that at the start let's align the items to center and after we align the items to center let's apply a gap between the items of about 30 pixels and save and that's what we've got now we've got our image over here on the left and we've got the hello i'm jane on the right now let's go below the hero section and add our h1 class and inside the h1 class let's make this font a lot larger let's say font size 500 percent and we'll save and see how big that gets nice and big that works okay what i'd like to do though is make the page full screen once again and look at dev tools so we can resize the page and see some things right now even though we put those classes on we haven't defined those yet so we're getting the text to wrap in some strange ways that aren't always the way we want here but notice our image is shrinking nicely but it stops at the 100 pixel minimum width that we left it and we still have that fig caption on there that we'll want to remove as well so just checking out the resizability of everything at this point let's close devtools move chrome back over to the right and let's define those utility classes so if we come up to the top we can put some notes in here and we can say begin reset with our comments and then after our image we can say end reset and there we go and now let's go ahead and put utility classes just organizing this css a little bit and then we'll say end utility classes okay so we can define these utility classes right in here the first one will be no wrap now these are things we've covered in previous lessons but it's a good review so we'll set white space to no wrap now when we save notice what instantly happened on the page i'm was over here but we've got it to where i'm jane should not split that should not wrap the same with the hello and the wave so now they're on the lines that they should be on and we don't want to see the word i'm and the word jane break and we don't want to see the hello and the wave break and that's why we applied those classes of no wrap the way we did now let's go ahead and apply an offscreen class also so this offscreen class will still allow the fig caption to be read for accessibility but it will hide it from the visible page so we'll say position set this to absolute and then let's just send it left minus 10 000 pixels and save and it looks like it's still on the page maybe we don't have that on our fig caption yet and we don't i forgot to put it on there so let's give it a class equal to off screen and save and now our fig caption is gone as i expected it to be we've got the basics of a hero section here a header for our page but it's pretty plain right now so let's start working with background images so now that we have put our utility classes here let's scroll back down below the body and back to the hero section now after this gap for our flexbox display i'll put an extra line so we can see these new properties we're going to work with the first one is a property you have seen before and that is background dash color we want to put a fallback and that is if the background image doesn't load we at least want to have a color behind it so let's put rgb and i'm going to go with the color i discovered that i think i like and just put these three values in there you can see it's kind of a peach or gold i'll save this and there you can see the background color that we now have for the hero section but that's a fallback so let's go ahead and put in a background image that is background dash image now you would think we might specify image here but actually we need url and inside of the parentheses then we put quotes and now we need to go inside of the image folder again but remember we were doing that in html simply by typing image but we're not in that folder now we're in the css folder so we need to go up out of the folder that's two dots to go up then a slash and now you can see visual studio code says our image folder is there and now let's pick this pat one that we looked at before it has a pattern on it and i guess i need to put a semicolon there where that ends that was right at the end of the line and now let's save and of course our text is black so that doesn't look too good there but otherwise you can see this pattern behind everything and it's a repeating pattern and we'll talk about that too let's go ahead and quickly add a color to our h1 so we can see our text again so now we've got hello i'm jane in white but what is happening by default is our by 200 image is repeating both on the xaxis and the yaxis in both directions and it's filling this out and the pattern looks pretty good you can't see where it starts or ends really so what we can do to control that is the background dash repeat property and we can just say no repeat and now let's look at what happens now we just have our 200 by 200 image up here in the top left by default likewise we've already seen what happens with the default repeat value and it repeats everywhere but we can just say repeat y for the y axis and it just stays all on the up and down essentially the yaxis or repeat x and it's all on the xaxis which would be horizontal or across let's just leave it to repeat for now even though that's the default i'll just leave that property in there and let's change out this image let's look at another pattern that i have saved in there which is pat two we can save that now our white font doesn't look as good on top of it and it's always important we want to emphasize this the font is the most important thing so you have to work with that to be visible because if it's not the background image is essentially that it's just background it's not really what's important you can see the lines if you look closely to see how this image repeats just a little bit more often so if we set this to no repeat i believe it's once again 200 by 200 or something like that you can see the image by itself there and if i save you can see it repeat across now if you have a transparent image and i set up a transparency of this image as well and you save you can see now this kind of looks cool because we have some of that color that's underneath coming through the image and i'm not going to show how to create transparencies in this tutorial that would be more like a photoshop or other image editing tutorial however if you do have access to images that are somewhat transparent like this it is a cool effect to do that of course i would probably switch this text back to a black font or something that would show up better on top of it at that point now let's also look at some more images like you would use and once again i want to emphasize how important it would be to make your text visible no matter what image you're using and we're just seeing the clouds right now but this is a much larger image if i go over to the file tree and click on the scenic image drag visual studio code back over where you can see it all we've got a waterfall lots of things in this image that we might want to see so we can change that let me bring this back over hide the file tree so we have some room underneath our background repeat let's put in background dash size and set this to cover when we save now we see much more of that image but it still might be a little concerning how readable this text is so you might want to work with that of course to make it stand out some more but that does look good now let's drag this over as well and if we open this up you can see it's definitely bigger here and looks different let's open up dev tools and once i have dev tools open you can see how the image resizes with that cover setting and there are other settings for background size as well you could put in an absolute or percentage or other things you might want to but cover is a very nice one to use i'll go ahead and close this and move this back another word that you might use in there besides cover is contain so let's at least see what it does it's not what we want to use but since it's repeating you can see that we have two of the image now because it does repeat if we set this to no repeat and save you can see cover or i'm sorry contain fits the full image in here and contains it but it doesn't make it cover the space that we want it to so let's put this back to cover for our use and we can leave the no repeat there as well because that's what we want but let's say we showed this to jane and she's not quite liking it of course the text isn't popping out and she wants to be more about discovering things not just about an image of some cool scenery so we're going to change this scenic image and let's change it to an image of a map and you can see it's a rather large image which is something else i didn't discuss now this would be a different tutorial to talk about image optimization a lot of times you want to shrink images down and this is a rather large image but that said you also have to be careful because some devices have different amounts of pixels and if you use too small of an image then it will look blurry on the devices that possibly have more pixels so one rule of thumb i have heard is always use an image that's twice as big as what you plan on displaying and that would help it up size to that extra pixel setting essentially and still look good without looking blurry because otherwise you're essentially stretching an image to increase the size of it and that does make images look blurry so again optimization would be something to consider but jane likes this image a bit better it gives maps and she's talking about exploring and taking pictures and so here we've got a background image with maps on it but still the font isn't popping out quite as much as we want so there's some things we can do there let's go back to the css and i need to scroll back over here a little bit we can add some more to our h1 so this color the white looks good i mean it does pop out a little bit but let's do something that's not quite white let's give alice blue a try which is kind of a different white you can see it's not quite the same white but it does look white it doesn't really look blue to me at least and after that we can apply a text shadow to make it pop off the page just a bit this is applied to the xaxis so we'll say 2 pixels yaxis 2 pixels and then there is a blur value and that makes the shadow not as crisp but a little blurry so i'll put that at 5 pixels and then we say what color we want the shadow and we'll just make it black when we save you can see that text pops off the page just a little more so that's something you can do to help your text stand out as well don't abuse it though you can do way too much with that but of course it's set to preference then after that we could put a background color so let's talk about that if we put in background color and we just set it to black that's not going to look that great but let's go ahead and do it for the moment and now if you remember from our color lesson we can click on this square open this up i'm going to go over to hsl and then i'll drag the transparency down here and i'm thinking maybe let's go to 40 percent and see what we get if we leave that and now we save well now we can see the image because it's a transparent color and that helps a little bit now we could add and again this is to preference complete preference here we could go ahead and add some padding so let's do that try it out we'll say padding and let's go 0.25 round and then after that we can also add a border radius to that background and let's just go with 10 pixels to round the corners and so now you see this kind of contained here but i don't know if i like that or not but there is another trick we can do that kind of applies the same thing but it does it more broadly so you don't really see this box around there so i'm going to comment these out but once again leave them in the code for you because that is to preference now let's jump back to our html and what i'm going to do is put a container around our hero section and here i'm going to use a div and i'll just say class of container i'll take that closing div control x to cut it out come down to the bottom of the section paste it in with control v and save and now we have a container around our code i guess i could highlight this and tab it over to make it a little more uniform there we go and now that we have the container we can style that container so we'll go back to our css and again this is a work workaround only if you're trying to make the text a little more legible you want a little more control and to get that separation between the background and the text so this is nothing that is required it's just something that you might want to know how to do and what we're going to do is essentially create a filter or a mask by having this extra layer so it's just a little bit more of an advanced concept but it's not too difficult to do i'm going to take everything we have here for the background of the heroes section and i'm going to put it in the container and now that we have that we can save and we shouldn't really see any difference because the container is going to be the parent of the hero so we would still see all of this behind it and now instead of in the h1 where we had this background color here let me go ahead and just copy this and we might want to use a different color but we'll try out the black at first we can put in that background color that we were putting just on the h1 but now this will apply to the full hero so let's go ahead and save this and see what it looks like and you can see everything got darker we've essentially put a filter that we can lighten or darken as we choose so i want to put a different color here and try this out so let's make this 100 percent right here and save again that lightened it up now you see more of a light filter on it as well so you can experiment with this and of course you can go into the colors and choose anything you want to as well here in visual studio code i'm going to press alt z just so we can see that wrap down here so if we didn't want that maybe we want a little more transparency consider that 35 percent and maybe you liked the darker color instead of the light color so if we went back and made that a zero that's essentially working with black there so now you've got a darker color but it's a little more seethrough maybe make it 25 i think i liked the lighter color myself so i'll go back to 35 and then i'll put the 100 percent here in the third value and yeah that kind of pops off but it still has that filter and you can see the maps i like how that looks just personally but you could change any way you want to maybe you'd want to make the double circle around jane here in black instead of gray now that we'd have a darker color and that's something you could do as well but we've made a nice hero section overall now let's talk about one other property that i didn't bring up for the background yet and this would be background position i'm going to put it after the repeat and it's background dash position there we go and now it has an x and a y as well so you might see this adjust and it's how it moves the image so if we put center center you can see yeah the map moved a little bit so even though we're working with one image that's covering the whole span you might see it move so you could say top right just see how the map moves around for you a little bit and top left and not really noticing a change there what if we said bottom right and move it yeah the map moved again because now we're seeing the bottom of the image that's the biggest change right there now if we switch it to top we'll see the top of the image instead i like that a little bit better because it's a little darker up there towards the top i believe and you could just provide one value i think as well and if we did center yep it's somewhere right in the middle now we're not seeing the top or the bottom but if we went back to playing around with a smaller 200 by 200 pixel image you would actually see that one image move around the page as well so this is just something worth checking out to see what part of the image you want to display for the background so i'm just going to leave this as top now because that makes it a little darker and looks okay to me it's time to move on to another example i'm once again going to leave this css in the code i'll just come to the html i'm going to bring this back to full page and i will comment out what we currently have here as well and leave it in the code for you again pressing shift alt and the letter a to make that comment after i selected all of that and so now we're ready to add something new to the page so we'll come back over here so we can see the page again and it should be blank and it is let's add something to the body itself let's start with our fallback background color so we'll say background color oh that just said background which is shorthand we'll get it to in a minute but we've got our background color and just so we know it's changed let's go to this alice blue again which isn't quite the same as the white default and now you can see it's a different shade here and after that let's provide an image so we'll say background dash image and here we'll say url once again and inside the url we need quotes and remember we're in the css so we go up out of the css folder and then into the image folder and now i'm going to go ahead and well you know what instead of this image at first let's do a linear gradient first and then we'll see how we can put an image on top of that so let's go with linear gradient and let's talk about this this is how we can switch from one color to another so i'll supply the first color steel blue it's a color that i like and the second color let's go with white and when i save we'll see the default behavior it's starting at steel blue at the top and going to white at the bottom of the page and we could put other colors in here as well so if we wanted purple in the middle we can provide purple as well and now when we look it goes from steel blue to purple to white so you can use pretty much as many colors as you want to and you could have a veritable rainbow i should say going from top to bottom or as we'll find out here any direction you want so i'm going to say to left and save and you can see it's white on the left and it's blue on the right so it starts at the right and it goes to left we could do the opposite of that to right and there you got blue on the left to white on the right you could go to bottom which is essentially the default or you could go to top as well so nice changes there i'm going to go to well let's go to left and leave it like that so now we have this background and imagine we were typing paragraphs over here on the left and we stopped somewhere and it gets darker over here on the right and that would work for us now let's look at how we can apply a second background image and you can apply more than two if you want to but i'm just going to do an example with two so now i'll say url provide the parentheses here a comma after that so we clearly have our two images defined and i want to go ahead and space this over if it will and i may need to go ahead and drag this to the full page and now we've definitely got some space there so let me remove those spaces i just wasn't seeing them before bring this down to another line and i like to have the images lined up like this when i set it so or a gradient and an image if you will so now i'll put in the quotes we need to go up out of the css folder into the image folder and now i'm going to pick bubbles so we have a bubbles background image and a linear gradient both let's save and drag this back over to see what we've got well now we have bubbles all over the page and that may not be what we want as well this isn't responding like i want it to when i drag this back over so i'm going to put these back to back so we just it's one long line essentially is what this is for the background image we supply the first one and then a comma and then the second one and a gradient qualifies as a background image as well so now when we define our background repeat we can put in a value for both of these images so the first one i want to repeat on the yaxis that's our bubbles they're going to go from top to bottom but not left to right then we put a comma and the second one the gradient i'll just put no repeat and when we save now we only have bubbles on the left but we can change this as well so let's go ahead and put in a background position so we'll say background dash position and now we'll say we want them on the right and let's use the center so now when we save there we go our bubbles are on the right and they show up much better this is a transparent image that i have over here so if we just look at the image and i pull this over you can see it here in visual studio code it's originally 300 by 300 has a transparent background with white bubbles okay we'll drag this back over and that looks good with this steel blue background that we're seeing on the right with everything we've set up i can't see the code too well going to press ctrl b to hide that so our background position has moved the bubbles much like we want them to be but the bubbles still look a little too big so let's say background dash size and now this first one will be for the bubbles so this stacks in this order the bubbles go on top of the gradient so they come first in the background image and the gradient comes second likewise with repeat y applies to the bubbles no repeat to the gradient background size 20 for the bubbles and then we'll put auto for the gradient when you save we have smaller bubbles now over on the far right now we've wrapped up our example of linear gradients which are fun to play around with and also layering background images so we've got one more example to look at today and once again i'm going to comment out previous code we're using as you can see we don't have any other in the html but i'll add a little here and then i'll comment out some of what we have in the css just so we don't have that bubbly background for this new example so i'm going to provide another section and i'll give this a class well this doesn't need a class but just inside the section let's go with a paragraph that has a class of clip and now inside this paragraph i'm just going to type jane's name and save and we can see her name up here in the top right for now let's go back to this style once again i'll comment out this background that we currently see here i'll leave the background color but everything else but i'll leave it in the code for you again shift alt in the letter a to comment that out and if i save that should all be gone we still have jane's name so now i'll scroll down here all the way to the bottom below our first example and i'll provide this clip class and there's several things we want to do here we want to give this a very heavy font weight so i'm going to give it 800. if we save that you can see it's very bold now but it's still very small so let's make this big we'll say font size let's go with 18 rim we want to fill the page for the most part and i think that will do it after that let's say text align and set this to center and now we've centered jane's name as well okay after that let's provide a background and we could just say background once again with this shorthand or we could say background image so i'm going to go ahead and say image we'll provide url and now we go up into the image folder and then let's take that scenic image that we previously had and save and now of course we see the clouds we haven't changed the position or anything else of the image but we'll do some of that here let's at least change the size so background size is going to be 100 and now we can see that full image behind jane's name so now let's go ahead and text dash transform set jane's name to uppercase and it's really filling out the page now now the property i want to talk about is background clip so let's look this up at can i use dot com because there's something specific about it background dash clip we'll select that and you see background dash clip text and it says a nonstandard method of clipping a background image to the foreground text so it says unprefixed is only supported by about 19 of browsers but there is a prefix that we need to use with this so we can see the support for edge not explore and we're not really going to worry about explorer ever probably but for chrome you see the little yellow here and it says supported with prefix webkit firefox doesn't need that but just about everybody else does so we need to use that prefix when we apply this property so what we're going to do is say dash webkit dash background dash clip and now we'll say text now this won't do everything that we want but it did take the background away here in chrome as expected let's set the color and we want this to be transparent so first i'm just going to choose this black color and now we'll do the work here by clicking on the color getting that popup i'm going to switch this over to hsl we'll pull this down to about 20 percent right in there and take a look at what we get now so now it's a little dark because we can still see 20 percent of the black but essentially we're seeing the image inside the text only which is kind of a cool way to do that we'll go ahead and put this to zero and see if it makes much of a difference and yeah it might have lightened up just a little bit so you could make this a little darker by adding about twenty percent and there you can see the difference and you could do this with other colors too we're essentially creating that same mask over the image or you could make it totally transparent and i believe to do that you could just say transparent and save and yep that works too so if you want it totally transparent you don't even have to put a color there at all now this will not be working in firefox you would need to of course use that as a fallback for when it is not supported in browsers and otherwise you need to have this will this impact chrome by putting it there no but now this would also make it work in firefox and now every other browser that needs this webkit prefix also works so we just have to have both there and before we wrap up i am realizing we didn't really cover that background shorthand which can be very confusing and i like to use the individual ones like background color and background image when possible but let's come back up to what i commented out on the body and uncomment that so we'll see jane's name over the bubbles and we can save that much but now what we essentially want to provide here when i do use the background shorthand is just a few of these properties three specifically so we'll start with the repeat we'll say repeat dash y and then we'll say right center for the position and then we'll have our url which was dot dot slash image slash and then we had our bubbles selected and then we can put a comma and we can supply the values for that second image as well so now we'll say no dash repeat and then we'll have our linear dash gradient if i could spell once again and then we'll say two left we had steel blue and then we had i believe just our regular white yep there we go and then we can go ahead and put the semicolon there now let's put size after that because we didn't attempt to include the size in the background shorthand however you can it's just fairly complex and it gets confusing so you could look that up on mdn if you want to i'll provide a link in the resources but this is about as complex as i like to get with that shorthand or it just starts get to get too confusing so what we've done is eliminate the background image background repeat and background position properties that were individually there so i'll just comment those out we save we have the same result using the background shorthand let's move on to css media queries media queries allow you to modify your site based on specific characteristics and parameters and most often we look at the browser viewport width this is key to responsive design as our web pages will respond to the width of a device viewport so let's look at the starter code i have got some basic html here and i have a page outline that has a header a nav inside the header element a main element and a footer element and so we're just going to outline a page and see how it changes based on viewport changes and then in the css i've got some basic css here we're importing the nanito font from google other than that we have the basic css reset and a basic style a change you may notice is i'm using the font shorthand property now that sets both the font size and the font family all in one right here in the body other than that min height of 100 viewport units okay before we do anything with css we really need to look at the html there is a meta tag here that enables responsive design and that meta tag has the name viewport and you can see the content is width equals device width and then initial scale of 1.0 this is necessary to enable our media queries and allow responsive design in our web pages now do you have to memorize how to type that out not really because vs code helps us a lot i'm going to just select everything quickly with control a cut it out of the page with control x so i have a blank html page and now in vs code if i type an exclamation mark you can see it says emit abbreviation when i press tab it fills out the basic skeleton of an html page and you can see it includes this meta tag with the name viewport the content with width equal to device width and the initial scale set to 1.0 it's very important to have that as we work with responsive design and visual studio code helps you do that i'm going to press ctrl a now to select all of this and then ctrl v to paste over and just go back to the page outline that i already had with the header nav main and footer ctrl s to save and we're ready to move on to the css okay before we add any actual css to what we already have let's just talk about the syntax of a media query first so i'm going to paste this in and look at the syntax that is how we write it so we start out with at media and then we give the media type and then we specify a condition or conditions as we can link those with logical operators and and or and then we specify a break point and that depends on the condition as what type of break point we'll use there's lots of different types of break points and conditions we can apply and then just like we do with anything else we put the css rules between the curly braces so now that we've looked at that syntax let's go ahead and write a media query and see how that applies so we can start out with at media and instead of media type here we can say screen that is the most common one you'll see you might also see all or print or even speech for screen readers and devices that read the screen back to you and then after condition or as the condition i should say you often see min width and you should read min width as starting from so whatever the width we specify is these styles will start from that width when we say min width likewise max width would be up two so the styles would apply up to the width we would provide if we said max width there we usually do this with min width and that is because we design from the smallest to the largest and that is what is called mobile first design and responsive design and the reason we do that is well think about it this way as an analogy when you get a box you unpack something it's often hard to put everything back in the box the way it was packed and get the lid to close it's kind of like that when we design a page it's easier to start with the smallest and work our way towards the largest rather than start with the largest and then try to squeeze everything into a smaller and smaller box if you will so that's kind of the analogy i used to explain that so we'll start out with a mobile device screen usually that's a one column design and we can spread things out as we go so for this first min width for the break point let's say i would put and remember this is starting from so i would put something like oh let's go with 481 pixels so all of our styles before this media query would be applied until we got to 481 pixels and then they would still be applied unless we were to overwrite them because the cascade still works so here we could change something maybe about the body maybe the font maybe a background color and that's what we'll experiment with today because it's so easy to see those background color changes and then we can overwrite the previous style we had other styles if we do not overwrite those they will still apply if they were applied before the media query now as always i'll give a link to the mdn references in the description below but let's talk about some of the other conditions and break points we could have although as i've said min width and max width with pixels as a breakpoint is very common but you could also have something like orientation and then you would set that to uh possibly landscape which would be kind of turning your phone to the horizontal instead of the vertical orientation something like that there's also something like min dash aspect dash ratio and there you can actually set a ratio and there are many different sizes of phones so while landscape would actually apply to anything that was wider than it was tall here we could set something more like specific like 16 by nine or say seven by four something like that then when the aspect ratio reached that size so the width would be 7 and the height would be 4 in that ratio or 16 by 9 or whatever we put that is when that would apply now remember we can also put more than one rule here and we'll look at that very soon as well so how do we decide what breakpoints to apply and what values to use well there are some common ones and we can also look at some css frameworks and see what they have applied because they have probably researched that and worked with it a little bit more than we have so let's look at what some others have done i'm going to open up the file tree here you can see i have a notes dot md that i'm going to include in this repository dot md means markdown so it's a markdown file when i click on this you'll see the outline here but i'm using an extension and if you want to get that extension it's called markdown allinone you can search for that in the visual studio code extensions area and then you can install it if you want to use that as well so when you have markdown all in one then you can go ahead and preview the markdown and that's what i'm going to do with control shift in the letter v and now i've got a markdown preview and this is how github would read our markdown so i've provided a table here so some common media query breakpoints you can see mobile devices are often considered to be pixels width or less and then from 481 to 768 usually ipads tablets 769 to 1024 small screens and laptops 1025 to 1200 desktops and large screens and 1201 and greater extra large screens and tvs now that's just kind of a common general guideline of course there are no standards so you can set these how you want but let's look at what the bootstrap css framework does and i tend to like these and i'm i guess maybe i'm just used to these but 576 instead of 481 as we saw referenced above is considered extra small and then anything greater than 576 is small 768 and above is medium 992 is large 1200 is extra large and then they have a sec extralarge which is double xl at 1400. now tailwind is another css framework that is very popular now in recent times and you can see they've also differed somewhat they consider the extra small to be less than 640. maybe that's because in recent years our devices have seemed to have grown into larger sizes after that 640 and above is small now we meet up and agree at 768 and that is where the ipad is usually at the traditional ipad and then we've got 1024 here which is a little different than 992 as far as bootstrap was concerned then 1280 and 1536 so you can see even professional opinions vary and you can set your breakpoints how you want to as your page needs to respond so it can respond to the content you can work with your content and set the breakpoints according to that you could target specific devices or just use some general guidelines as well let's go back to the css now and start to write some code and we'll see how this applies okay i'm going to drag visual studio code to the left and we can see our page on the right it currently has very little applied as far as styles just our css reset and our basic body styles right here and then we have our media query i'm going to hide the file tree with control b so we have a little more room to write code i'll go ahead and remove this media query for now just so we can start out with our basic page first and remember we're designing for the smallest screen first and we'll work our way up so we'll just put in some basic styles here the easiest thing to see as we're learning about media queries is to change the background color and let's do that by first setting a background color here on the body i'm going to set it to four seven five five six nine kind of a nice grayish color if we save that we can see that doesn't highlight our lettering as well but we'll change this of course as we change media queries and now after that we can change a little bit about how this displays as we learned in the last lesson about images so we'll set background image and now instead of linear gradient that we learned about before there's one other one i would like to show and that's called a radial gradient and now this starts in the center and works its way out instead of top to bottom bottom to top left to right or right to left or any direction that we would send a linear gradient this will always start from the center i'm going to use white smoke as the first color and then we'll use that color that we specified as the fallback background color for the second color and when i save now you can see it lightens up here in the center and it works its way out to a darker color on the left and the right top and bottom now let's make well i'll put a semicolon there let's make our body a flex container and then let's set the flex direction and we'll set that to column because row is the default and we want our elements to stack instead of being a row i'm going to scroll for a little more room and now let's go ahead and identify each piece here we have a header a nav a main and a footer and we will apply this style to all of those elements so we'll set each one of those to display grid and then we'll center our content by saying place content center and when we save now we see that has been saved in the center of each one so this really means we've stacked our elements and nothing is below so we want this to take up the full page and we'll take that on here very shortly so i'll scroll for some more room here on the left and now i'm going to put a style on just the header and the footer and here we'll say position sticky as we want these at the top and the bottom let's identify these with a different background color and here we'll say 1 e 2 9 3 b there we go a little darker but then let's give the font the color of white smoke as well we can save that and now we can see our header and footer and remember the nav is nested inside the header and now we've applied position sticky but we didn't provide the other value that we need to stick the header or the footer in a specific position so here i'm going to say header now because it will have a different position than the footer we'll say top 0 and now that is in the same place but after that we can come down below and say footer and here we'll say bottom 0 and save and now right now it looks like it's in the same position because we haven't expanded the page but the footer will be stuck to the bottom and the header will be stuck to the top and we can see the difference in that i'll scroll for a little more room and in our main element and it is a flex item right now as it's inside the body that is a flex container we can say flex dash grow set that to a value of 1 and now the main element has grown to fill out whatever space was available now before we move on to a media query let's go ahead and style the nav just a little bit more to make it stand out so let's give it a background dash color set that equal to white after that we'll set its color or font color to black let's give it just a little bit of padding here 0.5 rim and let's give it a border bottom and let's set this a little thicker two pixels solid black and let's see what we get well that looks good except we don't quite have the width we want yet we can easily solve this by going back to where we place the grid on each of these elements the header nav main and footer we've got it centered but we don't have block elements at this point that are 100 percent width so let's add grid dash template columns and set that to 100 percent now when we center those or actually give them 100 width and we've centered them and you can see main is centered here vertically but it's not horizontally now but the elements do have 100 percent width and this is text content text content pardon me so we just need to say text align center and now we get everything where we want it but we actually have 100 percent width for each of those elements once again and now we have our basic page layout so let's go ahead and add a media query now that will change things up a little bit so underneath our footer we first want to indicate that's what we're doing so i'll put a comment and here let's say small that's where we'll start out with our media query i'll say at media and then we'll use screen and i'll say min width and here we'll say 576 pixels so the styles we have put in are valid up to 576 pixels and they will still be valid if we do not overwrite them here so now let's go ahead and style the body here and the first thing we'll do is set a background dash color let's just set it to green something we'll definitely notice a change on and then we can go ahead and use that same background image style that we're using with a radial gradient and inside there we'll start out with white smoke once again and then we'll just switch to green okay besides the body let's do one other thing let's take the nav and let's just set the display to none so it will disappear and now look what happened we're already past that 576 width so we see those changes instantly we no longer have a nav on the page and now our background for the body is main now we still have our background color on the header and footer that we set because we did not overwrite those with a new style here so that is what has changed based on that width now how can we go back and forth this is interesting and something you should learn how to do so i'll drag this over till it's full screen you want to go to dev tools and there's certain ways to do that one is to right click and choose inspect at the bottom of the popup menu another is to press ctrl shift and the letter i which is what i tend to do and now devtools opened here on the right it's fairly small and i have got the console here for javascript right now but yours may open to elements and you can see and highlight these elements here and that's really what we want as we style things and you can see layout but now let's look at some details about this layout and how we can adjust that notice the little mobile devices icon up here let's go ahead and click that it says toggle device toolbar that gives us more tools now we can choose dimensions and we see the dimensions here we see the percentage that's showing so i'm going to set this to 100 and now i can see that these are the dimensions for an iphone 6 7 and 8. we can change this to a responsive screen or choose different devices so i'm using the responsive screen now and i can drag it to make it narrower or wider and you saw that change and there we went past our 576 we're now at 602 pixels wide and we can see the change likewise we can look at devices like i was talking about before so i'll choose iphone five slash se one of the smaller devices now not every device has this available but some do you can go to the three dots here in our new responsive menu bar that popped up and here we can say show device frame and now i have a frame that looks like a phone around my page and now we can once again change that i want to make it so i can see the whole phone so there we go and now we see how it looks on the phone you can even change to the horizontal display as you would turn your phone or back to the normal display here and we can do that for several different phones i'll choose the iphone 6 7 and 8 for example or we can just go back to responsive and drag the page around which is what we'll do now because now up until 576 and we can even type in here i can say 576 we're going to switch over so if i said 575 yep we're back to the original background color so we can check our breakpoints right there also there are break points here that are suggested by chrome and you can click on these to change your width as well and see how it displays and these are a little bit different than what we reviewed in our notes markdown file as well so you might check those out okay let's drag this back over to the right and then let's take visual studio code and fill up the page let's put in some more break points and then we'll come back and check all of those out what i'm going to do now is highlight all of this code then press shift alt and the down arrow to copy it down and now let's make our next break point and we'll label this one medium and we're not going to change the nav anymore it is gone for now so we'll just leave it gone so all we really want to do is change the color here for our next break point and of course the break point value itself so here i'll switch this to gold i could have changed those both at the same time i'll try to remember to do that next time so min width instead of 576 this is our medium let's set it to 768. we want the pixels behind that to indicate that after that let's copy this down again so shift alt and the down arrow and now this would be our large break point we'll relabel that i'll highlight gold and press control d to select the other gold i'm going to change this to fire brick and so that will give us a nice color change as well we'll set this to 992 pixels much like the bootstrap framework does now let's select our large shift alt and the down arrow i'll give another line break there and then this will be our xl setting and for that let's go ahead and switch to another color that will be noticeable rebecca purple i didn't select that fire brick i'll do ctrl z to go back to firebrick highlight the first one ctrl d to select the second one and now rebecca purple is what we want save that and let's do one more but this will be different so i'm going to copy this down but we'll make some changes just to give an example of how you could do something differently and look for a different type of breakpoint as well so this is still at media screen but let's go ahead and label this here we go i can type there we go mobile and i want that all caps mobile device landscape so now let's combine some things here instead of min width let's say lowercase max height and we'll set the max height to 425 pixels and after that let's do another and now let's say min aspect ratio you might have thought i would have said orientation but i want to actually be a little more specific here and say the min aspect ratio of seven to four so it's noticeably taller than it is wide and let's change our rebecca purple to dodger blue and save that as well now inside of this we'll also do a couple of other changes so let's say h1 and h2 that we have for labels we'll make the font size just a little smaller to 1.5 rim and then let's also set that nav to display none and we need to do that again because we didn't hit our other min width when we hit our max height here so that's a little different but we'd just be looking at a different size so we need to go ahead and switch that to display none or i believe it would show once again so now that we've made those changes let's drag visual studio code over and see if they all take place in our page so we'll drag chrome back over we'll start down here at the smallest and there we have our original color we get a little wider we've got green a little wider yet we have gold a little wider yet we have rebecca purple it seems like maybe we skipped over the fire bricks so let's see what happened there we'll bring this back over and look at our fire brick and maybe all it takes is one typo to get something wrong maybe i did something wrong and i sure did i did not change the min width for the rebecca purple for the xl so we had 992 here and 992 here again so this essentially was overriding this so we wanted to change this 992 here and set it to 1200 pixels and now we should see all of the changes we expected and here's purple there is our fire brick color gold green and back to normal there so we might see those changes in different devices as well so let's go ahead and check that we'll see our iphone and we can choose maybe a larger setting here that's too large let's go with 75 percent there's the iphone let's go with the ipad and yes it's gold let's go with the ipad pro yes that's the fire brick size and you can see a device frame is not available for it and then we could even switch up to say well let's go back to a small phone first there is that iphone 5se now let's go ahead and change the orientation and now we get our dodger blue color as we switched because the aspect ratio and the max height were both met it meant most both of those conditions and now you can see how those media queries apply and we can change the page based on what the device is the viewing orientation and of course you're not going to have someone that typically changes their screen size as they're working with your application so you don't really need to worry about these smooth transitions in between changes and that's because nobody will be changing their device or really their screen size as they use the application so you just need to make sure it appears as you want it to at each separate break point today we'll use css to apply responsive web design as we create profile cards for the staff of a small company it's time for another css mini project and we'll be applying many of the concepts we've learned from previous lessons in the css for beginners tutorial series let's look at our finished project first this is our end goal i've already got dev tools open i'm already showing the toolbar at the top and you can click the little mobile icon at the top of chrome dev tools to toggle that device toolbar and if you click the three dots you can also show or hide the device frame if it's available and it is available for the iphone five slash se which is currently probably the smallest mobile device we would design for as of the making of this tutorial at least and it's got 320 pixels with 568 high and you can see the project right here and we can scroll through the cards for each employee now if we choose this drop menu and choose responsive there you can see the page definitely changes we can see all employees at once and we see the new width and height at the top and we can type in here too and i'm going to actually highlight the width and change it to 1920 by 1080 and we can see what our page would look like on a full 16 by 9 or 1920 by 1080 widescreen so this is our end goal i can grab the side now and squeeze the page back and we can see how it adapts to each width all the way back to our 320 pixels of course we've got more height than we did in the iphone right now but we can see how it adapts to all of these different sizes and changes as i drag it all the way back to above 1920 now so now let's look at the code our starter code today is the finished code from the last lesson that we had on media queries but don't worry if you don't have that you can download it in the description or i won't move so fast that you can't follow along and add the other styles i will cover all of the styles and as we see in the file tree over here we've got a notes.md in the last lesson we discussed breakpoints and i included those that's a markdown file we have our index.html but i've also added an image folder img and we see three different profile pictures here so those are also available for download with the source code from github and here's our css once again let's make our changes to the html first because we need to add more here so let's switch the title first from css media queries to css mini dash project and then put a colon and we'll put let's do profile cards okay now that we've changed our title we can change more of the content so instead of saying header here we're going to say our staff and then inside of the nav we're going to put some other details instead of that h2 so let's just put links here and we'll have an a with an href attribute and we automatically get that in there now this is going to be an anchor tag we can put the hashtag and i'll put profile1 and we'll match that to an id later and here let's just put the first employee's name so we'll say joe we're making a nav menu here the next one will do the same and actually i'll just go to this line and press shift alt and the down arrow to copy down twice and that will save some time for sure okay after i get rid of that line i'm going to switch the profile to two and the next one to three and then after joe i believe we have matt and then we have jane so now we have our nav menu and our title for our staff page let's move on to the main element and we can remove this h2 as well and now we're going to add an article and this article element will have an id equal to profile of one and now inside the article we can put several things but first let's also add a class and set that equal to card there we go now inside the article let's add a figure and if you completed my html for beginners course you know we'll probably put an image inside the figure as well as a figure caption so let's start with the image and now we have a source attribute and an alt attribute so for the source we're going to look in the image folder then put a slash and now vs code gives us the options of what we have in here and we'll pick the profile picture now we'll also put the employee's name under the alt attribute so there's joe coder but then if you also remember our discussion in the images lesson we need to put a width and a height and this prevents a code layout shift or i should say a page layout shift or i believe the proper term is content layout shift but as long as you get the concept that it already reserves that space in the browser essentially and i've got links to that in the description with all of the other resource links okay so we have a width equal 500 and we're also going to have a height equal to 500 there we go we need that on all images now let's go ahead and add the fig caption and this big caption is once again just going to be the employee's name so now we have joe coder in the fig caption and then underneath our figure is where we want to put actually not underneath just the figure this fig caption goes in that's what i was doing wrong the fig caption goes in the figure there we go now underneath the figure we're going to have a paragraph but inside the paragraph we want to use another element we haven't talked about before we talked about how to add quotes with html entities and unicode but we didn't talk about how to add quotes just with the quote element itself so i'd like to add that to this series and hopefully your knowledge that you can also add quote symbols with the quote element so here we put i code stuff this is basically joe's statement about what he does very simplified but there we go for joe okay now that we've got the profile card html here i'm going to highlight this and i'm going to copy it down twice with shift alt and the down arrow so now we just need to make some changes for each one of these so now it will be profile two we've changed both of those the images are all the same but the next one is going to be for matte designer so let's highlight everywhere we had joe coder here so one and then control d to select the next one we can put matte designer and imagine instead of i code stuff he's going to say i design stuff and then the final employee profile number three and really i can highlight one and press ctrl d to highlight it again and switch that to a three instead of joe coder so i highlight that ctrl d again this is going to be jane devrell for short for developer relations of course but we just put it as somebody's last name for what they do and after that here we want to put i teach stuff again all over simplifications of every job but we just have a small example now i have prettier enabled also and notice it just wrapped all of these attributes down to different lines if you don't like that you don't have to use prettier or you can go to your vs code extensions and you can search for prettier and then you can click on prettier and install that and it does some auto formatting and i happen to have it enabled as i'm making this video so that when i saved that is why you saw that auto formatting it put each one of these attributes on a separate line which is fine too it still works out the same okay we're finished with our main content let's just move down to the footer where we're not going to say footer here and we're not going to have an h2 so let's just put a paragraph and inside this paragraph now we'll use an html entity we'll put and copy it's an ampersand the word copy and then a semicolon and that's the copyright symbol and then we'll just say acme co if you're a fan of the old looney tunes this is the company that made all of the stuff for the coyote and now we've completed our html so let's shift over to the css and then i'm going to press ctrl b to hide the file tree and then i'm going to drag vs code over to the left half of the page and we'll look at our page here on the right now we can see we've added some content but it is not conforming at all to the size of screen we have we need to make some changes in the css to apply this correctly to our page i'm going to press alt z to wrap the code so we can see it all on the window so if the line is too long it wraps down to the next line such as this import from google fonts where we have the nanito font here we have our basic reset with a margin of zero padding of zero and box sizing border box and now i'm going to add to this reset something that we cover covered in the image lesson was adding an image reset where we need it to say display block and that removes the little space that is by default under images because they are inline elements but then instead of width 100 which you would often see here i just want to say max width of 100 and that means it will not overflow its container and at the same time we need to add a height of auto now you'll see many say do not add a height to images however we're doing this because we added a height in the html to prevent that content layout shift and that is the new approach so i recommend following that at this point and if you don't add the height it will stick with the height assigned in the html which would be the original 500 pixels so this height auto then will adjust according to the width as well so if we save that we have completed our basic reset now so we have our asterisk which selects all elements and then our image selection here for the full reset we're applying and we can already see a change our images are actually now fitting into the design even though the design isn't the way we want things yet it does look a little better than it did okay we'll scroll for some more room and i'm going to select this general styles comment and i want to make another comment in between and instead of general styles here i'm going to keep it all caps and i'll type utility classes and after that i'm going to add a utility class and it's going to be called no wrap and then inside the no wrap class we'll choose the white space property it's white dash space and there we'll say no wrap i'm going to use this because jane has a last name that has a space in it and we don't want her name to break in half if the text wraps so let's go back to the html and hear jane's name in the fig caption and we'll put a span element with a class of no wrap and now we still need to scroll over or i could wrap the code but since we're only doing this one thing i'll just scroll i'm going to collect the closing span that was automatically added and put it after the end of her last name we'll save that you won't really notice a change but now if the text wraps it will not break her last name into okay back to the style css now we're going to move on to the general styles section and here we have the font shorthand which adds a font size and a font family all in one then we have a min height of 100 viewport units we'll keep all of that and get rid of this blank line we have a fallback background color and then we have a background image set with a radial gradient which starts in the center at white smoke and works its way out to this darker color and then we have display flex and flex direction column and that is what stacks our header on top of the main on top of the footer and keeps it in that order okay after that we have a section where we applied grid to the header nav main and footer and we're just going to delete that so if you are following along with the starter code go ahead and remove that if you're following along without it well you don't need to do anything there now we have the header and the footer position sticky because we have the header at the top the footer at the bottom and we want them to stay there especially if the page scrolls and then a background color of a darker color and then white smoke for the font color but what else we would like to add here is a text dash align put center so we'll go ahead and add that so we can center this text okay just below we have the header with a top of zero and that keeps the header at the top notice we also have a footer down here with the bottom of zero in between we have the nav and the main so for the nav we're going to keep the background color of white we can remove this color of black for the font color the padding at one half rim that's fine and we still want the two pixel border on the bottom but now let's add some new styles here let's put the font dash weight and make that bolder there we go bolder and then i'm going to put display flex here and then we'll say justify content and we'll space dash evenly to spread out the employee names in this nav menu and now you can see they are in bold and they are spaced out evenly here in our nav menu i'm going to scroll up just a little bit more and after the nav and before the main we're going to style these links so let's add nav and then a for the anchor element and also nav and then a with the visited pseudo class for after a link has been visited and let's just shift that color back to the black color that we had before so when we save we should see those change to black now now after the nav anchor and the anchor visited we also want to style nav anchor with the hover and nav anchor with a focus and you might even want to add an active in there or you might like to see it flash a different color which is another pseudo class you could do i'm not doing that one right now but let's put a color here and i'll go with hsla which you can also of course pick by navigating through the visual studio code color picker but i've already got this picked out it's zero zero percent here 20 in the last one that's easy to remember and then 0.6 or essentially 60 transparency and then i'll put the semicolon there at the end and save and we're not going to see this in mobile mode because we're not really going to hover but as we get to a wider design if we were to show that we could notice noticeably see that change as we hovered over now if they had focus here we could possibly see that so let me tab through there we see the lighter color as we tab to each of the names so we can test that in mobile view by tabbing through and setting that focus okay we're ready to style the main element now so i will scroll up for that we want to keep that flex grow so it does fill out the page no matter what but after flex grow we can add a few more things here so let's put display of flex once again and then we'll have a flex dash direction and we'll set that to column and then we're going to align dash items and we'll set that to center now let's put a gap which is shorthand essentially for column and row gap this is going to be 1.5 rim and a padding of one rim and if we save we should see some changes there we do a little bit so the images aren't to the full edge of the screen and it moved a few things around for us but we still have more changes to apply directly to the cards themselves i'm going to copy the comment we have here for the small media query and i'm going to create a section for the profile card class so here i can just switch this from small to profile card and underneath that we will start to style the card class so i'll scroll this up as we continue to grow the styles and here it would be a card class now inside this class one thing i'm going to put is scroll dash margin dash top and you would have to experiment with this to get the right size i've played around with a little bit and i believe eight rim is the right size what this does is when we scroll to joe or matt or jane when that is scrolled then it pushes down from the top so it doesn't scroll underneath the header so you want to have a little margin on the top from the scroll and this property will do that after that let's set a width and we're going to use the min function now the min function says hey at a minimum use this width and we'll set it to 100 percent so it can grow to 100 width of the container but it also takes a max so it says do not grow any larger than and we'll put 350 pixels here so we'll fill out whatever the container is up to 350 pixels and we can specify all of that in one line for the width if we use the min function after that let's go ahead and put another background color for this area of the page which will be the cards i'm going to go with cbd 5e1 that i've previously picked up more of a gray or a lighter gray and then we can go ahead and put a border and i'll go 2 pixels solid black and then let's add a border dash radius and we'll go 15 pixels here let's save that much and see the change there's some definite change there now let's add a padding of one rim all the way around and that changed that up a little bit so now we have some space in there once again now let's add a display of flex for the card itself the flex direction is going to be column once again and then we'll also say align items there it is and we'll choose center and save now something you may notice right away is the employee name didn't center that's because it's inside the figure so this paragraph is outside and it became a flex item however the fig caption did not become a flex item because it's inside the figure which is the flex item so we'll still need to make a change for that so underneath the card now we can select the card class and the figure element within we'll also set it to flex and then we'll set the flex flow and that will be columns so that's column direction and then it's also the flex wrap property and we'll set it to no wrap and if we save we don't really see a change at this point but it will be good to have that there okay then let's set the card image element itself and now we can say border and let's put a thick border on that five pixels double and a flat black with the 333 hexadecimal code and then a border dash radius of 50 because it's a square so we can turn it into a circle and now finally before we move on to media queries or different sizes let's add the card fig caption styles and for the fig caption we're going to say font dash weight input bolder put a font dash size of two rim a margin of one rim and now we need to text align center for that fig caption and there we have joe's name in bold and it's centered and really we're finished with our smallest screen design before we get to our first media query so we've applied all of the main general styles and then the specific card class styles and now we have our design here there's one more thing i would like to add though because right now if i click on joe of course he's right there if i click on jane it just jumps to her automatically and if you remember i believe it was our flexbox lesson we allowed that to scroll and just have a nice little feature and we need to add that actually under general styles but it will be under the html element and there we should put scroll behavior there it is and we'll put smooth then we can just leave that all on one line but i would like to put a space between the html and the body styles oh and then of course using prettier it auto format it for me so now with that scroll behavior of smooth and if i click on joe it just scrolls to joe and we've got that scroll margin top set so he didn't stop underneath the header and then it scrolls to matt and it scrolls to jane all like it should now we're ready to go to our first media query which is at 576 pixels for the small media query that we have here let's go ahead and delete the styles we were using before in the previous lesson that just displayed the changes for us and let's apply what we're actually going to change so we'll select the main element and here we're going to change the justify content and it's going to be center and before if we look at the main element and what we had before this will overwrite that property and we didn't have justify content here before so that's okay it will be set now when we get to this size after justify content we're going to set the flex flow and it would be row and wrap so now we do want them to wrap if they will take up more than the width that they have we'll have two rows of profile and finally let's switch the padding to one rim and then after the main element we're going to adjust something about the card class as well and this will be the width and the min will still set at 100 percent but the max will now let go up to 400 pixels and then let's rearrange the order so it'll be easier to see our break point so here we'll take the card and the last child which would be jane and we'll make her first by setting the order to minus one so now let's grab chrome i'll make it full screen and we'll switch over to responsive and if we do that we'll drag this down to where we're at 576 right now we're still not at that break point so this was our mobile phone that we had and now we just passed 576 and you can see jane's at the top so it just got a little wider it doesn't change much but it changes changes a little bit we can make the cards a little bit bigger just because of where they're at and then if we get bigger before the next break point well we hit it there so it didn't wrap yet but changing the width might allow them to wrap because we did switch that to allow wrap at this size okay i'll bring chrome back to the right and now this switch because our width once again switched but we'll go ahead and tackle the rest of the media queries and then we'll see the changes at each breakpoint as we go so now for medium let's go ahead and remove these styles as well and here we'll put the nav and the first thing we'll do is set it to display of none at this point because we're at ipad size and they should all fit on the screen now without scrolling the next would be a card once again we'll put a width and as you might guess we'll use the min function we'll say 100 again but now we'll make them smaller so we definitely fit a couple side by side and they all fit on the page so after that let's select the card figure element and there we'll set flex flow and we'll say column dash reverse so we'll notice a change there as well in the order that would appear and then we'll set the card fig caption and now let's set the margin to very very small here 0.1 em and then just zero and maybe we'll want to keep that maybe we want we can play around with that then card and the paragraph for the card i'll leave that a lowercase and i'll set that to margin dash top one rim and save let's see if we can make this any larger here so we're at 594 we made our first break point but we're not making it to the next one unless we make vs code a little bit bigger again so we'll drag this over and now as we get a little larger there we go now let's switch this to the ipad size itself and you can see they all fit on the page for the ipad and if we get smaller than that we're somewhere in between maybe a surface duo there we're at 540 so we didn't hit the first break point yet so it's just kind of a weird spot in between where we are there but it does work it's just a little bit larger view of the mobile view as we look at it that way so now we've covered our first two break points as well as our starting point let's go ahead and add the third at the large stop and that's 992 pixels let's delete what we had here for the body from the last tutorial and once again select the card class we'll select the width again and we'll use the min function we'll say 100 and then 400 pixels here and if you remember we made it smaller so it would all fit on an ipad we were at 325 pixels so even though previously before that we were at 400 pixels we need to switch it back because it hits that break point in between okay after the card selection there let's switch the order around again so we once again know this has changed so we'll say card and now we'll say nth child and we'll select the second child element and we'll give that an order of minus one and it should switch the order for us again those are the only changes we're going to make there so let's go on to the xl size as well and we'll select what we have there and delete it from the previous tutorial we'll select the card class now we'll set width again use the min function but now i'm going to use a function inside of the min function and that is the calc function calc function is great because it lets us mix other units together or different units together i should say so i'm going to set the width of each card to 33 percent minus one rim and then we'll have a max of 500 pixels because that is the size the images are and we don't want the images to get any larger than their original size or they'll start to get blurry so we'll leave that as the max but this will allow them to grow dynamically with a percentage value so let's stop there and save our file i'll once again take this to the larger screen now something else we can do is click the three dots here and say show media queries so now we can see our media queries here so there's 576 768 we're only seeing the width we're not seeing a good height 992 and finally 1200 so now let's switch this to some sizes we might normally see such as 1920 by 1080 and then i'll just make this smaller and smaller as we go notice we have got joe's name and jane's name and matt's name all on top of their cards now because of that column reverse that we did so that was a nice change to let us know we have made something different now this is using the percentage size that we used with that calc function so notice how they just gradually get smaller until we're at the next break point which is 1200 there we go now this is at 50 percent so it looks a little tiny here but overall we're squeezing it down because of these two but overall we can see what is happening and so now they're stacked on top of each other with two rows and now they're stacked on top of each other again and we're kind of in that larger ipad size getting a little smaller now we're at that larger mobile size and now we're down to finally underneath 576 which becomes definitely a mobile device so we really have identified several devices or sizes along the way that we could target and you can specifically target more than that one we haven't talked about yet though is taking something like an iphone i'll go ahead and remove these media queries now i'll hide them and turning it horizontal right now this isn't going to work so let's make some changes for this as well i'll leave the phone like this and drag vs code back and we can make some changes for our final break point which is the mobile device landscape scrolling all the way up here let's look at this break point you can see we're selecting a max height of 425 pixels and a minimum aspect ratio of 7 to 4 so the width would be 7 units and the height would be 4 in comparison so let's select everything we have here now except this display none for the nav we want to keep that and let's go ahead and put an h1 here with a font dash size 1.5 rim and we can leave that all on one line but when we save it will get formatted if we're using prettier like i am that prettier code extension or vs code extension now i'll go ahead and put some styles on the main element we'll go with flex flow which will set the direction to row and then no wrap so we should have only one row then justify content we'll set this to space evenly and after that let's align items and let's set this to stretch to give them all the same height in case the content would make them different heights and then we can go ahead and style the card just a little bit so under here i'll type the card class and i'm going to put a width use the min function and now instead of 100 width right away i'll use that calc function again i'll say 33 this time minus 0.25 rim instead of one rim and we'll put the max for any card at 200 pixels okay then we can set something more specific on the card let's do the fig caption looks like i need to scroll up for some room here so i'll do that as well and for the fig caption let's put the font size 1.25 round and then let's go ahead and select the paragraph below and we could put these on the same line actually so let's just go ahead and put a comma here and put dot card paragraph and we're going to go ahead and set that same style on both and save okay now that we've made those changes let's drag this back over and then we'll turn our phone horizontally and we fit all of the cards right in here together which is nice let's see if we could do that in a different size as well maybe the iphone plus yes it works as well too it may not work as well in the smallest screen i have a feeling these will be just a little taller than we would want probably let's see yeah they're a little taller but it's not too bad you might expect to have to scroll when you have one of the smaller phones so that wouldn't be really a breaking thing to me but you could work with that if you really wanted to target this specific device but overall for most phones i believe this would work well in the horizontal mode so there's some nice changes you can go back through and tweak a few things one thing i want to check is that very very small margin that we set and let me find what size that was on again because i wondered if we even needed that or if i was just playing around with that back when i was working with the code that is such a small margin on the top and bottom and this is at the ipad size so let's see what it looks like if i comment this out i'll select it all press shift alt and the letter a comments out that code bring this over so i can switch to an ipad and there's the ipad size and let's make it a little bit bigger so we can see everything there we go yeah it looks good without it so i would probably remove that as well and i'll drag this back over and then we'll just take this out of the code and the rest i think i'll leave as is and of course you can play around with this i do not do this perfectly myself everything is trial and error basically as you go so mess around with this code don't accept it just the way it is see what you can change what you like better one way or the other let's move on to css pseudo selectors pseudo selectors include both pseudo classes and pseudo elements so the obvious question is what is the difference between a pseudo class and a pseudo element well a pseudo class is a selector that selects elements that are in a specific state so if we look at our starter code and this is the code that wrapped up the mini project in the last lesson so we're just starting with that and if we scroll down to the links we can see some of these different states we're styling for the focus state the hover state the visited state and then just a basic link which we actually could have added on the pseudo class link here as well if we wanted to because that is the unvisited link so there's different states there there's even an active one that we could have styled and for all of those those are different specific states of the element so a pseudo class now a pseudo element is similar but they act like you've added a new html element into your document and also pseudo elements use two colons instead of the one we see here with pseudo classes so we'll look at those as well but we're going to look at pseudo classes first and again this starter code is what we have from the previous tutorial the mini project that created this small staff page of three employees for the acme co that we see here and created profile cards for each one so that link will be available in the description if you want to download the starter source code we're not really going to change the project for the better today i'm just going to use it for some examples that you may not want to keep in the project at all but i'm going to show you how pseudo classes and pseudo elements work now we're already familiar with the different pseudo classes here that we've applied to links and we've looked at a couple of other pseudo classes along the way during this css for beginners tutorial series one other one that we could add here is active so let's go ahead and put a nav and an anchor and then we'll put active and let's just style this so we can really tell the difference so we'll say red so it'll just really stand out this should be when we hold down on the button on the link and then it turns red i have my mouse button for the click held down right now when i let go of course it goes ahead and completes and scrolls to the id for the employee that we expect it to but that is the active state now let's refactor a couple of these for the better with things we can learn about new pseudo classes today so notice here we have a descendant selector and that means we have a nav and then we're selecting any anchor element inside the nav element and then we're applying the state but then when we choose focus besides hover we have to say nav a again well we can stop some of that by using the is pseudo class so if i put is here and then put a parenthesis after it then i can eliminate repeating this nav element here and then just once again say anchor focus so we're just putting the one nav but now we're saying inside of that if it is an anchor with hover or anchor with focus then style accordingly so this should give us the same results and as i mouse over here on our page we see that it still works and we've made our code a little drier and dry is an acronym for do not repeat so we managed to write just a little less code and get the same result by using the is pseudo selector now sometimes we can discover a pseudo selector and again these are pseudo classes i say pseudo selector synonymously but we are making a selection but make no mistake we are using pseudo classes right now sometimes we can discover a pseudo class that will also save us some time and that is the case here besides link and visited where we're styling both let me remove all of this and then i can just put any dash link and the any link pseudo class selects both the link and the visited pseudo class so now when i save we should once again have the same results now this is unvisited or if we click jane now we visited jane and she still has the styling that we expect that we had previously in the project but we have once again made our code just a little drier by learning more about pseudo classes now just for an example i'm going to scroll up where we have our header and footer right here and we're choosing both of those in a list of elements essentially to apply the same styles now i will not make this code drier by applying this but i just want to show the example we could use is here and then list these elements inside and there's really no reason to do it other than this example right now but i do want to show the difference so i'm going to go ahead and save right now this will be the same as what we had before but we've just added this extra code but notice when i mouse over here in visual studio code we get the selector specificity and it is displayed it's 0 0 1 so it's not high specificity we could override it just in this header area here we can overwrite what's on the header or we have a footer area down here just a little bit lower and we could put something there and it would overwrite what we have in here but if we put something else in here like a class and i'll temporarily do this it won't make our project look good but now we have put a class inside the is as well and notice our specificity selector is going to pop up and it's changed instead of 0 0 1 now it's a whole level higher it is 0 1 0 so it has higher specificity and now if i were to put a different color here in the header for example so i will go ahead and do that and i'll just give it red so we would definitely notice and save notice the text in our header is still the white smoke color it is not red and that's because this has a higher specificity even though it comes first and it's not down here in the cascade the higher specificity keeps these styles however if i remove this class and it goes back to the lower specificity now it turned red so that's something to note about using is it's going to adopt whatever has the highest specificity within its parentheses now one other thing we can do let me put card back is instead of using is there is another pseudo class that works almost identically and it's where it will accomplish the same thing except it does not have any specificity so notice when i mouse over it the specificity is 0 0 0 or basically a lack thereof it does not have any so you can overwrite whatever is inside the where pseudo class so that's also worth knowing so i just wanted to use this to demonstrate we're not really going to leave these here for your finished code but just remember those tips about the specificity when it comes to is and where pseudo classes now i'm going to scroll down to the card class so we have that right here is the profile card right underneath the card class i'm going to type card once again and then i'm going to give it a target pseudo class inside the target pseudo class i'm going to say border 2 pixels solid and give this rebecca purple and save now let's see what this does you can see jane has a purple border now two pixels solid purple all around her profile card she is the last profile card that we selected here so if i choose joe instead now he has the purple border because he was the target if i scroll back up jane no longer has that purple border so what we're saying with the target pseudo class is whoever is selected whoever is the target of our selection will have that purple border and now matt has that purple border so that could be a useful class if you really want to highlight whatever was selected and if you remember in our html how we're doing that is using the anchor tag but then it is a page link it's not going to a different page it just has the pound sign or the hashtag if you will for profile 1 or profile 2 or profile 3 that matches up with the ids of these cards which are in article elements so there is the id of profile 1 and then if we come down to the next article profile 2 and so on so these are just on page links with anchors and whoever is the target gets that outline now i'm going to scroll down just a little bit further under the card class once again and then the image element so after that let's add another card and then let's add an image and first let's go ahead and just put in alt now if you haven't seen this yet this means i'm selecting any image with the alt attribute so we can base our selectors on attributes inside this i'm going to once again add a border let's make this really big so 10 pixels solid red and if i save we should see that around all of our images because they do all have alt tags or alt attributes added to their image tag actually is how i should say that so what if we wanted to say just let us know which images we forgot to put an alt attribute on well we can do that with the not pseudo class so after image we'll say not and then wrap the attribute in parentheses so this would actually serve to help us check our page to make sure we've remembered to add alt attributes to each image so now none of the images have the red border because we did provide alt attributes for all of them so let's just go here temporarily to our html and let's remove the alt attribute from one of these images so here we have joe's alt attribute we'll just go ahead and delete and save and now if we look at our page joe has the red border because we forgot to put an alt attribute there for him now i'm going of course fix that with ctrl z put that back and save and that fixes our page but that could be very useful and you could use not the pseudo class not for other things as well remember it's going to select whatever does not have what you specify and now let's look at the nth child selector which we have used a little bit in previous tutorials so we'll say card and then no space we'll say nth dash child now this can be confusing and it's somewhat because of the way it's worded you would think we were looking for the child of the card class but that's not really true we're going to be selecting the cards themselves so if we say nth child and the second one we would be selecting the second profile card so now let's go ahead and change the background color so we can really see which card we've selected and i'll say papaya whip and we'll save and here's the thing to consider now we've got matt selected but he's the last profile card and we said we wanted the second but if you remember from the previous lesson we've used media queries to rearrange the order of our cards however if we look back at the html matt truly is the second card in our html so this nth child selector is going to be based on the actual original order within the html and maybe not what we see on the page if we have reordered the order that was in the html with media queries or even without media queries we could go ahead and reorder them if we wanted to but the nth child will not be based on that now we could put in other selectors here too so let's put in odd and save and now notice matt was the second child so the first and the third are odd and that would be jane and joe likewise we could put in even instead and it will probably select matt once again and not select jane and joe because matt is the second which is even and of course joe and jane first and third are odd so i think you get the idea for pseudo classes so now let's move on to some pseudo elements that we can add right underneath the card class and the fig caption element and this would be a descendant selector so we've got the card class and the descendants are any fig captions within the card class so now after that let's specify card and fig caption once again but now we'll use two colons and then let's say after and what we'll do after is create a pseudo element that will have content and then we can specify what content goes inside let's just put hello to start with and after that well i'll just leave it at that to begin with here i need to get rid of that extra quote there we go and save and now let's look at our page so now we've got jane devrell hello it says hello right at the end after joe's last name coder hello is immediately after so maybe we should put a space and we could highlight that and now we'll see the hello at the end of each last name a little easier but it was added to each one of the fig captions now we could notice something else about this too i can select all that text but i can't select the text that here that is our pseudo element content again it's not really an element it was just added in with this after pseudo element selector so now instead of hello i want to go ahead and remove that and i'm going to put in an emoji just some sparkles here and then i'll put display and block so this will be on its own line and save and now we've got an emoji following each name on each of our profile cards and likewise i could switch this to before and what it would normally be on the left side or before their first name but now because it's a block display it's above each name so i'm going to scroll for a little more room and let's add some more new content here for our fig caption as well actually for our paragraph now so let's say card and then the paragraph and we'll select the before sudo element and for content here we can type a specific value say open dash quote and now if i save this we will get a double quote added to the left as we see here it's actually probably a single quote that's added after our other single quote but we can also add a close quote so i'm just going to copy this down with shift alt and the down arrow and i'll switch this to an after and instead of open quote we'll have close quote and save and now they've turned into double quotes and they're wrapping around the single quotes that we already had but we've added quotes here without having that quote element that we were relying on here inside of our html notice inside of each paragraph we have the q element which is a quote that we were using for quotes so we could remove those because one handy thing here is we can style these however we want to so let's look at an example of that we could say font dash size i'll put it 3 em so that's going to rely on whatever the font size is of the paragraph element to get the em size and then let's say position absolute if you remember when we learned about positions we'll say top and we can make this a minus so minus 0.25 em and then left minus 0.5 en now something else to remember about position absolute it always needs its parent to have position relative so here we need to select the paragraph itself and give it position relative we can save that and notice our quote on the left got a lot larger so we were able to really style this quote separately from the rest of the paragraph now let's do something similar for the after quote so once again give it a font size of 3 em position absolute give it the same top as well so that would be minus 0.25 em but now we'll say right minus 0.5 em and save and now we have matching closing quotes on the right again we're adding these as pseudo elements so let's go back to our html quickly and remove those other quotes that we had so that would be the q element i'll highlight that press ctrl d twice to get the other two hit backspace and now i'll select the closing queue ctrl d twice to get the other two backspace and save so we remove those other quotes that we had and now we have our big quotes in place of those and we can see they've applied to each one of the profile cards with our pseudo elements just a couple of more pseudo elements to look at before we're finished so for the fig caption let's once again say card and then fig caption two colons and now let's say first dash letter and here inside of this we'll say font dash size once again go to three let's say rem here because we're applying it directly to that letter and we should get a larger letter to start out with but we don't and why don't we that's because this got larger itself let me go ahead and comment that out and save and now notice our emoji is back to a smaller size so this first letter actually applied to the emoji so let me uncomment that and save and you'll see the emoji get larger again so what happens if we put this after instead of before now the first letter of each name got larger so that's something to consider too if you use the first letter pseudo element it's going to apply to the before pseudo element if the before pseudo element exists now instead of just the first letter you could also choose first line if i remember correctly and yes we just made the whole name larger by choosing the first line let's move on to css variables css variables are very very useful imagine a large project if you will and we have a hexadecimal color code as you see here for our body element and i've had to use this code twice just inside of this body element but imagine in a large project where we have had to apply this color code many times throughout the project and then our boss says he wants to change that color in the project we would need to go through and find every instance of this hexadecimal code and change it but when we use css variables we would only need to change this hexadecimal code in one place and that's what makes them so useful let's see how this is accomplished you can see we just have a basic page here with a header nav main area and a footer and we're going to refactor some of this using css variables so let's start out by putting in a comment for our variables so i'm just going to copy this reset comment and right underneath it i'll paste it and change this text to variables and now we're going to put our variables inside of a pseudo class that you may not have seen yet and that is the root pseudo class everything inherits from that that is referencing the document root so the html tag would even inherit from this root pseudo class so we put it at the top and now we can define variables inside that will apply everywhere in the project we're going to start out with color because if you do not use variables for anything else in css it makes much sense to use them for colors now we start out by naming a variable and they all start with two hyphens or two dashes if you will now you can name them in upper or lower case i prefer uppercase i am a developer and overall we usually name static values in javascript and other programming languages with uppercase they're referred to as constants so i kind of like to see them in uppercase and that tells me as a developer the definition for this variable is probably near the top of the file as a constant and so that's how i remember it you do not have to do it that way but i'm going to use all uppercase today for these variable names so for our background color let's just pull what we have inside of our project already we have this hexadecimal code i will copy and then i'll put in the hashtag and put in the code and now we have created a variable for the background color now to apply this in the rest of our css instead of the code here we're going to use a small function that's available in css called var and then parentheses and then we put in our variable name and it's as simple as that now we will still have that background color and we can copy this and we can also use it here or anywhere else in the page that we're using that color code and once we save i'm going to go ahead and go live i did not have live server serving this page so we should see it again and now it looks the same because we applied this variable you will see if i remove this ctrl x just to cut it out temporarily and i guess i didn't change our background color here i should remove because that is the fallback so let me switch this to black just quickly and now i'll go ahead and remove this and apply and we can see it's black and that's all i wanted to show you was that the variable is applying and so we're using the background color actually as a fallback to this background image statement that's using a radial gradient but we want both there so i'm going to replace black once again with our variable and save and that's how we're applying now the background color saved in this variable okay now let's do the next one so i'm going to name this alt once again capitals here alt bg color and now let's find our alt bg color where we had a little darker color down here and here it is our background color for the header and the footer so i can go ahead and control x to just cut that out notice it doesn't take the hashtag so we'll have to put that back but now i'll put the hashtag the color code and now we have our alt background color so we can just copy this variable and we can scroll down to where that was for the header and the footer i believe there it is and we'll put in of course it needs to be in the var function and put parentheses around it and save and we still have that same background color now notice we're using white smoke in more than one place and then we used white down here but white smoke would also be sufficient so if we wanted to go ahead and replace this with white smoke it will still look about the same and it does so now we should create a variable for the white smoke as well but we're using it in two different spots we're also using it as a radial so if we want to remember that it's okay to go ahead and create two variables that have the same value and that's what i'm going to do right now so i'll have a radial color so anywhere in my project that i will use a radial gradient i might want to use this white smoke but then i'm also just going to have a light color for parts of the page and i'll use white smoke there too but it would be weird if i put radial color in another part of the page i might be able to get away with putting light color in as part of that radial gradient but i just wanted to show this example that you could use two variables and they could have the same value and it's okay to do that so let's go ahead and copy this radial color variable first and actually before copying that i want to show you something else about using a var function and how we can type this out and how visual visual studio code will help you so now we have our var with the parentheses if i start to type the two hyphens notice vs code gives me a list of the variables that we've created already so that's very handy and it even gives you their values over here to the right i'm just going to choose radial color and use it in my radial gradient and once again nothing is changing so if we're making the conversions right and refactoring our page we shouldn't see changes it should continue to remain as it is over here now let's go ahead and replace any area that has white smoke and i can press ctrl f and just search for white smoke and it says there's three or four three of 4 so we have 4 actual instances so now i'm going to say var parentheses dash dash and choose light color and that will also be our white smoke value so now i can select white smoke press ctrl d to select the other instances but notice two of the instances are the value that we have in our variables so we don't want to replace those so let's just find the one that we do want to replace which is the background for the nav and now paste that in and save our project continues to look good and now you can see we're also using the color black here for text in the nav for the bottom border for the nav and maybe in other places in the project as well so let's go ahead and create one more variable and that will just be our dark color for the our color theme and that's what i'll name it and here we'll just put in the hexadecimal code for black and now that we have that we can find other places that are using that code and replace it so we'll once again do control f i'll paste in that value and it says two of three so these are the only two actually the third one would be our variable above so we need that then type far now dash dash and it is our dark color now i'll copy this and simply replace the code down here with that and we have replaced it as well now notice for the border we still have two pixels solid and then we're just providing the var for the color value we can also use css variables for far more than just colors so let's scroll back up to the top and look in our body element and we see a font property here first and this is a shorthand because we're supplying not only the font size but we're also supplying the font family so let's define a couple of variables and we can use both in the same definition here so as we come up to the top again inside of our root i'm going to put slash and here i'm going to put font for our comment and now for the first variable i'll do two dashes and ff for font family and then we can just copy the value we have here which is nunito with the fallback sans serif so i copy that i'll bring it up to our variable and we've added that now i'll do two more dashes and in fs or capital fs for font size and here i'll put 1.5 rim and then in case we want a larger font size somewhere i'm going to put in an fs dash xl for an extra large font that we may use somewhere later and i can put three rim for it and save and now we've defined our font family font size and font size extra large so let's put the font family and font size to work right away and we can do that here so we'll put a var variable or a var function actually and now we can pull our variable from our list and this is font size then we'll highlight the font family put another var two dashes and we'll highlight the font family variable there and save and it should look the same now as you may be gathering we're not limited as to what we can put in these variables so it's not limited to the font or the color we can also use it for other things let's quickly scroll down and take a look at our nav area here you can see we have the light color the dark color and the dark color again used as a border but then we have a padding here of 0.5 rim and we could possibly also add a property or two here so let's start with the padding and let's define that above as a general style because we could give this padding to other parts of the page as well in a project so i'll just put general here and then we'll do two dashes new padding and we'll put in our 0.5 ram lowercase rim there we go save that quickly scroll down to the nav and apply that as well so instead of the 0.5 here we'll be using a var parentheses two dashes choose padding from the list that's good now what if we wanted to apply a shadow so let's look at how to apply a shadow we'll use a box shadow property and here we're looking at an x offset for the first value which i'll put in a 0 a y offset for the second value i'm going to put in 6 pixels for that and then there is a blur value which i'll put in 5 pixels and then there is a spread value and i'm going to put in minus 5 pixels here and what this does is essentially creates a shadow right underneath you could provide an x and y and have the shadow off to the right and underneath or coming from another direction if you're picturing the sun overhead essentially that's what this shadow is going to create because it should come straight down okay after supplying that then we also need to have a color and we already have a dark color so let's put in the var and dash dash dark dash color and save and if we look at our nav now it has a nice little shadow right underneath the bottom line i could try to make this bigger so it stands out let me put it like 15 pixels and there we see the big shadow underneath but that's not what we want we want just a subtle shadow and we can save that but what if we wanted to use this shadow in other parts of the project also so maybe we should just highlight that or we could highlight all of this and that's what i'm going to do and i'll copy that and then bring it up here under our general styles that we have for our variables not the general styles underneath and here i'll put shadows because it would look kind of strange to have the shadows coming from different directions as if there was more than one sun looking at your project so having the shadows fall all in the same direction makes sense and then we can define shadows using another variable and that's okay we've defined this variable above it and it knows what it is and there we're putting it in and this definition is completely legitimate so we'll save that and then we'll scroll back down to our nav and just bring in our shadows variable for the whole thing so i'm going to delete that much and then change what we have here to our shadows variable and save and the shadow still applies now we could use this same concept for our borders as well so this is a border bottom but we've also just defined borders before and it uses the same structure so let's just take this value which is two pixels solid in the dark color copy that and create a borders variable above as well just underneath shadows and i want all caps again and then we'll put in that value and it uses the dark color variable we can save that and then come back down once again to the nav and where we have the borders we'll just put in that value and it will only apply to the border bottom as we define it here so here's our borders and save now let's move to the html file i'm going to close our find window as well it's time to add some extra content to our main area of the page so i'm going to scroll down to the main area highlight the h2 we have hit backspace to remove that and i want to put in 12 divs so i'm going to type div i want lower case here div and then dot and i'm going to name the class that applies to all 12 divs square so now we have div dot square and then with an emmet abbreviation i can type times 12 and press tab and instantly have 12 divs now that i have that i have no content inside the divs so i'm going to select the last one which is just the closing tag for the div and then we can go to i believe the edit menu and let's find no it might be the selection menu there it is and let's find select all occurrences and that is control shift and l control d selects the next occurrence but the combination of control shift and l will select all or you can just select it here from the selection menu so now we've selected all of those and i'm going to press the left arrow key to go to the beginning and i'm going to paste in an emoji i have of a laptop and i want that in the last well i guess the last 11 number 2 through 12. the very first one i'm going to put in a paragraph and just put the word hey in so we see something different and if we save that you can see we have hey and then 11 laptops after that i'm going to come down to let's say the eighth one right about here and i'm also going to put in square dash dash not important let's do highlight because we just might want to apply another class to one of these divs and you can see i have my code wrapping so this line wraps down to the next line but that is the change we are making to the html we'll make all other changes now back in the css i'm going to scroll up just a little bit if you'll notice the header nav main and footer all have these values and the display is grid i no longer want that for the main element so i'm going to remove the main element from that and save and you can see our content is now stacked on top of each other as divs or block elements one on top of each other on the far left so now let's move down to the main area and apply some more styles here right now main is just a flex item in the larger flex container that is the body element but we're going to make it a flex display as well or i should say display flex after that let's justify the content and space dash evenly and then after that we can align items and we'll align the items to the center if we save we have definitely seen our flex items inside the main now change let's change flex dash flow to row and then wrap if it needs to now let's add a gap and i'm going to use the min function here that will pick the smaller of whichever of these values so i'll say 4 viewport units or 15 pixels so whichever would be smaller it will use for the gap and remember gap is shorthand for row gap and column gap as well okay now let's put a padding value and i'll put it up here above and i'll just say padding and i want 10 pixels on the top and bottom but 0 on the left and right and this is different than the padding variable we applied you could have other parts of your project that have different padding but if you know there's a value you will reuse more than once then it's also a good time to declare a variable for that okay now that we've defined those things for the main we won't see a huge change here because we haven't defined our class for the square yet now what we have done previously is take the code that i had and extract those values into variables and i often do that when i'm designing something however now i know what variables i want to use so i'm just going to write them at the top for the square and then we will come down and define the class for the square but just know this is a little backwards typically i would probably define them first and then extract them like we previously did for these other variables okay for the square we have a couple of variables to create and the first one is going to be dash dash square we'll start all of them out with that and let's do the background color here i'm going to choose papaya whip and that's kind of a cool name for a color after that we will go with square once again and then dash not a space just a dash and size now we're going to have the same height and width when we create a square i'm going to use the max function now and this will pick the larger of these two values either 150 pixels or 20 viewport units so it will continue to grow as the page window gets bigger okay with our variables now defined i want to come down to the class and let me highlight an area here we had general styles i'll take this comment as well so we can comment before we begin the square and if there were other features for our app this is the area that i would put them and i might say features right here you also might comment each individual feature if you wanted to i'll just say features for now and we'll put in our square class so we'll start out with a background dash color here we can use our var two dashes and we want to pick square background color after that we're going to have a width and that would be a var two dashes and it looks like we have enough variables now we need to scroll which is okay we'll choose square size now i'm going to do shift alt and the down arrow because we want the same value for the height of the squares as well okay after the width and the height let's create a border we've already got a variable for that so we'll stick with the same border that we had previously defined and after that border we want a border dash radius here we have not defined anything so we'll just go with 15 pixels then let's use a display of grid and let's place that content in the center so this will center our content let's save what we have so far well that's a big difference so now we have our squares we have the content in each one centered and we have a different color background as well just a couple more properties now for the square so let's define a font dash size use our var again and now we defined an extra large font size let's use that and when we save our emojis get larger and so does the text okay let's apply a box shadow here too i need lowercase there we go box shadow and let's once again use a variable we created for shadows there it is and if we save we'll get a little shadow under each square also now if you remember inside of our html we also added this square highlight class so let's go ahead and create it also and underneath our features i'll type square dash dash highlight again in lowercase and now i want to show an example of when you might redefine a variable so we want to apply this square background color and imagine we had all of these squares and now we just want to overwrite one rather than having to go in and change different things about our definition for square so this will only apply to the class square highlight and we can change the value of this variable so let's choose background color once again and let's make this corn flower blue that is an interesting name as well when we save this only applies to the one square we added the square highlight class to but we have redefined this variable for that class now let's add a feature that css variables makes very easy to do and it's in high demand let's add a dark mode in addition to our light mode that we have here so to add a dark mode we're just going to define a separate color theme but we're going to do it inside of a media query so just underneath our styles we can put this media query towards the top so we'll say at media and then parentheses we have prefers dash color dash scheme and then we'll say dark and then inside of this media query let's put our pseudo class once again and now we can define our dark mode inside of this class so for the bg color and notice we're using the same variable names that we did here so we don't have to go and change those anywhere else in our code so we're just redefining these variables we'll put black for the background color then for the alt dash bg color let's put a flat black and then for the radial color we'll go ahead and put in kind of a gray let's see if we can lighten this up any i don't know if it will take the caps yep it will so let's try to lighten up the gray just a little bit but we still want a gray color something like that so we'll just go with that for now and we'll see how it looks after that let's put in the square background color and here let's go with more like a purple and then we'll try to lighten it up so after we get the purple let's come over here towards the light and something in that range and i'm just kind of guessing but we'll see what we get so when we save it switches to the dark mode and that's because i prefer the dark mode and have my system set that way and i'll show you how to do that now if you do not prefer the dark mode this won't go into effect so if i just put prefers light here just some other value it doesn't really matter i could put prefers dave for all that for the anything else that would change essentially it's going to ignore what's inside of here so prefers light and we're back to this because we prefer the dark mode and we're already using the opposite of that so again like i said i could put my name here it doesn't make a difference but if we put prefers dark then it does switch to this dark mode so now just to show you let's look inside i'm on windows let's look inside of the settings i right click on the desktop and choose personalize and then i go to colors and it says choose your color so if i actually did prefer light mode then the dark doesn't apply and you can see how it even changes my window here but i am going to set it back to dark and our web page responds so that is how you set up a custom dark mode with your css as well so you've got your app media prefers color scheme and dark and then just define your dark mode theme inside of here by overriding the other color variable values that you've already defined today we're going to look at css functions our starter code is much like the ending code for the last lesson however let's quickly look at the html and as you can see our page over here on the right i have added an h2 heading a paragraph and then a link inside of a section element that is inside of the main element and i have commented out the divs we previously had in the last lesson but we will come back to those so i wanted to leave those in our css remains the same from the last lesson and we can look at some functions we have already used in previous lessons if we just scroll down there are color functions and we can see here inside of our prefers color scheme this is one change i've already made because i wanted the light theme to show up but if you remember if we put dark here i need lowercase or prefer lowercase if i save i get dark mode because my system preferences are for dark mode but you can switch this to light and then this dark mode will not apply so let's look at this we've got rgb which is a function and if i were to click here inside the color for vs code and then we click the bar at the top as we've learned about colors we can see other values in hsl it has parentheses as well and a value or values inside that's also a function hwb is a function so these are color functions and that's what you see here we've also used image functions and if i scroll down just a little further and we get to the body or the main element we should have something yep there in the body we've got a radial gradient function and as we've learned in the past we can also use linear gradient but those are functions they have the term radial gradient or linear gradient and then parentheses and then something is passed inside some value and then as we see here we're also using a reference function which is var and we learned about var just in the previous lesson as we're using css variables so we use var and put the variable inside to get the value from that variable another reference function we learned in the past when we were working with images was url with parentheses and that's how we loaded images into a background image spot and there are many useful css functions so many that i can't cover them all but i will put a link in the description and the resources to the mdn page that does list all of the css functions today i want to cover some that i think you will use often or frequently and a few of those are math functions and we've used some of those too but i want to dive just a little bit deeper so let's scroll back up to where we have defined our font size right now it's currently 1.5 rim which one ram would be 16 pixels so 1.5 is currently 24 pixels if we were to select our paragraph here and look at what was applied inside of dev tools we would be able to see that but now let's talk about the min function first so instead of 1.5 we can type min and then let's put something like 2.25 rim and then we'll put 3 vh which is viewport units but it's also specifically referencing the height not the width and that is very useful when you're working with fonts now let's talk about what this min function does it's always going to select the smallest of the two available and notice one of these is an absolute value so it wouldn't make sense to put in 2.75 ram or something like that here for the second value because it would then always select the smallest so we've put in one absolute value and one value that will change based on the height of the page so let's save this and then we don't see a whole lot changing here right now but we will when we look at the height of the page so i will bring this over to take up the full page and then let's inspect to open the dev tools you could also do control shift and the letter i whichever you prefer then i'm going to choose the computed tab here inside of devtools and we'll scroll till we see the font size and that should be coming up here shortly there it is 36 pixels so that is 2.5 rim which we set as one of the values and remember it will always choose the smallest of the two the second value was three viewport units of height so if we start to shrink the page we'll notice our font is shrinking now let's look at the font size again and i'll have to scroll but it's 28.632 you can always tell it's being calculated when you get a decimal afterwards because we're not usually going to enter that in ourselves so the font size is changing now the three viewport units of height are smaller than the 2.5 rims so it's choosing that instead but then what we should consider is the absolute value is actually a maximum it will never get larger than that 2.5 rim so if we scroll back at some point it should stop growing and we noticed it stopped growing now if we come back to 2.5 rim we have 36 pixels and i said 2.5 ram i believe this is actually 2.25 rim which would be 2 2 rim would be 32 pixels and then 0.25 would be another 4 for 36. let's look back at our code when i close devtools pull this over and we can verify yes 2.25 rim and then three viewport units of height i'm going to quickly scroll down to the main element because having this centered is just bothering me a little bit so i'll scroll down and make some changes here so we won't keep what we have right here let's comment all of this out that we were using previously in the last lesson with those divs and now instead let's say display flex and then we'll say flex flow and we'll make it a column and say no wrap and then justify content and there we'll say flex dash start and we can save and now it is all pulled up towards the top let's pull in some padding though but not the 10 pixels that we had here let's pull in our padding variable i can put the comment after that so for that we'll say var and then dash dash padding and save that now let's go ahead and remove the padding from our nav because it has a little extra padding compared to the header and footer and then let's change the value of the padding just a little bit as i scroll back up to the top let's look for that padding variable we see 0.5 rem so let's make this ems and then it's based on the font size of the element it is applied to so if we save don't notice much of a difference but that's what i would prefer to do for that padding okay as i scroll back up we've looked at men and we've decided or learned that it will select the smallest of the two values it's given it doesn't really matter which order you provide these values but because of that there are some things to consider when we provide the values one you should only provide one absolute value or you know which one it will always choose so the other one should be relative and it's better to choose viewport height units for fonts than it is viewport width so we're keeping a certain size in there and you can play around with it but i think you'll see why i lean towards choosing viewport height units and i don't put a percentage here because really that percentage is really easy to just kind of equal what the rim is as well so 100 percent would be 16 ram uh which would be army not 16 ram 16 pixels which would be one rim so two rims would be 200 so this would be the equivalent of 225 percent so i choose to put in the viewport height units as my relative unit when i'm applying this to font now you can use this min function for images and other things and i believe we did that just a little bit in the past but i wanted to explain more about that so now let's move on to the max function which is essentially the opposite of the min function so max is always going to choose the larger of the two values we provide so just so we can better see a change i'm going to switch this from 2.25 to 1.75 now it's always going to choose whichever is larger either three viewport height units or 1.75 rim so let's once again take a look at our page and i'll open up the dev tools once again as well go over to the computed side and now i'm going to inspect this specific element so we can see that the font size is currently 37.68 so that's fairly large but it's based on the height will it shrink if i bring this down yes it's instantly shrinking now it's down to 34.56 but at some point it will stop shrinking as well and now it has and as we look that's 28 pixels which i put 1.75 rem if i remember correctly so that would be 16 would be one ram and .75 would be 12 and that gives us 28 pixels so now we see the opposite in effect and it continues to grow as the page gets taller but at some point it stops shrinking and that's what we have there for the 28 pixels okay so let's close this and go back and look at our max once again now the same applies here you should have one absolute value and then you should have a value that is relative that adjusts itself and the viewport height units again for font makes total sense to do that so just like with min the absolute value we provided was the largest it would ever get well now the absolute value that we provide inside of max is the smallest it will ever get and i know that is like contrary to what they're named so remember max actually provides a minimum absolute value and min actually provides a maximum absolute value so which of these would i use well actually i won't use either one of these there is a third function we can use and it is called clamp and it's a newer function it hasn't been around as long but it has good support now and there we can provide a minimum so i'm going to say 1.75 just like we used in our max and then we put in the ideal size which i'll put in our relative units of viewport height of 3 units and then we can put in a maximum so i'll put in our 2.25 that we used inside of our min function so this lets us provide both we had a maximum inside of the min function and that's right here and then we had a minimum that was inside of the max function and i've got it right here and then we always use the viewport height units of 3 for that relative and it's in between so you've got minimum ideal and maximum so now if we save and bring this back once again we should see some changes but it will stop growing and stop shrinking at different points okay so we're on the paragraph we'll inspect that specifically go to the computed tab and now we'll look at the font size is currently 35.376 so that is somewhere in between now we can shrink this down and we're noticing the font size is shrinking but it stops shrinking now at 28 pixels now we can bring this back up and i believe we said 2.25 so 36 pixels would be the largest it would get and we achieved that now so if we scroll back down there it starts to shrink so clamp works with both the minimum and maximum and we'll choose an ideal size in between when necessary let's close dev tools again and bring the browser back over to the right and now let's go ahead and apply clamp to one more variable that we can create here and i'm going to create a font size dash sm for small and here i'll change this to 1.25 and then instead of three i'll use two viewport units and then instead of 2.25 i'm going to make this one well then i've still got the two 1.5 rim for the maximum and save so now we have a small size as well now let's add just a little more content to see how this can apply so i'm scrolling back down to the main area and we'll take our padding that we have inside the main i'm going to cut that out with control x and underneath main i'm going to style that section that we have so i want lower case though main section inside the section i'm going to say flex dash grow set that to 1 and then i'll put in our padding and then we're going to add an aside variable underneath that section i said variable a aside element underneath that section element in our html so i'm going to say main aside and now let's go ahead and style this choose a background dash color and i've got a color picked out and we'll use this hsla function here i'll say zero zero percent twenty percent and remember the last one is the opacity which is the transparency say zero point eight and then we have a color that we'll use and this will be for the font and we'll just use our light color variable that we've already constructed then we'll use our font size and here we'll say vr and then our var dash dash fs dash sm for that small size we just created let's make this font italic so we can really tell the difference and then the padding will once again be that padding variable we created there it is and save now we also want to provide a media query and this will help adjust our aside because when the screen gets too small we should stack them so underneath all of our current css let's go ahead and add at media screen and then we'll say min dash width and we'll choose our small break point that we had in previous lessons of 576 pixels and now for the main here we'll say flex dash flow and we'll switch it to row no wrap so now they'll be side by side and we'll say justify content space between okay after we've styled that main element let's go ahead and add the main section here and now we'll adjust the width of the section and we'll use another css function to do that and that is calc and for calc we'll say 70 percent and you can mix different units so we're mixing a percent and a pixel and then after that we'll go ahead and provide a width for the aside as well so we'll say main aside and here we'll say width we'll use calc once again and we'll say 30 percent minus 5 pixels so what we have here is actually 10 pixels that will be between the section and the aside on larger screens anything larger than 500 or as large as 576 pixels or greater i'm going to jump over to the html and scroll down here and this will be in the starter code as well or the at least the finish code but i'm going to paste in this aside here so it also has an h2 and a paragraph and that's it so we save and now we can see the column over here on the right because we are larger than 576 or we are at least 576 pixels wide so we have our section and our aside and we can see that font let's see how they both resize now as we've applied the two different font sizes so i will inspect open up dev tools i want to go to computed and i'm on the section or we could choose the aside either one and see how those font sizes apply so i'll look at the content here and now they look fairly small because we're at 50 percent inside of devtools just to get it all to fit let's go ahead and start to shrink and notice the text shrinks for both but then it eventually stops for both as well so we've reached that minimum and now it starts to grow in the main and now it's growing in the aside and at some point they both stop growing as well so clamp is working well for both of those and again remember if this looks a little small it's because we're at 50 percent here when we have dev tools open so i'll close that now we see the full page and now i'll drag it back over to the right let's go back to our css those paragraphs that we have are both content so just underneath the aside i'm going to put in a content class and that's what we've applied to those paragraphs let's just say margin top of 20 pixels and see how that looks yeah that gives a little space from the heading down to where the rest of the content starts i like that just a little better okay now what about this google link here let's talk about that so just underneath the footer we'll go ahead and style this and as we learned in our pseudo lesson we can choose any link and that should apply to both the nonvisited and visited links so let's color this fire break that will look a little better on the colors that we have but after that let's go ahead and look at the hover and the focus so we'll say anchor hover comma and then we'll also have anchor focus and then inside of those we'll apply a filter and there are filter functions so in the past actually before we do that let's look at what we were doing in the past we were choosing a color maybe hsla and putting that transparency in there or if we could just leave it the color it is and just put in opacity and maybe we'd put that to 0.8 and then when we mouse over it just gets a little fainter you can't tell as good with the fire brick maybe i'll take that down to 0.6 yes now it gets a little weaker when we hover over it's a little transparent so that's how you can do that on its own or you can provide that fourth value inside of hsla and choose the color as well but what we want to do now is provide a filter and filter has several functions so one thing i like to do with filter is use the brightness and here i'm going to say 150 percent so instead of adding transparency now when i mouse over the link gets brighter i actually really like that i just wasn't able to do it earlier in the lessons so i frequently do that for the hover focus i like the filter brightness now something else you can do that is a cool effect instead of brightness is choose hue rotate and you'll always get a complementary color if you say 180 degrees so if we save that let's see what is 180 degrees difference in the color wheel if you think about colors than firebrick and it's this kind of teal or green i don't know if i like that one there so some will have better luck than others and you could play around with the degrees with that as well myself i'll probably go back to brightness so i'm just going to ctrl z to undo until i'm back to that brightness and i like how that works okay one more function to work with while we're working with these paragraphs let's jump to the html again and inside of our aside we have this lorem text and notice we provided a span element that is an inline element and it's wrapping around it and then it has a class of tool tip and then it also has an attribute that is data dash tool tip and we can really provide custom attributes as long as they all start with data dash and then we can name it whatever we want so we named this data dash tooltip and it says this is latin so now let's make a custom tool tip that will show when we hover over lorem inside of our aside over here so we should see it right up here in the top right let's jump back to the css and then just underneath the well let's do it underneath the content there we are so now let's put in a tooltip class and inside this tool tip we'll say border dash bottom so this will indicate that a tool tip exists we'll say one pixel dash and let's try orange to see how that looks if we save we see the little dashed border under lorem that indicates there is something about that now we also want to get this position relative because we will be using a position absolute when we choose where the tooltip shows up so after we've applied those styles to the tooltip class then we need tool tip hover pseudo class but now we can stack a pseudo element and this is the before pseudo element so now we've applied the tooltip class the hover pseudo class and now the before pseudo element and with that i'm going to choose content and here is where we can use a function it's the attribute function and now we just name the attribute so this is our data dash tool tip and if i save this we'll notice this appear when i hover over and now it just appeared at the beginning in front of lorem it says this is latin lorem when i hover over and that's not what we want but you can see how this works okay let's go ahead and style the rest so we'll say position absolute let's put the position at minus 20 pixels which should put it up on top if we save now and i mouse over it shows the top but now it's all scrunched and it comes down in there so to get it to avoid wrapping on each of those words we can say white dash space and then say no wrap now if we save and look now it says this is latin up above okay from there let's give this a background color and now we could use our var and say dark color there it is which was black if i remember correctly and after that we can give it padding and here we could say var and give it our padding as well so there we go and then finally let's give it a border dash radius of 15 pixels and save now when we mouse over lorem we get a this is latin tooltip that pops up we've learned a lot about css functions with these paragraphs and this layout but now it's time to go back to grid and learn about some of the grid functions so first i'll go to the html and i'm going to select both our section and our aside element inside of the main element i'll hold down shift and click and now i'll press shift alt and the letter a to comment that all out and now i'm going to select the divs from the previous lesson once again hold down shift alt and the letter a to uncomment those and now we should have those back on the page when we save we should definitely see a difference but we need to make some changes to the css also back in the css file i'll need to scroll up to the main section and we can comment out the flex flex flow or display flex flex flow and justify content and now we will uncomment what we previously had here but now we'll change some of this and we'll actually just delete these three middle rows as well okay we want this to be a display grid instead of display flex after that we're going to apply grid dash template columns and now we can use a grid function and we used this when we learned about grid in a lesson and that is the repeat function so we're going to say repeat this 4 times so that will give us four columns and then we're going to use a math function that is specific to grid and that is min max and here we provide a min and a max so i'm going to provide 100 pixels for the smallest grid item that we would want and 300 pixels for the largest now after that i also want to adjust this gap i did this in a previous tutorial as well but four viewport width units are almost always going to be bigger than 15 pixels so min's probably always going to select 15 pixels here so i will change this to 2 and then i will also switch this to 20 pixels and it should probably adjust now based on that and after i save you can see the changes on the page over here on the right but we will resize the page and look at some more changes there as well but the reason we're not seeing the grid adapt to the page the way i would like it to is because we still have in a size for the squares we had in a width and height previously so let's select both of those lines shift alt and the letter a to comment those out and save once again and now we see the grid is filling up the entire space that is available i think we should probably provide just a little bit of padding inside that main element as well so let's scroll back up to where we were and just above here the display grid and below the flex grow let's say padding and let's provide the padding that we have already defined and now once we save we should see it give just a little space and that looks better and it should adapt to all sizes so let's go ahead and drag this over and see how everything has applied now it did adapt to this size so we see all 12 grid items and you can see once they've reached that 300 width then the gap here between the columns is going to get larger as the page has to adapt but it kept whatever gap we had defined between the rows now as we resize we'll see that change so i'm once again going to right click and choose inspect remember you can also get into dev tools by choosing control shift and the letter i all at the same time or pressing those all at the same time okay now that we're here i will select one item and inspect so we've got a div square highlighted and we can see it has a width of 300 pixels as i mouse over that but we can also go to computed scroll down and see that width as well now let's resize and as we get in here to a size where they're not the grid items themselves aren't changing right now it's the space between the columns but as we squeeze them in now they're changing and now we can see that width here is changing as well so if we scroll down it should be that same number well it's close 251.8 right now and as we continue to squeeze and it keeps scrolling on me but as we continue to squeeze it will go down until they are 100 pixels and we're getting close i think and let's take a look now and now we're at 105 so we're very very close and now the page starts to shift as we'd have to put in a media query to get it to adapt after that because they will no longer shrink in any way they at this point when the page starts to break essentially is when they have stopped adjusting so they are at 100 pixels right there and if i bring this down we should now see that 100 pixels and if we bring it out they begin to grow so now 250 pixels apiece all the way up to 300. now notice our grid gap that we defined and it stays what we defined it as until they stop growing and after they stop growing then they start to separate the columns because it needs to fill out the page but as they are scrunched in it keeps that space between the rows and the columns because remember the gap property is both a grid gap and a row gap value it's a shorthand so we can see how all of that works together so we provided the min max we used repeat as well and then we used min once again on the gap property let's move on to css transforms transitions and animations and before we finish today we'll make a css only animated hamburger icon and drop down nav menu as you see here let's look at our starter code today you can see i've got an index.html file and inside this index.html file i've just got a main element and it contains three divs i don't usually use divs but for this example they're good we're just creating squares with all of them and you can see i have a class of squares set on each one the final div also has a class of animate and then i've got a different emoji inside of each div and then in the file tree you can see i've got some other files as well but for these first examples of transforms transitions and animations i'm just going to use the index.html file and then the style.c file after this though we will go ahead and create an animated mobile menu and it will have an animated hamburger icon as well as the drop down navigation menu inside of it but for now let's just learn about the basics of transforms transitions and animations now inside of the style.css file you can see i'm importing the nunito font from google i've got a basic css reset here inside the html element styles i've set the font just a little larger to one and a half rims and we're applying the nunito font that we've imported and then the body element is set to a min height of 100 viewport units it's a display of flex and a column so the main element that's inside of the body is set to flex grow one so it also extends to the full visible page that we see the body take up and from there the main element is also set to display flex for anything within it and it's set to a column as well and everything is centered and then there will be a gap of one rim between the flex items within the main element and those flex items are the three divs that we previously looked at inside of the html file they've got a width and a height of 200 pixels so they're squares they've got a border of one pixel solid black and then i set each one to display grid so we can center the content easily just by saying place content center so it centers those emojis i'll drag our code over to the left side of the screen and we can see this page right now with our starter code here on the right we've got our three divs each one is 200 by 200 pixels and then we've centered the emoji inside of each one now we're ready to apply some individual styles to each of these divs so i'm going to scroll for some more room inside of the css file i'm also going to press ctrl b to hide the file tree so i have a little more room to type and we'll review some pseudo class selectors to select each one of these divs so first i'll put in div in lowercase and then the first pseudo class i'm going to use is first child so this should select the first div and we can test that by changing the color change the background color to dodger blue and save and using the live server extension it updates automatically when we save and we can see that first div gets a background color of dodger blue so i'm going to highlight this div selector and press shift alt and the down arrow twice so i get it twice more inside of our code and then i can just change this to nth child and then we need a parenthesis and i'll put in the number two and now i'll switch the second div to yellow and then finally we can use last child for the last div and we just need one s there we go and i'll change this one to lime green so now let's save and see if the colors change and they do so we've successfully selected all three of these divs individually now the first property we'll look at is transform so inside of the first child i'll select that and use transform and then what we'll put in for a value first is translate x you can see we have different choices here that visual studio code gives us now x will move it left or right and if we use percents it bases the percent on the size of the div so when i put in 50 percent it should move it halfway over and we can compare to the other divs to see if this is correct and yes it moves our first div 50 of the way over of the width of the div not of the page or the element that it's within but of the element itself so that is the 50 and the positive number moves it to the right a negative number would move it to the left now we can use other units besides percents so in the next div i'll say transform once again and then i'll use translate y which should move it up or down and here i'll use two rim and let's see what happens it moved it down to ram so likewise if i give it a negative two rim it should move it up and as you might have guessed instead of just translate x or translate y we can use the shorthand and use them together so in the third one i'll say transform and then i'll just use translate and now the first value is the x value so i'll say 100 percent and we can combine different units so here i'll say minus 2 ram and save and now you can see it moves it to the right 100 percent and then the minus 2 rim did move it up so now we're back to our original gap between the second div and the third div because we also moved that second div minus two rims so if we were to just switch this to translate x and then remove the 2 room you can see that the gap is larger so if we wanted to move this up even more to make it obvious i could just delete the translate x go back to translate and let's say minus 5 rim and save and now you can see it moves way up so it's a little easier to see that it's working so we now know that translate x moves things left and right and translate y moves things up and down and we can use them both together but for now let's just comment these out so i'll press shift alt and the letter a to comment them out after i have highlighted them and do that for the third one as well and we'll move on to the next value that we can use for transform which is rotate so i'll once again put in transform and i'm going to leave these commented out values in here so you can play around with them from my source code if you want to so this transform will be rotate and you can see once again we have choices like x y and z so i'm going to choose x and now let's say rotate 180 degrees and this will of course apply to the first one and when i save these other changes will revert because we've commented them out too so there we have now rotated 180 degrees let's do a smaller rotation and you can see what happens as well so something looks a little strange about this box doesn't it that's because it's rotating from the top backwards so it's kind of like a pizza box if you consider it that way this bottom part is coming towards you and the top part is moving away from you as far as that rotation and that means once we get to 90 degrees it disappears because you are now at eye level with that flat top or the card consider this a card as well instead of just a pizza box and you're flipping it over from the top and so once we go 180 degrees it has flipped all the way over and now notice the rocket is pointing to the bottom right instead of the top right and that's because that card has been flipped over from top to bottom so as you might guess then if we apply transform and then rotate y let's choose that out of our list here and now if we sit this to say 45 degrees so we can see what's happening first it will be just the opposite so this now looks a little skinnier because we're flipping it i believe from left to right let's go ahead and do the 180 and yes now the flame is just the opposite so we took the right side and made it the left side but it's flipped over so imagine having the same image on both sides but it's the opposite of that so we're flipping this side to this side and then of course what was here over to this side so we're seeing this from the back as if the image was burned all the way through and so left to right would be the way to consider y as far as the rotation and top to bottom would be the way to consider x for the rotation and now let's apply one more down here to our final div so we'll say transform and now we'll use rotate z and let's go ahead and choose 90 degrees with rotate z and see what happens it didn't disappear did it it turned so we did have our taco facing the normal way and now it is turned over here so this might be clockwise let's see what happens if we do 180 yes and now it's upside down so that's actually what this is doing is rotating clockwise with a positive number a negative number of course would take it counterclockwise it's worth noting that although we can use rotate z it is just the same as if we just said rotate so if i save this we won't see a change likewise if we make it 135 degrees it'll move on around and yes we did see the change now you can tell it rotated because of the taco has a different position here in the middle but we could put this some odd number as well and it won't have such a perfect rotation to see the change so there we once again go it does rotate the full box not just the emoji okay i'll once again comment these out but leave them in the code so if you do download the source code you can see these in there and we're going to move on to the next possible transformation and that's going to be scale it's very useful at times i meant for this to be on the same line here for the comment okay for scale we'll say transform once again and then we'll say scale x as you might guess and let's make this 120 and see what happens to this top box it got bigger but only to the left and the right as with x which is a lot like the translate x but now it just grew to a hundred and twenty percent of the size but it only expanded on the horizontal plane here to the left and the right not up and down at all so as you might guess if we apply the opposite to the second div transform y oops i transform and then we need actually scale y there we go put that at 120 percent we'll see the growth goes to the top and the bottom and it doesn't expand on the left and the right at all and finally if we look at this last child and now i'm going to scroll for just a little room i'll put in transform once again and here i'll just put scale and like translate we can put in both the x and the y values so i'll say 50 x and 50 y and save and we can see instead of growing it actually shrank because it's just half the size that it was now before we finish with transform there is one more possible thing to cover with it and i'll comment all of these out as well and what we want to do there it's called skew oops i selected that below there it is and now one more to select before we move on to transform sku so now once again on this first div we'll say transform and we'll say skew x and with that we'll say minus 10 degrees and let's see what happens and you can see now we've got a leaning box instead of the normal box that we had and that's kind of cool sometimes when you want to get that effect now let's do the opposite with y so transform and then we'll say skew if i could spell skew correctly and here we'll once again say a degree but let's choose a different value maybe minus 10 degrees instead of 10 no we said minus 10 before maybe i should go 10 degrees let me go ahead and try that and yeah we can see we get the opposite if we use a positive number instead of the negative but we skewed this y also so it's leaning a little differently than this one here on the top where the sides tilted now the top line's tilted at the top and the bottom actually instead of the left and the right and finally as we did with scale and translate we can provide both in the same so transform and now we'll just say skew instead of skew x or y and here i'll say minus 10 degrees and now i'll stick with minus 10 degrees here as well and when we save we can see that applies to both so it's leaning on the left and the right and the lines have changed on the top and the bottom as well now i've touched on some of the basic uses with all of these transformations and there are many more that you can reference in mdn and so as always i'm putting the mdn link for transform and all of these different possibilities in the course description inside of the resources so you'll find that on github when you go to the course resources and now that we've covered everything you can do with transform i'll reset these back and we're going to start looking at transitions let's apply a transition to when we hover over the divs so we'll say div and then use our pseudo class selector hover and then inside of this we'll change the background color when we hover over that will be easy to tell and let's use the color midnight blue next we need to provide the transition property that we are changing and that is the background dash color from there let's set the transition dash duration and we'll set that to two seconds and save so now when we mouse over one of these i'll do the middle one it takes two seconds and it changes to midnight blue the same with the top and the same with the bottom now we can also provide a transition dash delay there it is let's set this to just a half second we don't want to wait too long and now when i mouse over it doesn't change immediately but then it starts to so it waits that half second first now this is important to know if you put two transitions together that transition delay does not go between the transitions it's just before it starts so we have a half second delay and then it goes ahead and does the two second transition to midnight blue now i mentioned having a second transition or a second transform that we're providing here so let's go ahead and do one other pseudo selector i'll say div hover again but now we'll only apply this to the last child actually i need to say last child first and then hover there we go now for this i'll say transform and we'll just rotate and let's rotate 180 degrees so this would just apply to the last one but we don't have a transition applied to that yet either but we can up here if we want to in the same line so after background color i can just put a comma and say transform and then during the duration if i want that to be a different duration i can just say three seconds here and then if i don't want to delay or i want the same delay i could just leave it as is so let's just leave it as is so we've got background color two seconds transform three seconds and we'll save and now if i hover over this last one it waits that half second and then it begins to rotate and notice it takes three seconds to rotate but only two seconds to change colors once i'll do this again you can see the color is fully changed before it stops rotating okay but that is a lot of different lines here we've got transition property transition duration transition delay and as you might guess there is a shorthand so i'm going to comment all of those out with shift alt and the letter a and now i'm just going to say transition and here i can say all of the transitions instead of any specific one i'll say i want them all to last two seconds and all of them to have a half second delay and i can save that and handle it all in one line so now when i mouse over it just takes two seconds and it finishes these still apply the same just a two second switch to the color now we can also provide a timing function here and there are some definitions or other ones that are already defined essentially that we can put in here so the default is ease but we could also put in some others let's go ahead and set this up by saying transition and now let's see timing function this is what we would be looking for a lot of different values that could go in here but the default is ease but once i start typing ease you can also see there's ease in ease in and out or just ease out now what this means and i usually can't tell much of a difference between ease and ease in and out but it starts slow and then it speeds up and then once again it slows down at the end so i'll just choose ease even though that's the default and let's go ahead and look at this now well we can see more in the rotation so it starts slow it speeds up and it ends slow now the opposite of that would be to say linear so it does everything at an even pace and now you can see it just there's not a huge difference but there's a little bit of difference so you can provide this function and if you do so you can provide it right here after how long the transition will take so right here is where we might say linear and of course move this comment over here and save and now this should still apply the linear see it's not as fast as the e's i kind of like the ease or let's try ease in and out and see if we notice much of a change i don't usually but let's see what we get does speed up and slows back down so i do like that a little bit better personally than linear but both are available and remember if you don't apply one ease on its own is the default so even if we didn't say ease in and out or linear or anything and we just left it as this it would apply the e's timing function as is now we've learned about transform and transitions that can help us make a little more impact with the transformations let's scroll for some more room and now learn about animations that's just a little different so i'm going to go ahead and start defining the class animate if you remember we applied this class to this last div inside of the html so for animate the first thing we need to do is name our animation so we should have animation dash name and here i'm just going to name this slide then an animation dash duration and i'll give this five seconds an animation let's spell that correctly again timing function and thank goodness visual studio code helps me spell here i'll say ease in and out so you can see this is a lot like a transition so far but you will notice a difference as well and we can provide an animation delay let's let's delay this by one second that's just a little bit longer we can also give an animation iteration count so i'm going to have it repeat this animation five times now let's go ahead and just go with those properties for now but this in itself won't apply the animation we need to define key frames for the animation so we say at keyframes and then we need to have an identifier here and the identifier is the animation name slide so now inside of this we'll say at zero percent essentially at the beginning of the animation we will transform and then we'll translate x and here inside of translate x i'll just say zero so we're starting at square one we're not doing anything right when it begins but then at 33 percent or one third of the way through we'll once again say transform and now i'll say translate x and we'll move this 600 pixels to the right so this will probably go way off the screen and then we'll rotate 180 degrees and notice there's no comma between those which is strange but that's the way it likes it in css so we'll just leave it like that after that i'm going to highlight this and do shift alt and the down arrow we'll change this 6 33 to a 66 so now we're two thirds of the way through and now i'll switch this to a minus 600 pixels and a minus 180 degrees so we're applying more than one thing here again no comma and then finally we'll get to a hundred percent and at a hundred percent i'm going to go ahead and say transform and our translate x once again will be back to the zero position and after that let's change the background color when we get to the final position to rebecca purple and there will be a reason we want to see this and how it changes so notice now it started animating right when i saved it didn't wait for a hover it's an animation and let me go ahead and pull this over to the full screen so we can see the full animation and there's at least three now notice it changes back to green when the animation starts again and that's something else to discuss but let's go ahead and let it finish the five times and you can see it's going the 600 pixels in each direction it's rotating as we want it to and it changes colors at the end but then it changes back to green and it's back in that starting state so since we have a smaller screen over here let's maybe change these to 300 it'll probably still make it to the edge or beyond of the screen but we'll leave it at that and then let's go ahead and add some more animation properties above and the next one that i want to add is the animation dash direction now the default here is just normal but that's not exactly what we have to choose so let's get those back up here and there's alternate alternate reverse reverse let's say alternate so that means it's going to go forward the first time and then it's going to reverse the next time so when i save this it will start again had that one second delay it went a little to the left a little to the right and then it stops now it went to the left instead of the right first back to the right and stops and so on so now we've seen those changes the next property to look at is animation fill mode so we'll say animation dash fill mode and now what happens here is we are talking about the actual ending state so the default is backwards as you see visual studio code brings up and that means it goes back to the original state it now has that green background again but if we say forwards when it stops it should now go to that other state then i'm going to shorten this up so here we'll save it so it goes forward once and then backwards once and then we'll be at the ending state so there was our forward now we go backward but when we get to the very end let's see if it goes back to green or not well it did because we alternated so let's switch this alternation back to normal because it was the opposite when it did the alternate the second time so there we end at purple then it goes back to green and starts again and now we're back to purple and it stayed purple that's the point of this animation fill mode since we set it to forwards instead of backwards it keeps the ending state so it stayed purple now again there are some other animation properties that you can dive into the mdn link that i'm going to leave in the course resources because there's a lot more you can do i'm just touching on the basics here today but once again look at how many properties we had to use and we can use shorthand instead of all those so i will comment all of those out and now let's just apply the shorthand we'll say animation that's going to last five seconds let's use ease in and out and then we'll say one second delay and then let's do the animation twice let's say normal so it does it the same way both times and then the ending state will be forwards and the animation name of course we have to provide and that is slide so if we do that this should apply the same as we had all of these properties above but this is shorthand so you can see how all of these values fit into that one shorthand line here for animation now we've completed the basics about transformations transitions and animations so let's go ahead and begin working on that animated mobile nav menu that will give us an animated hamburger icon and animated drop down menu that users could apply so to do that we need to look at our other starter code i'm going to show the file tree again i'm also going to stop live server for now because we'll launch a different html file and i'm going to drag this back over to the full window and then we'll look at the menu.html this will also be in your starter code and for the menu html we have got a basic page here but there's a little more than in the previous example we have a header element inside of the body and you can see this header element has a section inside of it and it has the class header title line and here we have our h1 that says acme co and then we have a button as well and inside this button is a div and it has the class menu icon the button has the class menu button and then we have a nav element and inside the nav element is an unordered list with four list items now they are basically fake links with just the hashtag that you would use as an anchor for the same page but i am going ahead and passing one link to a products page and this products page is basically just like the menu.html page but of course it links back to the menu.html page just so we can see the difference there i have absolutely nothing in the main element this is all about the header and creating the menu around this header structure so from there let me close this style css and the index.html let's look at the menu css that is being imported and what we have for starter code before we really start animating this menu so what we have again is the import of the font basic css reset and then we're setting two css variables just for the colors that we'll reuse in different areas the background colors of flat black and then white smoke for the font color and then the html itself once again just like the previous example has a font size of one and a half rim set the font family to nanito so that's all inherited the body has 100 viewport units min height and then is set to flex and a column again and then the header itself has a background color that's the header background color and we set the basic color here so we don't see a whole lot of difference but i'm going to go ahead and launch this page now with live server and drag visual studio code over to the left and it looks like it launched the other page so i'll need to change that and then inside of here i'm going to say slash menu dot html now right now this doesn't look too great we don't have a whole lot that looks good for sure we have our acme co here and then we've got our links here as well and maybe a little something odd there but now we'll start to apply some other styles i'm going to do control b again to hide the file tree and we can start with that header title line and if you remember i believe that's what this is is the button we had the acme co h1 and then we had a button all inside of that section element that had the class header title line so i'll put header dash title dash line and we'll start to apply a few styles there let's give a padding 0.25 rim on top and bottom and 0.5 rim on the left and the right we'll set it to a display of flex and from there let's go ahead and set the flex dash flow and this will be a row instead of a column and we'll say no wrap again and then after that let's justify the content and we want space between so we go hard left and hard right with the content we have which should be the h1 and the button i'll save this much and we do see the change so now we see a line over here that would be the button we didn't really do much with it yet and we've got our h1 over here okay after our header title line class let's get the next class which was menu dash button this is the button itself and i did use a button element so we don't have to apply some other things and it's great for accessibility such as hitting the tab button it will automatically get focus on a button element if we used a div for example we'd have to put in a tab index and there's some other advantages as well but that's a big one okay for the menu button we'll say background dash color and now we'll set that to transparent because we don't want that normal button color that we get and then we'll also set the border to none because buttons usually do come with a border now let's go ahead and give this some shape with the width of 48 pixels and a height of 48 pixels which is kind of thumb size i'll save this much and we definitely see a change it's gone we don't see the 48 by 48 because we haven't done anything else with it yet at this point let's set the display to flex justify content and we want that center we also want to align the items center and i'll scroll just a little bit and after that we're going to set a position to relative if you remember the position tutorial earlier in the css series that means we're probably going to position something absolute inside of the button but those are the button styles and if we say we really won't see a change at this point because we don't have anything inside of that button and we've set it to be transparent okay now we want the menu icon which is the div inside of the button but we're also going to select the menu dash icon before pseudo element and the menu dash icon after pseudo element so all three of these will be affected by this and we'll say background dash color now let's use our variable and we want the header color just it's that white smoke color that we defined above now here we'll set the width to 40 pixels and we'll give this a height of 5 pixels and then i'll go ahead and save so you can see what we have we have one line essentially here a big dash that's 40 pixels wide and 5 pixels high so now let's go ahead and set the border radius and we'll set that to 5 pixels and now this is going to be position absolute i'll scroll again for a little more room and after that we're going to go ahead and set our transition right here because it will apply to all of these so we'll say all instead of any specific property and then we want it to apply faster than we did in our examples in just a half second and we'll save that much now notice we only have the one line and it does have the rounded edges so it's one of the three lines we expect in our hamburger menu but we applied this to all so where are the others well the quick answer is they're all stacked on top of each other right now so we need to make a few more changes before we see them the first change is just going to apply to the menu icon before and the menu dash icon after but not the menu icon itself and here we just need to set the content to a blank basically an empty quotes here because if we don't do that they won't be visible so even though we didn't put anything in there we need to set the content to empty value and then we can go ahead and set the menu dash icon before and we're going to need to transform it now so we'll say transform and now we'll translate and we're going to provide two values here so i guess i could just do one first let's do translate y and i'll show you why we need to do two values so i'll say minus 12 pixels and save and now look they're not even up here at all that is not what we want so really it starts in the middle and since this is 40 pixels we need to have translate because the x value needs to be minus 20 pixels and then the y value can be the minus 12 to put it up above the actual one that was in the middle defined by menu icon so now when i save it gets pulled back over and i was expecting them to be the same length let me make sure i put everything that i thought i did and i'll come back and go over that but right now two different links of lines however what i expected here did happen we've got the minus 20 pixels to pull it back even and the minus 12 pixels to put it on top i'm going to select this now do shift alt and the down arrow and then change the before to after and now i'll also need minus 20 pixels here but now i'll need a plus 12 pixels to put this next one underneath and save and now they have straightened out that's what i needed was the hamburger menu all three the same so the menu icon is the one in the middle and then the top one is the before and the bottom one is the after pseudo element and now i know why it was longer before because they were stacked on top of each other but this bottom one started in the middle which then made it look like it extended the middle line which was actually the two together but not starting at the same place okay from there we can go ahead and apply some more styles to the nav i'm going to scroll for some more room and we'll select the nav element now the nav element is going to start out with a display of none but i'm going to go ahead and set up block here first so we can actually see what we're doing with the nav element and then i'll come back and change it we also want a transform dash origin telling the transformation where to start and we want it in the top and center because it's going to drop down and now we're going to apply an animation but we haven't defined that animation yet so let's go ahead and define it first and underneath here we'll say at keyframes and then we'll say show menu and now we'll say at the zero percent we will transform and then we want scale y and we'll set that to zero and then after that we want the next one to be at 80 percent and that's going to also be a transform and this will also be a scale y but this will be 1.2 notice we don't have to just stop at one so it actually will go 20 percent beyond the intended size and that's going to give it just a little bit of a bounce like kind of like stretching a blind down and then letting go of the blind and it snaps back up just a little bit so then we'll say at one hundred percent we use transform and we'll say scale y and now we'll just put it back to one and then after it snaps back up it will lose that twenty percent so let's save that and that will be our show menu keyframes for how this transition will work i'm going to come back to the nav and again like i said change the display to none and i'm also going to apply that animation but right now we just want to see what we're doing and not really have the animation or have the nav hidden so we'll go ahead and come back to both of those things right now we'll grab that unordered list inside of the nav we'll say list style type but not disk we'll set that to none and then we can set that unordered list to a display of flex and then we'll set the flex flow there to column and no wrap and after that we can select the list items so nav and li and then we'll give them a padding of 0.5 ram all the way around and let's put a border on top to one pixel solid and here i'll need var so i can set that header dash color let's save this much and see what we've got well we can see the menu is coming together we haven't really styled the links or positioned these at all but we now clearly have a menu that would drop down that has individual sections to it so let's go ahead and style those links now so after the nav li we'll have nav lowercase please and the anchor tag so all of the links will be display block instead of what they normally are which is inline and then we'll say text align and set them center and then i'm going to give them a width of 80 percent if i were to not be applying an animation if i did not apply an animation to these links then i would probably set them to a hundred percent and just change the background color and the text link so they would take up the whole space but because i want to apply an animation today i'm setting these to 80 percent because the animation will make it grow so that is the consideration there and because of that i'm also setting the margin to auto so it will center these block elements that they are now block elements when they normally aren't but what we get are centered links right now we don't have an animation or a transformation i should say applied to any of these yet but we will after that we'll go ahead and select the nav we need the anchor and there we go the any link pseudo selector which is a pseudo class so this applies to both the nonvisited and visited links and we'll say color we'll set our var to the header color once again so they stay that same color whether they've been visited or not we'll set the font weight to bold and text decoration to none and that will remove the outlines we have under those words now when we save they're nice and bold and they are that white smoke color that we expect them to be and finally let's go ahead and apply this transformation which will animate the links just a little bit so we'll say nav and then hover and then we'll also apply this to the nav and if they have focus both of those we'll say transform and now we can say scale and we'll go to 1.2 which is essentially saying 120 so they should grow 20 percent and then we can set the transition right here as well so i'll just say all 0.3 seconds so we don't want to wait too long and now when i mouse over notice how they grow and that works just great and this will also happen if we tab through the page you can see the outline and this is good for accessibility we'll select each one of these as we go through so you do not want to remove the outline you could change the colors or style it if you want to but i usually leave it basically as the default it does help with accessibility so you definitely want it there so you can tab through these as well now let's go back to our nav menu and make those changes i talked about so nav instead of display block should be none to start out and then we also want to apply that animation which will be animation using the shorthand here so we'll say show menu that's the name of the animation 0.5 seconds is the duration the default would be ease so we could say ease or ease in and out again i can't tell much of a difference between the two and then we'll go with forwards so it leaves it in that finishing state as we noticed in our example before the square changed to purple and stayed purple at the end instead of reverting back to green so we'll say forwards here now this won't apply a whole lot yet but when i save it will disappear so now we need to do some other things so it will appear when we hover over the header or when we have focus anywhere in the header i'll put these final styles right above the nav here in our css and they're going to start with the is sudo selector which will save us a little space i'm going to say header and then hover but this will also apply to the header focus dash within and now after that we can specify the menu dash icon so you can see what the is sudo selector helped us with otherwise we would have had to say header hover menu icon header focus within menu icon so it saved us just a little bit so what we're going to do say background color and we'll set that to transparent and then we'll also go ahead and say transform well let me hold off on the transform i'll come back to the transform let's just go with background color transparent to start out with for the menu icon and after that i'm just going to select this and drop this down now remember the menu icon itself is just this middle line which means we'll be losing the middle line when we mouse over now after that we'll say menu icon before so now we're selecting just the top line and instead of background color here i'm going to want transform and then i'm going to set a couple of things one thing is the translate x and that is because remember we already had to translate x back minus 20 pixels we need to do this again or it will end up in a different area so we'll once again say minus 20 pixels for the translate x and then we're going to rotate and we'll rotate this line 45 degrees and we'll leave it at that now i'm going to select all of this and do shift alt and the down arrow again i'm also going to press alt z just so you can see what isn't showing over there so it's is header hover header focus within and then we're selecting the menu icon before and now i'm switching this one to after once again i need translate x minus 20 pixels but now instead of 45 degrees i need minus 45 degrees finally i'm going to copy this one more time select all of that down but instead of the menu icon before or after i'm going to switch this to the nav element itself it's not a class this is going to be the element there we go and now we need to change that display to block so it actually shows up because before remember we had none so those are the different changes we have made for when we hover over the header or when we have focus within the header which is important if we're going to tab through so now let me hover over the header and you can see our hamburger menu changes to an x and that's usually desirable so the middle line disappeared we set that background color to transparent then we rotated the other lines the before and the after so now they form an x and of course we also had to set this to display block for the menu to show and now as i hover over these that other transformation of course makes each one of the words grow by 20 so we can tell what we're hovering over and then likewise if there's focus within here now i remove this and it changes so there we go and we can see that little bounce at the bottom too there we go now maybe we want to set a background color on the nav itself because i'm noticing that's bouncing a little bit lower and going into the white there so let's go back to the nav and find where oh it was actually underneath here so let's set a background color on the nav itself and here we'll say var and grab that same header background color and save now let's check out the bounce with the menu and yeah now we see that color stays with this last word instead of dipping into the white there that looks good but there's one more transform that we can apply and it's the one that i didn't before this goes to an x which is great but let's apply this to the hamburger menu as well so this is the menu icon and right here we'll say transform and now let's rotate and let's do 720 degrees so that's going to be a few full turns there at least a couple so now when i hover over you get the spin and then we have the x and that's a nice little effect as well so there everything is complete i hope this has helped you learn a lot about transformations transitions and even animations because they're very useful but you don't want to overdo it too many on a page can just be too much before we get to the final project in this css for beginner series there's one more topic to cover and that's organizing your css i've included a markdown file with this lesson and the sample code and it just is going to contain an outline of suggestions to organize your css and i say suggestions because there are no hard and fast rules there are different theories and different takes on this but the first one is possibly the most important and that is follow your team that's a very important rule to go with because if your team has already established how they're organizing the file you need to follow that pattern you're probably a junior dev getting started with them and you don't really want to rock the boat there just follow and of course use the pattern that they have and i'm sure there are reasons for that pattern after that we're going to have code examples to look at so our second reason here or second suggestion is to use comments to create headers or you might call them dividers as well labels if you will inside of your css now we've seen this already throughout this series as we've done a few mini projects and you've seen that i've provided these headers which are much like what mdn suggests throughout the css so here's our reset labeled and then i have one for the variables and then inside of the root pseudo selector here you can see i labeled colors there might be other variables that i would create and so i might have sub labels here inside of that pseudo selector for that then i have utility classes general styles and now we get down to blocks which is something we're going to talk about in just a little bit but this is just our starter css for the day but you can see how i've already organized it and those comments will really help you get back up to speed if you come back to your project a month later or anybody else that's working with you they'll easily find the section that they're looking for okay the third suggestion here is to sort properties and typically you sort those properties alphabetically but this is not everybody's choice some people prefer to sort properties in their own groups that they have chosen and mdn has some suggestions for that too so i'm going to put a link in the resources to that mdn page that has those other suggestions and also a link to an article that discusses sorting your css properties alphabetically now that's not how we write them so i'm going to show you what i do here in just a second but i want to give you a memory technique to remember this by sorting alphabetically at least in the english language we usually say that abc's which would be our alphabet so just remember abcss and that will help you remember sort alphabetically so a b c s s if you will okay i'll save the markdown file now let me show you an example of this and how to do this in visual studio code typically in a small project it's easy to find these and really i don't sort them so you can see i have margin padding and box sizing now if i did this alphabetically box sizing would be on top but that's not how i write css it's not what i'm thinking of when i write the properties like if i create a flexbox for example and we'll see that as we get down here to the body i have these properties i had display flex and then flex flow justify content and then align items well that starts with a but i don't think of it in that order i would write my css in this order but then to sort it alphabetically say when i'm done if i'm working with others and or i want to come back to the project later and of course just find the properties easily select all of these properties and then control p now i'm on windows that may be a little different on mac but control p to open up the command palette in visual studio code and then the greater than symbol and type the word sort you can see it shows mine says recently used sort lines ascending but you may not have that so type the word sort and then you'll see the different sort choices choose sort lines ascending and you can see it sorted these alphabetically for me so sort lines ascending is what you want from the command palette now they're sorted and i know what property say the specific property i'm looking for maybe align items it's right at the top or gap i know it's going to be right here alphabetically likewise this helps you find issues say you had a second gap or a second min height or display just you accidentally put the property in twice and one was defeating the other due to the cascade well you would find it when you sorted because then it would say put both displays on lines right beside each other so you would find those issues so sorting alphabetically the abcss is a good way to go now i'm going to press ctrl z to undo that because i'm going to come back and change this in a little bit and once again i'm thinking about these flex properties especially justify content and align items in that order and i know right where to find those again small projects it's much easier to just leave it this way okay back in the markdown here's the big one that we're going to spend most of our time on today and this is for larger projects you wouldn't typically do this in a small project but on a team larger projects they usually have a naming convention methodology so i'll put follow a naming convention methodology if i could spell that right there we go methodology and a very popular naming convention methodology is b e m which stands for block element modifier so block element modifier there we go so there are others this is just a popular one so i want to go over this popular version and of course your team may not use this they this may not be the one you adopt going forward but do know it exists and know that it is used a lot so you may see it out there in code example so now let's go back to our code and besides what we have here we start with a block here at the bottom so you can see i've defined a button class now typically even frameworks and libraries that you may learn later to work with on larger projects will apply classes to put most of the styles on the page and you can see other than the html and the body i'm really starting out here with the class and now above i have a utility class here and some variables but other than that just here in the reset i had of course the button and i might put an image here and set the display to block or anything else i'd want to do in the reset but after i get past the big elements of html and body i'm probably going to use classes and these naming conventions other frameworks and libraries that have been built by third parties those usually apply classes as well so we start out with a block and here it is also it says aka components you may hear some people refer to these as components instead of blocks but they're talking about the same thing now this has a semantic meaning it's important it's saying we're defining a button so the button has a width of 100 a height of 100 pixels both and a border radius of 15. this is our basic button style that we want to use on the page and when we go to our html we see three buttons and they all have that class button and of course they can have different content but then we get to the next part of block element modifier methodology and we're first going to look at the modifiers i'm going to scroll for a little more room here and i'll get that just right up to the top of the page and underneath i'm going to paste in some code and we can see those changes but notice what i've done i've i put another comment here that says modifiers now this isn't something you would need to do in your code i am just identifying these for you for the tutorial but what modifiers are about are about incremental style changes so here we're going to have blocks with modifiers so our button is the block and then we have two dashes not one if we were to name something we might have two words in the name and we could put one dash in between and this is why bem uses two dashes and later we'll see two underlines but these two dashes indicate that this is going to be a modifier and then you can see i've got the name secondary the other one i've got the name lean and the third one i've got border and here you see a name that has one dash in it so border and then lg stands for large so a large border so these are incremental changes we can make to the blocks with modifiers now we don't replace what we previously had the button class we add this in addition in our code so for example here on our second button we could put btnsecondary and i'll save once i spell secondary correctly and now you can see we have a yellow button notice in the html we've applied both the button class and the button secondary class likewise on the third button we could put our button dash dash lean and now we have applied that modifier as well to our block so our button lean modifier and the third button here is leaning and i believe we had another one let me look back yep border large so we could apply another class you can apply as many as you want to so we have button dash dash and then we said border dash large and save and of course now it's outlined in white so it's a little harder to see than what we had with the black border before but we'll change that here in the future but it did of course make it a little harder to see right now i could press alt z so that wraps well it didn't there it is it's already wrapping it just wrapped on part of that closing element but there we've applied modifiers to the blocks and these modifiers have provided incremental changes to our more important semantic blocks our buttons and those are the starting styles that we want and then of course we can modify them with each class that we apply okay let's move on to elements now but before we do that i need to add some html over here we're going to turn our three buttons into a header so i just need to add the rest of the header so i'll type header and add a class of header to start out but that closing header tag is going to need to come after all of our buttons as well so we'll add that much and save and you can see the changes will be over here to the right after that i'm going to add an h1 and it's going to have a different class so it's going to have header two underscores and then title and there we go and then for the title i'll just put bem for our block element modifier lesson and save that much now we see bem on the page after that i'm going to add a nav that will be wrapped around these buttons and it's going to have a class also that is header two underscores and nav and of course i need to put the closing nav after the buttons as well and i can save now we could say we're finished with this and apply some classes but let me first describe what i'm doing here so you can see our component is the header it is the important semantic element and now what's within it depends upon the header so we have a header with two underscores and then a title this is the element the e in bem the block element modifier methodology and then we also have another element that is dependent on the header and that is the nav now inside here we could say are these buttons dependent on the header or not because if we have a button style we're using throughout our site and not just in the header we would want to leave this as it is because this would be important so we don't have to redefine the same button style somewhere else however if these are buttons that we're designing a specific way just for the header then they would become dependent on that header and if that was the case then we would say header two underscores button and of course we would change everything else here so i'm going to select one button and then ctrl d to get the next and the next and there's one more there i've got all five of them now and now i'll arrow to the left and i'll put header two underscores and save and you can see we've changed each one of those classes now because they are dependent on the header it's also important to note that this does not display the structure so you might think you need to put header two underscores then nav and two underscores and then button that is not the case you only wanna start out with the major component the block name the b here so header two underscores and then whatever the actual element is so in this case it's a button in this case it's a nav and in this case well it's an h1 but we're going to call it title because that semantically makes more sense to me and you can do that again there are no hard and fast rules but if you're following this pattern the actual rules for the pattern are two underscores and then element likewise for the modifier two dashes and then the modifier so i'm going to save these changes and then let's go back and modify the styles that we have over here and include those elements as well so there is our block section and we actually need to include the header itself now inside of our block so i'll start here under our comments and say header then we're going to have a background color and i'm going to say var and change this to our header color or background color that was defined before so there's the b after that we would also have a color there we go color and i'm going to put another var two dashes and choose color after that we're going to have some padding i'm going to say one rim on the top one rim on the left and right and one half rim on the bottom we'll make this a display of flex flex dash flow whoops flex dash flow is going to be row and no wrap and then we'll justify content and we'll say space dash between we'll save that we definitely see a change but not everything we want yet let's go up and remove some things from the body all we really need to keep are the first three properties let's get rid of these bottom three and we'll save that and we see a few changes at the top not exactly everything we want yet but we're getting closer and i think i see i forgot the word header on the color so if i put that should change those to white letters that looks a little better as well and now let's add an element section that i'm going to put right after our button class and i'll just put the comments there it looks like it's wrapping here but what i wanted to add along with just the elements editor is the comment no standalone meaning in other words they're semantically tied to the block they are dependent upon that block so it's not just a button it's going to be the header button style and likewise it does not represent the structure so what we do not want is the header underscore two underscores nav to underscores button you would not want that you would just want header underscore button and i don't know why i have the period there looks well that's weird i'll control z to change that again maybe that's marking something let's see if i can just back up one not header nav underscore button and save okay i've got the comments there now i actually need to put in the style well it's going to be the same as the button so i'll just copy this control x to move it down put it underneath and paste it in but we're going to change this now to our header to underscores and button now we have our button style back in place for the header but we don't have any of the modifiers in place that we applied to the html so i'm going to select all three instances of the dot btn here arrow to the left one arrow to the right and type header two underscores and now they should once again be applied and we can see that so we have the yellow background here and we also have the leaning button here on the third one let's check that border large maybe we just need to change that color to see it better or we could apply another class that would help us see it better so besides the button lean and border large let's go ahead and apply the header to underscore button dash dash secondary to this third button as well and now we can see the yellow color here and then we see the white border as well notice there is a space between each class that we apply to these elements in the html okay jumping back to the style now we have modifiers that are applied to the elements instead of the blocks you can apply a modifier to either one but just know an element is going to have the two underscores and of course a block is just going to be the class defined such as header or previously we had dot btn for button now this all helps with organization and like i said when you're working on teams it's great to have that document communicate what you're working on as fast as possible and follow the pattern of the team and if you just have a large project on your own this may help as well one other thing this can help with and i want to show this with the element section is when we're selecting something it's good to say a class like dot header has a specificity of 10 and we've seen that with the specificity calculator that should still be linked in the course resources however if we did this and then instead of using an element selector such as bem which is a class when it's all said and done this is just a class a header two underscores button instead of header space button if we did this which says the class and then the element within the class or any button elements within the class this has a specificity of 11 instead of 10 it's much better to keep that specificity even and using classes like this helps you do that as well so that is just an added bonus that i wanted to go ahead and mention i hope all of these suggestions help you organize your css in the future and i plan to use some of them coming up next on the final project welcome to the final project of this css for beginners course at the end of my html for beginners course we built a full website for the little taco shop that you see here it's a basic website with very minimal css applied but it provides a great foundation for our css final project we're going to take this basic html website and turn it into this modern website with responsive design by applying much of what we've learned about css let's get started today by looking at the starter code and this is available in the course resources you'll want to download this code because it is the full website that we completed at the end of my html for beginners course and it will give us a great foundation for this project now if you completed that you already know what all is in the code however if you hadn't let's quickly go over it we have a few html pages and we're going to make a few changes to those not many though and then we have an image folder img inside this image folder i've included some larger images today so we will be able to delete the smaller images i left those in as well though in case you wanted to launch the project as it was in the beginning as we finished it in the html for beginners course but the top names when you see the double names they end with the dimensions and of course the width on the smaller the older images is 400 pixels the width on the newer images is 1000 pixels and i've included those dimensions in the file names so for the duplicates you always want to choose the one on top and then i have a fourth image that does not have a duplicate because we will add one page today but let's select those duplicates and then i'm going to press the delete key and now we're left with just our larger images likewise there was an examples folder and this just gave us example images of what the project looked like at the end of that html course if you wanted to complete the challenge at that point you were welcome to try to look at these images and complete that and then look at my code so let's click that examples folder and also press delete as we no longer need those files now there is very very minimal css applied to this project so we will be cleaning out everything that is in the css file you can press ctrl a to select all and hit backspace and delete those 19 lines of css that did exist so that gets us started now let's go to the index.html which is the home page and we'll start by looking at the head section the head section contains all of the meta tags that we would need in a project you can see author and description however there is one missing that we're going to have to add but since we're creating another new page and we're going to just include the about content that is currently in the index html we had an about section we're just going to make that a new page and abstract that just remove it from the index and put it in its own page today so let's go ahead and do that and then i'll show you what's missing from the head section in all of the pages we already have so let's click the new file icon then type well it looks like maybe i already included it here before i actually do that but you would want to click the new file icon because the about page would not be in the starter code i guess i typed that in earlier but now we have a blank html file i'm going to type an exclamation mark which is an image shortcut but if the shortcut doesn't pop up for you you can press control and the space bar and then you should see the shortcut menu and select this top abbreviation and this gives us the outline of a page now there's a couple of things it includes that we don't have in the other html files from that html beginners project one is this meta tag that has xua compatible ie equals edge they still include that with this image shortcut but it's not really necessary unless you're concerned about possibly supporting internet explorer which at this point has been discontinued and for the most part is no longer in use but you could include that the one that i want to make sure we include today is the next one meta with the name equal to viewport then the content is equal to width equals device width and initial scale of 1.0 we absolutely need that meta tag in the header of all of our html pages so we can make them responsive so i'm going to copy this and then i'll go back to that index.html and i'm just going to put it right underneath the utf8 that we have in the medic care set which is character set here in the head and of course we can remove that space and save and then i'm going to want to do that in the hours.html as well so i'll put that in get rid of the blank line ctrl s to save one more time in the contact dot html and we'll put it right after the utf dash eight line and save so now that we've done that back here in our about we could fill in all of these blank things that we have or we could just copy the pattern that we already have inside of the index.html so i'm just going to copy the full head section here the entire head element with the opening and closing tags go back to about and then i'm going to select it here and paste it in now i'll just change some information now i can see some of that's going off the screen so i'll press alt z and get that code to wrap so i can see everything you'll want to change of course my name in the author meta tag to your name and now for the description instead of the official website here we would just want about the little taco shop so this is the about page and that's what we have and we could put the same in the title about the little taco shop everything else is pretty much as we need it for now so i'll press ctrl s to save that and of course we see a little auto formatting now where it included the lines the spaces that you see here but we'll just leave it as is and then we will come back and get that information or abstract that out of the index dot html when we get to that point now moving back to the index.html file i'm going to scroll down and we have a header section already clearly defined but we can see it goes clear off the page i don't have the closing tag here yet however everything we see here is really all i want in the header now we had a figure here with an image but we're going to pull that out of the header and put it inside of its own section so select everything from the opening figure to the closing figure and i press control x to cut and then i'm going to backspace and remove those spaces and then i'm going to type section and press tab and so i get a closing tag as well and then press return or enter so i get a new line and then i'm going to control v to paste that figure in so now the section contains the figure and the header contains the nav and the h1 and i'm going to do that on all of the pages but and i'll remove that hr which was the horizontal rule however i want to apply some classes here as well that will help us format our css so before i make these changes to the other pages let's apply those classes in the final lesson before this project we learned about the bem block element modifier naming convention and i'm going to use that sum today for each section of the page so we'll start here with a class and we're going to set this equal to header the same as the element name and it will be the parent class for everything inside so when we label the h1 we'll say class and here i'm going to say header two underscores and h1 likewise for the nav we'll say class equals and then we'll have header two underscores and nav and when we get to the unordered list we'll say class equals and then we'll have header two underscores if i could find that underscore key again and then ul but then i'm not going to apply classes to the list items some may want to do that and that would be okay this is a small project and i don't have any plans to put styles directly on these list items so i can accomplish everything we're doing today without doing that so i'll leave that as is however we do need to rearrange some of the menu so i'm going to select this top list item for about and press control x to cut it out we'll leave the menu as the first selection the second selection will be the hours page the third will be the contact.html so at the bottom i'm going to paste in the what was the first list item it's now the last list item but it will no longer be an anchor tag that goes to part of this page it's going to go to the about.html page so we'll switch that over and we don't really need to have the whole abbreviation here so i'm going to remove that it was good to learn about abbreviations in the html course but now we'll just use the word about because that pretty much sums it up likewise we can change contact us to contact and store hours can just simply be changed to hours likewise our menu can just be menu and that will still indicate what these pages are all about now let's scroll down to our section that contains the figure and we're going to call this a hero section it's the part of the page after the header where you usually see a large image or an attention getter that's often referred to as the hero section so let's give this section a class and we'll just set it equal to hero and then inside we're going to put an h2 element that is not currently there so we'll type h2 press tab and we can complete the closing tag that way now let's give this h2 a class equal to hero two underscores and h2 and we're going to put a welcome here that the owner of the little taco shop wants us to add and it's going to say bien benitos which i believe is saying welcome in spanish as well so we'll just have that h2 there and this won't be on every page it's only going to be on the home page after that we have some changes to make to our figure itself now the figure can just stay there as is so really what needs to be changed is the image and maybe applying a new class to the fig caption so we're going to start off with the image and it's still the tacos and drink image but the dimensions have changed so we just need to change the name so it's going to be 1000 and you can see vs code knows what's in our image folder and it wants to help us complete that the alt will stay the same the alt attribute the title will stay the same but now we need to go ahead and supply the actual dimensions so we can avoid that content layout shift that may happen and that was discussed previously in a lesson as well of course we will be styling this image to be a responsive image too and then we're going to give the fig caption a class while we're here and this class is going to be off screen and what that does if you remember when we had covered that in a previous lesson is it will take this caption off the screen but it will leave it available for screen readers for accessibility so that is important as well so it won't be viewable but it will be readable and now we need to structure these top two sections the header and the hero section in all of the other html files as well so we have a good foundation before we start in on the css so i'm going to scroll up for now and select this header on line 15 and scroll all the way down to line 44 where the section ends i'll hold down the shift key and click my mouse select all of that because right now our about.html does not have any of this content so i'll press ctrl c to copy and now i'll go to the about.html page and inside the body element i'm going to paste all of that in now it will currently be the same as we have on the index page but we can make some changes here and the first change we're going to make is to select this last list item and control x to remove it from the bottom of the list and it will now go once again at the top of the list so ctrl v to paste but it's not going to go to the about page we just want to put in a slash which means it will be the root page that will take us back to the home page so we'll type home there and then the next one should go to not just hashtag menu because that means it would be on the same page it should go to the home page which is the slash and then hashtag menu and that will take the visitor back to not only the home page but then to that particular spot on the home page which is the menu so now we've completed or adjusted the menu for our about page but then we also need to change this header so instead of welcome to the little taco shop let's just put little taco shop at the top of our about here and then after that we can scroll down and change our hero section just a little bit as well so we're not going to have the h2 bian benitos on the about page we're just going to have the figure and this is going to be a different image here so this one will take the last part of this image file because this is named taco delicioso tacos delicioso if i could pronounce that correctly and then we'll have a different caption here as well which should say tacos delicioso i could double check my spelling on that as well and let me go ahead and check the title tag the title is basically the same so i'll copy that but we'll put an exclamation mark in there because the title and the alt do not have to be the same the dimensions are the same 1000 by 667 we're once again going to have a class of off screen on the fig caption but the caption should be different so this will be try these delicious tacos and we can save and now we have the header and the hero section complete on the about page so now we can make the same similar changes to the other two pages we have but we won't need to paste in the content we really already have it there so let's go to the hours page and we can scroll down and look at that menu and what we're going to have to do is apply those classes once again but we essentially already have the menu that we're going to need to have on the hours page we're already linking to home however the next one should be menu so let's cut out that about with the control x and we will link to the home page and then the hashtag menu and then we'll have hours after that i'm sorry we won't have hours after that we're on the hours page we're going to have contact and then we'll have the about page which once again needs to remove the slash in the hashtag and we'll say about dot html and alt z to wrap this code because we no longer need the about lts it will just be about and then we'll make those similar changes here no longer contact us it will be contact no longer our menu it will just be menu and then home so we can save now let's scroll down and we'll take that figure once again ctrl x to remove it and then underneath the header create just a little space i'll highlight that hr to remove it we'll type section and now in the section we'll paste in our figure and then i'll give just a empty line after the section and we're now ready to apply the classes as we expect to have them here on the hours page as well or we i guess we could go ahead and change the details on the figure it's going to be tacos tray again but it's going to be 1000 by 667 i believe but let's check this because vs code will help us so tacos tray there we go 1000 by 667 and then the rest of this won't change except the dimensions so 1000 by 667 and then the fig caption once again is going to need that class equal to off screen there we go now we need to add the class up above which is hero and save now let's go ahead and scroll up and we'll apply those header classes once again at the top for the hours page so we have class equals header and then i'm just going to copy this to save just a little time paste it into the h1 paste it into the nav and paste it into the ul and now this first one is going to be two underscores in h1 the next one is going to be two underscores and nav and the last one is going to be two underscores and ul and now we've added the classes we need one more time let's make those same changes to the contact page now so our starter will be the header with a class of header the h1 will then have a class of header two underscores in h1 the nav will have the class of net our header two underscores and nav and the unordered list will have a class of header two underscores and ul for an ordered list looks like i put some extra spaces in there i'll remove but we've applied the class to the header let's look and see if we have the menu in the order that we want it as well so we want to start with home and then about is okay but once again it needs to be to the about page here so we'll say about dot html and we're going to remove the abbreviation alt z to just wrap that code so we can see it all remove the abbreviation so it's just an about link which we will select with control x then and remove and put it at the bottom of the list and the second one should be menu which is where we really want customers to go then hours and about there so that is in the correct order we'll remove the extra wording so we just have menu hours and about and save and now finally one more figure to remove to put in its own section element so highlight that control x to remove it we'll leave the header to itself i'll delete that horizontal rule element then above here we'll add the section element inside we'll go ahead and add the figure the section will be a class equal to hero and then here we have tacos close up so this is going to change as well so we'll say tacos now we've got close up 1000 by 649 which is just a little different so delete that and now the height here is 6.49 the fig caption once again gets the class equal to off screen and save and now we are finally ready to write some css and what we're going to do at the top is what you've seen me do at a lot in a lot of different tutorials and that is import some fonts from google i'm going to control b so you can see this full line for just a second and notice i'm importing two fonts here so after the url you see family equals and there's fugaz one and then there's also nunito that you've seen me use in several tutorials using both of those fonts today and if you remember from the typography lesson of how we can go get those fonts from fonts.google.com you can do that and then import those into your css as i have after that we're going to have a css reset it will be fairly minimal and you have seen minimal ones throughout some of the lessons but let's go ahead and label our sections as we create our style sheet today it's going to start out with the everything selector the all selector but then a couple that you may not have seen that are commonly in resets that i did not add in the lesson on sudo elements but you see these pseudo elements so you also see the all selector with the after and the all selector with before so we're going to do that for all of those and then we'll put in what you typically see me put the margin zero padding of zero and then a box sizing of border box now that's not all of the reset that i want to use today but that's a great start we also need to put something in for the images and this will make all of the images display block which gets rid of that minimal little space below the images that they were originally designed to be in line so they have that little spacing problem and that will remove that then we'll set the max width to 100 and we'll set the height to auto and this will make the images responsive for our project i'm going to ctrl s to save that much and then scroll just a little bit there's a few more styles to add to this reset the form elements like input text area and button for example the ones that we're going to use today so we'll say input button text area all three of these and other form elements that you may use do not inherit font properties like other elements do so we need to say font inherit if we want that to happen and when i save we'll probably see them formatted yep on three separate lines there but that is the end of my reset for this project okay after that i'm going to add another section and this is where i will define css variables now i'll define these as i need them and then be able to come back and reference them so i'll just say variables here and then as you know that starts in the root selector so i'll just have a selector here and then inside i'm going to have some labels too and the first one that we will do today is font and i know what i'm already going to do for font so i can at least add one variable now and that will be ff for font family and the main one that i'm going to use is that nanito font and then after that i'm going to have the fallback of sans serif and then for the headings on the project is where i'm going to use the other font so i'll say font family headings and here i'm going to use let me spell this correctly fugaz 1 and then it has a fallback of cursive okay i can add just a few more variables that i know i'm going to use right away and the other one for fonts is the font size so i'll just call that fs and i'm going to use the clamp function that we learned about so the font can grow and shrink and this is modern css this helps us prevent adding it prevents us or keeps us from adding many media queries as some older css might have done so our page can stay more responsive without having an abundance of media queries attached to it so our minimum size today will be one rem and then we'll allow it to grow at 2.2 viewport units based on the height and then the max size would be 1.5 rent that's what we'll put in and so that will allow the font to grow as the page gets larger and of course it will stop so it doesn't get any smaller than one rim okay after these fonts variables i'm also going to put in another note here for colors i like to define all of the colors in variables and that way i can just change them in one spot and see how they work together i will be coming back to add more colors here but i'm going to start off with a background color and i just want a basic orange it's going to match something that's in the photo that we have and i think that's going to look good then i'm also going to use a background color dash fade and that's because we're going to use a linear gradient now i've picked out this color it is a fade of the orange color so i'm using rgb and that's 2 5 2 2 two zero one six zero and you'll see it's a faded orange after that i'm going to use background image to create this gradient that we're going to fade with so here i'll say linear gradient and then we'll go to the bottom and then we'll put in our variables that we just created above so we'll start with the background color and after the background color we'll put a comma another variable and we'll start in and we'll go to the background color fade so we'll start at the top with the full orange and we'll fade down to that faded color okay that's looking like a pretty good start but i could put in just a couple more for the body so just underneath this i'm going to put in two dashes and body dash background color so i'm planning on a different background color for the body element than i am the html element and you'll see how that works here i'm just going to put in a basic white with hexadecimal code and it looks like i left out the semicolon over there there we go so now everything formats better and then we'll just have our standard font color i don't even need to say body font color it's going to be the main font color and this will just be a black with hexadecimal code as well okay i will be coming back to add more variables but right now i want to move on to the next section and just add a few utility classes that i always use so i know what i need to put here i'll put in utility classes normally i would probably just copy and paste these from a file that i would already have written them in before but we'll go ahead and write these out we've got our offscreen class and this is a style i use to move elements off the screen but yet keep in the document flow so a screen reader will still read the content but maybe i don't want them to appear visually on the page so i'm going to say position and we'll set that to absolute and then i'll say left and we'll say minus 10 000 pixels so it will be way off the page the next class i need is no wrap and this is when i want to ensure that some of the text does not wrap in an area that is awkward and we can do that with the white space property and then we'll just set that to no wrap and we'll see how we apply that class later and the final one is simply a center when i want to center text that say in a paragraph or in a heading we need the text align and we can set that to center with the utility styles complete we're now ready to finally start applying some styles directly to elements and classes so i'm going to bring vs code to the left and go ahead and launch the project to the right now remember we removed the few styles that did exist and everything we've created so far really doesn't apply to the page except for that reset at the beginning so we have removed more than we have added to the current project but we now have variables ready to apply and utility classes ready to apply but we also want to add what i would call general styles so let's put in a section here and we'll label this the same way we have the other sections are in the same style and now with our general styles heading we'll start with the html element itself now i'm going to use a different color on the html element that will be the background for the body element but if you remember from some previous lessons we also use scroll behavior on the html element and we'll set this to smooth and this allows a smooth transition to when we link to other parts of the page and we'll still be doing that on the home page this index.html when we go to the menu that will be located below the big image and so in the second half of the page so we'll have scroll behavior smooth and if i save that you won't see any changes to the page because that affects more of a behavior but i'm going to try to save after every property applied so you can see those changes the next one we'll apply is font size and we'll use a variable for font size that we already created and now when i apply that we'll save and you see the font size instantly got larger and that reminds me earlier when i applied the font size variable above i believe or that was in the background color fade let me bring this back to full screen quickly because i think it's in the linear gradient vs code tried to help me out and it accidentally added a second var to each of these that should have been noted when the video was created as well so hopefully you've already caught that error but i need to correct it here so now we just want one bar each in that linear gradient and we'll save and if we come back now to the page we don't see a difference yet because that's not applied but it will be applied here very soon so down here in the general styles once again in the html we have increased the font size now let's say font family and we'll use the other variable we created there which was ff and if i save again we should see the font family has changed and it does for the page after that we're going to set a background color and this will be a variable as well and it's the bg color we see here in the list and i just want to make sure vs code doesn't add a second var now you can see we've changed to that orange that we set but now this is actually the fallback because we're going to use the background dash image and here we're going to use that background image variable we created and we'll find that here in the list as well and save and now we should see it go from orange to that lighter orange as we scroll down the screen and that's what happens so it's a linear gradient from a full orange to a lighter orange but this will change as well as we apply some styles to the body so we'll see how this is going to be applied to the overall page now here we're going to have a background dash color as well and this is the variable and here we started this with body so it's the body background color and now we'll go to the next line and save i can see this is wrapping just a little bit so i'm going to press alt z so anytime it wraps it'll just go down to the next line for us so we can see everything okay now we want to set a font color now currently you notice it changed everything because the body is completely over the html element that will change when we adjust the width of the body as well but for now we'll just see white again so now the color for the font will be variable and this will be the font color variable that we set and really we shouldn't see a change because it's basically the default font color of black now let's have a min height for the body and we'll set that to 100 viewport units of height and if i save we shouldn't see much of a change because it's already taking up over 100 viewport units of height already after that we'll set a max width to 800 pixels now i'm not sure of the width here to the left but we can see really 800 pixels is still within the range of this so let's drag this over and look at the full page expanded now and now we can see here was the 800 pixels and now we see the html element behind that goes ahead and expands to the full width of whatever viewport is available so we see that orange that linear gradient fade here we will change this so the body will be in the middle and we'll see orange to the left and the right i'll move this back to the right for now and now underneath this we need to define a couple more things one is going to be the margin for the body zero on the top and bottom but auto on the left and right will center this so when i save again we don't see the change here but when i drag this over we now see the body is centered bringing this back to the right we want to add some borders a border on the left and the right so i need to set a borders variable and a border color variable so i'm going to scroll back up here to the colors and let's set this border color variable first so we'll say border dash color and this is going to be a flat black so 333 for the hexadecimal you can see it's a flatter black compared to the true black that's above it here with zero zero zero then i'm going to put in another comment here and just put borders some might put the border color under borders but i want all of the colors grouped together so that's just my preference now here four borders let's go ahead and set this borders variable that we might use more than once in our project as well and this is going to be one pixel solid and now let's go ahead and use the borders color variable that we created now vs code once again put in two vars so i have to watch out for that when i've already typed var sometimes it wants to insert that for me okay we've created a border color variable and a borders variable we'll scroll back down to the body element and to finish out the body element we're going to say border left we're going to set this to borders and now i'm going to press shift alt and the down arrow so it just copies that down because i also want a border dash right but i don't want it on the top or the bottom and then i'm going to set well let me go ahead and save and if i bring this over you can probably see the borders just barely outlining the left and the right but now i want to set a box shadow as well on the body and that will be 0 0 so what we would typically see for the x and y but then there's a blur and i'll set that to 10 pixels and i'll use that border color again there we go and save and now of course we can't see it here but when i drag this back over we can see there's a little bit of blur along each side and that's what we want just a nice subtle effect so as we scroll the page and we'll see it stand out even more on this lighter orange at the bottom you can see the blur along the left and the right of the body here where we have our center column okay dragging this back i'm going to scroll for some more room and then we have just a few more general styles to apply before we get to classes and the different sections of the page let's have our and i'll want lower case here h1 h2 and h3 headings on the page we're going to apply the font family which was for the headings so that's dash dash ff and then we'll select headings and that will change the headings font you can see that change on the page immediately and then we're going to apply some letter spacing now we could do this with pixels or different values i'm going to use ems which would essentially be the same as referring to the font size that's already on each heading so the spacing will vary based on which type of heading that it is and if we looked at this as a rim instead of an em then it would be one tenth of that setting so what we have for the font size already at the smallest was one rim but at the largest it was one and a half so that could be anywhere from 16 pixels to 24 pixels so one tenth of that would be anywhere from 1.6 pixels to 2.4 pixels but this will just space out this font i think this heading font needs just a little extra space so when we save you can see the letters have now spaced out just a little bit more now i'll select the h2 and the h3 but not the h1 we have a couple of styles we want to apply here so we have a margin dash bottom so on the bottom only we'll set that to 1 m and now we're going to use a separate color so i need to define a highlight color up above in the variables again so here we have dash dash and i'll say highlight dash color because we might highlight other things on the page besides headers with this variable as well so i called it highlight color it's a color i've picked out to go with the orange but it's not orange it's 51 178 51 and save and you can see it's a green color much like we'd see here on the bottle of giarito's over here this mandarin has a nice orange but it also has a bit of a green in the label so let's try that with the highlight color as well so now using this highlight color and scrolling back down to the h2 and the h3 we'll set the color here and we'll be var and we'll use highlight color now that we have that and saved we should see that change on the page and yes our bienvenidos and about lts and taco trivia has all changed as well as our menu and remember this about section is going to get moved to the about page we just haven't moved it yet okay after the h2 and the h3 i'm going to select the paragraphs on the page and set their line height which this is something i frequently do it looks a little bit better and we'll just set it to a little bit larger value it doesn't have to have a specific m or ram or pixel here line height going way back to our typography lesson can just be a numerical value here so we've set it to 1.5 you might not see much of a change from that but there's a little bit let me take it away and save and yeah you might see just a bit of a change there but not a whole lot but i like something i do like to add okay the paragraph has the line height let's look at our links on the page up here so these are going to be our main links on the whole project really we don't have a whole lot of extra links so i'm going to select the anchor which would be a link of course you have to have an href with it but just to select the link itself and then we can say any link which is a pseudo class selector and this any link pseudo class selector if you remember selects both the links that have not been clicked and links that have already been visited and so here we'll say color and now we're going to need to set a link color variable as well as hover and active so i'm going to scroll back up and find that colors list of variables and we'll go ahead and set the link color variable link dash color this will just be a black color again and then we'll set also link dash hover and here we'll use hsla which will allow us to have a black color but then we'll also have this transparency and i'm going to say 0.6 so it's 40 percent transparent and 60 visible essentially after the link hover variable we'll also set a link dash active and for that we're going to set it to orange which is the same as that html background let's save those three variables and scroll back to our links that we're styling and here for link color we'll say var and then dash dash link and it is our link color that we're selecting and then the next one we'll have would be the anchor with a hover but then also let's say anchor and you could say focus but here i'm going to use focus visible which the difference is the focus might remain on the selected element however focus visible after it's used it will change and it might not not make much of a difference in this project but it's something i've started to use more and more instead of just using focus so here i'm going to say color var and we'll set this to once again link but it's link hover and we'll put the semicolon after that as well we can save those changes we see we've got black links here the hover of course is already working so you can see it fade now as we hover over each one of those but then after both of those we still need the active state as well so we have the active pseudo class selector and here we're going to say color and not color with parentheses color and then var parentheses dash dash link and it's going to be active there we go save and so now if we were actively selecting a link so when i click on it you can see it turns orange and menu is still fairly small up here but when i hold down the mouse button the link turns orange and now our general styles are finished for the project so we are ready to move on to the header section so i'll add a label inside of our style sheet for the header and then we will start applying styles to the header section i'll scroll up so this header is at the very top here and well at the very top there we go and then the first style will apply is now to the header class because we started using bem the block element modifier naming convention when we get to the sections and the first one we applied that to was the header so we'll say position and we'll make the header a sticky positioned element we'll put the top at zero so it's at the very top and then we need to put the z index to a setting of one so it stays on top of everything else that might scroll under it and when i save we don't see much of a change yet but we certainly will soon the next thing we'll style is the header two underscores and the h1 so the title of the page itself and here we're going to say text align and we'll set that to center and save and you can see that text did center now we've got just a few more variables to add so i'm going to scroll back up to the variables once again and we're at the colors list and i'm going to add a header dash bg color and here we're going to set that background color to black as well after that we'll set a header dash color and i'm going to set that to white and then after the header color while i'm here i'm going to go ahead and set a nav background color and set that to white also so we've set three new colors there then underneath the border section i'm going to add another label and say standard padding and i'm going to create a couple of variables here so padding let's say dash tb and that means top bottom so you might want to abbreviate that differently to communicate that better i just happen to use that abbreviation this time i'm going to set this just a 0.25 em and then the next one is padding dash side not size but side so on the left and the right and differently here i want this to be 2.5 percent so total if i apply this to both sides it will take up five percent of the width i'm going to save that you won't see a change applied because we haven't applied any of these variables yet and then while i'm here one more to add will be a standard margin and underneath that we'll just say margin variable and i'm going to use clamp again here so at the smallest it will be 1 em and then we'll set it to 2.5 viewport height units and then 1.5 em will be the largest it would possibly be now that this is for the top and the bottom on the left and the right i'm going to set it to zero so even though that wrapped what we did was apply clamp to the first value of the margin shorthand and then we applied 0 to the second value which would be the left and the right okay with those variables defined now let's scroll back down to that header section where we were applying other styles so we had the header and we were at the header h1 i'm going to apply the background color now so i'll say background dash color this will be var and then we'll have our header background color that we could select and i'll save and we can see that change now it is all black so we need to apply a color and this will be var as well two dashes and header color and now that we've selected that we will save and now we can see welcome to the little taco shop across the top once again after the color let's apply some padding and we're using the shorthand here for padding so we'll say var two dashes and padding and this will be top and bottom first and then we'll say var two dashes for padding and this would be the padding on the sides and we'll save and we got just a little bit of padding now to apply itself to the top and the bottom left and the right for the header it looks like i'm not closing that out properly so put that extra curly brace there we go and we're finished with the header h1 now so now let's move down to header two underscores and nav now for the nav we're going to have a separate background color variable that we created so var two dashes and here it will say nav background color and now something to discuss quickly you may be wondering why i created these extra variables and yet some of them have the same color values well i'm specifically naming them so i know where they apply and later on when we create a dark mode they may vary more than they are varying now in the light mode so it's good to have that extra control and extra labeling over these color variables okay now that i've applied that background color let's add a border i want lower case here border dash bottom to our nav and there i'm going to say var and apply that borders variable that we created so there's borders and i can save that and we now see a line across the bottom here of the nav because it's also within this header element and then after that border let's say font dash weight we'll set that to bold when we save we should see those links change a little bit the font definitely changed there and what else can we apply let's say box dash shadow 0 for the x 6 pixels for the y 5 pixels for the blur but this is going to be a shadow that looks like it's coming straight down so then we'll also set a minus 5 pixels and that offsets that blur and then we'll have var and we'll set the color here to the border dash color and save and now we get this nice little straight down shadow underneath that bottom border of the nav the navigation but also essentially the header itself and finally we need to style the unordered list so adding the header to underscores unordered list and here we'll start out with some padding and i'll say var dash dash padding and this would be the top and the bottom and then once again we'll say var hash dash padding and this would be the side value save that now you can see those dots for the unordered list were brought back in so we know we've added that extra padding it has just a little more room but now let's say list style type we'll set that to none which should remove those dots beside each list item now a display of flex and when i save you'll see that change because it instantly makes it a row by default we'll say justify content space bash evenly and we'll save and now it spaces out those items and then let's add a gap and let's call the gap one rim so what we expect there and so we definitely have a gap between those items even if they were all squeezed together if the screen got smaller and now a couple of quick notes on the header before we move on one is we did learn how to make an animated mobile header but we're not applying it to this project because it would essentially be overkill we've just got the four links and four pages to the project and we can easily link to those on mobile or in desktop by just listing them out here on the page so you don't always have to apply everything you know how to do to every project and i didn't want to do that to this project and it's worth noting why also we previously had welcome to the little taco shop across here but that's really a lot so quickly i will open the file tree go to the index.html and bring this back and let's scroll up and find our h1 welcome to the little taco shop and let's just remove the welcome to the because what we really want is just little taco shop across the top after that we can go back to the file tree once again select the css and hide the file tree i know we're squeezing all the code over here to half the screen so we can see the page more often but when i bring it back you'll find that it's not wrapping and it may be a little easier for you to read so if you're working on it with me maybe you're just viewing the code like this so you can see those longer lines where we've used some variables are not wrapping to a second line now when i bring it over and look at it like this so i just wanted to show you that i'm going to bring this back to the left and now likewise we can bring the project over and look at it in full screen as well and you'll see it's coming together a little bit better we've definitely got some changes to make yet however this has certainly helped and if we look at the other pages since we put in that work ahead of time to put in the correct image changes to the html to create those hero sections and of course apply the classes to the header and the nav as well we see those changes applied as we go to each page already so we're making a lot of progress we just have some more progress yet to make so now i'll drag this back to the right and we can begin the next section and that next section is our hero section so right underneath our last header style we'll create a new label and we'll call this the hero section with the label and for that we'll start out with our hero class which if you remember is applied to that section element and we'll say it's position relative because we're going to place something absolute inside of that hero section as well after that we have a hero h2 and if you remember this is only on the home page our index.html and that is our bienvenidos welcome here so after that we can go ahead and apply some styles to that and the background dash color for that h2 is going to be a new variable i need to create so let's scroll back up to this color that will have in our variables list once again there's all the colors so at the bottom here we're going to call this two dashes in hero dash color and now this color is very much like our highlight color so it's rgb 517851 but then we also need a transparency color here so we could make this rgb a so we can have that transparency and then this will be 0.75 and i don't need the extra parentheses so that means it will be 75 viewable and 25 transparent so when we scroll back down let's apply this to that hero background color here so we'll say var dash dash hero and there's the hero color after this hero color and i can save and we're not seeing much of a change right now but we will here in the future we'll say a color and actually i'm realizing i just labeled that wrong and i also need a hero color but i also need a hero background color so if i could label those correctly in my mind it would definitely help us out so let's go back up here this should be the hero background color that i just created instead of the hero color so let's label this bg there we go underneath this we're going to have a hero dash color and the hero color itself should just be white once again for now okay now we should apply these correctly you can see when you get many colors it can be very helpful to label those and think about them in a good order and i'm not always doing that even when i do take all the other precautions so now i've got a hero background color for the background color and here this should be var dash dash hero color for the font and now save and since it disappeared i think i may have possibly applied something incorrectly even now so let me shoot back up to the top and take a second look at these hero colors here and i see what i've done wrong i have rbga instead of rgba so it just takes one typo to set something off rgba and now we should be good and we have the green color there and you can see our green background now for that h2 with the white lettering here at the top and of course we're going to change this some more if you remember when i previewed the project at the beginning we saw this is really an animated drop down let's add some more styles to this h2 before we approach the animation so we'll say padding and here we'll have 0.25 m and then 0.5 m on the left and the right we save that we can see that extra padding applied letter spacing and here let's give this a 0.1 rim so again just that 10 percent which should space it out just a little bit after the letter spacing let's say text dash shadow and so we can apply a shadow to this lettering we'll say 2 pixels x offset 2 pixels y 5 pixels blur and now let's use that border color variable that we have used in the past for shadows and we save now that helps that white stand out just a little bit it lifts it up off of that green background just a bit because of that shadow now we need to say position absolute and we're going to move this to the top and it's going to be minus 100 pixels and first let me save this before i move it so you can see what changes it instantly makes it an element that is not in the document flow and a block element would of course span the 100 width but now because it is removed from that flow due to position absolute it does not have 100 width as a block element normally would okay now let's go ahead and move it off the page to start out when the page loads so this would be minus 100 pixels but before i do that even i guess i should show where we're going to place it to the left and the left would be 20 pixels this value will not change so it's just moved in just a little bit but now the top will be minus 100 pixels and now it should disappear and it will disappear it has disappeared but it will of course be animated and drop down and reappear once we apply that animation and now we need to create the animation itself and then we'll apply it so here let's say at keyframes as we learned in our animation lesson and let's say show welcome is the name of our animation we'll start out with a zero percent so where it starts out at the very beginning we'll say the top is going to be minus 20 pixels instead of that minus 100 and now we'll transform we're going to do two transforms we're going to have a skew and that will make that lean just a little bit we'll say zero degrees and then minus five degrees after that we'll also have a scale y and we'll set that to zero to start out with okay after the zero percent now let's say at eighty percent and this is where i like to give it just a little bit more than it actually ends up with so it gives it just a little bit of extra movement or bounce so we'll say the top is 30 pixels now will definitely be visible the transform it needs to start out essentially with the skew again and we're going to move the skew just a little bit so i'm just going to copy these so we can just change the values inside paste those in and so now instead of 0 degrees it's going to be 10 degrees here we'll leave that at 5 degrees and the scale instead of 0 is going to be 1.2 and now let's get our finishing values at 100 for the animation here this will be a top at 20 pixels and then we'll once again have the transform and i'm just going to copy that down and this would be a minus 10 degrees and a minus five degrees and then the scale is going to be one instead of 1.2 and when i save you won't see anything yet because we haven't applied the animation but now let's go ahead and apply that animation here so we'll say animation and this is the show welcome animation we'll make it take a half second to complete we'll start with the ease in and out transition and let's give it a delay now i could make this longer to be more dramatic but let's give it say a one second delay so we see the page load and then we get a little welcome drop down and we'll use the forwards property here which means it will keep the state of when the animation ends so it will remain visible as well let's save and see what happens there's our welcome now to see it again we'll have to of course navigate away and come back to the home page but then we see our welcome drop down that's a nice little animation to go with our project now let's move this over to a full screen and of course this is how it appears here but if i go ahead and press ctrl shift and i or we were to right click and choose inspect let's choose a mobile device like the iphone 6 7 and 8 and make sure it's still positioned correctly i can go to a hundred percent view we can see it a little bit better let's reload and there's our welcome so yes it's not crowding into the image too much and everything looks good it's always good of course to check your mobile design as you go and i've been leaving the screen open so we can see everything but typically i do design for the smallest first and you do want to check this along the way and we will continue to check it so for now i'm going to go back to full screen and drag this back over to the right with the animation complete i'm going to drag vs code back over to full screen now and we need to look at a couple of sections in the html that are on every page before we get to specifics about each page and those remaining sections are the main element and the footer element so let's go to the footer of the index html first because i usually like to style that after the header so once we get down to the footer itself we can see we have footer here with no class currently let's go ahead and add the class of footer as we did with the header before and then let's also apply some classes here to our copyright line so we have copyright and then the html entity which is the copyright symbol right here and then we have the little taco shot well we want to wrap this in some span elements inside of this paragraph so these lines do not break where we do not expect them to we don't want the little taco shop or we could just put little taco shop we don't want this line to break so let's put a span element here and now of course it generates the closing span element immediately i'll put the closing paragraph tag on a separate line and paste the closing span afterwards i'm going to do the same here too for copyright i guess i need to create the element instead of just typing span there we go we can copy that closing span and put it here so we've wrapped both of these in span elements now let's give them both the class equal to no wrap one of those utility classes we created that ensures that this line will not break in the middle of this content and this line will not break in the middle of this content so that helps us by ensuring this presents itself in the way we want it to this will not prevent it from being all on one line but if we're on a smaller device and it needs to wrap the lines it's going to break where we want it to and not in the middle of that content somewhere else let me go ahead and remove that extra line there and then let's apply some styles to the footer but we can also put this footer in each of the html pages so after i save the index and copy the footer i can go to the hours page and i can replace the footer that is here and we will not need that hr that horizontal rule so i'll highlight it as well just to remove it when i paste that in let's do the same for the contact page and put that in here paste and save and then we'll also need to do that in the about page but if you remember the about page doesn't have everything else yet so it doesn't even have a main element that we will be adding but let's save this for now and now go back to the index now that we've updated the html for the footer let's do the same for the main element and this will not take much at all right now we have a main element with no class and as you can expect we'll put a class equal to main here and then here we have an article that has the id of about well this is going to be moved to the about page so let's select this full article here down to the closing tag and then i'll control x i'll go to the about dot html and this is going to go inside of a main element that has the class of main and you can see i created that with the image shortcut by typing main dot main and it instantly created the main element that has a class of main inside we'll paste that article which will be the content inside of this main element now i'll save this much and we'll come back but now let's go back to the index.html where we need to label the article that's inside of this main element so i'm going to highlight that hr and remove it as well but now the article that's in here has an id of menu but it also needs to have some classes and the first class we're going to apply here is going to be main two underscores article because each main element on each of these index pages in the project contains an article if not more than one article so we will label that and we'll make sure that this is the only article that's inside the main and if it's not we will need to change it but it looks like it is and that's fine it contains the menu which we will come back to as well but those are the two main classes that every html page in the project will need so let's go to the hours now scroll up to the main here and it looks like it doesn't currently have an article but we need to apply the class equal main and to stay consistent here let's go ahead and add an article element to this html page so we have article i will go ahead and cut out the closing tag and paste it above the closing main tag and now let's give this the class that is expected as well so it is main two underscores article and save that now let's go to the contact page and here in the contact page you can see we have two sections and an h2 so let's go ahead and apply the class equal to main and let's change these section elements to articles to stay consistent with the rest of the main content here and you can see we have a opening and closing and we have two section elements so i'm going to press ctrl d and i got the closing ctrl d again to get the opening of the second one and ctrl d one more time to get that closing tag now i can just type article once and it changed all of those but now i need to select just the opening article so i'm going to select the full thing including the less than and greater than sign ctrl d again and it just selects the opening article of the second one the right arrow to get to the end the left arrow wants to get just behind the word article and now i can add a space type class and then set that equal to main two underscores and article and now this should be applied to both so we've got it here on the top article and we've got it on the second article that is on the contact page one other quick change to the contact page is i want to put the our location information above the contact form so let's control x and then just move up here above this article and paste in our other article so we've just switched that information around so now that our location information with the telephone is on top and the contact form is on bottom and finally let's go to the about html and you can see we have a class of main that we applied already but now let's apply the same class here that is main two underscores and article and save because i believe if i remember correctly there was only one article for this page as well so now we've made all the adjustments for the main element and the footer element on each of the html pages let's select the style.css file once again and pull our code over to the left so we can see the project on the right and now we can continue to make some more changes after we have styled the hero section we're now ready for the footer section so i'm going to put in a label in the style sheet for footer and now we can apply those styles with the footer class and here this is going to be position sticky as well as the header because we want it to stay in place so the bottom will be zero so that will put it directly at the bottom and i'll save that much and let's go ahead and scroll so we can see the footer down here it's our copyright with copyright symbol and the little taco shop now let's go ahead and add a background color and this background color will be the variable and we'll just apply the header background color so it stays in sync with the header and if i save yes it all turns black so we need to of course apply the color and this should be the header color as well and we can save that and now we see the font is white they're on top of the black background let's apply some padding as it looks pretty scrunched right now so we'll say padding top and bottom we are using that shorthand again so the next one would be padding side and now we'll go ahead and save that so there's just a little extra padding around that now let's put text align and set that to center and save and so now we can see our copyright with the copyright symbol and the little taco shop is centered and we have our footer across the bottom it stays in place when we scroll as does the header i'm going to copy this heading we put in here for the footer and then i'm going to scroll up and put in a very similar heading for the main element so i want all caps again to make that change after that let's directly style that main class first and speaking of copying it's going to get the same padding that we had here so i'll just copy that and put that in for the main and when i save we'll see we get a little extra space here with our menu our menu is not looking so great right now and it's one of the last things we'll do so let's start looking at some of these other pages the hours look pretty good they got just a little bit of extra space from that padding or the about has a little more information on it as well and so we can see some of that there let's go back to the hours for now okay after we've applied that basic padding to the main element itself we have the main two underscore article class and here let's apply a scroll dash margin dash top and this will be 6.5 rims you usually have to play around with this value to see what works based on your project and how much space possibly your nav is taking up because what this is going to do is enable the article information to show instead of scrolling underneath the header and then let's set a margin here and we'll just use our var and margin and save now this is something we actually would see back on the home page now if we choose menu and it scrolls well we're not on a device right now that would actually use up the page or we haven't expanded this menu to take up more room but what will happen will be it will prevent the menu from scrolling underneath this header if we have a taller menu or we're taking up more room by the time we have finished the styles that's probably what will happen okay a couple of extra things to put now and one of these at least we'll see differently on maybe the contact page because it has some extra room here already so let's go ahead and apply these styles let's say main and we'll select the article as well and now let's say the first child pseudo selector and we'll give this a margin dash top of 1 em so this would be the first child that we would see here the first article and that would be the same on any page it gives just a little more room between that hero image and the rest and now i'm going to copy this down so shift alt and the down arrow add the extra space and this will be for the last child and we do have the one page that has two different children and that has the our location and the contact form so for this last child we want to calculate some height here so let's say min dash height we're going to calculate we'll take 100 vh which would be 100 width or 100 height pardon me of what is available now let's just subtract 20 rims from that and save to give it just a little extra room to scroll and this might be more visible when we don't have as much content such as well the about page has some if we go to the hours page let's see now we have some extra room here as well so if we remove this and then save we don't have that extra room it's kind of scrunched it's nice to have that extra scrolling room and that's why that is being applied so again preference as a lot of cs css is a preference now we have just a little extra room there for the scroll and now we're ready to move on to individual page sections i'm going to drag vs code back over to full screen i'll scroll up here and copy the main comment divider that we have or label if you will and here i'm going to switch this to about and save so we'll start in on our about page in the about section i'm going to do something different here that some may agree with or may not agree with with bem but i don't want to refer to the main as the parent for the about information i want the word about there so we know it's on the about page so i'm going to add another class here that is just called about and that goes to the article so then what i refer to inside of this article instead of referencing main as the parent i'm going to reference about it just makes more sense to me for these classes in particular and i've only got a couple to apply but i want class about and then i'm going to use two underscores trivia and then on the paragraph that has the answer i'm going to say class and then equals this will be about answer so we have about trivia and about answer and even better than that i think i might put the word trivia here as well so trivia dash answer it's just a two word label but that makes more sense to me as well so we've got about trivia and about trivia answer and i did want two underscores there as well so there we go now let's switch back to the style css and put those classes in here so we'll have our about two underscores in trivia remember i put in about class in there but i don't really have any styles in addition to apply there i just wanted to refer to that about class as the parent and so we'll leave it at that margin will be that variable that we defined for a margin and then for the about trivia answer so we'll have about two underscores trivia dash answer and here we're going to set a margin dash top equal to 1m and save let's pull this over and see those changes applied to the about so here we go and see we've got a little extra space here too which also helps our scroll and then when we show the answer that is nicely formatted as well moving on to the contact form so i will focus on that and let's scroll up to see this content that we have on this page we definitely have enough height here when we have two different articles working with forms can be difficult but let's see how we can apply the styles here i'm going to put in a new label in our style sheet and i will put contact right here and then let's scroll up to make that the very top of the page and now let's start off with our contact two underscores in h2 but i don't believe we've applied these classes yet so let's drag this over to full screen look at our contact page and see what classes we need to apply to the rest of this html i'm going to leave the address as is it needs no further classes however the contact form itself does and i'm going to apply that same philosophy that i did to the about page where i have main article but i don't want to refer to the main element as the parent i want to refer to contact so i'm going to put a contact class here at the beginning for the article now for the h2 i'm going to put class and i'm going to set that equal to contact two underscores nh2 likewise for the form we can make this a contact form so i'll put class equals contact two underscores and form we'll do the same for the field set i'm going to start copying this so i just have to change the one word and instead of contact form this would be contact field set and now for the legend we're not going to apply that class but we're just going to put this off screen and we already have a utility class for that so this class will be off screen for the p here we'll go ahead and put in this contact form once again but we're just going to change the word form to p for paragraph and it looks like i should have selected the full element and then the next one as well and now i'll arrow to the end one arrow to go inside and paste in this class and now i can change both at the same time and put in the p for paragraph we'll save now we need to do something similar for the label so let's go ahead and select all three of the labels and then we can arrow to the end paste in our class and then once again arrow over change form and change this to contact label now let's do this for the inputs so select the first one ctrl d and there are only two inputs so that's all we need arrow to the right and paste in the class and then change the contact form once again and i shouldn't have done that but now i can control d to select it as well and then we have contact input as well but now we're going to have a contact text area so i just need to paste that in and switch this to text area and i believe nope there's one more and that would be the button and we have two buttons so ctrl d to select the second one arrow to the right to be at the end paste this in and this class is contact button so ctrl d to select both of those now that we've applied all of the classes that we're going to use in the form let's go back to the style sheet and drag it back to the left and we'll be looking at the form here on the right for the h2 we're simply going to set the margin to zero and save that now the field set and notice the label of the field set is already gone because we applied or the legend because we applied that off screen so it no longer had the contactless words here but we'll put in contact two underscores and field set and this will be a border of none so it will just remove that look even though the field set is still there after that contact two underscores paragraph here we'll set a margin to one m on the top and bottom zero on the left and the right that gives us some more space we can certainly tell that difference then the contact two underscores label here we'll say display of block and font weight of bold and we'll definitely see these changes makes our form look better as well now we'll select both the contact two underscores input and the contact two underscores text area for this we'll say padding is 0.5 m you can save and we'll see some change there the inputs got a little larger then we'll say a border dash radius of 15 pixels save and you can see they're rounded i'm going to scroll now that the form has grown a little larger so we can see everything again okay after the border radius we're going to have a border dash width of 2 pixels to just make it a little larger around each of the inputs and then a width of 100 percent and save and now those inputs take up the full width that they have available to them our buttons down here still need a little bit of help so let's say dot contact two underscores button now we'll say padding 0.5 m for those and save we can see the padding gets a little larger for those now and then we'll apply a border radius to match the other border radius 15 pixels and this should possibly be a variable that i have not created but that would allow us to just change it in one place and it would change it for the form as well as the button underneath that we should have border width and oh not border width on the buttons i'm sorry let's have a background color let's say bar and let's pick that highlight color so we can have a different color on these buttons that looks good except the font doesn't look so great there so for the var let's say the header color and that should turn that white and make it stand out just a little bit more those buttons definitely look better than they did before so a quick check let's take the border radius property and control c and then i'm going to do control f to search for it and let's see how many times it has occurred it's just twice here inside of our project so if you wanted to you could absolutely make a contact border radius variable and then you would just change it in one spot and of course the form the inputs and the buttons would match but you don't have to i did not clearly at this point but that would be an option so now before moving on to the menu let's look at each section that we've already styled for our page and here's the full page so our about page has a nice huge hero image and we see the about lts some information and our taco trivia that looks good the hours page another nice hero section and a simple bit of information about the hours and let's look at the contact page we scroll down we see the our location information after the hero and the contact form as well so that all looks good i think the menu is still going to need some work and we might apply another style or two yet that we haven't but we're making a lot of good progress let's go ahead and ctrl shift i to see how everything's looking in a mobile device as well so maybe we could choose fit to window and we see this iphone 6 7 and 8 let's look at the iphone 5 and that also looks good let's reload and see how that animation works that works as well so yes the menu needs some help but how do the other pages look oh the other pages still say the little taco shop hours instead of just little taco shop or something similar and again we're on the smallest device that we might ever see right now which is the iphone 5 se things may have changed in the future of course if you're viewing this at a later time so here it wraps the two lines on the header but anything larger than the absolute smallest device it looks like it won't as long as we adjust our headers here instead of say the little taco shop hours we can just say little taco shop here it just says contact us and on the about page once again it just says little taco shop i think we want our header to be consistent and say little taco shop no matter which page we go to so let's go ahead and make those changes as well in the html as we go back to the code so i'm going to close this back out drag this back to the right and bring the code over to the full screen quickly going to each html page we'll make sure that the heading matches so it should just say little taco shop where we have the header h1 for each page scroll to the top of the hours and we'll see what we have here it says the little taco shop hours so we'll go ahead and remove the and ours save that file the contact page said contact us well we would prefer it still say little taco shop here and of course the h2s will handle the other labels on the page so we had our location and below that we should also have the contact form as well there we go let's see what was here yep our contact form so that looks good and the about html should also just say little taco shop and it does and of course the titles of the page say more about the page as well so about the little taco shop here the title at the top of this says contact us lts i guess to keep consistency we could say about lts on this other page as we're going with that abbreviation several places so about lts there the description can still say about the little taco shop and then hours let's see what the title is here lts hours that's great and of course for the index we want the title to be the little taco shop so everything is looking good once again in the html let's go back to the css and start working on the menu now before applying styles to the menu i want to pull up an mdn reference so i'm just going to paste this link in and i'll make sure it is in the course materials as well so the course resources but here on the grid layout and accessibility page in mdn it says grid and the dangers of markup flattening so what we're going to be doing is taking the html table that's in the index page that comprises the menu that is displayed and we're going to make it a grid too often many people just use div elements to make their grid and a grid needs that flat structure essentially for the grid items so it can review or refer to each grid item in that regard because it's not going to look at subgrid items subgrid is a proposal they're discussing here but it's not implemented as well so we want to avoid that dangers i'm going to pull the code back over and bring up the index.html and we can see our table and right now the table is not flat notice how it has parent elements like the t head element and of course table row elements and then inside we get the th and td elements for those table cells whether they're a header element or they're just a table data element and so grid doesn't work that way it needs flat elements but we can still work with this we don't want to remove the semantic markup of a table to further illustrate my point instead of just having this here underneath i'm going to paste in what you might see a table constructed of for a grid using divs now this is a flattened markup table essentially that would be applied to grid and notice how i just used divs and applied all of these classes and this is what you do not want to do but i guarantee you will probably see this somewhere when a grid is applied and you see a table on the page i'm going to press ctrl z though because this once again is not what we want to do and you can tell by this markup it is not flattened however there is a solution for this and it is a display setting that we can put in the css that will help us convert our table to a grid i'm going to drag this back to the left so we can look at one more web page and i will link to this as well in the course resources and it's the can i use web page and i'm looking at display contents notice what it says about display contents it causes an element's children to appear as if they were the direct children of the element's parent essentially that ignores that parent element and that will flatten the elements for grid to use without removing those elements so we just need to put display contents on some of these parent elements that grid will not use it says this can be a useful or this can be useful when a wrapper element should be ignored when using css grid or similar layout techniques and then when we scroll and look at everything as far as how well it is applied now let me pull this out to the full page so we can see everything from can i use you can see it's got basically 95 percent acceptance here and we're not going to worry about internet explorer again and most every other major browser is accepting that use here opera mini is one that's not in uc browser for android but chrome safari safari on ios chrome for android we're good in almost every major use case here so i'm comfortable with using that as we switch our html table over to a grid and again i will link to both of those for you back to our website here back to the right and now i will pull this back over to look at our code in a full screen so we can get the ideas of what we're doing with the table as i did with the contact and about pages i applied a separate class here to refer to as the parent and i'm going to do the same here it's going to be the menu class and then i will refer to these again with bem notation but i'm going to refer to menu as the parent so here we're going to have a class i'm going to set this equal to menu two underscores and h2 for the our menu heading then the table itself say class and then menu two underscores and container because this is going to contain our menu for the caption for the table we'll use this class and set this to off screen our utility class once again as we will not want to view this caption on the page but we do want to retain it for accessibility now we will be setting the table head and the tr element the table body element and the table foot element to that display contents so grid actually ignores those the content we want for the grid and the content that we actually want screen readers to read will be inside of the th and td elements so that's where we'll apply the classes here so all of the opening th's that we have here i'm going to select three right there and we might even have a fourth but i think we just want three right now for the menu headers so we'll take this over with the arrow to the right and i'll say class equals and this is going to be menu two underscores and header now something else i want to do here one thing i noticed and i must have done this in the html course as well so if you went through that you can apply the scope column to this first cell as well and i'm not sure why i didn't before it might have just been an oversight the second thing is we were looking once again at how to do abbreviations in html but i want the full word quantity here now so i'm going to remove the abbreviation and just have the word quantity in the second th cell for the table okay after we have got the menu headers now we're going to have menu item classes so we will come through here and then whether it is the th or the td in these other cells i'm going to make it a menu item so i'm going to start off with the remainder of these table data cells because there are several i'm pressing ctrl d to get all of them selected and i think that's going to be it nope one more maybe there we go one more so at the end of that i'll arrow to the right i'll put class and i'm going to set this equal to menu two underscores and item okay scrolling back up to where we have the crunchy and then of course we have the soft label down here we're going to apply classes here as well i'll have a class i'm going to set this equal to menu two underscores item and then i want a second class here that is just going to be menu two underscores and cr for crunchy as we'll need to refer to that later for the grid possibly and then for soft we're going to do the same thing so it's going to be a class equals menu two underscores item and then menu two underscores sf for soft and finally let's scroll down to the very bottom where we have chips and salsa it spans three columns so besides menu item here i also want menu two underscores and cs and i believe i have now applied all of the classes that i wanted to apply for the menu itself one other thing i am going to do while i'm here in the html is remove this line break and then we have a paragraph here and i'm going to apply our utility class of center to this paragraph that has our back to top link that should appear underneath the table let's go back to our style sheet and let's drag this to the left so we can see changes applied to the table now as we apply these styles i'll start by scrolling up so we can start at the very top of our available space and i'm going to put in a label for the style sheet for the menu now underneath this the first thing i'm going to do is select the t head element the t body element the t foot element and the tr element and this is the only table in the project so i feel safe doing this without classes if it was a larger project i might have made a display contents class and then applied this to each that class to each one of these elements so here i'm going to say display contents it also took those parents out of the flow so now even though they're still in the page it made them all run into one line so we will definitely see changes now as we make the table so or the grid i should say let's create that menu container class if you remember this is applied to the table element itself so we'll say display grid and if i save after each change we should definitely see changes as we go so now just by applying display grid it changed how that viewed after our display contents was applied now let's say grid dash template dash columns and we're going to use the repeat function we want three columns each with one fragment so let's save now and we once again see changes to that table now let's go ahead and map out our grid template areas but we really haven't assigned any specific classes like those that we applied to crunchy or soft so it might still look a little strange when we do this essentially though we only need to assign the labels to the ones that are going to take up more than one grid square so other in other words i can just kind of create the other labels without assigning them to elements so i'm going to have hd1 hd2 and hd3 i won't end up assigning those to classes at all then i'm going to have cr cr1 this is crunchy as you might guess the abbreviation hd was for header and then crunchy one price for one taco now i'm just going to ctrl alt and the down arrow a couple of times because one here is going to get changed to two and then one here is going to get changed to three okay after that let's create one line here for soft so we'll have soft taco soft one and then soft one price after that shift alt down arrow shift alt down arrow select one control d change those to a two select one control d change those to a three and save and so now we have the crunchyrose and the soft rose and the header so at the very end we're going to have the chips and salsa row so cscs cs because it had a row span of three after that we have essentially mapped out those grid areas it doesn't look like we want it to yet though because we haven't assigned that crunchy label to the crunchy label that we or class that we have and the soft label to the soft class or the chips and salsa label to that class so we still need to add those likewise let's go ahead and add a small gap 0.1 em so as we discussed before that could be as small as 1.6 pixels or about as large as 2.4 depending on the font size applied then let's give a margin bottom of one em as well now let's apply some of those labels so our grid looks a little bit better so we'll start out with the menu two underscores cr for crunchy and here we'll apply the grid area label of cr when we save we don't see much of a change yet but i hope to in the near future menu two underscores and sf for soft and here we'll say grid area sf save again so we see a little bit more of a change and then we'll say menu two underscores cs this will be grid area cs and save we definitely have seen some changes in the grid it's not what we want yet but we're getting there let's make the color here a var dash dash highlight color for this okay so we've got a chips and salsa that is now green and then we'll say font weight bold as well and save that looks good now let's go ahead and apply some of this to the other areas as well so let's say menu two underscore cr and menu two underscores sf here i'm going to take these two and maybe i should have organized this differently on my thought pattern but i want both of those there as well however there's also some other styles so i want a height of 100 as it takes up some of that extra space why is that not applying to crunchy i may have to go back and see what i did wrong there but let's go ahead and say these are also grids and then we want to place the content center which is the point of making them a grid so we could do that yes the crunchy style is not being applied so we have menu cr and that is what needs to be applied there let's go back and look at our html and see if that class was applied properly to the cr section oh it's just one underscore it needs to be two save and now go back to style and bring this over and now crunchy and soft both have that same style and everything is aligned better that makes more sense as to why it wasn't coming together quite as quickly as i expected and before we move on let's see if we could apply this differently now we still need the grid area here for menu cs but we could possibly remove these and let's see if we could include the dot menu to underscore cs without really making something strange there i think that's fine and it's a little more efficient we aren't repeating those two lines and now let's look at these headers and we could possibly add those in as well so one more comma and we'll say menu two underscores header and save and yes i think that style is going to work out as well however we still need menu to underscores header because we want to add a border dash bottom to each of those so we'll say bar and bring in our borders variable that we have created and save so now we have a border across each one of those headings now let's scroll for some more room and we're going to select that menu header again like it's fill menu two underscores header and then we also want menu two underscores item now for both of these we want a width of one hundred percent and then we'll set a padding to one em and let's put a border and then let's set medium ridge and we'll set the var equal to border color there we go and when we save that we've got borders around everything so in that regard maybe we could remove that border bottom and still be good and we save yes and it looks the same so one was just overriding the other and now let's select just the menu items and here we'll put a display of grid and we will once again place the content in the center and when we save that looks good as well now we didn't apply that above to the menu item where we set the same grid and center because we also really didn't want to apply these other styles to those menu items we wanted to keep them this separate color and not have the font be bold but that's looking pretty good right now as far as converting this menu table and leaving that semantic html in place we can apply some final touches to this menu as well but earlier when we were referencing the border dash radius property we said we were only doing it twice and therefore i didn't go ahead and create a variable but now i want to use it again and so now that i'm using it in another place i definitely do want to create that variable so i'm going to scroll back up to the variable section and underneath borders i'm going to create a border dash radius variable and just set that to 15 pixels so now that i've created that we can use that variable in all of the places that we are applying a border radius so now let's go ahead and change these two that currently exist to var dash border radius there we go and save that so no other changes will be made there but now we can apply these final touches to our menu table as well and we can use that border radius property now i could apply classes to the header and the footer but i'm not and they are being ignored for some things concerning the grid when we set that to display contents however they are still part of the document so we can still use them for selectors so i'm going to select the t head and then the th inside of the t head and say the first child which should be the very first cell that says tacos and here we're going to set the border dash top dash left dash radius and now we'll use our border radius variable once again and when we save we can see this now has the border radius of 15 pixels so likewise i'm going to just copy this down so i don't have to retype everything shift alt and the down arrow this is going to be the t head th last child and instead of the top left it's going to be the top right everything else should be the same and now we see that same border radius applied over here to the right finally we have this one large chips and salsa cell along the bottom of this table for the menu so here this will be the t foot and then we'll select the table data cell inside here we can set the border dash bottom dash left dash radius and this will once again be var two dashes border and use that border radius variable and once we save this we see that applied to the left corner so it just needs to be applied to the right corner so inside this same selector here for t foot td we can now also apply this to the right corner and save and there we have our rounded corners for our table as well we're getting near the end but there is a little more to do let's go ahead and look at the page in full screen or at the full site now and here's our back to top we can click we have the smooth scrolling that goes there we can go to the hours page everything looks pretty good there the contact form everything is good here the about page and the trivia that's all working well and our animation shows here let's look by shift control and the letter i to go into a mobile view notice how well our grid conforms it automatically adapts we didn't have to apply a media query the grid just works in this mobile view and that's great let's look at some other views here's a little bit maybe larger phone there we go so it is quite a bit larger it is the iphone 6 7 8 plus and there will size it down to 75 percent let's go ahead and look at the iphone x that gets taller so that should also make our text just a little larger based on how we used clamp with that everything's still looking pretty good the form still adapts to the screen size the menu looks good and it took us right to the menu when i click the menu link the about page the hours all is looking pretty good i think we could apply possibly a little bit of space or a class we might have to back to the top that we applied down here i think we at least centered it so we might change something there but overall it's good to just evaluate your project and see how everything looks to you as you go and you can tell it's looking good on mobile as well so let's go back to full screen view and we're going to make just a couple of changes there is one media query i would like to apply to this project although using modern css for the most part we've been able to avoid media queries we are going to put this media query at the bottom of the page so we'll say at media and then we'll say screen and now say min width and we'll say 576 pixels which is our small break point and that is similar to what bootstrap uses the css library or framework if you will and here we have header 200 scores h1 now let's select the pseudo element here and this is the before pseudo element and we're going to set some content on this h1 let's give a space and what i want to do is put a taco emoji in here and actually i want to put the taco emoji and then the space so we have a taco space and then we have the heading as you might expect i also want to do this with the after so i will just copy that down again shift alt and the down arrow will switch before to after and now with the after we want the space to come first and then the taco so we've got taco space heading space taco so this should show up on any screen that's larger than 576 pixels in width so when we save now we have tacos in the heading as well and that's a great addition for the little taco shop and it applies to all the pages where we set up our classes correctly but if we go to a smaller screen where we might not be able to fit all of that in they disappear and that is great too so that only shows in larger viewports let's go to an ipad there we have the tacos so just mobile it will not try to squeeze those tacos in and that is fine let's drag this back over we can apply just a little bit more to the media query as well and this is just something i want to do for the menu 200 scores header then we're also going to have it in the menu to underscore cr which was the crunchy menu two underscores sf which was the soft menu two underscore cs which was the chips and salsa we're going to set the font size to 125 percent so just a little larger on these larger screens for the headings you really if you wanted to you could do it to all of these but i just really wanted to make the headings stand out and so everything we've wrapped around here that you see in green has applied that larger font now just another 25 larger than it was there is one more media query to apply but it's not based on the width it's based on the preference of light and dark mode we have styled our light mode this would be our normal viewing for the website but many prefer dark mode these days and that includes myself so i definitely like to add dark mode when the preferences are set for that so if your system preference is dark mode that's what will display my system preference is dark mode so i'm going to put this media query directly under the variables we defined so it will be applied right away because all it really does is change the variables for those colors that we're using on the site so we'll say at media put our parentheses then put prefers dash color dash scheme and here i'm going to say dark so that is what my system is already set to so anything we put in here we'll start to overwrite what we already have for those variables so we need the root pseudo selector it's the pseudo class and now let's overwrite the background color and this is going to be black now we will not really see the change here because we're not seeing that orange color until we drag this over to full screen so if i save drag this over to the full screen now you can see it's dark but it's still fading to that light orange because we haven't changed that other variable yet either so let's change the bg color dash fade variable as well and i'll just make that gray just like my last name i'll save and now let's drag this over once again you can see it's fading to a gray instead of the orange to a light orange the next color we'll put in here will be the header background color now we'll start to see these changes so header bg color oh i'm sorry just header color not bg color let's make this white smoke and save and then let's go ahead and change the nav i said color now i need background color and by the way the white smoke i just find that to be easier on my eyes than the pure white that we've used in other spots let's set this to rgb 20 20 20 which is just a different shade of black essentially and now you can see that background color for the nav menu definitely got darker okay so we're going to have to change that text eventually too let's set the hero color and this is for our little animated part that drops down so our hero color is going to be a different flat black now when it drops down you can see that has also changed now let's set the body background color itself so this will be a big change when we first see it that will also be this flat black and that has made a difference now let's go to the font color itself which is what's being used on most of the page and we'll go with that white smoke that's just a little easier on the eyes than the pure bright white and so let's find a page that's using well here we see it inside of these table cells here but if we go look at a different page you can see it is being used right here as well okay after the font color let's apply the highlight color and where this was that green let's use white smoke here as well so when we save i believe that's in the animation and i'm not seeing that applied right now i'm not seeing the animation because i'm not on the right page here we go and oh no it wasn't in the animation because that has the separate uh background color that is slightly transparent but it is in some other areas like we were using it for the h2s and h3s and the table headings so we can see that's now using white smoke as well okay now let's switch the border color that's being used let's also make that white smoke now our table is standing out and now that border color was a bit of the shadow behind the lettering so now we've got a little bit of white shadow behind bienvenidos and that stands out on that green as well helping the dark lettering stand out and we still need to change our link colors so link dash color we'll make that white smoke you can see we're really making use of that color for this setting also say link hover is now going to be orange and then link active is going to be the lighter orange so rgb 252 200 103. and save so now when we hover over a link it becomes orange when i hold down it's a lighter orange and then we go to hours everything looks pretty good now you may have your own preferences for dark mode as well but just scan over the site see how you think it looks does everything look like you want it to oh these buttons need a little bit of help yet let's check our other page and make sure everything else looks good and then we might need to change something about those buttons we'll have to see what is going on there and that might be a correction that needs to be made in how they're initially being set as well so let's find where we had a button which was a contact button and you can see the header color which remained white or white smoke was being used but then that highlight color was the background and that has changed i think we need to change this from header color to button color and give us some or give ourselves some control over what color is the text on top of the buttons so we've added a button color variable now we need to define that above and then of course change it when it gets to dark mode as well so we were fine with it at first when it was the same as the header color so that's what we'll start off with and i believe that is just white so we'll put that and also put it in as white here but now we need to change this when we get to dark mode so let's bring this down into our dark mode definitions add this and let's change it to black right here and save now let's go ahead and go to our contact page scroll down and now we can see the text on our buttons and so that looks good the about page is looking good let's make sure the answer looks good for trivia that's fine here's an additional link in our page to the reference for the trivia the menu we scroll right to that everything looks good there hours pretty good i still might want to create a little space here with the back to top but other than that it's fine and back to the home okay so we are down to the final touches of the project so one of those things might be to organize the css now this is your own project but if you're working in a team for example you might want to organize that i'm going to drag this over to full screen for this discussion let's say the colors we have here there's there's probably the largest list that we have of anything in this project is the colors it might help to just use the abcss technique here to organize these so if we highlight all of those press control p and then the greater than symbol and now we might choose sort lines ascending so now all of our colors are ordered alphabetically and i could find them probably much faster now that i've done this so considering that maybe we should do the same thing for our dark mode we'll highlight all of those control p greater than symbol and choose sort lines ascending now you're welcome to do that for any or all of the properties and styles that are within this project if you so choose now before we finish this project there's one more thing we can add that would be a very nice touch but it is a preview of what's to come for you yet and that's because it's a touch of javascript just a little bit and i'll show you what it does it will update the year so it will put in the current year no matter what year it is and you will not have to come back and update the copyright on your site so let's put in a time element right here i want lowercase so i'll give this a time with an id attribute of year so there is our time element and we don't really need to put anything in it we'll just leave it as is with the id of year right there now let's go over to our file tree and inside the file tree let's create a js folder and inside the js folder let's create a new file name it main.js now we only have a few simple lines to put in here so i'm going to type const which will help me define a variable and i'm going to name that variable year i'm going to set that equal to document and when i refer to document i am referring to the html document and then get element by id and this will be year so you know we just set that attribute and then we are selecting it so we're selecting that time element on whichever page we load this javascript into from there i'm going to define another variable and i want it to be called this year notice i'm using camelcase to define that i'm going to set this equal to a new date and then i'm going to call the get full year method for that date so now i have the current full year in the this year variable and i have the element that we just created the time element in the year variable so i'm going to say year set attribute and then i'm going to select date time and i'm going to set it to the this year variable and then to display it on the page i once again want that year element and now i'm going to select the text content that's what's displayed on the page and set it equal to this year and save that's all i need are these four lines of code and with that we can import this into our page so we'll go back to the index let's scroll to the top because we want to load the javascript last after the css and we do that with a script tag and it will have a source attribute and there it is so we'll say js slash and then we'll just pick our main js nothing goes between the opening and closing script tags however you have to put it this way it always has a closing script tag it's not like some of the other elements that just has a slash to close out the first one you always see it this way we want to add one other attribute though and that is defer and that tells the script to wait until everything else is loaded before loading the javascript and we will save now if we go back to our page notice it says copyright 2022 little taco shop if you're watching this in a different year and you add this same code it will say whatever the current year is there now if we go to our other pages notice it still just says copyright symbol in little taco shop because we haven't added that javascript to the other pages yet but we can do that now so let's drag this over and we also need to make that same change to the footer on every page so inside of our copyright line here that has the span class let's select that with the c and then we'll go to the hours page scroll down and we will select the same line and paste in the new line and save the contact page scroll down select the copyright line paste in the new line and save and we also need the about page i believe so now let's scroll down and here we'll select that same copyright line and we'll paste in the new line but we haven't added the javascript yet so let's go back to our index html now we could just copy this same script line and we can use the same javascript file for every page so back to the hours page paste it in underneath our style sheet line back to the contact page we should do the exact same thing and then finally the about page we should do the exact same thing then save and now let's once again look at our site and notice that no matter which page we're on we now have the year referenced in the footer along with our copyright notice and everything looks just as it should okay guys just a few closing notes and you could call them corrections if you want to i just want to adjust a couple of things we're currently on the hours page for the little taco shop and i previously forgot to put in an h2 for this page so i'm going to do that here on line 48 and i'm just going to put hours in there and save something else that's been bothering me about this page the whole time was the back to the top link that we really don't need anymore there's not enough content on this page for it really to even be there so i'm going to remove that back to the top link on the hours page other than that i'm happy with how this page turned out of course everything is preference when it comes to css your design choices your preferences may be different than mine so feel free to make your own changes also at the contact.html page i previously removed every hr the horizontal rule element but i think i'd like to put one back here just between the two sections on this page or between the two articles if you will so i'm going to put this horizontal rule back between those two different articles on this one page one other thing i want to do is just change the text a little bit on the buttons so i'm going to click the file tree quickly go to the style.css file and here under the contact to underscore button class i'm just going to add a font weight of bold and save and now once we want look at these buttons i just like how they look a little bit better with the bold font always go back and reevaluate your code make your own choices and of course you don't have to agree with my choices the best way to learn is experiment and see how it works out for you so that's the end of the project congratulations you've completed a large overhaul on the little taco shop website and styled it with modern css very few media queries necessary we added a nice animation and it does work in mobile devices as well even though we didn't need those extra media queries so if we go back to an iphone 6 7 and 8 style we can now see how all of this looks in a dark mode and it is still working as we expect it to great job completing the project and completing the full css for beginners course
