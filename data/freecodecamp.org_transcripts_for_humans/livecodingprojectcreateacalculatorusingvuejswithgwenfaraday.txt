With timestamps:

00:10 - all right
00:15 - all right hi everyone
00:17 - um
00:19 - so today
00:20 - there was actually a miss a
00:23 - mix up
00:24 - where we kind of mixed up the stream
00:26 - keys and so
00:28 - i have actually been
00:30 - building a calculator for the last hour
00:33 - and it wasn't live
00:36 - so
00:37 - yeah sorry about that it's an hour late
00:40 - but
00:41 - i'm still gonna build the calculator
00:45 - if you don't know me my name is gwen i
00:47 - run a channel called faraday academy
00:50 - here on youtube
00:51 - and today free code camp has nicely let
00:54 - me continue my series of streaming
00:59 - all of the free code camp projects but
01:00 - built in vue.js and you can find the
01:02 - link to the repo for all the projects
01:05 - it's right in the description below
01:07 - specifically today
01:08 - i'm building the calculator project
01:11 - and so let me just give you the
01:12 - breakdown real quick
01:14 - so
01:16 - the calculator is of course one of the
01:19 - front end projects on the free code camp
01:21 - site
01:22 - and
01:23 - i'm going to be building it with view
01:25 - this library called math js
01:28 - which
01:29 - basically helps with
01:32 - well mathematical operations in
01:34 - javascript it can give you
01:36 - a safer evaluation function so you don't
01:40 - have to use eval
01:42 - in javascript
01:43 - and i check the source code it doesn't
01:45 - use eval under the hood which is good
01:48 - and it also helps you with rounding
01:51 - errors
01:52 - using different types of numbers like
01:54 - big num
01:56 - stuff like that um bootstrap view same
01:58 - thing i used last week when i was
02:01 - building the drum machine just for a
02:02 - little bit of styling it's a lightweight
02:04 - styling library
02:05 - and then here is not really a mock-up
02:08 - but this is actually a screenshot
02:10 - of the calculator that i built for
02:13 - the free code camp curriculum five years
02:15 - ago
02:16 - and so i'm pretty much following the
02:18 - same pattern except i'm making
02:21 - the buttons look more digital and modern
02:23 - but you know it's almost the same thing
02:27 - so
02:29 - by the way here's my code pen
02:31 - and this is the calculator i built back
02:34 - in 2015.
02:36 - so
02:38 - let me just see real quick make sure i
02:40 - can see the chat yeah so this is a
02:42 - calculator i built way back then and i
02:43 - was checking you know for so long i
02:46 - didn't want to look at this code i just
02:47 - didn't want to see it i was like oh no
02:49 - what did i write back then
02:50 - um
02:52 - but
02:52 - basically i'm using jquery and
02:55 - where is it where is it
02:57 - i am using
03:00 - yeah i'm using javascript's eval
03:02 - function which if you
03:05 - read mdn or any of the other
03:08 - documentation sites for javascript
03:11 - you know they'll all say don't use don't
03:13 - ever use eval because it's not safe
03:15 - so i'm not going to be using that today
03:17 - i was just trying to i guess look at
03:19 - what i did back then
03:21 - but yeah
03:22 - i mean only so many ways to do a
03:24 - calculator now since the stream
03:26 - accidentally started an hour ago
03:29 - i'm kind of starting in the middle
03:31 - but not really because basically the
03:34 - only thing that i've done so far
03:36 - or the only things that i've done
03:39 - are
03:40 - i started the view app so view create
03:43 - started a new view app
03:45 - i installed bootstrap view
03:48 - which i set up here where is it
03:51 - in my main.js
03:53 - i have to
03:55 - of course import the library
03:58 - use dot use to
04:01 - set up the plugin so i can use all of
04:03 - the components with vue
04:05 - and then import the styling so i
04:07 - imported bootstrap and bootstrap view so
04:09 - that was what i did for setup
04:12 - in my app file
04:14 - i
04:16 - added a container in a row and a column
04:19 - just to center
04:20 - the calculator on the page
04:23 - and then
04:24 - in the actual calculator
04:28 - it's kind of weird to start in the
04:29 - middle but i'm gonna i'm redoing all of
04:33 - the javascript here so
04:35 - i'm gonna start from scratch in the
04:37 - actual
04:38 - calculator javascript so
04:41 - but yeah so the buttons are actually
04:44 - inside of a card a bootstrap card
04:48 - and i have the output screen
04:52 - and
04:53 - these button
04:55 - this container with all these rows that
04:57 - contains the buttons
04:59 - and so last week
05:01 - with the drum machine that i built in
05:03 - view
05:04 - i used divs to kind of make the buttons
05:07 - look like this
05:09 - as square
05:11 - but someone pointed out to me that
05:12 - actually for accessibility reasons i
05:14 - should be using
05:16 - you know actual html buttons
05:18 - and
05:19 - not just divs
05:21 - so
05:22 - i changed that today
05:24 - and
05:25 - for the calculator i'm using actual
05:27 - buttons so
05:28 - i guess for screen readers and stuff it
05:30 - will be easier much much better for
05:33 - navigation
05:35 - all right
05:36 - so that's pretty much it and then for
05:40 - styling
05:42 - i just have some styles pretty basic
05:46 - setting like height and width of
05:49 - the
05:50 - width of the card height and width of
05:52 - the buttons so they all look nice and
05:54 - square bootstrap kind of made that easy
05:57 - and then i'm also
05:59 - using bootstrap's colors
06:02 - they're very warning colors for these
06:04 - orange buttons
06:07 - if you don't know i mean
06:09 - i'm sure so many calculator examples are
06:11 - built like this but let me open the
06:15 - mac calculator oh it popped up on the
06:18 - screen so the mac calculator
06:21 - looks kind of like this
06:23 - and
06:25 - it's pretty much the same so orange
06:27 - operations
06:30 - um and then they have
06:32 - you know dark darker colors here so
06:35 - kind of mimicking that a little bit
06:40 - um i'll probably
06:42 - update the styling a little bit later
06:43 - but for right now i'm just going to
06:45 - start adding in the viewjs javascript
06:49 - so
06:50 - yeah hopefully that's not too confusing
06:53 - to start with
06:55 - it's not really starting in the middle
06:57 - because it's mostly just styling that's
06:59 - been done
07:00 - and
07:01 - now for
07:03 - the
07:04 - javascript i'm gonna have to add
07:09 - um
07:10 - basically i'm going to have separate
07:13 - operators
07:15 - oh let me pull up the calculator one
07:16 - more time
07:18 - uh so i think this calculator does it so
07:21 - let me do just
07:24 - yeah and so you can see the first
07:26 - operand right the 54 i typed in and then
07:30 - i
07:31 - hit the operator
07:33 - which stays highlighted
07:35 - and then
07:37 - i
07:38 - start typing in a second operand which
07:40 - comes up on the screen
07:42 - and then i can hit equals
07:44 - and it will evaluate the
07:48 - operation the expression
07:50 - so
07:51 - um i can
07:54 - yeah so i'm going to use the same
07:57 - basic
07:58 - method here
08:00 - and i'm going to do
08:02 - store these
08:05 - variables in data
08:08 - so
08:09 - let's see
08:13 - hi quincy thank you
08:16 - um
08:18 - yeah uh
08:20 - let's see i have operand
08:23 - so i have operand or i'll call this
08:26 - first first operand and second operand
08:29 - unless someone has a better idea
08:32 - and this is going to be a string
08:34 - because it's easy to append numbers onto
08:37 - a string
08:39 - i think that will be the easiest way to
08:41 - do this
08:42 - and then i need to store the second
08:44 - operand separately as a string
08:47 - and then i also need to store the
08:49 - operator
08:51 - which will also be a string
08:55 - and then
08:59 - basically
09:01 - yeah basically
09:03 - i'm going to be displaying the first
09:05 - operand
09:06 - unless
09:07 - the second operand value is not null
09:09 - then i'll be displaying that one
09:12 - and then when
09:14 - i
09:15 - run the evaluation or when i hit equals
09:18 - that will evaluate the expression
09:20 - into the first operand value
09:23 - and then that will be displaying again
09:25 - on the screen and it will wipe out the
09:27 - second operand value
09:29 - if that makes sense
09:32 - so
09:34 - let me try that so i shouldn't need a
09:36 - separate display value
09:38 - um so let's see methods
09:44 - and
09:46 - actually i don't actually think i'll
09:47 - need like different methods for add
09:50 - subtract
09:51 - and that sort of thing because this
09:53 - math.js library
09:56 - has kind of a cheat
09:58 - a cheat method
10:00 - so
10:01 - yeah if you can see this
10:03 - math dot evaluate where i can just pass
10:06 - in an expression
10:07 - so
10:08 - i'm going to make my own
10:12 - multiple operators
10:15 - i don't think so
10:16 - because
10:18 - so when i use um
10:21 - this calculator
10:23 - i mean not this whole
10:25 - left hand side but when i use the basic
10:27 - calculator
10:29 - 7 times 9
10:31 - and then it
10:32 - if i hit another one it evaluates
10:34 - already
10:35 - so i don't actually need multiple
10:37 - operators
10:38 - because now if i if i hit minus it just
10:41 - ran the evaluation
10:43 - and now i can
10:44 - subtract and then if i hit another
10:47 - operator it runs the evaluation
10:50 - and so on
10:55 - so
10:58 - yeah so i don't think i do oh the order
11:01 - of operations
11:03 - um yeah so maybe maybe that's version
11:06 - two then
11:07 - if i want to
11:09 - have order of operations capabilities
11:12 - so you can type in multiple things or a
11:14 - whole expression or something
11:17 - maybe maybe that'll come later
11:19 - so let me
11:21 - start off this way then and plus if i
11:24 - have all of these stored separately
11:29 - i guess
11:31 - i guess if i wanted
11:33 - um
11:36 - if i wanted to do that that way i could
11:39 - make an expression
11:40 - string and then just append everything
11:43 - into one string and then evaluate the
11:46 - whole thing
11:49 - yeah let's see how this works uh let me
11:51 - do eval
11:53 - make my own eval
11:54 - function and
11:59 - um
12:02 - so
12:05 - what do i want to do oh yeah let me
12:08 - import the math js library oh no first
12:12 - okay so i have eval let me set up all
12:13 - the methods first so i have eval
12:16 - i also need an append
12:19 - number
12:21 - which isn't just number because
12:24 - it can also be a dot
12:27 - so i can make floats and stuff so
12:29 - um
12:32 - a pen character i guess
12:34 - should i call it that
12:36 - and this is actually the first
12:38 - method i want to set up
12:40 - and what this will do
12:43 - will take the operand right now i'm just
12:46 - going to work on the first operand and
12:47 - then i'll set up the logic to handle the
12:49 - second one too
12:51 - so
12:53 - um
12:54 - this will take this dot first operand
12:58 - plus equals
13:01 - uh whatever character i pass in
13:06 - and then for a pen character here
13:11 - i can call that method via an on click
13:16 - so
13:17 - let's see
13:20 - um
13:23 - yeah i highlighted all the right things
13:25 - so
13:32 - okay
13:33 - and now escape
13:36 - insert and now i can just add at click
13:39 - to all of these buttons
13:42 - and it will be append
13:46 - operand
13:49 - no no no what did i call it a pen
13:51 - character
13:53 - pen character
13:55 - and then i have to pass in the character
13:57 - which is different for each one of these
14:00 - um so i won't even put a placeholder
14:02 - there
14:03 - all right and here i'm gonna pass in one
14:07 - oops
14:08 - and
14:10 - here's two
14:12 - here is
14:14 - three so used to the shortcuts on a
14:17 - mechanical keyboard
14:19 - and i use this default
14:22 - just a plain keyboard for
14:24 - uh live streaming
14:26 - so it's a little bit different
14:28 - okay so seven
14:29 - [Music]
14:32 - eight
14:36 - nine
14:38 - oh wait i do want
14:41 - a pen character on these other ones too
14:43 - okay i'll fix that in a second so here
14:46 - um is zero
14:50 - dot
14:52 - actually for the for the
14:55 - operators i don't want a pen character
14:57 - so
14:58 - i'm gonna change that oh
15:01 - it doesn't like that i'm passing in a
15:03 - dot without that has to be in a string
15:07 - okay
15:11 - all right so
15:16 - oh yeah and then i need to display it in
15:19 - the screen here
15:20 - so
15:22 - like i said right now i'm just working
15:24 - with the first operand so that's all i'm
15:26 - gonna display for right now so first
15:29 - operand
15:35 - cool
15:38 - um all right so let me take
15:41 - a little pause and fix the
15:45 - styling inside of here
15:47 - so let me
15:49 - re
15:51 - i guess realign this with flexbox
15:53 - let me look for bootstrap's flexbox
15:56 - characters
15:59 - okay so flexbox options
16:04 - let's see
16:08 - um
16:09 - [Music]
16:12 - visibility
16:15 - i don't think i'm in the right thing let
16:16 - me look again
16:19 - oh bootstrap utility classes here they
16:21 - are
16:24 - so
16:25 - oh yeah because these come from the
16:27 - regular bootstrap library which i also
16:30 - had to import
16:32 - so
16:34 - border utilities
16:37 - flex utilities so it's taking me to the
16:39 - actual bootstrap documentation
16:43 - and
16:47 - flex display flex
16:50 - okay and i think
16:53 - um let's see oh this isn't a row so this
16:56 - doesn't have display flex by default
16:59 - so let me do display flex here
17:03 - and
17:08 - oh yeah because i have to put stuff in
17:10 - there and then i want to do a line item
17:12 - center and then give it some padding
17:15 - so
17:16 - let me do padding first so padding
17:19 - of
17:21 - just on all sides of two which i think
17:24 - is something like eight pixels
17:26 - okay so that'll bring it out from the
17:28 - left side and now i want to center it
17:30 - vertically which should be align items
17:34 - so align items
17:39 - so i'll do a line items center
17:42 - so
17:44 - after flex
17:46 - align
17:48 - items
17:50 - center
17:55 - okay cool that looks
17:58 - better i could make the
18:01 - font a little bit bigger but i think
18:02 - that's okay
18:05 - yeah i will have to show more than the
18:06 - first operand but i'm just setting up
18:09 - the first operand so i could get a
18:11 - pending
18:12 - working
18:15 - okay
18:16 - um but now okay so with the dot i need
18:19 - to handle that special
18:21 - so
18:22 - if someone's trying to pass in a dot
18:24 - they should only be able to do that one
18:26 - time
18:29 - so
18:31 - let me
18:32 - also it's kind of annoying not having a
18:34 - clear button
18:36 - i might just
18:37 - add that and then figure out how to fit
18:38 - that in the calculator after let me put
18:40 - that after the card oh no
18:43 - um
18:44 - oh let me just add another row then
18:47 - with just a clear button for now and
18:49 - then i'll rearrange the buttons later
18:52 - so
18:53 - let me add this row at the top
18:58 - and
19:00 - because this will be an easy method to
19:01 - just do so clear
19:05 - and
19:09 - all this be ac or just c
19:13 - yeah
19:14 - all right so
19:19 - because as i'm working it's going to be
19:22 - just convenient to have a clear option
19:24 - so clear
19:26 - and
19:29 - uh for right now just for the first
19:31 - operand so
19:33 - i'm just going to set that to an empty
19:35 - string
19:38 - okay so if i have this here
19:41 - all right so that clears the value
19:44 - and it does look kind of weird being
19:46 - like
19:47 - on the lonely
19:48 - space up top
19:51 - i could make this
19:52 - display block
19:55 - so the button goes all the way across
20:00 - um oh yeah but
20:03 - it uh
20:07 - it gives it a width of 100 but the width
20:09 - is already set
20:12 - so let me
20:13 - inspect this
20:15 - rules
20:18 - yeah because i set the width in a scoped
20:21 - style
20:24 - so i could overwrite that so btn block
20:30 - um
20:33 - so since this is scss i'll just nest a
20:35 - style in here so and
20:41 - dot
20:42 - btn
20:43 - block
20:45 - and i'll do width
20:47 - 100
20:49 - percent
20:52 - okay so now the clear button
20:55 - and let me also make that orange real
20:56 - quick
20:58 - so
21:02 - let me do
21:04 - a variant
21:08 - variant which will be
21:11 - warning
21:15 - all right
21:17 - okay that doesn't look too bad
21:22 - let me get rid of that
21:26 - okay so now i have a clear
21:28 - and oh yeah for the periods i need to
21:31 - have some logic around
21:33 - when and how you can use a period
21:36 - um you can only use one
21:40 - um
21:40 - decimal point
21:42 - in a number so i have to search for that
21:48 - um so let's see in append character i
21:52 - need to check so if
21:55 - uh this
21:56 - dot
21:58 - char
22:01 - is a period
22:02 - then i have to
22:06 - do
22:07 - basically
22:10 - um
22:14 - let me just nest an if statement uh so
22:18 - if
22:20 - um
22:23 - this dot first operand
22:27 - dot
22:28 - contains
22:30 - so if it already contains a period
22:34 - then
22:35 - i'm going to do
22:37 - this dot
22:42 - i'm basically going to do the same thing
22:44 - as here so
22:49 - i'll append it only if it
22:52 - oh if it doesn't contain it so i need to
22:54 - negate this actually
22:56 - so
22:58 - if this.first operand contains a period
23:01 - if it doesn't contain a period already
23:03 - then append the period otherwise do
23:05 - nothing
23:06 - um i don't want to give them a warning
23:08 - or anything
23:10 - so let's see if that works so three
23:13 - point eight
23:17 - point
23:18 - oh it's still doing it
23:20 - um
23:23 - so let's see
23:25 - okay
23:26 - so there's no problems
23:32 - let's see first operand
23:36 - if it doesn't
23:38 - contain a period
23:42 - so i can maybe i'll do a debugger
23:46 - sometimes when i'm live streaming
23:48 - my
23:51 - my debugger
23:54 - doesn't work too well but let's see
23:58 - um
24:00 - so if this dot shot oh this dot charm
24:03 - man
24:04 - okay
24:06 - so
24:06 - yeah it's the ch because i want to check
24:09 - against the char that i'm passing in
24:12 - so let's see if this works now
24:16 - okay well now it doesn't let you ever
24:19 - put a period in so
24:22 - if this dot char equals period
24:26 - um
24:30 - so let's just see if it hits the log
24:32 - statement here
24:34 - let's do
24:43 - let me go to console and make this
24:46 - smaller
24:47 - oh wait it does have
24:50 - oh this dot first operand dot contains
24:53 - it's not a function
24:55 - okay so i think that's my issue
24:59 - and i thought there was
25:01 - let's see javascript
25:04 - contains
25:12 - okay so there's
25:16 - oh is it includes
25:18 - i think it's includes
25:20 - maybe i'm thinking of
25:22 - something else so
25:23 - includes i think that's what that's the
25:25 - method that i want
25:30 - all right let's see
25:34 - point
25:44 - so that's not
25:49 - working
25:51 - well it's getting here anyway
25:53 - so i need to find out
25:56 - what this is so let me send a debugger
26:00 - here
26:04 - too many
26:06 - too many what
26:10 - too many period
26:16 - yeah i know i should only have one in
26:18 - there
26:19 - so let me do
26:22 - one
26:23 - period
26:26 - now it should pull up
26:28 - that method
26:31 - okay
26:34 - so
26:36 - it's that first operand
26:38 - includes
26:40 - so i should be able to see
26:44 - wait
26:45 - the first operand is one
26:48 - and then i should be able to see
26:49 - [Music]
26:51 - let me step over
26:55 - step over
26:59 - yeah char
27:00 - is that
27:01 - so this expression
27:05 - i guess it shouldn't be evaluating to
27:07 - true
27:09 - if not
27:18 - let me see let me get rid of this
27:20 - statement
27:21 - and just log it out so console.log
27:26 - and
27:31 - i think maybe my logic is backwards here
27:35 - it adds a period if there is already any
27:37 - period at all
27:39 - it's skipped
27:42 - you need to put the outer oh yeah that's
27:46 - right that's right
27:50 - so
27:51 - i need to wrap this in else
27:57 - all right thanks
28:09 - all right so now it's still doing it
28:13 - why is it adding
28:14 - two did i add it in else
28:18 - if
28:20 - so if
28:21 - the character is a period
28:27 - i'm wondering if this method is getting
28:29 - called twice
28:32 - because now
28:34 - i'm so i'm doing
28:36 - okay so inside of a pen character i call
28:39 - a pen character if the character is a
28:41 - period
28:42 - then
28:44 - it should just run this if statement
28:49 - i don't
28:51 - i don't think it's a misplaced else
28:53 - though
28:54 - because it should only be running this
28:56 - if statement if the character is a
28:58 - period
29:00 - and then inside of that
29:02 - i run another if statement
29:05 - if it already includes that
29:08 - then don't run it
29:10 - basically
29:13 - so this l should be working
29:22 - that's weird
29:26 - um
29:27 - if else that's the right
29:29 - javascript syntax
29:31 - so if char is period then why is it
29:34 - running the second one too
29:44 - hmm
29:46 - okay so
29:57 - yeah i'm not sure why
30:00 - i don't have any other place where i'm
30:01 - appending
30:03 - so
30:04 - let me just log out
30:09 - i guess
30:10 - this one i'd have to do
30:13 - um
30:14 - just a string to differentiate it
30:17 - and then here
30:25 - no i don't think so though
30:27 - because this is only checking if it
30:29 - already includes a period
30:35 - so i don't want to append it because
30:37 - then i would be doing the same thing in
30:38 - the if and the else statement in here
30:40 - which i don't want to do
30:43 - oh let me
30:46 - see
30:47 - okay
30:49 - so let me clear that
30:50 - clear this
30:53 - okay so it's logging out that
30:56 - and now if i do period
31:08 - yeah now it works okay i think i just
31:10 - needed to
31:12 - refresh it somehow
31:15 - yeah
31:17 - okay
31:18 - that was weird
31:20 - uh all right so
31:22 - that's fine
31:28 - all right so now i have the
31:31 - just the first operand appending
31:34 - so now if i hit an operation
31:38 - an operator i need to store these
31:39 - operators
31:41 - in
31:45 - some kind of operator or i need yeah i
31:47 - need to store them in operator
31:50 - so
31:51 - now i need to make
31:56 - um
31:57 - here
31:59 - let's see
32:03 - yeah so
32:05 - the
32:09 - i think that's it
32:14 - no that's good okay
32:16 - so
32:19 - i'll do
32:21 - at
32:22 - click and when i click
32:24 - i want to just straight update the
32:26 - operator variable so operator will equal
32:31 - whatever
32:33 - operators inside of this button
32:36 - so for the first one
32:39 - it's going to be
32:41 - a plus sign let me put these on
32:44 - more lines
32:46 - okay so the first time for the plus sign
32:49 - i set the operator equal to plus
32:53 - for
32:55 - this
32:56 - i set the operator equal to minus
33:00 - and then
33:03 - which one is this oh for times
33:05 - i can set the operator equal to
33:08 - that star symbol
33:13 - and
33:16 - for divide i'll set it equal to divide
33:24 - okay i think that's right
33:27 - and then equals is going to have its own
33:32 - i'll just go ahead and change equals to
33:34 - eval even though i haven't set up that
33:36 - function yet
33:41 - okay so i think all of the functions are
33:43 - correct now
33:47 - let me look in the view dev tools
33:52 - okay
33:53 - so in view dev tools
33:57 - um
33:59 - i'll look at
34:02 - oh yeah i want to look at my calculator
34:04 - component so inside app calculator
34:07 - and then
34:09 - when i click on these it's not doing
34:12 - anything
34:14 - okay do i have an error
34:17 - let me refresh
34:22 - okay so
34:29 - when i click
34:34 - oh that was weird
34:35 - when i started clicking on the operands
34:38 - it updated the operator too
34:44 - huh i wonder why it's doing that
34:46 - because i'm clicking on
34:53 - these buttons
34:54 - but when i click on the minus sign the
34:57 - operator still says plus until i hit
34:59 - another button here
35:01 - and now it says minus
35:03 - i think that's just a matter of
35:05 - refreshing
35:06 - in the view dev tools so let me hit
35:08 - times
35:10 - and then refresh
35:11 - yeah so that's just a refreshing problem
35:13 - in the vw tools
35:15 - okay
35:16 - so
35:17 - let me see if they let me zoom in yet no
35:20 - they don't okay view dev tools still
35:22 - doesn't let me zoom in
35:24 - oh well
35:28 - okay so the operator is getting saved
35:32 - um so now if the operator
35:35 - exists
35:38 - yeah i know sorry tom
35:40 - um
35:41 - i can't zoom in
35:43 - unless maybe i
35:45 - zoomed in
35:48 - via this
35:51 - does that
35:55 - i don't know i'm waiting for the screen
35:57 - to update
35:59 - i think
36:00 - i probably have like a 10 second leg i
36:02 - think right now
36:05 - so
36:06 - waiting waiting lady
36:10 - i don't know that zoom doesn't work oh
36:13 - well
36:15 - um
36:18 - all right so
36:20 - let's see
36:23 - maybe light mode
36:25 - no i think just in firefox
36:28 - in general it doesn't work
36:31 - right now
36:36 - uh
36:37 - i because i switched i didn't i switched
36:39 - to dark mode not that long ago i think
36:41 - it was on one of my live streams where
36:43 - someone suggested me to use dark mode
36:47 - yeah chrome dev tools i should set up
36:51 - a
36:52 - chrome my chrome doesn't have any
36:54 - extensions right now i just use it for
36:57 - ui testing that's it
37:00 - so i could set that up
37:02 - and you know
37:04 - just use chrome
37:06 - maybe i'll have that for next time
37:08 - okay so
37:12 - uh what is it okay so i have the first
37:14 - operand
37:15 - i have the operator and now if
37:18 - the operator exists
37:22 - um
37:24 - actually i want to make a function for
37:26 - the operator
37:27 - because
37:29 - if there's no first operand i don't want
37:32 - to set the operator
37:34 - yet but i'll worry about that in a
37:35 - minute
37:37 - that'll just be a known bug
37:40 - um so the second operand if the if the
37:42 - operator exists i want to start working
37:45 - on the second operand
37:48 - so
37:50 - what i'm gonna have to do in here
37:54 - is
37:56 - set the
37:59 - current operator so const
38:02 - current
38:04 - operator
38:05 - equals
38:11 - let's say this dot
38:17 - i need to check so
38:19 - if this dot operator exists
38:24 - then the current
38:26 - upper
38:27 - operand
38:29 - o current operand
38:31 - operand if this operator exists meaning
38:34 - if they've already hit like plus or
38:35 - minus or something
38:36 - then i want the current operand to be
38:40 - the second one
38:43 - otherwise i want it to be the first one
38:52 - okay
38:54 - and
38:55 - i'm gonna put this on two lines so it's
38:58 - easier to see
39:02 - and
39:03 - i thought
39:04 - maybe that's just in python
39:07 - i thought i could
39:09 - alright so i can still put on two lines
39:11 - but i'll just do it
39:14 - here instead
39:16 - so
39:17 - i'll do the parentheses here
39:20 - yeah that works
39:23 - alright so
39:24 - if the operator has already been typed
39:27 - in then the current operand will be the
39:30 - second one otherwise the first one
39:32 - and so now i need to and i think i can
39:35 - just mutate state
39:37 - from here
39:38 - and actually let me do
39:42 - let here not const
39:44 - so
39:45 - i think now
39:47 - because this should be point oh no it's
39:49 - a string value so
39:53 - um
39:59 - so first
40:03 - operand so i wonder if this is going to
40:06 - be if it's not a pointer
40:12 - so i wonder what is the best way to
40:14 - update this then and to set
40:18 - you know if the operator exists it
40:20 - should oper it should be the second one
40:22 - otherwise the first one
40:25 - and i kind of don't want an if statement
40:27 - inside each one of these
40:32 - so
40:34 - yeah i'm not sure
40:38 - um
40:39 - definitely in
40:41 - the output screen though
40:43 - i definitely want
40:45 - if the second one exists
40:48 - if the second one exists
40:50 - i want to display it otherwise the first
40:53 - one
40:55 - so if second one's false it'll display
40:57 - the first one
41:02 - so that was
41:04 - now let me think about the logic here so
41:09 - i want to do
41:14 - i need to pick the the
41:18 - current one
41:20 - set current operand to string
41:23 - and then
41:25 - yeah that will work that will work
41:26 - actually that's a good idea okay
41:29 - so
41:31 - i'll set it to a string
41:33 - so let me
41:36 - do
41:37 - yeah just a string
41:41 - and then
41:49 - yeah and then here i'll do this so
41:53 - i'll do
41:55 - this current operand
41:57 - thanks that's that's a good idea
42:02 - and then i want the same logic in the
42:04 - else statement so there
42:07 - okay and that will
42:10 - be the same as like this dot second
42:12 - operand or this stop first
42:14 - operand
42:16 - um
42:18 - are these spelled correctly yeah current
42:20 - operand
42:22 - just checking spelling here
42:25 - okay
42:28 - so that should work so let me see if
42:29 - that works actually
42:31 - so
42:32 - let me do 25 plus
42:38 - sweet that's good
42:40 - uh let me see if they're saving in the
42:42 - right places just to double check
42:45 - in calculator yeah i have them all
42:48 - saving in the right places
42:50 - so then technically in eval
42:54 - i could just
42:57 - um
43:00 - do
43:02 - let's see
43:05 - i could
43:06 - do well let me import the function that
43:08 - i want the
43:10 - math function
43:11 - so i want to import evaluate from
43:15 - math
43:18 - so
43:19 - yeah math.js so
43:21 - up here at the top of the script tag i
43:23 - can do import
43:28 - evaluate from
43:32 - math.js
43:34 - and now in eval
43:38 - i can just use
43:40 - eval evaluate
43:43 - and then
43:45 - i need to pass in a string so i'll just
43:47 - add these strings together concatenate
43:50 - them so first
43:51 - going to be first operand oh it has to
43:53 - be this
43:55 - so
43:57 - this actually because i'm using this
43:59 - three times let me pull them off of this
44:01 - so
44:02 - um
44:03 - const
44:05 - first
44:06 - operand
44:09 - uh
44:11 - second
44:13 - operand
44:14 - and
44:16 - operator
44:18 - equals this
44:21 - and then
44:22 - i'm gonna concatenate them with
44:26 - just make one
44:28 - big string
44:29 - so first operator
44:31 - first operand plus operator plus
44:34 - seconds
44:37 - operand
44:41 - yeah
44:42 - um
44:44 - okay so evaluate now i have to store
44:46 - this somewhere so
44:48 - this is the logic so i'm gonna have to
44:51 - do this dot
44:55 - um
44:58 - first
45:00 - operand equals
45:05 - the result of the evaluation and then
45:08 - i'm going to set the second one
45:11 - to be an empty string again
45:14 - and oops
45:16 - and then
45:18 - the operator
45:20 - uh
45:22 - oh wait the operator to also be
45:25 - an empty string so i'm going to reset
45:28 - those two and set the
45:31 - uh result
45:32 - to first operand
45:36 - um
45:39 - yeah let's see
45:44 - let me do that
45:49 - all right
45:50 - so 12
45:52 - plus
45:53 - 3
45:55 - equals
45:57 - 15.
46:01 - and now if i do it again
46:04 - i should be able to
46:05 - oh no oh no no
46:08 - 18
46:09 - 21 no it's adding every time
46:13 - it's not resetting
46:15 - the
46:18 - operator
46:22 - why not
46:25 - um hmm
46:29 - let's see
46:37 - the operator is blank here so
46:40 - that's weird
46:42 - i need some water
46:53 - all
46:54 - right
46:56 - so the operator is blank in the dev
46:58 - tools
46:59 - um
47:00 - [Music]
47:03 - we need to give a hard refresh and see
47:05 - if it's just buggy
47:07 - plus six
47:08 - okay
47:11 - and now if i try it okay yeah now i can
47:13 - append and now minus six
47:17 - no
47:18 - um
47:27 - yeah so
47:29 - there's some things going on here and
47:31 - now clear doesn't work maybe i have a
47:34 - error
47:36 - no errors anywhere
47:42 - hmm
47:46 - let's see 23 plus 3
47:50 - equals 26 okay that's good
47:54 - let's do plus
47:56 - five
47:57 - that's good equals thirty-one that's all
48:00 - good let's do minus
48:02 - three
48:04 - equals 28 okay everything's good so far
48:09 - um
48:10 - now let me add an
48:12 - appended number
48:14 - no
48:16 - what happened
48:18 - in my
48:18 - devtools refresh
48:23 - 31
48:26 - 34.
48:31 - okay
48:34 - the operator is blank
48:39 - it's an empty string i keep refreshing
48:41 - it's an empty string the second operator
48:43 - is blank
48:45 - first operator is 41 so it should append
48:48 - but instead it's adding three
48:51 - um
48:54 - oh
48:58 - oh i think i know why okay
49:00 - so this is evaluating and becomes a
49:04 - number value so i think
49:08 - uh javascript okay
49:10 - so i think because
49:12 - the result of evaluate
49:15 - is a number and not a string
49:18 - so then
49:19 - in javascript's mind i'm
49:24 - i'm so i have
49:25 - 44 the number
49:29 - and then i'm adding 3 the string so it
49:31 - thinks i want to add 3 the number so it
49:33 - parses it as a number
49:36 - and adds it
49:39 - of course if i add a period
49:46 - okay yeah and now i don't have the
49:48 - includes function because now first
49:50 - operand's a number so i need to change
49:52 - this to string basically
49:56 - yeah
49:57 - so
50:00 - um parse int oh yeah so it would be two
50:04 - string i think
50:06 - at the end so two string
50:10 - and i
50:11 - think that's what i have to do
50:13 - i don't think i have an str function
50:15 - like in python
50:17 - so let's see if this works
50:21 - yeah that's
50:23 - that's one thing about types in
50:24 - javascript let's see
50:26 - so
50:27 - 12
50:29 - plus 3
50:32 - equals 15.
50:34 - now if i do yep okay
50:37 - minus
50:38 - 5 equals
50:42 - ah okay cool so
50:44 - that all works as intended
50:47 - that wasn't
50:49 - uh didn't take as long as i thought it
50:51 - would um
50:53 - yeah and then divide by 9
50:57 - equals
51:00 - oh yeah so now the rounding
51:04 - in javascript
51:06 - because i think if i do let me do
51:10 - 10
51:11 - 10
51:12 - divided by 4 which should be 2.5
51:16 - it is 2.5 okay so
51:19 - uh
51:20 - no problem there
51:23 - i think there are some numbers where it
51:24 - doesn't
51:26 - it doesn't round
51:27 - or there are some numbers where it
51:29 - doesn't round
51:32 - quite right maybe the math library is
51:33 - taking care of that for me so
51:37 - yeah so is there anything else i should
51:39 - do i should probably do some cleanup
51:42 - like
51:42 - when i
51:44 - um
51:45 - do plus
51:48 - like when i hit one of these symbols and
51:50 - it's current i need to set the class
51:52 - also i don't like that it gets rid of
51:54 - the border when i hover
51:57 - so let me fix some of that some of the
51:59 - styling stuff
52:01 - um
52:02 - so on the button let me do
52:06 - and
52:08 - hover
52:11 - because i'm using sass
52:14 - and
52:16 - so when i hover over the button class
52:19 - i want
52:22 - there to be no change in the border
52:25 - so border
52:28 - one pixel solid
52:31 - i think
52:35 - oh yeah and then i have to set
52:39 - i do need to set the color because
52:42 - for the dark colors it defaults to white
52:44 - and bootstrap so i'll have to set black
52:52 - cool that looks better and now
52:54 - let me see what class it's adding to
52:58 - make the color darker
53:00 - because then i could set active
53:04 - that as the active
53:06 - um
53:07 - operator i guess
53:10 - so
53:13 - let's see
53:15 - hover
53:17 - so let me set the hover state on plus
53:22 - and
53:28 - what styles does it get offering me
53:31 - oh yeah it just it's just basically
53:34 - darkening the color
53:36 - and i think it's doing it in sas so i
53:38 - don't know exactly
53:40 - the percentage
53:42 - that it's actually making it darker
53:46 - um
53:48 - let's see
53:53 - yeah i'm just gonna come up with a
53:55 - percentage
53:56 - because sas gives me those colored
53:58 - classes so i can
54:00 - do
54:01 - um
54:03 - and hover so when i hover over a button
54:06 - i'm going to set my own
54:08 - um
54:10 - background
54:12 - color
54:14 - is
54:19 - but then i should set a variable here i
54:21 - guess
54:22 - so
54:26 - let's see
54:28 - what's the regular color
54:34 - oh the regular color without being
54:36 - hovered over
54:38 - is orange
54:41 - so let me set these variables in sas and
54:44 - i don't know if i can do these inside
54:45 - components i guess i can because i'm
54:47 - just writing regular sas
54:49 - so let me set a variable called orange
54:54 - and
54:59 - orange is that color
55:01 - and then
55:03 - oh did it not like that
55:06 - oh because i didn't
55:09 - set
55:10 - the background color
55:12 - okay so now i can do dollar sign orange
55:21 - yeah and i'm
55:23 - oh wait i'm hovering over all these
55:25 - that's not what i want
55:27 - um
55:28 - okay so button
55:32 - okay let me do the other variables so
55:34 - let me inspect this
55:36 - and
55:39 - get that gray color
55:42 - so here's the gray background for the
55:44 - other buttons
55:46 - and i'm going to put that in a variable
55:48 - too
55:48 - so i'm going to call this
55:52 - dark gray
55:56 - and there we go
56:00 - and now
56:04 - so the button
56:06 - now i'm gonna have to set the
56:08 - background
56:09 - color of the buttons
56:12 - to be default
56:16 - of
56:17 - dark gray
56:20 - and then
56:24 - if it's
56:26 - a
56:27 - btn
56:28 - warning class
56:31 - then i want to
56:35 - set it set the background color
56:39 - as
56:41 - orange
56:45 - okay
56:48 - so now it should be overriding
56:54 - those colors
56:56 - and this will let me
56:58 - oops
57:01 - um
57:02 - and this will let me
57:05 - do hover hover classes now
57:07 - so
57:09 - now i can do darken
57:11 - use the sass method darken
57:14 - and
57:17 - what was the other what do i oh yeah i
57:19 - pass in the color first so dark
57:22 - gray
57:24 - and i think there's a way to access
57:27 - the relative color here but
57:30 - i can't remember how to do it so
57:33 - let's do
57:34 - darken it by ten percent and if it's a
57:36 - warning one then we can um
57:43 - oh yeah so basically be doing the same
57:45 - thing
57:51 - get rid of the
57:52 - border and then
57:55 - i'll do orange here
58:04 - it might be a little bit more than it
58:05 - was
58:10 - okay and now
58:13 - so this is on hover and now i want
58:16 - that same
58:18 - um
58:20 - well i probably don't need 10
58:21 - let me just change this to 8
58:24 - it's a little bit extreme
58:26 - um and now i want that same thing
58:30 - basically if the button is active so if
58:32 - i clicked on one of these ones
58:35 - one of these four
58:37 - then i want it to stay
58:41 - active i guess
58:43 - so
58:46 - let's see
58:49 - um
58:56 - let me do
58:58 - so i need some kind of special
59:02 - operator class here
59:05 - a class on the operator buttons
59:08 - because
59:09 - clear
59:10 - you know has warning but i don't want it
59:12 - to stay active so i need like
59:16 - some kind of
59:19 - i don't know i'll do a class of
59:22 - operator
59:24 - here
59:26 - and
59:32 - okay so
59:34 - let me
59:37 - paste that
59:39 - and
59:42 - paste that
59:45 - and then
59:48 - okay
59:49 - so all the operators have a class of
59:51 - operator now
59:54 - maybe i didn't arrange this sas the best
59:57 - way because
59:58 - this darken color i also want
60:01 - if
60:09 - if
60:13 - so
60:14 - yeah this is
60:16 - more code i guess than it should be
60:19 - um
60:22 - i might look up a sas
60:24 - shortcut for this
60:26 - so
60:27 - anyway if it has the class operator as
60:29 - well as button then i want to
60:32 - also change the background color to be
60:35 - darker
60:36 - background
60:37 - color
60:39 - and
60:41 - i want it to darken
60:44 - so
60:49 - oh wait oh yeah i only need this
60:51 - operator class and button warning
60:52 - because i don't actually want it
60:55 - in the other one so yeah that will work
60:58 - because i only ever want it for dark
61:00 - orange
61:01 - of course i could save dark orange in a
61:04 - variable too
61:09 - oh wait only if it's active though
61:13 - um
61:15 - active
61:16 - okay so
61:18 - maybe i'll have the class called active
61:21 - operator
61:22 - and then
61:26 - in my
61:29 - class
61:30 - i'll make
61:31 - this a dynamic class
61:34 - and basically
61:34 - [Music]
61:36 - only set that class equal to
61:39 - so let me make an array here
61:42 - or
61:43 - let's see
61:45 - an object yeah i'll make an object
61:48 - and
61:51 - i'll give it the class
61:52 - active
61:54 - dash operator
61:56 - oh wait this will have to be in
61:59 - quotes because it's hyphenated only if
62:02 - um
62:07 - i'll give it the class active operator
62:09 - only if the
62:11 - operator
62:14 - variable
62:16 - and this is where prettier is is nice
62:19 - because i have it set up correctly on
62:21 - save it just
62:23 - formats all my code for me
62:26 - i don't have to do any of this
62:28 - okay so
62:30 - if the operator
62:33 - is
62:36 - um
62:39 - the forward slash
62:41 - then i want this button to be set as
62:43 - active operator
62:45 - so let's see
62:47 - yay now it's active
62:49 - cool so i have to set this up for
62:52 - all of them now
62:53 - basically
62:56 - so
63:00 - and is this that different no i just
63:02 - have to update this so i'm just going to
63:05 - copy this whole thing actually
63:08 - paste
63:12 - paste
63:16 - paste
63:20 - and
63:22 - okay let me get rid of that
63:26 - oh yeah get rid of this button
63:32 - and
63:35 - okay so now i have all of those and now
63:36 - i just need to
63:38 - update this because i pasted it in
63:41 - so this is multiply
63:45 - and
63:46 - this one
63:47 - is minus
63:51 - and this one
63:53 - is
63:54 - add
63:57 - okay
64:03 - well
64:05 - hmm
64:06 - oh
64:07 - it's the same thing in these i forgot
64:09 - about that
64:10 - oh well
64:11 - so that one's add
64:14 - this one
64:16 - active operator
64:19 - is
64:22 - oh wait why do i have b call around
64:25 - that one and none of the other ones i
64:27 - should get rid of that
64:29 - i will in one second let me finish
64:32 - doing this
64:33 - i was wondering why it was
64:35 - a different
64:37 - number of tabs inward
64:39 - okay so
64:41 - do that and now let me get rid of this
64:43 - column here so
64:48 - so v
64:50 - oops
64:52 - wrong button
64:55 - uh there
64:58 - okay
65:00 - so 32
65:01 - plus
65:02 - yep and now it's active so it's a little
65:05 - bit darker
65:07 - plus 6 equals
65:09 - yeah and now it goes away after
65:12 - that so now if i do minus it stays
65:16 - highlighted
65:17 - minus 52 equals negative 14.
65:21 - okay there are other things i could do
65:23 - like
65:24 - you know instead of having this clear
65:27 - the whole way across let's see it's
65:29 - after 12 already instead of having this
65:31 - clear the whole way across
65:34 - um i could put other buttons like that
65:37 - uh sign button is that even on the math
65:40 - calculator
65:43 - yeah changes the sign so if i have an
65:46 - eight i can change the sign to negative
65:48 - eight positive eight
65:51 - i can change it into a percentage
65:56 - um
65:58 - let's see
66:03 - cool
66:08 - yeah i think it turned out pretty well
66:10 - um there are some
66:12 - known bugs like you can hit an operator
66:14 - before anything is in there
66:17 - so i i should make an operator class
66:20 - really
66:24 - equals
66:26 - oh so okay so it would be zero
66:29 - so oh
66:30 - yeah that's what i should do actually i
66:32 - shouldn't change the operator at all
66:34 - what i should do is if there's no second
66:37 - operator
66:39 - no first operator
66:40 - then can i do this
66:43 - yeah i can stack
66:45 - it should be zero yeah so it's zero now
66:48 - cool so it would be zero minus
66:50 - six equals negative six
66:53 - yeah that makes sense actually
66:59 - change the colors on click instead of
67:01 - hover i do need some kind of hover
67:04 - like
67:06 - hover state
67:08 - but now if i click on it it stays in
67:11 - that state so i know that it's active
67:15 - basically
67:18 - okay
67:19 - until i hit the equal sign now when i
67:23 - so when i have like let's say i have
67:26 - plus
67:28 - um
67:31 - six and then i do minus
67:36 - i should it should evaluate if i try to
67:38 - hit a second operator
67:40 - it should evaluate
67:43 - if you click a number after an equal
67:44 - sign it starts calculating a new math
67:46 - problem
67:50 - if you
67:52 - click a number after the equal sign
67:59 - i'm not sure so after the equal sign so
68:01 - if i
68:04 - hit equals and then another
68:08 - number mean it kind of
68:11 - i guess you start calculating you mean
68:14 - you can somehow make a math expression
68:16 - here
68:18 - this calculator isn't
68:21 - isn't up there yet
68:24 - so you calculate one problem
68:27 - and instantly start a new problem i
68:30 - isn't it doing that though maybe i'm
68:32 - confused at what you're saying
68:34 - but like right now
68:36 - now that hit equals i start a new
68:39 - problem
68:40 - equals
68:41 - and then the new problem because it's
68:43 - reset to the state it was at the
68:45 - beginning except the first operand
68:47 - equals
68:48 - this number
68:53 - windows calculator
68:55 - so
68:56 - let me actually so when i hit a second
68:58 - operator right now it doesn't work as
69:00 - intended
69:02 - so when i hit
69:05 - if i do plus three now if i hit a second
69:07 - operator it needs to run the eval
69:09 - function
69:13 - before and then store the second
69:15 - operator
69:16 - so how am i going to do that
69:19 - i think this is the last thing i'm gonna
69:20 - do in this stream because i was
69:22 - streaming for a whole hour before
69:24 - it went live so
69:27 - i talked about a lot of stuff thinking
69:29 - that just
69:31 - i was like man the chat's really quiet
69:35 - all right so
69:38 - let's say
69:41 - oh yeah so this operator operator equals
69:43 - i need to make a method
69:45 - so i need to make some kind of method
69:47 - here
69:50 - called like update
69:53 - operator
69:56 - and
70:00 - okay
70:02 - um
70:03 - update operator and then
70:09 - oh yeah i'll have to pass it in here so
70:14 - operator
70:17 - which doesn't overwrite i mean this is
70:20 - kind of confusing
70:21 - maybe i'll call it oops
70:24 - i'll call it op here
70:25 - because there is a this dot operator
70:29 - which is
70:30 - on my component state here
70:36 - oh num plus num yeah i don't i'm not
70:39 - gonna have it i don't have time in this
70:41 - stream to do like a whole expression
70:44 - i'm just going to keep it the way it is
70:46 - for right now but if you want to make a
70:47 - pr to the repo and
70:49 - fix the code you are more than welcome
70:52 - to
70:53 - so pass in the operator
70:56 - and i will set this dot operator equal
70:59 - to the operator that i pass in
71:02 - so now let me copy this method
71:06 - and now
71:08 - i'm going to change it here so
71:10 - update operator
71:13 - the method
71:17 - and then do the same thing for all of
71:18 - these really so
71:23 - all right
71:25 - update operator
71:28 - yeah for minus
71:32 - update operator
71:34 - that'll give me more control over what i
71:36 - do when i update it
71:40 - uh
71:43 - update operator
71:48 - all right so now i have update operator
71:50 - let me just make sure that's working
71:56 - wait
71:59 - yeah i did that right okay
72:01 - um i forgot what i did for a second so
72:04 - now that i have update operator so now
72:06 - inside of update operator
72:10 - i can check
72:13 - and say
72:16 - if
72:18 - this dot
72:19 - operator so if there's already an
72:21 - operator set
72:24 - then i can run
72:26 - this dot eval
72:31 - um
72:32 - yeah call this.eval
72:34 - evaluate the expression
72:36 - and inside of this.eval it's going to
72:38 - clear
72:39 - the second
72:40 - operand and the operator
72:43 - so then after eval
72:45 - because they've already typed in a
72:46 - second operator
72:48 - i want to go ahead and save that
72:51 - after
72:52 - but if there is no current operator
72:53 - anyways i want to save the operator so i
72:56 - think this will work
73:00 - yeah i haven't pushed the code yet i
73:02 - will in just a second
73:04 - um
73:05 - let me do 23 plus five and now instead
73:09 - of hitting equals i'm going to hit minus
73:12 - cool so
73:14 - it
73:16 - ran the operation and now it stored the
73:19 - second operator so now i can
73:21 - have another second operand so 5
73:26 - times
73:27 - 6
73:29 - plus
73:30 - 3
73:32 - and you get the idea
73:34 - okay
73:35 - um
73:37 - okay so it's running evaluations as i'm
73:39 - going
73:40 - i think that's pretty good
73:43 - um
73:44 - there can be some improvements but i
73:46 - think overall it turned out pretty well
73:49 - what do you think
73:52 - yeah i'm gonna do a commit
73:54 - so
73:55 - is there any more cleanup i need to do
73:58 - any useless
74:00 - you know i can do small cleanup like
74:02 - that
74:03 - and
74:07 - i think i'm not using border box that
74:10 - style
74:12 - one style box sizing yeah
74:16 - um
74:17 - let me see if it still works
74:19 - yeah
74:20 - so i think that's the last thing to
74:22 - clean up maybe we'll find more stuff
74:23 - later
74:25 - but overall i think it's pretty good
74:29 - all right so
74:32 - let me
74:33 - stop the dev server then
74:37 - thanks
74:39 - does anyone have any
74:41 - questions comments
74:43 - statements you want to make about this
74:45 - calculator or view or anything
74:49 - [Music]
74:50 - let me go up a directory because the git
74:52 - repo contains all of these folders
74:56 - so my get
74:57 - free code camp projects view
75:00 - i'm going to do git status and i added
75:02 - the calculator app
75:04 - um i already have a get ignore file
75:07 - that's good so
75:08 - i'm going to do git
75:10 - add just add everything
75:13 - get commit dash m
75:16 - code from
75:18 - live stream
75:20 - thanks
75:21 - thanks kumar
75:24 - uh
75:24 - code from livestream on i can't believe
75:27 - it took me an hour to realize that
75:29 - my app said i was live but it wasn't
75:32 - actually going to the free code camp
75:34 - stream
75:35 - so sorry about that
75:37 - git commit dash m code from livestream
75:39 - on july
75:41 - 10th
75:42 - july 10th for me anyway
75:47 - git push
75:52 - now let me see
75:54 - if it updated oops
75:57 - if it updated
76:01 - yeah
76:02 - i think overall this
76:04 - yeah so now i have the calculator app
76:06 - code inside of here i think overall this
76:09 - one turned out
76:11 - much much better than my
76:13 - old one
76:14 - if you want to see my old code
76:16 - i'll
76:18 - post it in the chat here you can take a
76:19 - look at what i was doing back in 2015
76:23 - um
76:23 - just eval all the things basically
76:27 - in jquery so yeah
76:30 - definitely come a long way in
76:31 - development i think i was trying to do
76:33 - some object thing but i
76:36 - couldn't get it to work or something
76:37 - happened i don't remember now
76:39 - but yeah there's my old calculator
76:42 - and the new calculator
76:43 - much better cleaner
76:45 - not
76:46 - not great the styling's not great but
76:49 - uh
76:50 - bootstrap helped a lot so
76:52 - yeah thanks for joining the stream today
76:54 - uh oh what is the theme oh real quick uh
76:57 - let me go to the theme this is a plug-in
77:00 - that someone suggested to me during a
77:01 - stream actually so
77:03 - where is it where is it it's pale
77:07 - pale night theme
77:09 - it's this theme
77:10 - and
77:12 - i thought it was kind of weird like a
77:13 - lot of purple at first but it's it's
77:15 - growing on me i think i'm going to keep
77:17 - it for a while so
77:18 - yeah it's a great theme
77:21 - was used vs code to highlight that code
77:23 - block when you wanted to change
77:25 - indentation oh i use vim so
77:28 - envious code i um
77:32 - use vim whereas vim key bindings
77:35 - basically so
77:37 - if i'm in
77:40 - like if i'm on this line i can press
77:46 - shift v and it highlights the whole line
77:49 - if i want to highlight part of a line
77:51 - then i do v
77:53 - and then i can w over or b for back
77:56 - highlight different things
77:59 - v
77:59 - and then
78:01 - i can go up or down with j and k
78:04 - i can go down many lines at a time
78:07 - yeah vim is great i recommend it and it
78:11 - makes it even better when you're using
78:13 - it in vs code because you get all of the
78:15 - vs code shortcuts
78:17 - and then you get the vim shortcuts too
78:20 - and if you use vim enough you know copy
78:22 - pasting in vim can be a real pain going
78:26 - from file to file but
78:28 - envious code i think it makes it a nice
78:30 - development experience to use vim inside
78:32 - vs code
78:34 - so
78:35 - yeah i
78:37 - have enjoyed it a lot
78:39 - especially using a mechanical keyboard
78:41 - where i can kind of set
78:43 - set up my keys how i want and then
78:46 - set some macros like multiple keystrokes
78:49 - saved into one key where i just press
78:51 - one key and it does a bunch of things
78:53 - which is fun
78:56 - so yeah thanks so much for the stream
78:59 - you should check it out if you have any
79:02 - questions or something leave them in the
79:03 - comments below
79:05 - and
79:06 - feel free to reach out to me i also have
79:09 - uh
79:10 - my youtube channel faraday academy you
79:12 - should check it out i do lots of view
79:14 - and python content over on there
79:17 - and i hope you all have a great day take
79:19 - care

Cleaned transcript:

all right all right hi everyone um so today there was actually a miss a mix up where we kind of mixed up the stream keys and so i have actually been building a calculator for the last hour and it wasn't live so yeah sorry about that it's an hour late but i'm still gonna build the calculator if you don't know me my name is gwen i run a channel called faraday academy here on youtube and today free code camp has nicely let me continue my series of streaming all of the free code camp projects but built in vue.js and you can find the link to the repo for all the projects it's right in the description below specifically today i'm building the calculator project and so let me just give you the breakdown real quick so the calculator is of course one of the front end projects on the free code camp site and i'm going to be building it with view this library called math js which basically helps with well mathematical operations in javascript it can give you a safer evaluation function so you don't have to use eval in javascript and i check the source code it doesn't use eval under the hood which is good and it also helps you with rounding errors using different types of numbers like big num stuff like that um bootstrap view same thing i used last week when i was building the drum machine just for a little bit of styling it's a lightweight styling library and then here is not really a mockup but this is actually a screenshot of the calculator that i built for the free code camp curriculum five years ago and so i'm pretty much following the same pattern except i'm making the buttons look more digital and modern but you know it's almost the same thing so by the way here's my code pen and this is the calculator i built back in 2015. so let me just see real quick make sure i can see the chat yeah so this is a calculator i built way back then and i was checking you know for so long i didn't want to look at this code i just didn't want to see it i was like oh no what did i write back then um but basically i'm using jquery and where is it where is it i am using yeah i'm using javascript's eval function which if you read mdn or any of the other documentation sites for javascript you know they'll all say don't use don't ever use eval because it's not safe so i'm not going to be using that today i was just trying to i guess look at what i did back then but yeah i mean only so many ways to do a calculator now since the stream accidentally started an hour ago i'm kind of starting in the middle but not really because basically the only thing that i've done so far or the only things that i've done are i started the view app so view create started a new view app i installed bootstrap view which i set up here where is it in my main.js i have to of course import the library use dot use to set up the plugin so i can use all of the components with vue and then import the styling so i imported bootstrap and bootstrap view so that was what i did for setup in my app file i added a container in a row and a column just to center the calculator on the page and then in the actual calculator it's kind of weird to start in the middle but i'm gonna i'm redoing all of the javascript here so i'm gonna start from scratch in the actual calculator javascript so but yeah so the buttons are actually inside of a card a bootstrap card and i have the output screen and these button this container with all these rows that contains the buttons and so last week with the drum machine that i built in view i used divs to kind of make the buttons look like this as square but someone pointed out to me that actually for accessibility reasons i should be using you know actual html buttons and not just divs so i changed that today and for the calculator i'm using actual buttons so i guess for screen readers and stuff it will be easier much much better for navigation all right so that's pretty much it and then for styling i just have some styles pretty basic setting like height and width of the width of the card height and width of the buttons so they all look nice and square bootstrap kind of made that easy and then i'm also using bootstrap's colors they're very warning colors for these orange buttons if you don't know i mean i'm sure so many calculator examples are built like this but let me open the mac calculator oh it popped up on the screen so the mac calculator looks kind of like this and it's pretty much the same so orange operations um and then they have you know dark darker colors here so kind of mimicking that a little bit um i'll probably update the styling a little bit later but for right now i'm just going to start adding in the viewjs javascript so yeah hopefully that's not too confusing to start with it's not really starting in the middle because it's mostly just styling that's been done and now for the javascript i'm gonna have to add um basically i'm going to have separate operators oh let me pull up the calculator one more time uh so i think this calculator does it so let me do just yeah and so you can see the first operand right the 54 i typed in and then i hit the operator which stays highlighted and then i start typing in a second operand which comes up on the screen and then i can hit equals and it will evaluate the operation the expression so um i can yeah so i'm going to use the same basic method here and i'm going to do store these variables in data so let's see hi quincy thank you um yeah uh let's see i have operand so i have operand or i'll call this first first operand and second operand unless someone has a better idea and this is going to be a string because it's easy to append numbers onto a string i think that will be the easiest way to do this and then i need to store the second operand separately as a string and then i also need to store the operator which will also be a string and then basically yeah basically i'm going to be displaying the first operand unless the second operand value is not null then i'll be displaying that one and then when i run the evaluation or when i hit equals that will evaluate the expression into the first operand value and then that will be displaying again on the screen and it will wipe out the second operand value if that makes sense so let me try that so i shouldn't need a separate display value um so let's see methods and actually i don't actually think i'll need like different methods for add subtract and that sort of thing because this math.js library has kind of a cheat a cheat method so yeah if you can see this math dot evaluate where i can just pass in an expression so i'm going to make my own multiple operators i don't think so because so when i use um this calculator i mean not this whole left hand side but when i use the basic calculator 7 times 9 and then it if i hit another one it evaluates already so i don't actually need multiple operators because now if i if i hit minus it just ran the evaluation and now i can subtract and then if i hit another operator it runs the evaluation and so on so yeah so i don't think i do oh the order of operations um yeah so maybe maybe that's version two then if i want to have order of operations capabilities so you can type in multiple things or a whole expression or something maybe maybe that'll come later so let me start off this way then and plus if i have all of these stored separately i guess i guess if i wanted um if i wanted to do that that way i could make an expression string and then just append everything into one string and then evaluate the whole thing yeah let's see how this works uh let me do eval make my own eval function and um so what do i want to do oh yeah let me import the math js library oh no first okay so i have eval let me set up all the methods first so i have eval i also need an append number which isn't just number because it can also be a dot so i can make floats and stuff so um a pen character i guess should i call it that and this is actually the first method i want to set up and what this will do will take the operand right now i'm just going to work on the first operand and then i'll set up the logic to handle the second one too so um this will take this dot first operand plus equals uh whatever character i pass in and then for a pen character here i can call that method via an on click so let's see um yeah i highlighted all the right things so okay and now escape insert and now i can just add at click to all of these buttons and it will be append operand no no no what did i call it a pen character pen character and then i have to pass in the character which is different for each one of these um so i won't even put a placeholder there all right and here i'm gonna pass in one oops and here's two here is three so used to the shortcuts on a mechanical keyboard and i use this default just a plain keyboard for uh live streaming so it's a little bit different okay so seven eight nine oh wait i do want a pen character on these other ones too okay i'll fix that in a second so here um is zero dot actually for the for the operators i don't want a pen character so i'm gonna change that oh it doesn't like that i'm passing in a dot without that has to be in a string okay all right so oh yeah and then i need to display it in the screen here so like i said right now i'm just working with the first operand so that's all i'm gonna display for right now so first operand cool um all right so let me take a little pause and fix the styling inside of here so let me re i guess realign this with flexbox let me look for bootstrap's flexbox characters okay so flexbox options let's see um visibility i don't think i'm in the right thing let me look again oh bootstrap utility classes here they are so oh yeah because these come from the regular bootstrap library which i also had to import so border utilities flex utilities so it's taking me to the actual bootstrap documentation and flex display flex okay and i think um let's see oh this isn't a row so this doesn't have display flex by default so let me do display flex here and oh yeah because i have to put stuff in there and then i want to do a line item center and then give it some padding so let me do padding first so padding of just on all sides of two which i think is something like eight pixels okay so that'll bring it out from the left side and now i want to center it vertically which should be align items so align items so i'll do a line items center so after flex align items center okay cool that looks better i could make the font a little bit bigger but i think that's okay yeah i will have to show more than the first operand but i'm just setting up the first operand so i could get a pending working okay um but now okay so with the dot i need to handle that special so if someone's trying to pass in a dot they should only be able to do that one time so let me also it's kind of annoying not having a clear button i might just add that and then figure out how to fit that in the calculator after let me put that after the card oh no um oh let me just add another row then with just a clear button for now and then i'll rearrange the buttons later so let me add this row at the top and because this will be an easy method to just do so clear and all this be ac or just c yeah all right so because as i'm working it's going to be just convenient to have a clear option so clear and uh for right now just for the first operand so i'm just going to set that to an empty string okay so if i have this here all right so that clears the value and it does look kind of weird being like on the lonely space up top i could make this display block so the button goes all the way across um oh yeah but it uh it gives it a width of 100 but the width is already set so let me inspect this rules yeah because i set the width in a scoped style so i could overwrite that so btn block um so since this is scss i'll just nest a style in here so and dot btn block and i'll do width 100 percent okay so now the clear button and let me also make that orange real quick so let me do a variant variant which will be warning all right okay that doesn't look too bad let me get rid of that okay so now i have a clear and oh yeah for the periods i need to have some logic around when and how you can use a period um you can only use one um decimal point in a number so i have to search for that um so let's see in append character i need to check so if uh this dot char is a period then i have to do basically um let me just nest an if statement uh so if um this dot first operand dot contains so if it already contains a period then i'm going to do this dot i'm basically going to do the same thing as here so i'll append it only if it oh if it doesn't contain it so i need to negate this actually so if this.first operand contains a period if it doesn't contain a period already then append the period otherwise do nothing um i don't want to give them a warning or anything so let's see if that works so three point eight point oh it's still doing it um so let's see okay so there's no problems let's see first operand if it doesn't contain a period so i can maybe i'll do a debugger sometimes when i'm live streaming my my debugger doesn't work too well but let's see um so if this dot shot oh this dot charm man okay so yeah it's the ch because i want to check against the char that i'm passing in so let's see if this works now okay well now it doesn't let you ever put a period in so if this dot char equals period um so let's just see if it hits the log statement here let's do let me go to console and make this smaller oh wait it does have oh this dot first operand dot contains it's not a function okay so i think that's my issue and i thought there was let's see javascript contains okay so there's oh is it includes i think it's includes maybe i'm thinking of something else so includes i think that's what that's the method that i want all right let's see point so that's not working well it's getting here anyway so i need to find out what this is so let me send a debugger here too many too many what too many period yeah i know i should only have one in there so let me do one period now it should pull up that method okay so it's that first operand includes so i should be able to see wait the first operand is one and then i should be able to see let me step over step over yeah char is that so this expression i guess it shouldn't be evaluating to true if not let me see let me get rid of this statement and just log it out so console.log and i think maybe my logic is backwards here it adds a period if there is already any period at all it's skipped you need to put the outer oh yeah that's right that's right so i need to wrap this in else all right thanks all right so now it's still doing it why is it adding two did i add it in else if so if the character is a period i'm wondering if this method is getting called twice because now i'm so i'm doing okay so inside of a pen character i call a pen character if the character is a period then it should just run this if statement i don't i don't think it's a misplaced else though because it should only be running this if statement if the character is a period and then inside of that i run another if statement if it already includes that then don't run it basically so this l should be working that's weird um if else that's the right javascript syntax so if char is period then why is it running the second one too hmm okay so yeah i'm not sure why i don't have any other place where i'm appending so let me just log out i guess this one i'd have to do um just a string to differentiate it and then here no i don't think so though because this is only checking if it already includes a period so i don't want to append it because then i would be doing the same thing in the if and the else statement in here which i don't want to do oh let me see okay so let me clear that clear this okay so it's logging out that and now if i do period yeah now it works okay i think i just needed to refresh it somehow yeah okay that was weird uh all right so that's fine all right so now i have the just the first operand appending so now if i hit an operation an operator i need to store these operators in some kind of operator or i need yeah i need to store them in operator so now i need to make um here let's see yeah so the i think that's it no that's good okay so i'll do at click and when i click i want to just straight update the operator variable so operator will equal whatever operators inside of this button so for the first one it's going to be a plus sign let me put these on more lines okay so the first time for the plus sign i set the operator equal to plus for this i set the operator equal to minus and then which one is this oh for times i can set the operator equal to that star symbol and for divide i'll set it equal to divide okay i think that's right and then equals is going to have its own i'll just go ahead and change equals to eval even though i haven't set up that function yet okay so i think all of the functions are correct now let me look in the view dev tools okay so in view dev tools um i'll look at oh yeah i want to look at my calculator component so inside app calculator and then when i click on these it's not doing anything okay do i have an error let me refresh okay so when i click oh that was weird when i started clicking on the operands it updated the operator too huh i wonder why it's doing that because i'm clicking on these buttons but when i click on the minus sign the operator still says plus until i hit another button here and now it says minus i think that's just a matter of refreshing in the view dev tools so let me hit times and then refresh yeah so that's just a refreshing problem in the vw tools okay so let me see if they let me zoom in yet no they don't okay view dev tools still doesn't let me zoom in oh well okay so the operator is getting saved um so now if the operator exists yeah i know sorry tom um i can't zoom in unless maybe i zoomed in via this does that i don't know i'm waiting for the screen to update i think i probably have like a 10 second leg i think right now so waiting waiting lady i don't know that zoom doesn't work oh well um all right so let's see maybe light mode no i think just in firefox in general it doesn't work right now uh i because i switched i didn't i switched to dark mode not that long ago i think it was on one of my live streams where someone suggested me to use dark mode yeah chrome dev tools i should set up a chrome my chrome doesn't have any extensions right now i just use it for ui testing that's it so i could set that up and you know just use chrome maybe i'll have that for next time okay so uh what is it okay so i have the first operand i have the operator and now if the operator exists um actually i want to make a function for the operator because if there's no first operand i don't want to set the operator yet but i'll worry about that in a minute that'll just be a known bug um so the second operand if the if the operator exists i want to start working on the second operand so what i'm gonna have to do in here is set the current operator so const current operator equals let's say this dot i need to check so if this dot operator exists then the current upper operand o current operand operand if this operator exists meaning if they've already hit like plus or minus or something then i want the current operand to be the second one otherwise i want it to be the first one okay and i'm gonna put this on two lines so it's easier to see and i thought maybe that's just in python i thought i could alright so i can still put on two lines but i'll just do it here instead so i'll do the parentheses here yeah that works alright so if the operator has already been typed in then the current operand will be the second one otherwise the first one and so now i need to and i think i can just mutate state from here and actually let me do let here not const so i think now because this should be point oh no it's a string value so um so first operand so i wonder if this is going to be if it's not a pointer so i wonder what is the best way to update this then and to set you know if the operator exists it should oper it should be the second one otherwise the first one and i kind of don't want an if statement inside each one of these so yeah i'm not sure um definitely in the output screen though i definitely want if the second one exists if the second one exists i want to display it otherwise the first one so if second one's false it'll display the first one so that was now let me think about the logic here so i want to do i need to pick the the current one set current operand to string and then yeah that will work that will work actually that's a good idea okay so i'll set it to a string so let me do yeah just a string and then yeah and then here i'll do this so i'll do this current operand thanks that's that's a good idea and then i want the same logic in the else statement so there okay and that will be the same as like this dot second operand or this stop first operand um are these spelled correctly yeah current operand just checking spelling here okay so that should work so let me see if that works actually so let me do 25 plus sweet that's good uh let me see if they're saving in the right places just to double check in calculator yeah i have them all saving in the right places so then technically in eval i could just um do let's see i could do well let me import the function that i want the math function so i want to import evaluate from math so yeah math.js so up here at the top of the script tag i can do import evaluate from math.js and now in eval i can just use eval evaluate and then i need to pass in a string so i'll just add these strings together concatenate them so first going to be first operand oh it has to be this so this actually because i'm using this three times let me pull them off of this so um const first operand uh second operand and operator equals this and then i'm gonna concatenate them with just make one big string so first operator first operand plus operator plus seconds operand yeah um okay so evaluate now i have to store this somewhere so this is the logic so i'm gonna have to do this dot um first operand equals the result of the evaluation and then i'm going to set the second one to be an empty string again and oops and then the operator uh oh wait the operator to also be an empty string so i'm going to reset those two and set the uh result to first operand um yeah let's see let me do that all right so 12 plus 3 equals 15. and now if i do it again i should be able to oh no oh no no 18 21 no it's adding every time it's not resetting the operator why not um hmm let's see the operator is blank here so that's weird i need some water all right so the operator is blank in the dev tools um we need to give a hard refresh and see if it's just buggy plus six okay and now if i try it okay yeah now i can append and now minus six no um yeah so there's some things going on here and now clear doesn't work maybe i have a error no errors anywhere hmm let's see 23 plus 3 equals 26 okay that's good let's do plus five that's good equals thirtyone that's all good let's do minus three equals 28 okay everything's good so far um now let me add an appended number no what happened in my devtools refresh 31 34. okay the operator is blank it's an empty string i keep refreshing it's an empty string the second operator is blank first operator is 41 so it should append but instead it's adding three um oh oh i think i know why okay so this is evaluating and becomes a number value so i think uh javascript okay so i think because the result of evaluate is a number and not a string so then in javascript's mind i'm i'm so i have 44 the number and then i'm adding 3 the string so it thinks i want to add 3 the number so it parses it as a number and adds it of course if i add a period okay yeah and now i don't have the includes function because now first operand's a number so i need to change this to string basically yeah so um parse int oh yeah so it would be two string i think at the end so two string and i think that's what i have to do i don't think i have an str function like in python so let's see if this works yeah that's that's one thing about types in javascript let's see so 12 plus 3 equals 15. now if i do yep okay minus 5 equals ah okay cool so that all works as intended that wasn't uh didn't take as long as i thought it would um yeah and then divide by 9 equals oh yeah so now the rounding in javascript because i think if i do let me do 10 10 divided by 4 which should be 2.5 it is 2.5 okay so uh no problem there i think there are some numbers where it doesn't it doesn't round or there are some numbers where it doesn't round quite right maybe the math library is taking care of that for me so yeah so is there anything else i should do i should probably do some cleanup like when i um do plus like when i hit one of these symbols and it's current i need to set the class also i don't like that it gets rid of the border when i hover so let me fix some of that some of the styling stuff um so on the button let me do and hover because i'm using sass and so when i hover over the button class i want there to be no change in the border so border one pixel solid i think oh yeah and then i have to set i do need to set the color because for the dark colors it defaults to white and bootstrap so i'll have to set black cool that looks better and now let me see what class it's adding to make the color darker because then i could set active that as the active um operator i guess so let's see hover so let me set the hover state on plus and what styles does it get offering me oh yeah it just it's just basically darkening the color and i think it's doing it in sas so i don't know exactly the percentage that it's actually making it darker um let's see yeah i'm just gonna come up with a percentage because sas gives me those colored classes so i can do um and hover so when i hover over a button i'm going to set my own um background color is but then i should set a variable here i guess so let's see what's the regular color oh the regular color without being hovered over is orange so let me set these variables in sas and i don't know if i can do these inside components i guess i can because i'm just writing regular sas so let me set a variable called orange and orange is that color and then oh did it not like that oh because i didn't set the background color okay so now i can do dollar sign orange yeah and i'm oh wait i'm hovering over all these that's not what i want um okay so button okay let me do the other variables so let me inspect this and get that gray color so here's the gray background for the other buttons and i'm going to put that in a variable too so i'm going to call this dark gray and there we go and now so the button now i'm gonna have to set the background color of the buttons to be default of dark gray and then if it's a btn warning class then i want to set it set the background color as orange okay so now it should be overriding those colors and this will let me oops um and this will let me do hover hover classes now so now i can do darken use the sass method darken and what was the other what do i oh yeah i pass in the color first so dark gray and i think there's a way to access the relative color here but i can't remember how to do it so let's do darken it by ten percent and if it's a warning one then we can um oh yeah so basically be doing the same thing get rid of the border and then i'll do orange here it might be a little bit more than it was okay and now so this is on hover and now i want that same um well i probably don't need 10 let me just change this to 8 it's a little bit extreme um and now i want that same thing basically if the button is active so if i clicked on one of these ones one of these four then i want it to stay active i guess so let's see um let me do so i need some kind of special operator class here a class on the operator buttons because clear you know has warning but i don't want it to stay active so i need like some kind of i don't know i'll do a class of operator here and okay so let me paste that and paste that and then okay so all the operators have a class of operator now maybe i didn't arrange this sas the best way because this darken color i also want if if so yeah this is more code i guess than it should be um i might look up a sas shortcut for this so anyway if it has the class operator as well as button then i want to also change the background color to be darker background color and i want it to darken so oh wait oh yeah i only need this operator class and button warning because i don't actually want it in the other one so yeah that will work because i only ever want it for dark orange of course i could save dark orange in a variable too oh wait only if it's active though um active okay so maybe i'll have the class called active operator and then in my class i'll make this a dynamic class and basically only set that class equal to so let me make an array here or let's see an object yeah i'll make an object and i'll give it the class active dash operator oh wait this will have to be in quotes because it's hyphenated only if um i'll give it the class active operator only if the operator variable and this is where prettier is is nice because i have it set up correctly on save it just formats all my code for me i don't have to do any of this okay so if the operator is um the forward slash then i want this button to be set as active operator so let's see yay now it's active cool so i have to set this up for all of them now basically so and is this that different no i just have to update this so i'm just going to copy this whole thing actually paste paste paste and okay let me get rid of that oh yeah get rid of this button and okay so now i have all of those and now i just need to update this because i pasted it in so this is multiply and this one is minus and this one is add okay well hmm oh it's the same thing in these i forgot about that oh well so that one's add this one active operator is oh wait why do i have b call around that one and none of the other ones i should get rid of that i will in one second let me finish doing this i was wondering why it was a different number of tabs inward okay so do that and now let me get rid of this column here so so v oops wrong button uh there okay so 32 plus yep and now it's active so it's a little bit darker plus 6 equals yeah and now it goes away after that so now if i do minus it stays highlighted minus 52 equals negative 14. okay there are other things i could do like you know instead of having this clear the whole way across let's see it's after 12 already instead of having this clear the whole way across um i could put other buttons like that uh sign button is that even on the math calculator yeah changes the sign so if i have an eight i can change the sign to negative eight positive eight i can change it into a percentage um let's see cool yeah i think it turned out pretty well um there are some known bugs like you can hit an operator before anything is in there so i i should make an operator class really equals oh so okay so it would be zero so oh yeah that's what i should do actually i shouldn't change the operator at all what i should do is if there's no second operator no first operator then can i do this yeah i can stack it should be zero yeah so it's zero now cool so it would be zero minus six equals negative six yeah that makes sense actually change the colors on click instead of hover i do need some kind of hover like hover state but now if i click on it it stays in that state so i know that it's active basically okay until i hit the equal sign now when i so when i have like let's say i have plus um six and then i do minus i should it should evaluate if i try to hit a second operator it should evaluate if you click a number after an equal sign it starts calculating a new math problem if you click a number after the equal sign i'm not sure so after the equal sign so if i hit equals and then another number mean it kind of i guess you start calculating you mean you can somehow make a math expression here this calculator isn't isn't up there yet so you calculate one problem and instantly start a new problem i isn't it doing that though maybe i'm confused at what you're saying but like right now now that hit equals i start a new problem equals and then the new problem because it's reset to the state it was at the beginning except the first operand equals this number windows calculator so let me actually so when i hit a second operator right now it doesn't work as intended so when i hit if i do plus three now if i hit a second operator it needs to run the eval function before and then store the second operator so how am i going to do that i think this is the last thing i'm gonna do in this stream because i was streaming for a whole hour before it went live so i talked about a lot of stuff thinking that just i was like man the chat's really quiet all right so let's say oh yeah so this operator operator equals i need to make a method so i need to make some kind of method here called like update operator and okay um update operator and then oh yeah i'll have to pass it in here so operator which doesn't overwrite i mean this is kind of confusing maybe i'll call it oops i'll call it op here because there is a this dot operator which is on my component state here oh num plus num yeah i don't i'm not gonna have it i don't have time in this stream to do like a whole expression i'm just going to keep it the way it is for right now but if you want to make a pr to the repo and fix the code you are more than welcome to so pass in the operator and i will set this dot operator equal to the operator that i pass in so now let me copy this method and now i'm going to change it here so update operator the method and then do the same thing for all of these really so all right update operator yeah for minus update operator that'll give me more control over what i do when i update it uh update operator all right so now i have update operator let me just make sure that's working wait yeah i did that right okay um i forgot what i did for a second so now that i have update operator so now inside of update operator i can check and say if this dot operator so if there's already an operator set then i can run this dot eval um yeah call this.eval evaluate the expression and inside of this.eval it's going to clear the second operand and the operator so then after eval because they've already typed in a second operator i want to go ahead and save that after but if there is no current operator anyways i want to save the operator so i think this will work yeah i haven't pushed the code yet i will in just a second um let me do 23 plus five and now instead of hitting equals i'm going to hit minus cool so it ran the operation and now it stored the second operator so now i can have another second operand so 5 times 6 plus 3 and you get the idea okay um okay so it's running evaluations as i'm going i think that's pretty good um there can be some improvements but i think overall it turned out pretty well what do you think yeah i'm gonna do a commit so is there any more cleanup i need to do any useless you know i can do small cleanup like that and i think i'm not using border box that style one style box sizing yeah um let me see if it still works yeah so i think that's the last thing to clean up maybe we'll find more stuff later but overall i think it's pretty good all right so let me stop the dev server then thanks does anyone have any questions comments statements you want to make about this calculator or view or anything let me go up a directory because the git repo contains all of these folders so my get free code camp projects view i'm going to do git status and i added the calculator app um i already have a get ignore file that's good so i'm going to do git add just add everything get commit dash m code from live stream thanks thanks kumar uh code from livestream on i can't believe it took me an hour to realize that my app said i was live but it wasn't actually going to the free code camp stream so sorry about that git commit dash m code from livestream on july 10th july 10th for me anyway git push now let me see if it updated oops if it updated yeah i think overall this yeah so now i have the calculator app code inside of here i think overall this one turned out much much better than my old one if you want to see my old code i'll post it in the chat here you can take a look at what i was doing back in 2015 um just eval all the things basically in jquery so yeah definitely come a long way in development i think i was trying to do some object thing but i couldn't get it to work or something happened i don't remember now but yeah there's my old calculator and the new calculator much better cleaner not not great the styling's not great but uh bootstrap helped a lot so yeah thanks for joining the stream today uh oh what is the theme oh real quick uh let me go to the theme this is a plugin that someone suggested to me during a stream actually so where is it where is it it's pale pale night theme it's this theme and i thought it was kind of weird like a lot of purple at first but it's it's growing on me i think i'm going to keep it for a while so yeah it's a great theme was used vs code to highlight that code block when you wanted to change indentation oh i use vim so envious code i um use vim whereas vim key bindings basically so if i'm in like if i'm on this line i can press shift v and it highlights the whole line if i want to highlight part of a line then i do v and then i can w over or b for back highlight different things v and then i can go up or down with j and k i can go down many lines at a time yeah vim is great i recommend it and it makes it even better when you're using it in vs code because you get all of the vs code shortcuts and then you get the vim shortcuts too and if you use vim enough you know copy pasting in vim can be a real pain going from file to file but envious code i think it makes it a nice development experience to use vim inside vs code so yeah i have enjoyed it a lot especially using a mechanical keyboard where i can kind of set set up my keys how i want and then set some macros like multiple keystrokes saved into one key where i just press one key and it does a bunch of things which is fun so yeah thanks so much for the stream you should check it out if you have any questions or something leave them in the comments below and feel free to reach out to me i also have uh my youtube channel faraday academy you should check it out i do lots of view and python content over on there and i hope you all have a great day take care
