With timestamps:

00:00 - in this video i'm going to talk about
00:02 - what i think are the habits of a
00:04 - successful software engineer so if
00:07 - you're interested please stay tuned
00:11 - [Music]
00:18 - first of all the habits that i'm gonna
00:21 - list here apply to being a successful
00:24 - software engineer not just a coder
00:27 - software engineering is way beyond just
00:30 - coding but that is a topic for a whole
00:32 - new video let's get started when i first
00:35 - started working in the field i had an
00:38 - extreme urge to start coding right when
00:41 - i was given a project a problem a
00:43 - feature to implement because i found
00:45 - that if i'm not coding i'm just not
00:48 - being productive but the reality is that
00:50 - most likely the software you're gonna be
00:53 - built in is not gonna be built fully by
00:56 - you from scratch you're most likely
00:58 - going to be working on something that
01:01 - needs to fit in into the existing
01:04 - architecture and what successful
01:06 - software engineers do is that they first
01:09 - fully understand the scope of the
01:11 - problem and only then once you fully
01:14 - understand what exactly you're solving
01:17 - only then you should start coding this
01:20 - brings us to point
01:22 - two
01:23 - successful software engineers are really
01:26 - good at documentation most likely you're
01:28 - not going to be the only one working on
01:31 - the project there might be other
01:33 - engineers or designers or data
01:36 - scientists or product managers involved
01:39 - and you need to make sure that whatever
01:41 - is in your head gets documented and then
01:45 - clearly communicated for others a
01:48 - successful software engineer will make
01:50 - sure to document every stage of his or
01:54 - her thinking of how they will approach
01:56 - the problem what the solution of the
01:59 - problem is what are the potential
02:01 - roadblocks to the solution of the
02:03 - problem and they will communicate this
02:06 - to all the stakeholders
02:08 - and parties involved in this project
02:10 - they will do that so that everyone is on
02:12 - the same page and they will also do that
02:15 - to get feedback from everyone most
02:17 - likely you might have overlooked
02:20 - something and asking for feedback and
02:22 - being receptive to that feedback from
02:24 - everyone else is super important the
02:26 - easiest way to get that feedback is to
02:29 - get everyone on the same page document
02:31 - everything for everyone and then share
02:35 - successful habit number three successful
02:39 - software engineers write readable code
02:42 - and they do so because they understand
02:44 - that they will probably not be the only
02:46 - person interacting with whatever they
02:49 - wrote or maybe after they wrote it there
02:51 - is going to be someone else maintaining
02:53 - it so they keep in mind the fact that
02:56 - someone will have to come in and look at
03:00 - this thing that they wrote that they
03:02 - have never seen before and understand it
03:04 - most importantly your solution your code
03:08 - must be readable because
03:10 - someone else might come in and want to
03:12 - understand it successful habit number
03:16 - four
03:16 - is being good at cross-functional work
03:19 - as a software engineer you most likely
03:21 - will work with other functions like
03:23 - designers or product managers or data
03:26 - scientists or people in operations you
03:29 - name it
03:30 - a successful software engineer
03:32 - empathizes with the other function that
03:35 - they work with and almost put themselves
03:38 - in that person's shoes so that they can
03:40 - effectively communicate with them they
03:42 - can
03:43 - deliver to them the exact information
03:45 - that they need so if i'm working with a
03:48 - designer i will try to explain to them
03:51 - what exactly i'm building from like the
03:54 - design perspective if i'm working on a
03:56 - product facing feature that's what i'm
03:57 - going to be focusing on in conversations
03:59 - with them versus the actual nitty gritty
04:02 - of technical implementation if i'm
04:04 - working with a data scientist i need to
04:07 - effectively communicate with them about
04:10 - logging or data analysis or just asking
04:13 - them the right question about how we
04:15 - want to analyze the data coming from
04:18 - this new project or feature that we've
04:20 - built so being good at cross-functional
04:24 - work is really important as a software
04:26 - engineer and this brings us to my next
04:29 - point communication if you think that as
04:32 - a software engineer you can just sit in
04:35 - a corner
04:36 - not interact with absolutely anyone
04:39 - you're definitely wrong of course you
04:41 - should be setting your own boundaries
04:42 - and communication style but successful
04:45 - software engineers are effective
04:47 - communicators successful software
04:49 - engineers make sure that they
04:51 - communicate clearly and effectively
04:54 - especially if you work on a project that
04:56 - involves other stakeholders or you work
04:59 - with your teammates other software
05:01 - engineers you need to make sure that you
05:03 - communicate with them and over
05:05 - communication a lot of times is much
05:08 - better than no communication because
05:10 - when you communicate or over communicate
05:13 - you make sure that everyone is on the
05:15 - same page you make sure that everyone is
05:18 - clear on what you're working on and you
05:20 - make sure that no one is wondering oh i
05:22 - wonder what luba is working on i wonder
05:25 - if she completed that thing that i asked
05:28 - her to implement couple of days ago so
05:31 - communicating effectively clearly and
05:34 - potentially over communicating is
05:36 - extremely important also by
05:38 - communicating with your teammates you
05:40 - can potentially recognize whether you
05:42 - can help them out or you can unblock
05:45 - them and communicating in general in
05:48 - your team in your org in your company
05:51 - just interacting with people can open up
05:54 - opportunities for you you might hear
05:56 - about something that another team is
05:58 - working on that fits in or helps out
06:01 - your products your team or your project
06:04 - and that will open up opportunities and
06:07 - doors for you next up
06:09 - recognizing opportunities
06:11 - successful software engineers recognize
06:14 - opportunities for improvement and impact
06:17 - and what i mean by that is that
06:19 - successful software engineers do not
06:22 - just focus on their projects or feature
06:26 - at hand that they're working on but
06:28 - they're able to see and follow beyond
06:31 - that they're able to follow what their
06:33 - teammates are working on what their
06:35 - work's focus is and why that is
06:38 - important is because when you're able to
06:41 - see that big picture as opposed to being
06:44 - very narrow focused on okay this is what
06:46 - i'm working on and this is the only
06:48 - thing i care about you're able to
06:50 - potentially recognize opportunities for
06:53 - impact and improvement question why
06:55 - people are doing things a certain way
06:57 - you might learn new things that are
06:59 - relevant to you you might also
07:01 - potentially recognize what faults they
07:03 - have in their systems and improve them
07:05 - talking to people asking people what
07:07 - they're working on thinking about how
07:10 - their work fits in with what you're
07:13 - doing or your team is doing are great
07:16 - examples for recognizing opportunities
07:19 - and last but definitely not least is the
07:23 - growth mindset consistently learning
07:26 - asking and being open to feedback making
07:28 - sure you learn from your mistakes and
07:31 - reflection are all great examples of
07:34 - growth mindset growth mindset is the
07:37 - difference between thinking that your
07:39 - skill is absolutely set and is defined
07:42 - by talent versus thinking that you can
07:46 - learn and grow and improve your skills
07:49 - and your growth is defined by the amount
07:52 - of work you put in to be a successful
07:55 - software engineer as well as being
07:57 - successful in any profession acts you
08:00 - must acquire the growth mindset your
08:03 - skill is not fixed you're constantly
08:06 - improving and learning and you need to
08:08 - absolutely own that and recognize that
08:11 - successful software engineers are
08:13 - constantly learning constantly asking
08:15 - for feedback in fact feedback is also a
08:18 - huge thing if someone is giving you
08:19 - feedback do not be defensive about it
08:21 - that means that they really care for you
08:24 - to improve so you should be open to
08:26 - constantly learning and constantly
08:28 - recognizing what you could do better
08:30 - successful software engineers are open
08:32 - to learning are constantly open to
08:34 - growing are absolutely okay recognizing
08:37 - that they might be wrong guys thank you
08:40 - so much for watching this video i hope
08:43 - you enjoyed it and i hope you learned
08:45 - something new about habits of successful
08:48 - software engineers if you enjoyed it
08:50 - please don't forget to like and
08:53 - subscribe there is a subscribe button
08:55 - down below and please leave your
08:57 - comments down below as well
09:00 - what do you think makes a successful
09:02 - software engineer i would be really
09:04 - curious to hear your thoughts obviously
09:07 - what i mentioned is just a couple of
09:09 - points in the myriad of things that
09:11 - makes a successful software engineer but
09:14 - please share your thoughts and i hope
09:16 - you have a fantastic week bye for now

Cleaned transcript:

in this video i'm going to talk about what i think are the habits of a successful software engineer so if you're interested please stay tuned first of all the habits that i'm gonna list here apply to being a successful software engineer not just a coder software engineering is way beyond just coding but that is a topic for a whole new video let's get started when i first started working in the field i had an extreme urge to start coding right when i was given a project a problem a feature to implement because i found that if i'm not coding i'm just not being productive but the reality is that most likely the software you're gonna be built in is not gonna be built fully by you from scratch you're most likely going to be working on something that needs to fit in into the existing architecture and what successful software engineers do is that they first fully understand the scope of the problem and only then once you fully understand what exactly you're solving only then you should start coding this brings us to point two successful software engineers are really good at documentation most likely you're not going to be the only one working on the project there might be other engineers or designers or data scientists or product managers involved and you need to make sure that whatever is in your head gets documented and then clearly communicated for others a successful software engineer will make sure to document every stage of his or her thinking of how they will approach the problem what the solution of the problem is what are the potential roadblocks to the solution of the problem and they will communicate this to all the stakeholders and parties involved in this project they will do that so that everyone is on the same page and they will also do that to get feedback from everyone most likely you might have overlooked something and asking for feedback and being receptive to that feedback from everyone else is super important the easiest way to get that feedback is to get everyone on the same page document everything for everyone and then share successful habit number three successful software engineers write readable code and they do so because they understand that they will probably not be the only person interacting with whatever they wrote or maybe after they wrote it there is going to be someone else maintaining it so they keep in mind the fact that someone will have to come in and look at this thing that they wrote that they have never seen before and understand it most importantly your solution your code must be readable because someone else might come in and want to understand it successful habit number four is being good at crossfunctional work as a software engineer you most likely will work with other functions like designers or product managers or data scientists or people in operations you name it a successful software engineer empathizes with the other function that they work with and almost put themselves in that person's shoes so that they can effectively communicate with them they can deliver to them the exact information that they need so if i'm working with a designer i will try to explain to them what exactly i'm building from like the design perspective if i'm working on a product facing feature that's what i'm going to be focusing on in conversations with them versus the actual nitty gritty of technical implementation if i'm working with a data scientist i need to effectively communicate with them about logging or data analysis or just asking them the right question about how we want to analyze the data coming from this new project or feature that we've built so being good at crossfunctional work is really important as a software engineer and this brings us to my next point communication if you think that as a software engineer you can just sit in a corner not interact with absolutely anyone you're definitely wrong of course you should be setting your own boundaries and communication style but successful software engineers are effective communicators successful software engineers make sure that they communicate clearly and effectively especially if you work on a project that involves other stakeholders or you work with your teammates other software engineers you need to make sure that you communicate with them and over communication a lot of times is much better than no communication because when you communicate or over communicate you make sure that everyone is on the same page you make sure that everyone is clear on what you're working on and you make sure that no one is wondering oh i wonder what luba is working on i wonder if she completed that thing that i asked her to implement couple of days ago so communicating effectively clearly and potentially over communicating is extremely important also by communicating with your teammates you can potentially recognize whether you can help them out or you can unblock them and communicating in general in your team in your org in your company just interacting with people can open up opportunities for you you might hear about something that another team is working on that fits in or helps out your products your team or your project and that will open up opportunities and doors for you next up recognizing opportunities successful software engineers recognize opportunities for improvement and impact and what i mean by that is that successful software engineers do not just focus on their projects or feature at hand that they're working on but they're able to see and follow beyond that they're able to follow what their teammates are working on what their work's focus is and why that is important is because when you're able to see that big picture as opposed to being very narrow focused on okay this is what i'm working on and this is the only thing i care about you're able to potentially recognize opportunities for impact and improvement question why people are doing things a certain way you might learn new things that are relevant to you you might also potentially recognize what faults they have in their systems and improve them talking to people asking people what they're working on thinking about how their work fits in with what you're doing or your team is doing are great examples for recognizing opportunities and last but definitely not least is the growth mindset consistently learning asking and being open to feedback making sure you learn from your mistakes and reflection are all great examples of growth mindset growth mindset is the difference between thinking that your skill is absolutely set and is defined by talent versus thinking that you can learn and grow and improve your skills and your growth is defined by the amount of work you put in to be a successful software engineer as well as being successful in any profession acts you must acquire the growth mindset your skill is not fixed you're constantly improving and learning and you need to absolutely own that and recognize that successful software engineers are constantly learning constantly asking for feedback in fact feedback is also a huge thing if someone is giving you feedback do not be defensive about it that means that they really care for you to improve so you should be open to constantly learning and constantly recognizing what you could do better successful software engineers are open to learning are constantly open to growing are absolutely okay recognizing that they might be wrong guys thank you so much for watching this video i hope you enjoyed it and i hope you learned something new about habits of successful software engineers if you enjoyed it please don't forget to like and subscribe there is a subscribe button down below and please leave your comments down below as well what do you think makes a successful software engineer i would be really curious to hear your thoughts obviously what i mentioned is just a couple of points in the myriad of things that makes a successful software engineer but please share your thoughts and i hope you have a fantastic week bye for now
