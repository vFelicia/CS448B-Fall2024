With timestamps:

00:00 - the module design pattern in JavaScript
00:02 - is one of the most used design patterns
00:04 - for keeping particular pieces of code
00:06 - independent from each other modules
00:09 - allow you to break up different parts of
00:10 - your code to make it easier to maintain
00:12 - and reason about also modules can
00:15 - provide encapsulation which can protect
00:17 - properties and functions from being
00:19 - accessed from other parts of the code
00:21 - before JavaScript es6 you would set up a
00:23 - module like this you would um declare
00:26 - this function you would have the private
00:27 - variables or functions up here and then
00:29 - you would return what you wanted your
00:31 - public variables or functions to be and
00:34 - then it would just be immediately
00:35 - invoked right here this is just a
00:37 - closure that returns an object I'm not
00:39 - going to go into much detail about this
00:42 - because there is a new way to do it with
00:43 - es6 the module pattern can be
00:45 - accomplished using classes this allows
00:47 - you to keep units of code cleanly
00:49 - separated and
00:52 - organized so with es6 our modules will
00:54 - look something like this now the whole
00:57 - point of modules is that you're keeping
00:59 - code separ seated usually in different
01:01 - files so I don't have different files on
01:03 - here but this is representing one file
01:05 - here and this uh this down here main.js
01:08 - is representing another file so let's
01:11 - look through this we have a
01:13 - class shopping data type and we have a
01:16 - Constructor these are going to be the
01:17 - private properties this. shopping list
01:19 - equals coffee chicken pizza so we're
01:22 - creating an array that that's a private
01:24 - array now we also have these public
01:26 - methods um get shopping list where it's
01:28 - not going to return the actual array
01:30 - it's actually going to return a string
01:33 - that join is just going to return a
01:35 - string with all these item with all the
01:37 - items in the array separated by a comma
01:40 - and a space so you cannot have access to
01:42 - the actual array and then we can also
01:44 - add an item this that function here it's
01:47 - just going to push the item onto the
01:48 - array so at the end of the file we have
01:51 - to do this line export default shopping
01:54 - data type so that's just going to export
01:57 - this class so we can use it in a
01:59 - different file at the beginning of the
02:02 - other file we're going to put import
02:04 - shopping data type from lib slm module
02:08 - that's just the directory and file name
02:10 - without the JS and after we import that
02:12 - in we can start using the file so we can
02:15 - do something
02:20 - like and this would allow you to um
02:22 - print the shopping list in the other
02:25 - file so this is just a simple example of
02:28 - a module but they can be pretty complex
02:31 - and just allow you to keep code
02:33 - independent from each other in different
02:35 - files thanks for watching my name is Bo
02:37 - K check the description for links some
02:39 - more information don't forget to
02:41 - subscribe and remember use your code for
02:43 - good

Cleaned transcript:

the module design pattern in JavaScript is one of the most used design patterns for keeping particular pieces of code independent from each other modules allow you to break up different parts of your code to make it easier to maintain and reason about also modules can provide encapsulation which can protect properties and functions from being accessed from other parts of the code before JavaScript es6 you would set up a module like this you would um declare this function you would have the private variables or functions up here and then you would return what you wanted your public variables or functions to be and then it would just be immediately invoked right here this is just a closure that returns an object I'm not going to go into much detail about this because there is a new way to do it with es6 the module pattern can be accomplished using classes this allows you to keep units of code cleanly separated and organized so with es6 our modules will look something like this now the whole point of modules is that you're keeping code separ seated usually in different files so I don't have different files on here but this is representing one file here and this uh this down here main.js is representing another file so let's look through this we have a class shopping data type and we have a Constructor these are going to be the private properties this. shopping list equals coffee chicken pizza so we're creating an array that that's a private array now we also have these public methods um get shopping list where it's not going to return the actual array it's actually going to return a string that join is just going to return a string with all these item with all the items in the array separated by a comma and a space so you cannot have access to the actual array and then we can also add an item this that function here it's just going to push the item onto the array so at the end of the file we have to do this line export default shopping data type so that's just going to export this class so we can use it in a different file at the beginning of the other file we're going to put import shopping data type from lib slm module that's just the directory and file name without the JS and after we import that in we can start using the file so we can do something like and this would allow you to um print the shopping list in the other file so this is just a simple example of a module but they can be pretty complex and just allow you to keep code independent from each other in different files thanks for watching my name is Bo K check the description for links some more information don't forget to subscribe and remember use your code for good
