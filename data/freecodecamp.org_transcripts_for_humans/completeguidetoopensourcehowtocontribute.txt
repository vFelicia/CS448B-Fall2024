With timestamps:

00:00 - in this video we will talk about open
00:02 - source and why you should care about
00:04 - open source not only improve your
00:06 - technical skills but also your
00:08 - communication and networking skills
00:09 - so you can get the jobs and client and
00:12 - money that you deserve
00:14 - we will cover git and the platform
00:16 - github and go through
00:18 - all those tabs you see across the top we
00:20 - will also talk about how you can find
00:22 - open source projects to contribute to
00:24 - how to contribute
00:25 - using the github ui how to make your
00:27 - issues and pull requests and your github
00:29 - profile pop so you can stand out from
00:32 - the crowd
00:33 - how you can make money from open source
00:34 - directly and indirectly
00:37 - hi my name's eddie and i've been a full
00:38 - stack developer for over 15 years
00:41 - i have a youtube channel that focuses on
00:43 - open source if that sounds interesting
00:45 - to you
00:45 - the link is in the description below
00:47 - head over to my channel and subscribe
00:49 - and hit the bell so you get notified
00:50 - every time i post a video
00:52 - in this video we will start off with the
00:53 - basics and then we'll go through to the
00:55 - more advanced features
00:56 - if you want to skip ahead there are the
00:58 - timestamps in the description below
01:00 - don't skip just yet even if you're an
01:02 - experienced developer i'm sure there are
01:04 - some tips you'll pick up
01:05 - in the more basic sections and if you
01:07 - have any tips or any feedback anything i
01:09 - say please leave a comment below and i
01:11 - will reply
01:12 - open source is social coding so it's
01:14 - like social media but on steroids
01:16 - on places like instagram people can like
01:19 - your pictures they can comment
01:20 - and re-share on github people can not
01:23 - only
01:24 - style your project comment on your code
01:26 - fork your project to share it
01:28 - but they can also contribute back they
01:30 - can make improvements
01:32 - we can stand on the shoulder of giants
01:34 - on other awesome projects to make
01:36 - even better projects and then we can
01:38 - contribute features and bug fixes
01:40 - back to that original project even if
01:41 - you're not contributing to open source
01:43 - just yet i'm sure
01:44 - you're using open source projects why
01:46 - you should care about open source
01:48 - because you're probably using a lot of
01:50 - open source if not
01:52 - all the tools and projects you're using
01:54 - are probably open source
01:55 - and it's great that you're using these
01:57 - amazing open source tools but they're
01:59 - only there and available because of
02:00 - people like you
02:01 - who contribute to them and you may think
02:03 - oh i'm not an expert to contribute to
02:05 - any of the big projects like react for
02:07 - example but your fresh pair of eyes can
02:09 - add so much
02:10 - value to any project have you ever been
02:12 - reading some documentation
02:14 - and you've read step one okay i've done
02:16 - that step two
02:17 - done that step three oh how did i get
02:19 - there i think there's a missing step
02:21 - by you adding that step and contributing
02:24 - back
02:24 - will not only allow you to improve
02:27 - your documentation skills to improve
02:29 - your communication skills to network
02:31 - with other developers future employers
02:34 - it also help other people in the
02:35 - community it will also probably help you
02:37 - as well further down the line when you
02:39 - come to use that project again and you
02:41 - forget about that step you check the
02:42 - documentation and it helps you
02:44 - that's happened to me multiple times in
02:46 - addition to that it's becoming
02:47 - more and more important companies
02:49 - recruiters are now looking
02:51 - on github to find people and they're not
02:54 - looking for the best coders
02:56 - a lot of them actually looking for the
02:58 - right attitude
02:59 - are people getting involved in the
03:00 - conversation can they collaborate with
03:02 - other people
03:03 - can they give constructive criticism
03:05 - back to say someone's work
03:06 - but also be supportive at the same time
03:08 - these are skills
03:09 - in addition to coding and that's really
03:12 - important what a lot of these companies
03:13 - look for now
03:14 - so do get involved in the discussion on
03:16 - github and i'm going to take you through
03:18 - how you can do that on other platforms
03:19 - for example like linkedin you can write
03:21 - anything you want this is why
03:22 - cvs and linkedin aren't that useful
03:24 - github is becoming
03:26 - more and more useful and you don't have
03:28 - to contribute
03:30 - massive amount of work little and often
03:32 - it's like brushing your teeth
03:34 - you brush your teeth every morning and
03:35 - evening if you miss one morning
03:37 - or one evening your teeth aren't going
03:39 - to fall out it's not going to go black
03:40 - but
03:40 - over time your teeth stay healthy the
03:43 - same thing with open source do a little
03:45 - and often
03:46 - therefore your github profile stays
03:49 - healthy and then people can discover you
03:51 - from different projects that you've
03:52 - contributed to
03:53 - other conversations that you've got
03:55 - involved in you're probably more
03:56 - familiar with this process on places
03:58 - like twitter how you discover people how
03:59 - people
04:00 - discover you github is just the same and
04:02 - it's a great way to get discovered
04:04 - from your future employer or your future
04:05 - client so i've mentioned
04:07 - git and github let's talk more about
04:09 - that let me start with git
04:11 - because that underpins github there are
04:13 - many source control management systems
04:15 - but git is on steroids it not only has
04:18 - additional save points where you can
04:20 - save your work as you go along
04:22 - each time you're happy with it therefore
04:23 - if you make a mistake you can go back to
04:25 - your previous save point
04:26 - and source control management systems
04:28 - also have branching so you can create a
04:30 - copy of the work
04:31 - and prototype create spikes practice do
04:34 - certain things and still have those save
04:36 - points
04:37 - but only bring them back in for the rest
04:39 - of the team to use once you're happy and
04:40 - ready for it the big main advantage of
04:43 - git is it's very efficient
04:44 - very fast it's distributed which means
04:47 - you can work
04:47 - offline and just reconnect when you get
04:49 - internet connection again later on
04:51 - and you can do things like rebase which
04:53 - is like rewriting history
04:54 - so git is a great tool for collaboration
04:56 - so what is github
04:58 - github is built on top of git and gives
05:00 - you so
05:01 - many powerful features which means you
05:02 - can use git via their web platform
05:05 - but also you get issue tracking you get
05:08 - project boards that are like trello
05:09 - boards
05:10 - you get continuous integration which
05:12 - they call github actions
05:13 - i'm going to show you that all shortly
05:15 - you know what let's go to my computer
05:17 - and dive straight into it
05:18 - so now let's head over to github now you
05:20 - can see you've got github behind me
05:22 - this is my profile page on github and
05:24 - i've got a customized profile page which
05:26 - you can do by creating a repository
05:28 - the same name as your username you can
05:30 - see some of my highlights on my
05:31 - achievements i'm a github star
05:32 - the organizations that i belong to
05:34 - sponsors that i have and the people that
05:36 - i sponsor what you're probably more used
05:38 - to seeing
05:38 - is the pinned repositories and your
05:41 - green activity bar and this is what
05:42 - companies use to discover you
05:44 - that's why it's really important to be
05:46 - part of one organization be part of a
05:48 - community
05:49 - and to contribute to projects so let's
05:51 - pick a project and let's contribute to
05:53 - it so i can show you how you can easily
05:54 - make a contribution to other projects as
05:57 - we're on free codecamp's youtube channel
05:58 - i thought it'd be important to pick a
06:00 - free code camp project
06:01 - so let's start from the top and work our
06:03 - way down the page and then we'll make a
06:04 - contribution
06:05 - as you can see in the top right we have
06:07 - people that are watching the project
06:08 - that means for every change that happens
06:10 - on the project they'll get a
06:11 - notification
06:12 - and the notification depends on how they
06:14 - set up their notifications in their
06:15 - account
06:16 - so some people will be email some people
06:18 - would be notifications stars are like
06:20 - people who have favorited the project
06:21 - like bookmarked it and they'll get
06:23 - notifications in their github feed so
06:25 - not
06:25 - notifications that they've been tagged
06:27 - the notifications in their github feed
06:29 - forks are people who have made a copy of
06:31 - the project
06:32 - into their own account so they can make
06:34 - changes and we're going to do that
06:35 - shortly so stay tuned and then we have
06:37 - the tabs along the top we have code and
06:40 - that's the default tab that you land on
06:42 - and you can see the code underneath and
06:44 - you can navigate around
06:45 - between the code you can see the files
06:48 - you've also can switch between branches
06:50 - branches are taking a copy of the code
06:52 - base and allowing you to make
06:54 - changes to that without affecting
06:56 - everybody else on the project
06:57 - so we usually use branches a lot that
07:00 - are short-lived for a feature branch a
07:02 - spike branch a bug fix a branch and
07:04 - they'll get murdered into the mainline
07:06 - branch via a pull request when it's been
07:08 - reviewed
07:08 - tags and releases allow you to create a
07:11 - save point in your code base that can
07:13 - never change
07:14 - similar to a commit a release or a tag
07:16 - is higher up in that
07:18 - it will contain multiple commits and you
07:20 - usually name them like v0 1.2
07:23 - we can add a file we can do a lot
07:25 - through the github ui
07:26 - i can even open in codespaces which is a
07:29 - new beta feature coming out in github
07:31 - which allows you to have your entire
07:32 - development environment in the browser
07:34 - or
07:34 - in vs code locally but actually
07:36 - communicating with a server
07:38 - on github that means you don't have to
07:39 - worry about installing node a certain
07:41 - version or python a certain version it
07:43 - will just
07:44 - work which is a game changer so when
07:45 - that comes out any day now
07:47 - for everybody else it is going to be
07:48 - really awesome it's really going to
07:49 - lower the barrier to
07:50 - everyone contributing to open source and
07:52 - then we can see at the top the last
07:54 - commit that happened it was five hours
07:56 - ago we can even click on the git hash
07:58 - and see the exact changes that happened
08:00 - at that point
08:01 - so hopefully you're seeing how powerful
08:03 - git and github are
08:04 - and also you can see the commits the
08:06 - commit is the entire
08:08 - history of changes and we can see who
08:11 - made it this is why it's important to
08:12 - give your commit an
08:14 - informative descriptive but concise so
08:16 - short
08:17 - title so when looking through the
08:19 - history it is really easy to see what
08:20 - happened
08:21 - and then you can find the one that you
08:22 - want and then you can click on the get
08:25 - hash where you can actually go see more
08:27 - details about what changed when making a
08:29 - commit message
08:30 - don't forget you can also give a
08:31 - description if you want to add more
08:33 - information
08:33 - if you want to make changes to your
08:34 - project or somebody else's i think it's
08:36 - really important for you to raise an
08:38 - issue
08:39 - an issue is an action point or starting
08:42 - a discussion
08:43 - saying to someone there's a typo in your
08:45 - project there's missing documentation or
08:46 - there's a bug
08:47 - this is how i found it and these are the
08:51 - changes that i think should be made
08:53 - that's really important the changes
08:54 - could come from you or from someone else
08:57 - that's the next step but raising an
08:59 - issue
09:00 - helps you get that green square on your
09:02 - github profile and also adding comments
09:04 - so replying to issues is really a great
09:06 - way to get involved with a project into
09:09 - the community get on their radar
09:10 - so when they are looking to hire people
09:12 - they're going to look at people who
09:14 - contribute
09:15 - to the project so you'll be first on the
09:17 - list this is the issue section on github
09:20 - and it's a great way to start the
09:21 - conversation on your idea or the bug you
09:23 - found or the enhancement that you want
09:25 - and not only that it's a great way for
09:27 - you to get involved in the conversation
09:29 - on
09:29 - other issues so do have a search do
09:32 - filter the issues
09:33 - for any issues you raise you still get a
09:35 - green square on your github profile
09:37 - issues have labels and the great thing
09:39 - about these are if you want to fix a bug
09:41 - or if you want to find something more
09:43 - challenging where help is wanted or if
09:44 - you want to find one that's a bit easier
09:46 - another label to look for is good first
09:49 - issue and you can click on these and it
09:51 - filters them
09:52 - so now they've been filtered down let's
09:53 - say if i want to create a new issue
09:56 - i hit on new and some projects have
09:58 - templates
09:59 - that means they'll pre-populate the
10:00 - description field let's pick one for
10:02 - example
10:03 - bug report as you can see in the
10:05 - description it's pre-populated
10:07 - and it's asking for certain bits of
10:08 - information if the issue you're raising
10:10 - doesn't fit into any category
10:11 - for example like this video then you can
10:14 - open a blank issue
10:15 - and it looks like this and if you're not
10:17 - too familiar with markdown yet don't
10:18 - forget you have got these helpers along
10:20 - the top and it's always important to add
10:21 - the description
10:22 - and then when you've written something
10:23 - in the description you can preview it to
10:25 - see what it looks like
10:26 - if you're a project maintainer you can
10:28 - assign to people you can add a different
10:29 - labels and projects and so on those are
10:31 - things i can't do because it's not my
10:32 - project
10:33 - as you can see people can leave comments
10:34 - below and the conversation can get
10:36 - started
10:37 - that's really important to have that
10:39 - conversation with the community and with
10:41 - the project maintainers
10:42 - next is where it gets really exciting is
10:45 - the pull request tab
10:46 - and to raise a pull request you need to
10:47 - make a change in another branch
10:50 - and that sounds scary but i'm going to
10:51 - show you how straightforward it is and
10:52 - how simple you can do it
10:54 - in the github ui so these are open pull
10:56 - requests so if i click on one
10:58 - we can go have a look at the changes so
11:00 - someone's written a good description
11:02 - it's got
11:02 - checklists of things that they've done i
11:04 - want to show you that in the markdown
11:06 - section how you can do that and you can
11:08 - see more commits have gone in
11:10 - and another comment and all from a bot
11:12 - has also been uh
11:13 - applied and you can see the commits that
11:15 - have happened you can see the checks
11:17 - that have occurred
11:18 - and we can also see the files that have
11:19 - been changed the red ones are the ones
11:21 - that have been taken out and the green
11:23 - ones with the lines that have been added
11:24 - and then in dark
11:25 - red and dark green show you specific
11:27 - characters that have been changed
11:29 - and if you don't like this linear view
11:31 - you can switch to split view
11:33 - which shows the changes side by side
11:35 - let's make a change this project so to
11:37 - contribute to a project
11:38 - let's find the file and the change we
11:40 - want to make using the github ui is very
11:42 - straightforward
11:43 - if i go to the git ignore i notice some
11:45 - inconsistency with the formatting
11:47 - so it's a silly change but it will show
11:49 - the process for you
11:50 - and still adds value to the project
11:52 - that's what you need to think about when
11:53 - making changes
11:54 - is it's about adding value to a project
11:56 - so you can see between all the sections
11:58 - there's one line gap
12:00 - between this section there's actually
12:01 - two so is it inconsistent i'm going to
12:03 - make a change to remove that extra line
12:05 - to do this you hit the edit button at
12:08 - the top right
12:09 - and github will automatically fork the
12:11 - project for you
12:12 - to create a fork for this project for
12:14 - you to commit your proposed changes to
12:15 - submitting a change will write it to a
12:17 - new branch in your fork so you can send
12:19 - a pull request i suggest adding a title
12:21 - that makes sense from your changes
12:23 - now i hit propose change and github has
12:25 - automatically taken me to the pull
12:26 - request
12:27 - page with it pre-populated if you come
12:30 - directly to the pull request tab
12:33 - and you have a branch that you want to
12:34 - create pull requests from remember to
12:36 - click
12:36 - compare across forks but github in this
12:38 - situation knows i'm coming across from a
12:40 - fork so it's already pre-populated that
12:42 - for me
12:42 - i can see the changes that i made i
12:44 - remove this extra blank line
12:46 - and now i can go create pull request and
12:48 - once i've gone through their template or
12:50 - put in some information if there isn't a
12:51 - template
12:52 - i can hit create pull request and if you
12:54 - want to make any changes you can
12:56 - click on the three dots and hit edit and
12:57 - make changes to
12:59 - the description if you want to make
13:00 - changes to the code you can go to files
13:02 - changed
13:03 - and you can also hit edit any future
13:05 - commits that you make to this branch
13:07 - will automatically get added to this
13:08 - pull request
13:09 - while it's still open if it's closed
13:12 - then you'll have to raise a new pull
13:13 - request
13:14 - if i head over back to my account and go
13:16 - to the repositories
13:17 - you can see the free code camp repo or
13:19 - project is also
13:20 - now in my account and it says that it's
13:23 - forked from
13:24 - free code camp free code camp so i can
13:26 - actually follow
13:27 - back to the original repository and
13:29 - people can find me from that repository
13:31 - so again it's social coding site people
13:32 - can then discover you and discover
13:35 - projects via different people in
13:36 - different organizations
13:37 - the actions tab is effectively
13:39 - continuous integration on steroids
13:41 - also known as ci and every time there is
13:44 - an event
13:44 - or a change this will run some actions
13:47 - hence why it's called actions
13:49 - actions can be tasks that run linters
13:52 - that check your code
13:53 - or automate a test to also check the
13:55 - code through to sending notifications to
13:57 - slack or discords
13:58 - actions is driven by a yaml file and
14:01 - it's really
14:02 - really awesome so that's one thing i
14:03 - also highly recommend you getting into
14:05 - and actually github has a marketplace
14:07 - for actions so you can see it almost has
14:09 - five and a half
14:10 - thousand actions for free that you can
14:12 - use on your projects from sending
14:14 - notifications to linking different
14:15 - platforms together
14:16 - and you can even write your own custom
14:18 - github action in javascript or another
14:21 - language
14:21 - if you click on one of these actions on
14:24 - one of these jobs
14:25 - you can then see what is going on and
14:27 - you can see the different steps
14:28 - so if there is a failure you can dig
14:30 - deeper and find out what went wrong
14:32 - the great thing about this automation it
14:34 - removes having discussions about
14:36 - little things and then you get to focus
14:37 - on the more important discussions
14:39 - on actually adding value to each other
14:41 - and learning from each other
14:42 - in the security tab there are
14:44 - suggestions for your project on
14:45 - improving
14:46 - the security do have a look at that do
14:47 - click on it you can get more information
14:49 - also in the insights tabs it gives you
14:51 - insights on the project
14:53 - on the contributors on the community
14:56 - you'll notice that a lot of projects
14:57 - are missing these steps and you can
14:59 - contribute to the project by adding a
15:01 - code of conduct by adding
15:03 - an issue template etc the last two tabs
15:05 - i want to show you
15:06 - are discussions tab this is a beta
15:08 - feature that is coming out
15:10 - very soon and it's really awesome so it
15:12 - still uses markdown just like issues but
15:14 - it's like issues on steroids
15:16 - because you could have threaded
15:17 - conversations think of forums
15:19 - people can ask a questions it can be a
15:22 - question and answer
15:23 - it could be general it could be ideas
15:24 - could be show and tell and also a new
15:26 - feature coming out shortly is for
15:28 - different projects to create different
15:29 - categories
15:30 - but people can reply people can mark an
15:32 - answer as accepted
15:33 - and then people continue the
15:35 - conversation
15:36 - in underneath each other so you can have
15:39 - different threaded conversations
15:41 - the last tab on github i wanted to show
15:42 - you is the projects tab
15:44 - this might look familiar this might look
15:46 - like the trello board
15:48 - you can create different columns they
15:49 - have templates that you can use this is
15:51 - the kanban one where you've got to do
15:53 - in progress in review and done and these
15:56 - are the
15:56 - issues that we created earlier and when
15:58 - we can drag and drop them
16:00 - between different sections as we work on
16:02 - them and that's really good for people
16:03 - to see the progress of the project
16:05 - and if you want to add an issue from
16:06 - here directly you can add a note and
16:08 - then convert it to an issue very simply
16:10 - one more tab that is interesting is the
16:12 - wiki tab it allows you to write markdown
16:15 - markdowns mentioned everywhere as you
16:16 - notice and have your documentation in
16:18 - the wiki section and it's a wiki
16:20 - underneath is actually a git repo so
16:21 - when you learn how to use
16:23 - a git repo on the main repository on the
16:25 - main project you can actually use it on
16:27 - the wiki 2.
16:28 - i've actually honestly started using the
16:29 - wikiless not because
16:31 - i don't think documentation is important
16:33 - actually i think it is very important
16:35 - but i actually started putting the
16:37 - documentation in the code base under the
16:39 - docs folder
16:40 - and the reason for that is when i add a
16:41 - new feature to the project
16:44 - i actually add the documentation as part
16:46 - of that change as part of that pull
16:48 - request
16:48 - so when someone's reviewing the code
16:50 - changes the automated test changes they
16:52 - can also review the documentation
16:54 - changes and that just keeps the quality
16:56 - of the project
16:57 - really high but the wiki can also be
16:59 - used for documentation it depends on
17:01 - your project and your team
17:02 - i highly recommend if it's an open
17:03 - source project putting documentation in
17:05 - the repo under the locks folder
17:07 - because then it can go through a pull
17:08 - request and get reviewed and not only to
17:10 - get reviewed but also to get knowledge
17:12 - transfer
17:13 - between the team members and the
17:15 - community so now you know how to use
17:17 - github let's talk about
17:19 - how to find a github project that you
17:21 - can contribute to
17:23 - you can contribute to any project but
17:25 - let me show you some tips and tricks on
17:26 - how to find ones that are more inclusive
17:29 - more
17:29 - welcoming i mentioned some labels if you
17:31 - go to the issue tab
17:32 - on any repository you can filter by the
17:34 - issue like first timers only
17:36 - but that limits you to one project
17:38 - another thing you can do is the issues
17:40 - at the top
17:40 - on github you can then see all the
17:42 - issues that you've created or been
17:44 - assigned
17:44 - but you could also filter github
17:48 - by a label so it's label colon
17:50 - hacktoberfest you can do this by
17:52 - clicking on any label so if you want to
17:54 - filter by good first issue
17:55 - you can click on filter by good first
17:57 - issue now you can see all these
17:59 - different projects
18:00 - that have got a label with good first
18:03 - issue
18:03 - another really good way to find projects
18:05 - is on twitter the people you follow
18:07 - maybe they mention some inclusive
18:09 - projects that want some contribution
18:11 - that will help you and mentor you get up
18:13 - to speed with their project
18:14 - you're probably already using libraries
18:16 - in your project or using a framework
18:17 - you'll know those quite well or you've
18:19 - probably noticed
18:20 - bugs are missing documentation those are
18:22 - also good projects to contribute to
18:24 - a real secret tip before contributing to
18:27 - a project that you're thinking about
18:28 - contributing to
18:29 - is actually check the closed issues and
18:32 - the closed pull requests
18:33 - this is really important see which ones
18:36 - were closed and were they closed in a
18:38 - friendly and collaborative way
18:40 - does someone write thank you very much
18:42 - for making this contribution but
18:44 - unfortunately this doesn't match with
18:45 - x y and z or was it just closed of no
18:48 - comment so therefore the contributor
18:49 - doesn't realize why their changes
18:51 - were not accepted it's really important
18:54 - to contribute to an inclusive project
18:56 - because otherwise it will be
18:57 - disheartening if your hard work
18:59 - gets closed for no reason if it's
19:02 - something they don't want
19:03 - which is why you should raise an issue
19:05 - first at least there's a good reason why
19:07 - it wasn't accepted
19:08 - and then hopefully have given you
19:09 - motivation or an idea of other things
19:11 - you can
19:12 - contribute to in the future to have it
19:13 - accepted and merged another tip that i
19:15 - found recently that i really want to
19:17 - share with you is if you found the
19:18 - project that you want to contribute to
19:20 - for example this one search the project
19:23 - for to-do's
19:24 - a lot of the time people put to-do's in
19:26 - the projects and never actually raised
19:28 - the issue
19:28 - and these to-do's get forgotten about
19:30 - maintainers in the community will really
19:32 - appreciate if you find a to-do
19:34 - raise an issue and if you can make the
19:35 - change and make the improvement to
19:37 - remove the to-do
19:38 - everyone will really appreciate it let's
19:40 - go through the markdown basics
19:43 - so that you know how to write a really
19:45 - good issue and really good pull request
19:46 - so you can stand out
19:47 - it's important for you to know the eight
19:49 - different markdown syntax
19:51 - a single hash is a heading one and that
19:53 - gets converted
19:54 - to a h1 in html and you can do
19:57 - two hashes to create a heading two and
19:59 - that goes all the way down to heading
20:01 - six
20:01 - that'll be six hashes then you can write
20:04 - normal text
20:05 - normal text and then if you want
20:07 - something bold
20:09 - you would wrap it in double asterisks on
20:11 - either side
20:12 - and if you want italic text it's a
20:14 - single asterisk
20:15 - on each side if you want a strikethrough
20:18 - it's double tilde on both
20:20 - sides let's have a look how that renders
20:23 - and you can see
20:23 - preview at how it renders what other
20:25 - awesome things can you do so you can
20:27 - also do lists so we can do an unordered
20:28 - list this is item one
20:30 - item two with the sub list sub item 2b
20:35 - we can preview that and you can see how
20:37 - it's indented with the sub list as well
20:39 - and we can also do an ordered list
20:43 - and a trick here is not to do them one
20:45 - two and three is actually just to do one
20:47 - on all of them and you may think why
20:49 - the secret is the github will do the
20:51 - rest for you and therefore if you move
20:52 - any items around you don't have to keep
20:53 - renumbering them all the time as you can
20:55 - see it reads one two three
20:56 - and github also uses that on the issue
20:59 - list and the pull request and it's
21:00 - really important to give an
21:01 - overview of an issue or progress what
21:03 - stage is at how much progress has been
21:05 - done
21:05 - and the way you do that is with square
21:07 - brackets and a space in it so you can
21:09 - say item one
21:10 - incomplete but if you want to make item
21:12 - two complete we put an x in it
21:14 - and this would be complete you don't
21:15 - have to write the word incomplete and
21:17 - complete but you can see now
21:18 - item two is checked and item one is not
21:20 - if you wanna put links in you can't just
21:22 - paste the link
21:23 - but it might look out of place so if you
21:25 - actually want to put text that is shown
21:27 - that is linkable
21:28 - then you would put square brackets for
21:30 - the text that you want
21:31 - appeared so in this case free code camp
21:34 - and in the brackets you put the link
21:35 - where you want to go to
21:36 - so if you hit preview you can see it is
21:38 - still a link and it still goes to the
21:39 - same place
21:39 - it's more readable and more friendly and
21:41 - if you have an image that you want to
21:43 - display
21:44 - you can just put an exclamation in front
21:45 - of it and the writing in the square
21:47 - bracket will be the alt text
21:49 - and then in the brackets will be the
21:51 - path to the
21:52 - image and that can be a local path or a
21:55 - url of the internet
21:56 - if you really want your issue and pull
21:58 - requests to stand out you can also look
22:00 - at doing code blocks and tables let me
22:02 - show you
22:02 - so the first row is actually the title
22:05 - and we need to tell the markdown how the
22:06 - table is going to be rendered it's going
22:07 - to be left align
22:08 - centered or right aligned and you can do
22:10 - that with colon and three dashes is what
22:12 - i recommend
22:13 - you can actually make do more dashes to
22:15 - make the table look easier to read
22:17 - however as you change the column sizes
22:20 - with different content
22:21 - these will never be accurate so i
22:23 - wouldn't worry about trying to make
22:24 - the right number of dashes to suit the
22:26 - column because it's always going to
22:27 - change the width
22:28 - as you add and remove different content
22:30 - so we can left align the first column
22:32 - and let's right align the second column
22:35 - and now we can put in the first row so
22:37 - we can say
22:39 - row one a and then we can say row
22:42 - one b and you separate these by pipes
22:44 - and now if i hit preview you can see the
22:46 - table has come through
22:47 - and you can see column one is aligned to
22:48 - the left and column two is aligned to
22:50 - the right and you can also center a line
22:52 - by putting colon either side of the
22:53 - dashes
22:54 - and now you can see row 1b is now
22:56 - centered code blocks
22:57 - this is where it's really important to
23:00 - have your issue in progress stand out by
23:02 - using
23:03 - code blocks and there are so many
23:04 - different things you can do with code
23:06 - blocks
23:06 - with things like syntax highlighting or
23:08 - even diffs is epic let me show you
23:10 - so for inline code you use a single
23:13 - backtick this
23:14 - is backtick and you can say console.log
23:17 - and when you preview that it shows it in
23:19 - grey it's not very fancy it doesn't
23:21 - stand out massively so if you wanted to
23:22 - stand out more
23:24 - we could say example code block
23:27 - you do three backticks and then you put
23:29 - in the same code
23:31 - and you close it with three backticks
23:33 - now you can see it's a big blocks full
23:34 - width stands out a lot more
23:36 - but it's still not syntax highlighted so
23:38 - you can do things after the first three
23:40 - backticks you can do things
23:41 - where you put in the language so if it's
23:44 - markdown or if it's
23:45 - javascript or typescript or ruby or php
23:47 - or python whatever it is
23:49 - and when you render it actually
23:50 - highlights it this doesn't show it very
23:52 - well
23:52 - but you can see the log has changed a
23:53 - different color and if you're adding and
23:55 - removing things and you want to show
23:57 - what changes there should be
23:59 - then rather than doing two blocks like
24:01 - for example
24:02 - if i said const data equals
24:06 - this if you want to show the differences
24:08 - before and after
24:09 - in say an issue or in a discussion then
24:12 - to have two code blocks is quite verbose
24:14 - let me show you
24:15 - and show you a really awesome way to
24:16 - look really professional
24:21 - so we have two code blocks they are
24:23 - syntax highlighted but you can see
24:25 - before and after it's not very easy to
24:26 - see what changed you just gonna notice
24:28 - the brackets are changed from an array
24:29 - to an object but the way to look awesome
24:31 - you can combine that into one code block
24:34 - and the way you do that is you put both
24:36 - of them in the same code block and
24:38 - actually the type becomes a diff rather
24:40 - than the language
24:41 - the line you want to take away you put a
24:43 - minus and the line you want to add you
24:44 - put a plus
24:45 - and when you render that you can see
24:46 - it's really highlighting
24:48 - what you want to remove and what you
24:50 - want to change to and that's really
24:51 - awesome
24:52 - it's so awesome and so powerful that
24:54 - actually when you're reviewing someone's
24:55 - pull request rather than saying
24:57 - oh you need to change this bracket or
24:58 - something like that you can actually put
25:00 - in a diff in an inline comment
25:02 - and the other person can just click
25:03 - accept and github
25:05 - will take that diff apply it to that
25:08 - branch and pull request
25:09 - so it makes it become very slick and
25:11 - very efficient
25:13 - even with the linear conversation on
25:15 - github some people write a big block of
25:16 - text
25:17 - and you might be saying yes or no and
25:19 - it's unclear to which part the paragraph
25:21 - you're saying
25:22 - so it is possible to do quotes and i
25:23 - highly recommend that and what i mean by
25:25 - quotes is this
25:26 - if someone wrote i have idea one
25:29 - and also idea two if someone wrote they
25:32 - have two ideas in the paragraph and you
25:34 - wanted to say yes to idea one and no to
25:36 - idea two
25:37 - if you just say you would have to write
25:39 - yes and no and maybe it wasn't so
25:40 - obvious which ones you're referring to
25:42 - so one thing you can do that's what
25:44 - someone wrote when you reply
25:46 - you can quote what they said and it
25:49 - appears in the quote but even better you
25:51 - could split it apart remove the and
25:54 - have two quotes i agree with this
25:57 - i do not agree with this
26:01 - and so when you preview it it's really
26:02 - obvious to know what you were replying
26:04 - to
26:05 - otherwise the next comment that comes
26:07 - back is which one did you mean it wasn't
26:09 - very clear
26:10 - so it's really important to keep things
26:11 - efficient on github and that will help
26:13 - you with chatting on stack overflow on
26:16 - discord on slack
26:17 - because it's important to give enough
26:19 - information but not give too much that
26:21 - it's a book like war and peace
26:23 - because some people wonder why they ask
26:25 - questions and they don't get answers
26:26 - it's because their question isn't very
26:28 - good
26:28 - and people don't want to try and dig in
26:30 - and get blood out of a stone
26:32 - if you can make it really easy for
26:34 - someone to understand
26:35 - your question your idea your bug then
26:38 - it's more likely you're gonna get help
26:40 - having good communication be an issue be
26:42 - on social media be on discord or slack
26:45 - is a great way to get noticed and to get
26:48 - into the conversation
26:50 - another tip on a pull request is you
26:52 - probably have raised an issue for that
26:53 - pull request
26:54 - i highly suggest closing the issue when
26:57 - the pull request gets closed or merged
26:59 - and the way you do that is
27:00 - is you put a hash a bit like the heading
27:03 - title but without a space
27:04 - you put in the number that you want to
27:07 - reference to and then before that you
27:09 - put
27:09 - closes or fixes and you can write more
27:11 - after this
27:12 - but when this gets merged closed then it
27:15 - will also close the issue it reduces the
27:17 - admin for the community and the
27:19 - maintainer and that's really important
27:21 - put yourself in their shoes try and make
27:23 - their life easier when they're getting
27:24 - lots of comments suggestions pull
27:26 - request issues you want to make it as
27:28 - efficient for them as possible
27:30 - and remember you don't have to
27:32 - contribute a big
27:33 - pull request you need to keep it
27:35 - efficient
27:36 - and small as a project maintainer myself
27:39 - i would rather have
27:40 - more pull requests that are small
27:42 - because i can merge them
27:44 - very quickly in bite sizes rather than
27:46 - trying to spend an
27:47 - entire day going through someone's huge
27:49 - pull request
27:50 - so if you want to get your pull request
27:52 - merged i suggest keeping it
27:54 - small and concise i really believe there
27:57 - is no pull request that is too small
27:58 - let me give you another little gem on
28:00 - pull requests if you want to get
28:02 - feedback on your work sooner then i
28:04 - suggest raising the pull request
28:06 - but do this gem as you can see here on
28:09 - the right
28:09 - under the reviewer section you can
28:11 - convert your pull request
28:13 - to a draft that's really important it
28:15 - shows the community and project
28:17 - maintainers that you would like some
28:18 - feedback but it's not ready for the
28:20 - proper review
28:21 - to get merged in so getting that
28:22 - feedback early is really important start
28:24 - that the conversation
28:26 - in the issues and when you've made
28:27 - changes start it early in the pull
28:28 - request
28:29 - but don't forget to convert it to draft
28:32 - so people know that it's not
28:34 - completely ready otherwise you're going
28:35 - to get lots of comments of things you
28:37 - might not have quite finished yet and
28:38 - that's why it's important to have a
28:40 - checklist in the description as well and
28:41 - then when it's ready to have a proper
28:43 - review and everything's finished
28:44 - you can then convert it back to a normal
28:46 - pull request and remember i
28:48 - mentioned that doing a to-do list in
28:50 - your issue or your pull request shows
28:51 - the progress
28:52 - as you can see i have four to-do's and
28:55 - none of them are done and you can see
28:56 - that the progress is zero
28:58 - other ones have got four out of four
29:00 - this really helps maintainers and the
29:02 - community
29:03 - look through the list of pull requests
29:04 - to see what's ready for reviewing
29:06 - in this section we're gonna talk about
29:07 - how you can make money directly and
29:09 - indirectly from open source github now
29:12 - has
29:13 - a sponsorship program and what that
29:15 - means is people can sponsor you or you
29:17 - can sponsor people
29:18 - on the github platform and github takes
29:20 - no commissions if you sponsor someone
29:22 - ten dollars a month they're gonna get
29:24 - ten dollars a month and to take that
29:26 - even further
29:27 - github were doing matching that meant
29:29 - that if you sponsored someone
29:31 - ten dollars a month github would also
29:33 - give them ten dollars a month
29:35 - so either they could get double or you
29:37 - just half your donation and give the
29:39 - other half to somebody else
29:40 - because github will match it and you've
29:42 - probably seen this sponsor button on
29:43 - organizations and people's profiles
29:45 - so if you find an organization or a
29:48 - person that you really think they're
29:49 - doing great work in the community you
29:50 - want to support them
29:51 - click on that sponsor button and give
29:53 - them a small donation whatever you're
29:55 - comfortable with they will really
29:56 - appreciate it
29:57 - that's how you can make money directly
29:59 - from github so i suggest setting that up
30:01 - it's free to set up on your account
30:03 - i highly recommend setting that up
30:04 - because you never know who wants to
30:06 - sponsor you so that's the way you can
30:07 - make money directly from open source
30:10 - let me talk about the ways you can make
30:11 - money indirectly so i have mentioned
30:13 - about the networking and communication
30:15 - if you do regular open source people
30:18 - will then discover you and by people i
30:20 - mean companies headhunters hr
30:22 - departments recruiters
30:24 - hiring managers they will discover you
30:26 - and then
30:27 - they will contact you to offer you a job
30:29 - says you
30:30 - getting money indirectly from open
30:33 - source
30:34 - and that's really important i do open
30:35 - source on github and i do youtube videos
30:38 - and my biggest regret about both of
30:40 - those is not starting
30:41 - sooner because they have both
30:43 - accelerated my learning
30:44 - my career my clients the money i've
30:47 - earned
30:48 - i cannot encourage you enough to do the
30:50 - same
30:51 - instead of you hunting for a job instead
30:52 - of you writing a cv to match that job
30:54 - why can't
30:55 - the companies chase you and not even ask
30:58 - for a cv
30:59 - because they love your github profile
31:01 - they love your
31:02 - community presence so if you can write
31:04 - blog posts or do youtube videos i also
31:06 - highly recommend doing that
31:07 - to complement your open source you can
31:10 - talk about what you've learned what
31:11 - you're doing you don't have to
31:12 - invent something new you're probably
31:14 - learning something new every day
31:16 - just share that on github or on socials
31:19 - and do that little and often and you
31:21 - will get discovered
31:22 - some techniques that i use what i'm
31:24 - hiring for myself or for my clients
31:26 - is i want to look at people's github
31:28 - profiles there's no surprise there
31:30 - but i'm not looking how amazing their
31:32 - code is so if your code isn't amazing
31:34 - still put it out there
31:35 - i'm actually looking at their code today
31:38 - and comparing it to their code
31:39 - two three months ago and all i care
31:41 - about is that the code
31:43 - has improved in that time because that
31:45 - shows me the person is still
31:46 - learning and that's more important than
31:49 - being an expert in one area
31:51 - and also i'm looking for the person's
31:53 - attitude how do they communicate and
31:55 - collaborate with other people this is
31:56 - why i keep encouraging you
31:58 - to get involved in the conversation on
32:00 - other people's issues on your issues
32:02 - on other people's projects and your
32:04 - projects so other people can contribute
32:06 - to your projects and start the
32:08 - conversation with you
32:09 - and then you can communicate back it's
32:11 - really important to see how people
32:13 - communicate
32:14 - not only as a contributor but as a
32:16 - maintainer i suggest getting involved in
32:18 - the conversation
32:19 - if you're looking for resources to get
32:21 - involved in open source contribution
32:23 - free code camp have an awesome community
32:26 - driven project
32:27 - you can see it behind me there are
32:29 - almost 150 contributors to this project
32:31 - that shows
32:32 - the value of this project because it's
32:34 - showing different perspectives people
32:35 - with different backgrounds are giving
32:37 - their opinion
32:38 - so this project is going to add so much
32:40 - value so let's have a quick look
32:42 - there are translations of this project
32:43 - into so many different languages so if
32:45 - english
32:46 - is difficult for you then there are
32:47 - different languages that you can look at
32:50 - they might not quite be up to date and
32:52 - also if you're familiar with some of
32:53 - these languages
32:54 - or even just one of these languages you
32:55 - could read the english version and
32:57 - update it to your language
32:58 - which would really help the communities
33:00 - that's a really awesome contribution you
33:02 - could give back to the community and to
33:03 - this project
33:04 - this is translated into 11 languages if
33:06 - you know any other languages then
33:08 - feel free to make a contribution and
33:10 - translate it into that language
33:12 - it makes our community even more
33:13 - inclusive even right at the beginning of
33:16 - the readme
33:16 - it says this is a list of resources for
33:18 - people who are contributing to open
33:20 - source
33:20 - and if you find additional resources
33:22 - please contribute a pull request what a
33:24 - great way to start a readme
33:26 - it has blog posts from different people
33:29 - in the community and i think some of
33:31 - these posts are really
33:32 - interesting how to do searches searching
33:34 - on github can be quite complicated there
33:36 - are so many filters
33:38 - tips and tricks that you can do it's
33:40 - really convenient there are links here
33:41 - to make it so much easier for us to
33:42 - filter down the issues on github
33:44 - for example first timers only now you
33:47 - can see the issues across github are
33:49 - filtered down with the
33:50 - label first timers only and there are
33:52 - open source initiatives
33:54 - things like first timers only first
33:55 - contributors hacktoberfest and 24 pull
33:57 - requests and 100 days of code so
33:59 - do have a look at those they are a great
34:01 - initiative to encourage you to get into
34:03 - open source
34:04 - we've talked about contributing to open
34:06 - source but what about project
34:07 - maintainers
34:08 - wait a second before you get scared and
34:10 - say hey i'm new to open source
34:11 - i can't be a project maintainer yet i've
34:13 - barely contributed to open source
34:15 - everyone who's on github
34:16 - is not only a contributor is they are
34:18 - actually a maintainer so you
34:20 - are a maintainer as soon as you have
34:22 - that one
34:23 - repo on github that is public it might
34:26 - just be to customize your github profile
34:28 - but that is an open source repo that
34:29 - anyone else in the community
34:31 - could raise an issue raise a pull
34:32 - request make suggestions to you
34:34 - so you are actually already an open
34:36 - source maintainer
34:37 - and that's great because it's really
34:39 - good to practice the communication
34:41 - skills and the networking skills
34:43 - on the other side so let's talk about
34:45 - how you can get your project to stand
34:47 - out
34:48 - and you may think why would i want my
34:49 - project to stand out i'm a bit nervous
34:51 - the project isn't ready
34:52 - trust me your project will never be
34:54 - ready these open source projects are
34:56 - living projects they're having
34:57 - improvements done by you and the
34:58 - community
34:59 - all the time so project will never be
35:01 - ready and people really like joining a
35:04 - project
35:04 - in the early days because they can help
35:06 - guide the direction of the project
35:08 - imagine waking up to 10 12 pull requests
35:11 - people have made improvements to your
35:13 - project
35:14 - it's such an awesome feeling to have
35:16 - that to think wow people have actually
35:18 - spent their time
35:19 - and effort to make an improvement to my
35:21 - project which then becomes
35:23 - our project and you build a community
35:25 - around
35:26 - your project and you'll learn so much
35:28 - from it people will make suggestions
35:30 - you don't have to accept everything but
35:32 - just by having the conversation you will
35:33 - learn
35:34 - so much more around the technologies
35:37 - you're using in your project
35:38 - and libraries and frameworks that you
35:39 - might not even be aware of yet
35:41 - to make your project more inclusive and
35:43 - more enticing for people to get involved
35:45 - and contribute
35:46 - the first thing i recommend doing is
35:48 - going to the insights tab
35:50 - from the insights tab you have a set of
35:52 - tabs down the left hand side
35:54 - and then go to the community tab from
35:56 - here you can really
35:57 - see how you can make your project more
35:59 - inclusive does it have a description
36:00 - does it have a readme does it have a
36:02 - code of conduct does it have the right
36:03 - templates for issues and pull requests
36:05 - does it have a license and you can do
36:07 - this on other people's projects as well
36:09 - so it's actually a really good way to
36:10 - contribute
36:11 - contributing to your own project
36:12 - regularly is actually
36:14 - really useful it shows the github
36:16 - algorithm that your project is alive
36:18 - and all the stats on github also look
36:20 - healthy and people want to contribute to
36:22 - projects that are moving forward not
36:24 - projects that are dead
36:26 - or archived without having the archive
36:28 - flag on the repo
36:29 - so don't try and spend an entire weekend
36:31 - doing one giant
36:33 - commit to your project i highly
36:34 - recommend every day
36:36 - every few days doing small changes to
36:38 - your project therefore people can
36:40 - understand the changes that are
36:42 - happening
36:43 - do a commit for each value that you add
36:45 - to your own project
36:46 - and if there are people who are more
36:48 - junior than you who want to get involved
36:50 - in your project and even if you're new
36:52 - to tech
36:53 - this is really valuable those people
36:55 - with a fresh pair of eyes
36:57 - will actually improve your projects so
36:59 - much because they will
37:00 - show you and highlight what parts don't
37:03 - make sense for newcomers
37:04 - and they might make sense to you because
37:06 - you built the project to really
37:08 - embrace the feedback from the community
37:11 - and from people who are new to tech
37:12 - documentation is so important that might
37:14 - scare you might think i'm not going to
37:16 - write a whole
37:16 - book on my project because it's changing
37:19 - all the time documentation will get out
37:20 - of date you don't have to write
37:22 - a whole book having a readme that shows
37:24 - the goal of the project
37:26 - and has a quick start guide of how to
37:27 - get the project running locally so
37:29 - people can start making changes to your
37:30 - project and get involved having a
37:32 - screenshot in your readme is really
37:34 - helpful it's which straightaway
37:36 - shows the benefit of the project and if
37:38 - you can have it deployed somewhere
37:39 - so that people can go and have a play
37:41 - and check it out it's also really
37:43 - important you want to lower the barrier
37:44 - to entry so people can get involved in
37:46 - your project
37:47 - as easily and as quickly as possible
37:49 - automate everything
37:50 - as much as you can for day one you don't
37:53 - have to try and
37:54 - have a perfect automation pipeline but
37:57 - do start automating things
37:58 - from the beginning now with github
38:00 - actions it's really easy
38:02 - there are a few lines of yammer config
38:04 - to have github actions
38:05 - to run a linter on your project to run
38:08 - any checks that you want or any checks
38:10 - that
38:10 - you might do manually if you can
38:12 - automate these then when you do have the
38:14 - conversations and the pull requests with
38:16 - your community
38:17 - you're actually having the conversations
38:18 - about the more valuable part
38:20 - rather than about formatting or any of
38:22 - the simple checks
38:23 - that could be easily done with github
38:25 - actions another great tip i can give to
38:27 - you as a project maintainer is try to
38:29 - respond to people as soon as possible
38:31 - ideally within 12 hours and what i mean
38:33 - by that is if you haven't got time to
38:35 - review
38:36 - an issue or discuss it or to review a
38:38 - big pull request at least comment and
38:40 - say look i'm really busy with work
38:41 - i will try and reply this weekend but at
38:44 - least the person who started the
38:46 - discussion who raised the pull request
38:47 - knows
38:48 - that you believe in your project and
38:50 - you're just busy at the moment
38:51 - another great thing about being a
38:52 - maintainer when you're contributing to
38:54 - other projects you also realize that a
38:56 - lot of these projects are done on the
38:57 - side people don't do these as a
38:59 - full-time
39:00 - job so if you don't get a response
39:01 - straight away
39:03 - be patient they haven't forgotten it
39:05 - they've got the notification
39:06 - don't send them emails discord dms
39:09 - twitter dms with links to your issue or
39:11 - your progress
39:11 - they've got the notification if you
39:13 - don't hear back from them within a few
39:15 - days a week then yes by all means
39:17 - do reach out to them but don't spam them
39:20 - all within the first 10 minutes
39:22 - to help your project get discovered you
39:24 - need to be involved in
39:25 - other projects i don't just mean
39:27 - contributing code to other projects as
39:29 - i've been saying the whole way along
39:30 - through this video
39:31 - get involved in the conversation reply
39:33 - to an issue
39:34 - review someone's pull request and give
39:36 - your thoughts and feedback and when they
39:38 - see you getting involved in the
39:39 - communication
39:40 - they will go to your github profile and
39:42 - they'll have a look at what projects you
39:44 - have
39:44 - that's why it's also important to
39:46 - customize your github profile
39:47 - let's take a look at mine as you can see
39:49 - i've customized my github profile i'm
39:51 - changing this all the time and if you
39:52 - have any suggestions or any improvement
39:54 - raise an issue raise a pull request on
39:55 - my repository to customize your github
39:57 - profile
39:58 - all you need to do is create a repo with
40:00 - the same name as your username
40:02 - just like this go to the plus above and
40:05 - go to new repository
40:06 - and type in your username what you see
40:08 - on the left have the same
40:10 - on the right i've done that already so
40:12 - as you can see i've got this here
40:14 - and this readme is what appears on my
40:16 - github profile
40:17 - and in here you can put basic html and
40:19 - markdown
40:20 - and you can customize it regularly and
40:22 - often i do get contributions you can see
40:23 - i've got two pull requests waiting
40:25 - to get reviewed i really enjoy seeing
40:27 - people's ideas and suggestions
40:29 - for my customized github profile i
40:31 - actually do also enjoy contributing to
40:33 - other people's github profiles
40:35 - in addition to customizing your github
40:36 - profile don't forget to pin the
40:38 - repositories that you're most active on
40:40 - your github profile you can customize
40:41 - your pins up here
40:43 - and then you can select the repos that
40:45 - you want to be pinned you can select up
40:46 - to six
40:47 - open source and github is actually more
40:49 - about collaboration and communication
40:52 - rather than just code so it's important
40:54 - to get involved
40:55 - in the discussion because companies
40:57 - people hiring
40:58 - want to see how you communicate how you
41:00 - collaborate are you a team player
41:02 - do you work well with other people are
41:04 - you able to give constructive
41:06 - criticism to people in a friendly and
41:08 - encouraging way and are you also able to
41:10 - take
41:10 - constructive criticism and collaborate
41:12 - with people to work to a better solution
41:14 - if you want to get into open source you
41:16 - can up skill so you can learn
41:18 - faster you can network collaborate and
41:20 - improve your communication skills
41:22 - and so you can get the job and money
41:24 - that you deserve head over to my youtube
41:26 - channel i do videos and live streams
41:28 - helping you get into open source we also
41:29 - have a discord channel we also have a
41:31 - github organization if you'd like to
41:33 - join our github organization you can
41:34 - raise and issue our support repository
41:36 - asking to join the organization and
41:38 - we'll send you an invite this way you
41:39 - can get involved in the community
41:40 - straight away
41:41 - the best way to learn a spoken language
41:43 - is to go live in the country that speak
41:45 - the language that you want to learn
41:46 - so come and join our community and open
41:48 - source will be like second nature to you

Cleaned transcript:

in this video we will talk about open source and why you should care about open source not only improve your technical skills but also your communication and networking skills so you can get the jobs and client and money that you deserve we will cover git and the platform github and go through all those tabs you see across the top we will also talk about how you can find open source projects to contribute to how to contribute using the github ui how to make your issues and pull requests and your github profile pop so you can stand out from the crowd how you can make money from open source directly and indirectly hi my name's eddie and i've been a full stack developer for over 15 years i have a youtube channel that focuses on open source if that sounds interesting to you the link is in the description below head over to my channel and subscribe and hit the bell so you get notified every time i post a video in this video we will start off with the basics and then we'll go through to the more advanced features if you want to skip ahead there are the timestamps in the description below don't skip just yet even if you're an experienced developer i'm sure there are some tips you'll pick up in the more basic sections and if you have any tips or any feedback anything i say please leave a comment below and i will reply open source is social coding so it's like social media but on steroids on places like instagram people can like your pictures they can comment and reshare on github people can not only style your project comment on your code fork your project to share it but they can also contribute back they can make improvements we can stand on the shoulder of giants on other awesome projects to make even better projects and then we can contribute features and bug fixes back to that original project even if you're not contributing to open source just yet i'm sure you're using open source projects why you should care about open source because you're probably using a lot of open source if not all the tools and projects you're using are probably open source and it's great that you're using these amazing open source tools but they're only there and available because of people like you who contribute to them and you may think oh i'm not an expert to contribute to any of the big projects like react for example but your fresh pair of eyes can add so much value to any project have you ever been reading some documentation and you've read step one okay i've done that step two done that step three oh how did i get there i think there's a missing step by you adding that step and contributing back will not only allow you to improve your documentation skills to improve your communication skills to network with other developers future employers it also help other people in the community it will also probably help you as well further down the line when you come to use that project again and you forget about that step you check the documentation and it helps you that's happened to me multiple times in addition to that it's becoming more and more important companies recruiters are now looking on github to find people and they're not looking for the best coders a lot of them actually looking for the right attitude are people getting involved in the conversation can they collaborate with other people can they give constructive criticism back to say someone's work but also be supportive at the same time these are skills in addition to coding and that's really important what a lot of these companies look for now so do get involved in the discussion on github and i'm going to take you through how you can do that on other platforms for example like linkedin you can write anything you want this is why cvs and linkedin aren't that useful github is becoming more and more useful and you don't have to contribute massive amount of work little and often it's like brushing your teeth you brush your teeth every morning and evening if you miss one morning or one evening your teeth aren't going to fall out it's not going to go black but over time your teeth stay healthy the same thing with open source do a little and often therefore your github profile stays healthy and then people can discover you from different projects that you've contributed to other conversations that you've got involved in you're probably more familiar with this process on places like twitter how you discover people how people discover you github is just the same and it's a great way to get discovered from your future employer or your future client so i've mentioned git and github let's talk more about that let me start with git because that underpins github there are many source control management systems but git is on steroids it not only has additional save points where you can save your work as you go along each time you're happy with it therefore if you make a mistake you can go back to your previous save point and source control management systems also have branching so you can create a copy of the work and prototype create spikes practice do certain things and still have those save points but only bring them back in for the rest of the team to use once you're happy and ready for it the big main advantage of git is it's very efficient very fast it's distributed which means you can work offline and just reconnect when you get internet connection again later on and you can do things like rebase which is like rewriting history so git is a great tool for collaboration so what is github github is built on top of git and gives you so many powerful features which means you can use git via their web platform but also you get issue tracking you get project boards that are like trello boards you get continuous integration which they call github actions i'm going to show you that all shortly you know what let's go to my computer and dive straight into it so now let's head over to github now you can see you've got github behind me this is my profile page on github and i've got a customized profile page which you can do by creating a repository the same name as your username you can see some of my highlights on my achievements i'm a github star the organizations that i belong to sponsors that i have and the people that i sponsor what you're probably more used to seeing is the pinned repositories and your green activity bar and this is what companies use to discover you that's why it's really important to be part of one organization be part of a community and to contribute to projects so let's pick a project and let's contribute to it so i can show you how you can easily make a contribution to other projects as we're on free codecamp's youtube channel i thought it'd be important to pick a free code camp project so let's start from the top and work our way down the page and then we'll make a contribution as you can see in the top right we have people that are watching the project that means for every change that happens on the project they'll get a notification and the notification depends on how they set up their notifications in their account so some people will be email some people would be notifications stars are like people who have favorited the project like bookmarked it and they'll get notifications in their github feed so not notifications that they've been tagged the notifications in their github feed forks are people who have made a copy of the project into their own account so they can make changes and we're going to do that shortly so stay tuned and then we have the tabs along the top we have code and that's the default tab that you land on and you can see the code underneath and you can navigate around between the code you can see the files you've also can switch between branches branches are taking a copy of the code base and allowing you to make changes to that without affecting everybody else on the project so we usually use branches a lot that are shortlived for a feature branch a spike branch a bug fix a branch and they'll get murdered into the mainline branch via a pull request when it's been reviewed tags and releases allow you to create a save point in your code base that can never change similar to a commit a release or a tag is higher up in that it will contain multiple commits and you usually name them like v0 1.2 we can add a file we can do a lot through the github ui i can even open in codespaces which is a new beta feature coming out in github which allows you to have your entire development environment in the browser or in vs code locally but actually communicating with a server on github that means you don't have to worry about installing node a certain version or python a certain version it will just work which is a game changer so when that comes out any day now for everybody else it is going to be really awesome it's really going to lower the barrier to everyone contributing to open source and then we can see at the top the last commit that happened it was five hours ago we can even click on the git hash and see the exact changes that happened at that point so hopefully you're seeing how powerful git and github are and also you can see the commits the commit is the entire history of changes and we can see who made it this is why it's important to give your commit an informative descriptive but concise so short title so when looking through the history it is really easy to see what happened and then you can find the one that you want and then you can click on the get hash where you can actually go see more details about what changed when making a commit message don't forget you can also give a description if you want to add more information if you want to make changes to your project or somebody else's i think it's really important for you to raise an issue an issue is an action point or starting a discussion saying to someone there's a typo in your project there's missing documentation or there's a bug this is how i found it and these are the changes that i think should be made that's really important the changes could come from you or from someone else that's the next step but raising an issue helps you get that green square on your github profile and also adding comments so replying to issues is really a great way to get involved with a project into the community get on their radar so when they are looking to hire people they're going to look at people who contribute to the project so you'll be first on the list this is the issue section on github and it's a great way to start the conversation on your idea or the bug you found or the enhancement that you want and not only that it's a great way for you to get involved in the conversation on other issues so do have a search do filter the issues for any issues you raise you still get a green square on your github profile issues have labels and the great thing about these are if you want to fix a bug or if you want to find something more challenging where help is wanted or if you want to find one that's a bit easier another label to look for is good first issue and you can click on these and it filters them so now they've been filtered down let's say if i want to create a new issue i hit on new and some projects have templates that means they'll prepopulate the description field let's pick one for example bug report as you can see in the description it's prepopulated and it's asking for certain bits of information if the issue you're raising doesn't fit into any category for example like this video then you can open a blank issue and it looks like this and if you're not too familiar with markdown yet don't forget you have got these helpers along the top and it's always important to add the description and then when you've written something in the description you can preview it to see what it looks like if you're a project maintainer you can assign to people you can add a different labels and projects and so on those are things i can't do because it's not my project as you can see people can leave comments below and the conversation can get started that's really important to have that conversation with the community and with the project maintainers next is where it gets really exciting is the pull request tab and to raise a pull request you need to make a change in another branch and that sounds scary but i'm going to show you how straightforward it is and how simple you can do it in the github ui so these are open pull requests so if i click on one we can go have a look at the changes so someone's written a good description it's got checklists of things that they've done i want to show you that in the markdown section how you can do that and you can see more commits have gone in and another comment and all from a bot has also been uh applied and you can see the commits that have happened you can see the checks that have occurred and we can also see the files that have been changed the red ones are the ones that have been taken out and the green ones with the lines that have been added and then in dark red and dark green show you specific characters that have been changed and if you don't like this linear view you can switch to split view which shows the changes side by side let's make a change this project so to contribute to a project let's find the file and the change we want to make using the github ui is very straightforward if i go to the git ignore i notice some inconsistency with the formatting so it's a silly change but it will show the process for you and still adds value to the project that's what you need to think about when making changes is it's about adding value to a project so you can see between all the sections there's one line gap between this section there's actually two so is it inconsistent i'm going to make a change to remove that extra line to do this you hit the edit button at the top right and github will automatically fork the project for you to create a fork for this project for you to commit your proposed changes to submitting a change will write it to a new branch in your fork so you can send a pull request i suggest adding a title that makes sense from your changes now i hit propose change and github has automatically taken me to the pull request page with it prepopulated if you come directly to the pull request tab and you have a branch that you want to create pull requests from remember to click compare across forks but github in this situation knows i'm coming across from a fork so it's already prepopulated that for me i can see the changes that i made i remove this extra blank line and now i can go create pull request and once i've gone through their template or put in some information if there isn't a template i can hit create pull request and if you want to make any changes you can click on the three dots and hit edit and make changes to the description if you want to make changes to the code you can go to files changed and you can also hit edit any future commits that you make to this branch will automatically get added to this pull request while it's still open if it's closed then you'll have to raise a new pull request if i head over back to my account and go to the repositories you can see the free code camp repo or project is also now in my account and it says that it's forked from free code camp free code camp so i can actually follow back to the original repository and people can find me from that repository so again it's social coding site people can then discover you and discover projects via different people in different organizations the actions tab is effectively continuous integration on steroids also known as ci and every time there is an event or a change this will run some actions hence why it's called actions actions can be tasks that run linters that check your code or automate a test to also check the code through to sending notifications to slack or discords actions is driven by a yaml file and it's really really awesome so that's one thing i also highly recommend you getting into and actually github has a marketplace for actions so you can see it almost has five and a half thousand actions for free that you can use on your projects from sending notifications to linking different platforms together and you can even write your own custom github action in javascript or another language if you click on one of these actions on one of these jobs you can then see what is going on and you can see the different steps so if there is a failure you can dig deeper and find out what went wrong the great thing about this automation it removes having discussions about little things and then you get to focus on the more important discussions on actually adding value to each other and learning from each other in the security tab there are suggestions for your project on improving the security do have a look at that do click on it you can get more information also in the insights tabs it gives you insights on the project on the contributors on the community you'll notice that a lot of projects are missing these steps and you can contribute to the project by adding a code of conduct by adding an issue template etc the last two tabs i want to show you are discussions tab this is a beta feature that is coming out very soon and it's really awesome so it still uses markdown just like issues but it's like issues on steroids because you could have threaded conversations think of forums people can ask a questions it can be a question and answer it could be general it could be ideas could be show and tell and also a new feature coming out shortly is for different projects to create different categories but people can reply people can mark an answer as accepted and then people continue the conversation in underneath each other so you can have different threaded conversations the last tab on github i wanted to show you is the projects tab this might look familiar this might look like the trello board you can create different columns they have templates that you can use this is the kanban one where you've got to do in progress in review and done and these are the issues that we created earlier and when we can drag and drop them between different sections as we work on them and that's really good for people to see the progress of the project and if you want to add an issue from here directly you can add a note and then convert it to an issue very simply one more tab that is interesting is the wiki tab it allows you to write markdown markdowns mentioned everywhere as you notice and have your documentation in the wiki section and it's a wiki underneath is actually a git repo so when you learn how to use a git repo on the main repository on the main project you can actually use it on the wiki 2. i've actually honestly started using the wikiless not because i don't think documentation is important actually i think it is very important but i actually started putting the documentation in the code base under the docs folder and the reason for that is when i add a new feature to the project i actually add the documentation as part of that change as part of that pull request so when someone's reviewing the code changes the automated test changes they can also review the documentation changes and that just keeps the quality of the project really high but the wiki can also be used for documentation it depends on your project and your team i highly recommend if it's an open source project putting documentation in the repo under the locks folder because then it can go through a pull request and get reviewed and not only to get reviewed but also to get knowledge transfer between the team members and the community so now you know how to use github let's talk about how to find a github project that you can contribute to you can contribute to any project but let me show you some tips and tricks on how to find ones that are more inclusive more welcoming i mentioned some labels if you go to the issue tab on any repository you can filter by the issue like first timers only but that limits you to one project another thing you can do is the issues at the top on github you can then see all the issues that you've created or been assigned but you could also filter github by a label so it's label colon hacktoberfest you can do this by clicking on any label so if you want to filter by good first issue you can click on filter by good first issue now you can see all these different projects that have got a label with good first issue another really good way to find projects is on twitter the people you follow maybe they mention some inclusive projects that want some contribution that will help you and mentor you get up to speed with their project you're probably already using libraries in your project or using a framework you'll know those quite well or you've probably noticed bugs are missing documentation those are also good projects to contribute to a real secret tip before contributing to a project that you're thinking about contributing to is actually check the closed issues and the closed pull requests this is really important see which ones were closed and were they closed in a friendly and collaborative way does someone write thank you very much for making this contribution but unfortunately this doesn't match with x y and z or was it just closed of no comment so therefore the contributor doesn't realize why their changes were not accepted it's really important to contribute to an inclusive project because otherwise it will be disheartening if your hard work gets closed for no reason if it's something they don't want which is why you should raise an issue first at least there's a good reason why it wasn't accepted and then hopefully have given you motivation or an idea of other things you can contribute to in the future to have it accepted and merged another tip that i found recently that i really want to share with you is if you found the project that you want to contribute to for example this one search the project for todo's a lot of the time people put todo's in the projects and never actually raised the issue and these todo's get forgotten about maintainers in the community will really appreciate if you find a todo raise an issue and if you can make the change and make the improvement to remove the todo everyone will really appreciate it let's go through the markdown basics so that you know how to write a really good issue and really good pull request so you can stand out it's important for you to know the eight different markdown syntax a single hash is a heading one and that gets converted to a h1 in html and you can do two hashes to create a heading two and that goes all the way down to heading six that'll be six hashes then you can write normal text normal text and then if you want something bold you would wrap it in double asterisks on either side and if you want italic text it's a single asterisk on each side if you want a strikethrough it's double tilde on both sides let's have a look how that renders and you can see preview at how it renders what other awesome things can you do so you can also do lists so we can do an unordered list this is item one item two with the sub list sub item 2b we can preview that and you can see how it's indented with the sub list as well and we can also do an ordered list and a trick here is not to do them one two and three is actually just to do one on all of them and you may think why the secret is the github will do the rest for you and therefore if you move any items around you don't have to keep renumbering them all the time as you can see it reads one two three and github also uses that on the issue list and the pull request and it's really important to give an overview of an issue or progress what stage is at how much progress has been done and the way you do that is with square brackets and a space in it so you can say item one incomplete but if you want to make item two complete we put an x in it and this would be complete you don't have to write the word incomplete and complete but you can see now item two is checked and item one is not if you wanna put links in you can't just paste the link but it might look out of place so if you actually want to put text that is shown that is linkable then you would put square brackets for the text that you want appeared so in this case free code camp and in the brackets you put the link where you want to go to so if you hit preview you can see it is still a link and it still goes to the same place it's more readable and more friendly and if you have an image that you want to display you can just put an exclamation in front of it and the writing in the square bracket will be the alt text and then in the brackets will be the path to the image and that can be a local path or a url of the internet if you really want your issue and pull requests to stand out you can also look at doing code blocks and tables let me show you so the first row is actually the title and we need to tell the markdown how the table is going to be rendered it's going to be left align centered or right aligned and you can do that with colon and three dashes is what i recommend you can actually make do more dashes to make the table look easier to read however as you change the column sizes with different content these will never be accurate so i wouldn't worry about trying to make the right number of dashes to suit the column because it's always going to change the width as you add and remove different content so we can left align the first column and let's right align the second column and now we can put in the first row so we can say row one a and then we can say row one b and you separate these by pipes and now if i hit preview you can see the table has come through and you can see column one is aligned to the left and column two is aligned to the right and you can also center a line by putting colon either side of the dashes and now you can see row 1b is now centered code blocks this is where it's really important to have your issue in progress stand out by using code blocks and there are so many different things you can do with code blocks with things like syntax highlighting or even diffs is epic let me show you so for inline code you use a single backtick this is backtick and you can say console.log and when you preview that it shows it in grey it's not very fancy it doesn't stand out massively so if you wanted to stand out more we could say example code block you do three backticks and then you put in the same code and you close it with three backticks now you can see it's a big blocks full width stands out a lot more but it's still not syntax highlighted so you can do things after the first three backticks you can do things where you put in the language so if it's markdown or if it's javascript or typescript or ruby or php or python whatever it is and when you render it actually highlights it this doesn't show it very well but you can see the log has changed a different color and if you're adding and removing things and you want to show what changes there should be then rather than doing two blocks like for example if i said const data equals this if you want to show the differences before and after in say an issue or in a discussion then to have two code blocks is quite verbose let me show you and show you a really awesome way to look really professional so we have two code blocks they are syntax highlighted but you can see before and after it's not very easy to see what changed you just gonna notice the brackets are changed from an array to an object but the way to look awesome you can combine that into one code block and the way you do that is you put both of them in the same code block and actually the type becomes a diff rather than the language the line you want to take away you put a minus and the line you want to add you put a plus and when you render that you can see it's really highlighting what you want to remove and what you want to change to and that's really awesome it's so awesome and so powerful that actually when you're reviewing someone's pull request rather than saying oh you need to change this bracket or something like that you can actually put in a diff in an inline comment and the other person can just click accept and github will take that diff apply it to that branch and pull request so it makes it become very slick and very efficient even with the linear conversation on github some people write a big block of text and you might be saying yes or no and it's unclear to which part the paragraph you're saying so it is possible to do quotes and i highly recommend that and what i mean by quotes is this if someone wrote i have idea one and also idea two if someone wrote they have two ideas in the paragraph and you wanted to say yes to idea one and no to idea two if you just say you would have to write yes and no and maybe it wasn't so obvious which ones you're referring to so one thing you can do that's what someone wrote when you reply you can quote what they said and it appears in the quote but even better you could split it apart remove the and have two quotes i agree with this i do not agree with this and so when you preview it it's really obvious to know what you were replying to otherwise the next comment that comes back is which one did you mean it wasn't very clear so it's really important to keep things efficient on github and that will help you with chatting on stack overflow on discord on slack because it's important to give enough information but not give too much that it's a book like war and peace because some people wonder why they ask questions and they don't get answers it's because their question isn't very good and people don't want to try and dig in and get blood out of a stone if you can make it really easy for someone to understand your question your idea your bug then it's more likely you're gonna get help having good communication be an issue be on social media be on discord or slack is a great way to get noticed and to get into the conversation another tip on a pull request is you probably have raised an issue for that pull request i highly suggest closing the issue when the pull request gets closed or merged and the way you do that is is you put a hash a bit like the heading title but without a space you put in the number that you want to reference to and then before that you put closes or fixes and you can write more after this but when this gets merged closed then it will also close the issue it reduces the admin for the community and the maintainer and that's really important put yourself in their shoes try and make their life easier when they're getting lots of comments suggestions pull request issues you want to make it as efficient for them as possible and remember you don't have to contribute a big pull request you need to keep it efficient and small as a project maintainer myself i would rather have more pull requests that are small because i can merge them very quickly in bite sizes rather than trying to spend an entire day going through someone's huge pull request so if you want to get your pull request merged i suggest keeping it small and concise i really believe there is no pull request that is too small let me give you another little gem on pull requests if you want to get feedback on your work sooner then i suggest raising the pull request but do this gem as you can see here on the right under the reviewer section you can convert your pull request to a draft that's really important it shows the community and project maintainers that you would like some feedback but it's not ready for the proper review to get merged in so getting that feedback early is really important start that the conversation in the issues and when you've made changes start it early in the pull request but don't forget to convert it to draft so people know that it's not completely ready otherwise you're going to get lots of comments of things you might not have quite finished yet and that's why it's important to have a checklist in the description as well and then when it's ready to have a proper review and everything's finished you can then convert it back to a normal pull request and remember i mentioned that doing a todo list in your issue or your pull request shows the progress as you can see i have four todo's and none of them are done and you can see that the progress is zero other ones have got four out of four this really helps maintainers and the community look through the list of pull requests to see what's ready for reviewing in this section we're gonna talk about how you can make money directly and indirectly from open source github now has a sponsorship program and what that means is people can sponsor you or you can sponsor people on the github platform and github takes no commissions if you sponsor someone ten dollars a month they're gonna get ten dollars a month and to take that even further github were doing matching that meant that if you sponsored someone ten dollars a month github would also give them ten dollars a month so either they could get double or you just half your donation and give the other half to somebody else because github will match it and you've probably seen this sponsor button on organizations and people's profiles so if you find an organization or a person that you really think they're doing great work in the community you want to support them click on that sponsor button and give them a small donation whatever you're comfortable with they will really appreciate it that's how you can make money directly from github so i suggest setting that up it's free to set up on your account i highly recommend setting that up because you never know who wants to sponsor you so that's the way you can make money directly from open source let me talk about the ways you can make money indirectly so i have mentioned about the networking and communication if you do regular open source people will then discover you and by people i mean companies headhunters hr departments recruiters hiring managers they will discover you and then they will contact you to offer you a job says you getting money indirectly from open source and that's really important i do open source on github and i do youtube videos and my biggest regret about both of those is not starting sooner because they have both accelerated my learning my career my clients the money i've earned i cannot encourage you enough to do the same instead of you hunting for a job instead of you writing a cv to match that job why can't the companies chase you and not even ask for a cv because they love your github profile they love your community presence so if you can write blog posts or do youtube videos i also highly recommend doing that to complement your open source you can talk about what you've learned what you're doing you don't have to invent something new you're probably learning something new every day just share that on github or on socials and do that little and often and you will get discovered some techniques that i use what i'm hiring for myself or for my clients is i want to look at people's github profiles there's no surprise there but i'm not looking how amazing their code is so if your code isn't amazing still put it out there i'm actually looking at their code today and comparing it to their code two three months ago and all i care about is that the code has improved in that time because that shows me the person is still learning and that's more important than being an expert in one area and also i'm looking for the person's attitude how do they communicate and collaborate with other people this is why i keep encouraging you to get involved in the conversation on other people's issues on your issues on other people's projects and your projects so other people can contribute to your projects and start the conversation with you and then you can communicate back it's really important to see how people communicate not only as a contributor but as a maintainer i suggest getting involved in the conversation if you're looking for resources to get involved in open source contribution free code camp have an awesome community driven project you can see it behind me there are almost 150 contributors to this project that shows the value of this project because it's showing different perspectives people with different backgrounds are giving their opinion so this project is going to add so much value so let's have a quick look there are translations of this project into so many different languages so if english is difficult for you then there are different languages that you can look at they might not quite be up to date and also if you're familiar with some of these languages or even just one of these languages you could read the english version and update it to your language which would really help the communities that's a really awesome contribution you could give back to the community and to this project this is translated into 11 languages if you know any other languages then feel free to make a contribution and translate it into that language it makes our community even more inclusive even right at the beginning of the readme it says this is a list of resources for people who are contributing to open source and if you find additional resources please contribute a pull request what a great way to start a readme it has blog posts from different people in the community and i think some of these posts are really interesting how to do searches searching on github can be quite complicated there are so many filters tips and tricks that you can do it's really convenient there are links here to make it so much easier for us to filter down the issues on github for example first timers only now you can see the issues across github are filtered down with the label first timers only and there are open source initiatives things like first timers only first contributors hacktoberfest and 24 pull requests and 100 days of code so do have a look at those they are a great initiative to encourage you to get into open source we've talked about contributing to open source but what about project maintainers wait a second before you get scared and say hey i'm new to open source i can't be a project maintainer yet i've barely contributed to open source everyone who's on github is not only a contributor is they are actually a maintainer so you are a maintainer as soon as you have that one repo on github that is public it might just be to customize your github profile but that is an open source repo that anyone else in the community could raise an issue raise a pull request make suggestions to you so you are actually already an open source maintainer and that's great because it's really good to practice the communication skills and the networking skills on the other side so let's talk about how you can get your project to stand out and you may think why would i want my project to stand out i'm a bit nervous the project isn't ready trust me your project will never be ready these open source projects are living projects they're having improvements done by you and the community all the time so project will never be ready and people really like joining a project in the early days because they can help guide the direction of the project imagine waking up to 10 12 pull requests people have made improvements to your project it's such an awesome feeling to have that to think wow people have actually spent their time and effort to make an improvement to my project which then becomes our project and you build a community around your project and you'll learn so much from it people will make suggestions you don't have to accept everything but just by having the conversation you will learn so much more around the technologies you're using in your project and libraries and frameworks that you might not even be aware of yet to make your project more inclusive and more enticing for people to get involved and contribute the first thing i recommend doing is going to the insights tab from the insights tab you have a set of tabs down the left hand side and then go to the community tab from here you can really see how you can make your project more inclusive does it have a description does it have a readme does it have a code of conduct does it have the right templates for issues and pull requests does it have a license and you can do this on other people's projects as well so it's actually a really good way to contribute contributing to your own project regularly is actually really useful it shows the github algorithm that your project is alive and all the stats on github also look healthy and people want to contribute to projects that are moving forward not projects that are dead or archived without having the archive flag on the repo so don't try and spend an entire weekend doing one giant commit to your project i highly recommend every day every few days doing small changes to your project therefore people can understand the changes that are happening do a commit for each value that you add to your own project and if there are people who are more junior than you who want to get involved in your project and even if you're new to tech this is really valuable those people with a fresh pair of eyes will actually improve your projects so much because they will show you and highlight what parts don't make sense for newcomers and they might make sense to you because you built the project to really embrace the feedback from the community and from people who are new to tech documentation is so important that might scare you might think i'm not going to write a whole book on my project because it's changing all the time documentation will get out of date you don't have to write a whole book having a readme that shows the goal of the project and has a quick start guide of how to get the project running locally so people can start making changes to your project and get involved having a screenshot in your readme is really helpful it's which straightaway shows the benefit of the project and if you can have it deployed somewhere so that people can go and have a play and check it out it's also really important you want to lower the barrier to entry so people can get involved in your project as easily and as quickly as possible automate everything as much as you can for day one you don't have to try and have a perfect automation pipeline but do start automating things from the beginning now with github actions it's really easy there are a few lines of yammer config to have github actions to run a linter on your project to run any checks that you want or any checks that you might do manually if you can automate these then when you do have the conversations and the pull requests with your community you're actually having the conversations about the more valuable part rather than about formatting or any of the simple checks that could be easily done with github actions another great tip i can give to you as a project maintainer is try to respond to people as soon as possible ideally within 12 hours and what i mean by that is if you haven't got time to review an issue or discuss it or to review a big pull request at least comment and say look i'm really busy with work i will try and reply this weekend but at least the person who started the discussion who raised the pull request knows that you believe in your project and you're just busy at the moment another great thing about being a maintainer when you're contributing to other projects you also realize that a lot of these projects are done on the side people don't do these as a fulltime job so if you don't get a response straight away be patient they haven't forgotten it they've got the notification don't send them emails discord dms twitter dms with links to your issue or your progress they've got the notification if you don't hear back from them within a few days a week then yes by all means do reach out to them but don't spam them all within the first 10 minutes to help your project get discovered you need to be involved in other projects i don't just mean contributing code to other projects as i've been saying the whole way along through this video get involved in the conversation reply to an issue review someone's pull request and give your thoughts and feedback and when they see you getting involved in the communication they will go to your github profile and they'll have a look at what projects you have that's why it's also important to customize your github profile let's take a look at mine as you can see i've customized my github profile i'm changing this all the time and if you have any suggestions or any improvement raise an issue raise a pull request on my repository to customize your github profile all you need to do is create a repo with the same name as your username just like this go to the plus above and go to new repository and type in your username what you see on the left have the same on the right i've done that already so as you can see i've got this here and this readme is what appears on my github profile and in here you can put basic html and markdown and you can customize it regularly and often i do get contributions you can see i've got two pull requests waiting to get reviewed i really enjoy seeing people's ideas and suggestions for my customized github profile i actually do also enjoy contributing to other people's github profiles in addition to customizing your github profile don't forget to pin the repositories that you're most active on your github profile you can customize your pins up here and then you can select the repos that you want to be pinned you can select up to six open source and github is actually more about collaboration and communication rather than just code so it's important to get involved in the discussion because companies people hiring want to see how you communicate how you collaborate are you a team player do you work well with other people are you able to give constructive criticism to people in a friendly and encouraging way and are you also able to take constructive criticism and collaborate with people to work to a better solution if you want to get into open source you can up skill so you can learn faster you can network collaborate and improve your communication skills and so you can get the job and money that you deserve head over to my youtube channel i do videos and live streams helping you get into open source we also have a discord channel we also have a github organization if you'd like to join our github organization you can raise and issue our support repository asking to join the organization and we'll send you an invite this way you can get involved in the community straight away the best way to learn a spoken language is to go live in the country that speak the language that you want to learn so come and join our community and open source will be like second nature to you
