With timestamps:

01:19 - hey welcome to
01:21 - day two
01:23 - of building an alexa skill the the live
01:26 - stream so for anybody that was here
01:30 - alexa's gonna start talking back to me
01:31 - here and let me shut her off uh for
01:33 - anybody that was on yesterday welcome
01:35 - back for anybody that's new uh welcome
01:37 - glad to have you i'm going to start
01:40 - today we're going to just jump right in
01:42 - i'm going to start with a recap quickly
01:43 - of what we did yesterday
01:46 - and then i'm going to get into uh the
01:49 - topics for today and we'll we'll start
01:52 - with a quick introduction to the alexa
01:55 - skills kit cli
01:57 - and then we will talk about the alexa
01:59 - skills kit sdk 2.0 a little bit and then
02:04 - we will jump into building our project
02:07 - which i've got some ideas on and i'm
02:09 - hoping to get some feedback from
02:12 - all of you on uh
02:14 - the the direction for it so this will
02:16 - hopefully be an
02:17 - opportunity to uh to work together to to
02:19 - build our skills so it's not completely
02:21 - scripted i didn't want this to just be a
02:24 - a live cast of
02:26 - an alexa development course i did one of
02:28 - those so if that's what you're looking
02:29 - for you can just
02:31 - check that out on free code camp but
02:35 - yesterday what we discussed is the
02:38 - the things that you'll need to start
02:40 - developing alexa skills and really it's
02:42 - two things you need two different
02:44 - accounts you need an amazon developer
02:46 - account which you can get a
02:47 - developer.amazon.com
02:48 - and you need an aw essay account and
02:51 - then we also talked yesterday about the
02:53 - uh the basics of how a skill works
02:56 - and uh uh covered that you know
02:58 - basically it's uh it's jason that's
03:00 - being passed back and forth between the
03:02 - alexa service and the skill service
03:05 - which is uh the back end that processes
03:08 - the requests and responds to
03:10 - what users are asking for
03:13 - and then we
03:15 - dove in a little bit into the developer
03:17 - portal and looked at setting up a basic
03:20 - skill
03:22 - and talked a little bit about uh aws
03:24 - lambda and how
03:26 - that works and then we
03:27 - we built a really
03:30 - super simple skill
03:32 - that was just returning
03:35 - jason and i kind of fumbled around on
03:37 - that which is a good lead-in i suppose
03:40 - to our topic today which is
03:43 - using the the sdk it makes life a whole
03:45 - lot simpler and that's what we're going
03:48 - to talk about
03:49 - but as i um
03:51 - as i jump into it i have an idea that i
03:54 - wanted to put out there for everybody so
03:57 - um i'm thinking that maybe we uh for the
04:00 - example skill that we're going to be
04:02 - building maybe we we actually build a
04:03 - live skill and i um talked to the the
04:06 - guys at uh free code camp and and
04:09 - checked out the uh the alexa skill score
04:12 - store and didn't see a skill for
04:15 - uh free code camp so i thought maybe we
04:17 - could try to build a skill for free code
04:19 - camp but i would definitely need uh all
04:21 - of your help and uh it's a little bit
04:24 - risky because i'll be very much going
04:25 - off script but if um if you guys are up
04:28 - for it i will give it a try and we've
04:30 - got a few other people from my team here
04:34 - online
04:36 - that are in the uh the live chat that
04:38 - will
04:39 - be able to answer questions and stuff
04:42 - yeah i can i'll make the font bigger
04:44 - here for see that
04:46 - that question there let me see
04:50 - hopefully that's a little bit better
04:52 - we've got a couple of people online that
04:54 - can help out with um
04:57 - any questions so if you have questions
04:58 - just please go ahead and post those in
05:00 - the the live chat
05:02 - and i'll be looking at those as i'm
05:03 - going through this and then um karthik
05:06 - who is in the live chat also
05:09 - um karthik if you're on maybe you could
05:11 - just like post hi he is um he's
05:14 - available to uh to answer questions in
05:16 - the chat also
05:18 - um and ken
05:20 - uh and our peta i think they're all
05:22 - online so they can
05:24 - answer questions so please go ahead and
05:26 - ask any questions that you have
05:28 - as um as we're going and i'll um i'll
05:31 - pause from time to time to look at the
05:34 - the questions and try to answer them
05:36 - is as best that i can
05:39 - uh so
05:41 - let's um yeah let's get into it so
05:43 - uh today we are going to um
05:47 - so i got rid of everything from
05:49 - yesterday we just did an overview and
05:51 - we're gonna start fresh today
05:53 - and we're gonna start fresh using the uh
05:57 - the alexa skills kit cli
05:59 - and if you
06:01 - are
06:02 - i'm not gonna install that and
06:04 - everything in uh in this live cast but
06:08 - it's basically a command line tool that
06:10 - you can use to
06:12 - build skill projects
06:14 - and deploy skill projects and
06:16 - if you uh if you google
06:21 - ask cli
06:25 - there is
06:27 - a um a quick start guide and there's a
06:29 - couple tutorials that i did a while back
06:31 - actually down here too and if uh that if
06:34 - you're just getting the cli installed
06:36 - and configured that you can follow um
06:38 - and if you go to the the dabble lab
06:40 - youtube channel there is i think these
06:43 - ones that pop up these are kind of old
06:44 - so you go to
06:46 - youtube.com lab and there's some newer
06:49 - tutorials or skilltemplates.com actually
06:51 - has a tutorial also uh for getting the
06:55 - the uh alexa skills kit cli installed
06:58 - in the prerequisites
07:00 - um what you'll need is uh you'll need to
07:04 - have nodejs installed uh you can install
07:07 - this on it is just an npm package so you
07:10 - can install it on windows linux or mac
07:13 - i'm working on a mac for all these but
07:17 - the commands all work the same
07:19 - and um you will after you've installed
07:22 - it you'll configure it you'll initialize
07:24 - it to work with your
07:26 - accounts that we we looked at setting up
07:29 - yesterday so your aws account
07:31 - and your um
07:33 - amazon developer account
07:35 - and it's pretty straightforward the uh
07:37 - the install process um so again i'm not
07:40 - gonna go through it but if you uh have
07:43 - any issues you can look at the tutorials
07:46 - that are on the dab lab channel and
07:47 - leave any comments there and we can help
07:49 - you through it if you run into anything
07:52 - okay
07:53 - yeah so a tharva also from dabble lab is
07:56 - on that's great thanks for having on
07:58 - darva um
08:01 - okay the the fonts better uh
08:04 - okay
08:05 - awesome all right well
08:07 - let's uh let's get into it so um like i
08:09 - said i'm gonna try to
08:11 - build a skill for
08:14 - uh free code camp and i want to just so
08:18 - this is going to be
08:20 - you know a real
08:22 - real live demo of how the process works
08:25 - but what we generally start with is is
08:30 - going through
08:31 - the the high level what we want the
08:34 - skill to do so i'm going to
08:37 - do that with
08:38 - everybody and um
08:42 - we'll start with
08:45 - free
08:46 - code camp that's what we're going to
08:47 - call the skill for right now
08:49 - the name and
08:51 - i usually start by defining how the
08:54 - skill will
08:56 - be launched so launch phrases
09:04 - and in the the alexa world when you're
09:08 - launching a skill we talked yesterday
09:10 - about the invocation names so we're
09:12 - going to use for our example school
09:13 - we're going to use free code camp as the
09:16 - invocation name so we would say
09:18 - minimally something like alexa
09:21 - open free code camp
09:26 - but we also might provide a directive or
09:30 - an utterance something like alexa
09:34 - ask free code camp
09:38 - camp um
09:42 - what
09:44 - articles
09:50 - if i could type articles are published
09:55 - on medium
09:59 - and that was one of the things that they
10:00 - said they'd like to see is a way for
10:03 - users to ask alexa about articles that
10:06 - are published on the the free code camp
10:08 - medium channel
10:10 - and uh maybe we'll also have something
10:12 - like alexa
10:14 - um
10:17 - at ask free code camp
10:22 - camp
10:27 - i don't know any uh any thoughts on what
10:29 - we can do
10:33 - um
10:35 - what would you uh i need some uh need
10:38 - some feedback from you guys here what do
10:41 - you think we should be uh we should be
10:43 - doing how should this skill work
10:46 - everybody is part of the uh the the
10:48 - project team now so let's uh let's
10:51 - put some ideas out there
10:53 - post them in the uh in the chat let's
10:55 - hear what you got come on
10:58 - something uh
11:01 - recode camp
11:04 - uh
11:06 - ask free code camp um
11:12 - what live streams
11:15 - are scheduled
11:18 - i don't know if we can do that but we'll
11:19 - put it in here
11:22 - ah that's a good one karthik
11:24 - alexa
11:26 - ask free code cam
11:30 - what programming languages are popular
11:43 - what else anything else
11:44 - uh
11:48 - what's in your curriculum
11:55 - uh what
11:56 - what are the last few videos published
11:58 - that's a good one we can get that from
11:59 - the youtube ati api i think
12:11 - [Music]
12:16 - okay um
12:18 - we can be out we can be adding to this
12:19 - i'm gonna leave it at that for right now
12:21 - but if anybody thinks of anything else
12:23 - let's put it on here minimally it'll
12:25 - just go on our wish list for future
12:27 - functionality but um
12:29 - we'll uh we'll start with this so
12:32 - this is when we're planning a project
12:34 - generally where it starts we just think
12:35 - about how the user
12:37 - might interact with the the skill from
12:40 - the very beginning in the very beginning
12:42 - is launching the skill and so we just
12:44 - brainstormed some ideas like this and
12:46 - then um the next thing we do is we do a
12:49 - uh
12:51 - like a
12:53 - really simple
12:56 - interaction example
12:59 - [Music]
13:02 - and
13:04 - the way that we write it out is
13:05 - something like this we would say like
13:06 - the user would say
13:14 - let's
13:18 - see we'll start with the the simplest
13:21 - one
13:28 - so
13:29 - alex open free code camp and then alexa
13:32 - is going to respond with
13:34 - um
13:36 - something like
13:37 - hello
13:41 - yeah we do need a multi-turn dialogue
13:43 - too
13:44 - so uh somebody
13:47 - that was uh your idea
13:50 - then
13:52 - kinda i'm sure i'm killing your name but
13:54 - um
13:55 - come up with a an idea for a multi-turn
13:57 - dialogue i think uh i think you're right
13:58 - we want to try to get that in here so
14:00 - what do you got come up with something
14:02 - that uh that we can use go out to
14:03 - freecodecamp.org and uh poke through the
14:06 - site if you got a second and uh come up
14:08 - with something that you think we uh can
14:10 - use as an example again this is uh we're
14:13 - all working together on this this
14:14 - project so um alexa's gonna respond with
14:17 - uh hello
14:18 - um
14:20 - welcome
14:21 - to the free
14:23 - code camp skill
14:28 - and um
14:37 - i can
14:39 - tell you
14:41 - about articles
14:43 - about
14:45 - recent
14:49 - medium
14:51 - particles
15:00 - or
15:02 - scheduled
15:04 - live streams
15:07 - and
15:09 - i'm making this up as i go so if anybody
15:11 - has a better
15:14 - uh
15:15 - a better idea then please post it and
15:18 - we'll uh we'll update this and we can
15:20 - change it as we go too so
15:22 - and then the uh we'll ask a question
15:25 - we'll prompt the user um
15:27 - what would you like
15:29 - something like this and
15:32 - then the user will say
15:34 - um
15:39 - what's been posted
15:44 - on medium
15:50 - and then alexa will say
15:54 - something like here are the
15:57 - most recent
16:02 - 5 posts
16:04 - and we don't want to have a list of like
16:05 - everything that's been posted obviously
16:06 - because the user would be just sitting
16:08 - there for hours and
16:10 - maybe if we
16:12 - wanted to get fancy we could let the
16:13 - user say
16:15 - tell me the the next five posts or
16:17 - something like that but for right now
16:18 - we'll keep it simple
16:20 - and um
16:23 - and then alexa will like play the posts
16:25 - here so
16:33 - something like that
16:35 - and i'm gonna just
16:37 - start with this here because this is
16:40 - probably
16:41 - going to um
16:44 - get us to where i was hoping to get to
16:46 - today for day two so today we did the
16:50 - recap and the um we're going to do the
16:52 - intro to the ask cli while we're
16:54 - actually building some functionality and
16:57 - the same with the the
16:58 - ask sdk2 so
17:00 - uh the the other thing that i wanted to
17:02 - cover today is getting data from an
17:03 - external api so that will let us do that
17:06 - i think with that example and we're
17:08 - going to use the
17:10 - um i found a npm module that will let us
17:12 - call out to median so we'll uh i haven't
17:16 - used it before but i think that will um
17:19 - that will cover us for today so
17:21 - uh the
17:22 - ask cli i think i touched on this really
17:26 - quickly yesterday i did this example
17:28 - skill i'm gonna just delete this start
17:31 - all over
17:35 - and
17:37 - create
17:40 - so in here the ask cli like i mentioned
17:43 - is a command line tool
17:46 - and it
17:48 - lets you
17:49 - create
17:50 - skill projects which are local projects
17:53 - and
17:54 - in case anybody is not familiar with
17:57 - the ide that i'm using right now i
17:59 - mentioned this yesterday but for anybody
18:00 - that's uh that's just coming on this is
18:02 - visual studio code it's an open source
18:05 - editor similar to like um
18:07 - atom
18:08 - which is another one so you can get this
18:11 - for free for windows
18:13 - linux or mac
18:15 - and that's what i'm using so it's got an
18:17 - integrated terminal so i'm running the
18:19 - command line ask new here
18:21 - and then the
18:23 - alexa skills kit cli prompts me for a
18:26 - name and we're going to call this
18:28 - free code camp
18:31 - camp
18:33 - alexa skill
18:40 - and when i do that
18:43 - um
18:44 - this the cli creates a folder and i'm
18:47 - going to walk through what's in the
18:49 - folder right now
18:50 - and just kind of give you a high level
18:53 - tour of the the stuff that we're going
18:56 - to be starting with so i mentioned
18:58 - yesterday that
18:59 - this is going to be sort of boilerplate
19:02 - code that you can start working with and
19:04 - what's what the cli is doing is it's
19:06 - actually going out to a github
19:08 - repository and pulling down sample code
19:11 - so in addition to using
19:13 - um the
19:14 - basic basic template that is included
19:17 - you can also do something
19:19 - like this before i go in there you can
19:21 - go like ask new
19:24 - template
19:26 - and when you do that
19:29 - the cli will prompt you or provide you
19:33 - with a list of templates that amazon
19:35 - provides
19:36 - and i would um if you're getting into
19:38 - this i would uh definitely recommend
19:41 - like downloading these templates and
19:42 - taking a look at it's a really great way
19:44 - to get familiar with uh the code and
19:48 - most of them are updated now with the i
19:50 - think they're all updated actually now
19:52 - with the latest uh sdk so the uh the
19:55 - code is pretty current uh we're gonna
19:57 - start from scratch and uh just use the
20:01 - the basic one but the other option
20:03 - you can scroll down there's there's a
20:05 - bunch of templates in here so lots of
20:08 - lots of stuff to dig into
20:10 - uh to uh to get familiar with some some
20:13 - code examples
20:15 - we also have
20:18 - uh i'll i'll pick like um
20:21 - how to just to show you what happens
20:29 - so there's the how-to and then um we've
20:31 - also set up
20:33 - [Music]
20:34 - ask new template
20:41 - you can also create your own templates
20:44 - and we've got some that we use at
20:46 - dabolab at
20:50 - skill templates
20:54 - slash templates
20:56 - dot json
21:00 - and uh
21:02 - these
21:03 - these mostly go with tutorials that um
21:06 - i've done on youtube uh so
21:10 - they're not all updated with the latest
21:12 - sdk but there is a basic starter and a
21:16 - api starter there that are updated so
21:18 - i'll start with like the api starter
21:20 - just so you can see that
21:23 - so now i've just gone through creating
21:26 - three different skill templates so um i
21:28 - did that just to walk through uh the
21:32 - getting the uh the ask cli to give you a
21:34 - starting point so three uh three
21:36 - different options
21:38 - the um the default one here
21:41 - is what we're going to be
21:42 - working with but i'll reference code in
21:44 - these ones which is part of the the
21:46 - benefit of having the templates is you
21:48 - can go back and look at
21:49 - code patterns that you used previously
21:52 - and copy and paste those to save your uh
21:54 - save you from having to to type
21:56 - everything out
21:57 - but in the in each one of the
22:00 - skill project folders i'm going to move
22:03 - into the folder
22:07 - there's there's a dot ask folder a
22:10 - lambda folder a models folder and then a
22:13 - skill.json
22:14 - file and in the ask folder is
22:17 - configuration information for the ask
22:19 - cli
22:21 - and
22:22 - when you start with a brand new template
22:24 - the the main thing
22:26 - is
22:27 - the uri here
22:29 - the the value of the uri here for the
22:31 - endpoint this is going to define the
22:33 - name of your
22:35 - lambda function so when you publish the
22:37 - skill
22:38 - it is going to create the lambda
22:40 - function for you out in the
22:42 - aws amazon web services and and this is
22:45 - where you can change the name if you
22:47 - wanted it starts with a default name
22:49 - that works fine
22:51 - the
22:52 - lambda folder is
22:55 - going to contain a subfolder called
22:56 - custom by default and then within the
22:58 - custom folder is
23:00 - actually the source code for your lambda
23:03 - function
23:04 - and you'll have
23:06 - your node modules in there the sdk
23:09 - automatically includes the um the
23:12 - the
23:13 - cli rather automatically includes the uh
23:16 - alexa skills kit sdk
23:18 - and the the sdk just makes
23:21 - creating the responses more than
23:23 - anything else makes creating the
23:24 - responses and consuming the requests
23:27 - from alexa a lot easier so rather than
23:30 - you having to write the code end-to-end
23:31 - to to do that yourself the skills kit
23:35 - is going to handle most of the heavy
23:37 - lifting for you the sdk is
23:40 - and this uh this index file is
23:44 - uh by default where the
23:46 - where the lambda function code is going
23:49 - to to start i got a question yesterday
23:52 - about whether or not most of the
23:54 - examples you'll see all of the code is
23:57 - in the functions and everything are just
23:59 - in one file this index file doesn't need
24:02 - to be like that and the answer is no you
24:03 - can use node modules and you can create
24:06 - custom modules and you can do you know
24:08 - all of the stuff that you could do uh in
24:10 - in node if if you're familiar with that
24:12 - if uh
24:15 - if not or if you want to keep it simple
24:17 - you can also just put it all in in one
24:19 - file i think probably for our example
24:21 - we'll break it up a little bit just to
24:23 - show some examples of using node modules
24:26 - uh so
24:28 - um we'll
24:29 - we'll
24:30 - get we'll go a little bit beyond just
24:32 - keeping it super simple but in here um
24:35 - what you what you really want to take
24:37 - note of is uh these
24:40 - uh functions here
24:42 - or actually these these
24:44 - [Music]
24:45 - objects with uh functions and
24:48 - specifically they can't handle and
24:49 - handle
24:50 - so um this is new to the 2.0 sdk but the
24:55 - uh the can handle function here it's
24:57 - going to
24:58 - be
24:59 - so the the json the request input gets
25:02 - passed in here and it's going to look at
25:04 - the request to determine what
25:07 - the request type is and there's
25:10 - um an intent request which is when i
25:14 - talked yesterday about the interaction
25:15 - model i said that the intense kind of
25:17 - map to functionality that the skill is
25:19 - going to provide
25:21 - the intent that we define in the model
25:23 - if it's a
25:25 - user defined
25:26 - or a custom intent or actually if it's a
25:29 - built-in intent there's going to be a
25:31 - name for the intent and so we first look
25:34 - to see if it is an intent request versus
25:37 - like a a request for just launching the
25:40 - skill for the first time which
25:43 - is here's an example that a launch
25:45 - request
25:46 - so in this code here when the
25:50 - the
25:51 - user says alexa open whatever the skill
25:54 - name is in this case here
25:56 - the response is going to be welcome to
25:58 - the alexa skills kit you can say hello
26:01 - and when the user says hello which is a
26:05 - segue into the models which i'll get to
26:07 - in a second
26:09 - the
26:11 - skill
26:12 - service this one
26:14 - anyway says uh hello world back so it's
26:17 - a really simple starting point
26:20 - and
26:21 - handle some of the required intents like
26:24 - when a user says stop or cancel
26:27 - and so we'll use this as is our starting
26:31 - point also
26:32 - the
26:33 - model when we yesterday when we went
26:36 - through and we looked at
26:38 - setting up the interaction model through
26:40 - the
26:41 - developer council we
26:43 - talked about the the model being just
26:46 - json
26:47 - this is that model also so we can define
26:49 - all of that in here
26:51 - and what you'll see today
26:53 - is that
26:54 - we'll be able to do everything from our
26:57 - local
26:58 - ide without ever having to go into uh
27:02 - the the web browser and log into
27:04 - developer.amazon.com
27:06 - i will do that i'll log in just to show
27:08 - you the the updates but when you're
27:11 - working on your um your your development
27:15 - flow you probably won't be logging into
27:18 - the developer council all that much the
27:20 - cli doesn't just let you deploy the the
27:24 - skills and and update the skills but you
27:26 - can also test from the cli too which
27:28 - we'll get into
27:29 - probably not today but uh maybe tomorrow
27:31 - or uh the following day thursday
27:35 - and then the last thing on our tour
27:37 - through the
27:39 - skill project is the uh the the manifest
27:42 - file and the manifest file is um
27:45 - is gonna define
27:47 - settings
27:49 - and
27:51 - mostly configuration information that
27:53 - you would find in the developer console
27:56 - so uh when you log in there and you
27:59 - create for example like a name for the
28:01 - skill
28:02 - that is this here and i'm going to
28:04 - change this right now we're going to
28:05 - just call this skill free code camp
28:08 - [Music]
28:11 - and then
28:12 - we'll want a description for the skill
28:14 - and anybody who wants to join in on this
28:17 - i'll push this out to github somewhere
28:19 - too so if anybody wants to help and uh
28:22 - collaborate but if somebody wants to
28:24 - take that as an action item and come up
28:26 - with like a cool description for this
28:29 - anybody volunteering
28:34 - yeah i'll break it into some small
28:37 - files with multi-uh turn dialogues did
28:41 - you come up with the dialogue did you
28:42 - come up with the example
28:46 - just looking at uh it comments what's
28:48 - the difference between
28:51 - angular and react
28:52 - oh probably outside the scope of this
28:55 - uh
28:56 - this stream here we're not going to be
28:58 - using angular or react with this one
29:02 - okay
29:04 - um so so if somebody could take either
29:06 - you know somebody on the the dab a lab
29:08 - team or preferably somebody else
29:10 - that is uh is out uh watching this that
29:13 - wants to uh wants to get involved and
29:15 - come up with a description for us we're
29:17 - gonna also in the model we're gonna
29:19 - change the invocation name
29:21 - and the invocation name remember from
29:23 - yesterday is uh
29:25 - the name that the user is going to use
29:27 - to start the skill up invoke it
29:30 - and we're going to call this free free
29:32 - code cam
29:34 - so at this point um all i changed was
29:37 - just the name and the invocation name
29:39 - but let's um let's go ahead and deploy
29:41 - it and to deploy the skill you need to
29:44 - do that you know what i'm also going to
29:46 - change
29:47 - this uh
29:51 - actually i'm going to leave that that's
29:52 - fine
29:52 - um
29:53 - so
29:55 - you need to be in the folder in the
29:57 - project folder to run this next command
30:00 - so one of the questions there are the
30:02 - issues that i see on the
30:04 - in the tutorials on youtube is
30:07 - uh if you try to run the command
30:09 - actually let me do that so you can see
30:10 - this
30:14 - so like right now i'm
30:17 - i'm just in
30:20 - let's go here
30:22 - so now i'm just in the uh the root
30:25 - folder called uh free code camp live
30:28 - stream and if i try to run this command
30:30 - here
30:33 - i'm gonna get an error
30:37 - can't find skill.json and that's because
30:39 - you've got to run that command from the
30:41 - project folder that you're working in so
30:44 - if i did
30:48 - oops okay i've alexa skill
30:52 - [Music]
30:58 - so um
31:02 - yeah so if i did this now i can go ask
31:04 - deploy
31:06 - and when i do that
31:09 - now the ask cli is
31:12 - pushing the skill out to the developer
31:15 - council for me
31:16 - and
31:17 - um it will once that's done
31:20 - it will start building the interaction
31:22 - model
31:23 - and then it will publish the um
31:27 - the lambda function for us also so while
31:29 - that's happening let's go over here and
31:32 - take a look
31:34 - so
31:34 - i mentioned earlier that i cleared
31:36 - everything out from yesterday so now
31:38 - it's probably already deployed
31:42 - this so i'm refreshing and there this
31:45 - now is what the
31:47 - skills kit cli deployed for us from the
31:51 - command line
31:53 - what's a multi-turn dialogue a
31:54 - multi-turn dialogue um is a dialogue
31:57 - that is going to request more
31:59 - information so there's a back and forth
32:01 - something like uh if a user if you had
32:04 - an intent for example where a user was
32:06 - going to order a pizza you might need to
32:09 - know
32:10 - what size pizza they want what toppings
32:12 - they want and so the it's going to be
32:15 - multi-turn means you're going to get a
32:18 - response from alexa that's going to
32:19 - prompt you for response back and then
32:21 - maybe a response back again so rather
32:23 - than it just being uh something simple
32:25 - like what are the top median posts
32:29 - it might be something like um
32:32 - you know what
32:34 - maybe
32:35 - the alexa would ask what programming
32:37 - language uh are you interested in and
32:41 - the user might say i don't know what one
32:43 - would you suggest and the skill might
32:46 - say well how many uh
32:48 - um how many years of experience do you
32:50 - have in tech i don't know something like
32:52 - that but it would go back and forth
32:54 - before the intent was fulfilled and the
32:57 - the final response was
32:59 - um was sent back to the user so
33:01 - hopefully that makes sense
33:04 - um
33:04 - all right so
33:06 - the uh the so we've got our our base
33:10 - skill here now let's um let's
33:13 - go in and test it so i mentioned
33:15 - yesterday that if you set up your alexa
33:18 - developer account using the same email
33:20 - that you use if you've got an echo then
33:24 - you can you can test
33:28 - using your echo and so i've got
33:31 - let me
33:32 - [Music]
33:36 - show you this
33:39 - okay so we're going to test this now
33:43 - alexa open free code camp
33:47 - welcome to the alexa skills kit you can
33:49 - say hello
33:51 - okay
33:52 - so you see on the screen
33:54 - there's also a response here because i'm
33:56 - using an echo show actually that will if
33:59 - you're using an echo that doesn't have a
34:02 - screen
34:02 - that
34:03 - [Music]
34:04 - what's showing on the screen will also
34:06 - pop up in the
34:08 - the companion app so if you've got like
34:10 - an ios or an android device with an echo
34:14 - you can use uh cards and responses to
34:18 - post text stuff back you can also
34:20 - actually i know a lot of people use this
34:22 - but if you
34:25 - all right hello
34:27 - um you can also go to alexa.amazon.com
34:31 - and log in with your account to see this
34:34 - as well
34:44 - let's see
34:47 - sorry showing the wrong screen while i
34:48 - was doing that so you can log into
34:51 - alexa.amazon.com as well
34:53 - and you can see
34:54 - um we're getting our card response back
34:57 - there
34:59 - so um
35:02 - yeah so what
35:03 - what's going on here like i mentioned
35:06 - earlier is in this this
35:08 - default skill we're getting the the
35:10 - launch request which is coming in here
35:12 - and it's saying welcome to the alexa
35:13 - skills kit you can say hello we're going
35:16 - to change this to
35:18 - our
35:20 - oops wait a second we have that in here
35:21 - don't we
35:23 - dialogue we're going to change this to
35:25 - [Music]
35:28 - this here
35:33 - and
35:51 - and we're going to change the
35:55 - and change the the reprompt here
36:05 - [Music]
36:09 - and i think we'll just do
36:14 - what will we say so the repromp happens
36:17 - if the user doesn't respond after eight
36:18 - seconds so that right now uh this change
36:21 - here when the user launches the skill
36:23 - it'll say hello welcome to the free code
36:25 - camp skill i can tell you about uh
36:28 - recent media articles or scheduled live
36:30 - streams what would you like
36:32 - and if the user doesn't respond we'll
36:34 - just say
36:35 - um
36:37 - would
36:39 - what would you like
36:46 - all right
36:46 - and
36:48 - the uh
36:52 - this is the card that showed up on the
36:53 - screen and we'll just call this free
36:55 - code camp right now
37:01 - and um so this this hello
37:05 - world intent handler so this is
37:08 - so right now
37:10 - if we look at what we've got and we
37:12 - break that into what the user wants
37:15 - we've got um two different possible
37:18 - intents right so we've got uh if you
37:21 - look in here the user could either want
37:24 - recent median articles
37:27 - or they could want uh scheduled live
37:30 - streams right so the intent is going to
37:32 - map to the functionality in most cases
37:35 - that
37:36 - the skill is going to provide does that
37:38 - make sense
37:44 - yeah the toys toys are mine
37:56 - just i'm gonna take one uh one second
37:58 - here to read through some of the uh the
38:00 - the questions and comments and then
38:03 - i'm going to talk about
38:04 - how you would
38:06 - create these additional intents but let
38:08 - me just make sure we're
38:10 - covered up to this point
38:37 - yeah i think that multi-turn example
38:38 - works
38:39 - we could use something like that try to
38:41 - um
38:42 - if you if you can uh
38:47 - try to uh try to turn that into
38:49 - something that would make sense for the
38:50 - um
38:52 - the free code camp skill so i don't just
38:54 - want to if if we can avoid it i don't
38:56 - just want to do like a
38:58 - a hello world skill i'd love for the
39:01 - next few days to end up with something
39:04 - productive coming out of it other than
39:06 - just having a chance to uh to work
39:09 - through some of these examples together
39:10 - but
39:12 - i've got tutorials where you can go
39:14 - through that i'd love to work with
39:15 - everybody to
39:16 - actually create a live skill i think
39:18 - that would be fun so
39:20 - if you've got um if you've got some
39:22 - things that you want to see if you can
39:24 - somehow come up with an example where it
39:26 - would work for the free code camp skill
39:28 - that would be ideal that would be great
39:30 - so
39:32 - i am going to get back to it here
39:34 - because we are
39:36 - about 40 40 minutes in and i want to try
39:39 - to make up
39:40 - [Music]
39:41 - get as far as we can i was hoping to get
39:43 - to actually making a request to a remote
39:46 - uh api today so that that's my goal
39:49 - let's see if we can do it
39:51 - um so now uh i'm gonna focus on just
39:54 - this this first intent
39:57 - here which is the um
40:00 - we'll call it like the
40:02 - uh median
40:03 - intent so when somebody is going to
40:06 - request what articles recent articles uh
40:10 - or we'll call it the recent articles
40:11 - intent
40:12 - so right now we've got this hello
40:16 - world handler and um
40:18 - i'm gonna just i'll just copy this
40:21 - show you
40:23 - and paste
40:24 - example
40:26 - here and i'm going to call this one
40:31 - recent
40:38 - called the recent articles intent
40:41 - and
40:42 - so here what i what i need to do is i
40:44 - need to look for
40:45 - the
40:47 - in the json what the intent name is so
40:51 - if you recall from yesterday when we're
40:54 - testing
40:55 - i'm going to go in here just to recap
40:57 - this because
40:59 - i think it's important for understanding
41:02 - what's happening in the code
41:04 - so when we test here and
41:18 - so this is the request that the alexa
41:20 - service sent to our skill service
41:24 - and if you look at the json you'll see
41:28 - that
41:30 - in the json there is a
41:35 - uh request type
41:39 - and this is session ended request
41:43 - and so this is a launch request you know
41:46 - because the session ended from
41:47 - previously and that's why we're getting
41:48 - this here if we
41:51 - want to uh to to map this
41:54 - to something that the user says
41:56 - we need to update our model so that the
41:59 - alexa service knows that the user is
42:01 - asking for a different intent and that's
42:04 - what we're going to do right now so now
42:06 - we have our i'm going to call our new
42:09 - intent
42:11 - um
42:16 - i'm going to call this a handler
42:17 - actually
42:22 - and
42:23 - we'll just
42:24 - call our intent
42:27 - recent articles intent
42:29 - and
42:30 - so that's what we're going to name it
42:33 - and
42:34 - we'll stub it out for right now
42:42 - [Music]
42:51 - and
42:53 - [Music]
43:01 - and here
43:03 - in the card
43:05 - i'll just have the title say articles
43:07 - for right now
43:09 - okay so now what we need to do is we
43:11 - need to map what the user says to
43:14 - this intent and the way that we're going
43:17 - to do that
43:18 - is in our model
43:21 - and so in our model here we're going to
43:24 - you can see this hello world intent
43:28 - we're going to create a new intent
43:31 - and we're going to call it
43:40 - are
43:41 - we what did we just call this
43:44 - my memory is going back like
43:46 - two seconds uh recent articles
43:53 - [Music]
43:55 - so the recent articles intent and then
43:57 - we need some samples of what a user
43:59 - might say that would allow us to
44:01 - identify that they want the
44:04 - the recent article's intent and we can
44:07 - look at our dialogue over here to see
44:10 - um i can tell you about media articles
44:14 - um
44:15 - so maybe they say what's been posted on
44:18 - medium
44:19 - start with
44:20 - the one that we used for our example
44:27 - uh
44:29 - and then we want we want to provide a
44:31 - few examples so the the um the machine
44:34 - learning engine that is
44:36 - underpinning alexa is going to learn
44:39 - from these examples so that you don't
44:41 - have to come up with like every possible
44:42 - thing that a user might say but you need
44:45 - to provide enough examples so that the
44:48 - the alexa service can infer when a user
44:50 - says something that's not
44:52 - provided explicitly in the example so
44:54 - maybe
44:55 - uh what's been posted on medium
45:00 - we'll say
45:01 - any new
45:03 - medium posts
45:05 - and
45:12 - i don't know um
45:15 - just how about just
45:19 - medium posts
45:23 - and then of course we'll test it to make
45:25 - sure this works but
45:28 - that is going to i think do it for the
45:32 - model let me just go back here to make
45:34 - sure we've got everything in here oh one
45:36 - other thing that i didn't do is you've
45:37 - got to register the um the intent
45:40 - handler also
45:41 - so
45:43 - down here
45:46 - this ad request handlers you've got to
45:49 - for the sdk you've got to include the
45:51 - well that's not the one
45:54 - new article
45:58 - not a new article oh my gosh
46:02 - what did i just call that
46:06 - recent articles
46:08 - all right
46:14 - okay
46:16 - so
46:16 - now
46:18 - i think we have everything that we need
46:19 - let's um let's give it a try so now
46:21 - we're gonna ask deploy again
46:25 - and
46:26 - if uh if i haven't missed anything
46:34 - we should be able to uh to go test this
46:37 - out what are we doing on time 146.
46:45 - not sure if we'll get to pulling it from
46:48 - median actually i think we will still
46:50 - got 15 minutes that's plenty of time
47:12 - okay you see here this response back you
47:14 - can actually test from the uh the
47:17 - cli also
47:19 - uh i'm not going to do that right now
47:20 - because i want to spend a little bit of
47:21 - time in that time on that later but
47:24 - let's just try try with alexa here so
47:29 - let's see what happens
47:33 - alexa open free code camp
47:36 - hello welcome to the free code camp
47:39 - skill i can tell you about recent medium
47:41 - articles or scheduled live streams what
47:44 - would like
47:46 - media articles
47:48 - witnesses don't i'll read back recent
47:50 - articles
47:53 - okay so
47:54 - that
47:56 - seems to have worked um i think i had a
47:59 - typo in the
48:02 - dialogue i heard
48:04 - which
48:05 - uh it's not a big deal but i'll fix it
48:07 - hello welcome to the free code camp
48:09 - skill i can tell you about
48:12 - recent media articles
48:15 - probably probably need to come there or
48:17 - schedule live streams
48:19 - what would you like all right
48:22 - um
48:24 - okay so now uh it's it's doing what it's
48:27 - supposed to do
48:28 - actually let me show you one more thing
48:30 - alexa open free code camp
48:33 - hello welcome to the free code camp
48:36 - skill i can tell you about recent medium
48:38 - articles or scheduled live streams what
48:41 - would like
48:43 - live streams
48:45 - when this is done i'll read back recent
48:47 - articles okay
48:49 - so um what's happening right now is i
48:51 - don't have enough uh examples to um
48:54 - where alexa knows what to do with that
48:57 - so that isn't what we want right we
48:59 - don't want when somebody says live
49:01 - streams we don't want alexa to just uh
49:04 - dump them to
49:06 - whatever seems to make sense based on
49:08 - the examples so what we would want to do
49:10 - is we would want to create
49:12 - another handler for live streams and
49:15 - then also update our model which
49:17 - actually we're gonna do that right now
49:22 - i'm gonna just change this
49:27 - [Music]
49:35 - okay so now we've got this
49:38 - and remember we've got to register it so
49:41 - i'm going to
49:43 - get rid of the hello world
49:46 - and
49:48 - uh let's see
50:05 - so i'm going through the exact same
50:07 - steps here that we just went through
50:10 - and
50:11 - stubbing out um
50:14 - [Music]
50:20 - and
50:22 - we'll stub this out too
50:28 - okay
50:30 - and what else do i need to do anybody
50:32 - know
50:35 - anybody in commons we need to update our
50:37 - model
50:39 - uh
50:40 - let's see
50:41 - i'm just going to
50:43 - change this
50:44 - to recent articles intent
50:46 - and i'll say like
50:49 - articles
50:58 - oh wait not
51:01 - uh streams
51:02 - live streams
51:06 - [Music]
51:12 - [Music]
51:20 - live streams
51:24 - tell me the scheduled
51:28 - live streams
51:35 - and i think i
51:36 - messed something up in here live streams
51:38 - intent handler
51:40 - this
51:42 - should be
51:43 - live streams
51:44 - so
51:45 - this will be for live streams live
51:46 - streams okay let's um let's test this
51:49 - out so
51:51 - let me just double check i think this is
51:52 - all good so again we're going to
51:56 - deploy
51:57 - and
51:57 - [Music]
52:00 - while this is deploying let's um let's
52:02 - take a look at
52:04 - how we're going to try to get the median
52:05 - feed in here so um
52:08 - [Music]
52:12 - i'm gonna turn off
52:14 - okay so uh i'm going to i uh if you go
52:19 - to median
52:21 - [Music]
52:23 - okay
52:26 - [Music]
52:28 - i see
52:30 - okay sorry i forgot to switch screens
52:33 - there i think that's what karthik is
52:34 - trying to let me uh let me know
52:37 - okay um
52:38 - so uh
52:40 - let's take a look at um the
52:43 - median
52:45 - [Music]
52:47 - so on medium
52:50 - yeah i did forget to switch back sorry
52:52 - about that guys
52:54 - um my brain is challenged with like one
52:57 - operation at a time
52:59 - so bear with me uh
53:02 - let's see
53:03 - uh so i think it's free code camp right
53:06 - camp.median well
53:09 - [Music]
53:11 - yeah medium.free codecamp
53:14 - okay
53:17 - uh
53:18 - so i was um i was looking through so
53:21 - there is a a an api for or an sdk
53:26 - for medium and
53:29 - but it requires authentication which i
53:31 - didn't have for free code camp so
53:35 - what i am gonna do to make this work is
53:38 - there
53:39 - is another
53:40 - node module that i found that pulls the
53:43 - rss feed and then converts it to
53:46 - a
53:47 - adjacent feed and i tested it like five
53:50 - minutes before this live stream so let
53:53 - me show you my test
53:55 - and then we're going to incorporate this
53:57 - into here
53:58 - we've got six minutes to do it right
54:01 - so this is
54:05 - get medium post
54:07 - this is the
54:09 - this is the example that i did earlier
54:11 - let me
54:13 - show you what uh what's gonna happen
54:17 - so um
54:57 - in the wrong folder here
55:02 - [Music]
55:06 - okay
55:08 - so
55:09 - what um what this is doing is returning
55:13 - back a
55:14 - a list of the
55:17 - latest posts and we're going to use that
55:19 - to try to read back the um
55:23 - read back the titles of the post and
55:25 - there's
55:26 - there's more work we're going to need to
55:27 - do tomorrow because this is probably
55:30 - too many to just uh read back to the
55:32 - user but we'll figure that out tomorrow
55:34 - for right now let's just
55:35 - let's go back in here and see what we
55:38 - would do to change that
55:40 - or to to wire this up rather
55:43 - so in here the first thing we need is to
55:49 - include the
55:52 - medium
55:54 - jason feed
55:56 - [Music]
55:58 - and
56:01 - let's save that
56:16 - oops
56:17 - forgot install
56:25 - okay so i'm installing that node module
56:29 - here and then i'm going to
56:33 - just
56:34 - take this
56:38 - stuff here
56:39 - and go into my skill
56:43 - and um
56:46 - i am going to use let's see
56:50 - where is our
56:53 - articles handler here so i'm going to
56:55 - use a
56:56 - a feature of um
57:00 - javascript a newer feature so um
57:02 - lambda supports
57:04 - javascript 8.10 i think is the latest
57:07 - one and so i can use async and await
57:10 - and um uh the
57:12 - the details about that there's plenty of
57:14 - courses on
57:16 - free code camp that can get into that
57:18 - more detail so i'm not going to go in
57:19 - that
57:20 - here right now just because we got just
57:22 - a few minutes but i'm going to do like
57:28 - async
57:29 - and
57:30 - something like this
57:34 - we'll try
57:38 - uh
57:44 - if i run out of
57:47 - time here
57:53 - let's see
57:57 - and then here
57:58 - i'm going to
58:02 - set this to just one article for right
58:05 - now see if i can do that
58:12 - i'll just do the first one for right now
58:14 - and i think it's the title
58:20 - and
58:27 - if i've messed something up then i'm
58:30 - gonna just right now say
58:43 - okay
58:45 - [Music]
58:47 - so here's um here's what's happening i
58:50 - think
58:52 - if i haven't
58:57 - if i haven't missed anything
59:05 - now what should happen is we
59:08 - should
59:09 - go out and fetch the feed
59:12 - of the
59:13 - latest articles
59:15 - and then um we're going to
59:18 - take the most recent i don't need this
59:22 - we're going to take the um the the first
59:24 - item in that feed and grab the title and
59:27 - write that to our speech text so this
59:29 - this should if it works it should
59:31 - write back the um or it should play
59:34 - speak back rather the
59:37 - um
59:39 - the title of the very first article so
59:40 - let's let's uh let's give it a try
59:44 - so ask
59:45 - [Music]
59:47 - actually let me get over here
59:52 - ask deploy
59:55 - and then there's also switches that you
59:56 - can use and there's one uh t
60:00 - so i'm what i'm going to do
60:03 - for this is i'm just deploying the
60:05 - lambda function so
60:06 - dash t is for target lambda and this
60:09 - will deploy a lot faster i haven't
60:11 - changed the interaction model
60:13 - or anything
60:17 - of course
60:18 - that was the error that i said comes up
60:20 - all the time and i just did it
60:27 - okay
60:31 - okay so now if the
60:35 - demo gods or live stream coding gods are
60:37 - with us this will work um
60:40 - alexa open free code camp
60:44 - hello welcome to the free code camp
60:46 - skill i can tell you about recent medium
60:48 - articles or scheduled live streams what
60:51 - would like
60:54 - recent media articles
61:00 - sorry i can't understand the command
61:02 - please say again
61:04 - media articles
61:08 - sorry i can't understand the command
61:10 - please say again
61:12 - okay we're gonna finish this up tomorrow
61:15 - alexa stop
61:17 - so
61:18 - we're gonna we're gonna call it a day
61:21 - there i know i didn't get a chance to
61:23 - look at all of the questions but we'll
61:25 - be picking up from here tomorrow so
61:27 - hopefully um
61:29 - i will see all of you back if you have
61:32 - any ideas between today and
61:35 - tomorrow on what we can do for this uh
61:38 - free code camp skill if you um
61:41 - if you
61:42 - provide some good ideas we'll make sure
61:44 - that you get credit for your ideas and
61:45 - uh make you part of the uh the the repo
61:49 - of the github repo so i'm looking for
61:53 - contribution i'd really like to see this
61:55 - actually get used and deployed but um
61:58 - needs to be more than a demo to do that
62:00 - so any help would be appreciated so
62:02 - that's it for today guys i didn't quite
62:05 - get to uh to get the feed working but i
62:08 - will pick that up tomorrow at 1 0 1 p.m
62:12 - eastern so same time and we'll
62:15 - continue on from there so again i hope
62:16 - to see everybody back i'm going to
62:21 - wrap it up for now thanks so much for uh
62:24 - for attending and hope to see you back
62:26 - tomorrow
64:45 - you

Cleaned transcript:

hey welcome to day two of building an alexa skill the the live stream so for anybody that was here alexa's gonna start talking back to me here and let me shut her off uh for anybody that was on yesterday welcome back for anybody that's new uh welcome glad to have you i'm going to start today we're going to just jump right in i'm going to start with a recap quickly of what we did yesterday and then i'm going to get into uh the topics for today and we'll we'll start with a quick introduction to the alexa skills kit cli and then we will talk about the alexa skills kit sdk 2.0 a little bit and then we will jump into building our project which i've got some ideas on and i'm hoping to get some feedback from all of you on uh the the direction for it so this will hopefully be an opportunity to uh to work together to to build our skills so it's not completely scripted i didn't want this to just be a a live cast of an alexa development course i did one of those so if that's what you're looking for you can just check that out on free code camp but yesterday what we discussed is the the things that you'll need to start developing alexa skills and really it's two things you need two different accounts you need an amazon developer account which you can get a developer.amazon.com and you need an aw essay account and then we also talked yesterday about the uh the basics of how a skill works and uh uh covered that you know basically it's uh it's jason that's being passed back and forth between the alexa service and the skill service which is uh the back end that processes the requests and responds to what users are asking for and then we dove in a little bit into the developer portal and looked at setting up a basic skill and talked a little bit about uh aws lambda and how that works and then we we built a really super simple skill that was just returning jason and i kind of fumbled around on that which is a good leadin i suppose to our topic today which is using the the sdk it makes life a whole lot simpler and that's what we're going to talk about but as i um as i jump into it i have an idea that i wanted to put out there for everybody so um i'm thinking that maybe we uh for the example skill that we're going to be building maybe we we actually build a live skill and i um talked to the the guys at uh free code camp and and checked out the uh the alexa skill score store and didn't see a skill for uh free code camp so i thought maybe we could try to build a skill for free code camp but i would definitely need uh all of your help and uh it's a little bit risky because i'll be very much going off script but if um if you guys are up for it i will give it a try and we've got a few other people from my team here online that are in the uh the live chat that will be able to answer questions and stuff yeah i can i'll make the font bigger here for see that that question there let me see hopefully that's a little bit better we've got a couple of people online that can help out with um any questions so if you have questions just please go ahead and post those in the the live chat and i'll be looking at those as i'm going through this and then um karthik who is in the live chat also um karthik if you're on maybe you could just like post hi he is um he's available to uh to answer questions in the chat also um and ken uh and our peta i think they're all online so they can answer questions so please go ahead and ask any questions that you have as um as we're going and i'll um i'll pause from time to time to look at the the questions and try to answer them is as best that i can uh so let's um yeah let's get into it so uh today we are going to um so i got rid of everything from yesterday we just did an overview and we're gonna start fresh today and we're gonna start fresh using the uh the alexa skills kit cli and if you are i'm not gonna install that and everything in uh in this live cast but it's basically a command line tool that you can use to build skill projects and deploy skill projects and if you uh if you google ask cli there is a um a quick start guide and there's a couple tutorials that i did a while back actually down here too and if uh that if you're just getting the cli installed and configured that you can follow um and if you go to the the dabble lab youtube channel there is i think these ones that pop up these are kind of old so you go to youtube.com lab and there's some newer tutorials or skilltemplates.com actually has a tutorial also uh for getting the the uh alexa skills kit cli installed in the prerequisites um what you'll need is uh you'll need to have nodejs installed uh you can install this on it is just an npm package so you can install it on windows linux or mac i'm working on a mac for all these but the commands all work the same and um you will after you've installed it you'll configure it you'll initialize it to work with your accounts that we we looked at setting up yesterday so your aws account and your um amazon developer account and it's pretty straightforward the uh the install process um so again i'm not gonna go through it but if you uh have any issues you can look at the tutorials that are on the dab lab channel and leave any comments there and we can help you through it if you run into anything okay yeah so a tharva also from dabble lab is on that's great thanks for having on darva um okay the the fonts better uh okay awesome all right well let's uh let's get into it so um like i said i'm gonna try to build a skill for uh free code camp and i want to just so this is going to be you know a real real live demo of how the process works but what we generally start with is is going through the the high level what we want the skill to do so i'm going to do that with everybody and um we'll start with free code camp that's what we're going to call the skill for right now the name and i usually start by defining how the skill will be launched so launch phrases and in the the alexa world when you're launching a skill we talked yesterday about the invocation names so we're going to use for our example school we're going to use free code camp as the invocation name so we would say minimally something like alexa open free code camp but we also might provide a directive or an utterance something like alexa ask free code camp camp um what articles if i could type articles are published on medium and that was one of the things that they said they'd like to see is a way for users to ask alexa about articles that are published on the the free code camp medium channel and uh maybe we'll also have something like alexa um at ask free code camp camp i don't know any uh any thoughts on what we can do um what would you uh i need some uh need some feedback from you guys here what do you think we should be uh we should be doing how should this skill work everybody is part of the uh the the project team now so let's uh let's put some ideas out there post them in the uh in the chat let's hear what you got come on something uh recode camp uh ask free code camp um what live streams are scheduled i don't know if we can do that but we'll put it in here ah that's a good one karthik alexa ask free code cam what programming languages are popular what else anything else uh what's in your curriculum uh what what are the last few videos published that's a good one we can get that from the youtube ati api i think okay um we can be out we can be adding to this i'm gonna leave it at that for right now but if anybody thinks of anything else let's put it on here minimally it'll just go on our wish list for future functionality but um we'll uh we'll start with this so this is when we're planning a project generally where it starts we just think about how the user might interact with the the skill from the very beginning in the very beginning is launching the skill and so we just brainstormed some ideas like this and then um the next thing we do is we do a uh like a really simple interaction example and the way that we write it out is something like this we would say like the user would say let's see we'll start with the the simplest one so alex open free code camp and then alexa is going to respond with um something like hello yeah we do need a multiturn dialogue too so uh somebody that was uh your idea then kinda i'm sure i'm killing your name but um come up with a an idea for a multiturn dialogue i think uh i think you're right we want to try to get that in here so what do you got come up with something that uh that we can use go out to freecodecamp.org and uh poke through the site if you got a second and uh come up with something that you think we uh can use as an example again this is uh we're all working together on this this project so um alexa's gonna respond with uh hello um welcome to the free code camp skill and um i can tell you about articles about recent medium particles or scheduled live streams and i'm making this up as i go so if anybody has a better uh a better idea then please post it and we'll uh we'll update this and we can change it as we go too so and then the uh we'll ask a question we'll prompt the user um what would you like something like this and then the user will say um what's been posted on medium and then alexa will say something like here are the most recent 5 posts and we don't want to have a list of like everything that's been posted obviously because the user would be just sitting there for hours and maybe if we wanted to get fancy we could let the user say tell me the the next five posts or something like that but for right now we'll keep it simple and um and then alexa will like play the posts here so something like that and i'm gonna just start with this here because this is probably going to um get us to where i was hoping to get to today for day two so today we did the recap and the um we're going to do the intro to the ask cli while we're actually building some functionality and the same with the the ask sdk2 so uh the the other thing that i wanted to cover today is getting data from an external api so that will let us do that i think with that example and we're going to use the um i found a npm module that will let us call out to median so we'll uh i haven't used it before but i think that will um that will cover us for today so uh the ask cli i think i touched on this really quickly yesterday i did this example skill i'm gonna just delete this start all over and create so in here the ask cli like i mentioned is a command line tool and it lets you create skill projects which are local projects and in case anybody is not familiar with the ide that i'm using right now i mentioned this yesterday but for anybody that's uh that's just coming on this is visual studio code it's an open source editor similar to like um atom which is another one so you can get this for free for windows linux or mac and that's what i'm using so it's got an integrated terminal so i'm running the command line ask new here and then the alexa skills kit cli prompts me for a name and we're going to call this free code camp camp alexa skill and when i do that um this the cli creates a folder and i'm going to walk through what's in the folder right now and just kind of give you a high level tour of the the stuff that we're going to be starting with so i mentioned yesterday that this is going to be sort of boilerplate code that you can start working with and what's what the cli is doing is it's actually going out to a github repository and pulling down sample code so in addition to using um the basic basic template that is included you can also do something like this before i go in there you can go like ask new template and when you do that the cli will prompt you or provide you with a list of templates that amazon provides and i would um if you're getting into this i would uh definitely recommend like downloading these templates and taking a look at it's a really great way to get familiar with uh the code and most of them are updated now with the i think they're all updated actually now with the latest uh sdk so the uh the code is pretty current uh we're gonna start from scratch and uh just use the the basic one but the other option you can scroll down there's there's a bunch of templates in here so lots of lots of stuff to dig into uh to uh to get familiar with some some code examples we also have uh i'll i'll pick like um how to just to show you what happens so there's the howto and then um we've also set up ask new template you can also create your own templates and we've got some that we use at dabolab at skill templates slash templates dot json and uh these these mostly go with tutorials that um i've done on youtube uh so they're not all updated with the latest sdk but there is a basic starter and a api starter there that are updated so i'll start with like the api starter just so you can see that so now i've just gone through creating three different skill templates so um i did that just to walk through uh the getting the uh the ask cli to give you a starting point so three uh three different options the um the default one here is what we're going to be working with but i'll reference code in these ones which is part of the the benefit of having the templates is you can go back and look at code patterns that you used previously and copy and paste those to save your uh save you from having to to type everything out but in the in each one of the skill project folders i'm going to move into the folder there's there's a dot ask folder a lambda folder a models folder and then a skill.json file and in the ask folder is configuration information for the ask cli and when you start with a brand new template the the main thing is the uri here the the value of the uri here for the endpoint this is going to define the name of your lambda function so when you publish the skill it is going to create the lambda function for you out in the aws amazon web services and and this is where you can change the name if you wanted it starts with a default name that works fine the lambda folder is going to contain a subfolder called custom by default and then within the custom folder is actually the source code for your lambda function and you'll have your node modules in there the sdk automatically includes the um the the cli rather automatically includes the uh alexa skills kit sdk and the the sdk just makes creating the responses more than anything else makes creating the responses and consuming the requests from alexa a lot easier so rather than you having to write the code endtoend to to do that yourself the skills kit is going to handle most of the heavy lifting for you the sdk is and this uh this index file is uh by default where the where the lambda function code is going to to start i got a question yesterday about whether or not most of the examples you'll see all of the code is in the functions and everything are just in one file this index file doesn't need to be like that and the answer is no you can use node modules and you can create custom modules and you can do you know all of the stuff that you could do uh in in node if if you're familiar with that if uh if not or if you want to keep it simple you can also just put it all in in one file i think probably for our example we'll break it up a little bit just to show some examples of using node modules uh so um we'll we'll get we'll go a little bit beyond just keeping it super simple but in here um what you what you really want to take note of is uh these uh functions here or actually these these objects with uh functions and specifically they can't handle and handle so um this is new to the 2.0 sdk but the uh the can handle function here it's going to be so the the json the request input gets passed in here and it's going to look at the request to determine what the request type is and there's um an intent request which is when i talked yesterday about the interaction model i said that the intense kind of map to functionality that the skill is going to provide the intent that we define in the model if it's a user defined or a custom intent or actually if it's a builtin intent there's going to be a name for the intent and so we first look to see if it is an intent request versus like a a request for just launching the skill for the first time which is here's an example that a launch request so in this code here when the the user says alexa open whatever the skill name is in this case here the response is going to be welcome to the alexa skills kit you can say hello and when the user says hello which is a segue into the models which i'll get to in a second the skill service this one anyway says uh hello world back so it's a really simple starting point and handle some of the required intents like when a user says stop or cancel and so we'll use this as is our starting point also the model when we yesterday when we went through and we looked at setting up the interaction model through the developer council we talked about the the model being just json this is that model also so we can define all of that in here and what you'll see today is that we'll be able to do everything from our local ide without ever having to go into uh the the web browser and log into developer.amazon.com i will do that i'll log in just to show you the the updates but when you're working on your um your your development flow you probably won't be logging into the developer council all that much the cli doesn't just let you deploy the the skills and and update the skills but you can also test from the cli too which we'll get into probably not today but uh maybe tomorrow or uh the following day thursday and then the last thing on our tour through the skill project is the uh the the manifest file and the manifest file is um is gonna define settings and mostly configuration information that you would find in the developer console so uh when you log in there and you create for example like a name for the skill that is this here and i'm going to change this right now we're going to just call this skill free code camp and then we'll want a description for the skill and anybody who wants to join in on this i'll push this out to github somewhere too so if anybody wants to help and uh collaborate but if somebody wants to take that as an action item and come up with like a cool description for this anybody volunteering yeah i'll break it into some small files with multiuh turn dialogues did you come up with the dialogue did you come up with the example just looking at uh it comments what's the difference between angular and react oh probably outside the scope of this uh this stream here we're not going to be using angular or react with this one okay um so so if somebody could take either you know somebody on the the dab a lab team or preferably somebody else that is uh is out uh watching this that wants to uh wants to get involved and come up with a description for us we're gonna also in the model we're gonna change the invocation name and the invocation name remember from yesterday is uh the name that the user is going to use to start the skill up invoke it and we're going to call this free free code cam so at this point um all i changed was just the name and the invocation name but let's um let's go ahead and deploy it and to deploy the skill you need to do that you know what i'm also going to change this uh actually i'm going to leave that that's fine um so you need to be in the folder in the project folder to run this next command so one of the questions there are the issues that i see on the in the tutorials on youtube is uh if you try to run the command actually let me do that so you can see this so like right now i'm i'm just in let's go here so now i'm just in the uh the root folder called uh free code camp live stream and if i try to run this command here i'm gonna get an error can't find skill.json and that's because you've got to run that command from the project folder that you're working in so if i did oops okay i've alexa skill so um yeah so if i did this now i can go ask deploy and when i do that now the ask cli is pushing the skill out to the developer council for me and um it will once that's done it will start building the interaction model and then it will publish the um the lambda function for us also so while that's happening let's go over here and take a look so i mentioned earlier that i cleared everything out from yesterday so now it's probably already deployed this so i'm refreshing and there this now is what the skills kit cli deployed for us from the command line what's a multiturn dialogue a multiturn dialogue um is a dialogue that is going to request more information so there's a back and forth something like uh if a user if you had an intent for example where a user was going to order a pizza you might need to know what size pizza they want what toppings they want and so the it's going to be multiturn means you're going to get a response from alexa that's going to prompt you for response back and then maybe a response back again so rather than it just being uh something simple like what are the top median posts it might be something like um you know what maybe the alexa would ask what programming language uh are you interested in and the user might say i don't know what one would you suggest and the skill might say well how many uh um how many years of experience do you have in tech i don't know something like that but it would go back and forth before the intent was fulfilled and the the final response was um was sent back to the user so hopefully that makes sense um all right so the uh the so we've got our our base skill here now let's um let's go in and test it so i mentioned yesterday that if you set up your alexa developer account using the same email that you use if you've got an echo then you can you can test using your echo and so i've got let me show you this okay so we're going to test this now alexa open free code camp welcome to the alexa skills kit you can say hello okay so you see on the screen there's also a response here because i'm using an echo show actually that will if you're using an echo that doesn't have a screen that what's showing on the screen will also pop up in the the companion app so if you've got like an ios or an android device with an echo you can use uh cards and responses to post text stuff back you can also actually i know a lot of people use this but if you all right hello um you can also go to alexa.amazon.com and log in with your account to see this as well let's see sorry showing the wrong screen while i was doing that so you can log into alexa.amazon.com as well and you can see um we're getting our card response back there so um yeah so what what's going on here like i mentioned earlier is in this this default skill we're getting the the launch request which is coming in here and it's saying welcome to the alexa skills kit you can say hello we're going to change this to our oops wait a second we have that in here don't we dialogue we're going to change this to this here and and we're going to change the and change the the reprompt here and i think we'll just do what will we say so the repromp happens if the user doesn't respond after eight seconds so that right now uh this change here when the user launches the skill it'll say hello welcome to the free code camp skill i can tell you about uh recent media articles or scheduled live streams what would you like and if the user doesn't respond we'll just say um would what would you like all right and the uh this is the card that showed up on the screen and we'll just call this free code camp right now and um so this this hello world intent handler so this is so right now if we look at what we've got and we break that into what the user wants we've got um two different possible intents right so we've got uh if you look in here the user could either want recent median articles or they could want uh scheduled live streams right so the intent is going to map to the functionality in most cases that the skill is going to provide does that make sense yeah the toys toys are mine just i'm gonna take one uh one second here to read through some of the uh the the questions and comments and then i'm going to talk about how you would create these additional intents but let me just make sure we're covered up to this point yeah i think that multiturn example works we could use something like that try to um if you if you can uh try to uh try to turn that into something that would make sense for the um the free code camp skill so i don't just want to if if we can avoid it i don't just want to do like a a hello world skill i'd love for the next few days to end up with something productive coming out of it other than just having a chance to uh to work through some of these examples together but i've got tutorials where you can go through that i'd love to work with everybody to actually create a live skill i think that would be fun so if you've got um if you've got some things that you want to see if you can somehow come up with an example where it would work for the free code camp skill that would be ideal that would be great so i am going to get back to it here because we are about 40 40 minutes in and i want to try to make up get as far as we can i was hoping to get to actually making a request to a remote uh api today so that that's my goal let's see if we can do it um so now uh i'm gonna focus on just this this first intent here which is the um we'll call it like the uh median intent so when somebody is going to request what articles recent articles uh or we'll call it the recent articles intent so right now we've got this hello world handler and um i'm gonna just i'll just copy this show you and paste example here and i'm going to call this one recent called the recent articles intent and so here what i what i need to do is i need to look for the in the json what the intent name is so if you recall from yesterday when we're testing i'm going to go in here just to recap this because i think it's important for understanding what's happening in the code so when we test here and so this is the request that the alexa service sent to our skill service and if you look at the json you'll see that in the json there is a uh request type and this is session ended request and so this is a launch request you know because the session ended from previously and that's why we're getting this here if we want to uh to to map this to something that the user says we need to update our model so that the alexa service knows that the user is asking for a different intent and that's what we're going to do right now so now we have our i'm going to call our new intent um i'm going to call this a handler actually and we'll just call our intent recent articles intent and so that's what we're going to name it and we'll stub it out for right now and and here in the card i'll just have the title say articles for right now okay so now what we need to do is we need to map what the user says to this intent and the way that we're going to do that is in our model and so in our model here we're going to you can see this hello world intent we're going to create a new intent and we're going to call it are we what did we just call this my memory is going back like two seconds uh recent articles so the recent articles intent and then we need some samples of what a user might say that would allow us to identify that they want the the recent article's intent and we can look at our dialogue over here to see um i can tell you about media articles um so maybe they say what's been posted on medium start with the one that we used for our example uh and then we want we want to provide a few examples so the the um the machine learning engine that is underpinning alexa is going to learn from these examples so that you don't have to come up with like every possible thing that a user might say but you need to provide enough examples so that the the alexa service can infer when a user says something that's not provided explicitly in the example so maybe uh what's been posted on medium we'll say any new medium posts and i don't know um just how about just medium posts and then of course we'll test it to make sure this works but that is going to i think do it for the model let me just go back here to make sure we've got everything in here oh one other thing that i didn't do is you've got to register the um the intent handler also so down here this ad request handlers you've got to for the sdk you've got to include the well that's not the one new article not a new article oh my gosh what did i just call that recent articles all right okay so now i think we have everything that we need let's um let's give it a try so now we're gonna ask deploy again and if uh if i haven't missed anything we should be able to uh to go test this out what are we doing on time 146. not sure if we'll get to pulling it from median actually i think we will still got 15 minutes that's plenty of time okay you see here this response back you can actually test from the uh the cli also uh i'm not going to do that right now because i want to spend a little bit of time in that time on that later but let's just try try with alexa here so let's see what happens alexa open free code camp hello welcome to the free code camp skill i can tell you about recent medium articles or scheduled live streams what would like media articles witnesses don't i'll read back recent articles okay so that seems to have worked um i think i had a typo in the dialogue i heard which uh it's not a big deal but i'll fix it hello welcome to the free code camp skill i can tell you about recent media articles probably probably need to come there or schedule live streams what would you like all right um okay so now uh it's it's doing what it's supposed to do actually let me show you one more thing alexa open free code camp hello welcome to the free code camp skill i can tell you about recent medium articles or scheduled live streams what would like live streams when this is done i'll read back recent articles okay so um what's happening right now is i don't have enough uh examples to um where alexa knows what to do with that so that isn't what we want right we don't want when somebody says live streams we don't want alexa to just uh dump them to whatever seems to make sense based on the examples so what we would want to do is we would want to create another handler for live streams and then also update our model which actually we're gonna do that right now i'm gonna just change this okay so now we've got this and remember we've got to register it so i'm going to get rid of the hello world and uh let's see so i'm going through the exact same steps here that we just went through and stubbing out um and we'll stub this out too okay and what else do i need to do anybody know anybody in commons we need to update our model uh let's see i'm just going to change this to recent articles intent and i'll say like articles oh wait not uh streams live streams live streams tell me the scheduled live streams and i think i messed something up in here live streams intent handler this should be live streams so this will be for live streams live streams okay let's um let's test this out so let me just double check i think this is all good so again we're going to deploy and while this is deploying let's um let's take a look at how we're going to try to get the median feed in here so um i'm gonna turn off okay so uh i'm going to i uh if you go to median okay i see okay sorry i forgot to switch screens there i think that's what karthik is trying to let me uh let me know okay um so uh let's take a look at um the median so on medium yeah i did forget to switch back sorry about that guys um my brain is challenged with like one operation at a time so bear with me uh let's see uh so i think it's free code camp right camp.median well yeah medium.free codecamp okay uh so i was um i was looking through so there is a a an api for or an sdk for medium and but it requires authentication which i didn't have for free code camp so what i am gonna do to make this work is there is another node module that i found that pulls the rss feed and then converts it to a adjacent feed and i tested it like five minutes before this live stream so let me show you my test and then we're going to incorporate this into here we've got six minutes to do it right so this is get medium post this is the this is the example that i did earlier let me show you what uh what's gonna happen so um in the wrong folder here okay so what um what this is doing is returning back a a list of the latest posts and we're going to use that to try to read back the um read back the titles of the post and there's there's more work we're going to need to do tomorrow because this is probably too many to just uh read back to the user but we'll figure that out tomorrow for right now let's just let's go back in here and see what we would do to change that or to to wire this up rather so in here the first thing we need is to include the medium jason feed and let's save that oops forgot install okay so i'm installing that node module here and then i'm going to just take this stuff here and go into my skill and um i am going to use let's see where is our articles handler here so i'm going to use a a feature of um javascript a newer feature so um lambda supports javascript 8.10 i think is the latest one and so i can use async and await and um uh the the details about that there's plenty of courses on free code camp that can get into that more detail so i'm not going to go in that here right now just because we got just a few minutes but i'm going to do like async and something like this we'll try uh if i run out of time here let's see and then here i'm going to set this to just one article for right now see if i can do that i'll just do the first one for right now and i think it's the title and if i've messed something up then i'm gonna just right now say okay so here's um here's what's happening i think if i haven't if i haven't missed anything now what should happen is we should go out and fetch the feed of the latest articles and then um we're going to take the most recent i don't need this we're going to take the um the the first item in that feed and grab the title and write that to our speech text so this this should if it works it should write back the um or it should play speak back rather the um the title of the very first article so let's let's uh let's give it a try so ask actually let me get over here ask deploy and then there's also switches that you can use and there's one uh t so i'm what i'm going to do for this is i'm just deploying the lambda function so dash t is for target lambda and this will deploy a lot faster i haven't changed the interaction model or anything of course that was the error that i said comes up all the time and i just did it okay okay so now if the demo gods or live stream coding gods are with us this will work um alexa open free code camp hello welcome to the free code camp skill i can tell you about recent medium articles or scheduled live streams what would like recent media articles sorry i can't understand the command please say again media articles sorry i can't understand the command please say again okay we're gonna finish this up tomorrow alexa stop so we're gonna we're gonna call it a day there i know i didn't get a chance to look at all of the questions but we'll be picking up from here tomorrow so hopefully um i will see all of you back if you have any ideas between today and tomorrow on what we can do for this uh free code camp skill if you um if you provide some good ideas we'll make sure that you get credit for your ideas and uh make you part of the uh the the repo of the github repo so i'm looking for contribution i'd really like to see this actually get used and deployed but um needs to be more than a demo to do that so any help would be appreciated so that's it for today guys i didn't quite get to uh to get the feed working but i will pick that up tomorrow at 1 0 1 p.m eastern so same time and we'll continue on from there so again i hope to see everybody back i'm going to wrap it up for now thanks so much for uh for attending and hope to see you back tomorrow you
