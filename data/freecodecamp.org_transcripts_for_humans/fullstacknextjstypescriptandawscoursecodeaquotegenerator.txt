With timestamps:

00:00 - welcome to an exciting journey into the
00:02 - world of full staff development with
00:04 - next Cs typescript and AWS
00:07 - this course was expertly designed by
00:09 - Brian Huff who is a seasoned software
00:11 - engineer and passionate teacher he takes
00:14 - you from building a front-end with nexjs
00:17 - and typescript to creating a robust
00:19 - backend with AWS amplify and finally
00:22 - deploying your app on AWS we'll be using
00:26 - zincot's API for fetching quotes and
00:28 - Diving deep into State Management hooks
00:31 - debugging nosql database modeling and
00:34 - much more you will Master the art of
00:37 - building and deploying full stack
00:38 - applications on AWS
00:41 - how's it going everyone hello friends
00:43 - hello world and hello free code Camp my
00:46 - name is Brian huff and I'm really
00:48 - excited to be creating this video
00:50 - showing you how you can build with nexjs
00:52 - typescript and AWS to generate images
00:55 - completely serverlessly in the cloud and
00:59 - I created this project as a weekend you
01:02 - know really just see if I could build it
01:04 - because you know I've used canva I've
01:06 - used Photoshop I've used a lot of
01:07 - different you know applications to make
01:10 - images and I was thinking could I make
01:12 - these images using technology and
01:16 - programming and it turns out that you
01:17 - can so I'm really excited to show this
01:19 - application to you and show you exactly
01:22 - how we built it and we're going to be
01:23 - doing quite a lot we're going to be
01:25 - configuring a nexjs with typescript
01:28 - project we're then going to be
01:30 - configuring our own appsync graphql API
01:33 - in AWS we're then going to be using in
01:36 - Lambda function to be configuring some
01:40 - server code that's serverlessly deployed
01:42 - to the cloud and then we're also going
01:44 - to be updating a database with dynamodb
01:47 - and then we're also going to be showing
01:49 - how to connect the front end to the back
01:51 - end and then deploy our application Live
01:54 - using amplify hosting to then access our
01:58 - application from any device online so if
02:01 - you're excited to see this build then
02:03 - you are in the right spot and to give a
02:05 - little bit of context about who I am I
02:08 - have been building on the cloud for the
02:10 - past few years during the pandemic was
02:13 - when I actually got really exposed to
02:16 - AWS and what it can do because I was
02:18 - building open source technology related
02:21 - to cloud and cloud computing and this
02:24 - was for symptom tracking and that was
02:27 - really what gave me my start in cloud
02:28 - and then that really mushroomed into a
02:31 - lot of different opportunities that I
02:32 - saw because instead of you needing to
02:34 - create your own infrastructure you could
02:36 - just use serverless Technologies and
02:39 - then scale a lot of the business use
02:41 - cases that that you might want so that
02:44 - was really where I started building on
02:46 - the cloud and then I started creating
02:49 - content around that on YouTube and on
02:52 - Instagram and then that turned into what
02:55 - I created as a YouTube channel and as a
02:58 - brand and as a Dev shop called the tech
03:00 - stack Playbook so this has really been
03:03 - an exploration for me of how can I build
03:06 - technology how can I solve problems and
03:08 - how can I build cool things and that's
03:10 - what I see as programming today and as
03:13 - an AWS Community Builder on the data
03:15 - team I become really passionate about
03:18 - building these types of serverless
03:19 - infrastructures and data models and ways
03:23 - to construct technology because it is
03:27 - very empowering when you can learn how
03:28 - to build
03:29 - what you think about so take an idea and
03:32 - then turn that you know into life bring
03:34 - that to users bring that to a company
03:36 - bring that to an organization that's
03:39 - where I see programming becoming really
03:41 - powerful so I hope that this tutorial is
03:44 - really helpful and empowering for you to
03:46 - see how you can turn your ideas into
03:49 - code and then into a real application
03:51 - that you can use on any device
03:55 - so what we're creating is an
03:58 - inspirational quote generator and the
04:00 - way this is going to work is that when
04:02 - we press a button it's going to be
04:04 - calling a function in the cloud it's
04:07 - going to generate this image for us and
04:09 - then we're going to get a string of this
04:13 - image so it's not an actual file it's
04:15 - just the string that creates a file and
04:18 - then we'd be able to use that in our
04:20 - application so we could either save that
04:23 - image copy that image open it in a new
04:25 - tab or we could also download it to our
04:28 - computer and I do think that's something
04:30 - that is really cool about this type of
04:32 - project is that we're actually going to
04:34 - be able to show how this can generate
04:36 - images
04:38 - in a desktop application which you see
04:40 - but also if we wanted to get this on a
04:43 - mobile application this is what it'll
04:45 - look like so when we press it here and
04:47 - we press make a quote it's going to spin
04:51 - and then now we have this image so now
04:52 - if we click on that the image is
04:54 - actually showing up on our phone and if
04:57 - we want to press this again we can make
05:00 - a new quote
05:03 - and then we get another image there so I
05:07 - think this is a really great project for
05:09 - anyone that wants to learn how to create
05:11 - Progressive web applications and also
05:13 - show how to have one back end that can
05:17 - service many different types of front
05:19 - ends whether you have a mobile
05:20 - application or you have a desktop
05:21 - application so the way that this is
05:23 - going to work at a very Baseline level
05:24 - is that when we have this quote so we
05:29 - made a call from the user so the user
05:32 - is going to generate
05:33 - a request
05:35 - that's going to Ping
05:37 - appsync
05:42 - which is our API using graphql
05:46 - that's then going to connect to an AWS
05:51 - Lambda
05:53 - function and then that's going to
05:55 - generate
05:57 - a base
06:00 - 64 encoded string so then this is
06:04 - actually a series of digits a series of
06:07 - code that actually is an image and we
06:09 - actually are able to download this we're
06:12 - able to copy it we're able to use it but
06:14 - it's not actually saved as a file until
06:18 - it reaches the application so that's
06:21 - where we're able to take all of this in
06:23 - the cloud and then make it run get a
06:26 - response and then download this image
06:28 - right from our application in our
06:31 - browser I'm really excited to show you
06:32 - this project and especially learning how
06:35 - to build this type of serverless
06:36 - infrastructure where you don't have to
06:38 - provision the server yourself and
06:40 - there's a lot of these managed services
06:41 - to help you build with scaling so as
06:44 - users are using your application as
06:46 - these functions are getting called this
06:48 - will actually scale with your use case
06:50 - and you only pay for what you use so you
06:53 - never have to worry about provisioning a
06:55 - server and putting up you know money you
06:58 - know up front this will be pay as you go
07:00 - and there's also really generous free
07:02 - tiers so that you never have to worry
07:04 - about lots of expensive upfront costs
07:07 - it's very accessible and scalable to
07:10 - build your use case and build a fun app
07:13 - which is what we're going to do today so
07:14 - if you're excited about that let's get
07:16 - ready to build
07:18 - all right so first things first we are
07:21 - going to set up a code repository for
07:24 - our project so if you don't already have
07:26 - an account you can go to github.com and
07:29 - set up a free account it's super easy to
07:31 - set up your account and then what you'll
07:33 - be able to do is start allowing access
07:36 - to your projects with Git so that you'll
07:39 - be able to have Version Control so or
07:42 - Source control for your project and what
07:44 - this is going to allow us to do is think
07:45 - about it like Google Docs but for your
07:47 - code so you'll be able to go back in
07:49 - between different branches maybe you
07:51 - wanted to review code that you wrote
07:53 - previously maybe you need to revert a
07:55 - change that you pushed into production
07:57 - well thanks to git and GitHub you'll be
08:00 - able to then go back to that previous
08:01 - commit and then make that the default
08:04 - Branch or the default code for your
08:08 - project so uh you can get to create a
08:11 - new repository a couple different ways
08:13 - in the drop down in your profile in the
08:16 - top right you can go to repositories and
08:19 - then there'll be a green button where
08:20 - you can then press you know create new
08:22 - repository or you can press this handy
08:24 - plus button up here and then create a
08:25 - new repository so we are going to name
08:28 - our repository inspirational quote
08:29 - generator
08:34 - like so and then we'll give it a nice
08:37 - description so we'll say this is our
08:39 - inspirational
08:41 - quotes generator project
08:45 - to learn how we can run Scripts
08:50 - in AWS with next JS okay great so then
08:55 - we can choose between public or private
08:57 - I'm going to choose private and then
09:01 - once we create our Repository
09:05 - we'll then see that we have now a way to
09:08 - access this code repository with Git so
09:12 - now that we've done this the next step
09:14 - is to set up our project with GitHub
09:17 - desktop so GitHub desktop is a client
09:20 - that you can download also from
09:23 - Microsoft to the same company that owns
09:25 - GitHub and you'll be able to have this
09:28 - GUI or this graphical user interface
09:30 - that will let us manage our project
09:33 - with this web client on our computer to
09:37 - do that super easily we're going to
09:39 - press this button that says setup in
09:41 - desktop
09:42 - we'll then open GitHub desk up here this
09:45 - is going to prompt this window to open
09:48 - up there actually I'll do this one more
09:49 - time
09:51 - so we'll do that there and then we'll be
09:52 - able to choose where we want our project
09:55 - to be located so I'm going to go to
10:01 - my tech SEC Playbook folder
10:04 - I will drop it in there
10:08 - and then as soon as I press clone
10:10 - it's then going to
10:12 - establish a link between this folder on
10:16 - my computer and then the code repository
10:19 - in GitHub so now if we wanted to open in
10:22 - Visual Studio code
10:24 - will then be able to and you'll just say
10:26 - yes I trust the authors because I trust
10:28 - myself
10:29 - and then um we'll be able to now get our
10:32 - project this folder all set up in GitHub
10:36 - desktop in one click which is awesome so
10:39 - now what we want to do is we want to
10:41 - start building our next JS project to
10:44 - start coding all right so as you can see
10:46 - on my screen I have the next JS docs up
10:51 - this is the documents that are the
10:55 - documentation that's maintained by the
10:57 - company for cell and they maintain the
11:00 - next JS project so what we are going to
11:04 - be doing is we are going to scroll down
11:05 - in the docs to where it says create next
11:09 - app and this is the one line of code
11:11 - that we need to install our framework
11:14 - for working with nexjs and adding
11:16 - typescript as well so something that we
11:19 - can do is just right click and copy and
11:22 - then in the left part of our screen and
11:25 - visual studio code I'm going to control
11:27 - B just to get rid of that sidebar and
11:30 - I'm going to control and then tilde and
11:32 - then that's how we're going to open up
11:35 - our terminal so you can just do control
11:38 - C just to clear that out or I can just
11:41 - expand this make it a little bit easier
11:42 - to see
11:43 - so I'm going to open this up a little
11:45 - bit so when we open up a terminal window
11:48 - this is the same as opening up a
11:51 - terminal window on your screen or if
11:54 - you're on a Mac or this might be
11:55 - Powershell if you're you know not on a
11:58 - Mac but I'm on a Mac so this is what I
12:00 - would be using but you can run a
12:02 - basically a Powershell or a terminal
12:04 - window inside of Visual Studio code
12:07 - which is a great feature of the IDE so
12:10 - as soon as we write this in we're going
12:11 - to press enter and it's going to walk us
12:14 - through a series of commands to help us
12:17 - bootstrap our project so do we want to
12:19 - install yes
12:21 - and then what's our product name we're
12:22 - going to say inspo
12:23 - quote generator
12:27 - but we actually it doesn't really matter
12:28 - because we're going to get rid of this
12:29 - folder anyway but we'll just give it
12:31 - something now would you like to use
12:32 - eslint we're going to say yes would you
12:34 - like to use the source directory we're
12:35 - just going to do the default no and we'd
12:37 - like to use experimental app director
12:38 - but say no and we're Alias uh we'll just
12:42 - do enter and now it's going to start
12:44 - generating all of the different
12:46 - dependencies and Integrations for our
12:50 - project and I think this is kind of like
12:52 - the the fun part of coding just seeing
12:54 - all the scripts compile so that's great
12:57 - we installed it correctly and now if you
12:59 - open up
13:01 - command B
13:03 - you see all of these modules that are
13:05 - right here
13:07 - so something that I'm actually going to
13:08 - do is take this and I'm going to hold
13:11 - down shift and then click this so I get
13:13 - all of these and I'm going to move these
13:15 - back a folder
13:17 - so what we want to basically do is in
13:20 - GitHub desktop
13:21 - you'll see in here all of these folders
13:24 - all of these dependencies all of these
13:26 - elements that we're going to push to get
13:28 - I want them to all be tracked at the
13:30 - same root level as opposed to having
13:32 - going into a subfolder to then access
13:34 - the repository this is just how I
13:36 - structure my projects and we can then
13:38 - delete this subfolder because we don't
13:40 - need it anymore and there we have it so
13:43 - now we have our project bootstrapped
13:46 - with the next JS template
13:51 - for perspective I'm using the latest
13:53 - next 13 build with react 18 and this is
13:58 - typescript 4.9 so these are all of the
14:01 - dependencies that the next JS create
14:04 - next app project will build for us
14:09 - the next thing that we're going to do is
14:10 - we are going to allow a way for our next
14:15 - JS with typescript project to use Styles
14:18 - components as our Styles framework so
14:21 - personally I use style components for
14:23 - all of my projects because if you
14:25 - understand CSS this allows us to create
14:28 - basically functional components for all
14:30 - of our Styles so that we can replicate
14:32 - our templated components throughout our
14:35 - entire project it makes it super easy to
14:38 - read a lot of visibility across the code
14:40 - base and it makes it really easy for
14:42 - anyone to just go in and edit Styles
14:44 - replicate or duplicate files for
14:47 - components it just makes it really
14:48 - really easy and it's very very
14:50 - accessible to get started so something
14:53 - that we're going to do is we're going to
14:55 - add in a DOT Babel RC file and this is
15:00 - what we're going to allow for our custom
15:03 - Fable file so we're going to have a
15:06 - preset of next slash Babel and then in
15:09 - terms of plugins we're going to have the
15:11 - Styles components plug in with SSR is
15:13 - true and display name is true something
15:15 - else that we're going to do we're going
15:17 - to edit our next config file so I'm
15:21 - going to copy and paste these elements
15:23 - and then I will walk through
15:25 - how we'll do it so we're basically going
15:27 - to overwrite
15:29 - this whole file with this file
15:32 - so I'll walk through each part of it
15:34 - and also if you ever see me wrapping the
15:36 - text I'm doing alt Z on a Mac this is
15:40 - the command to wrap the text to the
15:43 - window so what we're doing is we're
15:45 - creating our next config
15:48 - and then
15:50 - we have react strict mode is false under
15:52 - the compiler we're going to be including
15:55 - Styles components and then there's going
15:57 - to be various different files that we
16:00 - need to install so displaying needs to
16:03 - be true SSR needs to be true founding
16:05 - needs to be true top level import paths
16:07 - we just leave that as an empty array
16:10 - and then meaningless file names just put
16:13 - in as index CSS prop is true namespace
16:17 - is an empty string Minify as false
16:20 - transpile template literals is false and
16:23 - then pure is false and what we do is we
16:25 - set module.exports equal to that next
16:28 - config that we have up here so this is
16:31 - that next config file that we need to be
16:34 - able to allow our build environment to
16:37 - understand what style components are
16:39 - trying to do so we're going to save this
16:41 - and in case you're new to Styles
16:43 - components I just want to give a little
16:45 - bit of an overview on what we're doing
16:47 - uh just because when we're installing
16:49 - this design framework into the code base
16:50 - it might be helpful to just have a
16:52 - little bit of an intro into that before
16:54 - you start installing you know maybe
16:55 - things that you haven't used before you
16:57 - don't know what they do so if you go to
17:00 - stylethedashcomponents.com this is a lot
17:03 - of very helpful documentation about how
17:06 - this styled framework works but
17:08 - basically what I really like about it is
17:10 - what you'll see right here so let's say
17:12 - that we wanted to define a button and
17:14 - this is going to be a button with a link
17:17 - around it so now what we'll be able to
17:19 - do is very easily create this component
17:23 - that has a styled a tag which we'll use
17:27 - as a link and then we could you know
17:29 - Define the Border radius which is three
17:30 - pixels the padding which is 0.5 from we
17:34 - have a margin we have width we have
17:35 - background color border we have all of
17:37 - these things but where it gets even
17:39 - cooler is we can also pass properties
17:42 - into this button similar to a functional
17:45 - component in react so this is really
17:47 - great because if you ever have Dynamic
17:49 - Styles and let's say that something
17:51 - triggers something else or you have a
17:55 - loading state but as soon as the loading
17:56 - state is complete then you want to turn
17:58 - the button green for example because the
18:00 - data is ready or let's say that there's
18:02 - an error and you want to turn the button
18:03 - red well you'd be able to actually pass
18:05 - properties down through this component
18:09 - through the Styles components framework
18:11 - to then edit those properties so this is
18:13 - an example where the property is primary
18:16 - so you would add this as passing data as
18:19 - props through the component on the
18:21 - client side and then you would be able
18:24 - to then edit the background and the
18:26 - color based upon the property and what
18:28 - it is doing
18:29 - and you'll see also here that there's a
18:32 - ton of companies that are using Styles
18:34 - component you know Target Vimeo Vogue
18:36 - Lego you know Autodesk so many different
18:40 - types of companies BBC Gizmodo take
18:43 - Master price on right all these
18:44 - companies change.org Bloomberg I mean
18:46 - the list the list goes on coinbase the
18:48 - list goes on so many different companies
18:50 - are using South components because it
18:52 - makes it so easy to edit your Styles and
18:54 - also think about it like this you'd be
18:56 - able to then copy and import this button
18:58 - component throughout your entire code
19:00 - base so anytime that this button exists
19:03 - you don't have to rewrite a bunch of
19:05 - inline Styles or you don't have to keep
19:06 - rewriting CSS modules every time that
19:10 - you know you need to render a button you
19:12 - could literally just import this
19:13 - specific button from your file which
19:14 - which I'll get to in a little bit and
19:16 - you'll be able to use this button
19:17 - throughout your code base which saves
19:19 - you so much time and it's really
19:20 - efficient because it's the same code you
19:22 - don't have to rewrite code and be extra
19:24 - verbose it's the same code the same
19:26 - component you define it once and then
19:28 - use it as many times as you want and
19:30 - these are just some other examples if
19:31 - you ever want to check it out but what
19:33 - we're going to be doing is we're going
19:34 - to install
19:35 - with styled components and then we'll
19:38 - also be installing the Babel styled
19:40 - components plugin in the dev
19:41 - dependencies so that will be able to
19:43 - then which talks about right here
19:45 - um just so that it can give some more
19:47 - benefits like legible class names
19:48 - server-side render compatibility also
19:51 - smaller bundles and more optimizations
19:53 - which is really great so we're going to
19:55 - do that right now
19:57 - so we're going to open up our code base
20:01 - here
20:02 - we're then going to close out that side
20:05 - header and then we're going to paste
20:07 - that in here so now that we have npm
20:09 - install save style components
20:12 - we're going to install that there
20:14 - next what we're going to do is
20:17 - it told us that
20:19 - we also have styles components payable
20:22 - [Music]
20:25 - so you'll see in a little bit why this
20:27 - is a really helpful plug-in for our Dev
20:31 - dependencies when we're building with
20:34 - stealth components so I'm just going to
20:37 - copy that here
20:38 - so it's npm install dash dash save Dev
20:42 - IL plugin style components
20:45 - let me install that there
20:46 - and now if we see our code base
20:53 - it should look like this so dev
20:55 - dependencies has be able to plug install
20:57 - the components there and then styled
20:59 - components exists in our
21:01 - dependencies there
21:03 - so whenever you're changing the server
21:06 - or different elements of the next
21:10 - config.js or in these other elements
21:12 - sometimes you'll see this red right
21:15 - there and it'll say module can't be
21:18 - found or something like this so one
21:21 - trick that you can do to get rid of that
21:23 - red is to
21:26 - do command shift p
21:29 - and then when you do command shift p
21:30 - it'll open up this menu where if you
21:33 - press or type reload window here
21:40 - that will help to get rid of the red
21:42 - error that you might see so this is just
21:45 - a way to refresh your code base and you
21:47 - can actually sometimes run this while
21:49 - you also have a build running so it'll
21:51 - just refresh the vs code window and
21:55 - sometimes it'll clear out maybe some
21:57 - left over it thinks that it needed this
22:00 - package but it didn't see it so then
22:02 - it'll just resync up your code base in
22:05 - vs code to make sure that everything is
22:07 - consistent so just a fun little hack to
22:10 - fix that in case you ever see that red
22:12 - error there or elsewhere related to
22:15 - typescript or next.js
22:18 - so once we've edited our next config JS
22:21 - file we are now going to go into our
22:24 - index file so under Pages under index
22:28 - we're going to then remove a few things
22:30 - that we aren't using anymore so we're
22:33 - not using this next font module and
22:35 - there are some instances here where we
22:38 - reference that but we're just actually
22:40 - going to start just removing uh these
22:42 - things so I'm going to take everything
22:44 - from Main
22:48 - div all the way down this
22:53 - and we're going to give that a save
22:56 - and that is the imported elements that
22:59 - come in with the template so we're just
23:01 - getting rid of the template and then
23:02 - we're going to change the header to be
23:07 - super quote
23:09 - generator
23:19 - cool so once we've changed this header
23:22 - module this is a module that's specific
23:24 - to next.js and it allows us to create
23:27 - Dynamic headers for all of our Pages or
23:30 - sitewise throughout the application so
23:32 - this is a great upgrade if you're
23:34 - familiar with crate react app this is
23:36 - actually a really really really slick
23:38 - easy way to do this with xjs and
23:40 - typescript
23:41 - so we change this and then this will be
23:43 - the home page header and let's just
23:48 - give that a quick save and now we're
23:51 - going to run this and we're going to see
23:52 - if this worked out so when we run our
23:57 - project
23:58 - in packet.json
24:00 - you'll see here
24:02 - under the scripts there's Dev and then
24:05 - that's those next Dev to start the
24:07 - project or start which is next start but
24:10 - we're going to do npm run Dev and that
24:13 - is what's going to get our project
24:15 - started up
24:17 - so see that it was compiling
24:21 - client and server are successfully
24:23 - rendered super quickly and now let's see
24:26 - what that looks like on our browser
24:30 - when you run npm run Dev that's going to
24:33 - run our application on localhost 3000 so
24:36 - this is the URL for how you would get
24:39 - this in your browser and if you're
24:41 - running this application so far you
24:42 - should just see a black screen but in
24:45 - the header if you hover over this it
24:47 - should say inspirational quote generator
24:48 - which is
24:50 - our title for the header and then if you
24:53 - were to actually share this link with
24:55 - somebody else running on our URL which
24:57 - we'll do in a little bit that's where
24:59 - you'll see this preview description
25:00 - where it'll give you a preview of that
25:03 - you could also have an OG image if you
25:05 - wanted to add an image as that head
25:08 - header metadata tag but um we're not
25:11 - going to do that right now we're just
25:12 - going to focus on this so just to give a
25:13 - little bit of a sanity check let's make
25:15 - sure that this is actually working
25:16 - correctly so I'm going to just write a
25:20 - div with hello world inside of this Main
25:23 - we'll save that and then we'll see that
25:26 - that is printing and it's actually
25:27 - updating once we press you know command
25:29 - s to save it this is going to update in
25:31 - real time so let's say that we wanted to
25:32 - say
25:34 - we'll do an H3 uh tag we'll say great
25:37 - job running
25:40 - Js
25:42 - we'll give that a save and then now
25:44 - that's actually running and putting it
25:46 - below so now we see that this is
25:47 - actually printing out our code which is
25:49 - awesome so what we're actually going to
25:51 - do now is we are going to get rid of
25:53 - this and we're going to start actually
25:55 - building out the template for our
25:58 - project with our real code not the
26:00 - template that is created with create
26:01 - next app
26:04 - so we'll give that a save and we'll go
26:06 - to the next step so let's do some
26:08 - general housekeeping to set up our
26:10 - project obviously there's a lot of
26:11 - styles that the template will come with
26:13 - but we're going to be creating our
26:16 - custom code so we want to create our own
26:18 - Styles so if you navigate to the Styles
26:21 - subfolder in your project we're going to
26:24 - go to globals.css and we're basically
26:27 - going to remove
26:29 - all of this
26:30 - so this is just the starter templates
26:33 - we're going to do a bunch of other stuff
26:35 - so we're going to install
26:38 - some fonts and then we're going to
26:40 - install or basically write some Global
26:43 - styles so whenever you do
26:47 - a wild card and then you do these
26:50 - brackets this is going to be how you
26:53 - apply basically a general style to all
26:56 - the pages that ever render So This
26:58 - Global Styles is basically apply the
27:00 - style or allow this type of style to
27:03 - work for any of the projects that or any
27:06 - of the pages that get rendered in our
27:07 - project
27:08 - so we'll do box sizing
27:12 - water box we'll do padding
27:14 - zero and then we'll do margin
27:17 - zero
27:19 - we also are going to import
27:21 - some fonts
27:23 - so I'm going to
27:26 - copy and paste these in for you to
27:31 - copy
27:33 - so where I'm getting these from is
27:35 - Google fonts these are free fonts that
27:38 - you are able to access and then use in
27:42 - your code so I will show you where to
27:44 - actually search for these so that in
27:46 - your next projects you're able to
27:49 - get up and running from that so I'm just
27:53 - going to do a quick pan just to show you
27:56 - this last little bit from that font
27:59 - and then I'll show you
28:01 - how we get that
28:03 - so when we want to add a font
28:07 - you can go to font.google.com and then
28:11 - let's say that I see Roboto because I
28:14 - really like this font so you can click
28:16 - on it and then it's going to give you
28:17 - all this information about the Styles
28:20 - the different font family
28:22 - elements and all the different you know
28:25 - ways that you know you could be using
28:26 - this so let's say that I really liked
28:29 - um this font family for example so what
28:32 - you can do is that you can obviously
28:34 - download
28:36 - or
28:38 - what you could do is you can just go to
28:42 - select
28:44 - you can go to this
28:45 - and then these are actually the other
28:46 - fonts that I had in there but what
28:49 - you'll have is here under Roboto you'll
28:52 - see that there's a link
28:53 - and there's also an import so the import
28:56 - is really important because when you are
28:58 - working with a framework like CSS we
29:01 - don't really need to import all this
29:03 - this is more for like if you're
29:04 - importing this into HTML we really just
29:07 - care about this import statement here so
29:09 - this thing so you'd copy this and then
29:12 - that's where you would then literally
29:14 - copy and then paste it into there
29:18 - right
29:20 - and that's where you'd be able to copy
29:22 - um that for example
29:24 - so same thing here right if you wanted
29:27 - to do that with Roboto so it seems like
29:29 - when you you know drop down that's for
29:31 - this so then this would be for Roboto
29:35 - yep and then that's how we would add a
29:37 - font into our CSS so we're going to give
29:41 - this a quick save and then these Styles
29:44 - will then apply to our overall project
29:47 - so then when we go back to this
29:50 - we'll see now that the background is
29:53 - white it's not black anymore and some of
29:55 - these Styles seem to have been applied
29:57 - which you will see in a little bit back
29:59 - in vs code we can now
30:03 - remove our home module CSS these were
30:07 - just the styles that were
30:08 - imported from the
30:10 - create next app we can just delete this
30:12 - so we'll delete it
30:14 - and now what we're going to do is we're
30:17 - going to do a little bit more
30:18 - organization of our project so when I
30:22 - work with style components I like to
30:23 - create a components folder
30:26 - so I just right click add folder and
30:29 - then I title it called components and
30:32 - then we're going to do a folder so we're
30:35 - going to do
30:38 - quote generator and there's going to be
30:40 - also another folder called animations
30:43 - which we will get to a little bit later
30:46 - in this video but right now in our quote
30:49 - generator we're going to not add
30:51 - anything in there right now but we will
30:52 - in a little bit we're going to do mainly
30:55 - all the Styles in our
30:57 - index.tsx file but we will also add some
31:01 - sub components to break up our code and
31:04 - make it more composable through our
31:07 - project
31:08 - so now we're going to do is
31:11 - we're actually going to get started
31:12 - building out our project so what we want
31:14 - to do is we want to build out a
31:17 - background so something that personally
31:20 - I like to do
31:22 - is have a file in our quote generator
31:26 - we're going to call this quote
31:31 - reader elements
31:33 - TSX
31:36 - so when we are working without
31:39 - components something that I personally
31:41 - like to do is on the right have our
31:43 - element and then
31:45 - on the left we have the actual file that
31:49 - we're editing in you'll see a little bit
31:51 - why this makes a lot of sense in terms
31:53 - of building but a lot of it is just an
31:55 - organizational thing of I'm editing this
31:57 - style and I'm adding it into this page
32:01 - here
32:02 - so what we're going to do is we want to
32:04 - add a background to our project we want
32:07 - to you know give it uh you know a cool
32:09 - nice you know dynamic background
32:12 - so how exactly would we go and do that
32:15 - so what we're going to do is we are
32:17 - going to
32:19 - add in a few things so we want to do
32:21 - background
32:23 - for our project
32:25 - so in here
32:26 - right from the top we are going to do
32:29 - input styled
32:34 - from
32:35 - style to components
32:38 - we're then going to import link
32:42 - from next link because we're going to
32:43 - need this a little bit later
32:47 - and then we're also going to import
32:49 - image from next
32:52 - image here we're going to do is we are
32:55 - going to use the styled component
32:58 - extension and if you don't already have
33:00 - this
33:06 - you can see the ones that I have so
33:09 - I like vs code it's syntax highlighting
33:11 - and then also Styles component Snippets
33:13 - for vs code these are the ones that I
33:15 - use and they are super super helpful
33:18 - because what we can do is if we want to
33:20 - just write uh basically a snippet for
33:22 - our style component we'll do exsc
33:26 - we'll export a stout component and then
33:28 - we'll call it gradient
33:31 - background con
33:34 - and then we need to call it styled
33:36 - something so we do style div so you
33:38 - could do styled H1 you could do style H2
33:40 - you could also do a style of link as
33:42 - you'll see before you'll see a little
33:44 - bit later but what we're going to do
33:46 - here is I'm just going to bump up that
33:49 - just a little bit just so you can see a
33:50 - little bit more of the screen
33:51 - and immediately as we start writing in
33:53 - Styles components we might start to see
33:56 - some Type errors
33:58 - or typescript not recognizing what we're
34:00 - trying to do so we see this error where
34:02 - it says can't find the Declaration file
34:04 - for module stealth components
34:06 - um basically this has an any type so it
34:09 - gives a recommendation of let's run the
34:14 - install for Dev dependencies with types
34:16 - for styled components and this will
34:19 - allow typescripts to recognize that we
34:22 - have style components being used
34:24 - throughout our project so what we'll do
34:26 - is we'll open up a new terminal window
34:27 - and if you don't already have this open
34:29 - you can do control and then tilde and
34:31 - that's how you can toggle the terminal
34:33 - at the bottom of the screen we'll do
34:36 - I did Ctrl C and then control V we'll do
34:38 - npm I dash dash save Dev type Styles
34:42 - components we will install this
34:44 - for our project
34:46 - so that ran and then
34:49 - this error should go away which is great
34:51 - so now it recognizes that this module
34:54 - you know checks out with all the types
34:56 - and it recognizes that that's what we're
34:58 - doing which is awesome so now we want to
35:00 - do is we want to add in some Styles here
35:03 - so I will go through these and then I
35:07 - will go through them together
35:32 - cool so just to go through these
35:35 - background we are giving this a linear
35:38 - gradient and this is going from one
35:40 - color to the next color and we have it
35:42 - going to the right so this is a great
35:45 - way to and I'll show you the process for
35:47 - how to do this but this is a really
35:48 - great way to add that Dynamic you know
35:50 - styling for any div or any background or
35:54 - any block where you can you know give it
35:56 - just this background color but it's a
35:59 - one color that blends into the next
36:00 - color and this is like very modern very
36:02 - you know futuristic it's what a lot of
36:05 - very like you know really polished apps
36:07 - will have in that linear background so I
36:10 - really like linear gradients I like
36:11 - adding gradients to a lot of things that
36:13 - I do so that's a great way to add the
36:14 - background we'll then do background size
36:20 - a 400 percent
36:22 - with 400 and what we're going to be
36:25 - doing is we're going to have this
36:26 - oscillating effect for the background
36:29 - and you'll see how having this
36:30 - background size being really expanded
36:32 - and then we'll be making it
36:34 - um basically like moving back and forth
36:36 - and having it you know move left to
36:39 - right which you'll see uh through this
36:41 - animation that we're going to build out
36:42 - so then we're going to do an animation
36:45 - to gradient we'll do six seconds e is
36:49 - infinite
36:50 - and this is going to basically mean that
36:52 - we're gonna we haven't created this yet
36:54 - but we're gonna have a animation called
36:56 - gradient it's going to be running every
36:58 - six seconds and it's going to have this
37:00 - ease effect throughout and it's going to
37:03 - be running infinitely we'll then do a
37:05 - height
37:09 - and then a width of 100 view with
37:13 - and then what is so awesome about Styles
37:16 - components you don't have to you know
37:18 - like start writing you know keyframes
37:20 - because usually with CSS you'd have to
37:21 - do like keyframes gradient and then
37:24 - you'd have this you know in the
37:25 - background and then you have to
37:26 - reference it you literally can wrap all
37:29 - of these elements together and you don't
37:31 - have to worry about having you know a
37:33 - certain element being there
37:35 - um also just with you know doing hovers
37:37 - let's say that you have this class here
37:39 - so you'd have to like declare it as like
37:41 - this with a style and then you'd have to
37:44 - do something like this with hover and
37:46 - then do that and you know I I just like
37:49 - think that style component just makes it
37:51 - so much easier to just wrap all of your
37:53 - Styles all of your animations all of
37:54 - your keyframe editor elements all in one
37:57 - package component so that you can then
37:59 - import this throughout your entire
38:01 - project which I just like I think that's
38:02 - amazing and it saves you so much time
38:04 - for having to do all this guesswork of
38:07 - you know did I have this keyframe is
38:08 - this keyframe imported did I add this
38:10 - hover effect you know did I add this
38:12 - other effects with these Styles so it's
38:15 - just super easy we'll add then a
38:17 - background position which is going to be
38:19 - zero percent to 50 percent
38:20 - we're then going to do a 50 percent
38:24 - and then we're going to do another one
38:25 - and I think Amazon code whisper already
38:29 - knows exactly what I'm going to do
38:31 - because I already have this project
38:32 - committed but we'll just carry out this
38:35 - other process and then we're basically
38:37 - going from 0 to 50 to 100 and we're
38:39 - going from background position you know
38:42 - zero to 100 back to zero percent and um
38:45 - we know we're keeping fifty percent for
38:47 - both so we're adjusting the you know the
38:49 - height and the width and you know
38:50 - editing it that way so this is great so
38:52 - we'll give this a save so this is going
38:55 - to be really cool in one second but just
38:58 - to show you also the power of South
39:00 - components we have this
39:04 - styled component that we've already
39:05 - created it's a div with all of these
39:07 - Styles which is great but how do we
39:09 - actually get this back into our project
39:10 - so something that we can do which I
39:13 - think is so so so awesome so we're going
39:17 - to declare this almost like we would
39:19 - declare a div so we use that you know
39:20 - that carrot and then we're going to just
39:22 - start typing the name of that styled
39:24 - component that we just typed so gradient
39:26 - background and we already see that it's
39:29 - finding this element so we can just
39:32 - press enter and now check this out so as
39:35 - we close this out
39:37 - it's now added imported this
39:41 - so this is what it will actually look
39:42 - like so it's importing from components
39:44 - code generator coordinator elements and
39:47 - we'll add this so this is what's awesome
39:49 - about solid components also is that as
39:51 - you create you know these unique named
39:53 - elements we can then just start writing
39:57 - them as if they were a normal div and
39:59 - then we'll be able to then you know use
40:01 - the sort of intellisense of finding the
40:04 - different names of the components we'll
40:06 - then be able to import that directly
40:07 - right into our code it's super fast and
40:10 - then when we save this check this out
40:14 - we now have this really really really
40:16 - cool Dynamic background for our app
40:19 - which I mean this is like adding that
40:22 - type of animation with the gradient just
40:24 - gives it like such a nice Snappy Dynamic
40:27 - fun vibey element to the project and
40:31 - this is where you'll be able to add this
40:32 - really nice linear gradient oscillating
40:35 - background to our project so that's
40:38 - great so now you've just seen how to
40:40 - import the style component and then add
40:43 - that into one of the pages in our
40:45 - project so we see that we have a
40:47 - gradient background component that we
40:49 - really like so once we've added this
40:52 - feature one of the best practices that
40:54 - you can get into is making sure that you
40:55 - commit this specifically to GitHub so
40:58 - that you have version Source control so
41:02 - what we're going to do is in our
41:06 - GitHub desktop client we see all the
41:08 - changes that were added and specifically
41:10 - if we open up this 100 components we see
41:13 - that gradient background container
41:15 - Styles component that we have so we
41:16 - really like this so what we're going to
41:18 - do is we're going to
41:20 - keep this on the main branch but we need
41:23 - to publish this Branch first so what I
41:26 - like to do is just simply add and we'll
41:28 - say
41:29 - added
41:30 - gradient background container
41:34 - SC for South component
41:36 - so that's good so we'll Commit This to
41:39 - Main and this is all of the different
41:42 - styles so this was basically our entire
41:43 - front end application minus you know
41:46 - node modules and certain elements that
41:49 - we don't want to push to GitHub because
41:50 - that would be sending like thousands of
41:52 - files and we don't want that in our our
41:54 - GitHub repository because that'll be
41:56 - built with our package.json if we run
41:58 - our application you know with a server
42:00 - but we don't want to put that into the
42:03 - actual assets that are deployed because
42:04 - that's what package.json includes so
42:07 - that's
42:08 - this file this file right there so these
42:11 - are all the build scripts and everything
42:12 - but our dependencies for our build
42:14 - script but we don't need to include the
42:16 - node dependent known modules
42:17 - dependencies packages so what we'll do
42:20 - is we'll Commit This to Main
42:22 - we'll publish this
42:27 - and then we'll wait a second and then
42:28 - we'll check GitHub to see where they are
42:31 - so what's awesome about GitHub is as
42:33 - soon as we push this code and we're able
42:36 - to push this to our Branch when we
42:38 - refresh
42:40 - we'll see all of the code that was just
42:42 - added to our code repository so when we
42:46 - go here to our components folder and
42:49 - then to that component that we just made
42:50 - we see that the gradient background here
42:52 - is actually the same that we just added
42:55 - here so this is a really cool way where
42:57 - you're able to add that Source control
42:59 - or Version Control for your application
43:01 - so if you ever need to for example go
43:03 - back to a previous commit you can always
43:05 - go back here and then go back to that
43:08 - specific commit and then maybe go back
43:12 - to a previous version this is really
43:13 - great if you ever need to you know check
43:15 - out a feature or a certain build or a
43:17 - certain way in which you built something
43:18 - you always have that type of History so
43:21 - this is just a good best practice to get
43:22 - into when you're building especially if
43:25 - you're building a new system and maybe
43:27 - you write some code in maybe there's an
43:29 - error or maybe just you need to you know
43:31 - undo something you can always go back to
43:33 - a previous version and then
43:36 - just sync up you know and go back to a
43:39 - certain branch and then you could just
43:41 - change your code and then GitHub desktop
43:43 - will be able to switch out the right
43:45 - code for you now that we've worked with
43:48 - Git and GitHub and pushed our initial
43:50 - commit let's now switch back to our code
43:53 - and let's start building out some of
43:56 - this front end so what I wanted to do
43:58 - was add a background to this which we
44:02 - did which was that gradient but now
44:04 - let's add some images to the background
44:07 - just to you know add some Cloud flare so
44:10 - what we're going to do is we are going
44:12 - to take these two images
44:15 - that I have stored in assets
44:19 - so I create a folder called Assets in
44:22 - the root so I'll just do right click and
44:23 - then I'll do add folder I'll say assets
44:26 - and then I'm going to drag and drop
44:30 - these that I have stored locally you
44:33 - could actually use any images that you'd
44:36 - wish
44:38 - but these were two that I thought were
44:39 - kind of fun one was lightning and then
44:41 - another one was cloud with sun now
44:44 - that'd be kind of fitting because of
44:45 - cloud so what we're going to do is we're
44:47 - going to
44:48 - create two different components
44:50 - one is going to be for an image to be in
44:54 - the top left and one is going to be to
44:55 - an image in the bottom right so what
44:57 - we'll do is
44:58 - we're going to do background
45:01 - image one
45:03 - and that's going to have a source
45:07 - which we'll call
45:11 - cloud
45:13 - S one
45:16 - and that will have a height of 300
45:20 - and then there's an alt
45:24 - cloudy back ground
45:26 - one
45:28 - we'll close it out and to get rid of
45:31 - this error we're going to actually need
45:32 - to create this style component so in our
45:36 - quote generator elements text file so
45:38 - that's this we're going to keep our
45:40 - style components in this and then we'll
45:41 - import them here
45:42 - so we'll do exsc which is that expert
45:46 - size component
45:48 - snippet and then we are calling that
45:50 - background image one
45:52 - this is going to be a styled image
46:01 - and we already imported image from the
46:04 - next image
46:06 - module from reversell and then we're
46:10 - going to do another different
46:12 - style so we're going to do position
46:14 - relative we're going to do Z index one
46:18 - margin left
46:20 - minus 120 pixels
46:29 - margin top
46:31 - probably just 10 pixels
46:34 - cool we'll give that a save
46:37 - and now what we do is
46:39 - because we already have it for Auto
46:41 - Import so it'll find this and then we
46:43 - just need to import Cloud one so we'll
46:46 - go to the top of our file
46:47 - and sometimes I like to separate these
46:50 - different elements so
46:52 - these will be our components
46:56 - and then these will be our
47:00 - assets let's import
47:03 - classes and it's already finding this
47:05 - from here
47:07 - which is awesome
47:09 - so
47:11 - that also if you ever want to check if
47:13 - you hold down command or control
47:16 - you can always see that but we know that
47:18 - this is uh mapping to this image that's
47:20 - there locally so if we ever need to go
47:23 - and find it we can just go to that check
47:26 - where it is
47:28 - and then find where assets are so
47:32 - we already saved that we'll give this a
47:34 - save and then we should see this image
47:37 - there but if it's not finding it that
47:40 - means that clouds one is not there so
47:42 - that's because we imported the wrong
47:45 - file so it actually doesn't know what
47:47 - our cloud is which our Cloud one object
47:50 - is so one thing that we can do that'll
47:53 - actually make it a little bit easier is
47:55 - if you do dot dot
47:56 - we can then go to assets and click on
47:58 - that go drop down
48:01 - and it should give us a drop down of
48:05 - what's there
48:08 - but sometimes if we sort of try to write
48:11 - it it'll prompt to find what's there so
48:14 - we want
48:16 - cloud and Thunder
48:19 - and then we should see it there so this
48:22 - is really cool but we see that
48:24 - it's not aligned in the way that we want
48:27 - so what we can do is we can go to
48:30 - elements in the browse and this is I'm
48:33 - actually pressing F12 so that's how you
48:34 - open up the dev tools
48:36 - we'll open up elements
48:39 - and then we take this selector
48:44 - we hover over that and then now we can
48:46 - actually get all of the
48:48 - the styles for this so the Styles
48:49 - component is going to create this kind
48:51 - of dynamically generated you know class
48:53 - name but we can do is we can move
48:57 - this there
49:01 - so
49:02 - can always move it and what's really
49:05 - cool about that is let's say that we
49:07 - give it you know minus 10 something like
49:09 - that
49:10 - so now
49:13 - when we move this it's going to be super
49:16 - Dynamic and it's going to stay so this
49:18 - is a great way to debug your code and
49:20 - your Styles as you're building
49:22 - so we're going to do is we're going to
49:23 - switch that out
49:25 - and then we're going to just close this
49:27 - out and this should stay in place
49:29 - because it'll be all relative here and
49:32 - that's exactly what we're looking for so
49:34 - this is great so we'll give this a save
49:37 - okay this is save
49:41 - and then we'll give this a refresh and
49:44 - we see that it worked
49:45 - so that's great awesome so
49:48 - next up we're going to do the same thing
49:50 - here but we're actually going to just go
49:54 - back to our
49:56 - code generator element
49:58 - we're going to just copy this we're
50:00 - going to
50:01 - just create another one but this is
50:03 - going to have a different set of styles
50:05 - we're going to call
50:07 - this position fixed we're going to do
50:09 - same thing Z index one we're going to
50:12 - actually move this all the way to the
50:14 - right so this is now going to be locked
50:16 - to the right and then bottom is going to
50:18 - be -10 so give that a save
50:21 - and then we're going to do the same
50:23 - thing here
50:27 - but we're going to do clouds two
50:31 - and we're going to basically copy the
50:34 - same thing here
50:36 - do clouds too
50:38 - and
50:40 - we're gonna do cloudy weather and that's
50:42 - the second image that's there
50:44 - we'll give that a save and we'll see
50:45 - where the saved it so I see that
50:49 - this added this here but something that
50:52 - we can do is
50:54 - if we
50:56 - refresh
50:58 - we open this up because this is that new
51:00 - image that we got
51:02 - so what I want to do is I want to
51:09 - change instead of this we're going to
51:12 - then see that this should be at the
51:14 - right
51:15 - and this should be at the bottom bottom
51:25 - so if that does not do anything for you
51:28 - then this means that we need to
51:35 - change this to be that different
51:39 - component that we just created
51:42 - so we'll do two we'll import that
51:45 - we'll save that and now we have that
51:48 - there which is great and we can actually
51:50 - maybe make this a little bit more to the
51:52 - right
51:57 - I see that that could be just a little
52:00 - bit more there
52:02 - so that's looking good but let's just
52:04 - just see if that actually is the case
52:08 - okay I like that so that stays right
52:10 - there
52:11 - and it's in that fixed position which is
52:15 - there so I like that so we're gonna do
52:19 - minus 120
52:22 - and then we'll just check to see if that
52:23 - actually worked
52:26 - and it did that's great okay and then
52:29 - this stays at the left
52:31 - and you'll see that that's still it's
52:32 - it's all kind of adjusting there okay
52:35 - perfect so this seems really cool and
52:38 - these are ways where you can work on the
52:40 - Styles and then also use that F12
52:44 - elements and then selector to then find
52:46 - Styles and then edit them in your
52:48 - browser and then move them back to vs
52:50 - code so you have them uh as you work on
52:54 - your components
52:56 - all right so the next part that we're
52:57 - going to be doing is we're going to be
52:59 - generating a footer so that as quotes
53:02 - are generated our server our serverless
53:05 - server in the cloud is going to be
53:07 - adding plus one to the number of quotes
53:09 - that are generated in a dynamodb uh
53:12 - table object and then we'll be able to
53:16 - display that
53:17 - in the front end so what we're going to
53:19 - do is we are going to create in our
53:22 - index.ts x file we're going to create a
53:25 - footer container
53:28 - which will be a styled component we're
53:30 - then going to create this div component
53:32 - here so that it can go inside we're then
53:34 - going to have quotes
53:36 - generated
53:37 - with a number that will be dynamically
53:40 - generated we're going to call a number
53:42 - of quotes which is a value that we're
53:44 - going to store in use state with the
53:48 - react you state hook we're then going to
53:50 - add our breakpoint and then
53:53 - we're going to do is we're going to say
53:54 - developed
53:55 - with we're going to pass in a heart
54:00 - by and I'm going to do footer link
54:04 - and this footer link is going to include
54:07 - some data so I'm going to include an
54:10 - href
54:12 - to my YouTube channel so when we and
54:14 - this is going to be a style component of
54:16 - a link
54:17 - component from next but what we're going
54:20 - to do is you could obviously include you
54:22 - know maybe your own website or maybe
54:24 - your own YouTube channel if you have one
54:26 - uh or in your Instagram or LinkedIn or
54:28 - something like that but we're gonna have
54:30 - a call to action and we want to make
54:32 - this link open up in another browser tab
54:35 - so we're going to do is we're going to
54:36 - say Target
54:37 - we're going to then include underscore
54:40 - blank
54:41 - we're then going to
54:43 - save Rel and then we're going to have
54:45 - two values here for security so no
54:47 - opener and no
54:50 - refer and this helps with Legacy
54:54 - browsers in terms of some web
54:57 - vulnerabilities just to make sure that
54:59 - when you open up this new
55:01 - tag that you can't have basically like
55:04 - no elements this will actually like if
55:06 - you actually open this up or you even
55:07 - ask chat GPT it'll give you more data
55:09 - about it but basically this is just if
55:11 - you're opening up in another tab from
55:13 - your own website from your own origin to
55:15 - something else you just want to make
55:16 - sure you have those values a part of the
55:18 - link script and then we need to have
55:21 - some value in here so I'm going to
55:22 - include a link to my handle but you
55:23 - could have your own link to your own
55:25 - handle or your own name if you want to
55:28 - have it there
55:29 - and then what we're going to do is we're
55:31 - going to close it out which we do
55:33 - and then we're going to start hammering
55:35 - away on these values I'm going to
55:37 - actually rename this to be footer
55:39 - container and then in our quote
55:42 - generator elements
55:45 - styled components file we're going to do
55:48 - exsc for that styled component
55:51 - snip it we're going to then say footer
55:54 - container this is going to be a div
55:56 - and then we're going to start plugging
55:58 - away on these Styles so we're going to
56:01 - do is we're going to give this a width
56:02 - of 100 view with so it'll span the
56:05 - length of the the width of the screen as
56:09 - it expands and contracts for the height
56:11 - we're going to say that this is 50
56:12 - pixels
56:14 - tall say text align we're going to say
56:17 - Center so that all the text is in the
56:19 - middle
56:20 - for font family
56:22 - we're going to say that this is source
56:25 - code Pro
56:28 - and then mono space
56:30 - we're then going to say font size is 15
56:33 - pixels we're going to give this a
56:36 - position of absolute
56:39 - we're going to put this at the bottom
56:41 - and append it there with zero and then
56:44 - color is going to be white for the text
56:46 - and then Z index
56:49 - is going to be 99999 so that it'll be
56:52 - prioritized above any other divs in the
56:55 - screen now to import that we just have
56:58 - to rewrite the last letter press enter
57:00 - to add footer container and then now
57:03 - it's added to our list of imports
57:05 - automatically which is awesome now to
57:08 - get this value here so we're going to do
57:10 - is we're going to be storing this number
57:11 - of quotes value in a hook called use
57:15 - state so the way to use State works is
57:18 - with react you'll have basically a value
57:20 - you'll set that value as like as well as
57:24 - in its array basically but it's an array
57:26 - of a value and then a set value function
57:29 - or caller and then that equals basically
57:33 - you state like that so we're going to do
57:35 - is we're going to say const
57:39 - we're then going to
57:41 - copy that value here
57:45 - and then we're going to say
57:46 - set because it's basically it's going to
57:48 - be this
57:49 - so we set number of quotes we do you
57:52 - state and we use zero but it's going to
57:54 - complain because we don't have the right
57:58 - typing for this value because we're
58:01 - using typescript so we need to make sure
58:03 - that we are typing everything correctly
58:05 - so we're going to do is because this is
58:08 - a number
58:09 - could you use a state call this a number
58:13 - or
58:15 - can be null
58:17 - and
58:21 - have this value here
58:24 - and then that will be there so
58:27 - as we can expand this out so
58:29 - you state
58:31 - number Boolean
58:33 - and then we just need to import
58:36 - you state from react so import
58:39 - react and then use state
58:45 - frog react
58:49 - so then that is how we'll be able to
58:52 - then call this number and we're going to
58:54 - automatically set it to be zero so every
58:56 - time that it loads we're going to hide
58:57 - we'll show you how to hydrate this data
58:59 - with function calls from Dynamo but we
59:02 - don't need to worry about that right now
59:03 - and then for the footer link
59:07 - we're going to do another component
59:08 - style component here
59:11 - let's expand this out do exsc
59:15 - do footer link equals styled link
59:26 - there we go and then what we're going to
59:28 - do is we're going to overwrite it so
59:31 - these are going to be
59:32 - how we override the link so usually the
59:34 - link will be purple if you've ever seen
59:35 - that or blue with an underline but we're
59:37 - going to change it so the color of the
59:39 - text is white but it'll still have that
59:42 - URL underscore and then what we'll do is
59:45 - we'll import Link in that same way so
59:50 - that as we save this and as we save this
59:54 - we'll be able to then
59:57 - check that out and it seems that there's
60:00 - going to be just one call that we are
60:03 - missing here
60:04 - oh I see
60:07 - we just had that spare function there
60:10 - okay cool
60:12 - so I'm going to give this a quick save
60:13 - and then we should be able to see
60:17 - this right here so if I expand this a
60:21 - little bit more for you all so you can
60:23 - see so what we're doing is we're going
60:25 - to do quotes generated and that value is
60:27 - at zero and then it's going to be
60:28 - developed by developed With Love by and
60:32 - then this will open up uh my own YouTube
60:35 - channel but you see how it opens up in
60:36 - another tab
60:37 - that's where we're able to have the
60:40 - blank with the no opener no referrer uh
60:43 - relative values there and then that's
60:47 - how you open that up in the in the URL
60:50 - so what we want to do is I just want to
60:52 - make this instead of being a white heart
60:54 - let's make it a red heart so we go back
60:57 - to the front end
60:58 - and something that we can do is if you
61:00 - want to edit
61:02 - something in line so you don't add a div
61:05 - where it messes up spacing or add break
61:07 - points you can use something called span
61:09 - and what we're going to do is I'm going
61:12 - to create a
61:14 - span called red span
61:17 - I'm going to put that around the heart
61:20 - and I'm going to put that in our quote
61:23 - elements quote generator elements here
61:25 - do exsc we'll do that and then what
61:30 - we'll do is we will
61:34 - call it same thing here so red span will
61:37 - just take away the
61:39 - Arrow brackets
61:41 - we're going to make this style slash
61:43 - span
61:45 - and make this look a little bit bigger
61:47 - and then color
61:49 - will overwrite to be red we'll give that
61:52 - a save we'll then do the same thing
61:54 - backspace and hit enter
61:57 - rewrite and then enter and then we'll
61:58 - press save and then what we'll see here
62:01 - when we go back to the front end is we
62:03 - see that it's red so that's also a way
62:05 - where we're able to change Styles in
62:08 - line and also just speaking of styles
62:10 - being in line so remember when we
62:12 - changed the color of this Styles
62:14 - component the text to be white well if
62:16 - you actually undo that you'll see that
62:18 - it is that purple you know bluish URL
62:21 - color that we would expect for URLs also
62:24 - if you ever want to remove the underline
62:26 - something you could do is text
62:28 - decoration
62:29 - and then go down to none
62:32 - and then that's how you'll be able to
62:33 - you know overwrite certain styles that
62:36 - come with a link that you might expect
62:38 - but I do think that the the white is
62:41 - fine because then that we can keep the
62:42 - color cohesive but I do think that we do
62:45 - need that underline but just showing you
62:47 - that that's another way where you could
62:48 - overwrite the Styles if you ever wanted
62:50 - to Okay cool so that that's pretty good
62:53 - and then let's just look at use State
62:56 - and what that's doing so when we assign
62:59 - this value to be zero so every time that
63:02 - this function really it's a functional
63:05 - component but every time that this page
63:07 - or this functional component page
63:09 - loads there's going to be a base value
63:12 - that is assigned to this thing so let's
63:14 - say that we want to make it 200. so
63:16 - every time that this loads it's going to
63:18 - be 200. load it again you'll see that's
63:20 - 200. we ever wanted to make this you
63:22 - know
63:23 - 400 we'll give that a save
63:25 - and now it's 400.
63:27 - we go back to zero
63:30 - we give that a save
63:32 - you refresh and now it's at zero so it
63:34 - makes sense when you are fetching data
63:35 - from a server or from your Cloud
63:39 - environment or from AWS or you know
63:41 - really anything you really want to make
63:43 - sure probably that the value is zero or
63:45 - it's set to basically nothing and then
63:47 - you hydrate it with data so for us and
63:50 - our sake we probably just want this to
63:52 - be
63:53 - its original value as zero and then
63:55 - we'll use something called use effect to
63:58 - hydrate this data with
64:00 - actual
64:02 - an actual number from our database so
64:04 - that's great so now that we've added
64:06 - this footer component we can proceed to
64:09 - the next part which will be a pop-up
64:11 - modal with a button and we'll start
64:13 - configuring out how the front end Works
64:15 - to get that modal pop-up that we want
64:18 - for a component so that we can start
64:21 - clicking and getting our quotes one of
64:24 - my absolute favorite Frameworks to use
64:26 - is material UI they have a lot of these
64:30 - components that you can you know spin up
64:33 - and then you know use however you like
64:35 - but I really like their modal component
64:38 - because it's just so easy you can have
64:40 - this element here and then just have
64:42 - this pop up and you can actually just
64:44 - use this modal
64:46 - you know really as like its own
64:48 - component you don't necessarily need to
64:49 - click a button you could just have it
64:50 - open and then it sort of just fills over
64:53 - this so as something expands you still
64:57 - have the modal over that screen so I
65:00 - really like that and we're going to be
65:01 - using this in our application so what
65:05 - we're going to do is we're going to use
65:06 - npm to install these packages so I'm
65:09 - just on the mui.com material UI such
65:12 - getting started installation and that's
65:15 - where we'll be installing the mui
65:16 - material emotion react and emotion
65:18 - styled
65:19 - elements here so we go back to our code
65:22 - base
65:24 - we will open up another tab so we want
65:26 - to keep that running there
65:29 - we will do clear
65:34 - we're going to then install these into
65:37 - our package.json
65:41 - script and then these will install these
65:43 - packages in our node modules
65:46 - and then we'll be able to start building
65:48 - out our
65:51 - element
65:52 - so there's gonna be quite a lot of code
65:54 - that we are going to build here so let's
65:57 - dig in
65:59 - so when we are configuring our
66:02 - front end what we really want is we want
66:05 - to have
66:07 - this
66:08 - background which we already have
66:10 - gradient background right these images
66:12 - are just going to stay
66:14 - in the background so we'll just start
66:16 - labeling some of this stuff so it'll be
66:17 - background
66:19 - images
66:21 - and then
66:23 - we'll say footer
66:26 - and that stays there so now we want to
66:29 - do is we want to push
66:31 - some stuff uh basically over these
66:33 - images
66:34 - and we're going to build basically quite
66:38 - a lot of things so we're going to have
66:42 - a quote
66:43 - generator modal
66:47 - and then we're going to basically have
66:49 - this as a modal and then we're going to
66:51 - have some stuff over it so we're going
66:53 - to create a component called gradient
66:55 - quote
66:56 - generator
66:58 - modal
67:03 - and that is just going to be the pop-up
67:06 - as we call our script but we don't
67:09 - necessarily need to worry about that
67:10 - right now we're just going to comment
67:11 - that out and we'll worry about that
67:12 - later the next thing that we're going to
67:14 - do is we are going to and I'm actually
67:16 - going to indent these just a little bit
67:19 - easier to see
67:22 - something that we are going to build out
67:23 - next is
67:29 - quote generator modal actually we'll
67:31 - call it modal pop-up just so that it's
67:33 - easy to see
67:35 - and then this is the code generator
67:38 - and that's going to be the button that
67:39 - we call so we're going to need to have a
67:42 - quote
67:44 - generator container we're then going to
67:47 - want to have a quote generator
67:51 - inner container
67:53 - then we're going to want to have a quote
67:56 - generator title
67:58 - and this is going to be daily
68:01 - inspiration
68:04 - generator
68:06 - the title
68:08 - we're then going to have a subtitle so
68:10 - that's going to be quote
68:12 - generator subtitle
68:15 - and then
68:20 - I'm just going to copy this text in
68:26 - under the subtitle here
68:30 - and I'll just do that so
68:33 - I just thought it would be you know a
68:34 - fun you know description of looking for
68:36 - a slash of inspiration generator code
68:38 - card with transformational quote card
68:40 - generated by and then I have again that
68:42 - same footer link component that's the
68:44 - link component style link component that
68:46 - we referenced earlier in the footer
68:48 - I linked to Zen quotes and then I list
68:52 - the Zen quotes API and I sit there so
68:54 - just to give a little bit of a
68:57 - perspective ons and quotes
68:59 - so what they are they are a really easy
69:03 - to use API you can use it for free they
69:06 - also have a you know a paid version if
69:08 - you ever were needing you know like a
69:11 - lot of requests but uh with this is just
69:14 - uh you know just like a a project that
69:16 - we're building out so we don't need to
69:17 - use you know an API key or anything like
69:19 - that so what we're able to do is just
69:21 - use
69:23 - their API their URL to then call the Zen
69:28 - quotes API and then get a random quote
69:30 - back so these are some of the people
69:32 - that you can get quotes from and then
69:34 - you could also you know browse quotes by
69:36 - keyword they just have a lot of built-in
69:38 - functionality and it's really easy to
69:40 - just
69:42 - you know hit this API and which we'll do
69:45 - in a little bit and then actually
69:46 - generate a random quote so pretty cool
69:50 - and we'll show exactly how to do that
69:52 - but yeah major shout out to Zen quotes
69:54 - for providing this free utility for
69:56 - random quotes
69:58 - so that's how we're going to be getting
69:59 - our random quote and I'm just giving you
70:03 - know accreditation twos and quotes for
70:05 - providing this as a service
70:07 - next up we're going to create a button
70:11 - so under
70:13 - subtitle we're going to create a button
70:14 - so we're going to do
70:16 - generate quote button
70:20 - and then we're going to include some
70:22 - button text so we're going to do
70:23 - generate
70:26 - quote button text
70:30 - and that's going to have an on click
70:32 - function but we're just going to make
70:34 - that
70:35 - go to a null function just for now just
70:37 - as a placeholder
70:39 - this is going to say make a quote
70:43 - and then that's the text
70:45 - that's the button that closes it out we
70:48 - got the inner container and then we have
70:49 - that
70:50 - so that's pretty much all that we have
70:52 - here and I'm just going to move these
70:54 - out just a little bit
70:57 - just for spacing's sake and now we can
71:01 - start attacking some of these components
71:04 - so what we're going to do is
71:06 - we're then going to start going to these
71:09 - from the top so there's gonna be quite a
71:11 - lot of styles that we're going to be
71:12 - referencing in this so that's why we are
71:16 - going to have split screen
71:18 - so there's a style that is becoming
71:21 - really popular with a lot of you know
71:24 - like Innovative Tech Cutting Edge tech
71:26 - companies called glassomorphism and I
71:29 - found a really great website that I'm
71:32 - going to show in a second but this is
71:34 - how I'm going to be getting the
71:37 - inspiration to style these different
71:40 - components so if you go to hype4.academy
71:45 - they have this glassomorphism generator
71:48 - for making basically the styles for a
71:51 - div so it's really awesome because what
71:53 - you can do is you can adjust the
71:55 - blurriness so you see sort of this
71:57 - background image gets blurrier
72:00 - can also adjust the transparency so how
72:03 - transparent something is
72:05 - so if you had like no blur and then it's
72:08 - transparent you can kind of see over it
72:10 - or if you want to add the image and then
72:12 - you add blur you can see how it's
72:13 - adjusting those ones and you can also
72:16 - make it a different color so if you want
72:18 - to make it red let's make it blue
72:21 - I want to make it you know like
72:22 - different types of colors of the rainbow
72:23 - you could do that and then you could
72:25 - adjust the blurriness adjust
72:27 - transparency and then you just copy the
72:30 - CSS here and then you could import those
72:32 - directly into your application so we're
72:35 - going to be using those types of styles
72:37 - with
72:38 - a few twists
72:41 - so the first one that we're going to
72:42 - create is the quote generator container
72:45 - so exsc
72:47 - for our style component we do
72:49 - co-generative container and then this is
72:51 - of course going to be a div
72:53 - and then we're going to be copying a
72:56 - whole bunch of these Styles here
73:01 - which I'll just copy to save some time
73:08 - so we have a Min height of 350 this is
73:12 - going to be
73:13 - creating the height and the width we'll
73:16 - then do
73:17 - um basically like a minimum height and a
73:20 - minimum width and then just a height and
73:22 - a width so this is as the screen is
73:24 - expanding or decreasing we're going to
73:27 - be having sort of this minimum bound and
73:29 - then this upper bound to work within and
73:32 - then we're going to have a border of two
73:33 - pixels we're gonna have a border radius
73:35 - to round out the edges and then we're
73:37 - going to be putting this in the middle
73:38 - of the screen so this is in the middle
73:40 - of that background that has the
73:43 - animation of the color switching and
73:46 - then we to actually get this to
73:49 - go exactly in the center we're going to
73:51 - do top 50 left 50 and then we do this
73:54 - transform translate manipulation of
73:57 - minus 50 minus 50 with a position
73:59 - absolute so this is a way that you can
74:01 - Center a div within a div so it's a
74:04 - pretty handy trick and then Z index is
74:06 - going to be above the background and
74:09 - then this is that glassomorphic style so
74:11 - this is a specific uh you know shade of
74:14 - dark Indigo purple and then this box
74:18 - Shadow will sort of
74:20 - add kind of this like glassy outer
74:23 - effect
74:24 - we then have this backdrop filter which
74:27 - is a blur and then a backdrop filter as
74:29 - well which is a blur and then border
74:31 - radius of 10 to round out the edges and
74:33 - then we have a border there so this is
74:35 - that style for the quote generator
74:37 - container we're then going to do as I'm
74:39 - sure you guessed it rewrite that import
74:42 - with enter then we're going to do the
74:45 - next one we're going to do
74:47 - exsc again
74:49 - we'll put this one in there we're going
74:51 - to do div
74:54 - and then we're going to
74:56 - add some more Styles in here so for this
74:58 - one
75:00 - we're going to do top 50 left 50 again
75:03 - that transfer and translate manipulation
75:06 - position absolute with 100 so what we're
75:09 - doing is we have this background we're
75:12 - creating this in the middle of that and
75:16 - then we're going to then have another
75:18 - div in the middle of this and you'll see
75:20 - why we layer it this way but sometimes
75:22 - if you want to have something centered
75:24 - within something that's also centered
75:26 - this is a way that you can have a div
75:28 - within a div over another div and then
75:31 - that's how you can
75:32 - have more of these balanced
75:37 - Styles and ordering so again we import
75:41 - that directly there now for the title
75:44 - I'm going to do exsc again we'll do that
75:48 - for the title
75:50 - for title again it's going to be style
75:52 - of div
75:53 - and we're going to be copying some more
75:55 - Styles here
75:58 - and what we're doing here is we are
76:01 - making the font family this permanent
76:03 - marker font size of 50 text align make
76:06 - the text in the center there's going to
76:08 - be a color
76:10 - for text being white we're going to have
76:12 - this padding of you know 0 20 pixels
76:15 - 0-20 pixels and you'll see why that
76:18 - padding matters and also for the
76:21 - position we're going to have that
76:22 - relative so it's going to be you know
76:24 - centered at the top and then if the
76:28 - screen has a max width of 60 pixels then
76:31 - the font size is going to decrease by 20
76:33 - pixels so it's going to go from 50 to
76:35 - 30. and that's really important because
76:37 - when you have screens changing you also
76:41 - have to think about how readable is the
76:43 - text and you might need to make
76:44 - something smaller you might need to make
76:46 - something you know go on a second line
76:48 - so these are just considerations and
76:50 - what this is called is a media query
76:53 - so send it in some media query so what's
76:56 - awesome about Stealth components is that
76:57 - you can have these media queries wrapped
76:59 - into these different components and then
77:02 - you could have this all Impact
77:04 - everything that's within this div which
77:06 - is awesome
77:07 - so now we will import this
77:11 - which is great now we just need to work
77:14 - on the subtitle so we'll do exsc again
77:18 - we'll get subtitle
77:20 - and we're going to add some more Styles
77:24 - here
77:24 - this of course is going to be another
77:26 - div
77:38 - which is there and then text color is
77:42 - going to be white font family caveat
77:45 - font size is 35 position is relative
77:48 - width is 100 text align Center padding
77:52 - similar Styles except now this is going
77:55 - to be a little bit smaller so we're sort
77:56 - of making this as subtitle text which
77:59 - has a different font and is also smaller
78:03 - and then we will import this we will
78:07 - import
78:08 - that
78:09 - like that
78:11 - and then we're going to work on this
78:13 - quote button
78:17 - so e x s c again redo this we'll make
78:20 - another div
78:24 - and I'm sure you probably guessed it
78:25 - that we could be just using a button but
78:29 - I do like styling
78:31 - these in a custom way just because it
78:33 - gives you a little bit more granularity
78:35 - of what you're doing with the Styles and
78:37 - it gives you a little bit more control
78:40 - so there's quite a lot of styles going
78:42 - on to this button but at a high level
78:45 - we're going to be having some
78:46 - glossomorphic effects here which you
78:49 - know you might recognize from the top
78:50 - before but we're going to give the
78:52 - button
78:52 - 100 pixels as the height 300 pixels as
78:56 - the width is going to be a border around
78:58 - them there's gonna be a border radius
79:00 - margin top is 20 pixels so that makes it
79:03 - a little bit
79:04 - um down from the top there's gonna be a
79:06 - position relative there's a transition
79:09 - so this is what we're going to be doing
79:11 - so as there's a hover effect we want to
79:13 - be using this 0.2 second
79:16 - ease in ease out effect
79:17 - when you hover over it or basically when
79:20 - you want to click on it we're going to
79:21 - have this pointer
79:22 - now so we're going to change from you
79:25 - know just like the normal clicker to a
79:26 - pointer
79:27 - um it's going to be top 20 pixels and
79:30 - then the margin is auto transform origin
79:33 - is Center so this is how we're going to
79:34 - be centering this inside of the div
79:38 - and then we give this this glossomorphic
79:41 - effect so that's these Styles here
79:43 - so you know pretty similar to the other
79:46 - ones that were above and then the on
79:48 - Hover so this is how you do on Hover
79:50 - effects and styled component so
79:54 - when you do that so that you apply this
79:57 - class and then you have a filter there's
80:00 - a transition there's a transform so it's
80:02 - going to get a little bit bigger as you
80:04 - hover over it the brightness is going to
80:06 - increase by three times and there's also
80:09 - this will just stay in the center
80:12 - so we will import this
80:17 - and then we just need to do the text and
80:20 - that should round out the last of our
80:22 - Imports for style components so again
80:24 - exsc
80:26 - we're gonna do button text
80:29 - so this is going to be the text that's
80:30 - inside of the button that's centered so
80:33 - we're going to do div
80:35 - once more
80:36 - and then
80:38 - we're going to
80:42 - give this some Styles so the text color
80:46 - is going to be white font family is
80:47 - going to be caveat uh font size is going
80:50 - to be 35 pixels we're doing that left
80:52 - top transform Translate
80:54 - uh you know star manipulation to make it
80:57 - in the center with a position absolute
80:59 - the width is going to be 100 and that's
81:02 - going to be that the text div is 100 of
81:05 - the button that it's within and then
81:07 - this hexa line is centered so the text
81:08 - is going to be in the center
81:11 - so we'll import that
81:14 - and it's probably not going to like the
81:16 - fact that we have on click but that's
81:18 - okay for now
81:19 - we'll see if typescript complains about
81:21 - it too much
81:23 - but hopefully should be
81:26 - able to be okay
81:28 - so what I'm going to do is I'm going to
81:32 - switch back to our previous window here
81:35 - and let's see what we got
81:37 - so this is starting to look like a real
81:40 - application so what I really like about
81:42 - this glossomorphic effect is that as we
81:45 - make this smaller this becomes much more
81:49 - Dynamic and this is really clean I think
81:52 - if you are building you know portfolio
81:54 - projects or anything for work being able
81:57 - to show this level of detail to your
82:00 - build I think is hands down game
82:02 - changing because it also shows that
82:05 - you're really thinking about as the user
82:08 - is on different devices especially
82:09 - considering how mobile we all are being
82:13 - able to have that consideration around
82:15 - styles to say hey we have this desktop
82:19 - application but then we can also make it
82:21 - mobile these are skills that will pay
82:22 - dividends down the road for you and of
82:25 - course we see that on Hover effect that
82:27 - looks really clean and as we hover over
82:29 - the colors changing there's that little
82:31 - bit of glow and of course we see that
82:33 - and if we open up Zen quotes we see how
82:36 - it opens up in another tab
82:38 - which is exactly what we wanted to do
82:39 - with that Target blank and this is
82:42 - looking pretty cool so far so again we
82:44 - got that glossomorphic effect where it's
82:46 - blurring out the images in the corner
82:48 - and as these move you see that
82:50 - glossomorphic effect moving over it so
82:53 - this is looking like an application and
82:55 - I'm really happy with what we have so
82:57 - far and as we continue the rest of this
83:00 - build once we click make a quote we're
83:03 - going to then have a modal pop-up and
83:05 - that's going to manage some State and
83:08 - then that's where we're going to be
83:09 - interfacing with the cloud and then
83:11 - getting an image back so you'll see how
83:13 - we'll do that in the next part of
83:16 - the build so as we start working on our
83:19 - full stack project I do think that it's
83:21 - helpful to do a lot of deconstructionism
83:25 - when it comes to building out parts or
83:28 - components so a methodology that I've
83:31 - found really helpful is using an online
83:34 - IDE like code sandbox to build out
83:37 - scripts build out components build out
83:40 - certain elements before we Institute
83:42 - that or Implement that into our
83:45 - application so when we are clicking this
83:49 - button obviously this button isn't
83:50 - linked to any functions right now but
83:52 - when we call this we're going to be
83:54 - calling our API to run a Lambda script
83:58 - to do something and then send that back
83:59 - to our front end so we don't have this
84:03 - script configured yet but it would make
84:05 - sense for us to be thinking about this
84:08 - before we start implementing it because
84:10 - when we are waiting to get data back
84:12 - from Lambda we're going to need to have
84:14 - some sort of use state for based are we
84:17 - fetching data is something loading did
84:19 - something complete and did the function
84:22 - finish running what we called it to do
84:24 - so this is where it makes sense for us
84:27 - to sort of Park our front end and then
84:30 - move to working on the back end and when
84:34 - we think about deconstructionism what we
84:37 - can do is that we can create a code
84:39 - sandbox
84:41 - IDE it's an online editor but it allows
84:45 - us to write node.js we could you know
84:48 - create a Docker instance we could use
84:50 - Dino view react uh they have rust they
84:54 - have python they have Astro
84:57 - T3 app they have next Js
85:00 - they have almost anything nuxed they
85:03 - have literally everything you could ever
85:04 - do they have a node HTTP server view
85:07 - three
85:08 - svelte Gatsby like they have remix they
85:11 - have literally everything so what we
85:13 - want to do is we want to create what
85:16 - will become our Lambda server but we
85:19 - want to test it out in node.js before we
85:21 - actually start implementing it
85:22 - so when we do create IDE
85:26 - we then start this up and what we'll do
85:28 - is we'll title this so I'm going to name
85:30 - this
85:33 - to inspirational quote generator
85:37 - right there
85:40 - we'll save that and that automatically
85:42 - Auto saves
85:46 - did that there
85:47 - and then we'll just do a quick refresh
85:49 - just to make sure that it's saving
85:51 - correctly which it seems like it is so
85:54 - now when you spin up your code sandbox
85:58 - IDE your node.js environment for the
86:01 - first time you can
86:03 - run your commands with just refreshing
86:05 - and it'll rerun the server let's say
86:08 - that we want to do hello code sandbox 2.
86:11 - we'll say that too we'll see
86:13 - hey friends
86:16 - welcome to this build
86:21 - we'll give that a save
86:23 - we'll do refresh
86:25 - and now we see hey friends welcome to
86:27 - this build so that means that it's
86:29 - working which is great so now we're
86:31 - going to do is we are going to start
86:32 - getting our hands dirty with building
86:35 - this script
86:37 - so just for some housekeeping purposes
86:41 - we are going to remove this
86:44 - and now it won't do anything because
86:48 - we're not calling it to do anything so
86:51 - what we're going to do is and I do think
86:54 - that this is a helpful exercise before
86:55 - you ever write any code for your script
86:58 - let's really think about what we
87:01 - actually need the script to do so we're
87:03 - going to need the script to do a couple
87:04 - of things but for starters we want to
87:07 - fetch our random quote
87:11 - for number two we want to basically turn
87:15 - those those quotes or that fetched quote
87:18 - into a series of lines which we're going
87:21 - to call this quote text so we're going
87:24 - to turn
87:25 - text of quote
87:27 - into lines
87:29 - which is going to be the quote text
87:31 - received
87:34 - and I'm going to make this just a little
87:37 - bit bigger
87:40 - the text just so that you all can
87:43 - see it there
87:46 - cool now for number three
87:49 - we want to
87:52 - basically create a line for our author
87:56 - so we have the text
87:58 - which is the uh
88:01 - I'm just going to make this a little bit
88:03 - bigger yet so
88:05 - we will have so we have the lines for
88:08 - our quote so the quote could be maybe
88:10 - one line two lines three lines or four
88:12 - lines and then the author is going to be
88:13 - aligned after that so you want to turn
88:17 - text of author into a line
88:25 - and that's the quote author
88:27 - then the fourth thing that we're going
88:28 - to need to do is add a quote image of
88:31 - some sort so add a quote image
88:35 - then for number five we want to turn all
88:38 - of these elements into a renderable SVG
88:43 - so we turn these elements
88:47 - into an SVG format
88:51 - and then to finish off the rest of the
88:54 - script we want to basically take that
88:56 - SVG
88:57 - SVG
88:58 - and then turn that into an image which
89:01 - we're going to configure an image as PNG
89:05 - here but we're going to need to have it
89:08 - as a base 64.
89:10 - string in Lambda
89:16 - which we'll worry about later you don't
89:17 - need to worry about that right now but
89:18 - what that means is that instead of it
89:20 - being an actual file it's going to be a
89:22 - series of characters that will resemble
89:24 - an image file which we'll get to in a
89:26 - little bit so that seems to be on track
89:30 - for what we're looking for and
89:33 - sometimes I find it helpful also just to
89:35 - save this in the readme file so if you
89:37 - want to edit your readme file you can
89:39 - just go in here we'll switch this out oh
89:42 - I think that's uh
89:45 - doing that again so I'll do
89:47 - inspirational
89:50 - quote generator app
89:54 - and then we'll have these as our
89:59 - readme element and then we'll just give
90:01 - that a save
90:03 - we'll switch back to reading so just so
90:05 - in case we ever need to reference this
90:06 - back we have the saved in another
90:08 - another spot
90:10 - okay so now that we have our steps here
90:15 - we're going to now start configuring our
90:18 - server so there's going to be a specific
90:20 - package that we're going to need to
90:22 - create and I'm going to create a
90:25 - terminal
90:26 - and we're going to make this a little
90:28 - bit bigger so we're going to need to
90:31 - install
90:33 - a couple of things so sharp is going to
90:35 - be a library that we're going to need
90:36 - for the image processing so we'll do npm
90:39 - I sharp and then we'll press enter
90:46 - and now we should see in package.json
90:48 - which is the sharp installed as a
90:50 - dependency which is great means that it
90:52 - installed correctly and then we're going
90:54 - to need to install a specific version of
90:56 - node fetch
90:57 - which is specifically version two so
91:00 - we'll do ntmi node fetch at 2.6.2 and
91:05 - this is very similar to what Lambda is
91:07 - going to need for this specific way to
91:09 - fetch data outside of the server using
91:11 - node.js
91:14 - so
91:16 - that is a great way for us to start
91:19 - working and you'll see here that now
91:21 - node fetches at 2.6.9
91:23 - and that means that we have that working
91:30 - when we're making these images we are
91:32 - going to want to pull a random set of
91:36 - colors for the background those are
91:38 - going to be just a random background
91:39 - graphic so what we're going to do is
91:41 - we're going to create so we're going to
91:43 - right click we'll do nude directory
91:46 - then we'll call this backgrounds
91:48 - and then we're going to drag and drop
91:51 - these that are from my computer here and
91:57 - we have these different colors that we
92:00 - drop into here so these are 750 by 500
92:05 - pixels resolution is 72 by 72 but where
92:09 - I got these was from this awesome
92:10 - website called uigradians.com and you
92:13 - get a ton of really great
92:16 - different gradients here and um
92:21 - you can just like pull in different ones
92:22 - and you can also see
92:24 - you know kind of like how they're made
92:26 - how they work and they even have ones
92:29 - that are like three colors too which are
92:30 - pretty cool
92:32 - and
92:33 - even like that it's pretty sick so
92:37 - what I did was I just found four that I
92:40 - really liked and then those became the
92:43 - backgrounds that I will call in the
92:46 - script so you can either use those or
92:49 - pull from your own
92:51 - but just make sure that it's that 750 by
92:53 - 500 pixel background size
92:56 - so then when we are working on our
93:00 - script we're also going to create
93:02 - another directory and we're just going
93:04 - to call this finals
93:06 - and that's just going to be where we
93:07 - store the images that get generated and
93:10 - those are going to be all the folders
93:12 - that we need to create
93:14 - so what we're going to do just to get
93:17 - this kicked off
93:19 - is we're going to call a few things so
93:22 - we're going to first of all call Sharp
93:25 - then we're going to call the zenquist
93:27 - API and then we're going to call fetch
93:28 - so that we can use node fetch to then
93:32 - color API so we're going to do these
93:33 - import statements
93:36 - at the top now actually I'll just do it
93:38 - at the top just because it'll be easier
93:39 - to see so
93:41 - cut sharp equals require
93:44 - and we'll call Sharp
93:48 - const API URL
93:50 - from Zen quotes So https https
93:56 - present quotes
93:58 - dot IO API random and that's the API
94:01 - endpoint to call Zen quotes's random API
94:06 - generator
94:07 - and then const fetch equals require
94:11 - node
94:13 - fetch
94:18 - all right so now we're going to create
94:20 - an async function
94:25 - called get random quote
94:28 - we're going to call this API URL here so
94:31 - API URL
94:33 - and then we'll start to create our
94:35 - function so we're going to create two
94:36 - variables so first one is going to say
94:41 - like what is and that's going to say let
94:43 - quote text
94:46 - be this variable and then this other one
94:48 - is going to be
94:51 - author name here
94:53 - and then that's going to be let
94:56 - quote author so it's gonna be the two
94:59 - variables that will change as we get
95:01 - data back
95:03 - so we want to validate
95:05 - response to the API
95:09 - in this step
95:10 - and we're going to do const response
95:14 - equals
95:16 - await fetch
95:18 - API URL which we'll just copy from there
95:25 - to do our quote data equals away
95:29 - response dot Json
95:32 - so we're going to take this response
95:35 - we're going to turn it into Json data
95:38 - and then put that into a quote data
95:41 - variable and then we'll do console.log
95:45 - quote data
95:46 - to log that out
95:53 - and we can actually try to see if we can
95:56 - call this right now
95:58 - so what we actually are going to change
96:02 - is this so I'm just going to call this
96:06 - API URL input
96:08 - just to differentiate API URL from there
96:11 - and there so then
96:15 - we're going to call
96:18 - get random quote
96:22 - with that API
96:25 - and then we'll see if we can restart
96:27 - this
96:29 - so as you can see we are able to get
96:32 - this data back which is really cool so I
96:36 - want to
96:38 - open up screen brush and just show you
96:41 - how this is working because this is also
96:45 - really helpful to think about when you
96:48 - call apis
96:49 - what is actually happening
96:52 - so when we have
96:55 - this data so this is going to be the
96:58 - quote data so that's quote text right
97:02 - there then the quote author is going to
97:05 - be right here
97:07 - and it actually creates this block quote
97:10 - you know kind of HTML block for you but
97:13 - we're not actually going to use that
97:14 - we're going to take these variables and
97:17 - use them in our own way but what we're
97:20 - doing is that you know we're calling
97:22 - this index.js file and then
97:26 - we're going to use fetch to use that API
97:29 - URL input so that's that you know http
97:33 - Zen quotes you know random API and
97:37 - that's when we're fetching the data out
97:39 - of that endpoint and that's going to
97:40 - they have their own function that's
97:43 - going to generate from their list of
97:46 - quote a random one for us to use and
97:49 - then we take basically that response we
97:51 - turn it into this Json structure which
97:53 - you see you know in this so that's that
97:56 - Json and that's where we'd be able to
97:58 - take you know dot Q or dot a and then
98:02 - use those in our
98:04 - in our graphic which you'll see and then
98:07 - the this is a specific input so this is
98:11 - just you know run this function with
98:13 - this specific input so then we take this
98:17 - which is the API URL and this is that
98:19 - API endpoint so it takes given this API
98:23 - input endpoint input
98:27 - um API endpoint input there we go we're
98:30 - able to then fetch that and then create
98:31 - a response and then map that into some
98:34 - Json that then we can use in our
98:36 - application we can actually run this a
98:38 - bunch of times and we'll get different
98:39 - quotes
98:40 - so that was one by Aristotle
98:42 - this is another one
98:45 - another one
98:48 - another one here
98:50 - we'll do one more so what's really cool
98:53 - about this is that it's running this
98:55 - random API generator and that's how
98:58 - we're able to validate that our get
99:00 - random quote function is actually
99:02 - working which is great so now we're
99:05 - going to keep plugging along with
99:08 - actually some of the image generation
99:10 - components as well but now that we have
99:14 - this function setup we're able to call
99:17 - that API endpoint and it's working now
99:20 - we're going to start working on some of
99:23 - the construction of the image and also
99:26 - validating the response out of the API
99:29 - so what we're going to do is we're going
99:32 - to then
99:33 - update these quote text and quote author
99:36 - variables and we're going to say quote
99:38 - text
99:40 - equals quote data
99:43 - that first object dot Q so that's going
99:46 - to be in the first item right this first
99:49 - object get the Q variable and then also
99:54 - quote author equals and we're going to
99:57 - do that same thing
99:59 - except make that a
100:01 - and we can also try logging
100:06 - these variables just to make sure that
100:08 - they are in fact working because that'll
100:11 - be important for us to see so if we do
100:13 - this we do refresh
100:16 - so I see that so I see a quote which is
100:19 - that and then the author is that
100:22 - we'll do another one
100:24 - so yeah so it seems like this is what
100:26 - we're doing so this is going to be
100:27 - really easy to to see where of course we
100:29 - have this Json data structure but now we
100:31 - have you know something that kind of
100:33 - looks almost like a graphic right you
100:34 - have your quote and then you have your
100:35 - author so this all works so we can get
100:39 - rid of those console log statements
100:41 - and we can proceed here so now we're
100:43 - going to construct our image so this is
100:45 - going to be the image
100:47 - Construction
100:50 - and these are going to be the quote
100:54 - elements and let us just make sure these
101:01 - these elements are a little bit better
101:03 - indented here
101:05 - okay cool
101:06 - so now under the image construction
101:08 - we're going to do a variable for width
101:11 - it's going to be seven
101:12 - feet
101:15 - I'm gonna make that a little bit smaller
101:17 - than the graphic
101:20 - and then you do const
101:23 - text equals quote text so the text for
101:27 - the graphic is going to be that same
101:29 - variable there
101:32 - and then we're going to do const words
101:35 - equals
101:39 - split we're going to add a space
101:42 - there and then we're going to be
101:45 - creating these line breaks so something
101:48 - that I found that is really important
101:50 - for this quote was that when I was
101:52 - generating these initially
101:55 - this long string oh this is going to
101:57 - error out
101:58 - um
101:58 - I'm actually going to not call anything
102:01 - so and then it should uh yeah it might
102:05 - just have an error but that's because I
102:07 - don't have anything there
102:08 - so what um what I originally was having
102:12 - was when I had that string running or
102:15 - actually we can
102:17 - comment this out uh comment that out but
102:19 - keep that running
102:22 - see if that runs yeah so
102:25 - where was this yep so in the quote so
102:28 - you have these lists of words so it
102:30 - would basically take the string and it
102:31 - would stretch it across the length of
102:33 - the graphic off of the um the left and
102:36 - the right so what we need to do is we
102:38 - need to be able to map a list of these
102:42 - words
102:43 - um basically in lines and then go to the
102:45 - next line and then map a few words and
102:47 - then go to the next line so that's where
102:49 - we're going to be adding some variables
102:51 - here
102:51 - so when we do const line break
102:55 - equals four and then let new text we're
102:59 - going to be constructing
103:00 - this
103:02 - sort of string manipulation so that as
103:06 - it goes to forwards then it breaks then
103:08 - it goes to forwards and then it breaks
103:10 - goes forwards and it breaks so that's
103:11 - going to be a way where we take
103:13 - basically this variable which we'll soon
103:15 - call T span element and then we're going
103:17 - to do basically this for loop on the
103:20 - number of words and the length of that
103:22 - and then increment over it and then
103:24 - create these line breaks as we go along
103:26 - so this was sort of a clever way in
103:29 - which I was able to you know put the
103:31 - text in the middle of the graphic create
103:33 - these lines and then iterate over that
103:36 - so that it's never more than four words
103:38 - on each line and then it'll you know cut
103:41 - out after a certain time so you'll see
103:44 - how we'll do that with this upcoming for
103:47 - loop with basically an if this then run
103:50 - this otherwise run this type logic so
103:54 - we're going to Define some t-span
103:56 - elements
103:58 - with four words each
104:02 - so what we'll do is we'll do let T span
104:04 - elements
104:05 - equal
104:08 - an empty string
104:10 - then we'll do four and we'll do let as I
104:14 - equals zero
104:17 - I is less than words dot length
104:22 - and then as I increments upwards
104:31 - we're then going to say the new text
104:35 - plus equal words
104:38 - I
104:39 - so as I is incrementing
104:43 - we'll add a space
104:46 - and then if
104:48 - we'll do I plus one
104:54 - divisible by line break
104:57 - line break
104:59 - equals equals zero
105:02 - we'll then make t-span element with t
105:05 - span
105:06 - elements
105:08 - plus equal and then we'll do a
105:14 - back
105:15 - Tick T span
105:19 - x equals and then this is where we're
105:21 - going to be adjusting the width
105:25 - here
105:27 - so I'm actually going to like make this
105:28 - like much smaller just because like we
105:30 - don't really need this right now I just
105:32 - wanna
105:33 - prioritize this for the screen
105:36 - so t-span and X is going to equal
105:42 - this variable of
105:45 - width divided by 2
105:49 - d y equals 1.2 em
105:54 - and then
105:56 - we'll add the new text in there
105:59 - and then we'll cut out the t-span
106:01 - element there
106:04 - and then backticks
106:06 - is there and then
106:08 - semicolon is there
106:10 - so then after that
106:12 - this new text is going to equal this
106:15 - empty string there
106:17 - and then we pass that back and then we
106:19 - say if new text
106:22 - does not equal
106:24 - it's empty string
106:27 - then t-span elements
106:32 - plus equals t-span and we're going to
106:34 - basically call the same thing again so
106:37 - I'm just going to copy that down here
106:43 - and it's going to be t-span x equals
106:47 - width divided by two
106:49 - Dy 1.2 em
106:53 - new text and then t-span there so that's
106:57 - going to be
106:59 - that construction
107:01 - and then we're going to console log
107:07 - the t-span elements just to see if we're
107:10 - getting this correct
107:15 - so let's just give this a save and then
107:17 - let's see how this works
107:19 - so I'm seeing that there's this t-span a
107:23 - person without a
107:26 - then that ends and the new one
107:29 - sense of humor is
107:31 - then like a wagon without
107:34 - Spring stilted by every
107:36 - Pebble in the road so that's great so
107:39 - this seems like this is all of the quote
107:41 - text elements that are all mapped in
107:44 - these t-span
107:48 - implements and then it's going to be
107:50 - every four word so remembering that you
107:51 - are a
107:53 - going to die is the best way I
107:56 - this is all basically four letter words
107:59 - trap of thinking you have something to
108:02 - lose
108:04 - and then confidence comes from Crossing
108:07 - thresholds and this is just one so this
108:09 - is really important because when you
108:11 - have a list of four you then need to
108:14 - make sure that any remaining words still
108:16 - go on that new line so that's when
108:18 - you're able to see
108:20 - in
108:22 - this for Loop here we want to make sure
108:25 - that as there's no more basically line
108:29 - breaks as in there's no more words that
108:32 - map to B4 we just add that new element
108:36 - basically the new text and then we add
108:39 - our
108:41 - uh basically these C-SPAN elements but
108:43 - it's only going to include
108:45 - one last one which is all the words that
108:47 - are remaining so that works out great so
108:49 - this is working which is awesome and
108:51 - then
108:52 - we're going to start working on the SVG
108:55 - image
108:56 - next up we're going to be creating the
109:00 - construction of the SVG
109:02 - so right after console logging those
109:04 - t-spin elements we are going to
109:07 - work on I'm going to
109:11 - just make sure that this is all
109:21 - habbed correctly
109:24 - so
109:27 - the construct
109:31 - PT
109:42 - so we'll do cons SVG image
109:46 - equals it will do backticks here so this
109:49 - is how we will do the mapping around the
109:52 - image so this is going to be SVG
109:56 - with
109:58 - and I'm actually going to copy some of
110:00 - this stuff just to make it a little bit
110:02 - easier to see mapped out so we're going
110:05 - to have this SVG with this width that's
110:07 - the same width that we mentioned up here
110:09 - with a height which we have up there
110:15 - and then we're going to copy
110:17 - these styles that we created
110:21 - here so the way that this is going to
110:24 - work is that we have basically when you
110:27 - have an SVG you can include Styles
110:29 - inside of this image kind of like a div
110:31 - and it's going to have
110:34 - these different elements so it's going
110:36 - to have a title which is going to have a
110:38 - fill it'll have a font size and it'll be
110:40 - bold we have this author Style
110:44 - we then have a footer Style
110:46 - and
110:47 - the author is going to be this size it's
110:50 - going to be bold as well with some
110:52 - padding and then the footer
110:55 - which is where we give an accreditation
110:57 - then we say it's you know it's by us and
110:59 - then quotes so that's going to have a
111:00 - different font size it's also bold
111:03 - different fill and it's going to be in
111:05 - the middle and that's how we'll be
111:07 - mapping out all the styles
111:10 - so next we're going to do is we're going
111:13 - to now have the elements of the actual
111:15 - image
111:16 - so right after Style
111:19 - and I'm going to just move this over a
111:21 - little bit there
111:23 - so then we're gonna have a circle SVG so
111:27 - the circle SVG is going to have
111:30 - a quote in there
111:32 - so this is the fill and you'll see here
111:36 - that this is where
111:39 - we'll we'll have a circle at the top of
111:41 - the screen
111:42 - then we're going to have some text for
111:45 - the actual quote so it's going to look
111:47 - like this but it'll have text
111:49 - and I'm going to just map over this just
111:52 - so that you can see it so there's going
111:54 - to be the circle
111:55 - and the circle has this positioning we
111:59 - then have this text
112:01 - which I will just
112:04 - span over so you can see
112:06 - so the text is going to be in the middle
112:08 - and it's going to be a quote like a
112:10 - single quote and it's going to have this
112:12 - font size of now this is going to be
112:13 - pretty big and it's going to have fun
112:15 - family and Veranda or verdana and then
112:18 - the fill is white so it's going to be
112:20 - this quote over this image and then
112:23 - that's how that's going to be working
112:26 - next up
112:27 - we're going to be working on
112:31 - the t-span elements being mapped along
112:34 - with the quote author so that's going to
112:37 - be this separate section here
112:39 - which we will put here
112:43 - and
112:47 - what we're going to do is I will just
112:49 - span to show you so we have this
112:52 - this G element
112:55 - and this is also
112:57 - um
112:59 - going to be some text here so
113:03 - the text is coming from there
113:06 - and
113:08 - what we do is we have this rectangle we
113:10 - have a width and that's where we're
113:12 - going to be putting the text inside of
113:13 - this rectangle and then the text ID is a
113:16 - little you know the last line of code so
113:18 - basically we'll have this width
113:22 - and then
113:24 - the last line of quote equals that
113:28 - all the texts in the middle
113:30 - and then the t-span elements go in there
113:33 - and then the quote author is going to
113:36 - go right after that
113:39 - then we're going to add a little bit
113:41 - more text here
113:48 - which you'll see in a second
113:51 - so right after this G group
113:56 - we're going to add a little bit more
113:57 - text here
113:59 - I'm just going to make the formatting of
114:01 - this just a little bit easier
114:03 - see
114:04 - so then the text for the footer is going
114:09 - to be that footer Styles so there's
114:11 - going to be some text it's going to be
114:12 - the width
114:13 - with the Y
114:15 - can actually move this up just to make
114:17 - it a little bit easier to see
114:22 - so
114:23 - in terms of this text we have the width
114:26 - we have the height
114:27 - and footer Styles is there and then we
114:30 - could say developed by and you could put
114:31 - your you know social media handle or
114:34 - your name and then we're just giving
114:36 - this accreditation to send quotes
114:38 - because they're providing this API for
114:39 - free so they say to include that in the
114:42 - graphic which we're doing
114:44 - so we can stay in compliance with them
114:46 - so then we're going to be closing out
114:50 - this SVG
114:52 - so
114:54 - well then
114:56 - say SVG is closed
114:59 - that is the backtick and the colon
115:04 - so that's quite a lot just for that SVG
115:07 - but now we're going to have an image
115:09 - with a circle with a quote we're going
115:11 - to have those C-SPAN elements the quote
115:13 - spanning across the screen down we'll
115:16 - have the quote author and then we'll
115:17 - have this footer with our name and the
115:21 - Zen quotes API
115:25 - credit two so now we want to do is we
115:27 - want to add those backgrounds in a
115:29 - random way so what we're going to do is
115:33 - we're going to say const or actually
115:36 - just say that add
115:38 - background images for the SVG
115:42 - creation
115:44 - so now when we do cons background images
115:47 - equals there's going to be an array and
115:50 - we're going to copy basically all of the
115:52 - paths in our backgrounds folder so
115:55 - that's what these are so these are going
115:56 - to be the different files and those we
116:00 - just have four of them so you'll see
116:01 - here that
116:03 - that's where they're coming from
116:08 - and that all looks good
116:10 - then we're going to choose a random
116:13 - image here I'm just going to make this
116:19 - a little bit there if so now when we
116:21 - want to select a random one we'll do
116:23 - const random index so pulling a random
116:27 - index from this list
116:28 - we're going to use the math dot floor
116:31 - and then we'll do math dot random number
116:36 - times
116:37 - background images
116:39 - dot length and this is an easy way to
116:42 - inject some Randomness into
116:46 - our
116:48 - function right here
116:50 - and then we'll do const selected
116:54 - background image equals background
116:56 - images
116:58 - random index
117:02 - there we go so now the selected
117:04 - background image is going to be one that
117:05 - we pick out of the background images
117:08 - with this random index so we get
117:10 - basically this random number
117:12 - for all these different backgrounds and
117:15 - then we're going to then make that the
117:17 - index that we select for our background
117:19 - images and then that will be the
117:20 - selected background so if you have more
117:22 - uh you know more backgrounds that you
117:24 - include here then this number will have
117:27 - more options to choose more randomly so
117:29 - you'll probably get you know more
117:31 - selections obviously from choosing that
117:34 - so then
117:36 - we're going to
117:39 - do some composition so we're going to
117:41 - composite this image together
117:46 - so that's gonna be the next step we'll
117:47 - do const time stamp
117:49 - equals new
117:51 - date and this is a way that we can get
117:55 - the actual date timestamp
117:59 - local date string which is that method
118:01 - and then we'll do replace and then
118:04 - there's this special set of characters
118:05 - that
118:07 - help to just make it all you know
118:12 - basically like checking for these
118:13 - characters and then if that's there then
118:15 - just insert that which is an empty
118:17 - string
118:18 - which you'll see why that's relevant in
118:20 - a little bit I'm going to do const SVG
118:23 - buffer equals and then we're going to
118:25 - use buffer as a image
118:28 - transformation Library this will be from
118:30 - SVG image and that SVG image is coming
118:35 - from
118:38 - this SVG that we're creating up there
118:41 - then we'll do const image equals await
118:45 - and then we're going to use that short
118:46 - package if you remember from earlier we
118:49 - imported that that's from there so now
118:51 - we're actually going to use sharp to
118:52 - generate this image so we'll do Sharp
118:55 - selected background
118:57 - image
118:59 - and then we're going to do composite
119:05 - and then there is
119:07 - this input
119:09 - which is SVG buffer
119:11 - which was that variable that we just
119:13 - called on line 97
119:16 - there is a top of zero there is a left
119:20 - of zero
119:22 - and
119:25 - we add some commas
119:27 - then we're going to do this command
119:30 - called to file
119:31 - we're going to say finals
119:33 - I'm going to say quote card quote card
119:37 - underscore
119:38 - dollar sign
119:40 - timestamp
119:43 - PNG
119:50 - and then we have closing bracket
119:55 - and then we call our API so we're going
119:58 - to see if
120:00 - hopefully this all runs and works
120:02 - correctly so let's see if that actually
120:04 - does happen
120:05 - so we'll do running
120:08 - and seems like we got something so let's
120:11 - see if this worked
120:12 - all right so
120:16 - let me just close this out for a second
120:18 - and so you'll see here that this is
120:22 - um this is basically trying to create
120:24 - this time stamp string
120:27 - and
120:29 - this is five uh
120:32 - five five twenty twenty three so this is
120:34 - May 5th 2023 so it's just including the
120:38 - the date
120:40 - um
120:42 - so this is a quote by Abraham Lincoln
120:44 - and that was just generated randomly so
120:46 - then let us try to
120:49 - do this again
120:51 - so we'll try to run it one more time
121:00 - and
121:02 - I think we probably want to
121:07 - have a different time stamp
121:11 - I do Wonder though
121:14 - how we can make this just a little bit
121:16 - differently so I think that's just
121:18 - because it's date so let's just try to
121:21 - change it to local string
121:23 - so two local string replace
121:27 - and we'll save that and then we'll try
121:29 - to run that again yeah there we go so
121:31 - now this is doing it also with time so
121:33 - this is the date and then also uh
121:36 - timestamp as well so now we have this
121:38 - different image and this is you know now
121:39 - Thomas Edison's this is a different
121:41 - quote we'll try to run this again
121:44 - and we'll get a different one
121:47 - we'll run this again we'll get a
121:49 - different one
121:52 - we'll run this again we'll get a
121:54 - different one
121:58 - we'll run this again and we'll get a
121:59 - different one and this is really cool
122:00 - because now we're able to just make all
122:03 - of these super super super quickly JRR
122:05 - Tolkien
122:07 - we'll keep running here hamster Anderson
122:09 - and this is awesome so this is
122:12 - creating this you know this choosing a
122:14 - random background it's taking this quote
122:16 - it's mapping everything and it's making
122:18 - it all in these graphics and these are
122:20 - all created through
122:22 - node.js
122:24 - so pretty cool and we'll just maybe
122:26 - let's just do one more for good measure
122:28 - cool and we'll leave on a good note with
122:31 - Eleanor Roosevelt so happiness is not a
122:33 - goal it's a byproduct of a life well
122:35 - lived very well said so this is great so
122:39 - we have our script now and this is
122:41 - running this is perfect so now we're
122:44 - gonna do is we are going to go back to
122:46 - our code which is here
122:48 - we are going to 100 save this but it's
122:52 - pretty much already Auto saving anyway
122:55 - and we'll just give a look over our code
122:57 - everything looks great
123:00 - and yeah now we're going to be able to
123:03 - take this and then put this on AWS
123:08 - Lambda
123:09 - with a little bit of refactoring here
123:10 - and there and then we'll be able to work
123:13 - with our front end to call our Lambda
123:15 - through appsync and then generate this
123:18 - image
123:19 - in a serverless Lambda server and then
123:22 - get that back in the front end but
123:24 - instead of it being an image we're going
123:25 - to do something called a basic C4
123:27 - encoded string which you'll see in a
123:29 - little bit but that's going to be a
123:30 - different way in which we actually get
123:31 - the image generated not as a file but as
123:34 - a string so it's going to be like a a
123:36 - ton of characters and that's actually
123:38 - how we will be able to map our
123:42 - our image to a string and then decode
123:45 - that in the front end
123:47 - now that we have our script to run and
123:51 - create our image something that we can
123:54 - now do is go back to the front end
123:57 - so in our application we're going to
123:59 - want to set up our Cloud environment
124:03 - and really set up all the services that
124:06 - we're going to be using and leveraging
124:08 - in AWS to then run that script and we're
124:12 - going to have a series of front-end
124:15 - listeners uh basically using our API
124:19 - endpoint to then listen for when we're
124:21 - generating the quote send a response to
124:23 - get the quote
124:25 - quote card and then get that response
124:27 - back and then show that in the front end
124:29 - so what we're going to do is
124:31 - we're going to check out the AWS amplify
124:34 - documentation so the amplify CLI is a
124:38 - very powerful CLI for deploying AWS
124:41 - resources for you know really a full
124:43 - stack software project and
124:46 - if you don't already have this installed
124:48 - I'm just assuming here but you do npm
124:50 - install
124:51 - you know G flag at AWS amplify.tli you
124:55 - can also use a curl command
124:58 - which
124:59 - looks like this
125:02 - and then also if you are on Windows it
125:05 - would look something like this
125:07 - and then you'd be able to install it
125:10 - on any of your devices but since we have
125:13 - already done this uh we already have the
125:16 - CLI installed
125:18 - we don't have to do the step so the next
125:20 - step if you haven't already done this is
125:22 - you should configure and amplify IAM
125:26 - user
125:27 - or really just an IM user for your
125:30 - amplify CLI so that amplify service can
125:34 - build the services that you want in your
125:36 - cloudformation stack and update your
125:38 - stack for you so when you add an API
125:40 - when you add a Lambda when you add
125:41 - storage when you add a database model
125:44 - you want to be able to have an IM user
125:47 - that can update or modify or delete
125:50 - resources in the cloud formation stack
125:53 - so I've already created an amplify I am
125:57 - user with the administer access amplify
126:01 - specifications but if you haven't you
126:03 - use amplify configure you'll it'll then
126:05 - walk you through all these processes but
126:07 - you'll create the name and then you'll
126:09 - set the permissions so they have this
126:10 - administer access amplify policy name
126:13 - which is a managed policy you attach
126:16 - that and then you're going to get a key
126:19 - value pair
126:21 - to then
126:22 - go to security credentials where you can
126:25 - get your access key and then you'll save
126:27 - that to your AWS credentials file
126:31 - locally
126:33 - so when you can retrieve your access
126:35 - Keys that's where you're going to have
126:36 - your access key in your secret access
126:38 - key and that's what will configure
126:40 - access for your application
126:43 - or for the CLI to be able to work with
126:45 - AWS so you'd be entering that in and
126:48 - then you'd be able to have that user and
126:50 - then when you run amplify init or
126:52 - amplify initialize that's where you'll
126:54 - be able to use this AWS profile to then
126:58 - launch your project
127:00 - or launch the cloudformation stack for
127:01 - your project so what we're going to do
127:03 - is we're going to go back here we're
127:05 - going to open up
127:08 - the terminal and I did this with the
127:10 - control and then the tilde button and
127:12 - what we're going to do is we're going to
127:13 - do amplify init
127:16 - and we're going to do that because we
127:18 - haven't already set up amplify in our
127:20 - project yet we are we're just starting
127:22 - out here so let's amplify net
127:28 - and I'll pull this up so it's
127:31 - recommended to run this from the root of
127:33 - your project which we
127:35 - which we are doing here because that's
127:37 - the root of this project and we're going
127:39 - to call this
127:40 - inspo quote gen
127:48 - or
127:50 - should we call that maybe in inspiration
127:54 - quotes
127:56 - yeah we'll call it inspirational quotes
127:58 - So then what's really great about the
128:00 - cli2 is that it already is able to know
128:02 - quite a bit about my project because
128:04 - it's checking out what I have so it
128:06 - knows that the environment is Dev I'm in
128:09 - Visual Studio code so this is actually
128:11 - the default environment but it knows
128:12 - that this is what we're going to want
128:14 - just to start out with
128:15 - um it knows that this is the JavaScript
128:17 - which is the appetite and we're using
128:19 - react which we are and then there's
128:21 - going to be a source directory that it's
128:23 - going to create with this AWS exports
128:25 - file and then these are going to be the
128:28 - builds commands so this all sounds great
128:31 - we'll say yes
128:33 - and then we're going to use this AWS
128:35 - profile as opposed to the access key so
128:38 - I'm going to choose the AWS profile
128:40 - and I'm going to choose the role that I
128:44 - have already set up for my amplify
128:48 - configuration to my AWS account
128:51 - so I'm going to press that and then it's
128:52 - going to start deploying these resources
128:54 - into AWS so it's going to start creating
128:58 - this cloud formation stack and then it's
129:00 - going to start deploying this to the
129:03 - cloud so I'm going to pause the
129:06 - recording now and then I'll restart it
129:08 - when the cloudformation stack is all set
129:11 - up in AWS
129:14 - now that our cloud formation stack has
129:18 - been pushed to AWS we just received uh
129:22 - some new things so let's go through our
129:25 - application and see what AWS and amplify
129:29 - provided for us so one of the first
129:30 - things that we'll see is a new directory
129:33 - in our route which is called amplify if
129:35 - we open this up there is a config with
129:38 - some
129:40 - local AWS info and some project info
129:42 - that's just scoped about the project
129:44 - also the current cloud backend so this
129:47 - is going to be the updates that you make
129:49 - locally and then it's going to compare
129:51 - the current stack local with the AWS
129:54 - stack in the cloud and then when you are
129:57 - adding a resource when you're updating a
129:59 - resource it'll compare the cloud version
130:01 - with your local version and then that is
130:04 - what actually is going to enable the
130:06 - ability for cloudformation to either be
130:08 - updated modified removing a resource
130:10 - adding resource those types of actions
130:12 - and then in the back end that's actually
130:14 - what your
130:16 - application is going to be doing so this
130:19 - is where you have your root cloud
130:20 - formation stack
130:21 - and you know you'd have all of these
130:24 - different you know variables and these
130:25 - different you know roles and that's how
130:27 - you're actually going to be able to
130:28 - deploy your root stack for AWS amplify
130:31 - CLI and then
130:33 - as you add resources you'll maybe see
130:36 - under backend API or auth or storage or
130:40 - other types of resources as well so
130:43 - that's the amplify folder in a nutshell
130:46 - and
130:47 - that's pretty much what we'll do so you
130:49 - won't really have to worry about doing
130:50 - anything in this we're using the CLI and
130:52 - it will be programmatically adding or
130:55 - updating or changing what's in this
130:57 - folder but we won't have to really worry
130:59 - any very much about that one thing that
131:02 - will be of important to note is that
131:05 - when we have SRC we have this AWS
131:08 - exports.js file and that's going to be
131:10 - how AWS
131:12 - sees our resources so this file is just
131:16 - a Json object of key value pairs between
131:19 - a service identifier and what that
131:21 - service is so when you call an API
131:23 - endpoint you need to know what the
131:26 - endpoint you know ID is for auth what's
131:28 - the auth default mode those types of
131:31 - things
131:32 - so when we have our AWS exports file
131:35 - we'll be able to then call that from the
131:38 - root of our application and then we'll
131:40 - be able to access amplify it and then
131:42 - you know appsync and Cognito and your
131:45 - storage and the databases and all these
131:48 - other types of calls to the AWS services
131:51 - so why don't we do that right now so
131:53 - we're going to add basically a few lines
131:57 - of code and we're also going to install
132:01 - some packages
132:03 - so when we are working with our
132:06 - next app
132:08 - so when we want to use JavaScript so
132:12 - they have different libraries and they
132:14 - also have a getting started here so
132:15 - under next.js
132:17 - if we go to prerequisite these are the
132:20 - steps that we have already taken
132:23 - and we've already done if I configure
132:25 - set up this so
132:28 - this is when you set up you know next
132:30 - application which is what we have
132:32 - already done we've already initialized
132:34 - amplify
132:35 - and we've already configured all of
132:37 - these things so we're going to take this
132:40 - import script so this is going to be
132:42 - installing the AWS amplify package that
132:45 - Addis amplify UI react
132:48 - so we're going to take this we're going
132:49 - to copy it
132:50 - I'm going to go back to our Repository
132:54 - we'll save that
132:58 - we'll do npm install address amplify
133:01 - like that
133:05 - we'll wait for that to install
133:08 - once the amplify packages are installed
133:11 - in our application
133:14 - we're then going to go back to
133:18 - the app
133:19 - .tsx files so this lives
133:23 - under pages
133:25 - there's this underscore app.tx
133:29 - TSX
133:32 - file
133:33 - and what we're going to be doing is
133:35 - we're going to be adding a few lines of
133:38 - code so
133:39 - under app props
133:42 - I'm going to add some AWS Imports
133:46 - so we're going to install or import what
133:49 - was just installed so the amplify API
133:51 - off and with SSR context
133:54 - and then AWS exports which is going to
133:57 - be this file that lives in the SRC file
134:00 - so is this was just generated for us
134:03 - so then we're going to then
134:05 - configure this and we actually
134:10 - probably don't need
134:12 - these elements so we can just delete
134:15 - those and then we're going to be able to
134:19 - configure amplify
134:22 - to then serve the whole application so
134:26 - this is really great because we'll be
134:27 - able to call our services that we add to
134:30 - the stack and you know have API and call
134:34 - IAM and all those those good things that
134:36 - we're going to need for our application
134:37 - so give this a save
134:40 - and the app will probably
134:43 - um reconfigure
134:45 - we actually check to make sure that it's
134:46 - not erroring
134:52 - give this a quick refresh
134:56 - and there's no errors so that's great
134:58 - that means that we are
135:00 - good so far
135:01 - so now we're going to do is we are going
135:04 - to work on some of the steps for
135:07 - building out our Cloud infrastructure
135:11 - so we've configured this locally now
135:14 - let's check out what's happening in AWS
135:18 - so you can go to the amplify service if
135:23 - you search for amplify in the search bar
135:25 - I have this as one of my pinned services
135:28 - but you'll need to go to the amplify
135:31 - service in the console in the Management
135:33 - console on the web and then you should
135:35 - see your
135:37 - app right here so I'm going to click on
135:39 - this and it's immediately going to pull
135:41 - up a bunch of data about our stack which
135:44 - is really great because when we start
135:46 - adding hosting we'll be able to
135:48 - configure the CI CD pipeline here and
135:50 - then we'll also see the back end
135:52 - resources that were deployed in our
135:54 - stack and we can see that this was
135:56 - deployed a little while ago so there
135:59 - isn't any resources associated with it
136:01 - yet other than just the amplify project
136:03 - that was configured for it and then we
136:05 - also have some general and some amplify
136:08 - Studio settings if we want to enable
136:10 - those we're not going to get into that
136:11 - right now but we could if we wanted to
136:13 - so now what we want to do is we want to
136:16 - add an API to our application so we'll
136:20 - switch back to
136:23 - our application and we will start adding
136:26 - the schema and API and the Lambda
136:28 - function for that as well
136:30 - so to add our API
136:33 - what we're going to do is we're going to
136:35 - open up
136:36 - our tab we'll just press clear
136:39 - or what we can do is since we just
136:42 - configured our application
136:44 - we actually have the suggestion of
136:46 - amplify add API so when you add services
136:49 - using the amplify framework it's
136:51 - literally as easy as amplify adds
136:53 - something so we do amplify add API
136:56 - and I'm going to but I'm actually going
136:59 - to clear this so I can make it
137:01 - a little bit bigger
137:07 - actually
137:08 - might be too big
137:09 - that should be big enough okay so we'll
137:10 - do amplify add API
137:14 - and then we're going to choose graphql
137:17 - and for authorization modes uh we're
137:21 - gonna actually need to configure certain
137:24 - aspects of the flow so we're actually
137:27 - going to enter here
137:28 - and we want iam
137:32 - and configure additional auth types uh
137:35 - we can say yes
137:37 - so it might be good to also configure an
137:39 - API key in case we you know end up
137:42 - needing that if we wanted to do
137:43 - something in appsync uh there's
137:46 - different you know options but you could
137:48 - also you know utilize Cognito as a user
137:51 - pool also open ID connect if you wanted
137:53 - to connect to a third-party provider and
137:55 - then also Lambda if you wanted to do a
137:57 - Lambda authorizer or Lambda
137:59 - authenticated
138:03 - provider so we're just going to click
138:05 - API key and a description so
138:07 - um API key
138:10 - for inspirational quote generator
138:18 - and we'll just use the default which is
138:20 - seven for days API key should expire
138:24 - and that looks about right so we're
138:28 - going to press continue
138:30 - and when you are configuring a schema
138:33 - this is um it'll give you a couple
138:36 - different options that you can pick from
138:38 - but I do think that since we're going to
138:42 - be configuring our own custom schema
138:43 - anyway it makes sense to just say single
138:46 - object with Fields but this is also
138:47 - sometimes helpful if you want to see
138:48 - other types of configurations but we'll
138:51 - do single object with this and then you
138:54 - want to edit your schema now yes but
138:56 - we'll see that this is already
138:57 - compiled correctly so it'll already Auto
139:00 - open up into
139:04 - our window here in vs code
139:07 - so this is great and right away we
139:10 - already see that we can configure some
139:12 - scalar types and then we'll be able to
139:14 - add
139:16 - scalar types to our scalar values which
139:19 - is right here and then we'll be ready to
139:21 - rock so first of all we can just cancel
139:24 - out this input amplify because we don't
139:26 - need it this is configuring an auth rule
139:29 - of global access for everything so we
139:31 - want to turn that off and make sure that
139:32 - if we go into production that this isn't
139:34 - on and I do also just want to unpack
139:37 - what the iam
139:39 - was when we
139:42 - have I am so something that is going to
139:45 - be important is for us to add
139:47 - authentication so when we are using IAM
139:51 - enabling public access to our API
139:53 - endpoint and we're going to need to
139:56 - allow uh basically access to use
140:01 - this API because we're going to give it
140:02 - an auth directive so we're going to
140:05 - configure some schema and then we'll add
140:07 - the auth directives on top of that
140:11 - so when we go to the backend folder
140:15 - and then in schema
140:18 - we are going to configure a couple of
140:22 - things
140:22 - so the first thing that we're going to
140:25 - create is a query so we're going to
140:27 - actually delete all of this and we're
140:29 - going to start from the top so there's a
140:32 - few things that we need so we need a
140:33 - query we need a way to
140:37 - speak to Lambda
140:40 - we need
140:42 - some sort of public data
140:46 - and for this query we're going to need a
140:49 - Lambda function so we know that we need
140:51 - these elements
140:54 - in our
140:55 - database so what are we going to do so
140:58 - we're going to do type query
141:01 - we're then going to give this
141:04 - basically a name so we're going to say
141:07 - generate
141:08 - a quote
141:10 - and then that's going to have an input
141:11 - of AWS Json
141:15 - and the input is a string type
141:18 - and we're going to have an auth
141:19 - directive with rules
141:22 - and this is going to allow
141:26 - Public Access with a provider of IEM
141:32 - and then
141:34 - that's it for the auth directives and
141:37 - then we're going to call a Lambda
141:39 - function so its name is going to be
141:41 - inspo
141:45 - quote
141:49 - in Spoke quote
141:51 - Lambda
141:54 - and then we're going to attach
141:59 - the
142:04 - Cloud Branch name to that
142:08 - so that we're going to be able to append
142:11 - Dev so it's going to be inspo quote
142:14 - Lambda hyphen Dev and then that's going
142:17 - to allow us to work from many different
142:19 - Cloud backends as we
142:22 - continue moving along
142:26 - and if you ever wanted to have you know
142:28 - like a test Cloud environment or a
142:30 - production Cloud environment this
142:32 - function would still be able to be
142:33 - called but through those different
142:35 - branches so it's a really great way to
142:36 - allow
142:38 - accessibility across your code base and
142:41 - also call functions you know at
142:43 - different stages of your Cloud build the
142:46 - next thing that we're going to configure
142:47 - is
142:48 - the public data so we need a public data
142:52 - object to be able to see how many quotes
142:55 - are being generated every time that you
142:58 - know someone runs a quote we want to be
143:00 - able to track how many quotes were
143:02 - generated for the entire application
143:04 - so I'm going to say type quote
143:07 - app test
143:09 - we're going to do at modal and this is
143:11 - going to configure a dynamodb table for
143:14 - this
143:16 - type and then we do off
143:19 - we'll say rules and we'll give it some
143:21 - auth rules
143:22 - we're going to say that we're going to
143:24 - allow Public Access
143:26 - with a provider of IM with the
143:30 - operations to read without anything else
143:33 - so we just want people to be able to
143:35 - read
143:37 - this value the value of this database
143:40 - point but we don't want them to be able
143:41 - to you know update or delete
143:44 - or create new objects we're just going
143:45 - to create one ourselves so this is going
143:47 - to have an ID ID and this is going to be
143:49 - the
143:51 - partition key slash primary key
143:54 - we do query name
143:56 - that's going to be a string
143:58 - and
144:00 - we're going to have quotes generated and
144:04 - that's going to be an integer
144:06 - we're then going to have a created at
144:09 - string
144:10 - and also an updated at
144:13 - string and the bang Operator just means
144:17 - that it's a mandatory field and
144:19 - something that we're going to do is on
144:21 - this query name we're going to enable a
144:24 - global secondary index or GSI and what
144:27 - that means is that usually when you have
144:30 - a database you could just find the
144:32 - identifier of
144:34 - that item in the database and then you'd
144:36 - be able to pull that but one of the
144:38 - really great benefits of dynamodb with
144:40 - nosql is that we're able to configure
144:43 - secondary indexes to query our data more
144:46 - effectively so if you wanted to query by
144:48 - a unique name in another field such as
144:52 - quotes generated or query name you'd be
144:55 - able to configure that so what we'll do
144:56 - is we'll say index
144:59 - we'll then say name
145:00 - and we're going to give it
145:02 - quote
145:04 - query name
145:06 - and then
145:08 - query field
145:11 - quote query name
145:14 - so this will allow us to find
145:18 - this object based upon just
145:21 - querying for
145:23 - quote query name
145:25 - so that's great
145:27 - and can actually just remove
145:32 - core app and we'll just say core app
145:34 - data
145:42 - cool
145:44 - and
145:47 - we'll just name that to be consistent
145:50 - so that should be pretty good in terms
145:54 - of this now something that we know we're
145:57 - going to need is auth rules so we're
146:00 - going to temporarily
146:03 - just hide that and then we're also
146:06 - temporarily going to hide this because
146:08 - we have not set up any sort of
146:11 - authentication yet
146:12 - so we're going to save this
146:14 - now what we're going to do is we're
146:16 - going to do amplify
146:18 - add off
146:20 - so this is how we're going to configure
146:21 - authentication for
146:24 - our application so with the default
146:27 - configuration we'll press enter
146:29 - so as we are setting this up we are
146:32 - going to select a username for how users
146:35 - will sign in
146:37 - and you want to configure advanced
146:40 - settings we're going to say yes
146:42 - so the only required
146:45 - option that
146:48 - we want to really focus on just right
146:50 - now is for email you could configure
146:52 - more options if you wanted to but we're
146:53 - not going to focus on that and we're
146:55 - going to
146:58 - not worry about any of these right now
147:05 - but what we will do is we'll do amplify
147:08 - update off
147:12 - and then we're going to walk through all
147:14 - the auth configurations
147:16 - and how do you want users to sign up uh
147:20 - we want to use user sign up signing
147:22 - connected with IAM controls
147:27 - there's really only you know two options
147:29 - so this is the one that we're going to
147:30 - select and this is the major one that we
147:33 - want to focus on do you want to allow
147:35 - unauthenticated logins provide scope
147:37 - information so you can control via AWS
147:39 - Im so this is very very important and
147:43 - this is actually referenced in the
147:46 - documentation so
147:49 - I will pull that up in one second
147:54 - so
147:56 - in the Authentication
147:59 - modules I'm going to focus on this so
148:02 - this is under the authorization modes
148:05 - for a graphql API with appsync so
148:09 - when we are using AWS IEM to access a
148:13 - public API or the access public endpoint
148:18 - we need to make sure that
148:19 - unauthenticated logins are enabled and
148:22 - this is where we're doing that update
148:24 - auth command to then walk through all
148:26 - the auth configurations so this is
148:28 - really important because this allows IAM
148:30 - to then do a handshake with the API and
148:34 - do basically public authentication if
148:36 - required so that's a really important
148:38 - aspect of the authentication
148:40 - configuration that we need so we're
148:42 - going to say yes for that
148:45 - and you do want to enable third-party
148:47 - authentication providers in your
148:49 - identity pool we can say no because
148:51 - we're not going to configure anything
148:53 - like Google or you know sign in with
148:55 - Facebook or those other things and you
148:58 - want to add a user pool group uh we can
149:02 - say no to this
149:04 - and do you need an admin queries API you
149:08 - can say no
149:09 - multi-factor authentication we can say
149:11 - that that's off but this is a great
149:14 - option if you wanted to enable this for
149:16 - users in your application
149:18 - and user based forget my password
149:22 - um yeah we can just keep that as enabled
149:25 - as the default and then the email
149:27 - verification subject
149:29 - we will just keep that basically as the
149:32 - default so enter enter and then we'll do
149:36 - enter
149:38 - and then default is for 30 days and you
149:40 - want to specify user attributes because
149:42 - this the default is no
149:44 - and you want to enable any of the
149:45 - following capabilities I will just press
149:48 - enter and you know what to use and oauth
149:50 - flow we could say notes we're not using
149:52 - anything with
149:53 - oauth and you want to configure Lambda
149:55 - triggers for cognito
149:57 - say no
149:59 - so now if we do amplify
150:03 - status
150:05 - this is a great feature so we can see
150:07 - all the aspects of
150:09 - our cloud formation
150:12 - stack and waiting so these are create
150:15 - option operations for a new API and a
150:18 - new authentication with Cognito setup
150:22 - so this is great now what's left is
150:27 - creating this amplify
150:30 - add function to then create the Lambda
150:32 - function
150:34 - and that is how we're going to be
150:36 - running the function to generate a quote
150:38 - so this is how this is going to happen
150:39 - serverlessly
150:41 - now to add this Lambda function that we
150:45 - are going to be calling in our query
150:47 - we can easily add a Lambda function to
150:50 - our project with amplify add function
150:58 - and we are going to configure Lambda
151:01 - function you can also deploy Lambda
151:03 - layers but we're just going to deploy a
151:05 - Lambda function here
151:07 - and we're going to give it a name so
151:08 - we're going to call it inspo quote
151:10 - Lambda
151:12 - and this is going to be a node.js
151:16 - environment but you could also configure
151:18 - it with net go Java or python
151:22 - and we can configure a whole bunch of
151:25 - different options such as appsync
151:27 - graphical API we can do crowd function
151:29 - for Dynamo we could just have a graphql
151:32 - Lambda authorizer Lambda Trigger or
151:35 - serverless Express function
151:37 - that's also configured through API
151:39 - Gateway but we are just going to use the
151:41 - hello world template
151:43 - and do you want to configure advanced
151:46 - settings we are going to just say no for
151:49 - now
151:51 - and you want to edit the local Lambda
151:54 - function now we'll say yes
151:57 - and then we'll press enter
152:00 - all right
152:01 - so now if we open up our stack
152:04 - do amplify status of what we are going
152:06 - to be pushing to the cloud
152:08 - so right now we have an API we have auth
152:11 - and we have function so what we want to
152:14 - be able to do is run these to the cloud
152:17 - and then we can start to configure some
152:19 - of the fancy stuff so right now
152:22 - we're going to be able to create a
152:25 - integration between our API and our
152:27 - Lambda function and then we're what
152:29 - we're going to do is we're going to then
152:31 - create a relationship between that
152:33 - Lambda function and the dynamodu table
152:35 - that gets created because every time
152:37 - that this function runs successfully we
152:39 - want to configure this quote app data a
152:44 - specific object in this data table we're
152:47 - going to want to increment the quote
152:49 - generated by plus one so that's where
152:51 - we're going to configure resource access
152:53 - so that Lambda can speak to this
152:55 - dynamodb table but these resources need
152:57 - to be created and then live in AWS
152:59 - before we can start dynamically calling
153:02 - these programmatically so what we're
153:04 - going to do is we are going to run
153:07 - amplify
153:08 - push
153:10 - and that is what is going to take these
153:12 - create operations and then push this
153:14 - right to the cloud so it's going to ask
153:17 - are you sure you want to continue we're
153:18 - going to say yes to deploy to our
153:20 - current environment Dev
153:25 - and you want to generate code for your
153:27 - newly created graphical API we're going
153:29 - to say yes
153:31 - and what we want to do is we are going
153:33 - to choose typescript
153:35 - we're going to enter the file name
153:37 - pattern which we can just use as the
153:40 - default
153:41 - and then you want to generate all
153:43 - possible graph cooperations queries
153:44 - mutation subscriptions this is probably
153:47 - the single best feature of appsync like
153:50 - hands down once you see this you are
153:52 - never going to want to configure your
153:54 - graphical schemas manually ever again I
153:56 - guarantee you so get ready for that so
153:59 - we're going to say yes
154:01 - and maximum statement death uh we don't
154:04 - really have to worry about that because
154:05 - our data isn't deeply nested so we can
154:08 - just say to for now
154:11 - and enter the file name for the
154:13 - generated code that's just going to be
154:16 - under the source folder api.ts and
154:18 - that's fine so let's just press enter
154:19 - and now it is going to start deploying
154:22 - all these resources to the cloud using
154:25 - our cloud formation
154:27 - stack that we have generated so you'll
154:29 - see that there is a update in progress
154:32 - around the Lambda which is our function
154:35 - there is going to be the auth
154:38 - resource that we created and it's going
154:41 - to be deploying again that API that auth
154:43 - and that function so those are sort of
154:47 - those three different resources that we
154:48 - have configured for
154:51 - our
154:52 - AWS application
154:55 - so we'll wait for these to create and
154:57 - I'll pick up the recording When the
155:00 - stack is finished creating these
155:01 - resources and updating to AWS
155:04 - so as soon as the cloud formation stack
155:06 - completes you'll see this
155:09 - check mark and then it'll say code
155:11 - successfully was generated and saved to
155:13 - file SRC api.ts so if we open this up
155:18 - we'll see that we now have this API file
155:22 - with
155:24 - data that maps to our graphql schema so
155:27 - that's great and we'll also see this
155:29 - graphql endpoint and also this API key
155:32 - so this is this endpoint that we'll be
155:34 - able to use and then this would be an
155:37 - API key that's generated by AWS for us
155:39 - to use
155:41 - our API and we'll also see that this
155:46 - graphql Transformer was generated and to
155:49 - actually show you one of the best
155:51 - aspects of using graphql
155:54 - with appsync is that in the source
155:57 - folder you'll see that there is now this
155:58 - graphql
156:00 - folder directory and then we'll see that
156:03 - there's these different TS files so we
156:06 - go to mutations and what's awesome is
156:08 - that this was all auto-generated by
156:10 - appsync so we have now this quote app
156:14 - data
156:15 - mutation
156:17 - we have this update quote app data
156:19 - mutation
156:21 - and all of these are scoped to the
156:24 - conditions that we set up in our API so
156:27 - the same thing with query so now we have
156:28 - this generate a quote we have this list
156:30 - quote app data
156:33 - we have quotes query name which was that
156:36 - Global secondary index that we
156:38 - configured
156:42 - and
156:43 - you have all this data which is really
156:45 - great and then also for subscriptions if
156:46 - we wanted to have websockets we could
156:49 - have oncreate quote app data as a
156:53 - subscription so that's where all of
156:55 - these different elements were created
156:58 - and this is all by appsync and on the
157:00 - clouds that will be able to actually
157:02 - have these queries and mutations and
157:05 - subscriptions configurable in our
157:07 - front-end application without needing to
157:09 - worry about any sort of back end
157:13 - um configurations it's all done for us
157:15 - which is really really great
157:16 - so now what we're going to do is we are
157:19 - going to
157:20 - open up our schema
157:23 - and we're going to now run
157:27 - amplify status
157:30 - so this is going to give us perspective
157:32 - on
157:34 - what resources are currently generated
157:36 - in the cloud for us
157:39 - so when we run amplify status this gives
157:41 - us a current understanding of the stack
157:44 - and what is deployed and what is local
157:48 - and in changing so we have our API we
157:51 - have our author we have our function and
157:52 - there's no current changes right now and
157:55 - that makes sense because we just
157:56 - committed this to AWS and pushed this to
157:59 - our AWS account
158:00 - so now in our
158:04 - schema we have this query that's
158:06 - attached to this function we have an
158:10 - auth directive we have auth directive
158:13 - and now we want to do is we want to
158:16 - add these auth directives back into our
158:19 - schema we commented them out earlier now
158:21 - we're going to add them so now that we
158:23 - have
158:25 - basically our authentication system set
158:28 - up and we know this because we have auth
158:30 - a part of this
158:31 - we can now add auth directives to our
158:34 - API so that we can
158:37 - prevent certain users from accessing or
158:40 - running certain features and what we
158:42 - want to be able to do is for example
158:44 - allow public access to read
158:48 - data that we'll create we'll create an
158:49 - object in here and then we'll want users
158:51 - to be able to find this specific object
158:54 - and then query from it and same thing
158:57 - with this query to generate a quote we
158:59 - want to be able to allow users to
159:01 - publicly
159:03 - run this Lambda function but using the
159:07 - IAM as a provider so what we're going to
159:09 - do is we're going to
159:11 - uncomment those changes which we've done
159:14 - we're then going to do amplify push
159:22 - and then we're going to say continue
159:24 - we're going to say yes and we'll see
159:25 - here that this is an update to our API
159:27 - but it's not updating anything else it's
159:29 - just updating this API and that's really
159:31 - great about the
159:33 - amplify framework is that and we'll just
159:37 - say yes to all of these because we're
159:38 - going to update our schema so what's
159:40 - really great about amplify working with
159:43 - cloud formation is that you're only
159:45 - going to update the resources in the
159:48 - stack that need to be updated everything
159:50 - else will stay the same and it's
159:51 - managing all of this for you so that you
159:53 - don't have to worry about you know did I
159:56 - need to update this or do I need to
159:57 - configure this it's all going to be
159:59 - doing this for you in the cloud so I'm
160:02 - going to pause the recording and then
160:04 - I'll resume it when the stack finishes
160:07 - updating
160:10 - now that our graphql operations have
160:13 - successfully generated been saved to the
160:15 - source graphical folder and we've also
160:19 - had the of our api.ts file updated we
160:23 - can actually now check this out and see
160:25 - if it did that
160:26 - so for queries
160:31 - we have some more
160:33 - information here
160:35 - and
160:37 - this is all going to show that these
160:38 - were updated
160:42 - so there and then for mutations uh
160:46 - those files were updated there and those
160:49 - were generated uh recently as well so
160:52 - now that we have these configured
160:54 - something that we're going to want to do
160:56 - is now check out our
160:59 - amplify project so when we go back to
161:02 - the Management console and we do a
161:04 - refresh here
161:09 - now we see that we have API we have
161:11 - authentication we have functions so
161:13 - before we didn't have any of these
161:14 - resources created and now we have three
161:17 - of them which is great so if we click on
161:20 - API
161:22 - let me scroll down
161:24 - we now see that we have some data
161:26 - sources associated with our
161:27 - inspirational quotes Dev API endpoint
161:30 - with graphql so what we're going to be
161:32 - creating is this public data object in
161:36 - nosql that we're then going to query
161:38 - from the front end and every time that a
161:40 - quote is generated we're going to be
161:41 - incrementing that value by plus one but
161:43 - it's not going to be us it's going to be
161:44 - Lambda that's doing that so we're going
161:46 - to go to our quote app data table
161:48 - and this is going to dynamically find
161:51 - this table in our
161:55 - amplify
161:56 - so it's amplify project and then
161:58 - dynamodb resource and then when we
162:00 - explore table items we're then going to
162:02 - be able to open this up we're then going
162:05 - to create an item
162:07 - and what we're then going to do is we're
162:09 - going to start configuring
162:12 - our nosql
162:15 - object and there's two options when
162:18 - writing items to dynamodb from the
162:20 - Management console you can put it with
162:22 - basically key value pairs as a form or
162:26 - you can write it as Json personally I
162:28 - think that writing the form is easier so
162:30 - let's use this and then I'll show you
162:32 - how this Json object actually looks like
162:35 - when it's finished
162:38 - so when we want to have our ID so we
162:42 - have the ID as part of the partition key
162:44 - so this is how we're initially able to
162:46 - query objects in a nosql dynamodb table
162:50 - so given this ID would be able to find
162:53 - it so I generated this string now what
162:56 - we're going to do is we'll go back to
162:59 - our schema here
163:01 - so we see here that when we have quote
163:04 - app data so this is going to be the same
163:07 - as quote app data there
163:09 - with series of characters and then the
163:12 - dev Branch so we have a query name we
163:15 - have a quotes generated we have a
163:16 - created at and we have an updated ad so
163:19 - those are going to be the variables that
163:21 - we can have associated with this
163:23 - dynamodb object so this is the same as
163:25 - our schema so we're going to want to
163:26 - have that the same so you could just
163:28 - copy this
163:29 - go back here
163:31 - we're going to do a string
163:33 - do query name
163:35 - now we're just going to match this so
163:37 - this is an integer
163:39 - a real number so quotes generated we'll
163:41 - go back here
163:42 - we're going to do number
163:45 - quotes generated
163:47 - and then created at and updated at are
163:49 - going to both Be Strings so we create
163:52 - another string here created that and
163:56 - one more string and that's going to be
163:58 - updated at
164:02 - sweet
164:03 - so under a query name
164:07 - we're going to call this live
164:09 - so paste in live
164:12 - the courts generated that value is set
164:15 - at zero
164:17 - and that's because we're going to be
164:19 - starting from zero and then created at
164:21 - and updated at so those are going to be
164:24 - AWS date timestamp and if you don't
164:28 - already know how to do this I will help
164:31 - you write a script for that so that we
164:32 - can generate it
164:35 - all right so to make a script that can
164:37 - get us created at and updated at I think
164:40 - this will be a good utility for you to
164:42 - have so if you ever need to generate uh
164:46 - updated out or created at timestamps
164:48 - you'll be able to then configure a
164:50 - script to then run that so anytime that
164:52 - you ever you know need to get those
164:54 - types of values you'd be able to have a
164:56 - script that generates it yourself so
164:58 - we're going to open up another code
165:00 - sandbox
165:01 - Cloud environment
165:03 - this is specifically node.js same as we
165:06 - did before but this is a different one
165:07 - and we're going to call this AWS
165:10 - date time stamp
165:18 - generator
165:23 - cool
165:24 - so
165:29 - now that we have this
165:31 - we're going to remove this
165:35 - save that and we're going to open up a
165:37 - terminal here we're going to clear this
165:39 - out
165:40 - and something we're going to do is we're
165:42 - going to install
165:46 - moment so moment is a package for
165:49 - working with timestamps and time
165:51 - signatures so once we've added that with
165:54 - npm install we'll see that it's now part
165:56 - of our
165:59 - dependencies here
166:01 - now when we run this we're going to
166:03 - import
166:05 - moment so we'll do const moment equals
166:07 - require
166:09 - moment
166:11 - next we will create a variable for our
166:16 - AWS date timestamp so we'll do const AWS
166:20 - date
166:21 - time equals moment so we'll use that
166:25 - moment
166:26 - Library we're going to do UTC
166:30 - because we want universal time and then
166:34 - we're going to do format and this is
166:38 - where we're able to use that moment
166:39 - library to create the date and the exact
166:41 - format format that we want so we'll do y
166:45 - y y for year
166:47 - and we'll do months months then we'll do
166:51 - day day
166:53 - tea for time and then we do our hour
166:57 - minute minute
166:59 - second second
167:00 - and then millisecond
167:04 - and then Z
167:06 - in bracket
167:10 - and then close out that string
167:13 - and then we'll print out our
167:17 - AWS date time stamp right there
167:21 - and we will try to we'll save this and
167:24 - then we will run it
167:26 - so run this
167:28 - cool so we're able to get our value
167:31 - right here so this is where we'd be able
167:33 - to plug that in
167:34 - to our Dynamo and you can also see here
167:37 - if we if we run this again
167:40 - the number is getting bigger each time
167:43 - so it's counting upwards so that's how
167:45 - we know that it's working so you can use
167:47 - this utility for
167:48 - and I'll just make this a little bit
167:50 - bigger so you can see the full script so
167:52 - you can use this utility
167:53 - any time that you want to get an AWS
167:57 - date time stamp and yeah use this for
168:00 - any project that you need so this will
168:01 - be a good script to just have you know
168:03 - in code sandbox and you can run this you
168:05 - know whenever you need to get this type
168:08 - of string so we'll go back here we'll
168:11 - add this value here and we'll add this
168:13 - value here
168:15 - now that we have all the values a part
168:17 - of our item we can go and create this
168:20 - item
168:21 - and now it is an item that lives in our
168:24 - database and
168:26 - if we open up this structure so to give
168:29 - you a little bit of perspective about
168:30 - what we just created so this is what a
168:33 - dynamodb Json object will look like so
168:35 - it is a little bit counter-intuitive in
168:38 - terms of how you might think about the
168:39 - structure
168:40 - happening so instead of these values
168:43 - being directly related to the the scalar
168:46 - type or the item that's associated with
168:48 - the API it'll basically be its own
168:51 - object and then it will be S for string
168:53 - or n for number and these will be mainly
168:59 - the types of types that you'll be
169:01 - configuring so just look out for you
169:04 - know strings or numbers those are
169:06 - usually the the two main ones that we'll
169:08 - be working with so
169:10 - those are the values so we had the ID
169:12 - which was our unique value we had the
169:15 - string that we created with the node.js
169:18 - script we have this query name which is
169:22 - live which where we configured a global
169:24 - secondary index for we have zero for the
169:27 - quotes generated and then we have again
169:29 - this timestamp that we generated from
169:31 - the script so this looks great and now
169:34 - we have an item in our database that we
169:36 - can work from
169:39 - so if we wanted to go back to our front
169:43 - end that we have here so instead of just
169:45 - being hard-coded with zero we're going
169:48 - to want to hydrate this value with a
169:52 - query from our API endpoint so let's go
169:56 - back to our code and let's work on a way
169:59 - to generate a function that can call
170:02 - that value in Dynamo now that we've
170:04 - created it so now that we've written
170:06 - quite a bit of code this is a good time
170:08 - for us to get into the habit of pushing
170:11 - all of these changes that we've made to
170:14 - our GitHub repository
170:17 - so you'll see here that we have quite a
170:20 - lot of files that have been created
170:22 - modified
170:25 - updated
170:26 - and now we're going to
170:28 - say that we add API
170:31 - plus Lambda Plus auth
170:36 - and we'll also review if we added any
170:39 - front-end changes but mainly we've been
170:41 - doing
170:43 - lots of
170:47 - Cloud backend things so we're just at we
170:49 - added API we added Lambda we added off
170:52 - and we added a graphql so that's the
170:54 - queries mutations and subscriptions and
170:57 - the api.ts file so this should be all
171:00 - good so we'll Commit This to Main
171:03 - with GitHub desktop we'll push to origin
171:07 - and this is then good because now we
171:09 - know that we have our code as a backup
171:12 - in case we ever need to revert back to
171:14 - anything that we did
171:17 - so now what we want to do is we want to
171:20 - go to our index.ts file
171:23 - and I'm actually going to just
171:27 - comment this out just so that we can get
171:29 - rid of
171:30 - that typescript error
171:35 - so now we want to do is we want to
171:38 - change this number of quotes to be
171:41 - receiving data from
171:44 - our dynamodb table
171:45 - so what we're going to do is we are
171:47 - going to first of all check out and I
171:50 - can actually
171:53 - move this here so that this is full
171:56 - screen so what we're doing is this is
171:58 - always going to be a number
172:00 - we want to be able to dynamically change
172:03 - the set number of quotes value to what
172:07 - is rendered out from dynamodb so we're
172:10 - going to use appsync and query our
172:14 - public data object that we just created
172:16 - and then use that data to then set the
172:19 - number of quotes so that when we call
172:21 - this value it's going to be the number
172:23 - that's coming from AWS instead of this
172:26 - locally stored value in state right off
172:29 - the bat since we are going to be using
172:31 - typescript in our project which we are
172:33 - we are going to start to think about our
172:36 - data types with interfaces so an
172:40 - interface is just a way where we can
172:42 - explain throughout our code base what
172:46 - are the different data types that might
172:48 - be in an object so when we're getting
172:50 - data from dynamodb we might need to
172:52 - Define what the ID would be or the
172:56 - quotes generated which would be a number
172:58 - for example so we need to just Define
172:59 - those so that typescript won't
173:03 - be confused as to what we're doing so
173:06 - we're going to say that we need to
173:08 - create an interface
173:10 - for our Dynamo
173:14 - DB object
173:17 - and also something we're going to need
173:18 - to do is we need to create a type guard
173:21 - for our
173:25 - fetch function
173:28 - so we're going to need a type guard to
173:31 - then check when we query for the data
173:34 - and Dynamo we're going to need to make
173:35 - sure that the response is actually the
173:37 - response that we would be expecting and
173:40 - in the format that it's expecting so how
173:43 - we're going to do this is
173:46 - we're going to first create
173:48 - this interface for our update quote info
173:51 - data so we'll do interface
173:57 - date quote info data
174:00 - and then we're basically going to take
174:02 - all of our schema from here
174:04 - and we're just going to copy that over
174:08 - with a few exceptions
174:10 - so we want this we don't want that
174:14 - Global secondary index because that's a
174:15 - dynamodb thing
174:17 - but we are going to need these things
174:19 - so now what we need is we're going to
174:21 - turn this into a string
174:25 - and we're going to add string to almost
174:28 - all of these except for the quotes
174:29 - generated
174:31 - because that's a number
174:33 - so in here
174:35 - we'll do number
174:37 - and then we'll
174:39 - give that a save and then this is going
174:41 - to Define that data type for the data
174:45 - that we're going to fetch from dynamodp
174:48 - now
174:49 - I think it is helpful also just to think
174:51 - about the function that we're going to
174:52 - write so we're going to just move over
174:53 - to that for a quick second so we're
174:56 - going to need a function
175:00 - function to fetch
175:03 - the object which is quote generated
175:07 - cool
175:10 - so what we're first going to need to do
175:11 - is
175:13 - this is going to be an async function so
175:15 - we're putting that inside of the
175:16 - functional component
175:18 - but before the return statement
175:20 - so we're going to do const
175:22 - update quote info
175:24 - equals async
175:28 - we'll make this an arrow function and
175:30 - just a good habit of getting into is
175:33 - using try catches when we
175:35 - are
175:37 - running
175:38 - functions
175:40 - so a try catch is basically
175:42 - hey run this code otherwise if there's
175:45 - an error in this then log that error and
175:48 - basically console log it or do some
175:50 - action so what we want to really do is
175:53 - we're going to say
175:56 - error getting quote data
175:59 - and then error
176:02 - so what we do want to be able to do is
176:06 - fetch the data out of
176:08 - dynamodb
176:10 - so we're going to expect a response so
176:12 - we'll do const response equals await
176:14 - we'll do API
176:16 - do graphql and then we're going to take
176:19 - that type
176:22 - that we got from here and then throw
176:24 - that in there
176:27 - we'll close out the arrow bracket
176:31 - we're going to use parentheses
176:34 - curly bracket and then we're going to
176:36 - create a way in which we can
176:40 - API so the API is
176:43 - module we can get out of the AWS amplify
176:45 - Library so we can import that
176:49 - up there and then now it's a part of our
176:52 - Imports
176:53 - now if you want to use appsync with
176:57 - those queries that we generated so we
176:59 - have this query here so we're going to
177:03 - be fetching
177:04 - this quote
177:09 - query name so this was already generated
177:11 - by appsync which is awesome so we're
177:14 - going to be using this query to then get
177:18 - that data so it's already configured for
177:20 - us but this is what it looks like so if
177:22 - we want to do use the api.graphql method
177:25 - to call appsync data using that query
177:28 - we'll do query we're going to do quotes
177:32 - query name which was our Global
177:34 - secondary index and I see that it's
177:36 - already Auto populating this so we're
177:38 - going to press enter
177:39 - and how this will look at the top is
177:41 - it's going to say import
177:43 - query name from graphical queries which
177:46 - is what the file that we were just in so
177:48 - that's great now we can do query
177:50 - for the auth method if you remember from
177:52 - before when we allowed IAM we're going
177:55 - to be defining that as the auth mode
177:58 - use osmode we'll do AWS Instagram plan
178:01 - there's already methods that it will see
178:03 - so I will just choose AWS IM
178:06 - then under variables because this is
178:08 - what we're going to send into this query
178:11 - the query name that we want to fetch for
178:14 - is live
178:16 - because that's the
178:17 - item that we created in Dynamo
178:21 - so that all looks good
178:25 - and now for our response
178:30 - we could just do console log response
178:36 - equals response
178:38 - just because we want to test if we're
178:41 - actually able to get this object out of
178:44 - dynamodb so we can do that just to test
178:46 - it really quickly and make sure that
178:47 - we're on the right path and we actually
178:50 - need to be able to invoke this function
178:52 - so how are we going to do this we will
178:53 - use a hook called use effect so use
178:57 - effect
179:00 - that's going to be Arrow function and
179:03 - then we're going to take
179:05 - that function that we just wrote
179:07 - we'll put that in there
179:09 - and then an important aspect of use
179:12 - effect is and I'll just import this from
179:15 - react from the top so
179:17 - we'll import that so now it'll do react
179:19 - use effect and use state so those two
179:21 - hooks from the react library from the
179:24 - framework so this is really important
179:26 - because use effect is really helpful for
179:28 - side effects but you need to make sure
179:30 - that you unsubscribe otherwise it's
179:32 - going to keep invoking this all the time
179:35 - so sometimes that can be helpful if you
179:38 - want to run a certain function after a
179:41 - certain type of action so let's say that
179:44 - you know you um every time that you
179:48 - uh complete a game you want to restart
179:49 - it well you could listen for that as a
179:53 - method or an input and then you could
179:56 - you know clear out the game and then
179:57 - restart it or something like that so
179:59 - because we're just writing this we want
180:02 - this function to run every time that
180:03 - this page loads so this is the way in
180:06 - which we do that so that's just a way to
180:07 - tell
180:08 - use effect and react in the Dom hey once
180:11 - we run this function you know when the
180:13 - page loads don't don't do it again just
180:15 - unsubscribe
180:17 - so that's great so we're going to now
180:19 - give this a save and we're going to open
180:21 - up our
180:22 - application backup and we're going to
180:24 - test to see if this is actually working
180:26 - so I'm going to give this a quick
180:28 - refresh
180:30 - and this is Crete so I see that it's
180:33 - getting something so let's see if this
180:34 - is the actual data
180:36 - so we go down a whole bunch
180:38 - and this looks exactly like what we have
180:40 - so we have that ID which was that string
180:43 - we have the query name which was live we
180:46 - have the 10 quotes here and updated at
180:48 - there and let's actually go back to this
180:51 - object just so that we can
180:53 - change it so let's say that we change
180:55 - that to 15. we'll do save
180:57 - go back
181:00 - back to our application and we'll give
181:02 - this another reload
181:04 - and let's see if we're actually able to
181:05 - get the different data that we just
181:07 - changed
181:09 - go to items this item and that gives 15.
181:12 - so it seems like we're actually able to
181:13 - do this and it's working successfully
181:14 - which is awesome so now we know that
181:16 - we're able to run a function that is
181:18 - querying using our Global secondary
181:21 - index of live to get this data object in
181:23 - Dynamo and then render that back
181:26 - in our console so now we're going to
181:29 - change and basically take this value and
181:32 - then change it to state so that it'll
181:34 - overwrite the zero and something
181:35 - important to note here is when we are
181:38 - getting this response data so you'll see
181:40 - that there's this data and then it's dot
181:44 - you know quotes query name dot items
181:46 - down there's this zero so it's the first
181:49 - item in the list of the array and then
181:52 - you have these data points so the one
181:53 - that we're going to want is quotes
181:55 - generated but you see that there's these
181:57 - different levels to the data structure
182:00 - so this becomes really important because
182:02 - we need typescript to understand that
182:06 - this data has nested data inside of it
182:09 - and then we're going to be working our
182:11 - way down into this quotes generated
182:13 - value and I'm going to show you why
182:15 - that's actually really important because
182:16 - let's say that we wanted to just set the
182:19 - quote number so you know we're going to
182:21 - use set quotes number and you know we
182:24 - could theoretically change it to be a
182:27 - number right we know that it's 15 in
182:30 - the database
182:31 - so we could we could do that but that's
182:34 - not the number it's going to be changing
182:36 - in the database so let's say that we are
182:38 - going to take the
182:40 - response.data.all of these things and
182:42 - we're going to put that in here so I
182:44 - already have this data type and we're
182:45 - going to work on this you know together
182:47 - but this is the response it's
182:49 - response.data.query.name.items
182:53 - take the first item out of that and then
182:55 - we get quotes generated and that's going
182:56 - to be the number that is 15 that's
182:58 - what's in the database right now but
183:00 - we're going to get this nasty error from
183:02 - typescript and it's going to say
183:03 - property data does not exist on type
183:05 - graphql result with this observable
183:08 - object and then it basically says that
183:09 - property data does not exist on type
183:11 - observable with the object so that's not
183:15 - great and typescript is going to get
183:17 - upset and that's going to be no good so
183:20 - what we really need to do is understand
183:21 - how are we getting the data out of
183:24 - response and then mapping all of these
183:26 - down so this is where that type guard
183:28 - that we worked on before that's where
183:30 - that comes in
183:31 - so we're just going to comment that out
183:32 - for a quick second so where we're going
183:34 - to actually start plugging away on this
183:36 - is we want to write a type card which is
183:39 - really a function that checks against
183:42 - types and the expected value that you
183:44 - would be expecting so we're going to say
183:47 - function and then we're going to say is
183:50 - graphql result
183:53 - for
183:55 - quote
183:56 - for quotes
183:59 - query name
184:01 - I'm just going to capitalize this
184:04 - between him
184:06 - we know that we're going to get a
184:07 - response that response is going to be
184:09 - any for this and that response
184:12 - is graphql
184:16 - result and we can get graph quill result
184:18 - from at AWS amplify
184:22 - dot API
184:34 - which we can import here
184:36 - so we'll import that and then it goes
184:39 - from AWS amplify API graphql
184:43 - so now what we want to do is
184:46 - we're going to make a carrot bracket
184:50 - I'm going to go down
184:52 - and then we're going to Define this type
184:54 - that we want so we're going to do quote
184:55 - query name
184:58 - and I'm actually I'm going to just
185:00 - uncapitalize that just so that it can
185:02 - match up with
185:03 - this data type that we have from before
185:07 - so under this we're going to get some
185:09 - items
185:11 - but we're really just going to get one
185:12 - item but it would be an array anyway and
185:14 - I'm going to do update quote info data
185:19 - create that and then we'll do
185:23 - semicolon
185:25 - and then we're gonna give this a closed
185:28 - out
185:30 - carrot and then we're going to be
185:32 - returning
185:33 - a response
185:35 - dot data
185:37 - and we're also going to return our
185:39 - response dot data dot quotes query
185:43 - name which is
185:46 - that query there
185:48 - and we're also going to be potentially
185:50 - getting which is really what we're going
185:52 - to be doing is a response dot data dot
185:56 - quotes
185:58 - query name dot items
186:01 - so these are the different outputs that
186:03 - we could get when we are trying to check
186:07 - along that is graphql result for quotes
186:09 - query name Global secretary index
186:12 - so where this comes into play is we now
186:15 - can check against all of these different
186:17 - responses
186:18 - related to
186:20 - our data query
186:22 - so we can comment this out because we
186:24 - already know that we're getting that
186:25 - data
186:27 - so now we're going to create
186:30 - type cards
186:34 - so if
186:37 - not is graphical result for query name
186:40 - given a response
186:46 - will then throw new error
186:50 - and then we'll say
186:52 - unexpected
186:54 - response from API Dot graphql
187:01 - next up we'll do if not
187:04 - response.data
187:15 - we're then going to throw a new error
187:18 - that will say response data is undefined
187:23 - [Applause]
187:27 - next up now we're actually going to get
187:29 - the received number of quotes about
187:31 - variable and then we're going to use
187:33 - that to set the number of quotes so
187:36 - instead of it being zero it'll now be
187:38 - changed to the value of the database so
187:40 - we'll do const received number of quotes
187:45 - equals response dot data dot quotes
187:49 - query name dot items
187:51 - get the first item in the array
187:55 - and do quotes generated as that value
187:57 - and you can already see that there's
187:59 - autocomplete going on to it it knows
188:02 - this value and again remember when we
188:04 - did the the interface it knows that this
188:06 - is a number so this is perfect because
188:08 - now when we try to set
188:12 - number of quotes
188:14 - will be able to take this value and put
188:18 - that to this number and we get no errors
188:20 - and that's because this knows that it's
188:23 - a number this is set to set State action
188:27 - to a number and number of quotes is a
188:31 - number and we set it to zero so now we
188:34 - can set it to be a different number so
188:36 - before we do save so this is zero from
188:40 - before and I'm just going to zoom in
188:42 - here so this is zero
188:45 - but now when we save it
188:49 - this number now changed to be 15 super
188:52 - quickly right so now let's say that we
188:54 - want to change this and also a cool
188:55 - aspect of dynamodb is we can edit this
189:00 - and we can save it really quickly so
189:02 - we'll do save
189:04 - foreign
189:10 - we'll just do save and then space and
189:12 - now 17's there we could do this even one
189:15 - more time we could do
189:19 - 40.
189:22 - we'll just you know undo that space
189:24 - we'll save it
189:26 - open up this and now this is 40. so this
189:28 - is great so now we know that we're
189:30 - actually able to get real-time data
189:33 - out of our object and of course we can
189:35 - double check this with items go to that
189:37 - item we'll do refresh
189:44 - and can always uncomment out console log
189:48 - response
189:54 - and check this out so that's 40. so now
189:56 - we know that this is actually fetching
189:58 - the data dynamically from our database
189:59 - using our graphql API that we set up
190:02 - using appsync so this is super great so
190:04 - now we know that we're actually able to
190:06 - fetch and get Dynamic data from our from
190:09 - our application and we can always
190:10 - refresh this
190:12 - and we're still going to get that and
190:13 - you'll actually see that it'll go from 0
190:15 - to 40 and that's the hydration happening
190:18 - where we take our you know State and
190:20 - then we fill it with data that we get
190:22 - from our API from our fetch function so
190:26 - this is awesome so now we know that this
190:27 - is working and this is great so we
190:29 - already got the dynamodb part down now
190:31 - we're going to work on the Lambda
190:32 - component to get every time that we
190:37 - press make a quote it's then going to
190:39 - use our API it's then going to fire off
190:42 - Lambda Lambda is going to generate that
190:45 - quote string for us and then we're going
190:47 - to pass that back to the front end so we
190:48 - can actually see our quotes so that's
190:50 - going to come up next for something that
190:51 - we probably want to do since we don't
190:52 - have 40 quotes here we can always just
190:55 - set this back to zero give that a save
191:01 - and now we'll refresh and now it's back
191:03 - to zero but it's the actual
191:05 - data from our database not just Zero
191:09 - from you state locally
191:12 - so we did it so great job so now we're
191:14 - going to move on to the Lambda component
191:16 - of our application
191:19 - since we just did a lot of great stuff
191:21 - we are going to want to commit this to
191:23 - GitHub so we can
191:26 - label this
191:28 - commit
191:33 - query to Dynamo
191:35 - for public quotes data works
191:39 - so we'll commit to Main
191:43 - and we'll give that a push
191:45 - all right so now we have that saved
191:49 - which is great so now what we're going
191:50 - to do is we are going to work on
191:53 - the functionality where when you click a
191:55 - button click this button it's going to
191:58 - actually do something because
192:01 - right now we want to add some
192:02 - functionality to this button and then
192:04 - actually have it do something in our
192:05 - application so for the Lambda component
192:07 - there's going to be two separate parts
192:08 - there's the front end component and then
192:11 - there is the actual function
192:14 - calling and then receiving so we're
192:16 - going to work on the front end first and
192:18 - then we'll um we'll work on the function
192:19 - as well
192:21 - right after that so what we're going to
192:23 - do is we're going to find where our
192:25 - background is which is right here and
192:28 - then the code generator modal pop-up is
192:30 - going to be here so this is where we're
192:31 - going to be actually working on
192:33 - the generator modal here so we can
192:37 - uncomment this out
192:40 - foreign
192:42 - and this is going to live right on top
192:46 - of the quotes generator container so
192:49 - there's going to be a number of
192:50 - different values that we're going to
192:51 - pass into
192:53 - this but we don't really have to worry
192:56 - about those just yet but we'll just kind
192:59 - of mock them out for now
193:02 - so we're just gonna
193:04 - basically give this I'm just going to
193:06 - copy these into it and then we'll
193:09 - comment them out and then add them later
193:10 - so there's going to be an open and a
193:12 - closed function so we're going to call
193:14 - that through clicking outside of this
193:16 - button you know obviously it'll Auto
193:18 - open when we open it but then we'll be
193:20 - able to close it and these will be
193:22 - operating through functions then there's
193:24 - going to be a processing quote there's
193:25 - going to be a set processing quote value
193:27 - and then there's going to be a quote
193:28 - received value and then a set quote
193:30 - received value so these are going to be
193:32 - the different inputs that we pass into
193:34 - our function we're just going to comment
193:36 - this out for now because we're just
193:37 - going to work on the component
193:39 - so
193:40 - this is going to live
193:45 - in our quote generator so we're going to
193:48 - find
193:50 - code generator we're going to call this
193:52 - and we already set up this folder from
193:54 - before create a new file I'm going to
193:56 - call this index.tsx
194:01 - and then this is where we're going to
194:03 - actually start creating our code
194:04 - generator component so if you want to
194:09 - just quickly spin up a react functional
194:11 - component you could do rafce
194:13 - and that's going to be our react Arrow
194:15 - functional export component here
194:17 - and then we'll do quote generator
194:21 - cool and if you're wondering how I did
194:23 - that that is an extension that is you
194:27 - can just get extensions from the
194:28 - extension store and then that'll be for
194:30 - react Snippets so it's one of the most
194:32 - popular extensions and it just saves you
194:34 - a lot of time from the guesswork of
194:36 - having to you know configure
194:38 - these different you know like Imports
194:40 - and then getting the rec you know Arrow
194:43 - function and everything it just spins it
194:45 - up really quickly and it makes it really
194:47 - easy to use
194:49 - to build out this component we are going
194:51 - to first remove that placeholder and
194:54 - then we're going to do modal
194:58 - and we're going to import this from
194:59 - Material UI so this is that component
195:01 - that we showed earlier which is
195:05 - let me show you guys motor component so
195:07 - that's when you click a button and then
195:08 - there's a pop-up and it you know might
195:11 - blur out other things that are in the
195:13 - background around it that's what this
195:15 - modal is doing to get the modal we need
195:17 - to add in a number of different values
195:20 - as inputs for the modal we are going to
195:23 - have quite a number of these inputs so I
195:26 - will take these and then I'll paste them
195:27 - below and then we'll go through each one
195:31 - so
195:33 - given an ID so we're just going to give
195:35 - this an easy to recognize name which is
195:37 - quote generator modal there's an aria
195:39 - labeled by and a described by so this is
195:42 - just going to be that spring modal title
195:44 - encryption so we could give this a name
195:48 - so just call this quote generator
195:52 - modal
195:54 - and then description
196:00 - say
196:02 - opens
196:04 - and closes
196:06 - quote generator
196:10 - now and this will also just help with
196:12 - readability in the application
196:13 - now in terms of open we're going to be
196:16 - passing in a value which will be a
196:18 - Boolean and then on close will be a
196:21 - function and then close after transition
196:23 - is a value which you'll you'll see in
196:26 - action there backdrop is just some
196:28 - styling related to how this works and
196:30 - then we also have a backdrop props
196:33 - timeout
196:35 - so now what we need to do is we are
196:37 - going to be passing in some data here so
196:41 - we're definitely going to be getting
196:42 - open and we're going to be passing in
196:43 - close and these are going to be
196:45 - functions that we're going to pass down
196:46 - from
196:49 - this
196:51 - so where we do this is that we'll do
196:53 - open and close
196:54 - and now we need to get these there and
196:58 - also this is not imported yet so we'll
197:01 - just backspace we'll rewrite l
197:04 - and this actually might not be importing
197:07 - so we'll create a another import at the
197:11 - top we'll say import
197:15 - and it seems like this is already going
197:17 - to be
197:18 - passing that and this might not
197:22 - like that so what we can do is we can
197:25 - just say quotes generator
197:28 - and that should work
197:31 - and then
197:36 - if we undo that
197:39 - then
197:42 - should work
197:52 - is that something that we can do here is
197:58 - like that and then we'll just rewrite
198:01 - that
198:03 - so that it will then recognize that
198:06 - component so that's a way that we can
198:07 - fix that
198:08 - and now what we're going to do is we're
198:10 - going to need to work on these inputs
198:12 - here so the open and the close are going
198:15 - to be two values that we passed down
198:18 - from the parent component to this
198:20 - child's component so here
198:23 - under open generator
198:26 - so that's going to be
198:28 - a Boolean value that we set with u state
198:31 - so we're going to use U State again here
198:33 - we'll go to the top
198:34 - and then we're going to say const
198:38 - open generator and this is already
198:41 - prompting us to write that so open
198:45 - generator and then set open generator
198:47 - we're going to set it to be
198:49 - false from the start but when we run a
198:53 - function this we're going to use set
198:55 - open generator and then that's going to
198:56 - make it true
198:57 - so
198:59 - under open generator now that value is
199:02 - fine now for our close function we're
199:05 - going to want to make this as a function
199:08 - at the top
199:11 - so we can put this after our type card
199:15 - from before
199:16 - so we'll create a function called const
199:18 - handle close generator
199:24 - write a function and then we'll do we'll
199:27 - take this from the top
199:33 - we can actually put this inside of our
199:36 - function here
199:40 - I'll put that there so we'll do um
199:43 - function for quote
199:46 - generator modal
199:50 - because we'll have a few functions here
199:51 - so handle closed generator we're going
199:55 - to set number of or sorry not for this
199:58 - one
199:59 - we're going to be importing
200:01 - set open generator
200:05 - and then
200:06 - we're going to set that to be false
200:08 - because we're going to be closing that
200:11 - and then we'll add some other things as
200:13 - well but we will work on those later
200:16 - so now what we want is we're going to go
200:19 - back to that button that we had before
200:22 - and remember when we had on click and we
200:24 - made it as an all we're going to make
200:25 - our own function to actually open up
200:27 - this modal and that's going to be called
200:29 - handle
200:31 - open generator
200:36 - now when we take this
200:37 - we're then going to make this a function
200:39 - so
200:43 - this is inside of our functional
200:45 - component here we'll put this
200:48 - underneath that so then we're going to
200:50 - do const handle open generator
200:55 - async and then we're going to pass in an
200:58 - event
200:58 - which will be a react
201:00 - synthetic event
201:03 - which is the type
201:05 - so typescript will be able to recognize
201:07 - that and then we're going to do e dot
201:10 - prevent
201:11 - default so this is a way that you can
201:12 - run a function without reloading the
201:14 - page and that becomes very important
201:16 - because when you need to pass in data
201:19 - into something you don't want to be
201:21 - reloading the page because you want to
201:23 - be able to manage the state
201:25 - um of the dominant and not be updating
201:27 - it or refreshing it you want it to be
201:29 - processing
201:30 - a function or a script so we're going to
201:33 - use that and then we're going to do set
201:35 - open generator
201:38 - to be true so this is where every time
201:40 - that we open up
201:42 - or we press that button which is going
201:44 - to be here
201:45 - we then want to make
201:47 - basically this set open generator to be
201:49 - true
201:52 - and we're going to be doing a bunch of
201:53 - other elements in this later but we'll
201:56 - worry about that at a later point so now
202:00 - when we open
202:01 - and close
202:03 - typescript is going to complain and it's
202:04 - going to say hey I see that you passed
202:06 - these down but I don't understand what
202:09 - the interface is that we're going to be
202:11 - using here so this is where we're going
202:12 - to use typescript and we're going to
202:13 - define a type so that or an interface so
202:17 - that typescript will understand exactly
202:19 - what open and close are supposed to do
202:21 - in our application to get rid of these
202:23 - errors we're going to be creating an
202:25 - interface so that typescript will
202:27 - understand the types of values that
202:29 - we're going to be or the variables and
202:31 - those values we're going to be passing
202:32 - into it so we're going to create a
202:36 - interface and we're going to call it
202:38 - quote
202:42 - moral props
202:44 - and this is going to be a value that
202:45 - we're going to put inside of this
202:49 - so this is going to help to Define open
202:51 - and close inside of that scope
202:54 - so what we're going to do is we're going
202:56 - to go down we're going to do interface
202:59 - we're going to copy this
203:02 - and then we're going to make this into
203:04 - an object so it seems like it's already
203:06 - understanding that these are going to be
203:07 - certain values so Boolean and close
203:11 - so now that's how we get rid of those
203:13 - errors and this is because we need to
203:15 - let typescript understand what this
203:17 - modal and the values that are going to
203:20 - be passed into it
203:21 - actually are going to be so this is a
203:23 - Boolean which is true or false and then
203:25 - close is a function
203:27 - so that's great so now what we're going
203:29 - to do and we're going to pass in
203:31 - as I'm sure you've guessed it a whole
203:33 - bunch of other data later but these are
203:34 - just the two ones that we want to be
203:36 - checking for right now
203:38 - we could do of course the other stuff
203:40 - later
203:41 - so now we're going to do is we are going
203:43 - to
203:44 - work on this backdrop element
203:49 - so backdrop is imported from Material UI
203:53 - so we're going to be
203:55 - just reorganizing a little bit of our
203:58 - project here
203:59 - so we're gonna say material UI Imports
204:04 - so the modal is imported from there
204:07 - and then we're also going to import
204:09 - backdrop
204:12 - so
204:13 - if we just backspace we can find that
204:17 - backdrop as this one so we'll import
204:19 - that so modal and backdrop will all be
204:22 - imported
204:24 - from material
204:26 - and now mortal is going to say that
204:29 - there is something that is missing so
204:33 - what we need to do is we need to pass in
204:35 - some other values into
204:38 - the modal since we need to have
204:40 - something inside of it for a to a render
204:43 - so we're going to pass in this fade
204:45 - effect or styling which I really like
204:50 - to give it a little bit more of a classy
204:52 - element to it and for fade
204:56 - we'll be able to import that also for
204:58 - material UI
204:59 - so that'll also be imported from the mey
205:03 - material library and then we need to
205:05 - have something inside of this because
205:07 - these are still effects we need to have
205:09 - some text in there
205:11 - so what we could do is we could just say
205:14 - each one
205:17 - hello world
205:19 - and then
205:21 - our core generator is just going to have
205:23 - some text
205:24 - this is going to and like that and let
205:28 - us test to see if this actually can
205:30 - function
205:34 - so if we click on this
205:36 - check that out so now we can open this
205:39 - and there's this text here we see the
205:42 - hello world when it's there and anytime
205:44 - that we click outside of this modal it's
205:48 - um that's how we'll be able to close it
205:49 - out or if you click on this and then you
205:51 - press Escape that's also how you'll be
205:53 - able to to close out of it so we're
205:55 - getting closer obviously we need to add
205:57 - some Styles in here but this is the
205:58 - basic functionality if you click this
205:59 - then it's going to be rendering it's
206:02 - going to be processing the generation of
206:04 - the quote and then it'll pass that back
206:06 - and then if we you know click out of
206:08 - that div then we'd be able to close out
206:11 - of the modal so this is some great
206:13 - progress before to round out the rest of
206:15 - these Imports
206:17 - to our child's component from this
206:19 - parent component let's add those right
206:22 - now so we go up to the top under our
206:26 - function
206:27 - and we're going to add a number of
206:30 - different
206:31 - processing quote generation statuses
206:34 - so new const
206:36 - and then we're going to create a
206:38 - variable to check for the processing
206:42 - quote status so processing quote
206:49 - and then suppressor quote and then
206:52 - we also have a set processing quote and
206:54 - then that's going to be set
206:55 - automatically to false
206:57 - and then we're going to have another
206:58 - variable
206:59 - called const quote received and this is
207:03 - actually going to be the value that
207:06 - we get back from our Lambda function so
207:09 - set quote received
207:13 - and then this is going to be use date
207:15 - but instead of it being a value like a
207:18 - Boolean value it's going to be set to
207:21 - null because we're going to fill it with
207:23 - data when we get that back but it's
207:25 - going to be set to nothing when we start
207:27 - so this is going to be a string and this
207:30 - is going to be that base 64 encoded
207:32 - string that I keep talking about but
207:33 - you're actually going to see what it
207:34 - looks like in a little bit but this is
207:36 - where we're going to be filling this
207:38 - value with that string
207:40 - for the image
207:44 - so
207:45 - let's take this and we're going to pass
207:48 - this down
207:52 - and then these are going to be the other
207:54 - ones so quote received and then set
207:56 - quote received
207:57 - but of course
207:59 - typescript is going to complain it's
208:00 - going to say hey you don't have this
208:02 - value so we're going to be passing these
208:05 - four values into our type in our
208:09 - interface in the child component so this
208:11 - is that quote generator file
208:14 - and under open close we then need to
208:18 - pass in those other values to do that we
208:21 - are going to be putting those in as
208:23 - inputs so we can actually Define the in
208:25 - the interface that might be a little bit
208:27 - easier just to explain so we added those
208:31 - in here so those are our four more
208:33 - inputs
208:35 - processing quote
208:37 - we are going to Define that as a Boolean
208:42 - then for set processing quote
208:45 - is actually going to be a specific type
208:47 - of react dispatch
208:51 - so this is that type so it's react
208:54 - dispatch
208:55 - and then react set State action to a
208:58 - Boolean so it's Boolean but this is the
209:00 - type for that
209:02 - and then for quote received
209:06 - this is going to be a string or it's
209:08 - going to be no
209:10 - and then it's going to be the same
209:14 - basically the same type of react
209:16 - dispatch react set State action except
209:19 - it's going to model State string and
209:22 - null
209:23 - so that's what that will look like and
209:26 - then
209:27 - we're going to pass those into
209:31 - here
209:32 - so it might be helpful also to start
209:34 - writing these down and then just passing
209:37 - them in like that
209:38 - just in case that's a little bit easier
209:40 - to read
209:43 - then we pass this
209:46 - and then we do this one and add that one
209:49 - as an input and then set quote received
209:51 - and that is an input
209:53 - so that's going to be great so this is
209:54 - going to allow us to then pass down that
209:56 - data as props into our child's component
210:00 - so we can then use it when we're trying
210:02 - to render out the different states of
210:04 - the quote being generated
210:06 - so now we're going to do is we're going
210:08 - to get rid of that hello world because
210:09 - we know that this is working
210:12 - and then we're going to do
210:15 - another component which we will call
210:19 - quote generator modal
210:22 - container
210:25 - and material UI has this styling where
210:28 - you can pass in custom styles
210:31 - so I'll show you how to do that in one
210:33 - moment
210:34 - and then inside of this we're going to
210:37 - do quote generator modal inner container
210:43 - so this is where we're going to be
210:46 - including some Styles but
210:48 - specifically for the style that we're
210:50 - going to import here
210:52 - we can just Define
210:54 - a value
211:01 - outside of our component
211:04 - which we could
211:06 - report up here
211:07 - we just see const style and then this is
211:10 - where if you follow the
211:12 - material UI style guide you'd be able to
211:14 - then pass in you know your own style as
211:17 - you like
211:18 - but that'll be an import into that and
211:22 - then modal container and then inner
211:24 - container
211:25 - we're going to need to create separate
211:26 - styled components so what we will do is
211:29 - we will open up
211:32 - quote generator this and then we'll
211:34 - press Ctrl B and that will just close
211:36 - that out and then we're going to be
211:38 - making our quote generator elements
211:40 - Stout component in this library in this
211:44 - uh this file so again if you remember
211:47 - we'll do exsc
211:49 - we'll then do quote generator modal
211:52 - container
211:54 - and this is not going to be styled div
211:57 - it's going to be a
211:59 - component from Material UI called box
212:02 - so we're going to do styled box
212:09 - and then we can import that from
212:10 - Material UI
212:12 - so it will look like this
212:17 - and then
212:19 - we're going to pass in a whole bunch of
212:20 - styles into
212:22 - this component so I'll show you what
212:24 - those are in one moment
212:30 - so we're going to give it a position of
212:32 - absolute with a top 50 left 50 transform
212:35 - translate minus 50 minus 50 so that's
212:37 - going to Center this box this style of
212:40 - the Box inside of
212:43 - the screen
212:45 - it's going to have a 70 view width and a
212:48 - height of 70 view height and that's
212:50 - going to make sure that it spans
212:52 - around
212:54 - the screen so as it gets smaller or as
212:57 - it gets larger this will be expanding
213:00 - to match what that pop-up is that's in
213:04 - the um the main screen and then we give
213:06 - it a box Shadow just for some styling
213:08 - and then we're giving it a background
213:09 - we're giving it a box Shadow we're doing
213:11 - some backdrop filtering and sort of
213:14 - giving it that glossomorphic effect that
213:17 - we were talking about from earlier and
213:19 - then also giving it a border
213:21 - similar to what we had before so that's
213:23 - great
213:25 - so now we're going to need to also
213:27 - create
213:28 - the inner container so
213:31 - as I'm sure you guessed it we're gonna
213:32 - do exsc we're going to pass that in
213:38 - and then this is going to be
213:40 - another set of styles
213:42 - so this is going to be style.div
213:45 - and we have our
213:48 - top 50 left 50 transfer translate minus
213:51 - 50 minus 50 and then a position relative
213:53 - so there's going to be this inner
213:54 - container that's going to be inside of
213:58 - our modal container so this overall
214:01 - this overall element this overall
214:03 - component is going to be centered inside
214:05 - of the screen and then we're going to
214:06 - have inside of this our own series of
214:10 - styles so this is just how you can
214:11 - create divs within divs and then Center
214:13 - those divs within other Center divs and
214:16 - that just will help with organization of
214:18 - your of your application
214:20 - so now we can do is we can rewrite the N
214:22 - here we can then import this from quote
214:25 - generator elements
214:27 - and then that will import that at the
214:28 - top we'll rewrite the last letter here
214:30 - and then that will import that as well
214:33 - so then these get imported from quotient
214:37 - or elements which makes sense so we'll
214:40 - give this a save we'll give this a save
214:42 - and then we can see if this is going to
214:45 - start generating some styles so it looks
214:48 - looks like it is so this is really great
214:50 - so we can click inside of this div but
214:53 - as soon as we click outside of it then
214:55 - it'll disappear
214:56 - so that's not that's not bad right and
214:58 - then we can press Escape as well and
215:00 - then that will also close it out so
215:03 - seems like it's working pretty well so
215:06 - now we're going to do is we are going to
215:07 - then start adding some of these elements
215:10 - into
215:14 - our page now that our modal is working
215:16 - we need to create two different states
215:19 - so state number one
215:22 - would be
215:23 - you are processing
215:26 - request of quote
215:29 - and
215:31 - quote state is empty
215:35 - so this is going to basically say hey
215:36 - we're trying to fetch this data from the
215:39 - cloud right now and there's nothing you
215:42 - know in there just yet locally
215:45 - state number two
215:47 - is going to be
215:49 - quote received
215:54 - so that means that we have a quote
215:56 - passed back so quote state
216:03 - you can actually say
216:08 - so in order to make sure that we can
216:09 - actually process these states correctly
216:11 - and then have our front end do the
216:14 - correct actions what we're going to do
216:15 - is we're going to pass down those
216:17 - properties that we're importing from
216:19 - here so these where we're processing the
216:22 - quote or the quote is received we're
216:24 - going to use those to dynamically switch
216:26 - out how the front end operates so what
216:29 - we're going to do is we're going to
216:30 - start creating
216:32 - some elements so we're going to do
216:34 - processing quote
216:37 - so if that is true
216:40 - meaning we are trying to fetch the quote
216:42 - from Lambda
216:45 - and the quote received
216:47 - is null meaning there is nothing there
216:49 - it's empty
216:51 - then
216:53 - we're going to render this specific set
216:56 - of front-end code and this is a Nifty
217:00 - operator for working in react where you
217:03 - can really just Define certain elements
217:06 - here and then you just say and and then
217:09 - you don't need to do like if this else
217:11 - something it's just if this is true this
217:14 - is going to be the code so you don't
217:16 - have to have like
217:17 - it wouldn't be like this would be like
217:18 - an else else like you don't have to do
217:20 - something like that
217:22 - um you can just write your code in
217:25 - not have to worry about the the other
217:26 - types of conditions so something we're
217:28 - going to do is we're going to create a
217:29 - component for a circular progress meter
217:33 - which we'll call
217:34 - modal
217:37 - circular progress
217:44 - and that is going to be given some data
217:48 - so it's going to be given a size
217:50 - we're going to call that eight REM
217:54 - and REM is just a way to size certain
217:58 - divs and elements and then we're going
218:00 - to give this
218:02 - a 2.5 thickness
218:08 - and then we're going to also have a
218:11 - title so we're gonna have quote
218:14 - generator title
218:16 - and this is going to say creating
218:18 - your quote
218:21 - and this is where that's going to be
218:22 - that loading pattern so this would sort
218:25 - of make sense that it's creating your
218:26 - quote for you and you know we're told to
218:28 - wait until we finish that up
218:31 - so we are told otherwise that it's that
218:34 - it's there
218:35 - then
218:36 - um what we're going to do is we are
218:37 - going to then have a quote generator
218:42 - subtitle
218:45 - and we're gonna give this a style of
218:47 - margin top
218:51 - 20 pixels
219:12 - and I thought that this was kind of a
219:15 - little bit funny so what we could do is
219:17 - if we wanted to have some data such as a
219:21 - quote so I thought this would be kind of
219:22 - fun where it's creating your quote and
219:23 - then you'd have sort of this
219:24 - inspirational quote as it's waiting I
219:27 - thought that would be kind of fun so
219:29 - what we'll have is we'll do wise Dev
219:32 - quote
219:37 - and then I'm gonna have a break
219:45 - and then
219:48 - we're gonna do span
219:50 - style equals
219:53 - font size
219:55 - 26 so we're just going to be changing
219:58 - the styles
220:00 - with that span that we talked about
220:01 - earlier but
220:04 - we're going to have a quote
220:08 - and then we're going to say
220:12 - wise Dev quote author
220:17 - and then we end the span
220:20 - yeah Ben's gonna say that it can't find
220:22 - that because we haven't defined that
220:23 - variable yet
220:24 - and that should round out the rest of
220:27 - this element so now we're going to do is
220:28 - we're going to Define
220:30 - these elements so right after the
220:33 - Imports but before return
220:39 - to actually just take this and make this
220:41 - a little bit more tabbed so that it's a
220:43 - little more organized
220:45 - so we're gonna do const
220:51 - because these are constant values
220:55 - and then I'm going to copy this quote
221:00 - that I created so I thought this would
221:03 - be kind of a little bit funny where it's
221:04 - you say if you can enter a div Anything
221:07 - is Possible
221:08 - because I firmly believe that that is
221:10 - true
221:11 - and then we author
221:14 - and then I'm going to pass down the
221:17 - author of
221:19 - this so we're just going to take this
221:23 - so it's going to basically look like
221:24 - that
221:28 - it's going to look like this
221:30 - and then a wise senior software engineer
221:33 - so that's great
221:35 - so those are the two variables that
221:37 - we're going to pass down into here
221:39 - and then now these are where we need to
221:41 - create some styled components
221:44 - and this might be expecting
221:48 - a value here it's maybe no parentheses
221:50 - yeah so we can just get rid of that
221:52 - parentheses because that was just an
221:53 - extra one and now we just need to worry
221:56 - about the Styles components so we're
221:58 - going to go back to our Styles
222:01 - components from before
222:08 - and we'll have this open on the side
222:14 - and then we will of course do exsc
222:19 - we're going to say modal circular
222:21 - progress
222:24 - and this is not going to be a div this
222:27 - is going to be the material UI I'm going
222:31 - to make this a little bit bigger so you
222:32 - can see this is going to be the styled
222:36 - circular progress and this is an element
222:39 - out of the material UI
222:42 - component Library
222:43 - and then we're going to pass in a number
222:45 - of different styles into
222:47 - this component
222:51 - so we're going to make the color white
222:53 - we're going to make the stroke line cap
222:54 - round so that it's not cut it's rounded
222:57 - out the positions to be relative
223:00 - and then just to account for the larger
223:02 - element pushing to the left we're just
223:04 - going to add this so a margin left of
223:06 - -55 pixels a left to 50 and a transform
223:09 - translate of 50 percent
223:12 - so then
223:14 - we could have that and then we'll work
223:16 - on the generator title
223:19 - so the generator title is going to be
223:21 - created with exsc
223:24 - we have the title this is going to be a
223:26 - div and then we're going to pass in
223:29 - some Styles here
223:37 - and we're going to have a font family
223:40 - here
223:41 - we're going to have font size and this
223:43 - might
223:44 - already be used
223:47 - so I do wonder if this is going to be
223:49 - the same as the previous one
223:52 - and I think that we could just reuse
223:54 - this one I'm just double checking the
223:55 - Styles here but I think we can use the
223:57 - same one so you can actually just
224:00 - import that
224:02 - already
224:08 - and that'll be the same one here
224:11 - and then subtitle
224:13 - you can use the same one there
224:16 - and for modal circular progress we can
224:20 - just import that component that we just
224:22 - created
224:23 - now we'll give our
224:26 - styled component elements a save and
224:28 - then we'll give that a save
224:30 - and believe we could also give this a
224:32 - save too
224:33 - so now we've passed down those
224:35 - components those are properties into the
224:37 - child's component now let's just remove
224:40 - these State variables and let's see what
224:43 - this looks like when we open the modal
224:46 - and there's you know no variables to
224:49 - worry about
224:51 - all right so seems like when we click on
224:54 - this
224:56 - will then be getting this loading State
224:59 - it's going to say creating your quote
225:00 - and then it's we get that fun
225:02 - inspirational quote there and
225:05 - everything's operating pretty great so
225:06 - as we click on this of course able to
225:09 - click out of it but then you can also
225:11 - press escape and then that'll work great
225:13 - so now we want to do is we want to pass
225:17 - these values back in
225:30 - and we're not actually updating this
225:33 - processing quote so the reason why this
225:35 - is going to be important is if we save
225:37 - that and we try to press this button we
225:40 - don't get anything here so we still get
225:41 - the pop-up but we don't get anything in
225:43 - here and that's because
225:45 - processing quote is still set to be
225:47 - false and we know this because when we
225:49 - go back to this other example
225:51 - to our parent component
225:54 - we're not actually setting processing
225:56 - quote state yet so that's why this is
225:58 - still false
225:59 - so what we need to do is we need to have
226:02 - a methodology for how we can
226:06 - create
226:07 - a way where when we are fetching our
226:12 - quote we're going to be able to then
226:14 - start
226:16 - changing this value
226:18 - so we're going to go to our function
226:21 - that we created with the try catch
226:27 - for the handle open operation
226:31 - which is going to be here
226:33 - and under handle open operation we
226:36 - already have this value here where we
226:37 - set this to be true we're going to Now
226:39 - set processing quote to be true
226:43 - now we're going to do a try catch
226:46 - and this is where we're going to be
226:47 - running our Lambda stuff so run
226:50 - Lambda
226:52 - function
226:55 - and then this is where we're going to be
226:56 - getting a whole lot of data
226:58 - otherwise we're going to do catch do
227:00 - error
227:02 - console vlog
227:05 - error generating
227:08 - quote
227:11 - log the error
227:13 - and then we will set processing
227:15 - quote to be false so this means that
227:17 - it's
227:18 - timing out after we finish that out
227:21 - and something also that we can do is
227:24 - that in the try catch
227:26 - we know at the end of it we will need to
227:27 - set the processing quote to be false
227:29 - because as we run it we then will need
227:32 - to
227:33 - because we make it true we will need to
227:35 - make it false at the end of it so that
227:37 - it the the function ends and terminates
227:40 - and then sets processing quote to be
227:42 - false so that's a good methodology for
227:45 - us to go down
227:47 - so as we process this it should actually
227:50 - allow us to see it for a quick second
227:52 - but it might actually be way too fast to
227:54 - even
227:55 - see that there's data that's processing
228:01 - yeah it's going to be too short so when
228:04 - we are fetching this function for a
228:05 - while it might be like you know a second
228:07 - or two but we will actually see
228:10 - that spinning component to it
228:13 - now if we did want to start mocking up
228:15 - some of this functionality we of course
228:18 - are going to be using a Lambda fetch the
228:21 - query to get access to the Lambda
228:23 - function and that will actually be doing
228:26 - our true and then setting that to false
228:28 - but if we wanted to actually try to
228:30 - model some of this type of stuff up this
228:32 - becomes really important because when we
228:34 - are trying to create these different
228:35 - states of hey I'm waiting for
228:38 - a quote and then I got it back how could
228:42 - you actually model that out without
228:43 - doing anything in the cloud just yet so
228:45 - what we're going to do is we're going to
228:46 - use a set timeout function to sort of
228:51 - model how this would actually be working
228:53 - so we're going to copy that function
228:54 - we're going to do set timeout
228:58 - we're going to log that as an arrow
229:01 - function we're going to process
229:04 - set processing quote to be
229:06 - false
229:07 - and then we're going to give that
229:11 - 3000
229:13 - and that will be for three seconds so
229:15 - that we'll be able to sort of emulate
229:19 - how this is actually going to
229:21 - happen so when we make a quote
229:25 - we're going to see this for three
229:26 - seconds
229:28 - about and then we're gonna see you know
229:31 - our quote pop up here so obviously this
229:34 - will be maybe faster much faster with
229:36 - Lambda than three seconds but three
229:38 - seconds will just give us a little bit
229:39 - of an understanding of how to do that
229:41 - and then of course
229:43 - every time that we run this quote we're
229:45 - going to run that function it's going to
229:46 - be making this true and then three
229:48 - seconds is going to be false so that
229:50 - gives us a good understanding of how
229:52 - this function is going to be operating
229:54 - now what we want to do is we're going to
229:56 - take
229:59 - this child's component so this is just
230:03 - the state one of processing the request
230:05 - of the quote now we need to have if the
230:08 - quote state is fulfilled so how do we
230:10 - actually go and change that well we're
230:13 - going to have something a little bit
230:14 - different so we're going to have in that
230:16 - same square different code
230:19 - so now
230:21 - if the quote
230:23 - received is not null meaning that we
230:26 - have something there
230:28 - we'll use that
230:30 - operator
230:32 - will then make our separate div and then
230:35 - we're going to start plugging away with
230:37 - a download and
230:40 - a visualization to show
230:43 - where the quote is and then allow us to
230:45 - interact with it
230:47 - so we're going to do is we're going to
230:48 - have a quote
230:50 - generator title which we can copy from
230:54 - there
230:55 - we're then going to say download
230:59 - your quote
231:03 - then we're going to have another
231:05 - opponent that says quote
231:07 - generator or subtitle
231:10 - and we're actually going to include
231:11 - those same Styles there
231:14 - we're going to say see a preview
231:19 - close that out
231:21 - and then we're going to have an image
231:23 - blob container which is going to include
231:25 - that image so image blob
231:29 - container
231:32 - and that's going to include some
231:34 - elements
231:35 - which we will Define in a little bit
231:39 - and there's going to be an animated
231:43 - download
231:45 - button
231:53 - and before we get
231:55 - a little bit farther with these other
231:57 - styles there was something that uh I do
232:00 - want to just call out very quickly so
232:03 - when you click on this quote
232:05 - um
232:06 - you'll see this white and then blue
232:08 - border around this element so there this
232:12 - is this default for Focus around outline
232:16 - when you click on something so a way
232:19 - that we can get rid of that in case you
232:21 - see that on your screen is when we go to
232:24 - quote generator modal container which is
232:27 - the styled box we can add in this style
232:31 - so when you use Styles components you
232:34 - can use
232:35 - and colon and then a class for a pseudo
232:40 - class and then you can use these
232:41 - brackets to then Define certain elements
232:43 - so for outline we're going to choose non
232:45 - and we're going to say important so we
232:46 - never want to see outline and we want to
232:48 - prioritize this in the Styles so as soon
232:50 - as we press save
232:52 - now this should go away but if we also
232:55 - click on this now you won't see any of
232:57 - that uh background and it's it's the out
233:00 - of the border that we selected from
233:02 - before also another thing is if when we
233:05 - were writing this function we made it
233:07 - where you have to click inside of this
233:09 - text div so if you click on outside of
233:11 - that it won't actually
233:13 - um include it so something that we can
233:14 - do is we can go back to where we call
233:18 - that Handler so the handle open
233:21 - generator
233:23 - on click and we're just going to move
233:25 - this out
233:27 - to be
233:28 - where the generate quote button lives so
233:32 - that's where now we're just we just move
233:33 - this function to include the whole div
233:35 - so now anytime that you click on this
233:38 - this model will pop up
233:40 - even if you click on the text
233:43 - or click or in the corner that will
233:46 - still work and we can also just inspect
233:49 - if this is styling in the mode in the
233:53 - the mobile way that we are expecting so
233:56 - we press this
233:58 - that looks pretty good
234:00 - and then if we expand this out a little
234:02 - bit more
234:03 - that looks great too so there's just a
234:05 - couple other ways that we can test and
234:07 - make sure that we are fully
234:10 - checking out
234:12 - the Styles and also refining the vision
234:15 - of the application as we go along
234:17 - now to switch back to
234:20 - this state number two we're going to
234:22 - want to finish out the rest of these
234:24 - elements so for the image blob container
234:27 - we're going to be creating
234:31 - some animated elements
234:33 - so the animated elements are going to
234:35 - show us how we can make a little bit
234:37 - more of an interactive view for our
234:39 - actual application
234:41 - so what we're going to want to do is
234:43 - we're going to want to go here I'm going
234:46 - to go to animations
234:49 - I'm going to do image
234:51 - blob TSX
234:53 - and we're going to make a new functional
234:54 - component so we're going to do rafce
234:57 - and then we're going to react Arrow
234:59 - functional expert component and then
235:01 - we're going to call this image blob
235:08 - and then in the top we're going to
235:11 - import the image from next
235:14 - image so we're going to be of course
235:17 - working with the image module out of
235:20 - next image and this is how we're going
235:21 - to be animating our pop-up
235:24 - so something that we're going to do is
235:27 - we're going to work through some imports
235:31 - for this component and then we're also
235:33 - going to give it a style but something
235:35 - that we can do right now is we'll just
235:38 - have image blob here we'll give this a
235:41 - save
235:41 - we're then going to import
235:44 - image blob from here so image blob
235:46 - container
235:49 - inside of this
235:51 - we're then going to put an image blob
235:58 - and there's going to be some
236:00 - props that we passed down from here but
236:01 - we will work on those in a little bit
236:03 - and we'll
236:04 - press enter so that we can import image
236:06 - blob and then we're going to work on the
236:08 - image blob container
236:10 - styles
236:11 - so in terms of animations we're going to
236:14 - create a new file
236:16 - we're going to call it
236:18 - animation elements
236:25 - TSX
236:26 - and then this is where we're going to
236:27 - move this to the right
236:29 - and now we can start importing our
236:31 - elements here and something also that we
236:33 - can do since we already have quote
236:34 - generated elements something that I
236:36 - personally like to do is just
236:39 - import our last recent Imports and then
236:42 - just put those at the top and then we
236:44 - can always remove certain ones that we
236:47 - don't need we might need image we might
236:49 - need link but we could keep those there
236:52 - and then we're going to do exsc for the
236:54 - export South component shortcut
236:57 - and then we're going to do image blob
236:59 - container
237:00 - right there and then we're going to
237:02 - start adding in our styles for the div
237:05 - so we know that this is a div so put
237:07 - that there and then I'm going to copy
237:11 - our styles for this because this is
237:12 - quite a lot of code here
237:15 - and we'll put that in there and then
237:16 - I'll walk through all of the code with
237:17 - you
237:18 - so when we have this image blob
237:21 - container
237:22 - can actually get rid of this because
237:24 - that was some relative styling
237:26 - for some testing so we originally had a
237:30 - position of relative we have a text
237:32 - align of Center meeting we want
237:34 - everything to be in the middle this is
237:35 - going to be down 10 from the top
237:38 - um and then the margin top will have 20
237:40 - pixels of some margin spacing we'll have
237:43 - a transition this is going to be
237:44 - important so when we do this on hover or
237:46 - we're animating elements we want to give
237:49 - this sort of a really Sleek ease and
237:52 - ease out effect we also want the width
237:54 - to fit the contents and we also want
237:57 - margin Auto so just adding more
237:59 - centering around horizontally and
238:01 - vertically and then we also want to give
238:04 - it a height of 100 pixels total and then
238:06 - the Z index meeting make this go over
238:09 - everything and prioritize that now for
238:12 - the hover this is actually some pretty
238:14 - cool Styles because when we hover over
238:16 - this element this is how you do that in
238:17 - styled components then when you
238:19 - transform scale we're going to times
238:21 - this by 4.8 so on the hover it's going
238:24 - to grow by 4.8 and then of course the
238:26 - index stays the same
238:28 - then the transition we have this effect
238:30 - so on the hover it Transitions and then
238:33 - also on the out of hover so Mouse out
238:36 - this will have a also a transition then
238:39 - we have our box Shadow and then we also
238:41 - have some media queries and these are
238:43 - helpful because when we make our
238:46 - our application our width and our height
238:49 - you know change we want to be able to
238:50 - change that as well so when the height
238:52 - becomes 800 pixels maximum we only want
238:55 - to scale it by 3.8 and then if it's only
238:58 - 600 pixels wide we want to only scale it
239:00 - by 2.8 so this makes sure that you don't
239:02 - expand it past the width of the screen
239:03 - but that it's relative to a lot of these
239:06 - other types of styles and then these of
239:08 - course is just box Shadows uh around the
239:11 - hover effect but these are important for
239:13 - making sure that we don't
239:15 - over scale the image when we expand it
239:20 - so we can give this a save
239:23 - and then
239:25 - what we'll do is we'll then import this
239:33 - like that and then that's how we can
239:35 - easily import that there
239:37 - and then we'll also start working on
239:39 - this animated download button so this
239:41 - animated download button is going to be
239:42 - its own component
239:45 - we're then going to create a new
239:47 - functional component in animations so
239:49 - we'll call this
239:51 - animated download button.tsx
239:57 - and we can actually just copy this from
240:00 - here
240:02 - and then just paste it in there just so
240:03 - that we can start
240:05 - tiling it and then
240:08 - something also that you can do is that
240:10 - if you have the same text in many
240:12 - different places you can hold down the
240:15 - control button and press D many times
240:17 - and then that will allow us to have this
240:19 - cursor so that if we wanted to
240:24 - delete something we could do that
240:30 - for example we can hover over all of
240:32 - these images and then we can delete
240:38 - there we go so then we just select and
240:40 - then we press D delete and now we can
240:42 - write that so we can write animated
240:44 - download
240:45 - button
240:47 - and then now it's Auto writing these
240:49 - dynamically which is a really helpful
240:50 - hack so that you don't have to write and
240:53 - then write and then write you could just
240:54 - write them all at once so now we're
240:56 - going to do is we are going to have this
240:59 - give this a save we'll go back to our
241:01 - generator there
241:03 - and then we will import this so rewrite
241:06 - the last letter press enter and then now
241:09 - we have all those errors removed from
241:12 - our application
241:14 - or from our code
241:15 - so I'll give that a save and then we
241:17 - will keep proceeding here so the
241:19 - animated download button is going to
241:21 - have some pretty cool styles
241:23 - that will be helpful for us and make our
241:25 - application look kind of a little bit
241:27 - cooler and more Dynamic but before we do
241:29 - that let's just make sure that this
241:31 - actually is
241:33 - configured and it is working
241:35 - so
241:37 - we are going to say that
241:41 - we want that to equal no because we want
241:44 - to see if we can
241:46 - show that
241:48 - so when we make a quote so this is where
241:50 - this will disappear and then this is
241:52 - where that's going to be so you can see
241:54 - that here where it's going to say
241:55 - download your quote we'll have a preview
241:57 - this image blob is going to have this on
241:59 - Hover effect there and then we'll also
242:01 - have this download button that will be
242:03 - centered with some Styles and then this
242:05 - will allow us to actually copy this
242:07 - image that's there so it seems like
242:09 - everything is working without any Styles
242:11 - which is great so now we can keep
242:12 - proceeding here
242:14 - so before we forget we'll make sure that
242:17 - we revert back to it not equaling null
242:20 - we'll give that a save
242:22 - and now we can proceed with our button
242:26 - so if we go to the load button this is
242:28 - going to be a function
242:30 - functional component that we're going to
242:32 - create so something that we're going to
242:35 - do is we're going to use a pretty fun
242:37 - package called react Lottie player
242:39 - and this is going to allow us to install
242:42 - this player for a Lottie image and a lot
242:45 - of image is really just a Json object
242:47 - and it will instead of being a static
242:49 - image it allows an animation so what
242:53 - we'll do is that we'll open up a new
242:54 - terminal
242:55 - we'll do npm I
242:57 - and we'll say react Lottie player we'll
243:00 - press enter
243:03 - and then now we've installed it
243:05 - so now what we can do is we can install
243:06 - and import react body player from the
243:09 - top
243:13 - and then something also that we're going
243:15 - to do is that we're going to
243:18 - add
243:20 - our react Lottie image into our
243:24 - assets folder
243:27 - so I'll show you what this looks like
243:29 - and then
243:31 - we go to Plug and Play so you don't have
243:34 - to worry about copying this this is like
243:35 - quite a lot of code but this is the
243:38 - react Lottie image and this is what it
243:40 - looks like so it's a huge Json object
243:42 - that has all of these different
243:44 - characters and all these different
243:45 - things and what it's going to do is that
243:47 - it allows for this animated
243:51 - effect instead of it being a static
243:54 - effect
243:54 - so what we'll do is that we will say
243:56 - We'll import
243:58 - Lottie Json from and it's already
244:02 - trying to find where it is but
244:07 - we'll do assets
244:10 - and then we're going to say animated
244:12 - photo.json so that's that file
244:16 - now we're going to do is we're going to
244:18 - need to import it into our page so we're
244:22 - going to get rid of this placeholder div
244:24 - and then we're going to start adding
244:26 - some elements so we're going to say
244:27 - download
244:30 - quote card container and then this is
244:33 - going to have an on click
244:35 - and it's going to have a button which
244:37 - we're going to Define later so we'll
244:38 - just say that this is null
244:45 - this is container
244:48 - card container
244:50 - then we're going to have
244:52 - Center Lottie which is going to be its
244:54 - own South component
244:55 - and we're going to give it a few
244:57 - different styles so we're going to say
244:59 - Loop because we want the image to Loop
245:01 - and this is where we're going to be
245:02 - working from
245:04 - this Lottie package which you'll see in
245:06 - a little bit but we wanted to Loop
245:08 - we want animation data to equal the
245:12 - Lottie Json image that we're importing
245:13 - and then we also want to have it play
245:19 - so we'll close that out
245:22 - and then we're going to have another
245:23 - style component that's going to say
245:25 - download
245:27 - quote card
245:29 - context
245:31 - for container text and then we're going
245:32 - to say download
245:36 - your quote cart
245:40 - so that looks about right
245:42 - and now we're going to do is we are
245:44 - going to start working on
245:47 - these styles
245:50 - so for the first one which is d
245:53 - download card so now we're in animation
245:56 - elements
245:58 - so what we're going to do is we're going
245:59 - to control B and close it out we're then
246:02 - going to open this up and then we're
246:04 - going to have this on the side and we're
246:05 - going to do exsc
246:07 - we're going to say download
246:09 - and we can actually just copy
246:12 - from there this is going to be a div
246:15 - and then we're going to copy our styles
246:18 - from our CSS right here and that's what
246:21 - that looks like so we're going to have
246:22 - it have a porter we're going to give it
246:24 - a width we're going to have its position
246:25 - relative in the screen with a border
246:27 - radius so the edges are rounded uh the
246:30 - the cursor is going to be pointed when
246:32 - you you know hover over it and then
246:34 - there's going to be a margin there's
246:35 - going to be transform just to kind of
246:37 - get it in the width in the middle and
246:39 - then there's going to be some on Hover
246:40 - effects so it'll just be getting a box
246:43 - Shadow backdrop filter there's going to
246:46 - be some other aspects that we have to
246:48 - this
246:49 - we're then going to rewrite the last
246:51 - letter
246:52 - we'll then import that
246:55 - and we can do is we can actually
246:58 - just so the typescript won't complain
247:00 - about this we'll just comment that out
247:02 - for now
247:04 - then for centered Lottie
247:08 - what we're going to do is that we're
247:09 - going to
247:12 - copy
247:14 - this Lottie
247:16 - effect from here
247:18 - we're then going to import this
247:22 - from here
247:24 - and then that's where we're going to be
247:26 - using Lottie as a styled element so
247:28 - we're going to do is we're going to do
247:29 - exscc
247:31 - we're going to say centered
247:35 - Lottie and then this is going to be
247:37 - styled
247:38 - body
247:41 - then we're going to do is we're going to
247:43 - import these styles
247:46 - so this will have a width a height it'll
247:49 - be in the center it'll be a position
247:51 - relative and then it'll margin minus 40
247:54 - from the top and then pointer events is
247:56 - going to have none just so that it's not
247:58 - interfering with any click click events
248:01 - inside of that so then
248:04 - we'll press that
248:06 - download quote card text
248:10 - we're gonna do exsc
248:14 - we're going to say this is a div
248:18 - and then we're going to copy over our
248:21 - Styles so we can write them so
248:24 - this is now
248:25 - color font family font size right a lot
248:28 - of the good stylings that we would
248:29 - expect text align we want that in the
248:32 - center so the text is aligned we're
248:34 - going to give it some padding margin top
248:35 - minus 60 and of course for the max width
248:39 - media query we're going to be making the
248:41 - font a little bit smaller as the screen
248:43 - gets smaller
248:44 - so then we'll rewrite this last letter
248:46 - we'll rewrite that we'll give our
248:49 - elements a save and then we'll give this
248:50 - a save
248:51 - then we're going to go back to here
248:54 - and then we are just going to
248:57 - make this equal one more time just so
248:59 - that we can test this out
249:02 - we're then going to move this over
249:04 - so now what's really cool is that we
249:07 - have this button where
249:09 - you see that this image is moving up and
249:13 - down in a loop
249:14 - so I think that's pretty cool because
249:17 - what makes our application now more fun
249:19 - is that of course we have this on Hover
249:21 - effect here but also this image is you
249:24 - know sparkling it's moving and that's a
249:26 - lot of image so you can learn more about
249:28 - Lottie images if you if you start
249:30 - googling
249:31 - um there's a website called icon Scout
249:33 - and you can get a whole bunch of these
249:35 - different Lottie images many of them for
249:37 - free and this was just one that I
249:39 - thought looked really nice and just kind
249:42 - of it brings your app to life because
249:43 - now it's not just a download button now
249:45 - you have a download button with a cool
249:48 - animation and it also makes you know
249:51 - your app a little bit more interactive
249:52 - for your users so that it's more fun so
249:54 - now that we have that that's pretty cool
249:56 - so now we're going to start working on
249:58 - this other element which is going to be
250:00 - how we actually see
250:03 - the preview image of our element so this
250:06 - is going to be that image blob and we'll
250:08 - work on that next so now we're at a good
250:11 - spot where we can start taking our code
250:14 - sandbox code pushing that to Lambda and
250:16 - now we can actually try to get this
250:18 - image blob to then come back into our
250:20 - application so the way this is going to
250:21 - work is that when we actually get a
250:23 - quote received this can't be no so we're
250:26 - going to switch that back and we're
250:28 - going to be getting the string back from
250:30 - Lambda and then we're going to be
250:31 - basically having it in this image blob
250:34 - component and then we'll be able to work
250:36 - from that as soon as we get that passed
250:39 - back from our Lambda code so we switch
250:42 - this back now we're going to do is we're
250:44 - going to pass in two specific variables
250:46 - so we're going to pass in these two
250:48 - props into our application so quote
250:51 - received that's going to be what we
250:52 - passed down which you'll see from the
250:54 - top
250:55 - we pass that down as a property into
250:57 - this child's component and then blob URL
251:00 - it's not going to know what blob URL is
251:03 - yet but but we're going to be passing
251:05 - this down
251:06 - uh from our
251:08 - Lambda code and then that's going to
251:10 - exist once this function is invoked and
251:13 - then we save that in state
251:15 - so what we're going to do is
251:17 - we're going to go back to
251:19 - our values here
251:21 - we're then going to say const
251:24 - blob URL set blob
251:28 - URL
251:30 - equals use state
251:33 - this is going to be either a string or
251:36 - it'll be null because we won't get a
251:37 - value
251:43 - and then this will be set to be no from
251:45 - the beginning and then we're going to
251:47 - import use state
251:49 - as a hook
251:50 - and while we're here
251:53 - we'll also import use effect because we
251:56 - know we're going to need this in a
251:57 - little bit
252:01 - so now that we have blob URL now we're
252:03 - going to be able to
252:05 - work from the function to actually get
252:08 - this
252:09 - so
252:10 - something that we can do is that we're
252:12 - going to write two specific functions
252:14 - the first is going to be that handle
252:15 - download
252:17 - so we can write so function
252:19 - for handle handling
252:23 - the download of quote card and then also
252:26 - we need a function
252:28 - to handle
252:30 - the receiving
252:33 - of quote card
252:36 - so to handle the download something
252:38 - we're going to do is that we are going
252:40 - to say const handle download
252:45 - this is going to be an arrow function
252:48 - we're then
252:49 - given a link
252:51 - we're going to say document
252:54 - create element a
252:57 - and then we're going to say if the type
252:59 - of
253:00 - blob URL
253:03 - equals a string
253:07 - then what we're going to do is that
253:08 - we're going to have this code so there's
253:11 - going to be a link there's going to be
253:12 - an href and then we're going to set that
253:15 - as a link the link will have a download
253:17 - which we will have as quote.png which is
253:20 - the file name and then will allow us to
253:22 - click click into that link
253:24 - so this is going to be a function that
253:26 - will be able to then have so when we
253:29 - call
253:32 - and we said download your quote
253:43 - we could have the animated download
253:45 - button down here
253:50 - of course that and then we'll say handle
253:52 - download
253:53 - so
253:54 - we can actually close out these Styles
253:56 - because we don't need them right now
253:59 - so now we're going to pass this down
254:02 - to the animated download button
254:06 - we'll pass that in another property and
254:08 - we're going to need to create our own
254:11 - interface for this because it's not
254:13 - going to understand
254:15 - from a typescript perspective what we
254:17 - want that function to actually do
254:20 - so something that we can do is that we
254:22 - can say animated
254:24 - download button props
254:30 - something also that we can do is that we
254:31 - can do on click and we'll just pass that
254:34 - down and then we're going to declare as
254:37 - an interface here we'll say interface
254:40 - animated download but props
254:43 - and then we're going to say handle
254:45 - download
254:47 - and then this is how we will Define this
254:49 - type for the function
254:52 - so that looks great so far and then
254:54 - we'll be able to actually use this
254:55 - download button to handle the download
254:59 - that we pass down through here so that
255:01 - will work great now we need to do is we
255:04 - need to also work on a function to
255:06 - handle the receiving of that quote
255:08 - so this is going to be important because
255:09 - when we get this string back from Lambda
255:13 - we're going to need to do something with
255:14 - it and we're going to need to allow us
255:17 - to either add this in as the blob URL or
255:21 - revoke and remove it so that we can re
255:25 - re-add a new link so this is where when
255:28 - you fetch a new quote each time we need
255:30 - to clear out basically the placeholder
255:32 - for that old quote to make space for the
255:35 - new quote so tonight we're going to do
255:37 - is we are going to use that use effect
255:40 - hook to then allow us to work from
255:45 - this functioning a little bit more
255:48 - smoothly because we want to be able to
255:51 - just instantly get
255:52 - this string and then allow us to get
255:56 - this quote
255:59 - so we'll do is that we will
256:01 - set this up just like a normal use
256:02 - effect hook
256:03 - we'll pass this in and now we're going
256:05 - to say if
256:06 - quote received
256:09 - then
256:11 - we're going to want to do some code and
256:14 - I think it's also important to get into
256:15 - practice of if you have this
256:17 - and also make sure that we close out
256:21 - and unsubscribe from this use effect so
256:23 - that we don't have this running
256:25 - you know an unlimited number of times
256:28 - all the time
256:29 - so this is just going to say that run
256:31 - this if quote received is changing
256:36 - so then what we can do is we can say
256:37 - const we're going to say binary data
256:41 - equals and then we're going to use
256:43 - buffer
256:44 - Dot from we'll say quote received
256:48 - okay say base 64.
256:51 - so we're going to be using
256:53 - some dependencies that we're going to be
256:56 - using to work with a base 64 encoded
256:59 - string
257:00 - now when we do const blob we know this
257:03 - is going to be a new blob
257:05 - and the blob is going to be a locally
257:07 - stored
257:08 - aspect of code that we're then going to
257:11 - be basically storing in local storage or
257:14 - clearing out and then adding a new one
257:16 - each time
257:17 - so when we take this new blob element
257:19 - we're going to add in binary data
257:23 - we're then going to say that the type is
257:26 - going to be image
257:30 - Dot
257:32 - image.png
257:37 - then we're going to do is we're going to
257:39 - say const blob
257:41 - URL generated
257:45 - equals URL
257:46 - dot create
257:48 - object URL
257:51 - blob
257:54 - we'll then console log that value just
257:55 - so that we can keep track of
257:59 - what's actually being generated and then
258:01 - we're going to set blob URL
258:04 - to also be
258:06 - blob URL generated
258:08 - so these are going to be the different
258:10 - values and then we're going to be using
258:12 - use state to set the blob URL and then
258:14 - we're going to do is we're going to
258:15 - return
258:17 - we're going to make this into a function
258:20 - and then we're going to say URL dot
258:22 - revoke object URL and then we're going
258:25 - to also have blob URL there so basically
258:27 - this is going to be setting and then
258:30 - removing the old blob URL generated each
258:33 - time that we we run this so we want to
258:35 - make sure that
258:37 - if a Court's received we take this new
258:39 - data that we receive we set that as the
258:42 - blob URL and then we remove and revoke
258:44 - that old URL that we were previously
258:46 - received
258:49 - and that'll also become important so
258:50 - that you don't just store an unlimited
258:52 - number of these blob URLs in your local
258:54 - storage but they are always constantly
258:56 - cleaning out the old URL each time as
258:59 - you proceed and that's what we'll be
259:01 - doing here
259:02 - so that seems great for now and now
259:05 - something that we can do is we can also
259:07 - just make sure that
259:09 - for the quote received if we're passing
259:11 - the image blob URL down to have these
259:15 - values so things like I'll copy this
259:18 - say image blob URL
259:20 - and then what we're going to do is that
259:21 - we're going to make sure that we have an
259:23 - interface to store those values so if
259:26 - you remember from before
259:28 - we have these two values here so I'm
259:30 - just going to comment those out
259:32 - so we know that blob URL
259:35 - image blob is going to need
259:37 - received and it's going to need the blob
259:39 - URL
259:41 - then we're also going to need to create
259:43 - an interface so we'll say image blob
259:47 - props
259:50 - then what we'll do is we'll say We'll
259:52 - click declare an interface enter
259:55 - face
259:56 - props and then we'll pass these both
259:59 - down
260:05 - and then for this one
260:06 - quote uh received this is going to be a
260:09 - string
260:10 - and then for
260:13 - blob URL this could either be a string
260:15 - or it can be null
260:20 - because this Bob URL doesn't necessarily
260:23 - need to have a value but as soon as it
260:25 - does have a value we want to make sure
260:26 - that we know that that there is a value
260:28 - there
260:29 - so this is all good now we do this we'll
260:31 - go back to quote generator
260:33 - we'll say quote received
260:36 - and we'll just see that there is
260:41 - an error here and it's going to say that
260:42 - it's string not assigned to string type
260:44 - but string is a wrapper so we'll see
260:46 - here so we'll go back
260:49 - and we'll make this
260:51 - capital S for Capital string and then
260:54 - that will remove that error so there are
260:56 - differences in terms of the type of
260:59 - string it can be so just be cognizant of
261:01 - that when you're working with typescript
261:03 - to make sure that if you are
261:06 - typing out your values you need to make
261:08 - sure that those are correctly typed
261:10 - which we're doing which is great
261:12 - so to do that we'll give this a save
261:14 - we'll give this a save we'll give this a
261:16 - save and something that we can do is
261:19 - mock up how the response is going to be
261:22 - for when we are getting this image back
261:25 - from our Lambda script so we've talked a
261:27 - lot about base64 and now we're actually
261:29 - going to see what this looks like but to
261:32 - do this what I'm going to do is I'm
261:34 - going to create
261:37 - a variable called blob URL
261:41 - and we're just going to bring this down
261:48 - and then we're going to just unhighlight
261:51 - that for a second we're then also going
261:53 - to import some hooks
262:00 - and then what we're going to do is to
262:02 - enter and then we're going to write a
262:05 - pretty big use effect hook and it's
262:06 - going to simulate us fetching this
262:11 - response object from Lambda which is
262:13 - what we'll be doing we'll get this
262:14 - string and then we're going to show how
262:16 - we can actually set that image
262:18 - in our application
262:21 - so we're going to do is we're going to
262:22 - do use effect
262:28 - or say const response
262:32 - and then the response object is going to
262:34 - have a number of different variables but
262:36 - what we're going to really look for is a
262:38 - status code
262:40 - of 200
262:42 - in terms of headers
262:46 - we would have a content
262:50 - type
262:51 - which would be image.png
262:54 - and then access
262:58 - control allow
263:00 - origin
263:03 - which will give a wild card for
263:06 - everything
263:09 - and then our body response we're gonna
263:13 - have a body
263:15 - which is going to be a blob
263:17 - and then is base 64 encoded we're going
263:20 - to say that's true
263:22 - get rid of that backslash and then for
263:24 - the body so this body is going to be a
263:28 - very very very very very long string
263:31 - and this is actually the first time that
263:32 - you're actually going to see what a
263:34 - base64 encoded string looks like
263:36 - so you don't have to worry about writing
263:38 - this down we're gonna I'll show you how
263:40 - to get this in Lambda so that you don't
263:41 - actually have to do it
263:42 - but it's going to look something like
263:44 - this monstrosity
263:46 - so this huge list of characters is what
263:51 - an image looks like so when we have an
263:53 - image
263:55 - it can either be you know a file like a
263:57 - PNG or a JPEG but if we wanted to turn
263:59 - this into a code string that's another
264:02 - way to also get an image so this base64
264:05 - encoded string really looks just like
264:07 - this and this
264:09 - all these characters all of this code
264:12 - compiles down to an image that we can
264:15 - then set and then use in our application
264:18 - so also just showing back here so we
264:21 - have this response object inside of our
264:24 - use effect hook
264:25 - so let's scroll down to where it stops
264:27 - so it stops here
264:28 - now we're going to do is we're going to
264:30 - say const binary
264:32 - data equals buffer
264:35 - Dot from
264:39 - we're going to say response body because
264:41 - that's what the this is what the body
264:43 - variable is say response that body and
264:47 - we say base 64.
264:50 - then we're going to say blob because we
264:52 - need a blob variable and we're going to
264:55 - say that's a new blob
264:58 - this is going to be binary data
265:01 - and then the type is
265:08 - response dot headers
265:12 - with the content type
265:19 - close out the bracket
265:22 - and we'll get rid of that
265:24 - quotation mark
265:29 - and then we're going to take our blob
265:31 - and then put that into a new blob URL so
265:33 - we'll say const new blob
265:36 - your Rel equals URL
265:39 - create object URL
265:42 - and we'll put blob in there and then
265:45 - we're going to do is we are going to set
265:48 - blob URL with that new blob URL that we
265:51 - just got
265:53 - then we're going to return
265:58 - as an arrow function
266:00 - URL revoke
266:03 - object
266:05 - URL
266:07 - with the new blob URL
266:10 - so I'll be able to clear out
266:12 - this value every time that we set that
266:14 - and then what we'll do is we will make
266:17 - sure to unsubscribe from this event so
266:19 - every time that the page loads this will
266:21 - load and it's saying that this
266:24 - can't find set blob URL so we're going
266:27 - to go back up to the top
266:28 - and we're going to make sure
266:31 - that we're able to set this
266:35 - and if it's not being read
266:38 - that means that we are not importing it
266:40 - correctly
266:51 - so this might be typescript being a
266:54 - little bit slow here
266:56 - so something that we can do is we see
266:58 - that it's not um it's not working as
267:01 - quickly as possible so something that we
267:03 - can do is we can try saving this
267:06 - and then what we can do is we can press
267:09 - command shift p we can reload the window
267:13 - and sometimes this is a way to sync up
267:16 - typescript changes
267:18 - just so that we can
267:20 - work a little bit faster so sometimes
267:22 - when you're doing a lot of typescript
267:23 - changes or errors I've noticed that
267:26 - sometimes you need to do that reload
267:28 - window just to get your workspace and vs
267:31 - code synced up with typescript so that
267:34 - it works so you can always use that just
267:35 - as a check in case you ever have any
267:37 - issues or ever have any errors so now
267:39 - that we have use effect
267:41 - something that we'll also do now is
267:42 - we'll do if and we'll create a check
267:45 - where we need the blob URL
267:48 - we'll create this we'll do return
267:54 - no
267:56 - and then we're going to create an object
267:59 - so we're going to remove that we're
268:00 - going to create an image
268:05 - component with The Blob
268:08 - URL
268:10 - and some alt which is going to say alt
268:12 - text which is going to say generated
268:17 - image we'll just say image quote card
268:25 - with
268:26 - we're going to give that a 150
268:30 - and a height
268:32 - we're going to give that as 100.
268:37 - so and then we export our default image
268:40 - blob and this seems pretty good
268:44 - so what we're going to do is we're going
268:45 - to give this a save we're then going to
268:47 - open up our application
268:50 - in another Tab and something that we are
268:53 - going to do is we're first going to
268:54 - because of course we're going to be
268:56 - testing
268:58 - so we're going to do make a quote that's
269:00 - going to generate right it's going to
269:02 - time out after three seconds and now
269:03 - we're going to do is we're going to go
269:05 - back to our page
269:08 - to our quote generator we're then going
269:10 - to say if this equals no because we
269:12 - actually haven't set quote received yet
269:14 - we're going to give that a save
269:16 - and now we actually have what is going
269:19 - to be
269:20 - this preview so if we click on this so
269:23 - to see how this is
269:25 - you know making the the background sort
269:28 - of blur it out and
269:30 - not as uh not as seeable and we actually
269:33 - see this image so what's really cool
269:35 - about the URL is that if we open this
269:37 - image in a tab
269:38 - so this is a real image that we can take
269:40 - we can drag we can move around with and
269:42 - that's what that blob is doing so it's
269:44 - creating this blob HTTP localhost 3000
269:47 - and then it gives it this unique ID so
269:51 - that we can identify this in our local
269:53 - storage so that's why if you took this
269:56 - you could do copy image you could save
269:58 - this image you can open it up in a new
270:00 - tab or copy text from image or copy
270:02 - image address and that's all because we
270:05 - have this image and we can also see this
270:07 - if we inspect it
270:10 - we see that its source is now that so if
270:14 - we go back to our to our code
270:22 - so down here
270:25 - we have this image with the source which
270:27 - is the blob URL so the actual blob URL
270:30 - is this and that's what we generated
270:31 - with that base 64 encoded string so we
270:34 - take that really long crazy string of
270:36 - characters and then that is what gets
270:38 - compiled down into a blob and we use
270:41 - buffer along with a couple other modules
270:44 - to then turn that into an image that we
270:46 - can then
270:47 - save in our local storage which is
270:49 - awesome so this is exactly how we're
270:51 - gonna work and then we're going to have
270:53 - this download your quote button to
270:55 - download this image once we get this
270:56 - back from Lambda but this is the
270:57 - functionality and also just to show you
270:59 - some of the styling that we set up from
271:02 - before so as we make this smaller and
271:06 - make this
271:07 - more like a mobile application and we
271:10 - put that in the middle
271:11 - so now if we try to make a quote
271:14 - obviously we'll see that there we won't
271:15 - see that when we go there but do you see
271:17 - how now this is smaller and this is more
271:19 - contained in here and then if we hover
271:21 - over this this hover is actually
271:25 - smaller than the than the hover if the
271:28 - screen was expanded and we'll see that
271:30 - again
271:33 - to the here so this is much bigger than
271:36 - what we just showed on the mobile view
271:38 - so that's how media queries become
271:40 - really important when we are working
271:42 - with our Styles because then we're able
271:44 - to actually dynamically change how the
271:47 - style looks based upon the width of the
271:50 - screen so you'll have a different mobile
271:52 - experience than a desktop experience
271:54 - which makes sense because you have
271:56 - different widths on both of those
271:57 - screens so that's great so now we're
271:59 - going to be able to go back to our code
272:02 - and now we can start working on the
272:04 - script to receive this data from Lambda
272:06 - and then what we'll do is instead of
272:08 - getting this base64 string locally right
272:10 - we're going to be getting this in AWS
272:12 - Lambda returning back as a response so
272:15 - we're going to get a response object but
272:17 - it won't be locally stored it's going to
272:19 - be sent from our API through Lambda into
272:23 - our application and then decoded in the
272:25 - front end with typescript so it'll be
272:26 - the same exact process except we're
272:28 - actually going to get a blob URL that
272:31 - will be from
272:32 - not a response locally but it'll be from
272:34 - AWS so now that we have worked on this
272:38 - local testing of our inspirational quote
272:40 - generator let us of course get into the
272:43 - habit of doing another save
272:48 - so that we can
272:50 - start working from here so
272:53 - I'm going to do control Z
272:58 - just to make that a little bit smaller
273:02 - and now we're going to say
273:05 - local
273:06 - or say add
273:08 - local mock of
273:12 - quote however
273:15 - image blob
273:17 - so we'll make a commit to that
273:20 - we'll push origin
273:24 - and now we're ready to go so now that
273:27 - we're in a good spot with the front end
273:29 - now let us work on the Lambda function
273:32 - that we're going to be using to generate
273:34 - this this code for our quotes
273:37 - so when you go to your amplify folder
273:41 - there's a number of different subfolders
273:42 - but we're going to go to back end
273:44 - we're not going to go to API but we're
273:46 - going to go to function and we'll go to
273:48 - inspo quote Lambda which is what we just
273:49 - generated a while back now we're going
273:52 - to go to the index.js file and now we're
273:54 - able to see
273:56 - a starter
273:58 - template for our hello from Lambda
274:00 - function so basically what this is doing
274:02 - is that we're going to import types for
274:04 - AWS Lambda
274:05 - through an API Gateway proxy Handler and
274:08 - then we have our exports Handler which
274:10 - is an async event and then this is just
274:14 - going to console log the event so it's
274:16 - important to think about each of these
274:18 - every time that when you run a Lambda
274:20 - function that's an event and you can
274:23 - pass in data or test or input AWS Json
274:27 - into that event and then you'd be able
274:30 - to process it so you could do batch
274:32 - processing inside of a Lambda you could
274:35 - return a status code of 200 kind of like
274:38 - our response object from before so you
274:40 - could return a response you could just
274:42 - generate code in AWS and then have it do
274:44 - something and then there's nothing
274:45 - returned back really it's up to you in
274:48 - terms of how you want to configure your
274:50 - serverless scripts but for us we're
274:53 - going to be returning a response back to
274:56 - the user and that's going to be that
274:58 - that body response that we had before
275:00 - which is going to be that base64 encoded
275:02 - string so what we're going to do is that
275:04 - we're going to first open up
275:06 - package.json and we're going to see
275:08 - what's already installed with us so we
275:12 - have a name description the main file is
275:15 - going to be that index.js we have a
275:17 - license and we have some Dev
275:18 - dependencies but we're going to also
275:21 - need to install some actual real
275:22 - dependencies so we're going to do is
275:24 - that we're going to open up the terminal
275:27 - we're going to open up a new line we'll
275:30 - say clear
275:32 - and now we're going to do is that we're
275:33 - going to do CD
275:35 - we're going to drag this Source folder
275:39 - here so drag the path press enter and
275:42 - now if we do LS this is where we're in
275:46 - this directory
275:48 - for
275:49 - this location so now we're going to do
275:51 - is that we're going to clear this and
275:53 - then we're going to do npm I and then
275:55 - we're going to install some dependencies
275:58 - so we're going to want
276:00 - to do npm I so go back there so we're
276:03 - going to want to do types at types node
276:07 - we're going to want to install node
276:09 - Fetch and it's going to be a very
276:11 - specific version of node because we will
276:16 - need this for our Lambda if you do node
276:19 - Fetch and it's version three this won't
276:21 - work in Lambda because of how this is
276:23 - configured for
276:25 - the certain type of
276:28 - node.js that we're going to be using we
276:30 - need to make sure that we use version
276:32 - two
276:33 - because we use require statements so we
276:35 - need to make sure that we abide by that
276:36 - we also need to install path
276:40 - and we also need to install sharp and
276:42 - sharp was that library that we were
276:45 - using to composite our image together so
276:48 - we're going to do npmi
276:50 - and install these packages together
276:54 - and then this might take a couple of
276:57 - minutes
276:58 - and then we should see the printout
277:02 - there so now if we make this smaller we
277:06 - should see that all the packages
277:07 - installed correctly as we'd expect now
277:10 - what we can do is we can open back up
277:12 - our
277:16 - node.js index.js file and now we can
277:19 - start plugging away with our function so
277:21 - there are some things that we're going
277:23 - to need to do when we are turning our
277:26 - code sandbox code so this code
277:30 - into something that can work with
277:33 - Lambda so we have these packages that
277:36 - are installed right we have our our six
277:39 - steps
277:41 - we have our get random quote function
277:46 - we have that SVG right we have all these
277:49 - things and then we run get random quote
277:50 - so to take all of this code we're not
277:53 - going to be able to just import that
277:54 - into this Lambda function just like that
277:56 - we are going to need to make a few
277:58 - modifications but
278:00 - promise it's not that many things so
278:03 - something that we are just going to do
278:04 - is we're going to need to install some
278:05 - packages
278:07 - so we're going to declare AWS
278:10 - I'm going to say require
278:12 - let me say AWS SDK
278:15 - and something that we're going to need
278:17 - to do for our Lambda function is
278:19 - something that I think is really cool so
278:22 - when we are working with any sort of AWS
278:25 - service we need to allow for resource
278:28 - access controls so this is going to
278:30 - allow us to and these are really IEM
278:33 - statements or confirmation template
278:36 - modifications but when we want to have a
278:38 - Lambda
278:39 - speak to our database we're going to
278:42 - need to create resource access to allow
278:45 - Lambda to speak to Dynamo so the reason
278:48 - of why we're going to do this is that of
278:49 - course we need to run our code and
278:51 - generate the image but if you remember
278:52 - from before we wanted to enable a way
278:55 - where as you run this function we want
278:59 - to then update the database
279:00 - but that specific database object that
279:03 - we created before if you remember that
279:04 - quotes generated number we want to
279:06 - increment that by plus one every time
279:09 - that this function executes and that's a
279:11 - really cool way where you could have
279:13 - serverless code sort of that event
279:15 - driven architecture where something
279:18 - happens in a script that then modifies
279:20 - the database or you could have it where
279:22 - a database object happens and then a
279:24 - script runs it's really up to you in
279:26 - terms of how you are interested in event
279:29 - driven architectures highly would
279:31 - recommend checking out dynamodb streams
279:34 - it's a very very cool way to enable that
279:37 - event driven architecture within a
279:39 - database context and then with Lambda
279:41 - we're going to be checking out our
279:43 - resource access permissions to connect
279:45 - Lambda to Dynamo
279:47 - so we're going to be doing a couple of
279:49 - things here
279:51 - but to specifically to allow
279:53 - our Lambda function to speak to Dynamo
279:55 - what we're going to need to do is that
279:56 - we're going to open up the terminal
279:57 - again
279:58 - we're going to do and we can actually
280:00 - close this
280:01 - uh this terminal Window app because we
280:03 - don't need it anymore
280:05 - what we're going to do is that we're
280:06 - already here we could do amplify update
280:10 - function
280:15 - and I will bring this up just so that we
280:18 - can see this a little bit more easily so
280:20 - there's only one function here that we
280:22 - can select from so we'll do inspo quote
280:24 - Lambda
280:25 - now what's a really great feature about
280:28 - the AWS amplify framework is that it's
280:31 - already pulling in all of the data about
280:33 - our inspo quote Lambda it knows that
280:35 - this is a node.js runtime and then it
280:38 - gives us some information about what
280:39 - we've set up so we need to focus on the
280:41 - resource access permissions because this
280:44 - is going to allow us to speak to our
280:46 - database so what we're going to do is
280:48 - that we're going to do resource access
280:49 - permissions
280:51 - we need to focus on storage
280:54 - which is our data now what we need to do
280:56 - is that we want to be able to read and
280:59 - we want to be able to update so we're
281:01 - going to be able to read the database
281:03 - object and then we also want to update
281:05 - it so we're going to update it by
281:06 - incrementing by plus one the number of
281:09 - quotes that were generated each time
281:10 - that the function runs so we're going to
281:12 - select those two options with the space
281:14 - bar and then go down and then press
281:16 - spacebar and then you see that they're
281:17 - highlighted we're going to press enter
281:20 - and do you want to edit the Lambda
281:23 - function now we're going to say yes
281:29 - and then we'll press enter to continue
281:33 - and then it will be up here
281:36 - so now we're going to do is that there
281:38 - might be a little bit of a difference
281:40 - between what you were writing in your
281:42 - Lambda code and then what
281:45 - amplify and the CLI just generated for
281:47 - us so if you ever try to save this you
281:50 - might get an error where it says the
281:51 - content of the file is newer so what we
281:53 - can do is that we can compare
281:55 - and we see here that these were the
281:57 - Imports that amplify CLI wanted to add
282:00 - to our file but we had this code so
282:03 - something that we can do which is a
282:05 - handy shortcut is we'll press copy we'll
282:07 - copy this code
282:09 - and then we'll just we'll just exit out
282:10 - of this what we want to do is that we
282:12 - want to include this code into our file
282:17 - and not this so it will do is that we're
282:19 - going to say discard your changes and
282:22 - revert to the file contents so that
282:24 - button and now
282:26 - we see that these are the Imports that
282:28 - the amplify CLI generator for us and
282:31 - we can still you know bring in our code
282:33 - from before so what's awesome about this
282:35 - is that what amplify just did was it
282:38 - added these environmental variables so
282:40 - that we can pull from them and use them
282:43 - in our code and we don't need to hard
282:45 - code the table name or you know the Arn
282:49 - or the graphql API output we don't need
282:52 - to do any of that or the environment of
282:53 - the region we're able to just pull these
282:55 - in as environmental variables and this
282:57 - is the real power of building with a CLI
283:00 - like amplify because we're able to just
283:03 - work so quickly with our serverless
283:05 - architecture and really scale out
283:07 - systems without needing to second guess
283:08 - you know is this the right variable is
283:10 - this the right name we're able to just
283:12 - pull all these in pretty pretty quickly
283:15 - and also make sure that it is all code
283:17 - that is correct which is great so now to
283:20 - get these AWS
283:23 - packages
283:25 - this is how we're going to do the AWS
283:27 - components and then we're also going to
283:29 - have the image generation
283:32 - packages
283:33 - so to do the AWS things we're going to
283:35 - need the AWS SDK but just a handy thing
283:38 - to note is you don't need to do npm
283:40 - install AWS SDK this is actually a
283:42 - pretty big package and you wouldn't want
283:44 - to necessarily install that into your
283:47 - pack.json there actually is a scope down
283:50 - way in which the Lambda is actually able
283:52 - to know these different parts of the AWS
283:55 - SDK so you don't actually it's baked
283:58 - into the Lambda so you don't actually
283:59 - need to install it directly it'll just
284:00 - know when you call hsdk it'll just know
284:03 - what you need there are some exceptions
284:05 - though with certain services so you just
284:08 - might need to be aware of you might need
284:10 - to install you know AWS SDK slash client
284:15 - slash something just to get certain
284:17 - packages for certain services but
284:19 - dynamodb is one that we can already use
284:22 - that's baked into Lambda so we're going
284:25 - to do cons dot client and this is how
284:27 - we're going to create a new dynamodb
284:31 - client that we can work from so do new
284:33 - AWS Dot
284:37 - dynamodb
284:39 - dot document client and something that's
284:42 - also interesting about
284:44 - the um Amazon code Whisperer which I was
284:48 - using it was Auto it was already trying
284:49 - to auto complete the region
284:52 - but we don't actually need to do that
284:54 - because
284:56 - if we try to install
284:59 - um so basically because we're using
285:00 - Lambda with amplify the Region's already
285:03 - programmed into the Lambda so it'll know
285:05 - that we just need to install
285:07 - you know and run this specific AWS
285:10 - dynamodb document client and then it'll
285:13 - know that that's where that's what we're
285:15 - working from so now under the image
285:17 - generation packages
285:19 - we're gonna do cons Sharp
285:23 - and we can actually probably just copy
285:26 - some of these from before
285:30 - so we'll do here
285:32 - and we'll do cons Sharp
285:35 - and then also for fetch
285:39 - but you can copy that one
285:40 - so require node Fetch and then we are
285:44 - going to need to do those other ones so
285:46 - const path equals require
285:50 - path which you'll see
285:53 - later on when we use that and then const
285:55 - FS
285:57 - will require
285:58 - FS
286:00 - and I'm just going to make
286:04 - single quotes for all of these just to
286:05 - make it a little bit more organized
286:10 - great okay cool
286:13 - so now we're going to do is that outside
286:15 - of this Handler we're going to write our
286:17 - function that's going to update our
286:20 - dynamodb so we'll say function
286:23 - update
286:25 - dynamodb
286:28 - table
286:31 - for the function that we're going to
286:32 - write for our updating dynamodb table
286:34 - we're going to write an async function
286:37 - and we'll call it update
286:40 - quote dynamodb object
286:48 - and then we're going to have our const
286:50 - quote table
286:52 - name variable and that's where we're
286:55 - going to pull
286:58 - our inspirational quote table name and
287:01 - that's from dynamodb but this is how
287:03 - we're using our environmental variables
287:05 - to then call this
287:07 - so we're going to do process
287:09 - .env Dot
287:12 - that table name and that's uh
287:14 - environmental variable that was created
287:16 - for us by the amplify CLI now we're
287:19 - going to do quants quote
287:22 - object ID
287:23 - and that's where we're going to go back
287:26 - to dynamodb and we're going to
287:30 - copy that
287:34 - and that's where we're going to have a
287:36 - string
287:37 - for this value
287:39 - so we want to modify this specific
287:42 - object in our database and this is the
287:44 - database name
287:46 - now we're going to put a try catch
287:49 - and we're going to do catch
287:53 - the error
287:55 - and we'll of course console log
287:59 - error updating quote object in Dynamo
288:09 - and then we'll log that error
288:12 - so the actual code that we're going to
288:14 - be using is we're going to be using this
288:17 - params method to then update
288:21 - using a promise our dynamodb so it's
288:23 - already kind of constructing this value
288:25 - but we'll go through this together
288:27 - so when we do this we're going to do
288:28 - create a variable we'll call it quote
288:31 - params
288:33 - let's meet object so then there'll be a
288:36 - table name
288:38 - which we'll call quote table name
288:42 - there'll be a key
288:45 - which we'll call ID
288:47 - and that's going to be quote object ID
288:51 - then we're going to have an update
288:52 - expression
288:55 - and that's going to be a set
288:57 - and we're going to call this quote
288:59 - generated
289:00 - because that's going to be the value and
289:02 - we're going to make that equal to
289:07 - quotes generated plus a value that we're
289:10 - going to increment and that's where the
289:12 - Inc is going to come in
289:14 - then the expression
289:17 - at tribute value
289:22 - is going to be this
289:24 - so there's going to be an
289:25 - increment
289:27 - and that'll be one
289:29 - so we're basically taking this value and
289:32 - updating
289:34 - the update expression to then include a
289:37 - one so it's going to be the quote
289:39 - generated equals close generated already
289:41 - Plus 1.
289:42 - and these are going to be the same
289:44 - values so that will work great so now
289:47 - we're going to do is we're going to
289:48 - continue along we're going to say that
289:50 - there is an expression
289:54 - attribute names
289:57 - and then we're going to say quotes we
290:00 - can actually just copy this in case that
290:02 - makes that easier so quotes generated
290:06 - is
290:07 - quartz generated
290:13 - and then there's going to be a return
290:16 - values
290:19 - which is going to be updated
290:21 - new
290:23 - so we're going to be focused only on
290:25 - updating the new value every time that
290:28 - this runs
290:29 - then what we're going to do is that
290:30 - we're going to
290:33 - use this value
290:35 - this quote params
290:39 - when we're calling this Lambda function
290:42 - so we're going to do is we'll do const
290:44 - update quote object
290:47 - equals a weight because we need to await
290:49 - this function with your dot client
290:53 - dot update
290:55 - pass in those quote params
290:58 - into the update
291:00 - do you promise
291:03 - and then we're going to return
291:06 - update quote object
291:09 - and that's how we're going to be able to
291:11 - use this specific function
291:14 - in our Lambda script
291:16 - and then of course we're catching any
291:19 - errors where this doesn't work out
291:22 - that's great so now we're going to do is
291:26 - we're going to Now work on getting our
291:28 - code from code sandbox into our exports
291:31 - Handler so we can actually start
291:34 - doing the image composition as well but
291:37 - of course we can give this a save so
291:39 - we'll keep our console log for our event
291:41 - in there because we still want to track
291:43 - when events get
291:45 - created every time that we run the
291:47 - Lambda so now we're going to do is that
291:49 - we're going to go back to code sandbox
291:52 - and
291:54 - we're going to need this API URL because
291:56 - that's going to be important for when we
291:58 - use this inside of our event handler
292:00 - we're going to need to call the API
292:02 - random from Zen quotes
292:04 - then what we're going to do is that
292:06 - we're going to go back here and then
292:07 - we're going to take
292:09 - all of this code
292:17 - copy that
292:20 - we're then going to put that
292:22 - here
292:25 - so we're going to do
292:26 - generate
292:29 - the function
292:32 - generate
292:41 - so put that in there
292:42 - and we're going to need to make some
292:44 - changes here to how we're actually
292:46 - calling this because before we would
292:48 - just call this and then we'd be done but
292:50 - instead of generating an image we're
292:52 - going to need to generate this base64
292:54 - string so that we can actually export
292:57 - that as a response and then the user
292:58 - will be able to see that so everything
293:01 - here is going to basically be the same
293:02 - we have our quote text we have our quote
293:04 - author we have our response which we're
293:07 - going to
293:08 - you know await and then fetch from the
293:10 - API input
293:13 - or here which is that and then we're
293:15 - going to need to pass that in so we'll
293:17 - just need to be cognizant of passing
293:18 - that into the function since this is
293:20 - the function that we're going to call
293:21 - but we put that we pass that in then the
293:24 - quote data is going to be some
293:25 - response.json and that everything else
293:28 - is looking pretty good right we have our
293:31 - SVG image which we're passing in we've
293:33 - already constructed this we know that
293:35 - this works
293:36 - but of course we're going to need to
293:38 - create some backgrounds because these
293:40 - backgrounds don't exist in the Lambda
293:42 - function yet so what we're going to do
293:44 - is that we're going to in our
293:45 - inspirational quote Lambda we're going
293:48 - to create a folder we're going to call
293:49 - it backgrounds
293:51 - and then we're going to copy
293:53 - those images that we already have from
293:56 - our
293:57 - assets folder
294:02 - which should be here
294:05 - but if you didn't already save them then
294:07 - we'll just need to open that up in our
294:09 - finder
294:11 - which you already probably have these
294:13 - saved locally
294:15 - and then I will just copy these and put
294:18 - these into here
294:20 - and now we have the file here so
294:22 - file here file here file here and then
294:25 - those become the backgrounds that we add
294:27 - so now when we call background images
294:29 - it's going to know that we're in here
294:31 - backgrounds and then it'll find those
294:34 - backgrounds in the folder
294:36 - so now we're going to do is that we are
294:38 - going to then go through random index
294:41 - we do all of those constructions that we
294:44 - generated before and we tested we know
294:46 - that this works
294:48 - and now we're going to do is that we're
294:50 - going to need to do
294:51 - a few changes here so this is where
294:54 - we're composing the image together we're
294:57 - going to need to make sure that we don't
294:59 - necessarily save it as an image
295:02 - but we're going to then save it as a
295:05 - string so we're going to do is that
295:07 - we're going to we we have the time stamp
295:09 - but we won't actually really need that
295:10 - anymore because we're not going to be
295:11 - using the timestamp but we are going to
295:13 - create
295:14 - this image path
295:18 - so this image path is going to be
295:22 - not necessarily the file right we're
295:25 - going to be creating an image that is a
295:27 - string and then we're going to pass that
295:29 - out so we're going to do path dot join
295:33 - TMP and that's for temporary storage so
295:36 - this is how we're going to be able to
295:37 - pass
295:38 - this string or this this image into our
295:43 - script
295:45 - next up what we're going to do is we're
295:46 - going to give this quote card.png
296:00 - and
296:04 - what we can do is we'll still have this
296:07 - that SVG is still
296:10 - SVG buffer is still there but we're
296:12 - really focused on this image path that's
296:14 - going to really be like the next part
296:16 - and you know we still sort of have that
296:18 - that image construction from before but
296:21 - we can kind of pass this up so I'm sort
296:23 - of doing a little bit of organizing here
296:24 - just so you can see what the elements
296:26 - are that are really important so these
296:30 - are really Legacy from before and then
296:32 - our new Focus we're focus on is this
296:34 - path.join now we're going to do is
296:38 - that
296:42 - could actually see how that was
296:44 - connected there but now when we do image
296:46 - path what we're going to do is that
296:48 - we're going to do image we're going to
296:49 - do composite do SVG I'm going to say
296:52 - instead of finals quote card timestamp
296:54 - we're actually going to do image path
297:00 - so you can see how like that applied to
297:02 - the other ones before but why we have it
297:04 - here is that we're taking this image
297:06 - path
297:07 - in temporary storage we're then going to
297:09 - put it with the image path
297:12 - and then what we're going to do is that
297:13 - we're going to do some updating to
297:17 - our Dynamo
297:19 - and then also
297:21 - run this response as the output so what
297:25 - we'll do is that we'll do update
297:28 - basically function
297:31 - update
297:32 - dynamodb object in table
297:36 - and then we'll do try
297:39 - and catch our
297:43 - we'll say
297:46 - unquote this that looks good
297:50 - and
297:52 - now in our try catch we're going to do
297:54 - update
297:55 - quote Dynamo to be object and that'll be
297:57 - a function
297:59 - and then we're going to return
298:04 - this as an output
298:09 - after our try catch so after this try
298:12 - catch with the error we'll then do that
298:15 - and we're going to be
298:18 - turning some code so we're going to turn
298:20 - status of 200
298:24 - we're going to have some headers
298:26 - and
298:28 - Access Control allow origin we're going
298:31 - to want this one
298:33 - I'm not going to need headers for this
298:39 - but what we will need is content
298:41 - type
298:43 - and that's going to be
298:45 - image.png
298:48 - which is the type we expect
298:51 - and then after headers
298:58 - can
299:00 - do some formatting here
299:03 - now for the body
299:06 - instead of it being this
299:08 - we're going to need to do FS dot read
299:12 - file sync
299:14 - the image path
299:16 - and then we'll say two string and then
299:19 - this is where we make it a base
299:21 - 64 encoded string
299:26 - and then we'll say is base
299:29 - 64. encoded and we're going to make that
299:32 - true
299:33 - we close that out
299:35 - we do that and then we're going to say
299:37 - return
299:38 - I'll wait
299:40 - get random quote
299:44 - API URL
299:48 - and that will round out the rest of our
299:50 - landscript so let's go back and unpack
299:53 - really what we're doing here because
299:54 - this is like quite a lot of things that
299:56 - we are changing we're updating so we
299:59 - have this function here and we'll just
300:01 - close this out just so that we can see
300:02 - that
300:03 - so
300:05 - we have this function
300:07 - in here and we have this API input so
300:10 - what we will do is that
300:12 - given the series given this input into a
300:14 - function we want to fetch this random
300:17 - quote and then use that in our in our
300:19 - quote card so when we take this we
300:22 - basically pass this in and here and then
300:25 - that's where we're going to be then this
300:27 - function is a construction of two
300:29 - different functions which is hey make
300:31 - this quote but then also update Dynamo
300:36 - and that's why we're running this
300:38 - because this is going to be important
300:40 - for our script and we get that function
300:43 - up here
300:46 - so it has all of this code here and then
300:49 - that's what we're going to be updating
300:50 - so now when we run our exports Handler
300:53 - this is going to be all of the code that
300:56 - we run
300:57 - and we have our backgrounds we have all
300:59 - of these things and also just to go
301:01 - through
301:03 - some of this timestamp some of this SVG
301:06 - buffering so when we have SVG buffer
301:10 - we want a buffer from the SVG image
301:12 - that's what we had before but then we
301:15 - have this image path where we say
301:16 - path.join we put it into TMP and then we
301:21 - have quote card PNG as the name then
301:23 - under const image we're going to await
301:27 - with sharp the selected background image
301:30 - we then composite with the input is the
301:32 - SVG buffer and then that's how we're
301:34 - constructing it and then we say to file
301:36 - path which is image path
301:39 - and then we're going to be doing our try
301:42 - catch which is going to be updating our
301:45 - dynamodb object
301:46 - and then we'll of course catch that if
301:48 - there's an error updating Dynamo and
301:51 - then we're going to return a status code
301:53 - of 200 with the headers that we expect
301:57 - and that's going to be content type of
301:58 - image PNG which is that's how we would
302:01 - be getting this base64 string and in the
302:03 - access control allow origin is that and
302:06 - then in the body which is going to be
302:08 - some Json we get back we're going to
302:09 - have FS for read file sync which is
302:13 - going to include that image path we're
302:15 - going to put that to string and that's
302:16 - going to be base64. and then we say is
302:19 - basically for encoded meaning true so
302:22 - that we know that this is what the
302:23 - response object is going to be
302:25 - and then we're going to return a weight
302:27 - and we're going to get random quote with
302:29 - the API so that we're able to fully
302:31 - construct
302:33 - this script and get it to work
302:37 - so that's going to look great when we
302:39 - actually have this running live and now
302:43 - what we can do is that we'll give this a
302:45 - save
302:47 - we'll then pull up
302:52 - amplify status
302:58 - and now we're going to do is that
303:00 - we're going to check this out we're
303:01 - going to see
303:03 - that this function that we're working on
303:05 - has an update operation so now we know
303:08 - that we're able to push this so we're
303:09 - going to do amplify
303:10 - push
303:12 - and this is where we're going to be able
303:13 - to update our cloud formation stack with
303:15 - this change
303:17 - and we're going to say yes
303:27 - and now it's going to update our cloud
303:29 - formation stack to update that function
303:31 - and then our Lambda function our Lambda
303:34 - script will be updated in the Lambda
303:36 - console in AWS for us using our cloud
303:40 - formation stack updates
303:43 - all through the amplify CLI so I'm going
303:45 - to pause recording and then I'll resume
303:47 - it when the function is updated
303:50 - so that really didn't take very much
303:51 - time at all I think it took maybe a
303:53 - minute it actually might have been
303:54 - actually less but now we have all of our
303:58 - you know function updates that are
303:59 - needed and especially that resource
304:01 - permission between our dynamodb table
304:03 - and Lambda so now if we go back to
304:07 - Lambda console and we actually go and
304:10 - search for this function we're going to
304:12 - see that this was updated three minutes
304:13 - ago which was what we just did so we're
304:16 - going to click on this
304:19 - and now we see that this is the function
304:22 - that we're going to be working from also
304:25 - something that is just interesting to
304:27 - note is when we updated our permissions
304:30 - for our function we were updating our
304:32 - execution role for our Lambda function
304:34 - but now we have this resource for Dynamo
304:37 - so you can also look at buy action
304:40 - or you can also look at by resource and
304:43 - I think that this is helpful to see
304:44 - where now we allow access to get or
304:49 - update and that's something that our
304:51 - Lambda function now has access to
304:53 - and you can see these maybe a little bit
304:55 - better but these are all of the
304:56 - functions that we're able to then call
304:58 - or the resources permissions that we're
304:59 - able to call
305:01 - such as listing or getting or updating
305:06 - and this is why we're going to be able
305:08 - to update our dynamodb table
305:11 - because we added that permission to
305:13 - allow Lambda to speak to Dynamo so this
305:15 - is just helpful to think about when we
305:17 - have this Lambda script what's actually
305:18 - happening in the background which is
305:20 - great so now we're going to do is we
305:22 - want to configure a test because we want
305:24 - to see if this code actually worked so
305:28 - our code is going to be too big to see
305:30 - because when we when you start working
305:32 - with you know Lambda scripts and
305:34 - um and functions sometimes you won't be
305:36 - able to see the code because it's just
305:39 - like there's just too much for it to to
305:42 - show in the online editor but we already
305:45 - have the code locally so we know what
305:46 - it's doing so we're going to do is that
305:48 - we're going to create a new event to
305:49 - test this and see if we can get that
305:51 - base64 string to export so we're going
305:53 - to say
305:55 - hello Bass 64.
305:58 - and this is going to be a private event
306:00 - and we
306:03 - just need to really pass in something we
306:06 - don't really need it to pass in anything
306:08 - we just need to be able to invoke it
306:10 - so we'll do is that we will
306:13 - save this as a test
306:17 - oh and we'll get rid of that
306:19 - that comma and I'll be able to save it
306:22 - so now
306:24 - we can start running
306:26 - we go to test
306:28 - and this is where we're going to be able
306:29 - to be testing our Lambda script
306:31 - and see if we can get back a response
306:35 - so we see that something happened with
306:37 - sharp and it did not like something that
306:40 - we installed so this will actually be a
306:41 - good opportunity for us to then go and
306:44 - see what's actually happening with sharp
306:48 - and the package so that we can actually
306:49 - debug this and fix it
306:52 - so when you see these errors this can be
306:56 - very helpful because Lambda will try to
306:58 - give us some helpful data back about
307:01 - what's actually going wrong
307:03 - so it's saying that it can't find the
307:05 - module for Sharp
307:07 - and it requires some elements here
307:10 - so what we're going to do is that it'll
307:12 - give some possible solutions such as
307:14 - logging install this this all this but
307:17 - something that actually I think is a
307:19 - little bit sometimes more helpful
307:20 - instead of getting the the log here is
307:23 - that what we can do is we can go to
307:24 - monitor we can go to cloudwatch logs
307:28 - and then we're going to be able to
307:29 - actually see
307:30 - where our function is breaking down so
307:33 - with cloudwatch logs this is a really
307:35 - really helpful tool for checking out
307:37 - when your functions are running or you
307:39 - have processes in AWS and you need to
307:41 - see basically what's going on
307:43 - you can click on this and then it's
307:45 - going to give you
307:46 - information on
307:48 - what actually is is happening inside of
307:50 - your function so what we see is that we
307:52 - see this undefined error
307:55 - where it says something was wrong
307:56 - installing the sharp module and it can't
307:58 - find module sharp Linux this so there's
308:03 - actually a very interesting way in which
308:05 - we're going to need to install sharp for
308:08 - AWS so we're going to switch back to
308:12 - our Lambda script
308:14 - and we're going to open up this
308:16 - package.json
308:17 - and we're going to actually explain how
308:20 - to install sharp in a way that can speak
308:22 - with Lambda in the Linux environment
308:24 - that it's expecting
308:25 - to get the correct package of sharp that
308:28 - we're going to need for our Lambda
308:30 - script I'm on the sharp dot
308:33 - pixelplumbing.com install and they have
308:36 - a module on high performance node.js
308:40 - image processing and it talks about for
308:42 - serverless ES build you need to make
308:44 - sure that you install with this correct
308:47 - Arch x64 and then platform Linux sharp
308:51 - command so this is going to be important
308:53 - because when we just install sharp
308:55 - normally
308:56 - it has its own configuration but we need
308:59 - to make sure that we install this in the
309:01 - right way so that when we use our Lambda
309:05 - server this
309:08 - environment will actually be able to
309:09 - understand how to use sharp because
309:11 - that's the real issue that we were
309:12 - getting was we didn't install the right
309:14 - version of sharp for the environment
309:16 - that we need so the way in which we're
309:18 - going to fix this is we're going to do
309:20 - npm remove Sharp
309:24 - but we have to actually CD into that
309:27 - folder
309:29 - so we'll press clear we'll do CD we're
309:31 - going to
309:33 - drag and drop Source folder
309:35 - LS and then we see that we're in the
309:37 - right space which is great so now we're
309:39 - going to do is we're going to do npm
309:41 - remove
309:42 - Sharp
309:44 - and that's going to remove that package
309:47 - in the dependencies list now we're going
309:49 - to do if we're going to do npmi we're
309:51 - going to do dash dash Arch equals x64
309:54 - and then we're going to do dash dash
309:56 - platform equals Linux and then we'll
309:58 - install Sharp
310:00 - so we'll install that
310:05 - and we'll wait for the package to
310:07 - install correctly
310:12 - and now what we'll do is
310:15 - we will X Out of This terminal and now
310:18 - we can do is we can do
310:20 - amplify status
310:26 - and if it doesn't register any changes
310:29 - because it might just see that
310:31 - sharp is the same and it's all installed
310:34 - correctly so what we can do is that we
310:36 - can just go back to our function we can
310:38 - literally just add a space we'll press
310:40 - save
310:41 - and then we'll run that again
310:42 - and we'll see if
310:45 - it's registering so that's just an easy
310:47 - way where if you add you know changes to
310:50 - your package.json you can still then
310:53 - just add a space save it to the Lambda
310:55 - function and then they'll be able to
310:56 - register and update something also
310:59 - that's important that we're going to
311:00 - need to do is we're going to need to
311:02 - bring this backgrounds folder inside of
311:06 - source
311:07 - so we're going to move that in there
311:09 - and now under Source will be able to
311:12 - reference
311:13 - these files
311:16 - relative to where we are so that's where
311:18 - we'll be able to then go back up to
311:20 - backgrounds and then pull these images
311:22 - down so this is also one of those
311:24 - examples where
311:26 - we are able to you know make some
311:29 - changes that are similar to code sandbox
311:31 - like before we could just have this
311:33 - backgrounds folder free floating but we
311:36 - actually need to put it inside of the
311:37 - source because we're using that inside
311:39 - of this index.js file so we're going to
311:42 - do is we're going to now once we've made
311:43 - those updates we'll do amplify
311:46 - status
311:49 - and our photos updated we'll do amplify
311:53 - push and then we're going to update our
311:56 - code with the file construction and then
311:58 - also with the changes that we made to
312:00 - the script
312:02 - and then we'll be able to test in Lambda
312:05 - once more to see if we're able to
312:07 - generate that base64 encoded string and
312:10 - send that as a response outside of the
312:13 - Lambda
312:14 - so now that our cloud formation stack
312:16 - has been updated once again we are going
312:18 - to go over to our Lambda function
312:21 - we're going to refresh it
312:24 - and now we're going to do is we are
312:26 - going to go to testing and we're going
312:30 - to run this test again and we're going
312:31 - to see if this worked
312:37 - so we see a much better message that we
312:42 - got this working okay so now what we're
312:46 - going to do is we are going to check
312:48 - this out so we got a status quo of 200
312:51 - we got an image PNG and we got you know
312:54 - basically this response object that we
312:55 - were supposed to get and then we have a
312:57 - body and this is the
313:00 - super super super long string of our
313:02 - base64 encoded string so we can actually
313:06 - check this out by testing it and seeing
313:08 - if it's giving us a new
313:11 - a new code
313:13 - a new quote so we're gonna do is we're
313:15 - going to give this a copy we're going to
313:17 - go back to our front end
313:19 - we're going to
313:21 - close that terminal window
313:24 - and then we're going to go back to where
313:26 - our image blob is
313:28 - so in this previous example
313:31 - we had a body here
313:33 - now what we want to do is
313:37 - we want to add this here
313:43 - and we're going to basically do the same
313:45 - thing
313:47 - and we're going to see if we can get
313:49 - this to show
313:52 - that still says null so then we're going
313:54 - to go back here
313:56 - and we're going to see if we can get a
313:58 - new quote and it looks like we did but
313:59 - we're just going to test this anyway
314:00 - we're going to see you know this is the
314:03 - loading State there
314:05 - okay so this is great so we have our new
314:09 - quote there and that seems like that's
314:12 - working and we can try to do this one
314:14 - more time and see if it's going to give
314:17 - us another quote
314:19 - so
314:22 - we can do another test
314:25 - coming up to the top
314:27 - and looks like we'll get a new quote
314:30 - here
314:40 - so we'll go back here
314:43 - we'll go back and we can actually
314:46 - move some of that stuff around we'll
314:48 - close this out
314:51 - we'll then say body
314:54 - and then add quote there we already have
314:57 - a quote at the end of that
315:02 - and this can just go to the
315:04 - end of that
315:06 - and we'll do blob
315:10 - and looks like we got another one
315:12 - so that's great and then let's see if we
315:14 - can get just another image with another
315:16 - background just to see if that is
315:17 - working
315:20 - so we'll do another test
315:28 - it looks like the max memory was used so
315:30 - we're going to
315:33 - try going again
315:36 - yeah so it seems like that's all working
315:38 - great so we'll do another test
315:43 - we have our next
315:46 - image here
315:49 - we'll copy that
315:51 - bring that over to the front end
315:57 - and we'll do the body again
316:02 - and
316:06 - we'll do quotes
316:08 - put a comma behind there and we'll do
316:10 - that again
316:11 - we'll save that
316:13 - and we'll go to our front end alright
316:15 - great so we are getting you know a
316:18 - random background assigned and we're
316:20 - getting random quotes with the text the
316:23 - author our footer and our image so this
316:25 - is working great so now we know that
316:27 - we're able to take our Lambda function
316:30 - generate the base64 encoded string and
316:33 - then pass that back in the front end
316:37 - you know using you know the buffer
316:39 - method and then we turn this into a URL
316:42 - and another test that we can do is
316:45 - we can open this image in a new tab
316:50 - and this is actually going to open up
316:54 - so now we can do is we can refresh this
316:58 - old one and now this one actually
317:00 - doesn't show up anymore and that's
317:01 - because every time that we basically
317:04 - invoke this function we're removing this
317:08 - old blob URL so that's what's helpful
317:11 - where when you fetch this new item we're
317:13 - adding this in and that's why we can
317:15 - refresh this one because this is the
317:17 - active one but as soon as we were to
317:19 - replace this body and then add a new one
317:22 - this one won't exist
317:25 - so the image might get generated but
317:27 - it'll be a different ID and then it
317:31 - won't work and we can actually test this
317:32 - where let's say that we
317:36 - refresh this
317:38 - then we try to refresh now we actually
317:40 - don't see that anymore
317:42 - but this is going to be in a different
317:44 - one so you'll see that there is a
317:47 - difference between those IDs and that's
317:49 - why this one when we refresh this is the
317:51 - active one and we're able to see that
317:53 - but the old version we don't have that
317:56 - anymore
317:57 - so this is great so now we know that our
317:59 - Lambda function is able to generate this
318:02 - string
318:03 - the base64 encoded string we're able to
318:05 - decode that in the front end and now
318:08 - really all that's left here is that we
318:10 - want to tie up this Lambda call so that
318:14 - we're able to then get that response
318:15 - dynamically passed into our application
318:17 - we're going to switch out the quote and
318:20 - we don't need to keep setting it
318:21 - manually every time we can just
318:24 - programmatically have that working in
318:26 - the background and then display that for
318:28 - our users in the front end so let's do
318:30 - that right now
318:33 - so now that we have this function
318:35 - working to be able to take this string
318:38 - and then turn it into something that our
318:41 - users can see let's actually go back
318:42 - into our application and see what we got
318:45 - so if we refresh the page I'm sure
318:47 - you'll see that
318:49 - we get this quotes generated number and
318:52 - it's not zero anymore now it's changing
318:53 - so if we try to do this one more time we
318:56 - try to test it
319:00 - we'll be able to get a new value right
319:04 - and now if we go back to the front end
319:06 - if we refresh that number should before
319:08 - so let's see if it did that
319:11 - because we tested it and we did the same
319:13 - test
319:15 - we might need to run the test again so
319:17 - if we do test again
319:22 - try refreshing
319:25 - and now we do that so just if you are
319:27 - running through this just make sure that
319:29 - you refresh your Lambda
319:30 - you run through the test
319:33 - if you do that again
319:35 - now we refresh here
319:38 - now you get five so you'll have to
319:40 - refresh the Lambda every time to run the
319:41 - test but then you'll be able to get that
319:44 - working so that's awesome so now we have
319:46 - our Lambda script that is updating this
319:49 - dynamodb table every time that it runs
319:51 - so this is that event driven
319:52 - architecture where we don't have to
319:54 - manually update the database it's
319:56 - already doing that every time that the
319:58 - script or the function is invoked and
320:00 - executes correctly so that's great so
320:03 - now that we have this now what we're
320:04 - going to do is we're going to take our
320:07 - our
320:08 - image blob and we're going to pass down
320:11 - so instead of The Blob URL being set
320:13 - inside of this component we're actually
320:15 - going to be setting this outside of it
320:18 - through a fetch function so what we do
320:20 - is that we're going to be creating a
320:21 - function to get
320:23 - that quote string and then we're going
320:26 - to be able to bring that into the front
320:29 - end so and then use typescript to decode
320:31 - that string but we need a function that
320:33 - we can call publicly to think at that
320:36 - data point
320:37 - if you remember from the beginning when
320:39 - we set up our handle open generator
320:42 - function we had a try catch and we set
320:45 - that set timeout function and then we
320:48 - said that we're going to add some Lambda
320:49 - function code later but we weren't going
320:51 - to do it right now well
320:52 - the moment has arrived so what we're
320:54 - going to do is that we're going to be
320:55 - updating this function
320:58 - to then call our Lambda function and the
321:02 - way that we're going to do this is
321:04 - actually in a pretty crafty way using
321:06 - our API so we can
321:08 - just unpack this really quick
321:14 - so
321:16 - when we have our query
321:18 - here
321:19 - so we have this generate a quote query
321:22 - we're going to pass in some AWS Json
321:26 - and then as that input string
321:28 - we allow Public Access via IM to then
321:32 - run this function which is inspo quote
321:34 - Lambda so what we're going to do is that
321:37 - we're going to run
321:39 - this query
321:41 - this custom query to then run this
321:43 - Lambda function so
321:45 - in this code what we're going to do is
321:47 - that we're going to
321:51 - have a variable called const run
321:53 - function
321:55 - equals run function so it's going to be
321:57 - a string we're then going to stringify
322:00 - that value so we're going to do run
322:02 - function stringify equals Json springify
322:08 - and then we're going to add that value
322:10 - in here
322:12 - then we're going to do is that we're
322:14 - going to take a response
322:15 - of response equals a weight
322:18 - and then we're going to do API Dot
322:20 - graphql
322:21 - and then
322:23 - we're going to have a generate
322:28 - a quote
322:32 - test data quote
322:34 - data
322:39 - and then that's where we're going to
322:40 - start
322:41 - creating
322:46 - some autocomplete stuffs happening there
322:53 - we're going to start working on
322:56 - our query so we're going to do is that
322:58 - we're going to say for query
323:01 - we're going to say generate a quote
323:05 - and we can rewrite the last letter and
323:08 - then it's going to import generate a
323:10 - quote from our queries
323:12 - we'll then say auth mode
323:15 - is AWS IM
323:19 - then for the variables
323:22 - as our input we're going to put our run
323:25 - function stringified
323:27 - as that value
323:30 - and then we will do that we'll log that
323:33 - out
323:35 - and then what we're going to do is that
323:37 - we're going to try to stringify
323:40 - that response so we're going to do const
323:44 - response
323:45 - stringified
323:47 - equals Json stringify
323:53 - we're then going to restringify that
323:55 - response
324:11 - which is this value there
324:14 - then what we're going to do is we are
324:17 - going to
324:19 - do kant's body index equals response
324:23 - restring
324:26 - ified
324:27 - index of
324:30 - body equals this
324:34 - plus five
324:37 - on the next line
324:38 - we're going to have our const
324:42 - body and base 64.
324:46 - equals response stringified
324:49 - substring body index
324:51 - so overall what we're going to be doing
324:54 - is that we're going to get a response
324:55 - but it's going to be a lot of Json data
324:58 - what we're going to want to do is
324:59 - stringify it and then we're going to
325:01 - basically find where body equals this
325:03 - and then extract the string and then
325:07 - that's where we're going to have that
325:08 - element that we have in quotes we want
325:10 - to extract that from the response that
325:13 - we get so that's why we're doing all of
325:15 - this string manipulation to get to that
325:18 - value
325:19 - so
325:21 - then we need to get the body array
325:22 - equals body and base 64 and we're going
325:25 - to split it
325:27 - right there at that comma
325:30 - then we're going to do is we're going to
325:31 - do const body equals body array
325:36 - we'll get the first value of that
325:39 - and then we'll do console log body
325:42 - then we're going to set quote received
325:46 - as that body value
325:49 - then we're going to
325:52 - take out our set timeout because we
325:54 - don't need that anymore
325:57 - but I'm going to end state
326:00 - which is set
326:02 - processing quote
326:04 - to be false
326:07 - and this is because in the beginning
326:10 - we set processing quote to be true so
326:13 - now since we've gotten the response we
326:15 - want to set it to be false
326:17 - and then we also want to fetch with any
326:21 - new
326:22 - quotes
326:23 - for our generated
326:25 - from counter
326:27 - so then we'll do update quote info
326:30 - just as a function to catch for that
326:33 - so now this seems like a function that
326:36 - we'll want to do but of course with
326:38 - typescript we're going to need to create
326:40 - these props
326:42 - so what we're going to need to do is as
326:44 - I'm sure you've guessed it we're going
326:45 - to need to generate an interface
326:47 - so we're going to do is that we're going
326:49 - to
326:50 - create an interface and I'm going to put
326:53 - this
326:54 - above
326:56 - we're actually yeah we'll put that above
326:58 - so we'll say interface
327:01 - for
327:02 - our
327:05 - appsync
327:07 - 2 Lambda
327:10 - Json response
327:12 - so interface
327:15 - generate a quotient data
327:17 - then we'll do this that we're going to
327:18 - do generate
327:20 - a quote
327:23 - and that's coming from this value
327:28 - will then get a status code
327:31 - which is a number
327:32 - we'll then get headers
327:35 - and in this array we're going to get a
327:37 - key which will be a string
327:40 - and then that
327:42 - itself is a string
327:44 - and then the body is also going to be a
327:46 - string
327:49 - so that should log out exactly what we
327:52 - need so now we're going to do is that
327:55 - we're going to give this a save and then
327:58 - every time that this function runs we're
328:00 - going to hope that we are
328:03 - so in that function that we we just
328:05 - created right so in this try catch we
328:09 - get a response we want to be logging
328:12 - this body so the body is hopefully going
328:15 - to be that really long string that we
328:17 - usually put in quotes manually we want
328:20 - to be able to set that here so we want
328:23 - to see if we can log this and if we can
328:24 - log this we'll be able to pass this down
328:26 - as props into our child's component and
328:30 - then render that image dynamically so
328:33 - let us see if we're able to do that so
328:35 - I'm going to open up
328:37 - the console
328:40 - and I'm going to give this a refresh
328:45 - and then we're going to make a quote
328:48 - and then every time that this
328:50 - runs
328:51 - looks like we got it okay
328:54 - so we still need to work on the styles
328:56 - with the state but
328:58 - if you see this this looks exactly like
329:00 - r
329:02 - basic 64 encoded string that we would
329:04 - usually get so this looks awesome so
329:07 - what we're going to do is that we're
329:09 - going to
329:10 - just remember these characters and also
329:13 - just give a check just a gut check just
329:15 - to make sure that this actually is in
329:18 - fact giving us different values here
329:21 - so what we do is that and we also see
329:23 - that this is going to be increasing
329:25 - which is going to be great
329:26 - so now what we want to do is that
329:30 - we just want to check to see if this is
329:31 - going to be the same value or if it's
329:34 - going to be different so
329:37 - that's IB
329:39 - you are
329:41 - w
329:44 - oh
329:53 - yeah so it's a little bit hard to tell
329:55 - but it looks like right now we are going
329:57 - to be able to get the different values
329:59 - for our images but we'll still want to
330:02 - check to make sure that that actually is
330:03 - the case so just go the scroll back here
330:08 - so what we're going to now do is we're
330:10 - going to scroll down
330:12 - and in here under quote modal we see
330:15 - that we're going to be set processing
330:17 - quote as set processing quote quote is
330:20 - received there so we're passing down
330:22 - these properties into our component now
330:25 - we're going to want to do is
330:27 - we want to make sure that the quote
330:30 - received is actually a part of that now
330:34 - when we go to the image blob URL
330:37 - what we're going to want to do is we're
330:39 - going to want to of course remove this
330:44 - because we're going to be getting the
330:45 - blob URL
330:46 - outside of that
330:49 - so now we're going to do is that we're
330:51 - going to
330:53 - hide a lot of this code here just to
330:55 - make this easier
330:58 - we're gonna
331:01 - comment out all of this code
331:05 - like all of this code
331:07 - because we're already doing this outside
331:08 - of the function and we're not going to
331:10 - need it
331:11 - in there and then we'll comment this out
331:16 - because we're going to be passing that
331:18 - blob URL down through our image blob
331:23 - now something that we're going to need
331:25 - to do is it's going to say that there is
331:27 - a type error with quote received
331:30 - so we're going to try to find out what's
331:32 - up with that
331:35 - so
331:37 - now if we make this
331:43 - string or we make this null
331:46 - we can see if that will
331:48 - get rid of the error
331:52 - which it did so that's good now what
331:55 - we're going to want to do is
331:58 - in our check so we had that image blob
332:01 - URL which will give this a save
332:03 - there is
332:05 - this and we want to make sure that so
332:08 - remember when we were doing this testing
332:09 - so if Court received is not null
332:13 - meaning there is a value that's filled
332:15 - with it then we want to show it here
332:18 - so what we're going to now do is we're
332:20 - going to go back to our application
332:22 - we'll give this a refresh and we're
332:24 - going to see if we can
332:26 - call
332:27 - this
332:29 - so it's generating a quote
332:31 - and look at that so now it's working
332:35 - and then if we click out of this if we
332:37 - try to make another quote
332:41 - so now it's going to be making a new one
332:43 - so now something that I do want to do
332:45 - though is that let's make it a little
332:46 - bit cleaner of every time that we fetch
332:49 - because we still want to make it look a
332:51 - little bit smoother and I think that we
332:53 - can do that
332:54 - so what we're going to do is that we're
332:55 - going to go back to our function and
332:57 - what we're going to do is that we want
332:58 - to
333:00 - update some of these states to then
333:04 - refresh and clear out the quote so every
333:07 - time that you you clear out of or you
333:10 - click out of the modal will then be
333:12 - changing it so that it'll show creating
333:15 - your quote every time that a new quote
333:18 - is being generated as opposed to just
333:20 - switching in the image it's great that
333:21 - we have the image but we want to make
333:23 - the front end look a little bit more
333:25 - like it's generating the code than just
333:27 - the quote appearing you know kind of out
333:29 - of thin air so that's what we'll be
333:31 - doing next to fix that close function so
333:34 - that it looks a little bit more
333:37 - programmatic we're going to need to go
333:39 - back to our parent component and then
333:42 - open up the handle closed generator
333:44 - function and we're going to need to add
333:46 - a little bit more data to this so before
333:48 - we originally just
333:49 - setting the open generator modal as
333:51 - false so that it would close it but now
333:53 - what we want to do is we want to when we
333:56 - close the modal at any time we also want
333:59 - to set the processing quote to be false
334:03 - and then we also want to set
334:05 - quote received to be null so this is how
334:09 - we're going to set it where that type
334:11 - where we configured it before where it's
334:13 - either a string or it's no well anytime
334:16 - that we close it we want to set
334:18 - basically this modal to be false the
334:20 - processing quote you know the loading
334:23 - state to be false and then we also want
334:25 - to set the quote received to be null so
334:27 - that means that there's nothing in the
334:29 - quote received there's nothing for the
334:31 - blob URL to be showing we want to make
334:34 - it where there's nothing there
334:37 - so the way that this will work is that
334:38 - will refresh
334:42 - now when we make a quote
334:45 - we're going to get that loading state
334:48 - get that loading State and then we'll
334:49 - get that image
334:51 - and then that works like an image and
334:52 - that's great and let's actually open
334:53 - this up in a new tab
334:55 - these other ones we can close out of
335:01 - and then when we close this out we'll
335:03 - make a new quote and now it's going to
335:04 - reload it again and now we have a
335:07 - different image and let's open that up
335:08 - here
335:09 - so we have these two images but if we
335:12 - refresh this one that was the one that
335:14 - we we first called
335:16 - and this is the one that we just got so
335:18 - we're gonna refresh here and then still
335:21 - same deal let's make a new quote
335:25 - and then we have a new one so let's open
335:28 - up this one here
335:31 - and let's open up a new one
335:37 - and look at that so we have all these
335:39 - different images here
335:41 - and it's looking pretty good so far and
335:44 - of course we get the data this is all
335:46 - mapping against and uh against these
335:49 - updates to the function and if we make
335:51 - another quote
335:53 - we'll get that 12. so the data is also
335:55 - incrementing
335:57 - we also are getting all of the quotes
335:59 - generated and this is all happening
336:02 - without any sort of storage any sort of
336:05 - you know images being stored in cloud
336:07 - storage these are all just strings that
336:10 - then we decode in the front end so that
336:12 - you never have to worry about
336:13 - scalability concerns it's that it's
336:15 - sending the exact data that you want
336:17 - from your Lambda function to your user
336:20 - in the front end so this is a really
336:22 - cool way where you see how the backend
336:24 - code can connect to the front end and
336:26 - you can have a pretty cool working
336:28 - application and I'm sure you're
336:30 - wondering with that awesome download
336:32 - your quote button does that actually
336:34 - work and does that actually let us
336:36 - download our quote that we just received
336:39 - and it actually does so if we press this
336:41 - button we'll be able to save this to
336:46 - a folder and now if we open it
336:50 - we'll actually be able to see that
336:52 - and what's really cool is that this is a
336:55 - real image so we have text in there and
336:58 - that's where we're actually able to
336:59 - click on links and this is a real
337:02 - working image and let's say that we
337:05 - wanted to
337:06 - do another one
337:08 - so we generate one right there and now
337:11 - if we download this quote
337:12 - it'll already start you know making it
337:15 - where we'll say quote number one we'll
337:17 - open this up
337:18 - and check that out and now we have
337:20 - another one so again really easy really
337:23 - cool way to just add more functionality
337:27 - to your images that you generated and
337:29 - allow your users to also you know you
337:31 - could copy or save this image yourself
337:33 - you could also open it up in a new tab
337:35 - or you can also allow users to download
337:38 - that file so they can save that right to
337:40 - their computer and it's with that blog
337:42 - URL that was generated from that base60
337:44 - for encoded string so as we review our
337:47 - application everything seems to be in
337:49 - order based upon what we're expecting
337:51 - and all the features that we're hoping
337:53 - to have as a part of our application
337:56 - so we'll refresh this again
337:59 - we'll make another quote and seems like
338:01 - everything is working as per we would
338:04 - expect which is great and we have the
338:06 - download button we have this
338:09 - we can you know make a quote generate a
338:11 - quote our dynamodb
338:14 - you know quote generated number is
338:16 - operating effectively so now we're going
338:20 - to do is we're going to take our
338:21 - localhost application and then we're
338:23 - going to put this right on the cloud
338:25 - with AWS using AWS managed hosting so
338:30 - one thing before we do that that'll be
338:32 - really important of course for us is to
338:35 - make sure that all of our code is saved
338:37 - so you don't have any anything left over
338:40 - in terms of code being need to be saved
338:43 - so we are going to
338:45 - of course just
338:48 - make sure that our amplify
338:53 - doesn't have anything that's impending
338:55 - for us to push to the cloud
338:57 - so there's no change there's no change
338:59 - there's no change which is perfect so
339:00 - that means that we are all set to commit
339:03 - this code locally so we're going to say
339:05 - finished build
339:13 - and we'll say finish local build so we
339:16 - will Commit This to Maine we're going to
339:18 - push this to GitHub
339:21 - and now
339:23 - now the fun stuff now the fun part
339:24 - begins so now when we have this main
339:27 - branch so what we're going to do is that
339:30 - we're going to and I'm going to draw
339:32 - this out just so that it is a little bit
339:35 - easier to see
339:37 - so when we have our GitHub so this is
339:42 - going to be GitHub and we have code here
339:44 - so this is related to our project so we
339:46 - have Main
339:49 - and that's the current build that we
339:51 - have so we have code
339:54 - code goes into GitHub and then that's
339:57 - stored and then we have all of this you
340:00 - know state right so we're tracking all
340:02 - these things but what we want to be able
340:04 - to do is that we want to be able to have
340:06 - a methodology where you push code
340:11 - it's given this prod
340:14 - characteristic that's going to go to
340:17 - GitHub
340:21 - and then GitHub is then going to run a
340:24 - build in AWS so AWS
340:30 - this is our cloud
340:32 - so that we're able to then have our code
340:35 - go on the production Branch go to GitHub
340:37 - GitHub isn't going to speak to AWS and
340:40 - then we have our www
340:42 - website that users can see when they log
340:45 - on
340:46 - and that's where AWS is going to be
340:49 - creating this website for US based upon
340:52 - the code that we come in because right
340:54 - now we're just managing you know git
340:56 - history and that's great but we really
340:58 - want to be able to do is commit to a
341:00 - specific branch have GitHub tell AWS to
341:03 - commit that code to a build and then
341:06 - we're going to be able to use that and
341:08 - we're going to use AWS amplify with
341:10 - managed hosting to be able to accomplish
341:12 - that goal so let's see how to add
341:15 - amplify hosting to our application to
341:18 - add hosting to our
341:20 - AWS project we're going to say amplify
341:23 - add hosting
341:25 - to
341:27 - our CLI
341:29 - now we see two specific options one is
341:32 - hosting with amplify console and that's
341:34 - managed hosting with custom domains
341:36 - continuous deployment and then the other
341:38 - option is Amazon cloudfront and S3 so
341:41 - we're going to choose amplify console
341:43 - for manage hosting because they also
341:45 - have support for server-side rendering
341:47 - and that's going to be really important
341:48 - for our application to be able to work
341:51 - dynamically and leverage all of the
341:53 - features of nexjs and typescript so then
341:56 - when we configure a type there are
341:58 - basically two different types there's
342:00 - continuous deployment which is git based
342:02 - through GitHub and manual deployment so
342:05 - we're going to choose continuous
342:07 - deployment
342:08 - now what we're going to do is that we're
342:10 - going to need to configure our
342:15 - AWS project so what we're going to do is
342:18 - that we're going to go back to amplify
342:20 - we're going to go to hosting
342:22 - and this is our application this is our
342:25 - app we're going to go to GitHub and
342:27 - we're going to press that
342:28 - we're going to press connect
342:35 - now we see that GitHub authorization was
342:37 - successful and unless you've connected
342:40 - this GitHub repository to your amplify
342:42 - project before
342:43 - in this drop down you won't see your
342:46 - repository so what we're going to do is
342:48 - we're going to go to view GitHub
342:49 - permissions
342:51 - and we're going to go to
342:55 - and now what we're going to do is that
342:57 - we're going to scroll and we're going to
342:59 - select the repositories that we want to
343:02 - be able to access so for this
343:06 - we're going to find the inspirational
343:09 - quote generator
343:13 - which is our first
343:16 - quarter repository there we're going to
343:18 - press save
343:23 - we'll see that
343:25 - AWS amplify Us East one was updated for
343:27 - my account
343:29 - now we will go back to
343:35 - so we'll go back to our AWS amplify
343:37 - project
343:38 - we'll press GitHub
343:40 - to reauthorize
343:44 - now in our list of drop downs we should
343:46 - see this right at the top
343:49 - and
343:50 - for main that's our current Branch but
343:53 - something that we're going to do is
343:55 - we're going to be a little bit fancier
343:57 - so what we're going to do is that we are
343:59 - going to
344:00 - in our GitHub desktop application we're
344:03 - going to create a new Branch we're going
344:05 - to call it prod
344:06 - and this is going to be our prod branch
344:08 - that we are going to configure so any
344:10 - pushes
344:12 - any commits that are made specifically
344:14 - to the production Branch we're then
344:16 - going to run a build on that
344:19 - so we're going to publish this branch
344:21 - and it's based off of Main
344:24 - and then we'll bring this away refresh
344:27 - the the actual page so
344:29 - we might need to run this one more time
344:32 - so we could use your previous press
344:35 - continue
344:39 - find our code repository there
344:42 - and now under Branch we should see prod
344:45 - there
344:46 - so now when we see prod we're going to
344:49 - click next
344:51 - and when we click to this next screen
344:53 - we're going to see the app name which is
344:56 - our amplify app name it's already Auto
344:59 - detecting that we're using next.js with
345:01 - server-side rendering which is what
345:03 - we're doing and we also are going to be
345:06 - using the amplify framework for our back
345:08 - end and what's really great about
345:10 - amplify hosting is that it's already
345:12 - pre-configured for the server-side
345:15 - rendering that is uh basically I think
345:18 - one of the strongest features of the
345:20 - next JS with typescript framework for
345:22 - building apps so this is already
345:24 - pre-loaded with that which is awesome so
345:26 - now as we scroll down we're going to
345:28 - select backend environment to work with
345:30 - this so inspirational quotes which is
345:32 - this app we're going to enable full
345:34 - stack continuous deployments with CI CD
345:37 - so that means that when we push to prod
345:39 - we're going to then be running a build
345:42 - and we're going to be using this Dev
345:44 - environment now something that you could
345:46 - do is that if you wanted to create new
345:48 - environments based upon your Cloud
345:50 - backend you could have a production
345:52 - Cloud Branch similar to as we have a
345:55 - prod Cloud branch that we're just using
345:58 - Dev just because we're just building
346:00 - this app but if you wanted to make this
346:03 - more robust you could have different
346:05 - types of cloud environments and then
346:07 - switch between those in your builds in
346:09 - your testing in your local you know
346:10 - development pipeline so just really good
346:13 - ways to Leverage The amplify framework
346:15 - for your whole team's development but
346:18 - we're just going to be using the dev
346:18 - Branch because that's what we configured
346:20 - and then we're going to select an
346:21 - existing role or create a new one so you
346:24 - could create a new role if you don't
346:26 - already have one configured but I
346:28 - already have an amplify console backend
346:30 - rule configured so I'm going to use this
346:31 - one
346:33 - and then what we can do is that we can
346:35 - also just check out what the build and
346:37 - test settings are so when we have our
346:40 - back end we are going to have some
346:42 - phases and in our builds we're going to
346:45 - use the amplify push simple script and
346:48 - that's just executing amplify CLI and
346:51 - then what we're going to do is that
346:53 - we're going to run through a pre-build
346:54 - which is I'm going to do npmci for
346:57 - getting node modules and then we're
347:00 - going to use this build commands to run
347:03 - our the build of our application because
347:06 - we're using xjs this is going to have as
347:09 - our export dot next folder and then
347:12 - we're going to be looking through the
347:13 - files of that to build our project and
347:16 - then of course with caching related to
347:18 - node modules this is an important step
347:20 - to make sure that you know your caching
347:22 - known modules and not you know keep
347:25 - installing them or keep adding to them
347:28 - over time but you could actually cache
347:29 - them and use them in subsequent builds
347:32 - if nothing is changing with your
347:33 - packages
347:34 - so you could also configure advanced
347:36 - settings as well and this can become
347:39 - really important when you're working
347:40 - with containers and with Docker so you
347:43 - could actually reference your own build
347:44 - images or use amplifies default build
347:47 - container so more you could learn more
347:50 - about this if that's something that's
347:52 - important to you in terms of containers
347:55 - and um you know really just building you
347:58 - know some sort of kubernetes deployment
348:00 - uh infrastructure um you can also add
348:02 - environmental variables in case there's
348:04 - certain branches that you want to work
348:07 - from there's certain environmental
348:08 - variables related to maybe API calls
348:10 - that you're working from or certain
348:12 - tools or infrastructure so just
348:15 - important to know that you can do that
348:16 - from this screen as well and then also
348:19 - we are you going to be using the amplify
348:21 - cli's the latest version this is
348:24 - actually really important because if you
348:26 - ever are running a build and you get an
348:27 - error related to maybe the CLI what you
348:31 - can do is that if you have previous
348:32 - builds that have worked you could revert
348:35 - back to the previous amplify CLI version
348:37 - this was actually an error that I had
348:40 - experienced and needed to revert back
348:43 - temporarily to a previous amplify CLI
348:46 - version and that was able to help me get
348:48 - over that barrier to use the right CLI
348:50 - to deploy my application
348:52 - so if this all looks good we'll click
348:54 - next
348:55 - and it's just going to have us Recon
348:58 - reconfirm all of the settings that we've
349:01 - selected so again we're using GitHub
349:03 - this is the application that we have
349:07 - worked on together we're going to use
349:09 - the prod branch in GitHub we're using
349:11 - the dev Branch that's the cloud branch
349:15 - and we're going to be using the default
349:17 - image
349:18 - this is our Dev Branch environmental
349:21 - variable of course we're using next.js
349:23 - with server-side rendering and amplify
349:25 - and it's Auto detecting these settings
349:27 - that will be used so as soon as we click
349:29 - save and deploy it's going to run
349:30 - through this build process to show how
349:33 - we can build our application to the
349:35 - cloud we will press save and deploy
349:38 - and now what it's going to do is that
349:41 - it's going to start running through
349:44 - these stages of our build pipeline and
349:48 - it gives us a nice graphical user
349:50 - interface
349:51 - chart of where we are in the process so
349:54 - what you can see here you can get
349:56 - actually a lot of really interesting
349:58 - details related to each stage and
350:02 - we'll be able to see how it's
350:04 - provisioning the docker image it's on a
350:07 - host with four V CPU and seven gigabytes
350:11 - memory and then it says that each build
350:13 - image gets its own host instance
350:15 - ensuring that all resources are isolated
350:17 - and the contents of the docker file are
350:19 - displayed below for your information so
350:21 - in case you want to see more of actually
350:23 - how this is provisioning
350:26 - our application
350:27 - you'll be able to see all of this
350:32 - which I think is actually really helpful
350:33 - to see how they're building the
350:36 - application in the background because it
350:38 - can become a little bit nebulous as to
350:40 - what's really going on
350:42 - now
350:43 - it's going to start cloning the
350:45 - repository from GitHub and this is a
350:49 - private repository so it is a secure
350:53 - connection to be able to get access to
350:55 - this build and then there's going to be
350:58 - a series of different steps that it will
351:00 - take from build to test to deploy and
351:03 - then that's how we'll be able to get
351:06 - this working now when you use amplify
351:09 - it's going to configure
351:11 - a branch name dot a number of characters
351:15 - dot amplifyapp.com so if we click on
351:18 - this and we open it in a new tab
351:20 - we're going to see something that looks
351:21 - like this so it's going to say that your
351:23 - app will appear here once you complete
351:25 - your first deployment
351:26 - so this is just going to be a
351:29 - placeholder
351:30 - you know
351:31 - index.html file until we're able to
351:35 - build this out and we're already getting
351:37 - some errors from here so we're going to
351:39 - need to figure out what's going on here
351:41 - and it seems like
351:44 - what ended up happening was so we can go
351:47 - through this
351:50 - set package Lambda failed with error
351:52 - command Fields exit and Pim install
351:55 - production omit Dev instead
351:58 - so there's going to be something related
352:00 - to inspirational quote Lambda known
352:02 - module is sharp that it did not like so
352:05 - this is where we're going to need to
352:06 - then go back and
352:09 - re-run our application because it seemed
352:12 - like it didn't like the specific package
352:14 - that
352:16 - we needed for our Lambda script so this
352:19 - is where we're going to need to figure
352:20 - out basically how to navigate this
352:24 - so we'll do that in the next step but if
352:28 - you also want to download the build logs
352:29 - you can also do that too and that can be
352:31 - helpful but sometimes also if you ever
352:34 - get any errors you'll need to then go
352:36 - back to the drawing board and see
352:38 - basically what went wrong and then
352:41 - figure out a solve so that you can get
352:44 - it to work so if you remember that we
352:47 - installed the sharp package in a very
352:49 - specific way when we were back in our
352:52 - code base here
352:54 - what we're going to need to do is that
352:56 - we're going to need to basically do that
352:57 - same thing so when we installed sharp
353:01 - with this specific version we also added
353:03 - a Linux version and we also added a uh
353:09 - x64 architecture uh flag so those were
353:12 - that was the arch flag and then the
353:14 - platform flag for Linux so we're going
353:16 - to need to make sure that we do that in
353:19 - our package.json and then in our build
353:22 - script we're going to need to make sure
353:24 - that we edit that as well so I'm back in
353:27 - the function so this again is under back
353:30 - end under function and then
353:34 - under package.json we're going to need
353:37 - to install uh have an installation
353:40 - script
353:42 - that we can then add into our
353:45 - application so under Main
353:48 - something you can do is you can say
353:49 - Scripts
353:53 - we'll give that an object
353:55 - press enter
353:58 - and then under here we're going to say
353:59 - install
354:01 - Sharp
354:03 - then we're going to say npm
354:05 - and PM install
354:09 - we're going to do dash dash Arch equals
354:12 - X 64. and then we're going to do dash
354:15 - dash platform
354:17 - equals Linux
354:19 - and we'll say sharp and then this is
354:21 - going to be a script that we will
354:25 - incorporate as part of our build script
354:27 - so then we're going to go back to the
354:29 - amplify
354:30 - dashboard we're going to go to our build
354:33 - settings
354:34 - and we're going to edit this
354:36 - and then
354:38 - you'll see here when we are trying to
354:40 - execute amplify CLI with the helper
354:42 - script so what we're going to do is that
354:44 - we're going to install a specific
354:48 - script for that function that we just
354:51 - ran
354:52 - so when we do
354:54 - npm run install dash dash Sharp
354:58 - with the prefix then under amplify
355:01 - backend function in spokote Lambda
355:04 - SRC
355:06 - that's where we're going to then be
355:08 - running
355:09 - this installation for that specific
355:14 - sharp package that's in our source then
355:17 - we'll do the amplify push simple command
355:19 - and then we'll be able to run our build
355:22 - related to that so we're going to press
355:24 - save
355:27 - now what we're going to do is we're
355:29 - going to go back to our function
355:33 - and then we're going to do
355:35 - amplify status
355:39 - and
355:42 - we see that there is a function that's
355:43 - updating and there's the hosting that's
355:45 - updating so we're going to do is we're
355:47 - going to say amplify
355:49 - push
355:51 - and then that's going to push our
355:54 - install Sharp
355:56 - script there to the cloud
355:59 - so we're going to be configuring that
356:03 - and then
356:05 - R amplify push command will be running
356:07 - to update our cloud formation stack
356:11 - and I will pause this recording and then
356:14 - resume it when all the resources are
356:16 - pushed to the cloud and then we can run
356:17 - a build again
356:19 - so now that our code was pushed to the
356:21 - cloud
356:22 - something that we can do is
356:27 - commit directly to production
356:30 - and something also that we can do is we
356:33 - can switch to the main branch
356:35 - and we can say bring my changes to Main
356:39 - we can say we'll switch branch
356:42 - and now we're going to do is we're going
356:43 - to say updated
356:47 - Lambda
356:48 - install script
356:51 - for built
356:53 - we'll Commit This to Main
356:56 - we'll push this
356:58 - and now what we're going to do is we're
357:00 - going to go back to our GitHub
357:03 - repository
357:07 - we're going to go to pull requests
357:11 - and actually we could just go back to
357:12 - code and
357:14 - just validate that the code was just
357:16 - pushed so we'll do refresh
357:19 - and we just committed code literally
357:22 - just a moment ago so we'll go back to
357:23 - pull requests we're going to do new pull
357:26 - request we're going to do
357:28 - Main and then we're going to push to
357:30 - production
357:32 - so that's the before this is the after
357:34 - so we're able to merge that we're going
357:36 - to create and this is the script the um
357:38 - the GitHub commit that we just made so
357:41 - we'll do commit to this
357:43 - we're going to create pull request
357:49 - and then we'll merge the request and
357:51 - we'll confirm merge
357:54 - and now if we go back to our amplify
357:56 - project
357:59 - we should be able to see that we now
358:02 - have a build running so this is a really
358:03 - cool aspect of CI CD is that as soon as
358:07 - we committed to the production Branch we
358:09 - now are able to have a build running to
358:12 - then build to this URL so now it's going
358:14 - to go through those same processes this
358:16 - is build number two
358:17 - and now we're able to see that we're
358:19 - able to go through the provision stage
358:21 - and
358:22 - access all of these same steps that we
358:25 - had before except we don't have to
358:27 - really tell
358:29 - the application to or the configuration
358:32 - to do anything it's already going to
358:33 - start building our application
358:35 - because we set up the CI CD rules for it
358:39 - so now when we go to
358:41 - this build it's going to be cloning our
358:43 - repository once more
358:48 - and
358:51 - we're going to wait until it can start
358:54 - configuring
358:58 - our application
358:59 - so
359:00 - we'll just have to wait until
359:04 - this build continues and then we'll be
359:06 - able to keep watching for it
359:09 - but it seems like it's done with the
359:11 - amplify CLI
359:14 - and now it's going to go to the back end
359:16 - so now we're going to see if that back
359:18 - end patch fixed our build
359:23 - error
359:25 - so the schema was compiled successfully
359:27 - we're now going to be updating
359:29 - and uploading those files
359:35 - and we're going to be waiting for
359:38 - a success marker about if the Lambda was
359:42 - updated
359:55 - so so far so good
359:59 - seems like
360:01 - there's the update that's in progress
360:03 - and it's going to be checking to see
360:07 - basically those changes that we worked
360:09 - on so
360:11 - we have our update in progress
360:21 - and this is just going to be configuring
360:23 - our stack
360:29 - there's also some elements of appsync
360:31 - that look like they're in there
360:39 - so we'll just wait for this to configure
360:43 - and go through the build process
360:45 - so now it's going to be continuing to go
360:47 - through and uploading the files
360:50 - and looks like our API worked great and
360:53 - it initialized the environment
360:54 - successfully and we were able to
360:57 - complete the builds process so that was
361:00 - awesome that we were able to configure
361:02 - this correctly and that push was able to
361:05 - solve that build error that we got so
361:07 - now it's going to start in this next
361:09 - phase which is the front end build it's
361:10 - going to be taking our code that we just
361:13 - pushed
361:14 - and this is really important because
361:15 - when we are pushing back-end code and
361:19 - front-end code we want to make sure that
361:20 - the back end and the amplify framework
361:22 - is compiling everything successfully so
361:25 - that we can then
361:26 - build everything together because the
361:28 - front end is dependent upon the back end
361:30 - working so now that our back end was
361:33 - able to be built correctly through that
361:34 - patch that we put through now we're able
361:36 - to then make sure that our front end
361:38 - works
361:40 - which it will so now it's going to be
361:42 - generating the static pages
361:44 - and then it'll also be adding in the
361:48 - server side renders for server-side
361:51 - rendering as well
361:52 - so now it's creating the cache artifact
361:55 - and uploading the cache artifacts
361:57 - and the caching was complete the
362:01 - environment caching completed as well
362:03 - and now it's going to terminate logs
362:06 - and then we should be able to have a
362:09 - living breathing URL
362:11 - momentarily
362:13 - so this is exciting so this is where our
362:15 - application is finally going to be able
362:17 - to be pushed to a actual URL and we'll
362:20 - be able to take this off of localhost
362:22 - and push this onto a domain that people
362:25 - could use and you'll be able to send
362:26 - this URL to you know your friends family
362:29 - your colleagues anyone that you want
362:31 - maybe a potential employer and this is
362:34 - an application that you could share and
362:35 - show that you built it
362:37 - this I think is pretty exciting
362:39 - so now that we have our deploy script
362:42 - set up
362:43 - we can go back to this URL and we can
362:45 - see if it built
362:48 - so we'll give this a refresh
362:53 - and we'll wait for our app to load
363:00 - all right
363:02 - so this is pretty exciting this is the
363:04 - application that we built and the Styles
363:07 - seem to be working there
363:10 - we can also check to see if it works so
363:12 - let's make a quote
363:16 - it's going to be generating a quote and
363:18 - look at that so this is our actual
363:20 - script and we're able to run it now on
363:22 - an actual domain in an actual URL so we
363:25 - can also you know download that quote
363:27 - card if we wanted to and this will work
363:29 - the same way
363:31 - and if we wanted to do that we could see
363:32 - that here and then this is that quote
363:34 - that we got so everything seems to be
363:36 - working
363:38 - completely and this is going to be
363:40 - updating as well we'll make another
363:41 - quote
363:44 - and this is another one
363:47 - 18. we'll add another one
363:50 - 19th quote that was generated
363:52 - and these are all real images that we
363:55 - are fetching and of course this is still
363:57 - using our local storage with our blob
363:59 - URL so we can test that again so let's
364:02 - say that we want to make another quote
364:04 - so now we'll open this up in another tab
364:09 - that was one we just did we'll refresh
364:11 - this and this of course doesn't exist
364:13 - but this one still does
364:15 - and then if we make another quote
364:20 - we'll open this one up
364:21 - that one won't exist but then this one
364:23 - will
364:24 - so this is pretty awesome so
364:28 - this is now working and we have a fully
364:31 - functional application that is running
364:33 - so if you want to you know build
364:37 - Graphics in the cloud you can totally do
364:40 - that and this is an application that
364:42 - shows that this is all possible
364:44 - all right congratulations you just built
364:47 - an inspirational quote generator and we
364:50 - did quite a lot of stuff so we
364:53 - configured a nexjs with typescript and
364:56 - style components application we created
364:58 - our own API we created our own
365:00 - serverless infrastructure to generate an
365:03 - image and we also created a processing
365:06 - system where we're able to create
365:09 - continuous integration and continuous
365:10 - deployment from our code to our cloud
365:13 - and deploy that live with a real URL and
365:17 - created a whole application to support
365:19 - that whole workflow so I hope that this
365:22 - project was really insightful and
365:23 - helpful for you and I would love to see
365:26 - uh you post about what you're building
365:29 - on social whether it's this project or
365:31 - another project I'll include my handle
365:33 - it's Brian H huff and I would love to
365:36 - just you know hear what you're building
365:37 - and I'd be happy to support you in your
365:40 - journey building full stack applications
365:42 - microservices and anything on the
365:44 - internet internet so with that I hope
365:46 - you have a great rest of your day
365:48 - afternoon or evening depending on
365:50 - wherever you are in the world and I hope
365:53 - that you continue to build really cool
365:56 - technology all right take care everyone
365:57 - bye

Cleaned transcript:

welcome to an exciting journey into the world of full staff development with next Cs typescript and AWS this course was expertly designed by Brian Huff who is a seasoned software engineer and passionate teacher he takes you from building a frontend with nexjs and typescript to creating a robust backend with AWS amplify and finally deploying your app on AWS we'll be using zincot's API for fetching quotes and Diving deep into State Management hooks debugging nosql database modeling and much more you will Master the art of building and deploying full stack applications on AWS how's it going everyone hello friends hello world and hello free code Camp my name is Brian huff and I'm really excited to be creating this video showing you how you can build with nexjs typescript and AWS to generate images completely serverlessly in the cloud and I created this project as a weekend you know really just see if I could build it because you know I've used canva I've used Photoshop I've used a lot of different you know applications to make images and I was thinking could I make these images using technology and programming and it turns out that you can so I'm really excited to show this application to you and show you exactly how we built it and we're going to be doing quite a lot we're going to be configuring a nexjs with typescript project we're then going to be configuring our own appsync graphql API in AWS we're then going to be using in Lambda function to be configuring some server code that's serverlessly deployed to the cloud and then we're also going to be updating a database with dynamodb and then we're also going to be showing how to connect the front end to the back end and then deploy our application Live using amplify hosting to then access our application from any device online so if you're excited to see this build then you are in the right spot and to give a little bit of context about who I am I have been building on the cloud for the past few years during the pandemic was when I actually got really exposed to AWS and what it can do because I was building open source technology related to cloud and cloud computing and this was for symptom tracking and that was really what gave me my start in cloud and then that really mushroomed into a lot of different opportunities that I saw because instead of you needing to create your own infrastructure you could just use serverless Technologies and then scale a lot of the business use cases that that you might want so that was really where I started building on the cloud and then I started creating content around that on YouTube and on Instagram and then that turned into what I created as a YouTube channel and as a brand and as a Dev shop called the tech stack Playbook so this has really been an exploration for me of how can I build technology how can I solve problems and how can I build cool things and that's what I see as programming today and as an AWS Community Builder on the data team I become really passionate about building these types of serverless infrastructures and data models and ways to construct technology because it is very empowering when you can learn how to build what you think about so take an idea and then turn that you know into life bring that to users bring that to a company bring that to an organization that's where I see programming becoming really powerful so I hope that this tutorial is really helpful and empowering for you to see how you can turn your ideas into code and then into a real application that you can use on any device so what we're creating is an inspirational quote generator and the way this is going to work is that when we press a button it's going to be calling a function in the cloud it's going to generate this image for us and then we're going to get a string of this image so it's not an actual file it's just the string that creates a file and then we'd be able to use that in our application so we could either save that image copy that image open it in a new tab or we could also download it to our computer and I do think that's something that is really cool about this type of project is that we're actually going to be able to show how this can generate images in a desktop application which you see but also if we wanted to get this on a mobile application this is what it'll look like so when we press it here and we press make a quote it's going to spin and then now we have this image so now if we click on that the image is actually showing up on our phone and if we want to press this again we can make a new quote and then we get another image there so I think this is a really great project for anyone that wants to learn how to create Progressive web applications and also show how to have one back end that can service many different types of front ends whether you have a mobile application or you have a desktop application so the way that this is going to work at a very Baseline level is that when we have this quote so we made a call from the user so the user is going to generate a request that's going to Ping appsync which is our API using graphql that's then going to connect to an AWS Lambda function and then that's going to generate a base 64 encoded string so then this is actually a series of digits a series of code that actually is an image and we actually are able to download this we're able to copy it we're able to use it but it's not actually saved as a file until it reaches the application so that's where we're able to take all of this in the cloud and then make it run get a response and then download this image right from our application in our browser I'm really excited to show you this project and especially learning how to build this type of serverless infrastructure where you don't have to provision the server yourself and there's a lot of these managed services to help you build with scaling so as users are using your application as these functions are getting called this will actually scale with your use case and you only pay for what you use so you never have to worry about provisioning a server and putting up you know money you know up front this will be pay as you go and there's also really generous free tiers so that you never have to worry about lots of expensive upfront costs it's very accessible and scalable to build your use case and build a fun app which is what we're going to do today so if you're excited about that let's get ready to build all right so first things first we are going to set up a code repository for our project so if you don't already have an account you can go to github.com and set up a free account it's super easy to set up your account and then what you'll be able to do is start allowing access to your projects with Git so that you'll be able to have Version Control so or Source control for your project and what this is going to allow us to do is think about it like Google Docs but for your code so you'll be able to go back in between different branches maybe you wanted to review code that you wrote previously maybe you need to revert a change that you pushed into production well thanks to git and GitHub you'll be able to then go back to that previous commit and then make that the default Branch or the default code for your project so uh you can get to create a new repository a couple different ways in the drop down in your profile in the top right you can go to repositories and then there'll be a green button where you can then press you know create new repository or you can press this handy plus button up here and then create a new repository so we are going to name our repository inspirational quote generator like so and then we'll give it a nice description so we'll say this is our inspirational quotes generator project to learn how we can run Scripts in AWS with next JS okay great so then we can choose between public or private I'm going to choose private and then once we create our Repository we'll then see that we have now a way to access this code repository with Git so now that we've done this the next step is to set up our project with GitHub desktop so GitHub desktop is a client that you can download also from Microsoft to the same company that owns GitHub and you'll be able to have this GUI or this graphical user interface that will let us manage our project with this web client on our computer to do that super easily we're going to press this button that says setup in desktop we'll then open GitHub desk up here this is going to prompt this window to open up there actually I'll do this one more time so we'll do that there and then we'll be able to choose where we want our project to be located so I'm going to go to my tech SEC Playbook folder I will drop it in there and then as soon as I press clone it's then going to establish a link between this folder on my computer and then the code repository in GitHub so now if we wanted to open in Visual Studio code will then be able to and you'll just say yes I trust the authors because I trust myself and then um we'll be able to now get our project this folder all set up in GitHub desktop in one click which is awesome so now what we want to do is we want to start building our next JS project to start coding all right so as you can see on my screen I have the next JS docs up this is the documents that are the documentation that's maintained by the company for cell and they maintain the next JS project so what we are going to be doing is we are going to scroll down in the docs to where it says create next app and this is the one line of code that we need to install our framework for working with nexjs and adding typescript as well so something that we can do is just right click and copy and then in the left part of our screen and visual studio code I'm going to control B just to get rid of that sidebar and I'm going to control and then tilde and then that's how we're going to open up our terminal so you can just do control C just to clear that out or I can just expand this make it a little bit easier to see so I'm going to open this up a little bit so when we open up a terminal window this is the same as opening up a terminal window on your screen or if you're on a Mac or this might be Powershell if you're you know not on a Mac but I'm on a Mac so this is what I would be using but you can run a basically a Powershell or a terminal window inside of Visual Studio code which is a great feature of the IDE so as soon as we write this in we're going to press enter and it's going to walk us through a series of commands to help us bootstrap our project so do we want to install yes and then what's our product name we're going to say inspo quote generator but we actually it doesn't really matter because we're going to get rid of this folder anyway but we'll just give it something now would you like to use eslint we're going to say yes would you like to use the source directory we're just going to do the default no and we'd like to use experimental app director but say no and we're Alias uh we'll just do enter and now it's going to start generating all of the different dependencies and Integrations for our project and I think this is kind of like the the fun part of coding just seeing all the scripts compile so that's great we installed it correctly and now if you open up command B you see all of these modules that are right here so something that I'm actually going to do is take this and I'm going to hold down shift and then click this so I get all of these and I'm going to move these back a folder so what we want to basically do is in GitHub desktop you'll see in here all of these folders all of these dependencies all of these elements that we're going to push to get I want them to all be tracked at the same root level as opposed to having going into a subfolder to then access the repository this is just how I structure my projects and we can then delete this subfolder because we don't need it anymore and there we have it so now we have our project bootstrapped with the next JS template for perspective I'm using the latest next 13 build with react 18 and this is typescript 4.9 so these are all of the dependencies that the next JS create next app project will build for us the next thing that we're going to do is we are going to allow a way for our next JS with typescript project to use Styles components as our Styles framework so personally I use style components for all of my projects because if you understand CSS this allows us to create basically functional components for all of our Styles so that we can replicate our templated components throughout our entire project it makes it super easy to read a lot of visibility across the code base and it makes it really easy for anyone to just go in and edit Styles replicate or duplicate files for components it just makes it really really easy and it's very very accessible to get started so something that we're going to do is we're going to add in a DOT Babel RC file and this is what we're going to allow for our custom Fable file so we're going to have a preset of next slash Babel and then in terms of plugins we're going to have the Styles components plug in with SSR is true and display name is true something else that we're going to do we're going to edit our next config file so I'm going to copy and paste these elements and then I will walk through how we'll do it so we're basically going to overwrite this whole file with this file so I'll walk through each part of it and also if you ever see me wrapping the text I'm doing alt Z on a Mac this is the command to wrap the text to the window so what we're doing is we're creating our next config and then we have react strict mode is false under the compiler we're going to be including Styles components and then there's going to be various different files that we need to install so displaying needs to be true SSR needs to be true founding needs to be true top level import paths we just leave that as an empty array and then meaningless file names just put in as index CSS prop is true namespace is an empty string Minify as false transpile template literals is false and then pure is false and what we do is we set module.exports equal to that next config that we have up here so this is that next config file that we need to be able to allow our build environment to understand what style components are trying to do so we're going to save this and in case you're new to Styles components I just want to give a little bit of an overview on what we're doing uh just because when we're installing this design framework into the code base it might be helpful to just have a little bit of an intro into that before you start installing you know maybe things that you haven't used before you don't know what they do so if you go to stylethedashcomponents.com this is a lot of very helpful documentation about how this styled framework works but basically what I really like about it is what you'll see right here so let's say that we wanted to define a button and this is going to be a button with a link around it so now what we'll be able to do is very easily create this component that has a styled a tag which we'll use as a link and then we could you know Define the Border radius which is three pixels the padding which is 0.5 from we have a margin we have width we have background color border we have all of these things but where it gets even cooler is we can also pass properties into this button similar to a functional component in react so this is really great because if you ever have Dynamic Styles and let's say that something triggers something else or you have a loading state but as soon as the loading state is complete then you want to turn the button green for example because the data is ready or let's say that there's an error and you want to turn the button red well you'd be able to actually pass properties down through this component through the Styles components framework to then edit those properties so this is an example where the property is primary so you would add this as passing data as props through the component on the client side and then you would be able to then edit the background and the color based upon the property and what it is doing and you'll see also here that there's a ton of companies that are using Styles component you know Target Vimeo Vogue Lego you know Autodesk so many different types of companies BBC Gizmodo take Master price on right all these companies change.org Bloomberg I mean the list the list goes on coinbase the list goes on so many different companies are using South components because it makes it so easy to edit your Styles and also think about it like this you'd be able to then copy and import this button component throughout your entire code base so anytime that this button exists you don't have to rewrite a bunch of inline Styles or you don't have to keep rewriting CSS modules every time that you know you need to render a button you could literally just import this specific button from your file which which I'll get to in a little bit and you'll be able to use this button throughout your code base which saves you so much time and it's really efficient because it's the same code you don't have to rewrite code and be extra verbose it's the same code the same component you define it once and then use it as many times as you want and these are just some other examples if you ever want to check it out but what we're going to be doing is we're going to install with styled components and then we'll also be installing the Babel styled components plugin in the dev dependencies so that will be able to then which talks about right here um just so that it can give some more benefits like legible class names serverside render compatibility also smaller bundles and more optimizations which is really great so we're going to do that right now so we're going to open up our code base here we're then going to close out that side header and then we're going to paste that in here so now that we have npm install save style components we're going to install that there next what we're going to do is it told us that we also have styles components payable so you'll see in a little bit why this is a really helpful plugin for our Dev dependencies when we're building with stealth components so I'm just going to copy that here so it's npm install dash dash save Dev IL plugin style components let me install that there and now if we see our code base it should look like this so dev dependencies has be able to plug install the components there and then styled components exists in our dependencies there so whenever you're changing the server or different elements of the next config.js or in these other elements sometimes you'll see this red right there and it'll say module can't be found or something like this so one trick that you can do to get rid of that red is to do command shift p and then when you do command shift p it'll open up this menu where if you press or type reload window here that will help to get rid of the red error that you might see so this is just a way to refresh your code base and you can actually sometimes run this while you also have a build running so it'll just refresh the vs code window and sometimes it'll clear out maybe some left over it thinks that it needed this package but it didn't see it so then it'll just resync up your code base in vs code to make sure that everything is consistent so just a fun little hack to fix that in case you ever see that red error there or elsewhere related to typescript or next.js so once we've edited our next config JS file we are now going to go into our index file so under Pages under index we're going to then remove a few things that we aren't using anymore so we're not using this next font module and there are some instances here where we reference that but we're just actually going to start just removing uh these things so I'm going to take everything from Main div all the way down this and we're going to give that a save and that is the imported elements that come in with the template so we're just getting rid of the template and then we're going to change the header to be super quote generator cool so once we've changed this header module this is a module that's specific to next.js and it allows us to create Dynamic headers for all of our Pages or sitewise throughout the application so this is a great upgrade if you're familiar with crate react app this is actually a really really really slick easy way to do this with xjs and typescript so we change this and then this will be the home page header and let's just give that a quick save and now we're going to run this and we're going to see if this worked out so when we run our project in packet.json you'll see here under the scripts there's Dev and then that's those next Dev to start the project or start which is next start but we're going to do npm run Dev and that is what's going to get our project started up so see that it was compiling client and server are successfully rendered super quickly and now let's see what that looks like on our browser when you run npm run Dev that's going to run our application on localhost 3000 so this is the URL for how you would get this in your browser and if you're running this application so far you should just see a black screen but in the header if you hover over this it should say inspirational quote generator which is our title for the header and then if you were to actually share this link with somebody else running on our URL which we'll do in a little bit that's where you'll see this preview description where it'll give you a preview of that you could also have an OG image if you wanted to add an image as that head header metadata tag but um we're not going to do that right now we're just going to focus on this so just to give a little bit of a sanity check let's make sure that this is actually working correctly so I'm going to just write a div with hello world inside of this Main we'll save that and then we'll see that that is printing and it's actually updating once we press you know command s to save it this is going to update in real time so let's say that we wanted to say we'll do an H3 uh tag we'll say great job running Js we'll give that a save and then now that's actually running and putting it below so now we see that this is actually printing out our code which is awesome so what we're actually going to do now is we are going to get rid of this and we're going to start actually building out the template for our project with our real code not the template that is created with create next app so we'll give that a save and we'll go to the next step so let's do some general housekeeping to set up our project obviously there's a lot of styles that the template will come with but we're going to be creating our custom code so we want to create our own Styles so if you navigate to the Styles subfolder in your project we're going to go to globals.css and we're basically going to remove all of this so this is just the starter templates we're going to do a bunch of other stuff so we're going to install some fonts and then we're going to install or basically write some Global styles so whenever you do a wild card and then you do these brackets this is going to be how you apply basically a general style to all the pages that ever render So This Global Styles is basically apply the style or allow this type of style to work for any of the projects that or any of the pages that get rendered in our project so we'll do box sizing water box we'll do padding zero and then we'll do margin zero we also are going to import some fonts so I'm going to copy and paste these in for you to copy so where I'm getting these from is Google fonts these are free fonts that you are able to access and then use in your code so I will show you where to actually search for these so that in your next projects you're able to get up and running from that so I'm just going to do a quick pan just to show you this last little bit from that font and then I'll show you how we get that so when we want to add a font you can go to font.google.com and then let's say that I see Roboto because I really like this font so you can click on it and then it's going to give you all this information about the Styles the different font family elements and all the different you know ways that you know you could be using this so let's say that I really liked um this font family for example so what you can do is that you can obviously download or what you could do is you can just go to select you can go to this and then these are actually the other fonts that I had in there but what you'll have is here under Roboto you'll see that there's a link and there's also an import so the import is really important because when you are working with a framework like CSS we don't really need to import all this this is more for like if you're importing this into HTML we really just care about this import statement here so this thing so you'd copy this and then that's where you would then literally copy and then paste it into there right and that's where you'd be able to copy um that for example so same thing here right if you wanted to do that with Roboto so it seems like when you you know drop down that's for this so then this would be for Roboto yep and then that's how we would add a font into our CSS so we're going to give this a quick save and then these Styles will then apply to our overall project so then when we go back to this we'll see now that the background is white it's not black anymore and some of these Styles seem to have been applied which you will see in a little bit back in vs code we can now remove our home module CSS these were just the styles that were imported from the create next app we can just delete this so we'll delete it and now what we're going to do is we're going to do a little bit more organization of our project so when I work with style components I like to create a components folder so I just right click add folder and then I title it called components and then we're going to do a folder so we're going to do quote generator and there's going to be also another folder called animations which we will get to a little bit later in this video but right now in our quote generator we're going to not add anything in there right now but we will in a little bit we're going to do mainly all the Styles in our index.tsx file but we will also add some sub components to break up our code and make it more composable through our project so now we're going to do is we're actually going to get started building out our project so what we want to do is we want to build out a background so something that personally I like to do is have a file in our quote generator we're going to call this quote reader elements TSX so when we are working without components something that I personally like to do is on the right have our element and then on the left we have the actual file that we're editing in you'll see a little bit why this makes a lot of sense in terms of building but a lot of it is just an organizational thing of I'm editing this style and I'm adding it into this page here so what we're going to do is we want to add a background to our project we want to you know give it uh you know a cool nice you know dynamic background so how exactly would we go and do that so what we're going to do is we are going to add in a few things so we want to do background for our project so in here right from the top we are going to do input styled from style to components we're then going to import link from next link because we're going to need this a little bit later and then we're also going to import image from next image here we're going to do is we are going to use the styled component extension and if you don't already have this you can see the ones that I have so I like vs code it's syntax highlighting and then also Styles component Snippets for vs code these are the ones that I use and they are super super helpful because what we can do is if we want to just write uh basically a snippet for our style component we'll do exsc we'll export a stout component and then we'll call it gradient background con and then we need to call it styled something so we do style div so you could do styled H1 you could do style H2 you could also do a style of link as you'll see before you'll see a little bit later but what we're going to do here is I'm just going to bump up that just a little bit just so you can see a little bit more of the screen and immediately as we start writing in Styles components we might start to see some Type errors or typescript not recognizing what we're trying to do so we see this error where it says can't find the Declaration file for module stealth components um basically this has an any type so it gives a recommendation of let's run the install for Dev dependencies with types for styled components and this will allow typescripts to recognize that we have style components being used throughout our project so what we'll do is we'll open up a new terminal window and if you don't already have this open you can do control and then tilde and that's how you can toggle the terminal at the bottom of the screen we'll do I did Ctrl C and then control V we'll do npm I dash dash save Dev type Styles components we will install this for our project so that ran and then this error should go away which is great so now it recognizes that this module you know checks out with all the types and it recognizes that that's what we're doing which is awesome so now we want to do is we want to add in some Styles here so I will go through these and then I will go through them together cool so just to go through these background we are giving this a linear gradient and this is going from one color to the next color and we have it going to the right so this is a great way to and I'll show you the process for how to do this but this is a really great way to add that Dynamic you know styling for any div or any background or any block where you can you know give it just this background color but it's a one color that blends into the next color and this is like very modern very you know futuristic it's what a lot of very like you know really polished apps will have in that linear background so I really like linear gradients I like adding gradients to a lot of things that I do so that's a great way to add the background we'll then do background size a 400 percent with 400 and what we're going to be doing is we're going to have this oscillating effect for the background and you'll see how having this background size being really expanded and then we'll be making it um basically like moving back and forth and having it you know move left to right which you'll see uh through this animation that we're going to build out so then we're going to do an animation to gradient we'll do six seconds e is infinite and this is going to basically mean that we're gonna we haven't created this yet but we're gonna have a animation called gradient it's going to be running every six seconds and it's going to have this ease effect throughout and it's going to be running infinitely we'll then do a height and then a width of 100 view with and then what is so awesome about Styles components you don't have to you know like start writing you know keyframes because usually with CSS you'd have to do like keyframes gradient and then you'd have this you know in the background and then you have to reference it you literally can wrap all of these elements together and you don't have to worry about having you know a certain element being there um also just with you know doing hovers let's say that you have this class here so you'd have to like declare it as like this with a style and then you'd have to do something like this with hover and then do that and you know I I just like think that style component just makes it so much easier to just wrap all of your Styles all of your animations all of your keyframe editor elements all in one package component so that you can then import this throughout your entire project which I just like I think that's amazing and it saves you so much time for having to do all this guesswork of you know did I have this keyframe is this keyframe imported did I add this hover effect you know did I add this other effects with these Styles so it's just super easy we'll add then a background position which is going to be zero percent to 50 percent we're then going to do a 50 percent and then we're going to do another one and I think Amazon code whisper already knows exactly what I'm going to do because I already have this project committed but we'll just carry out this other process and then we're basically going from 0 to 50 to 100 and we're going from background position you know zero to 100 back to zero percent and um we know we're keeping fifty percent for both so we're adjusting the you know the height and the width and you know editing it that way so this is great so we'll give this a save so this is going to be really cool in one second but just to show you also the power of South components we have this styled component that we've already created it's a div with all of these Styles which is great but how do we actually get this back into our project so something that we can do which I think is so so so awesome so we're going to declare this almost like we would declare a div so we use that you know that carrot and then we're going to just start typing the name of that styled component that we just typed so gradient background and we already see that it's finding this element so we can just press enter and now check this out so as we close this out it's now added imported this so this is what it will actually look like so it's importing from components code generator coordinator elements and we'll add this so this is what's awesome about solid components also is that as you create you know these unique named elements we can then just start writing them as if they were a normal div and then we'll be able to then you know use the sort of intellisense of finding the different names of the components we'll then be able to import that directly right into our code it's super fast and then when we save this check this out we now have this really really really cool Dynamic background for our app which I mean this is like adding that type of animation with the gradient just gives it like such a nice Snappy Dynamic fun vibey element to the project and this is where you'll be able to add this really nice linear gradient oscillating background to our project so that's great so now you've just seen how to import the style component and then add that into one of the pages in our project so we see that we have a gradient background component that we really like so once we've added this feature one of the best practices that you can get into is making sure that you commit this specifically to GitHub so that you have version Source control so what we're going to do is in our GitHub desktop client we see all the changes that were added and specifically if we open up this 100 components we see that gradient background container Styles component that we have so we really like this so what we're going to do is we're going to keep this on the main branch but we need to publish this Branch first so what I like to do is just simply add and we'll say added gradient background container SC for South component so that's good so we'll Commit This to Main and this is all of the different styles so this was basically our entire front end application minus you know node modules and certain elements that we don't want to push to GitHub because that would be sending like thousands of files and we don't want that in our our GitHub repository because that'll be built with our package.json if we run our application you know with a server but we don't want to put that into the actual assets that are deployed because that's what package.json includes so that's this file this file right there so these are all the build scripts and everything but our dependencies for our build script but we don't need to include the node dependent known modules dependencies packages so what we'll do is we'll Commit This to Main we'll publish this and then we'll wait a second and then we'll check GitHub to see where they are so what's awesome about GitHub is as soon as we push this code and we're able to push this to our Branch when we refresh we'll see all of the code that was just added to our code repository so when we go here to our components folder and then to that component that we just made we see that the gradient background here is actually the same that we just added here so this is a really cool way where you're able to add that Source control or Version Control for your application so if you ever need to for example go back to a previous commit you can always go back here and then go back to that specific commit and then maybe go back to a previous version this is really great if you ever need to you know check out a feature or a certain build or a certain way in which you built something you always have that type of History so this is just a good best practice to get into when you're building especially if you're building a new system and maybe you write some code in maybe there's an error or maybe just you need to you know undo something you can always go back to a previous version and then just sync up you know and go back to a certain branch and then you could just change your code and then GitHub desktop will be able to switch out the right code for you now that we've worked with Git and GitHub and pushed our initial commit let's now switch back to our code and let's start building out some of this front end so what I wanted to do was add a background to this which we did which was that gradient but now let's add some images to the background just to you know add some Cloud flare so what we're going to do is we are going to take these two images that I have stored in assets so I create a folder called Assets in the root so I'll just do right click and then I'll do add folder I'll say assets and then I'm going to drag and drop these that I have stored locally you could actually use any images that you'd wish but these were two that I thought were kind of fun one was lightning and then another one was cloud with sun now that'd be kind of fitting because of cloud so what we're going to do is we're going to create two different components one is going to be for an image to be in the top left and one is going to be to an image in the bottom right so what we'll do is we're going to do background image one and that's going to have a source which we'll call cloud S one and that will have a height of 300 and then there's an alt cloudy back ground one we'll close it out and to get rid of this error we're going to actually need to create this style component so in our quote generator elements text file so that's this we're going to keep our style components in this and then we'll import them here so we'll do exsc which is that expert size component snippet and then we are calling that background image one this is going to be a styled image and we already imported image from the next image module from reversell and then we're going to do another different style so we're going to do position relative we're going to do Z index one margin left minus 120 pixels margin top probably just 10 pixels cool we'll give that a save and now what we do is because we already have it for Auto Import so it'll find this and then we just need to import Cloud one so we'll go to the top of our file and sometimes I like to separate these different elements so these will be our components and then these will be our assets let's import classes and it's already finding this from here which is awesome so that also if you ever want to check if you hold down command or control you can always see that but we know that this is uh mapping to this image that's there locally so if we ever need to go and find it we can just go to that check where it is and then find where assets are so we already saved that we'll give this a save and then we should see this image there but if it's not finding it that means that clouds one is not there so that's because we imported the wrong file so it actually doesn't know what our cloud is which our Cloud one object is so one thing that we can do that'll actually make it a little bit easier is if you do dot dot we can then go to assets and click on that go drop down and it should give us a drop down of what's there but sometimes if we sort of try to write it it'll prompt to find what's there so we want cloud and Thunder and then we should see it there so this is really cool but we see that it's not aligned in the way that we want so what we can do is we can go to elements in the browse and this is I'm actually pressing F12 so that's how you open up the dev tools we'll open up elements and then we take this selector we hover over that and then now we can actually get all of the the styles for this so the Styles component is going to create this kind of dynamically generated you know class name but we can do is we can move this there so can always move it and what's really cool about that is let's say that we give it you know minus 10 something like that so now when we move this it's going to be super Dynamic and it's going to stay so this is a great way to debug your code and your Styles as you're building so we're going to do is we're going to switch that out and then we're going to just close this out and this should stay in place because it'll be all relative here and that's exactly what we're looking for so this is great so we'll give this a save okay this is save and then we'll give this a refresh and we see that it worked so that's great awesome so next up we're going to do the same thing here but we're actually going to just go back to our code generator element we're going to just copy this we're going to just create another one but this is going to have a different set of styles we're going to call this position fixed we're going to do same thing Z index one we're going to actually move this all the way to the right so this is now going to be locked to the right and then bottom is going to be 10 so give that a save and then we're going to do the same thing here but we're going to do clouds two and we're going to basically copy the same thing here do clouds too and we're gonna do cloudy weather and that's the second image that's there we'll give that a save and we'll see where the saved it so I see that this added this here but something that we can do is if we refresh we open this up because this is that new image that we got so what I want to do is I want to change instead of this we're going to then see that this should be at the right and this should be at the bottom bottom so if that does not do anything for you then this means that we need to change this to be that different component that we just created so we'll do two we'll import that we'll save that and now we have that there which is great and we can actually maybe make this a little bit more to the right I see that that could be just a little bit more there so that's looking good but let's just just see if that actually is the case okay I like that so that stays right there and it's in that fixed position which is there so I like that so we're gonna do minus 120 and then we'll just check to see if that actually worked and it did that's great okay and then this stays at the left and you'll see that that's still it's it's all kind of adjusting there okay perfect so this seems really cool and these are ways where you can work on the Styles and then also use that F12 elements and then selector to then find Styles and then edit them in your browser and then move them back to vs code so you have them uh as you work on your components all right so the next part that we're going to be doing is we're going to be generating a footer so that as quotes are generated our server our serverless server in the cloud is going to be adding plus one to the number of quotes that are generated in a dynamodb uh table object and then we'll be able to display that in the front end so what we're going to do is we are going to create in our index.ts x file we're going to create a footer container which will be a styled component we're then going to create this div component here so that it can go inside we're then going to have quotes generated with a number that will be dynamically generated we're going to call a number of quotes which is a value that we're going to store in use state with the react you state hook we're then going to add our breakpoint and then we're going to do is we're going to say developed with we're going to pass in a heart by and I'm going to do footer link and this footer link is going to include some data so I'm going to include an href to my YouTube channel so when we and this is going to be a style component of a link component from next but what we're going to do is you could obviously include you know maybe your own website or maybe your own YouTube channel if you have one uh or in your Instagram or LinkedIn or something like that but we're gonna have a call to action and we want to make this link open up in another browser tab so we're going to do is we're going to say Target we're going to then include underscore blank we're then going to save Rel and then we're going to have two values here for security so no opener and no refer and this helps with Legacy browsers in terms of some web vulnerabilities just to make sure that when you open up this new tag that you can't have basically like no elements this will actually like if you actually open this up or you even ask chat GPT it'll give you more data about it but basically this is just if you're opening up in another tab from your own website from your own origin to something else you just want to make sure you have those values a part of the link script and then we need to have some value in here so I'm going to include a link to my handle but you could have your own link to your own handle or your own name if you want to have it there and then what we're going to do is we're going to close it out which we do and then we're going to start hammering away on these values I'm going to actually rename this to be footer container and then in our quote generator elements styled components file we're going to do exsc for that styled component snip it we're going to then say footer container this is going to be a div and then we're going to start plugging away on these Styles so we're going to do is we're going to give this a width of 100 view with so it'll span the length of the the width of the screen as it expands and contracts for the height we're going to say that this is 50 pixels tall say text align we're going to say Center so that all the text is in the middle for font family we're going to say that this is source code Pro and then mono space we're then going to say font size is 15 pixels we're going to give this a position of absolute we're going to put this at the bottom and append it there with zero and then color is going to be white for the text and then Z index is going to be 99999 so that it'll be prioritized above any other divs in the screen now to import that we just have to rewrite the last letter press enter to add footer container and then now it's added to our list of imports automatically which is awesome now to get this value here so we're going to do is we're going to be storing this number of quotes value in a hook called use state so the way to use State works is with react you'll have basically a value you'll set that value as like as well as in its array basically but it's an array of a value and then a set value function or caller and then that equals basically you state like that so we're going to do is we're going to say const we're then going to copy that value here and then we're going to say set because it's basically it's going to be this so we set number of quotes we do you state and we use zero but it's going to complain because we don't have the right typing for this value because we're using typescript so we need to make sure that we are typing everything correctly so we're going to do is because this is a number could you use a state call this a number or can be null and have this value here and then that will be there so as we can expand this out so you state number Boolean and then we just need to import you state from react so import react and then use state frog react so then that is how we'll be able to then call this number and we're going to automatically set it to be zero so every time that it loads we're going to hide we'll show you how to hydrate this data with function calls from Dynamo but we don't need to worry about that right now and then for the footer link we're going to do another component style component here let's expand this out do exsc do footer link equals styled link there we go and then what we're going to do is we're going to overwrite it so these are going to be how we override the link so usually the link will be purple if you've ever seen that or blue with an underline but we're going to change it so the color of the text is white but it'll still have that URL underscore and then what we'll do is we'll import Link in that same way so that as we save this and as we save this we'll be able to then check that out and it seems that there's going to be just one call that we are missing here oh I see we just had that spare function there okay cool so I'm going to give this a quick save and then we should be able to see this right here so if I expand this a little bit more for you all so you can see so what we're doing is we're going to do quotes generated and that value is at zero and then it's going to be developed by developed With Love by and then this will open up uh my own YouTube channel but you see how it opens up in another tab that's where we're able to have the blank with the no opener no referrer uh relative values there and then that's how you open that up in the in the URL so what we want to do is I just want to make this instead of being a white heart let's make it a red heart so we go back to the front end and something that we can do is if you want to edit something in line so you don't add a div where it messes up spacing or add break points you can use something called span and what we're going to do is I'm going to create a span called red span I'm going to put that around the heart and I'm going to put that in our quote elements quote generator elements here do exsc we'll do that and then what we'll do is we will call it same thing here so red span will just take away the Arrow brackets we're going to make this style slash span and make this look a little bit bigger and then color will overwrite to be red we'll give that a save we'll then do the same thing backspace and hit enter rewrite and then enter and then we'll press save and then what we'll see here when we go back to the front end is we see that it's red so that's also a way where we're able to change Styles in line and also just speaking of styles being in line so remember when we changed the color of this Styles component the text to be white well if you actually undo that you'll see that it is that purple you know bluish URL color that we would expect for URLs also if you ever want to remove the underline something you could do is text decoration and then go down to none and then that's how you'll be able to you know overwrite certain styles that come with a link that you might expect but I do think that the the white is fine because then that we can keep the color cohesive but I do think that we do need that underline but just showing you that that's another way where you could overwrite the Styles if you ever wanted to Okay cool so that that's pretty good and then let's just look at use State and what that's doing so when we assign this value to be zero so every time that this function really it's a functional component but every time that this page or this functional component page loads there's going to be a base value that is assigned to this thing so let's say that we want to make it 200. so every time that this loads it's going to be 200. load it again you'll see that's 200. we ever wanted to make this you know 400 we'll give that a save and now it's 400. we go back to zero we give that a save you refresh and now it's at zero so it makes sense when you are fetching data from a server or from your Cloud environment or from AWS or you know really anything you really want to make sure probably that the value is zero or it's set to basically nothing and then you hydrate it with data so for us and our sake we probably just want this to be its original value as zero and then we'll use something called use effect to hydrate this data with actual an actual number from our database so that's great so now that we've added this footer component we can proceed to the next part which will be a popup modal with a button and we'll start configuring out how the front end Works to get that modal popup that we want for a component so that we can start clicking and getting our quotes one of my absolute favorite Frameworks to use is material UI they have a lot of these components that you can you know spin up and then you know use however you like but I really like their modal component because it's just so easy you can have this element here and then just have this pop up and you can actually just use this modal you know really as like its own component you don't necessarily need to click a button you could just have it open and then it sort of just fills over this so as something expands you still have the modal over that screen so I really like that and we're going to be using this in our application so what we're going to do is we're going to use npm to install these packages so I'm just on the mui.com material UI such getting started installation and that's where we'll be installing the mui material emotion react and emotion styled elements here so we go back to our code base we will open up another tab so we want to keep that running there we will do clear we're going to then install these into our package.json script and then these will install these packages in our node modules and then we'll be able to start building out our element so there's gonna be quite a lot of code that we are going to build here so let's dig in so when we are configuring our front end what we really want is we want to have this background which we already have gradient background right these images are just going to stay in the background so we'll just start labeling some of this stuff so it'll be background images and then we'll say footer and that stays there so now we want to do is we want to push some stuff uh basically over these images and we're going to build basically quite a lot of things so we're going to have a quote generator modal and then we're going to basically have this as a modal and then we're going to have some stuff over it so we're going to create a component called gradient quote generator modal and that is just going to be the popup as we call our script but we don't necessarily need to worry about that right now we're just going to comment that out and we'll worry about that later the next thing that we're going to do is we are going to and I'm actually going to indent these just a little bit easier to see something that we are going to build out next is quote generator modal actually we'll call it modal popup just so that it's easy to see and then this is the code generator and that's going to be the button that we call so we're going to need to have a quote generator container we're then going to want to have a quote generator inner container then we're going to want to have a quote generator title and this is going to be daily inspiration generator the title we're then going to have a subtitle so that's going to be quote generator subtitle and then I'm just going to copy this text in under the subtitle here and I'll just do that so I just thought it would be you know a fun you know description of looking for a slash of inspiration generator code card with transformational quote card generated by and then I have again that same footer link component that's the link component style link component that we referenced earlier in the footer I linked to Zen quotes and then I list the Zen quotes API and I sit there so just to give a little bit of a perspective ons and quotes so what they are they are a really easy to use API you can use it for free they also have a you know a paid version if you ever were needing you know like a lot of requests but uh with this is just uh you know just like a a project that we're building out so we don't need to use you know an API key or anything like that so what we're able to do is just use their API their URL to then call the Zen quotes API and then get a random quote back so these are some of the people that you can get quotes from and then you could also you know browse quotes by keyword they just have a lot of builtin functionality and it's really easy to just you know hit this API and which we'll do in a little bit and then actually generate a random quote so pretty cool and we'll show exactly how to do that but yeah major shout out to Zen quotes for providing this free utility for random quotes so that's how we're going to be getting our random quote and I'm just giving you know accreditation twos and quotes for providing this as a service next up we're going to create a button so under subtitle we're going to create a button so we're going to do generate quote button and then we're going to include some button text so we're going to do generate quote button text and that's going to have an on click function but we're just going to make that go to a null function just for now just as a placeholder this is going to say make a quote and then that's the text that's the button that closes it out we got the inner container and then we have that so that's pretty much all that we have here and I'm just going to move these out just a little bit just for spacing's sake and now we can start attacking some of these components so what we're going to do is we're then going to start going to these from the top so there's gonna be quite a lot of styles that we're going to be referencing in this so that's why we are going to have split screen so there's a style that is becoming really popular with a lot of you know like Innovative Tech Cutting Edge tech companies called glassomorphism and I found a really great website that I'm going to show in a second but this is how I'm going to be getting the inspiration to style these different components so if you go to hype4.academy they have this glassomorphism generator for making basically the styles for a div so it's really awesome because what you can do is you can adjust the blurriness so you see sort of this background image gets blurrier can also adjust the transparency so how transparent something is so if you had like no blur and then it's transparent you can kind of see over it or if you want to add the image and then you add blur you can see how it's adjusting those ones and you can also make it a different color so if you want to make it red let's make it blue I want to make it you know like different types of colors of the rainbow you could do that and then you could adjust the blurriness adjust transparency and then you just copy the CSS here and then you could import those directly into your application so we're going to be using those types of styles with a few twists so the first one that we're going to create is the quote generator container so exsc for our style component we do cogenerative container and then this is of course going to be a div and then we're going to be copying a whole bunch of these Styles here which I'll just copy to save some time so we have a Min height of 350 this is going to be creating the height and the width we'll then do um basically like a minimum height and a minimum width and then just a height and a width so this is as the screen is expanding or decreasing we're going to be having sort of this minimum bound and then this upper bound to work within and then we're going to have a border of two pixels we're gonna have a border radius to round out the edges and then we're going to be putting this in the middle of the screen so this is in the middle of that background that has the animation of the color switching and then we to actually get this to go exactly in the center we're going to do top 50 left 50 and then we do this transform translate manipulation of minus 50 minus 50 with a position absolute so this is a way that you can Center a div within a div so it's a pretty handy trick and then Z index is going to be above the background and then this is that glassomorphic style so this is a specific uh you know shade of dark Indigo purple and then this box Shadow will sort of add kind of this like glassy outer effect we then have this backdrop filter which is a blur and then a backdrop filter as well which is a blur and then border radius of 10 to round out the edges and then we have a border there so this is that style for the quote generator container we're then going to do as I'm sure you guessed it rewrite that import with enter then we're going to do the next one we're going to do exsc again we'll put this one in there we're going to do div and then we're going to add some more Styles in here so for this one we're going to do top 50 left 50 again that transfer and translate manipulation position absolute with 100 so what we're doing is we have this background we're creating this in the middle of that and then we're going to then have another div in the middle of this and you'll see why we layer it this way but sometimes if you want to have something centered within something that's also centered this is a way that you can have a div within a div over another div and then that's how you can have more of these balanced Styles and ordering so again we import that directly there now for the title I'm going to do exsc again we'll do that for the title for title again it's going to be style of div and we're going to be copying some more Styles here and what we're doing here is we are making the font family this permanent marker font size of 50 text align make the text in the center there's going to be a color for text being white we're going to have this padding of you know 0 20 pixels 020 pixels and you'll see why that padding matters and also for the position we're going to have that relative so it's going to be you know centered at the top and then if the screen has a max width of 60 pixels then the font size is going to decrease by 20 pixels so it's going to go from 50 to 30. and that's really important because when you have screens changing you also have to think about how readable is the text and you might need to make something smaller you might need to make something you know go on a second line so these are just considerations and what this is called is a media query so send it in some media query so what's awesome about Stealth components is that you can have these media queries wrapped into these different components and then you could have this all Impact everything that's within this div which is awesome so now we will import this which is great now we just need to work on the subtitle so we'll do exsc again we'll get subtitle and we're going to add some more Styles here this of course is going to be another div which is there and then text color is going to be white font family caveat font size is 35 position is relative width is 100 text align Center padding similar Styles except now this is going to be a little bit smaller so we're sort of making this as subtitle text which has a different font and is also smaller and then we will import this we will import that like that and then we're going to work on this quote button so e x s c again redo this we'll make another div and I'm sure you probably guessed it that we could be just using a button but I do like styling these in a custom way just because it gives you a little bit more granularity of what you're doing with the Styles and it gives you a little bit more control so there's quite a lot of styles going on to this button but at a high level we're going to be having some glossomorphic effects here which you know you might recognize from the top before but we're going to give the button 100 pixels as the height 300 pixels as the width is going to be a border around them there's gonna be a border radius margin top is 20 pixels so that makes it a little bit um down from the top there's gonna be a position relative there's a transition so this is what we're going to be doing so as there's a hover effect we want to be using this 0.2 second ease in ease out effect when you hover over it or basically when you want to click on it we're going to have this pointer now so we're going to change from you know just like the normal clicker to a pointer um it's going to be top 20 pixels and then the margin is auto transform origin is Center so this is how we're going to be centering this inside of the div and then we give this this glossomorphic effect so that's these Styles here so you know pretty similar to the other ones that were above and then the on Hover so this is how you do on Hover effects and styled component so when you do that so that you apply this class and then you have a filter there's a transition there's a transform so it's going to get a little bit bigger as you hover over it the brightness is going to increase by three times and there's also this will just stay in the center so we will import this and then we just need to do the text and that should round out the last of our Imports for style components so again exsc we're gonna do button text so this is going to be the text that's inside of the button that's centered so we're going to do div once more and then we're going to give this some Styles so the text color is going to be white font family is going to be caveat uh font size is going to be 35 pixels we're doing that left top transform Translate uh you know star manipulation to make it in the center with a position absolute the width is going to be 100 and that's going to be that the text div is 100 of the button that it's within and then this hexa line is centered so the text is going to be in the center so we'll import that and it's probably not going to like the fact that we have on click but that's okay for now we'll see if typescript complains about it too much but hopefully should be able to be okay so what I'm going to do is I'm going to switch back to our previous window here and let's see what we got so this is starting to look like a real application so what I really like about this glossomorphic effect is that as we make this smaller this becomes much more Dynamic and this is really clean I think if you are building you know portfolio projects or anything for work being able to show this level of detail to your build I think is hands down game changing because it also shows that you're really thinking about as the user is on different devices especially considering how mobile we all are being able to have that consideration around styles to say hey we have this desktop application but then we can also make it mobile these are skills that will pay dividends down the road for you and of course we see that on Hover effect that looks really clean and as we hover over the colors changing there's that little bit of glow and of course we see that and if we open up Zen quotes we see how it opens up in another tab which is exactly what we wanted to do with that Target blank and this is looking pretty cool so far so again we got that glossomorphic effect where it's blurring out the images in the corner and as these move you see that glossomorphic effect moving over it so this is looking like an application and I'm really happy with what we have so far and as we continue the rest of this build once we click make a quote we're going to then have a modal popup and that's going to manage some State and then that's where we're going to be interfacing with the cloud and then getting an image back so you'll see how we'll do that in the next part of the build so as we start working on our full stack project I do think that it's helpful to do a lot of deconstructionism when it comes to building out parts or components so a methodology that I've found really helpful is using an online IDE like code sandbox to build out scripts build out components build out certain elements before we Institute that or Implement that into our application so when we are clicking this button obviously this button isn't linked to any functions right now but when we call this we're going to be calling our API to run a Lambda script to do something and then send that back to our front end so we don't have this script configured yet but it would make sense for us to be thinking about this before we start implementing it because when we are waiting to get data back from Lambda we're going to need to have some sort of use state for based are we fetching data is something loading did something complete and did the function finish running what we called it to do so this is where it makes sense for us to sort of Park our front end and then move to working on the back end and when we think about deconstructionism what we can do is that we can create a code sandbox IDE it's an online editor but it allows us to write node.js we could you know create a Docker instance we could use Dino view react uh they have rust they have python they have Astro T3 app they have next Js they have almost anything nuxed they have literally everything you could ever do they have a node HTTP server view three svelte Gatsby like they have remix they have literally everything so what we want to do is we want to create what will become our Lambda server but we want to test it out in node.js before we actually start implementing it so when we do create IDE we then start this up and what we'll do is we'll title this so I'm going to name this to inspirational quote generator right there we'll save that and that automatically Auto saves did that there and then we'll just do a quick refresh just to make sure that it's saving correctly which it seems like it is so now when you spin up your code sandbox IDE your node.js environment for the first time you can run your commands with just refreshing and it'll rerun the server let's say that we want to do hello code sandbox 2. we'll say that too we'll see hey friends welcome to this build we'll give that a save we'll do refresh and now we see hey friends welcome to this build so that means that it's working which is great so now we're going to do is we are going to start getting our hands dirty with building this script so just for some housekeeping purposes we are going to remove this and now it won't do anything because we're not calling it to do anything so what we're going to do is and I do think that this is a helpful exercise before you ever write any code for your script let's really think about what we actually need the script to do so we're going to need the script to do a couple of things but for starters we want to fetch our random quote for number two we want to basically turn those those quotes or that fetched quote into a series of lines which we're going to call this quote text so we're going to turn text of quote into lines which is going to be the quote text received and I'm going to make this just a little bit bigger the text just so that you all can see it there cool now for number three we want to basically create a line for our author so we have the text which is the uh I'm just going to make this a little bit bigger yet so we will have so we have the lines for our quote so the quote could be maybe one line two lines three lines or four lines and then the author is going to be aligned after that so you want to turn text of author into a line and that's the quote author then the fourth thing that we're going to need to do is add a quote image of some sort so add a quote image then for number five we want to turn all of these elements into a renderable SVG so we turn these elements into an SVG format and then to finish off the rest of the script we want to basically take that SVG SVG and then turn that into an image which we're going to configure an image as PNG here but we're going to need to have it as a base 64. string in Lambda which we'll worry about later you don't need to worry about that right now but what that means is that instead of it being an actual file it's going to be a series of characters that will resemble an image file which we'll get to in a little bit so that seems to be on track for what we're looking for and sometimes I find it helpful also just to save this in the readme file so if you want to edit your readme file you can just go in here we'll switch this out oh I think that's uh doing that again so I'll do inspirational quote generator app and then we'll have these as our readme element and then we'll just give that a save we'll switch back to reading so just so in case we ever need to reference this back we have the saved in another another spot okay so now that we have our steps here we're going to now start configuring our server so there's going to be a specific package that we're going to need to create and I'm going to create a terminal and we're going to make this a little bit bigger so we're going to need to install a couple of things so sharp is going to be a library that we're going to need for the image processing so we'll do npm I sharp and then we'll press enter and now we should see in package.json which is the sharp installed as a dependency which is great means that it installed correctly and then we're going to need to install a specific version of node fetch which is specifically version two so we'll do ntmi node fetch at 2.6.2 and this is very similar to what Lambda is going to need for this specific way to fetch data outside of the server using node.js so that is a great way for us to start working and you'll see here that now node fetches at 2.6.9 and that means that we have that working when we're making these images we are going to want to pull a random set of colors for the background those are going to be just a random background graphic so what we're going to do is we're going to create so we're going to right click we'll do nude directory then we'll call this backgrounds and then we're going to drag and drop these that are from my computer here and we have these different colors that we drop into here so these are 750 by 500 pixels resolution is 72 by 72 but where I got these was from this awesome website called uigradians.com and you get a ton of really great different gradients here and um you can just like pull in different ones and you can also see you know kind of like how they're made how they work and they even have ones that are like three colors too which are pretty cool and even like that it's pretty sick so what I did was I just found four that I really liked and then those became the backgrounds that I will call in the script so you can either use those or pull from your own but just make sure that it's that 750 by 500 pixel background size so then when we are working on our script we're also going to create another directory and we're just going to call this finals and that's just going to be where we store the images that get generated and those are going to be all the folders that we need to create so what we're going to do just to get this kicked off is we're going to call a few things so we're going to first of all call Sharp then we're going to call the zenquist API and then we're going to call fetch so that we can use node fetch to then color API so we're going to do these import statements at the top now actually I'll just do it at the top just because it'll be easier to see so cut sharp equals require and we'll call Sharp const API URL from Zen quotes So https https present quotes dot IO API random and that's the API endpoint to call Zen quotes's random API generator and then const fetch equals require node fetch all right so now we're going to create an async function called get random quote we're going to call this API URL here so API URL and then we'll start to create our function so we're going to create two variables so first one is going to say like what is and that's going to say let quote text be this variable and then this other one is going to be author name here and then that's going to be let quote author so it's gonna be the two variables that will change as we get data back so we want to validate response to the API in this step and we're going to do const response equals await fetch API URL which we'll just copy from there to do our quote data equals away response dot Json so we're going to take this response we're going to turn it into Json data and then put that into a quote data variable and then we'll do console.log quote data to log that out and we can actually try to see if we can call this right now so what we actually are going to change is this so I'm just going to call this API URL input just to differentiate API URL from there and there so then we're going to call get random quote with that API and then we'll see if we can restart this so as you can see we are able to get this data back which is really cool so I want to open up screen brush and just show you how this is working because this is also really helpful to think about when you call apis what is actually happening so when we have this data so this is going to be the quote data so that's quote text right there then the quote author is going to be right here and it actually creates this block quote you know kind of HTML block for you but we're not actually going to use that we're going to take these variables and use them in our own way but what we're doing is that you know we're calling this index.js file and then we're going to use fetch to use that API URL input so that's that you know http Zen quotes you know random API and that's when we're fetching the data out of that endpoint and that's going to they have their own function that's going to generate from their list of quote a random one for us to use and then we take basically that response we turn it into this Json structure which you see you know in this so that's that Json and that's where we'd be able to take you know dot Q or dot a and then use those in our in our graphic which you'll see and then the this is a specific input so this is just you know run this function with this specific input so then we take this which is the API URL and this is that API endpoint so it takes given this API input endpoint input um API endpoint input there we go we're able to then fetch that and then create a response and then map that into some Json that then we can use in our application we can actually run this a bunch of times and we'll get different quotes so that was one by Aristotle this is another one another one another one here we'll do one more so what's really cool about this is that it's running this random API generator and that's how we're able to validate that our get random quote function is actually working which is great so now we're going to keep plugging along with actually some of the image generation components as well but now that we have this function setup we're able to call that API endpoint and it's working now we're going to start working on some of the construction of the image and also validating the response out of the API so what we're going to do is we're going to then update these quote text and quote author variables and we're going to say quote text equals quote data that first object dot Q so that's going to be in the first item right this first object get the Q variable and then also quote author equals and we're going to do that same thing except make that a and we can also try logging these variables just to make sure that they are in fact working because that'll be important for us to see so if we do this we do refresh so I see that so I see a quote which is that and then the author is that we'll do another one so yeah so it seems like this is what we're doing so this is going to be really easy to to see where of course we have this Json data structure but now we have you know something that kind of looks almost like a graphic right you have your quote and then you have your author so this all works so we can get rid of those console log statements and we can proceed here so now we're going to construct our image so this is going to be the image Construction and these are going to be the quote elements and let us just make sure these these elements are a little bit better indented here okay cool so now under the image construction we're going to do a variable for width it's going to be seven feet I'm gonna make that a little bit smaller than the graphic and then you do const text equals quote text so the text for the graphic is going to be that same variable there and then we're going to do const words equals split we're going to add a space there and then we're going to be creating these line breaks so something that I found that is really important for this quote was that when I was generating these initially this long string oh this is going to error out um I'm actually going to not call anything so and then it should uh yeah it might just have an error but that's because I don't have anything there so what um what I originally was having was when I had that string running or actually we can comment this out uh comment that out but keep that running see if that runs yeah so where was this yep so in the quote so you have these lists of words so it would basically take the string and it would stretch it across the length of the graphic off of the um the left and the right so what we need to do is we need to be able to map a list of these words um basically in lines and then go to the next line and then map a few words and then go to the next line so that's where we're going to be adding some variables here so when we do const line break equals four and then let new text we're going to be constructing this sort of string manipulation so that as it goes to forwards then it breaks then it goes to forwards and then it breaks goes forwards and it breaks so that's going to be a way where we take basically this variable which we'll soon call T span element and then we're going to do basically this for loop on the number of words and the length of that and then increment over it and then create these line breaks as we go along so this was sort of a clever way in which I was able to you know put the text in the middle of the graphic create these lines and then iterate over that so that it's never more than four words on each line and then it'll you know cut out after a certain time so you'll see how we'll do that with this upcoming for loop with basically an if this then run this otherwise run this type logic so we're going to Define some tspan elements with four words each so what we'll do is we'll do let T span elements equal an empty string then we'll do four and we'll do let as I equals zero I is less than words dot length and then as I increments upwards we're then going to say the new text plus equal words I so as I is incrementing we'll add a space and then if we'll do I plus one divisible by line break line break equals equals zero we'll then make tspan element with t span elements plus equal and then we'll do a back Tick T span x equals and then this is where we're going to be adjusting the width here so I'm actually going to like make this like much smaller just because like we don't really need this right now I just wanna prioritize this for the screen so tspan and X is going to equal this variable of width divided by 2 d y equals 1.2 em and then we'll add the new text in there and then we'll cut out the tspan element there and then backticks is there and then semicolon is there so then after that this new text is going to equal this empty string there and then we pass that back and then we say if new text does not equal it's empty string then tspan elements plus equals tspan and we're going to basically call the same thing again so I'm just going to copy that down here and it's going to be tspan x equals width divided by two Dy 1.2 em new text and then tspan there so that's going to be that construction and then we're going to console log the tspan elements just to see if we're getting this correct so let's just give this a save and then let's see how this works so I'm seeing that there's this tspan a person without a then that ends and the new one sense of humor is then like a wagon without Spring stilted by every Pebble in the road so that's great so this seems like this is all of the quote text elements that are all mapped in these tspan implements and then it's going to be every four word so remembering that you are a going to die is the best way I this is all basically four letter words trap of thinking you have something to lose and then confidence comes from Crossing thresholds and this is just one so this is really important because when you have a list of four you then need to make sure that any remaining words still go on that new line so that's when you're able to see in this for Loop here we want to make sure that as there's no more basically line breaks as in there's no more words that map to B4 we just add that new element basically the new text and then we add our uh basically these CSPAN elements but it's only going to include one last one which is all the words that are remaining so that works out great so this is working which is awesome and then we're going to start working on the SVG image next up we're going to be creating the construction of the SVG so right after console logging those tspin elements we are going to work on I'm going to just make sure that this is all habbed correctly so the construct PT so we'll do cons SVG image equals it will do backticks here so this is how we will do the mapping around the image so this is going to be SVG with and I'm actually going to copy some of this stuff just to make it a little bit easier to see mapped out so we're going to have this SVG with this width that's the same width that we mentioned up here with a height which we have up there and then we're going to copy these styles that we created here so the way that this is going to work is that we have basically when you have an SVG you can include Styles inside of this image kind of like a div and it's going to have these different elements so it's going to have a title which is going to have a fill it'll have a font size and it'll be bold we have this author Style we then have a footer Style and the author is going to be this size it's going to be bold as well with some padding and then the footer which is where we give an accreditation then we say it's you know it's by us and then quotes so that's going to have a different font size it's also bold different fill and it's going to be in the middle and that's how we'll be mapping out all the styles so next we're going to do is we're going to now have the elements of the actual image so right after Style and I'm going to just move this over a little bit there so then we're gonna have a circle SVG so the circle SVG is going to have a quote in there so this is the fill and you'll see here that this is where we'll we'll have a circle at the top of the screen then we're going to have some text for the actual quote so it's going to look like this but it'll have text and I'm going to just map over this just so that you can see it so there's going to be the circle and the circle has this positioning we then have this text which I will just span over so you can see so the text is going to be in the middle and it's going to be a quote like a single quote and it's going to have this font size of now this is going to be pretty big and it's going to have fun family and Veranda or verdana and then the fill is white so it's going to be this quote over this image and then that's how that's going to be working next up we're going to be working on the tspan elements being mapped along with the quote author so that's going to be this separate section here which we will put here and what we're going to do is I will just span to show you so we have this this G element and this is also um going to be some text here so the text is coming from there and what we do is we have this rectangle we have a width and that's where we're going to be putting the text inside of this rectangle and then the text ID is a little you know the last line of code so basically we'll have this width and then the last line of quote equals that all the texts in the middle and then the tspan elements go in there and then the quote author is going to go right after that then we're going to add a little bit more text here which you'll see in a second so right after this G group we're going to add a little bit more text here I'm just going to make the formatting of this just a little bit easier see so then the text for the footer is going to be that footer Styles so there's going to be some text it's going to be the width with the Y can actually move this up just to make it a little bit easier to see so in terms of this text we have the width we have the height and footer Styles is there and then we could say developed by and you could put your you know social media handle or your name and then we're just giving this accreditation to send quotes because they're providing this API for free so they say to include that in the graphic which we're doing so we can stay in compliance with them so then we're going to be closing out this SVG so well then say SVG is closed that is the backtick and the colon so that's quite a lot just for that SVG but now we're going to have an image with a circle with a quote we're going to have those CSPAN elements the quote spanning across the screen down we'll have the quote author and then we'll have this footer with our name and the Zen quotes API credit two so now we want to do is we want to add those backgrounds in a random way so what we're going to do is we're going to say const or actually just say that add background images for the SVG creation so now when we do cons background images equals there's going to be an array and we're going to copy basically all of the paths in our backgrounds folder so that's what these are so these are going to be the different files and those we just have four of them so you'll see here that that's where they're coming from and that all looks good then we're going to choose a random image here I'm just going to make this a little bit there if so now when we want to select a random one we'll do const random index so pulling a random index from this list we're going to use the math dot floor and then we'll do math dot random number times background images dot length and this is an easy way to inject some Randomness into our function right here and then we'll do const selected background image equals background images random index there we go so now the selected background image is going to be one that we pick out of the background images with this random index so we get basically this random number for all these different backgrounds and then we're going to then make that the index that we select for our background images and then that will be the selected background so if you have more uh you know more backgrounds that you include here then this number will have more options to choose more randomly so you'll probably get you know more selections obviously from choosing that so then we're going to do some composition so we're going to composite this image together so that's gonna be the next step we'll do const time stamp equals new date and this is a way that we can get the actual date timestamp local date string which is that method and then we'll do replace and then there's this special set of characters that help to just make it all you know basically like checking for these characters and then if that's there then just insert that which is an empty string which you'll see why that's relevant in a little bit I'm going to do const SVG buffer equals and then we're going to use buffer as a image transformation Library this will be from SVG image and that SVG image is coming from this SVG that we're creating up there then we'll do const image equals await and then we're going to use that short package if you remember from earlier we imported that that's from there so now we're actually going to use sharp to generate this image so we'll do Sharp selected background image and then we're going to do composite and then there is this input which is SVG buffer which was that variable that we just called on line 97 there is a top of zero there is a left of zero and we add some commas then we're going to do this command called to file we're going to say finals I'm going to say quote card quote card underscore dollar sign timestamp PNG and then we have closing bracket and then we call our API so we're going to see if hopefully this all runs and works correctly so let's see if that actually does happen so we'll do running and seems like we got something so let's see if this worked all right so let me just close this out for a second and so you'll see here that this is um this is basically trying to create this time stamp string and this is five uh five five twenty twenty three so this is May 5th 2023 so it's just including the the date um so this is a quote by Abraham Lincoln and that was just generated randomly so then let us try to do this again so we'll try to run it one more time and I think we probably want to have a different time stamp I do Wonder though how we can make this just a little bit differently so I think that's just because it's date so let's just try to change it to local string so two local string replace and we'll save that and then we'll try to run that again yeah there we go so now this is doing it also with time so this is the date and then also uh timestamp as well so now we have this different image and this is you know now Thomas Edison's this is a different quote we'll try to run this again and we'll get a different one we'll run this again we'll get a different one we'll run this again we'll get a different one we'll run this again and we'll get a different one and this is really cool because now we're able to just make all of these super super super quickly JRR Tolkien we'll keep running here hamster Anderson and this is awesome so this is creating this you know this choosing a random background it's taking this quote it's mapping everything and it's making it all in these graphics and these are all created through node.js so pretty cool and we'll just maybe let's just do one more for good measure cool and we'll leave on a good note with Eleanor Roosevelt so happiness is not a goal it's a byproduct of a life well lived very well said so this is great so we have our script now and this is running this is perfect so now we're gonna do is we are going to go back to our code which is here we are going to 100 save this but it's pretty much already Auto saving anyway and we'll just give a look over our code everything looks great and yeah now we're going to be able to take this and then put this on AWS Lambda with a little bit of refactoring here and there and then we'll be able to work with our front end to call our Lambda through appsync and then generate this image in a serverless Lambda server and then get that back in the front end but instead of it being an image we're going to do something called a basic C4 encoded string which you'll see in a little bit but that's going to be a different way in which we actually get the image generated not as a file but as a string so it's going to be like a a ton of characters and that's actually how we will be able to map our our image to a string and then decode that in the front end now that we have our script to run and create our image something that we can now do is go back to the front end so in our application we're going to want to set up our Cloud environment and really set up all the services that we're going to be using and leveraging in AWS to then run that script and we're going to have a series of frontend listeners uh basically using our API endpoint to then listen for when we're generating the quote send a response to get the quote quote card and then get that response back and then show that in the front end so what we're going to do is we're going to check out the AWS amplify documentation so the amplify CLI is a very powerful CLI for deploying AWS resources for you know really a full stack software project and if you don't already have this installed I'm just assuming here but you do npm install you know G flag at AWS amplify.tli you can also use a curl command which looks like this and then also if you are on Windows it would look something like this and then you'd be able to install it on any of your devices but since we have already done this uh we already have the CLI installed we don't have to do the step so the next step if you haven't already done this is you should configure and amplify IAM user or really just an IM user for your amplify CLI so that amplify service can build the services that you want in your cloudformation stack and update your stack for you so when you add an API when you add a Lambda when you add storage when you add a database model you want to be able to have an IM user that can update or modify or delete resources in the cloud formation stack so I've already created an amplify I am user with the administer access amplify specifications but if you haven't you use amplify configure you'll it'll then walk you through all these processes but you'll create the name and then you'll set the permissions so they have this administer access amplify policy name which is a managed policy you attach that and then you're going to get a key value pair to then go to security credentials where you can get your access key and then you'll save that to your AWS credentials file locally so when you can retrieve your access Keys that's where you're going to have your access key in your secret access key and that's what will configure access for your application or for the CLI to be able to work with AWS so you'd be entering that in and then you'd be able to have that user and then when you run amplify init or amplify initialize that's where you'll be able to use this AWS profile to then launch your project or launch the cloudformation stack for your project so what we're going to do is we're going to go back here we're going to open up the terminal and I did this with the control and then the tilde button and what we're going to do is we're going to do amplify init and we're going to do that because we haven't already set up amplify in our project yet we are we're just starting out here so let's amplify net and I'll pull this up so it's recommended to run this from the root of your project which we which we are doing here because that's the root of this project and we're going to call this inspo quote gen or should we call that maybe in inspiration quotes yeah we'll call it inspirational quotes So then what's really great about the cli2 is that it already is able to know quite a bit about my project because it's checking out what I have so it knows that the environment is Dev I'm in Visual Studio code so this is actually the default environment but it knows that this is what we're going to want just to start out with um it knows that this is the JavaScript which is the appetite and we're using react which we are and then there's going to be a source directory that it's going to create with this AWS exports file and then these are going to be the builds commands so this all sounds great we'll say yes and then we're going to use this AWS profile as opposed to the access key so I'm going to choose the AWS profile and I'm going to choose the role that I have already set up for my amplify configuration to my AWS account so I'm going to press that and then it's going to start deploying these resources into AWS so it's going to start creating this cloud formation stack and then it's going to start deploying this to the cloud so I'm going to pause the recording now and then I'll restart it when the cloudformation stack is all set up in AWS now that our cloud formation stack has been pushed to AWS we just received uh some new things so let's go through our application and see what AWS and amplify provided for us so one of the first things that we'll see is a new directory in our route which is called amplify if we open this up there is a config with some local AWS info and some project info that's just scoped about the project also the current cloud backend so this is going to be the updates that you make locally and then it's going to compare the current stack local with the AWS stack in the cloud and then when you are adding a resource when you're updating a resource it'll compare the cloud version with your local version and then that is what actually is going to enable the ability for cloudformation to either be updated modified removing a resource adding resource those types of actions and then in the back end that's actually what your application is going to be doing so this is where you have your root cloud formation stack and you know you'd have all of these different you know variables and these different you know roles and that's how you're actually going to be able to deploy your root stack for AWS amplify CLI and then as you add resources you'll maybe see under backend API or auth or storage or other types of resources as well so that's the amplify folder in a nutshell and that's pretty much what we'll do so you won't really have to worry about doing anything in this we're using the CLI and it will be programmatically adding or updating or changing what's in this folder but we won't have to really worry any very much about that one thing that will be of important to note is that when we have SRC we have this AWS exports.js file and that's going to be how AWS sees our resources so this file is just a Json object of key value pairs between a service identifier and what that service is so when you call an API endpoint you need to know what the endpoint you know ID is for auth what's the auth default mode those types of things so when we have our AWS exports file we'll be able to then call that from the root of our application and then we'll be able to access amplify it and then you know appsync and Cognito and your storage and the databases and all these other types of calls to the AWS services so why don't we do that right now so we're going to add basically a few lines of code and we're also going to install some packages so when we are working with our next app so when we want to use JavaScript so they have different libraries and they also have a getting started here so under next.js if we go to prerequisite these are the steps that we have already taken and we've already done if I configure set up this so this is when you set up you know next application which is what we have already done we've already initialized amplify and we've already configured all of these things so we're going to take this import script so this is going to be installing the AWS amplify package that Addis amplify UI react so we're going to take this we're going to copy it I'm going to go back to our Repository we'll save that we'll do npm install address amplify like that we'll wait for that to install once the amplify packages are installed in our application we're then going to go back to the app .tsx files so this lives under pages there's this underscore app.tx TSX file and what we're going to be doing is we're going to be adding a few lines of code so under app props I'm going to add some AWS Imports so we're going to install or import what was just installed so the amplify API off and with SSR context and then AWS exports which is going to be this file that lives in the SRC file so is this was just generated for us so then we're going to then configure this and we actually probably don't need these elements so we can just delete those and then we're going to be able to configure amplify to then serve the whole application so this is really great because we'll be able to call our services that we add to the stack and you know have API and call IAM and all those those good things that we're going to need for our application so give this a save and the app will probably um reconfigure we actually check to make sure that it's not erroring give this a quick refresh and there's no errors so that's great that means that we are good so far so now we're going to do is we are going to work on some of the steps for building out our Cloud infrastructure so we've configured this locally now let's check out what's happening in AWS so you can go to the amplify service if you search for amplify in the search bar I have this as one of my pinned services but you'll need to go to the amplify service in the console in the Management console on the web and then you should see your app right here so I'm going to click on this and it's immediately going to pull up a bunch of data about our stack which is really great because when we start adding hosting we'll be able to configure the CI CD pipeline here and then we'll also see the back end resources that were deployed in our stack and we can see that this was deployed a little while ago so there isn't any resources associated with it yet other than just the amplify project that was configured for it and then we also have some general and some amplify Studio settings if we want to enable those we're not going to get into that right now but we could if we wanted to so now what we want to do is we want to add an API to our application so we'll switch back to our application and we will start adding the schema and API and the Lambda function for that as well so to add our API what we're going to do is we're going to open up our tab we'll just press clear or what we can do is since we just configured our application we actually have the suggestion of amplify add API so when you add services using the amplify framework it's literally as easy as amplify adds something so we do amplify add API and I'm going to but I'm actually going to clear this so I can make it a little bit bigger actually might be too big that should be big enough okay so we'll do amplify add API and then we're going to choose graphql and for authorization modes uh we're gonna actually need to configure certain aspects of the flow so we're actually going to enter here and we want iam and configure additional auth types uh we can say yes so it might be good to also configure an API key in case we you know end up needing that if we wanted to do something in appsync uh there's different you know options but you could also you know utilize Cognito as a user pool also open ID connect if you wanted to connect to a thirdparty provider and then also Lambda if you wanted to do a Lambda authorizer or Lambda authenticated provider so we're just going to click API key and a description so um API key for inspirational quote generator and we'll just use the default which is seven for days API key should expire and that looks about right so we're going to press continue and when you are configuring a schema this is um it'll give you a couple different options that you can pick from but I do think that since we're going to be configuring our own custom schema anyway it makes sense to just say single object with Fields but this is also sometimes helpful if you want to see other types of configurations but we'll do single object with this and then you want to edit your schema now yes but we'll see that this is already compiled correctly so it'll already Auto open up into our window here in vs code so this is great and right away we already see that we can configure some scalar types and then we'll be able to add scalar types to our scalar values which is right here and then we'll be ready to rock so first of all we can just cancel out this input amplify because we don't need it this is configuring an auth rule of global access for everything so we want to turn that off and make sure that if we go into production that this isn't on and I do also just want to unpack what the iam was when we have I am so something that is going to be important is for us to add authentication so when we are using IAM enabling public access to our API endpoint and we're going to need to allow uh basically access to use this API because we're going to give it an auth directive so we're going to configure some schema and then we'll add the auth directives on top of that so when we go to the backend folder and then in schema we are going to configure a couple of things so the first thing that we're going to create is a query so we're going to actually delete all of this and we're going to start from the top so there's a few things that we need so we need a query we need a way to speak to Lambda we need some sort of public data and for this query we're going to need a Lambda function so we know that we need these elements in our database so what are we going to do so we're going to do type query we're then going to give this basically a name so we're going to say generate a quote and then that's going to have an input of AWS Json and the input is a string type and we're going to have an auth directive with rules and this is going to allow Public Access with a provider of IEM and then that's it for the auth directives and then we're going to call a Lambda function so its name is going to be inspo quote in Spoke quote Lambda and then we're going to attach the Cloud Branch name to that so that we're going to be able to append Dev so it's going to be inspo quote Lambda hyphen Dev and then that's going to allow us to work from many different Cloud backends as we continue moving along and if you ever wanted to have you know like a test Cloud environment or a production Cloud environment this function would still be able to be called but through those different branches so it's a really great way to allow accessibility across your code base and also call functions you know at different stages of your Cloud build the next thing that we're going to configure is the public data so we need a public data object to be able to see how many quotes are being generated every time that you know someone runs a quote we want to be able to track how many quotes were generated for the entire application so I'm going to say type quote app test we're going to do at modal and this is going to configure a dynamodb table for this type and then we do off we'll say rules and we'll give it some auth rules we're going to say that we're going to allow Public Access with a provider of IM with the operations to read without anything else so we just want people to be able to read this value the value of this database point but we don't want them to be able to you know update or delete or create new objects we're just going to create one ourselves so this is going to have an ID ID and this is going to be the partition key slash primary key we do query name that's going to be a string and we're going to have quotes generated and that's going to be an integer we're then going to have a created at string and also an updated at string and the bang Operator just means that it's a mandatory field and something that we're going to do is on this query name we're going to enable a global secondary index or GSI and what that means is that usually when you have a database you could just find the identifier of that item in the database and then you'd be able to pull that but one of the really great benefits of dynamodb with nosql is that we're able to configure secondary indexes to query our data more effectively so if you wanted to query by a unique name in another field such as quotes generated or query name you'd be able to configure that so what we'll do is we'll say index we'll then say name and we're going to give it quote query name and then query field quote query name so this will allow us to find this object based upon just querying for quote query name so that's great and can actually just remove core app and we'll just say core app data cool and we'll just name that to be consistent so that should be pretty good in terms of this now something that we know we're going to need is auth rules so we're going to temporarily just hide that and then we're also temporarily going to hide this because we have not set up any sort of authentication yet so we're going to save this now what we're going to do is we're going to do amplify add off so this is how we're going to configure authentication for our application so with the default configuration we'll press enter so as we are setting this up we are going to select a username for how users will sign in and you want to configure advanced settings we're going to say yes so the only required option that we want to really focus on just right now is for email you could configure more options if you wanted to but we're not going to focus on that and we're going to not worry about any of these right now but what we will do is we'll do amplify update off and then we're going to walk through all the auth configurations and how do you want users to sign up uh we want to use user sign up signing connected with IAM controls there's really only you know two options so this is the one that we're going to select and this is the major one that we want to focus on do you want to allow unauthenticated logins provide scope information so you can control via AWS Im so this is very very important and this is actually referenced in the documentation so I will pull that up in one second so in the Authentication modules I'm going to focus on this so this is under the authorization modes for a graphql API with appsync so when we are using AWS IEM to access a public API or the access public endpoint we need to make sure that unauthenticated logins are enabled and this is where we're doing that update auth command to then walk through all the auth configurations so this is really important because this allows IAM to then do a handshake with the API and do basically public authentication if required so that's a really important aspect of the authentication configuration that we need so we're going to say yes for that and you do want to enable thirdparty authentication providers in your identity pool we can say no because we're not going to configure anything like Google or you know sign in with Facebook or those other things and you want to add a user pool group uh we can say no to this and do you need an admin queries API you can say no multifactor authentication we can say that that's off but this is a great option if you wanted to enable this for users in your application and user based forget my password um yeah we can just keep that as enabled as the default and then the email verification subject we will just keep that basically as the default so enter enter and then we'll do enter and then default is for 30 days and you want to specify user attributes because this the default is no and you want to enable any of the following capabilities I will just press enter and you know what to use and oauth flow we could say notes we're not using anything with oauth and you want to configure Lambda triggers for cognito say no so now if we do amplify status this is a great feature so we can see all the aspects of our cloud formation stack and waiting so these are create option operations for a new API and a new authentication with Cognito setup so this is great now what's left is creating this amplify add function to then create the Lambda function and that is how we're going to be running the function to generate a quote so this is how this is going to happen serverlessly now to add this Lambda function that we are going to be calling in our query we can easily add a Lambda function to our project with amplify add function and we are going to configure Lambda function you can also deploy Lambda layers but we're just going to deploy a Lambda function here and we're going to give it a name so we're going to call it inspo quote Lambda and this is going to be a node.js environment but you could also configure it with net go Java or python and we can configure a whole bunch of different options such as appsync graphical API we can do crowd function for Dynamo we could just have a graphql Lambda authorizer Lambda Trigger or serverless Express function that's also configured through API Gateway but we are just going to use the hello world template and do you want to configure advanced settings we are going to just say no for now and you want to edit the local Lambda function now we'll say yes and then we'll press enter all right so now if we open up our stack do amplify status of what we are going to be pushing to the cloud so right now we have an API we have auth and we have function so what we want to be able to do is run these to the cloud and then we can start to configure some of the fancy stuff so right now we're going to be able to create a integration between our API and our Lambda function and then we're what we're going to do is we're going to then create a relationship between that Lambda function and the dynamodu table that gets created because every time that this function runs successfully we want to configure this quote app data a specific object in this data table we're going to want to increment the quote generated by plus one so that's where we're going to configure resource access so that Lambda can speak to this dynamodb table but these resources need to be created and then live in AWS before we can start dynamically calling these programmatically so what we're going to do is we are going to run amplify push and that is what is going to take these create operations and then push this right to the cloud so it's going to ask are you sure you want to continue we're going to say yes to deploy to our current environment Dev and you want to generate code for your newly created graphical API we're going to say yes and what we want to do is we are going to choose typescript we're going to enter the file name pattern which we can just use as the default and then you want to generate all possible graph cooperations queries mutation subscriptions this is probably the single best feature of appsync like hands down once you see this you are never going to want to configure your graphical schemas manually ever again I guarantee you so get ready for that so we're going to say yes and maximum statement death uh we don't really have to worry about that because our data isn't deeply nested so we can just say to for now and enter the file name for the generated code that's just going to be under the source folder api.ts and that's fine so let's just press enter and now it is going to start deploying all these resources to the cloud using our cloud formation stack that we have generated so you'll see that there is a update in progress around the Lambda which is our function there is going to be the auth resource that we created and it's going to be deploying again that API that auth and that function so those are sort of those three different resources that we have configured for our AWS application so we'll wait for these to create and I'll pick up the recording When the stack is finished creating these resources and updating to AWS so as soon as the cloud formation stack completes you'll see this check mark and then it'll say code successfully was generated and saved to file SRC api.ts so if we open this up we'll see that we now have this API file with data that maps to our graphql schema so that's great and we'll also see this graphql endpoint and also this API key so this is this endpoint that we'll be able to use and then this would be an API key that's generated by AWS for us to use our API and we'll also see that this graphql Transformer was generated and to actually show you one of the best aspects of using graphql with appsync is that in the source folder you'll see that there is now this graphql folder directory and then we'll see that there's these different TS files so we go to mutations and what's awesome is that this was all autogenerated by appsync so we have now this quote app data mutation we have this update quote app data mutation and all of these are scoped to the conditions that we set up in our API so the same thing with query so now we have this generate a quote we have this list quote app data we have quotes query name which was that Global secondary index that we configured and you have all this data which is really great and then also for subscriptions if we wanted to have websockets we could have oncreate quote app data as a subscription so that's where all of these different elements were created and this is all by appsync and on the clouds that will be able to actually have these queries and mutations and subscriptions configurable in our frontend application without needing to worry about any sort of back end um configurations it's all done for us which is really really great so now what we're going to do is we are going to open up our schema and we're going to now run amplify status so this is going to give us perspective on what resources are currently generated in the cloud for us so when we run amplify status this gives us a current understanding of the stack and what is deployed and what is local and in changing so we have our API we have our author we have our function and there's no current changes right now and that makes sense because we just committed this to AWS and pushed this to our AWS account so now in our schema we have this query that's attached to this function we have an auth directive we have auth directive and now we want to do is we want to add these auth directives back into our schema we commented them out earlier now we're going to add them so now that we have basically our authentication system set up and we know this because we have auth a part of this we can now add auth directives to our API so that we can prevent certain users from accessing or running certain features and what we want to be able to do is for example allow public access to read data that we'll create we'll create an object in here and then we'll want users to be able to find this specific object and then query from it and same thing with this query to generate a quote we want to be able to allow users to publicly run this Lambda function but using the IAM as a provider so what we're going to do is we're going to uncomment those changes which we've done we're then going to do amplify push and then we're going to say continue we're going to say yes and we'll see here that this is an update to our API but it's not updating anything else it's just updating this API and that's really great about the amplify framework is that and we'll just say yes to all of these because we're going to update our schema so what's really great about amplify working with cloud formation is that you're only going to update the resources in the stack that need to be updated everything else will stay the same and it's managing all of this for you so that you don't have to worry about you know did I need to update this or do I need to configure this it's all going to be doing this for you in the cloud so I'm going to pause the recording and then I'll resume it when the stack finishes updating now that our graphql operations have successfully generated been saved to the source graphical folder and we've also had the of our api.ts file updated we can actually now check this out and see if it did that so for queries we have some more information here and this is all going to show that these were updated so there and then for mutations uh those files were updated there and those were generated uh recently as well so now that we have these configured something that we're going to want to do is now check out our amplify project so when we go back to the Management console and we do a refresh here now we see that we have API we have authentication we have functions so before we didn't have any of these resources created and now we have three of them which is great so if we click on API let me scroll down we now see that we have some data sources associated with our inspirational quotes Dev API endpoint with graphql so what we're going to be creating is this public data object in nosql that we're then going to query from the front end and every time that a quote is generated we're going to be incrementing that value by plus one but it's not going to be us it's going to be Lambda that's doing that so we're going to go to our quote app data table and this is going to dynamically find this table in our amplify so it's amplify project and then dynamodb resource and then when we explore table items we're then going to be able to open this up we're then going to create an item and what we're then going to do is we're going to start configuring our nosql object and there's two options when writing items to dynamodb from the Management console you can put it with basically key value pairs as a form or you can write it as Json personally I think that writing the form is easier so let's use this and then I'll show you how this Json object actually looks like when it's finished so when we want to have our ID so we have the ID as part of the partition key so this is how we're initially able to query objects in a nosql dynamodb table so given this ID would be able to find it so I generated this string now what we're going to do is we'll go back to our schema here so we see here that when we have quote app data so this is going to be the same as quote app data there with series of characters and then the dev Branch so we have a query name we have a quotes generated we have a created at and we have an updated ad so those are going to be the variables that we can have associated with this dynamodb object so this is the same as our schema so we're going to want to have that the same so you could just copy this go back here we're going to do a string do query name now we're just going to match this so this is an integer a real number so quotes generated we'll go back here we're going to do number quotes generated and then created at and updated at are going to both Be Strings so we create another string here created that and one more string and that's going to be updated at sweet so under a query name we're going to call this live so paste in live the courts generated that value is set at zero and that's because we're going to be starting from zero and then created at and updated at so those are going to be AWS date timestamp and if you don't already know how to do this I will help you write a script for that so that we can generate it all right so to make a script that can get us created at and updated at I think this will be a good utility for you to have so if you ever need to generate uh updated out or created at timestamps you'll be able to then configure a script to then run that so anytime that you ever you know need to get those types of values you'd be able to have a script that generates it yourself so we're going to open up another code sandbox Cloud environment this is specifically node.js same as we did before but this is a different one and we're going to call this AWS date time stamp generator cool so now that we have this we're going to remove this save that and we're going to open up a terminal here we're going to clear this out and something we're going to do is we're going to install moment so moment is a package for working with timestamps and time signatures so once we've added that with npm install we'll see that it's now part of our dependencies here now when we run this we're going to import moment so we'll do const moment equals require moment next we will create a variable for our AWS date timestamp so we'll do const AWS date time equals moment so we'll use that moment Library we're going to do UTC because we want universal time and then we're going to do format and this is where we're able to use that moment library to create the date and the exact format format that we want so we'll do y y y for year and we'll do months months then we'll do day day tea for time and then we do our hour minute minute second second and then millisecond and then Z in bracket and then close out that string and then we'll print out our AWS date time stamp right there and we will try to we'll save this and then we will run it so run this cool so we're able to get our value right here so this is where we'd be able to plug that in to our Dynamo and you can also see here if we if we run this again the number is getting bigger each time so it's counting upwards so that's how we know that it's working so you can use this utility for and I'll just make this a little bit bigger so you can see the full script so you can use this utility any time that you want to get an AWS date time stamp and yeah use this for any project that you need so this will be a good script to just have you know in code sandbox and you can run this you know whenever you need to get this type of string so we'll go back here we'll add this value here and we'll add this value here now that we have all the values a part of our item we can go and create this item and now it is an item that lives in our database and if we open up this structure so to give you a little bit of perspective about what we just created so this is what a dynamodb Json object will look like so it is a little bit counterintuitive in terms of how you might think about the structure happening so instead of these values being directly related to the the scalar type or the item that's associated with the API it'll basically be its own object and then it will be S for string or n for number and these will be mainly the types of types that you'll be configuring so just look out for you know strings or numbers those are usually the the two main ones that we'll be working with so those are the values so we had the ID which was our unique value we had the string that we created with the node.js script we have this query name which is live which where we configured a global secondary index for we have zero for the quotes generated and then we have again this timestamp that we generated from the script so this looks great and now we have an item in our database that we can work from so if we wanted to go back to our front end that we have here so instead of just being hardcoded with zero we're going to want to hydrate this value with a query from our API endpoint so let's go back to our code and let's work on a way to generate a function that can call that value in Dynamo now that we've created it so now that we've written quite a bit of code this is a good time for us to get into the habit of pushing all of these changes that we've made to our GitHub repository so you'll see here that we have quite a lot of files that have been created modified updated and now we're going to say that we add API plus Lambda Plus auth and we'll also review if we added any frontend changes but mainly we've been doing lots of Cloud backend things so we're just at we added API we added Lambda we added off and we added a graphql so that's the queries mutations and subscriptions and the api.ts file so this should be all good so we'll Commit This to Main with GitHub desktop we'll push to origin and this is then good because now we know that we have our code as a backup in case we ever need to revert back to anything that we did so now what we want to do is we want to go to our index.ts file and I'm actually going to just comment this out just so that we can get rid of that typescript error so now we want to do is we want to change this number of quotes to be receiving data from our dynamodb table so what we're going to do is we are going to first of all check out and I can actually move this here so that this is full screen so what we're doing is this is always going to be a number we want to be able to dynamically change the set number of quotes value to what is rendered out from dynamodb so we're going to use appsync and query our public data object that we just created and then use that data to then set the number of quotes so that when we call this value it's going to be the number that's coming from AWS instead of this locally stored value in state right off the bat since we are going to be using typescript in our project which we are we are going to start to think about our data types with interfaces so an interface is just a way where we can explain throughout our code base what are the different data types that might be in an object so when we're getting data from dynamodb we might need to Define what the ID would be or the quotes generated which would be a number for example so we need to just Define those so that typescript won't be confused as to what we're doing so we're going to say that we need to create an interface for our Dynamo DB object and also something we're going to need to do is we need to create a type guard for our fetch function so we're going to need a type guard to then check when we query for the data and Dynamo we're going to need to make sure that the response is actually the response that we would be expecting and in the format that it's expecting so how we're going to do this is we're going to first create this interface for our update quote info data so we'll do interface date quote info data and then we're basically going to take all of our schema from here and we're just going to copy that over with a few exceptions so we want this we don't want that Global secondary index because that's a dynamodb thing but we are going to need these things so now what we need is we're going to turn this into a string and we're going to add string to almost all of these except for the quotes generated because that's a number so in here we'll do number and then we'll give that a save and then this is going to Define that data type for the data that we're going to fetch from dynamodp now I think it is helpful also just to think about the function that we're going to write so we're going to just move over to that for a quick second so we're going to need a function function to fetch the object which is quote generated cool so what we're first going to need to do is this is going to be an async function so we're putting that inside of the functional component but before the return statement so we're going to do const update quote info equals async we'll make this an arrow function and just a good habit of getting into is using try catches when we are running functions so a try catch is basically hey run this code otherwise if there's an error in this then log that error and basically console log it or do some action so what we want to really do is we're going to say error getting quote data and then error so what we do want to be able to do is fetch the data out of dynamodb so we're going to expect a response so we'll do const response equals await we'll do API do graphql and then we're going to take that type that we got from here and then throw that in there we'll close out the arrow bracket we're going to use parentheses curly bracket and then we're going to create a way in which we can API so the API is module we can get out of the AWS amplify Library so we can import that up there and then now it's a part of our Imports now if you want to use appsync with those queries that we generated so we have this query here so we're going to be fetching this quote query name so this was already generated by appsync which is awesome so we're going to be using this query to then get that data so it's already configured for us but this is what it looks like so if we want to do use the api.graphql method to call appsync data using that query we'll do query we're going to do quotes query name which was our Global secondary index and I see that it's already Auto populating this so we're going to press enter and how this will look at the top is it's going to say import query name from graphical queries which is what the file that we were just in so that's great now we can do query for the auth method if you remember from before when we allowed IAM we're going to be defining that as the auth mode use osmode we'll do AWS Instagram plan there's already methods that it will see so I will just choose AWS IM then under variables because this is what we're going to send into this query the query name that we want to fetch for is live because that's the item that we created in Dynamo so that all looks good and now for our response we could just do console log response equals response just because we want to test if we're actually able to get this object out of dynamodb so we can do that just to test it really quickly and make sure that we're on the right path and we actually need to be able to invoke this function so how are we going to do this we will use a hook called use effect so use effect that's going to be Arrow function and then we're going to take that function that we just wrote we'll put that in there and then an important aspect of use effect is and I'll just import this from react from the top so we'll import that so now it'll do react use effect and use state so those two hooks from the react library from the framework so this is really important because use effect is really helpful for side effects but you need to make sure that you unsubscribe otherwise it's going to keep invoking this all the time so sometimes that can be helpful if you want to run a certain function after a certain type of action so let's say that you know you um every time that you uh complete a game you want to restart it well you could listen for that as a method or an input and then you could you know clear out the game and then restart it or something like that so because we're just writing this we want this function to run every time that this page loads so this is the way in which we do that so that's just a way to tell use effect and react in the Dom hey once we run this function you know when the page loads don't don't do it again just unsubscribe so that's great so we're going to now give this a save and we're going to open up our application backup and we're going to test to see if this is actually working so I'm going to give this a quick refresh and this is Crete so I see that it's getting something so let's see if this is the actual data so we go down a whole bunch and this looks exactly like what we have so we have that ID which was that string we have the query name which was live we have the 10 quotes here and updated at there and let's actually go back to this object just so that we can change it so let's say that we change that to 15. we'll do save go back back to our application and we'll give this another reload and let's see if we're actually able to get the different data that we just changed go to items this item and that gives 15. so it seems like we're actually able to do this and it's working successfully which is awesome so now we know that we're able to run a function that is querying using our Global secondary index of live to get this data object in Dynamo and then render that back in our console so now we're going to change and basically take this value and then change it to state so that it'll overwrite the zero and something important to note here is when we are getting this response data so you'll see that there's this data and then it's dot you know quotes query name dot items down there's this zero so it's the first item in the list of the array and then you have these data points so the one that we're going to want is quotes generated but you see that there's these different levels to the data structure so this becomes really important because we need typescript to understand that this data has nested data inside of it and then we're going to be working our way down into this quotes generated value and I'm going to show you why that's actually really important because let's say that we wanted to just set the quote number so you know we're going to use set quotes number and you know we could theoretically change it to be a number right we know that it's 15 in the database so we could we could do that but that's not the number it's going to be changing in the database so let's say that we are going to take the response.data.all of these things and we're going to put that in here so I already have this data type and we're going to work on this you know together but this is the response it's response.data.query.name.items take the first item out of that and then we get quotes generated and that's going to be the number that is 15 that's what's in the database right now but we're going to get this nasty error from typescript and it's going to say property data does not exist on type graphql result with this observable object and then it basically says that property data does not exist on type observable with the object so that's not great and typescript is going to get upset and that's going to be no good so what we really need to do is understand how are we getting the data out of response and then mapping all of these down so this is where that type guard that we worked on before that's where that comes in so we're just going to comment that out for a quick second so where we're going to actually start plugging away on this is we want to write a type card which is really a function that checks against types and the expected value that you would be expecting so we're going to say function and then we're going to say is graphql result for quote for quotes query name I'm just going to capitalize this between him we know that we're going to get a response that response is going to be any for this and that response is graphql result and we can get graph quill result from at AWS amplify dot API which we can import here so we'll import that and then it goes from AWS amplify API graphql so now what we want to do is we're going to make a carrot bracket I'm going to go down and then we're going to Define this type that we want so we're going to do quote query name and I'm actually I'm going to just uncapitalize that just so that it can match up with this data type that we have from before so under this we're going to get some items but we're really just going to get one item but it would be an array anyway and I'm going to do update quote info data create that and then we'll do semicolon and then we're gonna give this a closed out carrot and then we're going to be returning a response dot data and we're also going to return our response dot data dot quotes query name which is that query there and we're also going to be potentially getting which is really what we're going to be doing is a response dot data dot quotes query name dot items so these are the different outputs that we could get when we are trying to check along that is graphql result for quotes query name Global secretary index so where this comes into play is we now can check against all of these different responses related to our data query so we can comment this out because we already know that we're getting that data so now we're going to create type cards so if not is graphical result for query name given a response will then throw new error and then we'll say unexpected response from API Dot graphql next up we'll do if not response.data we're then going to throw a new error that will say response data is undefined next up now we're actually going to get the received number of quotes about variable and then we're going to use that to set the number of quotes so instead of it being zero it'll now be changed to the value of the database so we'll do const received number of quotes equals response dot data dot quotes query name dot items get the first item in the array and do quotes generated as that value and you can already see that there's autocomplete going on to it it knows this value and again remember when we did the the interface it knows that this is a number so this is perfect because now when we try to set number of quotes will be able to take this value and put that to this number and we get no errors and that's because this knows that it's a number this is set to set State action to a number and number of quotes is a number and we set it to zero so now we can set it to be a different number so before we do save so this is zero from before and I'm just going to zoom in here so this is zero but now when we save it this number now changed to be 15 super quickly right so now let's say that we want to change this and also a cool aspect of dynamodb is we can edit this and we can save it really quickly so we'll do save foreign we'll just do save and then space and now 17's there we could do this even one more time we could do 40. we'll just you know undo that space we'll save it open up this and now this is 40. so this is great so now we know that we're actually able to get realtime data out of our object and of course we can double check this with items go to that item we'll do refresh and can always uncomment out console log response and check this out so that's 40. so now we know that this is actually fetching the data dynamically from our database using our graphql API that we set up using appsync so this is super great so now we know that we're actually able to fetch and get Dynamic data from our from our application and we can always refresh this and we're still going to get that and you'll actually see that it'll go from 0 to 40 and that's the hydration happening where we take our you know State and then we fill it with data that we get from our API from our fetch function so this is awesome so now we know that this is working and this is great so we already got the dynamodb part down now we're going to work on the Lambda component to get every time that we press make a quote it's then going to use our API it's then going to fire off Lambda Lambda is going to generate that quote string for us and then we're going to pass that back to the front end so we can actually see our quotes so that's going to come up next for something that we probably want to do since we don't have 40 quotes here we can always just set this back to zero give that a save and now we'll refresh and now it's back to zero but it's the actual data from our database not just Zero from you state locally so we did it so great job so now we're going to move on to the Lambda component of our application since we just did a lot of great stuff we are going to want to commit this to GitHub so we can label this commit query to Dynamo for public quotes data works so we'll commit to Main and we'll give that a push all right so now we have that saved which is great so now what we're going to do is we are going to work on the functionality where when you click a button click this button it's going to actually do something because right now we want to add some functionality to this button and then actually have it do something in our application so for the Lambda component there's going to be two separate parts there's the front end component and then there is the actual function calling and then receiving so we're going to work on the front end first and then we'll um we'll work on the function as well right after that so what we're going to do is we're going to find where our background is which is right here and then the code generator modal popup is going to be here so this is where we're going to be actually working on the generator modal here so we can uncomment this out foreign and this is going to live right on top of the quotes generator container so there's going to be a number of different values that we're going to pass into this but we don't really have to worry about those just yet but we'll just kind of mock them out for now so we're just gonna basically give this I'm just going to copy these into it and then we'll comment them out and then add them later so there's going to be an open and a closed function so we're going to call that through clicking outside of this button you know obviously it'll Auto open when we open it but then we'll be able to close it and these will be operating through functions then there's going to be a processing quote there's going to be a set processing quote value and then there's going to be a quote received value and then a set quote received value so these are going to be the different inputs that we pass into our function we're just going to comment this out for now because we're just going to work on the component so this is going to live in our quote generator so we're going to find code generator we're going to call this and we already set up this folder from before create a new file I'm going to call this index.tsx and then this is where we're going to actually start creating our code generator component so if you want to just quickly spin up a react functional component you could do rafce and that's going to be our react Arrow functional export component here and then we'll do quote generator cool and if you're wondering how I did that that is an extension that is you can just get extensions from the extension store and then that'll be for react Snippets so it's one of the most popular extensions and it just saves you a lot of time from the guesswork of having to you know configure these different you know like Imports and then getting the rec you know Arrow function and everything it just spins it up really quickly and it makes it really easy to use to build out this component we are going to first remove that placeholder and then we're going to do modal and we're going to import this from Material UI so this is that component that we showed earlier which is let me show you guys motor component so that's when you click a button and then there's a popup and it you know might blur out other things that are in the background around it that's what this modal is doing to get the modal we need to add in a number of different values as inputs for the modal we are going to have quite a number of these inputs so I will take these and then I'll paste them below and then we'll go through each one so given an ID so we're just going to give this an easy to recognize name which is quote generator modal there's an aria labeled by and a described by so this is just going to be that spring modal title encryption so we could give this a name so just call this quote generator modal and then description say opens and closes quote generator now and this will also just help with readability in the application now in terms of open we're going to be passing in a value which will be a Boolean and then on close will be a function and then close after transition is a value which you'll you'll see in action there backdrop is just some styling related to how this works and then we also have a backdrop props timeout so now what we need to do is we are going to be passing in some data here so we're definitely going to be getting open and we're going to be passing in close and these are going to be functions that we're going to pass down from this so where we do this is that we'll do open and close and now we need to get these there and also this is not imported yet so we'll just backspace we'll rewrite l and this actually might not be importing so we'll create a another import at the top we'll say import and it seems like this is already going to be passing that and this might not like that so what we can do is we can just say quotes generator and that should work and then if we undo that then should work is that something that we can do here is like that and then we'll just rewrite that so that it will then recognize that component so that's a way that we can fix that and now what we're going to do is we're going to need to work on these inputs here so the open and the close are going to be two values that we passed down from the parent component to this child's component so here under open generator so that's going to be a Boolean value that we set with u state so we're going to use U State again here we'll go to the top and then we're going to say const open generator and this is already prompting us to write that so open generator and then set open generator we're going to set it to be false from the start but when we run a function this we're going to use set open generator and then that's going to make it true so under open generator now that value is fine now for our close function we're going to want to make this as a function at the top so we can put this after our type card from before so we'll create a function called const handle close generator write a function and then we'll do we'll take this from the top we can actually put this inside of our function here I'll put that there so we'll do um function for quote generator modal because we'll have a few functions here so handle closed generator we're going to set number of or sorry not for this one we're going to be importing set open generator and then we're going to set that to be false because we're going to be closing that and then we'll add some other things as well but we will work on those later so now what we want is we're going to go back to that button that we had before and remember when we had on click and we made it as an all we're going to make our own function to actually open up this modal and that's going to be called handle open generator now when we take this we're then going to make this a function so this is inside of our functional component here we'll put this underneath that so then we're going to do const handle open generator async and then we're going to pass in an event which will be a react synthetic event which is the type so typescript will be able to recognize that and then we're going to do e dot prevent default so this is a way that you can run a function without reloading the page and that becomes very important because when you need to pass in data into something you don't want to be reloading the page because you want to be able to manage the state um of the dominant and not be updating it or refreshing it you want it to be processing a function or a script so we're going to use that and then we're going to do set open generator to be true so this is where every time that we open up or we press that button which is going to be here we then want to make basically this set open generator to be true and we're going to be doing a bunch of other elements in this later but we'll worry about that at a later point so now when we open and close typescript is going to complain and it's going to say hey I see that you passed these down but I don't understand what the interface is that we're going to be using here so this is where we're going to use typescript and we're going to define a type so that or an interface so that typescript will understand exactly what open and close are supposed to do in our application to get rid of these errors we're going to be creating an interface so that typescript will understand the types of values that we're going to be or the variables and those values we're going to be passing into it so we're going to create a interface and we're going to call it quote moral props and this is going to be a value that we're going to put inside of this so this is going to help to Define open and close inside of that scope so what we're going to do is we're going to go down we're going to do interface we're going to copy this and then we're going to make this into an object so it seems like it's already understanding that these are going to be certain values so Boolean and close so now that's how we get rid of those errors and this is because we need to let typescript understand what this modal and the values that are going to be passed into it actually are going to be so this is a Boolean which is true or false and then close is a function so that's great so now what we're going to do and we're going to pass in as I'm sure you've guessed it a whole bunch of other data later but these are just the two ones that we want to be checking for right now we could do of course the other stuff later so now we're going to do is we are going to work on this backdrop element so backdrop is imported from Material UI so we're going to be just reorganizing a little bit of our project here so we're gonna say material UI Imports so the modal is imported from there and then we're also going to import backdrop so if we just backspace we can find that backdrop as this one so we'll import that so modal and backdrop will all be imported from material and now mortal is going to say that there is something that is missing so what we need to do is we need to pass in some other values into the modal since we need to have something inside of it for a to a render so we're going to pass in this fade effect or styling which I really like to give it a little bit more of a classy element to it and for fade we'll be able to import that also for material UI so that'll also be imported from the mey material library and then we need to have something inside of this because these are still effects we need to have some text in there so what we could do is we could just say each one hello world and then our core generator is just going to have some text this is going to and like that and let us test to see if this actually can function so if we click on this check that out so now we can open this and there's this text here we see the hello world when it's there and anytime that we click outside of this modal it's um that's how we'll be able to close it out or if you click on this and then you press Escape that's also how you'll be able to to close out of it so we're getting closer obviously we need to add some Styles in here but this is the basic functionality if you click this then it's going to be rendering it's going to be processing the generation of the quote and then it'll pass that back and then if we you know click out of that div then we'd be able to close out of the modal so this is some great progress before to round out the rest of these Imports to our child's component from this parent component let's add those right now so we go up to the top under our function and we're going to add a number of different processing quote generation statuses so new const and then we're going to create a variable to check for the processing quote status so processing quote and then suppressor quote and then we also have a set processing quote and then that's going to be set automatically to false and then we're going to have another variable called const quote received and this is actually going to be the value that we get back from our Lambda function so set quote received and then this is going to be use date but instead of it being a value like a Boolean value it's going to be set to null because we're going to fill it with data when we get that back but it's going to be set to nothing when we start so this is going to be a string and this is going to be that base 64 encoded string that I keep talking about but you're actually going to see what it looks like in a little bit but this is where we're going to be filling this value with that string for the image so let's take this and we're going to pass this down and then these are going to be the other ones so quote received and then set quote received but of course typescript is going to complain it's going to say hey you don't have this value so we're going to be passing these four values into our type in our interface in the child component so this is that quote generator file and under open close we then need to pass in those other values to do that we are going to be putting those in as inputs so we can actually Define the in the interface that might be a little bit easier just to explain so we added those in here so those are our four more inputs processing quote we are going to Define that as a Boolean then for set processing quote is actually going to be a specific type of react dispatch so this is that type so it's react dispatch and then react set State action to a Boolean so it's Boolean but this is the type for that and then for quote received this is going to be a string or it's going to be no and then it's going to be the same basically the same type of react dispatch react set State action except it's going to model State string and null so that's what that will look like and then we're going to pass those into here so it might be helpful also to start writing these down and then just passing them in like that just in case that's a little bit easier to read then we pass this and then we do this one and add that one as an input and then set quote received and that is an input so that's going to be great so this is going to allow us to then pass down that data as props into our child's component so we can then use it when we're trying to render out the different states of the quote being generated so now we're going to do is we're going to get rid of that hello world because we know that this is working and then we're going to do another component which we will call quote generator modal container and material UI has this styling where you can pass in custom styles so I'll show you how to do that in one moment and then inside of this we're going to do quote generator modal inner container so this is where we're going to be including some Styles but specifically for the style that we're going to import here we can just Define a value outside of our component which we could report up here we just see const style and then this is where if you follow the material UI style guide you'd be able to then pass in you know your own style as you like but that'll be an import into that and then modal container and then inner container we're going to need to create separate styled components so what we will do is we will open up quote generator this and then we'll press Ctrl B and that will just close that out and then we're going to be making our quote generator elements Stout component in this library in this uh this file so again if you remember we'll do exsc we'll then do quote generator modal container and this is not going to be styled div it's going to be a component from Material UI called box so we're going to do styled box and then we can import that from Material UI so it will look like this and then we're going to pass in a whole bunch of styles into this component so I'll show you what those are in one moment so we're going to give it a position of absolute with a top 50 left 50 transform translate minus 50 minus 50 so that's going to Center this box this style of the Box inside of the screen it's going to have a 70 view width and a height of 70 view height and that's going to make sure that it spans around the screen so as it gets smaller or as it gets larger this will be expanding to match what that popup is that's in the um the main screen and then we give it a box Shadow just for some styling and then we're giving it a background we're giving it a box Shadow we're doing some backdrop filtering and sort of giving it that glossomorphic effect that we were talking about from earlier and then also giving it a border similar to what we had before so that's great so now we're going to need to also create the inner container so as I'm sure you guessed it we're gonna do exsc we're going to pass that in and then this is going to be another set of styles so this is going to be style.div and we have our top 50 left 50 transfer translate minus 50 minus 50 and then a position relative so there's going to be this inner container that's going to be inside of our modal container so this overall this overall element this overall component is going to be centered inside of the screen and then we're going to have inside of this our own series of styles so this is just how you can create divs within divs and then Center those divs within other Center divs and that just will help with organization of your of your application so now we can do is we can rewrite the N here we can then import this from quote generator elements and then that will import that at the top we'll rewrite the last letter here and then that will import that as well so then these get imported from quotient or elements which makes sense so we'll give this a save we'll give this a save and then we can see if this is going to start generating some styles so it looks looks like it is so this is really great so we can click inside of this div but as soon as we click outside of it then it'll disappear so that's not that's not bad right and then we can press Escape as well and then that will also close it out so seems like it's working pretty well so now we're going to do is we are going to then start adding some of these elements into our page now that our modal is working we need to create two different states so state number one would be you are processing request of quote and quote state is empty so this is going to basically say hey we're trying to fetch this data from the cloud right now and there's nothing you know in there just yet locally state number two is going to be quote received so that means that we have a quote passed back so quote state you can actually say so in order to make sure that we can actually process these states correctly and then have our front end do the correct actions what we're going to do is we're going to pass down those properties that we're importing from here so these where we're processing the quote or the quote is received we're going to use those to dynamically switch out how the front end operates so what we're going to do is we're going to start creating some elements so we're going to do processing quote so if that is true meaning we are trying to fetch the quote from Lambda and the quote received is null meaning there is nothing there it's empty then we're going to render this specific set of frontend code and this is a Nifty operator for working in react where you can really just Define certain elements here and then you just say and and then you don't need to do like if this else something it's just if this is true this is going to be the code so you don't have to have like it wouldn't be like this would be like an else else like you don't have to do something like that um you can just write your code in not have to worry about the the other types of conditions so something we're going to do is we're going to create a component for a circular progress meter which we'll call modal circular progress and that is going to be given some data so it's going to be given a size we're going to call that eight REM and REM is just a way to size certain divs and elements and then we're going to give this a 2.5 thickness and then we're going to also have a title so we're gonna have quote generator title and this is going to say creating your quote and this is where that's going to be that loading pattern so this would sort of make sense that it's creating your quote for you and you know we're told to wait until we finish that up so we are told otherwise that it's that it's there then um what we're going to do is we are going to then have a quote generator subtitle and we're gonna give this a style of margin top 20 pixels and I thought that this was kind of a little bit funny so what we could do is if we wanted to have some data such as a quote so I thought this would be kind of fun where it's creating your quote and then you'd have sort of this inspirational quote as it's waiting I thought that would be kind of fun so what we'll have is we'll do wise Dev quote and then I'm gonna have a break and then we're gonna do span style equals font size 26 so we're just going to be changing the styles with that span that we talked about earlier but we're going to have a quote and then we're going to say wise Dev quote author and then we end the span yeah Ben's gonna say that it can't find that because we haven't defined that variable yet and that should round out the rest of this element so now we're going to do is we're going to Define these elements so right after the Imports but before return to actually just take this and make this a little bit more tabbed so that it's a little more organized so we're gonna do const because these are constant values and then I'm going to copy this quote that I created so I thought this would be kind of a little bit funny where it's you say if you can enter a div Anything is Possible because I firmly believe that that is true and then we author and then I'm going to pass down the author of this so we're just going to take this so it's going to basically look like that it's going to look like this and then a wise senior software engineer so that's great so those are the two variables that we're going to pass down into here and then now these are where we need to create some styled components and this might be expecting a value here it's maybe no parentheses yeah so we can just get rid of that parentheses because that was just an extra one and now we just need to worry about the Styles components so we're going to go back to our Styles components from before and we'll have this open on the side and then we will of course do exsc we're going to say modal circular progress and this is not going to be a div this is going to be the material UI I'm going to make this a little bit bigger so you can see this is going to be the styled circular progress and this is an element out of the material UI component Library and then we're going to pass in a number of different styles into this component so we're going to make the color white we're going to make the stroke line cap round so that it's not cut it's rounded out the positions to be relative and then just to account for the larger element pushing to the left we're just going to add this so a margin left of 55 pixels a left to 50 and a transform translate of 50 percent so then we could have that and then we'll work on the generator title so the generator title is going to be created with exsc we have the title this is going to be a div and then we're going to pass in some Styles here and we're going to have a font family here we're going to have font size and this might already be used so I do wonder if this is going to be the same as the previous one and I think that we could just reuse this one I'm just double checking the Styles here but I think we can use the same one so you can actually just import that already and that'll be the same one here and then subtitle you can use the same one there and for modal circular progress we can just import that component that we just created now we'll give our styled component elements a save and then we'll give that a save and believe we could also give this a save too so now we've passed down those components those are properties into the child's component now let's just remove these State variables and let's see what this looks like when we open the modal and there's you know no variables to worry about all right so seems like when we click on this will then be getting this loading State it's going to say creating your quote and then it's we get that fun inspirational quote there and everything's operating pretty great so as we click on this of course able to click out of it but then you can also press escape and then that'll work great so now we want to do is we want to pass these values back in and we're not actually updating this processing quote so the reason why this is going to be important is if we save that and we try to press this button we don't get anything here so we still get the popup but we don't get anything in here and that's because processing quote is still set to be false and we know this because when we go back to this other example to our parent component we're not actually setting processing quote state yet so that's why this is still false so what we need to do is we need to have a methodology for how we can create a way where when we are fetching our quote we're going to be able to then start changing this value so we're going to go to our function that we created with the try catch for the handle open operation which is going to be here and under handle open operation we already have this value here where we set this to be true we're going to Now set processing quote to be true now we're going to do a try catch and this is where we're going to be running our Lambda stuff so run Lambda function and then this is where we're going to be getting a whole lot of data otherwise we're going to do catch do error console vlog error generating quote log the error and then we will set processing quote to be false so this means that it's timing out after we finish that out and something also that we can do is that in the try catch we know at the end of it we will need to set the processing quote to be false because as we run it we then will need to because we make it true we will need to make it false at the end of it so that it the the function ends and terminates and then sets processing quote to be false so that's a good methodology for us to go down so as we process this it should actually allow us to see it for a quick second but it might actually be way too fast to even see that there's data that's processing yeah it's going to be too short so when we are fetching this function for a while it might be like you know a second or two but we will actually see that spinning component to it now if we did want to start mocking up some of this functionality we of course are going to be using a Lambda fetch the query to get access to the Lambda function and that will actually be doing our true and then setting that to false but if we wanted to actually try to model some of this type of stuff up this becomes really important because when we are trying to create these different states of hey I'm waiting for a quote and then I got it back how could you actually model that out without doing anything in the cloud just yet so what we're going to do is we're going to use a set timeout function to sort of model how this would actually be working so we're going to copy that function we're going to do set timeout we're going to log that as an arrow function we're going to process set processing quote to be false and then we're going to give that 3000 and that will be for three seconds so that we'll be able to sort of emulate how this is actually going to happen so when we make a quote we're going to see this for three seconds about and then we're gonna see you know our quote pop up here so obviously this will be maybe faster much faster with Lambda than three seconds but three seconds will just give us a little bit of an understanding of how to do that and then of course every time that we run this quote we're going to run that function it's going to be making this true and then three seconds is going to be false so that gives us a good understanding of how this function is going to be operating now what we want to do is we're going to take this child's component so this is just the state one of processing the request of the quote now we need to have if the quote state is fulfilled so how do we actually go and change that well we're going to have something a little bit different so we're going to have in that same square different code so now if the quote received is not null meaning that we have something there we'll use that operator will then make our separate div and then we're going to start plugging away with a download and a visualization to show where the quote is and then allow us to interact with it so we're going to do is we're going to have a quote generator title which we can copy from there we're then going to say download your quote then we're going to have another opponent that says quote generator or subtitle and we're actually going to include those same Styles there we're going to say see a preview close that out and then we're going to have an image blob container which is going to include that image so image blob container and that's going to include some elements which we will Define in a little bit and there's going to be an animated download button and before we get a little bit farther with these other styles there was something that uh I do want to just call out very quickly so when you click on this quote um you'll see this white and then blue border around this element so there this is this default for Focus around outline when you click on something so a way that we can get rid of that in case you see that on your screen is when we go to quote generator modal container which is the styled box we can add in this style so when you use Styles components you can use and colon and then a class for a pseudo class and then you can use these brackets to then Define certain elements so for outline we're going to choose non and we're going to say important so we never want to see outline and we want to prioritize this in the Styles so as soon as we press save now this should go away but if we also click on this now you won't see any of that uh background and it's it's the out of the border that we selected from before also another thing is if when we were writing this function we made it where you have to click inside of this text div so if you click on outside of that it won't actually um include it so something that we can do is we can go back to where we call that Handler so the handle open generator on click and we're just going to move this out to be where the generate quote button lives so that's where now we're just we just move this function to include the whole div so now anytime that you click on this this model will pop up even if you click on the text or click or in the corner that will still work and we can also just inspect if this is styling in the mode in the the mobile way that we are expecting so we press this that looks pretty good and then if we expand this out a little bit more that looks great too so there's just a couple other ways that we can test and make sure that we are fully checking out the Styles and also refining the vision of the application as we go along now to switch back to this state number two we're going to want to finish out the rest of these elements so for the image blob container we're going to be creating some animated elements so the animated elements are going to show us how we can make a little bit more of an interactive view for our actual application so what we're going to want to do is we're going to want to go here I'm going to go to animations I'm going to do image blob TSX and we're going to make a new functional component so we're going to do rafce and then we're going to react Arrow functional expert component and then we're going to call this image blob and then in the top we're going to import the image from next image so we're going to be of course working with the image module out of next image and this is how we're going to be animating our popup so something that we're going to do is we're going to work through some imports for this component and then we're also going to give it a style but something that we can do right now is we'll just have image blob here we'll give this a save we're then going to import image blob from here so image blob container inside of this we're then going to put an image blob and there's going to be some props that we passed down from here but we will work on those in a little bit and we'll press enter so that we can import image blob and then we're going to work on the image blob container styles so in terms of animations we're going to create a new file we're going to call it animation elements TSX and then this is where we're going to move this to the right and now we can start importing our elements here and something also that we can do since we already have quote generated elements something that I personally like to do is just import our last recent Imports and then just put those at the top and then we can always remove certain ones that we don't need we might need image we might need link but we could keep those there and then we're going to do exsc for the export South component shortcut and then we're going to do image blob container right there and then we're going to start adding in our styles for the div so we know that this is a div so put that there and then I'm going to copy our styles for this because this is quite a lot of code here and we'll put that in there and then I'll walk through all of the code with you so when we have this image blob container can actually get rid of this because that was some relative styling for some testing so we originally had a position of relative we have a text align of Center meeting we want everything to be in the middle this is going to be down 10 from the top um and then the margin top will have 20 pixels of some margin spacing we'll have a transition this is going to be important so when we do this on hover or we're animating elements we want to give this sort of a really Sleek ease and ease out effect we also want the width to fit the contents and we also want margin Auto so just adding more centering around horizontally and vertically and then we also want to give it a height of 100 pixels total and then the Z index meeting make this go over everything and prioritize that now for the hover this is actually some pretty cool Styles because when we hover over this element this is how you do that in styled components then when you transform scale we're going to times this by 4.8 so on the hover it's going to grow by 4.8 and then of course the index stays the same then the transition we have this effect so on the hover it Transitions and then also on the out of hover so Mouse out this will have a also a transition then we have our box Shadow and then we also have some media queries and these are helpful because when we make our our application our width and our height you know change we want to be able to change that as well so when the height becomes 800 pixels maximum we only want to scale it by 3.8 and then if it's only 600 pixels wide we want to only scale it by 2.8 so this makes sure that you don't expand it past the width of the screen but that it's relative to a lot of these other types of styles and then these of course is just box Shadows uh around the hover effect but these are important for making sure that we don't over scale the image when we expand it so we can give this a save and then what we'll do is we'll then import this like that and then that's how we can easily import that there and then we'll also start working on this animated download button so this animated download button is going to be its own component we're then going to create a new functional component in animations so we'll call this animated download button.tsx and we can actually just copy this from here and then just paste it in there just so that we can start tiling it and then something also that you can do is that if you have the same text in many different places you can hold down the control button and press D many times and then that will allow us to have this cursor so that if we wanted to delete something we could do that for example we can hover over all of these images and then we can delete there we go so then we just select and then we press D delete and now we can write that so we can write animated download button and then now it's Auto writing these dynamically which is a really helpful hack so that you don't have to write and then write and then write you could just write them all at once so now we're going to do is we are going to have this give this a save we'll go back to our generator there and then we will import this so rewrite the last letter press enter and then now we have all those errors removed from our application or from our code so I'll give that a save and then we will keep proceeding here so the animated download button is going to have some pretty cool styles that will be helpful for us and make our application look kind of a little bit cooler and more Dynamic but before we do that let's just make sure that this actually is configured and it is working so we are going to say that we want that to equal no because we want to see if we can show that so when we make a quote so this is where this will disappear and then this is where that's going to be so you can see that here where it's going to say download your quote we'll have a preview this image blob is going to have this on Hover effect there and then we'll also have this download button that will be centered with some Styles and then this will allow us to actually copy this image that's there so it seems like everything is working without any Styles which is great so now we can keep proceeding here so before we forget we'll make sure that we revert back to it not equaling null we'll give that a save and now we can proceed with our button so if we go to the load button this is going to be a function functional component that we're going to create so something that we're going to do is we're going to use a pretty fun package called react Lottie player and this is going to allow us to install this player for a Lottie image and a lot of image is really just a Json object and it will instead of being a static image it allows an animation so what we'll do is that we'll open up a new terminal we'll do npm I and we'll say react Lottie player we'll press enter and then now we've installed it so now what we can do is we can install and import react body player from the top and then something also that we're going to do is that we're going to add our react Lottie image into our assets folder so I'll show you what this looks like and then we go to Plug and Play so you don't have to worry about copying this this is like quite a lot of code but this is the react Lottie image and this is what it looks like so it's a huge Json object that has all of these different characters and all these different things and what it's going to do is that it allows for this animated effect instead of it being a static effect so what we'll do is that we will say We'll import Lottie Json from and it's already trying to find where it is but we'll do assets and then we're going to say animated photo.json so that's that file now we're going to do is we're going to need to import it into our page so we're going to get rid of this placeholder div and then we're going to start adding some elements so we're going to say download quote card container and then this is going to have an on click and it's going to have a button which we're going to Define later so we'll just say that this is null this is container card container then we're going to have Center Lottie which is going to be its own South component and we're going to give it a few different styles so we're going to say Loop because we want the image to Loop and this is where we're going to be working from this Lottie package which you'll see in a little bit but we wanted to Loop we want animation data to equal the Lottie Json image that we're importing and then we also want to have it play so we'll close that out and then we're going to have another style component that's going to say download quote card context for container text and then we're going to say download your quote cart so that looks about right and now we're going to do is we are going to start working on these styles so for the first one which is d download card so now we're in animation elements so what we're going to do is we're going to control B and close it out we're then going to open this up and then we're going to have this on the side and we're going to do exsc we're going to say download and we can actually just copy from there this is going to be a div and then we're going to copy our styles from our CSS right here and that's what that looks like so we're going to have it have a porter we're going to give it a width we're going to have its position relative in the screen with a border radius so the edges are rounded uh the the cursor is going to be pointed when you you know hover over it and then there's going to be a margin there's going to be transform just to kind of get it in the width in the middle and then there's going to be some on Hover effects so it'll just be getting a box Shadow backdrop filter there's going to be some other aspects that we have to this we're then going to rewrite the last letter we'll then import that and we can do is we can actually just so the typescript won't complain about this we'll just comment that out for now then for centered Lottie what we're going to do is that we're going to copy this Lottie effect from here we're then going to import this from here and then that's where we're going to be using Lottie as a styled element so we're going to do is we're going to do exscc we're going to say centered Lottie and then this is going to be styled body then we're going to do is we're going to import these styles so this will have a width a height it'll be in the center it'll be a position relative and then it'll margin minus 40 from the top and then pointer events is going to have none just so that it's not interfering with any click click events inside of that so then we'll press that download quote card text we're gonna do exsc we're going to say this is a div and then we're going to copy over our Styles so we can write them so this is now color font family font size right a lot of the good stylings that we would expect text align we want that in the center so the text is aligned we're going to give it some padding margin top minus 60 and of course for the max width media query we're going to be making the font a little bit smaller as the screen gets smaller so then we'll rewrite this last letter we'll rewrite that we'll give our elements a save and then we'll give this a save then we're going to go back to here and then we are just going to make this equal one more time just so that we can test this out we're then going to move this over so now what's really cool is that we have this button where you see that this image is moving up and down in a loop so I think that's pretty cool because what makes our application now more fun is that of course we have this on Hover effect here but also this image is you know sparkling it's moving and that's a lot of image so you can learn more about Lottie images if you if you start googling um there's a website called icon Scout and you can get a whole bunch of these different Lottie images many of them for free and this was just one that I thought looked really nice and just kind of it brings your app to life because now it's not just a download button now you have a download button with a cool animation and it also makes you know your app a little bit more interactive for your users so that it's more fun so now that we have that that's pretty cool so now we're going to start working on this other element which is going to be how we actually see the preview image of our element so this is going to be that image blob and we'll work on that next so now we're at a good spot where we can start taking our code sandbox code pushing that to Lambda and now we can actually try to get this image blob to then come back into our application so the way this is going to work is that when we actually get a quote received this can't be no so we're going to switch that back and we're going to be getting the string back from Lambda and then we're going to be basically having it in this image blob component and then we'll be able to work from that as soon as we get that passed back from our Lambda code so we switch this back now we're going to do is we're going to pass in two specific variables so we're going to pass in these two props into our application so quote received that's going to be what we passed down which you'll see from the top we pass that down as a property into this child's component and then blob URL it's not going to know what blob URL is yet but but we're going to be passing this down uh from our Lambda code and then that's going to exist once this function is invoked and then we save that in state so what we're going to do is we're going to go back to our values here we're then going to say const blob URL set blob URL equals use state this is going to be either a string or it'll be null because we won't get a value and then this will be set to be no from the beginning and then we're going to import use state as a hook and while we're here we'll also import use effect because we know we're going to need this in a little bit so now that we have blob URL now we're going to be able to work from the function to actually get this so something that we can do is that we're going to write two specific functions the first is going to be that handle download so we can write so function for handle handling the download of quote card and then also we need a function to handle the receiving of quote card so to handle the download something we're going to do is that we are going to say const handle download this is going to be an arrow function we're then given a link we're going to say document create element a and then we're going to say if the type of blob URL equals a string then what we're going to do is that we're going to have this code so there's going to be a link there's going to be an href and then we're going to set that as a link the link will have a download which we will have as quote.png which is the file name and then will allow us to click click into that link so this is going to be a function that will be able to then have so when we call and we said download your quote we could have the animated download button down here of course that and then we'll say handle download so we can actually close out these Styles because we don't need them right now so now we're going to pass this down to the animated download button we'll pass that in another property and we're going to need to create our own interface for this because it's not going to understand from a typescript perspective what we want that function to actually do so something that we can do is that we can say animated download button props something also that we can do is that we can do on click and we'll just pass that down and then we're going to declare as an interface here we'll say interface animated download but props and then we're going to say handle download and then this is how we will Define this type for the function so that looks great so far and then we'll be able to actually use this download button to handle the download that we pass down through here so that will work great now we need to do is we need to also work on a function to handle the receiving of that quote so this is going to be important because when we get this string back from Lambda we're going to need to do something with it and we're going to need to allow us to either add this in as the blob URL or revoke and remove it so that we can re readd a new link so this is where when you fetch a new quote each time we need to clear out basically the placeholder for that old quote to make space for the new quote so tonight we're going to do is we are going to use that use effect hook to then allow us to work from this functioning a little bit more smoothly because we want to be able to just instantly get this string and then allow us to get this quote so we'll do is that we will set this up just like a normal use effect hook we'll pass this in and now we're going to say if quote received then we're going to want to do some code and I think it's also important to get into practice of if you have this and also make sure that we close out and unsubscribe from this use effect so that we don't have this running you know an unlimited number of times all the time so this is just going to say that run this if quote received is changing so then what we can do is we can say const we're going to say binary data equals and then we're going to use buffer Dot from we'll say quote received okay say base 64. so we're going to be using some dependencies that we're going to be using to work with a base 64 encoded string now when we do const blob we know this is going to be a new blob and the blob is going to be a locally stored aspect of code that we're then going to be basically storing in local storage or clearing out and then adding a new one each time so when we take this new blob element we're going to add in binary data we're then going to say that the type is going to be image Dot image.png then we're going to do is we're going to say const blob URL generated equals URL dot create object URL blob we'll then console log that value just so that we can keep track of what's actually being generated and then we're going to set blob URL to also be blob URL generated so these are going to be the different values and then we're going to be using use state to set the blob URL and then we're going to do is we're going to return we're going to make this into a function and then we're going to say URL dot revoke object URL and then we're going to also have blob URL there so basically this is going to be setting and then removing the old blob URL generated each time that we we run this so we want to make sure that if a Court's received we take this new data that we receive we set that as the blob URL and then we remove and revoke that old URL that we were previously received and that'll also become important so that you don't just store an unlimited number of these blob URLs in your local storage but they are always constantly cleaning out the old URL each time as you proceed and that's what we'll be doing here so that seems great for now and now something that we can do is we can also just make sure that for the quote received if we're passing the image blob URL down to have these values so things like I'll copy this say image blob URL and then what we're going to do is that we're going to make sure that we have an interface to store those values so if you remember from before we have these two values here so I'm just going to comment those out so we know that blob URL image blob is going to need received and it's going to need the blob URL then we're also going to need to create an interface so we'll say image blob props then what we'll do is we'll say We'll click declare an interface enter face props and then we'll pass these both down and then for this one quote uh received this is going to be a string and then for blob URL this could either be a string or it can be null because this Bob URL doesn't necessarily need to have a value but as soon as it does have a value we want to make sure that we know that that there is a value there so this is all good now we do this we'll go back to quote generator we'll say quote received and we'll just see that there is an error here and it's going to say that it's string not assigned to string type but string is a wrapper so we'll see here so we'll go back and we'll make this capital S for Capital string and then that will remove that error so there are differences in terms of the type of string it can be so just be cognizant of that when you're working with typescript to make sure that if you are typing out your values you need to make sure that those are correctly typed which we're doing which is great so to do that we'll give this a save we'll give this a save we'll give this a save and something that we can do is mock up how the response is going to be for when we are getting this image back from our Lambda script so we've talked a lot about base64 and now we're actually going to see what this looks like but to do this what I'm going to do is I'm going to create a variable called blob URL and we're just going to bring this down and then we're going to just unhighlight that for a second we're then also going to import some hooks and then what we're going to do is to enter and then we're going to write a pretty big use effect hook and it's going to simulate us fetching this response object from Lambda which is what we'll be doing we'll get this string and then we're going to show how we can actually set that image in our application so we're going to do is we're going to do use effect or say const response and then the response object is going to have a number of different variables but what we're going to really look for is a status code of 200 in terms of headers we would have a content type which would be image.png and then access control allow origin which will give a wild card for everything and then our body response we're gonna have a body which is going to be a blob and then is base 64 encoded we're going to say that's true get rid of that backslash and then for the body so this body is going to be a very very very very very long string and this is actually the first time that you're actually going to see what a base64 encoded string looks like so you don't have to worry about writing this down we're gonna I'll show you how to get this in Lambda so that you don't actually have to do it but it's going to look something like this monstrosity so this huge list of characters is what an image looks like so when we have an image it can either be you know a file like a PNG or a JPEG but if we wanted to turn this into a code string that's another way to also get an image so this base64 encoded string really looks just like this and this all these characters all of this code compiles down to an image that we can then set and then use in our application so also just showing back here so we have this response object inside of our use effect hook so let's scroll down to where it stops so it stops here now we're going to do is we're going to say const binary data equals buffer Dot from we're going to say response body because that's what the this is what the body variable is say response that body and we say base 64. then we're going to say blob because we need a blob variable and we're going to say that's a new blob this is going to be binary data and then the type is response dot headers with the content type close out the bracket and we'll get rid of that quotation mark and then we're going to take our blob and then put that into a new blob URL so we'll say const new blob your Rel equals URL create object URL and we'll put blob in there and then we're going to do is we are going to set blob URL with that new blob URL that we just got then we're going to return as an arrow function URL revoke object URL with the new blob URL so I'll be able to clear out this value every time that we set that and then what we'll do is we will make sure to unsubscribe from this event so every time that the page loads this will load and it's saying that this can't find set blob URL so we're going to go back up to the top and we're going to make sure that we're able to set this and if it's not being read that means that we are not importing it correctly so this might be typescript being a little bit slow here so something that we can do is we see that it's not um it's not working as quickly as possible so something that we can do is we can try saving this and then what we can do is we can press command shift p we can reload the window and sometimes this is a way to sync up typescript changes just so that we can work a little bit faster so sometimes when you're doing a lot of typescript changes or errors I've noticed that sometimes you need to do that reload window just to get your workspace and vs code synced up with typescript so that it works so you can always use that just as a check in case you ever have any issues or ever have any errors so now that we have use effect something that we'll also do now is we'll do if and we'll create a check where we need the blob URL we'll create this we'll do return no and then we're going to create an object so we're going to remove that we're going to create an image component with The Blob URL and some alt which is going to say alt text which is going to say generated image we'll just say image quote card with we're going to give that a 150 and a height we're going to give that as 100. so and then we export our default image blob and this seems pretty good so what we're going to do is we're going to give this a save we're then going to open up our application in another Tab and something that we are going to do is we're first going to because of course we're going to be testing so we're going to do make a quote that's going to generate right it's going to time out after three seconds and now we're going to do is we're going to go back to our page to our quote generator we're then going to say if this equals no because we actually haven't set quote received yet we're going to give that a save and now we actually have what is going to be this preview so if we click on this so to see how this is you know making the the background sort of blur it out and not as uh not as seeable and we actually see this image so what's really cool about the URL is that if we open this image in a tab so this is a real image that we can take we can drag we can move around with and that's what that blob is doing so it's creating this blob HTTP localhost 3000 and then it gives it this unique ID so that we can identify this in our local storage so that's why if you took this you could do copy image you could save this image you can open it up in a new tab or copy text from image or copy image address and that's all because we have this image and we can also see this if we inspect it we see that its source is now that so if we go back to our to our code so down here we have this image with the source which is the blob URL so the actual blob URL is this and that's what we generated with that base 64 encoded string so we take that really long crazy string of characters and then that is what gets compiled down into a blob and we use buffer along with a couple other modules to then turn that into an image that we can then save in our local storage which is awesome so this is exactly how we're gonna work and then we're going to have this download your quote button to download this image once we get this back from Lambda but this is the functionality and also just to show you some of the styling that we set up from before so as we make this smaller and make this more like a mobile application and we put that in the middle so now if we try to make a quote obviously we'll see that there we won't see that when we go there but do you see how now this is smaller and this is more contained in here and then if we hover over this this hover is actually smaller than the than the hover if the screen was expanded and we'll see that again to the here so this is much bigger than what we just showed on the mobile view so that's how media queries become really important when we are working with our Styles because then we're able to actually dynamically change how the style looks based upon the width of the screen so you'll have a different mobile experience than a desktop experience which makes sense because you have different widths on both of those screens so that's great so now we're going to be able to go back to our code and now we can start working on the script to receive this data from Lambda and then what we'll do is instead of getting this base64 string locally right we're going to be getting this in AWS Lambda returning back as a response so we're going to get a response object but it won't be locally stored it's going to be sent from our API through Lambda into our application and then decoded in the front end with typescript so it'll be the same exact process except we're actually going to get a blob URL that will be from not a response locally but it'll be from AWS so now that we have worked on this local testing of our inspirational quote generator let us of course get into the habit of doing another save so that we can start working from here so I'm going to do control Z just to make that a little bit smaller and now we're going to say local or say add local mock of quote however image blob so we'll make a commit to that we'll push origin and now we're ready to go so now that we're in a good spot with the front end now let us work on the Lambda function that we're going to be using to generate this this code for our quotes so when you go to your amplify folder there's a number of different subfolders but we're going to go to back end we're not going to go to API but we're going to go to function and we'll go to inspo quote Lambda which is what we just generated a while back now we're going to go to the index.js file and now we're able to see a starter template for our hello from Lambda function so basically what this is doing is that we're going to import types for AWS Lambda through an API Gateway proxy Handler and then we have our exports Handler which is an async event and then this is just going to console log the event so it's important to think about each of these every time that when you run a Lambda function that's an event and you can pass in data or test or input AWS Json into that event and then you'd be able to process it so you could do batch processing inside of a Lambda you could return a status code of 200 kind of like our response object from before so you could return a response you could just generate code in AWS and then have it do something and then there's nothing returned back really it's up to you in terms of how you want to configure your serverless scripts but for us we're going to be returning a response back to the user and that's going to be that that body response that we had before which is going to be that base64 encoded string so what we're going to do is that we're going to first open up package.json and we're going to see what's already installed with us so we have a name description the main file is going to be that index.js we have a license and we have some Dev dependencies but we're going to also need to install some actual real dependencies so we're going to do is that we're going to open up the terminal we're going to open up a new line we'll say clear and now we're going to do is that we're going to do CD we're going to drag this Source folder here so drag the path press enter and now if we do LS this is where we're in this directory for this location so now we're going to do is that we're going to clear this and then we're going to do npm I and then we're going to install some dependencies so we're going to want to do npm I so go back there so we're going to want to do types at types node we're going to want to install node Fetch and it's going to be a very specific version of node because we will need this for our Lambda if you do node Fetch and it's version three this won't work in Lambda because of how this is configured for the certain type of node.js that we're going to be using we need to make sure that we use version two because we use require statements so we need to make sure that we abide by that we also need to install path and we also need to install sharp and sharp was that library that we were using to composite our image together so we're going to do npmi and install these packages together and then this might take a couple of minutes and then we should see the printout there so now if we make this smaller we should see that all the packages installed correctly as we'd expect now what we can do is we can open back up our node.js index.js file and now we can start plugging away with our function so there are some things that we're going to need to do when we are turning our code sandbox code so this code into something that can work with Lambda so we have these packages that are installed right we have our our six steps we have our get random quote function we have that SVG right we have all these things and then we run get random quote so to take all of this code we're not going to be able to just import that into this Lambda function just like that we are going to need to make a few modifications but promise it's not that many things so something that we are just going to do is we're going to need to install some packages so we're going to declare AWS I'm going to say require let me say AWS SDK and something that we're going to need to do for our Lambda function is something that I think is really cool so when we are working with any sort of AWS service we need to allow for resource access controls so this is going to allow us to and these are really IEM statements or confirmation template modifications but when we want to have a Lambda speak to our database we're going to need to create resource access to allow Lambda to speak to Dynamo so the reason of why we're going to do this is that of course we need to run our code and generate the image but if you remember from before we wanted to enable a way where as you run this function we want to then update the database but that specific database object that we created before if you remember that quotes generated number we want to increment that by plus one every time that this function executes and that's a really cool way where you could have serverless code sort of that event driven architecture where something happens in a script that then modifies the database or you could have it where a database object happens and then a script runs it's really up to you in terms of how you are interested in event driven architectures highly would recommend checking out dynamodb streams it's a very very cool way to enable that event driven architecture within a database context and then with Lambda we're going to be checking out our resource access permissions to connect Lambda to Dynamo so we're going to be doing a couple of things here but to specifically to allow our Lambda function to speak to Dynamo what we're going to need to do is that we're going to open up the terminal again we're going to do and we can actually close this uh this terminal Window app because we don't need it anymore what we're going to do is that we're already here we could do amplify update function and I will bring this up just so that we can see this a little bit more easily so there's only one function here that we can select from so we'll do inspo quote Lambda now what's a really great feature about the AWS amplify framework is that it's already pulling in all of the data about our inspo quote Lambda it knows that this is a node.js runtime and then it gives us some information about what we've set up so we need to focus on the resource access permissions because this is going to allow us to speak to our database so what we're going to do is that we're going to do resource access permissions we need to focus on storage which is our data now what we need to do is that we want to be able to read and we want to be able to update so we're going to be able to read the database object and then we also want to update it so we're going to update it by incrementing by plus one the number of quotes that were generated each time that the function runs so we're going to select those two options with the space bar and then go down and then press spacebar and then you see that they're highlighted we're going to press enter and do you want to edit the Lambda function now we're going to say yes and then we'll press enter to continue and then it will be up here so now we're going to do is that there might be a little bit of a difference between what you were writing in your Lambda code and then what amplify and the CLI just generated for us so if you ever try to save this you might get an error where it says the content of the file is newer so what we can do is that we can compare and we see here that these were the Imports that amplify CLI wanted to add to our file but we had this code so something that we can do which is a handy shortcut is we'll press copy we'll copy this code and then we'll just we'll just exit out of this what we want to do is that we want to include this code into our file and not this so it will do is that we're going to say discard your changes and revert to the file contents so that button and now we see that these are the Imports that the amplify CLI generator for us and we can still you know bring in our code from before so what's awesome about this is that what amplify just did was it added these environmental variables so that we can pull from them and use them in our code and we don't need to hard code the table name or you know the Arn or the graphql API output we don't need to do any of that or the environment of the region we're able to just pull these in as environmental variables and this is the real power of building with a CLI like amplify because we're able to just work so quickly with our serverless architecture and really scale out systems without needing to second guess you know is this the right variable is this the right name we're able to just pull all these in pretty pretty quickly and also make sure that it is all code that is correct which is great so now to get these AWS packages this is how we're going to do the AWS components and then we're also going to have the image generation packages so to do the AWS things we're going to need the AWS SDK but just a handy thing to note is you don't need to do npm install AWS SDK this is actually a pretty big package and you wouldn't want to necessarily install that into your pack.json there actually is a scope down way in which the Lambda is actually able to know these different parts of the AWS SDK so you don't actually it's baked into the Lambda so you don't actually need to install it directly it'll just know when you call hsdk it'll just know what you need there are some exceptions though with certain services so you just might need to be aware of you might need to install you know AWS SDK slash client slash something just to get certain packages for certain services but dynamodb is one that we can already use that's baked into Lambda so we're going to do cons dot client and this is how we're going to create a new dynamodb client that we can work from so do new AWS Dot dynamodb dot document client and something that's also interesting about the um Amazon code Whisperer which I was using it was Auto it was already trying to auto complete the region but we don't actually need to do that because if we try to install um so basically because we're using Lambda with amplify the Region's already programmed into the Lambda so it'll know that we just need to install you know and run this specific AWS dynamodb document client and then it'll know that that's where that's what we're working from so now under the image generation packages we're gonna do cons Sharp and we can actually probably just copy some of these from before so we'll do here and we'll do cons Sharp and then also for fetch but you can copy that one so require node Fetch and then we are going to need to do those other ones so const path equals require path which you'll see later on when we use that and then const FS will require FS and I'm just going to make single quotes for all of these just to make it a little bit more organized great okay cool so now we're going to do is that outside of this Handler we're going to write our function that's going to update our dynamodb so we'll say function update dynamodb table for the function that we're going to write for our updating dynamodb table we're going to write an async function and we'll call it update quote dynamodb object and then we're going to have our const quote table name variable and that's where we're going to pull our inspirational quote table name and that's from dynamodb but this is how we're using our environmental variables to then call this so we're going to do process .env Dot that table name and that's uh environmental variable that was created for us by the amplify CLI now we're going to do quants quote object ID and that's where we're going to go back to dynamodb and we're going to copy that and that's where we're going to have a string for this value so we want to modify this specific object in our database and this is the database name now we're going to put a try catch and we're going to do catch the error and we'll of course console log error updating quote object in Dynamo and then we'll log that error so the actual code that we're going to be using is we're going to be using this params method to then update using a promise our dynamodb so it's already kind of constructing this value but we'll go through this together so when we do this we're going to do create a variable we'll call it quote params let's meet object so then there'll be a table name which we'll call quote table name there'll be a key which we'll call ID and that's going to be quote object ID then we're going to have an update expression and that's going to be a set and we're going to call this quote generated because that's going to be the value and we're going to make that equal to quotes generated plus a value that we're going to increment and that's where the Inc is going to come in then the expression at tribute value is going to be this so there's going to be an increment and that'll be one so we're basically taking this value and updating the update expression to then include a one so it's going to be the quote generated equals close generated already Plus 1. and these are going to be the same values so that will work great so now we're going to do is we're going to continue along we're going to say that there is an expression attribute names and then we're going to say quotes we can actually just copy this in case that makes that easier so quotes generated is quartz generated and then there's going to be a return values which is going to be updated new so we're going to be focused only on updating the new value every time that this runs then what we're going to do is that we're going to use this value this quote params when we're calling this Lambda function so we're going to do is we'll do const update quote object equals a weight because we need to await this function with your dot client dot update pass in those quote params into the update do you promise and then we're going to return update quote object and that's how we're going to be able to use this specific function in our Lambda script and then of course we're catching any errors where this doesn't work out that's great so now we're going to do is we're going to Now work on getting our code from code sandbox into our exports Handler so we can actually start doing the image composition as well but of course we can give this a save so we'll keep our console log for our event in there because we still want to track when events get created every time that we run the Lambda so now we're going to do is that we're going to go back to code sandbox and we're going to need this API URL because that's going to be important for when we use this inside of our event handler we're going to need to call the API random from Zen quotes then what we're going to do is that we're going to go back here and then we're going to take all of this code copy that we're then going to put that here so we're going to do generate the function generate so put that in there and we're going to need to make some changes here to how we're actually calling this because before we would just call this and then we'd be done but instead of generating an image we're going to need to generate this base64 string so that we can actually export that as a response and then the user will be able to see that so everything here is going to basically be the same we have our quote text we have our quote author we have our response which we're going to you know await and then fetch from the API input or here which is that and then we're going to need to pass that in so we'll just need to be cognizant of passing that into the function since this is the function that we're going to call but we put that we pass that in then the quote data is going to be some response.json and that everything else is looking pretty good right we have our SVG image which we're passing in we've already constructed this we know that this works but of course we're going to need to create some backgrounds because these backgrounds don't exist in the Lambda function yet so what we're going to do is that we're going to in our inspirational quote Lambda we're going to create a folder we're going to call it backgrounds and then we're going to copy those images that we already have from our assets folder which should be here but if you didn't already save them then we'll just need to open that up in our finder which you already probably have these saved locally and then I will just copy these and put these into here and now we have the file here so file here file here file here and then those become the backgrounds that we add so now when we call background images it's going to know that we're in here backgrounds and then it'll find those backgrounds in the folder so now we're going to do is that we are going to then go through random index we do all of those constructions that we generated before and we tested we know that this works and now we're going to do is that we're going to need to do a few changes here so this is where we're composing the image together we're going to need to make sure that we don't necessarily save it as an image but we're going to then save it as a string so we're going to do is that we're going to we we have the time stamp but we won't actually really need that anymore because we're not going to be using the timestamp but we are going to create this image path so this image path is going to be not necessarily the file right we're going to be creating an image that is a string and then we're going to pass that out so we're going to do path dot join TMP and that's for temporary storage so this is how we're going to be able to pass this string or this this image into our script next up what we're going to do is we're going to give this quote card.png and what we can do is we'll still have this that SVG is still SVG buffer is still there but we're really focused on this image path that's going to really be like the next part and you know we still sort of have that that image construction from before but we can kind of pass this up so I'm sort of doing a little bit of organizing here just so you can see what the elements are that are really important so these are really Legacy from before and then our new Focus we're focus on is this path.join now we're going to do is that could actually see how that was connected there but now when we do image path what we're going to do is that we're going to do image we're going to do composite do SVG I'm going to say instead of finals quote card timestamp we're actually going to do image path so you can see how like that applied to the other ones before but why we have it here is that we're taking this image path in temporary storage we're then going to put it with the image path and then what we're going to do is that we're going to do some updating to our Dynamo and then also run this response as the output so what we'll do is that we'll do update basically function update dynamodb object in table and then we'll do try and catch our we'll say unquote this that looks good and now in our try catch we're going to do update quote Dynamo to be object and that'll be a function and then we're going to return this as an output after our try catch so after this try catch with the error we'll then do that and we're going to be turning some code so we're going to turn status of 200 we're going to have some headers and Access Control allow origin we're going to want this one I'm not going to need headers for this but what we will need is content type and that's going to be image.png which is the type we expect and then after headers can do some formatting here now for the body instead of it being this we're going to need to do FS dot read file sync the image path and then we'll say two string and then this is where we make it a base 64 encoded string and then we'll say is base 64. encoded and we're going to make that true we close that out we do that and then we're going to say return I'll wait get random quote API URL and that will round out the rest of our landscript so let's go back and unpack really what we're doing here because this is like quite a lot of things that we are changing we're updating so we have this function here and we'll just close this out just so that we can see that so we have this function in here and we have this API input so what we will do is that given the series given this input into a function we want to fetch this random quote and then use that in our in our quote card so when we take this we basically pass this in and here and then that's where we're going to be then this function is a construction of two different functions which is hey make this quote but then also update Dynamo and that's why we're running this because this is going to be important for our script and we get that function up here so it has all of this code here and then that's what we're going to be updating so now when we run our exports Handler this is going to be all of the code that we run and we have our backgrounds we have all of these things and also just to go through some of this timestamp some of this SVG buffering so when we have SVG buffer we want a buffer from the SVG image that's what we had before but then we have this image path where we say path.join we put it into TMP and then we have quote card PNG as the name then under const image we're going to await with sharp the selected background image we then composite with the input is the SVG buffer and then that's how we're constructing it and then we say to file path which is image path and then we're going to be doing our try catch which is going to be updating our dynamodb object and then we'll of course catch that if there's an error updating Dynamo and then we're going to return a status code of 200 with the headers that we expect and that's going to be content type of image PNG which is that's how we would be getting this base64 string and in the access control allow origin is that and then in the body which is going to be some Json we get back we're going to have FS for read file sync which is going to include that image path we're going to put that to string and that's going to be base64. and then we say is basically for encoded meaning true so that we know that this is what the response object is going to be and then we're going to return a weight and we're going to get random quote with the API so that we're able to fully construct this script and get it to work so that's going to look great when we actually have this running live and now what we can do is that we'll give this a save we'll then pull up amplify status and now we're going to do is that we're going to check this out we're going to see that this function that we're working on has an update operation so now we know that we're able to push this so we're going to do amplify push and this is where we're going to be able to update our cloud formation stack with this change and we're going to say yes and now it's going to update our cloud formation stack to update that function and then our Lambda function our Lambda script will be updated in the Lambda console in AWS for us using our cloud formation stack updates all through the amplify CLI so I'm going to pause recording and then I'll resume it when the function is updated so that really didn't take very much time at all I think it took maybe a minute it actually might have been actually less but now we have all of our you know function updates that are needed and especially that resource permission between our dynamodb table and Lambda so now if we go back to Lambda console and we actually go and search for this function we're going to see that this was updated three minutes ago which was what we just did so we're going to click on this and now we see that this is the function that we're going to be working from also something that is just interesting to note is when we updated our permissions for our function we were updating our execution role for our Lambda function but now we have this resource for Dynamo so you can also look at buy action or you can also look at by resource and I think that this is helpful to see where now we allow access to get or update and that's something that our Lambda function now has access to and you can see these maybe a little bit better but these are all of the functions that we're able to then call or the resources permissions that we're able to call such as listing or getting or updating and this is why we're going to be able to update our dynamodb table because we added that permission to allow Lambda to speak to Dynamo so this is just helpful to think about when we have this Lambda script what's actually happening in the background which is great so now we're going to do is we want to configure a test because we want to see if this code actually worked so our code is going to be too big to see because when we when you start working with you know Lambda scripts and um and functions sometimes you won't be able to see the code because it's just like there's just too much for it to to show in the online editor but we already have the code locally so we know what it's doing so we're going to do is that we're going to create a new event to test this and see if we can get that base64 string to export so we're going to say hello Bass 64. and this is going to be a private event and we just need to really pass in something we don't really need it to pass in anything we just need to be able to invoke it so we'll do is that we will save this as a test oh and we'll get rid of that that comma and I'll be able to save it so now we can start running we go to test and this is where we're going to be able to be testing our Lambda script and see if we can get back a response so we see that something happened with sharp and it did not like something that we installed so this will actually be a good opportunity for us to then go and see what's actually happening with sharp and the package so that we can actually debug this and fix it so when you see these errors this can be very helpful because Lambda will try to give us some helpful data back about what's actually going wrong so it's saying that it can't find the module for Sharp and it requires some elements here so what we're going to do is that it'll give some possible solutions such as logging install this this all this but something that actually I think is a little bit sometimes more helpful instead of getting the the log here is that what we can do is we can go to monitor we can go to cloudwatch logs and then we're going to be able to actually see where our function is breaking down so with cloudwatch logs this is a really really helpful tool for checking out when your functions are running or you have processes in AWS and you need to see basically what's going on you can click on this and then it's going to give you information on what actually is is happening inside of your function so what we see is that we see this undefined error where it says something was wrong installing the sharp module and it can't find module sharp Linux this so there's actually a very interesting way in which we're going to need to install sharp for AWS so we're going to switch back to our Lambda script and we're going to open up this package.json and we're going to actually explain how to install sharp in a way that can speak with Lambda in the Linux environment that it's expecting to get the correct package of sharp that we're going to need for our Lambda script I'm on the sharp dot pixelplumbing.com install and they have a module on high performance node.js image processing and it talks about for serverless ES build you need to make sure that you install with this correct Arch x64 and then platform Linux sharp command so this is going to be important because when we just install sharp normally it has its own configuration but we need to make sure that we install this in the right way so that when we use our Lambda server this environment will actually be able to understand how to use sharp because that's the real issue that we were getting was we didn't install the right version of sharp for the environment that we need so the way in which we're going to fix this is we're going to do npm remove Sharp but we have to actually CD into that folder so we'll press clear we'll do CD we're going to drag and drop Source folder LS and then we see that we're in the right space which is great so now we're going to do is we're going to do npm remove Sharp and that's going to remove that package in the dependencies list now we're going to do if we're going to do npmi we're going to do dash dash Arch equals x64 and then we're going to do dash dash platform equals Linux and then we'll install Sharp so we'll install that and we'll wait for the package to install correctly and now what we'll do is we will X Out of This terminal and now we can do is we can do amplify status and if it doesn't register any changes because it might just see that sharp is the same and it's all installed correctly so what we can do is that we can just go back to our function we can literally just add a space we'll press save and then we'll run that again and we'll see if it's registering so that's just an easy way where if you add you know changes to your package.json you can still then just add a space save it to the Lambda function and then they'll be able to register and update something also that's important that we're going to need to do is we're going to need to bring this backgrounds folder inside of source so we're going to move that in there and now under Source will be able to reference these files relative to where we are so that's where we'll be able to then go back up to backgrounds and then pull these images down so this is also one of those examples where we are able to you know make some changes that are similar to code sandbox like before we could just have this backgrounds folder free floating but we actually need to put it inside of the source because we're using that inside of this index.js file so we're going to do is we're going to now once we've made those updates we'll do amplify status and our photos updated we'll do amplify push and then we're going to update our code with the file construction and then also with the changes that we made to the script and then we'll be able to test in Lambda once more to see if we're able to generate that base64 encoded string and send that as a response outside of the Lambda so now that our cloud formation stack has been updated once again we are going to go over to our Lambda function we're going to refresh it and now we're going to do is we are going to go to testing and we're going to run this test again and we're going to see if this worked so we see a much better message that we got this working okay so now what we're going to do is we are going to check this out so we got a status quo of 200 we got an image PNG and we got you know basically this response object that we were supposed to get and then we have a body and this is the super super super long string of our base64 encoded string so we can actually check this out by testing it and seeing if it's giving us a new a new code a new quote so we're gonna do is we're going to give this a copy we're going to go back to our front end we're going to close that terminal window and then we're going to go back to where our image blob is so in this previous example we had a body here now what we want to do is we want to add this here and we're going to basically do the same thing and we're going to see if we can get this to show that still says null so then we're going to go back here and we're going to see if we can get a new quote and it looks like we did but we're just going to test this anyway we're going to see you know this is the loading State there okay so this is great so we have our new quote there and that seems like that's working and we can try to do this one more time and see if it's going to give us another quote so we can do another test coming up to the top and looks like we'll get a new quote here so we'll go back here we'll go back and we can actually move some of that stuff around we'll close this out we'll then say body and then add quote there we already have a quote at the end of that and this can just go to the end of that and we'll do blob and looks like we got another one so that's great and then let's see if we can get just another image with another background just to see if that is working so we'll do another test it looks like the max memory was used so we're going to try going again yeah so it seems like that's all working great so we'll do another test we have our next image here we'll copy that bring that over to the front end and we'll do the body again and we'll do quotes put a comma behind there and we'll do that again we'll save that and we'll go to our front end alright great so we are getting you know a random background assigned and we're getting random quotes with the text the author our footer and our image so this is working great so now we know that we're able to take our Lambda function generate the base64 encoded string and then pass that back in the front end you know using you know the buffer method and then we turn this into a URL and another test that we can do is we can open this image in a new tab and this is actually going to open up so now we can do is we can refresh this old one and now this one actually doesn't show up anymore and that's because every time that we basically invoke this function we're removing this old blob URL so that's what's helpful where when you fetch this new item we're adding this in and that's why we can refresh this one because this is the active one but as soon as we were to replace this body and then add a new one this one won't exist so the image might get generated but it'll be a different ID and then it won't work and we can actually test this where let's say that we refresh this then we try to refresh now we actually don't see that anymore but this is going to be in a different one so you'll see that there is a difference between those IDs and that's why this one when we refresh this is the active one and we're able to see that but the old version we don't have that anymore so this is great so now we know that our Lambda function is able to generate this string the base64 encoded string we're able to decode that in the front end and now really all that's left here is that we want to tie up this Lambda call so that we're able to then get that response dynamically passed into our application we're going to switch out the quote and we don't need to keep setting it manually every time we can just programmatically have that working in the background and then display that for our users in the front end so let's do that right now so now that we have this function working to be able to take this string and then turn it into something that our users can see let's actually go back into our application and see what we got so if we refresh the page I'm sure you'll see that we get this quotes generated number and it's not zero anymore now it's changing so if we try to do this one more time we try to test it we'll be able to get a new value right and now if we go back to the front end if we refresh that number should before so let's see if it did that because we tested it and we did the same test we might need to run the test again so if we do test again try refreshing and now we do that so just if you are running through this just make sure that you refresh your Lambda you run through the test if you do that again now we refresh here now you get five so you'll have to refresh the Lambda every time to run the test but then you'll be able to get that working so that's awesome so now we have our Lambda script that is updating this dynamodb table every time that it runs so this is that event driven architecture where we don't have to manually update the database it's already doing that every time that the script or the function is invoked and executes correctly so that's great so now that we have this now what we're going to do is we're going to take our our image blob and we're going to pass down so instead of The Blob URL being set inside of this component we're actually going to be setting this outside of it through a fetch function so what we do is that we're going to be creating a function to get that quote string and then we're going to be able to bring that into the front end so and then use typescript to decode that string but we need a function that we can call publicly to think at that data point if you remember from the beginning when we set up our handle open generator function we had a try catch and we set that set timeout function and then we said that we're going to add some Lambda function code later but we weren't going to do it right now well the moment has arrived so what we're going to do is that we're going to be updating this function to then call our Lambda function and the way that we're going to do this is actually in a pretty crafty way using our API so we can just unpack this really quick so when we have our query here so we have this generate a quote query we're going to pass in some AWS Json and then as that input string we allow Public Access via IM to then run this function which is inspo quote Lambda so what we're going to do is that we're going to run this query this custom query to then run this Lambda function so in this code what we're going to do is that we're going to have a variable called const run function equals run function so it's going to be a string we're then going to stringify that value so we're going to do run function stringify equals Json springify and then we're going to add that value in here then we're going to do is that we're going to take a response of response equals a weight and then we're going to do API Dot graphql and then we're going to have a generate a quote test data quote data and then that's where we're going to start creating some autocomplete stuffs happening there we're going to start working on our query so we're going to do is that we're going to say for query we're going to say generate a quote and we can rewrite the last letter and then it's going to import generate a quote from our queries we'll then say auth mode is AWS IM then for the variables as our input we're going to put our run function stringified as that value and then we will do that we'll log that out and then what we're going to do is that we're going to try to stringify that response so we're going to do const response stringified equals Json stringify we're then going to restringify that response which is this value there then what we're going to do is we are going to do kant's body index equals response restring ified index of body equals this plus five on the next line we're going to have our const body and base 64. equals response stringified substring body index so overall what we're going to be doing is that we're going to get a response but it's going to be a lot of Json data what we're going to want to do is stringify it and then we're going to basically find where body equals this and then extract the string and then that's where we're going to have that element that we have in quotes we want to extract that from the response that we get so that's why we're doing all of this string manipulation to get to that value so then we need to get the body array equals body and base 64 and we're going to split it right there at that comma then we're going to do is we're going to do const body equals body array we'll get the first value of that and then we'll do console log body then we're going to set quote received as that body value then we're going to take out our set timeout because we don't need that anymore but I'm going to end state which is set processing quote to be false and this is because in the beginning we set processing quote to be true so now since we've gotten the response we want to set it to be false and then we also want to fetch with any new quotes for our generated from counter so then we'll do update quote info just as a function to catch for that so now this seems like a function that we'll want to do but of course with typescript we're going to need to create these props so what we're going to need to do is as I'm sure you've guessed it we're going to need to generate an interface so we're going to do is that we're going to create an interface and I'm going to put this above we're actually yeah we'll put that above so we'll say interface for our appsync 2 Lambda Json response so interface generate a quotient data then we'll do this that we're going to do generate a quote and that's coming from this value will then get a status code which is a number we'll then get headers and in this array we're going to get a key which will be a string and then that itself is a string and then the body is also going to be a string so that should log out exactly what we need so now we're going to do is that we're going to give this a save and then every time that this function runs we're going to hope that we are so in that function that we we just created right so in this try catch we get a response we want to be logging this body so the body is hopefully going to be that really long string that we usually put in quotes manually we want to be able to set that here so we want to see if we can log this and if we can log this we'll be able to pass this down as props into our child's component and then render that image dynamically so let us see if we're able to do that so I'm going to open up the console and I'm going to give this a refresh and then we're going to make a quote and then every time that this runs looks like we got it okay so we still need to work on the styles with the state but if you see this this looks exactly like r basic 64 encoded string that we would usually get so this looks awesome so what we're going to do is that we're going to just remember these characters and also just give a check just a gut check just to make sure that this actually is in fact giving us different values here so what we do is that and we also see that this is going to be increasing which is going to be great so now what we want to do is that we just want to check to see if this is going to be the same value or if it's going to be different so that's IB you are w oh yeah so it's a little bit hard to tell but it looks like right now we are going to be able to get the different values for our images but we'll still want to check to make sure that that actually is the case so just go the scroll back here so what we're going to now do is we're going to scroll down and in here under quote modal we see that we're going to be set processing quote as set processing quote quote is received there so we're passing down these properties into our component now we're going to want to do is we want to make sure that the quote received is actually a part of that now when we go to the image blob URL what we're going to want to do is we're going to want to of course remove this because we're going to be getting the blob URL outside of that so now we're going to do is that we're going to hide a lot of this code here just to make this easier we're gonna comment out all of this code like all of this code because we're already doing this outside of the function and we're not going to need it in there and then we'll comment this out because we're going to be passing that blob URL down through our image blob now something that we're going to need to do is it's going to say that there is a type error with quote received so we're going to try to find out what's up with that so now if we make this string or we make this null we can see if that will get rid of the error which it did so that's good now what we're going to want to do is in our check so we had that image blob URL which will give this a save there is this and we want to make sure that so remember when we were doing this testing so if Court received is not null meaning there is a value that's filled with it then we want to show it here so what we're going to now do is we're going to go back to our application we'll give this a refresh and we're going to see if we can call this so it's generating a quote and look at that so now it's working and then if we click out of this if we try to make another quote so now it's going to be making a new one so now something that I do want to do though is that let's make it a little bit cleaner of every time that we fetch because we still want to make it look a little bit smoother and I think that we can do that so what we're going to do is that we're going to go back to our function and what we're going to do is that we want to update some of these states to then refresh and clear out the quote so every time that you you clear out of or you click out of the modal will then be changing it so that it'll show creating your quote every time that a new quote is being generated as opposed to just switching in the image it's great that we have the image but we want to make the front end look a little bit more like it's generating the code than just the quote appearing you know kind of out of thin air so that's what we'll be doing next to fix that close function so that it looks a little bit more programmatic we're going to need to go back to our parent component and then open up the handle closed generator function and we're going to need to add a little bit more data to this so before we originally just setting the open generator modal as false so that it would close it but now what we want to do is we want to when we close the modal at any time we also want to set the processing quote to be false and then we also want to set quote received to be null so this is how we're going to set it where that type where we configured it before where it's either a string or it's no well anytime that we close it we want to set basically this modal to be false the processing quote you know the loading state to be false and then we also want to set the quote received to be null so that means that there's nothing in the quote received there's nothing for the blob URL to be showing we want to make it where there's nothing there so the way that this will work is that will refresh now when we make a quote we're going to get that loading state get that loading State and then we'll get that image and then that works like an image and that's great and let's actually open this up in a new tab these other ones we can close out of and then when we close this out we'll make a new quote and now it's going to reload it again and now we have a different image and let's open that up here so we have these two images but if we refresh this one that was the one that we we first called and this is the one that we just got so we're gonna refresh here and then still same deal let's make a new quote and then we have a new one so let's open up this one here and let's open up a new one and look at that so we have all these different images here and it's looking pretty good so far and of course we get the data this is all mapping against and uh against these updates to the function and if we make another quote we'll get that 12. so the data is also incrementing we also are getting all of the quotes generated and this is all happening without any sort of storage any sort of you know images being stored in cloud storage these are all just strings that then we decode in the front end so that you never have to worry about scalability concerns it's that it's sending the exact data that you want from your Lambda function to your user in the front end so this is a really cool way where you see how the backend code can connect to the front end and you can have a pretty cool working application and I'm sure you're wondering with that awesome download your quote button does that actually work and does that actually let us download our quote that we just received and it actually does so if we press this button we'll be able to save this to a folder and now if we open it we'll actually be able to see that and what's really cool is that this is a real image so we have text in there and that's where we're actually able to click on links and this is a real working image and let's say that we wanted to do another one so we generate one right there and now if we download this quote it'll already start you know making it where we'll say quote number one we'll open this up and check that out and now we have another one so again really easy really cool way to just add more functionality to your images that you generated and allow your users to also you know you could copy or save this image yourself you could also open it up in a new tab or you can also allow users to download that file so they can save that right to their computer and it's with that blog URL that was generated from that base60 for encoded string so as we review our application everything seems to be in order based upon what we're expecting and all the features that we're hoping to have as a part of our application so we'll refresh this again we'll make another quote and seems like everything is working as per we would expect which is great and we have the download button we have this we can you know make a quote generate a quote our dynamodb you know quote generated number is operating effectively so now we're going to do is we're going to take our localhost application and then we're going to put this right on the cloud with AWS using AWS managed hosting so one thing before we do that that'll be really important of course for us is to make sure that all of our code is saved so you don't have any anything left over in terms of code being need to be saved so we are going to of course just make sure that our amplify doesn't have anything that's impending for us to push to the cloud so there's no change there's no change there's no change which is perfect so that means that we are all set to commit this code locally so we're going to say finished build and we'll say finish local build so we will Commit This to Maine we're going to push this to GitHub and now now the fun stuff now the fun part begins so now when we have this main branch so what we're going to do is that we're going to and I'm going to draw this out just so that it is a little bit easier to see so when we have our GitHub so this is going to be GitHub and we have code here so this is related to our project so we have Main and that's the current build that we have so we have code code goes into GitHub and then that's stored and then we have all of this you know state right so we're tracking all these things but what we want to be able to do is that we want to be able to have a methodology where you push code it's given this prod characteristic that's going to go to GitHub and then GitHub is then going to run a build in AWS so AWS this is our cloud so that we're able to then have our code go on the production Branch go to GitHub GitHub isn't going to speak to AWS and then we have our www website that users can see when they log on and that's where AWS is going to be creating this website for US based upon the code that we come in because right now we're just managing you know git history and that's great but we really want to be able to do is commit to a specific branch have GitHub tell AWS to commit that code to a build and then we're going to be able to use that and we're going to use AWS amplify with managed hosting to be able to accomplish that goal so let's see how to add amplify hosting to our application to add hosting to our AWS project we're going to say amplify add hosting to our CLI now we see two specific options one is hosting with amplify console and that's managed hosting with custom domains continuous deployment and then the other option is Amazon cloudfront and S3 so we're going to choose amplify console for manage hosting because they also have support for serverside rendering and that's going to be really important for our application to be able to work dynamically and leverage all of the features of nexjs and typescript so then when we configure a type there are basically two different types there's continuous deployment which is git based through GitHub and manual deployment so we're going to choose continuous deployment now what we're going to do is that we're going to need to configure our AWS project so what we're going to do is that we're going to go back to amplify we're going to go to hosting and this is our application this is our app we're going to go to GitHub and we're going to press that we're going to press connect now we see that GitHub authorization was successful and unless you've connected this GitHub repository to your amplify project before in this drop down you won't see your repository so what we're going to do is we're going to go to view GitHub permissions and we're going to go to and now what we're going to do is that we're going to scroll and we're going to select the repositories that we want to be able to access so for this we're going to find the inspirational quote generator which is our first quarter repository there we're going to press save we'll see that AWS amplify Us East one was updated for my account now we will go back to so we'll go back to our AWS amplify project we'll press GitHub to reauthorize now in our list of drop downs we should see this right at the top and for main that's our current Branch but something that we're going to do is we're going to be a little bit fancier so what we're going to do is that we are going to in our GitHub desktop application we're going to create a new Branch we're going to call it prod and this is going to be our prod branch that we are going to configure so any pushes any commits that are made specifically to the production Branch we're then going to run a build on that so we're going to publish this branch and it's based off of Main and then we'll bring this away refresh the the actual page so we might need to run this one more time so we could use your previous press continue find our code repository there and now under Branch we should see prod there so now when we see prod we're going to click next and when we click to this next screen we're going to see the app name which is our amplify app name it's already Auto detecting that we're using next.js with serverside rendering which is what we're doing and we also are going to be using the amplify framework for our back end and what's really great about amplify hosting is that it's already preconfigured for the serverside rendering that is uh basically I think one of the strongest features of the next JS with typescript framework for building apps so this is already preloaded with that which is awesome so now as we scroll down we're going to select backend environment to work with this so inspirational quotes which is this app we're going to enable full stack continuous deployments with CI CD so that means that when we push to prod we're going to then be running a build and we're going to be using this Dev environment now something that you could do is that if you wanted to create new environments based upon your Cloud backend you could have a production Cloud Branch similar to as we have a prod Cloud branch that we're just using Dev just because we're just building this app but if you wanted to make this more robust you could have different types of cloud environments and then switch between those in your builds in your testing in your local you know development pipeline so just really good ways to Leverage The amplify framework for your whole team's development but we're just going to be using the dev Branch because that's what we configured and then we're going to select an existing role or create a new one so you could create a new role if you don't already have one configured but I already have an amplify console backend rule configured so I'm going to use this one and then what we can do is that we can also just check out what the build and test settings are so when we have our back end we are going to have some phases and in our builds we're going to use the amplify push simple script and that's just executing amplify CLI and then what we're going to do is that we're going to run through a prebuild which is I'm going to do npmci for getting node modules and then we're going to use this build commands to run our the build of our application because we're using xjs this is going to have as our export dot next folder and then we're going to be looking through the files of that to build our project and then of course with caching related to node modules this is an important step to make sure that you know your caching known modules and not you know keep installing them or keep adding to them over time but you could actually cache them and use them in subsequent builds if nothing is changing with your packages so you could also configure advanced settings as well and this can become really important when you're working with containers and with Docker so you could actually reference your own build images or use amplifies default build container so more you could learn more about this if that's something that's important to you in terms of containers and um you know really just building you know some sort of kubernetes deployment uh infrastructure um you can also add environmental variables in case there's certain branches that you want to work from there's certain environmental variables related to maybe API calls that you're working from or certain tools or infrastructure so just important to know that you can do that from this screen as well and then also we are you going to be using the amplify cli's the latest version this is actually really important because if you ever are running a build and you get an error related to maybe the CLI what you can do is that if you have previous builds that have worked you could revert back to the previous amplify CLI version this was actually an error that I had experienced and needed to revert back temporarily to a previous amplify CLI version and that was able to help me get over that barrier to use the right CLI to deploy my application so if this all looks good we'll click next and it's just going to have us Recon reconfirm all of the settings that we've selected so again we're using GitHub this is the application that we have worked on together we're going to use the prod branch in GitHub we're using the dev Branch that's the cloud branch and we're going to be using the default image this is our Dev Branch environmental variable of course we're using next.js with serverside rendering and amplify and it's Auto detecting these settings that will be used so as soon as we click save and deploy it's going to run through this build process to show how we can build our application to the cloud we will press save and deploy and now what it's going to do is that it's going to start running through these stages of our build pipeline and it gives us a nice graphical user interface chart of where we are in the process so what you can see here you can get actually a lot of really interesting details related to each stage and we'll be able to see how it's provisioning the docker image it's on a host with four V CPU and seven gigabytes memory and then it says that each build image gets its own host instance ensuring that all resources are isolated and the contents of the docker file are displayed below for your information so in case you want to see more of actually how this is provisioning our application you'll be able to see all of this which I think is actually really helpful to see how they're building the application in the background because it can become a little bit nebulous as to what's really going on now it's going to start cloning the repository from GitHub and this is a private repository so it is a secure connection to be able to get access to this build and then there's going to be a series of different steps that it will take from build to test to deploy and then that's how we'll be able to get this working now when you use amplify it's going to configure a branch name dot a number of characters dot amplifyapp.com so if we click on this and we open it in a new tab we're going to see something that looks like this so it's going to say that your app will appear here once you complete your first deployment so this is just going to be a placeholder you know index.html file until we're able to build this out and we're already getting some errors from here so we're going to need to figure out what's going on here and it seems like what ended up happening was so we can go through this set package Lambda failed with error command Fields exit and Pim install production omit Dev instead so there's going to be something related to inspirational quote Lambda known module is sharp that it did not like so this is where we're going to need to then go back and rerun our application because it seemed like it didn't like the specific package that we needed for our Lambda script so this is where we're going to need to figure out basically how to navigate this so we'll do that in the next step but if you also want to download the build logs you can also do that too and that can be helpful but sometimes also if you ever get any errors you'll need to then go back to the drawing board and see basically what went wrong and then figure out a solve so that you can get it to work so if you remember that we installed the sharp package in a very specific way when we were back in our code base here what we're going to need to do is that we're going to need to basically do that same thing so when we installed sharp with this specific version we also added a Linux version and we also added a uh x64 architecture uh flag so those were that was the arch flag and then the platform flag for Linux so we're going to need to make sure that we do that in our package.json and then in our build script we're going to need to make sure that we edit that as well so I'm back in the function so this again is under back end under function and then under package.json we're going to need to install uh have an installation script that we can then add into our application so under Main something you can do is you can say Scripts we'll give that an object press enter and then under here we're going to say install Sharp then we're going to say npm and PM install we're going to do dash dash Arch equals X 64. and then we're going to do dash dash platform equals Linux and we'll say sharp and then this is going to be a script that we will incorporate as part of our build script so then we're going to go back to the amplify dashboard we're going to go to our build settings and we're going to edit this and then you'll see here when we are trying to execute amplify CLI with the helper script so what we're going to do is that we're going to install a specific script for that function that we just ran so when we do npm run install dash dash Sharp with the prefix then under amplify backend function in spokote Lambda SRC that's where we're going to then be running this installation for that specific sharp package that's in our source then we'll do the amplify push simple command and then we'll be able to run our build related to that so we're going to press save now what we're going to do is we're going to go back to our function and then we're going to do amplify status and we see that there is a function that's updating and there's the hosting that's updating so we're going to do is we're going to say amplify push and then that's going to push our install Sharp script there to the cloud so we're going to be configuring that and then R amplify push command will be running to update our cloud formation stack and I will pause this recording and then resume it when all the resources are pushed to the cloud and then we can run a build again so now that our code was pushed to the cloud something that we can do is commit directly to production and something also that we can do is we can switch to the main branch and we can say bring my changes to Main we can say we'll switch branch and now we're going to do is we're going to say updated Lambda install script for built we'll Commit This to Main we'll push this and now what we're going to do is we're going to go back to our GitHub repository we're going to go to pull requests and actually we could just go back to code and just validate that the code was just pushed so we'll do refresh and we just committed code literally just a moment ago so we'll go back to pull requests we're going to do new pull request we're going to do Main and then we're going to push to production so that's the before this is the after so we're able to merge that we're going to create and this is the script the um the GitHub commit that we just made so we'll do commit to this we're going to create pull request and then we'll merge the request and we'll confirm merge and now if we go back to our amplify project we should be able to see that we now have a build running so this is a really cool aspect of CI CD is that as soon as we committed to the production Branch we now are able to have a build running to then build to this URL so now it's going to go through those same processes this is build number two and now we're able to see that we're able to go through the provision stage and access all of these same steps that we had before except we don't have to really tell the application to or the configuration to do anything it's already going to start building our application because we set up the CI CD rules for it so now when we go to this build it's going to be cloning our repository once more and we're going to wait until it can start configuring our application so we'll just have to wait until this build continues and then we'll be able to keep watching for it but it seems like it's done with the amplify CLI and now it's going to go to the back end so now we're going to see if that back end patch fixed our build error so the schema was compiled successfully we're now going to be updating and uploading those files and we're going to be waiting for a success marker about if the Lambda was updated so so far so good seems like there's the update that's in progress and it's going to be checking to see basically those changes that we worked on so we have our update in progress and this is just going to be configuring our stack there's also some elements of appsync that look like they're in there so we'll just wait for this to configure and go through the build process so now it's going to be continuing to go through and uploading the files and looks like our API worked great and it initialized the environment successfully and we were able to complete the builds process so that was awesome that we were able to configure this correctly and that push was able to solve that build error that we got so now it's going to start in this next phase which is the front end build it's going to be taking our code that we just pushed and this is really important because when we are pushing backend code and frontend code we want to make sure that the back end and the amplify framework is compiling everything successfully so that we can then build everything together because the front end is dependent upon the back end working so now that our back end was able to be built correctly through that patch that we put through now we're able to then make sure that our front end works which it will so now it's going to be generating the static pages and then it'll also be adding in the server side renders for serverside rendering as well so now it's creating the cache artifact and uploading the cache artifacts and the caching was complete the environment caching completed as well and now it's going to terminate logs and then we should be able to have a living breathing URL momentarily so this is exciting so this is where our application is finally going to be able to be pushed to a actual URL and we'll be able to take this off of localhost and push this onto a domain that people could use and you'll be able to send this URL to you know your friends family your colleagues anyone that you want maybe a potential employer and this is an application that you could share and show that you built it this I think is pretty exciting so now that we have our deploy script set up we can go back to this URL and we can see if it built so we'll give this a refresh and we'll wait for our app to load all right so this is pretty exciting this is the application that we built and the Styles seem to be working there we can also check to see if it works so let's make a quote it's going to be generating a quote and look at that so this is our actual script and we're able to run it now on an actual domain in an actual URL so we can also you know download that quote card if we wanted to and this will work the same way and if we wanted to do that we could see that here and then this is that quote that we got so everything seems to be working completely and this is going to be updating as well we'll make another quote and this is another one 18. we'll add another one 19th quote that was generated and these are all real images that we are fetching and of course this is still using our local storage with our blob URL so we can test that again so let's say that we want to make another quote so now we'll open this up in another tab that was one we just did we'll refresh this and this of course doesn't exist but this one still does and then if we make another quote we'll open this one up that one won't exist but then this one will so this is pretty awesome so this is now working and we have a fully functional application that is running so if you want to you know build Graphics in the cloud you can totally do that and this is an application that shows that this is all possible all right congratulations you just built an inspirational quote generator and we did quite a lot of stuff so we configured a nexjs with typescript and style components application we created our own API we created our own serverless infrastructure to generate an image and we also created a processing system where we're able to create continuous integration and continuous deployment from our code to our cloud and deploy that live with a real URL and created a whole application to support that whole workflow so I hope that this project was really insightful and helpful for you and I would love to see uh you post about what you're building on social whether it's this project or another project I'll include my handle it's Brian H huff and I would love to just you know hear what you're building and I'd be happy to support you in your journey building full stack applications microservices and anything on the internet internet so with that I hope you have a great rest of your day afternoon or evening depending on wherever you are in the world and I hope that you continue to build really cool technology all right take care everyone bye
