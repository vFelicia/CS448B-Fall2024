With timestamps:

00:00 - the napstack problem is a classic
00:01 - optimization problem in computer science
00:04 - it's often used to help teach dynamic
00:06 - programming and greedy algorithms this
00:09 - is an important problem to understand
00:10 - especially if you plan on interviewing
00:13 - soon for a programming job in this
00:15 - course Gavin long will explain the
00:17 - problem and show how to craft an
00:19 - efficient solution using c-sharp Gavin
00:22 - has created many popular courses for our
00:24 - Channel and he's also a free code Camp
00:26 - team member let's start learning hi
00:29 - everyone I'm Gavin long
00:31 - look I'm in trouble
00:34 - I've recently been asked to leave my
00:36 - apartment by my landlord
00:39 - he says the neighbors have been
00:41 - complaining about me causing noise
00:43 - pollution
00:44 - [Music]
00:51 - [Music]
00:57 - [Music]
01:05 - thank you
01:10 - the bottom line is the police are on
01:12 - their way
01:13 - to forcibly remove me
01:15 - so I need to grab as much stuff as
01:17 - possible and cram it into the snap sack
01:20 - here
01:22 - and leave as fast as possible the
01:25 - problem is I've got a lot of stuff
01:34 - so which items do I take with me
01:36 - I need to take the most valuable items
01:38 - so that I can come up with the money for
01:40 - a deposit for a new apartment
01:44 - but I can only realistically take a few
01:46 - items
01:48 - in the snap sack I don't even really
01:50 - know what a knapsack is
01:52 - so I guess this is my knapsack okay
01:56 - it's kind of a rucksack knapsack
01:58 - whatever it's a sack so the bottom line
02:01 - is I have a knapsack with a finite
02:03 - capacity which means I can only take a
02:06 - few items with me
02:08 - so I need a way to fit as much value as
02:10 - possible into my knapsack
02:13 - this is called the knapsack problem
02:16 - luckily I've been kicked out of a few
02:18 - apartments in my time
02:19 - so I'm very familiar with the knapsack
02:21 - problem
02:22 - so
02:24 - I have a solution to the knapsack
02:26 - problem which I'm going to share with
02:28 - you before the police come and cart me
02:30 - away let's get into this video
02:33 - in this video we are going to create an
02:35 - algorithm using C sharp to solve the
02:37 - famous zero one knapsack problem
02:41 - let me briefly describe the problem
02:43 - so we have a number of items in this
02:45 - case four items
02:47 - each item has an Associated weight and
02:50 - value
02:52 - so for example the first item weighs 8
02:54 - kgs and has a value of fifty dollars the
02:58 - second item weighs 2 kgs and has a value
03:00 - of a hundred and fifty dollars
03:03 - the third item weighs 6 kgs and has a
03:05 - value of 210 dollars and the fourth item
03:09 - weighs 1 kg and has a value of thirty
03:12 - dollars
03:12 - the problem is
03:14 - we are trying to decide which items to
03:16 - include within a container that can only
03:19 - hold a certain amount of weight I.E the
03:22 - container has a fixed capacity
03:25 - so in this example our container will
03:27 - only be able to hold 10 kilograms of
03:30 - weight
03:32 - so this is called the knapsack problem
03:34 - but in this video I'll refer to a
03:36 - container in place of a literal knapsack
03:38 - we are trying to maximize the total
03:41 - value that can be included within our
03:43 - container
03:45 - our code needs to consider each of the
03:47 - relevant items and decide as it were if
03:50 - the considered item must be included in
03:52 - the container which can be represented
03:55 - by a value of one or the considered item
03:57 - must not be included within the
03:59 - container
04:00 - which could be represented by a zero
04:03 - when we first look at this problem it
04:06 - looks really difficult
04:08 - if our code is considering each item and
04:11 - making the decision as it were to
04:13 - include or exclude the item
04:15 - the total number of potential Solutions
04:18 - is 2 to the power of n in this case 2 to
04:22 - the power of four
04:23 - because we are dealing with four items
04:26 - so the time it takes to solve the
04:28 - problem can be expressed in Big O
04:30 - notation as Big O of 2 to the power of n
04:34 - time
04:35 - in this video we'll demonstrate that by
04:37 - using dynamic programming we can solve
04:40 - this problem in Big O of n times W time
04:44 - n denotes the number of considered items
04:47 - and W denotes the maximum amount of
04:49 - weight that our container can hold
04:52 - if you would like to read more detail on
04:54 - Big O notation I've included an
04:56 - appropriate link below in the
04:57 - description
05:00 - so we are going to go through the code
05:02 - to solve the zero one knapsack problem
05:03 - step by step to ensure that we
05:06 - understand how the relevant algorithm
05:08 - works
05:09 - so basically the problem is we need to
05:12 - choose the items where the sum of their
05:14 - values gives us the greatest amount of
05:16 - value when compared to the other
05:18 - possible combinations of items that can
05:20 - be included within our container so this
05:23 - is an optimization problem that we need
05:25 - to solve
05:27 - for the purposes of this video we are
05:29 - going to keep this problem really simple
05:32 - we have a container that can fit items
05:34 - that weigh less than or equal to 10 kgs
05:39 - if the sum of the weight proposed as it
05:42 - were for a potential solution is greater
05:44 - than 10 kgs this combination of items
05:47 - will not work we cannot take all of
05:49 - those items because their combined
05:52 - weight exceeds the 10 kg limit
05:55 - so we need to include the items where
05:57 - their combined weights do not exceed 10
06:00 - kgs and the sum of the value of the
06:02 - items that we wish to include in the
06:04 - container is greater when compared to
06:06 - the other possible combinations of items
06:09 - that can be carried within our container
06:14 - the problem is drastically simplified in
06:17 - this example
06:19 - if however we were to scale up the
06:21 - problem where for example we have a
06:23 - large shipping container and potentially
06:25 - hundreds of items this would take most
06:27 - human beings too long to calculate in a
06:29 - time frame that could be deemed as
06:31 - efficient
06:32 - so this is where our algorithm becomes
06:35 - essential
06:36 - in for example shipping this type of
06:38 - algorithm that we are about to implement
06:40 - would run on a daily basis
06:43 - we are going to use the bottom up
06:45 - approach to dynamic programming to
06:48 - implement the relevant algorithm to
06:50 - solve our problem
06:52 - this is in contrast to the top-down
06:54 - approach
06:55 - we could write our algorithm using the
06:57 - top-down approach but we can avoid
06:59 - writing recursive code by using the
07:02 - bottom up approach
07:04 - the approach to writing our algorithm
07:06 - will involve a strategy called
07:08 - memoization
07:10 - very basically memoization ensures that
07:14 - a function doesn't run for the same
07:16 - inputs more than once by keeping a
07:18 - record of the results for the given
07:20 - inputs
07:23 - let's briefly look at a depiction of how
07:25 - the algorithm processes each item in
07:28 - relation to the capacity of the
07:29 - container the algorithm appropriately
07:31 - considers each item's relevant data IE
07:35 - weight and value each row denotes a
07:38 - considered item
07:39 - each column denotes the container's
07:41 - capacity which grows as it were by a
07:44 - value of one until the final value is
07:47 - reached which is the capacity of our
07:50 - container in this case 10.
07:53 - the algorithm traverses each row from
07:56 - left to right
07:57 - for each cell in the table or each
07:59 - position in the two-dimensional array
08:01 - the algorithm appropriately evaluates
08:03 - the weight and value of each considered
08:05 - item in relation to the currently
08:07 - considered capacity of the container
08:10 - the algorithm then appropriately
08:12 - computes the maximum value that can be
08:15 - included in the container depending on
08:16 - the considered data the computed value
08:19 - is then recorded
08:21 - at the appropriate position in the
08:23 - two-dimensional array the relevant
08:25 - two-dimensional array used for
08:27 - memoization is depicted by our table
08:29 - here
08:30 - this is so that we can visualize how the
08:32 - algorithm progresses and calculates the
08:34 - relevant values
08:36 - our algorithm will repeat the relevant
08:38 - computational pattern until it arrives
08:40 - at the final result which will be
08:43 - recorded in the bottom right cell of the
08:45 - table here or position 4 comma 10 of the
08:49 - two-dimensional array used for
08:51 - memoization the final result is the
08:54 - maximized value of the items included in
08:57 - the container
08:59 - right let's write the code for our
09:01 - algorithm
09:02 - let's create a.net core console
09:04 - application within Visual Studio
09:25 - so let's write the pertinent details of
09:27 - the relevant items and the container
09:30 - involved in this particular scenario in
09:32 - a comment at the top of the main method
10:02 - we are going to store the detail of each
10:04 - item's weight and value appropriately
10:06 - within two separate arrays
10:09 - so let's first create a one-dimensional
10:11 - array named weights and add the relevant
10:14 - weights of our items appropriately to
10:16 - the weights array
10:19 - let's create another one-dimensional
10:21 - array named values and appropriately add
10:23 - the values associated with each of our
10:26 - items to the values array
10:29 - I briefly mentioned the technique of
10:31 - memorization earlier
10:34 - so let's create a two-dimensional array
10:36 - named data this array will enable us to
10:39 - keep a record of essential values that
10:41 - are computed as the execution of the
10:44 - algorithm progresses
10:46 - let's define an integer constant named n
10:49 - that stores the number of relevant items
10:51 - let's define the capacity of our
10:53 - container so in this example our
10:55 - container can hold a maximum weight of
10:58 - 10 kgs
11:00 - let's create two for Loops an outer for
11:02 - Loop and a nested or inner for Loop
11:06 - the outer for Loop Loops through n
11:08 - number of items which in this example is
11:11 - a value of 4. each increment of the
11:14 - inner for Loop denotes the weight that
11:16 - can be held within the container at a
11:19 - particular point in the execution of our
11:21 - algorithm
11:22 - so for example at increment 3 of the
11:25 - inner for Loop
11:27 - the algorithm will consider whether an
11:29 - item can be included within the
11:31 - container if the container can only hold
11:33 - a weight of 3 kgs
11:36 - when the increment is 4 for the inner
11:38 - loop the algorithm will consider whether
11:40 - an item can be included within the
11:42 - container if the container can hold a
11:44 - weight of 4 kgs and so on until the
11:48 - incremented value of the inner loop hits
11:50 - the Max Capacity which is a value of 10.
11:53 - at which point the inner loop is exited
11:57 - so here we have a table that depicts the
12:00 - two-dimensional array we have named data
12:04 - as discussed the data array is used to
12:07 - store the results of computed values
12:10 - which are appropriately recorded as the
12:12 - algorithm progresses towards a
12:14 - conclusion
12:16 - this represents the two-dimensional
12:18 - array that we have named data in our
12:20 - code
12:21 - So within the inner for Loop we need to
12:24 - implement code that will appropriately
12:25 - compute the values of the items that can
12:28 - be included in the container at
12:30 - appropriate points in the execution of
12:32 - our algorithm the computed values are
12:35 - then inserted at appropriate positions
12:37 - within the two-dimensional data array
12:40 - so firstly we need to write code that
12:42 - evaluates the value of the item num
12:44 - variable that represents an item in our
12:47 - example so if the item num variables
12:49 - value is 0 code to insert the value of 0
12:52 - into the appropriate position in the
12:55 - data array must be executed so if you
12:58 - look at our table you can see that these
13:01 - cells in the top row will all contain
13:03 - the value of zero
13:05 - considering zero item or zero capacity
13:08 - for the container may seem redundant but
13:11 - having these values within the data
13:13 - array is essential to the working of our
13:15 - algorithm this will become clear as the
13:18 - video progresses if the item number
13:20 - variables value at this point is not
13:22 - zero our code must evaluate the value
13:25 - stored in the capacity variable
13:33 - so let's write the code that must
13:35 - execute if either the item num variable
13:37 - is zero or the capacity variable is zero
13:41 - all we are doing here in this line of
13:43 - code is recording a value of zero at
13:45 - appropriate positions in our
13:46 - two-dimensional array then if neither
13:48 - the item num variable is zero or the
13:51 - capacity variable is zero we need to
13:53 - write code that makes another evaluation
13:56 - so we can implement the relevant
13:58 - evaluation code using an else if
14:01 - statement like this
14:03 - so here we are saying with this else if
14:05 - condition if the weight of the
14:08 - considered item is less than or equal to
14:10 - the considered capacity I.E the maximum
14:13 - allowable weight for items to be held
14:15 - within the container at this point to
14:17 - the execution of the code
14:19 - we need to make a specific computation
14:21 - before storing the relevant computed
14:24 - value at the appropriate position in the
14:26 - data array
14:28 - so if the else if condition returns true
14:30 - we need to use a formula to compute a
14:33 - value before storing the value at the
14:35 - appropriate position within the data
14:37 - array
14:39 - so let's take a quick look at the
14:41 - formula
14:43 - we can use C Sharps math.max static
14:46 - method to implement the relevant formula
14:50 - so the first argument that we need to
14:52 - pass into the max method can be computed
14:55 - like this
15:04 - the second argument is as follows
15:24 - the max method simply Returns the
15:26 - greater value of the two arguments
15:28 - passed to it
15:30 - then we can write code to record the
15:33 - value returned from the formula in the
15:35 - appropriate position in our
15:37 - two-dimensional data array like this
16:01 - so if the conditions in the if and the
16:04 - else if statement both return false we
16:07 - need code to execute that inserts the
16:09 - values stored in the cell directly above
16:12 - the considered cell as it were at the
16:14 - appropriate position in the data array
16:16 - so to do this we must write this line of
16:18 - code within the else block
16:25 - and that's it that is the code
16:27 - implementation for our algorithm
16:30 - then we can write codes to Output the
16:32 - final results to the screen the final
16:34 - result is found at position n comma Max
16:37 - Capacity so position 4 comma 10 in our
16:41 - data array
17:14 - let's run the code
17:27 - and you can see that we are presented
17:29 - with the correct answer the result is
17:31 - the value of 390.
17:38 - we can include the Drone the Monitor and
17:40 - the kettle within our container which
17:42 - gives us the value of 390 dollars so
17:46 - let's go through the execution of our
17:47 - algorithm in more detail so we can get a
17:50 - clear understanding of what is going on
17:52 - during the execution of the algorithm
17:55 - so for the first row in our table all of
17:58 - the cells will be set to zero because at
18:01 - the points of execution of our algorithm
18:03 - pertinent to these cells in the top row
18:06 - the item num variable is equal to zero
18:09 - so the code in the if block will execute
18:13 - so we can fill in zero for the top row
18:16 - in our table remember this depiction
18:18 - represents the two-dimensional data
18:21 - array that we are using for memoization
18:23 - in our algorithm so now let's consider
18:26 - the data associated with the first cell
18:28 - in the second row
18:31 - which maps to position one comma zero in
18:34 - our data array
18:36 - our algorithm at this point is
18:38 - considering relevant data for the first
18:40 - item which in our example is the
18:42 - microwave
18:43 - the considered capacity is equal to zero
18:47 - so the value for the first cell in the
18:49 - second row will be zero
18:51 - then for the second cell on the second
18:54 - row the considered capacity is one and
18:56 - the item's weight the microwave's weight
18:59 - is eight
19:00 - so the if condition returns false and
19:03 - the else if condition also returns false
19:06 - if we look at the condition in the else
19:08 - if statement
19:10 - the weight of the microwave is greater
19:12 - than the considered capacity of the
19:14 - container in the elsif condition
19:17 - and so the else if condition returns
19:19 - false so this means that the code in the
19:22 - else block will execute
19:24 - so in this case we can insert the values
19:27 - stored in the cell directly above the
19:29 - cell that is currently being considered
19:31 - as it were
19:33 - into the cell
19:35 - the cell that we have just considered
19:38 - this depiction of course analogously
19:40 - represents the appropriate value being
19:42 - recorded at an appropriate position in
19:44 - the two-dimensional data array
19:47 - you can see that the code within the
19:48 - else block implements this functionality
19:52 - if you think about it in Practical terms
19:54 - at this point in the execution of the
19:56 - algorithm the code is considering if the
19:59 - microwave which has a weight of 8 kgs
20:01 - can be stored in the container when it
20:05 - has a capacity to hold 1 kg of weight
20:08 - this is of course not possible so by
20:11 - recording zero at this point we know
20:13 - that no item can be stored in the
20:15 - container at this point
20:17 - so this same logic applies until we
20:20 - reach a capacity of 8. so let's record
20:22 - zero up until the capacity is equal to
20:25 - eight so when the container can hold 8
20:27 - kgs of weight
20:29 - capacity is equal to eight this means at
20:31 - this point we can include the microwave
20:33 - in the container because as discussed
20:36 - the microwave has a weight of 8 kgs
20:39 - the relevant condition can read as if
20:42 - the weight of the currently considered
20:43 - item is less than or equal to the
20:46 - currently considered capacity run the
20:49 - formula I.E the code within the elseif
20:51 - block
20:52 - so the else if condition returns true
20:55 - because the weight of the considered
20:56 - item is equal to the currently
20:59 - considered capacity which is a capacity
21:01 - that can hold 8 kgs so let's look at the
21:04 - formula that runs to calculate the value
21:07 - that will be recorded at the appropriate
21:09 - position in the data array
21:11 - so the algorithm at this point evaluates
21:14 - using C Sharp's Max method which of two
21:17 - values passes arguments to the max
21:19 - method is greater the greater value of
21:22 - the two is returned from the max method
21:24 - so let's get the values that will be
21:26 - plugged into the formula I.E the values
21:29 - for the two relevant arguments that will
21:31 - be appropriately passed to the max
21:33 - method
21:34 - let's look at the first argument so here
21:37 - we are considering the microwave the
21:39 - microwave has a value of 50. so we can
21:42 - plug 50 into the formula here
21:44 - then in order to get the value for the
21:46 - first argument passed into the max
21:48 - method we must add the value stored at
21:51 - this position in the data array to the
21:53 - value of the microwave I.E the currently
21:56 - considered item
21:58 - so let's get the value stored in the
21:59 - data array at position 0 which is the
22:02 - currently considered item number 1 minus
22:05 - 1.
22:06 - comma the current considered capacity 8
22:11 - minus the weight of the currently
22:13 - considered item which is also eight
22:18 - so we add the value stored at position 0
22:22 - comma zero in the data array
22:26 - to the value of the microwave which is a
22:28 - value of 50
22:30 - so we pass 50 as our first argument into
22:33 - the max method
22:34 - the second argument can be found at
22:37 - position 0 comma 8 in the data array
22:39 - which as you can see in our table is
22:42 - zero so obviously the greatest value
22:44 - between 50 and 0 is 50. so the max
22:48 - method returns 50 and our code runs that
22:51 - stores the value of 50 at the
22:53 - appropriate position in the data array
22:57 - so when the considered capacity is nine
22:59 - the considered capacity is greater than
23:01 - the weight of the considered item the
23:04 - microwave which is 8 kgs so the code
23:06 - that we have just examined also applies
23:09 - for when item num equals 1 and capacity
23:13 - equals nine so we can record 50 at the
23:16 - appropriate point in the table
23:17 - representing that this value has just
23:19 - been recorded at its counterpart
23:21 - position in the data array
23:25 - the same code is also run when the code
23:27 - considers the microwave which weighs 8
23:29 - kgs against the capacity which can hold
23:32 - 10 kgs so let's record 50 at the
23:35 - appropriate position in our table next
23:38 - the code execution moves on to consider
23:39 - the second item the Drone in this case
23:42 - so the incremented value in the outer
23:45 - loop item num will be 2. the inner loop
23:48 - will evaluate each capacity
23:49 - consideration from 0 to 10 for item two
23:53 - incrementing the capacity by one with
23:56 - each iteration of the inner loop
23:59 - so at zero capacity of course we need to
24:02 - include a value of zero here
24:05 - when the considered capacity for our
24:08 - container can hold one kilogram the
24:10 - Drone has a greater weight than one
24:12 - kilogram the Drone weighs 2 kilograms so
24:15 - the code in the else block is executed
24:17 - so let's record this value at the
24:20 - appropriate position in our table then
24:22 - the code considers a capacity for our
24:24 - container where it can hold 2 kgs our
24:28 - drone weighs 2 kgs which means the Drone
24:30 - can be included in the container
24:33 - so the code within the else if block is
24:35 - executed so let's plug in the relevant
24:37 - values into our formula so the first
24:40 - argument passed to the math.max method
24:43 - is the value of the Drone which is 150
24:46 - plus a value of zero the second argument
24:49 - is zero so of course 150 is greater than
24:51 - zero so let's record the value of 150 at
24:55 - the appropriate position in our table
24:58 - the same values are processed by the
25:00 - formula in the elsif block until the
25:03 - capacity reaches a value of 8. I.E where
25:06 - the code evaluates the container's
25:07 - capacity where it can hold 8 kgs
25:10 - each considered capacity from 2 to 7 for
25:14 - when the Drone is considered has
25:16 - resulted in our formula processing the
25:18 - same values
25:20 - however the values that will be plugged
25:22 - into our formula will be different when
25:24 - the capacity is 8. so let's
25:26 - appropriately fill in the values up till
25:29 - when the capacity is 8.
25:31 - so when the capacity is eight the first
25:33 - argument passed into the max method is
25:36 - the value of the Drone 150 plus zero
25:39 - found at this position in the data array
25:49 - the second argument passed into the max
25:51 - method is the value of the microwave 50.
25:54 - so obviously 150 is greater than 50. so
25:58 - here we record the value of the Drone
26:00 - 150.
26:03 - when we consider the scenario presented
26:05 - to us with the next iteration of the
26:07 - inner loop I.E when the capacity is 9 we
26:10 - need to record 150 once again this is
26:13 - the value returned from our formula
26:15 - implemented in the else if block
26:18 - however when we consider the scenario
26:20 - presented to us with the final iteration
26:23 - of the inner loop for the currently
26:25 - considered item IE when the capacity is
26:27 - equal to 10. at this point we can
26:30 - include both the microwave which weighs
26:32 - 8 kgs and the Drone which weighs 2 kgs
26:35 - within our container because at this
26:37 - point our code is considering a capacity
26:39 - of 10 and our code is considering the
26:41 - second item the Drone so here you can
26:43 - see that the first argument is the
26:45 - result of a calculation of the value of
26:48 - the microwave plus the value of the
26:50 - Drone which equals 200. the value of the
26:53 - second argument is the value of the
26:55 - microwave 50.
26:58 - so 200 is obviously greater than 50 so
27:01 - 200 is returned from the max method
27:04 - which means 200 is recorded at the
27:06 - appropriate position within the data
27:09 - array
27:10 - at this point our code has recorded all
27:13 - relevant values in the data array
27:15 - regarding the microwave and the Drone
27:18 - these items have now been considered
27:21 - against all relevant capacity
27:22 - considerations so the next increment for
27:25 - the Outer Loop executes and the next
27:27 - item the monitor will be considered
27:29 - against each relevant capacity
27:32 - so our code now considers the third item
27:35 - the item number variable defined in the
27:37 - outer loop is now equal to three
27:40 - three represents the monitor the monitor
27:43 - weighs 6 kgs and has a value of 210.
27:48 - so at position 0 in the fourth row zero
27:52 - must be recorded because the value
27:54 - stored in the capacity variable is zero
27:57 - so the code in the if block is executed
28:02 - so in the capacity variable is equal to
28:04 - one code in the else block is executed
28:07 - because neither the capacity or item num
28:10 - variable is equal to zero and the weight
28:12 - of the monitor which is 6 KGS is greater
28:15 - than the currently considered capacity
28:17 - one so this means the value in the cell
28:20 - directly above the position that is
28:23 - being considered as it were must be
28:25 - appropriately inserted into our table at
28:28 - the appropriate position
28:30 - the cell that we have just considered
28:34 - so now the capacity is equal to 2. we
28:37 - can see here that the value directly
28:39 - above the considered position as it were
28:42 - is 150 which is the value of the Drone
28:45 - the code within the else block is
28:47 - executed and a value of 150 is filled in
28:51 - at the considered position
28:53 - so the code within the else block will
28:56 - repeat until the capacity variable is
28:59 - equal to 6. which means if the container
29:02 - was empty and had the capacity to store
29:04 - a maximum of 6 kgs that the monitor
29:08 - could be included in the container let's
29:10 - appropriately fill in the values in our
29:12 - table until the capacity equals to 6.
29:15 - at this point the weight of the
29:17 - considered item is the same as the value
29:20 - of the capacity variable so the code in
29:23 - the else if block is executed so let's
29:25 - plug in the relevant values into the
29:27 - formula so the first argument passed
29:29 - into the max method will be the value of
29:31 - the monitor 210 plus 0 which gives us a
29:35 - value of 210.
29:39 - the second argument passed into the max
29:41 - method will be a value of 150 the value
29:44 - of the Drone
29:46 - 210 is obviously greater than 150 so 210
29:51 - will be stored at the appropriate
29:52 - position in the data array here
29:56 - the same value is appropriately recorded
29:58 - for the scenario that is presented to us
30:00 - in the subsequent iteration of the inner
30:03 - loop
30:05 - I.E when the capacity variable equals to
30:07 - seven
30:09 - so we can record 210 here
30:13 - so when the capacity is equal to eight
30:15 - the values that are plugged into our
30:17 - formula are different to the values
30:19 - passed into the formula when the
30:22 - capacity was six or seven
30:24 - so let's plug in the appropriate values
30:26 - into the max method the first argument
30:29 - has a value of 210
30:31 - plus 150 which equals to 360. the second
30:36 - argument is 150 so 360 is greater than
30:40 - 150 so let's fill in 360 here
30:45 - so when the capacity variable equals to
30:47 - nine
30:48 - so the value of 360 is appropriately
30:51 - recorded
30:53 - let's plug in the appropriate values
30:55 - into our formula when the capacity
30:57 - variable reaches 10.
31:00 - the first argument will be 210 the value
31:03 - of the monitor plus 150 which is the
31:06 - value of the Drone this gives us a value
31:09 - of 360. the second argument comes from
31:12 - the cell directly above the current cell
31:14 - which is the value of the microwave 50
31:17 - plus the value of the Drone 150 which
31:20 - gives us a value of 200.
31:22 - so 360 is obviously greater than 200 so
31:26 - we can record 360 as the value in the
31:29 - current cell
31:34 - so we can now consider item four which
31:36 - is the kettle the kettle has a value of
31:38 - 30 and weighs 1 kg
31:42 - so in the first cell of this row we can
31:45 - record a value of zero
31:47 - then in the second cell where the
31:49 - capacity value is one we can plug
31:52 - relevant values into our formula to
31:54 - compute the value that needs to be
31:56 - recorded in the current cell
31:58 - the kettle weighs 1 kg and the code is
32:02 - considering a capacity of one
32:04 - so the weight of the item equals to the
32:06 - considered capacity so code within the
32:09 - elseif block is executed
32:11 - so the first argument passed into the
32:13 - max method is the value of the
32:15 - considered item so the value of the
32:18 - kettle is thirty plus zero which gives
32:21 - us a value of 30. the second argument
32:23 - passed into the max method is the value
32:26 - recorded above the current cell
32:29 - which is a value of zero so we can
32:31 - record 30 in the current cell
32:36 - so in the capacity variable is equal to
32:39 - 2 we can pass in the value of the kettle
32:41 - plus zero as the first argument into the
32:44 - max method so here we pass in a value of
32:47 - 30. the second argument we need to pass
32:49 - into the max method comes from the value
32:52 - that resides in the cell directly above
32:55 - the current cell which is the value of
32:57 - the Drone 150.
33:00 - so now when the capacity that we are
33:02 - considering is three
33:05 - the first argument's value will be 30
33:07 - plus 150 which gives us 180 so that is
33:12 - the value of the kettle plus the value
33:14 - of the Drone
33:16 - the second argument will be the value of
33:18 - the Drone 150.
33:21 - so of course 180 is greater than one
33:24 - hundred and fifty so let's record 180
33:27 - here
33:29 - the next values we need to record are
33:31 - derived from the same computation as the
33:34 - one made when the capacity equals to
33:36 - three until the capacity value reaches
33:38 - 6. so let's fill in the value of 180
33:42 - appropriately until the capacity is 6.
33:46 - so let's plug the values into our
33:48 - formula for when the capacity variable
33:50 - is equal to 6. so the first argument
33:53 - that we need to pass into the max method
33:55 - is the value of the kettle plus the
33:57 - value of the Drone which gives us a
33:59 - value of 180.
34:04 - so we can pass 180 as the first argument
34:07 - to the max method
34:10 - as always the second argument that we
34:12 - need to pass into our Max method comes
34:14 - from the cell directly above the current
34:17 - cell
34:18 - this cell contains the value of the
34:20 - monitor so 210 is obviously greater than
34:24 - 180 so we can record 210 in the current
34:28 - cell
34:31 - when a capacity of 7 is considered the
34:34 - first argument passed to the max method
34:36 - is the value of the kettle plus the
34:38 - value of the monitor which gives us a
34:40 - value of 240.
34:43 - 240 is greater than 210 so we can record
34:47 - 240 here
34:50 - when a capacity of 8 is considered the
34:53 - first argument passed into the max
34:54 - method is the value of the kettle plus
34:57 - the value of the monitor which gives us
34:59 - a value of 240 when compared to the
35:02 - value directly above the considered
35:04 - position as it were which is 360
35:07 - 360 is obviously greater than 240 so 360
35:12 - is returned from the max method and
35:14 - appropriately recorded within the data
35:17 - array
35:18 - when the capacity of 9 is considered the
35:21 - first argument passed into the max
35:23 - method is the value of the kettle plus
35:25 - the value of the monitor plus the value
35:27 - of the Drone which gives us a value of
35:30 - 390.
35:32 - When comparing the value of the Drone
35:34 - plus the value of the monitor which
35:36 - gives us a value of 360 to the value of
35:39 - 390 of course 390 is greater than 360.
35:45 - so we can record the value of 390 here
35:50 - the final considered position as it were
35:52 - involves the same calculation as when
35:55 - the capacity was equal to 9. so we can
35:58 - record the value of 390 here
36:02 - this is our final result
36:06 - we have maximized the value of our
36:08 - container with a value of 390.
36:12 - and you can see how this algorithm works
36:14 - when we look at the results in the table
36:16 - the maximum value is being calculated
36:19 - for every scenario until the final
36:22 - capacity and number of items has been
36:25 - considered
36:26 - so if our container could only
36:28 - accommodate a maximum weight of 6 kgs
36:32 - and we were only considering the
36:34 - following items the microwave the Drone
36:36 - and the monitor we must only include the
36:40 - monitor in our container to maximize our
36:43 - value we can see what the value will be
36:45 - if we look at our results in our table
36:48 - here at this position
36:51 - if we were considering those same three
36:54 - items and our container could only hold
36:56 - a maximum of 8 kgs we would include the
37:00 - Monitor and the Drone within our
37:01 - container
37:02 - which would give us a value of 360
37:05 - dollars we can see this in our results
37:07 - here at position 3 comma 8 in our data
37:11 - array
37:13 - if we were only considering the Drone
37:16 - and the microwave and our container
37:18 - could hold a maximum of 8 kgs we would
37:21 - only include the Drone in our container
37:23 - to maximize our value
37:26 - so as you can see in our results when we
37:29 - are considering all four items and our
37:31 - container can hold a maximum weight of
37:34 - 10 kgs we must include the Drone the
37:37 - Monitor and the kettle to maximize the
37:40 - value in our container this gives us the
37:43 - value of 390 dollars
37:46 - using the bottom-up approach to dynamic
37:49 - programming we were able to calculate
37:52 - this value in Big O of n times W time
37:56 - complexity
37:58 - n represents the number of items
38:00 - considered and W represents the capacity
38:03 - of our container the capacity is the
38:06 - amount of weight that the container is
38:08 - able to hold
38:12 - so let's now write the code that will
38:14 - use the data accumulated by the
38:17 - algorithm we have just written
38:20 - to tell us which items need to be
38:22 - included in our container to achieve the
38:24 - maximum value calculated by the
38:26 - algorithm that we have just written
38:30 - before we write the code for this
38:32 - let's neaten up the existing code a bit
38:35 - so we can put the code for the algorithm
38:37 - in its own function like this
38:40 - the values that Define the problem can
38:43 - be passed into this function from the
38:44 - calling code
38:45 - which will be code implemented in the
38:48 - main method
38:50 - the function of course Returns the
38:52 - result computed by our algorithm that we
38:55 - have implemented to solve the zero one
38:57 - knapsack problem
39:20 - let's run the code
39:24 - great
39:26 - so let's create a new function that will
39:29 - output the inclusion or exclusion status
39:32 - for each of the items considered in our
39:35 - application
39:52 - you can see here we have a parameter
39:54 - which is a string array named item names
39:58 - so we need to pass in an array
40:00 - containing the names of the items that
40:03 - are relevant to our problem into this
40:05 - parameter
40:06 - so let's go to the main method Define a
40:09 - one-dimensional string array and
40:10 - appropriately add the names of the
40:12 - relevant items to the array
40:15 - the appropriate details of the items
40:17 - that are excluded from the container
40:19 - will be outputted with a red background
40:22 - color
40:23 - the appropriate details for the items
40:25 - that are included in the container will
40:27 - be outputted with a green background
40:29 - color
40:32 - so in the method that runs the algorithm
40:34 - that accumulates the relevant data in
40:37 - the data array the algorithm started
40:39 - from position 0 comma zero in the data
40:41 - array and worked from left to right for
40:44 - each row in the two-dimensional array
40:46 - named data Computing relevant values and
40:49 - recording those values at the
40:51 - appropriate positions in the data array
40:54 - when the algorithm completed the final
40:56 - result could be found at position n that
40:59 - defines the number of items relevance to
41:02 - the problem comma Max Capacity
41:05 - that defines the maximum weight that the
41:08 - container can hold the container's
41:10 - capacity
41:11 - so the final result can be found at
41:13 - position four comma 10 of our data array
41:17 - in contrast to the way the algorithm
41:19 - worked the code that we are going to
41:21 - write here will work backwards from the
41:23 - position of the final result IE position
41:26 - 4 comma 10 until all relevant data has
41:29 - been considered and all relevant data
41:32 - has been outputted
41:34 - so firstly let's initialize two
41:36 - variables
41:38 - let's set a variable named I to the
41:41 - value that will be passed as an argument
41:43 - to the parameter named n n denotes the
41:46 - number of items relevant to a particular
41:49 - problem
41:51 - let's set a variable named J to the
41:54 - value that will be passed as an argument
41:56 - to the parameter named Max Capacity the
41:59 - Max Capacity parameter denotes the
42:02 - maximum weight that the container can
42:04 - hold
42:06 - let's create a while loop that
42:08 - terminates when either I or J is equal
42:10 - to zero
42:12 - so the while loop will continue to
42:15 - execute while I is greater than 0 and J
42:19 - is greater than zero
42:21 - the loop will terminate when either I or
42:24 - J is equal to zero
42:26 - So within the while loop let's include
42:29 - an if condition that evaluates whether
42:31 - the value at position I comma J the
42:35 - considered item is equal to the value at
42:37 - position I minus 1 comma J
42:40 - if the compared values in this condition
42:43 - are equal code must execute to Output
42:46 - the details of the considered item with
42:49 - a background color that is red
42:51 - indicating that the item is excluded
42:54 - from the container
42:56 - we'll write the codes to change the
42:58 - background color of the text accordingly
43:00 - in a bit
43:02 - conversely when the if condition is
43:04 - false code must run that outputs text
43:08 - denoting that the considered item is
43:10 - included in the container this will be
43:13 - indicated by giving the relevant text a
43:15 - green background
43:20 - so at the position immediately after the
43:23 - if else code codes to decrement the I
43:26 - variable by a value of 1 must be
43:29 - implemented
43:30 - so we are looping backwards through the
43:33 - items in the data array
43:35 - after code is run in the case when an
43:38 - item is deemed to be included in the
43:40 - container I.E within the else block here
43:43 - we must update the value of J by
43:47 - subtracting the weight of the considered
43:49 - item from the current value of J
43:52 - so the code within the while loop will
43:55 - repeat until either J is equal to 0 or I
43:58 - is equal to zero
44:00 - so that is the logic for the code that
44:03 - outputs text denoting items included in
44:06 - the container and the items excluded
44:08 - from the container
44:11 - let's write a reusable function that
44:13 - outputs text with appropriate background
44:15 - colors a red background denotes an item
44:18 - that is excluded from the container
44:21 - a green background denotes an item
44:23 - included within the container
44:26 - so let's first write an enum that
44:28 - contains three list items
44:31 - let's name these items normal success
44:34 - and danger respectively
44:37 - let's write a method named write text to
44:40 - screen
44:41 - this method contains two parameters so
44:44 - the logic for this method simply changes
44:46 - the color for the outputted text based
44:50 - on the argument passed into the second
44:51 - parameter
44:53 - so for our purposes here if the item is
44:56 - included in the container the text is
44:58 - white and the background color is green
45:01 - if the item is excluded from the
45:03 - container the text is white and the
45:05 - background color is red
45:21 - so we can now use our right text to
45:23 - screen method appropriately in our code
46:10 - let's run the code
46:16 - excellent

Cleaned transcript:

the napstack problem is a classic optimization problem in computer science it's often used to help teach dynamic programming and greedy algorithms this is an important problem to understand especially if you plan on interviewing soon for a programming job in this course Gavin long will explain the problem and show how to craft an efficient solution using csharp Gavin has created many popular courses for our Channel and he's also a free code Camp team member let's start learning hi everyone I'm Gavin long look I'm in trouble I've recently been asked to leave my apartment by my landlord he says the neighbors have been complaining about me causing noise pollution thank you the bottom line is the police are on their way to forcibly remove me so I need to grab as much stuff as possible and cram it into the snap sack here and leave as fast as possible the problem is I've got a lot of stuff so which items do I take with me I need to take the most valuable items so that I can come up with the money for a deposit for a new apartment but I can only realistically take a few items in the snap sack I don't even really know what a knapsack is so I guess this is my knapsack okay it's kind of a rucksack knapsack whatever it's a sack so the bottom line is I have a knapsack with a finite capacity which means I can only take a few items with me so I need a way to fit as much value as possible into my knapsack this is called the knapsack problem luckily I've been kicked out of a few apartments in my time so I'm very familiar with the knapsack problem so I have a solution to the knapsack problem which I'm going to share with you before the police come and cart me away let's get into this video in this video we are going to create an algorithm using C sharp to solve the famous zero one knapsack problem let me briefly describe the problem so we have a number of items in this case four items each item has an Associated weight and value so for example the first item weighs 8 kgs and has a value of fifty dollars the second item weighs 2 kgs and has a value of a hundred and fifty dollars the third item weighs 6 kgs and has a value of 210 dollars and the fourth item weighs 1 kg and has a value of thirty dollars the problem is we are trying to decide which items to include within a container that can only hold a certain amount of weight I.E the container has a fixed capacity so in this example our container will only be able to hold 10 kilograms of weight so this is called the knapsack problem but in this video I'll refer to a container in place of a literal knapsack we are trying to maximize the total value that can be included within our container our code needs to consider each of the relevant items and decide as it were if the considered item must be included in the container which can be represented by a value of one or the considered item must not be included within the container which could be represented by a zero when we first look at this problem it looks really difficult if our code is considering each item and making the decision as it were to include or exclude the item the total number of potential Solutions is 2 to the power of n in this case 2 to the power of four because we are dealing with four items so the time it takes to solve the problem can be expressed in Big O notation as Big O of 2 to the power of n time in this video we'll demonstrate that by using dynamic programming we can solve this problem in Big O of n times W time n denotes the number of considered items and W denotes the maximum amount of weight that our container can hold if you would like to read more detail on Big O notation I've included an appropriate link below in the description so we are going to go through the code to solve the zero one knapsack problem step by step to ensure that we understand how the relevant algorithm works so basically the problem is we need to choose the items where the sum of their values gives us the greatest amount of value when compared to the other possible combinations of items that can be included within our container so this is an optimization problem that we need to solve for the purposes of this video we are going to keep this problem really simple we have a container that can fit items that weigh less than or equal to 10 kgs if the sum of the weight proposed as it were for a potential solution is greater than 10 kgs this combination of items will not work we cannot take all of those items because their combined weight exceeds the 10 kg limit so we need to include the items where their combined weights do not exceed 10 kgs and the sum of the value of the items that we wish to include in the container is greater when compared to the other possible combinations of items that can be carried within our container the problem is drastically simplified in this example if however we were to scale up the problem where for example we have a large shipping container and potentially hundreds of items this would take most human beings too long to calculate in a time frame that could be deemed as efficient so this is where our algorithm becomes essential in for example shipping this type of algorithm that we are about to implement would run on a daily basis we are going to use the bottom up approach to dynamic programming to implement the relevant algorithm to solve our problem this is in contrast to the topdown approach we could write our algorithm using the topdown approach but we can avoid writing recursive code by using the bottom up approach the approach to writing our algorithm will involve a strategy called memoization very basically memoization ensures that a function doesn't run for the same inputs more than once by keeping a record of the results for the given inputs let's briefly look at a depiction of how the algorithm processes each item in relation to the capacity of the container the algorithm appropriately considers each item's relevant data IE weight and value each row denotes a considered item each column denotes the container's capacity which grows as it were by a value of one until the final value is reached which is the capacity of our container in this case 10. the algorithm traverses each row from left to right for each cell in the table or each position in the twodimensional array the algorithm appropriately evaluates the weight and value of each considered item in relation to the currently considered capacity of the container the algorithm then appropriately computes the maximum value that can be included in the container depending on the considered data the computed value is then recorded at the appropriate position in the twodimensional array the relevant twodimensional array used for memoization is depicted by our table here this is so that we can visualize how the algorithm progresses and calculates the relevant values our algorithm will repeat the relevant computational pattern until it arrives at the final result which will be recorded in the bottom right cell of the table here or position 4 comma 10 of the twodimensional array used for memoization the final result is the maximized value of the items included in the container right let's write the code for our algorithm let's create a.net core console application within Visual Studio so let's write the pertinent details of the relevant items and the container involved in this particular scenario in a comment at the top of the main method we are going to store the detail of each item's weight and value appropriately within two separate arrays so let's first create a onedimensional array named weights and add the relevant weights of our items appropriately to the weights array let's create another onedimensional array named values and appropriately add the values associated with each of our items to the values array I briefly mentioned the technique of memorization earlier so let's create a twodimensional array named data this array will enable us to keep a record of essential values that are computed as the execution of the algorithm progresses let's define an integer constant named n that stores the number of relevant items let's define the capacity of our container so in this example our container can hold a maximum weight of 10 kgs let's create two for Loops an outer for Loop and a nested or inner for Loop the outer for Loop Loops through n number of items which in this example is a value of 4. each increment of the inner for Loop denotes the weight that can be held within the container at a particular point in the execution of our algorithm so for example at increment 3 of the inner for Loop the algorithm will consider whether an item can be included within the container if the container can only hold a weight of 3 kgs when the increment is 4 for the inner loop the algorithm will consider whether an item can be included within the container if the container can hold a weight of 4 kgs and so on until the incremented value of the inner loop hits the Max Capacity which is a value of 10. at which point the inner loop is exited so here we have a table that depicts the twodimensional array we have named data as discussed the data array is used to store the results of computed values which are appropriately recorded as the algorithm progresses towards a conclusion this represents the twodimensional array that we have named data in our code So within the inner for Loop we need to implement code that will appropriately compute the values of the items that can be included in the container at appropriate points in the execution of our algorithm the computed values are then inserted at appropriate positions within the twodimensional data array so firstly we need to write code that evaluates the value of the item num variable that represents an item in our example so if the item num variables value is 0 code to insert the value of 0 into the appropriate position in the data array must be executed so if you look at our table you can see that these cells in the top row will all contain the value of zero considering zero item or zero capacity for the container may seem redundant but having these values within the data array is essential to the working of our algorithm this will become clear as the video progresses if the item number variables value at this point is not zero our code must evaluate the value stored in the capacity variable so let's write the code that must execute if either the item num variable is zero or the capacity variable is zero all we are doing here in this line of code is recording a value of zero at appropriate positions in our twodimensional array then if neither the item num variable is zero or the capacity variable is zero we need to write code that makes another evaluation so we can implement the relevant evaluation code using an else if statement like this so here we are saying with this else if condition if the weight of the considered item is less than or equal to the considered capacity I.E the maximum allowable weight for items to be held within the container at this point to the execution of the code we need to make a specific computation before storing the relevant computed value at the appropriate position in the data array so if the else if condition returns true we need to use a formula to compute a value before storing the value at the appropriate position within the data array so let's take a quick look at the formula we can use C Sharps math.max static method to implement the relevant formula so the first argument that we need to pass into the max method can be computed like this the second argument is as follows the max method simply Returns the greater value of the two arguments passed to it then we can write code to record the value returned from the formula in the appropriate position in our twodimensional data array like this so if the conditions in the if and the else if statement both return false we need code to execute that inserts the values stored in the cell directly above the considered cell as it were at the appropriate position in the data array so to do this we must write this line of code within the else block and that's it that is the code implementation for our algorithm then we can write codes to Output the final results to the screen the final result is found at position n comma Max Capacity so position 4 comma 10 in our data array let's run the code and you can see that we are presented with the correct answer the result is the value of 390. we can include the Drone the Monitor and the kettle within our container which gives us the value of 390 dollars so let's go through the execution of our algorithm in more detail so we can get a clear understanding of what is going on during the execution of the algorithm so for the first row in our table all of the cells will be set to zero because at the points of execution of our algorithm pertinent to these cells in the top row the item num variable is equal to zero so the code in the if block will execute so we can fill in zero for the top row in our table remember this depiction represents the twodimensional data array that we are using for memoization in our algorithm so now let's consider the data associated with the first cell in the second row which maps to position one comma zero in our data array our algorithm at this point is considering relevant data for the first item which in our example is the microwave the considered capacity is equal to zero so the value for the first cell in the second row will be zero then for the second cell on the second row the considered capacity is one and the item's weight the microwave's weight is eight so the if condition returns false and the else if condition also returns false if we look at the condition in the else if statement the weight of the microwave is greater than the considered capacity of the container in the elsif condition and so the else if condition returns false so this means that the code in the else block will execute so in this case we can insert the values stored in the cell directly above the cell that is currently being considered as it were into the cell the cell that we have just considered this depiction of course analogously represents the appropriate value being recorded at an appropriate position in the twodimensional data array you can see that the code within the else block implements this functionality if you think about it in Practical terms at this point in the execution of the algorithm the code is considering if the microwave which has a weight of 8 kgs can be stored in the container when it has a capacity to hold 1 kg of weight this is of course not possible so by recording zero at this point we know that no item can be stored in the container at this point so this same logic applies until we reach a capacity of 8. so let's record zero up until the capacity is equal to eight so when the container can hold 8 kgs of weight capacity is equal to eight this means at this point we can include the microwave in the container because as discussed the microwave has a weight of 8 kgs the relevant condition can read as if the weight of the currently considered item is less than or equal to the currently considered capacity run the formula I.E the code within the elseif block so the else if condition returns true because the weight of the considered item is equal to the currently considered capacity which is a capacity that can hold 8 kgs so let's look at the formula that runs to calculate the value that will be recorded at the appropriate position in the data array so the algorithm at this point evaluates using C Sharp's Max method which of two values passes arguments to the max method is greater the greater value of the two is returned from the max method so let's get the values that will be plugged into the formula I.E the values for the two relevant arguments that will be appropriately passed to the max method let's look at the first argument so here we are considering the microwave the microwave has a value of 50. so we can plug 50 into the formula here then in order to get the value for the first argument passed into the max method we must add the value stored at this position in the data array to the value of the microwave I.E the currently considered item so let's get the value stored in the data array at position 0 which is the currently considered item number 1 minus 1. comma the current considered capacity 8 minus the weight of the currently considered item which is also eight so we add the value stored at position 0 comma zero in the data array to the value of the microwave which is a value of 50 so we pass 50 as our first argument into the max method the second argument can be found at position 0 comma 8 in the data array which as you can see in our table is zero so obviously the greatest value between 50 and 0 is 50. so the max method returns 50 and our code runs that stores the value of 50 at the appropriate position in the data array so when the considered capacity is nine the considered capacity is greater than the weight of the considered item the microwave which is 8 kgs so the code that we have just examined also applies for when item num equals 1 and capacity equals nine so we can record 50 at the appropriate point in the table representing that this value has just been recorded at its counterpart position in the data array the same code is also run when the code considers the microwave which weighs 8 kgs against the capacity which can hold 10 kgs so let's record 50 at the appropriate position in our table next the code execution moves on to consider the second item the Drone in this case so the incremented value in the outer loop item num will be 2. the inner loop will evaluate each capacity consideration from 0 to 10 for item two incrementing the capacity by one with each iteration of the inner loop so at zero capacity of course we need to include a value of zero here when the considered capacity for our container can hold one kilogram the Drone has a greater weight than one kilogram the Drone weighs 2 kilograms so the code in the else block is executed so let's record this value at the appropriate position in our table then the code considers a capacity for our container where it can hold 2 kgs our drone weighs 2 kgs which means the Drone can be included in the container so the code within the else if block is executed so let's plug in the relevant values into our formula so the first argument passed to the math.max method is the value of the Drone which is 150 plus a value of zero the second argument is zero so of course 150 is greater than zero so let's record the value of 150 at the appropriate position in our table the same values are processed by the formula in the elsif block until the capacity reaches a value of 8. I.E where the code evaluates the container's capacity where it can hold 8 kgs each considered capacity from 2 to 7 for when the Drone is considered has resulted in our formula processing the same values however the values that will be plugged into our formula will be different when the capacity is 8. so let's appropriately fill in the values up till when the capacity is 8. so when the capacity is eight the first argument passed into the max method is the value of the Drone 150 plus zero found at this position in the data array the second argument passed into the max method is the value of the microwave 50. so obviously 150 is greater than 50. so here we record the value of the Drone 150. when we consider the scenario presented to us with the next iteration of the inner loop I.E when the capacity is 9 we need to record 150 once again this is the value returned from our formula implemented in the else if block however when we consider the scenario presented to us with the final iteration of the inner loop for the currently considered item IE when the capacity is equal to 10. at this point we can include both the microwave which weighs 8 kgs and the Drone which weighs 2 kgs within our container because at this point our code is considering a capacity of 10 and our code is considering the second item the Drone so here you can see that the first argument is the result of a calculation of the value of the microwave plus the value of the Drone which equals 200. the value of the second argument is the value of the microwave 50. so 200 is obviously greater than 50 so 200 is returned from the max method which means 200 is recorded at the appropriate position within the data array at this point our code has recorded all relevant values in the data array regarding the microwave and the Drone these items have now been considered against all relevant capacity considerations so the next increment for the Outer Loop executes and the next item the monitor will be considered against each relevant capacity so our code now considers the third item the item number variable defined in the outer loop is now equal to three three represents the monitor the monitor weighs 6 kgs and has a value of 210. so at position 0 in the fourth row zero must be recorded because the value stored in the capacity variable is zero so the code in the if block is executed so in the capacity variable is equal to one code in the else block is executed because neither the capacity or item num variable is equal to zero and the weight of the monitor which is 6 KGS is greater than the currently considered capacity one so this means the value in the cell directly above the position that is being considered as it were must be appropriately inserted into our table at the appropriate position the cell that we have just considered so now the capacity is equal to 2. we can see here that the value directly above the considered position as it were is 150 which is the value of the Drone the code within the else block is executed and a value of 150 is filled in at the considered position so the code within the else block will repeat until the capacity variable is equal to 6. which means if the container was empty and had the capacity to store a maximum of 6 kgs that the monitor could be included in the container let's appropriately fill in the values in our table until the capacity equals to 6. at this point the weight of the considered item is the same as the value of the capacity variable so the code in the else if block is executed so let's plug in the relevant values into the formula so the first argument passed into the max method will be the value of the monitor 210 plus 0 which gives us a value of 210. the second argument passed into the max method will be a value of 150 the value of the Drone 210 is obviously greater than 150 so 210 will be stored at the appropriate position in the data array here the same value is appropriately recorded for the scenario that is presented to us in the subsequent iteration of the inner loop I.E when the capacity variable equals to seven so we can record 210 here so when the capacity is equal to eight the values that are plugged into our formula are different to the values passed into the formula when the capacity was six or seven so let's plug in the appropriate values into the max method the first argument has a value of 210 plus 150 which equals to 360. the second argument is 150 so 360 is greater than 150 so let's fill in 360 here so when the capacity variable equals to nine so the value of 360 is appropriately recorded let's plug in the appropriate values into our formula when the capacity variable reaches 10. the first argument will be 210 the value of the monitor plus 150 which is the value of the Drone this gives us a value of 360. the second argument comes from the cell directly above the current cell which is the value of the microwave 50 plus the value of the Drone 150 which gives us a value of 200. so 360 is obviously greater than 200 so we can record 360 as the value in the current cell so we can now consider item four which is the kettle the kettle has a value of 30 and weighs 1 kg so in the first cell of this row we can record a value of zero then in the second cell where the capacity value is one we can plug relevant values into our formula to compute the value that needs to be recorded in the current cell the kettle weighs 1 kg and the code is considering a capacity of one so the weight of the item equals to the considered capacity so code within the elseif block is executed so the first argument passed into the max method is the value of the considered item so the value of the kettle is thirty plus zero which gives us a value of 30. the second argument passed into the max method is the value recorded above the current cell which is a value of zero so we can record 30 in the current cell so in the capacity variable is equal to 2 we can pass in the value of the kettle plus zero as the first argument into the max method so here we pass in a value of 30. the second argument we need to pass into the max method comes from the value that resides in the cell directly above the current cell which is the value of the Drone 150. so now when the capacity that we are considering is three the first argument's value will be 30 plus 150 which gives us 180 so that is the value of the kettle plus the value of the Drone the second argument will be the value of the Drone 150. so of course 180 is greater than one hundred and fifty so let's record 180 here the next values we need to record are derived from the same computation as the one made when the capacity equals to three until the capacity value reaches 6. so let's fill in the value of 180 appropriately until the capacity is 6. so let's plug the values into our formula for when the capacity variable is equal to 6. so the first argument that we need to pass into the max method is the value of the kettle plus the value of the Drone which gives us a value of 180. so we can pass 180 as the first argument to the max method as always the second argument that we need to pass into our Max method comes from the cell directly above the current cell this cell contains the value of the monitor so 210 is obviously greater than 180 so we can record 210 in the current cell when a capacity of 7 is considered the first argument passed to the max method is the value of the kettle plus the value of the monitor which gives us a value of 240. 240 is greater than 210 so we can record 240 here when a capacity of 8 is considered the first argument passed into the max method is the value of the kettle plus the value of the monitor which gives us a value of 240 when compared to the value directly above the considered position as it were which is 360 360 is obviously greater than 240 so 360 is returned from the max method and appropriately recorded within the data array when the capacity of 9 is considered the first argument passed into the max method is the value of the kettle plus the value of the monitor plus the value of the Drone which gives us a value of 390. When comparing the value of the Drone plus the value of the monitor which gives us a value of 360 to the value of 390 of course 390 is greater than 360. so we can record the value of 390 here the final considered position as it were involves the same calculation as when the capacity was equal to 9. so we can record the value of 390 here this is our final result we have maximized the value of our container with a value of 390. and you can see how this algorithm works when we look at the results in the table the maximum value is being calculated for every scenario until the final capacity and number of items has been considered so if our container could only accommodate a maximum weight of 6 kgs and we were only considering the following items the microwave the Drone and the monitor we must only include the monitor in our container to maximize our value we can see what the value will be if we look at our results in our table here at this position if we were considering those same three items and our container could only hold a maximum of 8 kgs we would include the Monitor and the Drone within our container which would give us a value of 360 dollars we can see this in our results here at position 3 comma 8 in our data array if we were only considering the Drone and the microwave and our container could hold a maximum of 8 kgs we would only include the Drone in our container to maximize our value so as you can see in our results when we are considering all four items and our container can hold a maximum weight of 10 kgs we must include the Drone the Monitor and the kettle to maximize the value in our container this gives us the value of 390 dollars using the bottomup approach to dynamic programming we were able to calculate this value in Big O of n times W time complexity n represents the number of items considered and W represents the capacity of our container the capacity is the amount of weight that the container is able to hold so let's now write the code that will use the data accumulated by the algorithm we have just written to tell us which items need to be included in our container to achieve the maximum value calculated by the algorithm that we have just written before we write the code for this let's neaten up the existing code a bit so we can put the code for the algorithm in its own function like this the values that Define the problem can be passed into this function from the calling code which will be code implemented in the main method the function of course Returns the result computed by our algorithm that we have implemented to solve the zero one knapsack problem let's run the code great so let's create a new function that will output the inclusion or exclusion status for each of the items considered in our application you can see here we have a parameter which is a string array named item names so we need to pass in an array containing the names of the items that are relevant to our problem into this parameter so let's go to the main method Define a onedimensional string array and appropriately add the names of the relevant items to the array the appropriate details of the items that are excluded from the container will be outputted with a red background color the appropriate details for the items that are included in the container will be outputted with a green background color so in the method that runs the algorithm that accumulates the relevant data in the data array the algorithm started from position 0 comma zero in the data array and worked from left to right for each row in the twodimensional array named data Computing relevant values and recording those values at the appropriate positions in the data array when the algorithm completed the final result could be found at position n that defines the number of items relevance to the problem comma Max Capacity that defines the maximum weight that the container can hold the container's capacity so the final result can be found at position four comma 10 of our data array in contrast to the way the algorithm worked the code that we are going to write here will work backwards from the position of the final result IE position 4 comma 10 until all relevant data has been considered and all relevant data has been outputted so firstly let's initialize two variables let's set a variable named I to the value that will be passed as an argument to the parameter named n n denotes the number of items relevant to a particular problem let's set a variable named J to the value that will be passed as an argument to the parameter named Max Capacity the Max Capacity parameter denotes the maximum weight that the container can hold let's create a while loop that terminates when either I or J is equal to zero so the while loop will continue to execute while I is greater than 0 and J is greater than zero the loop will terminate when either I or J is equal to zero So within the while loop let's include an if condition that evaluates whether the value at position I comma J the considered item is equal to the value at position I minus 1 comma J if the compared values in this condition are equal code must execute to Output the details of the considered item with a background color that is red indicating that the item is excluded from the container we'll write the codes to change the background color of the text accordingly in a bit conversely when the if condition is false code must run that outputs text denoting that the considered item is included in the container this will be indicated by giving the relevant text a green background so at the position immediately after the if else code codes to decrement the I variable by a value of 1 must be implemented so we are looping backwards through the items in the data array after code is run in the case when an item is deemed to be included in the container I.E within the else block here we must update the value of J by subtracting the weight of the considered item from the current value of J so the code within the while loop will repeat until either J is equal to 0 or I is equal to zero so that is the logic for the code that outputs text denoting items included in the container and the items excluded from the container let's write a reusable function that outputs text with appropriate background colors a red background denotes an item that is excluded from the container a green background denotes an item included within the container so let's first write an enum that contains three list items let's name these items normal success and danger respectively let's write a method named write text to screen this method contains two parameters so the logic for this method simply changes the color for the outputted text based on the argument passed into the second parameter so for our purposes here if the item is included in the container the text is white and the background color is green if the item is excluded from the container the text is white and the background color is red so we can now use our right text to screen method appropriately in our code let's run the code excellent
