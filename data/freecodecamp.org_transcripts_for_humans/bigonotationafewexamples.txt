With timestamps:

00:00 - let's talk a little bit more about Big O
00:02 - notation and time complexity
00:04 - specifically you're going to see Big O
00:06 - notation with the O which represents the
00:09 - function that you're looking at or the
00:10 - algorithm whatever it is you're
00:12 - evaluating and N which represents the
00:15 - number of elements that are in that
00:16 - function right now you do not have to be
00:19 - able to look at any given algorithm and
00:22 - immediately name its Big O notation or
00:25 - write it's Big O notation but what we
00:27 - are going to do is get a little bit more
00:28 - comfortable with relating a problem that
00:30 - you need to solve with how that could
00:32 - possibly be written in Big O notation
00:35 - let's go over some simple examples now o
00:38 - to the one o with one being n is an
00:41 - example of a static amount of time that
00:43 - an algorithm would take so if it was a
00:45 - simple algorithm it doesn't matter how
00:48 - many entries are in an array the amount
00:51 - of time that it's going to take to
00:52 - execute that function is going to be the
00:55 - same every time that's pretty much ideal
00:58 - it really depends on your problem you're
01:00 - trying to solve where if that's possible
01:02 - or not but that's a great and very
01:04 - efficient way to do
01:05 - things o log n these might be some words
01:09 - you haven't heard since math class I
01:10 - know when I started doing this I hadn't
01:13 - um a divide and conquer type of
01:15 - algorithm or a binary search is where
01:18 - binary specifically you're going to
01:19 - divide up whatever you're searching
01:21 - through into two pieces and only search
01:24 - one of those halves at a time that way
01:27 - you can either determine where it is or
01:28 - you can rule out 50 % of the
01:31 - entries o n is where it directly and
01:34 - linearly connects with the entry n so
01:38 - the amount of time it would take you to
01:40 - read a book directly correlates with how
01:42 - long that book is that's not exponential
01:45 - it's very very straightforward um next o
01:49 - n log n that's a merge search it's a
01:51 - little bit more complex than a binary
01:53 - search so like searching through a deck
01:55 - of cards in a specific way you don't
01:58 - have to understand it completely just
02:00 - know that there are different levels of
02:01 - complexity for Big O notation now I drew
02:05 - a bunch of x's in between here because
02:07 - this is where you start to get into the
02:08 - danger zone this is o n the^ of two
02:12 - exponential um so checking a list
02:15 - crosschecking a list and what you
02:16 - already have in your grocery cart you're
02:18 - double-checking two different things
02:19 - you're looking all the way through your
02:21 - list and you're looking all the way
02:22 - through your cart if the entries aren't
02:24 - very big that's fine but if you're
02:26 - looking through every cart or the entire
02:29 - store
02:30 - with a list that is you know the size of
02:32 - the dictionary that can get really
02:34 - really long really fast that is
02:37 - exponential anything you're writing that
02:38 - is exponential and in its bigo notation
02:42 - is probably not going to be a great
02:44 - solution long term like we were talking
02:47 - about scaling before think about the
02:49 - future of your site just because it
02:51 - works for you and maybe one other person
02:54 - if you have hundreds of thousands of
02:55 - users that is going to slow everything
02:58 - down to the extent that it's not even
03:00 - usable anymore that's going to be a
03:01 - really big deal now obviously o to
03:04 - Infinity like I'm going to flip a coin
03:06 - until I get ahead that in the worst case
03:09 - scenario another thing we need to
03:10 - remember that could be
03:13 - forever um it probably wouldn't be um
03:16 - depending it could be the first time but
03:18 - we're looking at worst case scenario
03:19 - here what I want you to take away from
03:22 - this is using Big O notation you can
03:25 - look at your code and figure out if it's
03:27 - really going to be a good solution for
03:29 - the future of your site as it grows with
03:31 - more data more users anything that is
03:34 - exponential or below or depending on the
03:37 - algorithm itself it really might not be
03:39 - very practical

Cleaned transcript:

let's talk a little bit more about Big O notation and time complexity specifically you're going to see Big O notation with the O which represents the function that you're looking at or the algorithm whatever it is you're evaluating and N which represents the number of elements that are in that function right now you do not have to be able to look at any given algorithm and immediately name its Big O notation or write it's Big O notation but what we are going to do is get a little bit more comfortable with relating a problem that you need to solve with how that could possibly be written in Big O notation let's go over some simple examples now o to the one o with one being n is an example of a static amount of time that an algorithm would take so if it was a simple algorithm it doesn't matter how many entries are in an array the amount of time that it's going to take to execute that function is going to be the same every time that's pretty much ideal it really depends on your problem you're trying to solve where if that's possible or not but that's a great and very efficient way to do things o log n these might be some words you haven't heard since math class I know when I started doing this I hadn't um a divide and conquer type of algorithm or a binary search is where binary specifically you're going to divide up whatever you're searching through into two pieces and only search one of those halves at a time that way you can either determine where it is or you can rule out 50 % of the entries o n is where it directly and linearly connects with the entry n so the amount of time it would take you to read a book directly correlates with how long that book is that's not exponential it's very very straightforward um next o n log n that's a merge search it's a little bit more complex than a binary search so like searching through a deck of cards in a specific way you don't have to understand it completely just know that there are different levels of complexity for Big O notation now I drew a bunch of x's in between here because this is where you start to get into the danger zone this is o n the^ of two exponential um so checking a list crosschecking a list and what you already have in your grocery cart you're doublechecking two different things you're looking all the way through your list and you're looking all the way through your cart if the entries aren't very big that's fine but if you're looking through every cart or the entire store with a list that is you know the size of the dictionary that can get really really long really fast that is exponential anything you're writing that is exponential and in its bigo notation is probably not going to be a great solution long term like we were talking about scaling before think about the future of your site just because it works for you and maybe one other person if you have hundreds of thousands of users that is going to slow everything down to the extent that it's not even usable anymore that's going to be a really big deal now obviously o to Infinity like I'm going to flip a coin until I get ahead that in the worst case scenario another thing we need to remember that could be forever um it probably wouldn't be um depending it could be the first time but we're looking at worst case scenario here what I want you to take away from this is using Big O notation you can look at your code and figure out if it's really going to be a good solution for the future of your site as it grows with more data more users anything that is exponential or below or depending on the algorithm itself it really might not be very practical
