With timestamps:

00:00 - Learn how to succeed as an engineering manager
00:02 - in this course from Ankita Kulkarni.
00:05 - Anyone can learn to be a good leader.
00:08 - Ankita is an experienced engineering manager
00:11 - and she has a bunch of great tips to share with you.
00:15 - A lot of developers aren't sure
00:16 - how to become a engineering leader
00:18 - or to succeed as an engineering manager or a leader.
00:22 - They continue to act like individual contributors
00:24 - as they aren't sure how to manage.
00:26 - And as a result, the people that report into them
00:29 - or under the leadership suffer.
00:31 - Now, just like we learned JavaScript, Angular, React
00:35 - or any other upcoming technology,
00:38 - just like that leadership is also a skill set
00:40 - that you need to develop and learn.
00:41 - No one is a born leader.
00:43 - You need to learn how to become a good leader.
00:45 - In this specific course, I wanted to cover a few things
00:48 - and give you a plan and strategy
00:51 - to become a successful engineering leader.
00:54 - So we will cover things like what I wish I knew
00:56 - before becoming an engineering manager,
00:58 - how to become a great leader,
01:00 - a engineering leadership roadmap,
01:02 - what are some differences
01:03 - between a software engineering manager and a technical lead.
01:05 - And not just that, we will also cover
01:07 - how to communicate as a developer,
01:10 - which will also translate into leadership skills
01:12 - and how to give and receive feedback
01:14 - as a developer and a leader.
01:16 - So I really hope you enjoy this course.
01:18 - If you have any questions, just comment below
01:20 - and let me know.
01:21 - Are you a individual contributor
01:23 - that is curious about engineering leadership
01:25 - or you wanna know what it takes
01:27 - to become a successful engineering manager?
01:30 - As I reflected back in my career,
01:32 - there were a few things that I kind of wish I knew
01:36 - before I made the transition
01:37 - to becoming an engineering manager.
01:40 - So in this video, I'm going to cover it all.
01:42 - So first of all, I wanna say
01:44 - that I was quite happy with the move,
01:45 - but I really want you to know all these things
01:48 - so you can make the best decision for yourself.
01:51 - So let's get started.
01:52 - So the first thing that I experienced as a transition
01:55 - from being a developer to an engineering manager
01:57 - was that you do feel like an outsider to your very own team.
02:01 - Now you have a lot more power, right?
02:03 - Being a leader, you can basically decide
02:06 - who you get to hire within the team, who gets promoted.
02:10 - You know all the salaries of your team members.
02:13 - So you're not going to look at your team
02:15 - the same way as you did before.
02:17 - So you start feeling like an outsider
02:19 - to your very own team.
02:20 - That is the first thing you will experience
02:21 - as you make the transition, or at least I did.
02:24 - Because you have a lot more control and power,
02:27 - you are now in charge of making the decisions.
02:29 - Your team is going to look up to you as a leader.
02:32 - If they don't know what to do,
02:34 - they are going to look up to you for that.
02:36 - So that is a bit of a shift and a mindset shift
02:38 - that you need to go through as you make the transition.
02:41 - So the percentage of time that you will spend coding
02:44 - will drastically and significantly reduce
02:47 - as a engineering manager.
02:48 - A lot of people have this misconception
02:50 - that as you transition from being a developer
02:53 - to an engineering manager, it is basically a promotion.
02:56 - It is the same role, maybe with a little bit more
02:58 - of people managing responsibilities.
03:00 - Well, if you want to be a mediocre engineering manager,
03:03 - then sure, you can do that,
03:05 - but don't spend a lot of time coding.
03:08 - Because again, you have a lot more responsibility
03:10 - as an engineering manager.
03:12 - The first goal should be to grow the people on your team,
03:15 - make sure that they are set up for success,
03:18 - make sure you are reviewing their performance,
03:20 - giving constructive feedback, managing stakeholders,
03:24 - doing roadmap planning for the future.
03:26 - And there is lots more that you need to do
03:29 - to make sure that you are setting up your team
03:31 - for success as an engineering leader.
03:33 - They are looking up to you for leadership.
03:35 - So if you spend a lot of time coding behind the computer,
03:39 - then you will necessarily will not have time
03:41 - to focus on your other important responsibilities,
03:44 - and this will not make you a successful engineering manager.
03:47 - So you might be wondering, well, if I'm not gonna code,
03:50 - then how am I called an engineering manager?
03:52 - Will I not just be a manager then?
03:55 - Well, here's the thing.
03:56 - You still have a lot of technical expertise
03:58 - that got you to where you were, right?
04:01 - But when you take on an engineering manager position,
04:04 - it's a completely different role.
04:06 - You can still use your strengths from being a developer,
04:10 - and you should definitely be involved
04:12 - in knowing all the architectural decisions,
04:14 - to making sure that your team has really good standards
04:18 - technically, make sure there are good code review processes,
04:21 - make sure that you understand
04:23 - all the architectural decisions being made,
04:26 - and your team is not just thinking
04:28 - just for that specific module that you're working on,
04:31 - but they're also thinking about the scalability as well,
04:34 - right?
04:35 - So your experience as a developer
04:39 - is going to definitely help you
04:41 - when you transition to become an engineering manager.
04:44 - But again, what got you here will not necessarily get you
04:48 - to where you wanna go
04:50 - being a successful engineering manager.
04:52 - So make sure that you keep this in mind as you transition.
04:55 - So again, should you code?
04:57 - Well, it totally depends on your team's responsibilities.
05:00 - If you have everything else under control,
05:02 - if you do wanna pick up a task here and there,
05:04 - just to make sure you understand the code base
05:07 - a little bit more,
05:08 - you are able to give feedback to your team,
05:10 - and you're not just a manager managing,
05:13 - you also are involved,
05:15 - and they feel that you are involved as well,
05:19 - then you can definitely do that.
05:21 - But again, make sure that the main focus of your position,
05:25 - of your role is not to code.
05:27 - It's all these other things,
05:28 - including maybe a little bit of coding.
05:30 - So again, make sure you don't spend a lot of time
05:33 - doing that.
05:33 - You will feel a therapist many times
05:37 - as you deal with people.
05:39 - So the people on your team are going to come to you
05:43 - with all sorts of problems.
05:45 - Their performance is not necessarily tied
05:47 - to their day-to-day job,
05:49 - but also what's going on personally,
05:51 - what's going on outside of work as well.
05:53 - So sometimes you might feel
05:55 - like you know a lot more about them personally as well
05:58 - in order to make sure you connect with them professionally.
06:01 - And you don't necessarily need to do that,
06:03 - but I guess being a good engineering manager,
06:06 - you need to care about the people that you work for.
06:08 - Well, you will feel like a therapist at times
06:11 - because you will spend a lot of time talking
06:14 - about their thoughts and feelings,
06:17 - but it's also important that you start drawing boundaries
06:19 - because people are going through maybe a lot of stuff.
06:23 - So if they need to talk to someone professional
06:26 - other than you,
06:27 - then definitely advise them of that as well.
06:30 - But you will feel at times that it's necessary
06:32 - to talk to them,
06:33 - not just about work stuff,
06:34 - but also about personal stuff.
06:36 - So make sure that you keep it all confidential
06:38 - because they think of you as a leader and they trust you
06:42 - and that's why they're sharing all this information with you.
06:44 - So make sure that you do that.
06:45 - For an example, there was a developer who I was managing
06:50 - and they clearly were not giving their 100%.
06:54 - And I personally felt I could see that they were not,
06:57 - even though they were always on top of their performance,
07:00 - in this specific case,
07:01 - they were not necessarily doing that.
07:02 - Their performance was not great anymore.
07:04 - So I got really curious to just check in
07:07 - and ask them what's impacting them.
07:10 - And it turns out there was something personal going on.
07:12 - Without getting into too many details,
07:14 - I was able to navigate and guide them
07:17 - in terms of how they can manage
07:18 - their personal and professional life.
07:20 - And I also asked them to maybe take a day off,
07:23 - a personal day,
07:24 - just to make sure that they take care of that
07:26 - before they can focus on work.
07:28 - The next day they came back
07:29 - and they were able to really recharge
07:31 - and really take the time off
07:33 - and deal with whatever they had to deal with personally
07:35 - to be able to show up at work and give their 100%.
07:39 - So again, this is important that you have that empathy
07:43 - and you treat people as humans
07:46 - and not just resources when you are an engineering manager.
07:50 - Being an engineering manager can be lonely at times.
07:53 - Like I mentioned that you will not feel like
07:56 - the same team member anymore
08:00 - as you did before when you are an IC.
08:02 - And as you become an engineering manager,
08:05 - you cannot necessarily talk to the developers on your team
08:08 - about the problems that are going on in the company
08:10 - because as a leader,
08:12 - you need to shield them from that.
08:13 - You need to make sure that they feel comfortable
08:17 - talking to you about things
08:18 - and they feel like their position is in a good spot.
08:21 - If you talk to them only about the problems that are there
08:24 - or whatever is going on in your mind,
08:27 - then they might not feel as confident about the team
08:29 - and the company that they work at.
08:31 - So make sure that you shield them of that,
08:34 - but also find a support system for yourself
08:37 - and other engineering leaders
08:39 - that you can talk to about problems as well.
08:41 - So maybe find a mentor, take care of your own mental health
08:45 - and make sure that you have a good support system
08:48 - so that you can talk about problems
08:50 - or and come up with solutions as well.
08:54 - The direct reports are also going to share something
08:56 - personal and private with you
08:58 - and you will not be able to share that with anyone else
09:01 - and you need to keep it confidential, right?
09:03 - Because that is their personal information.
09:06 - There's a lot that you will keep to yourself
09:09 - and which will also make engineering leadership
09:11 - a little bit lonely, but it doesn't have to be.
09:13 - You can find a support system, you can join a community,
09:16 - you can talk to other people and their leaders
09:19 - going through the same journey as you
09:21 - so that you don't feel alone
09:23 - because it can definitely feel lonely at times.
09:26 - I was also socially exhausted being in a lot of meetings
09:30 - as I transitioned from being a developer to a manager.
09:34 - Now, I was booked in a lot of back-to-back meetings
09:39 - because everyone wanted to get a piece of me,
09:42 - everyone had to pick my brain on things
09:45 - and I had to make a lot of decisions just to make sure
09:48 - that my team is on the right path.
09:51 - But it doesn't have to be,
09:52 - you don't have to be socially exhausted.
09:54 - So you need to start planning your week a little bit better,
09:57 - kind of figure out what the focus of the week is,
10:00 - what your priorities are of that week
10:02 - and accordingly push the things that are not that important
10:05 - to the next week and try to say no as well,
10:08 - which we'll cover later in this specific video,
10:10 - but you will be socially exhausted
10:12 - as you will be in a lot more meetings than you did
10:15 - being a developer.
10:16 - As an engineering manager, you will shield the team
10:19 - from unnecessary meetings,
10:21 - but that also means you are going to accept
10:23 - a lot more meetings because you wanna make sure
10:25 - that you have things under control.
10:27 - So you will be socially exhausted,
10:29 - so make sure that you spend some time,
10:31 - take some time in the morning or in the afternoon
10:33 - and book some focus time for yourself in your calendar
10:36 - that no one gets to book over
10:37 - so that we can get some meet time
10:39 - and are also able to get some work done as well.
10:41 - But that is a reality.
10:43 - You will feel socially exhausted at first
10:45 - without proper systems in place.
10:47 - You are going to find a bit difficult to say no at first.
10:51 - Now, unless you were a leader before
10:52 - and you are already good at that, then please ignore this.
10:55 - But if you're not, then it is definitely going to be
10:57 - a bit difficult for you to say no
10:59 - because everyone would need a piece of your team.
11:02 - They would all come to you for priorities,
11:05 - their priorities that they need to work on,
11:07 - and you need to figure out how you can
11:09 - position those priorities along with current priorities
11:13 - that your team is working on.
11:14 - If you say yes a lot, your team is going to be burnt out.
11:17 - So make sure that you don't say yes to everyone.
11:22 - A strategy that I transitioned was,
11:25 - instead of saying no, you can talk to them
11:27 - about the priorities that you do have
11:30 - and accordingly prioritize their stuff
11:33 - maybe in the next quarter
11:35 - or maybe a month from now and so on.
11:37 - So you're not necessarily saying no,
11:39 - you are saying not now, let's do this at this specific day.
11:43 - So again, but you're going to have it
11:45 - a bit of a difficult time initially to say no
11:48 - and make sure that you know what your priorities are.
11:51 - As you transition to being a manager,
11:53 - you are going to manage a team
11:55 - that will have different personalities.
11:57 - So for example, some might be more extroverted
12:00 - and will speak up a lot more
12:01 - but others are not as extroverted
12:04 - and they don't speak up
12:06 - and maybe need an opportunity to do so.
12:08 - So for example, extroverted folks are going to talk
12:13 - as they think and they will keep talking.
12:16 - Whereas introverted folks will need some time
12:18 - to think first and then talk about anything.
12:21 - So you really need to make sure that you're balancing
12:24 - both personality types in a specific team
12:26 - so that you're not just listening
12:27 - to one specific personality type as you make decisions.
12:31 - You need to balance it out to make sure
12:33 - that you are asking questions
12:36 - and making sure that you're including everyone
12:39 - in the meeting, making sure that you have organized
12:41 - the meeting in such a way that everyone can speak up
12:44 - and give their thoughts.
12:46 - Maybe you can ask someone about what they are thinking
12:50 - and so on.
12:51 - But again, you are going to deal
12:52 - with a lot of different personality types.
12:54 - So you need to make sure you need to balance them all.
12:57 - Otherwise you're only going to lean onto the person
12:59 - that is the loudest and you really don't want to do that
13:01 - as an engineering manager.
13:02 - You want to create a transparent culture
13:04 - and where people are happier to work for you.
13:08 - They are excited in the morning to come work for you
13:11 - for the team and you are going to be a huge part of that.
13:14 - That's why it's important for you to make sure
13:16 - that you take this into account.
13:19 - What got you here will not necessarily get you further.
13:23 - As a developer, it's your job to make sure
13:26 - that your skills are up to date, right?
13:28 - So if it is a specific technology that you work in your team,
13:32 - for example, React, how do you make sure
13:33 - that the performance of the app is really good
13:36 - or how do things work with server components
13:38 - and so on, right?
13:40 - Now, React is important as a developer
13:43 - because that's the technology that your team is using.
13:46 - But when you transition to be a manager,
13:49 - you shouldn't be focusing on making sure
13:51 - that you have up-to-date React skills.
13:53 - You need to be focused on how can you be the best manager
13:57 - that you can be?
13:58 - And those skills are very different
14:00 - than being a developer skills.
14:02 - So make sure you're spending time
14:03 - on the development of your skills as well,
14:06 - such as how do you give constructive feedback?
14:08 - How do you promote someone?
14:10 - How do you do performance reviews and so on?
14:13 - Sometimes you are going to disappoint people
14:16 - because their promotion did not get accepted.
14:19 - And even though you think that they deserve to get promoted,
14:24 - you need to be in a position to put them forward
14:28 - in the best possible way.
14:29 - And those are skills that you need to learn
14:32 - which you didn't necessarily knew about
14:34 - when you were a developer.
14:36 - So again, there are a lot more skills
14:38 - that you need to learn being an engineering manager
14:41 - that you won't necessarily know as a developer.
14:43 - So make sure you keep learning
14:45 - and figure out how others are doing it in the company.
14:49 - Are there specific strategies and frameworks
14:51 - that you can use to make sure
14:52 - that you're giving feedback the right way?
14:54 - Or if someone is causing any troubles in the team,
14:57 - then make sure they are aware of that
14:59 - without making them feel too bad about it.
15:02 - There's so many things that you will deal with
15:04 - as an engineering manager
15:05 - that you didn't necessarily deal with before.
15:07 - So make sure that you are on top of your personal skills
15:10 - as well and your reading books, eBooks, and so on,
15:14 - just to make sure that you have control of everything.
15:17 - And again, this makes the journey fun for you as well
15:20 - because you're not just stuck with the skills
15:23 - that you transitioned with.
15:25 - You also are always improving and growing
15:28 - and experimenting with the team that you're working with
15:32 - so that your team becomes a really high-performing team.
15:35 - Unfortunately, not every day is going to be a good day
15:40 - being a manager.
15:41 - Sometimes you have to give really difficult feedback
15:44 - to your team or a specific team member
15:47 - and their response to that might be really emotional
15:50 - because the feedback is really difficult.
15:52 - And because of that, your day is going to be impacted.
15:55 - You are going to spend hours talking to someone
15:58 - just to make sure that they understand the impact
16:00 - they're possibly having on the team.
16:02 - And again, that can be very exhausting.
16:06 - Sometimes you want to get someone promoted,
16:08 - but their promotion is not going to get accepted
16:11 - or they want more salary
16:13 - and you are unable to get it approved for whatever reason.
16:17 - You are going to have a bad day because of that
16:20 - because it is going to be really emotional for you.
16:24 - So being an engineering manager can be very difficult
16:28 - because you are dealing with people
16:29 - and people are humans, not just computers.
16:32 - When you are a developer, you're writing code
16:34 - and you're just dealing with computers,
16:36 - you're obviously dealing with team dynamics
16:37 - and communication and whatnot.
16:39 - But being a manager, that is in the forefront.
16:42 - That's why you really need to make sure
16:43 - that you're digging care of your mental health
16:45 - as you transition because it's not just
16:49 - your team's mental health that's important,
16:50 - it's also yours because if yours will start to get affected,
16:54 - then the team is going to experience the same as well.
16:57 - It's the same analogy that when you're in an airplane,
17:00 - make sure that you're wearing an oxygen mask as well
17:03 - before you give it to other people.
17:05 - It's the same thing being a manager
17:06 - that you are always in service of other people,
17:10 - but make sure that you also take care of your mental health
17:12 - and your personal needs as well.
17:14 - And if you do need to take the time off,
17:16 - then please do so because that will have an impact
17:18 - on others too.
17:19 - So again, make sure you take care of yourself.
17:23 - What if you don't like being an engineering manager
17:25 - and you want to go back to being a developer,
17:27 - you really like coding and now you have to deal
17:29 - with all these different things
17:31 - that you don't necessarily want to deal with
17:33 - or you had a misunderstanding of the position
17:36 - and I want to say that if you do give it a shot,
17:39 - let's say there's an opportunity available in your team
17:42 - or in a company and you decided to go for it
17:44 - and six months later or a year later, you are like,
17:47 - you know what, I love being a manager,
17:49 - but I love being a developer as well, so I want to go back.
17:53 - It's completely okay for you to go back.
17:56 - In fact, I would highly recommend it.
17:58 - It's important to keep going back and forth
18:00 - between being a manager and being a developer
18:02 - so that you are really appreciative of both positions
18:06 - because a lot of times when you're a developer,
18:08 - you don't necessarily know what an engineering manager
18:10 - has to go through
18:12 - because they don't necessarily share everything with the team
18:15 - because they're supposed to shield the team, right?
18:17 - So being a manager and then switching to a developer,
18:20 - you are going to build a lot more empathy as well,
18:23 - but there's nothing wrong in switching back and forth.
18:26 - In fact, it's totally recommended
18:28 - because if you think about it,
18:30 - in your career throughout your life,
18:32 - if you want to stick to just being one position,
18:34 - then it's probably not going to be as challenging
18:37 - by switching back and forth,
18:39 - you're learning a lot more skills
18:41 - that will be helpful in either way.
18:43 - So again, if you really want to switch, go for it,
18:46 - but I would highly recommend you
18:48 - to also give it a shot to see
18:50 - if you really like being an engineering manager
18:51 - and making sure that your skills are up to date
18:54 - and you are always learning and growing
18:57 - because as a developer, you do that,
18:59 - so do the same when you transition to being a manager.
19:02 - Well, I talked a lot about what it was like
19:05 - when I transitioned from being a developer
19:07 - to an engineering manager.
19:08 - I know you might be wondering,
19:10 - is it even worth it to become an engineering manager?
19:13 - Well, I would say yes,
19:14 - it's really rewarding seeing the growth of people
19:17 - and the impact that you are going to have on folks.
19:20 - I have worked with so many different people
19:22 - and when I do give them feedback
19:24 - or I provide suggestions and insights
19:26 - based on my experience to help them grow,
19:29 - it is awesome to see that they work on those
19:31 - and they grow because of you as well.
19:35 - So the impact is going to be huge on other people's career.
19:38 - So again, being an engineering manager is really rewarding.
19:42 - The other thing is you will have a lot more influence
19:45 - and the impact is really growing to grow massively
19:49 - in a company because your focus
19:51 - is not just going to be your team,
19:53 - but your impact is going to be really visible
19:55 - across the org as well, right?
19:57 - So being a developer, you only think about your team,
19:59 - but being an engineering manager,
20:01 - your influence and your impact is going to grow a lot more,
20:05 - which won't necessarily be possible being a developer.
20:08 - By being an engineering manager,
20:10 - you get to control or have a say on the roadmap
20:13 - on what your team gets to work on.
20:15 - So based on the goals of the company,
20:17 - you get to decide what's important for the team.
20:19 - The problems that you will solve as an engineering manager
20:22 - will be at a larger scale
20:24 - and it won't be at a smaller scale anymore.
20:27 - So again, you are going to be solving bigger problems
20:29 - that are important for the company
20:31 - for not just your one team, but several teams.
20:35 - So your impact is going to be a lot more
20:38 - if you take advantage of it, being a manager.
20:40 - If teams are not working together,
20:43 - you get to be the one to make sure
20:46 - that they talk to each other.
20:48 - They have the same common understanding.
20:51 - You become the decision maker,
20:53 - but also someone who comes and resolves problems.
20:56 - And it sometimes is going to be hard
20:59 - because misunderstandings can happen,
21:01 - but as an engineering manager, you are the leader.
21:04 - So they are going to look up to you
21:06 - for solving all their problems.
21:08 - And even though you don't necessarily need
21:10 - to solve the problem on your own,
21:12 - you can make sure that the teams get together
21:14 - and talk it out and facilitate the meetings
21:16 - so that problems get resolved.
21:18 - So the problems that you'll be solving
21:20 - won't just be your own problem
21:23 - as you were when you were a developer,
21:26 - but you get to control and you get to work
21:28 - on a lot more problems because of it.
21:30 - So I would say that being an engineering manager
21:33 - is really rewarding.
21:35 - If there is an opportunity in your organization
21:37 - or your team where you get to be a leader,
21:40 - I would highly recommend you to take up that position
21:43 - and learn the skills necessary
21:45 - to become a engineering manager.
21:47 - Now, having said that,
21:48 - I hope this video was really useful for you.
21:51 - I really wanted to make sure that I cover all my feelings
21:54 - that I went through from being AIC to a manager.
21:58 - And before you take up the position,
22:01 - I want you to know what you need to be aware of
22:03 - as you go through so you don't feel alone.
22:05 - Software career paths, career ladders, you name it.
22:09 - There are so many different names for the same thing.
22:11 - It is extremely important as a developer
22:13 - to know what career path is right for you
22:15 - and what are the different levels you can go to
22:18 - as you grow in your career.
22:20 - There are different titles in the industry
22:23 - and every title is so confusing.
22:25 - It's hard to know whether you should become
22:27 - an engineering manager or a staff developer
22:30 - or a technical lead.
22:32 - So we will be talking about titles
22:34 - and how they can be so confusing
22:36 - and what are some things that you should be aware of
22:39 - in tech.
22:40 - So as a developer, there are typically two career paths
22:43 - that you can take and there are different levels
22:46 - in different companies.
22:47 - Now, there is a diagram right in front of us
22:49 - and I'm just showing you this diagram
22:52 - just to give you an understanding of the different levels
22:54 - and what these fancy titles are like
22:57 - so you get a really good understanding
22:59 - of what every level is expected to do
23:02 - and what to know about it.
23:03 - So for example, if you are a developer,
23:05 - there are two paths.
23:06 - One is called the individual contributor path
23:09 - and the other one is the leadership track.
23:12 - Now, a lot of times you will find that an IC path
23:16 - has not that many levels compared to a leadership path
23:21 - and that is why a lot of developers end up becoming managers
23:24 - because they don't know how else to grow
23:27 - unless they go into a leadership track
23:30 - but it doesn't necessarily have to.
23:32 - You need to find the right company and the team
23:34 - where these levels are properly defined
23:36 - so you can keep growing
23:37 - even after you reach a specific level.
23:40 - So for example, as a developer,
23:42 - you can first become a entry-level developer,
23:46 - then you join to an intermediate developer
23:48 - and then you go to a senior developer
23:51 - but whereas if you are already a senior developer
23:53 - or even a high intermediate,
23:55 - you can become a technical lead, a staff dev
23:58 - or a engineering manager.
24:00 - I have some good news.
24:02 - I have been working on a course to take you
24:04 - from a developer to a engineering manager
24:07 - and make you a very successful engineering manager.
24:11 - So if you're interested, add yourself to the wait list.
24:14 - This course will cover everything that we have talked about
24:16 - in this specific engineering manager series
24:19 - but there's a lot more that I couldn't cover in this series
24:22 - that I will cover in the course.
24:24 - So please feel free to check it out
24:26 - and take a look in the description below.
24:28 - Now it's a very common thing
24:30 - that there would be three different levels
24:32 - in a developer titles.
24:33 - For example, there would be an entry-level developer,
24:36 - an intermediate developer and a senior developer
24:39 - and a senior is supposed to take on
24:41 - a lot more leadership responsibilities and tasks
24:44 - compared to an intermediate or an entry-level developer
24:48 - and a senior developer is also maybe asked to mentor
24:53 - maybe more entry-level devs
24:55 - or maybe devs more junior to them
24:57 - just so that they start practicing
25:00 - their leadership responsibilities as well.
25:02 - So being senior doesn't just mean that you write code
25:05 - but you also need to make sure that you're mentoring others
25:07 - and helping improve your processes,
25:10 - your team processes and so on as well.
25:12 - But the minute you become a senior developer,
25:15 - it does open up two paths for you.
25:17 - One is that you can become a technical lead,
25:19 - a staff developer.
25:21 - After that, you can become a solution architect.
25:23 - Now again, it completely depends in every company
25:27 - that after a senior developer, you can become an architect.
25:30 - And what is the difference between an architect
25:33 - and a staff developer or a tech lead?
25:36 - Well, an architect is mainly responsible
25:38 - for architecting the different apps.
25:40 - They are responsible for maybe growing the team.
25:43 - An architect really takes a look
25:45 - at the company's architecture holistically
25:47 - and recommends the best practices
25:49 - and makes sure that the architecture makes sense.
25:52 - And you might even have heard the joke
25:54 - that an architect does draw a lot of boxes,
25:57 - which is not wrong, but an architect does a lot more
26:01 - and they think about the company holistically,
26:03 - the company architecture holistically technically.
26:06 - Then a senior developer could also become a technical lead
26:09 - or a staff dev and a tech lead would essentially
26:13 - be more responsible for leading
26:16 - all the technical responsibilities of a developer,
26:21 - for example.
26:22 - But depending on the company, after a tech lead,
26:25 - you can become a principal developer
26:28 - or a distinguished engineer or a fellow.
26:31 - Now again, these are different levels
26:32 - and the responsibilities keep growing.
26:35 - But again, and the scale at which you do these things
26:40 - are also different.
26:41 - So for example, a distinguished engineer
26:43 - or a principal developer or a fellow role
26:46 - may not be available in more smaller
26:48 - or medium-sized companies
26:50 - because there's not a need for it.
26:52 - But in bigger companies such as the Fortune 500 companies,
26:56 - you will more likely see these roles
26:58 - just so that people, when they reach a specific level,
27:01 - they're still able to grow
27:02 - and they have something to strive for
27:04 - and they don't just leave the company.
27:06 - So as a developer, you can take the IC path
27:08 - and this is what your path will look like.
27:09 - So how does a leadership path look like?
27:12 - Well, let's say you are a senior dev
27:14 - or a tech lead or a solution architect
27:17 - and you can basically go to becoming a engineering manager.
27:22 - So you might be wondering,
27:23 - what's the difference between a tech lead
27:25 - and an engineering manager?
27:27 - Well, or a staff developer and engineering manager.
27:30 - Now, tech lead and staff developer
27:33 - can be completely different responsibilities and roles
27:35 - and most likely they are,
27:37 - but a lot of companies also have them
27:39 - more or less the same.
27:40 - So let's talk about the difference between a tech lead
27:43 - and an engineering manager.
27:44 - You can think of a tech lead
27:45 - as a technical partner to an engineering manager.
27:48 - An engineering manager is responsible
27:50 - for the leadership of the team.
27:53 - They are responsible for making sure
27:55 - their proper processes, they're managing the people,
27:58 - they are understanding the organization strategy
28:01 - and making sure that the technical strategy is also intact.
28:04 - But who is responsible for executing it?
28:06 - It's the tech lead.
28:07 - A tech lead is responsible
28:09 - for all the technical aspect of things.
28:11 - Having said that, sometimes a tech lead
28:14 - is in fact the engineering manager in specific companies.
28:17 - But a tech lead more or less would be responsible
28:20 - for executing the technical vision of the company
28:23 - and making sure that the architecture is intact
28:26 - and making sure that the developers
28:28 - are following the best practices.
28:29 - They are participating in core reviews and so on.
28:32 - Whereas the engineering manager are more towards process,
28:36 - people, technical excellence,
28:39 - making sure the strategy is intact.
28:42 - If they do have any questions
28:44 - or if they do wanna implement specific things
28:48 - and give feedback,
28:49 - they would necessarily work with the tech lead
28:51 - and provide that feedback so that they work well together
28:54 - and make sure that the technical lead is responsible for it.
28:58 - But ultimately the leadership of the team
29:01 - is more on the engineering manager versus the tech lead
29:04 - because engineering manager is responsible
29:07 - for management of people as well.
29:08 - Engineering management role is more of a leadership role
29:11 - whereas a tech lead is less of a leadership role.
29:15 - They are still considered on the IC path
29:17 - and may not be included in specific leadership meetings
29:21 - because they are necessarily more tied
29:23 - to the technical aspects of things.
29:26 - An engineering manager would be going into those meetings,
29:29 - understanding the strategy, giving feedback,
29:31 - talking to stakeholders
29:32 - and then partnering with tech lead to give that information
29:36 - and share that information with the team.
29:38 - So there's that barrier,
29:39 - but sometimes technical leads
29:41 - have that management experience as well.
29:43 - So they are also invited to those specific meetings as well.
29:46 - Tech lead are also more hands-on
29:48 - compared to engineering manager
29:50 - and they are responsible
29:52 - for the delivery of specific features
29:54 - whereas engineering managers are less hands-on
29:58 - and depending on the responsibilities
30:01 - and the scope of the position,
30:03 - they may not even code, for example,
30:05 - because there is a tech lead role.
30:07 - But in a lot of companies,
30:08 - there is no tech lead involved at all.
30:10 - In that case, an engineering manager
30:12 - does play a tech lead role
30:15 - or they look for lead developers within the team
30:19 - that are interested in potentially becoming tech leads
30:22 - and engineering manager works with them
30:25 - to become technical leads and help grow them
30:29 - and improve their technical skills and leadership skills.
30:32 - Because as a tech lead,
30:33 - you do need to have leadership skills
30:35 - and that is why it can be confusing
30:37 - because there is a overlap of skills.
30:40 - So what does growth look like
30:41 - after you become an engineering manager?
30:43 - Well, you can become a senior engineering manager
30:46 - and the difference between the two
30:47 - is engineering manager does lead a team of developers
30:52 - but a senior engineering manager leads a team of managers.
30:56 - So they have several engineering managers
30:59 - reporting under them.
31:00 - I have been both an engineering manager
31:02 - and a senior engineering manager
31:04 - and I was working towards being a director.
31:07 - So a director is more or less responsible
31:09 - for a specific domain.
31:11 - They look at things more holistically
31:15 - beyond what a senior engineering manager would do.
31:18 - They're responsible for a really big domain
31:20 - and making sure the senior engineering managers
31:22 - have what they need
31:23 - and they are taking a look at things even more holistically.
31:27 - So it can happen that being a director,
31:29 - you are responsible for a even bigger domain
31:34 - and you have a lot more pressure
31:36 - and stress because of it.
31:38 - Similarly, senior director is the same idea.
31:40 - A few directors are reporting into senior directors
31:43 - and same thing for VP as well.
31:45 - A VP overlooks the entirety of engineering
31:49 - and they have a bunch of directors
31:52 - and senior directors reporting into the VP
31:54 - and the VP is most likely reporting into the CTO
31:57 - and so on, right?
31:59 - But again, like there are so many different positions
32:02 - in tech, especially on the leadership track
32:05 - that you can go on to if you just wanna climb the ladder.
32:08 - If you don't want to, that's completely okay.
32:10 - If you decide that, hey,
32:12 - I just wanna be a engineering manager,
32:14 - I don't wanna grow more,
32:15 - I don't wanna take more responsibility,
32:17 - that's completely okay
32:18 - because you can just focus on that specific position.
32:21 - The more you grow,
32:22 - the more responsibilities you are going to have
32:25 - as a developer.
32:27 - So you really need to assess where you see yourself
32:30 - in five years or 10 years.
32:32 - You may not know now and that's completely okay.
32:34 - You can try a position and figure out if you like it or not
32:37 - and that is why it is my recommendation to all developers
32:40 - to if there is an opportunity
32:42 - of a leadership position within the team
32:44 - or if there's an opportunity of getting senior,
32:47 - even if you are on the IC track,
32:49 - take that position and first try it out
32:52 - and see if you like it and if you do like it,
32:54 - then work with your manager
32:55 - or potentially a promotion path for you
32:58 - because you have already proven yourself for those skills.
33:02 - So I really hope this makes sense.
33:04 - There is a website called levels.fyi.
33:07 - This is a really good website
33:09 - to check what the different levels are in every company,
33:13 - what salaries every position should have
33:16 - and how it all works together
33:18 - because this is extremely important for you
33:20 - before you join a team or a company.
33:22 - Look at levels.fyi and take a look
33:25 - at the different positions and where you stand as well.
33:28 - I highly recommend you to reach out to someone
33:30 - in the company and understand
33:32 - what the different positions are
33:34 - so that you know where you stand
33:37 - and can apply for the position accordingly.
33:39 - Now, it can be very easy to say
33:41 - based on all these titles that we looked at
33:44 - that TechLead is supposed to do this
33:46 - or staff engineer is only supposed to do that
33:49 - or an engineering manager is only tied
33:51 - to maybe the people management responsibilities.
33:54 - But every company is so different
33:56 - that you might see that there's a lot of overlap
33:59 - and that is why it could lead to a lot of confusion
34:02 - when you're looking for a job as a leader
34:06 - or as a developer in general.
34:08 - So make sure you take a look
34:09 - at the different positions in the company.
34:11 - And depending on the scope of the org,
34:15 - like how big your company is
34:17 - and the scope of the work,
34:18 - there's also a staff developer involved
34:21 - and potentially a principal developer
34:22 - that oversees even a bigger domain or a specific domain.
34:26 - So for example, if let's say you wanna make sure
34:30 - that the notifications in your company
34:33 - are properly taken care of,
34:35 - there should be some sort of notification architecture
34:38 - that's there for maybe mobile web and so on.
34:41 - So how will the architecture look like?
34:43 - And in that case, maybe a technical lead
34:46 - maybe tied to a small team will not be able to handle that
34:50 - and might not have the domain expertise.
34:52 - And there needs to be someone like a principal developer
34:56 - that looks at notifications for the entire company
34:59 - and works with different teams
35:01 - implementing those notifications.
35:03 - So maybe works with the mobile team
35:04 - working for mobile notification,
35:06 - works with the web team for web notifications and so on
35:09 - so that from a user perspective,
35:11 - those notifications are the same
35:13 - and users don't need to know the technical architecture
35:17 - and all the behind the scenes of the code.
35:19 - So again, depending on your company,
35:21 - these roles can be very different
35:23 - but it's important to know which company you're going for.
35:26 - So accordingly, you can go for the position as well.
35:30 - Now, here is my ask for you.
35:32 - If you join a company and if you notice that
35:35 - there are no career ladders
35:37 - or expectations are not clearly defined,
35:40 - please work with your manager,
35:43 - please work with your HR and give feedback to them
35:46 - to make sure that these do get implemented
35:49 - because without these,
35:50 - it's incredibly difficult for developers to grow
35:53 - and otherwise one-on-ones with your manager
35:56 - are just going to be things you just talk about
35:59 - and there is no action being implemented.
36:01 - Or if you do give this feedback
36:03 - and if your manager says that you need to work on X thing
36:06 - and if you do work on it,
36:08 - suddenly there's a Y thing that was never talked about
36:11 - which probably your manager heard from some other manager
36:15 - who probably has more influence in the company.
36:18 - So make sure that everything is documented
36:21 - so that you know exactly what it needs
36:24 - and what you need to get promoted within the company.
36:29 - Now, if there's no career path
36:31 - or if there is no documentation,
36:33 - you can take the initiator to define it.
36:35 - It doesn't matter what level you are at.
36:37 - In fact, the more initiative you take
36:39 - and the more support you get,
36:41 - this will start to get more defined
36:43 - for all developers within the company
36:45 - and having a process will really help in this case.
36:48 - So I really urge you to create a process
36:52 - or create something in your company if it doesn't exist
36:55 - and try to get an alignment from HR or your manager
36:58 - to begin with just to get started.
37:01 - I really hope this gives you a solid understanding
37:03 - for what to look out for when you're looking for a job,
37:06 - the different titles in the industry,
37:07 - the different career paths and so on.
37:09 - So let's take a look at this mind map
37:11 - that I have created for us to walk you through exactly
37:14 - what day in the life of an engineering manager looks like.
37:17 - You don't necessarily need to do
37:18 - all of these things in a day,
37:20 - but these are some things that you need to do
37:23 - and are expected to do in your role as an engineering manager.
37:27 - So you can think of this mind map as a checklist
37:29 - of things that you should be doing.
37:30 - So if you're doing them, great.
37:32 - If you're not, and if you're curious about what it takes,
37:34 - become an engineering manager,
37:35 - then this is a great place for you.
37:37 - So let's take a look.
37:38 - So take a look at this mind map.
37:40 - There are several parts of this mind map,
37:42 - and I don't want you to be scared
37:44 - because I have basically listed down all the things
37:48 - that most engineering managers are expected to do.
37:51 - Now keep this in mind that every org and team
37:54 - are quite different.
37:55 - So you might be expected to do more things or less things
37:58 - if they already have a role for that,
38:01 - if they already have a position for it.
38:03 - Because engineering management and project management
38:08 - and a lot of it, it has a ton of overlap.
38:12 - If there are roles for that,
38:13 - you might not necessarily have to do those things,
38:15 - but if not, then you might have to.
38:17 - So I'm gonna cover a pretty robust roadmap,
38:21 - but keep this in mind so that you don't get scared
38:24 - that you might have to do everything in this.
38:26 - This specific engineering manager roadmap
38:28 - is divided into a few different pillars.
38:31 - One is organization, team, people, hiring, product,
38:35 - technical, communication, and personal growth.
38:38 - So let's take a look at each one by one.
38:41 - If you like a copy of this mind map,
38:43 - you can download it for free.
38:44 - Take a look at the description below if you like,
38:46 - and you can have a copy of your own.
38:48 - So the first thing that we are going to take a look at
38:50 - is organization.
38:51 - I would like you to have a top-down view of your org
38:55 - so that you are able to know exactly how your role
38:59 - as an engineering manager plays in the wider org
39:02 - and how goals are set, how you create objectives
39:06 - for your teams, and so on.
39:07 - Let's start to zoom in on the org.
39:09 - So there are a few things you need to keep in mind
39:11 - as we discuss about the org structure.
39:14 - So the first is you need to have a really solid understanding
39:16 - of the vision of your org
39:18 - and what the early vision looks like.
39:20 - So every year, maybe towards the end of the year
39:23 - for the upcoming year,
39:25 - the founders or the senior leaders meet
39:28 - and they discuss what the vision for the org
39:30 - should look like in the next year or the next five years
39:33 - and so on.
39:34 - And accordingly, they decide they want to reach
39:36 - to X milestone or X goals and X number,
39:40 - and that's how they decide, okay,
39:42 - the early vision of this specific year
39:44 - or the upcoming year is going to look whatever.
39:47 - Now you need to understand that vision very clearly
39:50 - because then you are going to make decisions
39:52 - for your team based on that,
39:54 - and you will understand how your team plays a role
39:56 - in that vision.
39:57 - If you create goals for your teams against those goals,
40:00 - then I kind of think of your team as a tiny boat
40:05 - which is steering away,
40:06 - which is going to slowly turn the ship away
40:10 - because all these tiny teams
40:12 - or all these tiny boats for the ship
40:14 - are not heading in the right direction.
40:17 - So your ship is going to slowly start turning away
40:20 - and that's not what we want.
40:22 - So have a good understanding of the org.
40:25 - After you understand what the vision of your org looks like,
40:28 - try to understand the business vision
40:30 - and the technical vision as well.
40:32 - So based on the business vision, the VP, the CTO,
40:36 - or whoever that might be,
40:38 - your senior leaders, senior technical leaders
40:40 - are also going to create a vision for your org.
40:43 - So for example, we should move away from REST APIs
40:46 - and only use GraphQL,
40:48 - or we should make sure that all our experiences
40:52 - are fully accessible and accessibility is a priority
40:55 - for every user experience that we create, which it should be.
40:58 - So whatever that might be, we are going to,
41:01 - you need to know that vision
41:03 - so that you have a better understanding for your team.
41:05 - So for example, if accessibility is part of it,
41:08 - then you need to make sure that when you are creating
41:10 - your roadmap for your team,
41:12 - accessibility is added as the criteria
41:14 - because that's also part of the vision.
41:17 - The next thing is planning.
41:18 - Now, based on that vision and the goals of your business,
41:21 - you need to understand which goals apply to you
41:24 - because there might be goals for the entire company.
41:26 - Based on those goals, then you need to start planning
41:29 - and planning your yearly roadmap
41:31 - and then your quarterly roadmap as well.
41:34 - So based on that, you're going to assess.
41:36 - You wanna achieve X percent in a year.
41:40 - This is our goal.
41:41 - And then based on that, for every quarter,
41:44 - we are going to try to meet X number, right?
41:47 - Or we are going to try to hit $10 million
41:50 - or whatever that might be.
41:51 - Although, how many dollars does it associate to?
41:54 - It's not necessarily in your control.
41:56 - You are also partnering with product and design
41:58 - and all the other departments as well, marketing and so on.
42:02 - But you need to assess what the quarterly goals look like.
42:06 - And then accordingly set ambitious goals.
42:09 - Now, one framework that you can use to divide those big goals
42:14 - into smaller goals is OKRs.
42:16 - OKRs stand for objective key results.
42:18 - And this is a framework where you can assess
42:21 - how you can set a ambitious objective
42:23 - and associate that to a key result
42:25 - you wanna associate yourself with.
42:29 - So I won't go too deep into what OKRs are,
42:32 - but this should give you a good understanding
42:34 - that it's the framework that is quite commonly used
42:37 - while planning for the year
42:39 - and while planning the roadmap.
42:41 - The next thing is collaboration with HR partner.
42:44 - So for your org, whenever you have to,
42:47 - you also need to understand the decisions
42:49 - that the org needs to make.
42:50 - There's gonna be an HR.
42:51 - In every HR department,
42:53 - you are going to have a partner that you collaborate with.
42:56 - And that partner is going to help you communicate
42:58 - exactly what they need you to communicate to your team.
43:02 - So make sure that you have a really strong relationship
43:05 - with the HR partner
43:06 - and if there is any downturn communication
43:08 - or if there is any important org communication
43:10 - or anything like that,
43:12 - you will be able to know exactly the words to use
43:15 - to communicate that to your teams
43:17 - so that you make sure your team is in the best part possible
43:21 - and they have all the information necessary as well.
43:24 - So again, in organization,
43:26 - these are a few things you need to keep in mind.
43:27 - The next thing we are going to take a look at is team.
43:30 - Now, team is very important for you
43:32 - as an engineering manager.
43:34 - There are quite a few things you need to do for your team
43:37 - just to make sure that your team is in the right spot
43:41 - and you have full control as a leader.
43:44 - Now, make sure that you have good processes
43:47 - and there is good documentation of processes.
43:50 - You're iterating on those processes as well.
43:52 - Again, too much process is not good.
43:54 - Have a right balance for process and task management
43:57 - such as who gets to do, who gets to work on what.
44:01 - You need to strike a really good balance here
44:02 - because you don't want to get assigned tasks to folks
44:05 - that are not necessarily interested in those tasks.
44:07 - So make sure you have a good understanding
44:09 - of the people working on that task
44:12 - and also they are motivated to work on those tasks as well
44:16 - and give them full autonomy as well.
44:18 - So for example, some people do create for autonomy.
44:20 - So for example, if they do love autonomy
44:23 - then assign them a task, talk to them about a high level goals
44:27 - and let them have full control
44:29 - in terms of how they want to execute it.
44:31 - And you can be the sounding partner for them
44:33 - and understand how they plan to implement it and so on.
44:36 - But based on what the interests are,
44:39 - what the strengths and weaknesses are,
44:41 - accordingly assign tasks as well.
44:43 - Then you need to also measure your team performance.
44:46 - So for team performance, anything you want to measure,
44:49 - it needs to be tracked so that you are able to measure.
44:52 - So assign proper metrics and track them,
44:56 - conduct weekly retrospectives.
44:58 - Retrospectives are a way to reflect on how the week went,
45:02 - what went well, what didn't go so well and so on.
45:04 - But this is how you can measure the team performance.
45:07 - For example, if your team's weekly output
45:11 - is a certain number of tasks,
45:13 - then make sure that you are able to maintain that momentum.
45:17 - If you are not, then your project planning
45:19 - might not go as planned.
45:21 - So make sure that you have a good understanding
45:23 - of all of that.
45:25 - The next thing is project management.
45:26 - Now this is something that you need to understand
45:30 - that there might be another role altogether
45:32 - in every company.
45:33 - Now every company is so different.
45:35 - So if you don't have this,
45:36 - then you might have to do it on your own
45:39 - or you have to gather around the developers
45:41 - and assign these roles and take turns doing them.
45:45 - So for project management,
45:46 - you need to plan the milestones.
45:48 - So for example, what are some tasks and milestones
45:50 - you need to hit along the way?
45:52 - Because the project can be maybe four to six months long
45:55 - or one to two months long,
45:56 - but what are the many milestones that you can hit on the way
45:59 - just to showcase to your stakeholders
46:02 - and to your team and product managers
46:04 - and everyone that you are heading in the right path?
46:08 - Then you need to monitor that performance.
46:10 - You need to make sure that you have
46:11 - good productivity practices.
46:13 - So if you do know that there are certain things
46:16 - that are maybe creating a lot more toil for your team,
46:19 - then maybe invest some time into automating that
46:23 - just because you don't want your team to be wasting time
46:26 - on things that where they can be productive.
46:28 - So make sure that you do invest time there.
46:31 - Then is prioritization, grooming, planning.
46:34 - So plan your tickets properly, plan your tasks properly,
46:37 - make sure that the backlog of tickets is properly groomed
46:42 - and make sure that you understand what the priorities are
46:46 - based on the roadmap that you have planned as well.
46:48 - But again, if the tick tasks have proper details,
46:50 - then the developers will be able to work on them as well,
46:53 - but obviously gather around the developers
46:55 - and make sure you work on all of these.
46:57 - Then is continuous improvement.
46:59 - Any of those will keep changing every month.
47:01 - Now, this is just a good list to have,
47:03 - but you need to make sure that you keep improving,
47:05 - you keep iterating with your team.
47:07 - Now, for every team, different things are going to work.
47:09 - Not everything is going to work for every single team.
47:12 - So make sure you cater to that
47:14 - so one team can differ from the other and so on.
47:17 - A very important pillar of engineering management
47:20 - are the people.
47:22 - So this is something you need to handle
47:24 - in a very delicate way
47:25 - because your decisions have a huge impact on your team
47:29 - and people are going to be impacted.
47:30 - So make sure that you know exactly what you're doing.
47:33 - Always create a plan for it.
47:36 - Make sure that the decision-makers with you
47:39 - are also on the same page
47:41 - when you do take a look at anything to deal with people.
47:45 - So because you really want to make sure you get this right.
47:46 - So in people, you have to hire and onboard the people
47:50 - that you work with.
47:52 - Now, if you have a team of maybe two developers,
47:55 - if you want to make a team,
47:57 - if you want to create a team of seven developers,
48:00 - and five to seven is usually the max for a team size
48:03 - or a healthy max for a team size for one engineering manager.
48:08 - And in that case, you need to make sure
48:09 - that you're hiring the right people
48:11 - and onboarding them as well.
48:13 - And hiring and onboarding is a separate pillar
48:15 - for this reason because there's lots to talk about it.
48:17 - So we will take a look at it very soon.
48:21 - Next is the happiness of the people.
48:23 - It's very important that you foster a culture
48:27 - of transparency, you create a psychological safety for them.
48:31 - And I do have a blog post written on this topic.
48:33 - If you're interested, take a look at the description,
48:36 - but make sure that these things do align
48:39 - with the team culture and people are happier in general
48:43 - because this will add to the culture of your team.
48:46 - If people are happier, people are excited to wake up
48:48 - in the morning and come work for you,
48:50 - then you are going to be more successful as a happy outcome.
48:53 - People are going to be more productive because of that
48:56 - because they are interested in making the company better.
48:59 - So make sure that the happiness is really accounted for.
49:02 - The next thing is feedback.
49:04 - The way you gather feedback
49:05 - and the way you give constructive feedback
49:08 - is extremely important.
49:09 - Now, feedback is so important that you really need
49:12 - to make sure that you build really good frameworks
49:14 - and patterns for people
49:16 - because different people accept feedback differently.
49:19 - Different people ask for feedback in a very different way.
49:24 - So make sure that you gather feedback about them
49:27 - in a proper way,
49:28 - and you also give them constructive feedback as well.
49:31 - Then is career growth.
49:33 - Now, career growth is extremely important
49:35 - in a developer's life.
49:36 - The developers reporting into you really are interested
49:39 - to know where they stand,
49:41 - what can they do to get to the next level,
49:43 - and there should be full transparency related to this.
49:46 - So first, are there any career ladders set up
49:50 - in the company?
49:51 - And career ladders could be things like
49:52 - if they are a intermediate developer,
49:55 - then maybe they want to get to senior developer
49:57 - or staff developer, principal developer, and so on.
50:01 - Now, depending on the level you are at,
50:04 - there could be different levels in every company.
50:06 - So the career ladder can be completely different
50:09 - in every company.
50:10 - Now, if they want to take the individual contributor path,
50:14 - then they can,
50:15 - or if they want to take maybe a staff technical leader out,
50:19 - then they can do that as well.
50:20 - Now again, depending on the team that you work on,
50:24 - or a staff or a technical lead
50:26 - can be considered a leadership position,
50:28 - or it could be considered an IC position,
50:30 - an engineering manager onwards
50:32 - is considered a management position or a leadership position.
50:34 - So again, career ladders differ from company to company,
50:38 - but make sure that you know what path they want to go on
50:42 - so that you can give them opportunities accordingly.
50:46 - Make sure that every developer is creating smart goals.
50:50 - Smart is a framework used to create goals,
50:53 - and I will link what smart means in the description below,
50:57 - but they allow you to create really smart goals.
51:01 - Then make sure that they do have a development plan
51:03 - or a growth plan.
51:04 - Again, different companies call it different things,
51:06 - but a growth plan allows you to document
51:09 - where they're at in their journey,
51:11 - how their goals can tie to the objectives
51:14 - that they're working on,
51:15 - and those objectives align to the company's vision.
51:18 - And this is why I kind of gave you an idea of the org vision,
51:21 - the network map early vision,
51:23 - and then these goals should map to that
51:25 - so all the developers are working
51:27 - to make the company better.
51:29 - Then is the BRAG document.
51:30 - A BRAG document is a document
51:33 - where you document exactly all the cool things
51:37 - that you have done and things that you are proud of.
51:39 - So make sure every developer in your team
51:41 - has a specific BRAG doc that they are proud of.
51:45 - And make sure there are also promotions planned out
51:48 - and mapped out as well.
51:50 - So if they are already doing a good job
51:53 - and meeting expectations
51:54 - or even exceeding expectations in a specific level,
51:58 - don't wait for them to ask you to promote them.
52:02 - When you think they are ready,
52:03 - start creating a plan with them
52:05 - just to make sure that their career growth is on track.
52:08 - So again, all of these things are very important.
52:11 - Then is performance reviews.
52:12 - The performance reviews are extremely important.
52:15 - Now, one thing you want to really avoid,
52:17 - a one mistake that you really want to avoid
52:18 - is wait until the very last minute
52:21 - to give a performance review to the person
52:24 - or to give a feedback to the specific developer.
52:27 - Anything that comes out of performance reviews,
52:29 - none of it should come as a surprise to the developer.
52:32 - If they're surprised, you have not done a good job
52:35 - as an engineering manager.
52:37 - So make sure that your performance reviews
52:39 - are really on point and you already have a document
52:43 - which is your growth plan that ties it all together.
52:46 - Hiring the right people in your team
52:49 - is going to be majority of the battle for you.
52:52 - If you have really good people working for you,
52:55 - then it's going to be easier for you to meet your goals,
52:58 - your org goals, and as a result,
53:00 - it's going to be really good
53:02 - for your career growth as well.
53:04 - So make sure that you hire right.
53:06 - If you don't hire the right people,
53:08 - it can have a serious impact
53:10 - and that is why you need to make sure
53:11 - you have good practices set up and as well.
53:14 - So let's talk about what happens once you hire.
53:18 - So once you do hire,
53:19 - make sure you have really good onboarding set up for them
53:22 - because your goal as an engineering manager
53:24 - should be that they don't take the time to onboard,
53:26 - but it doesn't take too long for them to onboard
53:29 - because you have set up the right processes in place
53:33 - and everything that they need to do
53:34 - and need to know to get up and running quickly in their job.
53:38 - So make sure there's proper documentation.
53:41 - You have set up 30, 60, 90 day goals for them.
53:43 - So they have some sort of a metric to head
53:47 - so that they can work on those goals in their 30 days,
53:51 - in their 60 days, and in their 90 days.
53:52 - So make sure their first 90 days are set up for success.
53:56 - I have written a ebook on your first 90 days
53:59 - as an engineering leader
54:01 - and everything that you need to do
54:02 - to make sure your first 90 days are set up for success.
54:05 - If you're interested,
54:06 - take a look at the description below.
54:07 - The next thing you need to make sure you do
54:09 - is go through diversity and unconscious bias training.
54:13 - As humans, we all have our own biases
54:15 - and we need to make sure when we are hiring
54:18 - that those biases don't interfere
54:20 - with the way we hire people.
54:22 - That's why it's important that you go through this training
54:24 - before you start interviewing people
54:26 - because then you're going to know
54:28 - what are some of the biases that you may have
54:30 - and how to make sure that those don't play a role
54:33 - when you're hiring folks.
54:34 - Make sure you partner with recruiting
54:36 - as you're hiring as well.
54:37 - Honestly, recruiters are your best friends during hiring.
54:41 - If you tell them what you're looking for,
54:43 - they are going to go and find people on LinkedIn
54:46 - to make sure that the people are the right fit
54:49 - for your specific team.
54:51 - Then is interviews.
54:52 - So when you're hiring,
54:53 - make sure you have really good processes set up
54:55 - to hire folks.
54:58 - So make sure there's diverse interview participation.
55:01 - There are people from your team interviewing them as well.
55:04 - So they are comfortable for the new hires
55:07 - that are going to join the team.
55:08 - Make sure that there's a good technical challenge set up
55:11 - and not something that anyone can just Google.
55:13 - Then there's also a section for soft-scale assessment.
55:17 - Their communication is on point
55:19 - so that you know that they are a good fit for your team.
55:22 - Conduct resume reviews
55:23 - and you also hire for other teams as well.
55:26 - So as much as it's important that you hire for your team,
55:29 - you will also be expected
55:31 - to interview other team members as well.
55:33 - So make sure that you're really a important part of it.
55:36 - You're hiring for other teams,
55:38 - but you're also reviewing resumes
55:40 - and making sure that you're improving
55:43 - the culture of the company.
55:45 - Hiring is something that you do need
55:47 - to invest really good time in
55:49 - because as an engineering manager,
55:51 - you are going to hire folks for you,
55:54 - not just for your team, but also for other teams.
55:57 - So understanding their goals
55:58 - and hiring the right people will really help you.
56:00 - Having a diverse set of interviewers really make
56:04 - for a good interview experience for the interview as well.
56:09 - But again, hiring is going to be a really important part
56:11 - of your role and something you should not take it lightly.
56:14 - So far, we have talked a lot about different pillars
56:19 - of engineering management,
56:20 - but product is a pillar that is extremely important
56:23 - as a engineering manager.
56:25 - When you are making decisions as an engineering manager,
56:28 - you will also have a product counterpart,
56:31 - a design counterpart, and maybe several others too,
56:34 - just to make sure that all the decisions are being made
56:37 - and all the key players are in the room,
56:39 - all those decisions are being made for your team.
56:42 - Even though the people in your team are reporting to you,
56:45 - there might be designers that are reporting
56:47 - to a design manager or there might be a product person
56:50 - that is reporting to a senior product manager and so on.
56:54 - So you need to make sure that you are not the only one
56:58 - making decisions and having a really tight collaboration
57:01 - with product.
57:02 - And I should also add to your design is extremely important
57:05 - or any other folks that are important in decision-making.
57:09 - So in product, let's make sure
57:11 - that there is business alignment.
57:13 - So you understand what the business is looking for.
57:16 - And when product does create a strategy
57:20 - as an engineering manager, you review that strategy
57:23 - and really are on the same page as well.
57:26 - You make sure you ideate on different ideas
57:28 - that are really good for the product,
57:30 - create a different strategy
57:32 - and collaborate on that strategy as well.
57:35 - And based on the product strategy,
57:37 - make sure you also have your technical roadmap representation
57:40 - and focus as well.
57:42 - So if there's any technical that needs to be added
57:44 - or if there's any toll that's being created
57:48 - because of a specific task on your team,
57:51 - then make sure that gets added and represented
57:53 - in the technical roadmap as well.
57:54 - A technical roadmap is always a good idea
57:56 - of features that you would like to improve,
57:58 - things that architecture that needs to happen
58:02 - to make sure that we sustain the scale
58:05 - of the product requirements.
58:07 - So again, having a technical roadmap
58:08 - would be really important
58:09 - and something that you can initiate
58:11 - and get the team involved to start creating.
58:13 - Next is decision-making and critical thinking.
58:16 - Always, as I mentioned earlier,
58:18 - make sure that all the key decision-makers are in the team
58:22 - and never say no, make sure that you use critical thinking
58:25 - just to make sure that you don't just say no,
58:28 - but also are able to come up with creative solutions
58:31 - for the problems because again, you need that creativity
58:34 - to push the art forward.
58:36 - Communicating understanding of technical requirements.
58:39 - Since you are a technical person in the room,
58:43 - you would have to a lot of times communicate the product
58:46 - and do other counterparts,
58:48 - why certain tasks are taking this long,
58:51 - why something needs to happen,
58:53 - why the architecture needs to be prioritized
58:56 - or whatever that might be,
58:57 - make sure that you're communicating that
58:59 - and all of you are on the same page.
59:01 - And lastly, prioritizing toil and technical debt
59:04 - in collaboration with product as well.
59:06 - So again, if there's any toll that's been created
59:08 - because of past products or past features
59:12 - that you have implemented
59:14 - or anything that just needs to be prioritized,
59:17 - then you need to prioritize in the roadmap as well.
59:20 - But again, making sure everyone is on the same page
59:23 - because you're not the only decision-maker in the room.
59:26 - So again, collaboration with product
59:28 - is extremely important as a engineering manager.
59:31 - We should call this technical excellence
59:33 - because as an engineering manager,
59:35 - you need to make sure that your team
59:37 - is following the best practices
59:40 - and everything is under control
59:42 - from an architecture perspective and so on as well.
59:45 - Now again, you don't need to solve
59:46 - all of these problems yourself,
59:49 - but get the team together to make sure
59:52 - that these problems are being solved.
59:54 - So for example, in the technical aspect,
59:58 - there would be managing on-call
60:01 - and if there's any support required
60:04 - and there are off-hours of what required,
60:06 - then are there best practices for it?
60:08 - That you are monitoring toils,
60:09 - so you have proper dashboard set up
60:12 - just to make sure everything is being tracked.
60:14 - If there are any incidents
60:16 - that have created toll in the past,
60:18 - an incident could be something,
60:20 - let's say the system goes down
60:21 - because of a feature that you own
60:23 - or if there was a massive impact to the customers
60:26 - and make sure that you have
60:28 - incident management practices as well.
60:30 - There's service ownership,
60:31 - so anything that you create, you own.
60:34 - So any of the services that you own
60:36 - truly belongs to you and your team
60:39 - and you truly own that.
60:41 - If you have any architectural best practices
60:43 - documented as well so that anyone new
60:47 - that any new team collaborating with your team
60:50 - can refer that document
60:52 - just to make sure everything is on point.
60:54 - Then there is documentation and technical analysis
60:57 - being done as well for every feature that you work on
61:01 - so that anytime any new feature needs to be worked on,
61:04 - there's documentation
61:05 - and there's a source of truth for everything,
61:07 - so just make sure that this is being done
61:10 - and again, you don't need to do it,
61:11 - you can get your team,
61:13 - you can delegate these tasks to your team to do it as well.
61:16 - Then there is technical roadmap
61:18 - and alignment and technical strategy
61:20 - which aligns with what we talked about in product
61:22 - and then there are good code quality processes
61:25 - and templates created for your team
61:27 - which allows your team to write better code.
61:29 - So for example, there are better code review practices,
61:32 - there's a no blame culture,
61:33 - you are using pair programming as a way to collaborate
61:37 - and get developers together and improve their skills
61:39 - and so on and lastly,
61:41 - you have proper practices for automatic deploys
61:44 - which allows you to automate your entire process in general.
61:47 - So anything that can be automated,
61:49 - you can think of technical bucket or technical pillar
61:52 - as a technical excellence bucket
61:54 - which allows you to make sure
61:55 - that the technical excellence for your team is really great
61:59 - and make sure that you are following
62:00 - all the best practices possible while deploying
62:03 - because otherwise you're just going to create more toil
62:05 - which will impact customers eventually.
62:08 - So again, technical is really important.
62:10 - Communication is a very important pillar
62:12 - as a engineering manager.
62:14 - You need to make sure that you're communicating right
62:16 - and effectively, frequently with anyone
62:20 - who you're working with
62:22 - so that you all are on the same page
62:24 - and there are no misunderstandings in your work culture.
62:27 - So for example, if you're working cross-team,
62:30 - then there is proper collaboration
62:32 - and practices with cross-teams
62:34 - that people are talking to each other,
62:37 - there's proper meeting facilitation,
62:39 - the teams are working well together.
62:40 - Make sure that you partner with the engineering manager
62:43 - or the product manager or the design manager
62:46 - or whoever the leaders are of that team
62:51 - so that you all are on the same page
62:53 - and collaboration is seamless.
62:55 - Towards the end of the day,
62:56 - all the team members should be happy
62:58 - that the collaboration happened
62:59 - so that everyone is happier.
63:02 - Then if there are proper async communication practices,
63:06 - after 2020, we are in a spot
63:09 - where a lot of us are in a remote culture.
63:11 - So it's important that communication practices are async
63:15 - and there are remote communication practices
63:18 - and you don't necessarily need to get in a call
63:20 - for everything, there are less meetings.
63:23 - And if there are meetings
63:24 - and there's a proper agenda to those meetings,
63:26 - there's proper meeting facilitation.
63:28 - As an engineering manager, a lot of times you might,
63:30 - you will find that you are facilitating meetings
63:33 - and just asking questions
63:35 - and asking the right questions
63:36 - to get the conversation started
63:38 - so that the decisions are being made,
63:41 - not every meeting will have the set of questions necessary
63:46 - but just having the communication there
63:49 - really helps a lot.
63:50 - And that you are managing up as well.
63:53 - So you have a manager
63:54 - and you really need to make sure
63:56 - that whatever you're working on,
63:57 - you are also sharing the work that you are doing
64:01 - and you're truly owning up your career.
64:03 - I have written a blog post on managing up
64:05 - so take a look at that
64:07 - because there's a lot more to talk about
64:08 - while managing up
64:09 - and why it's so important for your career.
64:11 - So make sure you're doing that and communicating that
64:13 - because your boss, your manager should be an ally for you
64:18 - and they are going to be in rooms
64:19 - that probably you're not going to be
64:21 - so they need to represent your work
64:23 - and that's why you make sure you communicate effectively.
64:26 - Then there's stakeholders.
64:27 - Now, anytime you're working on something,
64:29 - there is a stakeholder for it.
64:31 - There are multiple stakeholders responsible
64:33 - for the work that you're doing
64:35 - and they are impacted, their team is impacted
64:37 - with the work you're doing as well.
64:39 - So make sure that there are frequent stakeholder updates.
64:42 - There's communication with stakeholders.
64:44 - They know how frequently you are going to communicate
64:47 - and involve them early.
64:49 - So if your team was working on something,
64:51 - involve them early to get their feedback
64:53 - because people are invested in the thing
64:56 - that they give feedback on
64:57 - and that they put time investment in.
65:01 - So if they give feedback early,
65:02 - they will be more invested
65:04 - and as a result, they are going to be happier
65:06 - because they can see that the team is already working on it.
65:09 - So this is why communication is extremely important
65:12 - with stakeholders and having a really good partnership
65:15 - with them and as a manager,
65:17 - communication pillar is extremely important
65:19 - and if there's one thing you need to start doing
65:22 - as you transition from being a developer
65:24 - to an engineering manager, it's communication.
65:26 - Make sure your communication is on point.
65:29 - We talked a lot about communication with stakeholders,
65:32 - technical excellence, product, team growth,
65:36 - people growth and lots more.
65:38 - But this is a very important bucket as well.
65:42 - I've mentioned this in the past,
65:44 - in other videos that engineering management
65:47 - is just like being on an airplane
65:49 - where you need to put your oxygen mask first
65:53 - and then give the oxygen mask to your team.
65:56 - So if you cannot breathe,
65:58 - you will not be able to help your team either.
66:00 - So make sure you're investing time
66:02 - in your personal growth as well.
66:04 - You are leveling up your skills
66:06 - and there are a few ways you can level up your skills
66:09 - through books and eBooks,
66:10 - presentations to share learnings,
66:12 - book coffee chats with other engineering leaders,
66:15 - join communities, take courses and so on.
66:18 - And as you already know,
66:19 - I'm already working on a course
66:21 - on helping you become a successful engineering manager.
66:25 - If you're interested, add yourself to the wait list
66:27 - and check out the course.
66:29 - I'm really excited for this course
66:31 - and everything that I'm covering in this specific video
66:33 - and lots more is also going to be included.
66:36 - And this is the part where you really need
66:39 - to level up your skills
66:40 - and make sure that the people on your team
66:42 - don't become the experiment for your growth.
66:44 - So this course is really here to help you for that.
66:47 - So the next thing you need to do for your personal growth
66:50 - is also document your knowledge,
66:51 - share your learning with other leaders in the company,
66:54 - make sure that you have a really good relationship
66:57 - with them as well,
66:58 - because who knows when your team
67:00 - would need to work with them,
67:02 - but also it's important that having a good network around you
67:06 - would really help you grow in your career as well.
67:09 - Then set up goals for yourself.
67:12 - Again, everything that we talked about
67:14 - in the growth section for your team
67:16 - also applies to you as well.
67:17 - Make sure that you do have a development plan
67:20 - that you're working on.
67:21 - You are setting up smart goals as well.
67:23 - You are creating those goals and measuring as well.
67:26 - Because again, as I said before,
67:28 - because as an engineering manager,
67:30 - it's extremely important that you measure everything.
67:32 - So make sure that you are doing that for yourself
67:36 - as much as you're doing that for your team as well.
67:39 - And about all of this,
67:40 - it's important that you take care of your mental health
67:43 - and personal development as much as you care for your team.
67:46 - I really hope you have a solid understanding
67:49 - for what it's like to become an engineering manager
67:53 - and how that differs from being a developer.
67:55 - Just by comparing the day in the life
67:57 - of an engineering manager,
67:59 - we got to know a lot about what a developer does
68:03 - and doesn't do,
68:03 - and what an engineering manager does behind the scenes.
68:07 - You can read all the books on the wall,
68:09 - take unlimited workshops on how to become a leader,
68:12 - but unless you get practical experience,
68:15 - you are never going to know what leadership looks like.
68:19 - So in this specific video,
68:21 - we are going to talk about
68:22 - how you can find opportunities as a leader,
68:25 - what does a good leader even mean, or what do they do?
68:29 - What are some things you should avoid doing as a leader?
68:32 - My name is Ankita, and I am an educator,
68:35 - and I will help you level up in your engineering career.
68:38 - I have more than a decade worth of experience
68:41 - leading developers, so you are in good hands.
68:44 - Let's get started.
68:46 - So the first thing you should do if you haven't already
68:49 - is become a mentor for someone.
68:51 - We all have something that we can teach others
68:54 - based on our experience.
68:56 - So figure out how you can become a mentor
68:58 - in the company that you work at,
69:00 - or even in general,
69:01 - figure out who asks you a bunch of questions
69:04 - and see if they're interested in potentially
69:07 - being your mentee,
69:08 - because being a mentor would be a really good,
69:11 - valuable experience for you
69:13 - to start tapping into leadership.
69:15 - It is kind of like the beginner phase of leadership.
69:18 - You will sort of understand
69:19 - what it's like to grow someone else.
69:21 - You're not directly responsible for their career
69:24 - or their growth right now.
69:26 - We are still invested in them.
69:28 - So you will kind of get an idea
69:30 - what it's like to become a leader.
69:32 - Next, you should figure out
69:34 - if there is a small project that you can lead.
69:37 - So again, you can figure out how to work with people,
69:40 - how to assign them tasks,
69:41 - how to figure out what the priorities are,
69:43 - and also work with your direct manager
69:46 - as you are in this lead capacity.
69:48 - So you will also start to see what your manager does
69:51 - in certain situations being a lead.
69:53 - So figure out and identify small projects
69:56 - that you can work on as a leader.
69:58 - Start shadowing your manager in meetings.
70:00 - Figure out what decisions they make.
70:02 - See what the day in the life of your manager looks like,
70:05 - because that's potentially also going to be your day as well.
70:09 - If you shadow your manager,
70:11 - you can start taking on leadership responsibilities,
70:13 - but also figure out if this is something
70:15 - that you like or not.
70:17 - Because if you don't like it, you don't want to do it,
70:19 - that's completely okay.
70:21 - But at least by this,
70:22 - you would be able to figure out what even a good leader does.
70:25 - You become the average of five people
70:27 - you surround yourself with.
70:29 - If your goal is to become a leader
70:31 - or figure out how to become a leader,
70:33 - what you can start doing is find out who in the company
70:38 - is a leader you aspire to become.
70:40 - You will learn a lot by watching them,
70:42 - and also context is very important.
70:44 - So you will figure out what engineering leadership
70:47 - looks like in the company that you work at.
70:49 - So find a mentor that can help you get there.
70:53 - Discuss them your potential goals and your interests,
70:56 - and that you're trying to figure out
70:57 - if you want to become a leader or not.
71:00 - A leader in one company might struggle in another.
71:03 - That's why finding a mentor in your org
71:05 - would really help you speed up that learning process.
71:08 - So what makes a good leader?
71:09 - If you want to become one, you need to figure out
71:12 - what is the secret sauce to becoming a leader?
71:14 - Now, there's never a checklist of things
71:17 - that I can provide and say, yeah, check this off
71:20 - and you will become a good leader.
71:22 - Leadership is complex because we are dealing with people
71:24 - and people are humans.
71:26 - So you need to tweak your checklist
71:29 - and add to it or remove items from it
71:31 - depending on the org you work at.
71:33 - But here are a few things that makes a good leader.
71:36 - You will notice that the people that work for that leader
71:40 - are incredibly happy.
71:41 - Or even if they are not very happy,
71:44 - they are satisfied with their job and job responsibilities.
71:48 - A good leader will always know
71:49 - how to build a high-performing team.
71:51 - And a high-performing team is not a team of high performers.
71:55 - A high-performing team is essentially a team
71:58 - that collaborates effectively,
72:00 - knows how to give feedback to each other,
72:02 - they ship fast, they iterate, and they move on.
72:06 - A good leader will know how to create
72:07 - a high-performing team out of any situation.
72:10 - A good leader is not just growing the people on their team,
72:14 - but they are also driving business results,
72:16 - which are very, very important.
72:18 - You can think of this analogy
72:19 - where you can imagine a duck swimming in a pond.
72:23 - When you look at that duck, the duck seems really calm
72:26 - and everything is going okay.
72:28 - But underwater, you will notice that the duck
72:31 - is working really hard to make sure that they seem calm
72:35 - on the surface level.
72:37 - And that's exactly what a good leader would look like.
72:40 - You will not notice that there's a lot of work
72:43 - that's going on in the background
72:45 - because they're doing such a good job shielding the team
72:48 - from all the chaos and pressure that's happening in the org.
72:51 - So a good leader will definitely be doing that.
72:55 - A good leader will know exactly how to grow people
72:58 - at different skill levels.
73:00 - And if they don't know, then they're going to ask others
73:02 - for help and figure out how you can grow in your team.
73:06 - They are never going to give you the answers.
73:08 - They're always going to coach you and question you
73:12 - so that you can come to those answers yourself.
73:14 - And it always creates that light bulb moment for you.
73:18 - A good leader will not give you the answers
73:20 - because they know that in the future,
73:21 - you're going to come back to them with the same question.
73:24 - But if they ask you, then you will come
73:26 - to that answer yourself
73:27 - and you don't need to ask them in the future.
73:29 - And that's what a good leader does.
73:31 - Communication is extremely important as a leader
73:34 - and a good leader will always communicate effectively,
73:38 - thoughtfully and will prepare the communication
73:41 - before any major event.
73:43 - So for example, there might be different types
73:45 - of communication.
73:46 - There could be one-on-one communication
73:48 - with the direct reports or people they didn't work with
73:50 - or they could be org-wide communication
73:52 - or big channel communication.
73:54 - And a good leader will always thoughtfully prepare
73:57 - what communication looks like.
73:59 - This communication can literally make or break a company.
74:02 - It can create chaos and it will create uncertainty
74:05 - and you don't really want that.
74:08 - So if you want to be a good leader,
74:09 - you need to make sure that you're communicating
74:11 - thoughtfully and effectively.
74:13 - A good strategy for this is always create a document
74:16 - and write down everything that you want to say
74:18 - and review it and tweak it and use your words wisely
74:23 - and then get other leaders to review the document as well
74:26 - before sharing it in a channel
74:29 - because the impact of that could be huge.
74:31 - And this way you are aligned on the communication.
74:34 - So a good leader will always have
74:36 - really good communication strategies.
74:38 - I have a video coming out on how to effectively communicate
74:41 - that you should check out.
74:42 - A good leader will always create psychological safety.
74:46 - Now, psychological safety means that you can make mistakes
74:50 - as a developer or as a member of the team
74:53 - and you won't be punished for it.
74:55 - There are no bad consequences for it.
74:57 - As a developer, you are going to make a lot of mistakes.
75:02 - So imagine if your manager or your leader
75:06 - doesn't create a psychologically safe place
75:10 - to make mistakes, then you are going to have a ton of bugs
75:14 - and you're always going to hide your mistakes.
75:17 - And if you want to be a good leader,
75:18 - you should never do that.
75:20 - So a good leader will always create
75:22 - a psychologically safe place for you to make mistakes
75:25 - and won't punish you for it.
75:28 - Instead, figure out a way to avoid those same mistakes
75:32 - in the future and create a process for it.
75:34 - As a good leader, you must always praise publicly
75:39 - and give feedback privately.
75:40 - So this is a perfect example
75:42 - wherein if you want to create a psychologically safe place,
75:45 - never bash anyone publicly
75:47 - because you're going to create that fear
75:49 - for everyone else on your team
75:51 - and you really don't want to do that.
75:52 - A good leader will create that safe space
75:55 - for everyone to make mistakes.
75:56 - As a good leader, you always want your people
75:58 - to grow and level up.
76:00 - If they are stagnated, if they're not growing,
76:04 - then what's the point?
76:05 - You need to make sure that the people on your team
76:08 - are growing and this will really make you a good leader
76:10 - because you are helping them grow.
76:12 - You're giving them feedback,
76:13 - you are creating a development plan for them,
76:16 - you're really figuring out the gaps they have
76:18 - and helping them get to the goal
76:20 - where they want to get to,
76:21 - or you're helping them level up.
76:23 - So really you need to make sure
76:25 - that the people on your team are growing
76:27 - as a really good leader.
76:29 - You don't need to problem solve each and everything
76:32 - as you did as a developer.
76:34 - Now you need to handle problems on a case by case basis
76:37 - because these problems are often problems with people.
76:41 - So a good leader will know exactly
76:43 - how to handle a specific difficult situation.
76:47 - You never want to run away
76:48 - from difficult situations as a leader
76:50 - and you should almost be comfortable dealing with it.
76:53 - It can be hard at first, but the more you do it,
76:56 - the better it get, but handle with care
76:58 - and handle with thoughtfulness
77:00 - and it will always come across as genuine.
77:02 - So as a leader, you always want to analyze things
77:05 - on a case by case basis
77:06 - and figure out problems or brainstorm problems together.
77:10 - You might have a lot of control as a leader
77:13 - and a lot of power as a leader,
77:14 - but you still want people to come work for you.
77:17 - And if you act like a boss and not as a leader,
77:22 - then you will not have those people coming to work for you.
77:27 - And you really don't want to do that
77:28 - because you will not have a team.
77:30 - So really make sure that you don't act like a boss,
77:34 - but you start being a leader, start acting like a leader.
77:38 - And based on some of the things I talked about,
77:40 - because if you start being a boss,
77:42 - then you're commanding
77:43 - and people don't like to work for bosses.
77:46 - So start being a good leader.
77:48 - You need to lead by example as a leader.
77:51 - You need to have a positive influence on others.
77:53 - By growing other people,
77:55 - you are going to grow yourself as well
77:57 - and you're going to level up your skills as well.
78:00 - Now, if you want people to follow you
78:04 - and if you really need to walk the talk,
78:06 - if you want people to follow the same guidelines
78:09 - and rules that you have set for them.
78:12 - So for example, if you don't want people to work late,
78:15 - then don't work late as well.
78:17 - If you don't want people to DM each other
78:21 - or message in channels after work hours,
78:25 - then don't message in work channels or be online
78:29 - or show them that you are online after work.
78:32 - Because again, people are just going to follow you
78:34 - because you're the leader.
78:35 - So whether you like it or not,
78:37 - the behaviors that you adopt as a leader
78:39 - are something that is going to be easily trickled down
78:43 - to all your team members.
78:45 - Because as a lead, you're setting the culture of your team.
78:48 - So really you need to make sure
78:50 - that you're leading by example.
78:51 - When people say that they love or hate the company
78:55 - they work for, you can be 90% confident
78:58 - that they're talking about their manager
79:00 - because a manager can really make or break someone's career.
79:05 - So you really need to make sure
79:06 - that you are being a good leader
79:09 - and setting a good example for them.
79:11 - I have mentioned a million different things
79:13 - for what makes a good leader
79:15 - and I can say a million more things more.
79:18 - But again, as I mentioned at the beginning of this video,
79:21 - you really need to make sure
79:22 - that you are gaining that practical experience,
79:25 - finding those opportunities for yourself
79:27 - in order to hopefully become a leader in the future.
79:31 - Hard skills get you hired,
79:33 - but soft skills get you promoted.
79:35 - If you had to pick one soft skill
79:37 - that you truly need to master,
79:39 - then it has to be communication.
79:41 - After leading 100 plus developers and leaders,
79:44 - I can assure you that folks that knew how to communicate,
79:47 - grew quickly, got promoted
79:49 - and truly created that impact that lasted for years.
79:52 - If you are interested in leveling up
79:55 - and getting promoted, then keep watching.
79:57 - In this video, I'm going to share a four step,
80:00 - simple formula for you to create a communication strategy
80:04 - that you can apply in any type of meeting.
80:07 - So let's get started.
80:08 - So the first step in this formula
80:10 - is identifying who you're communicating with.
80:13 - Knowing who you're going to communicate with
80:15 - is going to be a game changer for you.
80:17 - You know why?
80:18 - Because after you know who they are,
80:20 - you can share more or less context in that meeting.
80:23 - Before you get into that meeting,
80:25 - figure out who's going to attend the meeting,
80:27 - what their roles are, what do they care about,
80:29 - what their objectives are,
80:30 - and how do they tie into the context of the meeting
80:33 - and why were they invited to begin with.
80:36 - Knowing that is going to be huge for you
80:39 - because then you can accordingly decide
80:41 - whether you should provide more context,
80:43 - whether you should ask them more questions
80:45 - or how they're going to help your team.
80:47 - This is going to make you look more confident
80:50 - because you are, because you have prepped for that meeting.
80:53 - So identifying who you're going to communicate with
80:55 - is going to be a game changer.
80:57 - Unfortunately, 90% of the folks don't know
81:01 - which meeting they're getting into.
81:03 - They wait for the calendar tool to notify them
81:06 - five minutes before the meeting,
81:07 - and then they decide to go into that meeting,
81:09 - not knowing the purpose of the meeting,
81:12 - who's attending the meeting,
81:13 - and then that completely slows down the meeting.
81:16 - So in order to craft a really good communication strategy,
81:20 - you need to do the opposite of that.
81:21 - You need to identify who you're talking to
81:24 - so you know how to best position yourself.
81:27 - The second part of the formula is to focus on the outcome
81:31 - that you would like to get to.
81:33 - Now, hold on a second and let's take a step back here.
81:36 - Focusing on the outcome is so important.
81:40 - If you know what you want to get out of that meeting
81:42 - before you even get into it,
81:44 - or what you want to get out of that discussion,
81:48 - then you can basically backtrack and figure out exactly
81:53 - what questions you want to ask
81:54 - and how you want to position that meeting.
81:58 - A lot of times we get too invested in the solutions
82:01 - or we are too passionate about the problem
82:03 - that we figured out what exactly
82:05 - we want to get out of the discussion with anyone.
82:08 - So if you figure out what exact outcome you want to get to,
82:12 - then you can backtrack and craft steps
82:15 - for how you want to get to that outcome.
82:16 - If you get into the meeting
82:17 - and you realize that this meeting is not productive
82:20 - and you will not get closer to the outcome,
82:23 - in fact, you are getting derailed
82:26 - by a completely different conversation,
82:28 - then backtrack and figure out what your outcome is
82:30 - and remind your team of that outcome.
82:33 - So for example, if you get into a heated discussion
82:36 - on architectural decision with another teammate,
82:39 - instead of getting too heated up,
82:41 - try to figure out what is the outcome
82:42 - you would like to get to based on your discussion.
82:45 - Now the outcome is that you need to agree upon
82:48 - a common solution that works for your team
82:51 - and for the business and for your company, right?
82:54 - That is the outcome.
82:55 - Then you shouldn't get too hung up on having opinions
82:59 - that are not supporting that specific outcome.
83:02 - So again, if you do that and backtrack it,
83:05 - that will really help you understand
83:07 - where you would like to get to.
83:08 - Now, whatever strategy that we are discussing right now,
83:12 - the four-step formula along with examples,
83:14 - if you'd like a template for it,
83:16 - then take a look in the description below
83:18 - and download the template for free.
83:24 - Now, the third part of the formula is what impact
83:27 - you would like to create from this specific meeting.
83:30 - Now, in order to make sure that you're creating impact
83:32 - as part of every meeting,
83:33 - you need to create a well-structured meeting.
83:36 - So for example, before you even get to the meeting,
83:39 - make sure that every meeting has a clear agenda
83:42 - and whatever outcome that we have just talked about
83:44 - is also documented in that specific meeting.
83:47 - So people are aware what to discuss upon.
83:50 - If the meeting gets derailed,
83:52 - make sure that people discuss the main topic
83:55 - of that specific meeting and discussion.
83:57 - Engage participants in the meeting.
83:59 - For example, you know that you need marketing's input,
84:03 - or if you need a specific developer's input in that meeting,
84:07 - make sure that you get asked that input
84:09 - and make it a engaging meeting
84:11 - so that it's not just you who's making the decision,
84:14 - but it's the entire team or the entire group
84:17 - that's invited to the meeting,
84:18 - really thinking out loud and giving that opinion.
84:21 - Because again, in order to make sure that you level up
84:25 - and get promoted and really come across
84:27 - as a confident communicator,
84:29 - you really don't wanna do this on your own.
84:31 - You really wanna bring the entire group together
84:33 - to do this together.
84:35 - And manage time effectively.
84:37 - Time is very important.
84:38 - If you make sure that the meeting starts on time
84:40 - and ends on time,
84:41 - that is going to be really, really important for everyone
84:44 - because again, time is energy.
84:47 - The more time you spend on something,
84:48 - the more energy you're going to spend on something.
84:50 - So you really wanna make sure
84:51 - that you are managing the meeting right
84:54 - and making sure that it starts on time and ends on time.
84:57 - If you are getting into a meeting or a discussion,
85:01 - you need to think about what should people remember
85:04 - about you as they walk away from that meeting.
85:07 - So for example,
85:07 - if you're really trying to create a brand around GraphQL
85:11 - and you really want people to remember
85:12 - that you are a GraphQL expert
85:15 - or you really know a lot about GraphQL,
85:17 - then before you get into that meeting,
85:19 - prep for that meeting and really note down
85:21 - what are the different types of questions
85:23 - that are going to be asked as part of that discussion
85:25 - and answer them and help the team.
85:27 - Even if you don't know the answer, that's completely okay.
85:30 - You can take away those questions
85:32 - and really figure out how to help the team later on.
85:35 - But again, make sure that you know what impact
85:38 - you would like to create as part of that meeting.
85:40 - The minute you start thinking about that,
85:42 - you're going to behave a bit differently than you do.
85:46 - You're going to start being more active in the meeting.
85:48 - You're going to be an important part of the meeting,
85:50 - which is really, really important.
85:52 - If you are interested in knowing how to be a great leader
85:56 - and in fact, how to be a badass one,
85:58 - then check out another video that I have created.
86:01 - The fourth step in the formula is
86:03 - what are some of the actions that you can create
86:05 - as part of this specific discussion?
86:08 - Towards the end of every meeting
86:09 - or towards the end of every discussion,
86:11 - there are a list of action items that you can take away
86:14 - that you can work on.
86:15 - You can remind the group of that.
86:17 - You can remind the team of that,
86:19 - but you can also take away some of those action items
86:21 - and make sure that they are delivered.
86:23 - Once they are done,
86:25 - let the team know in the channels that you're part of,
86:27 - where all your other team members are,
86:29 - because again, that's going to make you look
86:31 - a lot more confident and you are communicating seamlessly.
86:34 - What action items can you take
86:36 - from that specific discussion or meeting?
86:38 - Make sure that it's documented somewhere
86:40 - so that everyone knows what you have discussed.
86:44 - There's no room for miscommunication and misunderstanding
86:47 - because everything is documented.
86:49 - Make sure that you get alignment from everyone else
86:51 - by repeating the goal of the meeting
86:54 - and the action items that came out of that meeting
86:57 - because you are going to look more confident and prepared
86:59 - and you know exactly everyone is aligned
87:02 - on that specific topic.
87:03 - And overall, just be helpful in making sure
87:06 - that discussion gets to the specific outcome
87:09 - that you would like to get to.
87:12 - The key thing here is that throughout this specific video
87:16 - and in this specific formula,
87:17 - I have talked about all the different ways
87:19 - you can communicate how you need to be prepared
87:22 - for the meeting, how you need to make sure
87:24 - that you're answering questions,
87:26 - how you can share context and so on.
87:28 - And all of these things,
87:29 - if you keep repeating over and over,
87:32 - you are going to come across as really confident
87:34 - because you are someone who is prepared for the meeting.
87:36 - You know exactly what the discussion is about
87:39 - so you know that you have that additional leverage
87:43 - over others in that specific meeting.
87:45 - This lesson, we are going to talk about some frameworks
87:48 - that we can use to learn how to give feedback effectively
87:53 - and the importance of feedback overall.
87:57 - Now, feedback is so personal and unique
88:00 - that you would need to keep evolving your framework.
88:03 - You will learn that the feedback you may give to one person
88:06 - is completely different to the feedback
88:08 - you share with someone else.
88:09 - So feedback is so personal and so unique
88:12 - that you need to keep evolving it.
88:16 - And we have talked about the buddy pattern
88:18 - in the anti-patterns lesson
88:20 - and you wanna be liked and loved so badly
88:23 - that you will never give a single piece
88:25 - of negative feedback.
88:26 - And we talked about this as a buddy pattern
88:28 - in the anti-patterns lesson of engineering leadership.
88:31 - You wanna be liked, we wanna be loved
88:33 - because we are humans after all
88:35 - and we never wanna do the hard things of giving feedback.
88:38 - But this behavior is not going to create
88:41 - any positive team culture.
88:43 - In fact, it's going to do the opposite of that.
88:46 - You're going to slow down, you're learning,
88:48 - you're going to slow down your team
88:49 - because you're in danger,
88:51 - because this might lead to more potential behavior
88:55 - which might be worse for your team.
88:57 - You really need to make sure that you give feedback.
89:00 - And feedback is the best gift you can give it to someone.
89:04 - Most leaders are scared to give feedback
89:07 - because they think that their colleague
89:09 - might not take them in the right way.
89:12 - The colleague might get defensive,
89:13 - get mad at you for sharing feedback,
89:16 - but it is the best gift you can give it to someone.
89:20 - Negative feedback is difficult.
89:22 - You may find excuses to not do it or postpone it,
89:25 - but keep this in mind,
89:27 - that if you're not sharing this feedback,
89:29 - you give them zero chance of improvement
89:32 - and that is not fair to them.
89:34 - So giving negative feedback is extremely important.
89:37 - And the problem is never the person themselves,
89:40 - it's the behavior that they're exhibiting.
89:42 - And if you know this about feedback,
89:44 - that it's not the person, it's not personal,
89:47 - it's the behavior that we need to rectify,
89:49 - suddenly a lot of things change when you're giving feedback.
89:54 - And if you combine that with our initial fight
89:59 - or flight response, then it gets worse.
90:01 - You're likely to experience a social threat
90:03 - when facing people of higher status,
90:07 - feeling or sense of uncertainty,
90:09 - or feeling disconnected,
90:10 - which is something that is unfair.
90:13 - Now, if you combine that with like fire or flight response,
90:16 - it's no wonder feedback is not part of our high priority list
90:19 - because whenever we receive feedback,
90:21 - we get really defensive.
90:23 - And that's not what we want, but that's what happens.
90:25 - And that's why feedback is difficult to receive and to give.
90:30 - But one hot tip is that you don't give feedback
90:33 - or take any action that will impact others
90:36 - if you don't have the time to address the feedback,
90:38 - or if you don't have time to listen to their story,
90:40 - that is if you're in a rush.
90:42 - Because if you're in a rush to give someone the feedback,
90:44 - it's a sign that you have failed them
90:46 - before you even got started with them.
90:49 - It's best to hold off until you have something concrete
90:51 - or positive to say,
90:53 - and have more something constructive to say.
90:55 - Because when you're feeling like you have to give someone
90:57 - feedback and you cannot wait until tomorrow,
90:59 - it's a sign that maybe there's a problem with you,
91:02 - you are insecure or something that has gone wrong with you,
91:06 - or they had a really massive impact on you
91:09 - with the behavior that they exhibited.
91:11 - So make sure that you take the time, take the day off,
91:14 - don't stress too much, and after you give it some time,
91:18 - collect your thoughts and give them feedback.
91:21 - And reflect when you felt grateful
91:24 - after receiving feedback.
91:25 - So think of a time when someone gave you feedback
91:28 - that actually made you feel good,
91:30 - even though it was constructive feedback.
91:32 - How did they convey their message?
91:34 - Why did you value that feedback?
91:36 - How did that make you feel?
91:38 - Think of that as you start to craft and learn
91:41 - to give feedback more frequently to your team.
91:44 - And we have a framework.
91:45 - This is one of my favorite frameworks to use,
91:47 - which is SBI framework with the twist.
91:50 - Now we can divide this framework into three parts.
91:52 - Situation, behavior impact, and outcomes.
91:55 - Now, situation as in, what was the situation that happened
91:59 - where you felt the need to give feedback?
92:01 - What was the situation like?
92:02 - Were you in meetings?
92:04 - Did someone say something?
92:05 - What was the situation?
92:06 - What is the behavior that you would like to change?
92:11 - What behavior impacted the team or impacted you
92:14 - or someone else on your team?
92:16 - You wanna be very careful of that.
92:18 - For example, if they're interrupting in meetings,
92:20 - then you need them not to do that.
92:22 - So let them know the behavior needs to change
92:25 - where they need to stop interrupting others
92:28 - and make others feel excluded.
92:32 - And impact is that your other team members felt excluded
92:37 - and that is the impact from their behavior, right?
92:40 - And the situation was that you were in a team meeting,
92:42 - discussing ideas and thoughts,
92:43 - and someone came up really strongly
92:45 - and kept interrupting everyone else in the meeting.
92:48 - That's not how you want, right?
92:51 - And that's the essence of SBI framework.
92:53 - But I like to add a twist and say,
92:55 - let's also focus on the outcome
92:57 - because then that helps you with feedback in general.
93:00 - What is the outcome you would like from that conversation
93:04 - when you're giving feedback?
93:05 - Is the outcome that you would want their behavior to change,
93:09 - you don't want them to interrupt others in the meeting,
93:13 - then let them know that.
93:14 - So the outcome here, it's not just you and me, right?
93:17 - Let's start to figure out
93:18 - what is that behavior that we need to change
93:20 - because it's not them, it's the behavior, right?
93:23 - And you can also use this infographic here
93:26 - to use SBI framework with the twist
93:29 - so that you can easily reference it in the future
93:31 - when you're giving feedback.
93:35 - So let's say you have a situation,
93:36 - let's take a look at an example.
93:38 - You have a team member that is very senior in the org
93:40 - and is not mentoring junior devs
93:43 - and not really prioritizing them.
93:45 - What is something that you need to do?
93:47 - Well, your first instinct is going to be
93:48 - that this is not okay.
93:50 - This in this case would be
93:51 - that you would want this behavior to stop or change
93:55 - and that's going to be your first instinct.
93:57 - But the second is going to be that they're mean
94:00 - and they're rude,
94:02 - that they're constantly talking over people.
94:04 - This is not making the team feel good
94:06 - and the team is not speaking up because of that.
94:08 - And that is the impact.
94:10 - So let's try giving this feedback using this framework.
94:14 - And these are the list of questions that I have
94:16 - in the workbook that you can use
94:18 - to craft this specific feedback.
94:20 - That is, what is the outcome?
94:22 - What is the context?
94:23 - What is the situation?
94:24 - What behavior needs to change?
94:26 - Why do you think this happened?
94:27 - And what was the impact that it had on the team?
94:30 - You can use these questions
94:32 - to craft a really good feedback message.
94:34 - So workbook time.
94:35 - You want to collectively craft a feedback message
94:38 - using a SBI model with a twist
94:41 - and make sure that you give it a shot.
94:44 - So what are some important things
94:46 - to note about feedback, right?
94:47 - You always want to be open to hearing
94:49 - their side of the story, their feedback, right?
94:52 - Because as much as you are open to sharing yours,
94:56 - they also have a side to it,
94:57 - which is very important.
94:59 - So maybe you don't have context
95:00 - to new things that could have happened
95:03 - that maybe they did not let anyone else talk
95:05 - because you were in a client meeting
95:08 - and you knew a backstory
95:11 - which would significantly impact the project.
95:15 - There could be many different reasons.
95:17 - And then suddenly you start feeling like,
95:19 - oh, that's why they kept interrupting others.
95:22 - And even though that's not okay,
95:24 - and they should never do that,
95:25 - there was a better way to handle it.
95:27 - And that feedback can change based on that.
95:29 - And lastly, document the action items.
95:32 - What are the takeaways for them?
95:33 - And ask them what the action items were from this
95:37 - so that you can make sure that there's alignment.
95:40 - The answers should always align to what you talked about,
95:43 - but, and it shouldn't be perfect,
95:46 - but it should have the essence of what you are looking for.
95:49 - There, this is Ankita.
95:50 - Thank you so much for checking out this course
95:51 - on engineering leadership.
95:53 - I really hope you like it if you do.
95:55 - And if you have any questions,
95:56 - please let me know in the comments below.
95:58 - But if you want to continue learning further
96:00 - and if you're serious or even curious
96:02 - about becoming an engineering leader or a manager,
96:05 - then you can also check out this course
96:07 - that have created call as developer to leader.
96:09 - It will take you from being a developer
96:12 - wherever you are at
96:14 - to becoming a successful engineering leader.
96:17 - And it will teach you how to lead a team,
96:19 - how to grow a team, how to hire right,
96:21 - how to create a engineering vision,
96:24 - how to create a technical roadmap
96:26 - and how to deliver feedback,
96:28 - how to receive feedback
96:29 - and lots more that I couldn't necessarily cover
96:31 - in this specific course.
96:33 - So I really hope you check it out.
96:35 - And if you do, then you can use the code,
96:37 - free code cam for 25% off additionally as well.
96:42 - So I really hope you check it out.
96:44 - Once again, thank you so much for watching
96:46 - and I hope you have a wonderful day.
96:47 - Bye for now.

Cleaned transcript:

Learn how to succeed as an engineering manager in this course from Ankita Kulkarni. Anyone can learn to be a good leader. Ankita is an experienced engineering manager and she has a bunch of great tips to share with you. A lot of developers aren't sure how to become a engineering leader or to succeed as an engineering manager or a leader. They continue to act like individual contributors as they aren't sure how to manage. And as a result, the people that report into them or under the leadership suffer. Now, just like we learned JavaScript, Angular, React or any other upcoming technology, just like that leadership is also a skill set that you need to develop and learn. No one is a born leader. You need to learn how to become a good leader. In this specific course, I wanted to cover a few things and give you a plan and strategy to become a successful engineering leader. So we will cover things like what I wish I knew before becoming an engineering manager, how to become a great leader, a engineering leadership roadmap, what are some differences between a software engineering manager and a technical lead. And not just that, we will also cover how to communicate as a developer, which will also translate into leadership skills and how to give and receive feedback as a developer and a leader. So I really hope you enjoy this course. If you have any questions, just comment below and let me know. Are you a individual contributor that is curious about engineering leadership or you wanna know what it takes to become a successful engineering manager? As I reflected back in my career, there were a few things that I kind of wish I knew before I made the transition to becoming an engineering manager. So in this video, I'm going to cover it all. So first of all, I wanna say that I was quite happy with the move, but I really want you to know all these things so you can make the best decision for yourself. So let's get started. So the first thing that I experienced as a transition from being a developer to an engineering manager was that you do feel like an outsider to your very own team. Now you have a lot more power, right? Being a leader, you can basically decide who you get to hire within the team, who gets promoted. You know all the salaries of your team members. So you're not going to look at your team the same way as you did before. So you start feeling like an outsider to your very own team. That is the first thing you will experience as you make the transition, or at least I did. Because you have a lot more control and power, you are now in charge of making the decisions. Your team is going to look up to you as a leader. If they don't know what to do, they are going to look up to you for that. So that is a bit of a shift and a mindset shift that you need to go through as you make the transition. So the percentage of time that you will spend coding will drastically and significantly reduce as a engineering manager. A lot of people have this misconception that as you transition from being a developer to an engineering manager, it is basically a promotion. It is the same role, maybe with a little bit more of people managing responsibilities. Well, if you want to be a mediocre engineering manager, then sure, you can do that, but don't spend a lot of time coding. Because again, you have a lot more responsibility as an engineering manager. The first goal should be to grow the people on your team, make sure that they are set up for success, make sure you are reviewing their performance, giving constructive feedback, managing stakeholders, doing roadmap planning for the future. And there is lots more that you need to do to make sure that you are setting up your team for success as an engineering leader. They are looking up to you for leadership. So if you spend a lot of time coding behind the computer, then you will necessarily will not have time to focus on your other important responsibilities, and this will not make you a successful engineering manager. So you might be wondering, well, if I'm not gonna code, then how am I called an engineering manager? Will I not just be a manager then? Well, here's the thing. You still have a lot of technical expertise that got you to where you were, right? But when you take on an engineering manager position, it's a completely different role. You can still use your strengths from being a developer, and you should definitely be involved in knowing all the architectural decisions, to making sure that your team has really good standards technically, make sure there are good code review processes, make sure that you understand all the architectural decisions being made, and your team is not just thinking just for that specific module that you're working on, but they're also thinking about the scalability as well, right? So your experience as a developer is going to definitely help you when you transition to become an engineering manager. But again, what got you here will not necessarily get you to where you wanna go being a successful engineering manager. So make sure that you keep this in mind as you transition. So again, should you code? Well, it totally depends on your team's responsibilities. If you have everything else under control, if you do wanna pick up a task here and there, just to make sure you understand the code base a little bit more, you are able to give feedback to your team, and you're not just a manager managing, you also are involved, and they feel that you are involved as well, then you can definitely do that. But again, make sure that the main focus of your position, of your role is not to code. It's all these other things, including maybe a little bit of coding. So again, make sure you don't spend a lot of time doing that. You will feel a therapist many times as you deal with people. So the people on your team are going to come to you with all sorts of problems. Their performance is not necessarily tied to their daytoday job, but also what's going on personally, what's going on outside of work as well. So sometimes you might feel like you know a lot more about them personally as well in order to make sure you connect with them professionally. And you don't necessarily need to do that, but I guess being a good engineering manager, you need to care about the people that you work for. Well, you will feel like a therapist at times because you will spend a lot of time talking about their thoughts and feelings, but it's also important that you start drawing boundaries because people are going through maybe a lot of stuff. So if they need to talk to someone professional other than you, then definitely advise them of that as well. But you will feel at times that it's necessary to talk to them, not just about work stuff, but also about personal stuff. So make sure that you keep it all confidential because they think of you as a leader and they trust you and that's why they're sharing all this information with you. So make sure that you do that. For an example, there was a developer who I was managing and they clearly were not giving their 100%. And I personally felt I could see that they were not, even though they were always on top of their performance, in this specific case, they were not necessarily doing that. Their performance was not great anymore. So I got really curious to just check in and ask them what's impacting them. And it turns out there was something personal going on. Without getting into too many details, I was able to navigate and guide them in terms of how they can manage their personal and professional life. And I also asked them to maybe take a day off, a personal day, just to make sure that they take care of that before they can focus on work. The next day they came back and they were able to really recharge and really take the time off and deal with whatever they had to deal with personally to be able to show up at work and give their 100%. So again, this is important that you have that empathy and you treat people as humans and not just resources when you are an engineering manager. Being an engineering manager can be lonely at times. Like I mentioned that you will not feel like the same team member anymore as you did before when you are an IC. And as you become an engineering manager, you cannot necessarily talk to the developers on your team about the problems that are going on in the company because as a leader, you need to shield them from that. You need to make sure that they feel comfortable talking to you about things and they feel like their position is in a good spot. If you talk to them only about the problems that are there or whatever is going on in your mind, then they might not feel as confident about the team and the company that they work at. So make sure that you shield them of that, but also find a support system for yourself and other engineering leaders that you can talk to about problems as well. So maybe find a mentor, take care of your own mental health and make sure that you have a good support system so that you can talk about problems or and come up with solutions as well. The direct reports are also going to share something personal and private with you and you will not be able to share that with anyone else and you need to keep it confidential, right? Because that is their personal information. There's a lot that you will keep to yourself and which will also make engineering leadership a little bit lonely, but it doesn't have to be. You can find a support system, you can join a community, you can talk to other people and their leaders going through the same journey as you so that you don't feel alone because it can definitely feel lonely at times. I was also socially exhausted being in a lot of meetings as I transitioned from being a developer to a manager. Now, I was booked in a lot of backtoback meetings because everyone wanted to get a piece of me, everyone had to pick my brain on things and I had to make a lot of decisions just to make sure that my team is on the right path. But it doesn't have to be, you don't have to be socially exhausted. So you need to start planning your week a little bit better, kind of figure out what the focus of the week is, what your priorities are of that week and accordingly push the things that are not that important to the next week and try to say no as well, which we'll cover later in this specific video, but you will be socially exhausted as you will be in a lot more meetings than you did being a developer. As an engineering manager, you will shield the team from unnecessary meetings, but that also means you are going to accept a lot more meetings because you wanna make sure that you have things under control. So you will be socially exhausted, so make sure that you spend some time, take some time in the morning or in the afternoon and book some focus time for yourself in your calendar that no one gets to book over so that we can get some meet time and are also able to get some work done as well. But that is a reality. You will feel socially exhausted at first without proper systems in place. You are going to find a bit difficult to say no at first. Now, unless you were a leader before and you are already good at that, then please ignore this. But if you're not, then it is definitely going to be a bit difficult for you to say no because everyone would need a piece of your team. They would all come to you for priorities, their priorities that they need to work on, and you need to figure out how you can position those priorities along with current priorities that your team is working on. If you say yes a lot, your team is going to be burnt out. So make sure that you don't say yes to everyone. A strategy that I transitioned was, instead of saying no, you can talk to them about the priorities that you do have and accordingly prioritize their stuff maybe in the next quarter or maybe a month from now and so on. So you're not necessarily saying no, you are saying not now, let's do this at this specific day. So again, but you're going to have it a bit of a difficult time initially to say no and make sure that you know what your priorities are. As you transition to being a manager, you are going to manage a team that will have different personalities. So for example, some might be more extroverted and will speak up a lot more but others are not as extroverted and they don't speak up and maybe need an opportunity to do so. So for example, extroverted folks are going to talk as they think and they will keep talking. Whereas introverted folks will need some time to think first and then talk about anything. So you really need to make sure that you're balancing both personality types in a specific team so that you're not just listening to one specific personality type as you make decisions. You need to balance it out to make sure that you are asking questions and making sure that you're including everyone in the meeting, making sure that you have organized the meeting in such a way that everyone can speak up and give their thoughts. Maybe you can ask someone about what they are thinking and so on. But again, you are going to deal with a lot of different personality types. So you need to make sure you need to balance them all. Otherwise you're only going to lean onto the person that is the loudest and you really don't want to do that as an engineering manager. You want to create a transparent culture and where people are happier to work for you. They are excited in the morning to come work for you for the team and you are going to be a huge part of that. That's why it's important for you to make sure that you take this into account. What got you here will not necessarily get you further. As a developer, it's your job to make sure that your skills are up to date, right? So if it is a specific technology that you work in your team, for example, React, how do you make sure that the performance of the app is really good or how do things work with server components and so on, right? Now, React is important as a developer because that's the technology that your team is using. But when you transition to be a manager, you shouldn't be focusing on making sure that you have uptodate React skills. You need to be focused on how can you be the best manager that you can be? And those skills are very different than being a developer skills. So make sure you're spending time on the development of your skills as well, such as how do you give constructive feedback? How do you promote someone? How do you do performance reviews and so on? Sometimes you are going to disappoint people because their promotion did not get accepted. And even though you think that they deserve to get promoted, you need to be in a position to put them forward in the best possible way. And those are skills that you need to learn which you didn't necessarily knew about when you were a developer. So again, there are a lot more skills that you need to learn being an engineering manager that you won't necessarily know as a developer. So make sure you keep learning and figure out how others are doing it in the company. Are there specific strategies and frameworks that you can use to make sure that you're giving feedback the right way? Or if someone is causing any troubles in the team, then make sure they are aware of that without making them feel too bad about it. There's so many things that you will deal with as an engineering manager that you didn't necessarily deal with before. So make sure that you are on top of your personal skills as well and your reading books, eBooks, and so on, just to make sure that you have control of everything. And again, this makes the journey fun for you as well because you're not just stuck with the skills that you transitioned with. You also are always improving and growing and experimenting with the team that you're working with so that your team becomes a really highperforming team. Unfortunately, not every day is going to be a good day being a manager. Sometimes you have to give really difficult feedback to your team or a specific team member and their response to that might be really emotional because the feedback is really difficult. And because of that, your day is going to be impacted. You are going to spend hours talking to someone just to make sure that they understand the impact they're possibly having on the team. And again, that can be very exhausting. Sometimes you want to get someone promoted, but their promotion is not going to get accepted or they want more salary and you are unable to get it approved for whatever reason. You are going to have a bad day because of that because it is going to be really emotional for you. So being an engineering manager can be very difficult because you are dealing with people and people are humans, not just computers. When you are a developer, you're writing code and you're just dealing with computers, you're obviously dealing with team dynamics and communication and whatnot. But being a manager, that is in the forefront. That's why you really need to make sure that you're digging care of your mental health as you transition because it's not just your team's mental health that's important, it's also yours because if yours will start to get affected, then the team is going to experience the same as well. It's the same analogy that when you're in an airplane, make sure that you're wearing an oxygen mask as well before you give it to other people. It's the same thing being a manager that you are always in service of other people, but make sure that you also take care of your mental health and your personal needs as well. And if you do need to take the time off, then please do so because that will have an impact on others too. So again, make sure you take care of yourself. What if you don't like being an engineering manager and you want to go back to being a developer, you really like coding and now you have to deal with all these different things that you don't necessarily want to deal with or you had a misunderstanding of the position and I want to say that if you do give it a shot, let's say there's an opportunity available in your team or in a company and you decided to go for it and six months later or a year later, you are like, you know what, I love being a manager, but I love being a developer as well, so I want to go back. It's completely okay for you to go back. In fact, I would highly recommend it. It's important to keep going back and forth between being a manager and being a developer so that you are really appreciative of both positions because a lot of times when you're a developer, you don't necessarily know what an engineering manager has to go through because they don't necessarily share everything with the team because they're supposed to shield the team, right? So being a manager and then switching to a developer, you are going to build a lot more empathy as well, but there's nothing wrong in switching back and forth. In fact, it's totally recommended because if you think about it, in your career throughout your life, if you want to stick to just being one position, then it's probably not going to be as challenging by switching back and forth, you're learning a lot more skills that will be helpful in either way. So again, if you really want to switch, go for it, but I would highly recommend you to also give it a shot to see if you really like being an engineering manager and making sure that your skills are up to date and you are always learning and growing because as a developer, you do that, so do the same when you transition to being a manager. Well, I talked a lot about what it was like when I transitioned from being a developer to an engineering manager. I know you might be wondering, is it even worth it to become an engineering manager? Well, I would say yes, it's really rewarding seeing the growth of people and the impact that you are going to have on folks. I have worked with so many different people and when I do give them feedback or I provide suggestions and insights based on my experience to help them grow, it is awesome to see that they work on those and they grow because of you as well. So the impact is going to be huge on other people's career. So again, being an engineering manager is really rewarding. The other thing is you will have a lot more influence and the impact is really growing to grow massively in a company because your focus is not just going to be your team, but your impact is going to be really visible across the org as well, right? So being a developer, you only think about your team, but being an engineering manager, your influence and your impact is going to grow a lot more, which won't necessarily be possible being a developer. By being an engineering manager, you get to control or have a say on the roadmap on what your team gets to work on. So based on the goals of the company, you get to decide what's important for the team. The problems that you will solve as an engineering manager will be at a larger scale and it won't be at a smaller scale anymore. So again, you are going to be solving bigger problems that are important for the company for not just your one team, but several teams. So your impact is going to be a lot more if you take advantage of it, being a manager. If teams are not working together, you get to be the one to make sure that they talk to each other. They have the same common understanding. You become the decision maker, but also someone who comes and resolves problems. And it sometimes is going to be hard because misunderstandings can happen, but as an engineering manager, you are the leader. So they are going to look up to you for solving all their problems. And even though you don't necessarily need to solve the problem on your own, you can make sure that the teams get together and talk it out and facilitate the meetings so that problems get resolved. So the problems that you'll be solving won't just be your own problem as you were when you were a developer, but you get to control and you get to work on a lot more problems because of it. So I would say that being an engineering manager is really rewarding. If there is an opportunity in your organization or your team where you get to be a leader, I would highly recommend you to take up that position and learn the skills necessary to become a engineering manager. Now, having said that, I hope this video was really useful for you. I really wanted to make sure that I cover all my feelings that I went through from being AIC to a manager. And before you take up the position, I want you to know what you need to be aware of as you go through so you don't feel alone. Software career paths, career ladders, you name it. There are so many different names for the same thing. It is extremely important as a developer to know what career path is right for you and what are the different levels you can go to as you grow in your career. There are different titles in the industry and every title is so confusing. It's hard to know whether you should become an engineering manager or a staff developer or a technical lead. So we will be talking about titles and how they can be so confusing and what are some things that you should be aware of in tech. So as a developer, there are typically two career paths that you can take and there are different levels in different companies. Now, there is a diagram right in front of us and I'm just showing you this diagram just to give you an understanding of the different levels and what these fancy titles are like so you get a really good understanding of what every level is expected to do and what to know about it. So for example, if you are a developer, there are two paths. One is called the individual contributor path and the other one is the leadership track. Now, a lot of times you will find that an IC path has not that many levels compared to a leadership path and that is why a lot of developers end up becoming managers because they don't know how else to grow unless they go into a leadership track but it doesn't necessarily have to. You need to find the right company and the team where these levels are properly defined so you can keep growing even after you reach a specific level. So for example, as a developer, you can first become a entrylevel developer, then you join to an intermediate developer and then you go to a senior developer but whereas if you are already a senior developer or even a high intermediate, you can become a technical lead, a staff dev or a engineering manager. I have some good news. I have been working on a course to take you from a developer to a engineering manager and make you a very successful engineering manager. So if you're interested, add yourself to the wait list. This course will cover everything that we have talked about in this specific engineering manager series but there's a lot more that I couldn't cover in this series that I will cover in the course. So please feel free to check it out and take a look in the description below. Now it's a very common thing that there would be three different levels in a developer titles. For example, there would be an entrylevel developer, an intermediate developer and a senior developer and a senior is supposed to take on a lot more leadership responsibilities and tasks compared to an intermediate or an entrylevel developer and a senior developer is also maybe asked to mentor maybe more entrylevel devs or maybe devs more junior to them just so that they start practicing their leadership responsibilities as well. So being senior doesn't just mean that you write code but you also need to make sure that you're mentoring others and helping improve your processes, your team processes and so on as well. But the minute you become a senior developer, it does open up two paths for you. One is that you can become a technical lead, a staff developer. After that, you can become a solution architect. Now again, it completely depends in every company that after a senior developer, you can become an architect. And what is the difference between an architect and a staff developer or a tech lead? Well, an architect is mainly responsible for architecting the different apps. They are responsible for maybe growing the team. An architect really takes a look at the company's architecture holistically and recommends the best practices and makes sure that the architecture makes sense. And you might even have heard the joke that an architect does draw a lot of boxes, which is not wrong, but an architect does a lot more and they think about the company holistically, the company architecture holistically technically. Then a senior developer could also become a technical lead or a staff dev and a tech lead would essentially be more responsible for leading all the technical responsibilities of a developer, for example. But depending on the company, after a tech lead, you can become a principal developer or a distinguished engineer or a fellow. Now again, these are different levels and the responsibilities keep growing. But again, and the scale at which you do these things are also different. So for example, a distinguished engineer or a principal developer or a fellow role may not be available in more smaller or mediumsized companies because there's not a need for it. But in bigger companies such as the Fortune 500 companies, you will more likely see these roles just so that people, when they reach a specific level, they're still able to grow and they have something to strive for and they don't just leave the company. So as a developer, you can take the IC path and this is what your path will look like. So how does a leadership path look like? Well, let's say you are a senior dev or a tech lead or a solution architect and you can basically go to becoming a engineering manager. So you might be wondering, what's the difference between a tech lead and an engineering manager? Well, or a staff developer and engineering manager. Now, tech lead and staff developer can be completely different responsibilities and roles and most likely they are, but a lot of companies also have them more or less the same. So let's talk about the difference between a tech lead and an engineering manager. You can think of a tech lead as a technical partner to an engineering manager. An engineering manager is responsible for the leadership of the team. They are responsible for making sure their proper processes, they're managing the people, they are understanding the organization strategy and making sure that the technical strategy is also intact. But who is responsible for executing it? It's the tech lead. A tech lead is responsible for all the technical aspect of things. Having said that, sometimes a tech lead is in fact the engineering manager in specific companies. But a tech lead more or less would be responsible for executing the technical vision of the company and making sure that the architecture is intact and making sure that the developers are following the best practices. They are participating in core reviews and so on. Whereas the engineering manager are more towards process, people, technical excellence, making sure the strategy is intact. If they do have any questions or if they do wanna implement specific things and give feedback, they would necessarily work with the tech lead and provide that feedback so that they work well together and make sure that the technical lead is responsible for it. But ultimately the leadership of the team is more on the engineering manager versus the tech lead because engineering manager is responsible for management of people as well. Engineering management role is more of a leadership role whereas a tech lead is less of a leadership role. They are still considered on the IC path and may not be included in specific leadership meetings because they are necessarily more tied to the technical aspects of things. An engineering manager would be going into those meetings, understanding the strategy, giving feedback, talking to stakeholders and then partnering with tech lead to give that information and share that information with the team. So there's that barrier, but sometimes technical leads have that management experience as well. So they are also invited to those specific meetings as well. Tech lead are also more handson compared to engineering manager and they are responsible for the delivery of specific features whereas engineering managers are less handson and depending on the responsibilities and the scope of the position, they may not even code, for example, because there is a tech lead role. But in a lot of companies, there is no tech lead involved at all. In that case, an engineering manager does play a tech lead role or they look for lead developers within the team that are interested in potentially becoming tech leads and engineering manager works with them to become technical leads and help grow them and improve their technical skills and leadership skills. Because as a tech lead, you do need to have leadership skills and that is why it can be confusing because there is a overlap of skills. So what does growth look like after you become an engineering manager? Well, you can become a senior engineering manager and the difference between the two is engineering manager does lead a team of developers but a senior engineering manager leads a team of managers. So they have several engineering managers reporting under them. I have been both an engineering manager and a senior engineering manager and I was working towards being a director. So a director is more or less responsible for a specific domain. They look at things more holistically beyond what a senior engineering manager would do. They're responsible for a really big domain and making sure the senior engineering managers have what they need and they are taking a look at things even more holistically. So it can happen that being a director, you are responsible for a even bigger domain and you have a lot more pressure and stress because of it. Similarly, senior director is the same idea. A few directors are reporting into senior directors and same thing for VP as well. A VP overlooks the entirety of engineering and they have a bunch of directors and senior directors reporting into the VP and the VP is most likely reporting into the CTO and so on, right? But again, like there are so many different positions in tech, especially on the leadership track that you can go on to if you just wanna climb the ladder. If you don't want to, that's completely okay. If you decide that, hey, I just wanna be a engineering manager, I don't wanna grow more, I don't wanna take more responsibility, that's completely okay because you can just focus on that specific position. The more you grow, the more responsibilities you are going to have as a developer. So you really need to assess where you see yourself in five years or 10 years. You may not know now and that's completely okay. You can try a position and figure out if you like it or not and that is why it is my recommendation to all developers to if there is an opportunity of a leadership position within the team or if there's an opportunity of getting senior, even if you are on the IC track, take that position and first try it out and see if you like it and if you do like it, then work with your manager or potentially a promotion path for you because you have already proven yourself for those skills. So I really hope this makes sense. There is a website called levels.fyi. This is a really good website to check what the different levels are in every company, what salaries every position should have and how it all works together because this is extremely important for you before you join a team or a company. Look at levels.fyi and take a look at the different positions and where you stand as well. I highly recommend you to reach out to someone in the company and understand what the different positions are so that you know where you stand and can apply for the position accordingly. Now, it can be very easy to say based on all these titles that we looked at that TechLead is supposed to do this or staff engineer is only supposed to do that or an engineering manager is only tied to maybe the people management responsibilities. But every company is so different that you might see that there's a lot of overlap and that is why it could lead to a lot of confusion when you're looking for a job as a leader or as a developer in general. So make sure you take a look at the different positions in the company. And depending on the scope of the org, like how big your company is and the scope of the work, there's also a staff developer involved and potentially a principal developer that oversees even a bigger domain or a specific domain. So for example, if let's say you wanna make sure that the notifications in your company are properly taken care of, there should be some sort of notification architecture that's there for maybe mobile web and so on. So how will the architecture look like? And in that case, maybe a technical lead maybe tied to a small team will not be able to handle that and might not have the domain expertise. And there needs to be someone like a principal developer that looks at notifications for the entire company and works with different teams implementing those notifications. So maybe works with the mobile team working for mobile notification, works with the web team for web notifications and so on so that from a user perspective, those notifications are the same and users don't need to know the technical architecture and all the behind the scenes of the code. So again, depending on your company, these roles can be very different but it's important to know which company you're going for. So accordingly, you can go for the position as well. Now, here is my ask for you. If you join a company and if you notice that there are no career ladders or expectations are not clearly defined, please work with your manager, please work with your HR and give feedback to them to make sure that these do get implemented because without these, it's incredibly difficult for developers to grow and otherwise oneonones with your manager are just going to be things you just talk about and there is no action being implemented. Or if you do give this feedback and if your manager says that you need to work on X thing and if you do work on it, suddenly there's a Y thing that was never talked about which probably your manager heard from some other manager who probably has more influence in the company. So make sure that everything is documented so that you know exactly what it needs and what you need to get promoted within the company. Now, if there's no career path or if there is no documentation, you can take the initiator to define it. It doesn't matter what level you are at. In fact, the more initiative you take and the more support you get, this will start to get more defined for all developers within the company and having a process will really help in this case. So I really urge you to create a process or create something in your company if it doesn't exist and try to get an alignment from HR or your manager to begin with just to get started. I really hope this gives you a solid understanding for what to look out for when you're looking for a job, the different titles in the industry, the different career paths and so on. So let's take a look at this mind map that I have created for us to walk you through exactly what day in the life of an engineering manager looks like. You don't necessarily need to do all of these things in a day, but these are some things that you need to do and are expected to do in your role as an engineering manager. So you can think of this mind map as a checklist of things that you should be doing. So if you're doing them, great. If you're not, and if you're curious about what it takes, become an engineering manager, then this is a great place for you. So let's take a look. So take a look at this mind map. There are several parts of this mind map, and I don't want you to be scared because I have basically listed down all the things that most engineering managers are expected to do. Now keep this in mind that every org and team are quite different. So you might be expected to do more things or less things if they already have a role for that, if they already have a position for it. Because engineering management and project management and a lot of it, it has a ton of overlap. If there are roles for that, you might not necessarily have to do those things, but if not, then you might have to. So I'm gonna cover a pretty robust roadmap, but keep this in mind so that you don't get scared that you might have to do everything in this. This specific engineering manager roadmap is divided into a few different pillars. One is organization, team, people, hiring, product, technical, communication, and personal growth. So let's take a look at each one by one. If you like a copy of this mind map, you can download it for free. Take a look at the description below if you like, and you can have a copy of your own. So the first thing that we are going to take a look at is organization. I would like you to have a topdown view of your org so that you are able to know exactly how your role as an engineering manager plays in the wider org and how goals are set, how you create objectives for your teams, and so on. Let's start to zoom in on the org. So there are a few things you need to keep in mind as we discuss about the org structure. So the first is you need to have a really solid understanding of the vision of your org and what the early vision looks like. So every year, maybe towards the end of the year for the upcoming year, the founders or the senior leaders meet and they discuss what the vision for the org should look like in the next year or the next five years and so on. And accordingly, they decide they want to reach to X milestone or X goals and X number, and that's how they decide, okay, the early vision of this specific year or the upcoming year is going to look whatever. Now you need to understand that vision very clearly because then you are going to make decisions for your team based on that, and you will understand how your team plays a role in that vision. If you create goals for your teams against those goals, then I kind of think of your team as a tiny boat which is steering away, which is going to slowly turn the ship away because all these tiny teams or all these tiny boats for the ship are not heading in the right direction. So your ship is going to slowly start turning away and that's not what we want. So have a good understanding of the org. After you understand what the vision of your org looks like, try to understand the business vision and the technical vision as well. So based on the business vision, the VP, the CTO, or whoever that might be, your senior leaders, senior technical leaders are also going to create a vision for your org. So for example, we should move away from REST APIs and only use GraphQL, or we should make sure that all our experiences are fully accessible and accessibility is a priority for every user experience that we create, which it should be. So whatever that might be, we are going to, you need to know that vision so that you have a better understanding for your team. So for example, if accessibility is part of it, then you need to make sure that when you are creating your roadmap for your team, accessibility is added as the criteria because that's also part of the vision. The next thing is planning. Now, based on that vision and the goals of your business, you need to understand which goals apply to you because there might be goals for the entire company. Based on those goals, then you need to start planning and planning your yearly roadmap and then your quarterly roadmap as well. So based on that, you're going to assess. You wanna achieve X percent in a year. This is our goal. And then based on that, for every quarter, we are going to try to meet X number, right? Or we are going to try to hit $10 million or whatever that might be. Although, how many dollars does it associate to? It's not necessarily in your control. You are also partnering with product and design and all the other departments as well, marketing and so on. But you need to assess what the quarterly goals look like. And then accordingly set ambitious goals. Now, one framework that you can use to divide those big goals into smaller goals is OKRs. OKRs stand for objective key results. And this is a framework where you can assess how you can set a ambitious objective and associate that to a key result you wanna associate yourself with. So I won't go too deep into what OKRs are, but this should give you a good understanding that it's the framework that is quite commonly used while planning for the year and while planning the roadmap. The next thing is collaboration with HR partner. So for your org, whenever you have to, you also need to understand the decisions that the org needs to make. There's gonna be an HR. In every HR department, you are going to have a partner that you collaborate with. And that partner is going to help you communicate exactly what they need you to communicate to your team. So make sure that you have a really strong relationship with the HR partner and if there is any downturn communication or if there is any important org communication or anything like that, you will be able to know exactly the words to use to communicate that to your teams so that you make sure your team is in the best part possible and they have all the information necessary as well. So again, in organization, these are a few things you need to keep in mind. The next thing we are going to take a look at is team. Now, team is very important for you as an engineering manager. There are quite a few things you need to do for your team just to make sure that your team is in the right spot and you have full control as a leader. Now, make sure that you have good processes and there is good documentation of processes. You're iterating on those processes as well. Again, too much process is not good. Have a right balance for process and task management such as who gets to do, who gets to work on what. You need to strike a really good balance here because you don't want to get assigned tasks to folks that are not necessarily interested in those tasks. So make sure you have a good understanding of the people working on that task and also they are motivated to work on those tasks as well and give them full autonomy as well. So for example, some people do create for autonomy. So for example, if they do love autonomy then assign them a task, talk to them about a high level goals and let them have full control in terms of how they want to execute it. And you can be the sounding partner for them and understand how they plan to implement it and so on. But based on what the interests are, what the strengths and weaknesses are, accordingly assign tasks as well. Then you need to also measure your team performance. So for team performance, anything you want to measure, it needs to be tracked so that you are able to measure. So assign proper metrics and track them, conduct weekly retrospectives. Retrospectives are a way to reflect on how the week went, what went well, what didn't go so well and so on. But this is how you can measure the team performance. For example, if your team's weekly output is a certain number of tasks, then make sure that you are able to maintain that momentum. If you are not, then your project planning might not go as planned. So make sure that you have a good understanding of all of that. The next thing is project management. Now this is something that you need to understand that there might be another role altogether in every company. Now every company is so different. So if you don't have this, then you might have to do it on your own or you have to gather around the developers and assign these roles and take turns doing them. So for project management, you need to plan the milestones. So for example, what are some tasks and milestones you need to hit along the way? Because the project can be maybe four to six months long or one to two months long, but what are the many milestones that you can hit on the way just to showcase to your stakeholders and to your team and product managers and everyone that you are heading in the right path? Then you need to monitor that performance. You need to make sure that you have good productivity practices. So if you do know that there are certain things that are maybe creating a lot more toil for your team, then maybe invest some time into automating that just because you don't want your team to be wasting time on things that where they can be productive. So make sure that you do invest time there. Then is prioritization, grooming, planning. So plan your tickets properly, plan your tasks properly, make sure that the backlog of tickets is properly groomed and make sure that you understand what the priorities are based on the roadmap that you have planned as well. But again, if the tick tasks have proper details, then the developers will be able to work on them as well, but obviously gather around the developers and make sure you work on all of these. Then is continuous improvement. Any of those will keep changing every month. Now, this is just a good list to have, but you need to make sure that you keep improving, you keep iterating with your team. Now, for every team, different things are going to work. Not everything is going to work for every single team. So make sure you cater to that so one team can differ from the other and so on. A very important pillar of engineering management are the people. So this is something you need to handle in a very delicate way because your decisions have a huge impact on your team and people are going to be impacted. So make sure that you know exactly what you're doing. Always create a plan for it. Make sure that the decisionmakers with you are also on the same page when you do take a look at anything to deal with people. So because you really want to make sure you get this right. So in people, you have to hire and onboard the people that you work with. Now, if you have a team of maybe two developers, if you want to make a team, if you want to create a team of seven developers, and five to seven is usually the max for a team size or a healthy max for a team size for one engineering manager. And in that case, you need to make sure that you're hiring the right people and onboarding them as well. And hiring and onboarding is a separate pillar for this reason because there's lots to talk about it. So we will take a look at it very soon. Next is the happiness of the people. It's very important that you foster a culture of transparency, you create a psychological safety for them. And I do have a blog post written on this topic. If you're interested, take a look at the description, but make sure that these things do align with the team culture and people are happier in general because this will add to the culture of your team. If people are happier, people are excited to wake up in the morning and come work for you, then you are going to be more successful as a happy outcome. People are going to be more productive because of that because they are interested in making the company better. So make sure that the happiness is really accounted for. The next thing is feedback. The way you gather feedback and the way you give constructive feedback is extremely important. Now, feedback is so important that you really need to make sure that you build really good frameworks and patterns for people because different people accept feedback differently. Different people ask for feedback in a very different way. So make sure that you gather feedback about them in a proper way, and you also give them constructive feedback as well. Then is career growth. Now, career growth is extremely important in a developer's life. The developers reporting into you really are interested to know where they stand, what can they do to get to the next level, and there should be full transparency related to this. So first, are there any career ladders set up in the company? And career ladders could be things like if they are a intermediate developer, then maybe they want to get to senior developer or staff developer, principal developer, and so on. Now, depending on the level you are at, there could be different levels in every company. So the career ladder can be completely different in every company. Now, if they want to take the individual contributor path, then they can, or if they want to take maybe a staff technical leader out, then they can do that as well. Now again, depending on the team that you work on, or a staff or a technical lead can be considered a leadership position, or it could be considered an IC position, an engineering manager onwards is considered a management position or a leadership position. So again, career ladders differ from company to company, but make sure that you know what path they want to go on so that you can give them opportunities accordingly. Make sure that every developer is creating smart goals. Smart is a framework used to create goals, and I will link what smart means in the description below, but they allow you to create really smart goals. Then make sure that they do have a development plan or a growth plan. Again, different companies call it different things, but a growth plan allows you to document where they're at in their journey, how their goals can tie to the objectives that they're working on, and those objectives align to the company's vision. And this is why I kind of gave you an idea of the org vision, the network map early vision, and then these goals should map to that so all the developers are working to make the company better. Then is the BRAG document. A BRAG document is a document where you document exactly all the cool things that you have done and things that you are proud of. So make sure every developer in your team has a specific BRAG doc that they are proud of. And make sure there are also promotions planned out and mapped out as well. So if they are already doing a good job and meeting expectations or even exceeding expectations in a specific level, don't wait for them to ask you to promote them. When you think they are ready, start creating a plan with them just to make sure that their career growth is on track. So again, all of these things are very important. Then is performance reviews. The performance reviews are extremely important. Now, one thing you want to really avoid, a one mistake that you really want to avoid is wait until the very last minute to give a performance review to the person or to give a feedback to the specific developer. Anything that comes out of performance reviews, none of it should come as a surprise to the developer. If they're surprised, you have not done a good job as an engineering manager. So make sure that your performance reviews are really on point and you already have a document which is your growth plan that ties it all together. Hiring the right people in your team is going to be majority of the battle for you. If you have really good people working for you, then it's going to be easier for you to meet your goals, your org goals, and as a result, it's going to be really good for your career growth as well. So make sure that you hire right. If you don't hire the right people, it can have a serious impact and that is why you need to make sure you have good practices set up and as well. So let's talk about what happens once you hire. So once you do hire, make sure you have really good onboarding set up for them because your goal as an engineering manager should be that they don't take the time to onboard, but it doesn't take too long for them to onboard because you have set up the right processes in place and everything that they need to do and need to know to get up and running quickly in their job. So make sure there's proper documentation. You have set up 30, 60, 90 day goals for them. So they have some sort of a metric to head so that they can work on those goals in their 30 days, in their 60 days, and in their 90 days. So make sure their first 90 days are set up for success. I have written a ebook on your first 90 days as an engineering leader and everything that you need to do to make sure your first 90 days are set up for success. If you're interested, take a look at the description below. The next thing you need to make sure you do is go through diversity and unconscious bias training. As humans, we all have our own biases and we need to make sure when we are hiring that those biases don't interfere with the way we hire people. That's why it's important that you go through this training before you start interviewing people because then you're going to know what are some of the biases that you may have and how to make sure that those don't play a role when you're hiring folks. Make sure you partner with recruiting as you're hiring as well. Honestly, recruiters are your best friends during hiring. If you tell them what you're looking for, they are going to go and find people on LinkedIn to make sure that the people are the right fit for your specific team. Then is interviews. So when you're hiring, make sure you have really good processes set up to hire folks. So make sure there's diverse interview participation. There are people from your team interviewing them as well. So they are comfortable for the new hires that are going to join the team. Make sure that there's a good technical challenge set up and not something that anyone can just Google. Then there's also a section for softscale assessment. Their communication is on point so that you know that they are a good fit for your team. Conduct resume reviews and you also hire for other teams as well. So as much as it's important that you hire for your team, you will also be expected to interview other team members as well. So make sure that you're really a important part of it. You're hiring for other teams, but you're also reviewing resumes and making sure that you're improving the culture of the company. Hiring is something that you do need to invest really good time in because as an engineering manager, you are going to hire folks for you, not just for your team, but also for other teams. So understanding their goals and hiring the right people will really help you. Having a diverse set of interviewers really make for a good interview experience for the interview as well. But again, hiring is going to be a really important part of your role and something you should not take it lightly. So far, we have talked a lot about different pillars of engineering management, but product is a pillar that is extremely important as a engineering manager. When you are making decisions as an engineering manager, you will also have a product counterpart, a design counterpart, and maybe several others too, just to make sure that all the decisions are being made and all the key players are in the room, all those decisions are being made for your team. Even though the people in your team are reporting to you, there might be designers that are reporting to a design manager or there might be a product person that is reporting to a senior product manager and so on. So you need to make sure that you are not the only one making decisions and having a really tight collaboration with product. And I should also add to your design is extremely important or any other folks that are important in decisionmaking. So in product, let's make sure that there is business alignment. So you understand what the business is looking for. And when product does create a strategy as an engineering manager, you review that strategy and really are on the same page as well. You make sure you ideate on different ideas that are really good for the product, create a different strategy and collaborate on that strategy as well. And based on the product strategy, make sure you also have your technical roadmap representation and focus as well. So if there's any technical that needs to be added or if there's any toll that's being created because of a specific task on your team, then make sure that gets added and represented in the technical roadmap as well. A technical roadmap is always a good idea of features that you would like to improve, things that architecture that needs to happen to make sure that we sustain the scale of the product requirements. So again, having a technical roadmap would be really important and something that you can initiate and get the team involved to start creating. Next is decisionmaking and critical thinking. Always, as I mentioned earlier, make sure that all the key decisionmakers are in the team and never say no, make sure that you use critical thinking just to make sure that you don't just say no, but also are able to come up with creative solutions for the problems because again, you need that creativity to push the art forward. Communicating understanding of technical requirements. Since you are a technical person in the room, you would have to a lot of times communicate the product and do other counterparts, why certain tasks are taking this long, why something needs to happen, why the architecture needs to be prioritized or whatever that might be, make sure that you're communicating that and all of you are on the same page. And lastly, prioritizing toil and technical debt in collaboration with product as well. So again, if there's any toll that's been created because of past products or past features that you have implemented or anything that just needs to be prioritized, then you need to prioritize in the roadmap as well. But again, making sure everyone is on the same page because you're not the only decisionmaker in the room. So again, collaboration with product is extremely important as a engineering manager. We should call this technical excellence because as an engineering manager, you need to make sure that your team is following the best practices and everything is under control from an architecture perspective and so on as well. Now again, you don't need to solve all of these problems yourself, but get the team together to make sure that these problems are being solved. So for example, in the technical aspect, there would be managing oncall and if there's any support required and there are offhours of what required, then are there best practices for it? That you are monitoring toils, so you have proper dashboard set up just to make sure everything is being tracked. If there are any incidents that have created toll in the past, an incident could be something, let's say the system goes down because of a feature that you own or if there was a massive impact to the customers and make sure that you have incident management practices as well. There's service ownership, so anything that you create, you own. So any of the services that you own truly belongs to you and your team and you truly own that. If you have any architectural best practices documented as well so that anyone new that any new team collaborating with your team can refer that document just to make sure everything is on point. Then there is documentation and technical analysis being done as well for every feature that you work on so that anytime any new feature needs to be worked on, there's documentation and there's a source of truth for everything, so just make sure that this is being done and again, you don't need to do it, you can get your team, you can delegate these tasks to your team to do it as well. Then there is technical roadmap and alignment and technical strategy which aligns with what we talked about in product and then there are good code quality processes and templates created for your team which allows your team to write better code. So for example, there are better code review practices, there's a no blame culture, you are using pair programming as a way to collaborate and get developers together and improve their skills and so on and lastly, you have proper practices for automatic deploys which allows you to automate your entire process in general. So anything that can be automated, you can think of technical bucket or technical pillar as a technical excellence bucket which allows you to make sure that the technical excellence for your team is really great and make sure that you are following all the best practices possible while deploying because otherwise you're just going to create more toil which will impact customers eventually. So again, technical is really important. Communication is a very important pillar as a engineering manager. You need to make sure that you're communicating right and effectively, frequently with anyone who you're working with so that you all are on the same page and there are no misunderstandings in your work culture. So for example, if you're working crossteam, then there is proper collaboration and practices with crossteams that people are talking to each other, there's proper meeting facilitation, the teams are working well together. Make sure that you partner with the engineering manager or the product manager or the design manager or whoever the leaders are of that team so that you all are on the same page and collaboration is seamless. Towards the end of the day, all the team members should be happy that the collaboration happened so that everyone is happier. Then if there are proper async communication practices, after 2020, we are in a spot where a lot of us are in a remote culture. So it's important that communication practices are async and there are remote communication practices and you don't necessarily need to get in a call for everything, there are less meetings. And if there are meetings and there's a proper agenda to those meetings, there's proper meeting facilitation. As an engineering manager, a lot of times you might, you will find that you are facilitating meetings and just asking questions and asking the right questions to get the conversation started so that the decisions are being made, not every meeting will have the set of questions necessary but just having the communication there really helps a lot. And that you are managing up as well. So you have a manager and you really need to make sure that whatever you're working on, you are also sharing the work that you are doing and you're truly owning up your career. I have written a blog post on managing up so take a look at that because there's a lot more to talk about while managing up and why it's so important for your career. So make sure you're doing that and communicating that because your boss, your manager should be an ally for you and they are going to be in rooms that probably you're not going to be so they need to represent your work and that's why you make sure you communicate effectively. Then there's stakeholders. Now, anytime you're working on something, there is a stakeholder for it. There are multiple stakeholders responsible for the work that you're doing and they are impacted, their team is impacted with the work you're doing as well. So make sure that there are frequent stakeholder updates. There's communication with stakeholders. They know how frequently you are going to communicate and involve them early. So if your team was working on something, involve them early to get their feedback because people are invested in the thing that they give feedback on and that they put time investment in. So if they give feedback early, they will be more invested and as a result, they are going to be happier because they can see that the team is already working on it. So this is why communication is extremely important with stakeholders and having a really good partnership with them and as a manager, communication pillar is extremely important and if there's one thing you need to start doing as you transition from being a developer to an engineering manager, it's communication. Make sure your communication is on point. We talked a lot about communication with stakeholders, technical excellence, product, team growth, people growth and lots more. But this is a very important bucket as well. I've mentioned this in the past, in other videos that engineering management is just like being on an airplane where you need to put your oxygen mask first and then give the oxygen mask to your team. So if you cannot breathe, you will not be able to help your team either. So make sure you're investing time in your personal growth as well. You are leveling up your skills and there are a few ways you can level up your skills through books and eBooks, presentations to share learnings, book coffee chats with other engineering leaders, join communities, take courses and so on. And as you already know, I'm already working on a course on helping you become a successful engineering manager. If you're interested, add yourself to the wait list and check out the course. I'm really excited for this course and everything that I'm covering in this specific video and lots more is also going to be included. And this is the part where you really need to level up your skills and make sure that the people on your team don't become the experiment for your growth. So this course is really here to help you for that. So the next thing you need to do for your personal growth is also document your knowledge, share your learning with other leaders in the company, make sure that you have a really good relationship with them as well, because who knows when your team would need to work with them, but also it's important that having a good network around you would really help you grow in your career as well. Then set up goals for yourself. Again, everything that we talked about in the growth section for your team also applies to you as well. Make sure that you do have a development plan that you're working on. You are setting up smart goals as well. You are creating those goals and measuring as well. Because again, as I said before, because as an engineering manager, it's extremely important that you measure everything. So make sure that you are doing that for yourself as much as you're doing that for your team as well. And about all of this, it's important that you take care of your mental health and personal development as much as you care for your team. I really hope you have a solid understanding for what it's like to become an engineering manager and how that differs from being a developer. Just by comparing the day in the life of an engineering manager, we got to know a lot about what a developer does and doesn't do, and what an engineering manager does behind the scenes. You can read all the books on the wall, take unlimited workshops on how to become a leader, but unless you get practical experience, you are never going to know what leadership looks like. So in this specific video, we are going to talk about how you can find opportunities as a leader, what does a good leader even mean, or what do they do? What are some things you should avoid doing as a leader? My name is Ankita, and I am an educator, and I will help you level up in your engineering career. I have more than a decade worth of experience leading developers, so you are in good hands. Let's get started. So the first thing you should do if you haven't already is become a mentor for someone. We all have something that we can teach others based on our experience. So figure out how you can become a mentor in the company that you work at, or even in general, figure out who asks you a bunch of questions and see if they're interested in potentially being your mentee, because being a mentor would be a really good, valuable experience for you to start tapping into leadership. It is kind of like the beginner phase of leadership. You will sort of understand what it's like to grow someone else. You're not directly responsible for their career or their growth right now. We are still invested in them. So you will kind of get an idea what it's like to become a leader. Next, you should figure out if there is a small project that you can lead. So again, you can figure out how to work with people, how to assign them tasks, how to figure out what the priorities are, and also work with your direct manager as you are in this lead capacity. So you will also start to see what your manager does in certain situations being a lead. So figure out and identify small projects that you can work on as a leader. Start shadowing your manager in meetings. Figure out what decisions they make. See what the day in the life of your manager looks like, because that's potentially also going to be your day as well. If you shadow your manager, you can start taking on leadership responsibilities, but also figure out if this is something that you like or not. Because if you don't like it, you don't want to do it, that's completely okay. But at least by this, you would be able to figure out what even a good leader does. You become the average of five people you surround yourself with. If your goal is to become a leader or figure out how to become a leader, what you can start doing is find out who in the company is a leader you aspire to become. You will learn a lot by watching them, and also context is very important. So you will figure out what engineering leadership looks like in the company that you work at. So find a mentor that can help you get there. Discuss them your potential goals and your interests, and that you're trying to figure out if you want to become a leader or not. A leader in one company might struggle in another. That's why finding a mentor in your org would really help you speed up that learning process. So what makes a good leader? If you want to become one, you need to figure out what is the secret sauce to becoming a leader? Now, there's never a checklist of things that I can provide and say, yeah, check this off and you will become a good leader. Leadership is complex because we are dealing with people and people are humans. So you need to tweak your checklist and add to it or remove items from it depending on the org you work at. But here are a few things that makes a good leader. You will notice that the people that work for that leader are incredibly happy. Or even if they are not very happy, they are satisfied with their job and job responsibilities. A good leader will always know how to build a highperforming team. And a highperforming team is not a team of high performers. A highperforming team is essentially a team that collaborates effectively, knows how to give feedback to each other, they ship fast, they iterate, and they move on. A good leader will know how to create a highperforming team out of any situation. A good leader is not just growing the people on their team, but they are also driving business results, which are very, very important. You can think of this analogy where you can imagine a duck swimming in a pond. When you look at that duck, the duck seems really calm and everything is going okay. But underwater, you will notice that the duck is working really hard to make sure that they seem calm on the surface level. And that's exactly what a good leader would look like. You will not notice that there's a lot of work that's going on in the background because they're doing such a good job shielding the team from all the chaos and pressure that's happening in the org. So a good leader will definitely be doing that. A good leader will know exactly how to grow people at different skill levels. And if they don't know, then they're going to ask others for help and figure out how you can grow in your team. They are never going to give you the answers. They're always going to coach you and question you so that you can come to those answers yourself. And it always creates that light bulb moment for you. A good leader will not give you the answers because they know that in the future, you're going to come back to them with the same question. But if they ask you, then you will come to that answer yourself and you don't need to ask them in the future. And that's what a good leader does. Communication is extremely important as a leader and a good leader will always communicate effectively, thoughtfully and will prepare the communication before any major event. So for example, there might be different types of communication. There could be oneonone communication with the direct reports or people they didn't work with or they could be orgwide communication or big channel communication. And a good leader will always thoughtfully prepare what communication looks like. This communication can literally make or break a company. It can create chaos and it will create uncertainty and you don't really want that. So if you want to be a good leader, you need to make sure that you're communicating thoughtfully and effectively. A good strategy for this is always create a document and write down everything that you want to say and review it and tweak it and use your words wisely and then get other leaders to review the document as well before sharing it in a channel because the impact of that could be huge. And this way you are aligned on the communication. So a good leader will always have really good communication strategies. I have a video coming out on how to effectively communicate that you should check out. A good leader will always create psychological safety. Now, psychological safety means that you can make mistakes as a developer or as a member of the team and you won't be punished for it. There are no bad consequences for it. As a developer, you are going to make a lot of mistakes. So imagine if your manager or your leader doesn't create a psychologically safe place to make mistakes, then you are going to have a ton of bugs and you're always going to hide your mistakes. And if you want to be a good leader, you should never do that. So a good leader will always create a psychologically safe place for you to make mistakes and won't punish you for it. Instead, figure out a way to avoid those same mistakes in the future and create a process for it. As a good leader, you must always praise publicly and give feedback privately. So this is a perfect example wherein if you want to create a psychologically safe place, never bash anyone publicly because you're going to create that fear for everyone else on your team and you really don't want to do that. A good leader will create that safe space for everyone to make mistakes. As a good leader, you always want your people to grow and level up. If they are stagnated, if they're not growing, then what's the point? You need to make sure that the people on your team are growing and this will really make you a good leader because you are helping them grow. You're giving them feedback, you are creating a development plan for them, you're really figuring out the gaps they have and helping them get to the goal where they want to get to, or you're helping them level up. So really you need to make sure that the people on your team are growing as a really good leader. You don't need to problem solve each and everything as you did as a developer. Now you need to handle problems on a case by case basis because these problems are often problems with people. So a good leader will know exactly how to handle a specific difficult situation. You never want to run away from difficult situations as a leader and you should almost be comfortable dealing with it. It can be hard at first, but the more you do it, the better it get, but handle with care and handle with thoughtfulness and it will always come across as genuine. So as a leader, you always want to analyze things on a case by case basis and figure out problems or brainstorm problems together. You might have a lot of control as a leader and a lot of power as a leader, but you still want people to come work for you. And if you act like a boss and not as a leader, then you will not have those people coming to work for you. And you really don't want to do that because you will not have a team. So really make sure that you don't act like a boss, but you start being a leader, start acting like a leader. And based on some of the things I talked about, because if you start being a boss, then you're commanding and people don't like to work for bosses. So start being a good leader. You need to lead by example as a leader. You need to have a positive influence on others. By growing other people, you are going to grow yourself as well and you're going to level up your skills as well. Now, if you want people to follow you and if you really need to walk the talk, if you want people to follow the same guidelines and rules that you have set for them. So for example, if you don't want people to work late, then don't work late as well. If you don't want people to DM each other or message in channels after work hours, then don't message in work channels or be online or show them that you are online after work. Because again, people are just going to follow you because you're the leader. So whether you like it or not, the behaviors that you adopt as a leader are something that is going to be easily trickled down to all your team members. Because as a lead, you're setting the culture of your team. So really you need to make sure that you're leading by example. When people say that they love or hate the company they work for, you can be 90% confident that they're talking about their manager because a manager can really make or break someone's career. So you really need to make sure that you are being a good leader and setting a good example for them. I have mentioned a million different things for what makes a good leader and I can say a million more things more. But again, as I mentioned at the beginning of this video, you really need to make sure that you are gaining that practical experience, finding those opportunities for yourself in order to hopefully become a leader in the future. Hard skills get you hired, but soft skills get you promoted. If you had to pick one soft skill that you truly need to master, then it has to be communication. After leading 100 plus developers and leaders, I can assure you that folks that knew how to communicate, grew quickly, got promoted and truly created that impact that lasted for years. If you are interested in leveling up and getting promoted, then keep watching. In this video, I'm going to share a four step, simple formula for you to create a communication strategy that you can apply in any type of meeting. So let's get started. So the first step in this formula is identifying who you're communicating with. Knowing who you're going to communicate with is going to be a game changer for you. You know why? Because after you know who they are, you can share more or less context in that meeting. Before you get into that meeting, figure out who's going to attend the meeting, what their roles are, what do they care about, what their objectives are, and how do they tie into the context of the meeting and why were they invited to begin with. Knowing that is going to be huge for you because then you can accordingly decide whether you should provide more context, whether you should ask them more questions or how they're going to help your team. This is going to make you look more confident because you are, because you have prepped for that meeting. So identifying who you're going to communicate with is going to be a game changer. Unfortunately, 90% of the folks don't know which meeting they're getting into. They wait for the calendar tool to notify them five minutes before the meeting, and then they decide to go into that meeting, not knowing the purpose of the meeting, who's attending the meeting, and then that completely slows down the meeting. So in order to craft a really good communication strategy, you need to do the opposite of that. You need to identify who you're talking to so you know how to best position yourself. The second part of the formula is to focus on the outcome that you would like to get to. Now, hold on a second and let's take a step back here. Focusing on the outcome is so important. If you know what you want to get out of that meeting before you even get into it, or what you want to get out of that discussion, then you can basically backtrack and figure out exactly what questions you want to ask and how you want to position that meeting. A lot of times we get too invested in the solutions or we are too passionate about the problem that we figured out what exactly we want to get out of the discussion with anyone. So if you figure out what exact outcome you want to get to, then you can backtrack and craft steps for how you want to get to that outcome. If you get into the meeting and you realize that this meeting is not productive and you will not get closer to the outcome, in fact, you are getting derailed by a completely different conversation, then backtrack and figure out what your outcome is and remind your team of that outcome. So for example, if you get into a heated discussion on architectural decision with another teammate, instead of getting too heated up, try to figure out what is the outcome you would like to get to based on your discussion. Now the outcome is that you need to agree upon a common solution that works for your team and for the business and for your company, right? That is the outcome. Then you shouldn't get too hung up on having opinions that are not supporting that specific outcome. So again, if you do that and backtrack it, that will really help you understand where you would like to get to. Now, whatever strategy that we are discussing right now, the fourstep formula along with examples, if you'd like a template for it, then take a look in the description below and download the template for free. Now, the third part of the formula is what impact you would like to create from this specific meeting. Now, in order to make sure that you're creating impact as part of every meeting, you need to create a wellstructured meeting. So for example, before you even get to the meeting, make sure that every meeting has a clear agenda and whatever outcome that we have just talked about is also documented in that specific meeting. So people are aware what to discuss upon. If the meeting gets derailed, make sure that people discuss the main topic of that specific meeting and discussion. Engage participants in the meeting. For example, you know that you need marketing's input, or if you need a specific developer's input in that meeting, make sure that you get asked that input and make it a engaging meeting so that it's not just you who's making the decision, but it's the entire team or the entire group that's invited to the meeting, really thinking out loud and giving that opinion. Because again, in order to make sure that you level up and get promoted and really come across as a confident communicator, you really don't wanna do this on your own. You really wanna bring the entire group together to do this together. And manage time effectively. Time is very important. If you make sure that the meeting starts on time and ends on time, that is going to be really, really important for everyone because again, time is energy. The more time you spend on something, the more energy you're going to spend on something. So you really wanna make sure that you are managing the meeting right and making sure that it starts on time and ends on time. If you are getting into a meeting or a discussion, you need to think about what should people remember about you as they walk away from that meeting. So for example, if you're really trying to create a brand around GraphQL and you really want people to remember that you are a GraphQL expert or you really know a lot about GraphQL, then before you get into that meeting, prep for that meeting and really note down what are the different types of questions that are going to be asked as part of that discussion and answer them and help the team. Even if you don't know the answer, that's completely okay. You can take away those questions and really figure out how to help the team later on. But again, make sure that you know what impact you would like to create as part of that meeting. The minute you start thinking about that, you're going to behave a bit differently than you do. You're going to start being more active in the meeting. You're going to be an important part of the meeting, which is really, really important. If you are interested in knowing how to be a great leader and in fact, how to be a badass one, then check out another video that I have created. The fourth step in the formula is what are some of the actions that you can create as part of this specific discussion? Towards the end of every meeting or towards the end of every discussion, there are a list of action items that you can take away that you can work on. You can remind the group of that. You can remind the team of that, but you can also take away some of those action items and make sure that they are delivered. Once they are done, let the team know in the channels that you're part of, where all your other team members are, because again, that's going to make you look a lot more confident and you are communicating seamlessly. What action items can you take from that specific discussion or meeting? Make sure that it's documented somewhere so that everyone knows what you have discussed. There's no room for miscommunication and misunderstanding because everything is documented. Make sure that you get alignment from everyone else by repeating the goal of the meeting and the action items that came out of that meeting because you are going to look more confident and prepared and you know exactly everyone is aligned on that specific topic. And overall, just be helpful in making sure that discussion gets to the specific outcome that you would like to get to. The key thing here is that throughout this specific video and in this specific formula, I have talked about all the different ways you can communicate how you need to be prepared for the meeting, how you need to make sure that you're answering questions, how you can share context and so on. And all of these things, if you keep repeating over and over, you are going to come across as really confident because you are someone who is prepared for the meeting. You know exactly what the discussion is about so you know that you have that additional leverage over others in that specific meeting. This lesson, we are going to talk about some frameworks that we can use to learn how to give feedback effectively and the importance of feedback overall. Now, feedback is so personal and unique that you would need to keep evolving your framework. You will learn that the feedback you may give to one person is completely different to the feedback you share with someone else. So feedback is so personal and so unique that you need to keep evolving it. And we have talked about the buddy pattern in the antipatterns lesson and you wanna be liked and loved so badly that you will never give a single piece of negative feedback. And we talked about this as a buddy pattern in the antipatterns lesson of engineering leadership. You wanna be liked, we wanna be loved because we are humans after all and we never wanna do the hard things of giving feedback. But this behavior is not going to create any positive team culture. In fact, it's going to do the opposite of that. You're going to slow down, you're learning, you're going to slow down your team because you're in danger, because this might lead to more potential behavior which might be worse for your team. You really need to make sure that you give feedback. And feedback is the best gift you can give it to someone. Most leaders are scared to give feedback because they think that their colleague might not take them in the right way. The colleague might get defensive, get mad at you for sharing feedback, but it is the best gift you can give it to someone. Negative feedback is difficult. You may find excuses to not do it or postpone it, but keep this in mind, that if you're not sharing this feedback, you give them zero chance of improvement and that is not fair to them. So giving negative feedback is extremely important. And the problem is never the person themselves, it's the behavior that they're exhibiting. And if you know this about feedback, that it's not the person, it's not personal, it's the behavior that we need to rectify, suddenly a lot of things change when you're giving feedback. And if you combine that with our initial fight or flight response, then it gets worse. You're likely to experience a social threat when facing people of higher status, feeling or sense of uncertainty, or feeling disconnected, which is something that is unfair. Now, if you combine that with like fire or flight response, it's no wonder feedback is not part of our high priority list because whenever we receive feedback, we get really defensive. And that's not what we want, but that's what happens. And that's why feedback is difficult to receive and to give. But one hot tip is that you don't give feedback or take any action that will impact others if you don't have the time to address the feedback, or if you don't have time to listen to their story, that is if you're in a rush. Because if you're in a rush to give someone the feedback, it's a sign that you have failed them before you even got started with them. It's best to hold off until you have something concrete or positive to say, and have more something constructive to say. Because when you're feeling like you have to give someone feedback and you cannot wait until tomorrow, it's a sign that maybe there's a problem with you, you are insecure or something that has gone wrong with you, or they had a really massive impact on you with the behavior that they exhibited. So make sure that you take the time, take the day off, don't stress too much, and after you give it some time, collect your thoughts and give them feedback. And reflect when you felt grateful after receiving feedback. So think of a time when someone gave you feedback that actually made you feel good, even though it was constructive feedback. How did they convey their message? Why did you value that feedback? How did that make you feel? Think of that as you start to craft and learn to give feedback more frequently to your team. And we have a framework. This is one of my favorite frameworks to use, which is SBI framework with the twist. Now we can divide this framework into three parts. Situation, behavior impact, and outcomes. Now, situation as in, what was the situation that happened where you felt the need to give feedback? What was the situation like? Were you in meetings? Did someone say something? What was the situation? What is the behavior that you would like to change? What behavior impacted the team or impacted you or someone else on your team? You wanna be very careful of that. For example, if they're interrupting in meetings, then you need them not to do that. So let them know the behavior needs to change where they need to stop interrupting others and make others feel excluded. And impact is that your other team members felt excluded and that is the impact from their behavior, right? And the situation was that you were in a team meeting, discussing ideas and thoughts, and someone came up really strongly and kept interrupting everyone else in the meeting. That's not how you want, right? And that's the essence of SBI framework. But I like to add a twist and say, let's also focus on the outcome because then that helps you with feedback in general. What is the outcome you would like from that conversation when you're giving feedback? Is the outcome that you would want their behavior to change, you don't want them to interrupt others in the meeting, then let them know that. So the outcome here, it's not just you and me, right? Let's start to figure out what is that behavior that we need to change because it's not them, it's the behavior, right? And you can also use this infographic here to use SBI framework with the twist so that you can easily reference it in the future when you're giving feedback. So let's say you have a situation, let's take a look at an example. You have a team member that is very senior in the org and is not mentoring junior devs and not really prioritizing them. What is something that you need to do? Well, your first instinct is going to be that this is not okay. This in this case would be that you would want this behavior to stop or change and that's going to be your first instinct. But the second is going to be that they're mean and they're rude, that they're constantly talking over people. This is not making the team feel good and the team is not speaking up because of that. And that is the impact. So let's try giving this feedback using this framework. And these are the list of questions that I have in the workbook that you can use to craft this specific feedback. That is, what is the outcome? What is the context? What is the situation? What behavior needs to change? Why do you think this happened? And what was the impact that it had on the team? You can use these questions to craft a really good feedback message. So workbook time. You want to collectively craft a feedback message using a SBI model with a twist and make sure that you give it a shot. So what are some important things to note about feedback, right? You always want to be open to hearing their side of the story, their feedback, right? Because as much as you are open to sharing yours, they also have a side to it, which is very important. So maybe you don't have context to new things that could have happened that maybe they did not let anyone else talk because you were in a client meeting and you knew a backstory which would significantly impact the project. There could be many different reasons. And then suddenly you start feeling like, oh, that's why they kept interrupting others. And even though that's not okay, and they should never do that, there was a better way to handle it. And that feedback can change based on that. And lastly, document the action items. What are the takeaways for them? And ask them what the action items were from this so that you can make sure that there's alignment. The answers should always align to what you talked about, but, and it shouldn't be perfect, but it should have the essence of what you are looking for. There, this is Ankita. Thank you so much for checking out this course on engineering leadership. I really hope you like it if you do. And if you have any questions, please let me know in the comments below. But if you want to continue learning further and if you're serious or even curious about becoming an engineering leader or a manager, then you can also check out this course that have created call as developer to leader. It will take you from being a developer wherever you are at to becoming a successful engineering leader. And it will teach you how to lead a team, how to grow a team, how to hire right, how to create a engineering vision, how to create a technical roadmap and how to deliver feedback, how to receive feedback and lots more that I couldn't necessarily cover in this specific course. So I really hope you check it out. And if you do, then you can use the code, free code cam for 25% off additionally as well. So I really hope you check it out. Once again, thank you so much for watching and I hope you have a wonderful day. Bye for now.
