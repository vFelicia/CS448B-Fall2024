With timestamps:

00:00 - everyone this is cold welcome to my web
00:01 - pack YouTube mini course thing there's a
00:04 - couple things I have to get out of the
00:05 - way first
00:06 - the most important one is that there is
00:08 - a github repo that goes along with this
00:09 - course so if you follow along if you
00:12 - want to see the code I mean I do type
00:13 - every line from scratch so it is a true
00:15 - code along but if you just want to check
00:17 - the code out at any point use this repo
00:19 - view it in the browser there's a bunch
00:21 - of commits with nice detailed messages
00:22 - clone it down if you'd like to use git
00:24 - if you feel comfortable checking out
00:26 - each commit and I'll reference
00:28 - throughout the video you know I'm on
00:29 - commit 7 going to commit 8 and that sort
00:32 - of thing
00:32 - ok the next most important thing I know
00:35 - everyone's gonna ask why am i wearing a
00:37 - hat I need a haircut
00:39 - ok and I thought this was better than
00:41 - the alternative you see what I'm working
00:42 - with here yeah okay so on to the course
00:45 - content this video is about web pack in
00:48 - general so if you already know how web
00:49 - pack works what it does what the point
00:51 - is then you might want to skip this or
00:53 - just fast-forward through it in the next
00:55 - video we start with installation so
00:57 - because it is 10 videos I did decide to
00:59 - spread things out instead of just
01:01 - rushing through everything so I will not
01:03 - take offense if you speed through any
01:05 - videos or skip them that's what the
01:07 - github repo is for as well if I were
01:08 - taking this course I'd probably just
01:10 - start by looking at the code I've always
01:12 - liked to do that before I watch any
01:13 - videos ok so let's get going let's talk
01:15 - about what web pack is this is the web
01:17 - pack homepage and I like how this image
01:19 - explains it web pack can be very
01:22 - confusing and intimidating and cause
01:24 - many headaches when you're actually
01:25 - setting it up and configuring it but its
01:27 - mission its core goal is very
01:29 - straightforward it takes a bunch of
01:31 - different assets different files of
01:33 - different types javascript images like
01:35 - SVG P&G JPEGs CSS stylesheets or less or
01:40 - sass all sorts of different files and it
01:42 - combines them down it bundles them into
01:45 - a smaller group of files one file maybe
01:47 - or one file for your JavaScript one for
01:49 - your CSS one for your third-party
01:51 - JavaScript to vendor j/s and one for
01:54 - your app code app jeaious it's very
01:57 - configurable which is where it can
01:58 - become a little tedious and pretty
02:00 - intimidating to people who are learning
02:02 - it but the idea behind it is very simple
02:04 - so in addition to just bundling things
02:06 - together and just shoving them into a
02:08 - file it's also managing dependencies
02:10 - it's making sure that code that needs to
02:13 - load first
02:13 - is loading first so if you write a file
02:16 - that depends on three other files those
02:18 - three need to be included first so often
02:21 - it's a very complex web of dependencies
02:23 - and larger apps and it would be very
02:25 - difficult to manage it on your own web
02:27 - pack does it for you and it spits out
02:29 - one or two or however many files you
02:31 - tell it to bundle and I like how the
02:33 - github repo explains it web pack is a
02:36 - bundler for JavaScript and Friends packs
02:38 - many modules into a few bundled assets
02:40 - and through something called loaders
02:42 - which we'll talk about modules can be
02:44 - commonjs es6 CSS images json
02:47 - CoffeeScript blah blah blah blah blah
02:48 - the list goes on so we're going to see
02:51 - how to do a lot of this stuff but first
02:53 - I want to show you an example of an app
02:55 - that is already built we'll be creating
02:57 - our own from scratch and configuring web
02:59 - pack but this app is substantially more
03:01 - complicated way more dependencies than
03:03 - what we'll be doing in this course so
03:05 - this is an app that I'm building for my
03:07 - upcoming react course it's a a color
03:09 - pickers website so there's a bunch of
03:11 - color pickers you can click on one you
03:13 - know you can copy a color there's a
03:15 - whole bunch of features things like
03:17 - changing from hex to RGB to RGB a all of
03:21 - that involves a library that helps
03:23 - figure out colors and and convert
03:25 - between different color types I'm using
03:26 - a library to get these nice sliders and
03:28 - this little snack bar thing that pops up
03:31 - down there
03:31 - there's transitions I'm using the react
03:33 - router Rose my point is there's a lot of
03:36 - different stuff going on that is
03:37 - third-party code that I'm depending on
03:39 - there's some code to help with
03:40 - drag-and-drop there's code for a color
03:43 - picker so I can create new palettes
03:45 - reorder them I save it and there's code
03:48 - in addition for this emoji picker here
03:50 - so I can select an emoji anyway that's
03:53 - enough with the app itself but it's
03:55 - sufficiently complicated where I think
03:56 - it makes sense as a good example for web
03:58 - pack so if we take a look at the code
04:00 - there are I don't know 20 something
04:03 - JavaScript components or react
04:04 - components that I've written plus 20
04:07 - something CSS files plus a whole bunch
04:10 - of dependencies lots of modules things
04:12 - that I'm using like react color I'm
04:14 - using this emoji Mart I'm using material
04:17 - UI react of course some form validator
04:21 - libraries there's a lot of dependencies
04:23 - and this is for a single file and
04:25 - there's twenty-something of them so at
04:27 - the end of the day
04:27 - each one of them has at least this many
04:30 - dependencies and it's very tricky to
04:31 - determine what needs to load first if I
04:34 - was manually including script tags for
04:36 - each one of these 20 files
04:37 - it would not be sustainable so this is
04:39 - built on top of create react app which
04:42 - is a pretty standard way of creating new
04:44 - react apps and it uses web pack behind
04:47 - the scenes in addition to some other
04:48 - things but web pack is really
04:50 - responsible for the bulk of the
04:52 - functionality behind create react app so
04:54 - it's going to take all of my JavaScript
04:56 - and combine it into one file it takes
04:58 - all of my CSS and combines it into one
05:00 - file it does a lot more involving things
05:02 - like babel for example but at its core
05:04 - that's what it's doing it's bundling my
05:06 - assets and making sure that it's
05:08 - managing the dependencies so if I wanted
05:10 - to run the application I can run NPM
05:12 - start which will run it in dev mode
05:15 - which starts a local server but it still
05:18 - uses web pack and if I open up the
05:20 - chrome inspector you can see in sources
05:23 - there are MC just a couple JavaScript
05:26 - files bundle J s and then main chunk J s
05:31 - and this contains all of my code
05:33 - combined into one file there's some
05:35 - weird stuff going on if you're trying to
05:37 - read it using eval basically each one of
05:40 - these is a single file that I wrote a
05:42 - massive string and it's being wrapped in
05:45 - a web pack module and this is keeping
05:48 - track of what it exports and what it
05:50 - depends on and you can actually see for
05:53 - example this is mini pallet J s okay
05:57 - that's one of the components and if I
05:58 - keep scrolling over you can see things
06:00 - like this web pack imported module 6
06:03 - equals web pack require of react so web
06:07 - pack require is how web pack is keeping
06:09 - track of what is imported where what
06:11 - needs to be exported what uses what
06:13 - basically manages dependencies so it
06:16 - replaces my imports and exports with
06:18 - these web pack requires so if I kept
06:21 - going it's pretty annoying to scroll but
06:23 - you'd see ok web pack required mini
06:26 - colorbox that's another component that
06:28 - this component imports it relies on that
06:30 - component and what might surprise you to
06:32 - learn is that it's actually importing
06:34 - all of my CSS as well into this file so
06:37 - it didn't make me a separate CSS file
06:39 - because I'm running in development mode
06:41 - and I'll show you just a moment what it
06:43 - does in production and now if I instead
06:46 - decide to run this in production which
06:48 - I'm not really going to run it I'm going
06:50 - to export I'm going to spit out a build
06:52 - folder so npm run build this is a
06:55 - command with create react app you'll see
06:57 - that it makes me a couple of files once
07:00 - it finishes it can take a while which is
07:02 - why we don't export these CSS files in
07:04 - development when we're constantly
07:06 - changing things because it takes forever
07:08 - to recompile it to reap undal okay so
07:11 - that's just finished and if we start by
07:13 - going to my text editor scrolling way up
07:15 - close this down here there's now a build
07:18 - directory and inside of that build if we
07:21 - look at our Java Script there's a couple
07:23 - files there's these source Maps we can
07:25 - ignore but they're all minified now this
07:28 - is the same stuff i was looking at
07:29 - earlier when I was using the dev version
07:32 - but now it's been all crammed together
07:33 - and minified and I have separate CSS
07:35 - files but if we look at them they're all
07:38 - of my CSS separate files have been
07:40 - combined into one and also minified so
07:44 - web pack is doing all of this for us
07:45 - again it's managing dependencies it's
07:47 - bundling code together and now if we
07:49 - look at index.html which is somewhere in
07:51 - here there's only what to script tags at
07:54 - the bottom and one or two link tags at
07:57 - the top instead of 20 or 30 or 50
07:59 - separate script tags that I would have
08:01 - to do manually okay so hopefully that
08:03 - makes it clear what web pack does why
08:05 - you would want to use it it's a huge
08:07 - headache on large apps to try and do
08:09 - something without web pack or something
08:11 - comparable alright so I mentioned this
08:13 - in the intro video but I want to bring
08:15 - it back up in case you missed it or you
08:17 - skipped right to this video so you could
08:18 - start installing stuff which I get by
08:21 - the way but I want to bring it up
08:22 - because this repo is very important for
08:25 - the rest of this course the next 9 or so
08:27 - videos it includes all of the code and
08:29 - all of the commits that I make in all of
08:31 - those videos so the link is in the
08:32 - description it includes detailed commit
08:34 - messages I'll talk about in each video
08:37 - which commit I'm currently on so I do
08:40 - type everything from scratch it is true
08:41 - code along but if you want to reference
08:43 - the changes I'm making or if you get
08:45 - lost or you just want to look at it
08:47 - without the video click on a commit and
08:49 - you can see the diff you can also see
08:51 - the notes I've written up top and if
08:53 - you're more comfortable with it then
08:54 - and just check out each commit as you go
08:57 - all right so this is the initial state
08:59 - of our application a very very simple
09:02 - app that we're going to add web pack
09:04 - into and configure it a couple different
09:06 - ways and you'll see it gets surprisingly
09:08 - complicated just to do a couple of the
09:10 - basic things now that's not a dig at web
09:12 - pack it's just maybe a bit of damage
09:15 - control on my end just to let you know
09:17 - that this stuff it can be annoying or
09:19 - difficult to follow which is why I gave
09:21 - you the github repo so that you don't
09:23 - have to type everything yourself if you
09:25 - want you can follow along that way but
09:27 - you can also just you know check out
09:28 - each commit as I go and you'll be able
09:30 - to see what's happening
09:32 - so the code right now is the initial
09:34 - commit there is no web pack it's a
09:36 - single index.html a single app j/s file
09:40 - and an SVG image so you can see here's
09:45 - our HTML there's a single script tag at
09:47 - the bottom fjs has 40-something lines
09:50 - imagine that it's 4,400 lines instead of
09:53 - 40 and that will help make it clear why
09:56 - web pack really makes your life easier
09:58 - once you get it set up at least okay we
10:01 - also have some content of course and
10:02 - then I'm using bootstrap from a CDN so
10:05 - unchanged eventually we'll actually be
10:08 - using local bootstrap we'll be writing
10:10 - some sass to override different
10:12 - variables change colors in bootstrap and
10:14 - then use webpack to bundle it all
10:16 - together and make it work but for now
10:18 - it's coming straight from a bootstrap
10:20 - CDN unchanged and this is what the app
10:22 - looks like when I just open the
10:24 - index.html I'm warning you it's
10:26 - extremely simple and not exciting we
10:29 - have two inputs styled with bootstrap I
10:31 - can add numbers together by clicking
10:33 - only adding unfortunately and it prints
10:35 - out your result down here so some simple
10:37 - JavaScript and some extremely simple
10:40 - validation if I put numbers I mean
10:42 - letters in here instead of numbers I get
10:44 - this alert styled by bootstrap that says
10:47 - please enter two valid numbers a ASD is
10:49 - not a number blah-blah-blah-blah-blah is
10:51 - not a number so it's actually really
10:53 - horrible validation because you can
10:55 - cheat it as long as you have a number in
10:57 - that string so this is going to be one
11:00 - plus 12 which gives me 13 even though
11:03 - those aren't valid numbers but that's
11:05 - not really the point
11:06 - the content of the code doesn't really
11:08 - matter much it's more about just having
11:10 - javascript that we break up having some
11:13 - sass having some CSS having an image
11:14 - that's what really matters
11:17 - so don't get too hung up on that because
11:18 - the same stuff I'm going to show you
11:20 - will apply to more exciting more
11:23 - complicated applications but I wanted to
11:25 - make something simple enough to follow
11:26 - along with okay so the first thing I'm
11:29 - going to do is break my code up into
11:30 - separate files so that will take us into
11:33 - commit to if you're following along that
11:35 - will be the second commit so there's a
11:37 - couple things that I can break up from
11:39 - my app j/s first of all we have these
11:41 - different functions I'm going to put
11:43 - those in their own file each one in its
11:46 - own file in a utilities or utils
11:48 - directory because we might want to use
11:51 - those somewhere else in the app in
11:52 - checking if inputs are valid checking or
11:54 - parsing inputs that's functionality we
11:56 - could use somewhere else also you know
11:58 - we're just breaking it up so that we
12:00 - have something to bundle it's not very
12:01 - fun to bundle a single file I'm going to
12:04 - make actually I'm going to refactor our
12:06 - code to have two services an alert
12:08 - service and a component service and then
12:10 - I'm going to have a function called run
12:12 - that actually starts all of our code so
12:15 - I'm going to do that now I'm going to
12:16 - make a new folder inside of source
12:18 - called app and then inside of that
12:20 - another new folder called utils and then
12:23 - the first utility will be parse - input
12:27 - CAS and I'm just gonna cut this code
12:30 - right there and put it in this file and
12:32 - then I'm gonna do the same thing for our
12:35 - second utility function which is called
12:38 - inputs - R - valid is and I'm going to
12:43 - cut this out and paste it in right here
12:45 - there we go and I'll fast-forward
12:48 - through some of these changes but I'm
12:50 - going to make a couple more files just
12:51 - so you can see the file names in the app
12:54 - I'm gonna have alert service is I'm
12:57 - going to have a component dot service J
13:01 - s and then I'm actually going to move my
13:03 - app j s into app so I'm going to delete
13:06 - this when I'm done okay so I'm going to
13:09 - fill out these files again it's the
13:10 - second commit if you want to see how I
13:12 - broke the code up for yourself okay so
13:14 - I'm back this is the alert service a
13:17 - class called alert service I just moved
13:20 - the code into this it relies on inputs
13:23 - are valid for example we also have
13:25 - component service which doesn't have any
13:27 - dependencies so far and then inside of
13:30 - app J s the real the new FJ s I'm going
13:33 - to delete the old one that's outside of
13:36 - my folder now it's just all in this app
13:38 - folder so I have my utilities two
13:41 - functions and then I have alert service
13:43 - component service and then app J s is
13:45 - going to instantiate new instances of
13:48 - alert service and component service call
13:51 - them alert service and component service
13:52 - and then it has a function called Run
13:55 - which accepts an instance of alert
13:57 - service and component service and I'm
13:58 - calling that at the bottom so this is
14:00 - what actually starts the app everything
14:02 - else is just a function definition or a
14:04 - class definition but this function run
14:06 - is what actually runs the code what
14:08 - starts everything so don't get too hung
14:10 - up on the code it's not really the focus
14:12 - all that matters that is that we have
14:14 - code spread across different files so
14:16 - now my index dot HTML needs to change
14:19 - because I'm linking to the old app J s
14:21 - but now it's inside of the app directory
14:24 - so source / app / FK s that should get
14:28 - me that file but you probably can tell
14:31 - already this is going to be problematic
14:33 - if I try and run it refresh the page
14:35 - there's an error alert service is not
14:38 - defined okay so this is sort of a
14:40 - heavy-handed way of proving a point that
14:42 - managing dependencies is tricky it's not
14:45 - so bad in this example but we have alert
14:47 - service we need to make sure that that
14:49 - has loaded first we need to use
14:51 - component service before we can run this
14:53 - code so app J s depends on those two but
14:57 - then we have alert service which itself
14:59 - uses inputs are valid so we need to make
15:01 - sure that it's aware of inputs are valid
15:03 - right now all that we're actually
15:05 - including is a single script for app J s
15:08 - we have to manually include every other
15:10 - file so I'm gonna do that now I'll fast
15:13 - forward okay so I now have all of those
15:15 - scripts but once again I need to change
15:17 - the order because some of them depend on
15:19 - one another so app J s I'll just put
15:21 - that at the bottom because it depends on
15:23 - everything else
15:24 - loading first and now are we good to go
15:27 - let's see okay it's working so that's a
15:30 - very simple example but if we have a
15:32 - thousand dependencies or a thousand file
15:34 - and each one has ten different
15:35 - dependencies or something like this from
15:37 - the previous video this react app that
15:40 - has 20 something react components each
15:42 - one has a bunch of dependencies at the
15:44 - top here's a different component a whole
15:46 - bunch of other dependencies so if we're
15:48 - trying to manage this ourself it's a
15:49 - nightmare
15:50 - which one loads first instead we use
15:52 - webpack okay so we're not using webpack
15:55 - right now we're doing it manually and
15:57 - the point is that it sucks
15:58 - so we're now going to install web pack
16:00 - so this is the end of commit - right now
16:03 - if you're following along commit 3
16:05 - includes installing web pack and getting
16:08 - it up and running so that is what I'm
16:10 - gonna do right now ok so to install web
16:12 - pack the first thing we need to do is
16:14 - actually set up our package JSON so I'm
16:18 - gonna do an NPM in it I'll do - why just
16:21 - to make it faster it doesn't ask me all
16:22 - those questions now I have my package
16:24 - JSON and I'm gonna begin by adding to my
16:28 - kit ignore the node modules directory
16:30 - just so that I'm not committing that you
16:34 - don't have to do that of course and then
16:35 - in my package JSON where'd you go I'm
16:39 - going to get rid of this scripts for now
16:41 - we'll be adding our own script in just a
16:43 - moment so we've got name code that's
16:46 - fine I'm gonna set private to be true
16:50 - again doesn't impact anything as far as
16:53 - web pack but it just prevents it from
16:56 - being published on NPM okay now what I'm
16:59 - going to do is install web pack so NPM
17:01 - install - - save dev web pack and if I
17:05 - just did this it would actually prompt
17:06 - me to install a second package which is
17:09 - called web pack - CLI the command-line
17:12 - interface and we want that as well we
17:14 - want both of them so this sometimes
17:17 - takes a little bit so I'll be back once
17:19 - it finishes okay so that wrapped up now
17:21 - we have both of those dependencies in
17:22 - our package JSON next we're going to set
17:25 - up a script inside of this scripts
17:27 - portion the scripts property of our
17:29 - package sell JSON and we'll go with
17:32 - start so when we run NPM start from the
17:35 - terminal it's going to call web pack
17:37 - just like that that's actually all we
17:39 - have to do for now well we'll change
17:42 - this we're going to configure web pack
17:43 - but out of the box this will work and we
17:45 - can actually give it a shot right now
17:47 - well we're gonna run into a few problems
17:49 - so before we configure webpack we will
17:52 - be configuring it and telling it all
17:54 - sorts of different things that how it
17:56 - should work how it should handle certain
17:57 - files where it should put certain files
17:59 - how many it should bundle when it should
18:00 - name them
18:01 - bla bla bla bla bla but by default when
18:04 - you install it and you don't configure
18:05 - anything you don't have a configuration
18:07 - file it has a couple of default values
18:10 - and we can actually see one of them if I
18:12 - just do NPM start right now it's going
18:15 - to call webpack you can see right there
18:17 - where are you web pack but if you look
18:20 - at the error it's telling me it can't
18:22 - resolve dot slash source so it's
18:25 - actually not the most clear error but
18:27 - what it's saying is it can't find index
18:28 - j/s inside of the source directory the
18:31 - default entry point that it's looking
18:33 - for what it's craving is an index
18:36 - jeaious file instead of source and the
18:38 - reason it says dot slash source instead
18:40 - of slash index afterwards is because
18:42 - when you require an entire directory and
18:45 - node the index J s is what is used by
18:48 - default so it's not finding it so it's
18:50 - not happy so let's make an index J s
18:53 - inside of our source folder index is
18:58 - this is where it's going to look let's
19:01 - add an alert hello from webpack well
19:05 - save now let's see what happens when I
19:07 - run NPM start once again by default we
19:11 - didn't configure it it's looking for
19:12 - that file so we made it
19:13 - now it's also saying something about a
19:16 - main j/s it built our code into main
19:19 - jeaious ok and there's also a warning
19:21 - down here
19:22 - we didn't set the mode option so it
19:24 - falls back to production we'll talk
19:27 - about that later in this little mini
19:29 - course so if we look there's a new
19:31 - folder I did not make this folder
19:33 - manually
19:34 - it's called dist and there's a file
19:36 - called mange s and it contains a lot of
19:39 - random stuff that's not random I hate
19:41 - when people misuse the word random even
19:43 - though I just did that it's not at all
19:44 - random it's very important web pack
19:47 - magic at the top and then you can see
19:49 - buried in there is our code now it's
19:51 - actually wrapped in some some braces and
19:54 - parens and curly braces
19:55 - that's because web pack isn't just
19:57 - adding our code as just I don't know
20:00 - regular
20:01 - code to the end of the file it's not
20:02 - just appending it down here it's
20:04 - wrapping it with some webpack magic and
20:06 - in the next video we'll actually take a
20:08 - look at it and understand what it's well
20:10 - try and understand what it's doing but
20:12 - for now it's good enough to see that our
20:14 - code is in here so it has nothing to do
20:16 - with the rest of our app it has nothing
20:18 - to do with these component services with
20:20 - the logic of that little calculator it's
20:23 - not even loading right now so let's fix
20:25 - that let's go into our index.html and at
20:28 - the very end include another script this
20:30 - one instead of app slash a pas it's
20:34 - going to be dot slash dist slash main
20:37 - dot J s this is the file web pack spit
20:40 - out for us this is what I just built
20:42 - it's very simple
20:44 - it took one file in I had a single line
20:46 - and it spit it out with a whole bunch of
20:48 - other lines but that's all the web pack
20:50 - magic I was talking about we'll come
20:51 - back to it later so now if I go back
20:54 - refresh we're getting this hello from
20:56 - web pack that alert is working so seems
21:00 - the reason that if we put other code in
21:02 - here it would work and that's just what
21:04 - we're going to do we're going to put our
21:05 - code from the app in this file that's
21:08 - actually coming up next because it's not
21:09 - as simple as just you know copying and
21:11 - pasting it because we want to keep it
21:13 - across the different files so we're
21:15 - going to use es6 import and export to do
21:17 - that for us
21:18 - and then web pack we'll build this one
21:19 - file but the other thing we're going to
21:21 - do in the next video is configure web
21:23 - pack set up a basic configuration file
21:26 - right now it's looking for index J s and
21:29 - it's spitting out the code in dist main
21:31 - j s we didn't tell it to do that so it's
21:33 - it's rampaging on its own we're gonna
21:36 - try and rein it in and tell it exactly
21:38 - how we want it to work the last thing I
21:40 - should mention I'm going to add the dist
21:43 - directory into my kit ignore because
21:47 - just like node modules both of these
21:48 - directories don't need to be included
21:50 - when I push this up to github they just
21:53 - take up space and you can derive both of
21:55 - them from the code you run npm install
21:57 - you get node modules if you run NPM
22:00 - start web pack will build the dist
22:02 - directory with the main J s so I'm not
22:05 - going to include it with git
22:06 - alright so we're now at the end of the
22:08 - third commit if you're following along
22:10 - the next commit that we'll do in the
22:12 - next video has to do with
22:14 - webpack all about our app code and
22:16 - configuring it so right now our app is
22:18 - existing in a vacuum webpack doesn't
22:21 - know about it we have web pack up and
22:23 - running but it's only bundling this code
22:25 - right here what we want to do instead is
22:27 - call some code in here that is from our
22:31 - application and we have these five
22:32 - different application files inputs are
22:35 - valid parts and foot's and so on and
22:36 - we're going to call some code from this
22:39 - file so when I bundle this file with NPM
22:41 - start it's gonna go grab all the
22:43 - relevant dependencies and put them all
22:45 - into a file which ideally is going to
22:47 - put all of these five files together for
22:50 - us but first we have to declare which
22:52 - files depend on what and the way we do
22:54 - that is by using es6 imports and exports
22:57 - so in each file we're going to indicate
23:00 - what will be exported from this file as
23:03 - well as making sure to import any
23:05 - relevant dependencies for example if we
23:07 - look at this one alert service it
23:10 - depends on inputs are valid so we're
23:13 - going to make that clear we're going to
23:14 - import inputs are valid but we actually
23:17 - can't do that yet because we haven't
23:19 - exported anything from that file so if
23:22 - we look at that here it is just a single
23:24 - function I'm going to export inputs are
23:27 - valid and then inside of my alert
23:29 - service I can now import it imports and
23:33 - I didn't export defaults so I need to
23:36 - use the exact name here instead of curly
23:38 - braces inputs are valid from and then
23:42 - the path to that file from alert service
23:44 - is dot slash utils slash inputs are
23:47 - valid and then while I'm here I might as
23:50 - well export alert service because we're
23:52 - using that instead of our app j s you
23:54 - can see right here I will need to import
23:56 - alert service but let me just begin by
23:59 - exporting the other thing so we've got
24:01 - component service it doesn't have any
24:03 - dependencies in here as far as I can
24:06 - tell we have inputs are valid we're done
24:08 - with that we exported it we have what's
24:11 - the other one parse inputs we will
24:14 - export that and where are we using parts
24:17 - inputs I think it's in app you can see
24:20 - right here
24:20 - we rely on parts inputs and inputs are
24:23 - valid so I'm going to copy this line
24:25 - from Alert service and move this into FJ
24:28 - to the top and we also rely on parse
24:31 - inputs from dot slash utils slash parse
24:36 - inputs okay and then we have alert
24:39 - service and component service that we're
24:41 - using in here but I'm going to hold off
24:43 - on doing that for just a moment because
24:44 - we have to talk about what is going in
24:47 - our index J s right this is our entry
24:49 - point this is where webpack is going to
24:51 - start we need to run some code from here
24:53 - that will then send webpack sniffing
24:55 - down through all the files to figure out
24:57 - the dependencies to figure out what code
24:59 - needs to be bundled so we need to have a
25:01 - little window into our application code
25:04 - and the most logical choice would be to
25:07 - run this function to call this function
25:09 - from inside of index this is the
25:11 - function that starts everything so
25:12 - instead of calling it inside of our app
25:15 - J s I'm going to delete that so I export
25:18 - it out of this file so now inside of my
25:20 - index J s I can import run from and then
25:26 - the path to that file from index J s is
25:28 - dot slash o not in the right spot dot
25:32 - slash app slash app is the name of the
25:34 - file and then I can call run but that's
25:37 - not the end of the story because if we
25:39 - look at what run is using we need to
25:41 - pass in an instance of the alert service
25:43 - and an instance of the component service
25:45 - so I'm going to cut that out and move it
25:48 - over to index J s but that's not enough
25:51 - I can pass in a large service and I can
25:56 - pass in component service but we still
25:57 - have to import them here just like in
26:00 - every other file where we're using
26:01 - something this is a bad example
26:03 - component service another bad example
26:05 - let's look at alert service we need to
26:08 - import inputs are valid because we're
26:10 - using it in this file same thing here if
26:12 - we're trying to instantiate a new alert
26:14 - service we need to make sure make it
26:15 - very clear we need it this is going to
26:18 - tell webpack all right we need to make
26:20 - sure alert service has loaded before we
26:22 - can actually create one and pass it into
26:24 - run so import alert service from dot
26:29 - slash what are we we're inside of index
26:31 - J yes so app slash alert dot service and
26:35 - then I'll duplicate this and this other
26:37 - one is component service from app slash
26:40 - compose
26:41 - servus okay now we should be okay we'll
26:45 - double-check we're importing everything
26:47 - we need so importing run alert service
26:49 - and component service then were calling
26:51 - run with the new instances of alert
26:54 - service a component service app j/s now
26:56 - just has this run function but it also
26:59 - relies on inputs are valid and parse
27:01 - inputs as you can see we're using it in
27:03 - here inputs are valid parse inputs they
27:06 - have no imports they only export a
27:09 - single function and then we have
27:10 - component service it doesn't import
27:12 - anything but it does export and lastly
27:15 - alert service we export it and it relies
27:18 - on inputs or valid okay so let's see
27:21 - what happens now when we actually run
27:23 - NPM start
27:24 - we now have code we have an entry point
27:27 - into our application it's not just an
27:29 - alert and webpack is going to go and I
27:32 - keep saying sniff I don't know why I
27:33 - have that idea in my head but it's gonna
27:35 - burrow down and and start looking in
27:38 - here and look at what app depends on for
27:40 - run and it's gonna realize this depends
27:43 - on inputs are valid and parse inputs and
27:45 - then it's gonna check those do they have
27:47 - any imports do they export something and
27:49 - it's gonna keep going and essentially
27:51 - form a tree for us so let's see what
27:53 - happens when I run NPM start hopefully I
27:56 - don't have any typos okay now let's look
27:59 - at what it built for us in the disk
28:01 - directory mange is now we can see all of
28:05 - our code is down here shortly
28:07 - well address what all this is but all of
28:09 - our code is here it's not just a single
28:10 - alert anymore and we have our script
28:13 - included as you can see this slash mange
28:16 - is the true test will be if we can
28:18 - remove all of these scripts that were
28:20 - there before and just have this one
28:22 - main.js file and have everything work
28:24 - still so let's see I'm going to refresh
28:26 - the page it looks like it's working okay
28:29 - looks good and if we go to our sources
28:32 - tab what we can see instead of our dist
28:35 - there's a mange a s it's minified it's
28:38 - hard to read and understand we will talk
28:40 - about that but it's working all of our
28:43 - code is loading it's being bundled into
28:44 - a single file so it doesn't matter you
28:47 - know which order we're writing these
28:48 - files in we don't have to indicate you
28:51 - know this file must load first and this
28:53 - one must load second we
28:54 - just indicate this file depends on this
28:57 - and this and then webpack takes care of
29:00 - the rest it makes sure that everything
29:01 - is loaded in a valid order okay so I
29:04 - just committed the code again if you're
29:05 - following along everything I just did is
29:07 - in the fourth commit just show you the
29:10 - git log so far right here web pack now
29:13 - bundling all our code that's what we
29:15 - just set up so we still haven't
29:17 - configured web pack to do anything
29:19 - beyond the default configuration that's
29:21 - coming up next but it's at least running
29:23 - all of our code it's bundling it all
29:25 - together making sure everything is in
29:27 - the correct order or making sure that
29:29 - the dependencies are managed nicely and
29:30 - then we include a single script tag and
29:32 - all of our code works so this would
29:34 - apply instead of four files where we
29:37 - have 40 lines of code the same idea
29:39 - applies where we have 100 files with 50
29:41 - or 100 lines each as long as we write
29:44 - explicitly what each file depends on and
29:47 - what it exports ok next we're going to
29:50 - configure web pack we got to set up our
29:51 - own configuration file and we'll dive
29:53 - into what's actually happening in this
29:56 - main J's file I'm now working on the
29:58 - fifth commit in our application if
30:00 - you're following along with git and what
30:02 - we're gonna do in this video is
30:03 - configure web pack or at least set up
30:06 - the config file and replicate what it's
30:08 - already doing but we're gonna add a
30:10 - couple of other settings to change the
30:12 - output so we're gonna begin by just
30:15 - talking about what it's doing for us
30:16 - right now
30:16 - so we've already seen this the default
30:19 - place it's looking for an entry point is
30:21 - index j SN stead of source I didn't tell
30:24 - it to do that the only thing I told it
30:26 - to do is just run web pack when I run
30:29 - NPM start it just says all right web
30:31 - pack do your thing web pack says oh
30:33 - there's no config I'm gonna look for
30:35 - index J s instead of source we didn't
30:37 - have it there a couple videos ago and it
30:39 - gave us an error and the other thing
30:40 - it's doing is it's putting the code in a
30:43 - directory called dist in a main J's file
30:45 - I didn't say it should do that either
30:47 - that's the default behavior so if we
30:50 - want to change that or in our case if we
30:52 - want to add on other things like we're
30:54 - going to talk about plugins and loaders
30:56 - throughout the rest of the course we
30:58 - have to have a config file to do that
31:00 - eventually we'll actually have one
31:02 - config file for development one for
31:03 - production but I'm just going to make a
31:05 - file I can call this whatever I want
31:08 - I'm gonna call it webpack config is and
31:11 - then there's a couple of weird things
31:14 - that we have to get out of the way
31:15 - the syntax for these files looks like
31:18 - this so we're going to export an object
31:21 - and it's going to have a couple of
31:23 - properties we're going to add an entry
31:25 - point which I'll leave as an empty
31:27 - string for now we're going to have an
31:29 - output which will be an object and we'll
31:32 - start with these two
31:33 - so our entry point if we're just
31:35 - recreating what we already have its dot
31:38 - slash source slash index J s so not
31:42 - doing anything new for us but we're
31:44 - explicitly telling it to do this now
31:46 - because it will allow us to in addition
31:48 - add some other functionality down here
31:50 - which we don't have right now now where
31:53 - do we want it to output it well the
31:55 - first thing that we can configure is the
31:57 - file name not fill name file name if we
32:00 - wanted we can keep it as maing is we
32:02 - could go with I don't know hello J s
32:06 - just to show you that it works and then
32:08 - the trickiest part is we have to tell it
32:11 - where to go where to actually spit that
32:13 - code out and to do it we're going to
32:16 - import a module from node that we get we
32:19 - don't have to install this it's just
32:20 - comes with node it's called path Const
32:23 - path equals require path and what we do
32:26 - is write path dot resolve double
32:29 - underscore Deere name directory name and
32:31 - then the name of the folder that we want
32:34 - the code to go in so in my case I'll do
32:36 - dist but to show you you may not want to
32:39 - type this because you're going to make
32:41 - an extra directory but just to prove my
32:42 - point I'll just call this code like that
32:45 - oh and I'm missing my equal sign up here
32:48 - okay no wonder my editor was yelling at
32:51 - me so we have file name hello J s path
32:54 - is path dot resolved so what is this all
32:57 - doing what is path dot resolved well
32:59 - what this is going to do is resolve an
33:01 - absolute path to this code directory so
33:04 - it's going to take whatever the current
33:06 - directory is so if I'm running this on
33:08 - my machine this path will be something
33:10 - like slash Colts or I think I'm actually
33:12 - using a different account called
33:14 - recording user slash document slash
33:17 - wherever all my stuff is slash code
33:20 - but then if someone else is running it
33:22 - on their machine we don't want to put
33:24 - this recording user hard-coded
33:26 - hard-coded in there as the path for the
33:28 - output so we can use passed-out resolve
33:30 - which will take the current directory
33:32 - name dear name which every node script
33:34 - has automatically loaded by default
33:36 - anyway this is just a long way of saying
33:38 - we want to make a file called hello J s
33:41 - inside of a file or a directory called
33:42 - code so the last step if we want to use
33:45 - this configuration is to tell web pack
33:47 - to use it so right here in our package
33:50 - JSON we can pass it pass in - - config
33:53 - and then the name of the file web pack
33:56 - dot config dot J yes okay so I mentioned
34:01 - you may not want to actually run this if
34:03 - you don't have this set up as dist and
34:06 - main j s because it's gonna make you a
34:08 - new folder and a new file and I'm just
34:10 - going to delete mine right after but let
34:12 - me show you that it works fingers
34:14 - crossed that it does work let's see what
34:16 - happens all right we have a new folder
34:18 - and file called hello J yes so that is
34:22 - coming from web pack it's not doing
34:24 - anything with dist anymore we could
34:26 - delete that but instead I'm gonna delete
34:28 - my code directory so let's do that now
34:30 - RM dash RF code ok that file is gone I'm
34:35 - going to change this back to main J s
34:37 - and change this to be dist and that's
34:40 - what most people will do or you could
34:42 - have the folder called V call build
34:43 - instead but there's a lot of options but
34:46 - code is probably not the best example so
34:49 - the next thing we can do just to show
34:51 - you why you would even do this if we're
34:53 - just recreating what we already had why
34:55 - go through this effort well we're gonna
34:56 - spend a lot of time heading in different
34:58 - plugins and loaders and having web pack
35:00 - handle different types of files but for
35:03 - now remember how I said all of this is
35:06 - minified and ugly and hard to understand
35:08 - what's happening is that it's running in
35:10 - production mode by default and I can
35:12 - tell it let's not do production let's
35:15 - set mode to be development and that mode
35:19 - is going to tell it to stop minifying so
35:22 - now if I rerun my code or if I rerun web
35:26 - pack inside of dist we have a mange is
35:28 - and it's no longer all scrunched up into
35:31 - this really hard to read thing of
35:34 - now usually you're not gonna read this
35:35 - anyway that's not the point
35:37 - you read your code in the files where
35:38 - you're writing it but then webpack spits
35:41 - out a bundle but just to show you what
35:42 - it looks like you can see all of it here
35:44 - now one thing that's kind of annoying I
35:47 - don't know if you can see this it's
35:49 - using eval all over the place this is
35:51 - another thing that it's being configured
35:53 - by webpack automatically if we want to
35:57 - change that it's not really a
35:59 - performance issue but just for
36:00 - understanding what's going on we can add
36:02 - another thing called dev tool and if we
36:05 - set dev tool to none and I always forget
36:08 - it's a lowercase T if I rerun it this
36:10 - time again this is not something you
36:12 - need to do but if I look at the code now
36:15 - you can see that all of our code is in
36:17 - here relatively unchanged we don't have
36:20 - that weird eval stuff going on so this
36:23 - allows us to actually understand what
36:25 - this file is doing so the very top of it
36:28 - is some webpack stuff that has to do
36:31 - with defining different functions to
36:34 - make a web pack module there's one
36:36 - called web pack require so if we look at
36:39 - the code that's added in further down
36:41 - for example if we look at alert service
36:44 - let's look at the file alert service has
36:47 - this class as we've seen in an exports
36:49 - that class but it also imports inputs
36:52 - are valid but let's look at what web
36:54 - pack put in the file if we go to our now
36:57 - I guess I closed it our mange is we can
36:59 - see that it says exports provided alert
37:02 - service and it wraps the entire thing in
37:04 - this function to create a web pack
37:07 - module all of this right here it ends
37:10 - right there but then inside of it we
37:13 - don't actually have our import anymore I
37:15 - don't see that line that we had at the
37:17 - top of alert service that said import
37:19 - inputs are valid this is gone and it's
37:22 - been replaced instead with some web pack
37:25 - magic where we have web pack require see
37:28 - right here web pack require source app
37:31 - utils inputs are valid so web pack is
37:34 - now taking control and this web pack
37:37 - require is making sure that our code is
37:39 - all loaded in the correct order it's
37:41 - managing what depends on what so it's
37:44 - basically using this as a hook seeing
37:46 - this here
37:47 - and realizing and what's not realizing
37:50 - something but it has logic that is
37:52 - making sure that it's doing its own
37:53 - webpack version of requiring that module
37:56 - so if we keep scrolling down we can see
37:58 - you know for other things like app J s
38:00 - FJ s depends on parse inputs so it's
38:03 - requiring it with webpack require and
38:05 - inputs are valid webpack require and we
38:09 - can keep going and you'll see that all
38:10 - of our code is in here it's been added
38:13 - in and slightly modified to use webpack
38:15 - require to be wrapped inside of a
38:17 - webpack module and a lot of that or all
38:20 - of that logic is coming from here okay
38:23 - so I'm gonna go and undo or delete the
38:26 - dev tool none we'll come back to that
38:28 - later we'll talk about source Maps but
38:30 - I'm going to leave mode at development
38:31 - for now so we're gonna end here actually
38:34 - we haven't really configured very much
38:36 - we've just seen how to recreate what we
38:38 - were getting already although we did add
38:40 - in mode development but in the next
38:42 - video that's all going to change because
38:43 - we're gonna start talking about loaders
38:45 - how do we handle different types of
38:47 - files that aren't just JavaScript so
38:49 - that's coming up next we're gonna have
38:51 - to edit our config file so I'm going to
38:53 - commit right now if you want to just see
38:55 - this code it is the fifth commit so
38:57 - we've seen how to take different
38:58 - JavaScript files and bundle them
38:59 - together with web pack it's pretty
39:01 - simple it's the default behavior of web
39:04 - pack we just tell it here's where you
39:05 - should start now just go grab all of the
39:08 - code that's it's somehow related to this
39:10 - index file so go grab run and then it's
39:13 - dependencies and so on but that's just
39:15 - JavaScript but we started out a couple
39:17 - of videos ago talking about how web pack
39:19 - can bundle all sorts of files images and
39:22 - other static files things like JSON sass
39:25 - CSS SVG's there's a ton of stuff we can
39:29 - do in this video I'm going to show you
39:30 - how we actually do that we have to
39:33 - install some packages we have to modify
39:35 - our web pack config and we have to talk
39:37 - about loaders so loaders are the magic
39:41 - or the key for getting web pack to
39:43 - handle different types of files
39:44 - besides JavaScript so they are different
39:47 - packages that we install and they
39:49 - dictate how certain files should be pre
39:52 - processed as you import them or as they
39:54 - are loaded so you can transform files
39:57 - and do different things based off of the
40:00 - type of file or exam
40:01 - we can handle a CSS file one way and we
40:03 - can handle a SVG file another way so on
40:07 - the web pack documentation there's a
40:09 - list of some of the most popular loaders
40:11 - you can see under styling where it's
40:14 - that there's quite a few we'll talk
40:16 - about what the difference is it seems
40:18 - like style loader would work for CSS but
40:21 - then there's CSS loader what do they do
40:23 - how are they different we'll also talk
40:25 - about getting sass to work towards the
40:27 - end of this video as well and then this
40:29 - is not just a complete list there is
40:31 - another link that will take you to a
40:33 - different web page that shows you a
40:35 - whole bunch of other loaders that other
40:37 - people have written so my point is that
40:39 - loaders are really really useful it's
40:41 - how we get web pack to handle to
40:43 - pre-process different types of files so
40:45 - we're gonna add some CSS into our
40:47 - application we're gonna start really
40:49 - simple I'm on commit 5 working towards
40:52 - commit 6 if you're following along so
40:55 - I'm gonna make instead of my source
40:56 - directory a new file called main CSS so
41:00 - remember a couple videos ago when I
41:02 - showed you the large create react app
41:04 - that had 30 or 20 different CSS files
41:07 - and they're bundled together we could
41:09 - have web pack do that for us but we're
41:11 - gonna start simple with a single
41:13 - selector we're gonna set the body
41:15 - background color to be purple for now so
41:19 - of course right now we're not going to
41:20 - see anything because we're not including
41:22 - this in our HTML file we could include
41:25 - it as a script manually but the idea is
41:27 - to go through web pack we could have 20
41:29 - something files of CSS web pack should
41:31 - undal them together and then somehow get
41:34 - it to just work the somehow part is what
41:36 - we'll talk about so we're going to need
41:38 - to use two different loaders one is
41:40 - called style loader one is called CSS
41:43 - loader so we can begin if we come down
41:45 - to styling we're going to begin with CSS
41:48 - loader and before we go any further we
41:51 - have to talk about how we actually set
41:52 - up these loaders this is what we add
41:55 - into our web pack config file so under
41:59 - module which is an object we're going to
42:01 - pass in rules which is an array and we
42:05 - can put different rules for different
42:06 - types of files for different modules so
42:09 - we can say in this case if a file ends
42:12 - with dot CSS if the name of the file
42:15 - this is a regular expression if you're
42:16 - not super familiar with regex this
42:18 - dollar sign means that it has to end
42:20 - with dot CSS so it can't have CSS just
42:23 - in the middle of a file name there has
42:25 - to be a period we have to escape it so
42:27 - that's the backslash period CSS end of
42:30 - string or end of name and then if that's
42:32 - the case we will use these two loaders
42:35 - so we're going to begin by installing
42:38 - both of them and I'll tell you what the
42:40 - difference is and why you need both in
42:41 - just a moment but let's do our npm
42:43 - install - - save dev style loader and
42:46 - CSS loader okay while that's going I'm
42:50 - gonna go back into my web pack config
42:53 - and I'm going to update this to now have
42:55 - module and then we have rules which is
42:59 - an array and then we're just going to
43:01 - add our first rule where we add tests
43:04 - and remember this is a regular
43:05 - expression and obviously we can just
43:07 - copy this one for now just like this
43:10 - okay and this says the file ends with
43:13 - CSS if that's the case how do we want to
43:16 - handle it and then we can pass in use
43:19 - which is an array and I'm gonna start
43:21 - with just CSS loader okay and I don't
43:26 - know why I have this extra G down there
43:27 - so we're saying anytime you come across
43:29 - a CSS file use CSS loader which
43:32 - hopefully installed it did now we have
43:35 - to make sure our app knows about our web
43:37 - pack knows about this main dot CSS file
43:39 - so we're going to add it we're going to
43:42 - import into our index J s so import and
43:46 - we need main CSS so dot slash main dot
43:49 - CSS so if I do this now web pack will
43:52 - come across that CSS file and it should
43:55 - match this regular expression and it
43:57 - will use a CSS loader so let's see what
44:00 - that does
44:00 - NPM start okay let's go look at our main
44:06 - J's file we're gonna have to do some
44:08 - scrolling I'm going to search for purple
44:11 - and you can see down at the very bottom
44:13 - we have our main CSS and it's showing up
44:17 - in this JavaScript file so what's
44:19 - happening is that the CSS loader it
44:21 - exists to take CSS and turn it into
44:24 - valid JavaScript code basically turn it
44:27 - into really long strings and make sure
44:28 - it's
44:28 - valid JavaScript you can see our
44:30 - selector here body background purple but
44:33 - it's not being applied right now at all
44:35 - if I open up this page if i refresh
44:37 - right here there's no purple background
44:40 - even though that code is included so
44:42 - that's where style loader comes in so
44:45 - CSS loader takes your CSS and it turns
44:48 - it into JavaScript and then style loader
44:51 - will take that JavaScript which is
44:53 - actually CSS and inject it into the Dom
44:56 - you can see right here style loader adds
44:58 - CSS to the Dom by injecting a style tag
45:02 - okay so to use it it's really simple
45:04 - we already installed it we go to our web
45:06 - pet config the trickiest part is that
45:08 - you have to know that there is an order
45:10 - to this array so we have to use them in
45:14 - the correct order this one is going to
45:15 - translate CSS to JavaScript and then
45:18 - style loader takes that JavaScript and
45:20 - injects it into the Dom so we need to
45:23 - make sure that this happens first we
45:25 - have to translate the JavaScript before
45:26 - we can inject so you might think we
45:28 - would put style loader second they
45:30 - actually load in reverse order so we
45:33 - need to put style loader here and then
45:36 - CSS loader so when it encounters a CSS
45:39 - file it's going to start with CSS loader
45:42 - translate it to JavaScript and then
45:44 - injected via style loader so let's see
45:47 - if it works now I'm going to build NPM
45:49 - start let's go back check our mange is
45:53 - do a search for purple okay it's still
45:56 - here but now if we refresh the page it's
46:00 - now purple so how is that working if we
46:03 - look at our index.html as we've already
46:05 - seen there is no link tag as far as our
46:08 - purple body we only have this bootstrap
46:11 - CDN but there's nothing that has to do
46:13 - with our CSS that we wrote the way that
46:16 - it's actually getting added here is
46:17 - through that style loader it's being
46:19 - injected if we look in the elements tab
46:21 - in the head you can see that there has
46:24 - been some style added we didn't do that
46:26 - web pack did it for us
46:28 - so that is our first little taste of
46:30 - loaders I know it's confusing because
46:32 - we're loading CSS without ever actually
46:35 - connecting it to a link tag in a HTML
46:38 - file
46:38 - it's all happening through JavaScript so
46:41 - if I wrote more code
46:42 - in main dub CSS or if I had a bunch of
46:44 - other CSS files and they were all
46:46 - connected each one would be parsed and
46:49 - turned into JavaScript and then injected
46:52 - into the Dom now later in this course
46:54 - we'll see how we can actually spit out a
46:56 - separate CSS file so if you wanted to
46:58 - have in your your dist folder you wanted
47:01 - to have main dot CSS there are ways to
47:03 - do that and we can minify it we can do
47:05 - different things to the code but for now
47:07 - we've set up our first loader so I'm
47:09 - going to commit right now because I'm
47:11 - actually going to change things to show
47:13 - you how we could set this up to work
47:14 - with cess s CSS files so first I'm going
47:18 - to commit I'll be right back
47:19 - okay so we're now moving on to the next
47:21 - commit what we're going to incorporate
47:23 - sass so if you're not really familiar
47:25 - with sass it allows us to write what is
47:28 - it syntactically awesome style sheets
47:29 - it's the original what it stands for
47:31 - si SS but now most people use as CSS
47:34 - files it doesn't really matter but what
47:37 - we're going to do is write some nice
47:38 - sass that will override the default
47:40 - bootstrap colors like for this button
47:43 - right here we're never making that blue
47:45 - it's coming from bootstrap to override
47:47 - it we need to use sass so the first
47:49 - thing I'm going to do is actually
47:50 - install bootstrap locally so npm
47:54 - install' - - save dev bootstrap so
47:57 - that's just going to get me the copy of
47:59 - bootstrap on my machine and then I'm
48:02 - going to begin by in my index.html
48:04 - removing this entirely so we have no
48:07 - bootstrap right now we're not including
48:09 - it if i refresh we just get our purple
48:11 - color from that main CSS so now what I'm
48:14 - going to do is change my main dot CSS a
48:16 - bit and then delete this and I'm going
48:19 - to rename it to dot s CSS now we could
48:23 - have actually kept CSS and sass and I
48:26 - thought about doing that to show you two
48:27 - separate rules but it would be kind of
48:29 - weird to have CSS and sass at the same
48:32 - time because if you're already working
48:33 - with sass most people would just prefer
48:35 - to write sass because it's a lot it's
48:37 - easier it gives you some nice features
48:39 - that you don't have in regular CSS so if
48:42 - you want to see how the CSS works on its
48:44 - own like we did earlier you can just go
48:46 - back to this commit but I'm about to
48:47 - change things to use sass okay so in
48:50 - here what I'm going to do now is
48:52 - actually import bootstrap which is from
48:55 - this node modules to
48:56 - readjust installed it and the import
48:58 - looks like this at import bootstrap /s
49:01 - CSS slash bootstrap ok so right now
49:05 - we're not overriding anything we're just
49:07 - trying to get bootstrap to work again
49:09 - but using sass this time so if you don't
49:12 - know how sass works it's not valid CSS
49:14 - on its own it has to be compiled or
49:16 - turned into CSS so I can't just do this
49:19 - I can't say ok when you find an S CSS
49:22 - file any file that ends and dot s CSS
49:25 - use style loader and CSS loader because
49:29 - it's not CSS so this is going to cause a
49:31 - problem but what we do is use another
49:33 - loader if we go back to loaders here
49:35 - under style go back a page there is a
49:39 - SAS loader if we use less there's a less
49:42 - loader stylist if you like stylus and so
49:45 - what these will do is take in this case
49:47 - takes s and turn it into regular CSS and
49:50 - then we take that CSS turn it into
49:52 - JavaScript then take that JavaScript and
49:54 - inject it into the Dom so a three step
49:57 - process now notice that they they
49:59 - mentioned it it does rely on another
50:01 - package called node sass so we're just
50:04 - going to install all of them together
50:05 - sass loader and node sass so let's do
50:08 - that now npm install - - save dev sass
50:12 - loader and then it depends on node sass
50:15 - and while that's going I'm going to
50:18 - update my config file to say s CSS I've
50:22 - already done that and we need to make
50:24 - sure that it's now using sass loader
50:26 - remember the order matters this happens
50:29 - first I'm gonna add some comments here
50:31 - actually to make this a little easier to
50:34 - understand so this happens first I'll do
50:36 - one turns s CSS or sass into CSS and
50:41 - then this step two turns CSS into
50:46 - commonjs so it converts it to JavaScript
50:49 - which is what we see in our file here
50:51 - for example here is CSS but it's
50:54 - actually valid JavaScript code then the
50:57 - last step which is step three inject
51:00 - styles into dom
51:02 - okay so those are the three steps and we
51:05 - should be good to go
51:06 - assuming my install worked let's see
51:08 - what happens so I'll save
51:10 - and I need to update one thing forgot
51:12 - we're importing main dot CSS here that
51:15 - doesn't exist anymore now it is a s CSS
51:18 - file a sass file let's see what happens
51:20 - when I run NPM start moment of truth
51:23 - okay we go to our main show yes and we
51:27 - should see a whole bunch of stuff now
51:28 - this is all the bootstrap code that we
51:31 - imported it's turned from sass into CSS
51:34 - from CSS and some JavaScript which is
51:36 - what we see here and then it's injected
51:38 - into the Dom if we refresh hey we're
51:41 - back to our nice bootstrap now we
51:44 - haven't actually overridden anything so
51:46 - we're gonna do that next it's really
51:47 - easy now we have all the sass setup we
51:51 - can write sass wherever we want as long
51:53 - as it's an S CSS file and we're
51:54 - importing it somewhere I now can
51:57 - override the primary color so this is a
52:00 - primary button so the way we do that is
52:02 - by writing not capitalized dollar sign
52:05 - primary and then giving it a color like
52:07 - teal for now so if we'll save and we
52:11 - rebuild over here go back refresh the
52:15 - page you can see that the default
52:17 - primary color is no longer there we're
52:20 - getting our own color and likewise this
52:23 - error color right here is I believe
52:25 - danger is the name of that color so if I
52:28 - want to change it I would say at danger
52:31 - what am i doing at dollar sign danger is
52:34 - now going to be let's just make it
52:36 - purple just to see what happens I have
52:38 - to build again soon we'll get a dev
52:40 - server setup so I don't have to keep
52:42 - doing this
52:43 - anytime I change something webpack will
52:45 - know about it and it will reap undal for
52:47 - me and there we go we're getting purple
52:49 - now so we are successfully loading sass
52:52 - through web pack it's such a it's sort
52:55 - of a convoluted crazy idea but it's
52:57 - really nice we only have one file but we
53:00 - are including this bootstrap file too
53:01 - but imagine we had 20 different files
53:03 - they all get combined together they
53:05 - start a sass they turn into just CSS
53:07 - then CSS the JavaScript then JavaScript
53:10 - inject it into the DOM and remember
53:12 - there is no CSS file in our sources it's
53:15 - all just index.html and mange is mange s
53:20 - is adding the CSS in into the head
53:23 - right here and you can see all of those
53:25 - styles is really long because of
53:26 - bootstrap so we will see how to get it
53:29 - to spit out a standalone CSS file but
53:31 - we're not there yet
53:32 - so I'm going to commit again we're done
53:34 - with this little section we saw our
53:36 - first couple of loaders these allow us
53:38 - to have webpack pre process certain
53:41 - files in different ways we write a
53:42 - regular expression we install the
53:44 - loaders we say which order they should
53:46 - run in and we just let it do its thing
53:49 - that's what loaders are there for
53:50 - alright moving on I'm going to commit
53:53 - I'll see you in the next video so next
53:55 - we're going to talk about a really
53:56 - important feature of web pack which is
53:58 - called cache busting it's how we can
54:00 - prevent certain assets like our main
54:02 - bundle J s or our CSS bundle once we
54:05 - once we actually make a separate CSS
54:06 - bundle whatever those files are how we
54:09 - can prevent browsers from cashing them
54:11 - when we don't want them to be cached so
54:13 - I'm going to begin with a really quick
54:14 - overview of caching so I'm on just a web
54:17 - pack repo on github if I go to my
54:20 - network tab and I do a hard refresh hard
54:23 - refresh command shift are on a Mac
54:26 - you'll see I'm just looking at CSS only
54:29 - there are two CSS files and notice their
54:32 - names they are quite long and ridiculous
54:35 - in addition to that we have over here
54:38 - let's see under size you can see the
54:41 - size of the file now I'm going to do
54:43 - another refresh but a regular refresh
54:46 - not a hard one so these assets some of
54:48 - them might be cached so I'm gonna
54:50 - refresh without shift so no shift key
54:53 - notice that this time it says from disk
54:56 - cache so what this means is that it's
54:59 - using the copy that it already had my
55:01 - browser remembered this file it
55:04 - remembered this file name and it decided
55:06 - okay we already have that we're not
55:07 - going to go get the new copy because
55:09 - nothing has changed or we assume nothing
55:11 - has changed it's the same name and
55:13 - that's pretty simplified explanation but
55:15 - this can cause problems if right now
55:17 - we're using what mange is if every time
55:21 - we write code and we bundle it it's
55:23 - always called mange is then it could be
55:26 - cached and someone's browser and we
55:29 - could completely overhaul the
55:30 - application code and we build it again
55:33 - we push it up to our server it's running
55:35 - and that person
55:37 - request our website there browser might
55:39 - say oh I already have mange a s and just
55:41 - use that version so what we can do
55:44 - instead is add in this crazy jumble of
55:47 - numbers and letters which is called a
55:49 - content hash into the file name and
55:52 - what's special about that content hash
55:54 - is that it is actually determined it's
55:56 - based off of the content in the file
55:58 - itself so if nothing changes in that
56:01 - file we will end up let's just do a
56:03 - simplified version ABC so right now my
56:06 - code and mange s all of this code we run
56:09 - it through this special hashing function
56:11 - which is I believe it uses one called an
56:13 - md5 a relatively or very famous hashing
56:17 - function and we get ABC so next time we
56:20 - build nothing has changed we still get
56:22 - ABC but then I change one character or I
56:26 - delete everything and rewrite all my
56:28 - code I get a completely different hash
56:30 - so that time it might be this instead
56:33 - now they're much longer they're much
56:36 - more complicated but that's the idea so
56:38 - every time we change our code we get a
56:41 - new file name but if we don't change the
56:43 - code the file name stays the same so
56:46 - that caching still works but we're
56:48 - busting cache busting when we change
56:51 - something in the code we get a new file
56:53 - name so right now it's main dot j s
56:55 - every time that's a problem all we have
56:57 - to do is add in content hash like this
57:01 - inside of brackets and usually you want
57:04 - to do main dot content hash or vendor
57:07 - dot you don't want to just do content
57:09 - hash J yes and you'll see that's what
57:12 - they do on github if we go back to
57:14 - network refresh one more time
57:17 - github - blah blah blah dot CSS
57:20 - frameworks - so they use a - but it's
57:23 - the same idea so we're going to
57:25 - implement that now with content hash and
57:27 - if I build right now it's going to take
57:30 - the contents of this file after it
57:32 - builds it and before it creates the new
57:35 - file but take all this code it hashes it
57:37 - using like I said I think it's md5 and
57:39 - it gets this special hash that only
57:42 - corresponds to the content in here and
57:44 - then it sticks that in the file name so
57:47 - let's see if it works
57:49 - NPM start
57:50 - we end up with content hash what file
57:53 - doesn't make for us take a look
57:55 - main dot 1 e da 8f
57:58 - blah-blah-blah-blah-blah and if I run it
58:01 - again without changing anything it
58:03 - should be the same still and it is one
58:06 - ETA so remember that one EDA now I'm
58:10 - going to change something in my code I'm
58:12 - going to add a console dot log to my
58:14 - index J s console dot log hi so now the
58:19 - code when we build main j s will be
58:22 - different and that means that the
58:24 - content hash will be different which
58:25 - means the name is different so now we
58:27 - have fa20 b15 blah blah blah so we are
58:32 - getting these new file names anytime we
58:34 - change the code but if we're not
58:36 - changing it it stays the same so this is
58:39 - really useful because if you have like
58:41 - we felt later on we'll have a vendor J S
58:43 - which will contain libraries things that
58:46 - aren't going to change as much those
58:48 - won't need to change they stay the same
58:50 - so we can just catch them or the browser
58:52 - can cache them but our application code
58:54 - might change more often so then we get a
58:56 - new file name each time which then when
58:59 - it's requested from the browser it won't
59:01 - be cached or it won't use a cached
59:03 - version because it's a new file name it
59:05 - hasn't seen before so that's all great
59:07 - but we have a problem how are we going
59:10 - to link how do we include that script or
59:12 - index.html right now is including mange
59:15 - is how are we going to dynamically
59:18 - predict or what are we going to do we
59:20 - can't just assume that it's going to be
59:21 - this every time because it changes so
59:24 - the answer is we don't write the script
59:26 - ourselves we don't include this script
59:28 - anymore we're gonna have web pack build
59:31 - our HTML file for us and stick it in
59:33 - this folder so it's going to
59:35 - automatically come up with the correct
59:38 - script name and put it at the bottom but
59:40 - to do that we have to learn about
59:42 - plugins so let's do it
59:44 - alright so plugins according to the docs
59:46 - give us the option to customize the web
59:49 - pack build process in a variety of ways
59:51 - very useful definition here so web pack
59:54 - comes with a bunch of these different
59:56 - plugins that they talk about on their
59:58 - web page but there's also a whole bunch
60:00 - of third-party plugins that you can find
60:02 - here awesome web pack contains I don't
60:05 - know a couple hundred of them so they do
60:08 - all sorts of things we'll see a few more
60:09 - throughout the course we'll find one
60:11 - we'll use one that it's going to help us
60:13 - minify our CSS and export CSS files
60:16 - we'll see one right now which is the
60:18 - HTML where are you HTML web pack plug-in
60:22 - which will help create our HTML file for
60:24 - us and we'll also see one that helps us
60:27 - clean up our dist folder because spoiler
60:30 - you might you might notice right now
60:31 - it's getting clogged every time we run
60:33 - start NPM start we're getting some times
60:36 - we're getting new files if we changed
60:38 - our code we get a whole new file and if
60:41 - we use this clean web pack plug-in it
60:43 - will help clean it up so plugins give us
60:45 - additional functionality so let's talk
60:47 - about the HTML web pack plug-in it
60:50 - simplifies creation of HTML files this
60:52 - is especially useful for bundles that
60:54 - include a hash in the file name which
60:56 - changes every compilation that sounds
60:58 - like exactly what we need you can either
61:01 - let the plug-in generate a file for you
61:03 - or supply your own template so we'll do
61:05 - both we're going to begin by just having
61:07 - it make a file for us the first thing we
61:09 - have to do is install it NPM install - -
61:12 - save dev HTML web pack plugin so I'm
61:15 - just going to copy that one move it over
61:17 - here and paste it while that's going
61:20 - let's look at how we use it so we
61:23 - require it in our config file and then
61:26 - there's something new we haven't seen
61:27 - yet plugins this is something it's a
61:30 - property we add to the object that we're
61:31 - exporting just like entry or output and
61:34 - plugins we pass in an array that
61:37 - contains as many plugins as we want so
61:39 - let's try it out so let's make sure we
61:41 - are requiring it in our web pack config
61:44 - at the top and then we can add in
61:47 - plugins which is an array
61:49 - don't forget your comma I always do that
61:51 - and then I get an error when I try and
61:52 - build and then we'll just pass in new
61:55 - HTML web pack plugin so we're making a
61:58 - new instance of it and for going safe so
62:02 - we haven't configured anything let's see
62:04 - what happens
62:04 - I haven't told it what name I want the
62:06 - file to be I haven't told it what should
62:08 - go in that file
62:09 - all I've said is use this HTML web pack
62:12 - plug-in which is going to make me some
62:14 - file let's see
62:16 - let's run npm start hopefully no errors
62:20 - okay
62:21 - let's go back and look at our distal dur
62:24 - something changed index.html it's very
62:28 - simple very sparse it has a default
62:31 - title I didn't tell it to call it web
62:32 - pack app I didn't say it should be
62:34 - indexed either we can change that if you
62:36 - wanted to but I like index it's logical
62:39 - and most importantly our script is
62:42 - included automatically at the bottom so
62:44 - whatever this content hash is every time
62:46 - if I change it if I change those files
62:49 - we'll end up with a new script now we
62:52 - have another problem which is our
62:53 - content is not in here so even though my
62:55 - JavaScript is included if I open this
62:58 - file right now which for the record is
63:00 - not the same file I've been opening I've
63:03 - been using this index where I hard-coded
63:06 - in main j/s but that's changed now that
63:09 - doesn't exist or mange is is not being
63:11 - exported anymore so instead I need to
63:14 - use this index.html I need to open this
63:16 - file from my dist directory so I'll just
63:19 - do it from the terminal I'll do open
63:21 - dist slash index and we have a problem
63:27 - there's no content on the page our
63:29 - script is here as we saw or as I talked
63:31 - about so that part is working but what
63:34 - about our HTML content this is where we
63:37 - need to tell it a template to use so
63:39 - this line somewhere where is that you
63:42 - can either let the plug-in generate an
63:44 - HTML file for you supply your own
63:45 - template or use your own loader so we're
63:49 - going to do the most basic template
63:50 - possible we're not going to use a
63:52 - library we're not going to do like
63:53 - handlebars or any other templating
63:55 - language we're just going to do a plain
63:57 - HTML file so I'm going to come over
64:00 - wrong way here we go I'm going to make a
64:03 - new file inside of my source directory
64:06 - and I'll call this template dot HTML and
64:10 - I'm going to go to my original index
64:12 - copy the whole thing over into template
64:16 - HTML but I'm going to delete things for
64:19 - example we don't need this bootstrap
64:21 - anymore
64:21 - web pack is going to take care of that I
64:23 - don't need this script tag web pack
64:26 - takes care of that I'm going to leave
64:28 - this SVG file we're going to
64:30 - back to it in a second or a separate
64:31 - video to address how we how does web
64:34 - pack work with images but for now this
64:36 - is our template so we're going to tell
64:39 - this HTML plug-in we use this code from
64:42 - this file put the script tag at the
64:44 - bottom and make sure it's the correct
64:46 - script tag whatever the content hash is
64:48 - it needs to match so now all we have to
64:50 - do is in our web pack config here where
64:54 - we're using this plug-in we need to tell
64:55 - it to use that template and we just pass
64:58 - in an object and a property so template
65:01 - and our template file is called template
65:05 - is no dot HTML whoops and that is coming
65:09 - from let's make sure we have this
65:10 - correct so this is from the web pack
65:12 - config file we're inside of source so we
65:15 - need to do dot slash source slash
65:18 - template dot HTML okay so it's going to
65:21 - use this template template dot HTML take
65:24 - this code put it into a new file which
65:26 - is calling index dot HTML by default and
65:28 - it's going to make sure to include our
65:30 - script tag at the bottom using the
65:32 - correct name the correct file name
65:34 - depending on which bundle we just built
65:36 - let's see if it works
65:38 - NPM start fingers crossed
65:41 - let's look at index ok so here's all of
65:45 - our code all of the HTML we needed and
65:48 - down at the very bottom we have a script
65:50 - tag and it's using our bundle so every
65:53 - time we build now if we change our code
65:54 - we rebuild we get a new bundle we get a
65:57 - new index file with a new script tag
65:59 - let's try running it make sure we're
66:01 - using the dist slash index dot HTML the
66:05 - image is not working we'll come back to
66:06 - that but our JavaScript is now loading
66:09 - our HTML is here it looks good okay so
66:13 - we saw a lot in this section we talked
66:15 - about plugins in general this is not the
66:17 - last plug-in we'll see but we actually
66:19 - started by talking about content hashing
66:21 - and cache busting how do we set up web
66:23 - pack so that it uses that content hash
66:26 - it's really simple as we saw in the file
66:28 - name when it bundles and then that
66:30 - enables us to bust caches if we change
66:33 - something we get a new file name if we
66:34 - don't change it it's the same file name
66:36 - every time so the caching the cached
66:38 - version is just fine if we don't change
66:40 - it in addition this caused a problem
66:42 - because
66:43 - we need to dynamically link to this file
66:46 - name it's changing so that's what this
66:47 - plug-in does we give it a template and
66:50 - it uses that it builds a file for us and
66:52 - this is the file we are now using so
66:54 - every time that we run NPM start it
66:57 - makes this new file and we open this
67:00 - file instead of this one we can actually
67:02 - delete this one entirely I'm going to do
67:04 - that right now
67:05 - okay so I'm going to commit so if you
67:08 - want to follow along committing now and
67:09 - I'll see you back in the next video so
67:12 - far we have one web pack config that
67:14 - we're using every time we build and that
67:17 - works great but often we want to have
67:19 - some different functionality for
67:20 - development versus production but at the
67:23 - same time there's a lot of stuff that is
67:25 - in common between the two so in this
67:27 - video we're going to actually have three
67:29 - config files one that is in common
67:31 - that's shared between Devon production
67:33 - and then one for dev and one for
67:35 - production so we can add things in like
67:37 - a development server a live updating
67:40 - server that we can just run instead of
67:42 - building the whole disk directory and
67:44 - having to manually open it we can use a
67:46 - web pack dev server on the other end of
67:48 - things with production we might want to
67:50 - minify we might want to export our CSS
67:52 - into a separate file so we're gonna
67:54 - basically set up the the framework for
67:56 - us to do that in this video just to show
67:58 - you what we're aiming for
68:00 - this is that react app I showed you very
68:03 - early on if I run NPM start it's not
68:06 - actually building a new directory it's
68:08 - not making a dist or a build directory
68:10 - instead it's opening up a live server
68:13 - you can see localhost 3000 my app is
68:16 - working and if I change something it
68:18 - updates automatically now if we go back
68:19 - and I instead run npm run build this is
68:24 - going to use production mode for web
68:26 - pack and you'll see that we don't get a
68:29 - live server it takes longer things are
68:31 - being optimized and minimized and we end
68:34 - up with an exported directory it's not
68:37 - exported but we end up with a new
68:38 - directory called build once it finishes
68:40 - so if I do an LS you can see now there
68:43 - is a directory called build CD build and
68:46 - there's a couple of files no live server
68:49 - but things are compressed there minified
68:52 - and they're ready for production so
68:54 - we're going to go for the same sort of
68:56 - idea we're going to have
68:57 - npm start start up a dev server in our
69:00 - little mini app and then npm run build
69:03 - will actually run it in production and
69:05 - create the dist directory but first we
69:07 - are going to make a couple of config
69:09 - files so we have web web pack config i'm
69:12 - going to make another file called web
69:15 - pack dev is and one more which will be
69:19 - web pack let's do prod PR OD is and i'm
69:26 - gonna begin by just copying what we
69:28 - already have into both of them and then
69:31 - we can selectively delete things so for
69:33 - example in production we want mode to be
69:36 - production and entry point we can get
69:39 - rid of because we'll keep that in the
69:41 - common one which i'll rename this to be
69:44 - common web pack commonjs
69:47 - these names are up to us we're going to
69:50 - pass them in when we actually run web
69:52 - pack from our package.json script so web
69:55 - pack common I'm going to keep entry
69:57 - point I'm gonna get rid of mode I'm
69:59 - gonna get rid of output because in my
70:02 - dev version I don't want the content
70:04 - hash in my production version I do it's
70:06 - easier in dev to just not deal with the
70:08 - hashing just have you know main CAS it's
70:12 - not a big deal but we can at least set
70:14 - up some differences so you can see it's
70:16 - working so we can get rid of entry but
70:18 - we'll do mange is over here we'll do
70:22 - main content hash is in production what
70:26 - else we can get rid of the plugins for
70:28 - now from dev and from prod those will be
70:32 - the same but we'll keep it in common we
70:36 - can keep the s CSS loading eventually
70:38 - will be minifying our sass and our CSS
70:41 - in production and not in development so
70:43 - this will leave the common file but for
70:45 - now it can stay here so this is the
70:47 - stuff that we have in common between the
70:49 - two and then in dev I'm going to get rid
70:51 - of all of these rules here and just keep
70:53 - it like this mode development production
70:56 - same thing so we'll be updating this as
70:59 - we go but right now this isn't going to
71:02 - work well it could work but we're not
71:04 - going to merge them with common so if I
71:07 - want dev to also include the
71:09 - functionality from common
71:10 - production to include the same
71:12 - functionality from common I'm going to
71:14 - use a package called webpack merge so
71:17 - npm install' - - save dev web pack -
71:21 - merge and this allows us to very easily
71:24 - merge web pack config together so that
71:28 - finished and I'm going to start by
71:30 - exporting actually I don't need to do
71:32 - that it's already module about exports
71:34 - from web pack commonjs
71:36 - now I'm going to require it here so
71:39 - we'll call it common equals require and
71:42 - then the path is dot slash web pack
71:44 - common so that gives us the contents of
71:48 - this file of common and then I'm going
71:50 - to import merge Const Marg equals
71:55 - require web pack merge we just installed
71:58 - that web pack merge right there now what
72:01 - I can do is set module dot exports to be
72:04 - the function call of merge or I pass
72:07 - common in and then this object you need
72:11 - to make sure I add my closing / end on
72:13 - there and what this will do is say merge
72:15 - whatever is in common which is this with
72:19 - what we have here in this object okay
72:22 - and then I'm gonna just duplicate this
72:24 - same thing
72:25 - we don't need HTML web pack plug-in in
72:27 - this file we're not using it we're using
72:29 - it in the common file so I'm going to go
72:31 - to production delete that and then I'm
72:34 - just going to copy the same line here
72:36 - right here and then add my paren at the
72:39 - end alright so all we're doing is
72:42 - changing mode and the output dev vs.
72:45 - production looks good save both files
72:48 - now we need to tell web pack which ones
72:50 - to use
72:51 - so in package JSON when we run NPM start
72:54 - we're gonna make it config web pack dot
72:57 - dev a s and then when we run build we'll
73:02 - set it to be web pack dash dash config
73:06 - web pack dot prod is and keep our
73:11 - fingers crossed let's see if it works
73:13 - so let's start with hmm let's do dev
73:16 - first so NPM start NPM start moment of
73:21 - truth it looks like it worked let's look
73:23 - at our index
73:24 - the new index.html you can see that the
73:28 - script is just mange a s it's not main
73:31 - dot blah blah blah ABC f-f-f-f-f-f-f
73:34 - something like that je s and if we look
73:37 - at the script its mange is it is not
73:40 - minified because we set mode to
73:43 - development now instead if i run npm run
73:47 - build so not just npm built with npm run
73:50 - build that's going to call web pack with
73:53 - our production file with this config
73:56 - file and let's look at our index you can
73:59 - see if we now have the content hash and
74:01 - if we look at the right file one seven
74:03 - nine d right there it is minified ok so
74:08 - this is just the beginning of setting up
74:10 - development versus production and we
74:12 - have it set up but there's a lot more
74:14 - that we can do to differentiate this two
74:16 - so the first thing I'm going to do is
74:17 - set up a dev server a web pack dev
74:20 - server so that when I'm in development I
74:22 - don't have to keep building like this I
74:24 - don't have to do n p.m. start every time
74:25 - I want to see something and it's really
74:28 - easy to do NPM install - - save dev web
74:31 - pack dev server and this is actually not
74:36 - something we really have to add into our
74:37 - config file instead we're gonna go back
74:41 - to our package JSON which is where are
74:44 - you oh my guess I closed it down or I'm
74:47 - blinded okay here it is instead of web
74:50 - pack we're going to run web pack dev
74:52 - server and then at the end we can
74:55 - optionally pass in - - open it doesn't
74:58 - have to be at the end but somewhere a
75:00 - flag and what this will do is open up
75:02 - the window in our browser for us so
75:04 - let's see if it works when I run NPM
75:06 - start we should now end up with the dev
75:10 - server open and opening it
75:11 - there we go it opened up automatically
75:13 - for me I'm getting all my code here and
75:16 - if I go and make a change let's say I
75:17 - changed the color in my sass file
75:20 - instead of teal let's go to magenta and
75:24 - save you'll see it automatically
75:27 - rebuilds and my browser refreshes it
75:30 - updates and you can see that happened
75:32 - over here well it's gonna be kind of
75:34 - annoying to point out but you can see it
75:36 - rebuilt again and the certain things
75:38 - change to detect them essentially you'll
75:40 - see a bunch of scrolling text if you
75:42 - change something the other thing I want
75:44 - to make clear about this if I actually
75:46 - remove the dist folder so RM dash RF
75:49 - dist
75:50 - you don't have to do this but I'm going
75:52 - to delete it now if I run NPM start
75:55 - which is using the dev server here we go
75:59 - we see our code let's tweak it back
76:01 - again one more time let's go back to
76:03 - teal save it updates automatically we'll
76:08 - close out with ctrl C if I do LS if I do
76:12 - LS if I use LS there is no dist folder
76:15 - so it actually does everything in memory
76:18 - it doesn't actually make a folder for
76:20 - you when you run it with web pack dev
76:22 - server which is nice we don't have to
76:24 - keep you know deleting these files or
76:26 - making these files and overwriting them
76:27 - it's all in memory but then if I want to
76:30 - spit it out npm run build this will give
76:33 - me my production version where i can now
76:36 - you know open it up manually or start
76:38 - i'm gonna put it on a server somewhere
76:40 - and you know use this as an application
76:42 - so now i would need to open dist slash
76:46 - index and it's working well aside from
76:50 - the image which we haven't addressed yet
76:51 - but our javascript is here yeah
76:53 - everything looks good alright so that's
76:55 - the end of this video I'm going to
76:57 - commit right now if you're following
76:58 - along I'm adding a bunch of detailed
77:00 - notes to the commits by the way so if
77:02 - you ever get lost you're not sure which
77:04 - one I'm using
77:04 - there's the main commit message and then
77:06 - some bullet points below that explains
77:08 - you know what we did all right so I'm
77:09 - going to commit now and then I'll be
77:11 - back with another video in this video
77:13 - we're going to talk about two loaders
77:15 - for web pack file loader and HTML loader
77:17 - as well as a nice plugin called clean
77:20 - web pack plugin so we're going to start
77:22 - with the loaders right now we have this
77:24 - image that isn't really working well
77:26 - it's not working at all and actually the
77:29 - reason it's not working right now is
77:30 - because my path is incorrect originally
77:33 - we had our index.html file right here on
77:36 - this level and the file it the image is
77:39 - assets slash web pack SVG so the path
77:42 - was just dot slash assets slash web pack
77:45 - SVG and I copied this whole thing into
77:48 - my template but now my template is
77:50 - inside of the source directory
77:52 - so what I could do is just change it to
77:55 - be dot dot slash assets as you can see
77:58 - this should work if I rebuild one more
78:02 - time my index dot HTML in the dist
78:05 - folder is now linking to dot dot slash
78:07 - assets so this does technically work but
78:11 - this is really not a good way of doing
78:13 - things for a couple reasons one is that
78:16 - we are hard coding this path in and it
78:18 - relies on assets being in a sort of a
78:21 - sibling folder being in the same folder
78:23 - as dist the dist folder is supposed to
78:26 - just contained everything we need it's
78:27 - supposed to be you know the the build of
78:30 - our app it should have everything we
78:31 - need contained in this folder so the
78:34 - fact that our assets is on its own and
78:36 - we just happen to link to it correctly
78:38 - is not ideal so what we're going to do
78:40 - is set it up so that my assets are
78:42 - actually copied into this folder and
78:44 - we'll work on hashing them for cache
78:48 - busting so they'll have new names sort
78:50 - of like our bundles down here and the
78:52 - links are going to be dynamic the source
78:54 - and our image will be dynamic so there's
78:57 - a couple things we need to do the first
78:58 - thing I'm going to do is move my assets
79:00 - into source so source will have an
79:02 - assets directory will reference it in
79:05 - here webpack will then take those assets
79:07 - copy them over to dist into a new folder
79:09 - and then I'll link to them and it will
79:11 - be sort of magic ok so I just moved the
79:14 - assets folder and then the path now
79:16 - needs to change in my template so my
79:19 - template is in the same folder so it's
79:22 - dot slash assets slash web pack SVG ok
79:27 - so that works but then we're going to
79:29 - have the problem when I run npm run
79:31 - build and I open index it's looking for
79:34 - dot slash assets but there is no assets
79:37 - folder in dist
79:38 - so we're back to our same error or issue
79:40 - before so we're gonna do two things to
79:43 - loaders to help us and the first one is
79:45 - called HTML loader and I have the docs
79:48 - open for it here on github what it will
79:50 - do is replace well any time it
79:52 - encounters a source for an image it will
79:55 - require that image it will tell webpack
79:58 - hey here's a file that we're getting we
79:59 - need to load I need you to you know
80:01 - figure out what to do with it and then
80:03 - we'll have to tell web pack how to
80:04 - handle those files like
80:06 - had to do with a CSS file or an S CSS
80:09 - file but instead we'll tell it how to
80:11 - handle JPEGs and P and G's but we're
80:13 - going to start with the HTML loader so
80:15 - it's pretty straightforward npm install
80:17 - - - save dev HTML loader and while
80:23 - that's going in our web pack common
80:25 - because this is common across all of it
80:27 - we're going to add another rule or the
80:30 - test will be for dot HTML at the end of
80:33 - a file name and then we're going to use
80:37 - HTML loader just like that we don't
80:41 - really have to configure very much this
80:43 - is fine on its own so what happens is
80:45 - that we're using this template HTML it's
80:48 - being required essentially web pack is
80:51 - going to encounter this and because we
80:53 - have this new loader we just added in
80:55 - that says hey if it ends with HTML let
80:57 - me take charge of it use HTML loader so
81:00 - then that's going to come across this
81:02 - source and it's going to require this
81:04 - image in JavaScript and then web pack is
81:07 - going to freak out because it doesn't
81:08 - know what to do so I'm going to show you
81:10 - that right now if I do npm run build
81:12 - we're gonna get an error here we go so
81:17 - what happens is it comes across this SVG
81:20 - right here because it was imported and
81:22 - it says I don't know what to do module
81:24 - parse failed unexpected token you may
81:26 - need an appropriate loader to handle
81:28 - this file type and indeed we do so we're
81:31 - requiring any images in our template now
81:34 - they are being required imported into
81:36 - JavaScript but now web pack doesn't know
81:38 - how to handle them so this is where file
81:41 - loader comes in so this will help us
81:43 - actually load those SVG s or PNG s or
81:46 - JPEGs so we're going to begin by
81:47 - installing it so NPM install - - save
81:51 - dev file loader and while that's going
81:55 - we can add a new rule and this one the
81:58 - test is going to be a bit different I'm
82:00 - going to copy this but instead of dot
82:02 - HTML and instead of just hard coding dot
82:05 - SVG I'm going to give it a couple of
82:07 - options so SVG or PNG or let's see JPEG
82:12 - or gif for now or jiff however you
82:16 - pronounce it so in a regular expression
82:17 - this is or so any of
82:20 - we'll match as long as there's a period
82:22 - and then one of these choices and then a
82:25 - dollar sign which signifies the end of
82:27 - the line so it's dot SVG and nothing
82:29 - else dot PNG and nothing else and then
82:32 - instead of just doing use and then
82:35 - passing in file loader I'm going to
82:37 - actually use a different syntax here
82:39 - where use is an object and we tell it
82:43 - the name of the loader file loader and
82:46 - then we pass in some options and the
82:50 - reason I'm doing these options is that I
82:52 - can specify things like the name of each
82:54 - file will begin with something simple
82:57 - name dot txt
83:00 - so remember HTML loader is importing
83:03 - this asset and JavaScript web pack
83:06 - doesn't know what to do with it but now
83:08 - we have this loader and we're telling it
83:10 - you should make a copy of this move it
83:12 - over into the dist folder with this name
83:15 - so whatever the file name is dot the
83:17 - extension but I'm also going to add in
83:19 - the hash just to show you that we can do
83:22 - that and it's not as far as I know it's
83:24 - not content hash like it is up here or
83:28 - is that in production it's hash maybe
83:30 - both will work but this is what I've
83:32 - seen in the Docs and then I'm going to
83:34 - give it a output path and this is where
83:37 - our assets will go so I could call it
83:40 - images just to show you that we can do
83:42 - something different and now instead of
83:44 - our disk falter that close node modules
83:47 - down when we run this web pack is going
83:50 - to encounter this image because the HTML
83:52 - loader encounters it inside of our
83:55 - template because we used a source it
83:57 - imports it and this loader is triggered
84:00 - right here where we have SVG that's
84:03 - matching so then it copies it over into
84:06 - a new folder called images in our dist
84:08 - and the name is going to be web pack dot
84:12 - SVG with a hash in the middle okay let's
84:16 - see if it works so we're gonna run npm
84:19 - run build and it looks good so far
84:26 - instead of dist we have a new images
84:28 - folder notice the file name it's really
84:31 - long web pack dot content
84:33 - a SVG and the best part if everything
84:37 - works our index.html now has image with
84:41 - the source set to that it's no longer
84:44 - set to what it was before assets slash
84:46 - whatever SVG it is dynamically linking
84:49 - to the correct image so now if I added
84:52 - another image into the assets folder
84:53 - whatever I added in there if it was SVG
84:56 - or PNG or JPEG and then I used it in my
84:59 - HTML template a used image source equals
85:02 - something it would be required it would
85:04 - be loaded copied over with a new name
85:06 - there's other things we can do as well
85:08 - like setting a compression under images
85:11 - but I'm going to keep it simple so we
85:13 - are now loading the files correctly and
85:15 - if we go refresh the page we see the
85:17 - image and if we use our live server
85:21 - it also should work just fine and it
85:24 - does ok so now moving on to the plug-in
85:27 - I mentioned the clean web pack plug-in
85:29 - you might not notice this yet but if I
85:32 - go and make some changes to some of my
85:34 - code let's say I go back to index J s
85:37 - and I add another console dot log it
85:41 - doesn't matter what it is console belt
85:42 - lock J I meant to type hai but I
85:44 - mistyped if I build again NPM run build
85:50 - what happens is that we end up with
85:53 - another bundle and every time we build
85:57 - if the code changes we get a new j s
86:00 - file and we only use one of them our
86:03 - index only links to one of them each
86:05 - time so we'll quickly install a plug-in
86:07 - called clean web pack plugin which will
86:09 - delete the dist directory every time we
86:12 - build and then we'll have a clean slate
86:14 - to add our code into or for web pack to
86:16 - do it so to install the plug-in it's npm
86:19 - install - - save clean web pack or clean
86:23 - - web pack - plugin and while that's
86:26 - going let's go back to our web pack
86:29 - common although we actually only need to
86:31 - use this in production when we're using
86:34 - the dev server it doesn't matter because
86:35 - those files are in memory when we stop
86:37 - the server they go away in production
86:40 - it's actually exporting it's building
86:43 - the dist folder and making those files
86:45 - so I'm going to import
86:47 - clean web pack plug-in equals require
86:53 - and then it's just clean web pack plugin
86:59 - okay now I can pass in plugins here like
87:03 - we have over in commonjs where we're
87:07 - doing this HTML web pack plug-in can do
87:10 - the same thing but this time it's new
87:12 - clean web pack plug-in just like that so
87:15 - right now every time we build if we
87:17 - change our JavaScript or CSS or any of
87:20 - our code we end up with a new bundle
87:22 - file and that's just going to keep going
87:24 - until we delete them but now with clean
87:26 - web pack every time I run npm run build
87:29 - assuming I didn't have a typo we'll see
87:32 - that it is cleaned up and we only have
87:34 - one file so everything that was there is
87:37 - either it's deleted and rebuilt or if
87:39 - it's not being used if it was left over
87:41 - from the last build it's abandoned it's
87:43 - completely removed and again we only
87:45 - need that in production it wouldn't hurt
87:48 - to add it to common or to dev but in dev
87:50 - our files are using the dev server and
87:53 - they're just in memory temporarily they
87:56 - are not actually written down they're
87:57 - not saved to the system alright so we
88:00 - saw two things here file loader with
88:02 - HTML loader to get our assets into a new
88:05 - directory and have the links work
88:07 - correctly and then also we saw how to
88:09 - quickly add into production a clean web
88:11 - pack plug-in alright so I'm going to
88:14 - commit now and that's it for this video
88:16 - next up let's talk about configuring web
88:19 - pack to work to spit out multiple
88:21 - bundles instead of just one with
88:23 - everything we might want to separate out
88:25 - our own app code from our vendor code so
88:29 - let's say we're using the bootstrap
88:30 - JavaScript and a couple matanov jQuery
88:33 - and maybe some other library that we
88:36 - need but they're not going to change
88:37 - very much or ever in our application but
88:39 - our main code will so we can have two
88:42 - different bundles and one of them will
88:44 - be vendor dot content hash j/s it will
88:47 - stay the same almost all the time unless
88:49 - we update that code or or I don't know
88:52 - we upgrade which version of bootstrap
88:53 - JavaScript we're using or something like
88:55 - that and then we can have our main that
88:57 - changes more frequently so this is
88:59 - actually not too
89:00 - difficult to do all we do is set up a
89:03 - different entry point if we want so
89:06 - inside of source I'm gonna make a new
89:07 - file called vendor J s and to start I'm
89:12 - just gonna put I don't know
89:14 - alert hi from vendor just like that and
89:19 - then I'm gonna go into my web pack
89:22 - Commons is where we have our entry it's
89:26 - set to index J s I'm going to make it an
89:29 - object instead and then each property
89:32 - will be the name portion of a file main
89:35 - will be based off of index J s and then
89:38 - vendor will be based off of dot slash
89:41 - source slash vendor J s so now webpack
89:45 - is going to work its magic on both of
89:47 - these entry points it's going to take
89:49 - this first one and it will call it main
89:51 - but remember in production we have a
89:54 - problem in our output where we're always
89:56 - calling everything main so I'm going to
89:58 - refactor this to be named in brackets
90:01 - which will be main or vendor dot content
90:04 - hash and I'll also do dot bundle J s and
90:06 - then in dev I'm going to change this to
90:09 - be named dot bundle dot j s so that name
90:15 - is coming from here main or vendor we
90:17 - have two entry points let's see what
90:19 - happened to no need to add my comma all
90:22 - right let's try it with NPM start using
90:25 - the dev server it opens it up okay so we
90:28 - get high from vendor and then everything
90:31 - else loads okay that alert is kind of
90:34 - screwing things up but if we look in our
90:35 - sources we have a main bundle and a
90:38 - vendor bundle and our vendor bundle
90:41 - includes our alert as well as some other
90:43 - webpack stuff and our main bundle
90:45 - includes all of our files and everything
90:48 - that we have in our app logic the code
90:50 - that we're writing so let's go back and
90:53 - test it now in NPM run build and just
90:56 - make sure that the content hash is
90:58 - working so our file names are named
91:00 - correctly we have main content hash
91:03 - bundle bjs and vendor bundle jeaious and
91:07 - then instead of our index we now have
91:09 - two script tags as you can see so I
91:12 - didn't add either of those both of them
91:14 - are added automatically so you can see
91:17 - now hopefully you can see how this
91:19 - becomes pretty easy if you want to have
91:21 - multiple files or multiple bundles all
91:23 - you do is add a separate entry point so
91:25 - let's now go and add some bootstrap
91:27 - JavaScript in so you can see the utility
91:29 - of this so instead of my vendor J s I'm
91:32 - going to just import bootstrap just like
91:37 - that we already installed bootstrap up
91:39 - in node modules and we're using the CSS
91:42 - but we're not using here's the CSS by
91:45 - the way we're not using the JavaScript
91:47 - if I wanted to add a navbar in which
91:50 - requires JavaScript let's just use this
91:52 - simple one here which will use
91:54 - JavaScript when you collapse or when you
91:56 - shrink the page down it will collapse
91:58 - into the little hamburger menu so if we
92:01 - don't have JavaScript it won't work
92:03 - it's right now if I just comment that
92:04 - out I go to my template at the top of
92:07 - the body I'll just paste in my navbar
92:11 - save and now if I run NPM let's do just
92:14 - a local server NPM start we get the
92:17 - navbar and it does collapse but the
92:19 - toggle the drop down is not working
92:22 - we're not getting that drawer because
92:23 - javascript is not running from bootstrap
92:25 - so we go back to our code and vendor JSL
92:29 - import bootstrap and you can see we run
92:31 - into an issue so after I've saved over
92:34 - here and I imported bootstrap I didn't
92:37 - even have to restart the server but it
92:39 - says that bootstrap can't resolve jQuery
92:41 - which it relies on and popper j/s so two
92:45 - dependencies I'm going to install NPM
92:46 - install - - save dev jQuery and popper
92:51 - jeaious on the bootstrap Doc's it makes
92:53 - it pretty clear that you need those in
92:55 - order to use bootstrap I just didn't
92:57 - include them right away because we were
92:59 - only using the CSS which doesn't depend
93:01 - on those so now if I run NPM start and
93:06 - here we go
93:07 - as I collapse this down there we go our
93:11 - JavaScript is working lastly let's do
93:14 - NPM run build and we'll see our vendor
93:18 - j/s that has spit out right here has all
93:23 - of bootstrap JavaScript included it also
93:26 - has things like jQuery in here which is
93:28 - if I search for jQuery you can see
93:30 - there's what 71 instances of it here is
93:33 - where it's included we also have
93:36 - bootstrap we have popper J s so all of
93:38 - those dependencies are loaded and that's
93:40 - what our vendor J s file now contains
93:42 - and then we have our app code which is
93:45 - in main j s and it's all being minified
93:47 - - it includes the bootstrap CSS we will
93:50 - in the next video work on extracting CSS
93:53 - out into its own file but for now it's
93:56 - all happening inside of this file mange
93:58 - is okay so we just split up our code we
94:01 - imported bootstrap into vendor J s you
94:04 - could follow this pattern with whatever
94:05 - other libraries you're using
94:07 - so aside from bootstrap there's other
94:09 - JavaScript libraries that you want you
94:11 - can put them in vendor J s and they will
94:13 - be bundled together into their own file
94:15 - and it will always be that same content
94:18 - hash unless those libraries change or
94:20 - you somehow add something new in here or
94:22 - change the code
94:23 - this allows a browser to cache this file
94:25 - separately which is less likely to
94:27 - change and then your main file could
94:29 - change a lot more often all right so I'm
94:31 - going to commit my code with git and
94:33 - then in the next video I'll be back to
94:35 - talk about minimizing HTML and CSS
94:37 - extracting our CSS into a separate file
94:40 - right now we don't actually see a file
94:42 - here but it's just magically working so
94:44 - next we're going to talk about minifying
94:46 - CSS as well as HTML but first we're
94:49 - going to discuss extracting our CSS into
94:51 - its own file or files if we prefer so
94:55 - right now everything is being loaded
94:56 - through JavaScript here is all of our
94:58 - bootstrap CSS as a giant string in our
95:02 - main J's bundle which then is injected
95:05 - into the Dom as we've seen before as a
95:07 - style tag so this works there's no
95:10 - problem with it as far as functionality
95:12 - it's it's getting there our Styles show
95:15 - up but in production especially it's
95:17 - nice to have a separate CSS file rather
95:20 - than waiting for JavaScript to inject
95:22 - the styles and the main reason has to do
95:24 - with performance if I load this page I
95:27 - don't know if it's going to show up in
95:28 - the screencast because it's so quick if
95:30 - you watch it over here you'll see
95:32 - there's a flash of the unstyled content
95:35 - every time I reload the page or almost
95:38 - every time so what's happening is that
95:40 - the page loads there
95:42 - is no CSS at all all that is happening
95:44 - is a single or two JavaScript script
95:47 - tags at the bottom of the page so all of
95:50 - our content loads the HTML elements h1s
95:53 - inputs buttons then we get to this
95:56 - script and these two scripts run and one
95:59 - of them takes our CSS and it finally
96:01 - injects it into the Dom so it happens
96:03 - very quickly but everything is actually
96:05 - loading first so there is no stylesheet
96:08 - up here that is going to style things
96:10 - first so there is a flash of unstyled
96:12 - content there it is one more time
96:15 - so in production especially we want to
96:17 - avoid that it's it's just not a good
96:20 - experience for users we want our CSS to
96:22 - load have it be up in the head
96:24 - everything is styled and then our
96:26 - JavaScript can load and it might take a
96:28 - couple milliseconds or sometimes longer
96:30 - and we won't have to wait to get our
96:32 - Styles now the reason we're not going to
96:35 - do it in development mode is that it
96:37 - takes time to spit out CSS files it's
96:39 - much faster when you're just developing
96:41 - with the the dev server you don't want
96:44 - to wait each time that you save
96:45 - something or you change your code you
96:47 - don't want to wait for it to recompile
96:48 - and rebuttal and spit out new CSS files
96:51 - so we're just going to do it in
96:53 - production and the way we do it or one
96:55 - way to do it is using a plug-in called
96:58 - mini CSS extract plug-in so we're going
97:01 - to begin by installing it so it is NPM
97:04 - install - - save dev mini CSS extract
97:09 - plug-in and while that's loading we're
97:12 - going to go into our web pack production
97:14 - and import or require that module and
97:18 - then we can use it inside of our plugins
97:20 - so we'll pass it in we'll do new mini
97:24 - CSS extract plugin just like that and
97:28 - save and if we want we can specify a
97:31 - couple of options we'll just do file
97:33 - name and have file name be the same sort
97:37 - of pattern we've been following so name
97:39 - dot and then we can have the content
97:41 - hash dot CSS alright so that's the first
97:45 - step but this actually isn't enough the
97:48 - next thing we need to do is make sure
97:50 - we're using this instead of the style
97:52 - loader that we're using right here
97:56 - right now we're using this all the time
97:57 - it's in common webpack common so every
98:01 - time we load as CSS the same would apply
98:03 - if this was CSS we are first running it
98:06 - through sass loader and then CSS loader
98:08 - which remember this one converts sass to
98:10 - CSS this one turns CSS and the
98:12 - JavaScript this one is what actually
98:14 - injects those JavaScript strings of CSS
98:17 - into the Dom we don't want this to
98:19 - happen in production we're trying to
98:22 - avoid that
98:22 - instead we want to use this mini extract
98:26 - or mini CSS extract plug-in to grab
98:29 - those lines of CSS and put them in a new
98:32 - file so I'm going to actually move this
98:34 - this entire rule away from the common
98:38 - config file I'm gonna put it in dev
98:41 - because in dev we do want it and I need
98:44 - to grab module rules need to follow the
98:48 - same syntax that we had I copied the
98:50 - wrong portion okay so everything looks
98:54 - the same module rules and then in
98:56 - production we need to do the same thing
98:59 - so module rules but this time instead of
99:04 - style loader we're going to change this
99:06 - to be mini CSS extract plug-in dot
99:10 - loader so it comes with a loader that we
99:12 - can use as part of the plug-in and this
99:14 - instead of inject Styles into the Dom
99:17 - this is going to move or extract CSS
99:21 - into files so remember they load in or
99:25 - they run in reverse order this happens
99:27 - then this happens and then finally it
99:30 - should create new files for us including
99:32 - the CSS that was loaded by CSS loader
99:35 - that was originally converted from sass
99:37 - to CSS by sass loader oh right let's see
99:41 - what happens now we will do NPM run
99:44 - build fingers crossed no errors you
99:47 - never know and you can see it takes a
99:50 - little while but it should spit out a
99:53 - CSS file and indeed it does so we have
99:56 - this CSS file now that is separate and
99:58 - if we look at our index.html that it
100:01 - gives us it now includes a link tag up
100:04 - at the top so we're no longer waiting
100:06 - for the page to load for the JavaScript
100:08 - to load
100:09 - then inject our styles into the head
100:11 - it's all happening at the beginning it's
100:13 - compiled it's built this way from the
100:15 - get-go so that plug-in is extracting all
100:18 - of our code all of our CSS into one CSS
100:21 - file you can configure it to do it in
100:23 - multiple but for now one is fine this is
100:26 - all our CSS so bootstrap is pretty much
100:28 - all of it we override those colors using
100:31 - sass but if we had other styles as well
100:33 - if they would be in here
100:34 - assuming that we were writing in them in
100:36 - this file and now if we refresh the page
100:38 - let's make sure it still works notice we
100:41 - don't get that flash of content anymore
100:42 - I'm doing the same thing but it's not
100:45 - we're not seeing the unstyled content
100:47 - our link tag is included in the correct
100:49 - spot up in the header and I guess I
100:52 - should call attention I use the content
100:54 - hash again just to help with caching and
100:57 - to prevent caching when we don't want it
100:59 - to happen if we change the file this
101:01 - cache will change all right so that
101:03 - should be review from earlier videos so
101:06 - notice that this is not modified this is
101:08 - quite large so one thing we might want
101:10 - to do is minify this CSS and it's not
101:14 - very difficult to do there's a plug-in
101:16 - to help us and it happens to have a very
101:18 - long name in my opinion optimized CSS
101:21 - assets web pack plug-in one of the
101:23 - larger packages larger package names a
101:26 - large package oh boy one of the larger
101:28 - package names that I've come across so
101:31 - optimized CSS assets web pack plug-in is
101:33 - going to help us minify our CSS so the
101:37 - first thing we're going to do is install
101:38 - it so we'll do that now NPM install - -
101:43 - save dev optimized CSS assets web pack
101:46 - plug-in while that's going we're only
101:49 - going to minimize our CSS in production
101:51 - we don't need to do that in development
101:53 - it's a lot easier if we only do it in
101:55 - production it takes time but it's also
101:58 - you know frustrating if you're trying to
102:00 - debug something in CSS it's super
102:02 - minimized it's not a huge issue you can
102:04 - do it in development if you want but I'm
102:06 - just gonna do it in production so we
102:08 - first need to import it here I'm just
102:12 - going to use const to match everything
102:13 - else that i've been doing and where we
102:15 - actually use this it's not as a plugin
102:18 - on its own we add a new property here
102:21 - called optimize
102:23 - that we haven't seen before and then
102:25 - within that we specify minimizer and
102:28 - this is an array multiple minimizer's
102:31 - because sometimes we're minifying
102:33 - javascript or minifying CSS like we are
102:36 - in our case and I'm going to pass in new
102:38 - optimized CSS assets plug-in just like
102:41 - this and then add my comma okay before I
102:45 - run this to show you what happens let's
102:48 - take a look at two things I'm going to
102:49 - close down a lot of stuff we have a lot
102:51 - going on so inside of our build folder
102:53 - we have our CSS which is not minimized
102:55 - it's a very long file then inside of our
102:58 - JavaScript files we have minimized code
103:01 - so I'm showing this to you for a reason
103:03 - this is all minimized or minified now if
103:06 - i run npm run build where we're telling
103:10 - it to use optimized CSS assets plug-in
103:12 - to minify our CSS let's see what happens
103:16 - okay so that finished up and let's look
103:20 - at our CSS now it's minified so that
103:23 - part's working but something weird
103:24 - happened if we look at our JavaScript
103:27 - it's no longer minified why is that
103:30 - happening so it's kind of annoying that
103:32 - this happens but when you set mode to
103:33 - production by default optimization
103:36 - minimizer is set to use a javascript
103:40 - minify but then we're overriding it
103:42 - right here by telling it to use this off
103:45 - to my CSS assets plug-in it basically
103:47 - ignores what was there before which was
103:49 - minifying the javascript terse rjs
103:52 - plugin that will we're going to
103:54 - reintroduce in just a moment so we have
103:56 - to manually add it back in it was there
103:58 - but by adding in this plugin we
104:00 - completely override what was there
104:02 - originally inside of minimizer so now we
104:06 - don't get JavaScript being minified only
104:09 - CSS and another thing I'll show you if
104:11 - we look at the message we get it says
104:14 - warning an asset size limit the
104:17 - following assets exceed the recommended
104:18 - size limit 244 kilobytes first of all a
104:21 - lot of people think that this is a
104:23 - pretty sensitive or a low threshold for
104:26 - this warning 244 is not really a huge
104:30 - file but you can see our vendor j/s
104:32 - vendor bundle jeaious is quite large now
104:35 - and
104:36 - weren't getting this before because it
104:37 - was being minified it's not anymore
104:39 - so if we look at the file it's quite
104:42 - long it's all a bootstrap and jQuery and
104:46 - popper j/s so now we're going to add in
104:48 - the plugin that was already being used
104:50 - we don't actually have to install it but
104:52 - we do need to require it and it's called
104:54 - tercer webpack plugin again I haven't
104:57 - installed this myself it's already
104:59 - inside of node modules if you scroll
105:00 - down look for T cursor you'll see come
105:05 - on where are you right there tersh or
105:08 - web pack plugin I promise you I didn't
105:10 - install it myself it's not in my package
105:11 - JSON but it's there because web pack was
105:14 - using it already you can see it's not in
105:16 - here okay so we're going to require it
105:19 - and then pass it in as a minimizer new
105:23 - tercer plugin so tercer is the default
105:26 - minimizer for javascript and web pack as
105:29 - i already showed you it was being used
105:31 - before but we overrode it and ignored it
105:34 - so we're adding it back in it used to
105:36 - use webpack used to use Uggla fire by
105:38 - default I believe now it's tire but they
105:41 - do pretty much the same exact thing they
105:43 - minify your JavaScript so let's see what
105:46 - happens now let's try it npm run build
105:50 - again i'm only minifying in production
105:52 - for my javascript and doesn't work you
105:55 - can see how long this takes by the way
105:57 - so we don't get that warning anymore
105:59 - that's it's not saying that our file is
106:01 - too large vendor is now 167 kilobytes
106:04 - instead of what 400 something yeah 484
106:08 - so a significant reduction in size and
106:11 - if we look at vendor it's minified if we
106:14 - look at our main file it's minified if
106:16 - we look at our CSS it's minified there's
106:19 - only one thing that is in index.html now
106:22 - it's very short but we can optionally
106:24 - minify our HTML in production we don't
106:28 - have to use any additional plugins we
106:30 - already have this HTML web pack plug-in
106:33 - right here I can pass in other options I
106:36 - can specify minify this is part of the
106:39 - the plug-in documentation where I found
106:41 - this and instead of minify I can do
106:44 - things like remove comments and set that
106:47 - to be true or false but I'm not going to
106:49 - do it here
106:49 - inside of webpack common because I don't
106:52 - want to minify my HTML in development so
106:55 - once again I'm gonna pull this out and
106:57 - move it to production so instead of our
107:00 - commonjs
107:00 - web pack config we don't have any
107:02 - plugins they don't share anything at
107:05 - least they don't share it in the exact
107:07 - same way so now inside of dev I'm going
107:10 - to add in this plug-in again so plugins
107:13 - and paste that in add my comma and I
107:18 - need to make sure I am requiring it at
107:20 - the top of web pack dev and then in web
107:24 - pack production I'm going to require it
107:26 - as well but I'm going to alter some
107:29 - options I'm going to pass in some minify
107:31 - options so let's do that now right here
107:33 - paste it in and after template I'm going
107:38 - to say minify and the three I'm going to
107:40 - go with our remove attribute quotes
107:42 - collapse whitespace remove any extra
107:45 - whitespace and remove comments set that
107:47 - to be true so let's let's do something
107:50 - in our HTML where we'll actually be able
107:52 - to detect this will tell if it's working
107:54 - so let's go to our template file and add
107:57 - some comments in here like mm how about
108:00 - above the navbar
108:01 - we'll say bootstrap navbar and then
108:06 - let's add in some white space I'll just
108:07 - do a single line and we'll just leave it
108:10 - like this for now we'll look for that
108:11 - top comment here bootstrap navbar and
108:13 - see if it makes it in to our end result
108:16 - when we are in production so let's now
108:18 - run NPM run build and twiddle our thumbs
108:26 - for a moment okay let's look at
108:30 - index.html all right definitely minified
108:33 - you can see the attribute quotes have
108:35 - been removed so type equals text
108:38 - there's no quotes for example we have no
108:41 - white space or most of the whitespace
108:43 - has been removed and then also my
108:46 - comment is gone at least I can't find it
108:48 - if I look for it I'm pretty sure we'd
108:51 - see it pretty pretty easily because it
108:52 - would stand out with a different color
108:54 - so it's not in here and let's just check
108:56 - that it does work so i refresh the page
108:59 - okay it's loading we're getting all the
109:01 - code that we expect
109:03 - scripts working its minified we're
109:05 - overriding bootstrap or using sass
109:07 - change those colors we have separate CSS
109:10 - files or single file where are you right
109:13 - here it's minified we have our minified
109:16 - vendor J s and our may NJ s and then our
109:20 - index.html minified as well so
109:23 - everything has been crunched down if we
109:24 - have our images to forget about that and
109:27 - then instead of elements we still can
109:29 - see everything that's normal right we're
109:30 - by minifying it we're not like
109:32 - corrupting it
109:33 - we're just shrinking it down and
109:34 - collapsing it into as little space as
109:37 - possible now let's just verify it still
109:39 - works in development so NPM start notice
109:43 - how much faster that loaded for me that
109:46 - took maybe a second or two to build
109:49 - originally and then rebuild should
109:51 - actually be faster and if we look at the
109:53 - code index is not minified we can see my
109:56 - comment is here all the attributes have
109:58 - quotes our code our javascript is not
110:00 - minified and there is no CSS remember it
110:04 - well it's in the files but there's no
110:05 - CSS file on its own and remember the
110:07 - reason we do that is that it takes a
110:09 - while to build those files and in
110:11 - development if I change something I
110:13 - don't want to wait and that's it for now
110:15 - so I'm going to commit we have a whole
110:17 - bunch of things going on in web pack and
110:19 - we've honestly only scratched the
110:21 - surface in some ways because there's a
110:23 - lot of other things to talk about I mean
110:25 - if we look at those that list I showed
110:27 - you early on if the different plugins
110:28 - available of the different loaders web
110:30 - pack can do a ton of stuff but as you've
110:32 - seen it's really how I put this
110:35 - intimidating it can be overwhelming when
110:37 - you're starting out and it's something
110:39 - that you only really do once every
110:41 - project maybe you go and update
110:43 - something but often you know you're not
110:46 - you're not writing code in this file and
110:48 - your web pack config all that often
110:49 - especially if you work at a company on
110:52 - one large production app the config file
110:54 - doesn't change all that much so a lot of
110:56 - people don't have much experience with
110:58 - it and it takes some time and some
111:00 - practice to get used to it but there's
111:02 - just nice little patterns you follow you
111:04 - know you just remember rules tests use
111:06 - there's certain loaders that you use
111:08 - frequently like style loader and tercer
111:12 - js4 minification you know there's these
111:14 - different patterns but at the end of the
111:16 - day
111:16 - all that we're doing is taking a bunch
111:18 - of different types of files in our case
111:20 - an SVG file an HTML file JavaScript
111:23 - files s CSS and we combine them in some
111:27 - ways not all into one file but we
111:29 - combine JavaScript into different files
111:31 - all of our different J's files you know
111:34 - we haven't touched these in a while but
111:35 - five different files plus the bootstrap
111:37 - j s+ jquery plus popper J s and we spit
111:41 - them out into bundles there minified
111:42 - they have hashes in their name that
111:44 - pertain to the content inside of them so
111:46 - those hashes will only change if the
111:49 - content changes which helps with caching
111:51 - and preventing caching when we don't
111:53 - want it then we have our CSS being
111:55 - pulled out in in production we have our
111:58 - index.html being built for us with all
112:00 - of the links included dynamically so we
112:03 - don't have to write any of these script
112:04 - tags right this is all done for us and
112:06 - then we set things up in development
112:08 - mode to be a little simpler we have our
112:10 - dev server that is going to update and
112:13 - rebuild anytime we change something just
112:15 - serving it on localhost
112:17 - we aren't minifying you know we aren't
112:19 - using the content hashes our CSS is not
112:21 - being extracted or hTML is not being
112:24 - minified but we're still joining
112:26 - together all these different files and
112:27 - making sure everything works for us
112:29 - okay so I'm gonna leave it off here I
112:31 - know that was a lot I'm gonna commit
112:34 - this will be the last commit for now
112:35 - please let me know if you have any
112:36 - feedback I'd love to hear what you have
112:38 - to think any suggestions or things you
112:40 - liked take a look at the code of course
112:41 - look through my commits and I think
112:44 - that's it all right talk to you later
112:46 - talk to you later all be on YouTube
112:48 - later if you enjoyed this video my cat
112:51 - and I really appreciate it if you share
112:53 - it with anyone you think would get
112:54 - something out of it I'll leave a comment
112:56 - subscribe please turn on notifications
112:57 - oh so annoying asking you to do that

Cleaned transcript:

everyone this is cold welcome to my web pack YouTube mini course thing there's a couple things I have to get out of the way first the most important one is that there is a github repo that goes along with this course so if you follow along if you want to see the code I mean I do type every line from scratch so it is a true code along but if you just want to check the code out at any point use this repo view it in the browser there's a bunch of commits with nice detailed messages clone it down if you'd like to use git if you feel comfortable checking out each commit and I'll reference throughout the video you know I'm on commit 7 going to commit 8 and that sort of thing ok the next most important thing I know everyone's gonna ask why am i wearing a hat I need a haircut ok and I thought this was better than the alternative you see what I'm working with here yeah okay so on to the course content this video is about web pack in general so if you already know how web pack works what it does what the point is then you might want to skip this or just fastforward through it in the next video we start with installation so because it is 10 videos I did decide to spread things out instead of just rushing through everything so I will not take offense if you speed through any videos or skip them that's what the github repo is for as well if I were taking this course I'd probably just start by looking at the code I've always liked to do that before I watch any videos ok so let's get going let's talk about what web pack is this is the web pack homepage and I like how this image explains it web pack can be very confusing and intimidating and cause many headaches when you're actually setting it up and configuring it but its mission its core goal is very straightforward it takes a bunch of different assets different files of different types javascript images like SVG P&G JPEGs CSS stylesheets or less or sass all sorts of different files and it combines them down it bundles them into a smaller group of files one file maybe or one file for your JavaScript one for your CSS one for your thirdparty JavaScript to vendor j/s and one for your app code app jeaious it's very configurable which is where it can become a little tedious and pretty intimidating to people who are learning it but the idea behind it is very simple so in addition to just bundling things together and just shoving them into a file it's also managing dependencies it's making sure that code that needs to load first is loading first so if you write a file that depends on three other files those three need to be included first so often it's a very complex web of dependencies and larger apps and it would be very difficult to manage it on your own web pack does it for you and it spits out one or two or however many files you tell it to bundle and I like how the github repo explains it web pack is a bundler for JavaScript and Friends packs many modules into a few bundled assets and through something called loaders which we'll talk about modules can be commonjs es6 CSS images json CoffeeScript blah blah blah blah blah the list goes on so we're going to see how to do a lot of this stuff but first I want to show you an example of an app that is already built we'll be creating our own from scratch and configuring web pack but this app is substantially more complicated way more dependencies than what we'll be doing in this course so this is an app that I'm building for my upcoming react course it's a a color pickers website so there's a bunch of color pickers you can click on one you know you can copy a color there's a whole bunch of features things like changing from hex to RGB to RGB a all of that involves a library that helps figure out colors and and convert between different color types I'm using a library to get these nice sliders and this little snack bar thing that pops up down there there's transitions I'm using the react router Rose my point is there's a lot of different stuff going on that is thirdparty code that I'm depending on there's some code to help with draganddrop there's code for a color picker so I can create new palettes reorder them I save it and there's code in addition for this emoji picker here so I can select an emoji anyway that's enough with the app itself but it's sufficiently complicated where I think it makes sense as a good example for web pack so if we take a look at the code there are I don't know 20 something JavaScript components or react components that I've written plus 20 something CSS files plus a whole bunch of dependencies lots of modules things that I'm using like react color I'm using this emoji Mart I'm using material UI react of course some form validator libraries there's a lot of dependencies and this is for a single file and there's twentysomething of them so at the end of the day each one of them has at least this many dependencies and it's very tricky to determine what needs to load first if I was manually including script tags for each one of these 20 files it would not be sustainable so this is built on top of create react app which is a pretty standard way of creating new react apps and it uses web pack behind the scenes in addition to some other things but web pack is really responsible for the bulk of the functionality behind create react app so it's going to take all of my JavaScript and combine it into one file it takes all of my CSS and combines it into one file it does a lot more involving things like babel for example but at its core that's what it's doing it's bundling my assets and making sure that it's managing the dependencies so if I wanted to run the application I can run NPM start which will run it in dev mode which starts a local server but it still uses web pack and if I open up the chrome inspector you can see in sources there are MC just a couple JavaScript files bundle J s and then main chunk J s and this contains all of my code combined into one file there's some weird stuff going on if you're trying to read it using eval basically each one of these is a single file that I wrote a massive string and it's being wrapped in a web pack module and this is keeping track of what it exports and what it depends on and you can actually see for example this is mini pallet J s okay that's one of the components and if I keep scrolling over you can see things like this web pack imported module 6 equals web pack require of react so web pack require is how web pack is keeping track of what is imported where what needs to be exported what uses what basically manages dependencies so it replaces my imports and exports with these web pack requires so if I kept going it's pretty annoying to scroll but you'd see ok web pack required mini colorbox that's another component that this component imports it relies on that component and what might surprise you to learn is that it's actually importing all of my CSS as well into this file so it didn't make me a separate CSS file because I'm running in development mode and I'll show you just a moment what it does in production and now if I instead decide to run this in production which I'm not really going to run it I'm going to export I'm going to spit out a build folder so npm run build this is a command with create react app you'll see that it makes me a couple of files once it finishes it can take a while which is why we don't export these CSS files in development when we're constantly changing things because it takes forever to recompile it to reap undal okay so that's just finished and if we start by going to my text editor scrolling way up close this down here there's now a build directory and inside of that build if we look at our Java Script there's a couple files there's these source Maps we can ignore but they're all minified now this is the same stuff i was looking at earlier when I was using the dev version but now it's been all crammed together and minified and I have separate CSS files but if we look at them they're all of my CSS separate files have been combined into one and also minified so web pack is doing all of this for us again it's managing dependencies it's bundling code together and now if we look at index.html which is somewhere in here there's only what to script tags at the bottom and one or two link tags at the top instead of 20 or 30 or 50 separate script tags that I would have to do manually okay so hopefully that makes it clear what web pack does why you would want to use it it's a huge headache on large apps to try and do something without web pack or something comparable alright so I mentioned this in the intro video but I want to bring it back up in case you missed it or you skipped right to this video so you could start installing stuff which I get by the way but I want to bring it up because this repo is very important for the rest of this course the next 9 or so videos it includes all of the code and all of the commits that I make in all of those videos so the link is in the description it includes detailed commit messages I'll talk about in each video which commit I'm currently on so I do type everything from scratch it is true code along but if you want to reference the changes I'm making or if you get lost or you just want to look at it without the video click on a commit and you can see the diff you can also see the notes I've written up top and if you're more comfortable with it then and just check out each commit as you go all right so this is the initial state of our application a very very simple app that we're going to add web pack into and configure it a couple different ways and you'll see it gets surprisingly complicated just to do a couple of the basic things now that's not a dig at web pack it's just maybe a bit of damage control on my end just to let you know that this stuff it can be annoying or difficult to follow which is why I gave you the github repo so that you don't have to type everything yourself if you want you can follow along that way but you can also just you know check out each commit as I go and you'll be able to see what's happening so the code right now is the initial commit there is no web pack it's a single index.html a single app j/s file and an SVG image so you can see here's our HTML there's a single script tag at the bottom fjs has 40something lines imagine that it's 4,400 lines instead of 40 and that will help make it clear why web pack really makes your life easier once you get it set up at least okay we also have some content of course and then I'm using bootstrap from a CDN so unchanged eventually we'll actually be using local bootstrap we'll be writing some sass to override different variables change colors in bootstrap and then use webpack to bundle it all together and make it work but for now it's coming straight from a bootstrap CDN unchanged and this is what the app looks like when I just open the index.html I'm warning you it's extremely simple and not exciting we have two inputs styled with bootstrap I can add numbers together by clicking only adding unfortunately and it prints out your result down here so some simple JavaScript and some extremely simple validation if I put numbers I mean letters in here instead of numbers I get this alert styled by bootstrap that says please enter two valid numbers a ASD is not a number blahblahblahblahblah is not a number so it's actually really horrible validation because you can cheat it as long as you have a number in that string so this is going to be one plus 12 which gives me 13 even though those aren't valid numbers but that's not really the point the content of the code doesn't really matter much it's more about just having javascript that we break up having some sass having some CSS having an image that's what really matters so don't get too hung up on that because the same stuff I'm going to show you will apply to more exciting more complicated applications but I wanted to make something simple enough to follow along with okay so the first thing I'm going to do is break my code up into separate files so that will take us into commit to if you're following along that will be the second commit so there's a couple things that I can break up from my app j/s first of all we have these different functions I'm going to put those in their own file each one in its own file in a utilities or utils directory because we might want to use those somewhere else in the app in checking if inputs are valid checking or parsing inputs that's functionality we could use somewhere else also you know we're just breaking it up so that we have something to bundle it's not very fun to bundle a single file I'm going to make actually I'm going to refactor our code to have two services an alert service and a component service and then I'm going to have a function called run that actually starts all of our code so I'm going to do that now I'm going to make a new folder inside of source called app and then inside of that another new folder called utils and then the first utility will be parse input CAS and I'm just gonna cut this code right there and put it in this file and then I'm gonna do the same thing for our second utility function which is called inputs R valid is and I'm going to cut this out and paste it in right here there we go and I'll fastforward through some of these changes but I'm going to make a couple more files just so you can see the file names in the app I'm gonna have alert service is I'm going to have a component dot service J s and then I'm actually going to move my app j s into app so I'm going to delete this when I'm done okay so I'm going to fill out these files again it's the second commit if you want to see how I broke the code up for yourself okay so I'm back this is the alert service a class called alert service I just moved the code into this it relies on inputs are valid for example we also have component service which doesn't have any dependencies so far and then inside of app J s the real the new FJ s I'm going to delete the old one that's outside of my folder now it's just all in this app folder so I have my utilities two functions and then I have alert service component service and then app J s is going to instantiate new instances of alert service and component service call them alert service and component service and then it has a function called Run which accepts an instance of alert service and component service and I'm calling that at the bottom so this is what actually starts the app everything else is just a function definition or a class definition but this function run is what actually runs the code what starts everything so don't get too hung up on the code it's not really the focus all that matters that is that we have code spread across different files so now my index dot HTML needs to change because I'm linking to the old app J s but now it's inside of the app directory so source / app / FK s that should get me that file but you probably can tell already this is going to be problematic if I try and run it refresh the page there's an error alert service is not defined okay so this is sort of a heavyhanded way of proving a point that managing dependencies is tricky it's not so bad in this example but we have alert service we need to make sure that that has loaded first we need to use component service before we can run this code so app J s depends on those two but then we have alert service which itself uses inputs are valid so we need to make sure that it's aware of inputs are valid right now all that we're actually including is a single script for app J s we have to manually include every other file so I'm gonna do that now I'll fast forward okay so I now have all of those scripts but once again I need to change the order because some of them depend on one another so app J s I'll just put that at the bottom because it depends on everything else loading first and now are we good to go let's see okay it's working so that's a very simple example but if we have a thousand dependencies or a thousand file and each one has ten different dependencies or something like this from the previous video this react app that has 20 something react components each one has a bunch of dependencies at the top here's a different component a whole bunch of other dependencies so if we're trying to manage this ourself it's a nightmare which one loads first instead we use webpack okay so we're not using webpack right now we're doing it manually and the point is that it sucks so we're now going to install web pack so this is the end of commit right now if you're following along commit 3 includes installing web pack and getting it up and running so that is what I'm gonna do right now ok so to install web pack the first thing we need to do is actually set up our package JSON so I'm gonna do an NPM in it I'll do why just to make it faster it doesn't ask me all those questions now I have my package JSON and I'm gonna begin by adding to my kit ignore the node modules directory just so that I'm not committing that you don't have to do that of course and then in my package JSON where'd you go I'm going to get rid of this scripts for now we'll be adding our own script in just a moment so we've got name code that's fine I'm gonna set private to be true again doesn't impact anything as far as web pack but it just prevents it from being published on NPM okay now what I'm going to do is install web pack so NPM install save dev web pack and if I just did this it would actually prompt me to install a second package which is called web pack CLI the commandline interface and we want that as well we want both of them so this sometimes takes a little bit so I'll be back once it finishes okay so that wrapped up now we have both of those dependencies in our package JSON next we're going to set up a script inside of this scripts portion the scripts property of our package sell JSON and we'll go with start so when we run NPM start from the terminal it's going to call web pack just like that that's actually all we have to do for now well we'll change this we're going to configure web pack but out of the box this will work and we can actually give it a shot right now well we're gonna run into a few problems so before we configure webpack we will be configuring it and telling it all sorts of different things that how it should work how it should handle certain files where it should put certain files how many it should bundle when it should name them bla bla bla bla bla but by default when you install it and you don't configure anything you don't have a configuration file it has a couple of default values and we can actually see one of them if I just do NPM start right now it's going to call webpack you can see right there where are you web pack but if you look at the error it's telling me it can't resolve dot slash source so it's actually not the most clear error but what it's saying is it can't find index j/s inside of the source directory the default entry point that it's looking for what it's craving is an index jeaious file instead of source and the reason it says dot slash source instead of slash index afterwards is because when you require an entire directory and node the index J s is what is used by default so it's not finding it so it's not happy so let's make an index J s inside of our source folder index is this is where it's going to look let's add an alert hello from webpack well save now let's see what happens when I run NPM start once again by default we didn't configure it it's looking for that file so we made it now it's also saying something about a main j/s it built our code into main jeaious ok and there's also a warning down here we didn't set the mode option so it falls back to production we'll talk about that later in this little mini course so if we look there's a new folder I did not make this folder manually it's called dist and there's a file called mange s and it contains a lot of random stuff that's not random I hate when people misuse the word random even though I just did that it's not at all random it's very important web pack magic at the top and then you can see buried in there is our code now it's actually wrapped in some some braces and parens and curly braces that's because web pack isn't just adding our code as just I don't know regular code to the end of the file it's not just appending it down here it's wrapping it with some webpack magic and in the next video we'll actually take a look at it and understand what it's well try and understand what it's doing but for now it's good enough to see that our code is in here so it has nothing to do with the rest of our app it has nothing to do with these component services with the logic of that little calculator it's not even loading right now so let's fix that let's go into our index.html and at the very end include another script this one instead of app slash a pas it's going to be dot slash dist slash main dot J s this is the file web pack spit out for us this is what I just built it's very simple it took one file in I had a single line and it spit it out with a whole bunch of other lines but that's all the web pack magic I was talking about we'll come back to it later so now if I go back refresh we're getting this hello from web pack that alert is working so seems the reason that if we put other code in here it would work and that's just what we're going to do we're going to put our code from the app in this file that's actually coming up next because it's not as simple as just you know copying and pasting it because we want to keep it across the different files so we're going to use es6 import and export to do that for us and then web pack we'll build this one file but the other thing we're going to do in the next video is configure web pack set up a basic configuration file right now it's looking for index J s and it's spitting out the code in dist main j s we didn't tell it to do that so it's it's rampaging on its own we're gonna try and rein it in and tell it exactly how we want it to work the last thing I should mention I'm going to add the dist directory into my kit ignore because just like node modules both of these directories don't need to be included when I push this up to github they just take up space and you can derive both of them from the code you run npm install you get node modules if you run NPM start web pack will build the dist directory with the main J s so I'm not going to include it with git alright so we're now at the end of the third commit if you're following along the next commit that we'll do in the next video has to do with webpack all about our app code and configuring it so right now our app is existing in a vacuum webpack doesn't know about it we have web pack up and running but it's only bundling this code right here what we want to do instead is call some code in here that is from our application and we have these five different application files inputs are valid parts and foot's and so on and we're going to call some code from this file so when I bundle this file with NPM start it's gonna go grab all the relevant dependencies and put them all into a file which ideally is going to put all of these five files together for us but first we have to declare which files depend on what and the way we do that is by using es6 imports and exports so in each file we're going to indicate what will be exported from this file as well as making sure to import any relevant dependencies for example if we look at this one alert service it depends on inputs are valid so we're going to make that clear we're going to import inputs are valid but we actually can't do that yet because we haven't exported anything from that file so if we look at that here it is just a single function I'm going to export inputs are valid and then inside of my alert service I can now import it imports and I didn't export defaults so I need to use the exact name here instead of curly braces inputs are valid from and then the path to that file from alert service is dot slash utils slash inputs are valid and then while I'm here I might as well export alert service because we're using that instead of our app j s you can see right here I will need to import alert service but let me just begin by exporting the other thing so we've got component service it doesn't have any dependencies in here as far as I can tell we have inputs are valid we're done with that we exported it we have what's the other one parse inputs we will export that and where are we using parts inputs I think it's in app you can see right here we rely on parts inputs and inputs are valid so I'm going to copy this line from Alert service and move this into FJ to the top and we also rely on parse inputs from dot slash utils slash parse inputs okay and then we have alert service and component service that we're using in here but I'm going to hold off on doing that for just a moment because we have to talk about what is going in our index J s right this is our entry point this is where webpack is going to start we need to run some code from here that will then send webpack sniffing down through all the files to figure out the dependencies to figure out what code needs to be bundled so we need to have a little window into our application code and the most logical choice would be to run this function to call this function from inside of index this is the function that starts everything so instead of calling it inside of our app J s I'm going to delete that so I export it out of this file so now inside of my index J s I can import run from and then the path to that file from index J s is dot slash o not in the right spot dot slash app slash app is the name of the file and then I can call run but that's not the end of the story because if we look at what run is using we need to pass in an instance of the alert service and an instance of the component service so I'm going to cut that out and move it over to index J s but that's not enough I can pass in a large service and I can pass in component service but we still have to import them here just like in every other file where we're using something this is a bad example component service another bad example let's look at alert service we need to import inputs are valid because we're using it in this file same thing here if we're trying to instantiate a new alert service we need to make sure make it very clear we need it this is going to tell webpack all right we need to make sure alert service has loaded before we can actually create one and pass it into run so import alert service from dot slash what are we we're inside of index J yes so app slash alert dot service and then I'll duplicate this and this other one is component service from app slash compose servus okay now we should be okay we'll doublecheck we're importing everything we need so importing run alert service and component service then were calling run with the new instances of alert service a component service app j/s now just has this run function but it also relies on inputs are valid and parse inputs as you can see we're using it in here inputs are valid parse inputs they have no imports they only export a single function and then we have component service it doesn't import anything but it does export and lastly alert service we export it and it relies on inputs or valid okay so let's see what happens now when we actually run NPM start we now have code we have an entry point into our application it's not just an alert and webpack is going to go and I keep saying sniff I don't know why I have that idea in my head but it's gonna burrow down and and start looking in here and look at what app depends on for run and it's gonna realize this depends on inputs are valid and parse inputs and then it's gonna check those do they have any imports do they export something and it's gonna keep going and essentially form a tree for us so let's see what happens when I run NPM start hopefully I don't have any typos okay now let's look at what it built for us in the disk directory mange is now we can see all of our code is down here shortly well address what all this is but all of our code is here it's not just a single alert anymore and we have our script included as you can see this slash mange is the true test will be if we can remove all of these scripts that were there before and just have this one main.js file and have everything work still so let's see I'm going to refresh the page it looks like it's working okay looks good and if we go to our sources tab what we can see instead of our dist there's a mange a s it's minified it's hard to read and understand we will talk about that but it's working all of our code is loading it's being bundled into a single file so it doesn't matter you know which order we're writing these files in we don't have to indicate you know this file must load first and this one must load second we just indicate this file depends on this and this and then webpack takes care of the rest it makes sure that everything is loaded in a valid order okay so I just committed the code again if you're following along everything I just did is in the fourth commit just show you the git log so far right here web pack now bundling all our code that's what we just set up so we still haven't configured web pack to do anything beyond the default configuration that's coming up next but it's at least running all of our code it's bundling it all together making sure everything is in the correct order or making sure that the dependencies are managed nicely and then we include a single script tag and all of our code works so this would apply instead of four files where we have 40 lines of code the same idea applies where we have 100 files with 50 or 100 lines each as long as we write explicitly what each file depends on and what it exports ok next we're going to configure web pack we got to set up our own configuration file and we'll dive into what's actually happening in this main J's file I'm now working on the fifth commit in our application if you're following along with git and what we're gonna do in this video is configure web pack or at least set up the config file and replicate what it's already doing but we're gonna add a couple of other settings to change the output so we're gonna begin by just talking about what it's doing for us right now so we've already seen this the default place it's looking for an entry point is index j SN stead of source I didn't tell it to do that the only thing I told it to do is just run web pack when I run NPM start it just says all right web pack do your thing web pack says oh there's no config I'm gonna look for index J s instead of source we didn't have it there a couple videos ago and it gave us an error and the other thing it's doing is it's putting the code in a directory called dist in a main J's file I didn't say it should do that either that's the default behavior so if we want to change that or in our case if we want to add on other things like we're going to talk about plugins and loaders throughout the rest of the course we have to have a config file to do that eventually we'll actually have one config file for development one for production but I'm just going to make a file I can call this whatever I want I'm gonna call it webpack config is and then there's a couple of weird things that we have to get out of the way the syntax for these files looks like this so we're going to export an object and it's going to have a couple of properties we're going to add an entry point which I'll leave as an empty string for now we're going to have an output which will be an object and we'll start with these two so our entry point if we're just recreating what we already have its dot slash source slash index J s so not doing anything new for us but we're explicitly telling it to do this now because it will allow us to in addition add some other functionality down here which we don't have right now now where do we want it to output it well the first thing that we can configure is the file name not fill name file name if we wanted we can keep it as maing is we could go with I don't know hello J s just to show you that it works and then the trickiest part is we have to tell it where to go where to actually spit that code out and to do it we're going to import a module from node that we get we don't have to install this it's just comes with node it's called path Const path equals require path and what we do is write path dot resolve double underscore Deere name directory name and then the name of the folder that we want the code to go in so in my case I'll do dist but to show you you may not want to type this because you're going to make an extra directory but just to prove my point I'll just call this code like that oh and I'm missing my equal sign up here okay no wonder my editor was yelling at me so we have file name hello J s path is path dot resolved so what is this all doing what is path dot resolved well what this is going to do is resolve an absolute path to this code directory so it's going to take whatever the current directory is so if I'm running this on my machine this path will be something like slash Colts or I think I'm actually using a different account called recording user slash document slash wherever all my stuff is slash code but then if someone else is running it on their machine we don't want to put this recording user hardcoded hardcoded in there as the path for the output so we can use passedout resolve which will take the current directory name dear name which every node script has automatically loaded by default anyway this is just a long way of saying we want to make a file called hello J s inside of a file or a directory called code so the last step if we want to use this configuration is to tell web pack to use it so right here in our package JSON we can pass it pass in config and then the name of the file web pack dot config dot J yes okay so I mentioned you may not want to actually run this if you don't have this set up as dist and main j s because it's gonna make you a new folder and a new file and I'm just going to delete mine right after but let me show you that it works fingers crossed that it does work let's see what happens all right we have a new folder and file called hello J yes so that is coming from web pack it's not doing anything with dist anymore we could delete that but instead I'm gonna delete my code directory so let's do that now RM dash RF code ok that file is gone I'm going to change this back to main J s and change this to be dist and that's what most people will do or you could have the folder called V call build instead but there's a lot of options but code is probably not the best example so the next thing we can do just to show you why you would even do this if we're just recreating what we already had why go through this effort well we're gonna spend a lot of time heading in different plugins and loaders and having web pack handle different types of files but for now remember how I said all of this is minified and ugly and hard to understand what's happening is that it's running in production mode by default and I can tell it let's not do production let's set mode to be development and that mode is going to tell it to stop minifying so now if I rerun my code or if I rerun web pack inside of dist we have a mange is and it's no longer all scrunched up into this really hard to read thing of now usually you're not gonna read this anyway that's not the point you read your code in the files where you're writing it but then webpack spits out a bundle but just to show you what it looks like you can see all of it here now one thing that's kind of annoying I don't know if you can see this it's using eval all over the place this is another thing that it's being configured by webpack automatically if we want to change that it's not really a performance issue but just for understanding what's going on we can add another thing called dev tool and if we set dev tool to none and I always forget it's a lowercase T if I rerun it this time again this is not something you need to do but if I look at the code now you can see that all of our code is in here relatively unchanged we don't have that weird eval stuff going on so this allows us to actually understand what this file is doing so the very top of it is some webpack stuff that has to do with defining different functions to make a web pack module there's one called web pack require so if we look at the code that's added in further down for example if we look at alert service let's look at the file alert service has this class as we've seen in an exports that class but it also imports inputs are valid but let's look at what web pack put in the file if we go to our now I guess I closed it our mange is we can see that it says exports provided alert service and it wraps the entire thing in this function to create a web pack module all of this right here it ends right there but then inside of it we don't actually have our import anymore I don't see that line that we had at the top of alert service that said import inputs are valid this is gone and it's been replaced instead with some web pack magic where we have web pack require see right here web pack require source app utils inputs are valid so web pack is now taking control and this web pack require is making sure that our code is all loaded in the correct order it's managing what depends on what so it's basically using this as a hook seeing this here and realizing and what's not realizing something but it has logic that is making sure that it's doing its own webpack version of requiring that module so if we keep scrolling down we can see you know for other things like app J s FJ s depends on parse inputs so it's requiring it with webpack require and inputs are valid webpack require and we can keep going and you'll see that all of our code is in here it's been added in and slightly modified to use webpack require to be wrapped inside of a webpack module and a lot of that or all of that logic is coming from here okay so I'm gonna go and undo or delete the dev tool none we'll come back to that later we'll talk about source Maps but I'm going to leave mode at development for now so we're gonna end here actually we haven't really configured very much we've just seen how to recreate what we were getting already although we did add in mode development but in the next video that's all going to change because we're gonna start talking about loaders how do we handle different types of files that aren't just JavaScript so that's coming up next we're gonna have to edit our config file so I'm going to commit right now if you want to just see this code it is the fifth commit so we've seen how to take different JavaScript files and bundle them together with web pack it's pretty simple it's the default behavior of web pack we just tell it here's where you should start now just go grab all of the code that's it's somehow related to this index file so go grab run and then it's dependencies and so on but that's just JavaScript but we started out a couple of videos ago talking about how web pack can bundle all sorts of files images and other static files things like JSON sass CSS SVG's there's a ton of stuff we can do in this video I'm going to show you how we actually do that we have to install some packages we have to modify our web pack config and we have to talk about loaders so loaders are the magic or the key for getting web pack to handle different types of files besides JavaScript so they are different packages that we install and they dictate how certain files should be pre processed as you import them or as they are loaded so you can transform files and do different things based off of the type of file or exam we can handle a CSS file one way and we can handle a SVG file another way so on the web pack documentation there's a list of some of the most popular loaders you can see under styling where it's that there's quite a few we'll talk about what the difference is it seems like style loader would work for CSS but then there's CSS loader what do they do how are they different we'll also talk about getting sass to work towards the end of this video as well and then this is not just a complete list there is another link that will take you to a different web page that shows you a whole bunch of other loaders that other people have written so my point is that loaders are really really useful it's how we get web pack to handle to preprocess different types of files so we're gonna add some CSS into our application we're gonna start really simple I'm on commit 5 working towards commit 6 if you're following along so I'm gonna make instead of my source directory a new file called main CSS so remember a couple videos ago when I showed you the large create react app that had 30 or 20 different CSS files and they're bundled together we could have web pack do that for us but we're gonna start simple with a single selector we're gonna set the body background color to be purple for now so of course right now we're not going to see anything because we're not including this in our HTML file we could include it as a script manually but the idea is to go through web pack we could have 20 something files of CSS web pack should undal them together and then somehow get it to just work the somehow part is what we'll talk about so we're going to need to use two different loaders one is called style loader one is called CSS loader so we can begin if we come down to styling we're going to begin with CSS loader and before we go any further we have to talk about how we actually set up these loaders this is what we add into our web pack config file so under module which is an object we're going to pass in rules which is an array and we can put different rules for different types of files for different modules so we can say in this case if a file ends with dot CSS if the name of the file this is a regular expression if you're not super familiar with regex this dollar sign means that it has to end with dot CSS so it can't have CSS just in the middle of a file name there has to be a period we have to escape it so that's the backslash period CSS end of string or end of name and then if that's the case we will use these two loaders so we're going to begin by installing both of them and I'll tell you what the difference is and why you need both in just a moment but let's do our npm install save dev style loader and CSS loader okay while that's going I'm gonna go back into my web pack config and I'm going to update this to now have module and then we have rules which is an array and then we're just going to add our first rule where we add tests and remember this is a regular expression and obviously we can just copy this one for now just like this okay and this says the file ends with CSS if that's the case how do we want to handle it and then we can pass in use which is an array and I'm gonna start with just CSS loader okay and I don't know why I have this extra G down there so we're saying anytime you come across a CSS file use CSS loader which hopefully installed it did now we have to make sure our app knows about our web pack knows about this main dot CSS file so we're going to add it we're going to import into our index J s so import and we need main CSS so dot slash main dot CSS so if I do this now web pack will come across that CSS file and it should match this regular expression and it will use a CSS loader so let's see what that does NPM start okay let's go look at our main J's file we're gonna have to do some scrolling I'm going to search for purple and you can see down at the very bottom we have our main CSS and it's showing up in this JavaScript file so what's happening is that the CSS loader it exists to take CSS and turn it into valid JavaScript code basically turn it into really long strings and make sure it's valid JavaScript you can see our selector here body background purple but it's not being applied right now at all if I open up this page if i refresh right here there's no purple background even though that code is included so that's where style loader comes in so CSS loader takes your CSS and it turns it into JavaScript and then style loader will take that JavaScript which is actually CSS and inject it into the Dom you can see right here style loader adds CSS to the Dom by injecting a style tag okay so to use it it's really simple we already installed it we go to our web pet config the trickiest part is that you have to know that there is an order to this array so we have to use them in the correct order this one is going to translate CSS to JavaScript and then style loader takes that JavaScript and injects it into the Dom so we need to make sure that this happens first we have to translate the JavaScript before we can inject so you might think we would put style loader second they actually load in reverse order so we need to put style loader here and then CSS loader so when it encounters a CSS file it's going to start with CSS loader translate it to JavaScript and then injected via style loader so let's see if it works now I'm going to build NPM start let's go back check our mange is do a search for purple okay it's still here but now if we refresh the page it's now purple so how is that working if we look at our index.html as we've already seen there is no link tag as far as our purple body we only have this bootstrap CDN but there's nothing that has to do with our CSS that we wrote the way that it's actually getting added here is through that style loader it's being injected if we look in the elements tab in the head you can see that there has been some style added we didn't do that web pack did it for us so that is our first little taste of loaders I know it's confusing because we're loading CSS without ever actually connecting it to a link tag in a HTML file it's all happening through JavaScript so if I wrote more code in main dub CSS or if I had a bunch of other CSS files and they were all connected each one would be parsed and turned into JavaScript and then injected into the Dom now later in this course we'll see how we can actually spit out a separate CSS file so if you wanted to have in your your dist folder you wanted to have main dot CSS there are ways to do that and we can minify it we can do different things to the code but for now we've set up our first loader so I'm going to commit right now because I'm actually going to change things to show you how we could set this up to work with cess s CSS files so first I'm going to commit I'll be right back okay so we're now moving on to the next commit what we're going to incorporate sass so if you're not really familiar with sass it allows us to write what is it syntactically awesome style sheets it's the original what it stands for si SS but now most people use as CSS files it doesn't really matter but what we're going to do is write some nice sass that will override the default bootstrap colors like for this button right here we're never making that blue it's coming from bootstrap to override it we need to use sass so the first thing I'm going to do is actually install bootstrap locally so npm install' save dev bootstrap so that's just going to get me the copy of bootstrap on my machine and then I'm going to begin by in my index.html removing this entirely so we have no bootstrap right now we're not including it if i refresh we just get our purple color from that main CSS so now what I'm going to do is change my main dot CSS a bit and then delete this and I'm going to rename it to dot s CSS now we could have actually kept CSS and sass and I thought about doing that to show you two separate rules but it would be kind of weird to have CSS and sass at the same time because if you're already working with sass most people would just prefer to write sass because it's a lot it's easier it gives you some nice features that you don't have in regular CSS so if you want to see how the CSS works on its own like we did earlier you can just go back to this commit but I'm about to change things to use sass okay so in here what I'm going to do now is actually import bootstrap which is from this node modules to readjust installed it and the import looks like this at import bootstrap /s CSS slash bootstrap ok so right now we're not overriding anything we're just trying to get bootstrap to work again but using sass this time so if you don't know how sass works it's not valid CSS on its own it has to be compiled or turned into CSS so I can't just do this I can't say ok when you find an S CSS file any file that ends and dot s CSS use style loader and CSS loader because it's not CSS so this is going to cause a problem but what we do is use another loader if we go back to loaders here under style go back a page there is a SAS loader if we use less there's a less loader stylist if you like stylus and so what these will do is take in this case takes s and turn it into regular CSS and then we take that CSS turn it into JavaScript then take that JavaScript and inject it into the Dom so a three step process now notice that they they mentioned it it does rely on another package called node sass so we're just going to install all of them together sass loader and node sass so let's do that now npm install save dev sass loader and then it depends on node sass and while that's going I'm going to update my config file to say s CSS I've already done that and we need to make sure that it's now using sass loader remember the order matters this happens first I'm gonna add some comments here actually to make this a little easier to understand so this happens first I'll do one turns s CSS or sass into CSS and then this step two turns CSS into commonjs so it converts it to JavaScript which is what we see in our file here for example here is CSS but it's actually valid JavaScript code then the last step which is step three inject styles into dom okay so those are the three steps and we should be good to go assuming my install worked let's see what happens so I'll save and I need to update one thing forgot we're importing main dot CSS here that doesn't exist anymore now it is a s CSS file a sass file let's see what happens when I run NPM start moment of truth okay we go to our main show yes and we should see a whole bunch of stuff now this is all the bootstrap code that we imported it's turned from sass into CSS from CSS and some JavaScript which is what we see here and then it's injected into the Dom if we refresh hey we're back to our nice bootstrap now we haven't actually overridden anything so we're gonna do that next it's really easy now we have all the sass setup we can write sass wherever we want as long as it's an S CSS file and we're importing it somewhere I now can override the primary color so this is a primary button so the way we do that is by writing not capitalized dollar sign primary and then giving it a color like teal for now so if we'll save and we rebuild over here go back refresh the page you can see that the default primary color is no longer there we're getting our own color and likewise this error color right here is I believe danger is the name of that color so if I want to change it I would say at danger what am i doing at dollar sign danger is now going to be let's just make it purple just to see what happens I have to build again soon we'll get a dev server setup so I don't have to keep doing this anytime I change something webpack will know about it and it will reap undal for me and there we go we're getting purple now so we are successfully loading sass through web pack it's such a it's sort of a convoluted crazy idea but it's really nice we only have one file but we are including this bootstrap file too but imagine we had 20 different files they all get combined together they start a sass they turn into just CSS then CSS the JavaScript then JavaScript inject it into the DOM and remember there is no CSS file in our sources it's all just index.html and mange is mange s is adding the CSS in into the head right here and you can see all of those styles is really long because of bootstrap so we will see how to get it to spit out a standalone CSS file but we're not there yet so I'm going to commit again we're done with this little section we saw our first couple of loaders these allow us to have webpack pre process certain files in different ways we write a regular expression we install the loaders we say which order they should run in and we just let it do its thing that's what loaders are there for alright moving on I'm going to commit I'll see you in the next video so next we're going to talk about a really important feature of web pack which is called cache busting it's how we can prevent certain assets like our main bundle J s or our CSS bundle once we once we actually make a separate CSS bundle whatever those files are how we can prevent browsers from cashing them when we don't want them to be cached so I'm going to begin with a really quick overview of caching so I'm on just a web pack repo on github if I go to my network tab and I do a hard refresh hard refresh command shift are on a Mac you'll see I'm just looking at CSS only there are two CSS files and notice their names they are quite long and ridiculous in addition to that we have over here let's see under size you can see the size of the file now I'm going to do another refresh but a regular refresh not a hard one so these assets some of them might be cached so I'm gonna refresh without shift so no shift key notice that this time it says from disk cache so what this means is that it's using the copy that it already had my browser remembered this file it remembered this file name and it decided okay we already have that we're not going to go get the new copy because nothing has changed or we assume nothing has changed it's the same name and that's pretty simplified explanation but this can cause problems if right now we're using what mange is if every time we write code and we bundle it it's always called mange is then it could be cached and someone's browser and we could completely overhaul the application code and we build it again we push it up to our server it's running and that person request our website there browser might say oh I already have mange a s and just use that version so what we can do instead is add in this crazy jumble of numbers and letters which is called a content hash into the file name and what's special about that content hash is that it is actually determined it's based off of the content in the file itself so if nothing changes in that file we will end up let's just do a simplified version ABC so right now my code and mange s all of this code we run it through this special hashing function which is I believe it uses one called an md5 a relatively or very famous hashing function and we get ABC so next time we build nothing has changed we still get ABC but then I change one character or I delete everything and rewrite all my code I get a completely different hash so that time it might be this instead now they're much longer they're much more complicated but that's the idea so every time we change our code we get a new file name but if we don't change the code the file name stays the same so that caching still works but we're busting cache busting when we change something in the code we get a new file name so right now it's main dot j s every time that's a problem all we have to do is add in content hash like this inside of brackets and usually you want to do main dot content hash or vendor dot you don't want to just do content hash J yes and you'll see that's what they do on github if we go back to network refresh one more time github blah blah blah dot CSS frameworks so they use a but it's the same idea so we're going to implement that now with content hash and if I build right now it's going to take the contents of this file after it builds it and before it creates the new file but take all this code it hashes it using like I said I think it's md5 and it gets this special hash that only corresponds to the content in here and then it sticks that in the file name so let's see if it works NPM start we end up with content hash what file doesn't make for us take a look main dot 1 e da 8f blahblahblahblahblah and if I run it again without changing anything it should be the same still and it is one ETA so remember that one EDA now I'm going to change something in my code I'm going to add a console dot log to my index J s console dot log hi so now the code when we build main j s will be different and that means that the content hash will be different which means the name is different so now we have fa20 b15 blah blah blah so we are getting these new file names anytime we change the code but if we're not changing it it stays the same so this is really useful because if you have like we felt later on we'll have a vendor J S which will contain libraries things that aren't going to change as much those won't need to change they stay the same so we can just catch them or the browser can cache them but our application code might change more often so then we get a new file name each time which then when it's requested from the browser it won't be cached or it won't use a cached version because it's a new file name it hasn't seen before so that's all great but we have a problem how are we going to link how do we include that script or index.html right now is including mange is how are we going to dynamically predict or what are we going to do we can't just assume that it's going to be this every time because it changes so the answer is we don't write the script ourselves we don't include this script anymore we're gonna have web pack build our HTML file for us and stick it in this folder so it's going to automatically come up with the correct script name and put it at the bottom but to do that we have to learn about plugins so let's do it alright so plugins according to the docs give us the option to customize the web pack build process in a variety of ways very useful definition here so web pack comes with a bunch of these different plugins that they talk about on their web page but there's also a whole bunch of thirdparty plugins that you can find here awesome web pack contains I don't know a couple hundred of them so they do all sorts of things we'll see a few more throughout the course we'll find one we'll use one that it's going to help us minify our CSS and export CSS files we'll see one right now which is the HTML where are you HTML web pack plugin which will help create our HTML file for us and we'll also see one that helps us clean up our dist folder because spoiler you might you might notice right now it's getting clogged every time we run start NPM start we're getting some times we're getting new files if we changed our code we get a whole new file and if we use this clean web pack plugin it will help clean it up so plugins give us additional functionality so let's talk about the HTML web pack plugin it simplifies creation of HTML files this is especially useful for bundles that include a hash in the file name which changes every compilation that sounds like exactly what we need you can either let the plugin generate a file for you or supply your own template so we'll do both we're going to begin by just having it make a file for us the first thing we have to do is install it NPM install save dev HTML web pack plugin so I'm just going to copy that one move it over here and paste it while that's going let's look at how we use it so we require it in our config file and then there's something new we haven't seen yet plugins this is something it's a property we add to the object that we're exporting just like entry or output and plugins we pass in an array that contains as many plugins as we want so let's try it out so let's make sure we are requiring it in our web pack config at the top and then we can add in plugins which is an array don't forget your comma I always do that and then I get an error when I try and build and then we'll just pass in new HTML web pack plugin so we're making a new instance of it and for going safe so we haven't configured anything let's see what happens I haven't told it what name I want the file to be I haven't told it what should go in that file all I've said is use this HTML web pack plugin which is going to make me some file let's see let's run npm start hopefully no errors okay let's go back and look at our distal dur something changed index.html it's very simple very sparse it has a default title I didn't tell it to call it web pack app I didn't say it should be indexed either we can change that if you wanted to but I like index it's logical and most importantly our script is included automatically at the bottom so whatever this content hash is every time if I change it if I change those files we'll end up with a new script now we have another problem which is our content is not in here so even though my JavaScript is included if I open this file right now which for the record is not the same file I've been opening I've been using this index where I hardcoded in main j/s but that's changed now that doesn't exist or mange is is not being exported anymore so instead I need to use this index.html I need to open this file from my dist directory so I'll just do it from the terminal I'll do open dist slash index and we have a problem there's no content on the page our script is here as we saw or as I talked about so that part is working but what about our HTML content this is where we need to tell it a template to use so this line somewhere where is that you can either let the plugin generate an HTML file for you supply your own template or use your own loader so we're going to do the most basic template possible we're not going to use a library we're not going to do like handlebars or any other templating language we're just going to do a plain HTML file so I'm going to come over wrong way here we go I'm going to make a new file inside of my source directory and I'll call this template dot HTML and I'm going to go to my original index copy the whole thing over into template HTML but I'm going to delete things for example we don't need this bootstrap anymore web pack is going to take care of that I don't need this script tag web pack takes care of that I'm going to leave this SVG file we're going to back to it in a second or a separate video to address how we how does web pack work with images but for now this is our template so we're going to tell this HTML plugin we use this code from this file put the script tag at the bottom and make sure it's the correct script tag whatever the content hash is it needs to match so now all we have to do is in our web pack config here where we're using this plugin we need to tell it to use that template and we just pass in an object and a property so template and our template file is called template is no dot HTML whoops and that is coming from let's make sure we have this correct so this is from the web pack config file we're inside of source so we need to do dot slash source slash template dot HTML okay so it's going to use this template template dot HTML take this code put it into a new file which is calling index dot HTML by default and it's going to make sure to include our script tag at the bottom using the correct name the correct file name depending on which bundle we just built let's see if it works NPM start fingers crossed let's look at index ok so here's all of our code all of the HTML we needed and down at the very bottom we have a script tag and it's using our bundle so every time we build now if we change our code we rebuild we get a new bundle we get a new index file with a new script tag let's try running it make sure we're using the dist slash index dot HTML the image is not working we'll come back to that but our JavaScript is now loading our HTML is here it looks good okay so we saw a lot in this section we talked about plugins in general this is not the last plugin we'll see but we actually started by talking about content hashing and cache busting how do we set up web pack so that it uses that content hash it's really simple as we saw in the file name when it bundles and then that enables us to bust caches if we change something we get a new file name if we don't change it it's the same file name every time so the caching the cached version is just fine if we don't change it in addition this caused a problem because we need to dynamically link to this file name it's changing so that's what this plugin does we give it a template and it uses that it builds a file for us and this is the file we are now using so every time that we run NPM start it makes this new file and we open this file instead of this one we can actually delete this one entirely I'm going to do that right now okay so I'm going to commit so if you want to follow along committing now and I'll see you back in the next video so far we have one web pack config that we're using every time we build and that works great but often we want to have some different functionality for development versus production but at the same time there's a lot of stuff that is in common between the two so in this video we're going to actually have three config files one that is in common that's shared between Devon production and then one for dev and one for production so we can add things in like a development server a live updating server that we can just run instead of building the whole disk directory and having to manually open it we can use a web pack dev server on the other end of things with production we might want to minify we might want to export our CSS into a separate file so we're gonna basically set up the the framework for us to do that in this video just to show you what we're aiming for this is that react app I showed you very early on if I run NPM start it's not actually building a new directory it's not making a dist or a build directory instead it's opening up a live server you can see localhost 3000 my app is working and if I change something it updates automatically now if we go back and I instead run npm run build this is going to use production mode for web pack and you'll see that we don't get a live server it takes longer things are being optimized and minimized and we end up with an exported directory it's not exported but we end up with a new directory called build once it finishes so if I do an LS you can see now there is a directory called build CD build and there's a couple of files no live server but things are compressed there minified and they're ready for production so we're going to go for the same sort of idea we're going to have npm start start up a dev server in our little mini app and then npm run build will actually run it in production and create the dist directory but first we are going to make a couple of config files so we have web web pack config i'm going to make another file called web pack dev is and one more which will be web pack let's do prod PR OD is and i'm gonna begin by just copying what we already have into both of them and then we can selectively delete things so for example in production we want mode to be production and entry point we can get rid of because we'll keep that in the common one which i'll rename this to be common web pack commonjs these names are up to us we're going to pass them in when we actually run web pack from our package.json script so web pack common I'm going to keep entry point I'm gonna get rid of mode I'm gonna get rid of output because in my dev version I don't want the content hash in my production version I do it's easier in dev to just not deal with the hashing just have you know main CAS it's not a big deal but we can at least set up some differences so you can see it's working so we can get rid of entry but we'll do mange is over here we'll do main content hash is in production what else we can get rid of the plugins for now from dev and from prod those will be the same but we'll keep it in common we can keep the s CSS loading eventually will be minifying our sass and our CSS in production and not in development so this will leave the common file but for now it can stay here so this is the stuff that we have in common between the two and then in dev I'm going to get rid of all of these rules here and just keep it like this mode development production same thing so we'll be updating this as we go but right now this isn't going to work well it could work but we're not going to merge them with common so if I want dev to also include the functionality from common production to include the same functionality from common I'm going to use a package called webpack merge so npm install' save dev web pack merge and this allows us to very easily merge web pack config together so that finished and I'm going to start by exporting actually I don't need to do that it's already module about exports from web pack commonjs now I'm going to require it here so we'll call it common equals require and then the path is dot slash web pack common so that gives us the contents of this file of common and then I'm going to import merge Const Marg equals require web pack merge we just installed that web pack merge right there now what I can do is set module dot exports to be the function call of merge or I pass common in and then this object you need to make sure I add my closing / end on there and what this will do is say merge whatever is in common which is this with what we have here in this object okay and then I'm gonna just duplicate this same thing we don't need HTML web pack plugin in this file we're not using it we're using it in the common file so I'm going to go to production delete that and then I'm just going to copy the same line here right here and then add my paren at the end alright so all we're doing is changing mode and the output dev vs. production looks good save both files now we need to tell web pack which ones to use so in package JSON when we run NPM start we're gonna make it config web pack dot dev a s and then when we run build we'll set it to be web pack dash dash config web pack dot prod is and keep our fingers crossed let's see if it works so let's start with hmm let's do dev first so NPM start NPM start moment of truth it looks like it worked let's look at our index the new index.html you can see that the script is just mange a s it's not main dot blah blah blah ABC fffffff something like that je s and if we look at the script its mange is it is not minified because we set mode to development now instead if i run npm run build so not just npm built with npm run build that's going to call web pack with our production file with this config file and let's look at our index you can see if we now have the content hash and if we look at the right file one seven nine d right there it is minified ok so this is just the beginning of setting up development versus production and we have it set up but there's a lot more that we can do to differentiate this two so the first thing I'm going to do is set up a dev server a web pack dev server so that when I'm in development I don't have to keep building like this I don't have to do n p.m. start every time I want to see something and it's really easy to do NPM install save dev web pack dev server and this is actually not something we really have to add into our config file instead we're gonna go back to our package JSON which is where are you oh my guess I closed it down or I'm blinded okay here it is instead of web pack we're going to run web pack dev server and then at the end we can optionally pass in open it doesn't have to be at the end but somewhere a flag and what this will do is open up the window in our browser for us so let's see if it works when I run NPM start we should now end up with the dev server open and opening it there we go it opened up automatically for me I'm getting all my code here and if I go and make a change let's say I changed the color in my sass file instead of teal let's go to magenta and save you'll see it automatically rebuilds and my browser refreshes it updates and you can see that happened over here well it's gonna be kind of annoying to point out but you can see it rebuilt again and the certain things change to detect them essentially you'll see a bunch of scrolling text if you change something the other thing I want to make clear about this if I actually remove the dist folder so RM dash RF dist you don't have to do this but I'm going to delete it now if I run NPM start which is using the dev server here we go we see our code let's tweak it back again one more time let's go back to teal save it updates automatically we'll close out with ctrl C if I do LS if I do LS if I use LS there is no dist folder so it actually does everything in memory it doesn't actually make a folder for you when you run it with web pack dev server which is nice we don't have to keep you know deleting these files or making these files and overwriting them it's all in memory but then if I want to spit it out npm run build this will give me my production version where i can now you know open it up manually or start i'm gonna put it on a server somewhere and you know use this as an application so now i would need to open dist slash index and it's working well aside from the image which we haven't addressed yet but our javascript is here yeah everything looks good alright so that's the end of this video I'm going to commit right now if you're following along I'm adding a bunch of detailed notes to the commits by the way so if you ever get lost you're not sure which one I'm using there's the main commit message and then some bullet points below that explains you know what we did all right so I'm going to commit now and then I'll be back with another video in this video we're going to talk about two loaders for web pack file loader and HTML loader as well as a nice plugin called clean web pack plugin so we're going to start with the loaders right now we have this image that isn't really working well it's not working at all and actually the reason it's not working right now is because my path is incorrect originally we had our index.html file right here on this level and the file it the image is assets slash web pack SVG so the path was just dot slash assets slash web pack SVG and I copied this whole thing into my template but now my template is inside of the source directory so what I could do is just change it to be dot dot slash assets as you can see this should work if I rebuild one more time my index dot HTML in the dist folder is now linking to dot dot slash assets so this does technically work but this is really not a good way of doing things for a couple reasons one is that we are hard coding this path in and it relies on assets being in a sort of a sibling folder being in the same folder as dist the dist folder is supposed to just contained everything we need it's supposed to be you know the the build of our app it should have everything we need contained in this folder so the fact that our assets is on its own and we just happen to link to it correctly is not ideal so what we're going to do is set it up so that my assets are actually copied into this folder and we'll work on hashing them for cache busting so they'll have new names sort of like our bundles down here and the links are going to be dynamic the source and our image will be dynamic so there's a couple things we need to do the first thing I'm going to do is move my assets into source so source will have an assets directory will reference it in here webpack will then take those assets copy them over to dist into a new folder and then I'll link to them and it will be sort of magic ok so I just moved the assets folder and then the path now needs to change in my template so my template is in the same folder so it's dot slash assets slash web pack SVG ok so that works but then we're going to have the problem when I run npm run build and I open index it's looking for dot slash assets but there is no assets folder in dist so we're back to our same error or issue before so we're gonna do two things to loaders to help us and the first one is called HTML loader and I have the docs open for it here on github what it will do is replace well any time it encounters a source for an image it will require that image it will tell webpack hey here's a file that we're getting we need to load I need you to you know figure out what to do with it and then we'll have to tell web pack how to handle those files like had to do with a CSS file or an S CSS file but instead we'll tell it how to handle JPEGs and P and G's but we're going to start with the HTML loader so it's pretty straightforward npm install save dev HTML loader and while that's going in our web pack common because this is common across all of it we're going to add another rule or the test will be for dot HTML at the end of a file name and then we're going to use HTML loader just like that we don't really have to configure very much this is fine on its own so what happens is that we're using this template HTML it's being required essentially web pack is going to encounter this and because we have this new loader we just added in that says hey if it ends with HTML let me take charge of it use HTML loader so then that's going to come across this source and it's going to require this image in JavaScript and then web pack is going to freak out because it doesn't know what to do so I'm going to show you that right now if I do npm run build we're gonna get an error here we go so what happens is it comes across this SVG right here because it was imported and it says I don't know what to do module parse failed unexpected token you may need an appropriate loader to handle this file type and indeed we do so we're requiring any images in our template now they are being required imported into JavaScript but now web pack doesn't know how to handle them so this is where file loader comes in so this will help us actually load those SVG s or PNG s or JPEGs so we're going to begin by installing it so NPM install save dev file loader and while that's going we can add a new rule and this one the test is going to be a bit different I'm going to copy this but instead of dot HTML and instead of just hard coding dot SVG I'm going to give it a couple of options so SVG or PNG or let's see JPEG or gif for now or jiff however you pronounce it so in a regular expression this is or so any of we'll match as long as there's a period and then one of these choices and then a dollar sign which signifies the end of the line so it's dot SVG and nothing else dot PNG and nothing else and then instead of just doing use and then passing in file loader I'm going to actually use a different syntax here where use is an object and we tell it the name of the loader file loader and then we pass in some options and the reason I'm doing these options is that I can specify things like the name of each file will begin with something simple name dot txt so remember HTML loader is importing this asset and JavaScript web pack doesn't know what to do with it but now we have this loader and we're telling it you should make a copy of this move it over into the dist folder with this name so whatever the file name is dot the extension but I'm also going to add in the hash just to show you that we can do that and it's not as far as I know it's not content hash like it is up here or is that in production it's hash maybe both will work but this is what I've seen in the Docs and then I'm going to give it a output path and this is where our assets will go so I could call it images just to show you that we can do something different and now instead of our disk falter that close node modules down when we run this web pack is going to encounter this image because the HTML loader encounters it inside of our template because we used a source it imports it and this loader is triggered right here where we have SVG that's matching so then it copies it over into a new folder called images in our dist and the name is going to be web pack dot SVG with a hash in the middle okay let's see if it works so we're gonna run npm run build and it looks good so far instead of dist we have a new images folder notice the file name it's really long web pack dot content a SVG and the best part if everything works our index.html now has image with the source set to that it's no longer set to what it was before assets slash whatever SVG it is dynamically linking to the correct image so now if I added another image into the assets folder whatever I added in there if it was SVG or PNG or JPEG and then I used it in my HTML template a used image source equals something it would be required it would be loaded copied over with a new name there's other things we can do as well like setting a compression under images but I'm going to keep it simple so we are now loading the files correctly and if we go refresh the page we see the image and if we use our live server it also should work just fine and it does ok so now moving on to the plugin I mentioned the clean web pack plugin you might not notice this yet but if I go and make some changes to some of my code let's say I go back to index J s and I add another console dot log it doesn't matter what it is console belt lock J I meant to type hai but I mistyped if I build again NPM run build what happens is that we end up with another bundle and every time we build if the code changes we get a new j s file and we only use one of them our index only links to one of them each time so we'll quickly install a plugin called clean web pack plugin which will delete the dist directory every time we build and then we'll have a clean slate to add our code into or for web pack to do it so to install the plugin it's npm install save clean web pack or clean web pack plugin and while that's going let's go back to our web pack common although we actually only need to use this in production when we're using the dev server it doesn't matter because those files are in memory when we stop the server they go away in production it's actually exporting it's building the dist folder and making those files so I'm going to import clean web pack plugin equals require and then it's just clean web pack plugin okay now I can pass in plugins here like we have over in commonjs where we're doing this HTML web pack plugin can do the same thing but this time it's new clean web pack plugin just like that so right now every time we build if we change our JavaScript or CSS or any of our code we end up with a new bundle file and that's just going to keep going until we delete them but now with clean web pack every time I run npm run build assuming I didn't have a typo we'll see that it is cleaned up and we only have one file so everything that was there is either it's deleted and rebuilt or if it's not being used if it was left over from the last build it's abandoned it's completely removed and again we only need that in production it wouldn't hurt to add it to common or to dev but in dev our files are using the dev server and they're just in memory temporarily they are not actually written down they're not saved to the system alright so we saw two things here file loader with HTML loader to get our assets into a new directory and have the links work correctly and then also we saw how to quickly add into production a clean web pack plugin alright so I'm going to commit now and that's it for this video next up let's talk about configuring web pack to work to spit out multiple bundles instead of just one with everything we might want to separate out our own app code from our vendor code so let's say we're using the bootstrap JavaScript and a couple matanov jQuery and maybe some other library that we need but they're not going to change very much or ever in our application but our main code will so we can have two different bundles and one of them will be vendor dot content hash j/s it will stay the same almost all the time unless we update that code or or I don't know we upgrade which version of bootstrap JavaScript we're using or something like that and then we can have our main that changes more frequently so this is actually not too difficult to do all we do is set up a different entry point if we want so inside of source I'm gonna make a new file called vendor J s and to start I'm just gonna put I don't know alert hi from vendor just like that and then I'm gonna go into my web pack Commons is where we have our entry it's set to index J s I'm going to make it an object instead and then each property will be the name portion of a file main will be based off of index J s and then vendor will be based off of dot slash source slash vendor J s so now webpack is going to work its magic on both of these entry points it's going to take this first one and it will call it main but remember in production we have a problem in our output where we're always calling everything main so I'm going to refactor this to be named in brackets which will be main or vendor dot content hash and I'll also do dot bundle J s and then in dev I'm going to change this to be named dot bundle dot j s so that name is coming from here main or vendor we have two entry points let's see what happened to no need to add my comma all right let's try it with NPM start using the dev server it opens it up okay so we get high from vendor and then everything else loads okay that alert is kind of screwing things up but if we look in our sources we have a main bundle and a vendor bundle and our vendor bundle includes our alert as well as some other webpack stuff and our main bundle includes all of our files and everything that we have in our app logic the code that we're writing so let's go back and test it now in NPM run build and just make sure that the content hash is working so our file names are named correctly we have main content hash bundle bjs and vendor bundle jeaious and then instead of our index we now have two script tags as you can see so I didn't add either of those both of them are added automatically so you can see now hopefully you can see how this becomes pretty easy if you want to have multiple files or multiple bundles all you do is add a separate entry point so let's now go and add some bootstrap JavaScript in so you can see the utility of this so instead of my vendor J s I'm going to just import bootstrap just like that we already installed bootstrap up in node modules and we're using the CSS but we're not using here's the CSS by the way we're not using the JavaScript if I wanted to add a navbar in which requires JavaScript let's just use this simple one here which will use JavaScript when you collapse or when you shrink the page down it will collapse into the little hamburger menu so if we don't have JavaScript it won't work it's right now if I just comment that out I go to my template at the top of the body I'll just paste in my navbar save and now if I run NPM let's do just a local server NPM start we get the navbar and it does collapse but the toggle the drop down is not working we're not getting that drawer because javascript is not running from bootstrap so we go back to our code and vendor JSL import bootstrap and you can see we run into an issue so after I've saved over here and I imported bootstrap I didn't even have to restart the server but it says that bootstrap can't resolve jQuery which it relies on and popper j/s so two dependencies I'm going to install NPM install save dev jQuery and popper jeaious on the bootstrap Doc's it makes it pretty clear that you need those in order to use bootstrap I just didn't include them right away because we were only using the CSS which doesn't depend on those so now if I run NPM start and here we go as I collapse this down there we go our JavaScript is working lastly let's do NPM run build and we'll see our vendor j/s that has spit out right here has all of bootstrap JavaScript included it also has things like jQuery in here which is if I search for jQuery you can see there's what 71 instances of it here is where it's included we also have bootstrap we have popper J s so all of those dependencies are loaded and that's what our vendor J s file now contains and then we have our app code which is in main j s and it's all being minified it includes the bootstrap CSS we will in the next video work on extracting CSS out into its own file but for now it's all happening inside of this file mange is okay so we just split up our code we imported bootstrap into vendor J s you could follow this pattern with whatever other libraries you're using so aside from bootstrap there's other JavaScript libraries that you want you can put them in vendor J s and they will be bundled together into their own file and it will always be that same content hash unless those libraries change or you somehow add something new in here or change the code this allows a browser to cache this file separately which is less likely to change and then your main file could change a lot more often all right so I'm going to commit my code with git and then in the next video I'll be back to talk about minimizing HTML and CSS extracting our CSS into a separate file right now we don't actually see a file here but it's just magically working so next we're going to talk about minifying CSS as well as HTML but first we're going to discuss extracting our CSS into its own file or files if we prefer so right now everything is being loaded through JavaScript here is all of our bootstrap CSS as a giant string in our main J's bundle which then is injected into the Dom as we've seen before as a style tag so this works there's no problem with it as far as functionality it's it's getting there our Styles show up but in production especially it's nice to have a separate CSS file rather than waiting for JavaScript to inject the styles and the main reason has to do with performance if I load this page I don't know if it's going to show up in the screencast because it's so quick if you watch it over here you'll see there's a flash of the unstyled content every time I reload the page or almost every time so what's happening is that the page loads there is no CSS at all all that is happening is a single or two JavaScript script tags at the bottom of the page so all of our content loads the HTML elements h1s inputs buttons then we get to this script and these two scripts run and one of them takes our CSS and it finally injects it into the Dom so it happens very quickly but everything is actually loading first so there is no stylesheet up here that is going to style things first so there is a flash of unstyled content there it is one more time so in production especially we want to avoid that it's it's just not a good experience for users we want our CSS to load have it be up in the head everything is styled and then our JavaScript can load and it might take a couple milliseconds or sometimes longer and we won't have to wait to get our Styles now the reason we're not going to do it in development mode is that it takes time to spit out CSS files it's much faster when you're just developing with the the dev server you don't want to wait each time that you save something or you change your code you don't want to wait for it to recompile and rebuttal and spit out new CSS files so we're just going to do it in production and the way we do it or one way to do it is using a plugin called mini CSS extract plugin so we're going to begin by installing it so it is NPM install save dev mini CSS extract plugin and while that's loading we're going to go into our web pack production and import or require that module and then we can use it inside of our plugins so we'll pass it in we'll do new mini CSS extract plugin just like that and save and if we want we can specify a couple of options we'll just do file name and have file name be the same sort of pattern we've been following so name dot and then we can have the content hash dot CSS alright so that's the first step but this actually isn't enough the next thing we need to do is make sure we're using this instead of the style loader that we're using right here right now we're using this all the time it's in common webpack common so every time we load as CSS the same would apply if this was CSS we are first running it through sass loader and then CSS loader which remember this one converts sass to CSS this one turns CSS and the JavaScript this one is what actually injects those JavaScript strings of CSS into the Dom we don't want this to happen in production we're trying to avoid that instead we want to use this mini extract or mini CSS extract plugin to grab those lines of CSS and put them in a new file so I'm going to actually move this this entire rule away from the common config file I'm gonna put it in dev because in dev we do want it and I need to grab module rules need to follow the same syntax that we had I copied the wrong portion okay so everything looks the same module rules and then in production we need to do the same thing so module rules but this time instead of style loader we're going to change this to be mini CSS extract plugin dot loader so it comes with a loader that we can use as part of the plugin and this instead of inject Styles into the Dom this is going to move or extract CSS into files so remember they load in or they run in reverse order this happens then this happens and then finally it should create new files for us including the CSS that was loaded by CSS loader that was originally converted from sass to CSS by sass loader oh right let's see what happens now we will do NPM run build fingers crossed no errors you never know and you can see it takes a little while but it should spit out a CSS file and indeed it does so we have this CSS file now that is separate and if we look at our index.html that it gives us it now includes a link tag up at the top so we're no longer waiting for the page to load for the JavaScript to load then inject our styles into the head it's all happening at the beginning it's compiled it's built this way from the getgo so that plugin is extracting all of our code all of our CSS into one CSS file you can configure it to do it in multiple but for now one is fine this is all our CSS so bootstrap is pretty much all of it we override those colors using sass but if we had other styles as well if they would be in here assuming that we were writing in them in this file and now if we refresh the page let's make sure it still works notice we don't get that flash of content anymore I'm doing the same thing but it's not we're not seeing the unstyled content our link tag is included in the correct spot up in the header and I guess I should call attention I use the content hash again just to help with caching and to prevent caching when we don't want it to happen if we change the file this cache will change all right so that should be review from earlier videos so notice that this is not modified this is quite large so one thing we might want to do is minify this CSS and it's not very difficult to do there's a plugin to help us and it happens to have a very long name in my opinion optimized CSS assets web pack plugin one of the larger packages larger package names a large package oh boy one of the larger package names that I've come across so optimized CSS assets web pack plugin is going to help us minify our CSS so the first thing we're going to do is install it so we'll do that now NPM install save dev optimized CSS assets web pack plugin while that's going we're only going to minimize our CSS in production we don't need to do that in development it's a lot easier if we only do it in production it takes time but it's also you know frustrating if you're trying to debug something in CSS it's super minimized it's not a huge issue you can do it in development if you want but I'm just gonna do it in production so we first need to import it here I'm just going to use const to match everything else that i've been doing and where we actually use this it's not as a plugin on its own we add a new property here called optimize that we haven't seen before and then within that we specify minimizer and this is an array multiple minimizer's because sometimes we're minifying javascript or minifying CSS like we are in our case and I'm going to pass in new optimized CSS assets plugin just like this and then add my comma okay before I run this to show you what happens let's take a look at two things I'm going to close down a lot of stuff we have a lot going on so inside of our build folder we have our CSS which is not minimized it's a very long file then inside of our JavaScript files we have minimized code so I'm showing this to you for a reason this is all minimized or minified now if i run npm run build where we're telling it to use optimized CSS assets plugin to minify our CSS let's see what happens okay so that finished up and let's look at our CSS now it's minified so that part's working but something weird happened if we look at our JavaScript it's no longer minified why is that happening so it's kind of annoying that this happens but when you set mode to production by default optimization minimizer is set to use a javascript minify but then we're overriding it right here by telling it to use this off to my CSS assets plugin it basically ignores what was there before which was minifying the javascript terse rjs plugin that will we're going to reintroduce in just a moment so we have to manually add it back in it was there but by adding in this plugin we completely override what was there originally inside of minimizer so now we don't get JavaScript being minified only CSS and another thing I'll show you if we look at the message we get it says warning an asset size limit the following assets exceed the recommended size limit 244 kilobytes first of all a lot of people think that this is a pretty sensitive or a low threshold for this warning 244 is not really a huge file but you can see our vendor j/s vendor bundle jeaious is quite large now and weren't getting this before because it was being minified it's not anymore so if we look at the file it's quite long it's all a bootstrap and jQuery and popper j/s so now we're going to add in the plugin that was already being used we don't actually have to install it but we do need to require it and it's called tercer webpack plugin again I haven't installed this myself it's already inside of node modules if you scroll down look for T cursor you'll see come on where are you right there tersh or web pack plugin I promise you I didn't install it myself it's not in my package JSON but it's there because web pack was using it already you can see it's not in here okay so we're going to require it and then pass it in as a minimizer new tercer plugin so tercer is the default minimizer for javascript and web pack as i already showed you it was being used before but we overrode it and ignored it so we're adding it back in it used to use webpack used to use Uggla fire by default I believe now it's tire but they do pretty much the same exact thing they minify your JavaScript so let's see what happens now let's try it npm run build again i'm only minifying in production for my javascript and doesn't work you can see how long this takes by the way so we don't get that warning anymore that's it's not saying that our file is too large vendor is now 167 kilobytes instead of what 400 something yeah 484 so a significant reduction in size and if we look at vendor it's minified if we look at our main file it's minified if we look at our CSS it's minified there's only one thing that is in index.html now it's very short but we can optionally minify our HTML in production we don't have to use any additional plugins we already have this HTML web pack plugin right here I can pass in other options I can specify minify this is part of the the plugin documentation where I found this and instead of minify I can do things like remove comments and set that to be true or false but I'm not going to do it here inside of webpack common because I don't want to minify my HTML in development so once again I'm gonna pull this out and move it to production so instead of our commonjs web pack config we don't have any plugins they don't share anything at least they don't share it in the exact same way so now inside of dev I'm going to add in this plugin again so plugins and paste that in add my comma and I need to make sure I am requiring it at the top of web pack dev and then in web pack production I'm going to require it as well but I'm going to alter some options I'm going to pass in some minify options so let's do that now right here paste it in and after template I'm going to say minify and the three I'm going to go with our remove attribute quotes collapse whitespace remove any extra whitespace and remove comments set that to be true so let's let's do something in our HTML where we'll actually be able to detect this will tell if it's working so let's go to our template file and add some comments in here like mm how about above the navbar we'll say bootstrap navbar and then let's add in some white space I'll just do a single line and we'll just leave it like this for now we'll look for that top comment here bootstrap navbar and see if it makes it in to our end result when we are in production so let's now run NPM run build and twiddle our thumbs for a moment okay let's look at index.html all right definitely minified you can see the attribute quotes have been removed so type equals text there's no quotes for example we have no white space or most of the whitespace has been removed and then also my comment is gone at least I can't find it if I look for it I'm pretty sure we'd see it pretty pretty easily because it would stand out with a different color so it's not in here and let's just check that it does work so i refresh the page okay it's loading we're getting all the code that we expect scripts working its minified we're overriding bootstrap or using sass change those colors we have separate CSS files or single file where are you right here it's minified we have our minified vendor J s and our may NJ s and then our index.html minified as well so everything has been crunched down if we have our images to forget about that and then instead of elements we still can see everything that's normal right we're by minifying it we're not like corrupting it we're just shrinking it down and collapsing it into as little space as possible now let's just verify it still works in development so NPM start notice how much faster that loaded for me that took maybe a second or two to build originally and then rebuild should actually be faster and if we look at the code index is not minified we can see my comment is here all the attributes have quotes our code our javascript is not minified and there is no CSS remember it well it's in the files but there's no CSS file on its own and remember the reason we do that is that it takes a while to build those files and in development if I change something I don't want to wait and that's it for now so I'm going to commit we have a whole bunch of things going on in web pack and we've honestly only scratched the surface in some ways because there's a lot of other things to talk about I mean if we look at those that list I showed you early on if the different plugins available of the different loaders web pack can do a ton of stuff but as you've seen it's really how I put this intimidating it can be overwhelming when you're starting out and it's something that you only really do once every project maybe you go and update something but often you know you're not you're not writing code in this file and your web pack config all that often especially if you work at a company on one large production app the config file doesn't change all that much so a lot of people don't have much experience with it and it takes some time and some practice to get used to it but there's just nice little patterns you follow you know you just remember rules tests use there's certain loaders that you use frequently like style loader and tercer js4 minification you know there's these different patterns but at the end of the day all that we're doing is taking a bunch of different types of files in our case an SVG file an HTML file JavaScript files s CSS and we combine them in some ways not all into one file but we combine JavaScript into different files all of our different J's files you know we haven't touched these in a while but five different files plus the bootstrap j s+ jquery plus popper J s and we spit them out into bundles there minified they have hashes in their name that pertain to the content inside of them so those hashes will only change if the content changes which helps with caching and preventing caching when we don't want it then we have our CSS being pulled out in in production we have our index.html being built for us with all of the links included dynamically so we don't have to write any of these script tags right this is all done for us and then we set things up in development mode to be a little simpler we have our dev server that is going to update and rebuild anytime we change something just serving it on localhost we aren't minifying you know we aren't using the content hashes our CSS is not being extracted or hTML is not being minified but we're still joining together all these different files and making sure everything works for us okay so I'm gonna leave it off here I know that was a lot I'm gonna commit this will be the last commit for now please let me know if you have any feedback I'd love to hear what you have to think any suggestions or things you liked take a look at the code of course look through my commits and I think that's it all right talk to you later talk to you later all be on YouTube later if you enjoyed this video my cat and I really appreciate it if you share it with anyone you think would get something out of it I'll leave a comment subscribe please turn on notifications oh so annoying asking you to do that
