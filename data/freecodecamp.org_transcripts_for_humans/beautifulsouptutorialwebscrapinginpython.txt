With timestamps:

00:00 - if you enjoy content like this please
00:02 - subscribe to the lucid programming
00:03 - channel for more programming tutorials
00:05 - in this video we're going to be going
00:06 - over a very quick overview of both the
00:09 - beautiful soup module in python as well
00:11 - as the requests module in python as well
00:13 - so if you're not familiar a very brief
00:15 - introduction to both of those requests
00:17 - is going to be a module that's going to
00:19 - allow us to access various resources on
00:21 - the web so allow us to obtain uh
00:24 - information from various websites
00:26 - navigate to those websites and beautiful
00:28 - soup is going to allow us to parse that
00:30 - information so once we navigate to those
00:32 - websites we might want to extract
00:34 - certain types of content from those
00:36 - websites and beautiful soup is going to
00:37 - allow us to do that so this is going to
00:40 - be a very much from the ground up video
00:42 - the only thing i assume that you have
00:44 - installed on your machine is python and
00:46 - pip pip for installing python packages
00:49 - if you have both of those things
00:50 - installed in your machine you should be
00:51 - ready to follow along one to one and it
00:53 - should work out just fine so we're going
00:56 - to go over some of the basics of both
00:58 - the requests and beautiful soup module
01:00 - in the first part of this video and then
01:01 - we're going to bring all of those things
01:03 - that we learned into a very real project
01:06 - or a very simple project i should say
01:07 - this is really meant to be a very
01:09 - minimal introduction to both of these
01:11 - modules and just to see an example of
01:13 - how you can be effective with both of
01:15 - these things so let's just get started
01:17 - by installing both the requests and
01:18 - beautiful soup modules on your machine
01:21 - you probably will already have requests
01:23 - installed but we'll just make sure that
01:24 - you have it installed in any case so go
01:27 - ahead and open up a terminal or if
01:29 - you're on windows command prompt and go
01:31 - ahead and type in the following two
01:34 - lines so pip install requests
01:37 - if you already have this installed on
01:38 - your machine like i do you'll see some
01:40 - requirement already satisfied messages
01:42 - pop up here that's totally fine if you
01:44 - don't it will install on your machine
01:45 - you probably should have this installed
01:47 - already the other one is install
01:49 - beautiful soup 4 so go ahead and say pip
01:52 - install bs4 and i already have this
01:54 - installed on my machine so we're good to
01:55 - go all right so we've got all the things
01:57 - that we need installed i'm just going to
01:59 - go ahead and close that window and we're
02:00 - going to move back to our file here so
02:03 - we've gone ahead and done this part
02:05 - we've installed both of these modules
02:08 - so what we're going to do next is we're
02:09 - going to import them and use them so
02:12 - we're going to import requests and then
02:13 - we're going to import a specific class
02:15 - from the bs4 module that we installed
02:18 - specifically the beautiful soup class so
02:20 - this is going to allow us to in the
02:22 - terms of beautiful soup superfly content
02:25 - that we obtained from a website and
02:27 - again that will make it parsable so we
02:28 - can extract information from that
02:29 - content
02:31 - okay so the first thing that we're going
02:32 - to do is we're going to use the request
02:34 - module and i guess before i should go
02:35 - for before i go any further i want to
02:37 - mention that all of the code along with
02:38 - the comments that is kind of
02:40 - supplementing what i'm saying here all
02:41 - that is going to be provided on my
02:43 - github and the link to that will be
02:44 - accessible in the description so you can
02:46 - go ahead and download that if you want
02:48 - some additional information as to what
02:49 - i'm doing or saying
02:51 - right so back to this we're going to
02:52 - create a variable called results and
02:54 - we're going to say request.get and then
02:56 - we're going to pass in the website that
02:58 - we that we want to access so in this
03:00 - case i'm just accessing the homepage of
03:02 - google so i'm just going to move my
03:03 - browser over here so i'm just going to
03:05 - access this page right there
03:07 - so i'm just going to go ahead and get
03:09 - that and then what we're going to do to
03:10 - make sure that the page was actually
03:12 - accessed is we're going to print out the
03:14 - status code which is just an http status
03:17 - code letting us know whether or not the
03:18 - page was accessible or not so 404 errors
03:22 - are an http code that's letting you know
03:25 - that the content you're looking for is
03:26 - not present a 200 code is letting you
03:28 - know that the content that you're
03:29 - looking for is present and the response
03:31 - is okay so i'm going to go ahead and
03:33 - write this i'm going to run it so i'm
03:35 - going to say python this file is called
03:37 - beautifulsoup and request.pi if i run
03:39 - this it's going to run it let me just
03:41 - clear the terminal because it's kind of
03:42 - messy
03:44 - let me run that again and we see that
03:46 - the the code that we get back from the
03:49 - google.com homepage is 200 which
03:51 - indicates that indeed the page is
03:54 - accessible
03:55 - so another thing that we can do is we
03:56 - can also print out some other
03:58 - information of the webpage that we just
03:59 - accessed like the http headers and again
04:02 - for more information on both the headers
04:04 - and the status codes you can navigate to
04:06 - these links that are in the comments
04:07 - that point to the wikipedia articles on
04:09 - both of those topics so i'm just going
04:11 - to go ahead and write this and we'll see
04:13 - what the headers look like so it's just
04:14 - some extra information on the google.com
04:17 - homepage so for instance we can see here
04:19 - the domain is google.com some other
04:21 - information here as well that might be
04:23 - of use i'm just going to go ahead and
04:24 - close that it's more or less just to
04:26 - verify that not only is the page valid
04:28 - but it's also indeed the page that we
04:30 - wanted to obtain
04:32 - let's keep moving down here so the next
04:33 - thing we're going to do is we're going
04:34 - to extract the content of the page and
04:37 - that is actually the source of the page
04:39 - and we're going to store that in a
04:40 - variable so the the
04:42 - object that we created here this result
04:44 - the result has these built-in methods
04:46 - status code headers that's how we were
04:48 - able to print out both of those types of
04:50 - information that we just printed out
04:51 - there another one that it has is dot
04:53 - content and that is going to return the
04:56 - source of that page and then what we're
04:57 - going to do is store that into a
04:58 - variable called src for source and then
05:01 - we're going to have this variable so
05:03 - let's go ahead and run that and i'm just
05:04 - going to print out the source so you can
05:06 - actually see what it looks like i'm
05:08 - going to run that
05:09 - like this
05:10 - so we see a bunch of
05:12 - output here and this is really just the
05:14 - web source of the google.com homepage
05:18 - so i'm just going to go ahead and delete
05:19 - that that's kind of a lot of stuff all
05:22 - just thrown on the screen that's great
05:24 - that we can actually access it now we
05:26 - turn to beautiful soup because this is
05:27 - going to allow us to actually do
05:29 - something with that content so what
05:30 - we're going to do now that we've
05:32 - obtained that content we've navigated to
05:34 - that webpage we've verified that we're
05:36 - on the actual web page that we want and
05:38 - now what we're going to do is we're
05:38 - going to pass that source variable into
05:41 - this beautiful soup class creating a
05:43 - soup object and this really is just kind
05:46 - of
05:46 - an object that beautiful soup creates
05:48 - from this source and it
05:50 - allows us to extract certain types of
05:53 - information that we might want to
05:54 - extract from this thing so we're going
05:56 - to store the result of that object in
05:59 - this variable called soup so i'm passing
06:01 - in source here and there's an extra
06:03 - parameter here this lxml you can more or
06:06 - less just ignore this extra parameter it
06:07 - doesn't really mean too much if you
06:09 - don't have it in there you'll get a
06:10 - warning essentially to tell you to put
06:12 - it in there so it's there for all
06:14 - intents and purposes but you don't
06:15 - necessarily need to worry so much about
06:18 - why this is here
06:19 - so we have the soup object
06:21 - so for instance one thing that we could
06:22 - do now that we have the soup object is
06:24 - we can do things like give me all of the
06:26 - links on the page so what we can do is
06:29 - we create a variable which i can call
06:31 - links and i can say
06:33 - find all so final is a method provided
06:35 - from this beautiful soup object that
06:37 - we're accessing here and what do i want
06:39 - to find all of on this page i want to
06:41 - find all of the a tags so this a is the
06:44 - argument that's been passed in it tells
06:46 - beautiful soup to say hey find all of
06:48 - the a tags or all of the links on this
06:51 - page and then store them in this
06:53 - variable links and then we're going to
06:54 - go ahead and actually just print those
06:55 - out to the screen and just so we don't
06:57 - get like too much content i'm going to
06:59 - go ahead and comment out the previous
07:01 - print statements here just so we don't
07:02 - have too much output of the screen
07:05 - so we've got our links we'll print them
07:06 - out and then we'll print a new line so
07:08 - write that give it a run and let's see
07:10 - what we get so this is the output that
07:12 - we just ran here and we can see that we
07:14 - have a list so you can see the square
07:16 - bracket here and the n square bracket
07:18 - indicates python list
07:20 - and the contents of this list are all of
07:22 - the a tags on the page so if i move
07:26 - let's just take a look at some of these
07:27 - links so we have images
07:29 - we have one that has the text maps so
07:31 - let me just kind of move this back over
07:33 - here indeed
07:34 - you know if we look let's just look at
07:36 - over here we have this thing called
07:37 - images that is pointing to the link at
07:39 - the top right maps
07:41 - etc so we can look for other
07:43 - links in this list that will correspond
07:46 - to the actual links on the page that we
07:48 - have just have searched for all the
07:50 - links on the page
07:51 - so that's that so i'm going to go ahead
07:53 - and comment that out so we don't have
07:54 - excess output here
07:56 - and let's just keep going down so
07:59 - getting all the list of links is one
08:00 - thing but we might want to actually
08:02 - extract uh certain types of links so
08:04 - maybe the page that we're uh requesting
08:07 - the page that we've just superfined it
08:08 - has links that we're actually after so
08:10 - this example here says okay actually i
08:13 - care about all of the links that have a
08:15 - certain string in the text field so what
08:18 - do i mean by the text field if i bring
08:20 - this back up i essentially want to look
08:22 - for all of the links let's say that have
08:25 - the word about in them so i want to see
08:27 - all the links that have the word about
08:29 - so anything that's an a tag where we
08:31 - between the a and the slash a there's
08:34 - the word about if it has that i want
08:36 - that link so that's one example one use
08:39 - case out of many that you could form in
08:41 - this
08:42 - in this type of
08:43 - workspace so what we're going to do is
08:45 - we're going to loop through all of the
08:46 - links that we've obtained from above
08:49 - then we're going to do is we're going to
08:50 - say if the word about is in the text of
08:53 - the link so again what i'm doing is i'm
08:54 - using the dot text part of that
08:57 - variable so as i'm looping through each
08:59 - of these links in that list every one of
09:01 - those elements in that list is actually
09:04 - a beautiful soup element so that allows
09:06 - me to call this.text
09:09 - function on each of those elements
09:11 - because that is defined from this
09:13 - element that is extracted it's stored in
09:15 - this list
09:16 - so i'm saying look at the text in that
09:18 - link in that list and is the word about
09:20 - in that in that text if so then go ahead
09:24 - and print out that link because i care
09:26 - about that link and actually go ahead
09:27 - and print out the
09:30 - print out the actual thing that it goes
09:32 - to as well so that's what this is doing
09:34 - here so link also has a
09:36 - attribute or i should say a function
09:38 - attrs and i'm looking for a specific
09:41 - attribute of that link so inside the a
09:44 - tag there's an attribute inside of that
09:46 - which is the href
09:48 - tag inside of that and i'm saying give
09:50 - me the content of that href inside of
09:53 - the link tag which is the uh inside of
09:56 - this tag that has the a so there's kind
09:59 - of a lot of russian doll kind of
10:01 - structure going on there
10:03 - so let's go ahead and just print that
10:04 - out
10:05 - i'll write that
10:07 - run it
10:08 - so we have here is we have the link so
10:11 - we found the about
10:12 - google thing right here so that's good
10:14 - and then we also have the
10:16 - href attribute of this link so for
10:19 - instance we see this whole this is the
10:20 - whole a tag so we have everything from
10:23 - the start of the a tag to the end of it
10:25 - including the text including the href
10:28 - and then what we did with the next line
10:29 - is we said hey inside of the a tag
10:32 - there's this attribute called href and
10:34 - we want to access the content of that
10:36 - attribute inside of the a tag and what
10:38 - we did there that's precisely this and
10:40 - that's what we're printing out right
10:41 - here
10:42 - so i hope that makes sense i know that's
10:44 - kind of drilling down quite a bit and
10:45 - you can go pretty complicated with these
10:47 - types of expressions but i think once
10:48 - you understand this level you can
10:51 - arbitrarily apply different levels of
10:53 - complexity to your own situations your
10:55 - own problems your own situations your
10:58 - own scenarios i said that already anyway
11:00 - so we have this structure set up we have
11:02 - kind of a general idea of how to use
11:04 - both requests and beautiful soup let's
11:07 - go ahead and try to apply this on a more
11:09 - elaborate web page and the web page that
11:11 - i had in mind
11:12 - is this webpage right here
11:14 - so this is just a collection of
11:16 - briefings and statements given at the
11:18 - white house so you can see
11:19 - the day of this upload is september 12th
11:22 - and so these are the most recent remarks
11:24 - by
11:26 - briefings and statements that have
11:27 - something to do with the white house so
11:28 - there's a whole list of them and the
11:30 - goal of what we're going to do with
11:32 - beautiful super requests is we're going
11:34 - to navigate to this page we're going to
11:36 - try to find a way to extract all of the
11:39 - links on this page and specifically all
11:41 - of the links that have uh are sort of in
11:44 - this feed here so that's what we're
11:46 - going to do we're going to store them
11:47 - into a list and then you could think
11:48 - about doing whatever you like to that
11:50 - list i mean of course like the
11:51 - possibilities are are quite endless
11:53 - depending on your goals but this just
11:55 - kind of gives you the scaffolding the
11:57 - structure the idea
11:59 - to take this and then you know do
12:01 - whatever you want for your own purposes
12:03 - so let me just minimize this for now
12:04 - let's go back to this code
12:07 - so right so what we're going to do is
12:10 - i'm going to open up a new tab
12:12 - so i'm going to go ahead and say tab new
12:13 - i have another file that i've created
12:16 - and have some initial comments in which
12:18 - i've called whitehouseexample.pi
12:20 - i'm going to go ahead and open that file
12:22 - here so you can see that i've just
12:23 - opened a python file which is called
12:25 - whitehouseexample.pi and it just has
12:27 - some comments which kind of indicate
12:29 - what this is all about so we want to
12:31 - obtain links from this website as we
12:33 - just mentioned we want to
12:35 - well this is just kind of telling you
12:36 - what this is what this website is all
12:38 - about and the goal as i mentioned before
12:40 - is to extract all the links on that page
12:43 - and then just kind of print them out
12:44 - into a list
12:45 - so right so we can pretty much use the
12:47 - majority of what we already have
12:49 - we can just kind of go from there and
12:52 - more or less just copy and paste some
12:54 - things that we have from our previous
12:56 - file so let's start off by just doing
12:58 - the very basic things let's go ahead and
13:00 - import requests let's go ahead and say
13:03 - from
13:04 - vs4
13:05 - import beautiful soup
13:07 - and then what we're going to do is we're
13:09 - going to let me just go back over to
13:10 - this tab over here because i think it's
13:12 - a little bit easier to just copy and
13:13 - paste some of these things we're going
13:15 - to want to do a very similar thing where
13:17 - we use the request.get method and we're
13:21 - going to paste in not google.com this
13:23 - time but we're going to paste in the
13:24 - website
13:26 - of the
13:28 - of the statements so we're going to go
13:29 - ahead and cut in there i'm going to
13:32 - bring this website up i'm going to copy
13:34 - this link here
13:36 - put this back over there and i'm just
13:37 - going to go ahead and paste this in
13:39 - there so this is now the website that
13:41 - we're accessing these statements
13:43 - for the content that we want to extract
13:45 - okay so we've got that now the next step
13:48 - is we want to let's go back over here so
13:50 - let's see what else do we do so one of
13:52 - the other things that we did is we
13:54 - stored the content once we've navigated
13:56 - to that site is we store the content of
13:58 - that into a variable called src so
14:00 - that's pretty much just a direct copy
14:02 - and paste we can just move that right in
14:03 - there so now we have an src variable
14:05 - that has the content from the result and
14:08 - now what we want to do going back over
14:10 - to the initial
14:11 - file that we have i want to create a
14:14 - soup object so i'm going to copy that
14:16 - move that over there that's also exactly
14:18 - the same so i've got the source for the
14:20 - web page i've created a soup object
14:22 - based on that source that will allow us
14:24 - to parse and then let's go ahead and
14:25 - write some new code so i'm going to
14:27 - create a list which i'll called urls
14:29 - this will just be the list that will
14:31 - populate with the links that we care
14:34 - about and then what i want to do is i
14:36 - want to loop through all the links so
14:37 - let's go back to the
14:39 - page here so we have a couple links
14:41 - these are the links right here on the
14:42 - page let's just go ahead and inspect
14:44 - them so if you're on chrome or firefox
14:47 - if you right click on an element on your
14:49 - page there should be something like this
14:50 - where it says inspect or inspect element
14:52 - if we go ahead and click that we'll be
14:54 - taken to this
14:56 - sort of thing over here which is showing
14:57 - us exactly what in the source of this
15:00 - page this element corresponds to you can
15:02 - see as i move over this content various
15:04 - things are being highlighted to indicate
15:06 - that these things correspond to the code
15:08 - that i'm sort of mousing over here it's
15:10 - a very nice tool so basically one thing
15:13 - that we can kind of observe
15:15 - is that all of these links if i right
15:17 - click on this one as well all of these
15:19 - links are contained in these h2 heading
15:23 - class tags so inside of the h2 tags we
15:26 - have the
15:27 - the a link or the link that we're
15:29 - actually after so you can see that all
15:31 - of the links on this page are in fact
15:32 - formatted in this way so all of these
15:35 - things are in between h2 tags and one
15:38 - thing that we could do we didn't see
15:39 - this exactly but one thing that we could
15:41 - do is we could tell beautiful soup hey
15:43 - find all of the h2 tags on a given page
15:46 - and then we'll loop through those and
15:48 - then extract the link from those and
15:50 - then we'll have our list that we're
15:52 - after minimize that so we've got our
15:54 - empty list so now let's do this let's
15:56 - say 4 h2 tag
15:59 - in soup dot find
16:01 - underscore all and then here remember if
16:04 - we go back to this initial
16:06 - file here we wanted to find all the
16:08 - links and what we did is we said find
16:10 - all the things that had the a tag well
16:12 - in this case we don't want to find all
16:14 - the things with the a tag just yet we
16:16 - want to find all the things with with
16:17 - the h2 tag so we'll go ahead and say
16:20 - find all of the ones in this
16:22 - soup that have the tag h2
16:25 - and then inside of that if you recall if
16:27 - we go back to that page
16:29 - inside of that h2 tag there's an a tag
16:31 - and that's what we want to extract so
16:33 - we'll go ahead and minimize this and say
16:35 - okay now that we're looping through all
16:37 - the h2 tags let's say a tag is equal to
16:40 - h2tag
16:42 - dot find and what do we want to find we
16:45 - want to find the
16:46 - a tag inside of that so there's find all
16:49 - and there's find so find all is going to
16:51 - be a function that's going to return to
16:53 - us a list it's going to return all of
16:55 - the ones on the page there might be no
16:57 - items of this form on the page there
16:58 - might be one there might be many in any
17:01 - case it's going to return to us a list
17:03 - this a tag
17:04 - is going to just find a single element
17:07 - so it's just going to find a tag the
17:09 - first tag that corresponds to this and
17:11 - then we're going to store that in this
17:12 - variable a tag here
17:14 - now we want to do we have hypothetically
17:17 - are a tag and we're going to add that to
17:19 - our urls list that we have up here so
17:21 - we're going to say
17:22 - urls.append and then we're going to say
17:24 - a
17:25 - a tag and actually i don't want to just
17:27 - add the a tag i actually want to do kind
17:29 - of similar to what we did over here
17:31 - where i said not just the link but i
17:33 - want the attribute of that link that
17:36 - corresponds to href so going back to
17:38 - this state here we've looped through all
17:41 - of the h2 tags on the page
17:43 - inside of the
17:44 - loop we have this thing that says okay
17:46 - inside that h2 tag there should be an a
17:48 - tag and actually furthermore i want the
17:51 - href attribute i want the actual link
17:53 - that is inside of this href attribute
17:56 - so let's go ahead and do something very
17:58 - similar so let's say a tag dot attrs and
18:02 - then we'll do href just like we did
18:04 - before
18:06 - okay so that is pretty much all we need
18:08 - there and then just to make sure that we
18:10 - actually have a list that's populated
18:11 - properly let's go ahead and print out
18:14 - urls let's see what we have so we'll
18:16 - write this clear the terminal
18:18 - and then we'll say python and the file
18:20 - is called the white house example pi if
18:22 - we do that it'll run there it'll grab
18:24 - them we can see that we have this now
18:25 - this list of all of these links that
18:28 - correspond to each one of the
18:30 - elements on this page so we've
18:32 - successfully extracted the links for
18:34 - each of these briefings and statements
18:37 - pretty cool and not very much code
18:38 - either you can see this is quite concise
18:44 - so we're going to be going over how to
18:45 - create certain objects in beautiful soup
18:48 - and we're going to be taking a look at
18:49 - how to make use of those objects to
18:51 - extract content from web resources that
18:53 - you might be interested in extracting
18:55 - the content from so the first thing that
18:56 - we're going to do is we're going to go
18:58 - ahead and just import beautiful soup so
19:00 - again assuming that you have this
19:02 - installed we're just going to say from
19:03 - bs4 import beautiful soup which is the
19:05 - class that we're going to use to
19:07 - simplify the html content that we're
19:09 - going to eventually parse in this video
19:11 - and the html content that we're going to
19:13 - parse in this video is actually just
19:14 - going to be described by this variable
19:16 - here which is a string that really just
19:18 - contains a very very simple html web
19:21 - page
19:22 - so the reason that we're doing it like
19:24 - this is for one to keep things very
19:26 - simple we just want to illustrate very
19:28 - basic concepts about how to kind of
19:30 - parse this type of content the other
19:32 - thing is to keep it reproducible we
19:34 - could see this example on an actual
19:35 - website that's on the internet somewhere
19:38 - however if the source code for that
19:39 - website is changed in any way then the
19:42 - video may become incorrect as a result
19:44 - because the source change and therefore
19:47 - our source might not be doing the
19:48 - correct thing
19:50 - and at the time whenever you happen to
19:52 - be watching this could be giving you a
19:54 - different result than what you actually
19:55 - expect so this string is just going to
19:57 - describe a very simple html web page
20:00 - that we're going to use as our example
20:02 - and just to give you a sense of what
20:03 - this looks like we're going to just
20:06 - going to go ahead and write this content
20:07 - to a file so what i'm doing here is i'm
20:09 - just creating a file called index.html
20:12 - and then i'm writing that content that
20:13 - we defined up above so the html docs
20:16 - string i'm just going to go ahead and
20:17 - write that out to a file and then if we
20:19 - go ahead and run this i'll go ahead and
20:21 - clear the terminal
20:22 - so i'm going to go ahead and run this
20:24 - file which is called beautiful soup
20:25 - objects we don't see any output because
20:27 - there's no output to be seen but if we
20:29 - go to our directory in which the file
20:31 - lives we can see that it did create this
20:33 - index.html
20:35 - web page so we can go ahead and open
20:36 - this up in a browser and if we do so we
20:39 - see this is the html rendering of the
20:41 - string that we saved and wrote to file
20:43 - so you can see there's some very simple
20:45 - content on this page there's some stuff
20:47 - between some bold tags stuff between
20:49 - some paragraph tags links things like
20:51 - that so we're going to see how to make
20:53 - use of beautiful soup objects to extract
20:56 - content like this and my hope is that
20:58 - you can see it applied in this very
21:01 - somewhat contrived and simple setting
21:02 - and optimistically apply it to your own
21:05 - setting in which you want to apply these
21:07 - types of ideas so i'm just going to
21:09 - close this i'm going to minimize this
21:10 - and we're going to go back to our code
21:13 - so let's keep moving on down here so the
21:15 - next thing that we're going to do is
21:16 - we're going to create a soup object
21:18 - based on the html doc string variable
21:21 - that we defined up above and so this is
21:23 - going to allow us to parse the html
21:25 - content
21:26 - so one thing that i do want to mention
21:28 - that i don't believe i did mention in
21:29 - the quick start guide is one thing
21:31 - that's kind of neat is you can use this
21:33 - prettify function which is provided from
21:35 - the beautiful soup class which allows
21:37 - you to output the html code in sort of a
21:39 - nicely formatted way so i'm just going
21:41 - to go ahead and write this and give this
21:43 - a run so if we give this a run we see
21:45 - that the html code is printed out very
21:47 - nicely it's indented properly and it
21:50 - just kind of looks very clean and how
21:51 - you would expect it to be properly
21:53 - formatted let's say if you were writing
21:55 - this code so alternatively if we get rid
21:57 - of this prettify function if we just
21:59 - kind of remove that there write it and
22:01 - then run it again you can see that this
22:03 - output here that we got kind of
22:04 - scrunches everything together so it
22:06 - really depends on what you're looking
22:07 - for what you're trying to go for if
22:09 - you're getting like a big sense of maybe
22:10 - a more complicated web page it might be
22:12 - nice to look at this
22:14 - form here otherwise if you kind of want
22:16 - to see everything scrunched on just this
22:19 - screen here it might be fine to look at
22:21 - it like this so it really depends on
22:23 - what you're going for but it's nice to
22:24 - know that this type of function exists
22:26 - so i'm just going to comment this out so
22:28 - we don't have a whole ton of output as
22:30 - we're moving along here in this file and
22:32 - the next thing that we're going to cover
22:33 - here are tags
22:34 - so what we're going to do is we're going
22:36 - to take a look at this code this html
22:39 - source and the first thing we're going
22:40 - to do is we're going to print out
22:42 - the bold tag so if we do soup dot b this
22:46 - is going to give us the first occurrence
22:48 - of the bold tag in the html that we're
22:50 - parsing or from the soup so if i go
22:53 - ahead and write this and give this a run
22:55 - we see the output here is this content
22:58 - here so it's some the doormost story
23:00 - between these bold tags so i just want
23:02 - to also point out that this content this
23:05 - html content is really just ripped
23:07 - straight from the beautiful soup
23:08 - documentation page with some minor
23:11 - alterations so
23:13 - that
23:14 - bowl tag that we just extracted is this
23:16 - one right here it goes it starts from
23:18 - the top of the file it keeps moving down
23:20 - and finds the first thing that has bold
23:22 - tags and it says okay i'm going to print
23:24 - this out alternatively if we said soup
23:26 - not dot b but dot p this would also do
23:29 - the same thing but with the p tag so
23:31 - here we have class title the door
23:33 - mouse's story indeed if we go up to the
23:35 - top of this html source start from here
23:38 - keep going down it's the same thing here
23:40 - this is the first occurrence of a p tag
23:42 - in the file so that's what's going to be
23:43 - printed out there
23:45 - so i'm just going to comment that out
23:47 - and maybe we don't want to just print
23:48 - out the first occurrence but maybe we
23:50 - also want to do something similar so
23:53 - we're going to kind of build up to a way
23:54 - that we can find all of the tags of a
23:56 - given element so another thing that we
23:59 - can do that's very similar to what we
24:00 - just did instead of soup.b or
24:03 - dot p we could do a similar thing where
24:05 - we use the find function so if we say
24:07 - soup dot find and then give it the tag
24:10 - that we're looking for this will give us
24:11 - again the first occurrence in the html
24:14 - documentation sorry in the html doc
24:17 - that has a bold tag so if we go ahead
24:19 - and write this and i'm just going to
24:20 - clear the terminal so we don't have too
24:22 - much output
24:23 - we see that this is also the first
24:24 - occurrence of the bowl tag that we got
24:26 - from before where we just did soup dot b
24:29 - so just gonna go ahead and go back here
24:31 - comment that out now maybe what we want
24:33 - to do is we want to find all of the
24:35 - occurrences of the bowl tag in the html
24:38 - document that we are parsing so i'm
24:39 - going to go ahead and uncomment this and
24:41 - the function that we're going to be
24:42 - making you stuff here is find underscore
24:44 - all so this is a built-in function that
24:47 - we can use on a soup object that is
24:48 - going to find all of the content in this
24:51 - soup that
24:53 - pertains to this bowl tag so i'm going
24:55 - to go ahead and write this and run it
24:57 - and we'll see that this returns a list
24:59 - where each of the elements in this list
25:01 - are beautiful soup objects that
25:02 - correspond to everything that contains a
25:05 - bold tag
25:07 - so that's also good to know so let's
25:09 - keep moving down in this file so another
25:11 - thing that we can also think about is
25:13 - something called a name so if we did
25:15 - soup.b dot name this is going to give us
25:18 - the name of the tag so for instance
25:20 - let's take a look at the first
25:21 - occurrence of the bold tag like we did
25:23 - before and then we'll tag on a dot name
25:25 - so if we write this and give it a run we
25:28 - see that the name of the tag is b so
25:30 - that's essentially what this is going to
25:32 - give us it's telling us the name of the
25:34 - tag that we've just printed out
25:36 - alternatively we can alter the name and
25:39 - have that reflected in the source so for
25:41 - instance if we wanted to for whatever
25:42 - reason alter the name of this tag we
25:45 - could do so in the following way so we
25:47 - can define a variable tag which is equal
25:50 - to soup.b so this is the first
25:52 - occurrence of a bold item in the html
25:54 - document that we're parsing we can print
25:56 - that out just to see what that is so i'm
25:58 - going to comment this out so we don't
25:59 - get too much output so we've created
26:01 - just a refresh we've created a variable
26:03 - called tag which is equal to soup.b the
26:05 - first bold occurrence in the html
26:07 - document we're going to print that out
26:08 - we're going to see what that corresponds
26:10 - to which is something we've already seen
26:11 - before
26:12 - and then what we're going to do is we're
26:13 - going to say tag.name which is a
26:16 - property just like we did we printed
26:17 - that out here so we're going to say
26:19 - tag.name instead of being equal to bold
26:22 - or b we're going to say actually set
26:24 - that name equal to block quote so it's
26:26 - just some other thing we can set it
26:28 - equal to whatever we want i'm just using
26:30 - block quote as an example and then what
26:33 - we can do is we can print out the
26:34 - resulting tag so what we've done is
26:36 - we've found the tag which is the first
26:39 - bold one printed that out to verify what
26:41 - that was and then we've actually altered
26:43 - this is a mutable object we're actually
26:44 - altering the bold content of this tag
26:47 - into block quote and if we go ahead and
26:49 - print that out
26:50 - we'll see that this is no longer between
26:53 - b but it's between a block quote you can
26:55 - see it starts and finishes with this tag
26:57 - block mode now
26:59 - so i'm just going to comment that out
27:00 - there
27:02 - and let's keep moving on so let's go on
27:05 - to attributes so let's go ahead and say
27:07 - that we want to define a given tag just
27:10 - like kind of how we did before here
27:12 - where we're finding the
27:15 - in this case this the third element of
27:17 - the list that is returned for all of the
27:19 - bold objects that we're looking for in
27:20 - the html document so if we go ahead and
27:23 - go back up to our source remember that
27:25 - one actually let me not even go up that
27:27 - high but if we went back to this
27:29 - function here where we found all of the
27:31 - bold tags remember that returned to us a
27:33 - list of all of the beautiful soup
27:35 - objects that corresponded to a bull tag
27:37 - in our html document so what i'm
27:39 - essentially doing here is i'm saying
27:41 - find all of those elements and just give
27:43 - me the element index 2 of that list and
27:46 - then let's just print that out just see
27:48 - what we got so we'll go ahead and do
27:50 - that so in this case it's a bold tag
27:52 - that has id is equal to one and then in
27:55 - between that is this is this name test
27:57 - one and then it's the end of the bold
27:59 - tag
28:00 - so let's go ahead and
28:03 - work with this and see what we can do
28:05 - so this specific tag as we saw has an
28:08 - attribute so it's a bold tag but it has
28:10 - an attribute inside of it which is
28:11 - called id
28:13 - so we can actually access that attribute
28:16 - by saying tag and then using the array
28:19 - index notation so it's overloaded that
28:22 - if we can access the
28:24 - id field of this by saying tag
28:27 - open square bracket id close square
28:29 - bracket which is the name of the
28:31 - attribute that we want to access if we
28:33 - go ahead and write that we can see that
28:35 - the value of the id field that we just
28:38 - accessed is equal to one that's what's
28:39 - being printed out there so it's kind of
28:41 - cool
28:42 - so we can move right along and see sort
28:44 - of another example of this thing let me
28:46 - just comment these lines out so we don't
28:49 - get too much output i'll go ahead and
28:50 - clear the terminal as well
28:52 - so now let's go ahead and consider
28:54 - another tag for the sake of example so
28:57 - i'm also creating another variable here
28:59 - which i'm calling tag and now i'm just
29:01 - going to print that out to see what we
29:03 - have so this is the index 3 element of
29:06 - the list that is returned from all of
29:07 - the bold tags on our page i'm just going
29:09 - to go ahead and write this and run it so
29:12 - now this time we have another bold tag
29:15 - which has not just one attribute so
29:18 - before we had one that was just one
29:20 - attribute which was id
29:21 - now we have some other attribute which
29:23 - is called another attribute which is
29:25 - also something else
29:26 - so notice that this id is pretty widely
29:29 - used in html you'll see like a lot of
29:32 - different elements will have ids equal
29:34 - to something and this another attribute
29:36 - is not typically used it could be
29:38 - anything else in the whole world what
29:39 - we're going to see here is a way that we
29:41 - can extract not just one attribute but
29:44 - also this attribute as well so if we
29:46 - kind of move right along here we can say
29:49 - print out tag id just like we did before
29:52 - we're printing out the attribute of the
29:54 - tag that we've defined up here that has
29:56 - the field id and we can also do the same
29:59 - thing for another attribute which is the
30:01 - name of the other attribute that we're
30:03 - trying to access so if we write this and
30:05 - then run it you'll notice that it was
30:07 - able to successfully do it for id so the
30:10 - id was equal to variable that's printed
30:12 - out here and then another attribute we
30:14 - printed that out as well and that's
30:15 - equal to one
30:17 - and just like how we had here where this
30:19 - is mutable we were able to alter the
30:22 - name we can also do the same thing
30:24 - for these sorts of tags as well we'll
30:26 - see that a little bit
30:28 - so let me just comment these lines out
30:30 - here
30:33 - let's
30:34 - create another tag variable so i'll just
30:36 - set it equal to the same tag variable
30:38 - that we had before just to verify that
30:40 - let's print that out so this is the same
30:43 - tag so i'm just setting a variable tag
30:45 - equal to that and then i'm just printing
30:47 - that out
30:48 - so if we wanted to see what are all of
30:51 - the other attributes that this tag
30:53 - actually has so we knew because we
30:55 - looked at it it had an attribute id it
30:58 - had another attribute called another
30:59 - attribute but what if we didn't know
31:01 - what those were what if we just wanted
31:02 - to see all the attributes this
31:04 - particular tag had so beautiful suit
31:07 - provides to us something called in this
31:10 - method here attrs which is going to
31:12 - allow us to see all of the attributes of
31:14 - a given tag so if we go ahead write this
31:17 - and print it out we see that it returns
31:19 - a dictionary where the key is the name
31:22 - of the attribute and then the value is
31:25 - the value of the of the attribute so the
31:28 - key here another attribute this is equal
31:30 - to 1 that's the value of this entry in
31:32 - the dictionary and likewise this key
31:34 - here for id the value of this is equal
31:36 - to very bold
31:38 - so it's kind of neat as well so let me
31:40 - just go ahead and comment
31:41 - i i will keep that actually i'll just
31:43 - print get rid of these print statements
31:46 - so as i mentioned before these sorts of
31:49 - things are also mutable so we can change
31:51 - the attributes the values of the
31:53 - attributes to some other value if we
31:55 - wish so just to kind of refresh we have
31:57 - this variable tag which is equal to the
32:01 - element that we saw before so let me
32:02 - just write that and run it so this
32:04 - variable tag is equal to this beautiful
32:06 - soup object here
32:08 - and what we can do is we can say okay
32:10 - let's access the element another
32:12 - attribute and recall that that value was
32:14 - equal to one what we're doing here is
32:16 - we're saying actually set that value
32:18 - equal to something else so in this case
32:21 - i'm just setting it equal to two so
32:23 - let's go ahead and print out the result
32:24 - of that mutable action so we'll notice
32:27 - that the first time before we make any
32:29 - alterations the attribute value is one
32:32 - however once we change
32:34 - another attribute once we change that
32:36 - value equal to two notice that it's
32:38 - reflected here so we're able to actually
32:40 - change the values of those things which
32:42 - is kind of neat
32:43 - so i'm just going to go ahead and now
32:44 - comment this out and i'll comment out
32:47 - these print statements as well
32:49 - so let's keep moving on actually what
32:51 - i'm going to do is i'm going to keep
32:53 - this tag that we had before and
32:56 - illustrate one further point about this
32:58 - tag so another thing that we we can do
33:01 - since these things are mutable is we can
33:03 - also eliminate or delete the fields of
33:07 - an attribute so just like we do for a
33:09 - python list when we're trying to remove
33:12 - an element from a list we can use the
33:14 - del keyword in python to remove that
33:16 - element from the list and this is what
33:18 - we're doing here we're saying okay the
33:20 - tag that had those two attributes id and
33:23 - another attribute
33:24 - actually just go ahead and remove id so
33:26 - let's go ahead and print out let's print
33:28 - out the tag before so just to kind of
33:31 - give a sense of
33:32 - where we're starting from we're starting
33:34 - from this thing here and then what i did
33:36 - is i said del id and notice that after i
33:40 - did that and then printed out the
33:41 - resulting tag there's no longer an id
33:44 - field in this thing so we can also do
33:46 - the same thing for the other field if we
33:48 - so wish and then print out the result of
33:49 - that and notice that we have again what
33:51 - we're starting with this
33:53 - beautiful soup object with both of these
33:55 - fields and we've deleted both another
33:57 - attribute and id from it and we've
33:59 - printed out the result
34:00 - so
34:01 - just kind of showcasing what you can do
34:03 - with this
34:04 - so i'm just going to go ahead and
34:06 - comment all of those out now
34:08 - and let's also comment out this tag as
34:11 - well and let's keep moving on down and
34:12 - see what else we can do
34:14 - so we're going to look at some strings
34:16 - so we're going to define a variable tag
34:18 - which is the same
34:19 - thing that we've been working with for
34:21 - the past couple of examples just to kind
34:23 - of showcase that i'm just going to print
34:24 - that out to the screen so this is the
34:26 - tag variable that we're working with now
34:28 - same thing that we've been working with
34:30 - again
34:31 - for the past couple examples and then
34:33 - what we can do is beautiful soup also
34:34 - provides to us a dot string method and
34:37 - if we print that out let's go ahead and
34:38 - see what we get
34:39 - we print that out we get the content
34:41 - that's between the tags so notice that
34:43 - this is what beautiful soup is
34:45 - considering as the string the elements
34:48 - between the angled brackets between the
34:50 - tags themselves so this is the string
34:53 - content that we're printing out here and
34:54 - that's what this is giving to us
34:57 - so let's just keep moving down here so i
35:00 - think we're pretty much at the end of
35:01 - the file i'm just going to get rid of
35:02 - these two print statements another thing
35:04 - that we can do is just like we saw
35:06 - before the mutability of these things we
35:08 - can also alter the string content in
35:11 - between these tags as well so if i do
35:13 - something like tag.string and then
35:15 - replace with so this is just a function
35:18 - that is going to allow us to replace the
35:20 - content that is that string with
35:21 - something else and i'm replacing the
35:23 - content with this is another string
35:26 - and then if we print out the result of
35:27 - that we'll see
35:28 - we'll see what we get so let me just
35:30 - kind of review what i'm doing here
35:32 - create the variable tag that we've seen
35:34 - before i'm printing out the original tag
35:36 - with no alterations whatsoever
35:38 - then i'm using this dot replace with
35:40 - method to actually alter the text inside
35:42 - of that beautiful soup object and i'm
35:44 - going to print out the resulting tag so
35:46 - what we should see is we should see the
35:48 - original tag with test2 in between and
35:50 - then after we've replaced this content
35:53 - with this is another string we'll see
35:54 - the same tag but with the text altered
35:57 - so let me just go ahead and write that
35:58 - and because we kind of have a lot of
36:01 - output on the screen let me just clear
36:02 - it and then let's go ahead and run this
36:04 - so indeed this is what we see we see the
36:06 - initial attribute or the initial
36:08 - beautiful soup object with test two
36:10 - unaltered and then we've replaced that
36:12 - with the method given to us by beautiful
36:14 - soup and we've replaced it with this
36:17 - text here this is another string
36:19 - so that's just some of the
36:21 - attributes or objects i should say of
36:24 - beautiful soup and some of the things
36:25 - that you might want to do when you're
36:27 - parsing a page you might want to parse a
36:29 - page make these changes and then write
36:31 - these things to a file for various
36:33 - reasons there's a lot of different
36:35 - things that you can do i hope that this
36:37 - kind of showcases the things that you
36:38 - can do and hopefully it's broadly
36:40 - applicable to sites that you may be
36:42 - encountering in your own uh in your own
36:45 - scenarios so if you have any questions
36:47 - or comments don't hesitate to leave them
36:49 - below i'll do my best to answer them so
36:51 - thanks again for watching and i'll catch
36:53 - you in the next video

Cleaned transcript:

if you enjoy content like this please subscribe to the lucid programming channel for more programming tutorials in this video we're going to be going over a very quick overview of both the beautiful soup module in python as well as the requests module in python as well so if you're not familiar a very brief introduction to both of those requests is going to be a module that's going to allow us to access various resources on the web so allow us to obtain uh information from various websites navigate to those websites and beautiful soup is going to allow us to parse that information so once we navigate to those websites we might want to extract certain types of content from those websites and beautiful soup is going to allow us to do that so this is going to be a very much from the ground up video the only thing i assume that you have installed on your machine is python and pip pip for installing python packages if you have both of those things installed in your machine you should be ready to follow along one to one and it should work out just fine so we're going to go over some of the basics of both the requests and beautiful soup module in the first part of this video and then we're going to bring all of those things that we learned into a very real project or a very simple project i should say this is really meant to be a very minimal introduction to both of these modules and just to see an example of how you can be effective with both of these things so let's just get started by installing both the requests and beautiful soup modules on your machine you probably will already have requests installed but we'll just make sure that you have it installed in any case so go ahead and open up a terminal or if you're on windows command prompt and go ahead and type in the following two lines so pip install requests if you already have this installed on your machine like i do you'll see some requirement already satisfied messages pop up here that's totally fine if you don't it will install on your machine you probably should have this installed already the other one is install beautiful soup 4 so go ahead and say pip install bs4 and i already have this installed on my machine so we're good to go all right so we've got all the things that we need installed i'm just going to go ahead and close that window and we're going to move back to our file here so we've gone ahead and done this part we've installed both of these modules so what we're going to do next is we're going to import them and use them so we're going to import requests and then we're going to import a specific class from the bs4 module that we installed specifically the beautiful soup class so this is going to allow us to in the terms of beautiful soup superfly content that we obtained from a website and again that will make it parsable so we can extract information from that content okay so the first thing that we're going to do is we're going to use the request module and i guess before i should go for before i go any further i want to mention that all of the code along with the comments that is kind of supplementing what i'm saying here all that is going to be provided on my github and the link to that will be accessible in the description so you can go ahead and download that if you want some additional information as to what i'm doing or saying right so back to this we're going to create a variable called results and we're going to say request.get and then we're going to pass in the website that we that we want to access so in this case i'm just accessing the homepage of google so i'm just going to move my browser over here so i'm just going to access this page right there so i'm just going to go ahead and get that and then what we're going to do to make sure that the page was actually accessed is we're going to print out the status code which is just an http status code letting us know whether or not the page was accessible or not so 404 errors are an http code that's letting you know that the content you're looking for is not present a 200 code is letting you know that the content that you're looking for is present and the response is okay so i'm going to go ahead and write this i'm going to run it so i'm going to say python this file is called beautifulsoup and request.pi if i run this it's going to run it let me just clear the terminal because it's kind of messy let me run that again and we see that the the code that we get back from the google.com homepage is 200 which indicates that indeed the page is accessible so another thing that we can do is we can also print out some other information of the webpage that we just accessed like the http headers and again for more information on both the headers and the status codes you can navigate to these links that are in the comments that point to the wikipedia articles on both of those topics so i'm just going to go ahead and write this and we'll see what the headers look like so it's just some extra information on the google.com homepage so for instance we can see here the domain is google.com some other information here as well that might be of use i'm just going to go ahead and close that it's more or less just to verify that not only is the page valid but it's also indeed the page that we wanted to obtain let's keep moving down here so the next thing we're going to do is we're going to extract the content of the page and that is actually the source of the page and we're going to store that in a variable so the the object that we created here this result the result has these builtin methods status code headers that's how we were able to print out both of those types of information that we just printed out there another one that it has is dot content and that is going to return the source of that page and then what we're going to do is store that into a variable called src for source and then we're going to have this variable so let's go ahead and run that and i'm just going to print out the source so you can actually see what it looks like i'm going to run that like this so we see a bunch of output here and this is really just the web source of the google.com homepage so i'm just going to go ahead and delete that that's kind of a lot of stuff all just thrown on the screen that's great that we can actually access it now we turn to beautiful soup because this is going to allow us to actually do something with that content so what we're going to do now that we've obtained that content we've navigated to that webpage we've verified that we're on the actual web page that we want and now what we're going to do is we're going to pass that source variable into this beautiful soup class creating a soup object and this really is just kind of an object that beautiful soup creates from this source and it allows us to extract certain types of information that we might want to extract from this thing so we're going to store the result of that object in this variable called soup so i'm passing in source here and there's an extra parameter here this lxml you can more or less just ignore this extra parameter it doesn't really mean too much if you don't have it in there you'll get a warning essentially to tell you to put it in there so it's there for all intents and purposes but you don't necessarily need to worry so much about why this is here so we have the soup object so for instance one thing that we could do now that we have the soup object is we can do things like give me all of the links on the page so what we can do is we create a variable which i can call links and i can say find all so final is a method provided from this beautiful soup object that we're accessing here and what do i want to find all of on this page i want to find all of the a tags so this a is the argument that's been passed in it tells beautiful soup to say hey find all of the a tags or all of the links on this page and then store them in this variable links and then we're going to go ahead and actually just print those out to the screen and just so we don't get like too much content i'm going to go ahead and comment out the previous print statements here just so we don't have too much output of the screen so we've got our links we'll print them out and then we'll print a new line so write that give it a run and let's see what we get so this is the output that we just ran here and we can see that we have a list so you can see the square bracket here and the n square bracket indicates python list and the contents of this list are all of the a tags on the page so if i move let's just take a look at some of these links so we have images we have one that has the text maps so let me just kind of move this back over here indeed you know if we look let's just look at over here we have this thing called images that is pointing to the link at the top right maps etc so we can look for other links in this list that will correspond to the actual links on the page that we have just have searched for all the links on the page so that's that so i'm going to go ahead and comment that out so we don't have excess output here and let's just keep going down so getting all the list of links is one thing but we might want to actually extract uh certain types of links so maybe the page that we're uh requesting the page that we've just superfined it has links that we're actually after so this example here says okay actually i care about all of the links that have a certain string in the text field so what do i mean by the text field if i bring this back up i essentially want to look for all of the links let's say that have the word about in them so i want to see all the links that have the word about so anything that's an a tag where we between the a and the slash a there's the word about if it has that i want that link so that's one example one use case out of many that you could form in this in this type of workspace so what we're going to do is we're going to loop through all of the links that we've obtained from above then we're going to do is we're going to say if the word about is in the text of the link so again what i'm doing is i'm using the dot text part of that variable so as i'm looping through each of these links in that list every one of those elements in that list is actually a beautiful soup element so that allows me to call this.text function on each of those elements because that is defined from this element that is extracted it's stored in this list so i'm saying look at the text in that link in that list and is the word about in that in that text if so then go ahead and print out that link because i care about that link and actually go ahead and print out the print out the actual thing that it goes to as well so that's what this is doing here so link also has a attribute or i should say a function attrs and i'm looking for a specific attribute of that link so inside the a tag there's an attribute inside of that which is the href tag inside of that and i'm saying give me the content of that href inside of the link tag which is the uh inside of this tag that has the a so there's kind of a lot of russian doll kind of structure going on there so let's go ahead and just print that out i'll write that run it so we have here is we have the link so we found the about google thing right here so that's good and then we also have the href attribute of this link so for instance we see this whole this is the whole a tag so we have everything from the start of the a tag to the end of it including the text including the href and then what we did with the next line is we said hey inside of the a tag there's this attribute called href and we want to access the content of that attribute inside of the a tag and what we did there that's precisely this and that's what we're printing out right here so i hope that makes sense i know that's kind of drilling down quite a bit and you can go pretty complicated with these types of expressions but i think once you understand this level you can arbitrarily apply different levels of complexity to your own situations your own problems your own situations your own scenarios i said that already anyway so we have this structure set up we have kind of a general idea of how to use both requests and beautiful soup let's go ahead and try to apply this on a more elaborate web page and the web page that i had in mind is this webpage right here so this is just a collection of briefings and statements given at the white house so you can see the day of this upload is september 12th and so these are the most recent remarks by briefings and statements that have something to do with the white house so there's a whole list of them and the goal of what we're going to do with beautiful super requests is we're going to navigate to this page we're going to try to find a way to extract all of the links on this page and specifically all of the links that have uh are sort of in this feed here so that's what we're going to do we're going to store them into a list and then you could think about doing whatever you like to that list i mean of course like the possibilities are are quite endless depending on your goals but this just kind of gives you the scaffolding the structure the idea to take this and then you know do whatever you want for your own purposes so let me just minimize this for now let's go back to this code so right so what we're going to do is i'm going to open up a new tab so i'm going to go ahead and say tab new i have another file that i've created and have some initial comments in which i've called whitehouseexample.pi i'm going to go ahead and open that file here so you can see that i've just opened a python file which is called whitehouseexample.pi and it just has some comments which kind of indicate what this is all about so we want to obtain links from this website as we just mentioned we want to well this is just kind of telling you what this is what this website is all about and the goal as i mentioned before is to extract all the links on that page and then just kind of print them out into a list so right so we can pretty much use the majority of what we already have we can just kind of go from there and more or less just copy and paste some things that we have from our previous file so let's start off by just doing the very basic things let's go ahead and import requests let's go ahead and say from vs4 import beautiful soup and then what we're going to do is we're going to let me just go back over to this tab over here because i think it's a little bit easier to just copy and paste some of these things we're going to want to do a very similar thing where we use the request.get method and we're going to paste in not google.com this time but we're going to paste in the website of the of the statements so we're going to go ahead and cut in there i'm going to bring this website up i'm going to copy this link here put this back over there and i'm just going to go ahead and paste this in there so this is now the website that we're accessing these statements for the content that we want to extract okay so we've got that now the next step is we want to let's go back over here so let's see what else do we do so one of the other things that we did is we stored the content once we've navigated to that site is we store the content of that into a variable called src so that's pretty much just a direct copy and paste we can just move that right in there so now we have an src variable that has the content from the result and now what we want to do going back over to the initial file that we have i want to create a soup object so i'm going to copy that move that over there that's also exactly the same so i've got the source for the web page i've created a soup object based on that source that will allow us to parse and then let's go ahead and write some new code so i'm going to create a list which i'll called urls this will just be the list that will populate with the links that we care about and then what i want to do is i want to loop through all the links so let's go back to the page here so we have a couple links these are the links right here on the page let's just go ahead and inspect them so if you're on chrome or firefox if you right click on an element on your page there should be something like this where it says inspect or inspect element if we go ahead and click that we'll be taken to this sort of thing over here which is showing us exactly what in the source of this page this element corresponds to you can see as i move over this content various things are being highlighted to indicate that these things correspond to the code that i'm sort of mousing over here it's a very nice tool so basically one thing that we can kind of observe is that all of these links if i right click on this one as well all of these links are contained in these h2 heading class tags so inside of the h2 tags we have the the a link or the link that we're actually after so you can see that all of the links on this page are in fact formatted in this way so all of these things are in between h2 tags and one thing that we could do we didn't see this exactly but one thing that we could do is we could tell beautiful soup hey find all of the h2 tags on a given page and then we'll loop through those and then extract the link from those and then we'll have our list that we're after minimize that so we've got our empty list so now let's do this let's say 4 h2 tag in soup dot find underscore all and then here remember if we go back to this initial file here we wanted to find all the links and what we did is we said find all the things that had the a tag well in this case we don't want to find all the things with the a tag just yet we want to find all the things with with the h2 tag so we'll go ahead and say find all of the ones in this soup that have the tag h2 and then inside of that if you recall if we go back to that page inside of that h2 tag there's an a tag and that's what we want to extract so we'll go ahead and minimize this and say okay now that we're looping through all the h2 tags let's say a tag is equal to h2tag dot find and what do we want to find we want to find the a tag inside of that so there's find all and there's find so find all is going to be a function that's going to return to us a list it's going to return all of the ones on the page there might be no items of this form on the page there might be one there might be many in any case it's going to return to us a list this a tag is going to just find a single element so it's just going to find a tag the first tag that corresponds to this and then we're going to store that in this variable a tag here now we want to do we have hypothetically are a tag and we're going to add that to our urls list that we have up here so we're going to say urls.append and then we're going to say a a tag and actually i don't want to just add the a tag i actually want to do kind of similar to what we did over here where i said not just the link but i want the attribute of that link that corresponds to href so going back to this state here we've looped through all of the h2 tags on the page inside of the loop we have this thing that says okay inside that h2 tag there should be an a tag and actually furthermore i want the href attribute i want the actual link that is inside of this href attribute so let's go ahead and do something very similar so let's say a tag dot attrs and then we'll do href just like we did before okay so that is pretty much all we need there and then just to make sure that we actually have a list that's populated properly let's go ahead and print out urls let's see what we have so we'll write this clear the terminal and then we'll say python and the file is called the white house example pi if we do that it'll run there it'll grab them we can see that we have this now this list of all of these links that correspond to each one of the elements on this page so we've successfully extracted the links for each of these briefings and statements pretty cool and not very much code either you can see this is quite concise so we're going to be going over how to create certain objects in beautiful soup and we're going to be taking a look at how to make use of those objects to extract content from web resources that you might be interested in extracting the content from so the first thing that we're going to do is we're going to go ahead and just import beautiful soup so again assuming that you have this installed we're just going to say from bs4 import beautiful soup which is the class that we're going to use to simplify the html content that we're going to eventually parse in this video and the html content that we're going to parse in this video is actually just going to be described by this variable here which is a string that really just contains a very very simple html web page so the reason that we're doing it like this is for one to keep things very simple we just want to illustrate very basic concepts about how to kind of parse this type of content the other thing is to keep it reproducible we could see this example on an actual website that's on the internet somewhere however if the source code for that website is changed in any way then the video may become incorrect as a result because the source change and therefore our source might not be doing the correct thing and at the time whenever you happen to be watching this could be giving you a different result than what you actually expect so this string is just going to describe a very simple html web page that we're going to use as our example and just to give you a sense of what this looks like we're going to just going to go ahead and write this content to a file so what i'm doing here is i'm just creating a file called index.html and then i'm writing that content that we defined up above so the html docs string i'm just going to go ahead and write that out to a file and then if we go ahead and run this i'll go ahead and clear the terminal so i'm going to go ahead and run this file which is called beautiful soup objects we don't see any output because there's no output to be seen but if we go to our directory in which the file lives we can see that it did create this index.html web page so we can go ahead and open this up in a browser and if we do so we see this is the html rendering of the string that we saved and wrote to file so you can see there's some very simple content on this page there's some stuff between some bold tags stuff between some paragraph tags links things like that so we're going to see how to make use of beautiful soup objects to extract content like this and my hope is that you can see it applied in this very somewhat contrived and simple setting and optimistically apply it to your own setting in which you want to apply these types of ideas so i'm just going to close this i'm going to minimize this and we're going to go back to our code so let's keep moving on down here so the next thing that we're going to do is we're going to create a soup object based on the html doc string variable that we defined up above and so this is going to allow us to parse the html content so one thing that i do want to mention that i don't believe i did mention in the quick start guide is one thing that's kind of neat is you can use this prettify function which is provided from the beautiful soup class which allows you to output the html code in sort of a nicely formatted way so i'm just going to go ahead and write this and give this a run so if we give this a run we see that the html code is printed out very nicely it's indented properly and it just kind of looks very clean and how you would expect it to be properly formatted let's say if you were writing this code so alternatively if we get rid of this prettify function if we just kind of remove that there write it and then run it again you can see that this output here that we got kind of scrunches everything together so it really depends on what you're looking for what you're trying to go for if you're getting like a big sense of maybe a more complicated web page it might be nice to look at this form here otherwise if you kind of want to see everything scrunched on just this screen here it might be fine to look at it like this so it really depends on what you're going for but it's nice to know that this type of function exists so i'm just going to comment this out so we don't have a whole ton of output as we're moving along here in this file and the next thing that we're going to cover here are tags so what we're going to do is we're going to take a look at this code this html source and the first thing we're going to do is we're going to print out the bold tag so if we do soup dot b this is going to give us the first occurrence of the bold tag in the html that we're parsing or from the soup so if i go ahead and write this and give this a run we see the output here is this content here so it's some the doormost story between these bold tags so i just want to also point out that this content this html content is really just ripped straight from the beautiful soup documentation page with some minor alterations so that bowl tag that we just extracted is this one right here it goes it starts from the top of the file it keeps moving down and finds the first thing that has bold tags and it says okay i'm going to print this out alternatively if we said soup not dot b but dot p this would also do the same thing but with the p tag so here we have class title the door mouse's story indeed if we go up to the top of this html source start from here keep going down it's the same thing here this is the first occurrence of a p tag in the file so that's what's going to be printed out there so i'm just going to comment that out and maybe we don't want to just print out the first occurrence but maybe we also want to do something similar so we're going to kind of build up to a way that we can find all of the tags of a given element so another thing that we can do that's very similar to what we just did instead of soup.b or dot p we could do a similar thing where we use the find function so if we say soup dot find and then give it the tag that we're looking for this will give us again the first occurrence in the html documentation sorry in the html doc that has a bold tag so if we go ahead and write this and i'm just going to clear the terminal so we don't have too much output we see that this is also the first occurrence of the bowl tag that we got from before where we just did soup dot b so just gonna go ahead and go back here comment that out now maybe what we want to do is we want to find all of the occurrences of the bowl tag in the html document that we are parsing so i'm going to go ahead and uncomment this and the function that we're going to be making you stuff here is find underscore all so this is a builtin function that we can use on a soup object that is going to find all of the content in this soup that pertains to this bowl tag so i'm going to go ahead and write this and run it and we'll see that this returns a list where each of the elements in this list are beautiful soup objects that correspond to everything that contains a bold tag so that's also good to know so let's keep moving down in this file so another thing that we can also think about is something called a name so if we did soup.b dot name this is going to give us the name of the tag so for instance let's take a look at the first occurrence of the bold tag like we did before and then we'll tag on a dot name so if we write this and give it a run we see that the name of the tag is b so that's essentially what this is going to give us it's telling us the name of the tag that we've just printed out alternatively we can alter the name and have that reflected in the source so for instance if we wanted to for whatever reason alter the name of this tag we could do so in the following way so we can define a variable tag which is equal to soup.b so this is the first occurrence of a bold item in the html document that we're parsing we can print that out just to see what that is so i'm going to comment this out so we don't get too much output so we've created just a refresh we've created a variable called tag which is equal to soup.b the first bold occurrence in the html document we're going to print that out we're going to see what that corresponds to which is something we've already seen before and then what we're going to do is we're going to say tag.name which is a property just like we did we printed that out here so we're going to say tag.name instead of being equal to bold or b we're going to say actually set that name equal to block quote so it's just some other thing we can set it equal to whatever we want i'm just using block quote as an example and then what we can do is we can print out the resulting tag so what we've done is we've found the tag which is the first bold one printed that out to verify what that was and then we've actually altered this is a mutable object we're actually altering the bold content of this tag into block quote and if we go ahead and print that out we'll see that this is no longer between b but it's between a block quote you can see it starts and finishes with this tag block mode now so i'm just going to comment that out there and let's keep moving on so let's go on to attributes so let's go ahead and say that we want to define a given tag just like kind of how we did before here where we're finding the in this case this the third element of the list that is returned for all of the bold objects that we're looking for in the html document so if we go ahead and go back up to our source remember that one actually let me not even go up that high but if we went back to this function here where we found all of the bold tags remember that returned to us a list of all of the beautiful soup objects that corresponded to a bull tag in our html document so what i'm essentially doing here is i'm saying find all of those elements and just give me the element index 2 of that list and then let's just print that out just see what we got so we'll go ahead and do that so in this case it's a bold tag that has id is equal to one and then in between that is this is this name test one and then it's the end of the bold tag so let's go ahead and work with this and see what we can do so this specific tag as we saw has an attribute so it's a bold tag but it has an attribute inside of it which is called id so we can actually access that attribute by saying tag and then using the array index notation so it's overloaded that if we can access the id field of this by saying tag open square bracket id close square bracket which is the name of the attribute that we want to access if we go ahead and write that we can see that the value of the id field that we just accessed is equal to one that's what's being printed out there so it's kind of cool so we can move right along and see sort of another example of this thing let me just comment these lines out so we don't get too much output i'll go ahead and clear the terminal as well so now let's go ahead and consider another tag for the sake of example so i'm also creating another variable here which i'm calling tag and now i'm just going to print that out to see what we have so this is the index 3 element of the list that is returned from all of the bold tags on our page i'm just going to go ahead and write this and run it so now this time we have another bold tag which has not just one attribute so before we had one that was just one attribute which was id now we have some other attribute which is called another attribute which is also something else so notice that this id is pretty widely used in html you'll see like a lot of different elements will have ids equal to something and this another attribute is not typically used it could be anything else in the whole world what we're going to see here is a way that we can extract not just one attribute but also this attribute as well so if we kind of move right along here we can say print out tag id just like we did before we're printing out the attribute of the tag that we've defined up here that has the field id and we can also do the same thing for another attribute which is the name of the other attribute that we're trying to access so if we write this and then run it you'll notice that it was able to successfully do it for id so the id was equal to variable that's printed out here and then another attribute we printed that out as well and that's equal to one and just like how we had here where this is mutable we were able to alter the name we can also do the same thing for these sorts of tags as well we'll see that a little bit so let me just comment these lines out here let's create another tag variable so i'll just set it equal to the same tag variable that we had before just to verify that let's print that out so this is the same tag so i'm just setting a variable tag equal to that and then i'm just printing that out so if we wanted to see what are all of the other attributes that this tag actually has so we knew because we looked at it it had an attribute id it had another attribute called another attribute but what if we didn't know what those were what if we just wanted to see all the attributes this particular tag had so beautiful suit provides to us something called in this method here attrs which is going to allow us to see all of the attributes of a given tag so if we go ahead write this and print it out we see that it returns a dictionary where the key is the name of the attribute and then the value is the value of the of the attribute so the key here another attribute this is equal to 1 that's the value of this entry in the dictionary and likewise this key here for id the value of this is equal to very bold so it's kind of neat as well so let me just go ahead and comment i i will keep that actually i'll just print get rid of these print statements so as i mentioned before these sorts of things are also mutable so we can change the attributes the values of the attributes to some other value if we wish so just to kind of refresh we have this variable tag which is equal to the element that we saw before so let me just write that and run it so this variable tag is equal to this beautiful soup object here and what we can do is we can say okay let's access the element another attribute and recall that that value was equal to one what we're doing here is we're saying actually set that value equal to something else so in this case i'm just setting it equal to two so let's go ahead and print out the result of that mutable action so we'll notice that the first time before we make any alterations the attribute value is one however once we change another attribute once we change that value equal to two notice that it's reflected here so we're able to actually change the values of those things which is kind of neat so i'm just going to go ahead and now comment this out and i'll comment out these print statements as well so let's keep moving on actually what i'm going to do is i'm going to keep this tag that we had before and illustrate one further point about this tag so another thing that we we can do since these things are mutable is we can also eliminate or delete the fields of an attribute so just like we do for a python list when we're trying to remove an element from a list we can use the del keyword in python to remove that element from the list and this is what we're doing here we're saying okay the tag that had those two attributes id and another attribute actually just go ahead and remove id so let's go ahead and print out let's print out the tag before so just to kind of give a sense of where we're starting from we're starting from this thing here and then what i did is i said del id and notice that after i did that and then printed out the resulting tag there's no longer an id field in this thing so we can also do the same thing for the other field if we so wish and then print out the result of that and notice that we have again what we're starting with this beautiful soup object with both of these fields and we've deleted both another attribute and id from it and we've printed out the result so just kind of showcasing what you can do with this so i'm just going to go ahead and comment all of those out now and let's also comment out this tag as well and let's keep moving on down and see what else we can do so we're going to look at some strings so we're going to define a variable tag which is the same thing that we've been working with for the past couple of examples just to kind of showcase that i'm just going to print that out to the screen so this is the tag variable that we're working with now same thing that we've been working with again for the past couple examples and then what we can do is beautiful soup also provides to us a dot string method and if we print that out let's go ahead and see what we get we print that out we get the content that's between the tags so notice that this is what beautiful soup is considering as the string the elements between the angled brackets between the tags themselves so this is the string content that we're printing out here and that's what this is giving to us so let's just keep moving down here so i think we're pretty much at the end of the file i'm just going to get rid of these two print statements another thing that we can do is just like we saw before the mutability of these things we can also alter the string content in between these tags as well so if i do something like tag.string and then replace with so this is just a function that is going to allow us to replace the content that is that string with something else and i'm replacing the content with this is another string and then if we print out the result of that we'll see we'll see what we get so let me just kind of review what i'm doing here create the variable tag that we've seen before i'm printing out the original tag with no alterations whatsoever then i'm using this dot replace with method to actually alter the text inside of that beautiful soup object and i'm going to print out the resulting tag so what we should see is we should see the original tag with test2 in between and then after we've replaced this content with this is another string we'll see the same tag but with the text altered so let me just go ahead and write that and because we kind of have a lot of output on the screen let me just clear it and then let's go ahead and run this so indeed this is what we see we see the initial attribute or the initial beautiful soup object with test two unaltered and then we've replaced that with the method given to us by beautiful soup and we've replaced it with this text here this is another string so that's just some of the attributes or objects i should say of beautiful soup and some of the things that you might want to do when you're parsing a page you might want to parse a page make these changes and then write these things to a file for various reasons there's a lot of different things that you can do i hope that this kind of showcases the things that you can do and hopefully it's broadly applicable to sites that you may be encountering in your own uh in your own scenarios so if you have any questions or comments don't hesitate to leave them below i'll do my best to answer them so thanks again for watching and i'll catch you in the next video
