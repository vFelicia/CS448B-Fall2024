With timestamps:

00:00 - Hey guys, and welcome to a brand new tutorial 
series. So in this series, I'm going to be  
00:07 - teaching you Java from the beginning. So starting 
at the absolute basics, setting up an environment,  
00:12 - how to create variables, methods, like all 
that stuff, and then move the old way up into  
00:17 - the advanced stuff. This is a beginner tutorial 
series. So I'm going to treat this as if you have  
00:22 - never learned any programming language before. 
Okay, so let's go ahead and get started. The first  
00:27 - thing we need to do is download a ID E. And this 
is where we're going to be writing our Java code,  
00:32 - okay, so it's called Eclipse, that's what I'm 
going to use use whatever you want. But if you're  
00:36 - beginner, I recommend you just follow along with 
this, because some of the things I'm going to do  
00:39 - are specific to eclipse. So go to this link, 
it's in the description down below, and just  
00:45 - click on download. And then obviously, 32 or 64 
bit, I recommend 64 bit as most of you probably  
00:50 - have a 64 bit machine. Once you download this, 
if we go Sorry, I've already got an open here,  
00:55 - but if we go to our downloads, we will see 
that it should give us something like this,  
01:00 - double click on it, wait for this to boot up 
might take a second. Okay, it's going it's going,  
01:08 - let's see. And once we're in here, we're simply 
going to select Eclipse IDE. for Java developers,  
01:14 - we don't need to be using any of this other 
stuff. Just this one right here. Okay,  
01:18 - so we're going to install this, I already have it 
installed. So I'm not going to do that. Nobody's  
01:22 - gonna ask you for a project directory, something 
like that. So if it asks you for that, just choose  
01:27 - wherever on your computer, it doesn't really 
matter. Okay, so once you've had that installed,  
01:33 - you chose your project directory. Now we're going 
to be in Eclipse. Now to start a new project, what  
01:39 - we need to do so it should look something like 
this, by the way, you know, click on File, New,  
01:42 - and then Java project. Now here, I'm just gonna 
name mine tutorial. And then let's see here, you  
01:50 - can just leave all the rest of this stuff blank. 
If you want to change location, go ahead. Alright,  
01:54 - click Finish. And there we are. So once we have 
this, it's going to pop up in our left bar,  
01:59 - the package explorer, I'm just gonna shrink 
this a little bit. And what we're going to do  
02:02 - is we're going to go down to source or Oh, I 
already have a package name tutorial, one second,  
02:06 - I'm going to create a new one really quickly, and 
then walk you through this so it's fresh. tutorial  
02:12 - one. Okay, finish. Alright, we got tutorial 
one, and we get source. Okay. Now, inside of  
02:19 - the source, what we're going to do is we're going 
to right click on this, we're going to click New,  
02:22 - and we're going to click on package. Now, I 
recommend you just leave this package name  
02:26 - the same as your project. So I'm going to do that 
and click Finish. And then inside of your package  
02:32 - name, I'm going to click New, and plus. Okay, so 
once I click class, it's going to pop up here,  
02:38 - it's going to allow you to select the package and 
the source folder, just leave those blank. And  
02:41 - the name you can name is whatever you want. In my 
case, I'm going to name it main, okay, type names  
02:47 - discouraged. Okay, so let's name it main with 
a capital M. All right, just because you have a  
02:52 - like that. And then we're going to do is make sure 
you check on this public static void Main, we need  
02:57 - to check mark this because we're gonna need this 
function created us so that we can start Alright,  
03:01 - inherited abstract methods, you can uncheck 
that. Or actually, we'll check that doesn't  
03:06 - really matter for right now. Okay, so now we're in 
and we've got a little bit of code going here. And  
03:11 - I'm going to explain what this is. And then we'll 
get into just coding like a really basic thing,  
03:16 - just printing a few things to the screen before 
we move into the next tutorial where we talk  
03:19 - about data types. So Java is an object oriented 
programming language, meaning that everything  
03:24 - happens inside of something called classes, and 
everything is known as like objects. All right.  
03:29 - Now, you're not gonna understand very much of this 
right now, if you're beginner, but for some of you  
03:32 - guys that are more advanced, you should come to 
understand what this means. So classes are these,  
03:37 - okay? And everything in Java is written in a 
class or an interface or something else. But in  
03:42 - our purpose, just think everything is written in 
a class right now. Okay. Now inside of this class,  
03:46 - we have a special method is what it's called. And 
these methods are what I'm highlighting right now,  
03:52 - inside these curly brackets, public static, void, 
main, okay, you don't have to know what all that  
03:57 - what those words mean, just know, this method 
is important. And this is where we're gonna be  
04:00 - writing all of our Java code in for right now. So 
if you try to write code outside of these little  
04:05 - curly braces, and not inside of this method, 
that's what we're calling it right now. Okay,  
04:09 - your code is not going to execute properly unless 
you know what you're doing, which in our case,  
04:14 - we don't yet. So all the code we're writing goes 
inside of this public static void Main inside of  
04:20 - these curly braces. All right. Now the first 
thing I'm going to get us to do is just print  
04:24 - something to the screen. So to print something 
in Java, we're going to type system.out.my  
04:32 - computer's lagging one second dot print, ln, 
and this simply stands for print line. Okay,  
04:37 - now inside of these brackets here, we can print a 
string or whatever we want to print. So a string  
04:43 - in Java is anything encapsulated by two quotation 
marks. Whenever we're printing something,  
04:48 - we want to do it in two quotation marks, at least 
for right now. And in this case, I would just say  
04:52 - the classic hello world with an exclamation point, 
okay. Now, at the end of every line, we write in  
04:59 - Java But with exception of lines that start or end 
with curly braces, we need to put a semicolon. And  
05:06 - now you can see once I put the semicolon, that 
our system dot out dot print ln gets highlighted,  
05:12 - we can see that it now has syntax highlighting. In 
syntax pretty much means any code that we write in  
05:17 - the program. So we have to make sure that whenever 
we're done writing a line, we terminate that with  
05:22 - a semicolon. Okay, so now we've officially written 
our first program, all it does is print HelloWorld  
05:27 - to the screen, but how can we run this. So first, 
we're gonna have to save so I'm going to hit Ctrl  
05:32 - S. And to run this, there's a little green button 
up here and says run main dot java. So we're going  
05:38 - to click that. And you can see that down here, a 
little thing popped up called console, we printed  
05:44 - to the screen, hello, world. Now that we've 
officially created our first Java application,  
05:49 - very simple. And that is how we go about setting 
up a new class. And everything that we write  
05:55 - for right now, again, remember is going to happen 
inside this method. That's what we're calling it,  
05:58 - I'm gonna explain that later. public static 
void Main, we have to put it in here. Now if  
06:04 - you want to print another line, you want to 
print something else after we can do that.  
06:07 - I'll show you how that works. So I'm gonna say 
System dot out dot print, ln. And I'll say like  
06:12 - hello world, too. And if I save this, and run 
again, we get hello world, and hello world too.  
06:21 - So you can see where we are right where we left 
off with printing two lines, hello world and hello  
06:26 - world to to the screen. And in this video, I'm 
going to be going over variables and data types,  
06:30 - the absolute fundamentals, we have to understand 
before we can move on to anything more complex.  
06:34 - So let's talk about what a variable is. Now a 
variable just like in mathematics is something  
06:42 - that holds a value. Now in our case, that doesn't 
have to be just a number, it could be a string, it  
06:47 - could be a Boolean, and integer, like we're going 
to talk about the different values. And those  
06:52 - are what are known as data types, or objects. So 
let's start by just creating a variable. To create  
07:00 - a variable, we need to first figure out what 
type our variable is going to be. In this case,  
07:05 - I'm going to start with an integer. And then 
we're going to go through all the different  
07:07 - types and talk about the differences. So to start, 
we're gonna type int, declaring that this variable  
07:14 - that we're about to type out is going to be an 
integer, we're then going to give a variable  
07:18 - name. Now the variable name should contain 
typically just letters and underscores. Now,  
07:24 - I believe you can use numbers as long as it's at 
the end. But in our purpose, we're not going to  
07:28 - do that when we create a variable name, you have 
to make sure you do not use any spaces. And you  
07:33 - don't use any special characters as well. So I'll 
go through a few examples of valid variable names  
07:36 - and invalid variable names. So a valid variable 
name, for example, could be Hello, that's valid,  
07:42 - because we don't have any spaces. We don't have 
any special characters, and there's no numbers  
07:46 - and Okay, now, an invalid variable name would 
be something like, Hello, name, okay, this whole  
07:52 - thing as our variable name is invalid, because 
it contains a space. Now, if I try to put like a,  
07:59 - what do you call it percent sign like this, or 
I tried to put like an Asterix, that is not a  
08:05 - valid variable name. So don't use any special 
characters. You can end with an underscore, you  
08:09 - could start with an underscore if you want to. But 
we're not going to be doing that. In this case.  
08:14 - Typically, when you create a variable, if you want 
to make a name, be like to words, the way you do  
08:19 - it is you type like Hello, and then you would do 
a capital and then the next word, or you would do  
08:24 - an underscore representing a space. And then next 
word, okay, so that's not a valid variable names.  
08:30 - Not super important right now. So I'm going 
to create my first variable int hello world,  
08:34 - and that's going to be equal to by just putting 
an equal sign, whatever integer I want. So in this  
08:39 - case, we're gonna say five. And then remember, 
in Java whenever we end the line, so this is  
08:43 - just saying my integer Hello, world is equal to 
five, we need to terminate with a semicolon. So  
08:48 - there we go. And we see we get int, our variable 
name is now highlighted in yellow. And there's no  
08:55 - issues. So if I let's just see what it says this 
very, is never used. Okay, that's fine. So we've  
09:00 - officially created a variable, the variable name 
hello world now points to the integer five. So to  
09:08 - prove this to you, I am simply going to print 
out the value of hello world. Like this, okay,  
09:15 - so I'm gonna say system dot out to comment is 
System dot out dot print ln. And what we're gonna  
09:22 - do is we're gonna say, okay, so hello, underscore 
world. That's our variable name. And that variable  
09:28 - holds five. So when we print this, we should be 
printing five. The way this works in the computer,  
09:32 - right? Is it says, Okay, hello, world. Let's 
see where hello world is. It's up here. Alright,  
09:36 - hello, world is equal to five. So we print that. 
Okay, so there we go. And we get five printed  
09:40 - down here in the bottom of the screen. Now I 
want to show you something quickly and this  
09:45 - is just going to go this is a really important 
fundamental thing a lot of people don't talk about  
09:48 - in programming tutorials. It's kind of like order 
of operations or execution. So I am going to now  
09:55 - put my variable underneath my System dot out dot 
Print lm. Okay, so I'm first going to print hello  
10:02 - world. And then I'm going to set hello world equal 
to five. Hopefully you guys have realized what  
10:07 - the issue might be here. If not, I'll talk about 
it really quickly. And the problem is that I am  
10:13 - trying to print the value of hello world before 
I've declared it. Because the in programming  
10:18 - the way things work is unless you otherwise 
specify, we're going to be reading from top to  
10:24 - bottom and left to right, just the way you'd read 
a book, right? So we first read this line system,  
10:29 - dot out dot print ln a Hello World, and then we 
create hello world. So here, we don't know what  
10:34 - hello world is. So if we tried to do this, you 
can see it warns me there's an error. Yes. Okay,  
10:40 - you know what, there's an error. Let's proceed 
anyways. And you can see that down here,  
10:43 - we get a bunch of red text. And it says, What 
do you call it? Hello, world cannot be resolved  
10:49 - to a variable, because we haven't yet declared 
that variable. So we have to make sure whenever  
10:53 - we're referencing or using variables that we 
first have them declared somewhere above our,  
10:59 - like the line that we're using them in. Okay. So 
there we go, we've created a variable hello world,  
11:05 - we print that to the screen. Now, let's create a 
few different variables and talk about what these  
11:10 - types are. So in case I didn't really specify 
int stands for integer. And that pretty much  
11:15 - stands for any number that does not have a decimal 
point. So as soon as I put a decimal like this,  
11:21 - like 5.0, this actually becomes a new data type. 
And that data type is called a float. Now float  
11:28 - stands for floating decimal point, which means 
any number that has a floating decimal point,  
11:32 - so I'm gonna say float. Let's see, num. Two 
is going to be my variable name is equal to,  
11:39 - and in this case, I'm going to say 5.0. What's 
the issue here, add casts from double. Okay,  
11:47 - one second where I said double. So sorry, I made 
a mistake there. We're just gonna type double here  
11:52 - as the name Okay, not float. Don't worry about 
float right now. We'll talk about that later. So  
11:56 - anyways, we have double num two equals 5.0. Now 
double is exactly what I was explaining before,  
12:01 - anything that has a floating decimal point. So 
even though this is still the exact same values,  
12:06 - this in terms of mathematics, because it has 
a floating decimal point in our computer,  
12:10 - is referenced as a double. Okay? Now, there's some 
other data types as well, that we're going to talk  
12:18 - about. So we have int, we have double, we also 
have something called Boolean. Now, Boolean,  
12:23 - is true or false. And these are gonna be really 
important in the next few videos that we talked  
12:28 - about. So Boolean, I'm just gonna say B as my 
variable name, is going to be equal to, and in  
12:34 - this case, I'm going to say true. And again, make 
sure I'm putting my semicolon. Now, there's only  
12:39 - two values that a that your boolean data type 
can have. That is true, or false. Now why these  
12:47 - are important is because based on the value of a 
Boolean type, we're going to be doing things later  
12:52 - in our program. Like if B was equal to true, we're 
going to print something, otherwise we won't print  
12:55 - something. So that's really important. So another 
data type that we have is known as char, no char  
13:03 - is any character. Okay, so this is a little bit 
different from string that I talked about in the  
13:08 - last video, but I'm going to talk about string 
as well. So I'm gonna say char C, is equal to,  
13:12 - and whenever we create a character, there's two 
ways that we can do it, we can do with a Unicode,  
13:17 - which you probably don't know what that is. Or 
we could do it with single quotation marks. So by  
13:22 - just simply hitting the single quotation marks, we 
can put one letter in the single quotation marks,  
13:26 - and that is a character because that's what char 
stands for a character. So like something on  
13:30 - your keyboard, in quotation marks, now character 
could be, for example, nine in quotation marks,  
13:36 - so that's still a valid character. Because it's 
in quotation marks is different than the number  
13:41 - like nine if you're, if I were to type that 
up here, okay? So any letter or character that  
13:48 - goes in quotation marks is a char. Now we have 
to be careful, because chars can only be one,  
13:54 - one character, if I tried to, like 03, you can see 
that we're getting red text and Java's yelling at  
13:59 - us, and it's saying no, that's not allowed, 
because we can only have one thing. Alright,  
14:03 - now I just want to show you I want to go over 
again really quickly what the main differences  
14:07 - between this nine and this nine, up here we've 
declared, we're going to have an integer named  
14:13 - hello world, and it's set equal to nine. Okay, 
that's what it is. This is a character. And  
14:18 - since it's in quotation marks, this is not the 
same thing as nine. The way like the data types  
14:23 - really do matter in this sense, okay. So I'm just 
gonna change this back to like h something for  
14:29 - now. Okay. Choice equals h. So that is extremely 
important. Now string, this is another data type.  
14:36 - It's a different kind of data type, which we'll 
talk about in a second. But to make a string,  
14:40 - we do string I believe with a capital We'll see. 
And then we give a name. So for our variable,  
14:46 - in this case, I'm just gonna say str is equal to, 
and then it this time for string, we use double  
14:52 - quotation marks, okay? And I'm just gonna say 
Tim, in here. So chars, single quotation marks,  
14:58 - and strings are double quotation marks, okay? And 
strings can contain anything in them. So I could  
15:04 - have like 673 underscore star, that's a completely 
valid string, we can put any characters as long as  
15:11 - they're with inside of these quotation marks. 
Okay? Same thing with the character, if you put  
15:16 - a nine in a string, this is different than a nine 
like this. Okay? So these are our main data types,  
15:23 - there are a few other ones, but I'm not going 
to go into them right now. Because they, they're  
15:29 - a bit more complex than than we can handle right 
now. So pretty much though, you might notice that  
15:34 - this string is highlighted as a different color 
than these and see it is orange doubles, orange,  
15:39 - Booleans, orange chars orange, why is string 
blue? Now the reason it's blue? It's because  
15:45 - it's a different type of data type. These four 
data types I talked about up top here, are known  
15:51 - as primitive. And, wow, I really just did that 
I'm used to typing Python, primitive data types,  
15:58 - okay. And what that stands for, is not changeable. 
Okay, and we're going to talk more about primitive  
16:05 - data types and not primitive data types later 
on. But just know that these ones that I talked  
16:09 - about here are known as primitive in Java. And 
this one is not primitive. Okay. So anyways,  
16:16 - let's just see now, printing out like some 
of these data types, like what we get when  
16:20 - we print them to the screen, right. So if I 
print, for example, C to the screen, well,  
16:24 - you should guess what we're gonna get, we get H, 
because let's see, if we print, str, we get nine,  
16:32 - and so on. Now, last thing I want to show you 
with variables is that we can actually make  
16:36 - variables equal to other variables, and we can add 
variables, we can subtract variables. And so we're  
16:41 - gonna be doing a lot in the next video, but I want 
to just quickly introduce you. So for example,  
16:45 - I want to create a new integer, Okay, I'm gonna 
say, new integer, and I'm going to call it,  
16:49 - let's just call it Tim, why not. Now I want 
this integer to be equal to nine. Okay,  
16:55 - but I don't want to type nine out, what I'm 
going to do is I'm actually going to type Hello,  
17:00 - underscore, underscore world like this. Now what 
we've essentially done is we've taken the value  
17:06 - from hello world, and we've assigned it to Tim. 
So now if we were to print Tim to the screen,  
17:12 - we get the value nine. Now if I want to print 
hello world to the screen, you can see that we are  
17:20 - still getting the value of nine. So now Tim points 
to hello world, which points a nine, right, so  
17:26 - Tim is equal to nine and hello world is equal to 
nine. And we can do that and we can add variables  
17:31 - together, we can subtract variables, we can do all 
kinds of cool things. And that's really the point  
17:35 - of variables, right. So we just have to make sure 
when we're doing this, for example, that we don't  
17:39 - do something like this. String temp equals hello 
world, you can see here now it says cannot convert  
17:46 - from int to string, because the datatype string 
is obviously not the same as nine. So we can't  
17:51 - do that until we learn about something called 
typecasting, which will be in a future video.  
17:58 - Now in this video, I'm going to be adding on to 
some of the stuff I did with variables in the last  
18:02 - video. And I am going to be talking about basic 
operations like plus minus subtraction, division,  
18:08 - exponential, all of that fun stuff. So without 
further ado, let's get started. I want I'm first  
18:15 - going to do is just talk about another way that 
we can create variables in Java. So earlier,  
18:19 - you saw me do something like this index equals 
six, okay, this is fine. This works, we already  
18:25 - know this. But there's another way that we can 
actually create this variable. And to do that,  
18:29 - we can actually omit this equal six. So if we 
do this, and we just say int x, what happens  
18:35 - now is we've declared that x is a variable, 
it exists, but we've not given it a value. So  
18:41 - we've declared it but we have not initialized it. 
I'll show you what I mean by this by just doing  
18:46 - System dot out dot print ln, and we're simply 
going to print x and just see what we get. Oh,  
18:53 - probably helped I spelt print correctly. Okay. 
Wow, I really messed something up, print ln,  
19:00 - okay, run this. And you can see, we are already 
warned that there is an error. So we'll proceed  
19:04 - but and it says the local variable x may not have 
been initialized. So before we can actually use  
19:10 - the variable x, when we set up like this, we 
have to initialize it. Now to do that any line  
19:14 - underneath this declaration, we can just say x is 
equal to and then whatever value you want it to  
19:19 - be as long as it's an integer value. So in this 
case, I'm going to say x equals six. And now if  
19:23 - we run the program, everything looks fine, and 
we get six. Now, obviously, we can do this with  
19:27 - every data type. So if I do like char, and char 
x, right, and that's fine, I say char x equals  
19:35 - single quotation marks, f like that. Okay, then we 
can print that out, and that will work fine. Now,  
19:41 - what I want to talk about now is operations. 
So I am going to create a few variables,  
19:47 - I'm going to say integer x equals five. Don't 
forget your semi colon, integer y equals seven  
19:54 - and I'll say int Zed is equal to 50. Okay, I'll 
create one more variable. And that's where we're  
20:03 - going to start talking. So what I want to do now 
is I want to sum all of these variables. So 56,  
20:09 - seven, and five. But I don't want to write like 56 
plus seven plus five, okay? Because Yeah, that's  
20:17 - the value of these variables, this works fine. But 
what if I were to change this variable y? Well,  
20:23 - that means I have to go down here and I have to 
change this as well to whatever I change y to what  
20:27 - if I want to change x and y? Well, that means I 
have to change both of these. So there's a really  
20:31 - cool thing that we can do. And we can just use the 
variable names and just add them up. So we can say  
20:36 - x plus y, plus Zed like this, okay. And now our 
variable sum stores the value of the sum of these  
20:45 - three variables. And to prove it to you, I will 
print it to the screen, and you can see that we  
20:50 - get 68 as our sum. Now, Furthermore, if we wanted 
to take the difference of all these and subtract  
20:56 - them, all we have to do is simply replaces with a 
minus sign, and we get negative 58. Okay, now to  
21:04 - multiply things, this is another operator, we can 
do multiplication like this, replace this one with  
21:10 - multiplication, and we'll multiply all these out 
together, you can see we get 1960 as our value to  
21:17 - divide, we can use the forward slash. Now I'm not 
going to do that right now, because that is kind  
21:21 - of a different topic. There's a weird thing with 
Division I have to talk about. But that's how you  
21:27 - do that. So those are four basic operators. Now, 
these work just like they work in math, in terms  
21:33 - of order of operations, right? So we're gonna 
start off with exponents, and then go bracket  
21:38 - or brackets, exponents, division, multiplication, 
and so on through the process. Okay, I assume you  
21:45 - guys know order of operations. So that means 
if I do something like x times y minus said,  
21:52 - What's first going to operate is x multiplied 
by y. And then we're going to subtract said from  
21:57 - whatever this value is. Now again, if I switch 
this and I go like y, multiplied by said, what's  
22:04 - going to happen first is y multiplied by Zed, and 
then the subtraction is going to happen. Now, for  
22:09 - example, if we have the operators that have the 
same presidents are the same, I don't know like  
22:14 - order of operation level, I don't know what to 
call it. It's just gonna order operate from left  
22:21 - to right, so it's going to do x multiplied by y 
multiplied by Zed. So this is a common occurrence  
22:25 - a lot people to understand this. If we do a 
division sign, we're first gonna multiply x times  
22:30 - y, and then we're gonna divide by Zed afterwards. 
Okay, so that's how that works. Now when we're  
22:36 - whenever we're doing operations like this, we 
can also add brackets in. So if I wanted to, for  
22:40 - example, say x multiplied by y, and then divided 
by Zed, I could do something like this by throwing  
22:46 - brackets in here. So now it's showing 100% that 
we're going to multiply this for we divide. And  
22:52 - same thing, if I did this, now, whatever's 
in the brackets is going to happen first. And  
22:56 - then I can divide by said, and obviously we can 
embed more brackets in here. So I can say like,  
23:00 - multiplied by y, times y, okay? Like, get out 
as many brackets and layers as you want. And  
23:07 - that's totally acceptable. And that totally works. 
Okay. So now, we are going to talk about division  
23:14 - more specifically, and then go into a few more 
operators because division works a little bit  
23:18 - different. In Java, is it just in general, okay. 
So if I want to divide 56 by seven, so I want to  
23:26 - divide Zed by y, okay? And I some just do you, 
okay? I'm going to call this year, and I print  
23:35 - this out to the screen. 56 divided by seven, gives 
me a value of eight. That is because our data type  
23:42 - for the variable u, which is holding the value of 
Zed and y, or is that divided by y is an integer.  
23:49 - So it actually isn't able to give us a floating 
point number, although we know that this number  
23:55 - is a floating point number, or is it a? Let's 
see, let's make sure this is not messed up. 57  
24:00 - divided by this guy. Yeah, so we can't give us a 
floating point number because this is well an int  
24:06 - datatype. So it assumes that we want an integer 
in return. So therefore just going to give us the  
24:10 - value and terminate all the decimals guy. So say 
this numbers like eight point something just gives  
24:15 - us eight, right? removes the remainder. Now if 
I want to get decimal points, what you will want  
24:20 - to do most the time, I could try to do something 
like this. Okay, double of u equals Zed divided  
24:29 - by y. And you mean Okay, that makes sense double 
like it's going to give us the floating point.  
24:32 - But watch what happens around this, we just get a 
point out, well, we know that 57 divided by seven  
24:37 - is not 8.0. It has some decimal component to it 
that I couldn't tell you right now. But why aren't  
24:43 - we getting that? Well, that is because the two 
data types that we are dividing are both integers,  
24:49 - which means when we get a value back from this, 
it's going to be an integer value. And then all we  
24:56 - do is convert it into double because we have this 
double here. Okay? Just by adding that dot zero,  
25:01 - so how can we ensure that we get a floating point? 
Well, there's two things we could do, we could  
25:06 - first change the bottom to be a double. And we 
could change the top to be a double. So I could  
25:12 - do like this, it's like double. And I could change 
this to be a double. Alright, and if we have both  
25:20 - of these double, and we try this, now I can 
see that we get our decimal point, okay? And it  
25:26 - shows up and gives us like, whatever that is. Now, 
what if I just make one of these, so I say int y,  
25:31 - and this is double i'd let's try this. Now, you 
can see we still get our floating point. That is,  
25:38 - because if one of the values that we're dividing 
here is a double, it's going to automatically make  
25:43 - the whole thing a double. So one of them is a 
double, everything becomes a double. And this  
25:47 - is the way it works for all the operations. So if 
you have double u, and in this case, we say like  
25:53 - x times y, or let's say x times Zed, since Zed is 
a double x is not, we're still gonna get a double  
26:02 - value. So if we run this, you can see that we get 
this little point oh, so if one of our operands is  
26:06 - a double, then that means everything is going to 
be a double when we use it or whatever. Okay. Now,  
26:12 - exponent, whether we can explain it is we have 
to bring in module I believe, but it's like math  
26:19 - dot how. And then in here, you put the, what do 
you call it, the base and the exponent, there's  
26:27 - not a star star like in most languages, okay. I'm 
gonna say, instead of D is equal to math dot pal.  
26:36 - And here, I'm simply going to raise x to the power 
y. Alright, so we get math dot pow, let's see what  
26:42 - is it saying? convert doc. So let's do this. int, 
int, int. cannot convert form double to form. It's  
26:53 - interesting why it's telling you that let's just 
try this maybe. There we go. Okay, so whenever we  
27:00 - get X, X, exponents, apparently they have to be 
in the form double. Okay, I didn't know that. But  
27:06 - all right. So now if I want to print out D, what's 
going to happen is we get the exponent for this,  
27:13 - okay? So math dot pow, this is your base. And 
this is what you're raising the quantity. So  
27:17 - five to the seven apparently is equal to that. 
Okay, so that is pretty much it for operators,  
27:24 - I guess. Obviously, you can have as many operators 
in one line as you want, you now understand how  
27:29 - things work in terms of doubles. And instead 
of one of the operators in the whole chain of  
27:33 - operators that are operators variables that you're 
adding, subtracting dividing whatever is a double,  
27:39 - then that means you're going to get a double 
value back for 100%. If all of them are integers,  
27:43 - that means you're going to get an integer value 
back out, same thing here. So I have, let's change  
27:48 - y back to double. And let's change you to be int. 
Okay, so it says int you x times set. So now,  
27:57 - that's x times x times y. Okay, so now you can see 
we're getting an error here, cannot convert from  
28:03 - double to Ent. And that is because we're trying 
to say that the integer u is equal to x times y,  
28:08 - but y is a double value. So when we get a value 
back here, it's going to be double. So we can't  
28:14 - convert that into an integer just by doing this. 
And there's another way that we can do it that I'm  
28:18 - going to show you in a second, okay. So we would 
have to make sure that this stays testable. And  
28:23 - it's nice in this ID, it tells you when you made 
a mistake like that because a lot of times you  
28:27 - might not really see that in your program. Okay, 
now I'm quickly going to go over something called  
28:31 - typecasting. We're going to talk about this 
a lot more later. But I'm just going to show  
28:37 - you like fairly quickly how this works. I'm 
just gonna delete this line. And we're going  
28:42 - to turn these back into integers. Okay, so if I 
want to do something like x divided by y, okay,  
28:49 - and I want to make sure that I'm getting that 
value, right, the decimal point value, okay, like  
28:54 - so a double, rather than converting these like the 
declaration of a variable to a double. So maybe we  
29:01 - can do called typecasting and to typecast, we are 
changing inline, without changing the declaration,  
29:07 - the type of the variable, the way to do this is 
to simply put in brackets, the type that you want  
29:12 - to convert your variable into, and then directly 
afterwards is the variable you want to convert.  
29:17 - So in this case, it's double. And then we have y. 
Okay, so if I run this now, and I print u, instead  
29:24 - of D, you can see that we get the decimal value 
that we were looking for. If I remove this double,  
29:29 - right, then we do not get that or we do just go 
to those double, but you guys see the point. Okay.  
29:40 - So in this video, I'm just gonna be teaching you 
one more operator that I forgot to mention in the  
29:44 - last video. And we're gonna be talking about 
getting input from the user using something  
29:48 - called a scanner. Now this scanner is going to 
allow us to grab like text, numbers, strings,  
29:54 - all that fun stuff from the user and then do 
something with that input. And that is kind of the  
29:59 - basis of progress. All right, based on what a user 
does, we want to do something in most cases. So,  
30:05 - first thing that we're going to do is just teach 
this other operator, it is the remainder operator  
30:08 - still going to take the very long excuse, I'm just 
gonna say int x is equal to 56. modulus. And this  
30:17 - is what the name of the operator is modulus, 
it's simply a percent sign, pick a number. In  
30:20 - this case, I'm gonna pick five. Okay, so what this 
remainder operator does, it's called the modulus.  
30:27 - Okay? Some people like to call a remainder 
operator, and it's simply a percent sign gives  
30:31 - us the remainder of this division. So this 
division is actually equal to, would you call  
30:36 - it 36 divided by five should give us 11? Okay, 11 
remainder one is what this division actually is  
30:43 - equal to. So if we print x, we should get a value 
of one. And there we go. And that's literally all  
30:50 - the remainder operator is gives you the remainder 
of a division. I don't think I need to talk about  
30:55 - it too much more, I'm sure you guys want to get 
into the input. So I will leave that alone for  
30:59 - now. Okay, so let's get rid of this line. And now 
let's talk about how we can get input. So using a  
31:06 - scanner is what we're going to do so well, first 
thing we need to actually do is at the top of your  
31:09 - program, you'll notice I have a new line here that 
says import Java dot util dot scanner. I need you  
31:15 - guys to type this out for me, Java dot util dot 
scanner, make sure you add your semicolon, because  
31:19 - this is what we're going to be using to get input. 
And whenever we use certain tools in Java, we need  
31:24 - to import them at the top of our program so that 
we can simply just type like certain data types.  
31:30 - And we'll get into this later when we talk about 
classes and methods and all that stuff. Okay,  
31:34 - so once we've done that, we need to set up a 
new scanner object. So we're gonna type scanner,  
31:39 - the name of the scanner, I'm just gonna say SC is 
equal to a new scanner. And inside of the scanner,  
31:46 - we're gonna type System dot gains brackets. This 
might seem confusing, but also is doing is it  
31:53 - saying scanner is a dump type just like string 
as the data type, just like boolean data, okay,  
31:59 - it's a different type of data type, but it is in 
a data type. Its name is sc. And instead of typing  
32:05 - like one, or like putting quotation marks and 
typing a string, we're gonna say what's equal to  
32:10 - a new scanner. And what the scanner is going to be 
is system.in, which means typing on your keyboard.  
32:16 - And there's different types of scanners, which 
we'll get into later, not in this video. So once  
32:22 - we've set up our scanner, we need to actually use 
the scanner. So how can we do this? So what I'm  
32:28 - going to type now is I'm going to say string scan 
is equal to sc dot next. And I think we can just  
32:40 - use next Yep. So what this does is we're creating 
a new variable string, it's called or it's a  
32:47 - string type called scan. And it is going to get 
the next stream of input from the scanner object.  
32:54 - Okay, so SC dot next is what allows us to get a 
string from the user. So I'm just going to print  
33:00 - out scans after we get it because I want to show 
you what happens. I'm just gonna run the program  
33:04 - and illustrate and we'll talk about it. So now 
you can see if I go down here, my cursor shows up,  
33:09 - I'm able to type this because when type will 
Okay, watch, watch runs. When I hit Enter,  
33:13 - it prints Hello, underneath it. So hello, which 
we typed in was the input. You got scanned in by  
33:22 - the scanner object using SC dot next, it got 
stored in the variable scanned, and then we  
33:26 - were able to print scan out to the screen. Okay. 
Pretty straightforward. That's how it works with  
33:32 - strings. Now watch this. If I type one, one works 
fine. But I just need to show you that now I'm  
33:40 - going to do this with the MTA. So I'm gonna say 
int scan equals SC dot Next, well, what's what's  
33:46 - happening? What's wrong? Well, the issue right 
now is we are trying to turn a string which is,  
33:53 - which is what this returns to us into an integer. 
So we can't actually do that. Because what per  
34:00 - se would proceed, we just run into an error, 
we cannot convert from string to int, because  
34:05 - what this method gives us is a string. Now, if we 
wanted to be able to get an integer from the user,  
34:10 - for them typing, we have to use a another method, 
okay. And this one is called next it. Now you can  
34:17 - see we're getting no more red lines, everything 
seems to be working fine. sc dot next int. And if  
34:23 - we run this, then we type like 54. That works fine 
prints that out for us. What would happen? So if  
34:30 - I try to type in something like Hello, so there's 
no errors right now, like Java is not telling us  
34:34 - there's anything wrong. If I type Hello, we get an 
issue. Now that's because this was expecting me to  
34:40 - type in a integer. And what happens in here like 
this little line of code, what it actually does,  
34:45 - is it tries to convert what I'm typing in, 
which automatically comes in as a string into an  
34:50 - integer. So when it tried to do this, it tried to 
convert Hello into an integer and no one not you,  
34:55 - not you, not you or me knows how to convert 
Hello into an integer so it threw us an error.  
35:00 - So now that that's not allowed, you can't do that. 
So I'll show you what we can do now if we want to  
35:04 - get Booleans and other types, and I'll show you 
a way to work around an error like this. Okay?  
35:09 - So if we want to get a boolean value, we could 
type Boolean scan equals Next, add, what do you  
35:15 - look at this Boolean? That's literally the name to 
get a Boolean SC next Boolean. Okay. So let's run  
35:21 - this. Now, note a Boolean has to be true. spelled 
correctly or false with lowercase is I'm pretty  
35:28 - sure. So true, that works fine. But if I try to 
type like Hello, or five or something in there,  
35:33 - that's gonna crash, it's going to give us an 
issue. Okay? So Boolean lets you do that one,  
35:37 - once you get a double could do double equals 
next. And guess what this one is? Next double,  
35:44 - there you go. And now it's going to expect a 
number of some sorts, like six would work fine,  
35:49 - but I'm going to undo 6.3. And it prints out 
6.3. Let's actually just test six at six. Yeah,  
35:55 - just give us 6.0. So that works fine. Okay, to 
getting doubles. Now, I want to work around the  
36:00 - issue of what happens like we get that crash, 
okay, we don't we don't want that crash. So  
36:05 - how can we fix that if we're per se, when it's 
expecting a double, I type in like, hello. Well,  
36:10 - what we should do is always get a string. So we 
should always say a C dot next. And always turn  
36:17 - this into a string. And that's because a string 
can be anything like anything we type in here is  
36:21 - fine to be a string, because remember, a string 
is simply anything in double quotation marks. So  
36:25 - if I type true, although Yeah, we know it's a 
Boolean, it's in the quotation marks. So it's  
36:30 - really a string. Okay? If I type one, that's a 
string, type 1.6, it's a string, like anything  
36:36 - can be converted into a string, pretty much. So 
that works fine for us. Now, once we have it as  
36:41 - a string, we can then convert it into an integer. 
Sorry, I had to see a quick cut there. But what  
36:48 - we're going to do now is we're going to attempt 
to convert this value into a different type. So  
36:53 - in our case, I want to convert it into an integer. 
So the way that we can do that is we first need  
36:57 - to set up a variable. So I'm gonna say index 
in this case, is equal to scan. Now, I'm going  
37:03 - to put something with this scan, I can't just say 
index equals scan, I can't, I can't just do that,  
37:09 - it's not just gonna be able to convert that for 
me, it doesn't know how to do that. So what we  
37:13 - need to do here is actually do dots, and are 
certainly to type here. integer dot parse, int,  
37:23 - okay. And then inside of the brackets for parse 
int, we're going to put scanned, and what this  
37:30 - is going to allow us to do is well convert into an 
integer. And if you guys just highlight over this,  
37:34 - you don't know what it does, you can actually 
read through the definition. So in this case,  
37:37 - it's going to say parses the string argument 
as a signed decimal integer, the character in  
37:42 - the string must be old decimal digits, except the 
first character may be an ASCII minus sign. Okay,  
37:47 - so we can tell you it tells you exactly what this 
does, it tells you what integer does integers a  
37:51 - class. So yeah, it'll convert that for us, so 
that if I wanted to print x to the screen, that  
37:58 - would work fine. Now, the thing is that when this 
is what we're gonna be doing in the next video,  
38:01 - is, we still run into the same issue because 
again, like now, if I type something like Hello,  
38:09 - we still get a crash, because how do we can 
convert Hello into an integer? Well, we should  
38:15 - really first check if the value is an integer. 
And I'm going to be showing you in the next video,  
38:21 - I believe, the next one or the one after that, how 
we can actually do that using if statements and  
38:25 - else statements and error catching later on. So 
stay tuned for that. But this is the way for right  
38:31 - now. If you know, you're going to be getting an 
integer that you can convert it in, or obviously  
38:35 - you could just do next int and turn this to an 
int like that, and everything works fine for you.  
38:44 - So in this video, we're going to be 
talking about comparison operators,  
38:48 - like greater than less than or equal to not really 
talking about chaining conditionals together,  
38:53 - which you'll see if you don't really understand 
what it is right now throughout the video,  
38:57 - and how we can use those Boolean variables to do 
certain things for us. So that's what we talked  
39:02 - about in the first few videos. And if you guys 
don't really know what the point of Boolean is,  
39:06 - well, this video will show you. So without further 
ado, let's get started. So I'm just going to start  
39:10 - off by typing a few numbers here because it's 
just the easiest way to compare things to start,  
39:15 - and then we'll do some other stuff. So I'm going 
to create three variables that are integers.  
39:20 - X is six, y is seven ends, that is 10. Now I'm 
going to create a boolean variable. So Boolean,  
39:28 - else, call it compare, and we'll just set that 
blank for right now. So what I want to do is I  
39:34 - want to compare x and y and Zed using some 
different comparison operators. So in Java,  
39:40 - I'm going to write them out here. We have a belief 
for main comparison operators four or five. So  
39:46 - we'll type them out and we can see, so the first 
one is greater than, and then we have less than  
39:50 - we have equal to, oops, we have greater than or 
equal to less than or equal to and not equal to.  
39:57 - Now I know I just went through those fast but 
they're pretty straightforward, this is simply  
40:01 - going to state whether something is greater than 
the other thing, this is less than the other thing  
40:06 - or whatever way you have it right? This is, is 
equal to so the double equal sign is different  
40:11 - than the single equal sign, double equal sign is 
when you're comparing two values to see if they're  
40:16 - the same. And the single equal sign like this one 
here, is if you're assigning a value, so make sure  
40:21 - you remember that because a lot of people when 
they compare things, they forget to add the other  
40:25 - equal sign, and they just use one and they end up 
running into some issues. Okay, so greater than  
40:29 - or equal to pretty straightforward, less than 
or equal to same thing and not equal to as an  
40:33 - exclamation point and an equal sign. Now I'm going 
to go through these and show what all these do. So  
40:39 - I saw Actually, I'll leave that there. And because 
I just remember that I have been forgetting to  
40:43 - teach you this. If you do two slashes in Java, 
this stands for a comment. And a comment is simply  
40:49 - something that the computer is going to ignore. 
And it's just there for the programmer. So they  
40:54 - can look at it and be like, Okay, this is what 
this line of code does. Whatever the computer  
40:59 - doesn't care, so whenever it sees a line that 
has starts with two slashes, this is how you do  
41:03 - a comment. It just ignores that line and moves 
on. So that's simply what a comment is. And it  
41:07 - just Gray's out in here to show us that that's a 
comment. Okay, so compare. So I want to compare x  
41:13 - and y. And I want to set see if x is less than 
y. So say, if x is less than y, and what this  
41:21 - statement right here that we're typing here is 
going to return a value of either true or false.  
41:24 - So we can look at this, we say, well, six is not 
less than seven. Yes, it is. So that should give  
41:30 - us a value of true. So if we print compared to the 
screen, then you can see we get true like that.  
41:36 - Now, if I flip this around, and I say greater 
than, okay, what do you think we're going to get?  
41:42 - Well, we get false, it's pretty straightforward to 
compare the two values to see if they're the same,  
41:47 - we can do two equal signs. And in this case, we 
get false. And now this this comparison operator,  
41:54 - some people get confused by. But if I do not 
equal to, what this is going to tell me is if  
41:59 - the two values on the left side and the right side 
of the comparison operator are not the same, so if  
42:03 - they're not the same, I get true. If they are the 
same, I get false. So in this case, they're not  
42:07 - the same. So we should be getting true. Okay. And 
I guess I can show you greater than or equal to,  
42:13 - but they're pretty straightforward in terms of 
how they work, at least on numbers. Okay? Now,  
42:18 - these work fine. So greater than or equal to less 
than or equal to on numbers. But what if I want  
42:22 - to compare strings, so I'm just going to change x 
and y, I'm gonna make two strings here. I'll say,  
42:28 - oops, string, x, will say hello, and string 
y. And this is equal to pi. Okay? So see,  
42:42 - now I'm getting this blurred out, or this red 
line here, it's saying the comparison operator  
42:46 - greater than or equal to undefined for strings. So 
the only ones that I'm allowed to do on strings,  
42:51 - at least for right now that we're going to talk 
about, are two equal signs, or not equal to,  
42:56 - okay? And not equal to is simply going to say, 
right, if the strings are not the same, and if  
43:02 - they are the same, so in this case, I say not the 
same, I'm gonna get true. If I try to see say,  
43:07 - if they are the same, I get false. Now, I want you 
to just show you one thing here, if I type Hello,  
43:12 - and I add a capital O at the end of Hello like 
this, do we think that this is the same as Hello  
43:18 - with all lower cases are not? Well, I'll show 
you. It is not so capital letters do matter. In  
43:25 - program, right, let's assume with variable names, 
like the capital variable Y is different than the  
43:29 - lowercase variable y. Okay, so that's how we 
can compare those. And I want to see actually,  
43:35 - can we use greater than net, we can't use 
greater than or less than on strings either.  
43:39 - Okay. So what I'm going to do now is I want to 
chain multiple conditions together. So I'm going  
43:45 - to show you the end operator, the OR operator, 
and the NOT operator. And these are how we can  
43:50 - add multiple conditions together to get one 
like main condition. If that makes sense,  
43:56 - I'm going to change these back to two numbers 
might be faster just to type them out. index  
44:01 - equals what I have six into y equals, let's just 
do like 23. Why not? Okay, so now I'm going to  
44:07 - compare multiple things at once. So I first want 
to compare if x is greater than y, but I also want  
44:13 - to compare if Zed is greater than x, say I want to 
check two things perfectly viable. In many cases,  
44:19 - you'd want to do that. The way that we can do that 
in Java to compare if two things are the same,  
44:24 - is using this an operator AND AND operator is 
looks like this. So it's these two and signs,  
44:30 - okay? And then we have to add another condition 
after this. In this case, I'm going to say if  
44:34 - Zed is arch, say Zed is less than y, okay? You can 
see that's fine. We're not getting any red lines.  
44:41 - And what this does is it's going to compare the 
operation on the left side, it's going to do the  
44:46 - comparison on the right side, and then we're going 
to end up getting two values. So in this case,  
44:50 - x is greater than y. So six, is that greater than 
y? No, we're gonna get false. So I'll just type  
44:54 - it out as if this is what's happening in the 
computer, right? And that is less than y. Yes,  
44:59 - it is. So we get true like this, okay? Now, we 
have a false and we have a true, but we have  
45:07 - this and operator in between them. What this and 
operators can do is it's going to check if both of  
45:11 - the conditions on the left side and the right side 
are true. If they're both true, it returns true to  
45:17 - us. If they're both pretty one of them is false, 
or both of them are false, then we get a false  
45:22 - value. So in this case, since this one is false, 
we're going to get a false value because both of  
45:26 - them have to be true for this to evaluate to true. 
So I'll show you if I do this. Okay, and I print  
45:33 - this to the screen, you can see we get a false 
value, because this is saying, if this and this  
45:37 - are true, then the whole thing is true. Okay. Now 
another operator that we have is the OR operator.  
45:44 - And the OR operator is to straight up lines like 
this, I don't know what they're actually called,  
45:48 - the key for that, but anyways, so this is gonna do 
kind of, it's similar to end. But in the other way  
45:55 - around, if one of the two conditions are true, 
the whole thing is going to be true. Otherwise,  
46:00 - if both of them are false, it's false, right? 
So the way that we can determine this again,  
46:07 - right is we'll do this condition, we'll see what 
this is equal to, and then we'll see what this  
46:10 - is equal to. And if one of them are true, we get a 
true value. So let's run and there we go, you see,  
46:14 - we get a true value. Now, we have a knot operator. 
Now what not does is simply going to reverse  
46:22 - anything. And this is what I like to think about 
it, whatever you have, if you see the knot, just  
46:26 - reverse it. So what this does is it's going to say 
if this condition is not true, then we get false.  
46:34 - Or if this condition is false or not true, then 
we get true other way around. If this condition  
46:40 - is true, then it's false. Because it's checking if 
it's not true, I hope that makes sense, you kind  
46:45 - of just have to play with it to make sense of it. 
But in this case, since we get a true value, and  
46:50 - we have this exclamation point, which is our NOT 
operator is going to give us false. So you can see  
46:55 - here we get false. Now if in here I were to put a 
false value. So let's literally I'll just show you  
47:02 - by typing in the value, I say not and then false 
in there, you can see that we get a true value.  
47:08 - So it's simply just reverses like anything that 
you're looking at. Now I want to show you that  
47:13 - we can actually combined all of these operators 
together. So what we can do is we can use like  
47:18 - ands and ORS and we can have an infinitely 
long chain of a condition that will eventually  
47:22 - evaluate to true. Now this is actually some kind 
of like math problems you have to do typically in  
47:26 - university, I'm gonna have to do it next semester, 
where you have like a ton of different conditions,  
47:31 - and you have to figure out if you're going to 
get true or false based on them. So I'll show  
47:34 - you like a pretty basic example. So I'll say if x 
is less than y, and y is greater than Zed, or Zed  
47:44 - plus two is less than five. Or what do you call 
it? Like x plus seven is greater than what? Okay,  
47:54 - so I just typed a bunch of conditions, right? 
How do we determine which ones which of these  
47:59 - are going to evaluate first? Well, that is a good 
question. And typically, you'd never type it like  
48:04 - this. Because just looking at this, like even 
I'm looking at it right now after I just typed  
48:07 - it in. I'm like, wow, okay, how do I determine 
which one of these is going to happen first,  
48:12 - typically, you put things in brackets, so I would 
say something like this. It's like x and y. Okay,  
48:17 - so I have this first conditional, right? You put 
in brackets, it's going to evaluate this, and in  
48:22 - this case, we'll get I'm not going to bother doing 
the actual evaluation. But let's say we get true,  
48:25 - okay? Or so we have true, or whatever this 
evaluated with this is. So what this is  
48:33 - going to do now is it's going to look at said plus 
two, if that's less than five, if that's true,  
48:38 - then we get true or and then whatever this is, 
and then we could treat this as if this is in  
48:43 - brackets like this. Okay. So now the way that this 
would work, is we do everything in brackets here,  
48:48 - we get a value of like true or false. We do 
everything in brackets here, we get a value of  
48:51 - true or false. And then we'd see if either of them 
are true, and return that value. So you know what,  
48:56 - let's just print it to see what we get. If we get 
true, okay, I don't even know how that worked to  
49:00 - be honest. And yeah, that's how we could do 
that. And we can also throw knots in here  
49:05 - too. So if I want to throw a knot like this, 
then we can do that. Now typically, you're not  
49:09 - going to see massive chain conditionals like this, 
because of the exact problem we're running into,  
49:14 - it's difficult to determine what they are by just 
reading it. And you'll see when we go into if  
49:18 - and else statements in the next video how we can 
use these conditions to evaluate certain things,  
49:23 - I just wanted to show you that you can combine 
multiple things. And for example, I don't only  
49:28 - have to use variables, you can see that here I put 
Zed plus two less than five, that's a perfectly  
49:32 - valid condition that works perfectly fine, can 
change this is equal to five, right? And you can  
49:37 - add constants, like I could just say two is equal 
to five if I want it to, but that's fine. You can  
49:43 - compare with constants. And with strings, just 
remember you can do less than or equal to, or  
49:47 - sorry, not less than not the not equal to or equal 
to, and you can compare floats with intz. And  
49:52 - you'll see as we continue going through the video, 
it's too long to go through all them right now.  
49:59 - In this video, we're going to be going over if, 
else and Elif statements in Java. So quickly,  
50:06 - just I want to fix a really small mistake I made 
in the last video. So if you guys don't know,  
50:09 - I am like a Python programmer typically. So I'm 
doing Java, obviously. But Python is like my  
50:15 - first language. So I'm used to being able to use 
two equal signs on pretty much anything because  
50:18 - that's what you can do in Python. But in the 
last video, I showed you using two equal signs  
50:22 - on strings. Now, that's not incorrect to do that, 
but it's not going to work the way you think right  
50:28 - now. So if you want to compare if two strings are 
logically the same, like the actual string values  
50:33 - have the same, what you should actually do is say 
you have a string. So in this case, you have to  
50:38 - do dot equals Okay. And then inside of this equals 
here, you're going to put the string that you want  
50:42 - to compare it to, or you're going to put another 
variable, which is a string. So in this case,  
50:46 - I want to say if like, my scanner object, which 
I've just typed out before this video, is equal  
50:50 - to Hello, this is how I would do it with this dot 
equal sign, not the two equal signs, you the two  
50:56 - equal signs isn't wrong, but it's going to give 
you a different answer. And we will talk about  
51:00 - that in future videos, but it's too advanced to go 
into right now. So just remember, if you want to  
51:04 - compare two strings, use dot equals My apologies 
about that from the last video. So what we want to  
51:09 - do now is we're going to do it using if and else 
statements. So pretty much if something happens,  
51:14 - do this, otherwise, do this. And this is the 
basis of programming. Using conditions based  
51:22 - on like user input, or based on certain events 
that happened, we're gonna do different things,  
51:25 - right? So they're really important to understand. 
So first of all, what I'm doing here is I'm just  
51:30 - getting, I'm just setting up a new scanner object, 
I'm just going to get input from the user, we've  
51:34 - already talked about this. And what I want to do 
is I want to check that user's input, and based  
51:39 - on what they type in, I want to do something. 
So the basic syntax for if analysis in Java is  
51:44 - you simply type if you put brackets, and inside 
of these brackets is going to be your condition.  
51:49 - And this is why I spend so much time talking about 
conditions the last video, the condition here is  
51:54 - if this condition evaluates to true, whatever's 
inside of what I'm going to show you here,  
51:58 - whatever's inside of these curly braces is going 
to happen. So let's start with the condition. When  
52:03 - I say if s dot equals not two equal signs, and 
in this case, I'm going to say, Tim. So if the  
52:10 - user types in Tim, when we're when we prompt them 
for input, then I want to do something. And what's  
52:16 - going to happen is inside of these curly braces, 
and this denotes a block. So this is known as like  
52:21 - an if statement, or an IF block. So this block 
simply goes to syntax, if then we have this,  
52:28 - these brackets inside the brackets as a condition, 
the condition can be as long as it wants as long  
52:33 - as you want, as long as you're going to get a 
true or false value back from it. And then we  
52:37 - have these curly braces, so an open brace and a 
closed brace. And inside of these braces, anything  
52:42 - that I typed in here is going to happen if this 
condition is true. So let's just do a quick little  
52:47 - test here. And I'm going to do system dot out. 
dot print ln. And in this case, we'll just say,  
52:52 - you typed Tim, okay, what types you types? you 
typed Tim? Okay. And let's run the program and  
53:02 - see what happens. So when I run this, if it loads 
up, That's odd. Okay. Give me one second. Okay,  
53:10 - so we're back, I accidentally closed my console. 
And yeah, we running into some issues with that.  
53:14 - So I got that up and running now. Let me 
just restart this quickly. Okay. Wow, okay.  
53:21 - I don't know why. That's why But anyways, let's 
just type out. What are we going to say here,  
53:25 - let's type hello and see what we get? Well, we get 
nothing because we didn't type Tim. So let's run  
53:31 - it again. Let's try it. And this time I type Tim, 
and it says, you typed Tim. So there we go, our  
53:36 - basic if statement is working. Now I want you to 
just put another system dot out over here so that  
53:45 - we can see what happens when we have like just 
with this example. Okay, I'm just going to print,  
53:51 - I'm literally going to print print. Okay. So now 
what I want to show, what happens here is like,  
53:57 - what is the program going to run? So if we type 
Tim, we're gonna get this you type Tim. But are  
54:03 - we still going to get this print out here? Or are 
we not going to get it? Well, let's test this out  
54:07 - and see, okay, so in this case, I typed Tim. So 
when I typed him, it says you type Tim and then  
54:11 - it says print, okay? Now the reason that happens 
is because this print is not within this if block,  
54:16 - right? So we're just going to execute simply 
after this if block happens now, same thing,  
54:20 - right? If I type, like Hi, it's still going to 
print out print to the screen. Because right?  
54:27 - It didn't go through this if block but this is 
not inside of the if block or the if statement  
54:31 - or whatever. So that executes. Okay, so that's 
pretty straightforward. Now I'm going to show  
54:36 - you else and elsket rest start with else. So else 
is very straightforward. It can only come after,  
54:43 - and else if or and if so, like the start of 
the block has to be if and then this else You  
54:50 - can't just have it like alone. It has to come 
after an if statement or an elsif statement,  
54:54 - which we're going to go into in a second. Okay. 
There's different ways to format this. Some people  
54:58 - like to put the else like this Has the closing 
brace than the open brace. I personally like  
55:03 - to do it like this. Some people like to do it like 
this, it's however you want, okay? This just works  
55:09 - fine. Just make sure that your curly brace doesn't 
look something like that all the way up there,  
55:13 - because that's kind of hard to read. Okay. So 
what I'm going to do now is I'm going to put this  
55:16 - print statement, and I'm going to put it in my elf 
statement, right? Now, the way this else works is,  
55:22 - if this happens, that's fine. We're going to go 
in here, we're going to print this out, and then  
55:27 - we'll move down to the end of the block. So we'll 
go to here as our next execution line. Now, if  
55:33 - this doesn't happen, so other words, or else, then 
we print this, so we're either printing you type  
55:39 - Tim or print, we're never printing both because 
one of them is if and one of themselves. Alright,  
55:44 - so let's test this out. If I type Tim, we you type 
Tim. Okay, if I type anything else, so like some  
55:51 - random letters, and I hit Enter, you get print. 
So is LS works is it's meant to do something if  
55:56 - this condition is not true, right? Okay, so that's 
pretty straightforward. I don't think any to talk  
56:01 - about that anymore. The next one I'm going to 
show you is elsif. Now this is a way that we can  
56:05 - add multiple if conditions in one kind of block. 
Okay, so what I can do now is I can do like elsif.  
56:13 - And now it's the exact same syntax as regular if 
statement, except you just have this else before.  
56:19 - And obviously, since this is an else it has to 
come after an initial if statement. So you can  
56:26 - have as many of these else ifs as you want. Now, 
first, I'll just put a condition in here. So say,  
56:31 - s dot equals, and in this case, let's just say 
like, Hello, okay. And then in here, we'll just do  
56:39 - system, dot out, dot print, ln, and we'll just say 
hi, because we want to greet them back. They said,  
56:47 - Hello. Okay, so again, the way this is gonna work, 
is we're gonna go through, we're gonna check,  
56:51 - we're gonna get our scanner input, we get 
us say, okay, what's s is s equal to Tim,  
56:56 - if it is we're gonna print this, and then we're 
gonna move down after the last l statement,  
57:01 - we're not going to even bother checking if it's 
something else, because if it's equal to Tim,  
57:05 - then we know that we shouldn't bother looking at 
the L sips. Right. Now, if it's not equal to Tim,  
57:11 - what we're going to do is we're going to go 
through and we're going to check reinstate k LS F,  
57:14 - that's our next block, is it equal to Hello, 
if it's equal to Hello, we're gonna print Hi,  
57:19 - we're gonna move on with our lives, you're gonna 
move down here, we're not even going to bother  
57:22 - going to the else. Okay? Now, if it's not equal to 
Hello, we're going to go into the else statement.  
57:27 - And we're just simply going to print print, 
there's no condition, it just automatically  
57:31 - going to happen. If you print anything other than 
Hello, or Tim, we're going to print print. Okay,  
57:36 - so let's try this out. And let's type Hello. 
And you can see we get Hi, all right. Now,  
57:42 - if I print type anything else in here, like some 
random letters, we get print. Okay. And that is  
57:49 - how that works. Now I can show you I can add as 
many else ifs as I want. So if I copy this, and I  
57:55 - simply paste it down here, gonna have another LCF. 
And in here, I could have Hi. And then in here,  
58:01 - I could type Hello. And we could keep going. 
We could do as many else ifs, as we want. Just  
58:06 - know that whenever you have a kind of a block 
that looks like this, it has to start with an  
58:09 - if statement. And it does actually doesn't have to 
end with an else. So in else just is should be the  
58:15 - last thing so if you have any else ifs else will 
be your last thing like I couldn't do an lF here,  
58:21 - and then try typing like that's, that's not 
okay, you can't do that. But if I omit this else,  
58:27 - that's perfectly fine. So now I have if we type 
Tim, we type Hello, or we type Hi, let's run this.  
58:32 - And let's type none of them. Let's, let's type a 
bunch of letters, we get nothing printed to the  
58:36 - screen because we don't have that l statement. 
Now, if I type Hi, you see we get Hello. Because  
58:42 - right we went through wasn't equal to Tim. It 
wasn't equal to Hello. So we printed Hi. Now  
58:47 - I want to show you this. This is a bad example. 
But it it'll work. If I put Hello here. And I put  
58:53 - Hello here. Which one are we going to print? So 
remember, we're only going to print one of these  
58:58 - things. We're not going to print more than one. 
So which one? Is it high? Or is it Hello? Well,  
59:03 - let's test it out. If I type Hello in here, we 
print high. Now the reason we're printing high  
59:10 - is because this else if is above this one, and 
this is the first one that's going to be looked  
59:15 - at when we type something in just the way I kind 
of went through it sequentially. So since we print  
59:21 - high here, we're like, Okay, well that happened. 
So there's no point in checking this. And we just  
59:25 - move on. Okay, straightforward. Now again, I could 
do more if statements down here, you could keep  
59:30 - typing like do a bunch of stuff, just understand 
you can have as many elsif as you want. You don't  
59:34 - need to know stuff. Like we could just do an IF 
and then else. But every time you have kind of  
59:38 - like an if statement or block starting it has to 
start with an if it could have as many elesis as  
59:43 - you want. And the last thing has to be an else. 
If you're adding else you don't have to have that  
59:49 - else there. So anyways, I think that's all I'm 
going to show for if statements elsif and else  
59:55 - they're pretty straightforward. Any condition can 
go here. So anything that I showed you before,  
59:58 - like you could have a really long chain 
conditional a ton of stuff. Same thing here,  
60:03 - you could have any condition like it doesn't 
matter, anything that gives you true or false  
60:07 - value, you could also literally just type 
true. And like that would always happen, okay?  
60:14 - In this video, we're going to be kind of taking 
a step back and just going through everything  
60:20 - that we've already learned summarizing that, 
putting that into a program to make sure that  
60:24 - you guys really understand all of that. And we're 
also gonna be talking about nested statements. So  
60:28 - how you can kind of add things within other things 
like so if statements within other if statements  
60:34 - variables. And the way I'm going to do this 
is just by creating a simple program. And what  
60:38 - it's going to do is it's going to ask the user to 
input their age. And then based on that age, we're  
60:42 - going to do certain things with that, we're going 
to tell them like, I don't know good examples,  
60:45 - like on a roller coaster, like if you're 13 or 
older, you can ride otherwise you can, so we're  
60:49 - going to do something like that. Okay, so I'm 
going to keep these scanners up here that I have,  
60:53 - because we want to get the user's age. But um, 
first, before I set up the scanner is I'm just  
60:57 - going to print a line to the screen here. So 
I'm just going to say system, dot out dot print,  
61:03 - and so print ln. And in this case, I will just 
say, input your age simply okay? So this way,  
61:11 - it should, if I'm doing this correctly, make 
it so that we just get the age right after this  
61:16 - line. Okay, you'll you'll see when we do that in 
a second. Anyways, what I'm going to do now is I'm  
61:20 - just going to kind of start typing, and we'll go 
through how this works out. So I'm gonna say if,  
61:23 - and we're actually just going to convert this 
to int first, I think string to an int. Yeah,  
61:29 - so using that parse into that I was talking about, 
so we'll say int, age is equal to s.or integer,  
61:37 - I always forget how to do this integer dot 
parse int. And then in here, we need to type s,  
61:44 - so we're going to convert whatever they type 
into an integer in this case, so we're going  
61:49 - to assume that they type in an integer. So we'll 
say if age is greater than or equal to 13, then  
61:57 - we will simply print System dot out dot print, 
ln. You can write Okay, exclamation point. Now,  
62:09 - if they're not older than 13, that must mean 
that they are less than 13 or younger than 13.  
62:14 - So in this case, we will simply print that they 
cannot write system dot out. dot print ln. And  
62:20 - you cannot write exclamation point. Okay, pretty 
basic program, we kind of have gone through all  
62:29 - this work. So let's test it out. input your age 
five, you cannot ride. Okay, let's try this now.  
62:35 - input your age 43. You can ride awesome. Okay, 
so everything's working fine for right now. Now  
62:42 - what I'm going to do is I am going to add a elsif 
here and I'm going to change kind of the problem  
62:46 - that we're looking at. So I'm going to say now I 
want to classify the person based on their age as  
62:52 - either an adult, a teenager, or just like younger 
than a teenager. Okay? I don't know, what do you  
62:57 - call those? Whatever, younger than teenagers. 
Okay, so if we are greater than or equal to 18,  
63:01 - I want to print you are an adult, okay? Now 
otherwise, so if they are not greater than 18,  
63:09 - we want to check if they are less than 18. So or 
if they're, actually we'll do it in a in a cool  
63:15 - way, that's gonna make sense here in a second. So 
else, if age is not greater than or equal to 18,  
63:20 - we know it's less than 18. So all we actually 
have to check is if they are older than 13,  
63:26 - right? We're greater or older than or equal to 13? 
Because that's what a teenager would be. And the  
63:32 - reason we don't have to check if they are, what 
do you call it younger is, or if they're older,  
63:38 - is because we already know that they're gonna 
be younger than 18. So know where they're at  
63:43 - within that range. So I already butchered that 
explanation, but that's okay. So system, dot out  
63:47 - dot print, ln. And in this case, we'll just say 
you are a teenager, okay, like that. And then in  
63:56 - this last case, well, we know they're not older 
than or equal to 18. We know they're not older  
64:00 - than or equal to 30. And that meaning they must 
be less than which is you are not a teenager or an  
64:07 - adult, okay, like that. So let's test our program 
out, make sure everything is working. So if we  
64:14 - input an age of 14, we get you are a teenager. 
Awesome. Okay, let's try it again. We input an  
64:19 - age of 19. Get you're an adult. And if we input an 
age of zero, yet, you are not a teenager, we're an  
64:27 - adult. Now, I want to show you what happens if 
I input like a negative number, like what if I  
64:32 - do like negative 98? You are not a teenager or an 
adult because right we have this L statement. And  
64:38 - that's not greater than or equal to 13. It's not 
greater than or equal to 18. So we get you're not  
64:43 - a teenager or an adult. Okay. Now, that is pretty 
straightforward. What I'm going to show you now  
64:49 - is how we can ask like another question or how we 
can check something else. So what I'm going to do  
64:55 - here is I want to say, if they're 18, and only 
if they're 18. Want to ask them a question?  
65:02 - What should the question be? I want to ask them 
what their favorite food is. Okay? So I'm simply  
65:07 - going to do now exactly what I've done up here, 
except just throw it inside of this if statement.  
65:12 - So if this happens, we're going to do this and 
this is going to show you nesting. Okay? So we're  
65:16 - gonna say SC, or we'll say, string is Windows to 
integers. We're gonna assume that our string and  
65:21 - guess Kazumi food Yeah, we'll say string. Food 
is equal to SC, dot next line, like this, okay?  
65:30 - And what I'm going to do is I'm going to print 
up here again, what we're looking for, so I'll  
65:33 - just copy this in a second. And in this case, I'll 
say, input your fav food, okay? Now what I want to  
65:41 - do is I want to check what their favorite food is. 
So I want to say if their favorite food is pizza,  
65:45 - I'll say mine too. Otherwise, we'll say that's 
not my favorite food or something like that. Okay,  
65:50 - we'll say if, and we have our conditioning here, 
we'll say if food dot equals, and in this case,  
65:59 - we'll simply type pizza. Right? Then we will 
system dot out, dot print, ln. And we'll say  
66:11 - mine. Wow, inside of the coats, hopefully. Say 
mine too. And then otherwise, so the else, what  
66:20 - we'll do is we'll simply type system, dot out dot 
print, ln. And in this case, we'll say, not mine.  
66:29 - Okay? So this is showing you now it looks a bit 
more complicated, but that we can actually put if  
66:34 - statements and else statements, we can do things 
with inside of the if statement. And I'll show you  
66:39 - that this works. So if I type, I'm 19. It's gonna 
say input your fav food, okay, my favorite food,  
66:45 - let's try pizza, says mine too. Awesome. That's 
working. Now, if I type something else, so I typed  
66:50 - like for, it just tells me I'm not a teenager, 
and adult because we don't have anything else  
66:54 - happening inside of this if statement, or this 
else over here. Okay. Now, that's really cool.  
66:59 - And that allows us to do some neat things. And 
you can continually nest This is called nesting,  
67:04 - putting a statement inside of another statement, 
you can continue to do that as much as you want.  
67:08 - So I just wanted to show that to you. Because 
a lot of people think that that's not possible,  
67:12 - they don't understand that you're able to do that, 
because they haven't been shown that right? So  
67:16 - again, if I want to ask another question, I could 
do that inside of here. And I can just keep going.  
67:24 - What is an array? Well, an array is a collection, 
pretty much of elements, that is a set size. So  
67:32 - rather than having like a variable equal to one, 
you'd have an array and it would have a bunch of  
67:37 - different values in there that you can index 
at certain points. And you'll see when I start  
67:42 - talking about them here, if you're a little bit 
confused, but how to create an array is to first  
67:46 - you have to declare the type that you want your 
array to be. So all the values in the array,  
67:50 - at least right now have to be the same type. So in 
this case, I'm going to create an integer array.  
67:55 - And to declare that this is going to be an array, 
you simply do these little square brackets, use a  
67:59 - in square brackets, the name of your array in this 
Gizmo is a new arr standing for array is equal to,  
68:05 - and then in this case, you're going to say new 
int, square brackets. And inside of the square  
68:10 - brackets, you have to define how many elements or 
how long your array is going to be. In this case,  
68:15 - I'm just gonna say five. Okay, so you can 
see that's fine. not getting any issues here,  
68:20 - just because we're not using new AR. But yeah, 
this is the syntax. So whatever type you want  
68:25 - it to be, you type the type. So if I wanted to 
be string, I do string. And then this obviously,  
68:30 - would have to be the same string like that. Okay, 
square brackets, name of your array equals new,  
68:37 - and then the type square brackets how 
long you want the array to be. Now,  
68:43 - there's another way to declare this, I'll show 
you in a second. But this is like a set length,  
68:48 - like you can't change this length. So you have to 
make sure that when you're declaring your arrays,  
68:52 - you know how many elements you want to have. 
Because you can't if you make an array length  
68:56 - zero, then there's no point in using it. You can't 
add, you can't add anything past like that length,  
69:01 - okay? And what it's going to do is it's going 
to, by default set all of these elements to like,  
69:06 - no, so they have no value, but they exist, like 
they're there. They just aren't holding anything  
69:11 - right now. Okay? Well, you can kind of think of it 
as you're initializing, like five containers that  
69:16 - are old gonna hold something, but they're not yet 
holding anything. So is a good way to visualize.  
69:20 - So we're gonna keep the string array for now. 
And I'll show you how we can add things to array  
69:25 - and change values and print them out and see 
what that looks like. Okay, so the way that you  
69:31 - index things in an array and array is going to be 
it's going to look like these curly braces. Okay,  
69:36 - so I'm just gonna type some stuff out and just 
follow with merit. So my string array I want to  
69:40 - have Hello. I need double quotes. Hi, Tim. Maybe I 
should have done last values bill, and Joe. Okay.  
69:52 - Now these are the five values in my string array. 
This don't type this out with me. This is just  
69:58 - showing you an example. Now the way that we start 
counting in computers are actually let's first say  
70:04 - this, every element in our array is going to have 
an index, okay? And the index is going to be a  
70:09 - number that represents its position. So in this 
case, you'd say like this is position one, this  
70:14 - is position two, and this would be position five. 
Now, if I were to ask for position zero, or sorry,  
70:20 - position one, it would give me Hello. But the 
thing is, that seems logical. But in computers,  
70:24 - we actually start counting at zero, meaning 
that position one, which I'm saying is Hello is  
70:29 - actually going to be position zero. And that means 
that whatever the length of my array is, the so in  
70:36 - this case, five, the last position in my array is 
going to be the length minus one. So in this case,  
70:40 - four, so Joe would be position four. And these 
are known as indexes, like index zero is Hello,  
70:45 - index one is high, index two is Tim. And this 
allows us to really easily grab different elements  
70:50 - without having to know their value, we just know 
the position of them in the array. Okay, so 01234.  
70:56 - That's how we count in computers. Okay, so how can 
we actually access these different elements? Well,  
71:03 - I'm going to create a variable and just say 
string x equals, and in this case, I want to  
71:10 - get like value two in my array. So first of all, 
I haven't actually added anything to my rate, but  
71:15 - we'll do that in a second. But how I would do that 
is I would type like new AR, and then I put square  
71:21 - brackets and then in here, I put the position. So 
position, so I want to get Hello, I think that was  
71:27 - the first or second position I will see anyways, 
I would type one. And what this would give me is  
71:32 - the second value in my array, because remember, we 
start counting at zero, so the first value would  
71:37 - be zero, and the last value would be four. Now 
maybe this is going to look a little easier once I  
71:42 - start adding things into my array. So the way that 
we can actually add things into the array is what  
71:47 - we've declared an array and we set it has length 
five, which means that these elements already  
71:51 - exists, or those buckets, there's not holding 
anything. So what we have to do is we have to  
71:55 - say new AR zero is equal to, and in this case, 
let's give it a value. So let's say hello, okay,  
72:02 - put our semicolon, there we go. We've just set 
position zero, index, zero, whatever, to Hello.  
72:09 - Okay, so now if I copy this a few times, I can 
set the values of all the elements in my array. So  
72:14 - I did 012, and three, and here, I can just change 
these. So say hi, I'll say, Tim, I will say, Bill.  
72:24 - And we can add one more, but we don't have to. So 
if we let's, let's just add one more for the sake  
72:29 - of it. And new AR four is equal to what we call it 
geo up. I don't know why it's doing that for me.  
72:37 - Okay, jus like that. Alright, so it may say string 
x equals new AR four, then that's going to be  
72:44 - equal to Joe. So to print this out to the screen, 
now I can do system dot out, dot print, ln. And in  
72:51 - this case, I will say x, and let's see what we 
get. We get Joe, right, because we added all of  
72:57 - these into the array. Now if I just comment this 
out by doing that, let's see what happens when  
73:04 - we do a new AR for let's see what we get, we get 
no, now that's because remember what I said when  
73:09 - we initialize this array, we set it of a length of 
five and we say we Okay, these are our containers,  
73:15 - we've got five containers, five buckets, they're 
gonna hold values, we don't know what the values  
73:19 - are yet. Alright. So if we haven't set a value 
for the fourth index, or the fourth position,  
73:24 - well, we don't know what it is. So we're just 
going to return no meaning nothing is there  
73:27 - right now. Okay. So yeah, so those are, that's 
how you add things into an array. Now there's,  
73:34 - I'm going to create another array and show you a 
kind of an easier way to do this, if you're just  
73:38 - gonna like statically type in numbers, okay, 
so I'm gonna say int summary into an integer  
73:44 - edge to save me from doing all these quotation 
marks, I'm gonna say, and let's say num is equal  
73:48 - to new it square brackets. Or actually, we don't 
need that, because we're gonna do the other way,  
73:53 - we're just gonna put two curly braces. And in 
here, we're going to type out our array. So in  
73:58 - this case, this is now my number array. So I put 
it in curly braces, and I have an array of two  
74:05 - 354, six and six. Now again, just to recap, two 
would be at index 03 would be at index one, okay?  
74:12 - Because that's where we start counting. And now, 
if I wanted to, instead of having x equal to new  
74:18 - error, I'm going to say nums four, which should 
be six, right? And what's our error here? Change,  
74:26 - this has to be an int, my bad. index equals lumps 
four, we print this out, you can see we get the  
74:32 - value six. So that's another way to create an 
array, if you're just going to be like typing in  
74:37 - all of the numbers like that, okay. And obviously, 
you can create arrays of different types like int,  
74:43 - we could do string we do float, we do double, 
so you say like a double array of nums to is  
74:49 - equal to and then in here, like 2.0 3.0 There you 
go. We now have a Wow, really forgot that. Okay,  
74:59 - well, you need But that works. Okay, we now have a 
double array at index zero, we have 2.0. at index  
75:05 - one, we have 3.0. And yeah, so arrays can get 
fairly complicated, they're not really the best  
75:12 - thing to be using for a lot of example cases. But 
for right now we have to understand them. in later  
75:17 - videos, I'm going to be talking about collections, 
which are going to allow us to do some cooler  
75:21 - things rather than like indexing elements like 
this. There's some cool methods that we can use  
75:26 - on those. But for now, I would just want to 
make sure that we do understand arrays, okay.  
75:35 - So in this video, I'm going to be talking about 
for loops. Now, for loops are fundamental aspect  
75:40 - of every programming language. And 
they're very important to understand,  
75:44 - I can almost guarantee you that any program you 
write will use multiple for loops. So pretty much  
75:49 - a for loop is allows us to kind of automate a 
task, do something a set amount of times. And  
75:55 - typically when you use a for loop, you're using 
that because you know how many times you want  
75:59 - to do something or like a condition is going 
to tell you how many times to do something as  
76:04 - opposed to what we're going to talk about in 
future videos, which is a while loop. While  
76:07 - you're not really sure how long it's going to go 
for. So you do something based on a condition,  
76:10 - but we'll talk about that when we get to it. 
So let's start and just do an example of what  
76:16 - the for loop can really like solve for us, 
for example, okay, so say this is a pretty  
76:20 - simple example. And you guys will see in a second 
directory integer, C index equals zero and say  
76:27 - that I want to add one, and then I want to add 
two to it. And then I want to add three to it,  
76:31 - and four, and five and six, and like an infinite 
amount of times I want to add to that variable.  
76:35 - Well, we could do like x plus equals one, we could 
do x plus equals to like in keep going and adding  
76:43 - things to x. And we could just keep copying and 
pasting this down our program. But obviously,  
76:47 - that's terribly inefficient in terms of a typing 
standpoint. And what if we wanted to change this,  
76:52 - what if every time we want the program, we want 
to ask the user how many times they want to add  
76:56 - like a pattern like this to x? Well, then we would 
have to constantly keep changing the numbers here,  
77:03 - right, so this is where for loop can kind of come 
in handy. So the syntax for for that, I'm just  
77:07 - going to type it out, and then we will talk about 
exactly what it does. So it has these brackets  
77:12 - here and in here, we're gonna put three things 
typically, okay, so what you're gonna do is you're  
77:17 - going to first start off by declaring a variable. 
So in this case, I'm gonna say int x is equal to  
77:23 - zero, okay? Now this can be called whatever you 
want. Typically, people call it AI, I like to use  
77:28 - x, but you know, let's just use AI. And then what 
you're gonna do for this next, so you're gonna put  
77:34 - a semicolon, and then the next thing you're gonna 
do is you're going to set a condition. So I'm just  
77:39 - gonna do this and then talk about because it's 
hard to kind of do it step by step, because they  
77:42 - all work together, less than or equal to 10. And 
I plus plus. Okay, so what I've just done here,  
77:50 - actually, is I first started by declaring a 
variable is equal to zero. And then I've said,  
77:56 - we're going to do this while i is less than or 
equal to 10. And we're going to add one to I.  
78:00 - So pretty much the way this works, is every time 
we execute what's in these little square brackets  
78:06 - here, is gonna have one added to it. So this is 
what's known as the increment. And this comes at  
78:12 - the end of your for loop. So this is what you're 
adding to the variable i, which you're declaring  
78:16 - here, every time you run the loop. Now this here 
is your condition. And this is going to state how  
78:23 - many times a loop is gonna run. So in our case, 
we're going to run the loop. And while i is less  
78:28 - than or equal to the value 10, meaning we're going 
to start at the value zero, because I equals zero,  
78:34 - we're going to run this loop, then we're going to 
come back up here, we're gonna say, Okay, what are  
78:38 - we doing? We're adding one to AI, then we're gonna 
check this condition, so i is not equal to one,  
78:42 - we're gonna say, well, is one less than equal 
to 10? No, it's not. And then we're gonna loop  
78:46 - through, and we're gonna continue looping through 
until eventually, we get to the point where we add  
78:49 - to i, it's equal to 1111. Well, that's greater 
than 10. So we break out of this loop, and you  
78:56 - guys will see when I start printing stuff to the 
screen exactly how this works. But I hope that  
79:01 - was a decent explanation of the way to do this. 
So what I'm gonna do is I'm just going to print  
79:06 - out here and I'm going to tell you right, now 
what's going to happen, right, so we're starting  
79:09 - at zero. So the first loop here, where I come 
through is equal to zero, we're gonna print zero,  
79:14 - next loop, we come up, we add one, two, I check 
the condition, we're okay, we can keep going.  
79:18 - We're at one, and we're going to print from zero 
to 10. So watch when I run here, we get zero all  
79:25 - the way up to 10. Okay, that's how the for loop 
works. So we execute whatever is in between these  
79:31 - little curly braces 10 times, or 11 times in 
this case, because zero to 10 is 11. Right? Now,  
79:38 - we can change this increment, we can change this 
condition, there's a lot of things that we can  
79:42 - do in this for loop. So here we say for int i 
equals zero, I could do for int i equals five,  
79:48 - and I can start at the value five and now we're 
going to start we're going to go from five to 10  
79:52 - looping 123456 times, right? We're printing six 
different values, okay? So that's if you can do  
79:59 - that If I tried to do something like i equals 
11, well watch what happens, nothing prints to  
80:04 - the screen. And that's because 11, well, that's 
greater than or equal to 10. So the loop doesn't  
80:09 - even run one time, right. So let's go back, and 
let's start at zero. And now let's show what we  
80:14 - can do in terms of incrementing. So to increment 
here, we can do i plus equals, and then any value  
80:21 - we want. So in this case, if I do five, we started 
zero, we're going to add five, we're going to  
80:25 - add five again. So we get 05, and 10. And you can 
change this to whatever value that you want. Okay,  
80:31 - same thing here with the condition. These can 
also be variables, I feel like I don't need to  
80:36 - tell you that. But if I do something like int 
x equals five, then I could do i plus equals x,  
80:41 - right, and we can add that integer to it, we 
can add x as the bound here. So less than or  
80:46 - equal to this could be greater than this can be 
greater than or equal to. So I'm just going to  
80:50 - quickly go over one thing that a lot of people 
get confused with, for with for loops. And it's  
80:56 - when we're going to stop and when we're going to 
start. So when we say less than or equal to 10,  
81:00 - this means we're going to start at this value. And 
now assuming we're adding one, okay, we are going  
81:05 - to stop but include 10, meaning that I will hit 
the value 10, we will print 10 to the screen. Now,  
81:13 - if I remove this equal sign, this is only going 
to happen while i is less than 10. Which means  
81:18 - that if I is 10, well, 10 is not less than 10. So 
we are not going to print 10. So if I run this,  
81:23 - you can see we only get up to the value nine. Now 
the reason I'm talking about this is because what  
81:28 - we typically want to do with loops is we want to 
loop through something or look at some data. And  
81:33 - typically that data is in the form of an array. 
So now in the slide talked about arrays before,  
81:38 - I'm going to create an array, so an integer 
array, let's call it Arr, is equal to, and let's  
81:43 - just give it some values here. So like 157345, 
okay, this is going to be our integer array. Now,  
81:50 - what do I want to do? If or how am I going to do 
this, if I want to look through my array and look  
81:56 - at look at these values, and maybe check them 
values equal to seven or values equal to five  
82:00 - or something like that? Well, the way that I can 
do this, and this is like a dynamic way to do it,  
82:05 - is I could count the length of the reg and say, 
123456, guys, six elements. So I would put is less  
82:14 - than six year. But a more useful way to do this 
is to just get the length of the array. And the  
82:19 - way that I can do that is just to do a arc dot 
length, or I actually don't need this bracket,  
82:25 - sorry. So we'll just do this in this way, say the 
user had typed in a bunch of elements, we had put  
82:31 - them in an array, we don't know how many elements 
they type in, per se. So we're going to use this  
82:35 - length so that we can change this loop and this 
loop will never crash, it will always work.  
82:40 - Because we're just simply getting the length of 
the array. Now if I were to do equal here, I hope  
82:45 - you guys realized this would cause us an issue. 
And that's because we have six elements in the  
82:50 - array, right? But it's going to allow us to get i 
to the value six, because that's the length of the  
82:55 - array. Now what happens if I try to do this arr 
of six? Well, we should know from the last video  
83:02 - that that will actually crash our program. And 
that's because when we start we start at zero, and  
83:07 - our last element in the array is actually going 
to be index five, right, because we go to zero  
83:11 - all the way to the length minus one, which is 
five, so race six does not actually exist. So  
83:18 - what I'm going to do now, is I'm just going to 
write a little program inside this for loop, and  
83:22 - I'm just gonna say if the value is equal to five, 
we're going to print it out. So how do I do this,  
83:27 - I'm gonna say if arr index i is equal to the value 
five, then we're simply going to be a system,  
83:35 - dot out dot print, ln, I just realized this comma 
there, alright, semi colon, and we're simply going  
83:44 - to print the value. So in this case, we could 
print air I, which we know is gonna be five,  
83:47 - or we could just type five because we know 
that it's there. So in this case, let's just  
83:50 - do found a five exclamation point, okay, that's 
what we'll print to the screen. So again, the  
83:58 - reason this is gonna work is because we're looping 
through starting at zero, and going to but not,  
84:03 - but not including the length of the array, make 
sure you remove that equal sign, otherwise you're  
84:07 - gonna get a crash, okay? So that way, we're going 
to look at every single element in this array,  
84:11 - we're going to check its value. And then if we 
find a five, we're gonna print it. So let's see  
84:15 - if this works. found five and found a five. Now 
for wanting to be more precise, and say like where  
84:20 - I found this five, I could say found a five at 
index, and we'll just put a plus sign and then we  
84:27 - can put pi. And what this is going to do is it's 
actually just going to automatically convert this  
84:31 - into a string for us and print it out with this 
index. So we're going to put a space here just  
84:35 - so they don't get smushed together. But it says 
found a five at index one and found a five at  
84:38 - index five and we know this is true. Index 
one is here, index five is here. And that's  
84:45 - a really simple way that we can loop through 
a list and look for a certain value. Okay.  
84:54 - Well, I'm going to be showing you a different kind 
of for loop which is known as a for each loop. And  
84:58 - this is going to allow us to loop through the 
elements of a list or a collection data type,  
85:03 - and do something with those elements, I'm also 
going to be showing you ways that we can break  
85:07 - out of the loop at certain points. So if the 
condition is not met, or like, we just want to  
85:12 - get out of the loop the way that we can do that, 
and I'm gonna be showing you some common examples  
85:16 - of where we use loops. So let's go ahead and get 
started. So you can see that I have two arrays,  
85:23 - here one's name names, and one is named AR, I just 
added this names one is just a blank, blank array  
85:30 - for right now. Okay, so what I first want to do 
is in the last video, I looped through this array,  
85:34 - and the way I did that was by having a variable 
i, we waited until it was, what do you call it  
85:40 - greater than the length of the list? And then once 
it was, we simply broke out of that, that loop,  
85:48 - right? Okay. So an easier way to do this, is to 
do something like this. So we're going to have  
85:53 - the same exact syntax, except in these brackets, 
something is going to be different. Okay? What  
85:59 - I'm going to do if I want to loop through every 
element in this list is I can do something like  
86:03 - this, I can say for element colon arr. Now what 
this is actually going to do, I have to do this  
86:12 - sorry, string element, or I can't say string 
because that's something we type into element  
86:17 - in our array. So what I'm doing now is I'm saying 
that every time we loop through this loop, right,  
86:24 - what we're going to do is we're going to declare a 
new variable called element, and it is going to be  
86:29 - equal to the next element in our array. So in this 
case, when we first loop element is going to be  
86:36 - equal to one, and then elements going to be equal 
to five. And that's going to be equal to seven,  
86:39 - and then three, and then four, and then five. 
And this is a way easier way if I wanted to,  
86:43 - like print out the element, or look at certain 
elements to do so rather than having to have  
86:48 - like a counter variable i and then index all of 
the different elements, especially if we don't  
86:53 - know the length of the array, or we don't want 
to do dot length, because this is automatically  
86:56 - going to go from start to end. Okay. Now, I'm 
going to show you because, obviously, we need an  
87:03 - example to really understand this. But the first 
example I typically like to do is just printing  
87:09 - out all these elements to show you that is indeed 
working. So in this case, we'll say element,  
87:13 - okay. And we'll just print this to the screen and 
see what we get. So in this case, you see, we get  
87:18 - 157345, right, starting at the beginning going 
to the end, the way this works with the colon is  
87:24 - again, we're just grabbing the elements in order, 
and we're using those as a variable element. Now,  
87:30 - a lot of times when you want to do with this is 
you want to be checking the element, but you also  
87:36 - want the index as well. So you want the element 
and you want the index. Now we could use what  
87:41 - we used in the last video where we just have a 
counter variable, and that way we have the index  
87:45 - and the element because we can do like arr of 
one like all that, okay, I. But a way that people  
87:51 - typically do this is with like an outside counter 
variable that you increment yourself. So I'll show  
87:57 - you how this works. So what we're gonna start 
off by doing is just creating variables called  
88:01 - int count equals zero. And then within this loop, 
we're going to increment count ourself. So now,  
88:07 - every time that we run the loop, we're adding 
one to count. So that count is keeping track of  
88:13 - the index of the element. So if I print out the 
element plus we'll do is I can't do that plus a  
88:19 - space plus our count, you can see that this is 
keeping track of the index. So what's happening  
88:25 - here says one is that index 05 index one, and it 
keeps track of all these different indexes for  
88:30 - us. And that's a really easy way to do that. 
I just wanted to show it doesn't really make  
88:33 - sense for this example case, but I just wanted 
to show you because there will be situations  
88:37 - where you want both the element and the index, 
and it's easier to get the element just by doing  
88:42 - this with this colon. Okay. So again, when you're 
doing a for each, this is what this is known as,  
88:47 - because it's going through for each element in 
the array, we are doing something, okay. Alright,  
88:55 - so the next thing that I want to do is I want 
to show you how we can populate an array using a  
89:01 - for loop. So right here, for example, we have a, 
what he called a new string array that's empty,  
89:08 - right, like all these elements are null, 
and we want to populate them. So the way  
89:12 - that we would go about doing this, and this is 
a common example of what you want to do this,  
89:15 - while I'm showing you this is we create a variable 
and say again, int i equals zero, we will say,  
89:22 - well, i is less than and then names dot length, 
right? And then we'll do semi colon, and we'll  
89:29 - simply add one to it. So this is the exact same 
thing as we done before. But I'm going to show you  
89:33 - how we can actually add the elements because it's 
a really common use case. So what I'm going to do  
89:38 - here is I'm actually going to use the scanner to 
get a new variable or to get like a name from the  
89:44 - user. So I'm just going to say scanner SC equals 
new scanner and then we need system.in Okay,  
89:55 - and actually think I should probably not declare 
this every loop but put it Up here, because we're  
90:00 - just going to use the scanner, right? So we'll 
say string, input equals SC dot next line like  
90:12 - this. And this way, every time we run the loop, 
we're going to get input from the user. And you  
90:17 - know what, let's also just print out here, system, 
dot out, print ln and just tell the user we want,  
90:23 - I should let us do print not ln, we'll say, input 
like that. So that way they know what to type in.  
90:30 - Okay, so input, we're getting input. And now 
what I'm going to do is I'm going to add the  
90:33 - user's input into our array. So how can I do this? 
Well, this is really easy, I can just do names, i  
90:39 - is equal to input, right? So we're just declaring 
that whatever index we are in the loop right now,  
90:47 - so whatever value by well, that value in the list 
or sorry, the list, I keep calling it lists, it's  
90:53 - an array I'm going to use to Python is going to be 
equal to whatever we typed in. And then if we want  
90:57 - to print out the entire array, what we can do is 
we'll use another for loop. So we'll just say for,  
91:02 - and then this time, it's going to be a for each 
loop, right? So we'll say for an a Stanford name,  
91:09 - string, and, and names, okay, then we will simply 
just do System dot out dot print ln, and we will  
91:19 - print every value of n. Okay, so let's two good 
examples. Let's run this and just make sure  
91:24 - everything's working. So we run this input, I'm 
just gonna type Hello. I guess I wanted names in  
91:29 - that, Tim, Bob. Joe, Bill. And then there we go. 
So we ran that five times. And we get Hello, Tim,  
91:38 - Bob, Joe. And Bill. Awesome. There we go. So that 
gives us all the values that we need. Okay. Okay,  
91:47 - so now what I want to show you guys is how we can 
break out of the loop. So if we're in the loop,  
91:53 - and we're going through, and we're doing 
operations, and we've not yet met the condition,  
91:56 - where are like, so the loop is gonna keep 
going like is not greater than whatever value  
92:01 - or whatnot. Okay, then we want to break out of it. 
How can we do that? So how can we just get out of  
92:07 - it in the middle of looping? Well, there is this 
magical little keyword called break. And what this  
92:13 - does, is whenever this is encountered inside of a 
loop, it simply breaks out of the loop. So in this  
92:20 - case, what would happen is, since I have break 
at the end, we would do these first three lines,  
92:25 - then we just break. And this would only happen one 
time, no matter what no matter what any of this  
92:30 - stuff said, this loop would only happen once. Now, 
I'm going to show you just down here in this loop,  
92:37 - how we can break out based on like a certain 
condition. So for example, say we encountered the  
92:42 - word end. Or what do you call it? The word Tim, 
what am I saying? And I was just reading that,  
92:47 - if we encounter like the word Tim, while 
we're reading through the list of names,  
92:50 - then we just want to break out like we don't want 
to print any more names anymore, we just want to  
92:54 - break out. So the way that I can do this right now 
I can say well, we're gonna we're gonna print Tim,  
92:57 - but we'll break after Tim Okay, so what I'm gonna 
do, I'm gonna do an if statement, I'm gonna say if  
93:02 - and equals equals or not equals equals dot equals, 
okay. And in this case, we'll just simply put Tim  
93:09 - in here, then what we're going to do is we're 
going to break. And in this case, Now, whenever  
93:15 - we encounter Tim, we're simply breaking into the 
loop. And that means we will not print the rest of  
93:20 - the names. So if I run this string, this console 
up here, and we run and we say, Hello, let me say  
93:26 - name. And then we say, Tim, and I'll just show you 
this Tim, and Tim. And I run this here, you see  
93:33 - we get Hello, name and Tim. And these other two 
Tim's do not print. And again, that's because once  
93:39 - we hit m, and n is equal to 10, we simply break, 
okay, and we get out of the loop. And that's like  
93:45 - a really easy way to just break out of the loop. 
And this is going to work for a while loops that  
93:49 - we do in what do you call it the next video. 
Now typically break is not something you want  
93:53 - to be using a lot like you only use this if you 
really have to, it's better to just make these  
93:59 - conditions work the way they should, and have the 
loop run, like as many times as it needs to run,  
94:05 - you know what I mean? So just try not to use this 
too much. But I mean, there's nothing really wrong  
94:09 - with using it, people just are frowned upon it in 
the programming world using the word break. Okay.  
94:18 - We're gonna be talking about while loops. Now, 
while loops are very similar to for loops,  
94:22 - anything you do with the for loop, you can 
indeed do with the while loop. That being said,  
94:27 - they do have different use cases in terms of 
where they're most useful. But just remember,  
94:31 - anything you do with the for loop, you can do with 
a while loop, anything you do with the while loop  
94:35 - you can do with the for loop, they're completely 
interchangeable. And if you only had one of  
94:39 - them in programming, you'd still be able to do 
everything. It just might be not as I don't know,  
94:44 - nice to code, that's the right word for it, or 
elegant is probably the better word. So a while  
94:50 - loop is going to work when you typically don't 
know how many times you want to loop through  
94:54 - something. So it's kind of like a question. 
Like, you know, it's going to be based on this  
94:59 - condition. But you're not really sure like, if a 
for loop is more like, you know, you're gonna do  
95:04 - it a set amount of times a while loop is it could 
change based on the program based on user input,  
95:08 - okay, something like that. So what we're gonna do 
here with this while loop is I'm just gonna set  
95:13 - one up, and then we'll just talk about exactly 
what it does. So in this case, what I want my  
95:17 - while loop to do is I want it to just continually 
keep asking the user for input until they give  
95:22 - me like a certain word or like one or two words. 
Okay, so in this case, what I'm gonna do, I'm just  
95:27 - gonna say, let's see, maybe just get an answer 
to be faster, say int, x equals SC dot, next int  
95:36 - like this. Okay? And what I'm gonna do is I'm 
just gonna keep looping through until they type  
95:41 - the number 10. Okay, so all I can do this as you 
just type the keyword Well, in here, and then in  
95:48 - these brackets is going to be your condition. Now, 
this is why I focus so much about conditions in  
95:53 - the first few videos, because they go a lot with 
if loops while loops for loops. So whenever while  
95:59 - this condition is true, then we're going to run 
the loop. So in this case, I'm going to say, well,  
96:04 - x does not equal 10. Okay. Yeah, exactly. That's 
true. So if they type in 10, then you will not  
96:15 - continue to do this. Otherwise, we will continue 
to do this. So that means I'm also going to have  
96:21 - to get the INT in here, because every time that we 
run this loop, we want to continue getting x. So  
96:27 - in this case, we already have X, fine, we just do 
x. And what I'm gonna do is if they don't type in  
96:33 - 10, I'm simply going to tell them like type in 10. 
So we'll just say, dot print, ln, in this case,  
96:40 - I will just say, type 10 dot, dot, dot. And 
now what we're also just going to print out,  
96:46 - because I like to do this, we'll just do system 
dot out, dot print, ln, and in this case, we'll  
96:53 - say type a number. Cesar knows what we're looking 
for. Okay. And that means we're also gonna have to  
96:59 - print this here. And it should just be print, not 
print and print ln my apologies. Okay. So again,  
97:06 - the way this is gonna work is we're just 
going to continually keep looping through  
97:09 - this until eventually the user types in 
10. In that case, we will break it, okay,  
97:15 - and we will not do this anymore. So let's run this 
type of number, let's type four. So it's type 10,  
97:21 - data, type a number, type five doesn't work, type 
10. There we go. And we broke out of the loop,  
97:26 - and it no longer asked us for that number. Now, 
these are actually really simple. It just wow,  
97:31 - this condition is true. Do everything that's 
in here. And that's all you really have to know  
97:35 - about while loops. Now again, like we can what 
I was saying we can do everything that with for  
97:40 - loops with while loops, because we can also count 
and Wallops as well. So just like I did before,  
97:44 - I could do something like int count equals zero. 
And then every time we run this loop, we could  
97:49 - just say count plus plus. And then maybe at the 
end of our loop, we wanted to do like, tell them  
97:54 - how many times they messed up. Okay, what am 
I saying print system dot out, dot print, ln.  
97:59 - And in this case, we'll just say you tried, tired, 
you tried. And then plus couch. plus, times scan,  
98:13 - make sure we add a little space here. Alright, so 
now if we run this, and we'll say like 123 and 10,  
98:19 - you tried three times until like, eventually, you 
got it. Okay. So that's like a really simple way  
98:25 - to do stuff with while loops. Now, you guys 
might notice that this code here like this,  
98:30 - these lines are repeated up here. So I have this 
index and this type of number. So how can I do  
98:36 - this without repeating those lines? Because 
I don't want to have to type like, what if I  
98:41 - wanted to ask a ton of different questions and 
then do the wallet? Well, I don't want to have  
98:45 - the same section of code appearing multiple times. 
So there's actually something called a do while  
98:50 - loop. So what I'm going to do is I'm just going 
to erase all this. And I'm going to set up this  
98:54 - a do while loop. And it's pretty much what it says 
we're going to do everything while this is true.  
99:00 - And you'll see how it works in just a second. 
So I'm going to type the keyword do brackets,  
99:06 - and now everything in this brackets is what is 
going to happen. Wow. The condition that I put  
99:12 - down here is true. So the condition here is going 
to be the same. Well, x does not equal 10. We're  
99:19 - going to do everything in here. So now you can see 
this is working fine. There's no issues. And what  
99:24 - I'm going to simply do is I'm going to take this, 
these two lines here, I don't need that scanner.  
99:27 - So we're not going to redefine that every time. 
And I'm going to paste them in here. And what  
99:32 - this is going to allow us to do now is x does not 
equal zero. Create local, gosh, okay. Let's just  
99:40 - do this. int x and then x. Okay, perfect. There 
we go. So sorry, that was just a quick issue.  
99:47 - But what this is going to allow us to do is we're 
automatically going to do this once no matter what  
99:53 - this is going to happen once because we're going 
to do this and at this point x is not equal to 10.  
99:58 - So we're automatically going to do this once which 
means we don't have to have it up top and then  
100:01 - down below. So we do that. And then we check the 
condition. If it's true, we'll do it again. Yeah.  
100:07 - And if it's not, then we will break. So we can 
do this, we'll say type a number, let's do four,  
100:12 - let's do five, let's do negative 00. Number, okay, 
and 10. And there we go, we break out of the loop,  
100:19 - and everything is working fine. And that 
is pretty much it for while loops. Again,  
100:25 - if you wanted to set one up to look like a for 
loop, then you'd literally just have to create a  
100:29 - variable in this case, say like index equals zero, 
you can set up a while loop. So you say a while  
100:34 - and you say, x is less than or equal to 10. And 
then in here, you just say x plus equals one,  
100:43 - or plus equals two, or whatever value you want to 
add to it. And then you can just do what you would  
100:48 - do in the for loop underneath your increment. 
Or you could put the increment, typically you  
100:52 - put it at the end. So at the end of the loop, 
you're adding one and then you're checking, okay.  
100:58 - Now in this video, I'm going to be talking about 
sets and lists. Now sets and lists are from  
101:05 - something known as the collection interface from 
Java, I believe, that's what it's called someone  
101:10 - correct me if that's wrong, but I think that's 
the name. And they are fairly complicated. Now,  
101:16 - I'm just going to talk about really the basics 
of them, there's a lot more to do with sets  
101:21 - and lists. I know, I'm probably gonna get some 
comments from some guy who says, Wow, you really  
101:26 - didn't talk about a lot of this, you didn't. But 
I can't explain all of it to you guys right now.  
101:30 - Because it's very difficult to understand, if 
you don't know a lot about data structures,  
101:34 - which in our case, we don't. So I'm just going to 
talk about what a list is, what a set is quickly  
101:40 - in a very basic standard implementation of them. 
Now, the reason I'm doing this is because whenever  
101:45 - you're programming stuff, like a lot of Java 
tutorials you watch probably won't talk about  
101:49 - these, because they're really complicated. 
But you're going to need them to do certain  
101:55 - things. So for example, with an array, what I 
talked about before, how you could like, you  
102:01 - had to set the size of the array, like you had to 
know how many elements you wanted, you don't need  
102:05 - to do that with a set or with a list. And that's 
the main advantage of it. Because a lot of times,  
102:11 - we're gonna be adding things into per se a list or 
set, and we don't know how many things we're gonna  
102:15 - be adding. So we can't define like an array of 
that length, if that makes sense to us. So let's  
102:21 - actually just get started, we're gonna talk about 
sets first, and then we'll move into lists. So I'm  
102:25 - just gonna create a set, and I'm just gonna type 
it out and then kind of explain exactly what I'm  
102:30 - doing, I'm just going to call this set t equal 
to new, new hash set, and integer. Okay, so this  
102:43 - already probably looks confusing. And if you're 
typing this out with me, you're getting these red  
102:47 - lines. Now, what we should do to get rid of these 
red lines is we just have to hover over them and  
102:52 - click Import set by like clicking on whatever it 
says there. If you don't have you're not using  
102:58 - this Id just literally type import Java dot util 
dot set. And for hash set, same thing, we're gonna  
103:03 - click on it and import it, just because this isn't 
like built into main, the Java functionality.  
103:10 - Alright, so we have a set. Now what is a set? 
How do we create it? Well set is a collection of  
103:17 - unordered elements that are unique, meaning that a 
set cannot contain the same element twice, and it  
103:24 - doesn't know where that element exists. So you can 
kind of think of a set as just like a big bubble,  
103:29 - and you kind of just throw things into it. And 
it doesn't really know where they are, they just  
103:34 - knows that they exist there. Now you also have to 
understand that can only be unique things. So for  
103:40 - example, I've created this integer set. And this 
is the way that you do it. So you type the keyword  
103:45 - set. In these little like greater than sign 
less than sign river, you want to call it tags,  
103:49 - if you're talking HTML type integer, and I have 
the name T, and I'm setting that equal to new  
103:56 - hash set. Now you don't have to understand what a 
hash set is just know that it's like the standard  
104:01 - implementation of a set. And then same thing, the 
types are integer and then these brackets here.  
104:06 - Now inside of these brackets, if you had another 
set you had created, like say a set created a set  
104:11 - called like W, I could put w in here. And assuming 
it had any elements in it, this set would get all  
104:18 - of the elements from W and start with that and 
then you could add things into it and whatnot.  
104:22 - Okay. So to add things to set, I'm just gonna 
do this. We'll go through and see how it works.  
104:27 - You simply type dot add, so I'm going to say T 
dot add. In this case, I'm going to add five.  
104:32 - And we'll just copy this and we'll add like a few 
different numbers into our sets just because it's  
104:38 - seven, and what five again, and add nine. Okay? 
Now what I'm gonna do is I'm just gonna print  
104:44 - this set out to show you what it looks like. Now 
remember, I said unordered collection of unique  
104:50 - elements. Okay, so let's print this out. And you 
can see that we get five, seven and nine. And  
104:55 - notice that this odd right here actually didn't do 
anything. And that's Because since we already have  
105:01 - a five in our set, when we try to add another five 
to it, since it already exists, it doesn't care  
105:07 - and it just doesn't add it. Alright, now I'm gonna 
add another element. In this case, let's add like  
105:12 - negative negative zero, negative eight, alright 
as our element. And you can see that we don't  
105:19 - have any specific order. Now, see, when I printed 
this, like I had added 579, and negative eight,  
105:25 - so you think that should be the order that we 
get it or it should come in some sorted order  
105:28 - or something like that. That doesn't happen with a 
hash set. Okay, standard hash set. And that's just  
105:34 - because again, we're just a bubble, we just know 
that things exist, we don't care where they exist,  
105:40 - or how many times they exist, we just care if they 
exist. Now to see if something exists in a set,  
105:47 - and this is typically something you want 
to do like this is a main operation,  
105:51 - checking if something exists, that's why you use a 
set, you can type T dot contains, or like your set  
105:57 - named contains, and then any element in here that 
you want. So in this case, I can do like, if five  
106:03 - is contained in the set, and it's going to be able 
to tell me that really fast. Now, I can't really  
106:09 - explain to you why sets are so fast. But just know 
that whenever you're looking for something in a  
106:14 - set, you can do that very quickly, like very fast, 
like in constant time, it doesn't matter how big  
106:20 - the set is, the set could be 2 million elements, 
or it could be five elements, it will take you the  
106:25 - same amount of time to look if something exists 
in the set. Okay, and same thing with adding and  
106:30 - removing things from the set that happens almost 
instantly. As opposed to with arrays, the larger  
106:34 - the array gets, the longer it's going to take us 
to look through and find certain elements, okay,  
106:38 - just, we have to understand that. So what I'm 
gonna do is create a variable, I'm just gonna  
106:42 - call Boolean, x is equal to this. And what I'm 
going to do is I'm simply just going to print  
106:48 - x. Now let's see if that is contained. And in 
this case, yes, it is, five is contained. Again,  
106:55 - if I do something like zero, then obviously we 
get false, it's not in there. To remove something,  
107:01 - we can type T dot remove, or set name dot remove, 
and then whatever the element is that we want to  
107:08 - remove. So in this case, we want to remove like 
nine from my set, I would do that. And then if I  
107:13 - print my set, so in this case, t, which get five, 
seven, negative eight, because we removed nine,  
107:19 - those are kind of like the standard operations, 
to I'm trying to think if there's any other ones,  
107:25 - okay, so there's one more, or there's a few more, 
but I don't know which ones are important, you can  
107:30 - clear an entire set by just doing dot clear. So 
just simply remove everything from it like that.  
107:35 - To see if a set is empty, you can do.is empty, and 
this will literally just tell you if it's empty  
107:42 - or not, to get the length of the set, you can do 
dot size, and this will tell you how many elements  
107:48 - so in this case, value, size, change this to an 
int, and just print x here, then we get a size of  
107:58 - three. So like, again, if we had nothing in there, 
the size would be zero, so is empty, and that are  
108:02 - kind of like similar in the sense that you can 
just check by the size. Um, and yeah, so that's  
108:08 - a hash set. A hash set is like the standard set. 
And that's the way that it works. We explained it  
108:15 - to you. Now they also have a tree set. And we also 
have a linked hash set. Now whenever you use these  
108:24 - things, they're gonna pop up here, I'm not really 
gonna talk about what these do too much. I'm just  
108:28 - gonna kind of show you the way a tree set works. 
Now tree set is similar to set in the sense that  
108:34 - you can only have the or a hash set, sorry that 
you can only have unique elements. But these are  
108:39 - actually ordered and they're ordered in a tree 
data structure. You don't have to understand what  
108:44 - this means just know that it's like it shows 
up ordered. what's what's our problem here,  
108:48 - just want to read this error. Tree set cannot be 
resolved to a type. Interesting. Okay, Teresa,  
108:54 - well, let's just try this. That still worked. 
Okay. So anyways, I don't know why I was showing  
109:01 - me there. But Teresa is going to actually 
give us an order. So if I type T like this,  
109:06 - you can see that we actually have an order 
for the set now. So negative eight, five,  
109:11 - and seven. Now like arrays, like we can't just 
index the set. And we can't just say like t zero,  
109:19 - like that doesn't work doing that, like we were 
able to do with the race. But when we print it  
109:24 - out, or when we look through the set, it maintains 
this order in the katri functionality that I can't  
109:31 - really explain to you. Now linked hash sets are 
this. So linked hash set again, we're gonna have  
109:37 - to import this up there. It's linked hash set. And 
this is similar to a basic set it just faster on  
109:43 - certain operations. So I'm not I don't really 
want to talk about them too much, because I  
109:48 - feel like I'm already confusing you guys, but 
just understand if maybe you know a bit about  
109:52 - like operations and speed and time complexity. 
They have a linked hash set, a regular hash set,  
109:56 - and a tree hash set or tree set. Whatever I typed, 
okay? Alright, so that's enough for sets. Don't  
110:04 - worry if this is a bit confusing, like, we're, 
we're not going to be using these too much,  
110:08 - I just want to show you cuz I feel like you 
guys are going to need to do this for some of  
110:12 - your projects or whatnot if you're learning this 
for a reason. Now, we also have lists now lists,  
110:17 - these are easier to understand, don't worry. But 
there is again, two types of to create a list,  
110:21 - what we're going to do is we're going to type 
array list, we're going to give it a type in this  
110:26 - case, I'm just gonna give my integer type. And 
notice how I'm not typing int I'm typing integer,  
110:31 - just that's important that we need to use integer 
here instead of int. Okay, so ArrayList integer,  
110:36 - I'm going to call this one Tega and equals 
new array list. And we'll type integer,  
110:43 - and we'll put brackets and there we go. Now we're 
gonna have to import this so important ArrayList  
110:48 - up there. And we now have an A list. And what 
a list allows us to do is it's, you can almost  
110:54 - think of it as the exact same thing as an array, 
except it's a bit slower. And it can change sizes,  
111:00 - so we can add things to it, we can remove things 
from it. And if we get like the end of the array,  
111:06 - or the end of the list, sorry, we can add another 
element into it, it doesn't matter. So we can have  
111:10 - like a dynamically sized array. These have pretty 
much identical properties to the set. So to add  
111:17 - things, you can do t dot add. And you can add like 
an element you want to add like one right? Okay,  
111:24 - that works fine. To remove things T dot remove. 
Now to index things, because just like an array,  
111:31 - we can actually index things with the list 
because this is going to care about the position,  
111:34 - it's not going to just care that it exists like 
a set, what we can do is we can do t dot get,  
111:41 - and then we can give an index, right? So even it's 
showing, it's always saying index right here. So  
111:47 - I do dot index zero, then that would give me one, 
right because one is added in there. Now to like  
111:53 - put thing to put something or to set something on 
a certain index where you do this is T dot set,  
111:58 - and you type the index and the element. So I want 
to set index one per se to be equal to like five,  
112:06 - then that's where I would do it, index one is 
five, okay, we print out t here just to show  
112:13 - you what it looks like. Okay, sorry, that's we 
can't do that we have to do t, we have to add  
112:21 - something. So to set something like this, sorry, 
you have to actually have something added at the  
112:25 - index. I forgot I didn't add that. So I'm just 
gonna add to what I'm doing now essentially,  
112:31 - is what this set actually does is you have to 
have something already existing at that index.  
112:37 - And this is going to change that index for you. 
So this is to change an already existing index.  
112:41 - And before I was trying to set one, when we didn't 
have that in so that was my mistake. But anyways,  
112:45 - there we go. So now that works. We've changed 
to equal to five and twos up position one,  
112:50 - right. So that's the way that that works. I've got 
a thing up here, I'm just going to read through a  
112:54 - few of these set. Yeah, okay, so that's the basic 
ones. Again, we have dot size, so T dot size,  
113:02 - we can do t dot empty, or is empty. And this 
is actually really useful when it's called sub  
113:07 - list. And what this allows us to do is get from 
certain indexes. So T dot sub lists, let's see at  
113:14 - argument, yeah, so we just need an int. So this is 
going to allow us to get within a certain range.  
113:19 - So say I add like these a bunch of times. Okay, 
so we have six elements. Now, what, what I want to  
113:28 - do is I want to get from like index one to index 
three, and I want to print that to the screen. So  
113:33 - let's just take this and put this here instead. So 
let's get rid of TIG or the semicolon, and print  
113:41 - out and see what we get. So we get here now is 
five and one because although our list actually  
113:49 - has what do you call it, like six elements in it 
from here, we can just get the elements from 123,  
113:55 - not including three. So if I type like 124, then 
you should see we get one more element in here,  
114:01 - we get five one and two, because that's from from 
index one to index four, but not including index  
114:07 - four. That's what we're grabbing, we're getting 
all those elements in the the sub lists like that.  
114:12 - Now, this is ArrayList. We also have linked list. 
Again, this is another data structure that I can't  
114:20 - really explain to you just understand that it is 
faster at certain operations than an ArrayList.  
114:27 - So for any of you to understand the difference 
between this you have linked lists and ArrayList.  
114:31 - And you guys, I recommend you to play with 
those and figure them out on yourself. Anyways,  
114:37 - we're coming up on about 15 minutes now almost. 
And that's pretty much all I wanted to talk about  
114:42 - with sets and lists. Now I know this video 
might have been a bit confusing. There's a  
114:46 - lot of stuff that I wasn't able to explain to you 
guys. But just understand that if you're trying  
114:51 - to do something and you don't know how long you 
want something to be like a list or an array.  
114:56 - You don't know how long you want it to be. It's 
a different amount of time. If you don't know,  
115:00 - you would just use an ArrayList the way that I 
showed that to you before, so ArrayList like that,  
115:06 - because then you can add things, you can get 
things, you can set things. And you don't have  
115:10 - to worry about like having a designated length. 
The reason you use a set is when you don't care  
115:15 - how many times something exists or where it 
exists, you just care if it exists. And the  
115:21 - reason a set is better is because it's simpler. 
And it's a lot faster to do operations on in  
115:27 - terms of like a computer efficiency standpoint, 
that's when you would use a set. I'm going to  
115:35 - be talking about hash maps, or like Java maps. The 
reason I say it like that is because there's a few  
115:42 - different implementations of maps, similar as to 
how there's different implementations of lists,  
115:47 - and like ArrayList, and all that stuff. So 
maps, if you're coming from Python, like me,  
115:53 - you can think of them as dictionaries. And I'm 
only talking about three different types of maps.  
115:57 - So a hashmap, a tree map, and what was the last 
one, I got it written down here, linked hash map,  
116:03 - sorry, just forgot about that one. So pretty much 
a map is known as a key value pair in any other  
116:08 - languages, they're typically called dictionaries, 
or hash tables, or hash maps or whatnot. Okay, so  
116:14 - to create a map, and I'm just gonna do this, and 
then we'll talk about exactly what it does, we're  
116:17 - just gonna create a map M is going to equal to new 
hash map like this, okay. And this is your simple  
116:26 - syntax, now to we have to import this. So I'm just 
gonna import Java dot util. So just by clicking on  
116:31 - it, we have to import map as well. So we'll import 
the map there. So you see those. It's all coming  
116:37 - up now for us. Okay, so now that we have that, I 
want to talk about exactly what a map is. Now map,  
116:42 - like I said, is a key value pair, meaning that 
it's similar to like a list and an array in the  
116:49 - sun, so you can index things. But instead of 
indexing them by numbers, you index them by  
116:54 - keys. Now keys can be anything that you want. A 
key could be a string, a key could be an array,  
116:59 - actually, I'm not sure if it could be an array, 
but it could be a string, it can be a number,  
117:02 - it can be a char, it can be a float, what like 
pretty much whatever you want can be the key.  
117:07 - And that key links us to a value. So the easiest 
way to kind of demonstrate this is just to do it,  
117:13 - and then to talk about what's really happening. So 
to put a new value into a hashmap, or into a map,  
117:21 - what you do is you have to specify a key, and 
a value. So you type whatever the name of your  
117:27 - map is, in this case, m dot put, and then you 
need to put a key in a value. So in this case,  
117:32 - for my key, I'm going to type Tim, and it is going 
to lead to the value five, so I type Tim, and then  
117:39 - the value is five. So I put that in there. And 
now I'll just show you what it looks like if we  
117:44 - print this out to the screen. Because I think it 
will give us a decent representation system. What  
117:52 - am I saying System dot out dot print ln Sorry, 
guys more tired today. And we'll print em and  
117:58 - see what we get. So in this case, you can see we 
see this a curly braces as Tim is equal to five,  
118:04 - meaning that if we're to index Tim, we get the 
value five. Now, how do we do that? So how do we  
118:10 - actually get a value based on a key, the way 
we can do this is if you put square brackets  
118:15 - next to your map, are actually you can't do like 
this Python, we have to m dot and then get Sorry,  
118:21 - I'm still used to the Python syntax here, guys, 
we type m dot get Okay. And then we put the key  
118:27 - in here. So in this case, I'm going to put Tim as 
my key. And what you should already be predicting  
118:33 - what we're going to get out to the screen. In this 
case, we get the value five and not as because  
118:37 - the key Tim leads us to the value five. Now to 
put another thing into our map, we can do this,  
118:44 - right. So we do Tim we could do like Joe, and Joe 
doesn't have to point to a number, it could point  
118:49 - to another string. And that string could be like, 
I don't know x, okay. And we can just do whatever  
118:55 - we want. Like we can have the the key one and or 
the key 11 and the key 11 points and 999. Okay,  
119:01 - and now if I just print em out, you'll see that we 
don't get any issues. And that this works fine, we  
119:08 - get Joe equals x Tim equals 511 equals 999. Okay, 
now, this is an extremely fast data set, meaning  
119:16 - or don't type, whatever you want to call it, 
meaning that everything from adding to removing  
119:21 - to overriding to getting happens in constant time. 
Now again, like I talked about in my stats video,  
119:28 - you don't really have to understand what that 
means. But if you do, that's great. And just  
119:31 - know that this does happen in constant time. Now 
I'm going to show a, I still show the tree map  
119:37 - and the what was the other map talked about linked 
hash map first, and then we can kind of talk about  
119:44 - the differences between them. So with a hash map, 
as opposed to the other type of maps, I'm going to  
119:49 - show you this one does not retain an order. So all 
of these maps can only contain unique elements or  
119:56 - unique keys meaning that if I try to add another 
key, so I try to add 11 nine Try to add this to be  
120:00 - 998. Instead of adding another key that's equal to 
11. We're simply overriding this already existing  
120:06 - key that is 11. So in this case, you can see that 
we override it and we get 998. You cannot have to  
120:11 - have the same keys existing in the map. But you 
can have to have the same values if you'd like to.  
120:17 - Okay, so sorry, that kind of got me off track. 
But that was important to understand. So this  
120:22 - hashmap does not guarantee the order in which 
we add things in. So you can see that I added  
120:28 - Tim, and then I added Joe, and then I added 11. 
And it showed me Joe, Tim and 11. Now this is not  
120:34 - any kind of sorted order, because how do we sort 
numbers and strings and all that stuff together?  
120:40 - It's not in the order that we added it in. So what 
order is it in? Well, it is in no order. And that  
120:45 - is why this hashmap is extremely fast, because 
it does not keep track of the order of elements  
120:50 - when they go in. So just know that if you're 
trying to like look through the map, because  
120:55 - you can iterate through maps, and I'm going to 
show you that in a second. It doesn't keep it in  
120:59 - the correct order. Okay. Now, the next map that 
we're gonna talk about is the tree map. Okay,  
121:06 - now this tree map is what we're gonna have to 
import it, of course, is similar to the tree list,  
121:12 - or the tree set, or whatever one I showed you in 
the earlier video. In that when we add things in,  
121:17 - it's actually going to keep it in a sorted order. 
So if I run this, I'm actually curious to see what  
121:21 - kind of sort we're going to get. Okay, so we 
don't get anything. So that's, that's actually  
121:25 - a good area to run into. Whenever we're using a 
tree map, the types that we add to the map have  
121:30 - to be the same, meaning that the keys have to be 
the same datatype. At least I'm pretty sure. So  
121:36 - I'm gonna just gonna see if I remove this, if this 
is going to work for us. Yes, so in that case,  
121:41 - we do get in a sorted order, we get Joe and then 
we get Tim, because obviously j is before T. And  
121:47 - that's where it's going to sort strings. So if I 
try to put like an A value in here, so it's Yeah,  
121:51 - it's even true on a key value, I'll literally 
just put like a is equal to b. And I guess we  
121:58 - can't set equal we have a comma. What's our air 
semi colon, always forgetting those are? Okay,  
122:05 - so we'll run this. There we go. So you see, we get 
a first because obviously a well it's first letter  
122:09 - in the alphabet. So that's going to show up for 
Joe. And for Tim. So that sorts the order for us.  
122:14 - And that means that the data types for the keys 
that we pass in have to be the same. So we can use  
122:18 - numbers, we can use strings using whatever data 
type you want, there's got to be completely the  
122:22 - same for that map. Now, the other type is a linked 
hash map. And what this does, is it's similar to a  
122:30 - list in that it keeps the same order that you add 
things into it. So in this case, if I print out m,  
122:37 - you can see we get Tim Joe and then a and that's 
because it's actually going to maintain the order  
122:42 - in which we added elements. So it's gonna say, 
Tim, that was first element. So that's gonna  
122:47 - be the first thing that we show. And then Joe, 
that's gonna be the first thing and then a nursery  
122:51 - second, and then a, this is gonna be the third 
thing, because that's the order in which we added  
122:54 - them in. And those are the only main differences 
other than, like, the speed of which these things  
123:00 - run out, that you have to kind of understand 
right now, okay, and typically, whenever you do  
123:04 - anything, you're just gonna be using a hashmap, 
you don't really need, like a linked hash map,  
123:08 - or a tree hash map, or tree map, whatever it's 
called for any of the stuff that we're gonna  
123:13 - be doing right now. So what I'm going to do now, 
is I'm just gonna show you a few methods, how we  
123:18 - can kind of clear the maps, how we can like remove 
elements, and some useful things you might want to  
123:23 - do. So what we can do to get all the key values 
or to get like a certain key value, we can say,  
123:29 - Actually, I'll just show this one first. Well 
we can actually do is is just cool things that  
123:36 - are going to be really useful to you. And dot 
contains value. So this is let's see, this method  
123:42 - contains values not available for type map. Hmm, 
interesting. Match contains value object. Yeah,  
123:49 - so we just have to put something there. Okay. 
So m dot contains value. And then in here,  
123:54 - we're just going to put like any value on so in 
this case, B. So what this is going to do is it  
123:59 - is actually going to check for us if this value 
exists in the map. And remember, the values are  
124:04 - all these these second elements here. And they 
are linked up or like attached to the key. So  
124:09 - it's going to tell us if b exists. Now we can do 
the same thing with keys and the keys are more  
124:14 - useful. And I'll show you why in a second contains 
key and in this case, for the key I could put like  
124:20 - contains the key five, right and that will give us 
a true or false value similar to what we're doing  
124:25 - with sets and lists in the last video. Okay. 
Now the reason keys are more useful is because  
124:32 - if I try to do something like m dot get, and I 
put the key, let's say five, well the key five  
124:38 - does not exist, the value five exists, but the 
key five does not exist. So watch what happens  
124:42 - when I run the program. m dot get five actually 
let's just see what this is printing out to us.  
124:47 - Because I'm curious if this is gonna crash. Let's 
Let's see here. I'm not getting five No, yeah,  
124:56 - so this isn't gonna actually crash for us. If we 
try to get Ah, what do you call it a key that does  
125:02 - not exist in the map, but it's going to return us 
a no value because this key does not exist in the  
125:08 - map. That's actually interesting. I didn't know 
that in Python, if you try to get a key from map  
125:14 - or from a dictionary, and it doesn't exist, you 
actually get an error. So that's interesting to  
125:18 - know. Anyways, I guess another method I could 
show is, let's see here, dot values. So what  
125:25 - this is going to do is it actually just prints out 
all of the values in the map. So if I copy this,  
125:31 - and I simply print it down here, we get m dot 
values. And in this case, it'll just give me x,  
125:38 - b, and five, which are all these and you can 
see, it gives me that in no particular order,  
125:42 - it's important to remember, values, let's see 
if there's any other ones we can use. We can use  
125:49 - clear so I just got a text document beside me cuz 
I always forget all these to show you, I always  
125:54 - forget which ones. So Am I clear? Obviously, 
this is just going to remove everything from the,  
125:58 - what do you call it the map. So we get an empty 
map. And I believe the last one is, is empty. And  
126:05 - this one like that is simply just going to tell us 
if the map is empty. Or if it's not up to you know  
126:13 - how much time we had 10 minutes. So I actually I 
am not going to show you an example of using these  
126:18 - maps. But if you want to think about this, and 
maybe try programming this yourself using the maps  
126:23 - that I just showed you be good exercise. And that 
is given a string, or like an array of characters,  
126:30 - count all of those characters into a map. So 
have a key that's equal to, let's say the letter,  
126:38 - and then the value for that key is equal to the 
how many times that letter occurs, or how many  
126:45 - times that character occurs, and try to do that 
yourself. And if you're able to accomplish that,  
126:49 - well, then you're definitely learning and you're 
understanding the stuff that I'm explaining.  
126:56 - What I'm going to be doing is showing you some 
common problems you're going to want to solve  
127:00 - and how you can do that with the information 
I've showed you so far. So kind of bringing  
127:04 - everything in now, mixing it all together, and 
using all the things. And this is a really good  
127:08 - way to kind of like apply all the knowledge that 
we've just learned into solving like a few common  
127:14 - computer problems. Because a lot of the time 
you guys learn how to do all this stuff, but  
127:19 - you don't know how to kind of mix it all together. 
And that's what I'm trying to do in this video. So  
127:23 - I'm also going to be showing you some like useful 
methods and some things that I may have forgotten  
127:27 - to talk about in previous videos. So yeah, that's 
what this video is going to be about. So in the  
127:32 - last video, I mentioned that a good exercise to 
do would be if you have like, I don't know a word,  
127:39 - and you want to count or like a sentence or a 
string, you want to count all the letters and  
127:43 - store them in like a hashmap and have the letter 
as the key and the value being how many times they  
127:47 - appear. So I figured for any of you guys that 
were brave enough to attempt that on yourself,  
127:53 - I would show you a solution here quickly to doing 
that. And for any of us who didn't see that,  
127:56 - make sure you pay attention, because this is 
really useful, it's going to help you also to  
128:00 - understand kind of how maps work and how you can 
use them. So what I'm going to do first of all,  
128:05 - is I'm just going to create a string, let's 
call str is equal to and I'll say, Hello,  
128:11 - my name is Tim. And I am Cool. All right, 
very creative string name anyways. So we're  
128:21 - going to do that just because we're going to 
count all the letters in the string. Now the  
128:26 - human way to count this would be to go through 
and literally read like each letter and be like,  
128:30 - okay, so I have an L how many times the L appear. 
But I will show you how we do this with maps and  
128:33 - for loops, like very efficiently in computing. 
So what I'm going to do is create a for loop,  
128:38 - what we're going to do is we're going to loop 
through the string. And the way that we can do  
128:43 - this is because if I try to do like for char 
our like x because it's going to be character,  
128:49 - right. And in str you see we get this red line, 
it says we can't iterate over a string. So the way  
128:56 - that we can do this is actually a cool method and 
a useful method. And it is going to convert the  
129:01 - string into a character array for us. And the way 
that we can do that is by doing angas dot.to char  
129:08 - array. And this is if I literally just print this 
out for you, if you want to see what it looks like  
129:14 - System dot out dot print ln is simply just going 
to put every character so including the spaces  
129:22 - into a character array for us. So let's just run 
this. And you can see it just is literally just  
129:28 - printing this entire thing, but it's actually 
in an array, and this is going to allow us to  
129:32 - loop through it. So you'll see in a second. Okay, 
so what I'm going to do now is every character,  
129:40 - I'm going to see if that key already exists in 
the map. If it does, I'm going to get the value  
129:46 - because that value is gonna be how many times it 
exists. So in this case, say I'm looking for like  
129:49 - m it already exists in the map, I'm just gonna 
add one to it and then overwrite that key with  
129:53 - a new value. And you'll see what I mean here in 
a second. So we're gonna say if m dot contains  
129:59 - Key of x, then what I'm going to do is I'm going 
to say, old, we'll say int old equals m dot get,  
130:10 - and then the key is going to be x. And then what 
we're going to do is, what's the issue here,  
130:17 - cast int, if I need this, forgetting all my 
brackets, int old equals m dot get x, and x  
130:27 - should be interesting one second, saying I have to 
cast this to an integer. Okay, let's just do this,  
130:34 - I don't think we actually need to do this, but 
let's just cast it to an int. All right, anyways,  
130:38 - and then we'll say, dot quotes. And for the key 
is going to be x two, that's going to be the  
130:44 - character. And we're gonna say old plus one. Now, 
what this should do for us is just increment the,  
130:51 - the amount, so that's going to go up by one 
now otherwise, so if that key does not exist,  
130:55 - what we're going to do is we're going to put 
into our map, a new key, and the keys value  
131:00 - is going to be one because we just found the 
first occurrence of that letter, and the key  
131:04 - is going to be x standing for the letter. And 
that should work. Now after we do that, I want  
131:10 - to see the counts of all these letters. So to do 
that, it's really help I spelt system correctly,  
131:15 - we're going to print the line, and we're just 
going to print them. Okay, so quickly, I know  
131:21 - this fast, and you might not really understand 
exactly what's going on. But we're just looping  
131:24 - through every letter in this string, we're going 
to check, the first check is going to see if the  
131:30 - map contains that letter already. So as a key, 
if it does not, what we're gonna do is we're  
131:35 - simply going to add in a key, and it's going to be 
equal to that letter, and it's gonna have a value  
131:39 - of one. Because we just found it occurs one time, 
we already know that. Now, if for some reason, or  
131:45 - if that key does exist, what we're going to do is 
we're going to get that previous count. And then  
131:50 - we're going to add one to that previous count and 
override the key. So like, if the count is four,  
131:54 - it goes up to five. Pretty straightforward. So 
if I run this, you can see we get a space, well,  
132:00 - there's eight spaces, we get a, there's three AC, 
there's one D, there's one, and it goes through  
132:04 - an account all of the different letters for 
us. And if we wanted to confirm those correct,  
132:08 - we could go through and count them like 
that. And just by looking at it here,  
132:13 - it does look as though that is correct. So yeah, 
that's a really common way to use a map. Um, yeah,  
132:19 - it's really useful. And there's a lot of cases in 
which you want to do something like that. Okay,  
132:23 - so the next thing I want to show you guys is 
something I forgot to do in the last video. And  
132:27 - this is really just gonna take like 10 seconds. 
But pretty much to remove an element from a map,  
132:31 - you probably already guessed, but it's literally 
just m dot remove, and then you just type the key.  
132:36 - So I just felt like I had to say this, because 
I watched back my other video, and I realized I  
132:41 - forgot to say it. So to remove an element, you 
do m dot remove, and just put the key. So if I  
132:45 - want to remove like all the spaces, which actually 
wouldn't be a bad idea to remove from our counts,  
132:51 - then if I do that. Interesting why it's not 
letting me remove that. Let's try that maybe, oh,  
132:58 - it's because it's not because of character. My bad 
Sorry, guys, I've been doing string a character  
133:03 - space is different. Yeah, so that it actually 
removes the character, the space from our program,  
133:09 - or from our map, whatever. Okay. Now, the next 
thing I want to show actually is sorting. So  
133:15 - sorting is something you typically want to do on 
arrays. So I'm actually going to remove all this,  
133:20 - and I'm going to create a new array, an 
integer array. And I say int x equals,  
133:25 - with cases do like three, and let's do a 
bunch of different values and see if we  
133:29 - can get this to sort for us. Let's do negative 
99. semicolon there for us. And to sort this is  
133:37 - actually really easy, all we have to do is just 
type arrays, dot sorts. And then what it takes,  
133:45 - it takes two arguments. Now the first argument is 
obviously going to be our array. So in this case,  
133:51 - x, and then the other two arguments are 
actually optional. And what these do sources,  
133:56 - three arguments not to what these arguments do is 
from a certain index, so if we want to sort just,  
134:02 - let's say, like this part of the list that's 
highlighted, we can actually do that. And the  
134:07 - way that we would do that is we would type one 
because we're gonna start at one. And then if  
134:11 - we were going to 71234567. Funny enough, we will 
actually type seven. Now I know this is index six,  
134:19 - but the thing is, it's going to work up but not 
including to that index. So if we type seven, it's  
134:24 - going to that seven, but it's only going to sort 
up to like the actual number seven. Okay? And what  
134:31 - this does, and I believe is actually just changes 
the list, we don't need to say like x equals  
134:37 - Arrays dot sort, we just say Arrays dot sort. And 
then what we can do is we can do system dot out,  
134:44 - dot print ln, and we can print x. And let's see if 
it did end up sorting that section of the list for  
134:52 - us. Okay, so we actually, man of course, we can't 
do that. We're gonna have to set up a basic for  
134:57 - loop to print these out just because when we try 
to print arrays, I forgot we get that little loop,  
135:01 - or we get that message because that's the memory 
address. But anyways, let's say for int, i and x,  
135:10 - and then we'll simply just print out I, it's got 
to make it complicated for us, doesn't it? And  
135:18 - instead of printing, ln, we're just gonna print. 
And we'll just add a comma here just to make it  
135:23 - separated. Okay, so let's run that. So there we 
go. So it actually did sort this middle section  
135:29 - of the list for us, right? So we got 1234567, you 
see eight and zero, were not touched and negative  
135:35 - 99 was not touched. Now, if you want to sort the 
entire thing, and you don't want to worry about  
135:38 - these indexes, you can just put x, in this case, 
if we do this, we're going to get an 899, zero  
135:43 - all the way up to eight. And yeah, so you could 
sort like from three to five, or three to six,  
135:49 - or whatever, okay. And you can see, it's only 
going to sort like a few of the elements in the  
135:53 - list for us, or in the array for us. So that's a 
really useful way to sort things at quite quickly,  
135:59 - actually, in quite easily using just Arrays 
dot sort. And remember, you don't have to do  
136:05 - like x equals Arrays dot sort. Because what it's 
actually going to do is just sort in place all the  
136:10 - elements of x and swap them around, rather than 
creating like a new version of x that is sorted.  
136:20 - Where you're going to be introducing object 
oriented programming, and talking about what  
136:24 - objects are and getting a little bit into 
classes and methods. So I think the first  
136:29 - thing to really talk about is what is an object. 
So an object essentially is just an instance of a  
136:36 - certain data type. So we know we have data 
types, like int strings, bool, scanners,  
136:40 - like all kinds of different things that we can 
use, like ArrayList, hash table, hash, list,  
136:45 - whatever, or hash map all that stuff, okay. And 
those are all known as data types, right? We're  
136:51 - classes if you want to say that. So whenever we 
create an instance, by doing something like this,  
136:55 - like scanner, SC equals new scanner, essentially, 
what we're doing is pointing this variable SC  
137:02 - to a scanner object, okay. And whenever we create 
any kind of variables, like just type like int  
137:08 - x equals five, we're essentially saying x 
is equal to an int object of value five,  
137:14 - okay? These objects are what allow us to have 
different properties for different data types.  
137:21 - So you know how we can add integers together, or 
how we can do like, dot parse int, on on strings,  
137:27 - and we can have like a bunch of different methods 
and stuff. Those are all specific to the type of  
137:31 - object that we're using. So, for example, we 
can see here I have the scanner object, right,  
137:38 - so SC is equal to a new scanner object that's 
taking system.in as an argument, okay. So we can  
137:44 - only use this dot next method on SC because it is 
a scanner type. If I try to do X dot x, and I do  
137:52 - a little semi colon here, you can see that we're 
getting can't invoke next method on primitive type  
137:57 - int, because well, that method doesn't exist for 
int, okay. And that's like a really basic way to  
138:03 - kind of understand what objects are essentially, 
whenever we're creating a new variable. So like,  
138:07 - even just doing like string like, str equals, 
hello, what we're doing is we're saying, well,  
138:13 - str is actually equal to a string object with 
the value alone. And because of, or based on  
138:21 - the different types of objects, we have different 
properties, different attributes, things we can do  
138:25 - with the methods we can call in, that's just kind 
of important to understand, you'll see more how we  
138:29 - create like objects and whatnot, that are specific 
to like classes that we're going to make in later  
138:36 - videos, okay, so it'll all start to come together. 
But just now kind of know that what I'm calling  
138:40 - things objects, essentially, that's like you have 
a variable of a certain type, and it's equal to  
138:44 - something, you're creating an object of that 
type. Okay, that's all we can have to understand  
138:48 - for now. So now let's talk about methods. So 
some of you may already understand what methods  
138:53 - are because I think I went through a very brief 
like explanation of them in previous videos. But  
138:58 - essentially, methods are anything that you call on 
an object or on an instance of an object. So just  
139:04 - to clarify, when instances when we're creating 
a variable like this of a new scanner object,  
139:08 - we can say that we're creating FC is now an object 
like a scanner object, or we can say, se is a new  
139:14 - instance of scanner of like the type of scanner, 
and those kind of are interchangeable. So if I say  
139:20 - instance, instead of object, they're very similar. 
Okay, so just bear with me on that. So anyways,  
139:26 - when we call this dot next method, we call it 
on the like, variable, right? So that's, that's  
139:33 - pointing to our scanner object. So our scanner 
object allows us to use this method. Again, I  
139:39 - showed you before, if I tried to call that on, for 
example, the variable x that was like an integer,  
139:44 - that doesn't work because that object doesn't 
have that method associated with it. So a method  
139:51 - is anything really that's just like a dot, and 
then whatever the method name is, and typically  
139:54 - brackets, for example, if we had like, an array 
like so we have or let's do actually strings are  
140:00 - just another string probably should have deleted 
all these. But that's okay. We'll say string H  
140:04 - equals Hello. And I can do something like H dot 
length. And this is a method that simply returns  
140:10 - to us the length of the string. And again, this 
works on our object, which is a string, but it's  
140:17 - not going to work on our SC, because well, what 
is the length of a scanner. So if I type that, you  
140:21 - can see that we're getting this red line here. And 
that's obviously not giving us anything, because  
140:25 - this length method is not defined for a scanner 
type. So that's kind of a bit about like how we  
140:31 - call methods. And you guys have already seen a lot 
of different examples of methods that we can use  
140:35 - on different objects and different data types. 
Okay. And same thing when I say like data types  
140:40 - and objects, data types are kind of like what the 
object is created off of. And you'll see that more  
140:46 - in in future videos. Just want to clarify in 
case anyone's kind of confused, okay, so how  
140:51 - can we create our own methods? Well, currently, 
since we don't really know anything about classes,  
140:55 - we're going to be creating methods inside of this 
main class. Okay, now, this main class is special,  
141:01 - because it is it contains this method. And 
remember, I was telling you guys at the beginning,  
141:05 - this method automatically runs whenever we run the 
program. Well, that's different than other methods  
141:10 - we're going to have in classes we create in future 
videos. So it's a bit hard to explain this method  
141:15 - per se. But this is a method because a method is 
typically anything that sits inside of a class and  
141:20 - the class is what's going to define like our data 
types. So scanner. In Java, we can't see it right  
141:27 - now, there's actually somewhere that says public 
class scanner, and inside of that scanner class.  
141:33 - So if you do like brackets like this, it has a ton 
of different methods that are different attributes  
141:39 - that we can use by calling them from within this 
function. Okay. So if we want to create our own  
141:45 - method within this main class, what we can do, 
and this is just the default way that we're  
141:50 - going to do for now, I'm going to show you why we 
use certain keywords and stuff in future videos,  
141:54 - but it's a bit advanced right now. We're something 
in type, public static, okay. And then whatever  
142:00 - return type we want, which we'll talk about in 
a second. So let's get going to void the name  
142:06 - of our method. So in this case, I'm gonna say 
like, Tim, okay. We have a public static void,  
142:12 - Tim has your parameters, again, talk about that 
in a second. And then it's going to do something  
142:17 - in here. In this case, I'm just gonna say system, 
dot out, dot print, ln, and we'll just say, when  
142:25 - you call up, it just says Tim, like that. Okay. So 
what have essentially done here is create a static  
142:31 - method that we can call from anywhere within this 
class, okay, and actually outside of the class as  
142:37 - well. So what we need to do to call this method 
from inside this class is we can literally just  
142:43 - type the method name since case by type Tim. And I 
put a semicolon like that, and we run the program,  
142:50 - you see that we get is it running? one second 
here, sorry. Okay, so I figured out why it  
142:57 - wasn't working, because we have this SC dot next 
coming in here. So I'm just going to comment that  
143:02 - out for right now. And we will run this one 
more time. And you can see that we get Tim to  
143:07 - the screen. Now I know, I didn't really explain 
what this is or how this worked. But essentially,  
143:11 - what I've done here is I've created kind of like a 
function, okay. And it's known as a method. But in  
143:16 - other programming languages, you might see this 
as a function. And this void keyword. What this  
143:21 - means here is it returns nothing, okay, because 
in functions, we can actually return values,  
143:25 - which I'm going to show or sorry, functions 
methods, we can return values, which I'm going  
143:28 - to show you in just a second. So this stands 
for, we are going to not return anything,  
143:32 - we're just going to do something in here. So in 
this case, we're just printing something to the  
143:36 - screen. All right, now we have Tim. And this is 
the name of our method. And that's what we call  
143:42 - here to trigger this to run, right. So if I wanted 
to pass some information to Tim, so say I wanted  
143:48 - to print whatever string I passed to Tim, well, 
what I would do in here is I would type string,  
143:55 - and then let's just say str like that. And now 
this means that whenever we call this Tim method,  
144:01 - we have to actually pass it one piece of 
information, and that piece of information has to  
144:06 - be a string. Okay, so I'm going to show you right 
here. So I type str, I put Tim and I put Tim in  
144:13 - here like this, okay, and we run the program. Now 
we see we're printing out Tim, if I change this,  
144:18 - like with a bunch of M's can see if we run this 
we're getting Tim. Now the way that this works, is  
144:24 - this is called a parameter. So str is a parameter 
of type string. And that means that whenever we  
144:30 - call this function, we have to type in arguments 
and what arguments are is what the parameter is  
144:36 - going to be when we get to the method. So anything 
that goes in here in the call statement, which is  
144:42 - what this is known as where we're like triggering 
the method to run is known as an argument. Okay,  
144:46 - so Tim is an argument. When we call this what's 
happening is we're passing Tim as str so now it's  
144:52 - saying like str equals Tim like the other 
whatever the string is okay. And then we're  
144:58 - simply going to print to the screen. Whatever 
it is that we were passed. So in this case, 10,  
145:03 - right? Now we can actually do multiple parameters 
as well. So if I wanted to do another parameter,  
145:08 - I wanted to pass two pieces of information every 
time we call this function, I would say maybe int  
145:12 - and X, okay? And now it means that I have to pass 
not only a string, but I have to pass an int. So  
145:19 - that means we have to type an integer in here. 
In this case, I'm gonna do four, what I'm going  
145:24 - to do now we're going to say four. And we'll say 
int i. And we'll say i is less than x. And we'll  
145:32 - say i plus plus, we're just going to print this 
that many times. Okay, so let's see here. Boom,  
145:40 - okay, so System dot out dot print line, what's 
more, we get in here, initialize variable,  
145:44 - got to do that, sorry. Okay, so now we pass an 
int, and we pass a string. And what we're going  
145:50 - to do is simply print this as many times as like 
the input that we typed in, okay. So you can see  
145:55 - that we now we get Tim four times to the screen. 
And that's how that works. So we have arguments  
146:00 - in here, the two arguments are Tim and four. And 
then we have our parameters, which are STR and  
146:04 - x. And when we pass our information in str gets 
equal to Tim, and x gets equal to four. Okay,  
146:10 - and then in here, we can now use those values by 
referencing STR and X, like I've done. So. Okay,  
146:17 - so I hope that makes sense. Now, in terms of this 
public static, I'm going to talk about this in the  
146:21 - next video. For right now, all this means is that 
you can call this not on an instance of the class,  
146:28 - which is kind of what we're doing here, when we're 
just calling Tim, okay, because we don't have any  
146:32 - object that's like a class main, which you'll 
see in the next video. Okay. So that's kind of  
146:37 - how we can create our own methods. Again, we can 
create methods that return things. So that's what  
146:42 - I wanted to talk about now. So all I'm going 
to do is going to create another method. And  
146:44 - I'm going to say this is public static. And in 
this case, I want to return an integer value to  
146:50 - whoever's calling this Okay, or wherever this 
is being called. So I'm going to type int,  
146:54 - because this is what I'm going to return and 
the function is going to give back to us and  
146:57 - the method is going to give back to us. And I'm 
going to say add two as the name. And we're simply  
147:02 - going to take an integer x as our one parameter 
here, see what the issue is here. Method must  
147:08 - return Yeah, okay. So you can see, it's already 
giving us a red line saying that we have to return  
147:13 - a value in this method, because we typed in the 
fact that we were going to turn it okay. So what  
147:20 - I'm going to do here is I'm simply going to return 
x plus two. And what this is doing now, semicolon  
147:27 - is it's just taking a value x, and it's adding to 
it and it's returning the value to our program,  
147:33 - wherever we call it. So let's just do something 
up here, and show you how this is working. So  
147:38 - I'm going to say, system, dot out, dot print, ln, 
and here, I'm simply going to type add two, and  
147:45 - then give it a number, in this case, six. Now, you 
can probably guess what this is going to give us.  
147:50 - But essentially, what's happening here is we're 
calling add two, we're giving it the value six, so  
147:56 - our argument is six, it's coming in here, and the 
parameter x is now set equal to six, we're going  
148:01 - to return so back to wherever we call this x plus 
two, in this case, eight. So we get eight here as  
148:07 - a value, and we go, and we bring it up here. And 
now this little line is equal to eight. So we're  
148:12 - going to print eight to the screen. And you can 
see that we get eight as a value like that. Now,  
148:16 - obviously, in methods like this, you're probably 
gonna do some more advanced things. And just  
148:20 - adding to that shows you how we can return values. 
And I'll do one last example of returning maybe  
148:25 - like a string value. So public static string, 
okay, and we'll just say, str as their name,  
148:33 - because I don't really know what to do. And 
we'll take a string x, okay. And then in here,  
148:39 - we have to return a string value. So what we could 
do is we could return x plus and an exclamation  
148:44 - point. But I think I need to put that in double 
quotation marks, like that. So what we're doing  
148:50 - now is we're adding an exclamation point to 
the end of our string, and we're returning  
148:54 - that. So if I call str here. Okay, so we'll I 
don't know why keeps doing with my brackets,  
149:01 - we'll do str. And then inside our brackets, we'll 
give it high, it should return to as high with  
149:07 - an exclamation point. And indeed it does. And 
yeah, that's kind of how methods work basically  
149:17 - going to be going over classes when we talk 
about creating classes, creating some methods,  
149:20 - constructor methods, all that fun stuff, creating 
instances and objects. And yeah, so this is going  
149:27 - to be kind of an advanced video. Don't if you've 
been following along so far, you'll definitely be  
149:31 - able to follow along with it. But just know that 
now we're kind of getting into some harder aspects  
149:35 - of Java. So if you guys don't understand this, 
please don't hesitate to join my Discord server,  
149:39 - ask me some questions, leave a comment down below. 
Because this is absolutely fundamental. And you  
149:43 - have to understand this before you can really 
start doing any serious programming. And that goes  
149:48 - for kind of all languages, but Java, especially 
since it is an object oriented language, we need  
149:52 - to understand classes and how to create classes. 
So without further ado, let's get started. So  
149:57 - so far, we've been working in this class. Hold me 
now this is not really a true class. Because this  
150:03 - class, all it's doing for us, is just running 
some code right away when we run the program.  
150:08 - And that's what we have this public static void 
main function that automatically triggers whenever  
150:13 - we click this little green Run button. Okay, so 
what I'm going to do now, and you can see that I  
150:18 - have some methods that I've added in here that we 
just kind of use within here earlier. Okay. What  
150:23 - I'm going to do now is I'm going to create my 
own class, from scratch from scratch, and we're  
150:28 - going to start coding. So to do this, we're going 
to go to whatever our packages. So in this case,  
150:32 - tutorial, one for me, and I'm going to go new and 
class. And I just did that by right clicking. And  
150:36 - now I'm going to give my class a name. Now, for 
this example, I'm going to create a dog class.  
150:41 - And yeah, you guys can create whatever you want. 
But I would recommend you follow along with me,  
150:46 - since you guys are most likely new to classes. 
Okay, so now we have this thing, and it says  
150:51 - public class dog. And you can see we open up in 
a new file. So whenever we create a new class  
150:55 - in Java, we have to actually create a new file 
for that. Now, that's actually good, because it  
150:59 - makes it really easy to navigate between different 
classes. Whereas in something like Python, you can  
151:04 - just have all your classes in one file. Okay, so 
what we're going to do now, is we have this public  
151:09 - class dog. So what does this What does this mean? 
Like what is a class or class is pretty much a  
151:15 - data type. And whenever we create an instance of a 
class, like an object of a certain type, all we're  
151:20 - doing is we're just using all the information 
within the class to like create an object. So  
151:24 - you can almost think of it as like a blueprint 
for an object. Now, what problems do classes  
151:29 - fall for us? Like, why are they useful? So I'm 
going to introduce combos a very simple problem,  
151:33 - right? So I want to create five dogs, okay, I want 
to have five dogs, I want each dog to have a name,  
151:39 - I want each dog to have an age. And I want to, 
at some point, be able to like call something and  
151:45 - print out each dog's name and age and like a nice 
form. Okay. Now, we could do that we know how to  
151:51 - do that. If we went back into main here, what we 
could do in this little, what do you call method  
151:56 - here is we could just type a bunch of answer you 
say it's like dog one. And this is equal to four,  
152:01 - and that's dog one's age, we say int dog two, 
and that's equal to five. Or we could go on and  
152:06 - create 10 variables, five for the age and five 
for the names, right? And then we could go and  
152:11 - we could print out each one each time. But 
that is incredibly inefficient. And what if  
152:15 - I wanted to have like 10,000 dogs? Well, what 
would what would I do, then? Well, we could use  
152:21 - like lists to create or lists or raised to create 
names and ages. But that's just not efficient,  
152:26 - it doesn't look as good in our actual coding. So 
what we're gonna do is we're gonna use a class,  
152:30 - and you'll see how we can kind of accomplish this 
problem. So within classes, we have methods and we  
152:36 - have attributes, okay? Now attributes are kind of 
like variables that hold information for us. So in  
152:42 - this case, we want to have two attributes in our 
dog class. And these are going to be the name and  
152:47 - the age to create our attributes. And so the first 
thing we typically do when we create a class is  
152:51 - right at the top of our class, we're going to type 
keyword privates. And then we're going to give a  
152:55 - data types. In this case, we can say string, and 
then the name of our attributes, in this case,  
153:00 - name, okay, and this all we have to do, we're 
just declaring that at some point in time,  
153:03 - we're going to have the attribute name, and 
it's going to be storing information later  
153:08 - on in our program. Okay, we can also do private 
int. And in this case, we'll do age. And this  
153:15 - is going to obviously represent the dog's age. 
Now, if you want to have some other attributes,  
153:20 - we would, again, type private. And we could keep 
going and type a bunch of attributes. Now, what  
153:25 - is this private keyword? And why do we have public 
up here and private here? Well, what this private  
153:31 - keyword does is it ensures that this name and 
this age are only accessible within this class,  
153:37 - meaning that if I tried to do something over 
here, and I wanted to use this age and this name  
153:42 - from this class, I wouldn't be allowed to do that. 
And the program would say, No, this is a private  
153:47 - attribute, you can't access that. Why do we do 
that? Well, you'd find out in larger programs,  
153:52 - but we can also create public attributes as well 
that are accessible to the other classes. Okay. So  
153:57 - if I wanted my things to be public, I could put 
public for now whenever we're using attributes,  
154:01 - we're going to use private, and it's best practice 
to use more private things, okay. And same goes  
154:06 - for methods, which you'll see in a minute. Okay. 
So now we need to create something called a  
154:11 - constructor method. Now this, you typically 
only create one of these, although you can  
154:16 - create multiple, what this is going to do is it is 
going to run automatically whenever we call this  
154:22 - dog class. And the way we create this constructor, 
and we typically need one of these when we have a  
154:26 - class is we're going to do public. And we're just 
going to type the name of our class once again,  
154:32 - so excuse me as a public dog, like this, okay. 
And you can see that now we're getting no errors,  
154:38 - everything's fine. And in here, we're going to 
type the parameters or the information that we  
154:42 - need to be passed in whenever we're creating a 
dog object. Now, in some instances, you may have  
154:48 - nothing in here, when you create a dog object, all 
you need to do is just say you're creating a dog  
154:52 - object. You don't need to give any information and 
that's fine. But in our case, we want to be able  
154:56 - to create an age and a name with our dogs. So what 
I need to do here As I need to type string name,  
155:02 - and int, age, okay, just meaning that whenever we 
create a dog object, we need to give it a name,  
155:08 - and we need to give it an age. Now what I'm going 
to do is I'm going to set these values. So these  
155:13 - attributes equal to whatever we pass in. Okay? So 
what I'm gonna do is I'm actually just gonna use a  
155:18 - keyword and it's, the keyword is this, it's kind 
of hard. If you weren't watching, you think I'm  
155:23 - just like saying this is a keyword and pointing 
something, but this like actually typed out. And  
155:27 - then I'm doing this dot name is going to be equal 
to name. And this dot age is going to be equal to  
155:33 - age. So what is this, this this keyword actually 
doing? Well, it is referencing the attributes of  
155:42 - the class, okay? So when we type this, it is going 
to be looking up here to find all of our like  
155:48 - private attributes. And in this case, we have an 
age and we have a name, alright. And that's how we  
155:53 - reference things that are a part of the specific 
instance, we have this name and this dot age,  
155:58 - okay, and I'm going to explain more and more 
of this as we keep going. It's hard to do it  
156:01 - in like small steps. Okay. So now that I have this 
constructor method created, we can go on to create  
156:09 - one more method, and then we can actually start 
using this class really simply Okay, so what I'm  
156:12 - going to do now is I'm going to create another 
method, in this case, I'm going to type a public,  
156:16 - I'm not going to return anything, so I'm going 
to use void, okay? And the name is going to be  
156:20 - speak. And what this is going to do is it is 
simply going to say something or prints me up  
156:25 - to the screen. So I'm gonna say system, dot out, 
dot print ln, why did that? Okay, print ln, and  
156:33 - all we're gonna do is we're gonna say I am, and I 
want to say that the dog's name. So in this case,  
156:37 - we'll say this dot name, okay? And we'll say plus, 
and I am, you know, plus, we'll say, this dot age,  
156:49 - plus years old, okay? So suddenly gonna say like 
I am, whatever the name is, and I am, however many  
156:59 - years old, not great grammar, but that's fine. So 
now, how do we actually create a instance of this?  
157:05 - Or how do we use this class? Well, from our main 
class here, which we should still have open, and  
157:10 - you know, we can delete all these, we don't need 
all that. So we'll get rid of all this stuff here,  
157:14 - we can actually create a object and to do that of 
type dog, what we're sending individual type dog,  
157:19 - and we're gonna give it a name. In this case, 
we're gonna say Tim, is equal to new dog. Okay.  
157:25 - And then remember that we have to give dog some 
parameters, right? So or arguments because we  
157:33 - have the name, and we have the age. So what we 
need to do is we need to give it a name and an  
157:36 - age. In this case, we can type 10. And I'm going 
to type four. And now you can see no red line,  
157:42 - we're looking good. So our dog's name 
is Tim, and it's age as for. Okay,  
157:46 - so that's great. Let's run the program, make 
sure this is working. Everything's fine. Now,  
157:50 - what I want to do is I want to use that 
speaker. So how can I use that? Well, what  
157:56 - I'm going to do is I'm going to type Tim, which 
is the name of my dog or like the variable for it,  
158:00 - dot speak like this, okay, semicolon. And let's 
see what happens. We get I am Tim. And, excuse me,  
158:09 - I am four years old. So the way that this worked, 
right, is we created a instance of the dog class,  
158:16 - and the instance was named Tim, and it referenced 
a dog object. Okay. So now when we created that  
158:22 - instance, we said, okay, so this instance, this 
specific one is going to have an age of four,  
158:26 - and a name of Tim. All right. So it stored that 
information up here in our private string and  
158:31 - our private int. And then later on, when we 
decided we wanted to call this what said,  
158:36 - Okay, well give me the instance you're calling 
it on. So in this case, we're calling it on Tim,  
158:39 - we're gonna say okay, so Tim, what's Tim's name? 
Let's name is well, it's Tim. Okay, so we'll say,  
158:44 - Tim, what's its age, its age. That's four. So 
we'll print for the screen. Now, we can obviously  
158:49 - create multiple dog objects. So let's copy this 
and let's create a few more. We'll create three  
158:54 - dog objects. I'm gonna say this is Bill, and he 
is seven. And let's say this is Bob, and he is  
159:02 - 11. Okay, let's copy this and keep naming the 
same thing. Let's go Bob. And let's go, Bill,  
159:11 - and then we can simply call the speak methods on 
them. Okay, so we'll say bill, and we'll say, Bob.  
159:16 - Alright. And just to prove something, I'm gonna 
say Tim dot speak again, and we'll talk about  
159:21 - why I do that in just a second. Okay, so let's run 
this. Let's see, I am Tim and I'm four years old.  
159:26 - I'm Bill I'm seven. Then go on and you can read 
through them. Okay. Now notice, when we call Tim  
159:31 - again, it still retains its age and its name. 
When we do this, we're not actually changing.  
159:37 - Like this is not one variable. We actually now 
have three different names right? We have Tim  
159:43 - we have bill we have Bob. And there's specific to 
each of these variables that are storing that dog  
159:48 - object okay. So that means that we can hold like 
unique values for each of our different instances  
159:54 - and we can have like infinite amount of instances 
of a class okay. Alright, so That is about it,  
160:01 - I think I'm going to talk about quickly. I 
already talked about private versus public.  
160:05 - Let's create some more methods in here and see 
what they can do. And I'll talk about a bit more  
160:10 - about constructors because we're only at like, 
11 minutes. So what I'm going to do now is I'm  
160:13 - going to create a another method. And I'm going to 
call this get age. Okay? So I'm gonna say public.  
160:19 - And in this case, we'll say int, get H. All right. 
And all we're going to do in here is simply return  
160:26 - the age to, let's see a return statement to 
wherever we're calling from. So in this case,  
160:32 - all we'll say it will return this dot h. Now, 
the reason I need to do this is because say,  
160:38 - I want to get the age of one of my dogs, right? 
Like, say, I created it, I changed it around,  
160:41 - I don't know what it is I want the age. Well, we 
can't simply do something like in other languages,  
160:46 - we'd be able to do like Tim dot age, right? Now 
you see, when we do this, we get these little red  
160:51 - lines. And it says the field dog dot age is not 
visible, and not as because again, it's private.  
160:57 - So it's not letting us see it from over here 
in this main function only within this sorry,  
161:02 - method only within this class, can we actually 
reference this variable, right. So to get the age,  
161:07 - what we can do is we can call Tim dot get age like 
that, okay, and we can print that to the screen,  
161:14 - we say like, and x equals, I'm gonna say system, 
dot out, print, ln, and x is already there. Great.  
161:22 - So now if we run this, we can see that we get 
four down here, excuse me, at the at the bottom  
161:29 - of the screen. Now we can actually do the same 
thing with like setting the age. So we wanted to  
161:34 - change the age at some point, maybe Tim got a year 
older, well, what we would do is we have to create  
161:38 - another method in here, this case, we're going 
to make it public. Again, we're gonna say public,  
161:42 - and we don't need to enter this time, because 
we're just going to change something, we're not  
161:45 - going to return to say public void. And we'll say, 
set age, okay. And then we're going to take an age  
161:51 - because we need to know what we're going to set it 
to. And we'll just say this dot age equals age. So  
161:57 - just like we've done up here, is the exact same 
thing, except we're just going to do it within  
162:00 - the method set age. So now, if I want to change 
the age, so let's say instead of that, we'll say  
162:06 - set age, and we'll give it a value of 10. Then 
we print out, let's just say Tim not speak again.  
162:14 - What's gonna happen now sorry, guys, I'm a bit 
sick. If I keep coughing all over the place. What  
162:21 - I'm going to do is, oh, what's your air timeouts 
at age 10? return type of set age to int. One  
162:30 - second here, sorry, public, let's try this. Insert 
age, public void. I know I'm making a mistake over  
162:39 - here. Oh, okay. That's why I can't do I can't set 
equal to a variable. I just call like Tim dots at  
162:43 - age by about on that guys. We do speak, we can 
see now it says I am Tim and I am 10 years old,  
162:48 - and we've changed from the age of four. So that's 
how we would go about changing these attributes  
162:53 - later on within the the class. Okay. Now I want to 
do one last one, I want to create a private method  
163:00 - and show you what this is. Okay, so I'm gonna 
create a private, void. Actually, no, let's do  
163:07 - it. Okay. And we're going to call this add to it, 
it's not gonna make any sense with the dog class,  
163:12 - but just, it's just an example. Okay. And in here, 
we're going to take actually won't take anything,  
163:16 - but we're going to return we're going to 
return this dot age, plus two, okay? Now,  
163:22 - this is a private method, meaning that it 
can only be used and seen within this class.  
163:29 - So say I wanted to use this add to, maybe I 
could do this, I could do add to here, okay,  
163:36 - and just do a little semi colon. And there we go. 
I could use add to, and that works fine. There's  
163:42 - no issues with that. Okay. And that's how you use 
methods with inside of the class. So like speak,  
163:48 - I can easily every time we initiate the dog, call 
the speak method as well. And to do it within the  
163:54 - class, you don't need to do like something dot 
you just call the actual name, because it's  
163:57 - really visible within here, right? Now, what would 
happen if I go over here, and I tried to use that,  
164:03 - so add two, so we'll say Tim, dot add two like 
this. And you can see that, again, we're getting  
164:09 - a red line and says, This is not visible, you 
can't use it, because it's a private method. Okay.  
164:18 - So in today's video, we're going to be going over 
inheritance. So this has to do with classes. And  
164:23 - this is going to be how we can inherit methods 
and attributes of previously made classes into a  
164:29 - new class, and then override methods and all kinds 
of fun stuff. This is really important. This will  
164:33 - save you a ton of time. And yeah, so let's get 
started. So you can see here I have this sorry,  
164:40 - this dog class that we created in the last video. 
And pretty much the goal what I want to do,  
164:45 - at least in this video, the problem is, I want to 
create a cat class that is identical to this dog  
164:51 - class, except in the speak method here. Instead of 
saying I am whatever I just wanted to say meow. My  
164:58 - name is what I write right Just want to change 
one of these methods to do something different.  
165:02 - But other than that, I want all of this to be 
the same. So, intuitively, what we think we do  
165:07 - is, well, we just take all this, copy it, put it 
into a new file called cat, and then just change  
165:13 - this to be what we want. Well, we could do that, 
and that'd be fine. But when we have classes that  
165:18 - are like 1000s, and 1000s, of lines long, ideally, 
we don't want to be repeating code and continually  
165:23 - typing like the same thing a bunch of times, 
right, it also just makes it more difficult to  
165:27 - read. So what we're gonna do is we're going 
to use something called inheritance. So I'm  
165:30 - going to create a new class, I'm gonna go new 
class. And in this case, I'm going to call mine  
165:34 - cat, alright. And they'll just click Finish like 
that. And then here we have public class cat. Now,  
165:41 - whenever we do this inheritance, what we can 
actually do to inherit all of the properties,  
165:46 - all of the methods, everything from this dog 
class is up here, when we define the class,  
165:51 - we can type extends, if we spell it correctly, 
extends, and then the class doc like this, okay?  
165:58 - Now what this is going to do is it is going to 
grab everything from dog class and apply it to cat  
166:04 - class. So this is known as our superclass because 
it's kind of above the cat class. And then cat is  
166:10 - known as our subclass. So we have, you can also 
call it a child class, or drive class. And this  
166:16 - could be also called a parent class, all right. 
And that's because it's kind of underneath it's  
166:20 - getting everything from there, but then it's going 
to be changing a few things, and maybe adding a  
166:23 - few methods to it. So typically, you start off 
like the most abstract with a parent class,  
166:28 - and then your child classes or your drug classes 
or your sub classes, because they're all the exact  
166:32 - same thing, just everyone likes to use different 
words for them, are going to have some slight  
166:36 - modifications to them, and kind of work based 
off of that. superclass, right? So or the parent  
166:41 - class. Okay. So what we need to do when we first 
do this is you can see here, it already is telling  
166:46 - us, we need to use the constructor for dogs. So 
we're inheriting from dog. But we need to use  
166:50 - the same constructor, otherwise, all this stuff. 
And all these attributes will they're not going  
166:55 - to work unless we set up our class when we first 
create it the same way as we did dog. So what I'm  
167:00 - gonna do is I'm actually just going to click on 
this, and you can see it automatically generates  
167:03 - this constructor for us. Now, I could have typed 
it out. But this is a Yeah, this is what it's  
167:08 - going to do. So since in our dog class, we get 
name and we get age, we need to make sure that  
167:14 - we have a constructor inside of our cat class that 
gets name and gets an age. And we have to actually  
167:20 - explicitly call our superclass constructor, which 
is going to be the dog constructor, we're using  
167:26 - this formation or this syntax super. And then we 
give it the name and we give it the age. Now, this  
167:32 - doesn't stop us from being able to type in other 
properties or other attributes. So for example,  
167:37 - I could do something like int, and I don't know 
food or something, it's like how much food they  
167:41 - should get, this works perfectly fine. And we can 
go ahead and we can create another attribute here.  
167:46 - So we say private, or no, I'll just say food. 
Okay, and this should say int food. And then down  
167:55 - here, we can go ahead, and we can just type this 
dot food equals food. Okay, right. And that works  
168:01 - perfectly fine. And now we're gonna have, since 
we're inheriting from this, we're gonna have age,  
168:05 - we're gonna have name, and inside of this cat 
class, we're gonna have food as well. And that  
168:10 - works just fine. Okay. So just to know, let's 
go over this again, because they've kind of gone  
168:17 - through pretty quickly. But all of these methods 
here, we're going to be able to use within our  
168:22 - cat class, because we'll we're inheriting we're 
grabbing all of them from the dog class. So this  
168:26 - cat class when we first extend it, and do nothing 
is identical to the dog class. And then as soon as  
168:31 - we start changing a few things in here, it's gonna 
become a little bit different, but still use all  
168:36 - this functionality. So we still have the attribute 
age attribute name, we're setting them equal,  
168:41 - because we're gonna call this constructor method, 
right from our, what do you call it super right  
168:47 - here. So we call this constructor. So we set up 
age, and we set up name. And then we have speak,  
168:51 - we have get age, we have set age. Now before 
I move any further, let me just prove this to  
168:55 - you. So if I go to main here, and I just 
create a cat object, so I'll just say cat  
168:58 - CIM equals new cat. And remember, we have to give 
it three parameters or three arguments this time,  
169:04 - because that's what we typed in. So for name, we 
can obviously do Tim, age, we'll do 18 and food,  
169:08 - let's say they get 100. I don't know grams of food 
or something, whatever you want to call it there.  
169:12 - Okay. Now I can use this speak method on Tim. So 
you see, we're getting no errors here. Even though  
169:19 - in my cat class, there's no speak method. But 
since there's one in dog, and we inherit from it,  
169:25 - we can use it. So I'll prove again to you 
run this. I am Tim and I am 18 years old,  
169:29 - and that works perfectly fine. So now remember 
I said though, I want this speak method to do  
169:34 - something else, I want to change it. So how can we 
do that within the cat class? Well, the way to do  
169:39 - this is to just rewrite the method in here because 
when we do that, we're simply going to overwrite  
169:44 - whatever's in the dog class. So the child class 
or the subclass, whatever you want to call it.  
169:49 - Whenever there's something the same in here, it 
automatically is going to override or overwrite  
169:53 - whatever is in the dog class. So I do public, void 
speak. Okay, so This is the exact same name as the  
170:01 - other one. All right, and in here, I change I do 
something, right, so I changed something. So I'm  
170:06 - just gonna say, system dot out, dot print ln. And 
in here, what did I want to say like Meow? And my  
170:15 - name is what to say plus this dot name. And you 
don't even add like a little food thing. And I  
170:23 - get fed. Let's see here, plus this dot food. 
Okay, I don't know what's good enough for me,  
170:32 - what's the issue here? Change visibility of name 
to protect it. Okay, second, I got to do something  
170:38 - here. Okay, this just needs to be sorry, public 
and public. Sorry, this is just because we're not  
170:49 - actually able to see these attributes, because 
they're defined in the dog class from within  
170:53 - our cat class. So we just need to change them to 
public so that we're actually going to be able  
170:56 - to use them within our speak method, we can also 
use something called protected, which I'm going  
171:00 - to talk about near the end of this video. Okay, so 
right now, this is public, because I don't wanna  
171:04 - get into protected. But let's see what happens. 
Now. If I run my Tim dot speak now and say meow,  
171:09 - my name is Tim and I get fed 100. Okay. And that's 
because even though in the dog class we had speak,  
171:15 - since we wrote it again, in our cat class, and 
cat class is the one that we're using, we're  
171:20 - simply going to take this one, and we're going to 
override the the one in our dog class, okay? Now,  
171:25 - obviously, when we're doing inheritance, 
you've already seen we can add our own methods,  
171:29 - we can add more stuff, and we do whatever we want, 
right. So in here, I can add more methods, I can  
171:32 - say public void, I don't know, eat. And in this 
case, we'll just have like, int, I don't know x,  
171:39 - like as how much they're eating. And we can say 
this dot food, minus equals x, okay? And just  
171:46 - subtract from it however much they ate. And then 
we can use eat in the cat class. But it's not  
171:51 - going to be seen in the dog class, right? So we 
just have to understand that this does go one way,  
171:55 - all the stuff we do in the cat class is not going 
to be visible to stuff in dog cost. because well,  
171:59 - dog does not extend cat, right. So it's kind of a 
hierarchy where like dogs at the top, and then cat  
172:05 - branches off and we could have other things extend 
the dog class as well. We'd have something extend  
172:09 - the cat class. And we can just keep going and 
going and going and extending and extending and  
172:13 - extending. Also known as like inheritance, right? 
So that's kind of it for inheritance. Now, I want  
172:19 - to show something called multiple constructors, 
okay. So this is sometimes when we're setting up  
172:27 - a class, we want to be able to pass it like a 
different piece of information and set up the  
172:31 - class differently, right. So for example, my 
cat class here gives name, age and food. What  
172:37 - if however, I only wanted to give it a name and 
age, well, we can leave both options available,  
172:42 - they don't have to be mutually exclusive, right? 
I could give it either these three arguments to  
172:47 - set it up, or I could give it just two. And to 
do this, we have to create another constructor.  
172:51 - So I'm going to do the exact same thing as above, 
pretty well identical, except I'm just gonna leave  
172:58 - out one of the parameters here. Okay, so Second 
Age. And then here, we'll simply call super,  
173:03 - and name and H guy. And you'll see no red lines, 
everything looks fine. And what we're essentially  
173:11 - doing here is we're giving it another way to set 
up the cat class another way to construct all of  
173:17 - our attributes and set up the cat class. So we can 
either call the cat class using three parameters  
173:22 - or three arguments, or we can call it using two. 
And you know what, maybe we could set one up only  
173:26 - using one, we're only using zero. So let's do 
one with one just to show you how this might  
173:31 - work. Okay, so if I do string name, and then int, 
age, okay. And then here I call super. Sorry, I  
173:41 - should just get rushed. actually get rid of this, 
because we're only gonna use one right? My bad.  
173:44 - I'm going to give name. But what about age? What 
am I giving super for for our age? Well, I don't  
173:51 - know. How are we going to set it up? If they only 
give us one argument? Well, I would think that if  
173:57 - they don't give us an age, then we should just 
automatically assume that their age is zero. So  
174:01 - let's do that I'm going to put in zero, just hard 
code that in here. So that way, this means now say  
174:06 - for example, they only want to give us a name, 
then we'll just automatically give them an age  
174:10 - of zero, they want to give us a name. And in age, 
that's fine, we can do that. But maybe what we  
174:15 - should do in here, if they give us a name and age 
is we should make sure that food is set equal to I  
174:19 - don't know, maybe let's give it a default value of 
50. So if they don't define how much food the cat  
174:24 - eats, we're just going to assume that they eat 50. 
Okay. And this is kind of a way you can do like to  
174:28 - know when I was like default parameters. If they 
don't type something in just automatically set  
174:33 - a value for that. So that everything still works 
fine. I hope that makes sense. So let's show now,  
174:38 - the three different ways that we can create a cat. 
So cat, Bob equals new cats. And in this case,  
174:45 - we'll give it a name. So we'll say Bob, and we'll 
give it an age of seven. And no red lines. This  
174:51 - works fine. Again, this defines a cat right 
because that's another constructor that we had.  
174:55 - So let's do this one more time. And in this case, 
let's just only type a name. We're going to name  
174:59 - this One do, like the name Joe. Alright. And 
there we are. So now we could obviously do  
175:07 - like Bob speak. And we could do, Joe does speak. 
And these are the three ways that we have that we  
175:14 - can define a cat. Okay, so Meow, my name is Joe, I 
get fed zero, Bob, I get fed 50. Right, it can go  
175:21 - on like that. So again, when we have one, now we 
just seen a quick error that maybe we want to fix,  
175:25 - we should probably give them food as well. So we 
say this dog food equals 50. Okay, as like our  
175:31 - default value for how much they get fit. So that 
is a way that you can do multiple constructors.  
175:35 - And now I'm going to talk about protected values. 
So protected values are something that we can use,  
175:42 - similar to private and public. But they're, they 
just act a bit differently. So pretty much if you  
175:48 - use the protected keyword instead of public 
when you're defining things. So for example,  
175:52 - here in my dog class, I'm going to go up and 
change public to protected. This means that only  
175:57 - things that are within the same package, or are 
subclasses of the class can have access to this  
176:05 - pretty much like name. Okay, so that means any of 
these files, or any of these classes within this  
176:11 - package are able to see this. But if I had another 
package, which you typically do, if you have large  
176:16 - Java programs, anything in there would not be able 
to see this. Okay, so with whenever we're using,  
176:21 - what do you call it whenever we're creating 
like a main class or a parent class? pro? tid.  
176:28 - Wow. Okay. We're going to want to use a protected 
keyword, at least for what do you call it, sorry,  
176:34 - our attributes so that we can change them access 
them from within the sub class. All right. Now,  
176:40 - for these methods, it's fine. They're public 
anyways, right? So we can make these protected as  
176:44 - well, if we didn't want another package to be able 
to access them. Now, if we create private methods,  
176:50 - right, if we create a private method here, I'm 
actually going to try this. I don't remember  
176:53 - if this is going to allow us to use this 
now out here. So let's say like Tim dot,  
176:58 - let me know which one I changed. Get age. 
Okay. So Tim dot get age. So int x equals See,  
177:08 - this is gonna work. Yeah. So again, this is not 
going to allow us to use this, because well, we  
177:13 - made it private, right? If we made that protected, 
it would allow us to use it here, but not outside  
177:18 - of the package. Now, I want to try this though, 
and see if I can get this uses get age from within  
177:25 - our cat class. So if I do, for example, when I 
want to speak, I'll say this get age Ed. Yeah,  
177:33 - so this isn't working as well. Which means 
that, again, if we want to use those methods,  
177:38 - we have to make sure they're either public or 
protected, rather than private, okay? The only  
177:43 - time you really get to create private methods 
is if within the class is the only area you're  
177:48 - using the map that so for example, maybe you're 
doing a math calculation, and you only do that  
177:52 - from within the class and you don't want anyone 
outside of the class to be able to do that, then  
177:56 - you create a private method to do that, because 
you could do that from within the class, right.  
178:03 - So in today's video, we're gonna be going over 
kind of class variables and the keyword static.  
178:09 - So you may have seen that we've used static 
and a few things in like our main thing here,  
178:14 - actually, I'm going to delete all this. It says 
static right here. And no one's really explained,  
178:20 - I guess I haven't really explained what static 
means. And that's what I'm going to be doing in  
178:24 - this video. So let's get started and talk about 
class variables. So right now we have something  
178:30 - called attributes games, we have these two 
attributes, which are specific to each instance of  
178:35 - our dog. So when we created multiple dog objects, 
each dog had their own name, and their own age,  
178:41 - and other dogs were not affected when we change 
one of the dog's name or one of the dog's age  
178:46 - unless that dog was that obviously, right. 
And that's great, because we can have a ton  
178:51 - of different values that are specific to different 
objects or different instances of this class. Now,  
178:56 - sometimes, we want to have variables that will 
change or are the same for each instance. So  
179:03 - we can change them in one instance. And if we do 
change it on one instance, they will change in the  
179:07 - other. Now, those are known as class variables, 
not instance variables, because instance variables  
179:11 - are like kind of attributes, okay? The way that 
we can create these class variables is we can do  
179:15 - something like this. So yes, let's say protected 
again, say protected. And by the way, I'm just  
179:20 - in my dog class, I deleted a bunch of stuff out 
of it, just to make it a bit easier to work in.  
179:24 - And I still have the cat class, but it's just 
I'm not using it for this video. Okay. So we'll  
179:28 - say protected static int count equals zero. Now, 
I know that that is a mouthful. But what we're  
179:36 - doing here essentially is we're creating a class 
variable, which is an int, int count equals zero,  
179:42 - which is protected. Okay, I know it's a lot 
of keywords. But what is the static keyword  
179:47 - do so what this is actually going to do is it's 
going to allow us to statically change count,  
179:52 - which means it's not going to change for each 
instance, it's only going to change or sorry,  
179:57 - it'll change like that. All together, right? So 
what I was explaining before, and that's what  
180:03 - this static keyword is going to allow us to do. 
So we don't actually care about what instance this  
180:07 - variable is a part of, we just care that it's a 
part of the class. Alright. So if I want to change  
180:12 - this value x, well, I do need still need to call 
this and I can say this dot count, equals, and  
180:19 - then or actually, I'm gonna say plus equals one, 
okay? Because what I want to do with this count  
180:24 - here, consist, I feel dogs should be accessed in 
a static way. Okay, let's just do this one second.  
180:30 - Okay, what I'm doing here, sorry, one second, 
I'll explain this is I'm just gonna add one to  
180:36 - this count, because I want to keep track of how 
many dogs we have. So that if I wanted to, I don't  
180:40 - know, like, see how many dogs have been created, 
I could just simply call like dog count, and  
180:44 - then figure that out. Alright. So what I'm doing 
here, instead of calling this count, which does  
180:50 - actually work, is I'm calling dog count. Because 
since this is a static, variable, or static, yep,  
180:56 - static variable, class variable, whatever you 
want to call it, it doesn't actually care about  
180:59 - what instance I'm changing it on, because it's 
going to change for all the instances. So I can  
181:04 - actually use the name of the class to change it. 
And that's why it gave me that little yellow line.  
181:09 - I'm not sure if you guys read that. It said we 
should do this in a static way. Because Well,  
181:14 - it's a static variable. So I could, however, call 
like this count, right? And that would work fine.  
181:20 - Because this will is an instance of the dog class 
who knows where to look for the variable count,  
181:25 - but it's much better to do dog count, like plus 
equals one. Okay? Now, I'm going to prove this to  
181:32 - you that this does indeed actually work. I'm not 
just making things up. So let's create some dog  
181:36 - objects here. Say a Tim or dog. Tim equals new. 
Wow, typing is not great today, new dog, and we'll  
181:47 - say 10, and score nine for age. And we'll just 
copy this and what should we do? Let's do bill,  
181:54 - maybe, say, Bill, and that is new dog name. Bill, 
age 10. Okay, now, since this static variable here  
182:05 - is protected, I can actually access it from me. 
So what I'm going to do to change count in order  
182:10 - to print count out first of all, is I'll prove to 
you that system, system dot out, dot print, ln, I  
182:18 - keep thinking, we're in Python here. And I'll just 
simply print out dog dot count like this, okay,  
182:24 - and just see what we get as a value First of all, 
okay, so we get to, so we already know that this  
182:29 - is indeed working, because well, when we added one 
to count, if it was different for each one, then  
182:35 - it would just be one. But anyways, and if I want 
to change dog count, what I can do is I can say  
182:39 - dog dot count, let's say equals like seven. Okay? 
And that's fine. That works. If I print out, dog  
182:47 - count, we get seven. Now I'll show you two. If I 
do like Tim dog count, this will give us the same  
182:52 - answer. So you can see we get seven. Even though 
in Tim, we didn't do anything with Tim to change  
182:57 - count. Since it's a dog part of the dog class, 
it has this count variable, and it's changing,  
183:02 - obviously, within 10 as well. Okay, so that's kind 
of how the class variables work. Now time, let's  
183:08 - talk about static methods. Okay, so this was a 
static variable, or class variable, I like to call  
183:12 - a class variable just because it's what I'm used 
to, but you can call it whatever you want. Now  
183:16 - we're gonna talk about static methods. And what 
that is. So it's very similar to this, kind of the  
183:21 - way that this works, but is a little different. 
So I'm going to do here man type, public static,  
183:26 - void, display, okay. And in here, all I'm going to 
do is simply do system, dot out dot print, ln, and  
183:39 - I'll just print. I am a doc. Okay. So what this is 
doing now is I'm saying static void display. Now,  
183:48 - in here, what's going to happen essentially, is 
we don't need an instance to call this. So I can  
183:54 - actually just call this on the dog class. So I 
can say, like dog dot display, like this. And  
184:02 - since it's a static method, this works fine. And 
this one didn't say I am a dog. Now, as opposed  
184:08 - to if this was a regular method, so let's just 
make a regular method to kind of do a comparison  
184:11 - here. So public void, and we'll say, display to 
okay. And we'll literally just take this and put  
184:20 - it word for word in here, just to show you the 
difference. So now watch what happens if I tried  
184:24 - to do dog dot display too. You can see that we're 
getting a red line and saying that we need to make  
184:30 - this static because we need an instance to call 
display to meaning that we need to have first  
184:37 - create a dog object. And then we can use that 
dog object to call display to or we can do like  
184:43 - this dot display too. And that works fine because 
that's calling it on the instance right? Because  
184:47 - this represents the instance that we're using. So 
the static is going to allow us to call it just  
184:53 - simply using dog but the thing was static is it 
has no way to access are, what do you call it? Our  
185:01 - values are our attributes, right? So if I wanted 
to access like a dog's name or a dog's age, well,  
185:06 - I can't do that for a static method like, I can't 
type like this dot age, that just simply doesn't  
185:12 - work. Because if you think about it, well, 
what what, what instance are we calling it on,  
185:17 - there's no instance, we're just simply calling 
it on the dog class. So we have no idea what  
185:21 - age to look for, or what name to look for. So the 
only time we use static methods is when we don't  
185:26 - care about the instance. And we just want to do 
something and we want to store it within that  
185:29 - class. You can almost think of it as a function if 
you if you know other programming languages. But  
185:34 - that is ideally how static works. So whenever you 
want to build a call something and you don't care  
185:39 - about the like the instance, you don't care about 
the attributes, you can make it static, and that  
185:43 - way you can call it without having an instance. So 
yeah, so hopefully, that makes sense to you guys,  
185:50 - I'll quickly go over what this void does one 
more time, in case anyone forgets, remember,  
185:54 - in our functions, we can return values, when you 
put void, all this does is say we're not returning  
185:59 - anything, we're just going to do something, 
right. So we could be like manipulating an array,  
186:03 - or in this case, printing something out to the 
screen, okay, or maybe getting like input from  
186:07 - the user, but we're just not returning 
any value back to the call statement.  
186:15 - So in today's video, we're gonna be going over 
how we can compare objects, and how we can get  
186:21 - a string representation of different objects. 
And you'll see what I mean in just a minute. But  
186:25 - these are really useful. And I guarantee you guys 
will be using this a lot, especially if you have  
186:30 - objects, like maybe like point objects, or like 
some kind of mathematical objects that you'd want  
186:34 - to compare, without having to make things too 
complicated for yourself. Let's just say that,  
186:40 - right. So what I'm going to do here, and what I've 
already done, I guess, is I have the student class  
186:44 - set up. And this is just what we're going to work 
with right now. Because the other classes I had  
186:48 - in previous videos were already like finished, and 
they had other stuff in it. So we have a student.  
186:52 - And currently the only attribute the student 
has is a name, okay. Now, in my main Java here,  
186:58 - I've just created a few different students. 
And then I'm just gonna be printing something  
187:02 - out to the screen. So that's why I have that 
right now. So we can see student class, right,  
187:07 - we just create a name for a student. Now I just 
want to show you quickly how we would go about  
187:12 - like comparing objects intuitively right? So say 
I wanted to check if Joe and Bill were the same,  
187:18 - right? Like if I want to see if they were equal to 
each other? Well, we know how to do that already.  
187:22 - So what I would do is I'd say like Joe is equal 
to bill. Now, intuitively, you probably say, well  
187:28 - know, their names are not the same. So they're 
not going to be equal to each other. And well,  
187:32 - that would be correct, but not for the reason that 
you think and all demonstrate that to you. So we  
187:37 - have Joe and Bill compared to each other. So watch 
what happens if I try to make these the same name,  
187:42 - right? So you'd think well, these would be 
the same object, or they'd be the same thing,  
187:45 - right? Because they have the same name. But watch 
what happens when I run, we still get false. Now,  
187:51 - why is that? Exactly? Well, pretty much we 
use this double equal sign on two objects,  
187:56 - right? So like Joe, and Bill, the computer 
doesn't know how to compare them. So by default,  
188:03 - what it does is it compares the actual object. And 
you see here how we're creating a new student. So  
188:09 - a new object. And here we're creating another new 
student, another new object, these are actually  
188:14 - two different objects, like in memory, okay, so 
in your computer's Ram. These are two different  
188:20 - entities. And they're completely unique. Although, 
yes, they have the same name. Since we can change  
188:25 - names, and we can do things. These need to be 
separate objects. So when we compare here, it's  
188:32 - actually saying, well, we're going to look and see 
if these are the exact same object, and well, they  
188:36 - are not. Now that's useful in some cases, because 
sometimes you want to see if it's like the exact  
188:42 - same object. But in other cases, we want to see if 
these objects have like the similar values, right?  
188:48 - So in this case, we probably want to compare the 
two names of the students to see if they were the  
188:54 - same. And in that case, we would say, Well, yes, 
these are the same student, we're going to say,  
189:00 - Yes, they are, they are the same, right? When we 
do that, like double equal sign. So what I'm gonna  
189:04 - do now is I'll delete this. Let me show you how we 
can go about doing that. So inside of our student  
189:09 - class, I'm going to add a method, okay. We'll call 
this public, Boolean, not Boolean Boolean. And  
189:16 - we're gonna say equals, and then here, we're gonna 
take a student object known as other, okay? And  
189:23 - then we'll go like that. And there we are. So what 
I'm gonna do in here is when we want to compare  
189:29 - our students, okay, we're going to pass another 
student, and we're going to compare their names,  
189:35 - right? So we're going to call this dot equals on 
one of our students that already exists. We're  
189:39 - going to give it another student, and then we're 
going to see if they're the same. So how do we  
189:43 - say we're going to check the same? Well, we're 
going to look at their names, okay. So what I'm  
189:48 - going to do is I'm going to say if, and then we'll 
say, this dot name, and I guess I need a brackets  
189:55 - here as well. always forget about those. If this 
dot name equals equals Okay, and then we'll say,  
190:01 - other dot name, then what we'll do is we'll simply 
return true. Okay? Now otherwise, so if these  
190:08 - names are not the same, what we will do is we 
will return false like that. Okay. And that's all  
190:15 - we need to do for our dot equals. So now, what's 
gonna happen right is we'll pass on one student,  
190:21 - we'll call this we'll check name, and then we'll 
check the other student's name, see if it's true,  
190:25 - if it is, or if the same will return true, 
otherwise, it will return false. So now we can  
190:29 - try this out. So these two are the same names. 
So let's say is Joe dot equals, and then here,  
190:36 - I guess we will put a bill. So let's run this. 
And you can see we get a value of true. And then  
190:41 - if I change bill, back to say, Bill, then we 
can run this, and we can see we get false. So  
190:49 - now we officially have something checking for 
equality between the names. Now we could create  
190:54 - more kind of ones like this, like equals grade, 
like whatever if you want to do that. But this is  
190:59 - how we can check for equality between objects. 
And this method is like really easy to add in.  
191:03 - Obviously, if you had a student with a bunch more 
values, maybe you had like grade, maybe you had  
191:08 - other stuff like that, or like a last name, you 
could check to make sure those are all the same.  
191:12 - Or you can just kind of customly do it the way 
that you want to say, two different objects are  
191:17 - the same, right? Okay, so the next thing I want to 
be able to do is compare things using like greater  
191:24 - than sign or less than sign, right? So I want to 
see if like, Joe is greater than bill or bill is  
191:28 - greater than Tim. And we should intuitively like 
do that based on alphabetical order, right? So I  
191:33 - can't really show you like a way to do it here cuz 
I don't think it's gonna work for my show. Greater  
191:38 - than bill. Yeah, see, that just is undefined, 
there's no way to do that. So we're going to do  
191:44 - is we're going to use a method called compare to, 
okay, what we have to do to compare to, is we have  
191:50 - to, what do you call it, sir, we have to implement 
something into our class. So when I say implements  
191:57 - at the top of our class, I'm gonna spell it 
correctly. And we're gonna type comparable. And  
192:03 - then in here, we're going to do student. Now what 
we're actually doing here, when we bring this in,  
192:09 - is we're actually implementing something called 
an interface. Now, an interface I'm going to talk  
192:14 - about in I think, like two videos from now. But 
pretty much it's just like a set of methods that  
192:19 - we have to use for the class to work. So when 
we implement this comparable thing, that means  
192:25 - we're allowed to bring in a method that is going 
to allow us to compare two objects. Okay? So what  
192:31 - we'll do now, is we will say, public and actually, 
what is the thing for this the return type public  
192:41 - ins and compare compared to, and then in brackets 
here, again, we're going to take students, and  
192:48 - this will be other, we'll put our brackets here 
like this. Okay. So now again, we're gonna have to  
192:55 - return some kind of integer. And I'll show you how 
that works. I just got to get it up on my other  
192:59 - screen, so don't mess this up. Okay. What I'm 
gonna do now is I'm going to return this dot name,  
193:05 - dot compare to, and in this case, we're going to 
compare it to another string. So the other string  
193:12 - will be other dot name, okay. So essentially, 
what this is going to do is it is gonna compare  
193:19 - this name to this other name, and it's going to 
give us an integer value saying kind of how far  
193:24 - away they are, right? So it's, it's kind of hard 
to like explain. So I'm just actually going to do  
193:29 - it from over here. And you'll see what I mean. 
So if I go Joe, dot compare to, and then against  
193:37 - to bill. Let's see what we get. We get a value of 
eight. Now what this means is Joe is greater than  
193:46 - bill by a distance of eight, meaning that 
when we compare these first two letters,  
193:51 - they are eight away, I believe, okay. So if we 
want to check if Joe was greater than bill, what  
193:58 - we do is we check if this integer value returned 
was greater than zero. So here greater than zero,  
194:03 - that's going to tell us true if Joe is greater 
than bill and false if he's less. So we run this  
194:09 - and we get true. Now, let's see if we compare Joe 
to Tim. Okay. So t obviously is ahead of j in the  
194:17 - alphabet, so we get a value of false, okay, and 
if we get rid of this greater than zero, then we  
194:22 - can see exactly what we're actually getting as a 
value. So negative 10, right? Because that's how  
194:27 - far away j is from T one, we're comparing them and 
that's what the compared to does for us. Okay. So,  
194:33 - if we wanted to check if Joe was less than 10, 
then we check if this value was less than zero,  
194:38 - in this case, we get true. So that's a really easy 
way that we can compare different objects using  
194:44 - that compare to method Okay, so like this a public 
int compared to and you just have to remember to  
194:48 - implement comparable students. And then you can 
use exactly this return statement here. Now,  
194:55 - the last thing I want to show is a string 
representation of an object. So once you First,  
195:00 - what happens when I just want to print out 
my object to the screen. So I want to print  
195:04 - him. And maybe ideally, I'd like to see like 
Tim's name, right come up to the screen. Well,  
195:10 - look what we get here, we get tutorial, one dot 
student app, and then all these different letters.  
195:14 - What this is printing is actually the memory 
location of our object. So all of our objects  
195:21 - are actually stored in memory, in RAM in like 
really fancy ways that I can't really explain to  
195:26 - you guys. But anyways, this is like the address 
for it's like, when the computer looks it up,  
195:29 - this is what it's actually using to find Tim and 
find all its values. And obviously, it's telling  
195:35 - us where it is in the tutorial one, like folder, 
file, whatever, okay? So this is no use to us,  
195:41 - we this does not help us as programmers at all 
we want to see like something that's a string,  
195:46 - and gives us some valuable information. So 
what I need to do is I need to implement a  
195:51 - nother method here, that's going to change this 
to string. So we've used this.to string before,  
195:57 - but this is exactly what I'm going to use, we're 
gonna say public string. And we'll say, to string  
196:05 - like this, okay. And what we're gonna do in here 
is we're just gonna return a string representation  
196:11 - of our object. So what we can do essentially, is 
I can just return this dot name, and this can be  
196:18 - what we're going to use to represent our object. 
Now, typically, you might see people do something  
196:23 - like this, okay, and just follow me for one 
second. They do student and they have a bracket,  
196:28 - and then we're gonna add this store name. And then 
they add that with another bracket. So this way,  
196:34 - you'll see when I printed out to the screen, 
what it looks like, okay, we get student, and  
196:38 - then Tim. And this is just simply telling us that 
the object we're printing is a type of student,  
196:45 - and the name value is Tim. Okay. And we could 
even get more fancy. And we could add, like,  
196:50 - double brackets around this name, if we want 
to show that this dot name was a string type,  
196:55 - okay? Now for our purpose, I'm just going to 
get rid of this student and this bracket here.  
197:00 - And you can see again, when we print this, it 
goes, Tim. Now notice, when I'm printing this,  
197:06 - I'm not actually calling this two string method, 
like I'm not, not doing.to string. That's because  
197:12 - Java actually knows that when we have this two 
string method in here, this is going to represent  
197:17 - a string, right? So when we try to print it, it's 
automatically going to call that.to string method.  
197:22 - Okay. So now, what we can do is we also just 
call like two strings, so I can, if I wanted to,  
197:30 - I could just call.to string like this, and I 
could convert it to a string. And this will work  
197:34 - the exact same way as before, you can see we get 
bill, okay. Again, in here, you can change this up  
197:40 - however you'd like. In some cases, like say your 
student had some grades, maybe you want to write  
197:44 - their name. And then after you have like an array 
of all their grades or something like that, okay?  
197:51 - Now, inner classes are pretty, pretty easy, 
actually, all they are, is really just a  
197:55 - class inside of another class or inside of a 
method. And I'll show you some examples as we  
198:00 - go along. But since we already know all about 
classes and methods and static and whatnot,  
198:04 - I'm not gonna explain too much of it, I'm just 
gonna kind of show you how we can create instances  
198:09 - of inner classes in different ways. So I'm gonna 
start by doing these incidents outer class here  
198:15 - that I've already created. can see on the side 
here, I'm just gonna create another class called  
198:19 - intercourse right now, in a class is just gonna 
simply have one method in it. And I'm just gonna  
198:26 - make this a public void display. And in here, all 
I'm going to do is simply just display something  
198:34 - to the screen. So we know that we're actually in 
the rights class here. Okay. Let's say this is an  
198:41 - inner class, okay? And what's our error here, 
class at token interesting. must have made a  
198:51 - mistake somewhere here, one second guys. Oh, 
sorry, I put these two brackets here. I don't  
199:01 - know why I added those anyways. Okay, so this 
is an inner class. Now, outside of this class,  
199:06 - I'm going to create another method that's going to 
be a part of the outer class. Okay, so this class  
199:11 - is actually contained within the outer class, 
meaning that currently, since it's private, we  
199:16 - can only actually access it from within our class. 
So if we want to create an instance of this, that  
199:21 - means we must need a method in our class to do 
that. So in this case, I'm gonna say public void,  
199:25 - inner, and in here, we're going to take nothing, 
and all we're going to do is we're gonna create an  
199:30 - instance of our inner class and just display Okay, 
so we're just gonna say, inner class I N equals  
199:37 - new inner class like that. Okay? And then all 
we're gonna do is just call i n dot display, and  
199:44 - make sure that this is working. Okay, so now our 
class is finished, we have an inner class and we  
199:51 - have these void inner and all that does is create 
an instance of our inner class and printed to the  
199:56 - screen. Again, note that this is private meaning 
we can only access it from within In our class,  
200:01 - okay, so now if I go to my main dot java, I can 
run a command so or whatever create an object so  
200:08 - we can see this. So first of all, what I have to 
do is create an outer class object, so that we can  
200:13 - call that inner class. So outer class out equals 
new, and then outer class. Now it is worth noting  
200:22 - that I don't have any constructors here, meaning 
that I don't need to give any information to my  
200:28 - outer class or my inner class when I first call 
it and that's why I can just leave these blank  
200:31 - brackets. Okay. So now if I want to see my inner 
class, what I have to do is I have to do outdoor,  
200:36 - enter. Ok. So we'll call that method to create 
the inner class, and then run that. So let's  
200:42 - run quickly here. And we can see we get this is 
an inner class. Awesome. So that's working fine.  
200:48 - Now I'm just going to make this public. Now I'm 
going to show you how we can do this from outside  
200:53 - of the class. So right now what we need to do is 
we need to create an instance of outer class. And  
200:57 - then we need to call the method inner, to be able 
to create the inner class. And that's because this  
201:02 - was private. But now that it's public, we should 
be able to create an instance of it outside of the  
201:06 - class. So the way that we do that is we still 
need an instance of outer class, because this  
201:13 - class is defined within outer class. So we need to 
first create this so that this is kind of created,  
201:18 - right? As we did that, we have outer class. 
Now what I can do is I can say, outer class,  
201:23 - dot inner class, okay. And we'll just call this 
one i n equals lowercase equals out, which is  
201:32 - going to be our instance of outer class dot. And 
then in this case, we're going to inner class  
201:40 - believe this is correct. But I guess we'll see 
Oh, I probably need an equal sign. And we'll type  
201:46 - new new outer dot inner class. And let's see what 
our little red line is create class inner class in  
201:52 - package out. Interesting one second, guys. Okay, 
so that's what the issue, I knew it was something  
202:14 - like this, what we need to do is we need to do dot 
new, and then inner class because we're creating a  
202:19 - new instance inside of this right of outer class 
of inner class. Okay. So now what we've done is  
202:25 - we've created this i n, which is an object, which 
is a new inner class. So now we can simply use i  
202:30 - n, which is an instance of inner class, right to 
display. So now we can do a i n dot display. Okay,  
202:38 - so if we run this, see, this is an inner class, 
and that is working fine. So those are two ways  
202:43 - you can get access the in a class. Now, right? 
Now, you might be like, hey, well, why the heck  
202:47 - would I do this, because now it's just like a ton 
more lines? Well, there's many times where you  
202:51 - don't really care about like this instance, and 
you just want an instance of the object inside of  
202:55 - it. So in that case, this would make more sense to 
do. And obviously, you will most likely have more  
203:01 - methods than just one you're gonna be using. Okay? 
Alright, so now that we have that, I guess, let's  
203:06 - show creating this kind of inner class. So I'm 
going to delete this inside of a method. So we can  
203:13 - actually create these inside of methods, which are 
really useful because sometimes within the method,  
203:17 - we want to use a class and we don't want to have 
to define like a new file for another class.  
203:21 - Okay. So we have this public void, enter. So I 
guess let's just work with this right now. You  
203:27 - don't even leave in a class right now. And let's 
show you how this works. So all I can do in here,  
203:32 - and I can say, we can do public private, in this 
case, I'm just gonna say I'm going to say class  
203:36 - to class in a class. And then here, yes, that 
works fine. We're just going to redefine display.  
203:44 - So we'll say, public void display. And now that I 
think of it, I probably could have just copied all  
203:52 - my other code, but whatever, get some practice 
typing. Print ln, and then in here again, this  
204:00 - should probably be a T, we will just type inner 
class, okay. So this is going to work perfectly  
204:07 - fine. Whenever we call this void inner, then we 
have this class inner class, we're going to create  
204:12 - an instance of it, and we're going to display it. 
So if I run this, I guess, wow, I really should  
204:18 - just kept all that code. That's fine. Why is this 
not giving me an autocrat outer class, out equals  
204:26 - new and outer class and brackets. And then in this 
case, we'll simply just call out dot enter. Okay,  
204:38 - so now we can see what should happen is again, 
we should print in our class. So there we go,  
204:44 - and we get in our class. Now pretty much you can 
do this like wherever you want. The reason I'm not  
204:49 - saying this is public or private is just because 
like it's already within this void. So to use it,  
204:54 - we're gonna have to call this void. So there's 
no really there's not really any point in putting  
204:57 - like private or public But again, like if you 
wanted to can type public class inner class,  
205:03 - or Oh, actually saying you can't do that. So I 
guess I was right the first time. So since it's  
205:08 - inside of this void, you're only gonna be able 
to use what we call this. So there's no point  
205:11 - in really giving it like a public or private 
method, or class name, sorry, because in here,  
205:16 - we can still do public and private methods, 
because well, outside of the class, we might  
205:20 - be using those methods, right. So you can see 
obviously, since I'm creating this instance,  
205:24 - inside of the, the voids inside of inner, 
and if I tried to do that outside of it,  
205:29 - it wouldn't work. Because this class is only 
defined when we call the inner method, okay? Now,  
205:38 - interfaces are either unique to Java, actually, 
because I haven't heard of them in any other  
205:43 - languages, but they're somewhat similar to 
classes, they have to do with like inheritance.  
205:48 - And anyways, you guys will see as we go through 
the video, but they're pretty useful. And yeah,  
205:53 - they're an important part of Java, so we need to 
learn them. So what we're gonna do first of all,  
205:57 - is we're gonna create a new interface. 
Now, just like we create a new class,  
206:00 - we're just gonna right click on tutorial one, 
our package, go to new, and instead of class,  
206:04 - obviously, we're gonna click interface. Now, 
I'm just gonna name this one vehicle for the  
206:09 - example that I'm going to be doing. So we'll click 
vehicle. And that's all you need to do. There's  
206:14 - no like, you don't have to package generate 
comments, that's fine to do vehicle. All right,  
206:18 - now we have an interface called vehicle. So 
what is an interface? Well, pretty much it is  
206:24 - something that is completely abstract. Now, this 
is kind of a new concept, but it means that we're  
206:30 - not actually going to like you can't create an 
instance of an interface, all it's meant to do  
206:36 - is to be inherited from. So if we have a class 
like car, for example, that I've created here,  
206:41 - car could implement the interface and use it. 
But we're never going to create an instance of an  
206:47 - interface it just here, so that we can implement 
it into different classes. hope that makes sense.  
206:52 - So inside of our interfaces, and you'll see 
in a second, we can only have public methods,  
206:59 - and we actually don't define anything inside the 
methods, or the the attributes. So when I create  
207:05 - a method in interface, and I'll just make one 
now I guess, I'm going to do, let's see here,  
207:10 - void, speed up. And we'll take as a parameter 
into a, that's all I do, when I create a method,  
207:18 - I don't put those, the brackets, I don't do 
anything inside the method, I just create  
207:22 - this. Now, you could see that this is completely 
abstract, because it doesn't actually do anything,  
207:27 - it just defines the fact that this method exists. 
So similar to when you create a variable and you  
207:32 - don't give it a value, that's kind of what we're 
doing here. Because we're gonna use this in our  
207:37 - car class. And you'll kind of have to go through 
all that before you really get to understand. But  
207:42 - when you create a method, just know that you don't 
give it any content, all you do is just say, like,  
207:47 - this method will exist in any of the classes that 
implement this. Okay, so I'm going to create a few  
207:52 - methods here and already call it like a attribute. 
And then we'll just move into actually using the  
207:58 - interface because the easiest way to understand 
it, so I'm going to say, we have speed up, we're  
208:02 - gonna slow down. And we'll have to go change gear 
as well. Just going a classic example that we're  
208:11 - gonna implement a vehicle from a car and you guys 
will see what I mean. Okay, change gear. Okay,  
208:17 - and then I'm gonna add a attribute. Now, any 
attributes that add in here, like variables,  
208:22 - whatever you guys want to call them, they have 
to be final. Now, I'm not sure if you remember  
208:26 - in the last video, but final means that it's 
a constant and it cannot change. Okay, like,  
208:31 - we can't change this value. So I'm going 
to say final int, a equals and then let's  
208:37 - just say five. Okay, actually, or let's just go 
gears, okay, like Final interviews equals five,  
208:43 - saying that each thing we're using is going to 
have five gears. Now watch, if I try to just do  
208:47 - interviews equals five, that still works, but it's 
not going to work in the way that we want. Okay,  
208:53 - so just make sure whatever you're doing 
this, you make them final, if you want  
208:57 - to have like variables or whatever that you 
want to use in all of the different classes,  
209:02 - they must be final. Okay. So right now, we've 
defined three methods, and we have one attribute,  
209:06 - which is just called gears. Okay, so how do we 
use this interface now? And how does that how does  
209:11 - that work? Well, the way we use it is we've typed 
implements and you might have seen this before,  
209:17 - and then the name of the interface in this case, 
vehicle, okay, you can see already that we're  
209:23 - getting a red line, we're getting an error. 
So there's nothing wrong here because we can  
209:26 - implement it but car saying the type car must 
implement the inherited abstract method. Okay,  
209:31 - so that means that since we've defined these three 
methods here inside of our interface of vehicle,  
209:37 - we have to define them inside our car class. So 
whatever methods we put here, if we implement  
209:44 - one of the interfaces, we have to define them, 
because right now they're completely abstract.  
209:49 - And if we call them well, we have no idea what 
to do because there's no content for them,  
209:53 - right? So we're gonna have to create a void 
which is change gears. I'm gonna say public  
209:57 - void Change was calling viewers or gear. 
Let's see change here. Okay, so change gear,  
210:06 - and then it's gonna have to take one parameter. In 
this case, we're gonna say int gear, so like, what  
210:12 - gear do we want to change? Okay? And then we're 
just gonna go up here, and we're just gonna say,  
210:16 - private int gear, because we're going to define 
that when we when we change gears, right? Okay,  
210:24 - so now we're gonna go to and make another the 
other one that we need. So let's just check here,  
210:29 - we need speed up. So we'll say public void speed 
up. And in here we'll have speed as like what  
210:35 - speed are actually not speed, we're going to go 
into change. So how much we're going to speed up  
210:40 - by, and then we'll do one more. So public void, 
slow, down like this. And again, we need this  
210:48 - change. And there we go. So this now we're getting 
no errors, because we've implemented all of the  
210:55 - methods that were abstract over here. Okay, now, 
gears, we don't need to do anything with it. It's  
211:00 - just like, if we wanted to use it, we could, 
okay. So what I'm going to do now is inside,  
211:04 - I'm actually gonna create another private int, I'm 
gonna call this speed. Okay. What I'm going to do  
211:10 - now is I'm going to just just fill up these, 
what do you call these methods, so I'm gonna  
211:15 - say when we change gear, we're just gonna say, 
this dot gear equals whatever gear we're changing  
211:21 - it to. And then for speed, I'm gonna say, this 
step speed, actually plus equals change. Okay,  
211:30 - and then down here, we'll say this speed minus 
equals change, game. Change. Perfect. Okay. So  
211:40 - now what we're gonna do is we're actually just 
gonna add one more method just to show how this  
211:44 - works. So we've implemented the things we need to 
implement from our interface. And now what we're  
211:51 - going to do is we're going to just create another 
method. So in this case, I'm going to make this  
211:53 - like a display method so that we can display our 
car pretty easily. Okay, so public void, display.  
212:00 - And inside of here, I'm just going to print out a 
few things to the screen. So System dot out dot,  
212:05 - print, ln, and in this case, we'll just say, I am 
a car, comma, and then we'll just add, actually,  
212:14 - let's say going and how fast we going we're going 
this start speed. If we want to get out like a  
212:22 - little kilometers per hour, so let's do that. And 
I am in gear, and we'll just add whatever the gear  
212:31 - is. So this stuff stuck here. Perfect. Okay, 
so let's now actually use this. So we have our  
212:40 - interface vehicle, okay, and we have our car. So 
what we're gonna do now is we're gonna create car  
212:45 - objects, we'll say car. I don't know, let's say, 
Ford. Okay, equals new car. Okay, perfect. And now  
212:56 - what we're gonna do is we're gonna say car dot. 
Ford, I guess is what we need to do Jose for speed  
213:03 - up, and let's maybe change it to 10, we'll add 10 
to it, I just realized that we're actually gonna  
213:08 - have to make this speed default at like zero, and 
gears, let's just do that default zero as well.  
213:13 - Otherwise, you're gonna run into an air arshi 
gear, I guess you can't really be in gear zero.  
213:18 - Can you just change that to one? Okay, perfect. 
Okay, so for speed up, and I will say Ford change  
213:24 - gear, and let's just change the gear to Okay. And 
then if we want to display our Ford, we can do  
213:29 - Ford dot display. Perfect. Okay, so let's run this 
now and see if everything's working. So we say I  
213:36 - am a cargo in 10 kilometers an hour, and I am in 
gear to perfect. So that's working fine. And we've  
213:42 - implemented all that stuff from our interface 
vehicle interface. So now I'm going to show you  
213:47 - some cool things, we can add into our interfaces 
that make them a lot more useful. So say, for  
213:52 - example, you've used a bunch of interfaces with 
a bunch of classes you've inherited from them.  
213:57 - And now what you want to do is you want to add a 
method to all of those classes that are inherited  
214:02 - from it, well, what you could do is you could do 
the same thing here, and you could type something  
214:05 - like this. And then you could go into every single 
one of your classes, and you could change them to  
214:09 - be whatever you want. But if you want the method 
to be the same for all of them, we can actually  
214:14 - use something this is why interfaces are kind of 
useful called default. Okay? So we type default,  
214:20 - and then maybe in this case, void, and let's just 
say like outlook, we're gonna print something out  
214:24 - just to make it easy. What we'll do here is we'll 
just, we can just create a method and we can use  
214:29 - this from any of the classes that inherit our, 
our interface, okay? So I'll do here they'll  
214:36 - say system, dot out dot print, ln, in this case, 
I'll just say default method, okay. I know very  
214:48 - creative. How did I just spell system? And I okay, 
anyways, alright, I'm tired guys. I apologize  
214:56 - System dot out dot print ln default method. 
Okay. So now that we have that, from within  
215:02 - this car class, we can use that default method. 
So say when we display, we want to print that. And  
215:07 - then we want to do the default, what we could do, 
I believe, is we can say, just out maybe. And yes,  
215:15 - that actually works fine. So now that we have out 
because that is a method within our vehicle class,  
215:21 - and we implemented, let's see what happens when we 
run our program, we get a cargo tank one mission,  
215:26 - our gear two, and then says default method. It's 
using that default method that we created inside  
215:31 - of our interface. Now, I believe we can actually 
use static methods as well. So this would be known  
215:37 - as something that's not a static method, because 
we have to call it from within our, our class, but  
215:44 - we can actually create static methods within our 
interface that we can then just call statically.  
215:50 - Like, we don't have to have an instance to 
call them. So if you don't know what I mean,  
215:53 - just follow along for a second, as I'm going to 
create a static, I don't know, let's just do like,  
215:58 - int, let's return something, let's change it up. 
Let's just call this math. I feel like math is  
216:04 - a keyword. And that's fine, we'll just do math. 
Okay, we're gonna take int B, and all we're gonna  
216:11 - do is we're just gonna return b plus not okay. I 
know very basic, but that's all we're gonna do,  
216:17 - just to prove a point. So now, saying, I'm in 
my main job, all right, and we get rid of this,  
216:22 - we don't create a car object. And I want to use 
this static method inside of my interface. Well,  
216:28 - what I can do is I can do vehicle, dot, and then 
you can see it already has this function coming  
216:34 - up here, this method dot math, give it a value, 
like five, I'm just actually set this equal to a  
216:40 - variable. So we'll say x equals that. And then 
we can System dot out dot and see what we're  
216:46 - actually getting as a value. In this case, 
we should be getting 14, right? Yeah, so 14,  
216:52 - there we go. So let's see, you can create a static 
method inside of your interface. So in some cases,  
216:58 - you can kind of think of these as functions. 
All right, say you had unless you don't,  
217:02 - I'll just do one as an example. Because this is 
kind of useful. If I go new interface, and we  
217:07 - call this math, okay, then inside here, you could 
do a bunch of static methods that will do like  
217:14 - math operations for you. Like maybe you have the 
quadratic formula, maybe you had, I don't know,  
217:19 - like Euclidean distance, I don't know a bunch of 
different math formulas, you put them on this math  
217:23 - interface. And then when you want to access them, 
you would come in here and you'd say, well, math,  
217:28 - dot maybe like square root like sq. RT, okay. And 
then there, you'd be able to use all of those,  
217:34 - I want to call functions, but they're really 
methods inside the, the interface really  
217:39 - easily. So that is a really good example 
of when you can kind of use interfaces.  
217:47 - Now, enums are pretty much a collection of 
constants that we can reference. And then we  
217:53 - can do things with those constants. And they 
are pretty cool and just make your code more  
217:57 - readable. And yeah, you guys will see when we 
go through the video. So the first step is to  
218:02 - create an email. Now to do that it's similar to 
creating a class or an interface or whatever,  
218:06 - go to your package, right click, we're gonna 
click New and then you know, so for e&m, I'm just  
218:12 - going to name mine. Actually, I'm just gonna name 
mine level, because you'll see why it makes sense  
218:18 - for this example. So again, the syntax here is 
is public e&m level, rather than like class or  
218:24 - interface or whatever, right? So in here is where 
we're going to define our constants. Okay? Now,  
218:29 - this is really useful, because we don't have to 
do like public static, and whatever like the name,  
218:34 - like we can literally just type whatever value 
we want our constant to be in, typically,  
218:38 - it's a string. So in my case, I'm going to 
go for level, I'm going to go in all caps,  
218:41 - you don't have to go all caps, we're gonna 
go high, medium, and low. Okay, now, these  
218:48 - are the three constants, I'm going to store in my 
level iums, we have high, medium, low. And yeah,  
218:54 - that's literally all I'm going to do right now, 
for my e&m. It just means we have three constants  
218:58 - that we can reference from level and these are 
the three. And obviously, you can do as many as  
219:02 - you want. And just keep going with commas on and 
I think you can put them on the same line as well.  
219:06 - It just makes them more readable if you do them. 
Like other lines. Okay, so every three constants,  
219:10 - now I'm going to show you how we can actually use 
this email and you'll start to understand how it  
219:14 - works. So to use this enum, we have to create a 
new instance of it. So to do this, I'm going to  
219:19 - say level, and we'll say LBL equals new. Actually, 
I think it's like this was level dot, and yes, we  
219:28 - say a high, low and medium. So my guess we'll just 
pick a low, and I'll put a semicolon. And now you  
219:34 - can see it's all showing up in different colors. 
And this is working fine. So now that we have this  
219:40 - as a constant, we can do certain things with it, 
right? So typically, you might want to check what  
219:46 - value your constant is like what value is levels. 
So we can obviously use these in an if statement,  
219:52 - like so. So I say like if elvio equals equals and 
then like it's level dot analyst, Start out low,  
220:00 - I guess. And we'll just work our way up to high. I 
mean, say l if our elsif. And we'll say LBL equals  
220:09 - equals, and then level dots and medium. Okay, 
we'll do something in there. And then finally  
220:16 - else, because if it's not lower medium, it must 
be high, then we'll just use me. So in this case,  
220:21 - we'll just say system dot out, dot print, ln. 
And we're just gonna print level for all of them,  
220:27 - because I want to show what this does. Okay? 
What the heck did I just do there? Okay, anyways,  
220:34 - now we're just printing level each time. And 
actually, let's just run this down and see what  
220:38 - happens. So you see, we get low. So when we print 
out level, it's simply just gonna print like,  
220:43 - whatever the constant is that we have. And that's 
because it has a little.to string method built in.  
220:50 - So we can convert these into a string. And I'll 
show you what I mean by that. So pretty much  
220:54 - say we wanted to get this because right now like, 
it's not a string, it's not an it's not a Boolean,  
220:58 - we don't really know what type it is, it's just 
like in level it gets an enum. So to actually  
221:03 - get this as a string value, if we wanted to do 
something with it, or store it, we can use.to  
221:07 - string. So if I say string, we'll say E. Yen, 
why not? Why not? We'll say is equal to lbl.to  
221:16 - string. And that's just going to convert this to 
a string for us. And then we can do all our string  
221:20 - operations or whatnot with that. All right, so 
to get it to a string. Now another really useful  
221:25 - thing that you notice is we actually get all the 
different values of enums and print that to the  
221:30 - screen. So where do system dot out? dot print ln. 
And I believe the way we do this is to do level  
221:38 - dot values. Yes, there we are. So we go level dot 
values. And if we hit that, or we type that in,  
221:44 - you're going to see when we run this, now, it 
gives us what is actually giving us an array with  
221:50 - the values. So when we try to print that we're 
getting like, you know, the memory address of  
221:54 - it. So once we have these values, so I'm actually 
just going to store this an array so that we can  
221:58 - then iterate through it and print them out. What 
I'm gonna do is we'll say, level array. And this  
222:03 - is the way you have to do it, let's say arr is 
equal to and then level dot values. Case, that's  
222:10 - working fine. So what we're gonna do now is we'll 
just create a quick for loop. So and I'll show you  
222:14 - how we can loop through all the different values. 
So say, for E, or home, which would be this level,  
222:21 - level E, and then we'll say, in ARR, what we'll do 
is we'll simply just print out, E, okay. So system  
222:33 - print out E, and then we can see all the different 
constants that we're going to get. So just go  
222:37 - here, and you see we get high, medium, low, and 
then just prints low. Again, just because we're  
222:41 - doing this if statement here, okay. And that's how 
you can loop through all the different values. So  
222:45 - that's really cool. But you might say, Okay, well, 
that's cool, too. But is this really that useful?  
222:50 - Like we just have these constants? Well, there's 
a few other things that we can do inside of this,  
222:54 - you know, add some methods, and some instructors 
as well, so that these constants actually point  
222:59 - to certain values, kind of similar to like a hash 
table or hash map that I showed you before. So the  
223:05 - way that we can do that is we need to create first 
of all a variable that's going to be private. So  
223:10 - in this case, I'm going to say private, and I'll 
say, actually ends level LBL nom, okay. So this  
223:19 - is going to just be a private value, that's just 
going to store the value of each of these. So like  
223:24 - low, medium, high value of all these levels. 
So just set this value, what we need to do is  
223:29 - we need to create a constructor for our IEM. And 
you'll see how this works in a second. So I'm just  
223:34 - gonna say public level in and then none. Okay? And 
in here, what are we getting here? Remove invalid  
223:45 - modifiers legal modifier for short only private 
instrument. Okay, so let's do this. Private,  
223:51 - sorry, my bad private, because we're just gonna 
call it on here, you'll see in a second private  
223:55 - level int num, and we're just gonna say this dot 
LBL, num is equal to num. Okay, there we go. So  
224:03 - now what I can actually do is you see how these 
are highlighted in red. So since this is a private  
224:07 - constructor, that means we're going to define 
this variable based on what constant we choose  
224:12 - for the enough. So I'm going to put brackets here 
and I'm going to define highest three, medium as  
224:18 - two as low as one. Now, what this is going to do 
is it's going to keep our same constants of high,  
224:24 - medium and low. But when we create a new constant, 
it's going to activate this constructor of level,  
224:30 - and it's going to set this level non equal to 
whatever value we put in the brackets here. So in  
224:35 - this case, 321, we could obviously have multiple, 
what are called parameters here, and we could have  
224:40 - multiple arguments here and we can have a ton of 
different values. And yeah, so the only issue is,  
224:45 - since this value is private, we're going to need a 
way to access it from our main here because that's  
224:51 - probably where we're gonna want to use it. So that 
means we're gonna have to create a few methods to  
224:55 - will change that level num and to get that level 
num so we've done this before, but Actually,  
225:00 - I don't think I can do a public. Eye we'll see 
if we can public gets level. And then in here,  
225:09 - we'll simply return. Guess it's gonna need to be 
an int, public int get level will simply return  
225:15 - this dot, LDL num. Okay, yeah, so that does work 
fine. I just can't do a public constructor. Okay,  
225:22 - so this is just going to give us the level num. If 
we called get level on our keynote to change this.  
225:29 - What do you call it? level num. What I'm going 
to do is I'm going to do set LBO. And so having  
225:36 - interior it's just gonna be a void. Okay, and all 
we're gonna say is this dot LBL, num is equal to  
225:43 - num, and then we're gonna put in here, int, num, 
Okay, perfect. So now what we're doing is we have  
225:49 - a way to not only get the level num, but to change 
it. So now let's try using this out in our main  
225:54 - and see how this works. So I'm just going to get 
rid of all this stuff, because we don't need this  
225:57 - right now. So right now we have our level and it's 
level dot low. So to actually get the value of  
226:04 - this level, we can use something called get value 
of or we can use that method that we had here. So  
226:10 - in this case, I'm going to say get level. So what 
I'll do, as we'll say, system, dot out, print ln,  
226:17 - and in here, we'll say elvio. dot. And then what 
was the thing we were using get level like this.  
226:24 - So now if we print this out to the screen, 
we should be getting one. And indeed We are,  
226:28 - we're getting one. So now I'll show you this 
thing. It's called get value of Okay, and is it  
226:34 - x value ever get value? I'm not sure we'll see. So 
I'm pretty sure if we do something like this level  
226:39 - dot value of Yes, that is exactly what it is. And 
then we pick a we type in whatever the enormous  
226:45 - so in this case, we could say, low, it's gonna 
give us Let's see, what's the issue here. Okay,  
226:54 - so the issue is, I just got to put this in string, 
I just forgot about that. So I do level dot get  
226:58 - value of and say I put a string in here. So like, 
say someone was typing in and into the computer,  
227:02 - and they type in a string, right, and you want 
to pass this in to get value of we see what we're  
227:06 - actually going to get is we get low, right? 
Because that is the value of this string.  
227:11 - In the enum. Although it's not a string, it 
can like determine that, okay, so that's what  
227:16 - value of is used for, I can't really give you 
any good examples of them. Cuz I don't really  
227:19 - know any good examples of using value of but 
for any of you that might see some use in it,  
227:24 - I figured I would show it to you. So I guess we 
can do an example. Now just setting the level just  
227:29 - to make sure that all that is working, say elvio 
dot set level. And in this case, let's say five.  
227:35 - And then let's just grab this again, actually. 
And we can delete this row up here. And now I'm  
227:41 - just simply going to print out, record elvio dot 
get level, and just make sure that everything is  
227:48 - changing and working fine. And there we go, 
we get a level of five. So that is how we can  
227:54 - use itams. Pretty much they're used for when you 
want to have a collection of different constants,  
227:58 - maybe you want to loop through, see what those 
constants are. And it just makes a code kind of  
228:02 - readable, right? So we have level dot low, and 
then that low can point to like five to one,  
228:07 - whatever. And that's all stored within our enum 
right here. Obviously you can have as many items  
228:11 - as you want and you'll really see the use of 
them further on in Java when you're creating  
228:15 - like larger programs. Okay, so anyways, that has 
been it for this video. If you guys enjoyed please  
228:20 - make sure you leave a like and subscribe 
and I will see you again in another video.

Cleaned transcript:

Hey guys, and welcome to a brand new tutorial series. So in this series, I'm going to be teaching you Java from the beginning. So starting at the absolute basics, setting up an environment, how to create variables, methods, like all that stuff, and then move the old way up into the advanced stuff. This is a beginner tutorial series. So I'm going to treat this as if you have never learned any programming language before. Okay, so let's go ahead and get started. The first thing we need to do is download a ID E. And this is where we're going to be writing our Java code, okay, so it's called Eclipse, that's what I'm going to use use whatever you want. But if you're beginner, I recommend you just follow along with this, because some of the things I'm going to do are specific to eclipse. So go to this link, it's in the description down below, and just click on download. And then obviously, 32 or 64 bit, I recommend 64 bit as most of you probably have a 64 bit machine. Once you download this, if we go Sorry, I've already got an open here, but if we go to our downloads, we will see that it should give us something like this, double click on it, wait for this to boot up might take a second. Okay, it's going it's going, let's see. And once we're in here, we're simply going to select Eclipse IDE. for Java developers, we don't need to be using any of this other stuff. Just this one right here. Okay, so we're going to install this, I already have it installed. So I'm not going to do that. Nobody's gonna ask you for a project directory, something like that. So if it asks you for that, just choose wherever on your computer, it doesn't really matter. Okay, so once you've had that installed, you chose your project directory. Now we're going to be in Eclipse. Now to start a new project, what we need to do so it should look something like this, by the way, you know, click on File, New, and then Java project. Now here, I'm just gonna name mine tutorial. And then let's see here, you can just leave all the rest of this stuff blank. If you want to change location, go ahead. Alright, click Finish. And there we are. So once we have this, it's going to pop up in our left bar, the package explorer, I'm just gonna shrink this a little bit. And what we're going to do is we're going to go down to source or Oh, I already have a package name tutorial, one second, I'm going to create a new one really quickly, and then walk you through this so it's fresh. tutorial one. Okay, finish. Alright, we got tutorial one, and we get source. Okay. Now, inside of the source, what we're going to do is we're going to right click on this, we're going to click New, and we're going to click on package. Now, I recommend you just leave this package name the same as your project. So I'm going to do that and click Finish. And then inside of your package name, I'm going to click New, and plus. Okay, so once I click class, it's going to pop up here, it's going to allow you to select the package and the source folder, just leave those blank. And the name you can name is whatever you want. In my case, I'm going to name it main, okay, type names discouraged. Okay, so let's name it main with a capital M. All right, just because you have a like that. And then we're going to do is make sure you check on this public static void Main, we need to check mark this because we're gonna need this function created us so that we can start Alright, inherited abstract methods, you can uncheck that. Or actually, we'll check that doesn't really matter for right now. Okay, so now we're in and we've got a little bit of code going here. And I'm going to explain what this is. And then we'll get into just coding like a really basic thing, just printing a few things to the screen before we move into the next tutorial where we talk about data types. So Java is an object oriented programming language, meaning that everything happens inside of something called classes, and everything is known as like objects. All right. Now, you're not gonna understand very much of this right now, if you're beginner, but for some of you guys that are more advanced, you should come to understand what this means. So classes are these, okay? And everything in Java is written in a class or an interface or something else. But in our purpose, just think everything is written in a class right now. Okay. Now inside of this class, we have a special method is what it's called. And these methods are what I'm highlighting right now, inside these curly brackets, public static, void, main, okay, you don't have to know what all that what those words mean, just know, this method is important. And this is where we're gonna be writing all of our Java code in for right now. So if you try to write code outside of these little curly braces, and not inside of this method, that's what we're calling it right now. Okay, your code is not going to execute properly unless you know what you're doing, which in our case, we don't yet. So all the code we're writing goes inside of this public static void Main inside of these curly braces. All right. Now the first thing I'm going to get us to do is just print something to the screen. So to print something in Java, we're going to type system.out.my computer's lagging one second dot print, ln, and this simply stands for print line. Okay, now inside of these brackets here, we can print a string or whatever we want to print. So a string in Java is anything encapsulated by two quotation marks. Whenever we're printing something, we want to do it in two quotation marks, at least for right now. And in this case, I would just say the classic hello world with an exclamation point, okay. Now, at the end of every line, we write in Java But with exception of lines that start or end with curly braces, we need to put a semicolon. And now you can see once I put the semicolon, that our system dot out dot print ln gets highlighted, we can see that it now has syntax highlighting. In syntax pretty much means any code that we write in the program. So we have to make sure that whenever we're done writing a line, we terminate that with a semicolon. Okay, so now we've officially written our first program, all it does is print HelloWorld to the screen, but how can we run this. So first, we're gonna have to save so I'm going to hit Ctrl S. And to run this, there's a little green button up here and says run main dot java. So we're going to click that. And you can see that down here, a little thing popped up called console, we printed to the screen, hello, world. Now that we've officially created our first Java application, very simple. And that is how we go about setting up a new class. And everything that we write for right now, again, remember is going to happen inside this method. That's what we're calling it, I'm gonna explain that later. public static void Main, we have to put it in here. Now if you want to print another line, you want to print something else after we can do that. I'll show you how that works. So I'm gonna say System dot out dot print, ln. And I'll say like hello world, too. And if I save this, and run again, we get hello world, and hello world too. So you can see where we are right where we left off with printing two lines, hello world and hello world to to the screen. And in this video, I'm going to be going over variables and data types, the absolute fundamentals, we have to understand before we can move on to anything more complex. So let's talk about what a variable is. Now a variable just like in mathematics is something that holds a value. Now in our case, that doesn't have to be just a number, it could be a string, it could be a Boolean, and integer, like we're going to talk about the different values. And those are what are known as data types, or objects. So let's start by just creating a variable. To create a variable, we need to first figure out what type our variable is going to be. In this case, I'm going to start with an integer. And then we're going to go through all the different types and talk about the differences. So to start, we're gonna type int, declaring that this variable that we're about to type out is going to be an integer, we're then going to give a variable name. Now the variable name should contain typically just letters and underscores. Now, I believe you can use numbers as long as it's at the end. But in our purpose, we're not going to do that when we create a variable name, you have to make sure you do not use any spaces. And you don't use any special characters as well. So I'll go through a few examples of valid variable names and invalid variable names. So a valid variable name, for example, could be Hello, that's valid, because we don't have any spaces. We don't have any special characters, and there's no numbers and Okay, now, an invalid variable name would be something like, Hello, name, okay, this whole thing as our variable name is invalid, because it contains a space. Now, if I try to put like a, what do you call it percent sign like this, or I tried to put like an Asterix, that is not a valid variable name. So don't use any special characters. You can end with an underscore, you could start with an underscore if you want to. But we're not going to be doing that. In this case. Typically, when you create a variable, if you want to make a name, be like to words, the way you do it is you type like Hello, and then you would do a capital and then the next word, or you would do an underscore representing a space. And then next word, okay, so that's not a valid variable names. Not super important right now. So I'm going to create my first variable int hello world, and that's going to be equal to by just putting an equal sign, whatever integer I want. So in this case, we're gonna say five. And then remember, in Java whenever we end the line, so this is just saying my integer Hello, world is equal to five, we need to terminate with a semicolon. So there we go. And we see we get int, our variable name is now highlighted in yellow. And there's no issues. So if I let's just see what it says this very, is never used. Okay, that's fine. So we've officially created a variable, the variable name hello world now points to the integer five. So to prove this to you, I am simply going to print out the value of hello world. Like this, okay, so I'm gonna say system dot out to comment is System dot out dot print ln. And what we're gonna do is we're gonna say, okay, so hello, underscore world. That's our variable name. And that variable holds five. So when we print this, we should be printing five. The way this works in the computer, right? Is it says, Okay, hello, world. Let's see where hello world is. It's up here. Alright, hello, world is equal to five. So we print that. Okay, so there we go. And we get five printed down here in the bottom of the screen. Now I want to show you something quickly and this is just going to go this is a really important fundamental thing a lot of people don't talk about in programming tutorials. It's kind of like order of operations or execution. So I am going to now put my variable underneath my System dot out dot Print lm. Okay, so I'm first going to print hello world. And then I'm going to set hello world equal to five. Hopefully you guys have realized what the issue might be here. If not, I'll talk about it really quickly. And the problem is that I am trying to print the value of hello world before I've declared it. Because the in programming the way things work is unless you otherwise specify, we're going to be reading from top to bottom and left to right, just the way you'd read a book, right? So we first read this line system, dot out dot print ln a Hello World, and then we create hello world. So here, we don't know what hello world is. So if we tried to do this, you can see it warns me there's an error. Yes. Okay, you know what, there's an error. Let's proceed anyways. And you can see that down here, we get a bunch of red text. And it says, What do you call it? Hello, world cannot be resolved to a variable, because we haven't yet declared that variable. So we have to make sure whenever we're referencing or using variables that we first have them declared somewhere above our, like the line that we're using them in. Okay. So there we go, we've created a variable hello world, we print that to the screen. Now, let's create a few different variables and talk about what these types are. So in case I didn't really specify int stands for integer. And that pretty much stands for any number that does not have a decimal point. So as soon as I put a decimal like this, like 5.0, this actually becomes a new data type. And that data type is called a float. Now float stands for floating decimal point, which means any number that has a floating decimal point, so I'm gonna say float. Let's see, num. Two is going to be my variable name is equal to, and in this case, I'm going to say 5.0. What's the issue here, add casts from double. Okay, one second where I said double. So sorry, I made a mistake there. We're just gonna type double here as the name Okay, not float. Don't worry about float right now. We'll talk about that later. So anyways, we have double num two equals 5.0. Now double is exactly what I was explaining before, anything that has a floating decimal point. So even though this is still the exact same values, this in terms of mathematics, because it has a floating decimal point in our computer, is referenced as a double. Okay? Now, there's some other data types as well, that we're going to talk about. So we have int, we have double, we also have something called Boolean. Now, Boolean, is true or false. And these are gonna be really important in the next few videos that we talked about. So Boolean, I'm just gonna say B as my variable name, is going to be equal to, and in this case, I'm going to say true. And again, make sure I'm putting my semicolon. Now, there's only two values that a that your boolean data type can have. That is true, or false. Now why these are important is because based on the value of a Boolean type, we're going to be doing things later in our program. Like if B was equal to true, we're going to print something, otherwise we won't print something. So that's really important. So another data type that we have is known as char, no char is any character. Okay, so this is a little bit different from string that I talked about in the last video, but I'm going to talk about string as well. So I'm gonna say char C, is equal to, and whenever we create a character, there's two ways that we can do it, we can do with a Unicode, which you probably don't know what that is. Or we could do it with single quotation marks. So by just simply hitting the single quotation marks, we can put one letter in the single quotation marks, and that is a character because that's what char stands for a character. So like something on your keyboard, in quotation marks, now character could be, for example, nine in quotation marks, so that's still a valid character. Because it's in quotation marks is different than the number like nine if you're, if I were to type that up here, okay? So any letter or character that goes in quotation marks is a char. Now we have to be careful, because chars can only be one, one character, if I tried to, like 03, you can see that we're getting red text and Java's yelling at us, and it's saying no, that's not allowed, because we can only have one thing. Alright, now I just want to show you I want to go over again really quickly what the main differences between this nine and this nine, up here we've declared, we're going to have an integer named hello world, and it's set equal to nine. Okay, that's what it is. This is a character. And since it's in quotation marks, this is not the same thing as nine. The way like the data types really do matter in this sense, okay. So I'm just gonna change this back to like h something for now. Okay. Choice equals h. So that is extremely important. Now string, this is another data type. It's a different kind of data type, which we'll talk about in a second. But to make a string, we do string I believe with a capital We'll see. And then we give a name. So for our variable, in this case, I'm just gonna say str is equal to, and then it this time for string, we use double quotation marks, okay? And I'm just gonna say Tim, in here. So chars, single quotation marks, and strings are double quotation marks, okay? And strings can contain anything in them. So I could have like 673 underscore star, that's a completely valid string, we can put any characters as long as they're with inside of these quotation marks. Okay? Same thing with the character, if you put a nine in a string, this is different than a nine like this. Okay? So these are our main data types, there are a few other ones, but I'm not going to go into them right now. Because they, they're a bit more complex than than we can handle right now. So pretty much though, you might notice that this string is highlighted as a different color than these and see it is orange doubles, orange, Booleans, orange chars orange, why is string blue? Now the reason it's blue? It's because it's a different type of data type. These four data types I talked about up top here, are known as primitive. And, wow, I really just did that I'm used to typing Python, primitive data types, okay. And what that stands for, is not changeable. Okay, and we're going to talk more about primitive data types and not primitive data types later on. But just know that these ones that I talked about here are known as primitive in Java. And this one is not primitive. Okay. So anyways, let's just see now, printing out like some of these data types, like what we get when we print them to the screen, right. So if I print, for example, C to the screen, well, you should guess what we're gonna get, we get H, because let's see, if we print, str, we get nine, and so on. Now, last thing I want to show you with variables is that we can actually make variables equal to other variables, and we can add variables, we can subtract variables. And so we're gonna be doing a lot in the next video, but I want to just quickly introduce you. So for example, I want to create a new integer, Okay, I'm gonna say, new integer, and I'm going to call it, let's just call it Tim, why not. Now I want this integer to be equal to nine. Okay, but I don't want to type nine out, what I'm going to do is I'm actually going to type Hello, underscore, underscore world like this. Now what we've essentially done is we've taken the value from hello world, and we've assigned it to Tim. So now if we were to print Tim to the screen, we get the value nine. Now if I want to print hello world to the screen, you can see that we are still getting the value of nine. So now Tim points to hello world, which points a nine, right, so Tim is equal to nine and hello world is equal to nine. And we can do that and we can add variables together, we can subtract variables, we can do all kinds of cool things. And that's really the point of variables, right. So we just have to make sure when we're doing this, for example, that we don't do something like this. String temp equals hello world, you can see here now it says cannot convert from int to string, because the datatype string is obviously not the same as nine. So we can't do that until we learn about something called typecasting, which will be in a future video. Now in this video, I'm going to be adding on to some of the stuff I did with variables in the last video. And I am going to be talking about basic operations like plus minus subtraction, division, exponential, all of that fun stuff. So without further ado, let's get started. I want I'm first going to do is just talk about another way that we can create variables in Java. So earlier, you saw me do something like this index equals six, okay, this is fine. This works, we already know this. But there's another way that we can actually create this variable. And to do that, we can actually omit this equal six. So if we do this, and we just say int x, what happens now is we've declared that x is a variable, it exists, but we've not given it a value. So we've declared it but we have not initialized it. I'll show you what I mean by this by just doing System dot out dot print ln, and we're simply going to print x and just see what we get. Oh, probably helped I spelt print correctly. Okay. Wow, I really messed something up, print ln, okay, run this. And you can see, we are already warned that there is an error. So we'll proceed but and it says the local variable x may not have been initialized. So before we can actually use the variable x, when we set up like this, we have to initialize it. Now to do that any line underneath this declaration, we can just say x is equal to and then whatever value you want it to be as long as it's an integer value. So in this case, I'm going to say x equals six. And now if we run the program, everything looks fine, and we get six. Now, obviously, we can do this with every data type. So if I do like char, and char x, right, and that's fine, I say char x equals single quotation marks, f like that. Okay, then we can print that out, and that will work fine. Now, what I want to talk about now is operations. So I am going to create a few variables, I'm going to say integer x equals five. Don't forget your semi colon, integer y equals seven and I'll say int Zed is equal to 50. Okay, I'll create one more variable. And that's where we're going to start talking. So what I want to do now is I want to sum all of these variables. So 56, seven, and five. But I don't want to write like 56 plus seven plus five, okay? Because Yeah, that's the value of these variables, this works fine. But what if I were to change this variable y? Well, that means I have to go down here and I have to change this as well to whatever I change y to what if I want to change x and y? Well, that means I have to change both of these. So there's a really cool thing that we can do. And we can just use the variable names and just add them up. So we can say x plus y, plus Zed like this, okay. And now our variable sum stores the value of the sum of these three variables. And to prove it to you, I will print it to the screen, and you can see that we get 68 as our sum. Now, Furthermore, if we wanted to take the difference of all these and subtract them, all we have to do is simply replaces with a minus sign, and we get negative 58. Okay, now to multiply things, this is another operator, we can do multiplication like this, replace this one with multiplication, and we'll multiply all these out together, you can see we get 1960 as our value to divide, we can use the forward slash. Now I'm not going to do that right now, because that is kind of a different topic. There's a weird thing with Division I have to talk about. But that's how you do that. So those are four basic operators. Now, these work just like they work in math, in terms of order of operations, right? So we're gonna start off with exponents, and then go bracket or brackets, exponents, division, multiplication, and so on through the process. Okay, I assume you guys know order of operations. So that means if I do something like x times y minus said, What's first going to operate is x multiplied by y. And then we're going to subtract said from whatever this value is. Now again, if I switch this and I go like y, multiplied by said, what's going to happen first is y multiplied by Zed, and then the subtraction is going to happen. Now, for example, if we have the operators that have the same presidents are the same, I don't know like order of operation level, I don't know what to call it. It's just gonna order operate from left to right, so it's going to do x multiplied by y multiplied by Zed. So this is a common occurrence a lot people to understand this. If we do a division sign, we're first gonna multiply x times y, and then we're gonna divide by Zed afterwards. Okay, so that's how that works. Now when we're whenever we're doing operations like this, we can also add brackets in. So if I wanted to, for example, say x multiplied by y, and then divided by Zed, I could do something like this by throwing brackets in here. So now it's showing 100% that we're going to multiply this for we divide. And same thing, if I did this, now, whatever's in the brackets is going to happen first. And then I can divide by said, and obviously we can embed more brackets in here. So I can say like, multiplied by y, times y, okay? Like, get out as many brackets and layers as you want. And that's totally acceptable. And that totally works. Okay. So now, we are going to talk about division more specifically, and then go into a few more operators because division works a little bit different. In Java, is it just in general, okay. So if I want to divide 56 by seven, so I want to divide Zed by y, okay? And I some just do you, okay? I'm going to call this year, and I print this out to the screen. 56 divided by seven, gives me a value of eight. That is because our data type for the variable u, which is holding the value of Zed and y, or is that divided by y is an integer. So it actually isn't able to give us a floating point number, although we know that this number is a floating point number, or is it a? Let's see, let's make sure this is not messed up. 57 divided by this guy. Yeah, so we can't give us a floating point number because this is well an int datatype. So it assumes that we want an integer in return. So therefore just going to give us the value and terminate all the decimals guy. So say this numbers like eight point something just gives us eight, right? removes the remainder. Now if I want to get decimal points, what you will want to do most the time, I could try to do something like this. Okay, double of u equals Zed divided by y. And you mean Okay, that makes sense double like it's going to give us the floating point. But watch what happens around this, we just get a point out, well, we know that 57 divided by seven is not 8.0. It has some decimal component to it that I couldn't tell you right now. But why aren't we getting that? Well, that is because the two data types that we are dividing are both integers, which means when we get a value back from this, it's going to be an integer value. And then all we do is convert it into double because we have this double here. Okay? Just by adding that dot zero, so how can we ensure that we get a floating point? Well, there's two things we could do, we could first change the bottom to be a double. And we could change the top to be a double. So I could do like this, it's like double. And I could change this to be a double. Alright, and if we have both of these double, and we try this, now I can see that we get our decimal point, okay? And it shows up and gives us like, whatever that is. Now, what if I just make one of these, so I say int y, and this is double i'd let's try this. Now, you can see we still get our floating point. That is, because if one of the values that we're dividing here is a double, it's going to automatically make the whole thing a double. So one of them is a double, everything becomes a double. And this is the way it works for all the operations. So if you have double u, and in this case, we say like x times y, or let's say x times Zed, since Zed is a double x is not, we're still gonna get a double value. So if we run this, you can see that we get this little point oh, so if one of our operands is a double, then that means everything is going to be a double when we use it or whatever. Okay. Now, exponent, whether we can explain it is we have to bring in module I believe, but it's like math dot how. And then in here, you put the, what do you call it, the base and the exponent, there's not a star star like in most languages, okay. I'm gonna say, instead of D is equal to math dot pal. And here, I'm simply going to raise x to the power y. Alright, so we get math dot pow, let's see what is it saying? convert doc. So let's do this. int, int, int. cannot convert form double to form. It's interesting why it's telling you that let's just try this maybe. There we go. Okay, so whenever we get X, X, exponents, apparently they have to be in the form double. Okay, I didn't know that. But all right. So now if I want to print out D, what's going to happen is we get the exponent for this, okay? So math dot pow, this is your base. And this is what you're raising the quantity. So five to the seven apparently is equal to that. Okay, so that is pretty much it for operators, I guess. Obviously, you can have as many operators in one line as you want, you now understand how things work in terms of doubles. And instead of one of the operators in the whole chain of operators that are operators variables that you're adding, subtracting dividing whatever is a double, then that means you're going to get a double value back for 100%. If all of them are integers, that means you're going to get an integer value back out, same thing here. So I have, let's change y back to double. And let's change you to be int. Okay, so it says int you x times set. So now, that's x times x times y. Okay, so now you can see we're getting an error here, cannot convert from double to Ent. And that is because we're trying to say that the integer u is equal to x times y, but y is a double value. So when we get a value back here, it's going to be double. So we can't convert that into an integer just by doing this. And there's another way that we can do it that I'm going to show you in a second, okay. So we would have to make sure that this stays testable. And it's nice in this ID, it tells you when you made a mistake like that because a lot of times you might not really see that in your program. Okay, now I'm quickly going to go over something called typecasting. We're going to talk about this a lot more later. But I'm just going to show you like fairly quickly how this works. I'm just gonna delete this line. And we're going to turn these back into integers. Okay, so if I want to do something like x divided by y, okay, and I want to make sure that I'm getting that value, right, the decimal point value, okay, like so a double, rather than converting these like the declaration of a variable to a double. So maybe we can do called typecasting and to typecast, we are changing inline, without changing the declaration, the type of the variable, the way to do this is to simply put in brackets, the type that you want to convert your variable into, and then directly afterwards is the variable you want to convert. So in this case, it's double. And then we have y. Okay, so if I run this now, and I print u, instead of D, you can see that we get the decimal value that we were looking for. If I remove this double, right, then we do not get that or we do just go to those double, but you guys see the point. Okay. So in this video, I'm just gonna be teaching you one more operator that I forgot to mention in the last video. And we're gonna be talking about getting input from the user using something called a scanner. Now this scanner is going to allow us to grab like text, numbers, strings, all that fun stuff from the user and then do something with that input. And that is kind of the basis of progress. All right, based on what a user does, we want to do something in most cases. So, first thing that we're going to do is just teach this other operator, it is the remainder operator still going to take the very long excuse, I'm just gonna say int x is equal to 56. modulus. And this is what the name of the operator is modulus, it's simply a percent sign, pick a number. In this case, I'm gonna pick five. Okay, so what this remainder operator does, it's called the modulus. Okay? Some people like to call a remainder operator, and it's simply a percent sign gives us the remainder of this division. So this division is actually equal to, would you call it 36 divided by five should give us 11? Okay, 11 remainder one is what this division actually is equal to. So if we print x, we should get a value of one. And there we go. And that's literally all the remainder operator is gives you the remainder of a division. I don't think I need to talk about it too much more, I'm sure you guys want to get into the input. So I will leave that alone for now. Okay, so let's get rid of this line. And now let's talk about how we can get input. So using a scanner is what we're going to do so well, first thing we need to actually do is at the top of your program, you'll notice I have a new line here that says import Java dot util dot scanner. I need you guys to type this out for me, Java dot util dot scanner, make sure you add your semicolon, because this is what we're going to be using to get input. And whenever we use certain tools in Java, we need to import them at the top of our program so that we can simply just type like certain data types. And we'll get into this later when we talk about classes and methods and all that stuff. Okay, so once we've done that, we need to set up a new scanner object. So we're gonna type scanner, the name of the scanner, I'm just gonna say SC is equal to a new scanner. And inside of the scanner, we're gonna type System dot gains brackets. This might seem confusing, but also is doing is it saying scanner is a dump type just like string as the data type, just like boolean data, okay, it's a different type of data type, but it is in a data type. Its name is sc. And instead of typing like one, or like putting quotation marks and typing a string, we're gonna say what's equal to a new scanner. And what the scanner is going to be is system.in, which means typing on your keyboard. And there's different types of scanners, which we'll get into later, not in this video. So once we've set up our scanner, we need to actually use the scanner. So how can we do this? So what I'm going to type now is I'm going to say string scan is equal to sc dot next. And I think we can just use next Yep. So what this does is we're creating a new variable string, it's called or it's a string type called scan. And it is going to get the next stream of input from the scanner object. Okay, so SC dot next is what allows us to get a string from the user. So I'm just going to print out scans after we get it because I want to show you what happens. I'm just gonna run the program and illustrate and we'll talk about it. So now you can see if I go down here, my cursor shows up, I'm able to type this because when type will Okay, watch, watch runs. When I hit Enter, it prints Hello, underneath it. So hello, which we typed in was the input. You got scanned in by the scanner object using SC dot next, it got stored in the variable scanned, and then we were able to print scan out to the screen. Okay. Pretty straightforward. That's how it works with strings. Now watch this. If I type one, one works fine. But I just need to show you that now I'm going to do this with the MTA. So I'm gonna say int scan equals SC dot Next, well, what's what's happening? What's wrong? Well, the issue right now is we are trying to turn a string which is, which is what this returns to us into an integer. So we can't actually do that. Because what per se would proceed, we just run into an error, we cannot convert from string to int, because what this method gives us is a string. Now, if we wanted to be able to get an integer from the user, for them typing, we have to use a another method, okay. And this one is called next it. Now you can see we're getting no more red lines, everything seems to be working fine. sc dot next int. And if we run this, then we type like 54. That works fine prints that out for us. What would happen? So if I try to type in something like Hello, so there's no errors right now, like Java is not telling us there's anything wrong. If I type Hello, we get an issue. Now that's because this was expecting me to type in a integer. And what happens in here like this little line of code, what it actually does, is it tries to convert what I'm typing in, which automatically comes in as a string into an integer. So when it tried to do this, it tried to convert Hello into an integer and no one not you, not you, not you or me knows how to convert Hello into an integer so it threw us an error. So now that that's not allowed, you can't do that. So I'll show you what we can do now if we want to get Booleans and other types, and I'll show you a way to work around an error like this. Okay? So if we want to get a boolean value, we could type Boolean scan equals Next, add, what do you look at this Boolean? That's literally the name to get a Boolean SC next Boolean. Okay. So let's run this. Now, note a Boolean has to be true. spelled correctly or false with lowercase is I'm pretty sure. So true, that works fine. But if I try to type like Hello, or five or something in there, that's gonna crash, it's going to give us an issue. Okay? So Boolean lets you do that one, once you get a double could do double equals next. And guess what this one is? Next double, there you go. And now it's going to expect a number of some sorts, like six would work fine, but I'm going to undo 6.3. And it prints out 6.3. Let's actually just test six at six. Yeah, just give us 6.0. So that works fine. Okay, to getting doubles. Now, I want to work around the issue of what happens like we get that crash, okay, we don't we don't want that crash. So how can we fix that if we're per se, when it's expecting a double, I type in like, hello. Well, what we should do is always get a string. So we should always say a C dot next. And always turn this into a string. And that's because a string can be anything like anything we type in here is fine to be a string, because remember, a string is simply anything in double quotation marks. So if I type true, although Yeah, we know it's a Boolean, it's in the quotation marks. So it's really a string. Okay? If I type one, that's a string, type 1.6, it's a string, like anything can be converted into a string, pretty much. So that works fine for us. Now, once we have it as a string, we can then convert it into an integer. Sorry, I had to see a quick cut there. But what we're going to do now is we're going to attempt to convert this value into a different type. So in our case, I want to convert it into an integer. So the way that we can do that is we first need to set up a variable. So I'm gonna say index in this case, is equal to scan. Now, I'm going to put something with this scan, I can't just say index equals scan, I can't, I can't just do that, it's not just gonna be able to convert that for me, it doesn't know how to do that. So what we need to do here is actually do dots, and are certainly to type here. integer dot parse, int, okay. And then inside of the brackets for parse int, we're going to put scanned, and what this is going to allow us to do is well convert into an integer. And if you guys just highlight over this, you don't know what it does, you can actually read through the definition. So in this case, it's going to say parses the string argument as a signed decimal integer, the character in the string must be old decimal digits, except the first character may be an ASCII minus sign. Okay, so we can tell you it tells you exactly what this does, it tells you what integer does integers a class. So yeah, it'll convert that for us, so that if I wanted to print x to the screen, that would work fine. Now, the thing is that when this is what we're gonna be doing in the next video, is, we still run into the same issue because again, like now, if I type something like Hello, we still get a crash, because how do we can convert Hello into an integer? Well, we should really first check if the value is an integer. And I'm going to be showing you in the next video, I believe, the next one or the one after that, how we can actually do that using if statements and else statements and error catching later on. So stay tuned for that. But this is the way for right now. If you know, you're going to be getting an integer that you can convert it in, or obviously you could just do next int and turn this to an int like that, and everything works fine for you. So in this video, we're going to be talking about comparison operators, like greater than less than or equal to not really talking about chaining conditionals together, which you'll see if you don't really understand what it is right now throughout the video, and how we can use those Boolean variables to do certain things for us. So that's what we talked about in the first few videos. And if you guys don't really know what the point of Boolean is, well, this video will show you. So without further ado, let's get started. So I'm just going to start off by typing a few numbers here because it's just the easiest way to compare things to start, and then we'll do some other stuff. So I'm going to create three variables that are integers. X is six, y is seven ends, that is 10. Now I'm going to create a boolean variable. So Boolean, else, call it compare, and we'll just set that blank for right now. So what I want to do is I want to compare x and y and Zed using some different comparison operators. So in Java, I'm going to write them out here. We have a belief for main comparison operators four or five. So we'll type them out and we can see, so the first one is greater than, and then we have less than we have equal to, oops, we have greater than or equal to less than or equal to and not equal to. Now I know I just went through those fast but they're pretty straightforward, this is simply going to state whether something is greater than the other thing, this is less than the other thing or whatever way you have it right? This is, is equal to so the double equal sign is different than the single equal sign, double equal sign is when you're comparing two values to see if they're the same. And the single equal sign like this one here, is if you're assigning a value, so make sure you remember that because a lot of people when they compare things, they forget to add the other equal sign, and they just use one and they end up running into some issues. Okay, so greater than or equal to pretty straightforward, less than or equal to same thing and not equal to as an exclamation point and an equal sign. Now I'm going to go through these and show what all these do. So I saw Actually, I'll leave that there. And because I just remember that I have been forgetting to teach you this. If you do two slashes in Java, this stands for a comment. And a comment is simply something that the computer is going to ignore. And it's just there for the programmer. So they can look at it and be like, Okay, this is what this line of code does. Whatever the computer doesn't care, so whenever it sees a line that has starts with two slashes, this is how you do a comment. It just ignores that line and moves on. So that's simply what a comment is. And it just Gray's out in here to show us that that's a comment. Okay, so compare. So I want to compare x and y. And I want to set see if x is less than y. So say, if x is less than y, and what this statement right here that we're typing here is going to return a value of either true or false. So we can look at this, we say, well, six is not less than seven. Yes, it is. So that should give us a value of true. So if we print compared to the screen, then you can see we get true like that. Now, if I flip this around, and I say greater than, okay, what do you think we're going to get? Well, we get false, it's pretty straightforward to compare the two values to see if they're the same, we can do two equal signs. And in this case, we get false. And now this this comparison operator, some people get confused by. But if I do not equal to, what this is going to tell me is if the two values on the left side and the right side of the comparison operator are not the same, so if they're not the same, I get true. If they are the same, I get false. So in this case, they're not the same. So we should be getting true. Okay. And I guess I can show you greater than or equal to, but they're pretty straightforward in terms of how they work, at least on numbers. Okay? Now, these work fine. So greater than or equal to less than or equal to on numbers. But what if I want to compare strings, so I'm just going to change x and y, I'm gonna make two strings here. I'll say, oops, string, x, will say hello, and string y. And this is equal to pi. Okay? So see, now I'm getting this blurred out, or this red line here, it's saying the comparison operator greater than or equal to undefined for strings. So the only ones that I'm allowed to do on strings, at least for right now that we're going to talk about, are two equal signs, or not equal to, okay? And not equal to is simply going to say, right, if the strings are not the same, and if they are the same, so in this case, I say not the same, I'm gonna get true. If I try to see say, if they are the same, I get false. Now, I want you to just show you one thing here, if I type Hello, and I add a capital O at the end of Hello like this, do we think that this is the same as Hello with all lower cases are not? Well, I'll show you. It is not so capital letters do matter. In program, right, let's assume with variable names, like the capital variable Y is different than the lowercase variable y. Okay, so that's how we can compare those. And I want to see actually, can we use greater than net, we can't use greater than or less than on strings either. Okay. So what I'm going to do now is I want to chain multiple conditions together. So I'm going to show you the end operator, the OR operator, and the NOT operator. And these are how we can add multiple conditions together to get one like main condition. If that makes sense, I'm going to change these back to two numbers might be faster just to type them out. index equals what I have six into y equals, let's just do like 23. Why not? Okay, so now I'm going to compare multiple things at once. So I first want to compare if x is greater than y, but I also want to compare if Zed is greater than x, say I want to check two things perfectly viable. In many cases, you'd want to do that. The way that we can do that in Java to compare if two things are the same, is using this an operator AND AND operator is looks like this. So it's these two and signs, okay? And then we have to add another condition after this. In this case, I'm going to say if Zed is arch, say Zed is less than y, okay? You can see that's fine. We're not getting any red lines. And what this does is it's going to compare the operation on the left side, it's going to do the comparison on the right side, and then we're going to end up getting two values. So in this case, x is greater than y. So six, is that greater than y? No, we're gonna get false. So I'll just type it out as if this is what's happening in the computer, right? And that is less than y. Yes, it is. So we get true like this, okay? Now, we have a false and we have a true, but we have this and operator in between them. What this and operators can do is it's going to check if both of the conditions on the left side and the right side are true. If they're both true, it returns true to us. If they're both pretty one of them is false, or both of them are false, then we get a false value. So in this case, since this one is false, we're going to get a false value because both of them have to be true for this to evaluate to true. So I'll show you if I do this. Okay, and I print this to the screen, you can see we get a false value, because this is saying, if this and this are true, then the whole thing is true. Okay. Now another operator that we have is the OR operator. And the OR operator is to straight up lines like this, I don't know what they're actually called, the key for that, but anyways, so this is gonna do kind of, it's similar to end. But in the other way around, if one of the two conditions are true, the whole thing is going to be true. Otherwise, if both of them are false, it's false, right? So the way that we can determine this again, right is we'll do this condition, we'll see what this is equal to, and then we'll see what this is equal to. And if one of them are true, we get a true value. So let's run and there we go, you see, we get a true value. Now, we have a knot operator. Now what not does is simply going to reverse anything. And this is what I like to think about it, whatever you have, if you see the knot, just reverse it. So what this does is it's going to say if this condition is not true, then we get false. Or if this condition is false or not true, then we get true other way around. If this condition is true, then it's false. Because it's checking if it's not true, I hope that makes sense, you kind of just have to play with it to make sense of it. But in this case, since we get a true value, and we have this exclamation point, which is our NOT operator is going to give us false. So you can see here we get false. Now if in here I were to put a false value. So let's literally I'll just show you by typing in the value, I say not and then false in there, you can see that we get a true value. So it's simply just reverses like anything that you're looking at. Now I want to show you that we can actually combined all of these operators together. So what we can do is we can use like ands and ORS and we can have an infinitely long chain of a condition that will eventually evaluate to true. Now this is actually some kind of like math problems you have to do typically in university, I'm gonna have to do it next semester, where you have like a ton of different conditions, and you have to figure out if you're going to get true or false based on them. So I'll show you like a pretty basic example. So I'll say if x is less than y, and y is greater than Zed, or Zed plus two is less than five. Or what do you call it? Like x plus seven is greater than what? Okay, so I just typed a bunch of conditions, right? How do we determine which ones which of these are going to evaluate first? Well, that is a good question. And typically, you'd never type it like this. Because just looking at this, like even I'm looking at it right now after I just typed it in. I'm like, wow, okay, how do I determine which one of these is going to happen first, typically, you put things in brackets, so I would say something like this. It's like x and y. Okay, so I have this first conditional, right? You put in brackets, it's going to evaluate this, and in this case, we'll get I'm not going to bother doing the actual evaluation. But let's say we get true, okay? Or so we have true, or whatever this evaluated with this is. So what this is going to do now is it's going to look at said plus two, if that's less than five, if that's true, then we get true or and then whatever this is, and then we could treat this as if this is in brackets like this. Okay. So now the way that this would work, is we do everything in brackets here, we get a value of like true or false. We do everything in brackets here, we get a value of true or false. And then we'd see if either of them are true, and return that value. So you know what, let's just print it to see what we get. If we get true, okay, I don't even know how that worked to be honest. And yeah, that's how we could do that. And we can also throw knots in here too. So if I want to throw a knot like this, then we can do that. Now typically, you're not going to see massive chain conditionals like this, because of the exact problem we're running into, it's difficult to determine what they are by just reading it. And you'll see when we go into if and else statements in the next video how we can use these conditions to evaluate certain things, I just wanted to show you that you can combine multiple things. And for example, I don't only have to use variables, you can see that here I put Zed plus two less than five, that's a perfectly valid condition that works perfectly fine, can change this is equal to five, right? And you can add constants, like I could just say two is equal to five if I want it to, but that's fine. You can compare with constants. And with strings, just remember you can do less than or equal to, or sorry, not less than not the not equal to or equal to, and you can compare floats with intz. And you'll see as we continue going through the video, it's too long to go through all them right now. In this video, we're going to be going over if, else and Elif statements in Java. So quickly, just I want to fix a really small mistake I made in the last video. So if you guys don't know, I am like a Python programmer typically. So I'm doing Java, obviously. But Python is like my first language. So I'm used to being able to use two equal signs on pretty much anything because that's what you can do in Python. But in the last video, I showed you using two equal signs on strings. Now, that's not incorrect to do that, but it's not going to work the way you think right now. So if you want to compare if two strings are logically the same, like the actual string values have the same, what you should actually do is say you have a string. So in this case, you have to do dot equals Okay. And then inside of this equals here, you're going to put the string that you want to compare it to, or you're going to put another variable, which is a string. So in this case, I want to say if like, my scanner object, which I've just typed out before this video, is equal to Hello, this is how I would do it with this dot equal sign, not the two equal signs, you the two equal signs isn't wrong, but it's going to give you a different answer. And we will talk about that in future videos, but it's too advanced to go into right now. So just remember, if you want to compare two strings, use dot equals My apologies about that from the last video. So what we want to do now is we're going to do it using if and else statements. So pretty much if something happens, do this, otherwise, do this. And this is the basis of programming. Using conditions based on like user input, or based on certain events that happened, we're gonna do different things, right? So they're really important to understand. So first of all, what I'm doing here is I'm just getting, I'm just setting up a new scanner object, I'm just going to get input from the user, we've already talked about this. And what I want to do is I want to check that user's input, and based on what they type in, I want to do something. So the basic syntax for if analysis in Java is you simply type if you put brackets, and inside of these brackets is going to be your condition. And this is why I spend so much time talking about conditions the last video, the condition here is if this condition evaluates to true, whatever's inside of what I'm going to show you here, whatever's inside of these curly braces is going to happen. So let's start with the condition. When I say if s dot equals not two equal signs, and in this case, I'm going to say, Tim. So if the user types in Tim, when we're when we prompt them for input, then I want to do something. And what's going to happen is inside of these curly braces, and this denotes a block. So this is known as like an if statement, or an IF block. So this block simply goes to syntax, if then we have this, these brackets inside the brackets as a condition, the condition can be as long as it wants as long as you want, as long as you're going to get a true or false value back from it. And then we have these curly braces, so an open brace and a closed brace. And inside of these braces, anything that I typed in here is going to happen if this condition is true. So let's just do a quick little test here. And I'm going to do system dot out. dot print ln. And in this case, we'll just say, you typed Tim, okay, what types you types? you typed Tim? Okay. And let's run the program and see what happens. So when I run this, if it loads up, That's odd. Okay. Give me one second. Okay, so we're back, I accidentally closed my console. And yeah, we running into some issues with that. So I got that up and running now. Let me just restart this quickly. Okay. Wow, okay. I don't know why. That's why But anyways, let's just type out. What are we going to say here, let's type hello and see what we get? Well, we get nothing because we didn't type Tim. So let's run it again. Let's try it. And this time I type Tim, and it says, you typed Tim. So there we go, our basic if statement is working. Now I want you to just put another system dot out over here so that we can see what happens when we have like just with this example. Okay, I'm just going to print, I'm literally going to print print. Okay. So now what I want to show, what happens here is like, what is the program going to run? So if we type Tim, we're gonna get this you type Tim. But are we still going to get this print out here? Or are we not going to get it? Well, let's test this out and see, okay, so in this case, I typed Tim. So when I typed him, it says you type Tim and then it says print, okay? Now the reason that happens is because this print is not within this if block, right? So we're just going to execute simply after this if block happens now, same thing, right? If I type, like Hi, it's still going to print out print to the screen. Because right? It didn't go through this if block but this is not inside of the if block or the if statement or whatever. So that executes. Okay, so that's pretty straightforward. Now I'm going to show you else and elsket rest start with else. So else is very straightforward. It can only come after, and else if or and if so, like the start of the block has to be if and then this else You can't just have it like alone. It has to come after an if statement or an elsif statement, which we're going to go into in a second. Okay. There's different ways to format this. Some people like to put the else like this Has the closing brace than the open brace. I personally like to do it like this. Some people like to do it like this, it's however you want, okay? This just works fine. Just make sure that your curly brace doesn't look something like that all the way up there, because that's kind of hard to read. Okay. So what I'm going to do now is I'm going to put this print statement, and I'm going to put it in my elf statement, right? Now, the way this else works is, if this happens, that's fine. We're going to go in here, we're going to print this out, and then we'll move down to the end of the block. So we'll go to here as our next execution line. Now, if this doesn't happen, so other words, or else, then we print this, so we're either printing you type Tim or print, we're never printing both because one of them is if and one of themselves. Alright, so let's test this out. If I type Tim, we you type Tim. Okay, if I type anything else, so like some random letters, and I hit Enter, you get print. So is LS works is it's meant to do something if this condition is not true, right? Okay, so that's pretty straightforward. I don't think any to talk about that anymore. The next one I'm going to show you is elsif. Now this is a way that we can add multiple if conditions in one kind of block. Okay, so what I can do now is I can do like elsif. And now it's the exact same syntax as regular if statement, except you just have this else before. And obviously, since this is an else it has to come after an initial if statement. So you can have as many of these else ifs as you want. Now, first, I'll just put a condition in here. So say, s dot equals, and in this case, let's just say like, Hello, okay. And then in here, we'll just do system, dot out, dot print, ln, and we'll just say hi, because we want to greet them back. They said, Hello. Okay, so again, the way this is gonna work, is we're gonna go through, we're gonna check, we're gonna get our scanner input, we get us say, okay, what's s is s equal to Tim, if it is we're gonna print this, and then we're gonna move down after the last l statement, we're not going to even bother checking if it's something else, because if it's equal to Tim, then we know that we shouldn't bother looking at the L sips. Right. Now, if it's not equal to Tim, what we're going to do is we're going to go through and we're going to check reinstate k LS F, that's our next block, is it equal to Hello, if it's equal to Hello, we're gonna print Hi, we're gonna move on with our lives, you're gonna move down here, we're not even going to bother going to the else. Okay? Now, if it's not equal to Hello, we're going to go into the else statement. And we're just simply going to print print, there's no condition, it just automatically going to happen. If you print anything other than Hello, or Tim, we're going to print print. Okay, so let's try this out. And let's type Hello. And you can see we get Hi, all right. Now, if I print type anything else in here, like some random letters, we get print. Okay. And that is how that works. Now I can show you I can add as many else ifs as I want. So if I copy this, and I simply paste it down here, gonna have another LCF. And in here, I could have Hi. And then in here, I could type Hello. And we could keep going. We could do as many else ifs, as we want. Just know that whenever you have a kind of a block that looks like this, it has to start with an if statement. And it does actually doesn't have to end with an else. So in else just is should be the last thing so if you have any else ifs else will be your last thing like I couldn't do an lF here, and then try typing like that's, that's not okay, you can't do that. But if I omit this else, that's perfectly fine. So now I have if we type Tim, we type Hello, or we type Hi, let's run this. And let's type none of them. Let's, let's type a bunch of letters, we get nothing printed to the screen because we don't have that l statement. Now, if I type Hi, you see we get Hello. Because right we went through wasn't equal to Tim. It wasn't equal to Hello. So we printed Hi. Now I want to show you this. This is a bad example. But it it'll work. If I put Hello here. And I put Hello here. Which one are we going to print? So remember, we're only going to print one of these things. We're not going to print more than one. So which one? Is it high? Or is it Hello? Well, let's test it out. If I type Hello in here, we print high. Now the reason we're printing high is because this else if is above this one, and this is the first one that's going to be looked at when we type something in just the way I kind of went through it sequentially. So since we print high here, we're like, Okay, well that happened. So there's no point in checking this. And we just move on. Okay, straightforward. Now again, I could do more if statements down here, you could keep typing like do a bunch of stuff, just understand you can have as many elsif as you want. You don't need to know stuff. Like we could just do an IF and then else. But every time you have kind of like an if statement or block starting it has to start with an if it could have as many elesis as you want. And the last thing has to be an else. If you're adding else you don't have to have that else there. So anyways, I think that's all I'm going to show for if statements elsif and else they're pretty straightforward. Any condition can go here. So anything that I showed you before, like you could have a really long chain conditional a ton of stuff. Same thing here, you could have any condition like it doesn't matter, anything that gives you true or false value, you could also literally just type true. And like that would always happen, okay? In this video, we're going to be kind of taking a step back and just going through everything that we've already learned summarizing that, putting that into a program to make sure that you guys really understand all of that. And we're also gonna be talking about nested statements. So how you can kind of add things within other things like so if statements within other if statements variables. And the way I'm going to do this is just by creating a simple program. And what it's going to do is it's going to ask the user to input their age. And then based on that age, we're going to do certain things with that, we're going to tell them like, I don't know good examples, like on a roller coaster, like if you're 13 or older, you can ride otherwise you can, so we're going to do something like that. Okay, so I'm going to keep these scanners up here that I have, because we want to get the user's age. But um, first, before I set up the scanner is I'm just going to print a line to the screen here. So I'm just going to say system, dot out dot print, and so print ln. And in this case, I will just say, input your age simply okay? So this way, it should, if I'm doing this correctly, make it so that we just get the age right after this line. Okay, you'll you'll see when we do that in a second. Anyways, what I'm going to do now is I'm just going to kind of start typing, and we'll go through how this works out. So I'm gonna say if, and we're actually just going to convert this to int first, I think string to an int. Yeah, so using that parse into that I was talking about, so we'll say int, age is equal to s.or integer, I always forget how to do this integer dot parse int. And then in here, we need to type s, so we're going to convert whatever they type into an integer in this case, so we're going to assume that they type in an integer. So we'll say if age is greater than or equal to 13, then we will simply print System dot out dot print, ln. You can write Okay, exclamation point. Now, if they're not older than 13, that must mean that they are less than 13 or younger than 13. So in this case, we will simply print that they cannot write system dot out. dot print ln. And you cannot write exclamation point. Okay, pretty basic program, we kind of have gone through all this work. So let's test it out. input your age five, you cannot ride. Okay, let's try this now. input your age 43. You can ride awesome. Okay, so everything's working fine for right now. Now what I'm going to do is I am going to add a elsif here and I'm going to change kind of the problem that we're looking at. So I'm going to say now I want to classify the person based on their age as either an adult, a teenager, or just like younger than a teenager. Okay? I don't know, what do you call those? Whatever, younger than teenagers. Okay, so if we are greater than or equal to 18, I want to print you are an adult, okay? Now otherwise, so if they are not greater than 18, we want to check if they are less than 18. So or if they're, actually we'll do it in a in a cool way, that's gonna make sense here in a second. So else, if age is not greater than or equal to 18, we know it's less than 18. So all we actually have to check is if they are older than 13, right? We're greater or older than or equal to 13? Because that's what a teenager would be. And the reason we don't have to check if they are, what do you call it younger is, or if they're older, is because we already know that they're gonna be younger than 18. So know where they're at within that range. So I already butchered that explanation, but that's okay. So system, dot out dot print, ln. And in this case, we'll just say you are a teenager, okay, like that. And then in this last case, well, we know they're not older than or equal to 18. We know they're not older than or equal to 30. And that meaning they must be less than which is you are not a teenager or an adult, okay, like that. So let's test our program out, make sure everything is working. So if we input an age of 14, we get you are a teenager. Awesome. Okay, let's try it again. We input an age of 19. Get you're an adult. And if we input an age of zero, yet, you are not a teenager, we're an adult. Now, I want to show you what happens if I input like a negative number, like what if I do like negative 98? You are not a teenager or an adult because right we have this L statement. And that's not greater than or equal to 13. It's not greater than or equal to 18. So we get you're not a teenager or an adult. Okay. Now, that is pretty straightforward. What I'm going to show you now is how we can ask like another question or how we can check something else. So what I'm going to do here is I want to say, if they're 18, and only if they're 18. Want to ask them a question? What should the question be? I want to ask them what their favorite food is. Okay? So I'm simply going to do now exactly what I've done up here, except just throw it inside of this if statement. So if this happens, we're going to do this and this is going to show you nesting. Okay? So we're gonna say SC, or we'll say, string is Windows to integers. We're gonna assume that our string and guess Kazumi food Yeah, we'll say string. Food is equal to SC, dot next line, like this, okay? And what I'm going to do is I'm going to print up here again, what we're looking for, so I'll just copy this in a second. And in this case, I'll say, input your fav food, okay? Now what I want to do is I want to check what their favorite food is. So I want to say if their favorite food is pizza, I'll say mine too. Otherwise, we'll say that's not my favorite food or something like that. Okay, we'll say if, and we have our conditioning here, we'll say if food dot equals, and in this case, we'll simply type pizza. Right? Then we will system dot out, dot print, ln. And we'll say mine. Wow, inside of the coats, hopefully. Say mine too. And then otherwise, so the else, what we'll do is we'll simply type system, dot out dot print, ln. And in this case, we'll say, not mine. Okay? So this is showing you now it looks a bit more complicated, but that we can actually put if statements and else statements, we can do things with inside of the if statement. And I'll show you that this works. So if I type, I'm 19. It's gonna say input your fav food, okay, my favorite food, let's try pizza, says mine too. Awesome. That's working. Now, if I type something else, so I typed like for, it just tells me I'm not a teenager, and adult because we don't have anything else happening inside of this if statement, or this else over here. Okay. Now, that's really cool. And that allows us to do some neat things. And you can continually nest This is called nesting, putting a statement inside of another statement, you can continue to do that as much as you want. So I just wanted to show that to you. Because a lot of people think that that's not possible, they don't understand that you're able to do that, because they haven't been shown that right? So again, if I want to ask another question, I could do that inside of here. And I can just keep going. What is an array? Well, an array is a collection, pretty much of elements, that is a set size. So rather than having like a variable equal to one, you'd have an array and it would have a bunch of different values in there that you can index at certain points. And you'll see when I start talking about them here, if you're a little bit confused, but how to create an array is to first you have to declare the type that you want your array to be. So all the values in the array, at least right now have to be the same type. So in this case, I'm going to create an integer array. And to declare that this is going to be an array, you simply do these little square brackets, use a in square brackets, the name of your array in this Gizmo is a new arr standing for array is equal to, and then in this case, you're going to say new int, square brackets. And inside of the square brackets, you have to define how many elements or how long your array is going to be. In this case, I'm just gonna say five. Okay, so you can see that's fine. not getting any issues here, just because we're not using new AR. But yeah, this is the syntax. So whatever type you want it to be, you type the type. So if I wanted to be string, I do string. And then this obviously, would have to be the same string like that. Okay, square brackets, name of your array equals new, and then the type square brackets how long you want the array to be. Now, there's another way to declare this, I'll show you in a second. But this is like a set length, like you can't change this length. So you have to make sure that when you're declaring your arrays, you know how many elements you want to have. Because you can't if you make an array length zero, then there's no point in using it. You can't add, you can't add anything past like that length, okay? And what it's going to do is it's going to, by default set all of these elements to like, no, so they have no value, but they exist, like they're there. They just aren't holding anything right now. Okay? Well, you can kind of think of it as you're initializing, like five containers that are old gonna hold something, but they're not yet holding anything. So is a good way to visualize. So we're gonna keep the string array for now. And I'll show you how we can add things to array and change values and print them out and see what that looks like. Okay, so the way that you index things in an array and array is going to be it's going to look like these curly braces. Okay, so I'm just gonna type some stuff out and just follow with merit. So my string array I want to have Hello. I need double quotes. Hi, Tim. Maybe I should have done last values bill, and Joe. Okay. Now these are the five values in my string array. This don't type this out with me. This is just showing you an example. Now the way that we start counting in computers are actually let's first say this, every element in our array is going to have an index, okay? And the index is going to be a number that represents its position. So in this case, you'd say like this is position one, this is position two, and this would be position five. Now, if I were to ask for position zero, or sorry, position one, it would give me Hello. But the thing is, that seems logical. But in computers, we actually start counting at zero, meaning that position one, which I'm saying is Hello is actually going to be position zero. And that means that whatever the length of my array is, the so in this case, five, the last position in my array is going to be the length minus one. So in this case, four, so Joe would be position four. And these are known as indexes, like index zero is Hello, index one is high, index two is Tim. And this allows us to really easily grab different elements without having to know their value, we just know the position of them in the array. Okay, so 01234. That's how we count in computers. Okay, so how can we actually access these different elements? Well, I'm going to create a variable and just say string x equals, and in this case, I want to get like value two in my array. So first of all, I haven't actually added anything to my rate, but we'll do that in a second. But how I would do that is I would type like new AR, and then I put square brackets and then in here, I put the position. So position, so I want to get Hello, I think that was the first or second position I will see anyways, I would type one. And what this would give me is the second value in my array, because remember, we start counting at zero, so the first value would be zero, and the last value would be four. Now maybe this is going to look a little easier once I start adding things into my array. So the way that we can actually add things into the array is what we've declared an array and we set it has length five, which means that these elements already exists, or those buckets, there's not holding anything. So what we have to do is we have to say new AR zero is equal to, and in this case, let's give it a value. So let's say hello, okay, put our semicolon, there we go. We've just set position zero, index, zero, whatever, to Hello. Okay, so now if I copy this a few times, I can set the values of all the elements in my array. So I did 012, and three, and here, I can just change these. So say hi, I'll say, Tim, I will say, Bill. And we can add one more, but we don't have to. So if we let's, let's just add one more for the sake of it. And new AR four is equal to what we call it geo up. I don't know why it's doing that for me. Okay, jus like that. Alright, so it may say string x equals new AR four, then that's going to be equal to Joe. So to print this out to the screen, now I can do system dot out, dot print, ln. And in this case, I will say x, and let's see what we get. We get Joe, right, because we added all of these into the array. Now if I just comment this out by doing that, let's see what happens when we do a new AR for let's see what we get, we get no, now that's because remember what I said when we initialize this array, we set it of a length of five and we say we Okay, these are our containers, we've got five containers, five buckets, they're gonna hold values, we don't know what the values are yet. Alright. So if we haven't set a value for the fourth index, or the fourth position, well, we don't know what it is. So we're just going to return no meaning nothing is there right now. Okay. So yeah, so those are, that's how you add things into an array. Now there's, I'm going to create another array and show you a kind of an easier way to do this, if you're just gonna like statically type in numbers, okay, so I'm gonna say int summary into an integer edge to save me from doing all these quotation marks, I'm gonna say, and let's say num is equal to new it square brackets. Or actually, we don't need that, because we're gonna do the other way, we're just gonna put two curly braces. And in here, we're going to type out our array. So in this case, this is now my number array. So I put it in curly braces, and I have an array of two 354, six and six. Now again, just to recap, two would be at index 03 would be at index one, okay? Because that's where we start counting. And now, if I wanted to, instead of having x equal to new error, I'm going to say nums four, which should be six, right? And what's our error here? Change, this has to be an int, my bad. index equals lumps four, we print this out, you can see we get the value six. So that's another way to create an array, if you're just going to be like typing in all of the numbers like that, okay. And obviously, you can create arrays of different types like int, we could do string we do float, we do double, so you say like a double array of nums to is equal to and then in here, like 2.0 3.0 There you go. We now have a Wow, really forgot that. Okay, well, you need But that works. Okay, we now have a double array at index zero, we have 2.0. at index one, we have 3.0. And yeah, so arrays can get fairly complicated, they're not really the best thing to be using for a lot of example cases. But for right now we have to understand them. in later videos, I'm going to be talking about collections, which are going to allow us to do some cooler things rather than like indexing elements like this. There's some cool methods that we can use on those. But for now, I would just want to make sure that we do understand arrays, okay. So in this video, I'm going to be talking about for loops. Now, for loops are fundamental aspect of every programming language. And they're very important to understand, I can almost guarantee you that any program you write will use multiple for loops. So pretty much a for loop is allows us to kind of automate a task, do something a set amount of times. And typically when you use a for loop, you're using that because you know how many times you want to do something or like a condition is going to tell you how many times to do something as opposed to what we're going to talk about in future videos, which is a while loop. While you're not really sure how long it's going to go for. So you do something based on a condition, but we'll talk about that when we get to it. So let's start and just do an example of what the for loop can really like solve for us, for example, okay, so say this is a pretty simple example. And you guys will see in a second directory integer, C index equals zero and say that I want to add one, and then I want to add two to it. And then I want to add three to it, and four, and five and six, and like an infinite amount of times I want to add to that variable. Well, we could do like x plus equals one, we could do x plus equals to like in keep going and adding things to x. And we could just keep copying and pasting this down our program. But obviously, that's terribly inefficient in terms of a typing standpoint. And what if we wanted to change this, what if every time we want the program, we want to ask the user how many times they want to add like a pattern like this to x? Well, then we would have to constantly keep changing the numbers here, right, so this is where for loop can kind of come in handy. So the syntax for for that, I'm just going to type it out, and then we will talk about exactly what it does. So it has these brackets here and in here, we're gonna put three things typically, okay, so what you're gonna do is you're going to first start off by declaring a variable. So in this case, I'm gonna say int x is equal to zero, okay? Now this can be called whatever you want. Typically, people call it AI, I like to use x, but you know, let's just use AI. And then what you're gonna do for this next, so you're gonna put a semicolon, and then the next thing you're gonna do is you're going to set a condition. So I'm just gonna do this and then talk about because it's hard to kind of do it step by step, because they all work together, less than or equal to 10. And I plus plus. Okay, so what I've just done here, actually, is I first started by declaring a variable is equal to zero. And then I've said, we're going to do this while i is less than or equal to 10. And we're going to add one to I. So pretty much the way this works, is every time we execute what's in these little square brackets here, is gonna have one added to it. So this is what's known as the increment. And this comes at the end of your for loop. So this is what you're adding to the variable i, which you're declaring here, every time you run the loop. Now this here is your condition. And this is going to state how many times a loop is gonna run. So in our case, we're going to run the loop. And while i is less than or equal to the value 10, meaning we're going to start at the value zero, because I equals zero, we're going to run this loop, then we're going to come back up here, we're gonna say, Okay, what are we doing? We're adding one to AI, then we're gonna check this condition, so i is not equal to one, we're gonna say, well, is one less than equal to 10? No, it's not. And then we're gonna loop through, and we're gonna continue looping through until eventually, we get to the point where we add to i, it's equal to 1111. Well, that's greater than 10. So we break out of this loop, and you guys will see when I start printing stuff to the screen exactly how this works. But I hope that was a decent explanation of the way to do this. So what I'm gonna do is I'm just going to print out here and I'm going to tell you right, now what's going to happen, right, so we're starting at zero. So the first loop here, where I come through is equal to zero, we're gonna print zero, next loop, we come up, we add one, two, I check the condition, we're okay, we can keep going. We're at one, and we're going to print from zero to 10. So watch when I run here, we get zero all the way up to 10. Okay, that's how the for loop works. So we execute whatever is in between these little curly braces 10 times, or 11 times in this case, because zero to 10 is 11. Right? Now, we can change this increment, we can change this condition, there's a lot of things that we can do in this for loop. So here we say for int i equals zero, I could do for int i equals five, and I can start at the value five and now we're going to start we're going to go from five to 10 looping 123456 times, right? We're printing six different values, okay? So that's if you can do that If I tried to do something like i equals 11, well watch what happens, nothing prints to the screen. And that's because 11, well, that's greater than or equal to 10. So the loop doesn't even run one time, right. So let's go back, and let's start at zero. And now let's show what we can do in terms of incrementing. So to increment here, we can do i plus equals, and then any value we want. So in this case, if I do five, we started zero, we're going to add five, we're going to add five again. So we get 05, and 10. And you can change this to whatever value that you want. Okay, same thing here with the condition. These can also be variables, I feel like I don't need to tell you that. But if I do something like int x equals five, then I could do i plus equals x, right, and we can add that integer to it, we can add x as the bound here. So less than or equal to this could be greater than this can be greater than or equal to. So I'm just going to quickly go over one thing that a lot of people get confused with, for with for loops. And it's when we're going to stop and when we're going to start. So when we say less than or equal to 10, this means we're going to start at this value. And now assuming we're adding one, okay, we are going to stop but include 10, meaning that I will hit the value 10, we will print 10 to the screen. Now, if I remove this equal sign, this is only going to happen while i is less than 10. Which means that if I is 10, well, 10 is not less than 10. So we are not going to print 10. So if I run this, you can see we only get up to the value nine. Now the reason I'm talking about this is because what we typically want to do with loops is we want to loop through something or look at some data. And typically that data is in the form of an array. So now in the slide talked about arrays before, I'm going to create an array, so an integer array, let's call it Arr, is equal to, and let's just give it some values here. So like 157345, okay, this is going to be our integer array. Now, what do I want to do? If or how am I going to do this, if I want to look through my array and look at look at these values, and maybe check them values equal to seven or values equal to five or something like that? Well, the way that I can do this, and this is like a dynamic way to do it, is I could count the length of the reg and say, 123456, guys, six elements. So I would put is less than six year. But a more useful way to do this is to just get the length of the array. And the way that I can do that is just to do a arc dot length, or I actually don't need this bracket, sorry. So we'll just do this in this way, say the user had typed in a bunch of elements, we had put them in an array, we don't know how many elements they type in, per se. So we're going to use this length so that we can change this loop and this loop will never crash, it will always work. Because we're just simply getting the length of the array. Now if I were to do equal here, I hope you guys realized this would cause us an issue. And that's because we have six elements in the array, right? But it's going to allow us to get i to the value six, because that's the length of the array. Now what happens if I try to do this arr of six? Well, we should know from the last video that that will actually crash our program. And that's because when we start we start at zero, and our last element in the array is actually going to be index five, right, because we go to zero all the way to the length minus one, which is five, so race six does not actually exist. So what I'm going to do now, is I'm just going to write a little program inside this for loop, and I'm just gonna say if the value is equal to five, we're going to print it out. So how do I do this, I'm gonna say if arr index i is equal to the value five, then we're simply going to be a system, dot out dot print, ln, I just realized this comma there, alright, semi colon, and we're simply going to print the value. So in this case, we could print air I, which we know is gonna be five, or we could just type five because we know that it's there. So in this case, let's just do found a five exclamation point, okay, that's what we'll print to the screen. So again, the reason this is gonna work is because we're looping through starting at zero, and going to but not, but not including the length of the array, make sure you remove that equal sign, otherwise you're gonna get a crash, okay? So that way, we're going to look at every single element in this array, we're going to check its value. And then if we find a five, we're gonna print it. So let's see if this works. found five and found a five. Now for wanting to be more precise, and say like where I found this five, I could say found a five at index, and we'll just put a plus sign and then we can put pi. And what this is going to do is it's actually just going to automatically convert this into a string for us and print it out with this index. So we're going to put a space here just so they don't get smushed together. But it says found a five at index one and found a five at index five and we know this is true. Index one is here, index five is here. And that's a really simple way that we can loop through a list and look for a certain value. Okay. Well, I'm going to be showing you a different kind of for loop which is known as a for each loop. And this is going to allow us to loop through the elements of a list or a collection data type, and do something with those elements, I'm also going to be showing you ways that we can break out of the loop at certain points. So if the condition is not met, or like, we just want to get out of the loop the way that we can do that, and I'm gonna be showing you some common examples of where we use loops. So let's go ahead and get started. So you can see that I have two arrays, here one's name names, and one is named AR, I just added this names one is just a blank, blank array for right now. Okay, so what I first want to do is in the last video, I looped through this array, and the way I did that was by having a variable i, we waited until it was, what do you call it greater than the length of the list? And then once it was, we simply broke out of that, that loop, right? Okay. So an easier way to do this, is to do something like this. So we're going to have the same exact syntax, except in these brackets, something is going to be different. Okay? What I'm going to do if I want to loop through every element in this list is I can do something like this, I can say for element colon arr. Now what this is actually going to do, I have to do this sorry, string element, or I can't say string because that's something we type into element in our array. So what I'm doing now is I'm saying that every time we loop through this loop, right, what we're going to do is we're going to declare a new variable called element, and it is going to be equal to the next element in our array. So in this case, when we first loop element is going to be equal to one, and then elements going to be equal to five. And that's going to be equal to seven, and then three, and then four, and then five. And this is a way easier way if I wanted to, like print out the element, or look at certain elements to do so rather than having to have like a counter variable i and then index all of the different elements, especially if we don't know the length of the array, or we don't want to do dot length, because this is automatically going to go from start to end. Okay. Now, I'm going to show you because, obviously, we need an example to really understand this. But the first example I typically like to do is just printing out all these elements to show you that is indeed working. So in this case, we'll say element, okay. And we'll just print this to the screen and see what we get. So in this case, you see, we get 157345, right, starting at the beginning going to the end, the way this works with the colon is again, we're just grabbing the elements in order, and we're using those as a variable element. Now, a lot of times when you want to do with this is you want to be checking the element, but you also want the index as well. So you want the element and you want the index. Now we could use what we used in the last video where we just have a counter variable, and that way we have the index and the element because we can do like arr of one like all that, okay, I. But a way that people typically do this is with like an outside counter variable that you increment yourself. So I'll show you how this works. So what we're gonna start off by doing is just creating variables called int count equals zero. And then within this loop, we're going to increment count ourself. So now, every time that we run the loop, we're adding one to count. So that count is keeping track of the index of the element. So if I print out the element plus we'll do is I can't do that plus a space plus our count, you can see that this is keeping track of the index. So what's happening here says one is that index 05 index one, and it keeps track of all these different indexes for us. And that's a really easy way to do that. I just wanted to show it doesn't really make sense for this example case, but I just wanted to show you because there will be situations where you want both the element and the index, and it's easier to get the element just by doing this with this colon. Okay. So again, when you're doing a for each, this is what this is known as, because it's going through for each element in the array, we are doing something, okay. Alright, so the next thing that I want to do is I want to show you how we can populate an array using a for loop. So right here, for example, we have a, what he called a new string array that's empty, right, like all these elements are null, and we want to populate them. So the way that we would go about doing this, and this is a common example of what you want to do this, while I'm showing you this is we create a variable and say again, int i equals zero, we will say, well, i is less than and then names dot length, right? And then we'll do semi colon, and we'll simply add one to it. So this is the exact same thing as we done before. But I'm going to show you how we can actually add the elements because it's a really common use case. So what I'm going to do here is I'm actually going to use the scanner to get a new variable or to get like a name from the user. So I'm just going to say scanner SC equals new scanner and then we need system.in Okay, and actually think I should probably not declare this every loop but put it Up here, because we're just going to use the scanner, right? So we'll say string, input equals SC dot next line like this. And this way, every time we run the loop, we're going to get input from the user. And you know what, let's also just print out here, system, dot out, print ln and just tell the user we want, I should let us do print not ln, we'll say, input like that. So that way they know what to type in. Okay, so input, we're getting input. And now what I'm going to do is I'm going to add the user's input into our array. So how can I do this? Well, this is really easy, I can just do names, i is equal to input, right? So we're just declaring that whatever index we are in the loop right now, so whatever value by well, that value in the list or sorry, the list, I keep calling it lists, it's an array I'm going to use to Python is going to be equal to whatever we typed in. And then if we want to print out the entire array, what we can do is we'll use another for loop. So we'll just say for, and then this time, it's going to be a for each loop, right? So we'll say for an a Stanford name, string, and, and names, okay, then we will simply just do System dot out dot print ln, and we will print every value of n. Okay, so let's two good examples. Let's run this and just make sure everything's working. So we run this input, I'm just gonna type Hello. I guess I wanted names in that, Tim, Bob. Joe, Bill. And then there we go. So we ran that five times. And we get Hello, Tim, Bob, Joe. And Bill. Awesome. There we go. So that gives us all the values that we need. Okay. Okay, so now what I want to show you guys is how we can break out of the loop. So if we're in the loop, and we're going through, and we're doing operations, and we've not yet met the condition, where are like, so the loop is gonna keep going like is not greater than whatever value or whatnot. Okay, then we want to break out of it. How can we do that? So how can we just get out of it in the middle of looping? Well, there is this magical little keyword called break. And what this does, is whenever this is encountered inside of a loop, it simply breaks out of the loop. So in this case, what would happen is, since I have break at the end, we would do these first three lines, then we just break. And this would only happen one time, no matter what no matter what any of this stuff said, this loop would only happen once. Now, I'm going to show you just down here in this loop, how we can break out based on like a certain condition. So for example, say we encountered the word end. Or what do you call it? The word Tim, what am I saying? And I was just reading that, if we encounter like the word Tim, while we're reading through the list of names, then we just want to break out like we don't want to print any more names anymore, we just want to break out. So the way that I can do this right now I can say well, we're gonna we're gonna print Tim, but we'll break after Tim Okay, so what I'm gonna do, I'm gonna do an if statement, I'm gonna say if and equals equals or not equals equals dot equals, okay. And in this case, we'll just simply put Tim in here, then what we're going to do is we're going to break. And in this case, Now, whenever we encounter Tim, we're simply breaking into the loop. And that means we will not print the rest of the names. So if I run this string, this console up here, and we run and we say, Hello, let me say name. And then we say, Tim, and I'll just show you this Tim, and Tim. And I run this here, you see we get Hello, name and Tim. And these other two Tim's do not print. And again, that's because once we hit m, and n is equal to 10, we simply break, okay, and we get out of the loop. And that's like a really easy way to just break out of the loop. And this is going to work for a while loops that we do in what do you call it the next video. Now typically break is not something you want to be using a lot like you only use this if you really have to, it's better to just make these conditions work the way they should, and have the loop run, like as many times as it needs to run, you know what I mean? So just try not to use this too much. But I mean, there's nothing really wrong with using it, people just are frowned upon it in the programming world using the word break. Okay. We're gonna be talking about while loops. Now, while loops are very similar to for loops, anything you do with the for loop, you can indeed do with the while loop. That being said, they do have different use cases in terms of where they're most useful. But just remember, anything you do with the for loop, you can do with a while loop, anything you do with the while loop you can do with the for loop, they're completely interchangeable. And if you only had one of them in programming, you'd still be able to do everything. It just might be not as I don't know, nice to code, that's the right word for it, or elegant is probably the better word. So a while loop is going to work when you typically don't know how many times you want to loop through something. So it's kind of like a question. Like, you know, it's going to be based on this condition. But you're not really sure like, if a for loop is more like, you know, you're gonna do it a set amount of times a while loop is it could change based on the program based on user input, okay, something like that. So what we're gonna do here with this while loop is I'm just gonna set one up, and then we'll just talk about exactly what it does. So in this case, what I want my while loop to do is I want it to just continually keep asking the user for input until they give me like a certain word or like one or two words. Okay, so in this case, what I'm gonna do, I'm just gonna say, let's see, maybe just get an answer to be faster, say int, x equals SC dot, next int like this. Okay? And what I'm gonna do is I'm just gonna keep looping through until they type the number 10. Okay, so all I can do this as you just type the keyword Well, in here, and then in these brackets is going to be your condition. Now, this is why I focus so much about conditions in the first few videos, because they go a lot with if loops while loops for loops. So whenever while this condition is true, then we're going to run the loop. So in this case, I'm going to say, well, x does not equal 10. Okay. Yeah, exactly. That's true. So if they type in 10, then you will not continue to do this. Otherwise, we will continue to do this. So that means I'm also going to have to get the INT in here, because every time that we run this loop, we want to continue getting x. So in this case, we already have X, fine, we just do x. And what I'm gonna do is if they don't type in 10, I'm simply going to tell them like type in 10. So we'll just say, dot print, ln, in this case, I will just say, type 10 dot, dot, dot. And now what we're also just going to print out, because I like to do this, we'll just do system dot out, dot print, ln, and in this case, we'll say type a number. Cesar knows what we're looking for. Okay. And that means we're also gonna have to print this here. And it should just be print, not print and print ln my apologies. Okay. So again, the way this is gonna work is we're just going to continually keep looping through this until eventually the user types in 10. In that case, we will break it, okay, and we will not do this anymore. So let's run this type of number, let's type four. So it's type 10, data, type a number, type five doesn't work, type 10. There we go. And we broke out of the loop, and it no longer asked us for that number. Now, these are actually really simple. It just wow, this condition is true. Do everything that's in here. And that's all you really have to know about while loops. Now again, like we can what I was saying we can do everything that with for loops with while loops, because we can also count and Wallops as well. So just like I did before, I could do something like int count equals zero. And then every time we run this loop, we could just say count plus plus. And then maybe at the end of our loop, we wanted to do like, tell them how many times they messed up. Okay, what am I saying print system dot out, dot print, ln. And in this case, we'll just say you tried, tired, you tried. And then plus couch. plus, times scan, make sure we add a little space here. Alright, so now if we run this, and we'll say like 123 and 10, you tried three times until like, eventually, you got it. Okay. So that's like a really simple way to do stuff with while loops. Now, you guys might notice that this code here like this, these lines are repeated up here. So I have this index and this type of number. So how can I do this without repeating those lines? Because I don't want to have to type like, what if I wanted to ask a ton of different questions and then do the wallet? Well, I don't want to have the same section of code appearing multiple times. So there's actually something called a do while loop. So what I'm going to do is I'm just going to erase all this. And I'm going to set up this a do while loop. And it's pretty much what it says we're going to do everything while this is true. And you'll see how it works in just a second. So I'm going to type the keyword do brackets, and now everything in this brackets is what is going to happen. Wow. The condition that I put down here is true. So the condition here is going to be the same. Well, x does not equal 10. We're going to do everything in here. So now you can see this is working fine. There's no issues. And what I'm going to simply do is I'm going to take this, these two lines here, I don't need that scanner. So we're not going to redefine that every time. And I'm going to paste them in here. And what this is going to allow us to do now is x does not equal zero. Create local, gosh, okay. Let's just do this. int x and then x. Okay, perfect. There we go. So sorry, that was just a quick issue. But what this is going to allow us to do is we're automatically going to do this once no matter what this is going to happen once because we're going to do this and at this point x is not equal to 10. So we're automatically going to do this once which means we don't have to have it up top and then down below. So we do that. And then we check the condition. If it's true, we'll do it again. Yeah. And if it's not, then we will break. So we can do this, we'll say type a number, let's do four, let's do five, let's do negative 00. Number, okay, and 10. And there we go, we break out of the loop, and everything is working fine. And that is pretty much it for while loops. Again, if you wanted to set one up to look like a for loop, then you'd literally just have to create a variable in this case, say like index equals zero, you can set up a while loop. So you say a while and you say, x is less than or equal to 10. And then in here, you just say x plus equals one, or plus equals two, or whatever value you want to add to it. And then you can just do what you would do in the for loop underneath your increment. Or you could put the increment, typically you put it at the end. So at the end of the loop, you're adding one and then you're checking, okay. Now in this video, I'm going to be talking about sets and lists. Now sets and lists are from something known as the collection interface from Java, I believe, that's what it's called someone correct me if that's wrong, but I think that's the name. And they are fairly complicated. Now, I'm just going to talk about really the basics of them, there's a lot more to do with sets and lists. I know, I'm probably gonna get some comments from some guy who says, Wow, you really didn't talk about a lot of this, you didn't. But I can't explain all of it to you guys right now. Because it's very difficult to understand, if you don't know a lot about data structures, which in our case, we don't. So I'm just going to talk about what a list is, what a set is quickly in a very basic standard implementation of them. Now, the reason I'm doing this is because whenever you're programming stuff, like a lot of Java tutorials you watch probably won't talk about these, because they're really complicated. But you're going to need them to do certain things. So for example, with an array, what I talked about before, how you could like, you had to set the size of the array, like you had to know how many elements you wanted, you don't need to do that with a set or with a list. And that's the main advantage of it. Because a lot of times, we're gonna be adding things into per se a list or set, and we don't know how many things we're gonna be adding. So we can't define like an array of that length, if that makes sense to us. So let's actually just get started, we're gonna talk about sets first, and then we'll move into lists. So I'm just gonna create a set, and I'm just gonna type it out and then kind of explain exactly what I'm doing, I'm just going to call this set t equal to new, new hash set, and integer. Okay, so this already probably looks confusing. And if you're typing this out with me, you're getting these red lines. Now, what we should do to get rid of these red lines is we just have to hover over them and click Import set by like clicking on whatever it says there. If you don't have you're not using this Id just literally type import Java dot util dot set. And for hash set, same thing, we're gonna click on it and import it, just because this isn't like built into main, the Java functionality. Alright, so we have a set. Now what is a set? How do we create it? Well set is a collection of unordered elements that are unique, meaning that a set cannot contain the same element twice, and it doesn't know where that element exists. So you can kind of think of a set as just like a big bubble, and you kind of just throw things into it. And it doesn't really know where they are, they just knows that they exist there. Now you also have to understand that can only be unique things. So for example, I've created this integer set. And this is the way that you do it. So you type the keyword set. In these little like greater than sign less than sign river, you want to call it tags, if you're talking HTML type integer, and I have the name T, and I'm setting that equal to new hash set. Now you don't have to understand what a hash set is just know that it's like the standard implementation of a set. And then same thing, the types are integer and then these brackets here. Now inside of these brackets, if you had another set you had created, like say a set created a set called like W, I could put w in here. And assuming it had any elements in it, this set would get all of the elements from W and start with that and then you could add things into it and whatnot. Okay. So to add things to set, I'm just gonna do this. We'll go through and see how it works. You simply type dot add, so I'm going to say T dot add. In this case, I'm going to add five. And we'll just copy this and we'll add like a few different numbers into our sets just because it's seven, and what five again, and add nine. Okay? Now what I'm gonna do is I'm just gonna print this set out to show you what it looks like. Now remember, I said unordered collection of unique elements. Okay, so let's print this out. And you can see that we get five, seven and nine. And notice that this odd right here actually didn't do anything. And that's Because since we already have a five in our set, when we try to add another five to it, since it already exists, it doesn't care and it just doesn't add it. Alright, now I'm gonna add another element. In this case, let's add like negative negative zero, negative eight, alright as our element. And you can see that we don't have any specific order. Now, see, when I printed this, like I had added 579, and negative eight, so you think that should be the order that we get it or it should come in some sorted order or something like that. That doesn't happen with a hash set. Okay, standard hash set. And that's just because again, we're just a bubble, we just know that things exist, we don't care where they exist, or how many times they exist, we just care if they exist. Now to see if something exists in a set, and this is typically something you want to do like this is a main operation, checking if something exists, that's why you use a set, you can type T dot contains, or like your set named contains, and then any element in here that you want. So in this case, I can do like, if five is contained in the set, and it's going to be able to tell me that really fast. Now, I can't really explain to you why sets are so fast. But just know that whenever you're looking for something in a set, you can do that very quickly, like very fast, like in constant time, it doesn't matter how big the set is, the set could be 2 million elements, or it could be five elements, it will take you the same amount of time to look if something exists in the set. Okay, and same thing with adding and removing things from the set that happens almost instantly. As opposed to with arrays, the larger the array gets, the longer it's going to take us to look through and find certain elements, okay, just, we have to understand that. So what I'm gonna do is create a variable, I'm just gonna call Boolean, x is equal to this. And what I'm going to do is I'm simply just going to print x. Now let's see if that is contained. And in this case, yes, it is, five is contained. Again, if I do something like zero, then obviously we get false, it's not in there. To remove something, we can type T dot remove, or set name dot remove, and then whatever the element is that we want to remove. So in this case, we want to remove like nine from my set, I would do that. And then if I print my set, so in this case, t, which get five, seven, negative eight, because we removed nine, those are kind of like the standard operations, to I'm trying to think if there's any other ones, okay, so there's one more, or there's a few more, but I don't know which ones are important, you can clear an entire set by just doing dot clear. So just simply remove everything from it like that. To see if a set is empty, you can do.is empty, and this will literally just tell you if it's empty or not, to get the length of the set, you can do dot size, and this will tell you how many elements so in this case, value, size, change this to an int, and just print x here, then we get a size of three. So like, again, if we had nothing in there, the size would be zero, so is empty, and that are kind of like similar in the sense that you can just check by the size. Um, and yeah, so that's a hash set. A hash set is like the standard set. And that's the way that it works. We explained it to you. Now they also have a tree set. And we also have a linked hash set. Now whenever you use these things, they're gonna pop up here, I'm not really gonna talk about what these do too much. I'm just gonna kind of show you the way a tree set works. Now tree set is similar to set in the sense that you can only have the or a hash set, sorry that you can only have unique elements. But these are actually ordered and they're ordered in a tree data structure. You don't have to understand what this means just know that it's like it shows up ordered. what's what's our problem here, just want to read this error. Tree set cannot be resolved to a type. Interesting. Okay, Teresa, well, let's just try this. That still worked. Okay. So anyways, I don't know why I was showing me there. But Teresa is going to actually give us an order. So if I type T like this, you can see that we actually have an order for the set now. So negative eight, five, and seven. Now like arrays, like we can't just index the set. And we can't just say like t zero, like that doesn't work doing that, like we were able to do with the race. But when we print it out, or when we look through the set, it maintains this order in the katri functionality that I can't really explain to you. Now linked hash sets are this. So linked hash set again, we're gonna have to import this up there. It's linked hash set. And this is similar to a basic set it just faster on certain operations. So I'm not I don't really want to talk about them too much, because I feel like I'm already confusing you guys, but just understand if maybe you know a bit about like operations and speed and time complexity. They have a linked hash set, a regular hash set, and a tree hash set or tree set. Whatever I typed, okay? Alright, so that's enough for sets. Don't worry if this is a bit confusing, like, we're, we're not going to be using these too much, I just want to show you cuz I feel like you guys are going to need to do this for some of your projects or whatnot if you're learning this for a reason. Now, we also have lists now lists, these are easier to understand, don't worry. But there is again, two types of to create a list, what we're going to do is we're going to type array list, we're going to give it a type in this case, I'm just gonna give my integer type. And notice how I'm not typing int I'm typing integer, just that's important that we need to use integer here instead of int. Okay, so ArrayList integer, I'm going to call this one Tega and equals new array list. And we'll type integer, and we'll put brackets and there we go. Now we're gonna have to import this so important ArrayList up there. And we now have an A list. And what a list allows us to do is it's, you can almost think of it as the exact same thing as an array, except it's a bit slower. And it can change sizes, so we can add things to it, we can remove things from it. And if we get like the end of the array, or the end of the list, sorry, we can add another element into it, it doesn't matter. So we can have like a dynamically sized array. These have pretty much identical properties to the set. So to add things, you can do t dot add. And you can add like an element you want to add like one right? Okay, that works fine. To remove things T dot remove. Now to index things, because just like an array, we can actually index things with the list because this is going to care about the position, it's not going to just care that it exists like a set, what we can do is we can do t dot get, and then we can give an index, right? So even it's showing, it's always saying index right here. So I do dot index zero, then that would give me one, right because one is added in there. Now to like put thing to put something or to set something on a certain index where you do this is T dot set, and you type the index and the element. So I want to set index one per se to be equal to like five, then that's where I would do it, index one is five, okay, we print out t here just to show you what it looks like. Okay, sorry, that's we can't do that we have to do t, we have to add something. So to set something like this, sorry, you have to actually have something added at the index. I forgot I didn't add that. So I'm just gonna add to what I'm doing now essentially, is what this set actually does is you have to have something already existing at that index. And this is going to change that index for you. So this is to change an already existing index. And before I was trying to set one, when we didn't have that in so that was my mistake. But anyways, there we go. So now that works. We've changed to equal to five and twos up position one, right. So that's the way that that works. I've got a thing up here, I'm just going to read through a few of these set. Yeah, okay, so that's the basic ones. Again, we have dot size, so T dot size, we can do t dot empty, or is empty. And this is actually really useful when it's called sub list. And what this allows us to do is get from certain indexes. So T dot sub lists, let's see at argument, yeah, so we just need an int. So this is going to allow us to get within a certain range. So say I add like these a bunch of times. Okay, so we have six elements. Now, what, what I want to do is I want to get from like index one to index three, and I want to print that to the screen. So let's just take this and put this here instead. So let's get rid of TIG or the semicolon, and print out and see what we get. So we get here now is five and one because although our list actually has what do you call it, like six elements in it from here, we can just get the elements from 123, not including three. So if I type like 124, then you should see we get one more element in here, we get five one and two, because that's from from index one to index four, but not including index four. That's what we're grabbing, we're getting all those elements in the the sub lists like that. Now, this is ArrayList. We also have linked list. Again, this is another data structure that I can't really explain to you just understand that it is faster at certain operations than an ArrayList. So for any of you to understand the difference between this you have linked lists and ArrayList. And you guys, I recommend you to play with those and figure them out on yourself. Anyways, we're coming up on about 15 minutes now almost. And that's pretty much all I wanted to talk about with sets and lists. Now I know this video might have been a bit confusing. There's a lot of stuff that I wasn't able to explain to you guys. But just understand that if you're trying to do something and you don't know how long you want something to be like a list or an array. You don't know how long you want it to be. It's a different amount of time. If you don't know, you would just use an ArrayList the way that I showed that to you before, so ArrayList like that, because then you can add things, you can get things, you can set things. And you don't have to worry about like having a designated length. The reason you use a set is when you don't care how many times something exists or where it exists, you just care if it exists. And the reason a set is better is because it's simpler. And it's a lot faster to do operations on in terms of like a computer efficiency standpoint, that's when you would use a set. I'm going to be talking about hash maps, or like Java maps. The reason I say it like that is because there's a few different implementations of maps, similar as to how there's different implementations of lists, and like ArrayList, and all that stuff. So maps, if you're coming from Python, like me, you can think of them as dictionaries. And I'm only talking about three different types of maps. So a hashmap, a tree map, and what was the last one, I got it written down here, linked hash map, sorry, just forgot about that one. So pretty much a map is known as a key value pair in any other languages, they're typically called dictionaries, or hash tables, or hash maps or whatnot. Okay, so to create a map, and I'm just gonna do this, and then we'll talk about exactly what it does, we're just gonna create a map M is going to equal to new hash map like this, okay. And this is your simple syntax, now to we have to import this. So I'm just gonna import Java dot util. So just by clicking on it, we have to import map as well. So we'll import the map there. So you see those. It's all coming up now for us. Okay, so now that we have that, I want to talk about exactly what a map is. Now map, like I said, is a key value pair, meaning that it's similar to like a list and an array in the sun, so you can index things. But instead of indexing them by numbers, you index them by keys. Now keys can be anything that you want. A key could be a string, a key could be an array, actually, I'm not sure if it could be an array, but it could be a string, it can be a number, it can be a char, it can be a float, what like pretty much whatever you want can be the key. And that key links us to a value. So the easiest way to kind of demonstrate this is just to do it, and then to talk about what's really happening. So to put a new value into a hashmap, or into a map, what you do is you have to specify a key, and a value. So you type whatever the name of your map is, in this case, m dot put, and then you need to put a key in a value. So in this case, for my key, I'm going to type Tim, and it is going to lead to the value five, so I type Tim, and then the value is five. So I put that in there. And now I'll just show you what it looks like if we print this out to the screen. Because I think it will give us a decent representation system. What am I saying System dot out dot print ln Sorry, guys more tired today. And we'll print em and see what we get. So in this case, you can see we see this a curly braces as Tim is equal to five, meaning that if we're to index Tim, we get the value five. Now, how do we do that? So how do we actually get a value based on a key, the way we can do this is if you put square brackets next to your map, are actually you can't do like this Python, we have to m dot and then get Sorry, I'm still used to the Python syntax here, guys, we type m dot get Okay. And then we put the key in here. So in this case, I'm going to put Tim as my key. And what you should already be predicting what we're going to get out to the screen. In this case, we get the value five and not as because the key Tim leads us to the value five. Now to put another thing into our map, we can do this, right. So we do Tim we could do like Joe, and Joe doesn't have to point to a number, it could point to another string. And that string could be like, I don't know x, okay. And we can just do whatever we want. Like we can have the the key one and or the key 11 and the key 11 points and 999. Okay, and now if I just print em out, you'll see that we don't get any issues. And that this works fine, we get Joe equals x Tim equals 511 equals 999. Okay, now, this is an extremely fast data set, meaning or don't type, whatever you want to call it, meaning that everything from adding to removing to overriding to getting happens in constant time. Now again, like I talked about in my stats video, you don't really have to understand what that means. But if you do, that's great. And just know that this does happen in constant time. Now I'm going to show a, I still show the tree map and the what was the other map talked about linked hash map first, and then we can kind of talk about the differences between them. So with a hash map, as opposed to the other type of maps, I'm going to show you this one does not retain an order. So all of these maps can only contain unique elements or unique keys meaning that if I try to add another key, so I try to add 11 nine Try to add this to be 998. Instead of adding another key that's equal to 11. We're simply overriding this already existing key that is 11. So in this case, you can see that we override it and we get 998. You cannot have to have the same keys existing in the map. But you can have to have the same values if you'd like to. Okay, so sorry, that kind of got me off track. But that was important to understand. So this hashmap does not guarantee the order in which we add things in. So you can see that I added Tim, and then I added Joe, and then I added 11. And it showed me Joe, Tim and 11. Now this is not any kind of sorted order, because how do we sort numbers and strings and all that stuff together? It's not in the order that we added it in. So what order is it in? Well, it is in no order. And that is why this hashmap is extremely fast, because it does not keep track of the order of elements when they go in. So just know that if you're trying to like look through the map, because you can iterate through maps, and I'm going to show you that in a second. It doesn't keep it in the correct order. Okay. Now, the next map that we're gonna talk about is the tree map. Okay, now this tree map is what we're gonna have to import it, of course, is similar to the tree list, or the tree set, or whatever one I showed you in the earlier video. In that when we add things in, it's actually going to keep it in a sorted order. So if I run this, I'm actually curious to see what kind of sort we're going to get. Okay, so we don't get anything. So that's, that's actually a good area to run into. Whenever we're using a tree map, the types that we add to the map have to be the same, meaning that the keys have to be the same datatype. At least I'm pretty sure. So I'm gonna just gonna see if I remove this, if this is going to work for us. Yes, so in that case, we do get in a sorted order, we get Joe and then we get Tim, because obviously j is before T. And that's where it's going to sort strings. So if I try to put like an A value in here, so it's Yeah, it's even true on a key value, I'll literally just put like a is equal to b. And I guess we can't set equal we have a comma. What's our air semi colon, always forgetting those are? Okay, so we'll run this. There we go. So you see, we get a first because obviously a well it's first letter in the alphabet. So that's going to show up for Joe. And for Tim. So that sorts the order for us. And that means that the data types for the keys that we pass in have to be the same. So we can use numbers, we can use strings using whatever data type you want, there's got to be completely the same for that map. Now, the other type is a linked hash map. And what this does, is it's similar to a list in that it keeps the same order that you add things into it. So in this case, if I print out m, you can see we get Tim Joe and then a and that's because it's actually going to maintain the order in which we added elements. So it's gonna say, Tim, that was first element. So that's gonna be the first thing that we show. And then Joe, that's gonna be the first thing and then a nursery second, and then a, this is gonna be the third thing, because that's the order in which we added them in. And those are the only main differences other than, like, the speed of which these things run out, that you have to kind of understand right now, okay, and typically, whenever you do anything, you're just gonna be using a hashmap, you don't really need, like a linked hash map, or a tree hash map, or tree map, whatever it's called for any of the stuff that we're gonna be doing right now. So what I'm going to do now, is I'm just gonna show you a few methods, how we can kind of clear the maps, how we can like remove elements, and some useful things you might want to do. So what we can do to get all the key values or to get like a certain key value, we can say, Actually, I'll just show this one first. Well we can actually do is is just cool things that are going to be really useful to you. And dot contains value. So this is let's see, this method contains values not available for type map. Hmm, interesting. Match contains value object. Yeah, so we just have to put something there. Okay. So m dot contains value. And then in here, we're just going to put like any value on so in this case, B. So what this is going to do is it is actually going to check for us if this value exists in the map. And remember, the values are all these these second elements here. And they are linked up or like attached to the key. So it's going to tell us if b exists. Now we can do the same thing with keys and the keys are more useful. And I'll show you why in a second contains key and in this case, for the key I could put like contains the key five, right and that will give us a true or false value similar to what we're doing with sets and lists in the last video. Okay. Now the reason keys are more useful is because if I try to do something like m dot get, and I put the key, let's say five, well the key five does not exist, the value five exists, but the key five does not exist. So watch what happens when I run the program. m dot get five actually let's just see what this is printing out to us. Because I'm curious if this is gonna crash. Let's Let's see here. I'm not getting five No, yeah, so this isn't gonna actually crash for us. If we try to get Ah, what do you call it a key that does not exist in the map, but it's going to return us a no value because this key does not exist in the map. That's actually interesting. I didn't know that in Python, if you try to get a key from map or from a dictionary, and it doesn't exist, you actually get an error. So that's interesting to know. Anyways, I guess another method I could show is, let's see here, dot values. So what this is going to do is it actually just prints out all of the values in the map. So if I copy this, and I simply print it down here, we get m dot values. And in this case, it'll just give me x, b, and five, which are all these and you can see, it gives me that in no particular order, it's important to remember, values, let's see if there's any other ones we can use. We can use clear so I just got a text document beside me cuz I always forget all these to show you, I always forget which ones. So Am I clear? Obviously, this is just going to remove everything from the, what do you call it the map. So we get an empty map. And I believe the last one is, is empty. And this one like that is simply just going to tell us if the map is empty. Or if it's not up to you know how much time we had 10 minutes. So I actually I am not going to show you an example of using these maps. But if you want to think about this, and maybe try programming this yourself using the maps that I just showed you be good exercise. And that is given a string, or like an array of characters, count all of those characters into a map. So have a key that's equal to, let's say the letter, and then the value for that key is equal to the how many times that letter occurs, or how many times that character occurs, and try to do that yourself. And if you're able to accomplish that, well, then you're definitely learning and you're understanding the stuff that I'm explaining. What I'm going to be doing is showing you some common problems you're going to want to solve and how you can do that with the information I've showed you so far. So kind of bringing everything in now, mixing it all together, and using all the things. And this is a really good way to kind of like apply all the knowledge that we've just learned into solving like a few common computer problems. Because a lot of the time you guys learn how to do all this stuff, but you don't know how to kind of mix it all together. And that's what I'm trying to do in this video. So I'm also going to be showing you some like useful methods and some things that I may have forgotten to talk about in previous videos. So yeah, that's what this video is going to be about. So in the last video, I mentioned that a good exercise to do would be if you have like, I don't know a word, and you want to count or like a sentence or a string, you want to count all the letters and store them in like a hashmap and have the letter as the key and the value being how many times they appear. So I figured for any of you guys that were brave enough to attempt that on yourself, I would show you a solution here quickly to doing that. And for any of us who didn't see that, make sure you pay attention, because this is really useful, it's going to help you also to understand kind of how maps work and how you can use them. So what I'm going to do first of all, is I'm just going to create a string, let's call str is equal to and I'll say, Hello, my name is Tim. And I am Cool. All right, very creative string name anyways. So we're going to do that just because we're going to count all the letters in the string. Now the human way to count this would be to go through and literally read like each letter and be like, okay, so I have an L how many times the L appear. But I will show you how we do this with maps and for loops, like very efficiently in computing. So what I'm going to do is create a for loop, what we're going to do is we're going to loop through the string. And the way that we can do this is because if I try to do like for char our like x because it's going to be character, right. And in str you see we get this red line, it says we can't iterate over a string. So the way that we can do this is actually a cool method and a useful method. And it is going to convert the string into a character array for us. And the way that we can do that is by doing angas dot.to char array. And this is if I literally just print this out for you, if you want to see what it looks like System dot out dot print ln is simply just going to put every character so including the spaces into a character array for us. So let's just run this. And you can see it just is literally just printing this entire thing, but it's actually in an array, and this is going to allow us to loop through it. So you'll see in a second. Okay, so what I'm going to do now is every character, I'm going to see if that key already exists in the map. If it does, I'm going to get the value because that value is gonna be how many times it exists. So in this case, say I'm looking for like m it already exists in the map, I'm just gonna add one to it and then overwrite that key with a new value. And you'll see what I mean here in a second. So we're gonna say if m dot contains Key of x, then what I'm going to do is I'm going to say, old, we'll say int old equals m dot get, and then the key is going to be x. And then what we're going to do is, what's the issue here, cast int, if I need this, forgetting all my brackets, int old equals m dot get x, and x should be interesting one second, saying I have to cast this to an integer. Okay, let's just do this, I don't think we actually need to do this, but let's just cast it to an int. All right, anyways, and then we'll say, dot quotes. And for the key is going to be x two, that's going to be the character. And we're gonna say old plus one. Now, what this should do for us is just increment the, the amount, so that's going to go up by one now otherwise, so if that key does not exist, what we're going to do is we're going to put into our map, a new key, and the keys value is going to be one because we just found the first occurrence of that letter, and the key is going to be x standing for the letter. And that should work. Now after we do that, I want to see the counts of all these letters. So to do that, it's really help I spelt system correctly, we're going to print the line, and we're just going to print them. Okay, so quickly, I know this fast, and you might not really understand exactly what's going on. But we're just looping through every letter in this string, we're going to check, the first check is going to see if the map contains that letter already. So as a key, if it does not, what we're gonna do is we're simply going to add in a key, and it's going to be equal to that letter, and it's gonna have a value of one. Because we just found it occurs one time, we already know that. Now, if for some reason, or if that key does exist, what we're going to do is we're going to get that previous count. And then we're going to add one to that previous count and override the key. So like, if the count is four, it goes up to five. Pretty straightforward. So if I run this, you can see we get a space, well, there's eight spaces, we get a, there's three AC, there's one D, there's one, and it goes through an account all of the different letters for us. And if we wanted to confirm those correct, we could go through and count them like that. And just by looking at it here, it does look as though that is correct. So yeah, that's a really common way to use a map. Um, yeah, it's really useful. And there's a lot of cases in which you want to do something like that. Okay, so the next thing I want to show you guys is something I forgot to do in the last video. And this is really just gonna take like 10 seconds. But pretty much to remove an element from a map, you probably already guessed, but it's literally just m dot remove, and then you just type the key. So I just felt like I had to say this, because I watched back my other video, and I realized I forgot to say it. So to remove an element, you do m dot remove, and just put the key. So if I want to remove like all the spaces, which actually wouldn't be a bad idea to remove from our counts, then if I do that. Interesting why it's not letting me remove that. Let's try that maybe, oh, it's because it's not because of character. My bad Sorry, guys, I've been doing string a character space is different. Yeah, so that it actually removes the character, the space from our program, or from our map, whatever. Okay. Now, the next thing I want to show actually is sorting. So sorting is something you typically want to do on arrays. So I'm actually going to remove all this, and I'm going to create a new array, an integer array. And I say int x equals, with cases do like three, and let's do a bunch of different values and see if we can get this to sort for us. Let's do negative 99. semicolon there for us. And to sort this is actually really easy, all we have to do is just type arrays, dot sorts. And then what it takes, it takes two arguments. Now the first argument is obviously going to be our array. So in this case, x, and then the other two arguments are actually optional. And what these do sources, three arguments not to what these arguments do is from a certain index, so if we want to sort just, let's say, like this part of the list that's highlighted, we can actually do that. And the way that we would do that is we would type one because we're gonna start at one. And then if we were going to 71234567. Funny enough, we will actually type seven. Now I know this is index six, but the thing is, it's going to work up but not including to that index. So if we type seven, it's going to that seven, but it's only going to sort up to like the actual number seven. Okay? And what this does, and I believe is actually just changes the list, we don't need to say like x equals Arrays dot sort, we just say Arrays dot sort. And then what we can do is we can do system dot out, dot print ln, and we can print x. And let's see if it did end up sorting that section of the list for us. Okay, so we actually, man of course, we can't do that. We're gonna have to set up a basic for loop to print these out just because when we try to print arrays, I forgot we get that little loop, or we get that message because that's the memory address. But anyways, let's say for int, i and x, and then we'll simply just print out I, it's got to make it complicated for us, doesn't it? And instead of printing, ln, we're just gonna print. And we'll just add a comma here just to make it separated. Okay, so let's run that. So there we go. So it actually did sort this middle section of the list for us, right? So we got 1234567, you see eight and zero, were not touched and negative 99 was not touched. Now, if you want to sort the entire thing, and you don't want to worry about these indexes, you can just put x, in this case, if we do this, we're going to get an 899, zero all the way up to eight. And yeah, so you could sort like from three to five, or three to six, or whatever, okay. And you can see, it's only going to sort like a few of the elements in the list for us, or in the array for us. So that's a really useful way to sort things at quite quickly, actually, in quite easily using just Arrays dot sort. And remember, you don't have to do like x equals Arrays dot sort. Because what it's actually going to do is just sort in place all the elements of x and swap them around, rather than creating like a new version of x that is sorted. Where you're going to be introducing object oriented programming, and talking about what objects are and getting a little bit into classes and methods. So I think the first thing to really talk about is what is an object. So an object essentially is just an instance of a certain data type. So we know we have data types, like int strings, bool, scanners, like all kinds of different things that we can use, like ArrayList, hash table, hash, list, whatever, or hash map all that stuff, okay. And those are all known as data types, right? We're classes if you want to say that. So whenever we create an instance, by doing something like this, like scanner, SC equals new scanner, essentially, what we're doing is pointing this variable SC to a scanner object, okay. And whenever we create any kind of variables, like just type like int x equals five, we're essentially saying x is equal to an int object of value five, okay? These objects are what allow us to have different properties for different data types. So you know how we can add integers together, or how we can do like, dot parse int, on on strings, and we can have like a bunch of different methods and stuff. Those are all specific to the type of object that we're using. So, for example, we can see here I have the scanner object, right, so SC is equal to a new scanner object that's taking system.in as an argument, okay. So we can only use this dot next method on SC because it is a scanner type. If I try to do X dot x, and I do a little semi colon here, you can see that we're getting can't invoke next method on primitive type int, because well, that method doesn't exist for int, okay. And that's like a really basic way to kind of understand what objects are essentially, whenever we're creating a new variable. So like, even just doing like string like, str equals, hello, what we're doing is we're saying, well, str is actually equal to a string object with the value alone. And because of, or based on the different types of objects, we have different properties, different attributes, things we can do with the methods we can call in, that's just kind of important to understand, you'll see more how we create like objects and whatnot, that are specific to like classes that we're going to make in later videos, okay, so it'll all start to come together. But just now kind of know that what I'm calling things objects, essentially, that's like you have a variable of a certain type, and it's equal to something, you're creating an object of that type. Okay, that's all we can have to understand for now. So now let's talk about methods. So some of you may already understand what methods are because I think I went through a very brief like explanation of them in previous videos. But essentially, methods are anything that you call on an object or on an instance of an object. So just to clarify, when instances when we're creating a variable like this of a new scanner object, we can say that we're creating FC is now an object like a scanner object, or we can say, se is a new instance of scanner of like the type of scanner, and those kind of are interchangeable. So if I say instance, instead of object, they're very similar. Okay, so just bear with me on that. So anyways, when we call this dot next method, we call it on the like, variable, right? So that's, that's pointing to our scanner object. So our scanner object allows us to use this method. Again, I showed you before, if I tried to call that on, for example, the variable x that was like an integer, that doesn't work because that object doesn't have that method associated with it. So a method is anything really that's just like a dot, and then whatever the method name is, and typically brackets, for example, if we had like, an array like so we have or let's do actually strings are just another string probably should have deleted all these. But that's okay. We'll say string H equals Hello. And I can do something like H dot length. And this is a method that simply returns to us the length of the string. And again, this works on our object, which is a string, but it's not going to work on our SC, because well, what is the length of a scanner. So if I type that, you can see that we're getting this red line here. And that's obviously not giving us anything, because this length method is not defined for a scanner type. So that's kind of a bit about like how we call methods. And you guys have already seen a lot of different examples of methods that we can use on different objects and different data types. Okay. And same thing when I say like data types and objects, data types are kind of like what the object is created off of. And you'll see that more in in future videos. Just want to clarify in case anyone's kind of confused, okay, so how can we create our own methods? Well, currently, since we don't really know anything about classes, we're going to be creating methods inside of this main class. Okay, now, this main class is special, because it is it contains this method. And remember, I was telling you guys at the beginning, this method automatically runs whenever we run the program. Well, that's different than other methods we're going to have in classes we create in future videos. So it's a bit hard to explain this method per se. But this is a method because a method is typically anything that sits inside of a class and the class is what's going to define like our data types. So scanner. In Java, we can't see it right now, there's actually somewhere that says public class scanner, and inside of that scanner class. So if you do like brackets like this, it has a ton of different methods that are different attributes that we can use by calling them from within this function. Okay. So if we want to create our own method within this main class, what we can do, and this is just the default way that we're going to do for now, I'm going to show you why we use certain keywords and stuff in future videos, but it's a bit advanced right now. We're something in type, public static, okay. And then whatever return type we want, which we'll talk about in a second. So let's get going to void the name of our method. So in this case, I'm gonna say like, Tim, okay. We have a public static void, Tim has your parameters, again, talk about that in a second. And then it's going to do something in here. In this case, I'm just gonna say system, dot out, dot print, ln, and we'll just say, when you call up, it just says Tim, like that. Okay. So what have essentially done here is create a static method that we can call from anywhere within this class, okay, and actually outside of the class as well. So what we need to do to call this method from inside this class is we can literally just type the method name since case by type Tim. And I put a semicolon like that, and we run the program, you see that we get is it running? one second here, sorry. Okay, so I figured out why it wasn't working, because we have this SC dot next coming in here. So I'm just going to comment that out for right now. And we will run this one more time. And you can see that we get Tim to the screen. Now I know, I didn't really explain what this is or how this worked. But essentially, what I've done here is I've created kind of like a function, okay. And it's known as a method. But in other programming languages, you might see this as a function. And this void keyword. What this means here is it returns nothing, okay, because in functions, we can actually return values, which I'm going to show or sorry, functions methods, we can return values, which I'm going to show you in just a second. So this stands for, we are going to not return anything, we're just going to do something in here. So in this case, we're just printing something to the screen. All right, now we have Tim. And this is the name of our method. And that's what we call here to trigger this to run, right. So if I wanted to pass some information to Tim, so say I wanted to print whatever string I passed to Tim, well, what I would do in here is I would type string, and then let's just say str like that. And now this means that whenever we call this Tim method, we have to actually pass it one piece of information, and that piece of information has to be a string. Okay, so I'm going to show you right here. So I type str, I put Tim and I put Tim in here like this, okay, and we run the program. Now we see we're printing out Tim, if I change this, like with a bunch of M's can see if we run this we're getting Tim. Now the way that this works, is this is called a parameter. So str is a parameter of type string. And that means that whenever we call this function, we have to type in arguments and what arguments are is what the parameter is going to be when we get to the method. So anything that goes in here in the call statement, which is what this is known as where we're like triggering the method to run is known as an argument. Okay, so Tim is an argument. When we call this what's happening is we're passing Tim as str so now it's saying like str equals Tim like the other whatever the string is okay. And then we're simply going to print to the screen. Whatever it is that we were passed. So in this case, 10, right? Now we can actually do multiple parameters as well. So if I wanted to do another parameter, I wanted to pass two pieces of information every time we call this function, I would say maybe int and X, okay? And now it means that I have to pass not only a string, but I have to pass an int. So that means we have to type an integer in here. In this case, I'm gonna do four, what I'm going to do now we're going to say four. And we'll say int i. And we'll say i is less than x. And we'll say i plus plus, we're just going to print this that many times. Okay, so let's see here. Boom, okay, so System dot out dot print line, what's more, we get in here, initialize variable, got to do that, sorry. Okay, so now we pass an int, and we pass a string. And what we're going to do is simply print this as many times as like the input that we typed in, okay. So you can see that we now we get Tim four times to the screen. And that's how that works. So we have arguments in here, the two arguments are Tim and four. And then we have our parameters, which are STR and x. And when we pass our information in str gets equal to Tim, and x gets equal to four. Okay, and then in here, we can now use those values by referencing STR and X, like I've done. So. Okay, so I hope that makes sense. Now, in terms of this public static, I'm going to talk about this in the next video. For right now, all this means is that you can call this not on an instance of the class, which is kind of what we're doing here, when we're just calling Tim, okay, because we don't have any object that's like a class main, which you'll see in the next video. Okay. So that's kind of how we can create our own methods. Again, we can create methods that return things. So that's what I wanted to talk about now. So all I'm going to do is going to create another method. And I'm going to say this is public static. And in this case, I want to return an integer value to whoever's calling this Okay, or wherever this is being called. So I'm going to type int, because this is what I'm going to return and the function is going to give back to us and the method is going to give back to us. And I'm going to say add two as the name. And we're simply going to take an integer x as our one parameter here, see what the issue is here. Method must return Yeah, okay. So you can see, it's already giving us a red line saying that we have to return a value in this method, because we typed in the fact that we were going to turn it okay. So what I'm going to do here is I'm simply going to return x plus two. And what this is doing now, semicolon is it's just taking a value x, and it's adding to it and it's returning the value to our program, wherever we call it. So let's just do something up here, and show you how this is working. So I'm going to say, system, dot out, dot print, ln, and here, I'm simply going to type add two, and then give it a number, in this case, six. Now, you can probably guess what this is going to give us. But essentially, what's happening here is we're calling add two, we're giving it the value six, so our argument is six, it's coming in here, and the parameter x is now set equal to six, we're going to return so back to wherever we call this x plus two, in this case, eight. So we get eight here as a value, and we go, and we bring it up here. And now this little line is equal to eight. So we're going to print eight to the screen. And you can see that we get eight as a value like that. Now, obviously, in methods like this, you're probably gonna do some more advanced things. And just adding to that shows you how we can return values. And I'll do one last example of returning maybe like a string value. So public static string, okay, and we'll just say, str as their name, because I don't really know what to do. And we'll take a string x, okay. And then in here, we have to return a string value. So what we could do is we could return x plus and an exclamation point. But I think I need to put that in double quotation marks, like that. So what we're doing now is we're adding an exclamation point to the end of our string, and we're returning that. So if I call str here. Okay, so we'll I don't know why keeps doing with my brackets, we'll do str. And then inside our brackets, we'll give it high, it should return to as high with an exclamation point. And indeed it does. And yeah, that's kind of how methods work basically going to be going over classes when we talk about creating classes, creating some methods, constructor methods, all that fun stuff, creating instances and objects. And yeah, so this is going to be kind of an advanced video. Don't if you've been following along so far, you'll definitely be able to follow along with it. But just know that now we're kind of getting into some harder aspects of Java. So if you guys don't understand this, please don't hesitate to join my Discord server, ask me some questions, leave a comment down below. Because this is absolutely fundamental. And you have to understand this before you can really start doing any serious programming. And that goes for kind of all languages, but Java, especially since it is an object oriented language, we need to understand classes and how to create classes. So without further ado, let's get started. So so far, we've been working in this class. Hold me now this is not really a true class. Because this class, all it's doing for us, is just running some code right away when we run the program. And that's what we have this public static void main function that automatically triggers whenever we click this little green Run button. Okay, so what I'm going to do now, and you can see that I have some methods that I've added in here that we just kind of use within here earlier. Okay. What I'm going to do now is I'm going to create my own class, from scratch from scratch, and we're going to start coding. So to do this, we're going to go to whatever our packages. So in this case, tutorial, one for me, and I'm going to go new and class. And I just did that by right clicking. And now I'm going to give my class a name. Now, for this example, I'm going to create a dog class. And yeah, you guys can create whatever you want. But I would recommend you follow along with me, since you guys are most likely new to classes. Okay, so now we have this thing, and it says public class dog. And you can see we open up in a new file. So whenever we create a new class in Java, we have to actually create a new file for that. Now, that's actually good, because it makes it really easy to navigate between different classes. Whereas in something like Python, you can just have all your classes in one file. Okay, so what we're going to do now, is we have this public class dog. So what does this What does this mean? Like what is a class or class is pretty much a data type. And whenever we create an instance of a class, like an object of a certain type, all we're doing is we're just using all the information within the class to like create an object. So you can almost think of it as like a blueprint for an object. Now, what problems do classes fall for us? Like, why are they useful? So I'm going to introduce combos a very simple problem, right? So I want to create five dogs, okay, I want to have five dogs, I want each dog to have a name, I want each dog to have an age. And I want to, at some point, be able to like call something and print out each dog's name and age and like a nice form. Okay. Now, we could do that we know how to do that. If we went back into main here, what we could do in this little, what do you call method here is we could just type a bunch of answer you say it's like dog one. And this is equal to four, and that's dog one's age, we say int dog two, and that's equal to five. Or we could go on and create 10 variables, five for the age and five for the names, right? And then we could go and we could print out each one each time. But that is incredibly inefficient. And what if I wanted to have like 10,000 dogs? Well, what would what would I do, then? Well, we could use like lists to create or lists or raised to create names and ages. But that's just not efficient, it doesn't look as good in our actual coding. So what we're gonna do is we're gonna use a class, and you'll see how we can kind of accomplish this problem. So within classes, we have methods and we have attributes, okay? Now attributes are kind of like variables that hold information for us. So in this case, we want to have two attributes in our dog class. And these are going to be the name and the age to create our attributes. And so the first thing we typically do when we create a class is right at the top of our class, we're going to type keyword privates. And then we're going to give a data types. In this case, we can say string, and then the name of our attributes, in this case, name, okay, and this all we have to do, we're just declaring that at some point in time, we're going to have the attribute name, and it's going to be storing information later on in our program. Okay, we can also do private int. And in this case, we'll do age. And this is going to obviously represent the dog's age. Now, if you want to have some other attributes, we would, again, type private. And we could keep going and type a bunch of attributes. Now, what is this private keyword? And why do we have public up here and private here? Well, what this private keyword does is it ensures that this name and this age are only accessible within this class, meaning that if I tried to do something over here, and I wanted to use this age and this name from this class, I wouldn't be allowed to do that. And the program would say, No, this is a private attribute, you can't access that. Why do we do that? Well, you'd find out in larger programs, but we can also create public attributes as well that are accessible to the other classes. Okay. So if I wanted my things to be public, I could put public for now whenever we're using attributes, we're going to use private, and it's best practice to use more private things, okay. And same goes for methods, which you'll see in a minute. Okay. So now we need to create something called a constructor method. Now this, you typically only create one of these, although you can create multiple, what this is going to do is it is going to run automatically whenever we call this dog class. And the way we create this constructor, and we typically need one of these when we have a class is we're going to do public. And we're just going to type the name of our class once again, so excuse me as a public dog, like this, okay. And you can see that now we're getting no errors, everything's fine. And in here, we're going to type the parameters or the information that we need to be passed in whenever we're creating a dog object. Now, in some instances, you may have nothing in here, when you create a dog object, all you need to do is just say you're creating a dog object. You don't need to give any information and that's fine. But in our case, we want to be able to create an age and a name with our dogs. So what I need to do here As I need to type string name, and int, age, okay, just meaning that whenever we create a dog object, we need to give it a name, and we need to give it an age. Now what I'm going to do is I'm going to set these values. So these attributes equal to whatever we pass in. Okay? So what I'm gonna do is I'm actually just gonna use a keyword and it's, the keyword is this, it's kind of hard. If you weren't watching, you think I'm just like saying this is a keyword and pointing something, but this like actually typed out. And then I'm doing this dot name is going to be equal to name. And this dot age is going to be equal to age. So what is this, this this keyword actually doing? Well, it is referencing the attributes of the class, okay? So when we type this, it is going to be looking up here to find all of our like private attributes. And in this case, we have an age and we have a name, alright. And that's how we reference things that are a part of the specific instance, we have this name and this dot age, okay, and I'm going to explain more and more of this as we keep going. It's hard to do it in like small steps. Okay. So now that I have this constructor method created, we can go on to create one more method, and then we can actually start using this class really simply Okay, so what I'm going to do now is I'm going to create another method, in this case, I'm going to type a public, I'm not going to return anything, so I'm going to use void, okay? And the name is going to be speak. And what this is going to do is it is simply going to say something or prints me up to the screen. So I'm gonna say system, dot out, dot print ln, why did that? Okay, print ln, and all we're gonna do is we're gonna say I am, and I want to say that the dog's name. So in this case, we'll say this dot name, okay? And we'll say plus, and I am, you know, plus, we'll say, this dot age, plus years old, okay? So suddenly gonna say like I am, whatever the name is, and I am, however many years old, not great grammar, but that's fine. So now, how do we actually create a instance of this? Or how do we use this class? Well, from our main class here, which we should still have open, and you know, we can delete all these, we don't need all that. So we'll get rid of all this stuff here, we can actually create a object and to do that of type dog, what we're sending individual type dog, and we're gonna give it a name. In this case, we're gonna say Tim, is equal to new dog. Okay. And then remember that we have to give dog some parameters, right? So or arguments because we have the name, and we have the age. So what we need to do is we need to give it a name and an age. In this case, we can type 10. And I'm going to type four. And now you can see no red line, we're looking good. So our dog's name is Tim, and it's age as for. Okay, so that's great. Let's run the program, make sure this is working. Everything's fine. Now, what I want to do is I want to use that speaker. So how can I use that? Well, what I'm going to do is I'm going to type Tim, which is the name of my dog or like the variable for it, dot speak like this, okay, semicolon. And let's see what happens. We get I am Tim. And, excuse me, I am four years old. So the way that this worked, right, is we created a instance of the dog class, and the instance was named Tim, and it referenced a dog object. Okay. So now when we created that instance, we said, okay, so this instance, this specific one is going to have an age of four, and a name of Tim. All right. So it stored that information up here in our private string and our private int. And then later on, when we decided we wanted to call this what said, Okay, well give me the instance you're calling it on. So in this case, we're calling it on Tim, we're gonna say okay, so Tim, what's Tim's name? Let's name is well, it's Tim. Okay, so we'll say, Tim, what's its age, its age. That's four. So we'll print for the screen. Now, we can obviously create multiple dog objects. So let's copy this and let's create a few more. We'll create three dog objects. I'm gonna say this is Bill, and he is seven. And let's say this is Bob, and he is 11. Okay, let's copy this and keep naming the same thing. Let's go Bob. And let's go, Bill, and then we can simply call the speak methods on them. Okay, so we'll say bill, and we'll say, Bob. Alright. And just to prove something, I'm gonna say Tim dot speak again, and we'll talk about why I do that in just a second. Okay, so let's run this. Let's see, I am Tim and I'm four years old. I'm Bill I'm seven. Then go on and you can read through them. Okay. Now notice, when we call Tim again, it still retains its age and its name. When we do this, we're not actually changing. Like this is not one variable. We actually now have three different names right? We have Tim we have bill we have Bob. And there's specific to each of these variables that are storing that dog object okay. So that means that we can hold like unique values for each of our different instances and we can have like infinite amount of instances of a class okay. Alright, so That is about it, I think I'm going to talk about quickly. I already talked about private versus public. Let's create some more methods in here and see what they can do. And I'll talk about a bit more about constructors because we're only at like, 11 minutes. So what I'm going to do now is I'm going to create a another method. And I'm going to call this get age. Okay? So I'm gonna say public. And in this case, we'll say int, get H. All right. And all we're going to do in here is simply return the age to, let's see a return statement to wherever we're calling from. So in this case, all we'll say it will return this dot h. Now, the reason I need to do this is because say, I want to get the age of one of my dogs, right? Like, say, I created it, I changed it around, I don't know what it is I want the age. Well, we can't simply do something like in other languages, we'd be able to do like Tim dot age, right? Now you see, when we do this, we get these little red lines. And it says the field dog dot age is not visible, and not as because again, it's private. So it's not letting us see it from over here in this main function only within this sorry, method only within this class, can we actually reference this variable, right. So to get the age, what we can do is we can call Tim dot get age like that, okay, and we can print that to the screen, we say like, and x equals, I'm gonna say system, dot out, print, ln, and x is already there. Great. So now if we run this, we can see that we get four down here, excuse me, at the at the bottom of the screen. Now we can actually do the same thing with like setting the age. So we wanted to change the age at some point, maybe Tim got a year older, well, what we would do is we have to create another method in here, this case, we're going to make it public. Again, we're gonna say public, and we don't need to enter this time, because we're just going to change something, we're not going to return to say public void. And we'll say, set age, okay. And then we're going to take an age because we need to know what we're going to set it to. And we'll just say this dot age equals age. So just like we've done up here, is the exact same thing, except we're just going to do it within the method set age. So now, if I want to change the age, so let's say instead of that, we'll say set age, and we'll give it a value of 10. Then we print out, let's just say Tim not speak again. What's gonna happen now sorry, guys, I'm a bit sick. If I keep coughing all over the place. What I'm going to do is, oh, what's your air timeouts at age 10? return type of set age to int. One second here, sorry, public, let's try this. Insert age, public void. I know I'm making a mistake over here. Oh, okay. That's why I can't do I can't set equal to a variable. I just call like Tim dots at age by about on that guys. We do speak, we can see now it says I am Tim and I am 10 years old, and we've changed from the age of four. So that's how we would go about changing these attributes later on within the the class. Okay. Now I want to do one last one, I want to create a private method and show you what this is. Okay, so I'm gonna create a private, void. Actually, no, let's do it. Okay. And we're going to call this add to it, it's not gonna make any sense with the dog class, but just, it's just an example. Okay. And in here, we're going to take actually won't take anything, but we're going to return we're going to return this dot age, plus two, okay? Now, this is a private method, meaning that it can only be used and seen within this class. So say I wanted to use this add to, maybe I could do this, I could do add to here, okay, and just do a little semi colon. And there we go. I could use add to, and that works fine. There's no issues with that. Okay. And that's how you use methods with inside of the class. So like speak, I can easily every time we initiate the dog, call the speak method as well. And to do it within the class, you don't need to do like something dot you just call the actual name, because it's really visible within here, right? Now, what would happen if I go over here, and I tried to use that, so add two, so we'll say Tim, dot add two like this. And you can see that, again, we're getting a red line and says, This is not visible, you can't use it, because it's a private method. Okay. So in today's video, we're going to be going over inheritance. So this has to do with classes. And this is going to be how we can inherit methods and attributes of previously made classes into a new class, and then override methods and all kinds of fun stuff. This is really important. This will save you a ton of time. And yeah, so let's get started. So you can see here I have this sorry, this dog class that we created in the last video. And pretty much the goal what I want to do, at least in this video, the problem is, I want to create a cat class that is identical to this dog class, except in the speak method here. Instead of saying I am whatever I just wanted to say meow. My name is what I write right Just want to change one of these methods to do something different. But other than that, I want all of this to be the same. So, intuitively, what we think we do is, well, we just take all this, copy it, put it into a new file called cat, and then just change this to be what we want. Well, we could do that, and that'd be fine. But when we have classes that are like 1000s, and 1000s, of lines long, ideally, we don't want to be repeating code and continually typing like the same thing a bunch of times, right, it also just makes it more difficult to read. So what we're gonna do is we're going to use something called inheritance. So I'm going to create a new class, I'm gonna go new class. And in this case, I'm going to call mine cat, alright. And they'll just click Finish like that. And then here we have public class cat. Now, whenever we do this inheritance, what we can actually do to inherit all of the properties, all of the methods, everything from this dog class is up here, when we define the class, we can type extends, if we spell it correctly, extends, and then the class doc like this, okay? Now what this is going to do is it is going to grab everything from dog class and apply it to cat class. So this is known as our superclass because it's kind of above the cat class. And then cat is known as our subclass. So we have, you can also call it a child class, or drive class. And this could be also called a parent class, all right. And that's because it's kind of underneath it's getting everything from there, but then it's going to be changing a few things, and maybe adding a few methods to it. So typically, you start off like the most abstract with a parent class, and then your child classes or your drug classes or your sub classes, because they're all the exact same thing, just everyone likes to use different words for them, are going to have some slight modifications to them, and kind of work based off of that. superclass, right? So or the parent class. Okay. So what we need to do when we first do this is you can see here, it already is telling us, we need to use the constructor for dogs. So we're inheriting from dog. But we need to use the same constructor, otherwise, all this stuff. And all these attributes will they're not going to work unless we set up our class when we first create it the same way as we did dog. So what I'm gonna do is I'm actually just going to click on this, and you can see it automatically generates this constructor for us. Now, I could have typed it out. But this is a Yeah, this is what it's going to do. So since in our dog class, we get name and we get age, we need to make sure that we have a constructor inside of our cat class that gets name and gets an age. And we have to actually explicitly call our superclass constructor, which is going to be the dog constructor, we're using this formation or this syntax super. And then we give it the name and we give it the age. Now, this doesn't stop us from being able to type in other properties or other attributes. So for example, I could do something like int, and I don't know food or something, it's like how much food they should get, this works perfectly fine. And we can go ahead and we can create another attribute here. So we say private, or no, I'll just say food. Okay, and this should say int food. And then down here, we can go ahead, and we can just type this dot food equals food. Okay, right. And that works perfectly fine. And now we're gonna have, since we're inheriting from this, we're gonna have age, we're gonna have name, and inside of this cat class, we're gonna have food as well. And that works just fine. Okay. So just to know, let's go over this again, because they've kind of gone through pretty quickly. But all of these methods here, we're going to be able to use within our cat class, because we'll we're inheriting we're grabbing all of them from the dog class. So this cat class when we first extend it, and do nothing is identical to the dog class. And then as soon as we start changing a few things in here, it's gonna become a little bit different, but still use all this functionality. So we still have the attribute age attribute name, we're setting them equal, because we're gonna call this constructor method, right from our, what do you call it super right here. So we call this constructor. So we set up age, and we set up name. And then we have speak, we have get age, we have set age. Now before I move any further, let me just prove this to you. So if I go to main here, and I just create a cat object, so I'll just say cat CIM equals new cat. And remember, we have to give it three parameters or three arguments this time, because that's what we typed in. So for name, we can obviously do Tim, age, we'll do 18 and food, let's say they get 100. I don't know grams of food or something, whatever you want to call it there. Okay. Now I can use this speak method on Tim. So you see, we're getting no errors here. Even though in my cat class, there's no speak method. But since there's one in dog, and we inherit from it, we can use it. So I'll prove again to you run this. I am Tim and I am 18 years old, and that works perfectly fine. So now remember I said though, I want this speak method to do something else, I want to change it. So how can we do that within the cat class? Well, the way to do this is to just rewrite the method in here because when we do that, we're simply going to overwrite whatever's in the dog class. So the child class or the subclass, whatever you want to call it. Whenever there's something the same in here, it automatically is going to override or overwrite whatever is in the dog class. So I do public, void speak. Okay, so This is the exact same name as the other one. All right, and in here, I change I do something, right, so I changed something. So I'm just gonna say, system dot out, dot print ln. And in here, what did I want to say like Meow? And my name is what to say plus this dot name. And you don't even add like a little food thing. And I get fed. Let's see here, plus this dot food. Okay, I don't know what's good enough for me, what's the issue here? Change visibility of name to protect it. Okay, second, I got to do something here. Okay, this just needs to be sorry, public and public. Sorry, this is just because we're not actually able to see these attributes, because they're defined in the dog class from within our cat class. So we just need to change them to public so that we're actually going to be able to use them within our speak method, we can also use something called protected, which I'm going to talk about near the end of this video. Okay, so right now, this is public, because I don't wanna get into protected. But let's see what happens. Now. If I run my Tim dot speak now and say meow, my name is Tim and I get fed 100. Okay. And that's because even though in the dog class we had speak, since we wrote it again, in our cat class, and cat class is the one that we're using, we're simply going to take this one, and we're going to override the the one in our dog class, okay? Now, obviously, when we're doing inheritance, you've already seen we can add our own methods, we can add more stuff, and we do whatever we want, right. So in here, I can add more methods, I can say public void, I don't know, eat. And in this case, we'll just have like, int, I don't know x, like as how much they're eating. And we can say this dot food, minus equals x, okay? And just subtract from it however much they ate. And then we can use eat in the cat class. But it's not going to be seen in the dog class, right? So we just have to understand that this does go one way, all the stuff we do in the cat class is not going to be visible to stuff in dog cost. because well, dog does not extend cat, right. So it's kind of a hierarchy where like dogs at the top, and then cat branches off and we could have other things extend the dog class as well. We'd have something extend the cat class. And we can just keep going and going and going and extending and extending and extending. Also known as like inheritance, right? So that's kind of it for inheritance. Now, I want to show something called multiple constructors, okay. So this is sometimes when we're setting up a class, we want to be able to pass it like a different piece of information and set up the class differently, right. So for example, my cat class here gives name, age and food. What if however, I only wanted to give it a name and age, well, we can leave both options available, they don't have to be mutually exclusive, right? I could give it either these three arguments to set it up, or I could give it just two. And to do this, we have to create another constructor. So I'm going to do the exact same thing as above, pretty well identical, except I'm just gonna leave out one of the parameters here. Okay, so Second Age. And then here, we'll simply call super, and name and H guy. And you'll see no red lines, everything looks fine. And what we're essentially doing here is we're giving it another way to set up the cat class another way to construct all of our attributes and set up the cat class. So we can either call the cat class using three parameters or three arguments, or we can call it using two. And you know what, maybe we could set one up only using one, we're only using zero. So let's do one with one just to show you how this might work. Okay, so if I do string name, and then int, age, okay. And then here I call super. Sorry, I should just get rushed. actually get rid of this, because we're only gonna use one right? My bad. I'm going to give name. But what about age? What am I giving super for for our age? Well, I don't know. How are we going to set it up? If they only give us one argument? Well, I would think that if they don't give us an age, then we should just automatically assume that their age is zero. So let's do that I'm going to put in zero, just hard code that in here. So that way, this means now say for example, they only want to give us a name, then we'll just automatically give them an age of zero, they want to give us a name. And in age, that's fine, we can do that. But maybe what we should do in here, if they give us a name and age is we should make sure that food is set equal to I don't know, maybe let's give it a default value of 50. So if they don't define how much food the cat eats, we're just going to assume that they eat 50. Okay. And this is kind of a way you can do like to know when I was like default parameters. If they don't type something in just automatically set a value for that. So that everything still works fine. I hope that makes sense. So let's show now, the three different ways that we can create a cat. So cat, Bob equals new cats. And in this case, we'll give it a name. So we'll say Bob, and we'll give it an age of seven. And no red lines. This works fine. Again, this defines a cat right because that's another constructor that we had. So let's do this one more time. And in this case, let's just only type a name. We're going to name this One do, like the name Joe. Alright. And there we are. So now we could obviously do like Bob speak. And we could do, Joe does speak. And these are the three ways that we have that we can define a cat. Okay, so Meow, my name is Joe, I get fed zero, Bob, I get fed 50. Right, it can go on like that. So again, when we have one, now we just seen a quick error that maybe we want to fix, we should probably give them food as well. So we say this dog food equals 50. Okay, as like our default value for how much they get fit. So that is a way that you can do multiple constructors. And now I'm going to talk about protected values. So protected values are something that we can use, similar to private and public. But they're, they just act a bit differently. So pretty much if you use the protected keyword instead of public when you're defining things. So for example, here in my dog class, I'm going to go up and change public to protected. This means that only things that are within the same package, or are subclasses of the class can have access to this pretty much like name. Okay, so that means any of these files, or any of these classes within this package are able to see this. But if I had another package, which you typically do, if you have large Java programs, anything in there would not be able to see this. Okay, so with whenever we're using, what do you call it whenever we're creating like a main class or a parent class? pro? tid. Wow. Okay. We're going to want to use a protected keyword, at least for what do you call it, sorry, our attributes so that we can change them access them from within the sub class. All right. Now, for these methods, it's fine. They're public anyways, right? So we can make these protected as well, if we didn't want another package to be able to access them. Now, if we create private methods, right, if we create a private method here, I'm actually going to try this. I don't remember if this is going to allow us to use this now out here. So let's say like Tim dot, let me know which one I changed. Get age. Okay. So Tim dot get age. So int x equals See, this is gonna work. Yeah. So again, this is not going to allow us to use this, because well, we made it private, right? If we made that protected, it would allow us to use it here, but not outside of the package. Now, I want to try this though, and see if I can get this uses get age from within our cat class. So if I do, for example, when I want to speak, I'll say this get age Ed. Yeah, so this isn't working as well. Which means that, again, if we want to use those methods, we have to make sure they're either public or protected, rather than private, okay? The only time you really get to create private methods is if within the class is the only area you're using the map that so for example, maybe you're doing a math calculation, and you only do that from within the class and you don't want anyone outside of the class to be able to do that, then you create a private method to do that, because you could do that from within the class, right. So in today's video, we're gonna be going over kind of class variables and the keyword static. So you may have seen that we've used static and a few things in like our main thing here, actually, I'm going to delete all this. It says static right here. And no one's really explained, I guess I haven't really explained what static means. And that's what I'm going to be doing in this video. So let's get started and talk about class variables. So right now we have something called attributes games, we have these two attributes, which are specific to each instance of our dog. So when we created multiple dog objects, each dog had their own name, and their own age, and other dogs were not affected when we change one of the dog's name or one of the dog's age unless that dog was that obviously, right. And that's great, because we can have a ton of different values that are specific to different objects or different instances of this class. Now, sometimes, we want to have variables that will change or are the same for each instance. So we can change them in one instance. And if we do change it on one instance, they will change in the other. Now, those are known as class variables, not instance variables, because instance variables are like kind of attributes, okay? The way that we can create these class variables is we can do something like this. So yes, let's say protected again, say protected. And by the way, I'm just in my dog class, I deleted a bunch of stuff out of it, just to make it a bit easier to work in. And I still have the cat class, but it's just I'm not using it for this video. Okay. So we'll say protected static int count equals zero. Now, I know that that is a mouthful. But what we're doing here essentially is we're creating a class variable, which is an int, int count equals zero, which is protected. Okay, I know it's a lot of keywords. But what is the static keyword do so what this is actually going to do is it's going to allow us to statically change count, which means it's not going to change for each instance, it's only going to change or sorry, it'll change like that. All together, right? So what I was explaining before, and that's what this static keyword is going to allow us to do. So we don't actually care about what instance this variable is a part of, we just care that it's a part of the class. Alright. So if I want to change this value x, well, I do need still need to call this and I can say this dot count, equals, and then or actually, I'm gonna say plus equals one, okay? Because what I want to do with this count here, consist, I feel dogs should be accessed in a static way. Okay, let's just do this one second. Okay, what I'm doing here, sorry, one second, I'll explain this is I'm just gonna add one to this count, because I want to keep track of how many dogs we have. So that if I wanted to, I don't know, like, see how many dogs have been created, I could just simply call like dog count, and then figure that out. Alright. So what I'm doing here, instead of calling this count, which does actually work, is I'm calling dog count. Because since this is a static, variable, or static, yep, static variable, class variable, whatever you want to call it, it doesn't actually care about what instance I'm changing it on, because it's going to change for all the instances. So I can actually use the name of the class to change it. And that's why it gave me that little yellow line. I'm not sure if you guys read that. It said we should do this in a static way. Because Well, it's a static variable. So I could, however, call like this count, right? And that would work fine. Because this will is an instance of the dog class who knows where to look for the variable count, but it's much better to do dog count, like plus equals one. Okay? Now, I'm going to prove this to you that this does indeed actually work. I'm not just making things up. So let's create some dog objects here. Say a Tim or dog. Tim equals new. Wow, typing is not great today, new dog, and we'll say 10, and score nine for age. And we'll just copy this and what should we do? Let's do bill, maybe, say, Bill, and that is new dog name. Bill, age 10. Okay, now, since this static variable here is protected, I can actually access it from me. So what I'm going to do to change count in order to print count out first of all, is I'll prove to you that system, system dot out, dot print, ln, I keep thinking, we're in Python here. And I'll just simply print out dog dot count like this, okay, and just see what we get as a value First of all, okay, so we get to, so we already know that this is indeed working, because well, when we added one to count, if it was different for each one, then it would just be one. But anyways, and if I want to change dog count, what I can do is I can say dog dot count, let's say equals like seven. Okay? And that's fine. That works. If I print out, dog count, we get seven. Now I'll show you two. If I do like Tim dog count, this will give us the same answer. So you can see we get seven. Even though in Tim, we didn't do anything with Tim to change count. Since it's a dog part of the dog class, it has this count variable, and it's changing, obviously, within 10 as well. Okay, so that's kind of how the class variables work. Now time, let's talk about static methods. Okay, so this was a static variable, or class variable, I like to call a class variable just because it's what I'm used to, but you can call it whatever you want. Now we're gonna talk about static methods. And what that is. So it's very similar to this, kind of the way that this works, but is a little different. So I'm going to do here man type, public static, void, display, okay. And in here, all I'm going to do is simply do system, dot out dot print, ln, and I'll just print. I am a doc. Okay. So what this is doing now is I'm saying static void display. Now, in here, what's going to happen essentially, is we don't need an instance to call this. So I can actually just call this on the dog class. So I can say, like dog dot display, like this. And since it's a static method, this works fine. And this one didn't say I am a dog. Now, as opposed to if this was a regular method, so let's just make a regular method to kind of do a comparison here. So public void, and we'll say, display to okay. And we'll literally just take this and put it word for word in here, just to show you the difference. So now watch what happens if I tried to do dog dot display too. You can see that we're getting a red line and saying that we need to make this static because we need an instance to call display to meaning that we need to have first create a dog object. And then we can use that dog object to call display to or we can do like this dot display too. And that works fine because that's calling it on the instance right? Because this represents the instance that we're using. So the static is going to allow us to call it just simply using dog but the thing was static is it has no way to access are, what do you call it? Our values are our attributes, right? So if I wanted to access like a dog's name or a dog's age, well, I can't do that for a static method like, I can't type like this dot age, that just simply doesn't work. Because if you think about it, well, what what, what instance are we calling it on, there's no instance, we're just simply calling it on the dog class. So we have no idea what age to look for, or what name to look for. So the only time we use static methods is when we don't care about the instance. And we just want to do something and we want to store it within that class. You can almost think of it as a function if you if you know other programming languages. But that is ideally how static works. So whenever you want to build a call something and you don't care about the like the instance, you don't care about the attributes, you can make it static, and that way you can call it without having an instance. So yeah, so hopefully, that makes sense to you guys, I'll quickly go over what this void does one more time, in case anyone forgets, remember, in our functions, we can return values, when you put void, all this does is say we're not returning anything, we're just going to do something, right. So we could be like manipulating an array, or in this case, printing something out to the screen, okay, or maybe getting like input from the user, but we're just not returning any value back to the call statement. So in today's video, we're gonna be going over how we can compare objects, and how we can get a string representation of different objects. And you'll see what I mean in just a minute. But these are really useful. And I guarantee you guys will be using this a lot, especially if you have objects, like maybe like point objects, or like some kind of mathematical objects that you'd want to compare, without having to make things too complicated for yourself. Let's just say that, right. So what I'm going to do here, and what I've already done, I guess, is I have the student class set up. And this is just what we're going to work with right now. Because the other classes I had in previous videos were already like finished, and they had other stuff in it. So we have a student. And currently the only attribute the student has is a name, okay. Now, in my main Java here, I've just created a few different students. And then I'm just gonna be printing something out to the screen. So that's why I have that right now. So we can see student class, right, we just create a name for a student. Now I just want to show you quickly how we would go about like comparing objects intuitively right? So say I wanted to check if Joe and Bill were the same, right? Like if I want to see if they were equal to each other? Well, we know how to do that already. So what I would do is I'd say like Joe is equal to bill. Now, intuitively, you probably say, well know, their names are not the same. So they're not going to be equal to each other. And well, that would be correct, but not for the reason that you think and all demonstrate that to you. So we have Joe and Bill compared to each other. So watch what happens if I try to make these the same name, right? So you'd think well, these would be the same object, or they'd be the same thing, right? Because they have the same name. But watch what happens when I run, we still get false. Now, why is that? Exactly? Well, pretty much we use this double equal sign on two objects, right? So like Joe, and Bill, the computer doesn't know how to compare them. So by default, what it does is it compares the actual object. And you see here how we're creating a new student. So a new object. And here we're creating another new student, another new object, these are actually two different objects, like in memory, okay, so in your computer's Ram. These are two different entities. And they're completely unique. Although, yes, they have the same name. Since we can change names, and we can do things. These need to be separate objects. So when we compare here, it's actually saying, well, we're going to look and see if these are the exact same object, and well, they are not. Now that's useful in some cases, because sometimes you want to see if it's like the exact same object. But in other cases, we want to see if these objects have like the similar values, right? So in this case, we probably want to compare the two names of the students to see if they were the same. And in that case, we would say, Well, yes, these are the same student, we're going to say, Yes, they are, they are the same, right? When we do that, like double equal sign. So what I'm gonna do now is I'll delete this. Let me show you how we can go about doing that. So inside of our student class, I'm going to add a method, okay. We'll call this public, Boolean, not Boolean Boolean. And we're gonna say equals, and then here, we're gonna take a student object known as other, okay? And then we'll go like that. And there we are. So what I'm gonna do in here is when we want to compare our students, okay, we're going to pass another student, and we're going to compare their names, right? So we're going to call this dot equals on one of our students that already exists. We're going to give it another student, and then we're going to see if they're the same. So how do we say we're going to check the same? Well, we're going to look at their names, okay. So what I'm going to do is I'm going to say if, and then we'll say, this dot name, and I guess I need a brackets here as well. always forget about those. If this dot name equals equals Okay, and then we'll say, other dot name, then what we'll do is we'll simply return true. Okay? Now otherwise, so if these names are not the same, what we will do is we will return false like that. Okay. And that's all we need to do for our dot equals. So now, what's gonna happen right is we'll pass on one student, we'll call this we'll check name, and then we'll check the other student's name, see if it's true, if it is, or if the same will return true, otherwise, it will return false. So now we can try this out. So these two are the same names. So let's say is Joe dot equals, and then here, I guess we will put a bill. So let's run this. And you can see we get a value of true. And then if I change bill, back to say, Bill, then we can run this, and we can see we get false. So now we officially have something checking for equality between the names. Now we could create more kind of ones like this, like equals grade, like whatever if you want to do that. But this is how we can check for equality between objects. And this method is like really easy to add in. Obviously, if you had a student with a bunch more values, maybe you had like grade, maybe you had other stuff like that, or like a last name, you could check to make sure those are all the same. Or you can just kind of customly do it the way that you want to say, two different objects are the same, right? Okay, so the next thing I want to be able to do is compare things using like greater than sign or less than sign, right? So I want to see if like, Joe is greater than bill or bill is greater than Tim. And we should intuitively like do that based on alphabetical order, right? So I can't really show you like a way to do it here cuz I don't think it's gonna work for my show. Greater than bill. Yeah, see, that just is undefined, there's no way to do that. So we're going to do is we're going to use a method called compare to, okay, what we have to do to compare to, is we have to, what do you call it, sir, we have to implement something into our class. So when I say implements at the top of our class, I'm gonna spell it correctly. And we're gonna type comparable. And then in here, we're going to do student. Now what we're actually doing here, when we bring this in, is we're actually implementing something called an interface. Now, an interface I'm going to talk about in I think, like two videos from now. But pretty much it's just like a set of methods that we have to use for the class to work. So when we implement this comparable thing, that means we're allowed to bring in a method that is going to allow us to compare two objects. Okay? So what we'll do now, is we will say, public and actually, what is the thing for this the return type public ins and compare compared to, and then in brackets here, again, we're going to take students, and this will be other, we'll put our brackets here like this. Okay. So now again, we're gonna have to return some kind of integer. And I'll show you how that works. I just got to get it up on my other screen, so don't mess this up. Okay. What I'm gonna do now is I'm going to return this dot name, dot compare to, and in this case, we're going to compare it to another string. So the other string will be other dot name, okay. So essentially, what this is going to do is it is gonna compare this name to this other name, and it's going to give us an integer value saying kind of how far away they are, right? So it's, it's kind of hard to like explain. So I'm just actually going to do it from over here. And you'll see what I mean. So if I go Joe, dot compare to, and then against to bill. Let's see what we get. We get a value of eight. Now what this means is Joe is greater than bill by a distance of eight, meaning that when we compare these first two letters, they are eight away, I believe, okay. So if we want to check if Joe was greater than bill, what we do is we check if this integer value returned was greater than zero. So here greater than zero, that's going to tell us true if Joe is greater than bill and false if he's less. So we run this and we get true. Now, let's see if we compare Joe to Tim. Okay. So t obviously is ahead of j in the alphabet, so we get a value of false, okay, and if we get rid of this greater than zero, then we can see exactly what we're actually getting as a value. So negative 10, right? Because that's how far away j is from T one, we're comparing them and that's what the compared to does for us. Okay. So, if we wanted to check if Joe was less than 10, then we check if this value was less than zero, in this case, we get true. So that's a really easy way that we can compare different objects using that compare to method Okay, so like this a public int compared to and you just have to remember to implement comparable students. And then you can use exactly this return statement here. Now, the last thing I want to show is a string representation of an object. So once you First, what happens when I just want to print out my object to the screen. So I want to print him. And maybe ideally, I'd like to see like Tim's name, right come up to the screen. Well, look what we get here, we get tutorial, one dot student app, and then all these different letters. What this is printing is actually the memory location of our object. So all of our objects are actually stored in memory, in RAM in like really fancy ways that I can't really explain to you guys. But anyways, this is like the address for it's like, when the computer looks it up, this is what it's actually using to find Tim and find all its values. And obviously, it's telling us where it is in the tutorial one, like folder, file, whatever, okay? So this is no use to us, we this does not help us as programmers at all we want to see like something that's a string, and gives us some valuable information. So what I need to do is I need to implement a nother method here, that's going to change this to string. So we've used this.to string before, but this is exactly what I'm going to use, we're gonna say public string. And we'll say, to string like this, okay. And what we're gonna do in here is we're just gonna return a string representation of our object. So what we can do essentially, is I can just return this dot name, and this can be what we're going to use to represent our object. Now, typically, you might see people do something like this, okay, and just follow me for one second. They do student and they have a bracket, and then we're gonna add this store name. And then they add that with another bracket. So this way, you'll see when I printed out to the screen, what it looks like, okay, we get student, and then Tim. And this is just simply telling us that the object we're printing is a type of student, and the name value is Tim. Okay. And we could even get more fancy. And we could add, like, double brackets around this name, if we want to show that this dot name was a string type, okay? Now for our purpose, I'm just going to get rid of this student and this bracket here. And you can see again, when we print this, it goes, Tim. Now notice, when I'm printing this, I'm not actually calling this two string method, like I'm not, not doing.to string. That's because Java actually knows that when we have this two string method in here, this is going to represent a string, right? So when we try to print it, it's automatically going to call that.to string method. Okay. So now, what we can do is we also just call like two strings, so I can, if I wanted to, I could just call.to string like this, and I could convert it to a string. And this will work the exact same way as before, you can see we get bill, okay. Again, in here, you can change this up however you'd like. In some cases, like say your student had some grades, maybe you want to write their name. And then after you have like an array of all their grades or something like that, okay? Now, inner classes are pretty, pretty easy, actually, all they are, is really just a class inside of another class or inside of a method. And I'll show you some examples as we go along. But since we already know all about classes and methods and static and whatnot, I'm not gonna explain too much of it, I'm just gonna kind of show you how we can create instances of inner classes in different ways. So I'm gonna start by doing these incidents outer class here that I've already created. can see on the side here, I'm just gonna create another class called intercourse right now, in a class is just gonna simply have one method in it. And I'm just gonna make this a public void display. And in here, all I'm going to do is simply just display something to the screen. So we know that we're actually in the rights class here. Okay. Let's say this is an inner class, okay? And what's our error here, class at token interesting. must have made a mistake somewhere here, one second guys. Oh, sorry, I put these two brackets here. I don't know why I added those anyways. Okay, so this is an inner class. Now, outside of this class, I'm going to create another method that's going to be a part of the outer class. Okay, so this class is actually contained within the outer class, meaning that currently, since it's private, we can only actually access it from within our class. So if we want to create an instance of this, that means we must need a method in our class to do that. So in this case, I'm gonna say public void, inner, and in here, we're going to take nothing, and all we're going to do is we're gonna create an instance of our inner class and just display Okay, so we're just gonna say, inner class I N equals new inner class like that. Okay? And then all we're gonna do is just call i n dot display, and make sure that this is working. Okay, so now our class is finished, we have an inner class and we have these void inner and all that does is create an instance of our inner class and printed to the screen. Again, note that this is private meaning we can only access it from within In our class, okay, so now if I go to my main dot java, I can run a command so or whatever create an object so we can see this. So first of all, what I have to do is create an outer class object, so that we can call that inner class. So outer class out equals new, and then outer class. Now it is worth noting that I don't have any constructors here, meaning that I don't need to give any information to my outer class or my inner class when I first call it and that's why I can just leave these blank brackets. Okay. So now if I want to see my inner class, what I have to do is I have to do outdoor, enter. Ok. So we'll call that method to create the inner class, and then run that. So let's run quickly here. And we can see we get this is an inner class. Awesome. So that's working fine. Now I'm just going to make this public. Now I'm going to show you how we can do this from outside of the class. So right now what we need to do is we need to create an instance of outer class. And then we need to call the method inner, to be able to create the inner class. And that's because this was private. But now that it's public, we should be able to create an instance of it outside of the class. So the way that we do that is we still need an instance of outer class, because this class is defined within outer class. So we need to first create this so that this is kind of created, right? As we did that, we have outer class. Now what I can do is I can say, outer class, dot inner class, okay. And we'll just call this one i n equals lowercase equals out, which is going to be our instance of outer class dot. And then in this case, we're going to inner class believe this is correct. But I guess we'll see Oh, I probably need an equal sign. And we'll type new new outer dot inner class. And let's see what our little red line is create class inner class in package out. Interesting one second, guys. Okay, so that's what the issue, I knew it was something like this, what we need to do is we need to do dot new, and then inner class because we're creating a new instance inside of this right of outer class of inner class. Okay. So now what we've done is we've created this i n, which is an object, which is a new inner class. So now we can simply use i n, which is an instance of inner class, right to display. So now we can do a i n dot display. Okay, so if we run this, see, this is an inner class, and that is working fine. So those are two ways you can get access the in a class. Now, right? Now, you might be like, hey, well, why the heck would I do this, because now it's just like a ton more lines? Well, there's many times where you don't really care about like this instance, and you just want an instance of the object inside of it. So in that case, this would make more sense to do. And obviously, you will most likely have more methods than just one you're gonna be using. Okay? Alright, so now that we have that, I guess, let's show creating this kind of inner class. So I'm going to delete this inside of a method. So we can actually create these inside of methods, which are really useful because sometimes within the method, we want to use a class and we don't want to have to define like a new file for another class. Okay. So we have this public void, enter. So I guess let's just work with this right now. You don't even leave in a class right now. And let's show you how this works. So all I can do in here, and I can say, we can do public private, in this case, I'm just gonna say I'm going to say class to class in a class. And then here, yes, that works fine. We're just going to redefine display. So we'll say, public void display. And now that I think of it, I probably could have just copied all my other code, but whatever, get some practice typing. Print ln, and then in here again, this should probably be a T, we will just type inner class, okay. So this is going to work perfectly fine. Whenever we call this void inner, then we have this class inner class, we're going to create an instance of it, and we're going to display it. So if I run this, I guess, wow, I really should just kept all that code. That's fine. Why is this not giving me an autocrat outer class, out equals new and outer class and brackets. And then in this case, we'll simply just call out dot enter. Okay, so now we can see what should happen is again, we should print in our class. So there we go, and we get in our class. Now pretty much you can do this like wherever you want. The reason I'm not saying this is public or private is just because like it's already within this void. So to use it, we're gonna have to call this void. So there's no really there's not really any point in putting like private or public But again, like if you wanted to can type public class inner class, or Oh, actually saying you can't do that. So I guess I was right the first time. So since it's inside of this void, you're only gonna be able to use what we call this. So there's no point in really giving it like a public or private method, or class name, sorry, because in here, we can still do public and private methods, because well, outside of the class, we might be using those methods, right. So you can see obviously, since I'm creating this instance, inside of the, the voids inside of inner, and if I tried to do that outside of it, it wouldn't work. Because this class is only defined when we call the inner method, okay? Now, interfaces are either unique to Java, actually, because I haven't heard of them in any other languages, but they're somewhat similar to classes, they have to do with like inheritance. And anyways, you guys will see as we go through the video, but they're pretty useful. And yeah, they're an important part of Java, so we need to learn them. So what we're gonna do first of all, is we're gonna create a new interface. Now, just like we create a new class, we're just gonna right click on tutorial one, our package, go to new, and instead of class, obviously, we're gonna click interface. Now, I'm just gonna name this one vehicle for the example that I'm going to be doing. So we'll click vehicle. And that's all you need to do. There's no like, you don't have to package generate comments, that's fine to do vehicle. All right, now we have an interface called vehicle. So what is an interface? Well, pretty much it is something that is completely abstract. Now, this is kind of a new concept, but it means that we're not actually going to like you can't create an instance of an interface, all it's meant to do is to be inherited from. So if we have a class like car, for example, that I've created here, car could implement the interface and use it. But we're never going to create an instance of an interface it just here, so that we can implement it into different classes. hope that makes sense. So inside of our interfaces, and you'll see in a second, we can only have public methods, and we actually don't define anything inside the methods, or the the attributes. So when I create a method in interface, and I'll just make one now I guess, I'm going to do, let's see here, void, speed up. And we'll take as a parameter into a, that's all I do, when I create a method, I don't put those, the brackets, I don't do anything inside the method, I just create this. Now, you could see that this is completely abstract, because it doesn't actually do anything, it just defines the fact that this method exists. So similar to when you create a variable and you don't give it a value, that's kind of what we're doing here. Because we're gonna use this in our car class. And you'll kind of have to go through all that before you really get to understand. But when you create a method, just know that you don't give it any content, all you do is just say, like, this method will exist in any of the classes that implement this. Okay, so I'm going to create a few methods here and already call it like a attribute. And then we'll just move into actually using the interface because the easiest way to understand it, so I'm going to say, we have speed up, we're gonna slow down. And we'll have to go change gear as well. Just going a classic example that we're gonna implement a vehicle from a car and you guys will see what I mean. Okay, change gear. Okay, and then I'm gonna add a attribute. Now, any attributes that add in here, like variables, whatever you guys want to call them, they have to be final. Now, I'm not sure if you remember in the last video, but final means that it's a constant and it cannot change. Okay, like, we can't change this value. So I'm going to say final int, a equals and then let's just say five. Okay, actually, or let's just go gears, okay, like Final interviews equals five, saying that each thing we're using is going to have five gears. Now watch, if I try to just do interviews equals five, that still works, but it's not going to work in the way that we want. Okay, so just make sure whatever you're doing this, you make them final, if you want to have like variables or whatever that you want to use in all of the different classes, they must be final. Okay. So right now, we've defined three methods, and we have one attribute, which is just called gears. Okay, so how do we use this interface now? And how does that how does that work? Well, the way we use it is we've typed implements and you might have seen this before, and then the name of the interface in this case, vehicle, okay, you can see already that we're getting a red line, we're getting an error. So there's nothing wrong here because we can implement it but car saying the type car must implement the inherited abstract method. Okay, so that means that since we've defined these three methods here inside of our interface of vehicle, we have to define them inside our car class. So whatever methods we put here, if we implement one of the interfaces, we have to define them, because right now they're completely abstract. And if we call them well, we have no idea what to do because there's no content for them, right? So we're gonna have to create a void which is change gears. I'm gonna say public void Change was calling viewers or gear. Let's see change here. Okay, so change gear, and then it's gonna have to take one parameter. In this case, we're gonna say int gear, so like, what gear do we want to change? Okay? And then we're just gonna go up here, and we're just gonna say, private int gear, because we're going to define that when we when we change gears, right? Okay, so now we're gonna go to and make another the other one that we need. So let's just check here, we need speed up. So we'll say public void speed up. And in here we'll have speed as like what speed are actually not speed, we're going to go into change. So how much we're going to speed up by, and then we'll do one more. So public void, slow, down like this. And again, we need this change. And there we go. So this now we're getting no errors, because we've implemented all of the methods that were abstract over here. Okay, now, gears, we don't need to do anything with it. It's just like, if we wanted to use it, we could, okay. So what I'm going to do now is inside, I'm actually gonna create another private int, I'm gonna call this speed. Okay. What I'm going to do now is I'm going to just just fill up these, what do you call these methods, so I'm gonna say when we change gear, we're just gonna say, this dot gear equals whatever gear we're changing it to. And then for speed, I'm gonna say, this step speed, actually plus equals change. Okay, and then down here, we'll say this speed minus equals change, game. Change. Perfect. Okay. So now what we're gonna do is we're actually just gonna add one more method just to show how this works. So we've implemented the things we need to implement from our interface. And now what we're going to do is we're going to just create another method. So in this case, I'm going to make this like a display method so that we can display our car pretty easily. Okay, so public void, display. And inside of here, I'm just going to print out a few things to the screen. So System dot out dot, print, ln, and in this case, we'll just say, I am a car, comma, and then we'll just add, actually, let's say going and how fast we going we're going this start speed. If we want to get out like a little kilometers per hour, so let's do that. And I am in gear, and we'll just add whatever the gear is. So this stuff stuck here. Perfect. Okay, so let's now actually use this. So we have our interface vehicle, okay, and we have our car. So what we're gonna do now is we're gonna create car objects, we'll say car. I don't know, let's say, Ford. Okay, equals new car. Okay, perfect. And now what we're gonna do is we're gonna say car dot. Ford, I guess is what we need to do Jose for speed up, and let's maybe change it to 10, we'll add 10 to it, I just realized that we're actually gonna have to make this speed default at like zero, and gears, let's just do that default zero as well. Otherwise, you're gonna run into an air arshi gear, I guess you can't really be in gear zero. Can you just change that to one? Okay, perfect. Okay, so for speed up, and I will say Ford change gear, and let's just change the gear to Okay. And then if we want to display our Ford, we can do Ford dot display. Perfect. Okay, so let's run this now and see if everything's working. So we say I am a cargo in 10 kilometers an hour, and I am in gear to perfect. So that's working fine. And we've implemented all that stuff from our interface vehicle interface. So now I'm going to show you some cool things, we can add into our interfaces that make them a lot more useful. So say, for example, you've used a bunch of interfaces with a bunch of classes you've inherited from them. And now what you want to do is you want to add a method to all of those classes that are inherited from it, well, what you could do is you could do the same thing here, and you could type something like this. And then you could go into every single one of your classes, and you could change them to be whatever you want. But if you want the method to be the same for all of them, we can actually use something this is why interfaces are kind of useful called default. Okay? So we type default, and then maybe in this case, void, and let's just say like outlook, we're gonna print something out just to make it easy. What we'll do here is we'll just, we can just create a method and we can use this from any of the classes that inherit our, our interface, okay? So I'll do here they'll say system, dot out dot print, ln, in this case, I'll just say default method, okay. I know very creative. How did I just spell system? And I okay, anyways, alright, I'm tired guys. I apologize System dot out dot print ln default method. Okay. So now that we have that, from within this car class, we can use that default method. So say when we display, we want to print that. And then we want to do the default, what we could do, I believe, is we can say, just out maybe. And yes, that actually works fine. So now that we have out because that is a method within our vehicle class, and we implemented, let's see what happens when we run our program, we get a cargo tank one mission, our gear two, and then says default method. It's using that default method that we created inside of our interface. Now, I believe we can actually use static methods as well. So this would be known as something that's not a static method, because we have to call it from within our, our class, but we can actually create static methods within our interface that we can then just call statically. Like, we don't have to have an instance to call them. So if you don't know what I mean, just follow along for a second, as I'm going to create a static, I don't know, let's just do like, int, let's return something, let's change it up. Let's just call this math. I feel like math is a keyword. And that's fine, we'll just do math. Okay, we're gonna take int B, and all we're gonna do is we're just gonna return b plus not okay. I know very basic, but that's all we're gonna do, just to prove a point. So now, saying, I'm in my main job, all right, and we get rid of this, we don't create a car object. And I want to use this static method inside of my interface. Well, what I can do is I can do vehicle, dot, and then you can see it already has this function coming up here, this method dot math, give it a value, like five, I'm just actually set this equal to a variable. So we'll say x equals that. And then we can System dot out dot and see what we're actually getting as a value. In this case, we should be getting 14, right? Yeah, so 14, there we go. So let's see, you can create a static method inside of your interface. So in some cases, you can kind of think of these as functions. All right, say you had unless you don't, I'll just do one as an example. Because this is kind of useful. If I go new interface, and we call this math, okay, then inside here, you could do a bunch of static methods that will do like math operations for you. Like maybe you have the quadratic formula, maybe you had, I don't know, like Euclidean distance, I don't know a bunch of different math formulas, you put them on this math interface. And then when you want to access them, you would come in here and you'd say, well, math, dot maybe like square root like sq. RT, okay. And then there, you'd be able to use all of those, I want to call functions, but they're really methods inside the, the interface really easily. So that is a really good example of when you can kind of use interfaces. Now, enums are pretty much a collection of constants that we can reference. And then we can do things with those constants. And they are pretty cool and just make your code more readable. And yeah, you guys will see when we go through the video. So the first step is to create an email. Now to do that it's similar to creating a class or an interface or whatever, go to your package, right click, we're gonna click New and then you know, so for e&m, I'm just going to name mine. Actually, I'm just gonna name mine level, because you'll see why it makes sense for this example. So again, the syntax here is is public e&m level, rather than like class or interface or whatever, right? So in here is where we're going to define our constants. Okay? Now, this is really useful, because we don't have to do like public static, and whatever like the name, like we can literally just type whatever value we want our constant to be in, typically, it's a string. So in my case, I'm going to go for level, I'm going to go in all caps, you don't have to go all caps, we're gonna go high, medium, and low. Okay, now, these are the three constants, I'm going to store in my level iums, we have high, medium, low. And yeah, that's literally all I'm going to do right now, for my e&m. It just means we have three constants that we can reference from level and these are the three. And obviously, you can do as many as you want. And just keep going with commas on and I think you can put them on the same line as well. It just makes them more readable if you do them. Like other lines. Okay, so every three constants, now I'm going to show you how we can actually use this email and you'll start to understand how it works. So to use this enum, we have to create a new instance of it. So to do this, I'm going to say level, and we'll say LBL equals new. Actually, I think it's like this was level dot, and yes, we say a high, low and medium. So my guess we'll just pick a low, and I'll put a semicolon. And now you can see it's all showing up in different colors. And this is working fine. So now that we have this as a constant, we can do certain things with it, right? So typically, you might want to check what value your constant is like what value is levels. So we can obviously use these in an if statement, like so. So I say like if elvio equals equals and then like it's level dot analyst, Start out low, I guess. And we'll just work our way up to high. I mean, say l if our elsif. And we'll say LBL equals equals, and then level dots and medium. Okay, we'll do something in there. And then finally else, because if it's not lower medium, it must be high, then we'll just use me. So in this case, we'll just say system dot out, dot print, ln. And we're just gonna print level for all of them, because I want to show what this does. Okay? What the heck did I just do there? Okay, anyways, now we're just printing level each time. And actually, let's just run this down and see what happens. So you see, we get low. So when we print out level, it's simply just gonna print like, whatever the constant is that we have. And that's because it has a little.to string method built in. So we can convert these into a string. And I'll show you what I mean by that. So pretty much say we wanted to get this because right now like, it's not a string, it's not an it's not a Boolean, we don't really know what type it is, it's just like in level it gets an enum. So to actually get this as a string value, if we wanted to do something with it, or store it, we can use.to string. So if I say string, we'll say E. Yen, why not? Why not? We'll say is equal to lbl.to string. And that's just going to convert this to a string for us. And then we can do all our string operations or whatnot with that. All right, so to get it to a string. Now another really useful thing that you notice is we actually get all the different values of enums and print that to the screen. So where do system dot out? dot print ln. And I believe the way we do this is to do level dot values. Yes, there we are. So we go level dot values. And if we hit that, or we type that in, you're going to see when we run this, now, it gives us what is actually giving us an array with the values. So when we try to print that we're getting like, you know, the memory address of it. So once we have these values, so I'm actually just going to store this an array so that we can then iterate through it and print them out. What I'm gonna do is we'll say, level array. And this is the way you have to do it, let's say arr is equal to and then level dot values. Case, that's working fine. So what we're gonna do now is we'll just create a quick for loop. So and I'll show you how we can loop through all the different values. So say, for E, or home, which would be this level, level E, and then we'll say, in ARR, what we'll do is we'll simply just print out, E, okay. So system print out E, and then we can see all the different constants that we're going to get. So just go here, and you see we get high, medium, low, and then just prints low. Again, just because we're doing this if statement here, okay. And that's how you can loop through all the different values. So that's really cool. But you might say, Okay, well, that's cool, too. But is this really that useful? Like we just have these constants? Well, there's a few other things that we can do inside of this, you know, add some methods, and some instructors as well, so that these constants actually point to certain values, kind of similar to like a hash table or hash map that I showed you before. So the way that we can do that is we need to create first of all a variable that's going to be private. So in this case, I'm going to say private, and I'll say, actually ends level LBL nom, okay. So this is going to just be a private value, that's just going to store the value of each of these. So like low, medium, high value of all these levels. So just set this value, what we need to do is we need to create a constructor for our IEM. And you'll see how this works in a second. So I'm just gonna say public level in and then none. Okay? And in here, what are we getting here? Remove invalid modifiers legal modifier for short only private instrument. Okay, so let's do this. Private, sorry, my bad private, because we're just gonna call it on here, you'll see in a second private level int num, and we're just gonna say this dot LBL, num is equal to num. Okay, there we go. So now what I can actually do is you see how these are highlighted in red. So since this is a private constructor, that means we're going to define this variable based on what constant we choose for the enough. So I'm going to put brackets here and I'm going to define highest three, medium as two as low as one. Now, what this is going to do is it's going to keep our same constants of high, medium and low. But when we create a new constant, it's going to activate this constructor of level, and it's going to set this level non equal to whatever value we put in the brackets here. So in this case, 321, we could obviously have multiple, what are called parameters here, and we could have multiple arguments here and we can have a ton of different values. And yeah, so the only issue is, since this value is private, we're going to need a way to access it from our main here because that's probably where we're gonna want to use it. So that means we're gonna have to create a few methods to will change that level num and to get that level num so we've done this before, but Actually, I don't think I can do a public. Eye we'll see if we can public gets level. And then in here, we'll simply return. Guess it's gonna need to be an int, public int get level will simply return this dot, LDL num. Okay, yeah, so that does work fine. I just can't do a public constructor. Okay, so this is just going to give us the level num. If we called get level on our keynote to change this. What do you call it? level num. What I'm going to do is I'm going to do set LBO. And so having interior it's just gonna be a void. Okay, and all we're gonna say is this dot LBL, num is equal to num, and then we're gonna put in here, int, num, Okay, perfect. So now what we're doing is we have a way to not only get the level num, but to change it. So now let's try using this out in our main and see how this works. So I'm just going to get rid of all this stuff, because we don't need this right now. So right now we have our level and it's level dot low. So to actually get the value of this level, we can use something called get value of or we can use that method that we had here. So in this case, I'm going to say get level. So what I'll do, as we'll say, system, dot out, print ln, and in here, we'll say elvio. dot. And then what was the thing we were using get level like this. So now if we print this out to the screen, we should be getting one. And indeed We are, we're getting one. So now I'll show you this thing. It's called get value of Okay, and is it x value ever get value? I'm not sure we'll see. So I'm pretty sure if we do something like this level dot value of Yes, that is exactly what it is. And then we pick a we type in whatever the enormous so in this case, we could say, low, it's gonna give us Let's see, what's the issue here. Okay, so the issue is, I just got to put this in string, I just forgot about that. So I do level dot get value of and say I put a string in here. So like, say someone was typing in and into the computer, and they type in a string, right, and you want to pass this in to get value of we see what we're actually going to get is we get low, right? Because that is the value of this string. In the enum. Although it's not a string, it can like determine that, okay, so that's what value of is used for, I can't really give you any good examples of them. Cuz I don't really know any good examples of using value of but for any of you that might see some use in it, I figured I would show it to you. So I guess we can do an example. Now just setting the level just to make sure that all that is working, say elvio dot set level. And in this case, let's say five. And then let's just grab this again, actually. And we can delete this row up here. And now I'm just simply going to print out, record elvio dot get level, and just make sure that everything is changing and working fine. And there we go, we get a level of five. So that is how we can use itams. Pretty much they're used for when you want to have a collection of different constants, maybe you want to loop through, see what those constants are. And it just makes a code kind of readable, right? So we have level dot low, and then that low can point to like five to one, whatever. And that's all stored within our enum right here. Obviously you can have as many items as you want and you'll really see the use of them further on in Java when you're creating like larger programs. Okay, so anyways, that has been it for this video. If you guys enjoyed please make sure you leave a like and subscribe and I will see you again in another video.
