With timestamps:

00:05 - hello welcome to the dropbox api
00:07 - tutorial
00:09 - in this tutorial we're going to see a
00:11 - few different methods that are available
00:13 - to us in the dropbox api that allow us
00:15 - to interact with files and folders and
00:18 - manipulate them
00:19 - my name is christian i'll be your
00:21 - instructor for this course
00:23 - and i'm sure you're wondering what we're
00:25 - going to do and what you'll need to know
00:27 - so let's jump right in here as far as
00:29 - what you want to know it's good to know
00:31 - html and javascript but it's not
00:33 - necessary really a lot of these methods
00:35 - we're looking at will be available for
00:37 - other languages such as python for
00:39 - example they just might be a little bit
00:41 - different syntax but the overarching
00:43 - principles will remain the same so as
00:46 - long as you're wanting to learn about
00:47 - the dropbox api even if you don't use
00:50 - the javascript sdk which we're going to
00:52 - use
00:53 - i think you'll find this useful
00:55 - as for what you'll learn we'll go over
00:57 - getting some files getting the
00:59 - thumbnails for those files and moving
01:01 - those files around now i want to mention
01:03 - again there are many more options
01:05 - available in the dropbox api and many
01:07 - different methods you can use to
01:09 - manipulate files and folders but these
01:11 - are the ones we're going to go over and
01:13 - hopefully that'll give you a good basis
01:15 - for how the api generally works
01:17 - additionally we'll use some array
01:19 - methods that maybe you've never seen
01:20 - before or maybe need some clarification
01:22 - how they work
01:23 - we'll use some es6 features such as
01:26 - arrow functions
01:28 - and we'll learn how to use async await
01:30 - which is a fairly new way of dealing
01:32 - with asynchronous data and is perfect
01:33 - for our use case
01:35 - as for what we're building specifically
01:37 - well take a look here and you'll see
01:40 - that we have a file organizer 3000 as
01:42 - i've affectionately named it we have a
01:45 - path where we can search for files or
01:47 - folders and we have them listed out here
01:50 - with thumbnails
01:51 - at the end of this lesson we'll be able
01:53 - to organize
01:54 - every file in any given folder using the
01:57 - path here
01:58 - and once we hit organize it'll move
02:00 - those files into different folders based
02:02 - on their date modified
02:04 - so that's the app we're going to build
02:06 - let's jump right in
02:12 - before we start coding out the app i'd
02:14 - like to go over the developer
02:16 - documentation real quick so if you want
02:18 - to click right here on the slide or just
02:20 - go to dropbox.com
02:22 - developers
02:23 - you should see something like this
02:25 - it'll show you a dashboard of sorts and
02:28 - if you go over to my apps on the left
02:31 - hand side
02:32 - you should see a blank page because most
02:34 - likely you don't have any apps yet and
02:36 - then you can click on create app up at
02:38 - the top right that'll get an app started
02:41 - for you now before i go further i should
02:43 - mention you don't need to do this to
02:45 - take this course just going to give you
02:47 - some brief information on how to set up
02:49 - an app so that when you do set up an app
02:51 - you can be familiar with it and it'll
02:52 - help you know how i set up this app
02:55 - so first it's going to ask you which api
02:57 - you want to use for this app we're using
02:59 - the regular dropbox api if you wanted to
03:02 - support teams for dropbox so multiple
03:04 - people collaborating within dropbox then
03:06 - you might select dropbox business api
03:08 - but most likely you're going to go with
03:09 - the regular api
03:11 - next we need to choose if we're going to
03:13 - use just one folder for our app inside
03:16 - the user's dropbox account or if we need
03:18 - access to the user's entire dropbox
03:21 - account for this app i went ahead and
03:24 - chose app folder
03:26 - although in reality if we were actually
03:27 - building this app we would probably want
03:29 - to choose full dropbox because this app
03:31 - is essentially going to organize a
03:32 - user's files and that would require
03:34 - access to their files lastly we want to
03:37 - pick a name for our app if it's taken
03:39 - already then it'll tell you that and you
03:40 - can pick a new one once you're done go
03:42 - ahead and click create app
03:44 - okay great so now that should take you
03:46 - to a setting screen and we'll quickly go
03:47 - through these
03:48 - first we have our status which will
03:50 - currently be in development when you're
03:51 - ready you can go ahead and apply for
03:53 - production so that it can be reviewed by
03:55 - the dropbox team
03:56 - currently you are also only the user
03:58 - that can access this and if you want to
04:00 - enable additional users you can click
04:02 - here now that still has a limit on it
04:04 - since it's a development app and if you
04:06 - want to enable more users then you would
04:09 - want to apply for production
04:10 - here we have the permission type that we
04:12 - just chose in step two when we first set
04:14 - up our app
04:15 - that's app folder we're only wanting
04:17 - access to one folder in the user dropbox
04:19 - account we don't want access to their
04:20 - entire dropbox account and then we have
04:23 - our app folder name now this is by
04:24 - default going to be the same name as our
04:26 - app itself but if you wanted to change
04:28 - the name of just that folder your app
04:30 - name would remain the same just the
04:31 - folder in the dropbox user's account
04:33 - would change then you can change it here
04:35 - next we have the app key and secret now
04:38 - in this tutorial we're not going to use
04:39 - these but in a real life app you
04:41 - probably would app keys and secrets are
04:44 - good for when you need to do
04:45 - authorization which is actually the next
04:47 - section here we can choose where we want
04:49 - to redirect the user once they have been
04:51 - authorized
04:52 - allow implicit grant i'm not going to
04:54 - really go into if you hover over the eye
04:55 - when you actually go to the page you can
04:57 - see a little more detail you should
04:58 - probably leave it as is if you're
05:00 - building a client-side app which you
05:02 - probably are and generate access token
05:04 - is where you can get your own token to
05:05 - work with this is something i've already
05:07 - done and that will use in our app
05:08 - although i should note that the token
05:10 - i'm using will be expired by the time
05:12 - you're viewing this so you may want to
05:14 - go ahead and do this and plug that into
05:16 - scrimba or your own code base wherever
05:19 - in order to actually play with some
05:21 - files but this is basically going to
05:22 - skip the authorization setup and just
05:25 - give you a quick way to authorize
05:27 - dropbox to check out the folders and
05:29 - files
05:30 - next we have options for what are called
05:32 - choosers and savers and they look like
05:34 - this basically just little buttons that
05:36 - dropbox has already created for you so
05:38 - that if you need to do something simple
05:40 - like get some files or maybe you just
05:42 - need to save a file to their account
05:43 - then instead of building an entire app
05:45 - you may just want to use a chooser or a
05:47 - saver and if you do decide to use one of
05:49 - those this is where you would put your
05:51 - web address so the dropbox knows that
05:53 - host is okay to use a chooser or saver
05:56 - next we have web hooks basically it's
05:58 - the idea that once i do something here i
05:59 - want to trigger an action there once i
06:01 - do something with dropbox i want to
06:03 - trigger an action with gmail or
06:04 - something similar lastly if you are done
06:07 - with this app maybe you don't need it
06:08 - anymore you can go ahead and delete it
06:09 - here just be warned this is an
06:11 - irreversible action so be careful the
06:13 - next page we have is the branding page
06:15 - these options are rather obvious
06:16 - lastly we have the analytics tab this
06:18 - naturally shows nothing because we
06:20 - haven't done anything yet but after a
06:21 - while you should see some stuff here
06:23 - real quick before we go on to coding our
06:25 - app i want to mention the javascript sdk
06:27 - documentation you can click on this link
06:29 - to go there it looks something like this
06:31 - basically it's a list of all the
06:32 - different methods that are available in
06:34 - this app we're only going to use a few
06:35 - different methods so it's really not
06:37 - going to give you a good idea of
06:38 - everything dropbox can do so go to the
06:40 - documentation check out all the
06:42 - different methods you can use even if
06:44 - you're not going to use the javascript
06:45 - sdk in your app maybe you're coding in
06:47 - python or something else this will be
06:49 - helpful because all these methods are
06:50 - the same or very similar to what you
06:52 - might use in another language
06:54 - once again you can head over to
06:56 - dropbox.com developers when you're ready
06:58 - to set up account until then let's go
07:00 - ahead and start the tutorial
07:07 - let's begin by importing the dropbox sdk
07:10 - one thing you need to make sure of is to
07:11 - surround dropbox with curly braces
07:13 - because this is a named import or export
07:17 - and once we do that we can go ahead and
07:18 - use it to create a class or rather
07:21 - instantiate a class and assign it to a
07:23 - variable we'll call that dbx for dropbox
07:26 - and here we're just going to say new and
07:28 - then dropbox with parentheses and we're
07:30 - going to pass in an object to this
07:32 - function which is creating a class for
07:34 - us that once again we're assigning to
07:36 - dbx now that object is going to take two
07:39 - properties one is going to be an access
07:42 - token
07:43 - and the other is going to be a fetch
07:44 - library now there are different
07:47 - libraries you can use in which case
07:48 - you'd put whatever fetch library here
07:51 - but if you just want to use the native
07:53 - window fetch library then you can just
07:55 - put fetch and that uses the es6 feature
07:58 - of simply assuming that the property and
08:01 - the variable are the same
08:03 - which they are
08:04 - for the access token you'll want to go
08:05 - ahead and use your own because by the
08:07 - time you view this the access token i'm
08:09 - going to put right here is not going to
08:11 - be valid any longer so go ahead and go
08:14 - to dropbox.com developers i'll go ahead
08:18 - and paste that link up here
08:20 - and set up your account to get your own
08:22 - token and once you do that you can
08:24 - replace the token here in whatever
08:26 - lesson you want to play around with if
08:29 - you don't really want to play around
08:30 - with the code of course you don't have
08:32 - to do this everything will still work
08:34 - it's not absolutely necessary but part
08:36 - of the beauty of scrimba and having
08:38 - lessons on here is that you can play
08:39 - around with the code and you're not
08:40 - going to be able to do that unless you
08:41 - change out this access tokens so i do
08:43 - encourage doing that but either way
08:46 - we've imported our dropbox sdk and we're
08:48 - now ready to use this dbx variable
08:56 - so far all we've done is instantiate our
08:58 - class in order to see what methods are
09:00 - available on that class you can go to
09:02 - the documentation here
09:04 - we're just going to go ahead and use as
09:07 - our first method
09:09 - something called files list folder which
09:11 - will essentially take the folder and
09:14 - list out the files inside that folder so
09:16 - this takes a lot of different options on
09:18 - the object that we pass in but we're
09:20 - just going to use for now the path
09:22 - now to specify the root path we actually
09:24 - pass an empty string not a slash
09:27 - and i should note the root path here is
09:30 - going to be the root of our app folder
09:33 - not the user's dropbox account and this
09:35 - is because when i set up my developer
09:37 - app i chose that option you can set it
09:40 - to the user's dropbox account but i set
09:42 - mine to the app folder so the root will
09:44 - actually be the root of the app folder
09:45 - not the dropbox account okay now what's
09:48 - that going to do for us that's going to
09:49 - return a promise
09:51 - and all i want to do for now is go ahead
09:53 - and
09:54 - see what we're getting back let's hit
09:56 - save
09:57 - okay
09:58 - it worked
09:59 - we got back it looks like an object with
10:02 - an entries property and that value of
10:06 - that entries property is an array of
10:08 - different objects and each object seems
10:10 - to represent either a folder or a file
10:12 - so you'll see here this first one we
10:15 - have is a folder named other stuff
10:18 - we have another folder here named 2018
10:21 - another folder here in name 2019
10:24 - looks like we've got a bunch of files in
10:26 - there and you can see that we have a lot
10:27 - of data on each of these files
10:30 - so in the next lesson we'll go ahead and
10:32 - render these to the browser so that
10:34 - we're looking at it in a pretty way
10:37 - that's nice to see instead of in the
10:38 - console but before we move on i need to
10:41 - know real quick before you go off and
10:43 - use this new files list folder method
10:45 - you've learned
10:46 - you need to know this might not be all
10:49 - the files in the account or whatever the
10:51 - path is that we're trying to get them
10:52 - from there might be more files and there
10:55 - is a way and we're going to learn later
10:56 - on how to use this to get more files
10:59 - it's called files list folder continue
11:01 - there's a different method that dropbox
11:02 - provides to us so i just need to make
11:04 - that note real quick we'll learn how to
11:06 - get more files later on for now we're
11:09 - just learning how to get that first
11:10 - response however many files dropbox is
11:12 - willing to give us and in the next
11:14 - lesson once again we'll learn how to
11:16 - render those files to the browser
11:23 - as it is now our application only logs
11:26 - the result that we're getting back from
11:28 - dropbox
11:29 - that's fun and all but let's see if we
11:30 - can render things to the browser
11:32 - i know this tutorial is more about
11:34 - dropbox but i thought it might be useful
11:36 - to see how we're making things happen in
11:38 - the dom
11:39 - first of all we need to declare an
11:41 - element to interact with
11:44 - here i'm declaring a variable called
11:46 - file list lm for element and using
11:48 - document.queryselector to select an
11:50 - element with the class of js file list i
11:53 - like to put js at the beginning of my
11:55 - class names just to know that i'm
11:56 - dealing with javascript so i don't
11:58 - accidentally mess with them when i'm
12:00 - just dealing with html or css
12:03 - i'm going to go ahead and do a little
12:04 - refactoring here to set up our app
12:08 - what i've just done is declare a state
12:10 - variable that will hold our state right
12:12 - now it's just one files
12:14 - property which is an empty array
12:17 - i've moved our call to the files list
12:19 - folder endpoint into an init function
12:22 - which we can call at the end after
12:23 - declaring our other functions
12:25 - i've declared an update files function
12:27 - which will take some files
12:29 - and update the state accordingly so that
12:31 - we keep all our old files that were in
12:34 - state as well as update it with the new
12:36 - ones
12:37 - and inside that we're also calling our
12:39 - render files function which will fill in
12:41 - now
12:42 - inside render files we'll first need to
12:44 - get our element so that we can place
12:47 - some html in there
12:49 - now there are two things i want to do
12:51 - with the files here
12:53 - first i want to sort them
12:55 - then i want to map over them
12:57 - and for every one of them create an li
13:00 - element so that we can see the list
13:03 - let's sort alphabetically and let's go
13:04 - ahead and put the folders on top
13:07 - okay real quick i'll go over what we're
13:09 - doing here
13:11 - on this line we're comparing the dot tag
13:13 - property of each item
13:15 - if you recall what we logged to the
13:17 - console
13:19 - every item in the array is going to have
13:21 - a dot tag property that is either a
13:23 - folder or file
13:24 - what we're basically saying here is are
13:27 - either one of these items a folder if so
13:29 - we're going to need to prioritize the
13:30 - folder
13:32 - next we're checking are they the same if
13:34 - they're both folders or if they're both
13:36 - files we don't need to do anything with
13:38 - them except for organize them
13:39 - alphabetically which we do here
13:42 - but if one of them is folder and one of
13:44 - them is a file we're going to check
13:46 - which one is a folder if it's the first
13:48 - one we return negative one to say that
13:50 - it should come first and if it's the
13:52 - second one we return positive one to say
13:55 - that should come second
13:57 - in this way we're sorting all our
13:58 - folders on top and we're sorting
14:00 - everything alphabetically
14:02 - next we turn to our dot map method which
14:04 - is going to loop through every item in
14:06 - the array and return an array
14:10 - the map method of an array accepts a
14:12 - function the first argument is each item
14:15 - in that array in our case a file or
14:18 - folder in fact let's go ahead and check
14:20 - what type this is
14:21 - we'll say const type equals file and
14:24 - then if you'll recall the dot tag
14:26 - property is what stores whether it's a
14:28 - file or a folder then we just want to
14:30 - return our actual html i'm going to go
14:33 - ahead and use backticks to create a
14:35 - template literal
14:36 - inside this template literal whatever i
14:38 - put will be what's returned it will take
14:41 - it literally hence the name
14:43 - so let's return an li element
14:46 - and what we want to see ultimately in
14:49 - the browser is the name of the file if
14:51 - we were to look at our console again and
14:53 - see what is being returned from dropbox
14:55 - we'll see that there's a dot name
14:56 - property on every file
14:58 - so we'll put that in there
15:00 - i also want to go ahead and do some
15:01 - styling real quick i've already declared
15:03 - a class of dbx list item for each
15:06 - individual item in the list
15:08 - and then i also want to put the type
15:10 - that we just declared above so we know
15:12 - if it's a file or a folder
15:15 - okay now before that's actually going to
15:16 - do anything we do need to replace our
15:18 - console.log up here so that instead of
15:20 - logging it we're actually calling all
15:22 - this logic
15:24 - and to do that we will call update files
15:27 - with the files that we get back from
15:29 - dropbox once again if you were to look
15:31 - at that console that we logged earlier
15:33 - in the last lesson you'll see that
15:35 - there's a dot entries property on that
15:37 - object which holds the array of files so
15:40 - now we have our init function calling
15:42 - our update files function which calls
15:44 - our render files function which will
15:45 - ultimately render something to the dom
15:48 - however if we were to call this right
15:49 - now we would see a bunch of commas in
15:51 - between every li element let me go ahead
15:54 - and hit save to show you what i mean
15:56 - as you can see we've successfully logged
15:58 - the items of the array however we are
16:01 - seeing commas in between every item and
16:03 - that's simply because we're not
16:04 - returning a string here to our dot inner
16:07 - html we're returning an array
16:09 - we don't really want to do that we want
16:11 - to return a string so let's take this
16:13 - array let's call the dot join method
16:15 - which will join every element in the
16:16 - array into one string and inside we can
16:19 - pass what kind of separator we want to
16:21 - use in our case we don't want a
16:22 - separator we just want one long string
16:25 - so we'll pass an empty string
16:27 - hit save again
16:28 - and now voila we can see all of our
16:31 - items we can see that our folder is up
16:33 - on top other stuff and we can see that
16:36 - they are ordered alphabetically now
16:38 - that's not really easy to tell this is a
16:40 - folder so in the next lesson we'll go
16:42 - ahead and add some thumbnails
16:48 - right now our app is working and we're
16:50 - displaying our files but it doesn't look
16:52 - great yet what we'd like to do in this
16:54 - lesson is go ahead and add some
16:56 - thumbnails now this lesson is going to
16:58 - concentrate on simply rendering those
17:00 - thumbnails and the next lesson we'll see
17:02 - how we can get the actual thumbnails for
17:04 - each file from dropbox
17:07 - what we want to do here ultimately is in
17:09 - our render function
17:10 - while we're mapping over each file is
17:13 - check if that file has a thumbnail
17:15 - property
17:16 - and if so use it and if not go ahead and
17:18 - use a default now the first thing to
17:20 - keep in mind here is that folders do not
17:22 - have thumbnails so essentially our first
17:24 - check is going to say are we dealing
17:26 - with file
17:28 - and if we are dealing with a file then
17:30 - we can go ahead and use the thumbnail if
17:32 - not we'll just use a default folder
17:34 - thumbnail
17:35 - let's start by declaring a thumbnail
17:37 - variable
17:38 - first we have our check to see if it's a
17:40 - file if it is we want to go ahead and
17:43 - use the thumbnail property on the file
17:45 - in other words the actual thumbnail
17:47 - and if not we want to go ahead and use a
17:49 - default thumbnail we're going to go
17:50 - ahead and check this with a ternary
17:52 - expression in case you're not familiar
17:54 - with ternary expressions they
17:55 - essentially take the form of
17:58 - if something
17:59 - and if that's true
18:01 - do
18:02 - something and if it's not do something
18:04 - else
18:05 - okay so let's go ahead and write that
18:07 - out
18:08 - what are we going to test well first of
18:10 - all we need to assign something to our
18:11 - thumbnail variable
18:13 - and here's where our ternary expression
18:14 - starts
18:15 - we're going to go ahead and check if
18:17 - there is a thumbnail property on our
18:19 - file
18:20 - if there is then
18:22 - we're going to go and use that thumbnail
18:24 - and if not we'll use a default
18:27 - okay now the thumbnail being returned by
18:29 - dropbox is going to be a base64 image
18:33 - essentially that's just one big long
18:35 - string that's a representation of an
18:37 - image instead of an actual file it's a
18:39 - string that represents an image how do
18:42 - we use that in html
18:43 - well it looks something like this
18:45 - the important part i suppose here is in
18:47 - the beginning
18:48 - we're going to start with data colon
18:50 - image and then our type of image
18:52 - and then base64 comma and then our
18:55 - base64 string
18:58 - this big long string is just a default
19:00 - file thumbnail in case we don't have a
19:03 - thumbnail available on our file
19:05 - but if we do we want to go ahead and use
19:08 - that thumbnail
19:09 - okay so you'll see we're essentially
19:11 - starting with the same thing except this
19:13 - file is going to be a jpeg that is the
19:15 - default of the file format from dropbox
19:18 - then we're using a template literal with
19:20 - an inserted variable to insert our
19:22 - base64 string so this is going to be
19:25 - whatever base64 string dropbox provides
19:28 - just to review one more time we're
19:29 - assigning our thumbnail variable to
19:31 - either
19:32 - the actual thumbnail if it exists or a
19:35 - default thumbnail if it does not
19:38 - for our folders once again folders don't
19:40 - have thumbnails so we can simply use the
19:42 - default
19:44 - okay once again that's just a big long
19:46 - string it's a folder thumbnail as we'll
19:49 - see in just a moment
19:50 - the last thing we need to do is actually
19:52 - insert the thumbnail in our html so
19:53 - we're going to go ahead and use an image
19:55 - tag here i'm going to put a class on the
19:58 - image because i've already set this up
19:59 - in my css just to make it look nice and
20:02 - then of course we need to declare our
20:04 - source for our image tag it is going to
20:07 - be
20:07 - thumbnail which is the variable we have
20:09 - declared and assigned based on whether
20:12 - or not there is one and whether or not
20:13 - it's a file or a folder okay let's save
20:16 - and see what happens there we go we've
20:19 - got our thumbnails as you can see we
20:21 - have a folder here
20:22 - and the rest of them are files now
20:24 - obviously these are default thumbnails
20:26 - and in the next lesson we'll learn how
20:28 - we can get the actual thumbnails from
20:30 - dropbox
20:36 - in the last lesson we learned how to
20:38 - render thumbnails with our files
20:41 - in this lesson we'll go ahead and learn
20:42 - how to get the actual thumbnails from
20:44 - dropbox
20:46 - if you look at the documentation which
20:47 - i've linked to the top here you'll find
20:49 - there is a method available to us called
20:53 - files get
20:54 - thumbnail batch
20:57 - and that function takes an argument
21:00 - which is an object that has an entries
21:02 - property which is an array of objects
21:06 - each object having a path
21:08 - and an optional size
21:11 - this is the basic format for the request
21:13 - we'll be making
21:15 - okay so we're getting an array of files
21:18 - and we want to turn that into an array
21:20 - of paths
21:21 - so let's go ahead and do that now
21:24 - we'll say const paths equals what do we
21:26 - need to do to our array first well first
21:29 - let's filter out all the folders because
21:31 - folders don't have thumbnails
21:33 - here we're using the filter method on an
21:35 - array
21:36 - and that takes a function the first
21:38 - argument of which is the item in the
21:40 - array we're working on
21:42 - and it simply returns true or false if
21:44 - it returns true we keep that item if it
21:46 - returns false we get rid of it in this
21:48 - case we're checking to see if the dot
21:50 - tag property is equal to file because if
21:52 - it is it's file and we want to keep it
21:54 - if it's not we don't want to keep it
21:57 - now that we've filtered our array so
21:59 - that we only have files and no folders
22:00 - we can go ahead and map over every item
22:04 - and what we'll ultimately want to return
22:06 - for every item is this object down here
22:12 - so we need to return that item
22:14 - but
22:15 - how do we do that instead of just typing
22:18 - curly braces we can actually surround
22:19 - those curly braces in parentheses to
22:22 - return a literal object
22:24 - all right so what is our path well
22:26 - that's actually available on the file
22:28 - itself as path lower
22:31 - if you'll recall we originally started
22:33 - this app by making a call to files list
22:35 - folder which gave us a list of folders
22:38 - and files each of which had lots of
22:40 - information and one of those pieces of
22:42 - information is path lower
22:45 - for the size you'll have to go ahead and
22:46 - look at the documentation to see what
22:48 - sizes are available but for our uses we
22:51 - want to go ahead and use 32 by 32
22:55 - okay so instead of this array here we
22:58 - will pass the paths away we just created
23:00 - and that will return a promise so let's
23:04 - go ahead and see what we get back simply
23:06 - by logging into the console
23:08 - before we can do that however there are
23:10 - a couple things we need to do
23:12 - first off if we look at our
23:13 - documentation we'll find that this
23:16 - thumbnail batch call
23:17 - actually has a limit on it so we can't
23:20 - get more than 25 at a time it turns out
23:22 - this files this folder call also has an
23:25 - option for a limit so this would be a
23:26 - good place to remedy that let's go ahead
23:29 - and put a limit of 20 for our demo
23:32 - purposes
23:33 - and then of course we need to call our
23:35 - new function somewhere let's go ahead
23:37 - and call it in the update files function
23:39 - and make sure to pass in the files array
23:42 - okay so when we initialize our app we
23:45 - are making a call to files this folder
23:46 - to get the files and folders then we're
23:49 - calling update files
23:50 - and then we're calling get thumbnails
23:53 - let's go ahead and save to see what
23:55 - happens
24:01 - alright looks like we got a success if
24:03 - we look at the console you'll see
24:04 - there's a lot of information there but
24:06 - essentially we're just getting an object
24:08 - with an entries property
24:10 - and an array of files and folders well
24:13 - in this case actually just an array of
24:15 - files
24:17 - all right so now that we have our
24:18 - response back from dropbox we are ready
24:21 - to start working with it and assign our
24:24 - thumbnails to our files essentially what
24:26 - we want to do is just create a thumbnail
24:28 - property on each file object that holds
24:31 - the thumbnail data
24:32 - now this next part gets a little bit
24:35 - complicated so i'm just going to go
24:36 - ahead and paste it out and then we can
24:38 - walk through it step by step
24:40 - first of all we're going to make a copy
24:42 - of our current state.files array we do
24:44 - that very easily with the es6 spread
24:47 - operator that's those three dots here at
24:49 - the beginning
24:50 - that's essentially telling javascript to
24:51 - spread the items of the array into this
24:54 - a new this new array
24:56 - so we do that and we call our new
24:58 - variable new state files
25:00 - next we want to loop through the
25:02 - res.entries
25:04 - array that we got back from dropbox
25:07 - that res.entries array is just going to
25:10 - be an array of objects each object has a
25:13 - lot of information on it but one of the
25:16 - properties on the object is thumbnail
25:18 - and that's the one we're interested in
25:20 - we want to get the thumbnail of that
25:21 - object so we're going to loop through
25:24 - each item in the array
25:26 - and in order to know which item we need
25:29 - to update the thumbnail of we first need
25:32 - to figure out where it is in the array
25:35 - so we're declaring here a variable
25:37 - called indexed update that's going to
25:38 - figure out okay what item
25:41 - in our new state files array
25:44 - remember that's just a copy of our
25:46 - current state
25:48 - which item do we need to put a thumbnail
25:50 - on
25:51 - and the way we figure that out is using
25:53 - a method called find index this is a
25:55 - method available on the array prototype
25:58 - so any array you work with it's going to
25:59 - have this find index method
26:01 - and it's similar to the dot filter
26:04 - method that we used earlier in that it's
26:06 - ultimately going to return either true
26:07 - or false
26:09 - and what we're testing here is just to
26:11 - see if the path is the same
26:14 - so if the path is the same it's the same
26:16 - file right and if it's the same file
26:18 - that's the one we want to update
26:20 - so we pass an argument to the item we're
26:23 - going to be working on and we just test
26:25 - to see if the path is the same and if it
26:28 - is
26:29 - that's the index that we want to use
26:32 - so we plug that index in here and we say
26:36 - in our new files array
26:38 - find this index
26:40 - and add the dot thumbnail property to it
26:43 - and make it equal to whatever the
26:45 - thumbnail was that dropbox returned for
26:47 - that file and once we do all that for
26:49 - every single item in the array we can
26:52 - finally assign
26:54 - state.files to our new array of files
26:57 - and the only difference here is this
26:59 - array has thumbnails that's the only
27:01 - difference between these two arrays
27:03 - so we've added our thumbnails to our
27:05 - items in our array and finally we render
27:08 - them to the screen
27:10 - let's hit save and see what happens
27:16 - all right
27:17 - looks like everything is working we've
27:19 - got our actual thumbnails next to each
27:21 - item
27:22 - everything seems to be working fine
27:24 - you'll notice that at the top here we
27:25 - have a folder and that does not have a
27:27 - thumbnail which is normal but every
27:29 - other file does so everything was
27:31 - successful and we're ready to move on
27:39 - so far we've introduced two api calls
27:41 - into our app
27:42 - the first was files list folder
27:44 - and the second
27:46 - files get thumbnail batch
27:48 - both of these have returned promises
27:51 - using dot then
27:53 - which make working with asynchronous
27:55 - data a little easier
27:57 - however we're going to need to make some
27:59 - more calls in the future and we'd like
28:01 - to move away from promises into a
28:03 - feature in es7 called async await
28:07 - the way async await works is simply we
28:10 - declare async before our function so
28:12 - instead of just writing out the function
28:14 - put the async keyword right before it
28:18 - now inside of that function we can use
28:20 - the await keyword let's go ahead and
28:22 - call our variable res just like before
28:25 - this time we'll put a weight before our
28:28 - function call
28:29 - so cons res equals await whatever our
28:32 - asynchronous call is
28:34 - as long as that returns a promise this
28:36 - should work
28:37 - and we can get rid of our dot then call
28:40 - and instead act like this is just a
28:42 - regular variable
28:45 - essentially if you picture this
28:47 - function being a synchronous function
28:50 - we're working with
28:52 - asynchronous data the same way
28:54 - it's as if we were saying constrains
28:56 - equals one plus two and then using it
28:59 - just like we normally would only this
29:01 - function is asynchronous and by using
29:04 - async await
29:06 - we are telling javascript to wait until
29:08 - this function is complete before moving
29:10 - on to the update files call and then
29:13 - using this variable
29:15 - let's go ahead and do the same thing
29:17 - with our get thumbnails function
29:20 - again we'll declare the async keyword
29:22 - before the function
29:24 - and we will simplify here by assigning
29:27 - our data to a res variable once again we
29:30 - can get rid of the dot then call
29:32 - and we can go ahead and use all the
29:35 - stuff we've done earlier in pretty much
29:38 - the same format only now it's a lot
29:40 - cleaner it just looks like we're dealing
29:42 - with synchronous data we're assigning a
29:44 - variable
29:45 - res to whatever data we get back here
29:48 - and as long as we include the await
29:50 - keyword before our asynchronous call we
29:53 - should be good
29:55 - let's go ahead and save and see if this
29:56 - still works
30:01 - looks like everything still works
30:03 - so that's how you use async await to
30:05 - simplify your code and make working with
30:07 - asynchronous data a little bit more
30:09 - manageable we'll go ahead and continue
30:12 - to use async await in future lessons
30:20 - we just learned how to render thumbnails
30:22 - after getting them from dropbox in order
30:25 - to get those thumbnails we had to limit
30:26 - our first call to get files to only 25
30:30 - at the very most and we chose 20.
30:33 - however there are more than 20 files in
30:36 - our folder in this folder that we're
30:38 - using for our demo there are actually 37
30:40 - files
30:41 - so what do we do if we want our
30:42 - thumbnails but we still want to get all
30:44 - the files
30:45 - well dropbox has a way to do this
30:47 - for the sake of demo purposes let's go
30:49 - ahead and change this limit to five
30:51 - as you can see here we're only getting
30:53 - five files one of them is a folder
30:56 - to show how we can resolve this i'm
30:58 - going to take a look at an online tool
31:00 - that dropbox provides
31:02 - and i've linked it right here they call
31:04 - it the api explorer
31:07 - if you go ahead and open up that link
31:09 - you might see something like this
31:11 - there are a bunch of methods listed on
31:13 - the left hand side that you don't see in
31:15 - the slide here but one of those methods
31:17 - is list folder and you may recognize
31:19 - that name because we're using the
31:22 - javascript sdk equivalent right here
31:24 - files list folder
31:26 - now online if you look at the tool
31:28 - you'll be able to see the different
31:29 - options that are available and you can
31:31 - enter a path and you can enter a limit
31:33 - for example and then you can go ahead
31:35 - and submit that call to see what happens
31:38 - if you do that you might see a response
31:39 - that looks something like this
31:41 - this should look somewhat familiar to us
31:43 - we have our entries property which is an
31:46 - array of files
31:47 - however there are two things we haven't
31:49 - looked at yet and that's these last two
31:51 - properties the cursor and has more
31:54 - the cursor is essentially a very long
31:57 - string that keeps track of where we are
32:00 - in the process or in the folder it's
32:02 - sort of like a you were here last time
32:04 - you made this call pointer
32:07 - and the has more property tells us are
32:09 - there more files to get in this case it
32:11 - looks like there are
32:13 - so we can use the has more property to
32:15 - tell if we have more files to get and we
32:17 - can use the cursor to actually get those
32:19 - files
32:20 - and we would do that with another method
32:22 - that's similar to the one we already
32:24 - used if we look at the api explorer it
32:26 - would be under list folder slash
32:28 - continue
32:29 - now the javascript sdk name will be a
32:32 - little bit different but we'll go ahead
32:34 - and look at this for now
32:36 - if you look at the online tool you'll be
32:37 - able to enter the cursor right here in a
32:39 - box and submit a call that will show you
32:43 - another object similar to what we've
32:45 - already seen we have an entries property
32:47 - which is an array of files
32:49 - and you can do this over and over again
32:51 - until finally at the very end once there
32:54 - are no more files you'll see has more
32:57 - equal to false
32:58 - in other words for every response we get
33:01 - from dropbox we want to check the has
33:03 - more property and if it's true use the
33:06 - cursor to get some more files and then
33:08 - repeat that process until eventually has
33:10 - more will be false
33:12 - and that's what we'll learn how to do in
33:13 - our next lesson
33:19 - our app is going to start by calling
33:21 - this init function
33:23 - inside of that function we are getting
33:25 - some files and folders from dropbox
33:27 - we're limiting them to only 20 for the
33:29 - sake of getting thumbnails
33:31 - and then we are rendering them
33:33 - after we make this call though we want
33:35 - to check if there are more files
33:37 - so let's check that has more property
33:39 - that we discussed in the last lesson and
33:42 - if it's true we will call a function
33:44 - called get more files which we haven't
33:45 - set up yet but let's just type it out
33:47 - for now and into that function we'll
33:49 - need to pass the cursor so it can use
33:51 - that to get more files and in this case
33:53 - since we'd like something to happen with
33:55 - those files right away we'll also pass a
33:58 - callback so this is going to be a
34:00 - callback function here that's going to
34:01 - receive more files from our get more
34:04 - files function
34:05 - and what do we want to do with those
34:06 - files well we want to do the same thing
34:08 - we did with our first set of files we
34:10 - want to call update files
34:12 - and remember that the entries property
34:14 - is where those files are stored
34:16 - once again we're going to call a get
34:17 - more files function that we still need
34:19 - to create we're going to pass in the
34:21 - cursor
34:22 - and we're also going to pass in a
34:24 - callback function so that when more
34:26 - files are retrieved those files can be
34:28 - passed into this function and we can
34:30 - update
34:31 - files
34:32 - okay now when we're doing this i'd like
34:33 - to show a loading message to the user so
34:35 - they know something's happening
34:37 - let's go ahead and store that in a
34:39 - variable here
34:41 - now that we have that variable
34:43 - we can simply hide or show
34:45 - that element whenever we're loading or
34:47 - not loading
34:50 - okay so we're showing our loading
34:51 - message we're running our get more files
34:53 - function we're hiding our loading
34:55 - message and in case we don't actually
34:57 - have any more files we'll skip that
34:59 - block altogether and we'll just make
35:01 - sure our loading message is hidden
35:03 - now this get more files function is
35:05 - obviously going to be asynchronous so we
35:07 - need to make sure to put a weight here
35:09 - and that keyword will work because this
35:12 - init function is asynchronous if we
35:14 - didn't have this async keyword here that
35:16 - await keyword and this away keyword
35:18 - would not work but they do
35:20 - so after our get more files function is
35:23 - complete then we can continue with our
35:24 - code
35:25 - now we get to create our get more files
35:27 - function
35:29 - okay the first thing we need to do is
35:31 - figure out what dropbox method there is
35:33 - for us to call
35:35 - if we look at the documentation we'll
35:36 - find that there is a method very similar
35:38 - to files lists folder called
35:40 - files list folder
35:42 - continue and that method is going to
35:45 - take an object with a cursor property
35:48 - which is going to be the cursor
35:50 - using objective structuring we can
35:52 - actually shorten this to just a cursor
35:54 - because it is assumed when we write it
35:56 - like this that the property name and the
35:58 - variable that is the value will be the
36:00 - same which they are we're getting our
36:02 - cursor value here and so this is just a
36:04 - shorthand way of saying cursor is equal
36:06 - to cursor
36:07 - after we do that and keep in mind that's
36:09 - asynchronous so we'll need to make sure
36:11 - this is an asynchronous function
36:13 - and we'll check if there was a callback
36:15 - provided to this function and if so call
36:17 - it with our response
36:19 - now as it is right now we are only
36:21 - checking for more files one time but
36:23 - obviously we need to do that until there
36:25 - are no more files to get so once again
36:27 - we'll check that has more property
36:30 - and if there are more files to get we'll
36:32 - just use recursion to call this same
36:34 - file again this time we'll pass in the
36:36 - cursor we got from our second call and
36:38 - we'll pass in the same callback function
36:41 - okay so get more files will run it will
36:44 - check if there are more files using the
36:45 - cursor
36:46 - it will make a callback
36:48 - and if there are more files still even
36:52 - after that call that we just made
36:54 - then it will call this same function yet
36:56 - again and it will keep doing that until
36:59 - has more is false in which case it will
37:02 - skip this call right here
37:04 - one more thing we need to remember is
37:06 - this awaits keyword it's easy to forget
37:08 - but do recall this get more files
37:11 - function is asynchronous so our files
37:14 - this folder continue functions
37:16 - asynchronous and our get more files
37:18 - function is asynchronous so they both
37:19 - need this await keyword okay
37:23 - let's save and see what happens
37:27 - you may have noticed that the first
37:29 - response was updated shortly after with
37:31 - some new files and if you scroll down
37:34 - you'll see we have a lot more than 20
37:35 - right now
37:36 - looks like it's working
37:38 - so we're making our initial call to get
37:40 - some files
37:42 - we're updating our browser then we're
37:44 - checking if there are more files if so
37:46 - we'll show a loading message and will
37:49 - wait for our get more files function
37:51 - which will get more files
37:53 - call the callback
37:54 - and once again check if there are still
37:56 - more files and if so repeat this loop
37:59 - until eventually there are no more files
38:01 - at which point this code will continue
38:03 - because of our await keyword
38:05 - and hide the loading message
38:12 - we've done some pretty cool things in
38:14 - our app already however one thing that
38:16 - would be nice is if we weren't
38:18 - restricted to just the root path all the
38:20 - time
38:21 - let's go ahead and build that out now
38:23 - if we look at our app currently you'll
38:25 - see i've made some changes with the css
38:27 - and html
38:28 - but the important thing for this lesson
38:30 - is this folder path input up here
38:33 - ideally we'd like to let the user enter
38:35 - some sort of path in here and go to it
38:38 - in our app right now we only have one
38:40 - folder other stuff
38:42 - so it'd be nice if the user could say
38:43 - hey i want to go to other stuff
38:47 - and hit enter or hit the button and go
38:49 - to the path
38:50 - right now it's not working it's just
38:52 - refreshing the page so let's go ahead
38:54 - and build out that logic
38:56 - first off we'll need to declare a couple
38:58 - new variables to reference some html
39:00 - elements and get the data from that form
39:04 - so we've declared one element for the
39:06 - form and one element for the input why
39:08 - do we need both
39:10 - well for the form we want to use that to
39:12 - listen to the submit event that's how
39:15 - we'll know when the user has actually
39:17 - changed
39:18 - anything about the path
39:20 - so we'll add an event listener and
39:23 - listen for that submit event which will
39:25 - give us an event i've labeled that as e
39:27 - here
39:28 - and the first thing we need to do is
39:30 - prevent the default behavior of forms
39:32 - because that will refresh the page and
39:33 - we don't want that
39:35 - next we need to get the value for the
39:37 - inputs remember that is at
39:39 - root path input
39:41 - declared up here
39:43 - and we can get the values simply by
39:45 - saying value
39:47 - however in dropbox the root path is
39:49 - expressed with an empty string and not a
39:51 - slash which a lot of people are used to
39:54 - so i do real quick want to do a check
39:57 - and see if they entered it equal to a
39:59 - slash if so let's go ahead and use an
40:01 - empty string if not we can go ahead and
40:04 - use that value
40:06 - also people sometimes make mistakes with
40:09 - capitalization and such so let's turn
40:11 - this into a lowercase string that way
40:14 - we're always dealing with lowercase
40:17 - now we're not actually doing anything
40:18 - with this variable yet so let's think
40:20 - about what we might need to do
40:21 - it would be nice if this root path was
40:23 - available throughout our app we may need
40:25 - to use it elsewhere so let's actually go
40:27 - ahead and put that on state it might
40:29 - change over time so that seems like a
40:31 - good place to put it
40:32 - okay so now we are assigning the root
40:35 - path property of the state object to
40:38 - whatever the root path is that the user
40:39 - enters when they submit the form
40:41 - what else do we need to do
40:43 - well we don't want to show the folders
40:45 - and files from the old path so let's go
40:47 - ahead and clear those out
40:50 - also there is one quick thing i want to
40:52 - do with the html
40:54 - all i'm doing here is referencing that
40:56 - loading element that you see sometimes
40:58 - when the app first starts and i'm
41:00 - removing the hidden class to show the
41:02 - user that it is loading
41:05 - and well if we think about it we're
41:07 - basically starting over in our app when
41:08 - we first pull up the app it's loading
41:10 - files and then what's done loading that
41:12 - loading message is hidden and we can
41:14 - start using it we want to do the same
41:16 - thing here every time a user changes the
41:17 - path so let's just go ahead and call our
41:20 - init function right now
41:23 - that will basically start our app over
41:25 - it will get this files this folder
41:28 - called
41:29 - and it will search for whatever the path
41:31 - is except we don't want an empty string
41:33 - here we want whatever our root path is
41:36 - that the user entered
41:38 - okay
41:39 - so anytime the user submits that root
41:42 - path field
41:43 - it will get the value it will store it
41:45 - on our state
41:48 - it will show a hidden message and it
41:50 - will reinitialize our app
41:52 - oh i just realized i forgot to put
41:55 - parentheses after our two lowercase
41:57 - method sorry about that
41:59 - now let's go ahead and save and see what
42:01 - happens
42:02 - okay we only have one folder here other
42:04 - stuff
42:05 - so i guess that's the folder we're going
42:07 - to be testing here we go
42:09 - and it works
42:11 - i can look in my dropbox account and
42:12 - confirm this is indeed the contents of
42:15 - the other stuff folder so everything is
42:16 - working as it should in the next lesson
42:19 - we'll learn how to make this organize
42:20 - button work to magically move our files
42:23 - into their respective folders
42:30 - at last we reach the main function of
42:33 - our app the ability to organize our
42:35 - files into folders based on the date
42:38 - modified let's get started
42:40 - first we'll need to get a reference to
42:42 - the button element we'll go ahead and
42:45 - call it organize button
42:48 - then we need to listen for a click on
42:50 - that button
42:52 - since organizing our files will be
42:54 - asynchronous let's show some sort of
42:56 - message to our user to indicate that
42:58 - something's happening
42:59 - first we'll disable the button
43:01 - and then after we disable the button
43:03 - let's show a message
43:05 - then we'll go ahead and carry out our
43:07 - organize operation
43:08 - that is asynchronous so we'll need to
43:10 - make sure this is an asynchronous
43:12 - function and we'll need to wait for that
43:14 - to complete
43:15 - once it completes we can re-enable our
43:18 - button
43:19 - and in order to restore the previous
43:21 - text we'll need to grab that first
43:24 - now that we have a variable to reference
43:26 - the text before it was clicked we can
43:28 - restore that
43:30 - okay now we're ready to create our move
43:32 - file sedated folders function
43:36 - first off let's establish which dropbox
43:38 - method we need to use in order to move
43:40 - files around
43:41 - for this function we will use files move
43:44 - batch v2 they have a version 2 of this
43:47 - function that's what we'll use here
43:49 - that takes an object as an argument with
43:52 - a you guessed it entries property and
43:55 - that entries property is an array of
43:57 - objects each object having a from path
44:00 - and a two path so where are we moving it
44:02 - from and where are we moving it to
44:04 - now of course we won't hard code this
44:06 - array we will generate it so let's call
44:09 - that array entries so that we can
44:11 - simplify it using object destructuring
44:15 - and let's create that entries array up
44:18 - here
44:19 - that will be based on our state dot
44:21 - files array so we're taking whatever
44:23 - files are in our state currently and
44:25 - we're going to perform two operations on
44:27 - them first of all we're going to filter
44:29 - out the folders just like we did with
44:31 - our get thumbnails method
44:33 - then we're going to map over every file
44:36 - and what we ultimately want to return is
44:39 - an object with a from path and a to path
44:42 - now the front path is going to be pretty
44:44 - simple that's just file.path lower
44:47 - that's available on the metadata we got
44:48 - from our very first dropbox call
44:51 - the to path is what we'll need to build
44:53 - based on the date
44:55 - now the file does have a property on it
44:57 - called client modified
45:00 - and that will tell us the date that it's
45:01 - last modified so that's already taken
45:03 - care of for us just so you know there
45:05 - also is a server modified property but
45:07 - for this case we will use client
45:08 - modified
45:10 - and it's put in such a format that we
45:12 - can actually use it with the javascript
45:14 - date constructor so we will do that in
45:17 - order to have this date variable
45:20 - something that we'll be able to work
45:22 - with in order to get the year and the
45:24 - month and whatever other information we
45:26 - need from this date
45:28 - okay so essentially what we're going to
45:29 - use to build our path is a template
45:31 - literal
45:32 - with four different variables we have
45:34 - our root then our year then our month
45:36 - and then the file name
45:39 - so for the root that's found on our
45:41 - state object so state dot root path
45:44 - our year is going to come from that date
45:46 - variable we just created and you can get
45:48 - that by typing in here get
45:51 - full year
45:53 - our month is going to be a little bit
45:55 - weirder than a year it's going to be get
45:58 - utc months and also
46:01 - the month number is one behind what you
46:03 - might think it would be so january is
46:05 - actually zero so we add one to whatever
46:07 - the month says it is in order to make it
46:09 - more reasonable
46:11 - and then finally we have a file name all
46:14 - right that's all for this lesson in the
46:16 - next lesson we're going to finish
46:18 - building our move files function and
46:20 - we're actually going to see our app do
46:22 - its magic
46:29 - in the previous lesson we set up this
46:31 - entries array and we passed it into the
46:34 - property of entries on our object which
46:37 - we passed into files move batch v2 from
46:40 - dropbox which is going to move our files
46:42 - around
46:43 - now we need to handle whatever dropbox
46:45 - does
46:46 - so what is it going to do and what's it
46:48 - going to return to us well it could
46:50 - return one of two things it may be an
46:52 - object saying that the job is done which
46:54 - will say success or it may be an object
46:58 - with an asynchronous job id
47:01 - now if we get back an asynchronous job
47:04 - id then we know that it's still working
47:06 - so here i'm just pulling out that
47:08 - property from our response object
47:10 - and if that property exists
47:14 - whatever is inside of this if block will
47:16 - run
47:16 - and so what do we need to do in here
47:18 - well we need to check on that job
47:20 - now how do we do that dropbox actually
47:22 - provides a similar method to us
47:25 - and that method is called files move
47:27 - batch check v2 and in that method we
47:29 - pass in an object with our asynchronous
47:31 - job id okay so we'll want to make sure
47:33 - that we're waiting for this to complete
47:36 - and you'll notice i use the let keyword
47:38 - there because we're going to reassign
47:40 - that res variable and we're going to do
47:42 - that right here because we want to
47:45 - reassign it to a new value when we check
47:48 - on the current status but we don't want
47:50 - to do that one time we actually need to
47:51 - keep doing that until we get a response
47:54 - saying that that job is done so how do
47:56 - we do that well we're going to need to
47:57 - set up a loop
47:59 - here we've set up a do while loop with a
48:02 - do while loop the logic inside the
48:04 - brackets will run at least one time
48:06 - regardless of our logic here inside of
48:10 - the parentheses that's what we want we
48:12 - need to make sure if we're getting an
48:13 - asynchronous job id back from our
48:15 - response that we're checking we're
48:17 - following up on that at least one time
48:20 - then it will keep doing that as long as
48:22 - this logic inside our wow parentheses is
48:25 - true
48:26 - and here we're simply checking the dot
48:27 - tag property of our response to see if
48:29 - it's still in progress as long as that
48:32 - tag property is in progress our job is
48:34 - still working so we need to keep
48:36 - checking so we will loop over this
48:39 - continually until eventually that dot
48:41 - tag property is something else maybe
48:42 - success maybe failure either way we know
48:45 - the job is finally done now that's it
48:47 - for our move files function
48:50 - but once that's all done we want to
48:52 - change the ui a bit so let's go back up
48:55 - to our button
48:57 - here we are waiting for our function to
48:59 - be done and after it's done we are
49:01 - re-enabling our button and we are
49:03 - showing the original message of our
49:05 - button
49:06 - but we also need to re-initialize our
49:08 - state just like we did
49:10 - with our root path form so when someone
49:12 - changes the path we need to clear out
49:14 - the current state of files show the new
49:16 - files the new path and we need to show
49:19 - that loading message while we're doing
49:20 - that and then we need to re-initialize
49:22 - our whole app so we want to do the exact
49:24 - same logic and because of that i'm going
49:26 - to refactor here a little bit
49:29 - okay all i've done here is move that
49:31 - logic into its own function called reset
49:34 - and we're calling that same function
49:35 - with our root path form and our organize
49:38 - button
49:39 - okay so that's pretty much everything we
49:41 - need to do
49:42 - let's save and see what happens
49:45 - all right the moment of truth here we go
49:49 - now as you can see we're getting
49:50 - responses back from dropbox this is our
49:52 - loop running it is logging out whatever
49:55 - response we get and you'll see that tag
49:57 - property is still in progress so that
49:59 - loop needs to keep running and our
50:02 - button is disabled and it says working
50:04 - so we are waiting for this job to
50:06 - complete
50:09 - and there we go you can see we have a
50:11 - tag property with complete
50:13 - and if you look at our file structure
50:16 - well there are no files
50:18 - we just have folders now we have a 2018
50:20 - folder and a 2019 folder we still have
50:22 - our other stuff folder so that hasn't
50:24 - moved which is good let's go ahead and
50:26 - check out the contents of these new
50:27 - folders 2018 okay that has a 12 folder
50:31 - so that's december let's go into that
50:33 - and see what we have
50:35 - and there we go here are our files
50:38 - looks like all the files moved
50:39 - successfully into our folder and we've
50:43 - set it up so that there's also a 2019
50:45 - folder with
50:47 - january
50:48 - so looks like our files were spanning
50:50 - across two different months and they've
50:52 - all been moved successfully our app
50:54 - officially works
50:56 - awesome
50:58 - now there is one thing i want to mention
50:59 - real quick and that is error handling
51:01 - it's not something we've really done in
51:03 - any of our methods thus far but it's
51:04 - definitely advised in the real world
51:07 - and with async await it's actually not
51:09 - too hard you simply surround your code
51:11 - with a try catch block so we're going to
51:13 - try whatever is in these brackets and if
51:17 - it is successful then great it just
51:19 - carries on and does its thing otherwise
51:21 - if there's any kind of error it can go
51:23 - ahead and pass that error into a catch
51:25 - block and we can do whatever we want
51:26 - here we could log into the console or we
51:29 - could show something to the user the
51:31 - ladder would be preferable because we
51:32 - want the user to know something went
51:34 - wrong and that's the whole purpose of
51:36 - error handling so that we can actually
51:38 - do something with these errors and it
51:40 - can be a better user experience so when
51:42 - you build your own app it's definitely
51:43 - advisable to do some kind of error
51:45 - handling and once again you can wrap
51:47 - stuff in a try catch block to at least
51:50 - form the basic foundation of error
51:52 - handling so that's just a quick preview
51:54 - into how you might handle some errors
51:56 - just in case something goes wrong with
51:57 - dropbox or there's a network failure or
51:59 - whatever it may be and with that we're
52:01 - just going to leave our app as is it's
52:03 - basically complete of course you can add
52:04 - more features you're definitely
52:06 - encouraged to do so but for the sake of
52:08 - our demo what you see is officially our
52:11 - app
52:17 - congratulations you've made it to the
52:19 - end of the dropbox api course thanks so
52:21 - much for taking the time to look at this
52:23 - i hope it was inspiring just to recap
52:25 - what we've learned so far we learned how
52:27 - to get files and display those in the
52:29 - browser we learned how to get thumbnails
52:31 - for those files and display those as
52:33 - well and we learned how to move files
52:35 - around in the actual dropbox account as
52:38 - for the javascript side of things we
52:39 - learned some array methods such as
52:41 - sorting and filtering we saw some es6
52:43 - features being used like arrow functions
52:46 - and we learned async await which is a
52:48 - great way to deal with asynchronous data
52:50 - in general especially when you're
52:51 - working with apis like this one
52:53 - once again my name is christian it was a
52:56 - lot of fun putting this course together
52:58 - i hope that you will head over to
53:00 - dropbox.com developers and set up your
53:02 - own app and then go and look at the
53:04 - documentation to find some more methods
53:06 - that you can use and some more cool
53:08 - things that you can do with dropbox
53:10 - that's the end of our dropbox course i
53:12 - just want to challenge you one more time
53:14 - go ahead build something cool and share
53:16 - with the world

Cleaned transcript:

hello welcome to the dropbox api tutorial in this tutorial we're going to see a few different methods that are available to us in the dropbox api that allow us to interact with files and folders and manipulate them my name is christian i'll be your instructor for this course and i'm sure you're wondering what we're going to do and what you'll need to know so let's jump right in here as far as what you want to know it's good to know html and javascript but it's not necessary really a lot of these methods we're looking at will be available for other languages such as python for example they just might be a little bit different syntax but the overarching principles will remain the same so as long as you're wanting to learn about the dropbox api even if you don't use the javascript sdk which we're going to use i think you'll find this useful as for what you'll learn we'll go over getting some files getting the thumbnails for those files and moving those files around now i want to mention again there are many more options available in the dropbox api and many different methods you can use to manipulate files and folders but these are the ones we're going to go over and hopefully that'll give you a good basis for how the api generally works additionally we'll use some array methods that maybe you've never seen before or maybe need some clarification how they work we'll use some es6 features such as arrow functions and we'll learn how to use async await which is a fairly new way of dealing with asynchronous data and is perfect for our use case as for what we're building specifically well take a look here and you'll see that we have a file organizer 3000 as i've affectionately named it we have a path where we can search for files or folders and we have them listed out here with thumbnails at the end of this lesson we'll be able to organize every file in any given folder using the path here and once we hit organize it'll move those files into different folders based on their date modified so that's the app we're going to build let's jump right in before we start coding out the app i'd like to go over the developer documentation real quick so if you want to click right here on the slide or just go to dropbox.com developers you should see something like this it'll show you a dashboard of sorts and if you go over to my apps on the left hand side you should see a blank page because most likely you don't have any apps yet and then you can click on create app up at the top right that'll get an app started for you now before i go further i should mention you don't need to do this to take this course just going to give you some brief information on how to set up an app so that when you do set up an app you can be familiar with it and it'll help you know how i set up this app so first it's going to ask you which api you want to use for this app we're using the regular dropbox api if you wanted to support teams for dropbox so multiple people collaborating within dropbox then you might select dropbox business api but most likely you're going to go with the regular api next we need to choose if we're going to use just one folder for our app inside the user's dropbox account or if we need access to the user's entire dropbox account for this app i went ahead and chose app folder although in reality if we were actually building this app we would probably want to choose full dropbox because this app is essentially going to organize a user's files and that would require access to their files lastly we want to pick a name for our app if it's taken already then it'll tell you that and you can pick a new one once you're done go ahead and click create app okay great so now that should take you to a setting screen and we'll quickly go through these first we have our status which will currently be in development when you're ready you can go ahead and apply for production so that it can be reviewed by the dropbox team currently you are also only the user that can access this and if you want to enable additional users you can click here now that still has a limit on it since it's a development app and if you want to enable more users then you would want to apply for production here we have the permission type that we just chose in step two when we first set up our app that's app folder we're only wanting access to one folder in the user dropbox account we don't want access to their entire dropbox account and then we have our app folder name now this is by default going to be the same name as our app itself but if you wanted to change the name of just that folder your app name would remain the same just the folder in the dropbox user's account would change then you can change it here next we have the app key and secret now in this tutorial we're not going to use these but in a real life app you probably would app keys and secrets are good for when you need to do authorization which is actually the next section here we can choose where we want to redirect the user once they have been authorized allow implicit grant i'm not going to really go into if you hover over the eye when you actually go to the page you can see a little more detail you should probably leave it as is if you're building a clientside app which you probably are and generate access token is where you can get your own token to work with this is something i've already done and that will use in our app although i should note that the token i'm using will be expired by the time you're viewing this so you may want to go ahead and do this and plug that into scrimba or your own code base wherever in order to actually play with some files but this is basically going to skip the authorization setup and just give you a quick way to authorize dropbox to check out the folders and files next we have options for what are called choosers and savers and they look like this basically just little buttons that dropbox has already created for you so that if you need to do something simple like get some files or maybe you just need to save a file to their account then instead of building an entire app you may just want to use a chooser or a saver and if you do decide to use one of those this is where you would put your web address so the dropbox knows that host is okay to use a chooser or saver next we have web hooks basically it's the idea that once i do something here i want to trigger an action there once i do something with dropbox i want to trigger an action with gmail or something similar lastly if you are done with this app maybe you don't need it anymore you can go ahead and delete it here just be warned this is an irreversible action so be careful the next page we have is the branding page these options are rather obvious lastly we have the analytics tab this naturally shows nothing because we haven't done anything yet but after a while you should see some stuff here real quick before we go on to coding our app i want to mention the javascript sdk documentation you can click on this link to go there it looks something like this basically it's a list of all the different methods that are available in this app we're only going to use a few different methods so it's really not going to give you a good idea of everything dropbox can do so go to the documentation check out all the different methods you can use even if you're not going to use the javascript sdk in your app maybe you're coding in python or something else this will be helpful because all these methods are the same or very similar to what you might use in another language once again you can head over to dropbox.com developers when you're ready to set up account until then let's go ahead and start the tutorial let's begin by importing the dropbox sdk one thing you need to make sure of is to surround dropbox with curly braces because this is a named import or export and once we do that we can go ahead and use it to create a class or rather instantiate a class and assign it to a variable we'll call that dbx for dropbox and here we're just going to say new and then dropbox with parentheses and we're going to pass in an object to this function which is creating a class for us that once again we're assigning to dbx now that object is going to take two properties one is going to be an access token and the other is going to be a fetch library now there are different libraries you can use in which case you'd put whatever fetch library here but if you just want to use the native window fetch library then you can just put fetch and that uses the es6 feature of simply assuming that the property and the variable are the same which they are for the access token you'll want to go ahead and use your own because by the time you view this the access token i'm going to put right here is not going to be valid any longer so go ahead and go to dropbox.com developers i'll go ahead and paste that link up here and set up your account to get your own token and once you do that you can replace the token here in whatever lesson you want to play around with if you don't really want to play around with the code of course you don't have to do this everything will still work it's not absolutely necessary but part of the beauty of scrimba and having lessons on here is that you can play around with the code and you're not going to be able to do that unless you change out this access tokens so i do encourage doing that but either way we've imported our dropbox sdk and we're now ready to use this dbx variable so far all we've done is instantiate our class in order to see what methods are available on that class you can go to the documentation here we're just going to go ahead and use as our first method something called files list folder which will essentially take the folder and list out the files inside that folder so this takes a lot of different options on the object that we pass in but we're just going to use for now the path now to specify the root path we actually pass an empty string not a slash and i should note the root path here is going to be the root of our app folder not the user's dropbox account and this is because when i set up my developer app i chose that option you can set it to the user's dropbox account but i set mine to the app folder so the root will actually be the root of the app folder not the dropbox account okay now what's that going to do for us that's going to return a promise and all i want to do for now is go ahead and see what we're getting back let's hit save okay it worked we got back it looks like an object with an entries property and that value of that entries property is an array of different objects and each object seems to represent either a folder or a file so you'll see here this first one we have is a folder named other stuff we have another folder here named 2018 another folder here in name 2019 looks like we've got a bunch of files in there and you can see that we have a lot of data on each of these files so in the next lesson we'll go ahead and render these to the browser so that we're looking at it in a pretty way that's nice to see instead of in the console but before we move on i need to know real quick before you go off and use this new files list folder method you've learned you need to know this might not be all the files in the account or whatever the path is that we're trying to get them from there might be more files and there is a way and we're going to learn later on how to use this to get more files it's called files list folder continue there's a different method that dropbox provides to us so i just need to make that note real quick we'll learn how to get more files later on for now we're just learning how to get that first response however many files dropbox is willing to give us and in the next lesson once again we'll learn how to render those files to the browser as it is now our application only logs the result that we're getting back from dropbox that's fun and all but let's see if we can render things to the browser i know this tutorial is more about dropbox but i thought it might be useful to see how we're making things happen in the dom first of all we need to declare an element to interact with here i'm declaring a variable called file list lm for element and using document.queryselector to select an element with the class of js file list i like to put js at the beginning of my class names just to know that i'm dealing with javascript so i don't accidentally mess with them when i'm just dealing with html or css i'm going to go ahead and do a little refactoring here to set up our app what i've just done is declare a state variable that will hold our state right now it's just one files property which is an empty array i've moved our call to the files list folder endpoint into an init function which we can call at the end after declaring our other functions i've declared an update files function which will take some files and update the state accordingly so that we keep all our old files that were in state as well as update it with the new ones and inside that we're also calling our render files function which will fill in now inside render files we'll first need to get our element so that we can place some html in there now there are two things i want to do with the files here first i want to sort them then i want to map over them and for every one of them create an li element so that we can see the list let's sort alphabetically and let's go ahead and put the folders on top okay real quick i'll go over what we're doing here on this line we're comparing the dot tag property of each item if you recall what we logged to the console every item in the array is going to have a dot tag property that is either a folder or file what we're basically saying here is are either one of these items a folder if so we're going to need to prioritize the folder next we're checking are they the same if they're both folders or if they're both files we don't need to do anything with them except for organize them alphabetically which we do here but if one of them is folder and one of them is a file we're going to check which one is a folder if it's the first one we return negative one to say that it should come first and if it's the second one we return positive one to say that should come second in this way we're sorting all our folders on top and we're sorting everything alphabetically next we turn to our dot map method which is going to loop through every item in the array and return an array the map method of an array accepts a function the first argument is each item in that array in our case a file or folder in fact let's go ahead and check what type this is we'll say const type equals file and then if you'll recall the dot tag property is what stores whether it's a file or a folder then we just want to return our actual html i'm going to go ahead and use backticks to create a template literal inside this template literal whatever i put will be what's returned it will take it literally hence the name so let's return an li element and what we want to see ultimately in the browser is the name of the file if we were to look at our console again and see what is being returned from dropbox we'll see that there's a dot name property on every file so we'll put that in there i also want to go ahead and do some styling real quick i've already declared a class of dbx list item for each individual item in the list and then i also want to put the type that we just declared above so we know if it's a file or a folder okay now before that's actually going to do anything we do need to replace our console.log up here so that instead of logging it we're actually calling all this logic and to do that we will call update files with the files that we get back from dropbox once again if you were to look at that console that we logged earlier in the last lesson you'll see that there's a dot entries property on that object which holds the array of files so now we have our init function calling our update files function which calls our render files function which will ultimately render something to the dom however if we were to call this right now we would see a bunch of commas in between every li element let me go ahead and hit save to show you what i mean as you can see we've successfully logged the items of the array however we are seeing commas in between every item and that's simply because we're not returning a string here to our dot inner html we're returning an array we don't really want to do that we want to return a string so let's take this array let's call the dot join method which will join every element in the array into one string and inside we can pass what kind of separator we want to use in our case we don't want a separator we just want one long string so we'll pass an empty string hit save again and now voila we can see all of our items we can see that our folder is up on top other stuff and we can see that they are ordered alphabetically now that's not really easy to tell this is a folder so in the next lesson we'll go ahead and add some thumbnails right now our app is working and we're displaying our files but it doesn't look great yet what we'd like to do in this lesson is go ahead and add some thumbnails now this lesson is going to concentrate on simply rendering those thumbnails and the next lesson we'll see how we can get the actual thumbnails for each file from dropbox what we want to do here ultimately is in our render function while we're mapping over each file is check if that file has a thumbnail property and if so use it and if not go ahead and use a default now the first thing to keep in mind here is that folders do not have thumbnails so essentially our first check is going to say are we dealing with file and if we are dealing with a file then we can go ahead and use the thumbnail if not we'll just use a default folder thumbnail let's start by declaring a thumbnail variable first we have our check to see if it's a file if it is we want to go ahead and use the thumbnail property on the file in other words the actual thumbnail and if not we want to go ahead and use a default thumbnail we're going to go ahead and check this with a ternary expression in case you're not familiar with ternary expressions they essentially take the form of if something and if that's true do something and if it's not do something else okay so let's go ahead and write that out what are we going to test well first of all we need to assign something to our thumbnail variable and here's where our ternary expression starts we're going to go ahead and check if there is a thumbnail property on our file if there is then we're going to go and use that thumbnail and if not we'll use a default okay now the thumbnail being returned by dropbox is going to be a base64 image essentially that's just one big long string that's a representation of an image instead of an actual file it's a string that represents an image how do we use that in html well it looks something like this the important part i suppose here is in the beginning we're going to start with data colon image and then our type of image and then base64 comma and then our base64 string this big long string is just a default file thumbnail in case we don't have a thumbnail available on our file but if we do we want to go ahead and use that thumbnail okay so you'll see we're essentially starting with the same thing except this file is going to be a jpeg that is the default of the file format from dropbox then we're using a template literal with an inserted variable to insert our base64 string so this is going to be whatever base64 string dropbox provides just to review one more time we're assigning our thumbnail variable to either the actual thumbnail if it exists or a default thumbnail if it does not for our folders once again folders don't have thumbnails so we can simply use the default okay once again that's just a big long string it's a folder thumbnail as we'll see in just a moment the last thing we need to do is actually insert the thumbnail in our html so we're going to go ahead and use an image tag here i'm going to put a class on the image because i've already set this up in my css just to make it look nice and then of course we need to declare our source for our image tag it is going to be thumbnail which is the variable we have declared and assigned based on whether or not there is one and whether or not it's a file or a folder okay let's save and see what happens there we go we've got our thumbnails as you can see we have a folder here and the rest of them are files now obviously these are default thumbnails and in the next lesson we'll learn how we can get the actual thumbnails from dropbox in the last lesson we learned how to render thumbnails with our files in this lesson we'll go ahead and learn how to get the actual thumbnails from dropbox if you look at the documentation which i've linked to the top here you'll find there is a method available to us called files get thumbnail batch and that function takes an argument which is an object that has an entries property which is an array of objects each object having a path and an optional size this is the basic format for the request we'll be making okay so we're getting an array of files and we want to turn that into an array of paths so let's go ahead and do that now we'll say const paths equals what do we need to do to our array first well first let's filter out all the folders because folders don't have thumbnails here we're using the filter method on an array and that takes a function the first argument of which is the item in the array we're working on and it simply returns true or false if it returns true we keep that item if it returns false we get rid of it in this case we're checking to see if the dot tag property is equal to file because if it is it's file and we want to keep it if it's not we don't want to keep it now that we've filtered our array so that we only have files and no folders we can go ahead and map over every item and what we'll ultimately want to return for every item is this object down here so we need to return that item but how do we do that instead of just typing curly braces we can actually surround those curly braces in parentheses to return a literal object all right so what is our path well that's actually available on the file itself as path lower if you'll recall we originally started this app by making a call to files list folder which gave us a list of folders and files each of which had lots of information and one of those pieces of information is path lower for the size you'll have to go ahead and look at the documentation to see what sizes are available but for our uses we want to go ahead and use 32 by 32 okay so instead of this array here we will pass the paths away we just created and that will return a promise so let's go ahead and see what we get back simply by logging into the console before we can do that however there are a couple things we need to do first off if we look at our documentation we'll find that this thumbnail batch call actually has a limit on it so we can't get more than 25 at a time it turns out this files this folder call also has an option for a limit so this would be a good place to remedy that let's go ahead and put a limit of 20 for our demo purposes and then of course we need to call our new function somewhere let's go ahead and call it in the update files function and make sure to pass in the files array okay so when we initialize our app we are making a call to files this folder to get the files and folders then we're calling update files and then we're calling get thumbnails let's go ahead and save to see what happens alright looks like we got a success if we look at the console you'll see there's a lot of information there but essentially we're just getting an object with an entries property and an array of files and folders well in this case actually just an array of files all right so now that we have our response back from dropbox we are ready to start working with it and assign our thumbnails to our files essentially what we want to do is just create a thumbnail property on each file object that holds the thumbnail data now this next part gets a little bit complicated so i'm just going to go ahead and paste it out and then we can walk through it step by step first of all we're going to make a copy of our current state.files array we do that very easily with the es6 spread operator that's those three dots here at the beginning that's essentially telling javascript to spread the items of the array into this a new this new array so we do that and we call our new variable new state files next we want to loop through the res.entries array that we got back from dropbox that res.entries array is just going to be an array of objects each object has a lot of information on it but one of the properties on the object is thumbnail and that's the one we're interested in we want to get the thumbnail of that object so we're going to loop through each item in the array and in order to know which item we need to update the thumbnail of we first need to figure out where it is in the array so we're declaring here a variable called indexed update that's going to figure out okay what item in our new state files array remember that's just a copy of our current state which item do we need to put a thumbnail on and the way we figure that out is using a method called find index this is a method available on the array prototype so any array you work with it's going to have this find index method and it's similar to the dot filter method that we used earlier in that it's ultimately going to return either true or false and what we're testing here is just to see if the path is the same so if the path is the same it's the same file right and if it's the same file that's the one we want to update so we pass an argument to the item we're going to be working on and we just test to see if the path is the same and if it is that's the index that we want to use so we plug that index in here and we say in our new files array find this index and add the dot thumbnail property to it and make it equal to whatever the thumbnail was that dropbox returned for that file and once we do all that for every single item in the array we can finally assign state.files to our new array of files and the only difference here is this array has thumbnails that's the only difference between these two arrays so we've added our thumbnails to our items in our array and finally we render them to the screen let's hit save and see what happens all right looks like everything is working we've got our actual thumbnails next to each item everything seems to be working fine you'll notice that at the top here we have a folder and that does not have a thumbnail which is normal but every other file does so everything was successful and we're ready to move on so far we've introduced two api calls into our app the first was files list folder and the second files get thumbnail batch both of these have returned promises using dot then which make working with asynchronous data a little easier however we're going to need to make some more calls in the future and we'd like to move away from promises into a feature in es7 called async await the way async await works is simply we declare async before our function so instead of just writing out the function put the async keyword right before it now inside of that function we can use the await keyword let's go ahead and call our variable res just like before this time we'll put a weight before our function call so cons res equals await whatever our asynchronous call is as long as that returns a promise this should work and we can get rid of our dot then call and instead act like this is just a regular variable essentially if you picture this function being a synchronous function we're working with asynchronous data the same way it's as if we were saying constrains equals one plus two and then using it just like we normally would only this function is asynchronous and by using async await we are telling javascript to wait until this function is complete before moving on to the update files call and then using this variable let's go ahead and do the same thing with our get thumbnails function again we'll declare the async keyword before the function and we will simplify here by assigning our data to a res variable once again we can get rid of the dot then call and we can go ahead and use all the stuff we've done earlier in pretty much the same format only now it's a lot cleaner it just looks like we're dealing with synchronous data we're assigning a variable res to whatever data we get back here and as long as we include the await keyword before our asynchronous call we should be good let's go ahead and save and see if this still works looks like everything still works so that's how you use async await to simplify your code and make working with asynchronous data a little bit more manageable we'll go ahead and continue to use async await in future lessons we just learned how to render thumbnails after getting them from dropbox in order to get those thumbnails we had to limit our first call to get files to only 25 at the very most and we chose 20. however there are more than 20 files in our folder in this folder that we're using for our demo there are actually 37 files so what do we do if we want our thumbnails but we still want to get all the files well dropbox has a way to do this for the sake of demo purposes let's go ahead and change this limit to five as you can see here we're only getting five files one of them is a folder to show how we can resolve this i'm going to take a look at an online tool that dropbox provides and i've linked it right here they call it the api explorer if you go ahead and open up that link you might see something like this there are a bunch of methods listed on the left hand side that you don't see in the slide here but one of those methods is list folder and you may recognize that name because we're using the javascript sdk equivalent right here files list folder now online if you look at the tool you'll be able to see the different options that are available and you can enter a path and you can enter a limit for example and then you can go ahead and submit that call to see what happens if you do that you might see a response that looks something like this this should look somewhat familiar to us we have our entries property which is an array of files however there are two things we haven't looked at yet and that's these last two properties the cursor and has more the cursor is essentially a very long string that keeps track of where we are in the process or in the folder it's sort of like a you were here last time you made this call pointer and the has more property tells us are there more files to get in this case it looks like there are so we can use the has more property to tell if we have more files to get and we can use the cursor to actually get those files and we would do that with another method that's similar to the one we already used if we look at the api explorer it would be under list folder slash continue now the javascript sdk name will be a little bit different but we'll go ahead and look at this for now if you look at the online tool you'll be able to enter the cursor right here in a box and submit a call that will show you another object similar to what we've already seen we have an entries property which is an array of files and you can do this over and over again until finally at the very end once there are no more files you'll see has more equal to false in other words for every response we get from dropbox we want to check the has more property and if it's true use the cursor to get some more files and then repeat that process until eventually has more will be false and that's what we'll learn how to do in our next lesson our app is going to start by calling this init function inside of that function we are getting some files and folders from dropbox we're limiting them to only 20 for the sake of getting thumbnails and then we are rendering them after we make this call though we want to check if there are more files so let's check that has more property that we discussed in the last lesson and if it's true we will call a function called get more files which we haven't set up yet but let's just type it out for now and into that function we'll need to pass the cursor so it can use that to get more files and in this case since we'd like something to happen with those files right away we'll also pass a callback so this is going to be a callback function here that's going to receive more files from our get more files function and what do we want to do with those files well we want to do the same thing we did with our first set of files we want to call update files and remember that the entries property is where those files are stored once again we're going to call a get more files function that we still need to create we're going to pass in the cursor and we're also going to pass in a callback function so that when more files are retrieved those files can be passed into this function and we can update files okay now when we're doing this i'd like to show a loading message to the user so they know something's happening let's go ahead and store that in a variable here now that we have that variable we can simply hide or show that element whenever we're loading or not loading okay so we're showing our loading message we're running our get more files function we're hiding our loading message and in case we don't actually have any more files we'll skip that block altogether and we'll just make sure our loading message is hidden now this get more files function is obviously going to be asynchronous so we need to make sure to put a weight here and that keyword will work because this init function is asynchronous if we didn't have this async keyword here that await keyword and this away keyword would not work but they do so after our get more files function is complete then we can continue with our code now we get to create our get more files function okay the first thing we need to do is figure out what dropbox method there is for us to call if we look at the documentation we'll find that there is a method very similar to files lists folder called files list folder continue and that method is going to take an object with a cursor property which is going to be the cursor using objective structuring we can actually shorten this to just a cursor because it is assumed when we write it like this that the property name and the variable that is the value will be the same which they are we're getting our cursor value here and so this is just a shorthand way of saying cursor is equal to cursor after we do that and keep in mind that's asynchronous so we'll need to make sure this is an asynchronous function and we'll check if there was a callback provided to this function and if so call it with our response now as it is right now we are only checking for more files one time but obviously we need to do that until there are no more files to get so once again we'll check that has more property and if there are more files to get we'll just use recursion to call this same file again this time we'll pass in the cursor we got from our second call and we'll pass in the same callback function okay so get more files will run it will check if there are more files using the cursor it will make a callback and if there are more files still even after that call that we just made then it will call this same function yet again and it will keep doing that until has more is false in which case it will skip this call right here one more thing we need to remember is this awaits keyword it's easy to forget but do recall this get more files function is asynchronous so our files this folder continue functions asynchronous and our get more files function is asynchronous so they both need this await keyword okay let's save and see what happens you may have noticed that the first response was updated shortly after with some new files and if you scroll down you'll see we have a lot more than 20 right now looks like it's working so we're making our initial call to get some files we're updating our browser then we're checking if there are more files if so we'll show a loading message and will wait for our get more files function which will get more files call the callback and once again check if there are still more files and if so repeat this loop until eventually there are no more files at which point this code will continue because of our await keyword and hide the loading message we've done some pretty cool things in our app already however one thing that would be nice is if we weren't restricted to just the root path all the time let's go ahead and build that out now if we look at our app currently you'll see i've made some changes with the css and html but the important thing for this lesson is this folder path input up here ideally we'd like to let the user enter some sort of path in here and go to it in our app right now we only have one folder other stuff so it'd be nice if the user could say hey i want to go to other stuff and hit enter or hit the button and go to the path right now it's not working it's just refreshing the page so let's go ahead and build out that logic first off we'll need to declare a couple new variables to reference some html elements and get the data from that form so we've declared one element for the form and one element for the input why do we need both well for the form we want to use that to listen to the submit event that's how we'll know when the user has actually changed anything about the path so we'll add an event listener and listen for that submit event which will give us an event i've labeled that as e here and the first thing we need to do is prevent the default behavior of forms because that will refresh the page and we don't want that next we need to get the value for the inputs remember that is at root path input declared up here and we can get the values simply by saying value however in dropbox the root path is expressed with an empty string and not a slash which a lot of people are used to so i do real quick want to do a check and see if they entered it equal to a slash if so let's go ahead and use an empty string if not we can go ahead and use that value also people sometimes make mistakes with capitalization and such so let's turn this into a lowercase string that way we're always dealing with lowercase now we're not actually doing anything with this variable yet so let's think about what we might need to do it would be nice if this root path was available throughout our app we may need to use it elsewhere so let's actually go ahead and put that on state it might change over time so that seems like a good place to put it okay so now we are assigning the root path property of the state object to whatever the root path is that the user enters when they submit the form what else do we need to do well we don't want to show the folders and files from the old path so let's go ahead and clear those out also there is one quick thing i want to do with the html all i'm doing here is referencing that loading element that you see sometimes when the app first starts and i'm removing the hidden class to show the user that it is loading and well if we think about it we're basically starting over in our app when we first pull up the app it's loading files and then what's done loading that loading message is hidden and we can start using it we want to do the same thing here every time a user changes the path so let's just go ahead and call our init function right now that will basically start our app over it will get this files this folder called and it will search for whatever the path is except we don't want an empty string here we want whatever our root path is that the user entered okay so anytime the user submits that root path field it will get the value it will store it on our state it will show a hidden message and it will reinitialize our app oh i just realized i forgot to put parentheses after our two lowercase method sorry about that now let's go ahead and save and see what happens okay we only have one folder here other stuff so i guess that's the folder we're going to be testing here we go and it works i can look in my dropbox account and confirm this is indeed the contents of the other stuff folder so everything is working as it should in the next lesson we'll learn how to make this organize button work to magically move our files into their respective folders at last we reach the main function of our app the ability to organize our files into folders based on the date modified let's get started first we'll need to get a reference to the button element we'll go ahead and call it organize button then we need to listen for a click on that button since organizing our files will be asynchronous let's show some sort of message to our user to indicate that something's happening first we'll disable the button and then after we disable the button let's show a message then we'll go ahead and carry out our organize operation that is asynchronous so we'll need to make sure this is an asynchronous function and we'll need to wait for that to complete once it completes we can reenable our button and in order to restore the previous text we'll need to grab that first now that we have a variable to reference the text before it was clicked we can restore that okay now we're ready to create our move file sedated folders function first off let's establish which dropbox method we need to use in order to move files around for this function we will use files move batch v2 they have a version 2 of this function that's what we'll use here that takes an object as an argument with a you guessed it entries property and that entries property is an array of objects each object having a from path and a two path so where are we moving it from and where are we moving it to now of course we won't hard code this array we will generate it so let's call that array entries so that we can simplify it using object destructuring and let's create that entries array up here that will be based on our state dot files array so we're taking whatever files are in our state currently and we're going to perform two operations on them first of all we're going to filter out the folders just like we did with our get thumbnails method then we're going to map over every file and what we ultimately want to return is an object with a from path and a to path now the front path is going to be pretty simple that's just file.path lower that's available on the metadata we got from our very first dropbox call the to path is what we'll need to build based on the date now the file does have a property on it called client modified and that will tell us the date that it's last modified so that's already taken care of for us just so you know there also is a server modified property but for this case we will use client modified and it's put in such a format that we can actually use it with the javascript date constructor so we will do that in order to have this date variable something that we'll be able to work with in order to get the year and the month and whatever other information we need from this date okay so essentially what we're going to use to build our path is a template literal with four different variables we have our root then our year then our month and then the file name so for the root that's found on our state object so state dot root path our year is going to come from that date variable we just created and you can get that by typing in here get full year our month is going to be a little bit weirder than a year it's going to be get utc months and also the month number is one behind what you might think it would be so january is actually zero so we add one to whatever the month says it is in order to make it more reasonable and then finally we have a file name all right that's all for this lesson in the next lesson we're going to finish building our move files function and we're actually going to see our app do its magic in the previous lesson we set up this entries array and we passed it into the property of entries on our object which we passed into files move batch v2 from dropbox which is going to move our files around now we need to handle whatever dropbox does so what is it going to do and what's it going to return to us well it could return one of two things it may be an object saying that the job is done which will say success or it may be an object with an asynchronous job id now if we get back an asynchronous job id then we know that it's still working so here i'm just pulling out that property from our response object and if that property exists whatever is inside of this if block will run and so what do we need to do in here well we need to check on that job now how do we do that dropbox actually provides a similar method to us and that method is called files move batch check v2 and in that method we pass in an object with our asynchronous job id okay so we'll want to make sure that we're waiting for this to complete and you'll notice i use the let keyword there because we're going to reassign that res variable and we're going to do that right here because we want to reassign it to a new value when we check on the current status but we don't want to do that one time we actually need to keep doing that until we get a response saying that that job is done so how do we do that well we're going to need to set up a loop here we've set up a do while loop with a do while loop the logic inside the brackets will run at least one time regardless of our logic here inside of the parentheses that's what we want we need to make sure if we're getting an asynchronous job id back from our response that we're checking we're following up on that at least one time then it will keep doing that as long as this logic inside our wow parentheses is true and here we're simply checking the dot tag property of our response to see if it's still in progress as long as that tag property is in progress our job is still working so we need to keep checking so we will loop over this continually until eventually that dot tag property is something else maybe success maybe failure either way we know the job is finally done now that's it for our move files function but once that's all done we want to change the ui a bit so let's go back up to our button here we are waiting for our function to be done and after it's done we are reenabling our button and we are showing the original message of our button but we also need to reinitialize our state just like we did with our root path form so when someone changes the path we need to clear out the current state of files show the new files the new path and we need to show that loading message while we're doing that and then we need to reinitialize our whole app so we want to do the exact same logic and because of that i'm going to refactor here a little bit okay all i've done here is move that logic into its own function called reset and we're calling that same function with our root path form and our organize button okay so that's pretty much everything we need to do let's save and see what happens all right the moment of truth here we go now as you can see we're getting responses back from dropbox this is our loop running it is logging out whatever response we get and you'll see that tag property is still in progress so that loop needs to keep running and our button is disabled and it says working so we are waiting for this job to complete and there we go you can see we have a tag property with complete and if you look at our file structure well there are no files we just have folders now we have a 2018 folder and a 2019 folder we still have our other stuff folder so that hasn't moved which is good let's go ahead and check out the contents of these new folders 2018 okay that has a 12 folder so that's december let's go into that and see what we have and there we go here are our files looks like all the files moved successfully into our folder and we've set it up so that there's also a 2019 folder with january so looks like our files were spanning across two different months and they've all been moved successfully our app officially works awesome now there is one thing i want to mention real quick and that is error handling it's not something we've really done in any of our methods thus far but it's definitely advised in the real world and with async await it's actually not too hard you simply surround your code with a try catch block so we're going to try whatever is in these brackets and if it is successful then great it just carries on and does its thing otherwise if there's any kind of error it can go ahead and pass that error into a catch block and we can do whatever we want here we could log into the console or we could show something to the user the ladder would be preferable because we want the user to know something went wrong and that's the whole purpose of error handling so that we can actually do something with these errors and it can be a better user experience so when you build your own app it's definitely advisable to do some kind of error handling and once again you can wrap stuff in a try catch block to at least form the basic foundation of error handling so that's just a quick preview into how you might handle some errors just in case something goes wrong with dropbox or there's a network failure or whatever it may be and with that we're just going to leave our app as is it's basically complete of course you can add more features you're definitely encouraged to do so but for the sake of our demo what you see is officially our app congratulations you've made it to the end of the dropbox api course thanks so much for taking the time to look at this i hope it was inspiring just to recap what we've learned so far we learned how to get files and display those in the browser we learned how to get thumbnails for those files and display those as well and we learned how to move files around in the actual dropbox account as for the javascript side of things we learned some array methods such as sorting and filtering we saw some es6 features being used like arrow functions and we learned async await which is a great way to deal with asynchronous data in general especially when you're working with apis like this one once again my name is christian it was a lot of fun putting this course together i hope that you will head over to dropbox.com developers and set up your own app and then go and look at the documentation to find some more methods that you can use and some more cool things that you can do with dropbox that's the end of our dropbox course i just want to challenge you one more time go ahead build something cool and share with the world
