With timestamps:

00:00 - dr chuck is one of the best people in
00:01 - the world to create an internet history
00:04 - and technology course
00:05 - he's lived through it and has
00:07 - interviewed many of the most important
00:10 - people that helped create the internet
00:12 - we know today
00:13 - you are going to learn so much in this
00:15 - course
00:16 - welcome to internet history technology
00:18 - and security my name is charles
00:20 - severance and i'm a faculty member at
00:22 - the university of michigan school of
00:24 - information
00:26 - i have been working on this course one
00:28 - way or another for nearly 20 years
00:31 - for me it actually goes back to when the
00:33 - internet first started
00:35 - that was in the mid 90s and in the mid
00:37 - 90s i had the good fortune to have some
00:41 - friends that decided to help me go on
00:43 - television uh john liske amy leahy and
00:46 - richard wiggins and we had a television
00:48 - show first it was called internet tci
00:51 - and then later it was called
00:52 - nothing but net and then we called it
00:54 - north coast digital but it gave me an
00:56 - excuse in the mid 90s to make a bunch of
00:59 - videos and film folks and
01:02 - just ultimately create a an interesting
01:05 - oral history of the internet this is in
01:07 - the 90s and we didn't even know how it
01:09 - was all going to turn out so i we were
01:11 - walking around rich wiggins and i were
01:14 - walking around and filming all kinds of
01:16 - things
01:17 - another thing that i did in the late 90s
01:19 - was to build a technology for teaching
01:22 - and learning on the internet i hold the
01:24 - distinction of being one of the first
01:27 - people to stream an entire semester
01:29 - online i streamed it so early
01:33 - that i couldn't even stream video i
01:35 - could stream audio using real audio and
01:37 - i had a set of slides that would flip
01:39 - every few minutes and you see a
01:41 - terrifying picture of me staring at you
01:43 - because there was no video in the upper
01:46 - left hand corner of the screen
01:49 - i went from the michigan state
01:51 - university to university of michigan in
01:52 - 1999 and i rebuilt a new lecture capture
01:56 - system that captured cameras and
01:58 - document cameras and screen capture and
02:01 - allowed for annotation and i called that
02:02 - clipboard 2000. everything back then was
02:05 - called something 2000.
02:08 - in 2010 i was part of a group that
02:12 - was going to convert ieee computer
02:14 - magazine from
02:15 - paper magazine to a digital magazine and
02:18 - one of the ideas was is we should have
02:20 - some videos so what i would do for about
02:22 - five years is add
02:25 - add a few days to a business trip and
02:27 - take my camera and go somewhere i had
02:30 - two cameras and a little backpack and
02:32 - some lighting kit back in 2010 11 12 13
02:36 - um
02:38 - and interview various people and and
02:40 - that let me complete my uh
02:43 - set of interesting people uh in the
02:45 - internet so
02:46 - this
02:47 - this all culminated in 2013 when
02:50 - coursero was founded and i
02:52 - was invited to be one of the first six
02:55 - people at the university of michigan
02:57 - to to be
02:59 - on coursera and create a course and so i
03:00 - created this course internet history
03:03 - technology and security and back then we
03:05 - didn't know
03:06 - where this was all going to go but for
03:08 - me
03:09 - i just looked at it as a fun opportunity
03:11 - to share nearly 20 years of my oral
03:14 - history materials and also try to teach
03:17 - people something about the internet the
03:19 - idea is is that the course is supposed
03:21 - to
03:22 - hook you with a little bit of history
03:24 - but then teach you tcpip and other
03:26 - things and one of the things that i did
03:28 - i always sort of have a media bent to
03:30 - everything i do is i would go around the
03:32 - country there's you can go to find these
03:34 - at doctorchuck.com
03:37 - office
03:38 - and you can see
03:40 - 70 videos from all over the world of me
03:43 - meeting my students since 2013 when i
03:46 - first started teaching
03:48 - and so that leads us to this version of
03:50 - the class which is uh updated version
03:54 - but again this is part of the beginning
03:57 - of a technology oriented curriculum with
03:59 - very liberal arts kind of focus and you
04:02 - may have seen some of my other courses
04:04 - python for everybody django for
04:05 - everybody web applications for everybody
04:08 - postgres for everybody and you know who
04:10 - knows i've got a whole bunch of things
04:11 - in the hopper that i'm working on so by
04:13 - the time you're watching this this might
04:16 - be
04:17 - more and keep an eye on programming for
04:19 - everybody
04:22 - www.pr4e.com for this and upcoming
04:26 - materials
04:28 - so let's talk a little bit about the
04:29 - course at from at
04:33 - ihts.pr4e.com that's internet history
04:35 - technology and security programming for
04:37 - everybody so ihts.pr4e.com
04:43 - as i said
04:44 - the idea is that we can't look at
04:46 - technology without understanding history
04:49 - and i want those with a liberal arts
04:52 - background to have a way into
04:53 - understanding technology because
04:55 - technology is not exist in a vacuum
04:57 - technology has continued to change and
05:00 - is going to continue to change and if we
05:01 - don't take a look back we better we will
05:04 - have no good idea about how to deal with
05:06 - the future and so we need to understand
05:09 - the past as we look toward the future
05:12 - so this material came from a course i
05:13 - taught from 2009 to 2017. most of the
05:16 - course was a python course but about
05:18 - halfway through right after the midterm
05:20 - exam i gave everybody a break from
05:22 - python and taught a couple of weeks of
05:24 - internet history technology and security
05:26 - and so that's what this course is this
05:28 - course is the break from python now in
05:31 - my programming for everybody curriculum
05:33 - i kind of think of this as the first
05:34 - course the place that you start
05:37 - so the outline is starting with world
05:39 - war ii going through 1999 as our history
05:42 - then we look at the technology from the
05:43 - arpanet to the internet tcpip and all
05:46 - those protocols and then we take a look
05:48 - at the layer of security that makes
05:50 - all the kinds of commerce etc that we do
05:53 - on the internet
05:55 - possible
05:56 - so we start back in the beginning at i
05:59 - think of the beginning of computation
06:01 - communication
06:02 - that that is the internet and the
06:04 - technology we use on the internet is
06:05 - going back to bletchley park and so uh i
06:08 - love bletchley park i've often met my
06:10 - students at bletchley park
06:12 - and i look forward to the next time i
06:13 - get to go to bletchley park in the
06:15 - second part of the course we actually
06:17 - and believe me you'll be able to get it
06:19 - don't worry we're not going to teach you
06:21 - any math we're going to teach you things
06:23 - like what the layered network model is
06:26 - tcp and what's ethernet and what's wi-fi
06:29 - and how do those things work and how do
06:31 - i p addresses work and how do various
06:33 - applications work and so that's the
06:35 - middle part and then what we do is we
06:37 - figure out
06:38 - take a a look at
06:41 - what it takes to protect the information
06:43 - that's moving back and forth across the
06:44 - shared internet the key to the internet
06:46 - is that shared by all of us but we got
06:49 - to keep our data separate and then we
06:50 - got to keep our data
06:52 - secure from prying eyes so we talk about
06:54 - the technologies and math again now no
06:57 - big math but just like the basic
06:59 - concepts um
07:02 - there's a companion website
07:04 - ihts.pr4e.com
07:07 - and it gives you the same course
07:09 - material in a nice modular form with a
07:12 - bunch of links to all the references and
07:14 - quizzes to test your knowledge and if
07:16 - you want there's some threaded
07:17 - discussions if you log in that you can
07:19 - participate in
07:21 - so it's not practical for me to interact
07:24 - with the
07:25 - scalable class with hundreds if not
07:27 - millions of students and so my classes
07:29 - do have millions of students i mean i
07:32 - watch things but twitter is probably the
07:34 - best way to get me
07:36 - and i do want to know if something's
07:38 - broken i don't i don't i want to fix
07:41 - things as fast as possible
07:43 - so just a little bit about me if you're
07:44 - still listening
07:46 - i do have two tattoos these are real
07:48 - tattoos
07:50 - on my
07:51 - on my left shoulder is my
07:54 - research and on my right shoulder is my
07:56 - education and i've got three degrees
07:58 - from michigan state university and
08:00 - engineering and my faculty position is
08:02 - at the university of michigan in a in
08:05 - the school of library science that's
08:07 - currently called the school of
08:08 - information on my
08:11 - on my right shoulder is my research and
08:14 - my research since 1997 has been in uh
08:17 - building and using educational
08:18 - technology to teach
08:20 - and the the this all the logos are the
08:23 - what i call the learning tools
08:24 - interoperability ring of compliance
08:27 - and lti is how we plug in all of my auto
08:31 - graders etc into these
08:34 - teaching systems and so my research has
08:36 - been how to best teach with technology
08:39 - literally from 1995 until the present
08:42 - time
08:44 - i have a race car which is one of my
08:46 - hobbies and my other hobby is
08:49 - hockey and so that's a little bit about
08:51 - me i have a number of folks to thank a
08:54 - lot of the material here was the work i
08:56 - did for ieee computer magazine while i
08:59 - was a while i was a writer for ieee
09:01 - computer magazine they given me some
09:03 - permission to reuse some bits of it uh
09:05 - richard wiggins
09:07 - my lifelong friend who passed away sadly
09:11 - he has allowed me to use all of his
09:13 - video material and
09:15 - the copyright clearance is an important
09:16 - part of any free online course and open
09:19 - michigan
09:20 - helped me with all of that so with that
09:23 - let's go ahead and get started at
09:25 - ihts.pr4e.com
09:29 - hello and welcome to our first real
09:31 - lecture of internet history technology
09:32 - and security we're going to start of
09:34 - course with internet history and i'm
09:35 - charles severance and i'm your
09:37 - instructor we're going to start at the
09:39 - dawn of electronic computing i mean
09:40 - computing started you know early with
09:42 - abacuses and humans but we're going to
09:45 - start with the moment that electronic
09:46 - computing in particular because it was
09:48 - the moment where computing and conv con
09:51 - computing and communication sort of were
09:53 - sort of co-born at the same time
09:56 - then communication
09:58 - before the internet became normal uh
10:01 - then early internet research and then
10:03 - the internet itself that was academia
10:06 - and then of course
10:07 - for uh went went out into the real world
10:09 - and then the web which really took all
10:11 - this connectivity and made it easy to
10:13 - use for everybody it's really what their
10:15 - view now this network is very much
10:18 - through the web and then uh from that
10:20 - point forward we
10:21 - look at sort of the commercialization of
10:24 - it and the ubiquity of it the widespread
10:26 - use of it
10:29 - so the first picture the first video
10:31 - that i want to show you it's a little
10:32 - longer than most of the other videos
10:35 - it is about bletchley park and um there
10:38 - are many heroes at bletchley park
10:41 - of course this was a top secret code
10:44 - breaking effort by the british
10:45 - government during world war ii
10:47 - um
10:48 - world war ii i mean if you think about
10:50 - it in history perhaps there's no time in
10:53 - history
10:54 - uh quite like world war ii if you go
10:55 - back to
10:57 - what kind of technologies were using in
10:58 - 1910 and 1920 to the technologies we
11:02 - were using in 1940 it's an amazing
11:04 - difference you know jet airplanes radio
11:07 - radar so many things were invented and
11:10 - made
11:11 - made usable and made production quality
11:14 - during that period of time war of course
11:16 - is terrible
11:18 - but it does cause governments to fear
11:20 - for their lives
11:22 - and invest heavily very heavily in
11:24 - research
11:26 - and so we in some sense uh even though
11:29 - the war is a terrible thing
11:30 - we sort of benefit from the extensive
11:32 - research they were trying to solve
11:34 - wartime problems but they ultimately
11:36 - solve problems that have changed our
11:38 - peacetime world in wonderful ways so
11:41 - blessedly park is
11:43 - north of london
11:45 - between oxford and cambridge in england
11:48 - and it's uh it was a code breaking
11:50 - effort and at one point there were over
11:52 - ten thousand people working on
11:54 - top secret efforts to decode uh
11:56 - encrypted messages uh initially from
12:00 - germans uh as they were using radio so
12:02 - they call world war ii a world war
12:06 - mostly because it touched geographically
12:09 - more than any other war had ever touched
12:12 - that since
12:13 - before or since really um
12:16 - you know
12:17 - alaska united states
12:20 - italy africa russia japan
12:24 - philippines
12:26 - you know it just it truly was
12:28 - geographically distributed and it was
12:30 - necessary to do community unprecedented
12:33 - communications just to
12:35 - effectively pursue the war and this
12:38 - meant that communications had to be
12:39 - wireless
12:41 - and the problem with wireless is anyone
12:42 - can put up an antenna and listen to the
12:45 - wireless signal there's no way to hide
12:47 - the wireless signal unlike a wire that
12:49 - you could hide it and if no one had
12:51 - access to the wire you can't see what's
12:52 - in it
12:54 - but if you're using wireless and fast
12:55 - moving armies in long distances
12:58 - then someone can intercept the wireless
13:00 - signal and they can so the trick of
13:02 - course was to create an encrypted
13:03 - wireless signal so they could see
13:04 - everything you sent but it didn't make
13:06 - any sense to them it's all sounded like
13:08 - gibberish unless you of course know the
13:10 - code
13:11 - and so this was the a key technology was
13:13 - building codes and code making machines
13:16 - a good example this was the enigma made
13:18 - by germany which is uh we'll talk about
13:21 - these in this last part very last part
13:23 - of the class and the security part of
13:24 - the class how these codes and ciphers
13:26 - work but they scramble material in a way
13:29 - that's generally unintelligible
13:31 - and of course the really bright folks at
13:33 - bletchley park alan turing one of many
13:36 - really bright people at bletchley park
13:38 - um
13:39 - used you know mathematics to to say you
13:42 - know these codes may be more more
13:44 - crackable than we think
13:46 - uh there was folks from poland
13:48 - uh who also informed the them to say
13:51 - look we let me let's show what we did to
13:52 - crack it right before poland was
13:54 - involved they were working heavily on
13:56 - the mathematics of cracking and so then
13:58 - they built these machines
14:01 - and so in this video that i'm about to
14:03 - show you it's really what i try to do is
14:05 - i try to contrast the the two machines
14:08 - and one is an extremely fast mechanical
14:10 - computer with relays and
14:13 - switches and things that spin and gears
14:16 - that move back and forth it's a very
14:18 - physical computer that's uh that's
14:20 - looking for patterns and as it's
14:22 - spinning it's checking for possible
14:23 - encoding combinations to try to just do
14:27 - a brute force checking of lots of
14:29 - different possibilities and so it was a
14:32 - mechanical computer the bomba was a
14:34 - mechanical computer and then
14:36 - as the german encryption improved and
14:38 - they used different techniques with more
14:39 - sophisticated encryption they just
14:41 - couldn't decrypt it with a mechanical
14:43 - computer anymore
14:44 - so they just
14:45 - were forced to build something faster
14:47 - and that faster thing
14:49 - was the first truly powerful general
14:52 - purpose electronic computer in the world
14:54 - of course it was kept secret until the
14:56 - certainly kept secret until the 60s and
14:58 - the 70s and much of it was still kept
15:00 - secret until even the 90s and so its
15:02 - place in history is is kind of a recent
15:06 - uh recent understanding you can look at
15:08 - early history texts that talk about the
15:09 - first computer and they don't mention
15:11 - this one well that's because it was a
15:12 - secret until a long time
15:14 - so the bomba was a powerful mechanical
15:16 - computer the colossus was a powerful
15:19 - electronic computer but
15:22 - i had this picture that was drawn by an
15:24 - artist for me and um
15:26 - in addition to showcasing sort of the
15:28 - moment where a mechanical computer no
15:30 - matter how hard you tried wouldn't work
15:32 - fast enough and
15:34 - the electronic computer was sort of
15:36 - forcefully created out of a tremendous
15:38 - need what's also really interesting is
15:41 - the fact that bletchley park during this
15:43 - time with 10 000 people
15:46 - had
15:47 - all kinds of people you know language
15:49 - experts mathematicians
15:52 - engineers welders and it's a really
15:55 - cross-disciplinary activity and they
15:57 - were solving a problem of decrypting
16:00 - german transmissions but they ultimately
16:03 - solved a problem
16:05 - in the pursuit of that of electronic
16:08 - communications and computation
16:11 - and so this picture is really trying to
16:12 - show how
16:14 - you know a lot you know alan turing was
16:15 - really very critical and but there are
16:17 - other people like gordon welshman and
16:19 - doc keane and and the folks from poland
16:22 - that informed all of this
16:24 - university colleagues and this whole
16:25 - thing was a very much a connected
16:28 - collective group of really bright people
16:31 - highly motivated well-funded and they
16:34 - created this so um so let me go ahead
16:38 - and uh and pause now and let you take a
16:41 - look at
16:42 - at this film
16:44 - [Music]
16:55 - do
16:59 - [Music]
17:19 - today we're at bletchley park in honor
17:21 - of alan turing's 100th birthday
17:24 - bletchley park just north of london in
17:26 - between cambridge and oxford was
17:28 - considered by many as the birthplace of
17:30 - modern computer science in 1938 uh
17:34 - again anticipation of war the government
17:36 - code and cyprus girl uh through an in in
17:39 - the main their operational director a
17:41 - gentleman called aleister dennison had
17:42 - drawn up a list he had sent two people
17:45 - out to troll through the uh people at
17:48 - oxford and primarily cambridge and some
17:50 - extent oxford and drew up a list of
17:52 - people who they approached who agreed in
17:54 - an event of war uh would uh report
17:57 - immediately the blood street park
17:58 - britain declared war on september 3rd
18:00 - 1939 the following day september 4th
18:02 - touring
18:03 - and several others reported to bletchley
18:06 - park as the requirement for more people
18:09 - was needed uh some predominantly a
18:11 - gentleman called gordon welchman who had
18:13 - all he had been on the initial list he'd
18:15 - arrived the same day as turing he went
18:17 - back to cambridge and he started
18:19 - recruiting all his best students and in
18:21 - effect what they created here was the
18:23 - world's first skunk works a secret
18:25 - innovative organization where there were
18:27 - no rules eventually uh their main
18:30 - benefactor became the prime minister
18:31 - winston churchill uh and they persuaded
18:33 - churchill that this place needed uh
18:37 - more resources churchill agreed and he
18:39 - wrote a famous uh a letter was written
18:42 - by welchman turing and the two deputies
18:45 - to churchill and one other number a
18:46 - gentleman called stuart milner berry
18:48 - actually delivered it in person the
18:49 - downing street churchill amazingly rece
18:52 - read the letter the same day it was
18:53 - delivered he put a famous action this
18:56 - day stamp on it with a handwritten note
18:58 - to his chief of staff a chap called
18:59 - general dismay which said expedite with
19:02 - extreme priority and report to me when
19:04 - it is done and really from that point
19:06 - september 1941 bletchley park got all
19:08 - the resources that they needed they
19:10 - threw in effect the smartest people
19:12 - together in britain and said here's the
19:14 - budget
19:15 - this is the end game
19:17 - and that's why they invented some of
19:18 - these technologies that probably
19:20 - wouldn't have been invented for years in
19:22 - many ways bletchley park was an early
19:24 - version of a multi-disciplinary science
19:26 - center much like cern where ncsa is
19:29 - today
19:30 - many brilliant people with different
19:32 - skills and backgrounds were brought
19:33 - together to solve difficult problems
19:36 - the combination of the skills and
19:38 - collaborative environment resulted not
19:40 - in just solving the problems of
19:42 - cryptography that they were facing but
19:44 - in addition solved broader problems for
19:46 - all of computing in all of society when
19:48 - the people arrived here they knew when
19:51 - they arrived that the germans had taken
19:54 - a machine a a machine which we tend to
19:58 - call enigma enigma was a particular
20:00 - variant of an encryption machine
20:02 - that machine was modified from the
20:04 - commercial version and it allowed them
20:06 - to encrypt messages this was going to
20:08 - become a machine to be used for
20:09 - operational communications very short
20:12 - 200 250 character messages hitler had
20:15 - conceived and as generals a type of
20:18 - warfare never seen before which became
20:19 - known as blitzkrieg very fast movement
20:21 - 50 miles a day particularly when they
20:23 - invaded france
20:25 - and the latter stages of their invasion
20:27 - of poland you couldn't use fixed line
20:28 - communications you needed to use
20:30 - wireless communications here was a
20:32 - device which was portable weigh 25
20:34 - pounds ran off a battery you could
20:36 - encrypt messages and then it's a
20:38 - separate process they could be sent
20:39 - using the fairly new technology of
20:41 - wireless radio it was the polls who were
20:44 - the first to recognize that the age of
20:45 - machine cryptography had arrived and the
20:47 - sort of people who would be good at
20:49 - dealing with it were mathematicians
20:51 - in fact they even went so far as to put
20:53 - on a course in cryptography at the
20:55 - university of pause man uh invited 20 or
20:58 - 30 young german-speaking mathematicians
21:00 - to enroll it was very difficult course
21:02 - and by the time the course was finished
21:04 - there were really only three graduates
21:06 - who they recruited uh their names were
21:08 - mario rodriguevsky hendrick zakalski and
21:09 - yazzie orozinski
21:11 - and these three were the core of this
21:13 - team
21:14 - and they are the ones who really made
21:15 - the early breakthroughs they convened
21:17 - the conference at their secret
21:19 - headquarters this was actually july 39
21:21 - and at that conference they gave the
21:23 - british everything they revealed what
21:25 - they had done they gave them a replica
21:27 - enigma machine and all of their work
21:30 - that information came back to bletchley
21:32 - park and once they were established in
21:34 - bletchley park they then used the polish
21:36 - method to break the enigma machine the
21:39 - polls had actually built some machines
21:40 - themselves one of which was called a
21:42 - bomba that machine the name
21:46 - apparently comes from a polish ice cream
21:48 - dessert of the same name it's an effect
21:49 - vanilla ice cream with
21:51 - chocolate sauce around it this machine
21:53 - was called bomb in honor of what the
21:56 - polls did
21:57 - but the polls technique was based on the
22:00 - particular way that at that time the
22:02 - germans incited their messages
22:05 - they at that point were repeating the
22:06 - message header and that was the attack
22:10 - which the polls developed on it they
22:12 - believed correctly that went when the
22:15 - war would start that the germans would
22:17 - change the way they were doing that and
22:19 - they called for help they told chewing
22:21 - and the people here everything they'd
22:23 - done which we are
22:25 - and should be very grateful but they
22:27 - also proved that it was possible and
22:30 - that i think was the spur that kicked
22:33 - the brits into actually doing something
22:34 - about it
22:36 - now turing understood the weaknesses of
22:38 - the way they'd done it and developed a
22:41 - clip-based mechanism based on the fact
22:44 - that every military organization in the
22:46 - world cannot stop itself sending
22:48 - stereotyped messages
22:50 - he then talked to
22:51 - a brilliant team of engineers led by dr
22:54 - keane
22:55 - who told him roughly the speed that it
22:58 - would be possible to examine potential
23:00 - stops for
23:02 - so between between them they then
23:04 - designed the machine called bomb which
23:07 - would look for that and do so in
23:08 - sensible time
23:10 - here is an
23:12 - example where we have intercepted this
23:14 - message snmkg we're pretty sure that
23:17 - that is because this particular operator
23:20 - always did this this is his morning
23:21 - weather forecast so here we have the
23:23 - guest german plain text vetter
23:27 - web forecast
23:28 - and the two are lined up at that point
23:31 - the enigmas ability or inability to
23:34 - encode letters itself is useful because
23:36 - you can make sure you've got no caches
23:38 - here
23:39 - and from these guest letters
23:42 - we
23:42 - that the crib makers would derive a
23:46 - picture like this called the menu where
23:48 - you'll notice that at position z e here
23:52 - g
23:52 - is encoded as e so we have g going to e
23:56 - at z p at the end here e goes to v
24:00 - this is reversible of course we can
24:01 - describe this other way up so here's e
24:04 - to v
24:05 - that's z g here
24:07 - s
24:08 - is going to a
24:11 - sorry s is going to be excuse me so
24:13 - here's another link and eventually we
24:15 - can go all the way around and we can
24:17 - close this loop
24:19 - like that it was the closed loops that
24:21 - they were looking for the operation of
24:23 - the bomb was simply that if there is a
24:25 - letter
24:26 - which you can feed in at this point and
24:29 - which comes around through a string of
24:31 - one two three four five six enigmas and
24:34 - comes back as that same letter
24:36 - then it's possible the position of these
24:38 - wheels match the position of the wheels
24:40 - when gunther started encoding his
24:42 - message on his enigma it turned out to
24:45 - be a bit more picky about loops and
24:48 - menus than
24:50 - um perhaps they had hoped although it
24:52 - worked and at that point welchman added
24:56 - a completely left-field master stroke
24:59 - called the diagonal board
25:00 - which i think it is fair to say made the
25:03 - difference between success and failure
25:05 - to turing's original idea and here are
25:07 - my three diagonal boards that's one
25:09 - that's the other this is the third one
25:12 - coming in a place where you can't see it
25:13 - but can can you see z down to a okay um
25:17 - there's nothing connecting that to the
25:19 - machine it just bolted there for
25:20 - convenience the only connections to the
25:22 - machine are when you connect
25:25 - x into one of the enigmas what will
25:28 - happen is when we turn the machine on
25:30 - you'll see it will run up to speed
25:32 - okay um
25:34 - the motor will be running and the clutch
25:36 - will drop in then you'll see the various
25:38 - carry mechanisms happening
25:40 - and then
25:42 - when we stop the machine you'll see it
25:44 - slow down
25:45 - and then the clutch drops out so tony if
25:47 - you'd run it up for us please
26:01 - okay
26:06 - would you turn on carry hole
26:22 - okay
26:26 - so what you saw there was the
26:29 - middle carry then we switched on carry
26:31 - home to make the slow carry work all the
26:33 - time so these bars are just pushing
26:36 - around all the drums and you can see
26:38 - that all the 36 enigmas are just in step
26:41 - they're all just turning and they are a
26:43 - resource
26:44 - these are the very fast relays the three
26:47 - banks actually four for the chains that
26:50 - do the detection
26:51 - here
26:52 - this is the control logic
26:55 - okay and then these are this is the 26
26:58 - bit register that notes a stop and then
27:01 - allows the machine to slow down before
27:02 - it stops allele
27:04 - our favorite statistic is the sheer
27:06 - amount of wire in the thing there's no
27:09 - we've lost count but it's somewhere
27:10 - between 10 and 12 miles of wire
27:14 - in each one of these
27:16 - germans really there was two main
27:17 - systems they were using enigma was their
27:20 - operational system that was being used
27:22 - for all specific operational
27:23 - communications again very short maximum
27:25 - of 250 characters uh instructions orders
27:29 - for panzer division to move from one
27:31 - location to other orders for a submarine
27:33 - to attack a convoy for aircraft to
27:36 - during the battle of britain to attack
27:38 - specific targets
27:40 - the germans started to introduce through
27:43 - probably 1941 a different system
27:46 - the intercept service which britain had
27:48 - put into place to intercept these
27:50 - messages started hearing traffic which
27:52 - was clearly not enigma traffic a
27:54 - negative traffic was morse code easily
27:57 - identifiable
27:58 - people can be trained fairly clear
28:00 - simply to transcribe to listen to morse
28:03 - code and transcribe the letters this was
28:04 - a totally different signal it was not
28:06 - discernible it was not transcribable
28:08 - this was adaf hitler's communication
28:10 - channel to his army general so very
28:13 - long-winded communications top secret uh
28:16 - and so this was an even more daunting
28:18 - task arguably than enigma because uh
28:21 - this encryption machine that was used
28:23 - with this system uh there were various
28:26 - uh ones of them hitler referred to these
28:28 - as heim
28:29 - his secret writers several companies
28:31 - siemens uh that exists today making
28:34 - we're making a machine haglin but there
28:36 - was also the lorenz company and that was
28:38 - the primary machine particularly
28:40 - lawrence said 42
28:42 - that machine unlike enigma that had
28:44 - three encryption wheels had 12
28:46 - encryption wheels
28:47 - they approached the post office research
28:50 - lab at dulles hill in london
28:52 - a young engineer called tommy flowers
28:54 - right into the project uh he was in
28:56 - effect told well go ahead if you can get
28:57 - approval flowers went back to the post
28:59 - office got approval put a small core
29:01 - team together and in less than a year
29:04 - had a working prototype uh quite a
29:06 - remarkable achievement
29:08 - the first class colossus as this machine
29:11 - became known the mark 1 had 1 500 valves
29:14 - or vacuum tubes in it they brought it to
29:16 - bletchley park it worked almost right
29:18 - away the people here were convinced they
29:20 - asked for a more powerful computer uh
29:22 - flowers already had anticipated this he
29:25 - already had it in production 2 500
29:27 - valves in an era when no machine had
29:30 - more than that used valves had more than
29:31 - about 15 here is a machine with two and
29:33 - a half thousand flowers was told that
29:35 - they needed the mark ii by june 1st 1944
29:38 - because there was a certain date in the
29:40 - diary june 5th 1944 was a scheduled day
29:43 - for operation overlord d-day it actually
29:46 - ended up being june 6th because of bad
29:48 - weather flowers delivered the marked
29:50 - first mark to the bletchley park on june
29:52 - 1st they switch it on it worked straight
29:54 - away they immediately started decrypting
29:56 - messages between the german high command
29:58 - and much of the light the light they
30:00 - discovered that all of the subterfuge
30:02 - about the d-day landings had worked
30:03 - hitler had believed that the main
30:05 - invasion was going to be at the pot of
30:07 - calais not at normandy that intelligence
30:09 - was fed back to general eisenhower at
30:11 - allied uh supreme command headquarters
30:14 - and there is reasonable evidence to
30:16 - conclude that the game i will not have
30:18 - gone ahead on june 6 1944 without the
30:21 - intelligence from bletchley park
30:23 - this is the
30:24 - colossus computer at fletcher park
30:28 - now we're in hutch 4 at bletchley park
30:30 - which was the one of the first
30:32 - purpose-built computer centers and some
30:34 - 10 of these machines were installed here
30:37 - starting in january 1944.
30:40 - now
30:41 - in the years previously a new way of
30:44 - encrypting messages was discovered that
30:46 - was being used in germany and it was
30:48 - those high-level messages between hitler
30:50 - and his generals and they were encrypted
30:52 - on a machine called lawrence machine and
30:54 - it used teleprinter traffic teleprinter
30:57 - codes to actually transmit those
30:58 - messages
31:00 - now by 43 it was taking some six hours
31:04 - sort of six weeks to actually decode
31:07 - those messages and decode those messages
31:09 - laboriously by hand
31:11 - the problem with that is
31:13 - within six weeks the usefulness of the
31:16 - intelligence that you gain from those
31:17 - messages is obviously gone so that
31:19 - process needed to be speeded up
31:22 - now some techniques have been tried from
31:24 - so many electronic techniques have been
31:26 - tried here at blue park
31:28 - um
31:29 - but this machine
31:31 - when it was put into use in early 44
31:33 - reduced that six week period to decode
31:36 - the message down to six hours
31:38 - and that's really just a phenomenal jump
31:42 - the machines the
31:43 - messages themselves were received at
31:45 - various intercept stations around the
31:47 - country and were punched onto paper tape
31:50 - now there are two paper tapes on the
31:52 - machine here no one that we're running
31:54 - and one which is
31:56 - ready for the next run
31:58 - now this tape with two here if i take
32:01 - one each row across the tape are punched
32:04 - five holes and each of those is an
32:06 - alphanumeric character and that's the
32:09 - encrypted message that was received has
32:11 - been punched onto tape
32:14 - now although colossus has
32:18 - really all the elements of a modern
32:20 - electronic computer
32:22 - it doesn't have the memory that
32:24 - we expect in a stored program computer
32:28 - so what happens is that tape
32:30 - of that message some 5 000 characters
32:32 - that message is actually formed in a
32:34 - loop
32:34 - and is read over here
32:36 - with a series of photoelectric centers
32:39 - and lights
32:40 - and each character is red
32:42 - and the 5 000 characters are set up 5000
32:46 - characters a second are red
32:48 - now each
32:49 - clunk of the machine we can hear there
32:51 - is another 5 000 characters being read
32:54 - into the machine
32:55 - so we're reading that same 5 000
32:57 - characters each time
33:00 - this is the control panel of the
33:03 - colossus computer so it's this side of
33:05 - the machine that would actually be the
33:06 - the wrens and the wartime would actually
33:08 - be using now i can set up
33:11 - the particular algorithm i want to test
33:13 - and routines i want to test using these
33:15 - control panels
33:17 - and each clunk of the machine at the
33:19 - moment is another state where we're
33:20 - actually
33:21 - trying a new algorithm and repeating
33:23 - that algorithm on that repeating 5000
33:26 - characters
33:27 - the results that the machine
33:30 - detects are presented here
33:33 - now we're doing
33:34 - a
33:35 - statistical analysis of that encrypted
33:38 - tape
33:41 - now the machine was run for some six
33:44 - hours uh there are
33:47 - two and a half thousand valves in this
33:49 - machine
33:50 - you can't see that many from the front
33:52 - but once we go
33:54 - between the acts of the machines you get
33:56 - an idea of the scale
33:58 - two and a half thousand valves
34:00 - each file has a
34:02 - heater a hot wire heat in the center of
34:04 - the valve and operates
34:06 - at about
34:07 - two three hundred volts dc
34:10 - now five and a half uh two and a half
34:13 - thousand valves
34:14 - plus the power supplies generates
34:17 - over eight kilowatts of uses over 8
34:19 - kilowatts of electricity and by this
34:22 - point when we're standing in between the
34:24 - racks you can feel the heat coming off
34:26 - of these racks
34:29 - [Music]
34:33 - colossus is a combination of electronics
34:38 - and we can see the the electronics here
34:40 - in these valve
34:42 - chassis numbers and also
34:45 - electromechanical
34:47 - switch gear so there are backs of relay
34:50 - panels here
34:51 - these big
34:52 - single motion detectors are a sort of
34:55 - motorized switch that will actually spin
34:57 - around there's banks of those in the
34:59 - machine the technology is
35:03 - equipment that was well known for the
35:04 - british post office
35:06 - this machine was designed
35:08 - by a chap called tommy flowers and tommy
35:10 - flowers was an engineer at the
35:13 - research center in london for the
35:14 - british post office
35:16 - tommy was asked to look at the problem
35:19 - of
35:21 - how to automate this task this manual
35:24 - task
35:25 - and tommy came up the idea of using
35:27 - electronics to do this at the time the
35:31 - idea of using
35:33 - more than half a dozen valves in any
35:35 - circuit was just simply pooh-pooh
35:38 - valves had a bad reputation people had
35:40 - valves in their radios at home they
35:42 - failed when they switched the radios on
35:44 - so the idea of using two half thousand
35:45 - was just simply just phenomenal
35:47 - but
35:48 - tommy understood
35:50 - that
35:51 - it's probably it's almost certainly the
35:52 - thermal shock that kills valves in the
35:54 - first place so if you leave the machine
35:56 - on
35:57 - and don't subject it to that shock you
35:59 - won't have a problem
36:00 - now all the 10 colossus machines here at
36:02 - bletchley park were left on permanently
36:04 - the machines were operated by
36:06 - wrens in in three shifts throughout the
36:09 - day
36:11 - we
36:12 - have to be equally careful this is
36:15 - obviously this is a replica of the
36:17 - machine itself
36:19 - but the same problems apply we need to
36:21 - be
36:24 - careful in bringing the supply voltages
36:26 - up gradually so we don't suffer from
36:28 - thermal shock and that in the same way
36:30 - shutting the machine down
36:34 - tommy had the idea of
36:36 - generating the key because it's a key
36:39 - that we're comparing with that encrypted
36:41 - type generating that key electronically
36:44 - and these counters here that are called
36:46 - the thyrotron rings the thyrotron valves
36:49 - actually hold that
36:51 - that count now we describe colossus as
36:54 - not having a memory
36:55 - we say not having a memory in the sense
36:58 - that um
37:01 - modern computers have a a memory that's
37:03 - common for data and for programs
37:06 - well the program here is set on those
37:07 - control panels at the front and that's
37:10 - switch um
37:11 - switch and plug programmed much like say
37:14 - it's contemporary eniac machine
37:16 - um but these machines these valves at
37:18 - the back do act as a store in the sense
37:21 - of counters and they're actually
37:22 - counting the score that we're actually
37:23 - getting each passed through the
37:25 - algorithm
37:28 - the
37:30 - we can see at the back here
37:34 - well certainly some of the modern
37:35 - technology
37:36 - um i suspect the wartime guys that were
37:39 - building and debugging these machines
37:41 - would have given anything for a
37:44 - reliable oscilloscope and let alone a
37:46 - logic analyzer but if i look into the
37:48 - machine down here back you can see the
37:51 - projected image that's coming off the
37:54 - tape
37:55 - and that's shining onto five
37:58 - photo sensitive valves
38:00 - and it's those valves that are actually
38:02 - reading the 000 characters every second
38:04 - paper tape was used well into the 1960s
38:07 - and 70s at this speed was simply
38:09 - phenomenal and hadn't really been
38:11 - thought of before
38:13 - and our original museum director techno
38:15 - sale wanted to rebuild
38:17 - the colossus and build a replica of the
38:19 - glossary machine and this was done 20
38:21 - years ago
38:22 - there's very little information out
38:24 - there there are a few pictures that were
38:26 - kept possibly illegally
38:28 - a few scraps of circuit diagrams
38:31 - and just the memories of some of the
38:33 - original pioneers who worked on the
38:34 - machine and when tony started the plan
38:37 - tommy flowers was still alive and
38:40 - remembered and was able to draw circuits
38:42 - of course finding the parts as well but
38:44 - the important thing is the machine was
38:46 - designed by a post office engineer at
38:48 - the time
38:49 - an engineer that was used to designing
38:51 - systems for telephone switching so a lot
38:53 - of the components here everything from
38:56 - the relay banks to the switches
38:59 - to the power supplies were common to
39:03 - british post offices in the pre-war
39:04 - period
39:06 - so when tony
39:08 - then
39:09 - wants to find the components to rebuild
39:11 - the replica he's lucky in the sense that
39:14 - the last of those exchanges are being
39:16 - decommissioned from post offices around
39:19 - the country
39:20 - tony was therefore able to really
39:22 - back up a pickup truck at the back of
39:24 - the exchange and take away all of those
39:27 - components and dismantle all of those
39:29 - components and they are they were
39:31 - absolutely perfect and it was just that
39:33 - tiny really couldn't have been better
39:36 - so alan turing actually left bletchley
39:39 - park after about three and a half years
39:41 - his involvement really uh
39:43 - finished he went to the united states of
39:45 - turing became was not actually involved
39:47 - in the development of colossus some of
39:50 - the statistical work that he did was
39:52 - used by the people
39:54 - predominantly bill tutt who's the guy
39:56 - that actually reconstructed the lorentz
39:58 - machine quite remarkably a remarkable
40:00 - feat
40:02 - indeed uh cheering got involved in
40:04 - things like speech scrambling systems
40:06 - and went to the united states and was
40:07 - involved in other projects so he wasn't
40:09 - really involved in colossus at the end
40:11 - of the war trey went to work for the
40:13 - national physics laboratory again
40:15 - pursuing these sort of ideas and then of
40:17 - course he ended up at the university of
40:18 - manchester where max newman who had run
40:21 - the department were the colossus
40:23 - computers uh had been located but she
40:25 - parked also ended up as the head of
40:27 - mathematics and obviously then at that
40:29 - point turned became involved in the very
40:31 - early uh computer developments in
40:34 - britain uh gordon welchman immigrated to
40:37 - the united states at the end of the war
40:38 - in 1948 he immigrated to the united
40:40 - states and became involved in many of
40:42 - the early american competing
40:44 - developments project whirlwind
40:46 - weltzman worked at mit taught the first
40:48 - course in computing science
40:50 - at mit so cheering then was involved in
40:53 - things like the manchester baby in the
40:55 - franti mark one and the early uh
40:57 - competing developments uh i guess this
40:59 - is well known of course during
41:01 - tragically uh committed suicide in 1940
41:04 - 1954.
41:06 - [Music]
41:26 - do
41:31 - [Music]
41:43 - so i hope you enjoyed that
41:46 - again i tried to showcase the the
41:49 - juxtaposition of the mechanical
41:50 - computers moving to the electronic
41:52 - computers and how it was a collective
41:55 - effort by by many different people
41:57 - and so one of the things that happens
41:59 - sort of after this is um after the war
42:02 - they didn't need bletchley park anymore
42:04 - so they shut the bletchley park down and
42:06 - all these people who had worked on all
42:08 - these things and built all these things
42:09 - went to
42:10 - various academic places like mit
42:13 - manchester harvard and what happened was
42:17 - is
42:17 - what they had done was a secret and they
42:19 - could say nothing about it but they had
42:21 - realized
42:23 - and they couldn't forget
42:25 - that electronics
42:27 - could do computation
42:29 - and electronics due to computation
42:31 - far more rapidly than anything we've
42:33 - ever imagined before
42:34 - so a series of computers came up
42:37 - really fast after the war
42:39 - they kind of you know relaxed the war's
42:41 - over we feel good
42:43 - but let's start thinking about what we
42:45 - would build if we were going to do
42:46 - computations like weather or other kinds
42:49 - of cool computations instead of just a
42:51 - wartime computations and and so these
42:54 - next generation of computers that are
42:57 - often thought of as the first computers
42:58 - in the world which really kind of like
43:00 - the follow-on computers to the computers
43:02 - built at bletchley park
43:05 - and so the immediate post-war period in
43:07 - the 1940s took the
43:09 - us and uk code breaking there were
43:11 - similar things in the united states as
43:12 - well and i'm sure elsewhere where that
43:15 - pushed and the envelope of computation
43:18 - but the folks that had
43:20 - built all these things for wartime
43:22 - purposes
43:23 - switched and moved into academic and
43:26 - peacetime purposes and so they built
43:28 - i mean if you think about it they have
43:30 - less pressure but they already know it's
43:31 - feasible and they could kind of sit back
43:33 - and relax and be like okay that would be
43:35 - a little better we kind of compromised
43:37 - there so they built some really elegant
43:39 - computers and and you know they can they
43:41 - can all sort of fight over who's the
43:43 - first um
43:45 - but ultimately they all pretty much came
43:46 - out uh very quickly one after another
43:48 - because the idea had escaped and so this
43:51 - is the beginning of sort of electronic
43:54 - electronic computation right the fact
43:57 - that electricity can be used to
43:59 - represent data and that can be used to
44:02 - change data very rapidly as compared to
44:04 - other things that used physical storage
44:06 - for uh computer information so this was
44:09 - a great time electronic computation
44:12 - from the specialized to the general
44:13 - purpose and these people really built
44:16 - some exciting computers many of the
44:17 - architectures of which are kind of still
44:20 - sort of with us a lot of the
44:21 - architectures were innovative the
44:23 - innovative architectures that we still
44:24 - use today were conceived and imagined
44:27 - there
44:34 - [Music]
45:00 - but students get a better understanding
45:02 - of something if they know the history of
45:04 - it and know where it know where it's
45:06 - come from that's my
45:08 - my view
45:09 - so when i go to class when i go to the
45:11 - interface design class for instance i
45:13 - can
45:14 - take them down to the museum
45:17 - and show them
45:18 - what an early interface was you know we
45:22 - talk about
45:23 - interface design and they think of their
45:25 - their handheld computer their laptop
45:27 - their desktop and they look at the
45:28 - screen and they think that's
45:30 - that's an interface and sure it is but
45:32 - where did you know how did we get there
45:34 - what was the early interface with
45:35 - computers i'm going to take them down to
45:36 - the frankie sirius and they say well
45:38 - what's the interface here with the
45:40 - computer so it's it's um
45:43 - giving them the idea of what an
45:44 - interface is by by taking them back to
45:47 - something that's that looks very
45:48 - primitive and and then we look at the
45:50 - evolution of interfaces over time we
45:52 - look at the different um applications
45:55 - you know we go back and look at
45:57 - busy calc and word star and things like
45:59 - that and to progress through the
46:01 - the different versions of these
46:03 - different products and
46:04 - you actually have like running
46:06 - physically no we don't
46:08 - know
46:11 - it's also from the web but i i think it
46:14 - just broadens their outlook
46:16 - on it and i think
46:18 - it's a danger with computing students
46:20 - that they become very can become very
46:22 - focused on the latest and
46:25 - and quickly discard the technology
46:27 - they're using when the next one comes
46:28 - along and forget about it and
46:31 - even before we had the museum we were
46:33 - lucky we had here cyrax i've mentioned
46:36 - cyrax to
46:37 - the world's number four digital store
46:39 - program computer
46:41 - it's left over used till about 65 so
46:44 - about 72 or so it arrived on campus just
46:47 - for storage purposes
46:49 - but we put it in a display area
46:51 - when i first arrived from my teaching
46:54 - here in about 88 to teach
46:57 - i would always take my introduction to
47:00 - computer architecture students past that
47:02 - it had so much
47:04 - to tell students about the origin of
47:06 - operating systems the primary function
47:08 - of operating systems to
47:10 - allocate resources and the
47:12 - efficiency of use of resources with the
47:14 - programming students i can show them
47:16 - things like punch cards and things like
47:18 - this you know how do we get information
47:19 - into the computers and show them things
47:22 - like that
47:24 - so
47:24 - it might be part of one class in a
47:27 - semester
47:28 - that
47:30 - i use the
47:32 - museum in particular for from my classes
47:34 - and others use it too in similar ways
47:37 - but we do have school children coming on
47:39 - visits and then we have about an hour or
47:41 - two and we take them
47:44 - through the museum
47:46 - starting with the the calculating
47:49 - machines and we talk about what do
47:51 - people do before computers and i've got
47:52 - things like this
47:54 - what is the computer where did we get
47:56 - the name of computing from and i've got
47:58 - this picture of women using slide rules
48:01 - in 1948 i think it was in this is in
48:05 - america doing their calculations and the
48:07 - idea that the first computers were
48:10 - people okay and and often they were
48:12 - women so that's kind of an interesting
48:15 - bit of social history there so trying to
48:17 - connect
48:18 - the computers and state of the
48:20 - technology to what was happening in
48:22 - society the time the physical artifacts
48:25 - are very important
48:26 - that idea of the physical we still carry
48:28 - forward even today as we're looking to
48:30 - see what we can do with the full museum
48:33 - that we've created now
48:35 - we've toyed with ideas of a web-based
48:38 - series of exhibitions
48:41 - photographing all of the artifacts and
48:42 - making sure that people can sort of
48:44 - browse through and move through halls
48:46 - we feel that even with that
48:50 - web-based
48:52 - teaching methods we would still like to
48:54 - have physical artifacts we've toyed with
48:56 - um a box of artifacts that we would send
48:59 - out to schools that are working on our
49:01 - program that do an educational program
49:03 - so
49:04 - the physical hands-on is a very
49:06 - important thing museum curators
49:07 - understand it
49:09 - people who aren't museum curators tend
49:10 - not to
49:12 - we had a
49:14 - staff member in our
49:17 - in our school
49:20 - and when we started the museum i was
49:22 - talking to her and and said oh we will
49:24 - have slide rules in there now she had
49:26 - done an honors degree in maths and she
49:30 - had not heard she
49:33 - not that she hadn't seen a side well she
49:35 - didn't even know what one was and that
49:37 - to me was amazing because
49:40 - when i went to uni everyone carried a
49:42 - schedule you know we all had this my
49:44 - schedule from our universities we all
49:47 - had these as science students
49:49 - engineering students
49:50 - we all had these tools and she was
49:53 - probably 10 years
49:55 - younger than me and suddenly i had no
49:58 - idea what i was even talking about
50:00 - hadn't heard the word so i think that
50:02 - really
50:05 - made me realize that histories are so
50:07 - quickly forgotten
50:08 - and
50:11 - there's a danger that
50:13 - um we just
50:14 - um yeah we
50:16 - we forget about these things and if we
50:19 - um
50:20 - don't have them around for people to see
50:22 - they forget about the history of
50:24 - uh you know the the technology that
50:26 - they're using and i think that's a real
50:28 - danger
50:29 - [Music]
50:58 - so
50:59 - [Music]
51:13 - do
51:15 - [Music]
51:37 - also in the uh
51:39 - post-war period in the 1950s as a bit of
51:42 - an aside um
51:43 - [Applause]
51:45 - there was a there was a realization by
51:47 - the
51:48 - certainly the federal government united
51:50 - states that
51:51 - academics were kind of useful
51:53 - right i mean
51:55 - uh the people that really had won the
51:57 - war for them were academics
52:00 - not just computer people but also people
52:02 - that built designed airplanes and radar
52:04 - and things like that
52:06 - and so there's a sense that
52:08 - the safest country was the country that
52:10 - had the smartest people
52:12 - and in many ways the entire us
52:14 - educational system was built to
52:16 - find really bright scientists and
52:19 - educate them very effectively
52:22 - and so um
52:24 - and so there was there was a a real boom
52:26 - in building science departments uh
52:29 - national science foundation was fun uh
52:32 - created right after the war
52:35 - and uh and so united states and and
52:38 - other governments really
52:39 - greatly invested in research
52:42 - and there's this movie a beautiful mind
52:43 - and i've got the url there at the bottom
52:45 - it's not required but i love the movie
52:47 - and it gives you a sense in particular
52:48 - the scene that i'm pointing to gives you
52:50 - a sense of
52:52 - how mathematicians were in many ways uh
52:55 - treated like celebrities so i'll pause
52:57 - just for a minute in case you want to
52:59 - pause this video and then go take a look
53:01 - at the john nash video
53:03 - [Music]
53:11 - so of course john nash was a real person
53:14 - he received his phd in mathematics at
53:16 - princeton
53:17 - at 22 years old he was a
53:20 - prodigy
53:21 - he was on the mathematics faculty at mit
53:23 - in 1951 through 1958 and he had adult
53:26 - onset schizophrenia
53:28 - uh right before he was 30 years old and
53:30 - uh
53:31 - and it was quite a severe case and it
53:33 - took it
53:34 - he he spent a number of years in sort of
53:37 - mental institutions homeless etc
53:40 - but in his work in princeton
53:43 - uh
53:43 - in an area called of economics called
53:46 - game theory he
53:47 - did something that was quite innovative
53:49 - and it really revolution revolutionized
53:52 - in many ways our understanding of
53:54 - economics
53:55 - and
53:56 - and he
53:58 - sort of
53:59 - he he got his schizophrenia under
54:01 - control in the mid 90s and uh and he was
54:04 - awarded
54:05 - the nobel prize for economics in 1994
54:08 - and so this is just kind of this moment
54:10 - where this all this stuff was
54:13 - blossoming in the 40s and the 50s now in
54:17 - the 1960s
54:18 - we started seeing a different way of
54:21 - of
54:22 - computing this was moving from the
54:25 - research into the mathematics of
54:28 - building computers to the applications
54:30 - of the computers and
54:31 - we needed to have connectivity because
54:34 - you would build a computer and
54:36 - you know in
54:38 - 1955 there might be one computer
54:41 - available to a university researcher in
54:43 - the entire state
54:44 - and so you had to connect them together
54:47 - and so we would often end up with
54:50 - these things we call terminals in our
54:52 - office
54:53 - and they would use these dial-up modems
54:56 - and they would connect perhaps for a
54:58 - local call
55:00 - to a local computer
55:02 - or even a long distance call
55:05 - a very expensive long-distance call to a
55:07 - remote computer but these computers were
55:09 - so central and so precious
55:11 - that we didn't care about the cost of
55:13 - phones and we couldn't share them i mean
55:15 - we didn't everybody didn't have a
55:17 - computer the way they do
55:18 - uh today and so there was a couple of
55:21 - different models one is that you had
55:23 - people doing their work connecting to
55:25 - computers over these modems um and then
55:29 - more rarely you had computer to computer
55:31 - connections using what are called leased
55:33 - lines these lease lines were very
55:35 - expensive
55:38 - they were kind of like making a long
55:40 - distance phone call 24 hours a day seven
55:42 - days a week
55:44 - they were rarely used in academic
55:45 - situations because they were so
55:47 - expensive it was more common for a bank
55:50 - to use them to say move all their data
55:53 - from their branch locations to the
55:54 - central locations once a day they were
55:56 - generally slow
55:58 - and very expensive and they were
56:00 - justifiable in certain situations and so
56:04 - that's kind of how our world was we we
56:07 - had something on our desk and then we
56:09 - used that to connect through the phone
56:11 - lines to a central computer that was
56:13 - shared with many different people who
56:14 - called it time sharing
56:16 - and so oops
56:18 - so this next video that i want to show
56:20 - you uh just the first part of it you
56:22 - have to watch the whole thing um
56:25 - is kind of
56:26 - in the 60s and
56:28 - in 70s when i became involved in
56:30 - computing this was kind of the way that
56:32 - we perceived our computers you know we
56:36 - would dial them up and they made these
56:38 - clunking noises uh this teletype that
56:40 - you're going to see in this video as a
56:42 - is a world war ii artifact basically
56:45 - um
56:46 - and and my first programming personally
56:48 - was on this kind of a computer making
56:50 - this exact noise that you're going to
56:52 - hear in this video
56:53 - and i i think the the key to to
56:55 - emphasize here is that
56:57 - you know you it's kind of fun to look
56:59 - back at this old guy with his horny rim
57:01 - glasses
57:02 - um but
57:04 - but we really were enjoying ourselves
57:06 - and you think well i got this fancy cell
57:08 - phone and it does all these wonderful
57:09 - things and i place angry birds on it
57:12 - and
57:13 - weren't these people not having fun and
57:14 - the answer is we were having a great
57:16 - time
57:17 - we were connecting communicating
57:19 - calculating computing doing all these
57:21 - wonderful things we just were doing it
57:23 - sort of more slowly with simpler
57:25 - equipment but
57:26 - but even from the beginning in the 60s
57:28 - and the 70s people talking to people
57:31 - were an important part of the use of
57:33 - this technology
57:34 - so uh take a quick look at this video
57:36 - and then come on back
58:19 - i'm going to show you the use of the
58:21 - michigan terminal system a large
58:23 - computing system at the university of
58:24 - michigan computing center
58:26 - using the ibm model 360 67
58:30 - we will be using a standard teletype
58:33 - and we will be dialing in
58:35 - through the ordinary
58:37 - university centrix telephone system
58:41 - this system can be used by a telephone
58:44 - system anywhere in the world
58:46 - as long as one can dial directly into
58:48 - the computer
58:49 - these teletypes are not wired in
58:51 - but or use the ordinary telephone system
58:55 - we start
58:56 - by pushing the originate button which
58:58 - turns on the teletype
59:00 - then we will dial using the regular
59:02 - telephone dial here now there is a
59:04 - handset which is available
59:07 - with every teletype system
59:09 - you can dial this number if you like
59:12 - with the handset
59:13 - either one works but as soon as you are
59:15 - connected to the computer do not use the
59:17 - handset for any purpose at all
59:20 - now i'll push the originate button
59:24 - i can control the speaker volume with
59:26 - this little knob and so you can hear it
59:28 - now i will dial the number
59:31 - 763 o 300
59:35 - or in the centric system just 30300
59:41 - and now the computer is coming in i will
59:43 - turn the volume down
59:48 - the response from the computer is the
59:49 - identification of the system
59:51 - the who are you is the standard teletype
59:54 - communication identification and the
59:56 - teletype itself answers with its own
59:58 - built-in code number in this case the
60:01 - teletype at the tv center
60:04 - now i must
60:06 - sign on to the computer and identify
60:07 - myself
60:09 - the number sign at the beginning of the
60:10 - line is the indication that the michigan
60:12 - terminal system is waiting for me
60:15 - to communicate something to it
60:17 - the first thing i must do is issue the
60:19 - sign on command
60:21 - all commands in the system start with a
60:23 - dollar sign
60:25 - now the keyboard
60:27 - on the teletype is very much like the
60:29 - keyboard of a typewriter
60:31 - including a shift key
60:34 - for the characters on the top of the key
60:36 - we do not have upper and lowercase
60:38 - letters however
60:40 - so the shift key is only used to get an
60:42 - additional set of characters and in this
60:44 - case the dollar sign is a character
60:46 - above the number four
60:49 - now i will use the word sign-on which is
60:51 - the official command
60:54 - s-i-g-n-o-n there must be a space at
60:58 - least one after every command
61:00 - and now i will give my own personal
61:02 - computing center number which happens to
61:04 - be w010
61:07 - each user of this system is issued a
61:09 - computing center identification number
61:12 - through his instructor if he's a student
61:14 - or through the department for faculty
61:17 - now this line has been typed
61:20 - it is being held by the computer
61:23 - but i can if i see any errors in it do
61:26 - some editing and correcting we'll see
61:28 - that later
61:29 - i am satisfied with this line
61:31 - and now i will give the end of line
61:33 - character
61:34 - which must be given after every line and
61:37 - i will remind you each time that i'm
61:39 - doing it for a while
61:41 - the character for ending a line uses the
61:44 - control key on the keyboard which is a
61:46 - special key which
61:48 - indicates that i want to use even
61:50 - additional characters besides those that
61:52 - are
61:52 - added by the use of the shift key
61:54 - i hold the control key down
61:57 - and while i hold it down i can hit one
61:59 - of a number of other keys
62:01 - and in this case i will use the control
62:04 - with the letter q
62:06 - it's possible to use the letter s also
62:09 - but that's right next to another key
62:10 - which disconnects a teletype so i
62:12 - recommend using q
62:14 - i will use ctrl and q to terminate the
62:17 - line
62:24 - and now i'm asked to give my private
62:26 - password
62:27 - i'll give an incorrect password
62:30 - just some nonsense characters
62:32 - and of course end of line
62:34 - because i must indicate that i'm
62:36 - satisfied with that
62:41 - i'm prompted that
62:43 - i better give another password
62:45 - and now since i intend to give the
62:47 - correct password i will turn off the
62:49 - printing so that no one can see what
62:51 - mine is
62:52 - the to turn off printing we use this
62:54 - switch
62:56 - which is
62:57 - labeled hdx and fdx for half duplex and
63:01 - full duplex we normally operate this the
63:04 - teletype in half duplex mode
63:06 - if i push it to full duplex printing is
63:09 - suppressed
63:10 - and now i will give my correct password
63:14 - push to half duplex again
63:16 - and end of line character control q
63:20 - and it is accepted by the system
63:22 - and i am now signed on
63:25 - the information that's coming out here
63:27 - is time and date of the previous sign on
63:30 - and time of date of this sign-on
63:33 - hello and welcome back
63:34 - i just wanted to give you sort of a
63:36 - sense of the actual physical experience
63:39 - of connecting and communicating and
63:41 - computing in the 60s and the 70s the 70s
63:44 - was when i got my start and uh the lucky
63:47 - people got to use a teletype like was
63:49 - being used
63:51 - in that video and other people used
63:52 - punch cards um you also heard the
63:55 - squealing sound of the data being
63:57 - converted into sound and back and forth
63:59 - um
64:00 - you know it's
64:01 - the the key goal was there would be if
64:04 - you were lucky one computer within a 20
64:06 - mile radius of where you were sitting so
64:08 - you could use a local phone call and you
64:10 - could be on all day and do things all
64:12 - day long and that was really exciting
64:14 - and a lot of fun
64:15 - um
64:16 - and this was sort of a common if you
64:18 - were sort of
64:19 - you know
64:20 - today you have a 2 000 laptop the fancy
64:23 - people had these teletypes right in
64:25 - their office because then they could
64:27 - conveniently sort of do computation and
64:29 - and and not have to go somewhere do that
64:31 - computation so that's a
64:34 - pretty exciting so dial up was kind of
64:35 - like the way the campus
64:37 - operated but you can also do data
64:40 - transfer with leased lines
64:42 - and the typical thing about lease lines
64:44 - is that their
64:46 - uh the the phone company if it's going
64:48 - between two cities um digs a hole and
64:51 - puts a cable in and has some number of
64:53 - copper wires in between those cities
64:56 - this is back then
64:57 - um of course it's fiber optic now but
64:59 - back then it was copper and every time
65:00 - you would make a call between those two
65:02 - cities it would have to find a free
65:03 - piece of wire and connect it up so that
65:06 - your call the audio of your call would
65:08 - go through that wire
65:09 - and
65:11 - if you wanted to you could pay them to
65:14 - lease one of those pieces of wire
65:17 - it meant that people couldn't use that
65:19 - wire for phone calls you would sort of
65:21 - take it out of service and if they had
65:23 - 500 wires between two cities and you
65:25 - leased one of them then they had 499
65:27 - wires and so it was rather expensive and
65:31 - really very importantly the cost was
65:33 - based on distance right
65:35 - a mile
65:36 - versus 5 miles versus 20 miles versus
65:38 - 100 miles the cost would kind of go up
65:40 - linear based on distance and so that's a
65:43 - that's a key
65:45 - thing that distance is important in
65:47 - these very
65:48 - limited resource copper wires where you
65:50 - had to dedicate a wire either to a phone
65:52 - call or to data
65:54 - and so
65:55 - we ended up evolving in the academic
65:58 - world what we called stored in forward
65:59 - networking with the sole purpose
66:02 - of compromising everything so that we
66:04 - would keep our costs that we paid for
66:06 - our phone lines to a minimum we wanted
66:08 - to communicate in academia with people
66:11 - all around the country and all around
66:12 - the world so we had to keep the cost low
66:16 - and so
66:17 - we would
66:18 - lease a leased line
66:20 - you know so so
66:23 - so here would be us sitting with
66:24 - terminals in our offices and we would
66:26 - use dial-up to get connected and so this
66:28 - might be a few miles like one to two
66:31 - miles
66:33 - or one to two kilometers
66:35 - um and that's what you had you had to be
66:37 - live near a computer or have an office
66:39 - near a computer and then you would use
66:40 - the local telephone network to dial and
66:43 - to do your work and then there would be
66:45 - one connection out the back of that
66:46 - computer to
66:48 - a another computer that would also have
66:51 - users on it
66:53 - and then other computers with users on
66:54 - it other computers with users on it so
66:57 - this might for example be
67:00 - michigan
67:02 - this might be stanford
67:04 - stanford would have a computer michigan
67:05 - would have a computer the stanford
67:07 - people be connected to the stanford
67:09 - computer
67:10 - stanford would have one little
67:11 - connection out its back end and to the
67:13 - rest of the world
67:15 - so
67:15 - you sitting here want to talk to
67:18 - somebody
67:19 - sitting here
67:20 - so this is how it worked you were sort
67:23 - of always connected so your data would
67:24 - be inside you know you type an email
67:27 - into the computer and then you'd say
67:30 - send that out to
67:31 - my colleague at stanford
67:34 - and so the problem is is everyone else
67:37 - was sending and so let's say for example
67:39 - that somebody sent a pretty big thing
67:42 - big purple circle is what they're
67:44 - sending and then somebody next to you in
67:46 - the office down sends a kind of
67:47 - medium-sized orange circle and they're
67:49 - sitting there being stored in the local
67:51 - computer and then you finally finish
67:53 - typing your email messages and it's kind
67:54 - of a small green circle
67:56 - and now the problem is is you're in a
67:58 - line
67:59 - the way this worked is the software
68:00 - would keep a cue or a line of those who
68:03 - are going to use the uh the line and
68:05 - then it would sort of start streaming
68:07 - this stuff out and once it started it
68:10 - just kept doing the same file over and
68:12 - over and over now if it died it would
68:13 - just start from the beginning again and
68:15 - so it takes some time for that thing to
68:17 - move across the network and then would
68:19 - move across the network the next message
68:22 - in line would start to be sent across
68:24 - the network and it would use that link
68:26 - um come on finish up there we go okay it
68:29 - takes a while for these things to move
68:30 - across the link and then finally and
68:32 - this could be ten minutes later finally
68:34 - it was your turn and your stuff would
68:37 - work its way through the network and get
68:39 - to the next computer the problem is is
68:41 - once it's in that computer you face the
68:43 - same problem because if all these
68:44 - messengers are going from
68:46 - uh michigan oh
68:51 - forgot to hit the button thing from
68:52 - michigan to stanford and they're all on
68:54 - the way
68:56 - they got to go through all these links
68:57 - because there wasn't a direct connection
68:58 - because the direct connection to
69:00 - stanford would be very expensive and so
69:02 - you're we're in us we find ourselves in
69:04 - a situation where it you're stored
69:07 - you set on these computers and if there
69:10 - was an outage of a network
69:12 - or say this one this might be hours you
69:15 - might be sitting on this computer for
69:16 - hours on their disk drive right not even
69:19 - in their memory you'd be sitting on
69:20 - their disk drive for an hour and then
69:22 - finally this would come back or maybe
69:23 - this computer was down they'd come back
69:25 - up and then the data would start flowing
69:26 - again
69:28 - so it was
69:29 - haphazard i keep telling you it was
69:31 - awesome
69:32 - it was just slow it was awesome but slow
69:35 - so don't don't don't feel sorry for us
69:38 - we loved it we enjoyed it it was great
69:40 - talking to colleagues all over the world
69:42 - so we ended up with a network
69:43 - architecture that
69:46 - encouraged more hops which means it
69:47 - encouraged more latency and encouraged
69:50 - the likelihood of getting stuck behind
69:52 - something large as it worked its way
69:53 - through the network
69:55 - so for example um we were going to send
69:58 - a message
69:59 - from east lansing to say the east coast
70:02 - somewhere and we would have two
70:03 - connections maybe we would have a
70:05 - connection between uh michigan state
70:08 - university and east lansing in ann arbor
70:10 - and then we'd have a the data would get
70:11 - stored in forward in ann arbor and then
70:13 - we get uh further sent to cleveland and
70:17 - if you think about it the the wire
70:19 - between ann arbor and cleveland goes
70:21 - like this right they probably buried
70:23 - wires under the ground
70:25 - and if we could
70:27 - actually convince
70:28 - toledo the cost of
70:32 - the big wire versus the cost of the two
70:34 - shorter wires the cost of the two
70:36 - shorter wires is almost exactly
70:39 - the cost of the big wire because it's
70:40 - not really a big wire and so if we can
70:43 - convince toledo
70:45 - to join our little club
70:48 - then
70:50 - we don't increase the cost of our
70:52 - communications because we're it's about
70:54 - the same right the the wire length is
70:56 - about the same but we've got one more
70:59 - school for the same cost and if you keep
71:01 - doing that and you keep saying oh well
71:03 - let's put a school here and put a school
71:05 - here and put a school here in the middle
71:06 - of a lake and put a school here in the
71:09 - middle of a forest
71:11 - the economics draw said that you could
71:13 - connect more schools
71:16 - with effectively fixed cost by
71:18 - shortening the distance every time you
71:19 - made a connection and sometimes they
71:22 - would sort of make two connections but
71:23 - the way it often worked was
71:26 - from
71:27 - the perspective of
71:30 - this whole thing is the data would sort
71:32 - of tend to go
71:33 - you know up to some central location and
71:35 - then kind of fan back out from the
71:37 - central location and uh and so these it
71:40 - there wasn't a lot of redundant links in
71:42 - this whole situation
71:44 - so we find ourselves in a situation
71:46 - where we can save more money
71:48 - saving money by just simply adding hops
71:50 - so in this environment
71:52 - we
71:53 - had a lot of email back in those days we
71:55 - didn't have a lot of images computers
71:57 - you know barely could do upper and lower
71:59 - case sometimes it was impressive when we
72:01 - finally got to upper lower case let
72:03 - alone images and so for the longest time
72:06 - everything we did was very text oriented
72:08 - sometimes we would send small files like
72:10 - programs to each other but it was either
72:12 - text and these days those are tiny it's
72:14 - almost like sms right it's almost like
72:16 - the size of an sms message was the size
72:18 - of a typical mail message back in those
72:21 - days images we didn't have computers
72:23 - that could even display them and so it
72:24 - hardly mattered so you focused your life
72:26 - on this one computer within a 20 mile
72:28 - radius and it had this connection to
72:29 - like a snake-like connection that sort
72:32 - of went over hill and dale and to
72:34 - somewhere and then i finally got to
72:36 - stanford or wherever your mail had to go
72:39 - but again it was
72:40 - awesome to be able to sit at a keyboard
72:42 - and talk to people all over the world
72:44 - even though it took four hours we didn't
72:46 - we didn't send as much email back then
72:49 - and a number of networks came up one of
72:51 - them that became sort of pretty widely
72:53 - used was a thing called bitnet and it
72:55 - was uh where everything kind of came
72:57 - back to princeton was one of the main
72:59 - hubs of bitnet and uh it worked really
73:02 - well and and you know we could there was
73:04 - a way to say oh i need one more school
73:06 - and we'd go find the ones that are
73:07 - closest and we'd make the connection
73:09 - and so that's pretty much how
73:12 - the average academic saw networking one
73:16 - campus computer and sort of this weird
73:19 - slow storm forward networking that
73:22 - worked well enough but during that exact
73:24 - same time from the 1960s to the 1980s
73:28 - the us department of defense was
73:30 - investing in a research network called
73:32 - arpanet
73:33 - and arpanet was funded by the military
73:36 - arpa defense advanced research projects
73:38 - agency
73:40 - um and we'll meet
73:42 - in the later in the lecture we'll meet
73:44 - vince cerf we'll tell the story much
73:45 - better than i can tell but i'll just
73:46 - tell you a short version right now
73:50 - a lot of people wonder why the
73:51 - department of defense started this
73:53 - project and
73:55 - a lot of people say oh it's because of
73:57 - the fear of nuclear
73:58 - war and the project was very long and
74:02 - there were various motivations
74:03 - throughout the various phases of the
74:04 - effort
74:06 - but if based on what i've been told and
74:08 - what i've read i think it's safe to say
74:11 - that the primary motivation was to
74:14 - improve the use of their computing
74:16 - equipment that they were used for
74:18 - military purposes
74:19 - make it easier to access them make it so
74:21 - people didn't have to travel as much
74:23 - made it so that people could work from
74:25 - their office on many different computers
74:28 - and also so that people could actually
74:30 - talk more effectively so they could send
74:32 - email real fast so that the email would
74:33 - move faster for military people so the
74:36 - first thing is really kind of an end
74:38 - user focus to make them more useful to
74:40 - people and get people working together
74:42 - more effectively that was the first
74:44 - kind of heavy motivation
74:47 - the second motivation was actually had
74:50 - to do with reliably reliability and
74:52 - redundancy and
74:54 - resistance to partial failure
74:56 - and that really wasn't so much about
74:59 - nuclear attack that was more about
75:01 - battlefield attacks so the notion that
75:03 - once you start having all these links
75:05 - and you make them wireless and you put
75:07 - them in trailers on a battlefield and
75:09 - you know you got a few hundred miles and
75:11 - the date is moving back and forth
75:13 - then we have to worry about in a
75:15 - battlefield situation one of those
75:16 - trailers might get hit and how would you
75:18 - keep the network running if one of those
75:20 - trailers got hit so the notion that we
75:22 - have sort of a whole nation
75:24 - and we are worried about communications
75:27 - i'm sure there was some worry about that
75:30 - but it wasn't really the main reason and
75:31 - i mean the exciting thing to me is the
75:33 - main reason was a very very
75:35 - people-centered reason of people working
75:38 - more effectively
75:40 - but this was a rather exclusive club
75:43 - rather exclusive network
75:46 - because it was only for the people who
75:48 - were either military or funded to build
75:51 - it so in 1969
75:53 - there were four hosts on it
75:55 - again that's research and these were
75:57 - lease lines the same ones we were all
75:59 - using to do our email and they were
76:01 - expensive
76:02 - very expensive but because it was a
76:04 - large grant they just paid it because
76:06 - the research was
76:07 - not about the money the research was if
76:09 - you had these connections what would be
76:11 - the best way to use them and how to deal
76:13 - with redundancies and how to deal with
76:14 - multiple paths to the same place
76:17 - all that stuff is is interesting
76:19 - research questions that computer
76:21 - scientists spent many years
76:24 - conceiving of and so by 1972 looks like
76:27 - we got about 20. we got a couple of
76:29 - cross country links and multiple
76:31 - connections and and this looks like a
76:33 - great test bed to see you know so all of
76:35 - a sudden this part goes down how quickly
76:37 - can we reroute around the outage and
76:39 - literally these things these days
76:41 - reroute
76:42 - around outages in far less than a second
76:45 - um and so that's really impressive our
76:48 - current internet owes its history to the
76:50 - research that was done in the 1960s and
76:53 - 1970s
76:55 - but what was fundamentally different
76:57 - between the story and forward networks
76:59 - of bitnet and this arpanet research
77:03 - network
77:04 - was the notion of packet switching
77:07 - so the it's a real simple concept it
77:10 - just takes a little more
77:12 - complex software to solve the store and
77:14 - forward network would
77:16 - start date sending data across the link
77:18 - and then keep sending it until it was
77:20 - done that would seem to be very
77:21 - efficient you didn't want to like you
77:23 - wanted to use it as fast as you can and
77:25 - then put in the next one out put the
77:26 - next one out with the next one it was
77:28 - really simple and it dealt with outages
77:29 - in a simple manner by storing them all
77:31 - locally on the disk but what if instead
77:35 - you made it so
77:36 - you broke every message let me see if i
77:38 - can even draw this i should probably
77:39 - make a slide about this so if there's a
77:42 - network here and here's here's my
77:43 - computer and it's got a network
77:45 - connection
77:46 - it's got one really big message
77:49 - broken into pieces
77:51 - many pieces
77:53 - and it sends the pieces one at a time
77:56 - if you
77:57 - show up
77:59 - with a really short message with only
78:00 - three pieces
78:02 - all you have to do is wait for one piece
78:04 - to go and then your piece goes in and
78:06 - then you share for a while
78:08 - right you share for a while and then
78:10 - your have made it through because you
78:12 - only have three packets this has like
78:14 - 1000 packets and then once your message
78:18 - is through
78:19 - they resume sending this data in order
78:22 - and so you were able to sneak and bypass
78:24 - the traffic jam that was this large
78:27 - amount of data and so that's the idea of
78:29 - packets and packets are these chunks to
78:32 - say
78:33 - what we're going to send is a piece
78:35 - and then at the end of that we're going
78:36 - to maybe send a piece of a different
78:38 - message it was allowing simultaneously
78:40 - multiple message to be in flight at the
78:42 - same time
78:43 - that's packet switching
78:46 - and what happened then is we also ended
78:48 - up with these special purpose computers
78:50 - called routers they're still computers
78:52 - but they weren't doing storing in the
78:54 - same way they were just forwarding they
78:57 - weren't storing forward they were merely
78:58 - forwarding so we'll get back to that in
79:00 - a second
79:02 - [Music]
79:12 - do
79:17 - [Music]
79:22 - when you walk into the back entrance of
79:24 - boulter hall on the ucla campus you may
79:27 - notice a seemingly random pattern of
79:29 - floor tiles in the entrance if you spend
79:31 - a little time looking at the pattern it
79:33 - might dawn on me that the tiles
79:34 - represent zeros and ones and then you
79:36 - might even figure out the tiles
79:38 - represent ascii characters the
79:40 - characters in the floor tiles spell out
79:42 - low and behold to commemorate the
79:44 - building where l and o were the first
79:47 - two packets ever sent on the arpanet
79:49 - from ucla to stanford research institute
79:52 - on october 29th 1969.
79:59 - oppa wanted a network so that they could
80:01 - share the large computing resources they
80:03 - had
80:04 - given to their researchers across the
80:06 - country
80:08 - university of utah had a terrific
80:09 - graphics operating system
80:12 - so i had database we had simulation
80:14 - university of illinois had high
80:16 - performance computing and every time
80:18 - opera brought on a new researcher
80:20 - they'd offered to buy him a computer
80:22 - fine but the researcher would say i want
80:24 - the same capability all those other guys
80:25 - have i want the graphics the database
80:27 - and all the rest and office said we
80:29 - can't afford that
80:31 - if you want to do graphics you log on to
80:33 - the machine at utah through a network
80:35 - that we think we're going to make
80:37 - so the need for the network was to do
80:38 - resource sharing and not to protect the
80:40 - united states against a nuclear
80:43 - holocaust
80:44 - when bob taylor came in as a neck
80:46 - director and he recognized his need for
80:48 - sharing resources by the way notice the
80:50 - phrase i'm using sharing resources is
80:52 - exactly what i built into network design
80:55 - now they wanted to share the external
80:57 - resources same idea
80:59 - you have it you're not using it somebody
81:00 - else you'll be able to
81:02 - so they brought in larry roberts another
81:04 - classmate in mind in fact an officer
81:06 - made of mine at mit
81:08 - to manage this project he came to me
81:10 - because he knew my work he he watched me
81:12 - do the simulation in fact i used his
81:14 - compiler on the tx2 computer
81:17 - and said len we need to know if this
81:19 - thing is going to work
81:21 - he knew that i had the theory so i could
81:23 - show it to him it's going to work
81:25 - in fact he even says he would never have
81:27 - decided to spend millions of dollars of
81:29 - the us government's money he wasn't sure
81:31 - this thing would work
81:34 - so the design began to be laid out by a
81:36 - few of us in 1967
81:38 - in 68 they sent out a request for
81:40 - proposal the end of 68 both baranek and
81:43 - newman a cambridge massachusetts firm
81:46 - won the contract to produce the first
81:48 - switch
81:50 - of the arpanet
81:51 - and we became the network measurement
81:52 - center early on so we could test it out
81:55 - during the design phase
81:57 - some great people were there throwing
81:59 - their ideas out herb baskin was there a
82:01 - time sharing expert
82:04 - and he said
82:05 - if this network can't deliver short
82:07 - messages within a half a second i can't
82:09 - use it for time sharing
82:12 - specifications half a second by the way
82:15 - we got 200 milliseconds
82:19 - and uh
82:20 - westclock said
82:22 - a separate computer
82:23 - from communications
82:25 - i said look if this is going to be an
82:27 - experiment and i was also interested in
82:28 - the research and experimentation we have
82:30 - to build software in so we can run
82:32 - experiments
82:34 - artificial traffic generators
82:36 - measurement hooks a place where the
82:38 - measurements can be evaluated
82:40 - with the software and so
82:42 - howie frank began to talk about
82:45 - network reliability he said this if
82:48 - anything fails the network shouldn't
82:49 - collapse
82:51 - so we built in we so we didn't say this
82:53 - should be five nines of uptime we
82:56 - weren't much more pragmatic we said if
82:57 - any single thing fails
83:00 - everybody else can still talk
83:02 - so to do that you need something called
83:03 - a two connected topology two independent
83:05 - pairs between every pair of nodes
83:08 - built in
83:09 - so all those specs went to bbn they
83:11 - built the dawn thing they delivered the
83:13 - switch here at ucla
83:15 - on schedule eight months after they got
83:17 - the contract they were to deliver this
83:19 - new technology
83:21 - new applications new device
83:24 - they did it on time
83:26 - on budget
83:27 - came here
83:28 - we plugged it in and bits began to move
83:30 - back and forth between our timeshare
83:32 - machine and that switch on the day after
83:35 - labor day september 2nd 1969
83:39 - but that was just a one node network
83:42 - the schedule was that another one of
83:43 - these switches will be delivered
83:45 - at stanford research institute 400 miles
83:47 - to the north
83:49 - and they would connect that to their
83:50 - machine
83:52 - and that happened in october
83:54 - so in october we had a two node network
83:57 - my machine my switch
84:00 - another switch 400 miles away
84:03 - and the sli host okay and it wasn't one
84:06 - single line it was a gang of 4.8 kilo
84:09 - per second lines
84:10 - so now what do you do you have a two
84:11 - node network well now you can do
84:13 - something
84:14 - so we decided one night one night late
84:18 - in october
84:20 - programmer charlie klein and i were in
84:21 - the room and said look let's let's
84:23 - communicate between the two machines
84:26 - so we got a hold of bill duvall their
84:28 - program there and we said let's simply
84:31 - log in from a terminal connected to our
84:33 - host
84:35 - to that machine the idea is these are
84:37 - both time sharing systems they expect
84:39 - terminals to connect in and use the
84:42 - services of the machine
84:43 - the big thing was sit at the terminal
84:45 - here log on to your machine here and
84:47 - through this wonderful network
84:50 - log on here as if you're a local user
84:53 - well that's easy enough
84:55 - so we got all set
84:57 - got charlie down at the terminal over
84:58 - here
85:00 - and just to be sure this worked we had a
85:03 - telephone here instead in fact i
85:04 - actually think i've got the here it is i
85:07 - just happen to have it
85:08 - that was the telephone set that's the
85:09 - telephone that was a telephone we
85:11 - plugged it in
85:12 - we drove we derived a uh we weren't
85:15 - using skype
85:17 - for a knife
85:19 - plugged it in we used a piece of the
85:21 - high speed line for the for the phone
85:22 - connection but with the interesting
85:23 - thing is we were using
85:26 - the defunct circuit switching technology
85:29 - to prove out the new packet switching
85:31 - technology and it really helped us so we
85:34 - could understand what's going on so
85:36 - charlie typed the l who said you get the
85:38 - l bill said yup got the o
85:40 - type deal you get the o we're trying to
85:42 - do l o g for login get the o got the o
85:45 - type the g get the g
85:47 - crash
85:49 - so the first message ever on the network
85:51 - was
85:52 - low
85:53 - as in lo and behold yeah
85:56 - now that's especially interesting
85:57 - because if you go outside this hallway
85:59 - here down under the alley and come into
86:01 - another entrance to this building
86:04 - and you i just discovered this about a
86:06 - week ago
86:08 - you you walk on on a platform
86:11 - and there's a mosaic of tiles down there
86:14 - and they're a strange pattern
86:16 - it turns out it's the ascii code for lo
86:19 - and behold
86:21 - i have no idea who did that
86:23 - you know it's about a year and a half
86:24 - now
86:25 - some very clever person put that in
86:27 - that was the first message october 29
86:29 - 1969 to 10 30 at night
86:36 - entering 1969 right now
86:38 - we reproduced this room to look as it
86:40 - did and smell and feel like it did
86:45 - some 40-odd years ago
86:48 - and if you look over here
86:51 - you're looking at the first piece of
86:53 - equipment ever on the internet
86:56 - this is that first
86:58 - interface message processor
87:01 - imp number one at ucla
87:04 - a honeywell mini computer
87:06 - adapted by both veronica newman bbn
87:09 - to operate as a switch which handles
87:12 - the functionality
87:13 - and this is the same physical four
87:16 - square feet where it served as the
87:19 - opening
87:21 - note
87:22 - of the internet the first piece of
87:24 - equipment ever on the internet and
87:26 - that's the actual one that's it i kept
87:28 - it for years i tried to throw it away
87:30 - many times
87:31 - most of the people who had imps have
87:32 - tossed them this was the one or two left
87:34 - around the world but this is number one
87:36 - this is the first piece
87:38 - if you open this machine
87:41 - you'll be
87:42 - privileged
87:43 - to smell it yeah it's got an unusual
87:46 - odor and just brings you right back yeah
87:49 - the emotion it's great
87:51 - you can't slow it through it this is a
87:52 - military hardware machine
87:54 - this this machine was
87:57 - essentially a state-of-the-art mini
87:59 - computer which was adopted by bbn
88:01 - and i first saw it in 1968
88:05 - at one of the joint computer conference
88:07 - shows
88:08 - thousands of people on the big big
88:09 - exhibit floor and you see these sky
88:11 - hooks up here
88:13 - they had one of these machines hanging
88:15 - from the from the ceiling
88:17 - swinging in the air
88:19 - running
88:20 - and there's a guy
88:22 - big guy
88:23 - stripped to the waist
88:24 - oil skin with a sledgehammer and he was
88:27 - going whack right whack to show that it
88:30 - was military and it was
88:33 - but the most important document of the
88:35 - internet the most important document
88:39 - of the entire internet is right here
88:43 - you talked about who is working with me
88:45 - well one of my software programs was
88:47 - john pastel in fact he's this picture
88:51 - and he was not a hippie
88:53 - even though he appears to be
88:56 - he was the one who basically disciplined
88:58 - my my staff to do things properly and
89:01 - keep records he said we have to keep a
89:03 - record of what's going on so beginning
89:05 - in october
89:07 - basically a month after the improvise
89:08 - arrived we started keeping an imp log
89:10 - you know this is an engineer's log this
89:12 - is not
89:13 - you know madison avenue a piece of
89:15 - doctor just scribbled we use an old sds
89:18 - log and in here
89:20 - we kept a record of what's going on
89:22 - and the most important entry happens to
89:24 - be right here
89:26 - on october 29 1969
89:29 - at 10 30 at night
89:31 - charlie klein the programmer who's in
89:33 - the room with me
89:34 - made this entry talk to sri host to host
89:38 - this is the only record of the very
89:40 - first message ever on the internet right
89:42 - here
89:46 - you know we had the technology we
89:47 - started making measurements we were the
89:49 - first experimental node
89:51 - so we we saw things happening how come
89:53 - we have a 50 kilo per second line the
89:56 - routing procedure either goes one way or
89:58 - the other one at a time how can you get
90:00 - more than 50 kilos per second between
90:02 - two nodes
90:04 - if there's only one path at any time
90:06 - and we say oh it's obvious
90:09 - that path is on now when it gets backed
90:11 - up you change paths so this guy's empty
90:14 - and it's packed back up while you're
90:15 - sending this way they go close to 100
90:17 - calibers per second right too
90:19 - so i think but we could break it in
90:20 - words i said and every time we did
90:23 - we would call bbn and say fix it we did
90:26 - this fix it because they wouldn't give
90:27 - us the code
90:29 - they kept it proprietary until officer
90:31 - said
90:31 - we paid for that code you have to open
90:34 - it they did we saw it every time we got
90:36 - it and it would take them six months to
90:38 - fix anything right
90:40 - we discovered a fault this time we had
90:41 - the code we showed them how to fix it
90:44 - still took six months
90:46 - one of the things i was very much
90:47 - interested in with design was
90:48 - distributed control why right
90:51 - when i was a student of shannon
90:53 - and shannon's great work came when you
90:55 - had a lot of things interactive long
90:57 - code words for example
90:59 - that's when these emergent properties
91:00 - arise so i said i want to design large
91:03 - networks it's not a large network you
91:06 - can't have a single point to control you
91:08 - have to distribute it right so what does
91:10 - it mean to distribute control you're
91:12 - delegating authority to all the peers
91:16 - when office started funding the
91:18 - principal investigators they had the
91:19 - same philosophy say look you're a smart
91:22 - guy here's some money go do the thing
91:24 - you do best we're not going to sit on
91:26 - top of you make good things happen
91:29 - so here we are i'm a recipient like kind
91:31 - of money what do i do with it i've got
91:33 - my graduate students they're billion
91:34 - kids look we need a host host protocol
91:37 - here
91:38 - i'm not gonna sit on top of you
91:40 - gonna run with it that is not a product
91:44 - mentality right that is a research and
91:46 - development to create them
91:47 - and it worked so well
91:49 - [Music]
92:11 - so my favorite analogy to talk about how
92:14 - packets work is postcards so let's say
92:17 - that i want to send a 30 character
92:19 - message to my friend daphne at stanford
92:21 - but all i have is 10 character postcards
92:24 - so
92:25 - off i go i break my message
92:28 - into three bits of ten characters i
92:32 - write each piece on a different postcard
92:34 - i address with a from and a two address
92:38 - from chuck to daphne and then i give a
92:41 - sequence number so that when she gets
92:42 - the postcards she knows what order to
92:44 - put them back together
92:46 - so i have to label each of these and
92:47 - these are fixed width and fixed length
92:50 - they you know it's like a packet right
92:52 - it's i'm breaking a long message that
92:53 - might be very long into nothing so that
92:56 - each piece is a certain size so that we
92:58 - can all share it right
93:00 - and so then what i do
93:03 - is i send these i put them all in my
93:06 - mailbox
93:08 - and then i wait
93:09 - and this magical thing called the post
93:12 - office
93:13 - picks them up
93:15 - puts them in buildings people sort them
93:17 - they end up on trucks they end up on
93:19 - planes on trains on donkeys
93:23 - by hand
93:25 - and each of my postcards might take a
93:27 - different route i mean one of my
93:29 - postcards
93:32 - i should have a map here you know one of
93:34 - my posts not that one
93:36 - oops do that one of my postcards you
93:38 - know goes from michigan to chicago
93:42 - to kansas city
93:44 - to san francisco
93:46 - another of my postcards goes from
93:48 - michigan to chicago to dallas
93:51 - to denver to kansas city to chicago to
93:54 - san francisco and my third postcard goes
93:58 - uh really crazy it goes to cleveland and
94:01 - it goes to atlanta then it goes to
94:03 - washington dc
94:04 - and then it goes to chicago
94:07 - and then it goes to kansas city and then
94:09 - it makes it to san francisco
94:11 - now the fact that they took different
94:13 - paths and they might not even arrive in
94:15 - order some might get past each other
94:17 - they might get stuck somewhere it
94:19 - doesn't matter because each one of these
94:21 - has been labeled both with the from and
94:23 - the two destination so each of these
94:25 - intermediate locations doesn't have to
94:27 - get it to the final destination they
94:29 - just have to get it closer they make
94:31 - choices and even if they make the wrong
94:33 - choice it can be sort of dealt with one
94:35 - way or the other okay
94:37 - so
94:38 - this is some big mystery it's called the
94:40 - post office it just takes these little
94:42 - cards with labels and moves them it
94:44 - doesn't know
94:45 - if that's a youtube video or if it's an
94:47 - email it doesn't really care it just has
94:49 - these little chunks to move around that
94:50 - have from and two addresses i mean
94:52 - that's the essence of the network
94:55 - the internet the cloud that's why that's
94:57 - why we draw this picture you'll see like
94:59 - oh it's a cloud and that's because it's
95:01 - don't worry about what's inside here
95:03 - it's all super mysterious and
95:05 - don't worry about it it just comes out
95:07 - so
95:08 - after all that happens
95:11 - daphne who happens to have the exact
95:12 - same mailbox as i do
95:14 - it's kind of rare we both have a mailbox
95:16 - that's copyright creative comments
95:18 - that's what's cool about this mailbox
95:21 - at some point later these things start
95:23 - appearing she goes like oh looks like
95:25 - chuck is sending me a note but because
95:27 - of his limitation of postcards he's only
95:29 - sent me one i know who it's from and i
95:31 - know who it's two and i know that's the
95:32 - first of some number of messages
95:35 - and then the next day out comes another
95:37 - one because that was the one that sort
95:39 - of went the more southerly route
95:42 - and she goes well i'm missing something
95:44 - i'll just sit and wait and see what
95:45 - happens and then finally many many days
95:47 - later the uh the one that took the circa
95:49 - two is most circuit
95:54 - most roundabout route um
95:57 - comes and now daphne can reassemble the
95:59 - messages because she has
96:03 - the sequences so she simply puts them
96:05 - back together one two three boom
96:08 - so she puts them back together she has
96:10 - it she sort of throws the postcards away
96:12 - and she has the ultimate final message
96:15 - that's packets
96:16 - packets are breaking a big message into
96:18 - small parts labeling each one of them
96:20 - individually and then throwing them into
96:23 - the shared network and so this is what
96:25 - it looks like
96:28 - the post office in this
96:30 - is called a gateway
96:36 - okay come on gateway
96:41 - okay so that's a gateway so here's
96:43 - michigan
96:44 - here's stanford
96:46 - stanford has a gateway too that's like
96:47 - their post office
96:49 - in the middle is the post office box
96:53 - right
96:54 - and the post office box basically the
96:56 - post office has intermediate locations
96:59 - and it has trucks and locations these
97:02 - are links and routers
97:04 - and messages can take different paths
97:14 - right and then they arrive and they're
97:16 - reassembled
97:17 - and we have like their ability to hook
97:19 - from home and stuff like that so there's
97:21 - a local area network lan
97:23 - lan
97:24 - and then there's a sort of like internet
97:26 - the network of networks
97:29 - it's like the post office and it still
97:31 - breaks things into packets they still
97:33 - come out as packets and then daphne has
97:35 - to reassemble them on her computer to
97:37 - create the message
97:39 - so so the research network arpanet
97:42 - solved a lot of engineering problems
97:46 - [Music]
97:53 - so
97:55 - [Music]
98:14 - so i was a student at mit
98:16 - and i was scheduled on the wonderful
98:18 - scholarship program
98:20 - supported by mit lincoln labs to get a
98:22 - master's degree
98:24 - and it was a very rigid schedule you're
98:26 - going to be done in two years
98:28 - get a job at lincoln lab and do research
98:31 - and so i was on the program and i was
98:32 - one of the few people who actually
98:34 - finished on time
98:35 - and as i was finishing i scheduled to
98:37 - have my first child the summer of 1958
98:39 - when i'm going to be done
98:43 - in that summer
98:44 - my professor at the surfer mechanisms
98:46 - lab at mit said you have to get a phd i
98:50 - said i don't want to get a phd i've done
98:52 - this program i'm scheduled my child has
98:54 - just been born
98:55 - so you got to do it so i kept twisting
98:57 - my arm and finally i said okay i'll do
98:59 - it but i'm going to do it i want to work
99:01 - on something that's really significant
99:03 - and not piddle around for the next three
99:04 - or four years
99:07 - so i decided i'm going to work for the
99:08 - best professor i know at mit and that
99:10 - was claude shannon
99:12 - the infamous wonderful magnificent
99:14 - person claude channing so i called him
99:16 - up
99:17 - and invited me to his house and we
99:18 - chatted a bit decided yes we're going to
99:20 - work together
99:22 - first thing i started working on
99:23 - actually was a chess playing program
99:25 - just working with a man who was a
99:27 - delight
99:29 - he was a great engineer great
99:30 - mathematician
99:32 - smart as heck could solve a problem like
99:34 - that
99:36 - i looked around at my classmates most of
99:38 - whom were working for him and most of
99:40 - them were working on the kind of work he
99:42 - had developed namely the field of
99:44 - information theory and coding theory
99:47 - and i looked at them and i'd taken those
99:48 - courses
99:50 - and i said you know the work that
99:51 - they're doing
99:52 - is the work that he left behind those
99:54 - problems that are left over hard
99:56 - and probably not of great significance
99:58 - little bits and pieces left i said
100:00 - that's not what i signed up for i wanted
100:02 - something to be fun exciting challenging
100:05 - and have impact
100:07 - meanwhile being at mit and lincoln
100:09 - laboratory i was surrounded by computers
100:13 - and i recognize you know one day these
100:14 - computers are going to have to talk to
100:15 - each other
100:16 - because this is way early nobody was
100:18 - thinking about that at the time but if
100:20 - they're going to talk to each other what
100:22 - technology would support their
100:23 - communication and the interaction
100:26 - and the answer is there was nothing
100:27 - available
100:29 - so i had an approach
100:31 - i figured the way to provide the
100:32 - communications would be to provide the
100:35 - ability for shared communication links
100:38 - because i knew that computers when they
100:40 - talk they don't talk the way i am now
100:42 - continuously they go blast and they're
100:44 - quiet for a while although i let it
100:46 - suddenly come up and blast again
100:48 - and you can't afford to dedicate a
100:50 - communications connection for something
100:53 - which is almost never talking
100:55 - but when it wants to talk i want
100:56 - immediate access
100:58 - so we had to not use the telephone
101:00 - network which is designed for continuous
101:02 - talking the circuit switch network but
101:04 - something else
101:06 - and i had an approach using some
101:08 - mathematical thinking namely cueing
101:10 - theory
101:11 - there was a model i could develop
101:13 - and it just made sense to do that which
101:16 - we had done in time sharing and time
101:18 - sharing
101:19 - you have a big computer and a lot of
101:21 - people share it when you're using it i'm
101:23 - not when you're not i am so we sort of
101:25 - interlace each other
101:27 - why not use communications the same way
101:30 - we're going to set up communications
101:31 - capability let everybody jump in and
101:34 - share and they only get to use it when
101:36 - they have something to send
101:38 - this is a new technology so there's an
101:40 - approach i have a mathematical tool to
101:42 - do it it's clearly important it will
101:44 - have impact
101:45 - and nobody's looked at this yet so
101:47 - there's a lot of low hanging fruit
101:48 - around
101:50 - it's not that hard it's not that hard so
101:52 - it's perfect for me
101:55 - so i started working on that problem now
101:56 - this was years before anybody needed
101:59 - this technology
102:00 - in time sharing for example which is the
102:02 - underlying technology that i adapted to
102:04 - communications in time sharing
102:07 - you want to let the little jobs go
102:09 - before the big jobs yeah
102:11 - because why should little guy wait a
102:12 - long time for a big chat he's going to
102:14 - get in and get out
102:15 - so when jobs come in you ask them how
102:17 - long are you and they're all going to
102:19 - say i'm tiny
102:20 - so you say okay you're tiny i'll give
102:22 - you a little bit of time
102:23 - and if you're tiny you'll be out of
102:25 - there no i'll send you to the back of
102:27 - the queue and you get another tiny shot
102:29 - the notion of round robin
102:32 - so you get a little bit of the time
102:33 - we're going to break you into little
102:34 - chunks
102:35 - you got a chunk at a time
102:37 - i said that's a great idea for sharing
102:39 - communications
102:41 - will give everybody a little bit of
102:42 - communications time the little ones will
102:44 - filter out the short jobs to filter out
102:49 - when i say job i mean message a short
102:51 - message will filter out and the long
102:52 - ones will take a little longer and they
102:54 - don't mind being interrupted by the
102:56 - little guys the important thing in this
102:57 - technology was not to make the very
103:00 - short messages wait behind very long
103:02 - messages
103:03 - this automatic round robin which is now
103:06 - called packet switching you chop things
103:08 - into fixed lengths you give them a
103:10 - little bit it's not that's not enough
103:12 - give it another piece and they go
103:15 - flying to the network on their own
103:17 - so the idea of packetizing was important
103:19 - the idea of distributed control the idea
103:21 - of large shared systems in which you get
103:23 - some terrific design benefits came along
103:26 - and so this got published mcgraw-hill
103:28 - book
103:29 - nobody cared
103:31 - i published early yeah this is published
103:34 - my dissertation ended in december 62 i
103:36 - graduated in june 63 this book was
103:38 - published in 1964. and nobody cared
103:40 - nobody cared in fact i went to at t the
103:43 - biggest network of the time
103:44 - and i explained to them you guys ought
103:46 - to give us good data communications
103:48 - and their answer was what are you
103:50 - talking about the united states is a
103:51 - copper mine it's full of telephone wires
103:53 - use that
103:54 - i said no no you don't understand
103:57 - it takes you
103:58 - 35 seconds to set up a call you charge
104:00 - me a minimum of three minutes and i want
104:03 - to send 100 milliseconds of data
104:05 - and their answer was little boy go away
104:08 - so little boy went away and with others
104:10 - developed this technology which ate
104:12 - their lunch
104:13 - but nobody cared and they said it
104:15 - wouldn't work and even if it did work
104:16 - they want nothing to do with it
104:19 - so that was the environment we faced
104:22 - it wasn't until years later when the
104:24 - government decided they needed a network
104:26 - that suddenly i saw a way in which i
104:28 - could implement the technology i had
104:31 - but getting back to what i said earlier
104:32 - i set up this mathematical model
104:35 - it was analytically intractable and
104:37 - still is by the way
104:39 - i had two choices one is give up and
104:41 - find something else
104:42 - or two
104:43 - make an assumption which allows them to
104:45 - move forward
104:47 - so i introduced a mathematical
104:48 - assumption
104:49 - which cracked the problem wide open
104:52 - from that point i could just sail
104:53 - through the solution
104:55 - get the get the performance behavior get
104:57 - the design principles going forward
105:00 - but then the question is was that
105:01 - assumption any good
105:03 - what was the assumption the assumption
105:05 - was what i call the independence
105:06 - assumption and it's absolutely a false
105:09 - assumption
105:11 - it says when a message travels through
105:12 - the network
105:14 - it changes its length independently
105:16 - every time it hits a new node on the top
105:18 - through the network right
105:20 - mathematically that creates an
105:22 - independence which allows you to proceed
105:23 - with the analysis
105:25 - but it's clearly not true right
105:27 - so what i had to do was to simulate a
105:29 - network with and without the assumption
105:32 - i simulated many networks on a machine
105:34 - at lincoln laboratory on the tx2
105:36 - transistorized computer there
105:38 - and i spent four months
105:40 - writing the simulation program
105:43 - without debugging a single line of it at
105:45 - a 2500 line
105:48 - assembly language
105:50 - simulation
105:52 - and i knew if i didn't get that
105:53 - simulation right i would get no
105:54 - dissertation
105:56 - ran it tested with and without the
105:58 - assumption and the results were
106:00 - amazingly close
106:02 - so i had my solution i could prove it
106:04 - work the package wouldn't fall on the
106:06 - floor
106:07 - i could tell when things would work well
106:08 - and when they wouldn't
106:10 - got published again still nobody cared
106:12 - about it as i said lincoln laboratory
106:14 - sent me for my master's dissertation
106:15 - they also resent me for my phd so they
106:17 - supported me for years
106:20 - wonderful economic financial
106:23 - research environment support
106:25 - and i felt an obligation to work for
106:27 - them and i was prepared to take a job at
106:29 - lincoln laboratory
106:31 - which is a great institution
106:33 - and so i went when i went to work there
106:35 - the first thing they said is look len
106:37 - why don't you look outside before you
106:38 - can commit to work here
106:41 - make sure there's nothing out there that
106:43 - you really would like better
106:44 - this was a gen a magnificent
106:48 - step on their part
106:49 - so i took a trip to the west coast
106:51 - i went to some of the
106:53 - aerospace companies
106:55 - i was not interested in university
106:56 - position at all really
106:58 - but it turns out when i was going up to
107:00 - san francisco to look at some of the
107:01 - high-tech companies up there
107:04 - a friend of mine suggested i interview
107:06 - with berkeley
107:07 - so i did
107:09 - i interviewed i came back they lost my
107:11 - case they changed the uh the chairman i
107:14 - never heard from them
107:16 - but on sabbatical one of the professors
107:18 - that interviewed me came to mit while i
107:20 - was just finishing myself my phd then
107:23 - and he sees me and he'll says klein rock
107:24 - how are you and he thinks that i'm
107:26 - looking for a p a an academic position
107:30 - he contacts one of his friends here at
107:31 - ucla who then invites me out here offers
107:34 - me a job and now i've got a dilemma
107:37 - do i want to teach do i want to cross
107:39 - the united states it's almost like on a
107:41 - wagon train 3000 miles away from the
107:43 - east coast where the world is
107:46 - family is
107:47 - for a job paying half that i could earn
107:49 - back at at mit lincoln labs
107:51 - and try something i'd never tried before
107:54 - so i went to the box at lincoln lab and
107:56 - i said look
107:57 - i've got this offer it looks attractive
107:59 - it's it's a new challenge
108:02 - what should i do
108:03 - and there was a wonderful answer they
108:05 - gave they said len
108:06 - try it
108:07 - if you don't like it
108:09 - come back wow wow it's right yeah well i
108:12 - came here in august of 63
108:15 - 50 years ago and i'm still here
108:18 - [Music]
108:37 - so here is an example problem to solve
108:39 - now
108:41 - none of the mailbox run of the routers
108:43 - none of the post office offices know
108:45 - exactly where the thing is going and
108:47 - they don't transport it to the final
108:48 - destination all they do is they
108:50 - transport it to the future to a further
108:53 - down destination but what if they get it
108:55 - wrong what if one this is like
108:58 - michigan this is chicago this is dallas
109:00 - and what if michigan thinks sending to
109:02 - chicago is a good idea chicago thinks
109:04 - sending to dallas is a good idea and the
109:06 - dallas thinks sending to michigan is a
109:08 - good idea well then michigan is going to
109:10 - get it again and send it back to chicago
109:12 - and so then what you end up with is this
109:14 - situation where your packet your data is
109:17 - in a loop
109:18 - right this wouldn't be good for the post
109:19 - office and it's not good for the
109:22 - internet
109:22 - so you have to say how do we solve this
109:25 - problem when something's wrong right
109:27 - it's you wish it were perfect but it's
109:29 - not
109:30 - and so this is the kind of research
109:33 - question as to how to solve this kind of
109:34 - problem and we'll talk more about this
109:36 - in a bit uh when we get into a little
109:38 - more technical detail but i just wanted
109:40 - to sort of say that's the kind of
109:42 - research in engineering that took
109:43 - literally 20 years and four different
109:46 - versions of it of the arpanet to get
109:48 - right
109:49 - [Music]
110:09 - there was this whole world of
110:12 - of coders and
110:14 - hardware guys in the 60s and i thought
110:18 - to myself i bet there's a really
110:19 - interesting story here so
110:21 - my editor at simon and inchester was
110:23 - totally
110:24 - 100 behind it
110:26 - uh we the working title was really bad
110:30 - it was called building cyberspace so
110:33 - we knew we needed a new title
110:35 - and so
110:37 - and matt my late husband didn't come in
110:40 - on the project uh he was actually a
110:42 - better writer than i am and a wonderful
110:45 - just had an absolutely incredible mind
110:47 - and could grasp anything
110:49 - and uh he didn't come in on the project
110:52 - until about maybe a year into it
110:56 - when i was getting overwhelmed i had
110:58 - this new baby and i was working
111:03 - at newsweek
111:05 - and i was
111:06 - uh and i realized that there was just
111:08 - more to the story than i could do myself
111:10 - it would have taken me like double
111:12 - double the time
111:14 - so um that's when he came in on the
111:16 - project and
111:18 - i found indeed that there was this
111:20 - incredible untold story of not so much
111:23 - the internet so we have to keep it
111:25 - really clear the arpanet and how that
111:28 - started and
111:29 - um
111:30 - in fact matt's the one who wrote the
111:32 - chapter the fastest million dollars
111:34 - which is about how it got funded
111:37 - um at ipto the information processing
111:40 - techniques office
111:41 - at what was then derpa and then became
111:43 - urban and darpan and arpagon and uh
111:47 - these people were all as i had hoped
111:50 - incredibly interesting
111:52 - really smart
111:53 - and uh
111:56 - and had this new idea for how computers
111:58 - could talk to each other
112:00 - and um
112:02 - one of the most amazing things was uh
112:05 - visiting
112:07 - um larry roberts who
112:10 - was
112:12 - running ipto at the time that this whole
112:14 - thing was drawn out we were at his house
112:16 - in woodside and we went out into the
112:18 - garage this is how
112:20 - unresearched this topic was because you
112:23 - know huda thunk right
112:24 - and
112:25 - we go out into his garage and there are
112:27 - all these boxes
112:28 - of old mildewy papers and he starts
112:31 - pulling them out and they're old
112:33 - letters
112:35 - between him and people at mit and
112:38 - then he pulls out this amazing set of
112:41 - sketches
112:42 - of him just it's like remember when um
112:45 - trudeau doonsbury did inside reagan's
112:47 - brain this was like inside larry
112:50 - robert's brain he was like just
112:53 - sketching out all the possible
112:55 - configurations
112:57 - of um
112:58 - what this network could look like and
113:00 - i've got these pictures in the book
113:01 - which you can show
113:03 - but here you know
113:06 - you know these these are all his very
113:08 - early diagrams
113:10 - um
113:11 - just sort of popping out of his head
113:13 - this is when this is you know the the
113:15 - early nodes on the arpanet
113:17 - and i just loved finding all this
113:20 - incredible primary source material
113:22 - and it was a
113:23 - it was uh i felt like i should have been
113:25 - paying somebody to be able to do this
113:28 - rather than
113:29 - right because it's just in a it's in a
113:30 - garage that millions of people drive by
113:32 - right and it's also this important
113:34 - artifact yeah of the what we're living
113:36 - right now right and we were able to sort
113:38 - of you know capture it and bulk baranika
113:41 - newman was a big force behind the book
113:43 - the book was in part their idea
113:45 - and so these guys because what we tend
113:48 - to forget
113:50 - is that bbn
113:51 - they built the first amp
113:54 - and the interface message processor
113:59 - in fact there's a very funny story in
114:00 - the book where ted kennedy
114:02 - you know senator from massachusetts
114:05 - sends a letter to bbn
114:07 - congratulating them on getting the
114:09 - contract for the interfaith message
114:12 - process
114:14 - i know uh so a completely uncharted
114:16 - territory and they had to build this
114:17 - piece of hardware which they did and
114:19 - program it which they did a whole new
114:20 - thing and uh
114:23 - it was uh so i spent a lot of time with
114:26 - the folks at bbn got to know them well
114:27 - and that group they were completely on
114:31 - school in talking to you know
114:34 - reporters or
114:36 - a book researcher and there's this one
114:38 - guy
114:39 - ray tomlinson everybody said oh you
114:40 - should go talk to ray because he uh came
114:43 - up with the at sign i said oh really
114:47 - okay
114:48 - and so you know there's this wonderful
114:50 - really
114:51 - quiet guy ray tomlinson sitting in his
114:54 - office and i
114:55 - knocked on his door i said i understand
114:57 - you came up with the outside he goes oh
114:58 - yeah yeah and then he explains to me you
115:00 - know how it is that he
115:02 - did this and then you know and now it's
115:05 - a huge legend that ray tomlinson did
115:07 - this and uh
115:09 - and
115:11 - uh other and some the software guys uh
115:15 - really i have this image if you sort of
115:17 - just driving and driving and going and
115:19 - going back and forth i mean what how
115:21 - long was the research how long did you
115:23 - research this was this i think yeah the
115:24 - research took a couple of years
115:26 - and it wasn't so much driving that the
115:28 - hacker book was like driving all over
115:31 - all over the place because that was
115:32 - three different stories of three
115:33 - different hackers
115:35 - this was more in fact email between the
115:37 - hacker book and this book and the and
115:40 - wizards so 1988 and like when i started
115:43 - this book 1990
115:47 - email had come it was much more popular
115:49 - so
115:50 - there were a lot of we did a lot of
115:51 - emailing back and forth i spent a lot of
115:53 - time i did go from i was living in
115:55 - austin at the time i did go from um
116:00 - uh austin to boston a lot and i spent a
116:02 - lot of time actually i did fly to la and
116:05 - spent a lot of time with john pastel
116:09 - who came up with the domain name system
116:11 - and
116:12 - um uh and he died
116:15 - in 90
116:17 - i want to say 98 99.
116:20 - that was shocking uh i spent a lot of
116:24 - time with him tell me about it um
116:26 - tell me about john well john uh so
116:29 - anyone who's ever seen a picture of john
116:31 - maybe you have one you can dig up
116:33 - this very long kind of santa claus like
116:35 - beard and what's amazing is so i spent a
116:36 - lot of time at his house he lived in a
116:38 - teeny tiny little house
116:40 - in uh in the la area
116:43 - and uh with his girlfriend this very
116:45 - nice woman named susan
116:47 - and uh on the refrigerator there were
116:50 - all these family photos and they all
116:52 - they were all like these
116:54 - uh people with long beards long white
116:56 - beards and i thought one of an
116:58 - interesting family
117:00 - and he drove i think this kind of beat
117:02 - up volvo or something like that
117:05 - you know something completely
117:07 - unpretentious
117:08 - and lived so unpretentiously and
117:12 - uh
117:13 - and had all his files like right in his
117:16 - study in this little house all this
117:18 - history and also at isi where he worked
117:21 - in marina del rey
117:22 - and uh
117:24 - and we spent hours and hours and hours
117:26 - together first in boston um at where we
117:29 - were both at a
117:31 - an anniversary party of the um of the
117:34 - arpanet
117:36 - and we spent a lot of time together and
117:37 - i thought you know this guy is key and
117:39 - he was so
117:40 - quiet that sort of getting him to open
117:43 - up really meant spending a lot of time
117:45 - with him and he was oh and we met at one
117:48 - of the very first inec conferences in
117:50 - 1995 in hawaii and spent a lot of time
117:52 - there and he just was so patiently
117:54 - trying to explain to me
117:56 - um
117:57 - things but i'll never forget this one
117:59 - thing that happened with him in hawaii
118:00 - at the inec conference it's
118:02 - the internet society conference one of
118:04 - the very early ones and uh
118:07 - and
118:08 - i just was asking him some questions and
118:11 - he goes uh
118:12 - he looked completely disturbed and
118:14 - distracted and he said no no there's
118:16 - someone over across the room i have to
118:18 - talk to and it was someone from a very
118:20 - small country
118:22 - sort of wanting to talk to john
118:24 - about their domain the country's domain
118:26 - name or something but to john it was far
118:29 - more important that he deal with this
118:31 - person's problem then you know
118:35 - then cement his place in history in this
118:37 - arpanet history in fact
118:40 - when i was working on the book
118:43 - i sent him an email i'll never forget
118:44 - this i think i don't have the email
118:46 - anymore and i said just out of curiosity
118:48 - why
118:50 - haven't you ever
118:51 - like wanted to
118:52 - get rich
118:54 - because that's when people were just
118:55 - starting to get rich so this was in 95
118:59 - and he said it just
119:01 - that's just not what this is about
119:04 - isn't that a wonderful thing it is yeah
119:06 - and that's who john was one of the
119:08 - things that i've been curious about is
119:11 - how this got by att
119:13 - right how this made it past 18 i know
119:16 - talk about no vision
119:18 - right and uh
119:20 - well you know paul barron had happened
119:23 - he had couldn't convince at t to build
119:26 - the
119:27 - very uh marvelous network that he uh
119:30 - designed and then
119:33 - these other guys the next guys the next
119:35 - crew that came in
119:37 - uh
119:37 - and they just they were very very you
119:40 - know think about it back then it was
119:42 - they had a monopoly what did they really
119:44 - care
119:45 - they had
119:46 - um
119:48 - they had the um
119:50 - bell
119:51 - uh
119:52 - research labs
119:54 - and
119:55 - they it was a non-invented here kind of
119:57 - syndrome
119:58 - and
119:59 - they
120:01 - they didn't see they didn't see it i
120:02 - mean talk about no vision they simply
120:05 - didn't see it but i think the fact that
120:07 - not invented here part of it was um
120:10 - like what would we need uh what would we
120:12 - possibly
120:13 - need this for yeah they were in a
120:15 - context
120:16 - they were in their own context yeah
120:19 - but thank goodness i mean thank goodness
120:22 - they didn't get their hands on this
120:23 - thing the same with ibm sorry you know
120:26 - just
120:27 - we don't we didn't want corporate
120:29 - america
120:30 - or deck for that matter
120:33 - um the original hardware was um based on
120:36 - a honeywell machine and thank goodness
120:38 - honeywell doesn't exist anymore uh it
120:40 - sounds terrible that i'm saying this but
120:42 - it's but it was all
120:44 - kind of happy
120:45 - accidental
120:46 - sort of
120:48 - coincidences i think al gore is
120:52 - oh what oh totally underestimated and
120:54 - underappreciated is that what you were
120:56 - going to say oh yeah
120:58 - i mean why mock him every time
121:01 - every time i tell people i wrote a
121:03 - history of
121:04 - the origins of the internet
121:06 - um people say very mockingly oh did al
121:09 - gore invented and i won't play into that
121:12 - he played a huge role
121:15 - in terms of policy
121:17 - and direction
121:18 - and uh
121:20 - and when uh clinton was uh
121:24 - running for president you know they were
121:26 - out there with this very important uh
121:30 - technology white paper
121:32 - that uh
121:34 - uh
121:35 - i mean you can't do things like this
121:36 - unless you have
121:39 - the support that people like al gore
121:41 - provided
121:42 - [Music]
122:01 - by the end of the 1970s there was quite
122:04 - a sophisticated network like i said
122:06 - they'd rewritten it four times it had
122:08 - gotten to be very sophisticated there'd
122:10 - been a good investment they had been
122:12 - careful about understanding how to
122:14 - improve it each time they rebuilt it
122:17 - and so it was a really a fine working
122:19 - piece of software and the people who
122:22 - used it at these research universities
122:24 - and
122:25 - um
122:27 - at the military it was kind of like a
122:29 - futuristic world right you could send
122:31 - email and a second later it would appear
122:33 - right it was really quick and everything
122:35 - was nice and you could even have instant
122:37 - message like interactions where it went
122:39 - right then
122:40 - and
122:41 - the problem was is this was a small
122:43 - group of people this is maybe
122:45 - looks like 60 or so
122:47 - that was all the computers on the entire
122:49 - internet right i mean now we have
122:52 - our cell phones and we got billions of
122:54 - them right but this is like 60.
122:56 - um
122:57 - so real question is how did this go from
123:00 - 60 computers of a very narrow group
123:03 - to
123:04 - a much larger group and the answer to
123:06 - that question
123:08 - is at urbana-champaign illinois
123:11 - and so
123:14 - at the same time
123:16 - that this kind of goes back to bletchley
123:18 - park right where the computers were part
123:20 - of science
123:21 - throughout the 50s and 60s and 70s
123:24 - scientists much like the military
123:26 - realizing the computers were mighty
123:28 - useful to advance scientific research
123:31 - and so the national science foundation
123:32 - would fund universities to buy computers
123:35 - and they'd say give me 10 million
123:36 - dollars to buy a computer and another
123:38 - universe would be like give me 10
123:39 - million to buy a computer and then three
123:42 - years later the first university said my
123:43 - computer's obviously i needed another 10
123:44 - million dollars
123:46 - now the research questions were good
123:47 - research questions and they were
123:49 - important to society but the national
123:51 - science foundation got tired of giving
123:53 - 10 million dollars to every everybody
123:59 - i was part of this because i used to be
124:01 - a high performance computer guy this is
124:03 - a
124:04 - convex c3800 supercomputer
124:07 - uh i would be about this tall on this
124:09 - super computer this is a
124:11 - lovely and very expensive model that i
124:13 - was given after
124:14 - afterwards they were going to throw it
124:16 - away because this is from like 1987.
124:19 - um
124:20 - and and basically i wanted one of these
124:22 - terribly badly each one of these is
124:24 - about two million dollars this is like
124:26 - two four six eight ten million dollars
124:29 - and i so badly wanted this and i thought
124:31 - that i i deserved a ten million dollar
124:33 - toy and i could do such great research
124:36 - but unfortunately everybody else wanted
124:38 - the exact same thing
124:40 - and they were important too so the
124:42 - national science foundation said to
124:44 - themselves hey
124:45 - this isn't going to work very well if i
124:48 - can't find my pen
124:49 - um
124:50 - you know we're not going to we're going
124:51 - to make a network
124:53 - how about we put a few of these things
124:54 - in and then make a network and connect
124:56 - them together
124:58 - of course it's never as simple as that
125:00 - so now we're going to meet
125:03 - larry smarr
125:05 - at the national center for super
125:06 - computing applications ncsa
125:09 - at the university of illinois
125:11 - urbana-champaign
125:12 - and larry was the director of ncsa and
125:15 - one of them one of the many people but
125:17 - one of the most instrumental people
125:19 - in creating the national network
125:22 - that we now think of as the internet and
125:24 - getting it moving it from being a
125:26 - research project to being a project that
125:29 - we
125:30 - all both academics and regular people
125:33 - that we all can can make really good use
125:35 - of and so let's take a look at larry
125:37 - smar
125:39 - [Music]
125:46 - well i am a
125:48 - trained relavistic astrophysicist and i
125:52 - got my phds always in physics
125:54 - departments working on astrophysics
125:56 - problems involving
125:58 - general relativity gas dynamics and so
126:00 - forth and so in the 70s when
126:03 - i was developing what is now called
126:06 - numerical gene relativity which is the
126:08 - way to solve line sense equations for
126:09 - dynamics of black holes colliding black
126:12 - holes or in astrophysics
126:14 - that require generality like supernova
126:16 - events and so on
126:18 - uh i had
126:20 - uh to go and get a top secret nuclear
126:22 - weapons clearance to get access to
126:25 - supercomputers because in the mid 70s
126:28 - the only place to get a supercomputer
126:30 - was
126:32 - either at livermore los alamos or uh in
126:35 - one area which was weather
126:37 - now astronomy has always been a driver
126:39 - of supercomputing and in fact
126:41 - on johnny von neumann's computer that
126:43 - was built
126:45 - by the institute
126:47 - half of that and went to army
126:49 - to aberdeen half of that was used of
126:51 - course for the army for
126:53 - trajectory
126:54 - calculations but the other half was used
126:56 - for stellar evolution so astronomy and
126:59 - von neumann's interest in weather meant
127:01 - that astronomy and weather
127:04 - for 50 years basically have been
127:07 - dominant drivers of supercomputing usage
127:11 - and yet
127:12 - uh to do pure astrophysics you're having
127:15 - to get a top-secret nuclear weapons
127:16 - clearance now nobody seemed to think
127:18 - there was anything unusual about this
127:20 - um and so i just went ahead as a postdoc
127:23 - and i would get a few months in the
127:24 - summer work 100 hours a week
127:26 - and then the last of the year i'd have
127:28 - to live off that go back to harvard
127:29 - where i was a junior fellow try to
127:31 - explain to them about you know
127:34 - one could solve the laws of physics that
127:36 - we had been laying down for 300 years
127:39 - and incredible detail for engineering
127:42 - devices like nuclear weapons that
127:44 - put on earth temperatures of the center
127:46 - of the sun
127:48 - stresses beyond anything that we could
127:50 - imagine in academic problems that we're
127:52 - trying to solve in lots of disciplines
127:54 - so this thing could revolutionize
127:56 - academic research well nobody
127:58 - got it it was like i really felt like i
128:00 - was transitioning
128:02 - in a flying saucer between this advanced
128:05 - civilization at livermore and the stone
128:07 - age culture at harvard and harvard was
128:09 - as advanced as any place and thinking
128:11 - about this so it was a
128:14 - what i did not figure this out until it
128:17 - was in the
128:18 - early 80s and
128:19 - by then the first cray had gone into the
128:21 - continent of europe in an open
128:22 - scientific institute the box plonk
128:24 - institute of physics and astrophysics so
128:26 - i'm over there in the summer
128:28 - along with people like dave arnett who
128:29 - is one of the great supernova
128:31 - super computer guys in our country and
128:33 - people in chemistry and it was like
128:35 - paris in the 20s with all these
128:36 - expatriates sitting over there and and
128:38 - we're like trying to figure this out
128:40 - like it's an american-built
128:41 - supercomputer right why are we in munich
128:45 - right i mean this is
128:46 - very strange so um but you know in
128:49 - america we don't question
128:52 - the infrastructure somehow i mean it's
128:54 - just like it's either there or it isn't
128:56 - there or that's just the way it is
128:59 - but i was having a moss of beer late one
129:01 - night
129:03 - actually think it was a second masa beer
129:05 - with my german host who had also been
129:07 - born like i was post-war
129:10 - and he finally turns to me and he says
129:12 - aren't you ashamed of yourself
129:15 - you big rich occupying country you come
129:18 - over here in our little country
129:20 - and and we finally get enough money
129:22 - scraped together after world war ii to
129:23 - buy one of these super computers and you
129:25 - americans come over here and use up our
129:27 - time it says how did you guys ever win
129:30 - the war you know what what is going on
129:32 - here
129:33 - and so this finally sort of
129:35 - just stimulated me to say what is going
129:37 - on here this is nuts and i went back and
129:39 - i found out for instance
129:42 - that after the sputnik program
129:44 - the federal government had funded the
129:46 - universities built the science buildings
129:48 - started the supercomputer centers ibm
129:50 - would go around and give away almost the
129:52 - mainframes and and so the scientists in
129:54 - the 60s took it for granted that they
129:56 - had the fastest computers in the world
129:59 - in academia
130:00 - but about 1970 with the starting the
130:02 - vietnam war and with all kinds of guns
130:04 - and butters issues and everything else
130:06 - that
130:07 - stopped
130:09 - and in fact to give an example by 78
130:12 - half the number of phds and engineers in
130:14 - engineering was being generated in our
130:16 - country as there were in 1970.
130:18 - so there was this complete
130:21 - severing of the sputnik era
130:24 - partnership with the federal government
130:25 - and it was particularly bad in computing
130:27 - to give you an example when i was at
130:29 - livermore in
130:31 - in the 70s there were four cdc 7600s
130:35 - which were just one of the finest
130:36 - supercomputers ever built
130:38 - no american university ever took
130:40 - delivery of a single cdc 7600
130:44 - in fact the university of illinois when
130:45 - i first got here had a cyber 175 which
130:48 - was a retread a second
130:51 - design manufacturing of of this thing
130:55 - and we were one of the first
130:56 - universities that had it and people all
130:57 - thought that you know illinois naturally
130:59 - was way ahead of everybody else so it's
131:01 - like
131:02 - we were just completely divorced from
131:05 - the private sector that was generating
131:06 - these wonderful machines because of
131:08 - federal policy which was to say
131:11 - these things are only are so valuable
131:13 - that we can only afford to put them into
131:15 - war environments
131:19 - so after this german encounter i
131:23 - came back and i said well gee i wonder
131:24 - how many other scientists like me are
131:26 - there
131:27 - so at the university of illinois
131:30 - i started calling cold calling my
131:32 - colleagues and saying
131:34 - hi you don't know me i'm a little
131:35 - assistant professor but i bet you that
131:38 - your research is blocked by lack of
131:40 - access to super computers uh and they'd
131:42 - sort of say like
131:43 - who crack wreck who is this you know
131:46 - grant call
131:47 - and but we'd start talking in chemistry
131:50 - and biology and agriculture
131:52 - and
131:53 - so on and sure enough it turns out that
131:56 - that that was true they knew how to do
131:57 - the science they just didn't have access
132:00 - so i said well send me a little
132:01 - prospectus of what science you could do
132:03 - if you had a supercomputer
132:05 - well i ended up with 65 faculty in 15
132:08 - departments on one campus
132:11 - and i thought this has got to be this
132:12 - way all over the country
132:14 - so
132:15 - it was i really started
132:17 - saying well gee somebody's got to raise
132:19 - this issue and about that time
132:22 - there had been a lacks report that had
132:25 - the federal government had done to begin
132:27 - to undercover some of this stuff but
132:28 - they still weren't i remember peter lax
132:30 - he was one of the greatest
132:30 - mathematicians
132:32 - uh head of one of the top people in the
132:34 - kron institute a long time
132:37 - advocate of
132:38 - things computational
132:40 - and i had this long long
132:44 - battle with peter because in the draft
132:46 - report of the lax report it was not it
132:48 - was going to say well yeah we ought to
132:49 - get one of these super computers and
132:50 - make it available to the universities
132:52 - but you know let's put it livermore put
132:54 - it somewhere that people know how to do
132:55 - this stuff and a university was not on
132:58 - the list
133:00 - of what the lacks report considered to
133:02 - be appropriate sites for a supercomputer
133:04 - so i had this long
133:06 - battle over the telephone i remember
133:08 - with peter lacks
133:09 - sort of david and goliath because i mean
133:11 - he was this giant of the field i'm
133:12 - nobody
133:14 - and um
133:15 - i i finally convinced him not to exclude
133:19 - universities as a possibility even
133:22 - though he felt that it was fairly
133:23 - unlikely that any of them would be able
133:26 - to play with sharp instruments and not
133:28 - hurt themselves
133:30 - so i mean you gotta understand the world
133:32 - was totally different
133:35 - when the supercomputer centers program
133:37 - was coming into being and people it's so
133:39 - hard for people now on the web and
133:41 - everything to go back to that time there
133:42 - was no internet
133:44 - you know there was there was these
133:46 - wonderful people vince cerf and bob khan
133:48 - and all these people bill joy who had
133:50 - developed tcp and and and embodied it in
133:53 - the arpanet this was a few computer
133:56 - science
133:56 - departments and military okay
133:59 - nobody in a physics department or
134:01 - chemistry department ever heard of the
134:02 - arpanet much less had any access to it
134:05 - but it was obviously the right idea
134:08 - and so once we got the
134:11 - congress to put through money for a
134:13 - national supercomputer program then
134:14 - there was a national competition and
134:17 - and and so on and the five centers were
134:18 - selected
134:20 - the first thing then the nsf realized
134:22 - well okay now we put these in place to
134:24 - be providing access to academic
134:26 - scientists and yet uh like they have to
134:29 - fly to champaign-urbana like i had to
134:31 - fly to livermore okay this isn't right
134:35 - so there were a lot of discussions then
134:37 - but the trouble was that the telecom
134:40 - lobbyist in washington
134:42 - would block any discussion of the
134:44 - federal government putting in the kind
134:46 - of network we have today which is what
134:48 - people wanted i mean everybody knew that
134:50 - they wanted to have a ubiquitous email
134:52 - person-to-person network but as soon as
134:54 - they'd start talking about that the
134:56 - telecom lobbyist would come up and say
134:58 - no way guys that's private sector don't
135:00 - get the federal government involved in
135:02 - that stay out of it
135:05 - so what we learned early on is real
135:06 - interesting it's like if we had argued
135:08 - instead of the super computer program
135:10 - let's get the federal government to buy
135:11 - everybody a personal computer
135:14 - which was ibm personal computer was two
135:15 - years old in 1985 and put on people's
135:18 - desk okay again this would be an
135:20 - interference with the private sector
135:24 - um so but we said oh we'll just take a
135:26 - few of these esoteric supercomputers and
135:28 - they said okay that's right there's no
135:29 - market there that's okay the federal
135:31 - government has a role well the same
135:33 - thing with networking what we said is we
135:35 - just want to put a high-speed backbone
135:37 - across the country to connect the five
135:39 - centers
135:40 - and and the telecom people said okay
135:42 - that's cool you know 56 kilobits was the
135:45 - national high-speed backbone less than
135:47 - isdn today
135:49 - yeah that's not a market okay
135:52 - and and we said we got a few of these
135:53 - weird super computer types who are out
135:55 - universities who want to hook into that
135:57 - they say yeah that's okay that's not a
135:58 - market you can do that
136:00 - well
136:01 - that was the nsf net backbone then the
136:04 - regionals got funded and then the
136:05 - campuses were afraid that if they didn't
136:08 - dig up their quad and put in some fiber
136:10 - then the professors who wanted to get
136:13 - access to supercomputers would go to a
136:15 - university that would do that
136:17 - so
136:19 - gradually the whole internet emerged out
136:21 - of
136:23 - the
136:25 - the
136:26 - the sort of policy
136:28 - vice you get into washington
136:30 - where you can't do the right thing
136:32 - you have to do something that seems
136:35 - irrelevant
136:36 - but
136:37 - has a logic to it that will gradually
136:39 - bring the market forces into play
136:42 - that will spin out ultimately a whole
136:44 - industry
136:45 - so i hope you got from that that it
136:46 - wasn't trivial it wasn't like somebody
136:48 - just walked out and said hey make a
136:50 - network i mean
136:52 - there were
136:53 - forces powerful forces the telecom
136:56 - lobbyists that did not want this to
136:57 - happen
136:59 - and we will we will see these telecom
137:01 - lobbyists a couple times
137:03 - as we progress through this lecture
137:05 - so
137:07 - larry smart and the folks that made the
137:09 - supercomputers convince congress to
137:11 - authorize the
137:13 - the
137:14 - giving of a grant to build the national
137:16 - science foundation's network it was
137:18 - going to use the tcp protocol that the
137:20 - arpanet had built
137:22 - it was supposed to be inclusive at least
137:24 - for research
137:25 - academics and it was you know research
137:28 - universities would we want to get them
137:29 - connected
137:31 - and so our story now leads from the
137:33 - university of illinois urbana-champaign
137:35 - to
137:36 - my university the university of michigan
137:38 - now if you take a look at this
137:41 - arpanet picture that was sort of right
137:43 - before well 1972 but if you look at all
137:47 - of the arpanet pictures there is a
137:49 - glaring omission
137:52 - from my perspective declaring a mission
137:54 - on all of these i wonder why aren't we
137:56 - there well there's a very good reason
137:58 - why the university of michigan is not on
138:01 - any of the arpanet pictures and that's
138:03 - because we build our own network
138:05 - we build a network using lease lines a
138:08 - three-node network between michigan
138:10 - state university university of michigan
138:12 - and wayne state university we were
138:14 - sharing each other's compute resources
138:16 - we were using each other's computers
138:18 - interactively we were playing online
138:20 - multi-user games we called them
138:22 - adventure they were all based on text
138:24 - but they were great fun and they were
138:26 - great community building we had chat
138:28 - forums we had all kinds of things and we
138:30 - used each other's software and it was a
138:32 - is a cool little world
138:34 - and the arpanet
138:36 - wasn't seen by many is all that
138:37 - significant it was kind of a experiment
138:39 - right it was a research project and we
138:41 - were a researcher we were production
138:43 - merit was production and arpanet was
138:45 - research so there you go right so there
138:47 - was actually a lot of these sort of like
138:49 - nascent networks out there early days
138:54 - and so the university of michigan sort
138:55 - of never really was significantly
138:57 - involved in the arpanet work but
139:00 - the university of michigan being a large
139:02 - university did want to get a
139:04 - supercomputer center and because of some
139:06 - strategic blunders as doug van hollen
139:09 - will soon explain to you
139:11 - um
139:12 - michigan didn't get a super computer
139:13 - center and so the idea was is we would
139:16 - do what it was going to take to get the
139:18 - network because that might be more fun
139:20 - so doug van hollen at the time was the
139:23 - chief information officer at the
139:24 - university of michigan having recently
139:26 - arrived from carnegie mellon university
139:28 - and he was also the
139:31 - chief of the merit network the network
139:33 - that connected our three schools and so
139:36 - they they figured that once they didn't
139:38 - get a super computer
139:39 - center they better really pull out the
139:41 - stops so to get so that they would get
139:43 - the nsf net
139:45 - and of course they did get the nsf net
139:46 - and doug van hollen was the principal
139:48 - investigator for the nsf net starting in
139:51 - 1988.
139:52 - so let's let doug van gaaling talk to
139:55 - tell you the story and i'll be back in a
139:57 - moment
139:58 - [Music]
140:19 - back in the
140:21 - mid 80s
140:23 - the national science foundation decided
140:26 - to establish super computing centers
140:29 - and the university of michigan was one
140:32 - of the organizations that made a
140:35 - proposal for a national super computing
140:37 - center the michigan proposal had as a as
140:40 - its primary hardware artifact a machine
140:44 - that was built in japan
140:47 - and
140:48 - i explained to my colleagues my new
140:50 - colleagues the university of michigan
140:52 - having just arrived that it was highly
140:54 - unlikely that the proposal would be
140:56 - funded
140:57 - a short while later i was visiting the
140:59 - national science foundation and i had
141:02 - gotten to know not well but had gotten
141:04 - to know eric block who was then director
141:06 - of the national science foundation
141:09 - and
141:10 - eric and i had a conversation about
141:13 - michigan's proposal
141:16 - and um it was clear to me from my
141:19 - conversation with eric that there was no
141:22 - prospect that the michigan proposal
141:24 - would be funded i said to eric i said
141:27 - well it occurs to me that what might be
141:30 - even better for the university of
141:32 - michigan than
141:34 - having a supercomputing center is to run
141:36 - the network that connects all of the
141:38 - supercomputing centers together i had an
141:41 - old friend
141:43 - who worked for ibm research by the name
141:45 - of al weiss
141:47 - who's in charge of all of ibm research's
141:49 - computing facilities and
141:52 - i called al and i said al
141:54 - uh this is a great opportunity but
141:57 - ibm is going to uh is is not going to be
142:01 - successful here and um i need your help
142:04 - and so i also rallied some folks from
142:07 - ibm research where there actually was
142:08 - work going on in tcpi
142:11 - protocols we got tentatively an
142:14 - agreement from ibm that they would
142:15 - contribute the hardware
142:18 - and the software
142:19 - to create the routing
142:21 - structure for the network
142:24 - but we still needed the communications
142:26 - facilities
142:29 - and
142:31 - at that time
142:34 - the cfo at ibm was a gentleman i think i
142:38 - remember the name correctly by his last
142:40 - name was crow
142:42 - and
142:44 - um
142:46 - so through ibm we went to him and he had
142:49 - contacts with a former ibm employee
142:52 - who is now the
142:56 - network that
142:58 - chief technical officer and essentially
143:00 - the chief network operations
143:02 - officer for mci his name was dick lee
143:05 - paper
143:07 - and
143:08 - so ibm
143:10 - approached dick lee paper and asked him
143:12 - if mci would be interested in providing
143:15 - the communications facilities for this
143:17 - network well
143:19 - as you may recall
143:21 - at that time mci was this fledgling
143:23 - organization some people had described
143:25 - it really as as a as a law office
143:29 - trying to create
143:31 - an environment where they could actually
143:32 - offer telecommunications services up
143:34 - against att's lobbying efforts and they
143:37 - were they had just been successful in
143:38 - that they were establishing
143:40 - uh
143:41 - facilities across the united states and
143:44 - uh and dick lebhaver saw this as an
143:48 - opportunity to sort of move
143:50 - mci into the big time um
143:53 - to be part of this nsf net proposal and
143:56 - so we wound up with an agreement
144:00 - that we would file a joint proposal
144:03 - with merit as the principal organization
144:07 - in partnership with ibm who would build
144:10 - all the routing
144:12 - hardware and software and with mci who
144:15 - would provide the nationwide
144:16 - communications facilities
144:18 - and while we were and
144:21 - then we got
144:23 - governor blanchard to commit a million
144:25 - dollars a year from state funds in
144:28 - addition
144:29 - so we wound up being able to submit a
144:32 - proposal to the national science
144:33 - foundation i think for something like
144:35 - 14.7 million dollars because we knew the
144:38 - ceiling was 15
144:40 - but in fact by including all this
144:42 - in-kind uh activity it was actually more
144:46 - like a
144:47 - 55 million dollar
144:49 - proposal it was designed to start at t1
144:54 - or 1.5 megabits
144:56 - uh with planned upgrades over the over
144:58 - the period of the network
145:01 - network's life
145:03 - um
145:05 - we've subsequently learned that uh the
145:08 - proposal was received with considerable
145:10 - skepticism by the reviewers of the
145:12 - national science foundation
145:14 - uh people really wondered about our
145:17 - technical ability to pull this off but
145:20 - uh the that review
145:22 - was conducted without
145:25 - reference to the actual funding pattern
145:28 - and then when the raps got pulled off of
145:31 - the
145:32 - amount of resource that was being
145:34 - committed by the partners to this
145:36 - proposal it immediately went to the top
145:38 - of the list
145:39 - at the nsf and
145:41 - and a short period later we received uh
145:45 - informal word that they wanted to
145:46 - negotiate with us about sort of working
145:49 - this all out but we had to do a lot of
145:51 - innovation uh the border gateway
145:53 - protocols had to be developed to allow
145:56 - multiple networks to interact with one
145:58 - another
146:00 - and we had to build increasingly more
146:04 - capable routing and communications
146:07 - facilities
146:08 - when we started
146:10 - the network
146:13 - we had t1 circuits
146:17 - but there were no
146:19 - cards for computers that would go at one
146:22 - and a half megabits
146:24 - we used the t1 circuits we subdivided
146:27 - and built a mesh network among all of
146:29 - the routers that we put in place
146:33 - it wasn't for about a year ibm was
146:36 - actually to build prototype cards that
146:38 - would go at one and a half
146:40 - uh megabits
146:42 - when we put those when we put those
146:44 - cards in our test network
146:46 - we discovered
146:47 - they they worked just fine we put them
146:49 - in the production network the network
146:51 - started failing on us and we discovered
146:54 - after
146:55 - uh
146:56 - after a very tough period
146:59 - that
147:00 - the folks who had built the t1 hardware
147:04 - for mci
147:06 - had planned on using certain bit
147:09 - patterns to do diagnosis on the network
147:11 - and it never anticipated the notion that
147:13 - anybody would ever use a full and a half
147:15 - megabits as a single channel they had
147:17 - always thought that it would be broken
147:19 - up into a set of voice uh circuits at 64
147:22 - kilobits each and so they didn't have
147:24 - any worry about these patterns ever
147:26 - appearing on their network well it
147:27 - turned out that that happened
147:29 - with some frequency
147:31 - uh on
147:33 - the nsf net and it took the
147:35 - communications line down when it did so
147:37 - they had to re-engineer
147:40 - their hardware
147:42 - to
147:43 - undertake this we actually had for a
147:45 - short period of time put some
147:46 - translation circuits in our routers that
147:48 - actually looked for these bit patterns
147:51 - took them out and replaced them with
147:52 - something else uh and then reinsert them
147:55 - at the other end uh to make it work over
147:57 - these t1 circuits so we had a lot of
148:00 - adventure
148:03 - finally
148:05 - in
148:07 - i think it was around 1990
148:12 - network was growing so fast that it was
148:14 - clear that these t1 circuits were not
148:16 - going to
148:18 - we're not going to enable what we needed
148:20 - to do
148:21 - so we had to go to the next step which
148:23 - was
148:24 - ds3 or from one and a half megabits to
148:27 - 45 megabits which was a very large step
148:30 - a 30-fold increase in capacity
148:33 - and in order to do that um we
148:37 - wound up creating another
148:38 - not-for-profit organization called
148:40 - advanced network and services
148:42 - merit was still the principal
148:44 - investigator on the grant but it
148:46 - subcontracted
148:48 - the development of
148:50 - this new network this 45 megabit network
148:54 - to advanced network and services which
148:56 - was headquartered in armonk
149:00 - and uh
149:01 - and
149:02 - ibm
149:05 - mci
149:06 - and uh nortel who
149:09 - uh all contributed
149:12 - three million dollars to the founding of
149:15 - this new uh organization so it had the
149:19 - uh the staff and the facilities to do
149:23 - the innovation that required us to go
149:26 - up to
149:27 - 45 megabits
149:29 - that did accommodate
149:32 - our capacity needs
149:34 - over the life of the nsf net
149:37 - the nsf net was the fastest internet
149:43 - network
149:45 - to the end
149:47 - it finally
149:48 - was decommissioned
149:51 - in
149:53 - 1995
149:57 - when the congress decided that the
149:59 - federal government should not be in the
150:02 - business of supporting something that by
150:05 - that time
150:06 - in their view
150:07 - should have been
150:09 - become a commercial facility
150:12 - i'll not ever forget
150:15 - sitting in
150:18 - a house hearing room in the capitol
150:23 - and
150:26 - next to mitch kapoor
150:29 - and um
150:32 - some internet
150:36 - uh
150:36 - some small internet company uh startup
150:39 - ceos who were complaining
150:41 - uh to the
150:44 - congress
150:45 - that it was inappropriate for
150:48 - the nsf net to be funded by
150:52 - by the national science foundation when
150:54 - they could provide this service
150:57 - as a commercial service
150:59 - at the very same time they were making
151:01 - that complaint they were using nsfnet
151:04 - as
151:06 - their
151:07 - backup network
151:09 - to carry traffic
151:11 - when their much less reliable networks
151:13 - failed on a national scale mci of course
151:17 - turned out to be a major internet
151:18 - service provider also using the same
151:20 - technology
151:24 - in a
151:26 - in a classic um
151:28 - innovators curse moment
151:31 - ibm who was at that time the leader in
151:34 - routing technology for
151:36 - uh internet
151:38 - for
151:39 - internet backbones
151:42 - managed to decide
151:44 - that they should kill
151:47 - all of the work they had done in
151:48 - developing these routers because it
151:51 - would threaten their proprietary network
151:54 - efforts
151:55 - it's probably almost single-handedly
151:57 - responsible for the fact that cisco
151:58 - became the dominant router
152:01 - company in the united states rather than
152:03 - ibm
152:04 - [Music]
152:15 - so
152:18 - [Music]
152:24 - so
152:26 - as you can see none of this is easy
152:29 - it wasn't easy for larry smart
152:31 - and now we basically have the lobbyist
152:33 - once again the lobbyists are deciding
152:35 - that there's only going to be 15 million
152:37 - dollars because if it's 15 million
152:39 - dollars they can only build a 56 kilobit
152:41 - line
152:42 - but michigan thought outside the box
152:44 - some people might say we cheated
152:46 - other universities wanted to get the
152:47 - grant kind of thought we did cheat we
152:49 - didn't play by the rules like in star
152:52 - trek we rewrote the rules so we got it
152:55 - and we slid underneath the nose of a t a
152:58 - one and a half megabit network that
153:01 - started started large and started fast
153:03 - and got faster and as doug talked it was
153:06 - a very very very successful network and
153:09 - it it didn't it had follow-on effects
153:11 - just like larry talked about it had
153:13 - these follow-on effects of causing
153:14 - campuses to build networking because in
153:17 - would come this really fast national
153:19 - network so you better fix the on-campus
153:21 - networking so it was really quite
153:23 - wonderful and the partners ibm mci the
153:26 - other thing is is a t was being beat up
153:28 - by mci at the time and maybe they
153:30 - weren't noticing so we might have been
153:33 - lucky it could easily have been two
153:34 - years earlier or two years later it
153:37 - might not have worked so
153:39 - whatever it did work and and we can be
153:41 - very grateful
153:43 - so the university of michigan
153:45 - was sort of the
153:47 - center of they ran the network operating
153:49 - asian center and did the network design
153:51 - worked on the software with ibm and
153:53 - built the network and um it
153:56 - had a very exponential growth as it went
153:58 - forward
153:59 - this building right here is on our north
154:00 - campus and it was for me personally the
154:04 - very first place that i typed the first
154:06 - characters that went across the internet
154:08 - i walked in this door to i wasn't at the
154:10 - university at that time
154:12 - but i had friends here and so i came in
154:14 - and i was typing on you know hello on
154:17 - the internet so this building was where
154:18 - the network operation center was
154:20 - and um where i touched the internet for
154:23 - the the nsf net for the first time so it
154:26 - started out real simple
154:28 - but its goal its goal was
154:31 - to enable connections to other networks
154:33 - the regional networks got formed larry
154:35 - smart mentioned that and so then the
154:38 - backbone became sort of a forcing
154:39 - function to get more campuses on and
154:42 - more and more states etc etc
154:46 - [Music]
155:18 - do
155:21 - [Music]
155:27 - in the case of ghana
155:29 - private sector led
155:32 - government was not aware government was
155:34 - not interested
155:36 - and so the private sector took it out
155:39 - but the private sector we're discussing
155:41 - is me
155:43 - i'm not exactly private sector i'm
155:45 - academic
155:46 - only i did this job through the private
155:48 - sector
155:50 - meaning that i realized that
155:52 - you can wait for the university forever
155:54 - because they depend on government and
155:56 - you can wait for the government forever
155:58 - they have no clue
156:00 - so i actually have been known to have
156:02 - said publicly
156:03 - that
156:04 - i cannot wait for the government to do
156:06 - it for the country
156:08 - so i know how to do it i would do it no
156:11 - matter how small it is just to make the
156:13 - point that we are able to do it in so
156:15 - doing maybe i can create an avalanche
156:18 - that will carry through the momentum and
156:20 - that is what i try to do in the case of
156:22 - them
156:23 - now on the continent as a whole they
156:25 - have variety
156:27 - like
156:28 - in the case of egypt
156:30 - where
156:31 - the minister there happens to be one of
156:33 - our counterparts from internet society
156:35 - isak
156:36 - and that's tara camel
156:38 - and so there was a heavy government
156:40 - success
156:42 - built
156:43 - in other places
156:45 - like south africa there was good
156:47 - academic dose
156:49 - so it has varied depending on on the
156:52 - settlements but i think in much of west
156:54 - africa the trust
156:56 - had been principally from private sector
156:58 - because i also went around helping togo
157:00 - private sector helping gambia private
157:03 - sector and so even nigeria giving them
157:05 - intellectual property so they could also
157:07 - begin to do it so it became privacy
157:09 - helping private sector but for the
157:11 - common good because we really felt that
157:13 - we had to go together otherwise things
157:15 - would just
157:16 - disappear i allow some countries to
157:19 - transit their data through me
157:21 - and togo was an example
157:23 - but in other places i actually sent
157:26 - engineers to install
157:28 - notes for them and gambia was an example
157:30 - in other cases i actually trained people
157:33 - like swaziland they brought
157:35 - the telco people to me to be trained
157:39 - in other cases we did consulting
157:41 - services to help ethiopia and so on and
157:44 - so forth so that was roughly the
157:46 - progression in that the names had to
157:49 - confess but i was meaningful and we had
157:51 - to move mail and so we had to do that
157:53 - and then the next bit was get the
157:55 - capacities connected
157:57 - and download was a madras but it was a
157:59 - good community activity in the sense
158:01 - that we wanted to help each other and
158:03 - that has continued till now because now
158:06 - i actually run the african network
158:07 - operators group and the principal
158:09 - function of this group
158:12 - is to
158:13 - sort of help operators support
158:15 - themselves
158:16 - and usually we support ourselves with
158:18 - building our capacity in many different
158:21 - areas mostly in
158:23 - infrastructure related things like
158:26 - routing type of issues or server
158:29 - services type of issues for those who
158:31 - want to build information resources
158:33 - um the afnog has now become the meeting
158:36 - place for most of the technical
158:38 - community and we meet only once a year
158:40 - and when we meet his life for a product
158:41 - of two weeks within which we spend one
158:43 - week to train whoever has been admitted
158:46 - into the into the workshops and we run
158:48 - four workshops in parallel now it didn't
158:51 - start as four it started as just two and
158:54 - then we've added as we went along we
158:56 - even have a french track in the in the
158:58 - routing side of things
159:00 - um
159:02 - and when we meet after the workshops for
159:04 - the students then we try to sort of
159:06 - induct the students into what the real
159:09 - world is so we follow the workshop with
159:12 - meetings and the meetings including lots
159:14 - of parallel sessions
159:16 - those who are following the affiliate
159:18 - meetings will get to do that those who
159:21 - may be discussing some tutorials maybe
159:23 - in security
159:25 - we'll also get to do that and then we
159:27 - also have a day for like conference
159:29 - presentations or 20 30 minutes from a
159:31 - variety of different areas and so that
159:34 - has now become a major meeting place for
159:36 - the engineers and
159:38 - once a year we all congregate and it's
159:40 - supposed to be service to community type
159:42 - of thing
159:43 - in that nobody gets paid but we try to
159:46 - raise money for the student participants
159:48 - to come and we've been getting funding
159:51 - cisco has been a regular funding source
159:53 - and we've got funding from idrc internet
159:56 - society
159:57 - francophone and a whole number of others
160:00 - but over time we're trying to change our
160:02 - programs so that we become more
160:04 - self-sustaining
160:06 - so participants who are coming in from
160:10 - let's say operators telcos and so on we
160:13 - insist that they pay more of their way
160:16 - so that we can raise funding for
160:17 - academic and research people to
160:19 - participate and so on and that was
160:21 - really how how things are and it still
160:23 - continues to be a major meeting point
160:26 - for for many of our operators of course
160:28 - once we've got the connectivity in
160:31 - then there's a whole host of other
160:32 - issues that began to show up
160:35 - but we thought all of them can be solved
160:37 - within the same environment so you have
160:40 - necessity issues oh you have aftld
160:44 - let afj focus that
160:47 - you have a research and educational
160:49 - network challenge or build a consensus
160:52 - around the same meeting place so to
160:54 - understand afnoc has moved from being
160:56 - a workshop type of thing to a meeting
160:59 - place where many new things could be
161:02 - incubated and allowed to blossom and
161:04 - take on their own life
161:07 - [Music]
161:27 - now the particular case about the
161:30 - was interesting in that we it took us 10
161:33 - years to get to accreditation
161:35 - of course in the beginning we actually
161:36 - knew what it was
161:38 - we knew was very important and for
161:40 - engineers we knew that that was what to
161:43 - focus on
161:44 - none of the other things
161:46 - so we began to build consensus around it
161:48 - you know a proposal was made first in 95
161:51 - then 97 a formal document
161:54 - and then
161:55 - we moved on but we realized that we had
161:57 - to build something more than just casual
162:00 - meetings so we went deliberately to
162:02 - tottenham to agree on specifics and the
162:05 - specifics was
162:07 - who becomes a member of the board
162:09 - and we decided to do it geographically
162:12 - okay so that we don't get too much
162:14 - caught into why is that there are so
162:15 - many people from the north and nobody
162:17 - from the south so okay each one of the
162:19 - sub regions gets to elect one person so
162:22 - if the members who elect that person and
162:25 - that person would save for a period of
162:27 - one to three years depending on the
162:28 - staggering and that is how that one was
162:31 - okay but the the difficult thing with
162:33 - that was
162:35 - as we're learning that meant more and
162:37 - more were coming
162:38 - so when whenever we thought we had an
162:40 - agreement on something we're about to
162:42 - move forward like in operation then more
162:44 - people come one case was very disturbing
162:47 - and then that's uh sort of a moment
162:50 - and that one john kuster was also there
162:52 - this was very early and he had agreed
162:54 - that me just do it you have to do it has
162:57 - to happen
162:58 - so
162:59 - i invited them all to a meeting with the
163:01 - african engineers and everything
163:03 - and suddenly somebody got up and said no
163:06 - no no why don't we share it up into the
163:08 - countries and have this all go our
163:10 - separate ways
163:11 - and i mean at that point i thought that
163:13 - was the end of the world
163:15 - and to be honest with you i've never
163:17 - felt so ashamed
163:19 - because
163:20 - i was a bit of an interface between the
163:22 - african technical community and the
163:24 - global community i knew young poster
163:26 - myself personally and they've come to
163:29 - sort of help me
163:31 - and my people were not ready
163:34 - so all john could say to me was
163:36 - get your people ready
163:39 - and you will have it
163:40 - so i had to continue
163:42 - until i was able to
163:44 - build sufficient consensus and in 205
163:47 - began
163:48 - and at that point was also evident that
163:51 - if he has taken so long there are maybe
163:54 - two factors i have to consider
163:56 - in 10 years i would have upset a lot of
163:58 - people
164:00 - and
164:01 - this could be real in the sense that the
164:03 - regis three registries had to give up
164:05 - something for affiliate to exist
164:08 - so it's inevitable that i would have
164:10 - made a number of people in those three
164:12 - registries uncomfortable
164:14 - so for me it was obvious i
164:17 - could not continue in the same capacity
164:19 - of course i didn't tell my colleagues
164:21 - that this was my real feeling
164:23 - but it was also true that
164:26 - if i were to stay there i'll get less
164:30 - participation i'll have less motivation
164:32 - for people to you know make an effort
164:35 - and what i needed more was more people
164:37 - making effort
164:39 - than just one person driving things
164:42 - because i knew that the space was so
164:43 - large that even if i had nothing to do
164:46 - with these things there was plenty for
164:47 - me to do
164:49 - so
164:50 - the strategic thinking was
164:53 - find a way to exit
164:55 - without telling anybody make sure
164:57 - you don't give up too much information
164:59 - for people to capitalize and game on it
165:02 - so everybody thought i was indeed going
165:04 - to be the next official chair
165:07 - not the you know startup chair but
165:10 - official chair and i let them think so
165:13 - but when it came to the board meeting i
165:16 - decided to dissolve the board and i got
165:18 - vote for it
165:20 - and then i decided i would not run again
165:22 - and at the same time certain people have
165:24 - been
165:25 - you might say
165:27 - controversial in their contribution
165:29 - i try to urge them not to and in some
165:32 - cases i even told them that if you tried
165:35 - i would martial the community to vote
165:37 - you out and in some cases they tried and
165:40 - they were voted out
165:42 - but that created a certain flow of uh
165:45 - maybe new entrants wanted to contribute
165:47 - service to the community
165:49 - and that has continued till now and and
165:52 - i think that
165:53 - that has been a very good thing and of
165:56 - course we also observe in the case of
165:58 - afrin that the ability to make local
166:01 - policy
166:02 - uh does
166:04 - affect the effectiveness of you know
166:06 - the task at hand
166:08 - so for example we know that
166:10 - uh
166:12 - soon after accreditation
166:13 - the
166:15 - type of membership we had
166:17 - begin to skew more towards the smaller
166:19 - size because majority of the operators
166:21 - were actually small operators and they
166:24 - were trying to fit into a large markets
166:26 - a large operator community environment
166:28 - when we were working with right and
166:30 - arranging and so on and that wasn't
166:32 - working so well so by us changing the
166:35 - policy to recognize the size the two
166:38 - sides of our operators were able to
166:40 - increase the membership
166:42 - and beyond that we realized that our
166:44 - location also we changed the policy so
166:46 - that our location sizes were smaller
166:49 - than the normal that a person a typical
166:52 - operator will get so by knowing the
166:54 - community and making the policies the
166:56 - community making the policy to suit
166:59 - itself you're able to get a better match
167:02 - to the needs of the community and and
167:04 - that has shown in the growth and uptake
167:07 - of at least ipv4
167:09 - addresses
167:10 - from affirmative
167:12 - [Music]
167:38 - now one of the things that was quite
167:39 - interesting is we in the academic field
167:41 - had the right to use this network but
167:43 - when it first started out it was
167:44 - supposed to be academic only
167:46 - and then once it was established in the
167:48 - late 80s and early 90s
167:51 - there were some people that started sort
167:52 - of like bending those rules or bypassing
167:55 - those rules or ignoring those rules and
167:56 - it wasn't really clear who was supposed
167:58 - to police those rules and the people
168:00 - like at the university of michigan they
168:02 - their heart wasn't in
168:04 - reducing who would use the internet they
168:06 - wanted to expand right and so there were
168:08 - places um often bulletin board systems
168:11 - uh would somehow get a connection to the
168:13 - internet and then they would give
168:15 - internet access to a bunch of
168:16 - non-academics and so it became
168:19 - increasingly in the late eighties
168:22 - understood by everyone around the world
168:25 - but this is pretty much nerds right they
168:27 - can sit with a screen
168:29 - with a command line interface with the
168:31 - text based screen and they can get
168:33 - excited about that i'm i'm like that i
168:35 - can get excited about things that are
168:37 - non-graphical because i just make it up
168:39 - in my head
168:40 - but we needed something to pop this into
168:44 - the collective consciousness of all
168:46 - humanity rather than just
168:48 - academics first and then nerds
168:51 - second
168:52 - but
168:53 - that was about to change so i started
168:55 - our picture where we had super computers
168:56 - at university illinois
168:58 - we went to university of michigan we got
169:00 - the nsf net funded and now we're going
169:02 - to fly across the ocean to cern
169:05 - cern of course is a high energy physics
169:06 - laboratory
169:09 - they do this 26 mile circle and smash
169:12 - particles and take pictures of the
169:14 - smashing particles and looking for the
169:16 - higgs boson or found the higgs boson
169:19 - um
169:20 - it's a really cool place i recommend
169:22 - that you visit the
169:24 - cern is a place that physicists from all
169:26 - over the world
169:27 - visit
169:28 - live at
169:30 - and collaborate with
169:31 - for experimental physics it really
169:33 - revolves around those experimental
169:35 - facilities and so regardless of whether
169:37 - you live in russia or australia or
169:39 - germany or america or japan if you're an
169:42 - energy nuclear physicist you have got to
169:44 - work with cern or spend time at cern and
169:47 - those who spend time at cern tend to
169:49 - make the best discoveries
169:51 - and so these projects have such long
169:53 - lead times and they take so many
169:55 - different kinds of talented people you
169:57 - know they're metallurgy welders
169:59 - physicists engineers
170:01 - designers project managers there's a ton
170:03 - of people involved in it and it's a
170:05 - pretty well funded operation and
170:06 - everyone's pretty smart so one of the
170:08 - things that they do
170:09 - is they have fun they have these clubs
170:11 - like the softball club the cricket club
170:14 - the blues club and and it's kind of like
170:17 - these people are somewhat away from home
170:18 - a lot and so they just have fun with
170:21 - each other
170:22 - this is a picture that i will show you
170:23 - of the cernettes they are famous for
170:25 - being the first band photo on the web
170:27 - some people wonder if they're the very
170:29 - first photo on the web but they
170:32 - uh are a doo-wop group and they sing
170:35 - sort of 50 style doo-wop songs they are
170:37 - very fun to watch
170:39 - but their songs are about like
170:41 - particles and
170:43 - internet and modems and stuff like that
170:45 - stuff that i care a lot about um they
170:48 - sadly they've been they've been doing
170:49 - this since the 1990s um you know 1991 92
170:54 - kind of time frame um and they all grew
170:56 - up and their kids grew up and their kids
170:57 - were all in college and so they they did
170:59 - their farewell tour in 2011 and i and
171:02 - one of them's moved to australia so we
171:04 - don't know if the cernettes are ever
171:06 - going to get back together and sing but
171:08 - for now they're on permanent hiatus but
171:11 - for your viewing pleasure take a quick
171:13 - look at one or more of the cernette
171:15 - songs
171:17 - [Music]
171:38 - so like i said you should go visit cern
171:41 - i have had the great fortune to visit
171:43 - cern i have visited cern with an on
171:46 - professional uh in a professional role i
171:49 - help them record lectures with my
171:50 - synchromatic software that you may have
171:52 - heard me talk about um
171:54 - i
171:56 - i have visited sort of in helping other
171:59 - technology things and i
172:01 - uh teaching and learning with technology
172:02 - and things like that and so they've got
172:04 - a a wonderful cafe
172:07 - and if you're working with people you
172:08 - get to go in the back and hang out
172:10 - that's pretty cool they also have a
172:13 - wonderful museum that you can go see the
172:15 - first web server and all kinds of other
172:17 - cool stuff and uh in 2006
172:21 - 06 i was lucky enough to have an invited
172:24 - talk at cern where i talked about sakai
172:26 - and how they might use sakai to do
172:28 - collaborative work and
172:30 - i brought my family with me and so my
172:32 - wife theresa and my daughter mandy and
172:35 - my son brent and there is me
172:37 - we are in the pit and this pit is like
172:40 - like eight or nine stories underground
172:43 - it is six stories tall
172:45 - this is where the beam comes in right
172:47 - here it's three stories from the bottom
172:49 - of the pit the pit is six stories tall
172:52 - at this point the it was only less than
172:54 - one-third complete and so we could go on
172:56 - a tour and so i have a family photo with
173:00 - hard hats in the cern pit and uh that's
173:04 - pretty cool another time i visited um i
173:06 - went and sang with one of our university
173:08 - michigan physicists and that would be
173:10 - this guy right here his name is stephen
173:12 - goldfarb and he's a physicist that works
173:14 - on the atlas project um but
173:18 - he also is the bandleader of an all
173:20 - physicist band called the cernettes of
173:22 - the canettes blues band and
173:25 - he let me sing a song
173:27 - i i was coming to do some video work for
173:30 - him i happened to be in the area and i
173:32 - just stopped by on one of my trips and
173:35 - me and another michigan staffer we
173:37 - grabbed a couple of cameras we made some
173:39 - music videos for him and put the
173:40 - cernette some of the cernette's music
173:42 - videos up on the web and then they let
173:44 - me sing one song called i got got my
173:47 - mojo working and so i've got i'll share
173:49 - with you the video i've got my mojo
173:51 - working this just oh so everybody in
173:54 - this band is a physicist
173:56 - and pretty much everybody dancing is a
173:57 - physicist too now the reason i'm showing
173:59 - you all this is to give you a sense of
174:02 - the energy and joy
174:04 - in addition to the hard work that goes
174:06 - on at cern
174:09 - you guys are all going to be on youtube
174:11 - soon
174:14 - this guy's got more channel than that
174:15 - though he tells me he doesn't just do
174:17 - the gym
174:18 - i'm going to get him up here if you guys
174:19 - help me you make him come up here
174:24 - southern michigan
174:26 - bluesman's mom
174:31 - you can do the mojo
174:37 - let's go
174:41 - [Music]
174:53 - so
174:56 - [Music]
175:04 - oh
175:06 - [Music]
175:28 - i
175:33 - [Music]
175:43 - oh
175:48 - [Music]
175:55 - [Music]
175:59 - i
176:02 - wanna do
176:08 - [Music]
176:14 - so
176:20 - [Music]
176:30 - oh
176:31 - [Music]
176:43 - i wanna love you so much
176:45 - [Music]
177:00 - just
177:02 - [Music]
177:08 - good
177:09 - [Music]
177:34 - oh
177:35 - [Music]
177:44 - [Applause]
177:50 - [Music]
177:59 - my
178:06 - [Music]
178:28 - [Music]
178:47 - he's got that knowledge
178:55 - [Music]
179:06 - oh
179:07 - [Applause]
179:12 - [Music]
179:19 - [Music]
179:22 - [Applause]
179:24 - [Music]
179:25 - [Applause]
179:27 - [Music]
179:27 - [Applause]
179:35 - okay
179:40 - [Music]
179:41 - [Applause]
179:45 - so i don't know if you noticed halfway
179:46 - through i i knew that song by heart but
179:49 - i had still written the lyrics on my
179:50 - hand and so halfway through i you can
179:52 - see me look at my hand to check the
179:54 - lyrics that i knew made me look like a
179:56 - dork i'm not i really want to sing i'm
179:58 - just not a very good singer
180:00 - and thankfully steve let me sing with
180:02 - the band
180:03 - so back to the topic at hand
180:05 - in 1999
180:08 - i visited cern uh as one of my first
180:11 - tasks at the university of michigan to
180:13 - help them with lecture recording and uh
180:16 - i said hey i got a camera you know is
180:19 - are the inventors of the world wide web
180:20 - here and we still had a little bit of
180:21 - the television show going back then so i
180:23 - went and interviewed uh robert caillou
180:25 - who was still at cern he was just sort
180:27 - of across the street from the cafeteria
180:29 - and we uh walked into his office and
180:31 - gave him a microphone and just started
180:34 - talking about the beginnings of the
180:35 - world wide web and robert caillou is the
180:38 - co-inventor of the world wide web along
180:40 - with tim berners-lee who who built it at
180:42 - cern so let's take a listen to robert
180:45 - caillou
180:47 - [Music]
181:17 - hi charles severance here i'm at cern in
181:20 - geneva switzerland one of the world's
181:22 - preeminent high energy physics
181:23 - facilities
181:24 - we were lucky enough to talk to robert
181:26 - caillou one of the co-founders of the
181:28 - world wide web
181:30 - the big collaborations at cern and
181:32 - steven uh is a member of one of them uh
181:36 - had people spread all over the world and
181:39 - use cern as the infrastructure to do the
181:40 - experiments and so um
181:43 - obviously the the whole of high energy
181:45 - physics has been the sort of miniature
181:47 - information society
181:48 - since way back when
181:51 - as soon as there were networks
181:52 - essentially and so
181:54 - because we have this need for
181:57 - spreading documentation around
181:59 - we built these things like centralized
182:01 - databases there was certain dock you
182:02 - know you could use it but whatever
182:05 - and we had a lot well we still have a
182:08 - large database of
182:10 - energy physics articles uh kept by
182:13 - stanford
182:14 - and you could get at it before the web
182:16 - by knowing exactly what computer to log
182:18 - into over the network blah blah blah
182:20 - blah when when the web came all that
182:23 - necessity of knowing which computer to
182:26 - go to
182:27 - what to say to that computer and so
182:28 - forth just disappeared you know you
182:30 - people put up these pages with the links
182:32 - and you could just follow links and get
182:34 - to places where you wanted to be and
182:36 - find everything
182:37 - and it was also all in the same format
182:39 - so that was very important too that you
182:41 - know we broke this
182:42 - proprietary commercial system of
182:44 - vertical markets which you know
182:47 - don't let you get at anything except if
182:49 - you stay with this particular company or
182:51 - with that particular company so that
182:53 - that horizontal split that cut that we
182:55 - made between the browsers on top and the
182:59 - databases at the bottom was i think
183:01 - essential uh
183:02 - to make it useful for us but also to
183:04 - make it useful for everybody else right
183:07 - and so
183:08 - that was that was what it was like in
183:10 - the beginning and tim
183:12 - and i we did this all on this
183:15 - next machine here
183:16 - uh
183:17 - in about 1990 so the first server was up
183:21 - about 1990 the first
183:23 - uh end of 1990 the first uh
183:27 - server in the united states came up
183:29 - about a year later uh
183:31 - at stanford because of that database
183:33 - that i was talking about before you and
183:35 - tim feel like this was the big one or it
183:37 - was just
183:40 - well
183:42 - in a sense of course
183:43 - as i always say we called it world wide
183:45 - web in 1990 and and tim had in fact a
183:48 - name like that just before that
183:50 - so
183:51 - there was in fact no way of building it
183:53 - smaller than the internet already was
183:55 - and the internet was everywhere so there
183:57 - was no way we could build it smaller but
184:00 - the thing that we probably did not
184:02 - expect or did not aim for definitely in
184:06 - the beginning
184:07 - at least
184:08 - was to have this be
184:11 - useful outside the community of
184:13 - academics and internet people that
184:15 - existed then see the internet came
184:18 - outside the academic world
184:20 - only
184:21 - what
184:22 - after
184:23 - i would say also after 94 right
184:26 - roughly what i think at the beginning of
184:28 - the
184:29 - yeah
184:30 - 94 is what i call the the the year of
184:32 - the web it's when we had the first
184:33 - conferences where when you know mosaic
184:36 - got off the ground really and and when
184:38 - commerce
184:39 - started to notice it and companies began
184:41 - to be formed and so forth exclusively
184:44 - with that in mind and that was only then
184:47 - before that it was mainly universities
184:49 - and academics gopher was simpler
184:52 - and easier to install and easy to
184:55 - populate
184:56 - and that explained its
184:58 - easier success for a while because both
185:01 - took off at about the same time
185:04 - and because the web was somewhat more
185:06 - difficult it took somewhat longer but
185:08 - gopher became also integrated in the web
185:10 - browsers almost instantaneously and so
185:13 - you know after that
185:15 - after after short while you saw what you
185:17 - could do with together what you could do
185:18 - with gopher you went for the web but it
185:20 - was easy much easier to install gopher
185:23 - this is a very which is why it had a
185:25 - sort of
185:27 - bump where it it
185:29 - went ahead of the web for a while
185:33 - the same is true of mosaic mosaic was
185:35 - just
185:36 - no good but easier to install
185:38 - right and so it went ahead of what we
185:41 - were trying to do we were completely
185:43 - killed in the browser environment
185:45 - because what we tried to do with our
185:47 - browsers was more difficult
185:50 - than what mosaic was trying to do and so
185:53 - you know
185:54 - this proves that a better thing
185:56 - sometimes
185:57 - gets killed or takes much much longer to
186:00 - come up because
186:02 - the easier thing so like a virus
186:06 - outgrows the other one i think the the
186:09 - real problem was that
186:12 - this
186:13 - development system is so much better
186:15 - than anything else that porting what we
186:18 - had here to any other platform took an
186:21 - order of magnitude more time
186:23 - and
186:24 - the
186:25 - for example every time you clicked here
186:28 - you had another window right every time
186:30 - you clicked on a diagram you had a
186:32 - diagram in another window when you
186:34 - clicked on the map you got the map in
186:36 - postscript scalable perfectly printable
186:39 - and so on and so forth and try to port
186:40 - that to another system
186:42 - you go berserk and this is the reason
186:43 - why in mosaic you had only one window
186:46 - and every time you clicked you replaced
186:47 - the content of that one window which was
186:49 - not what we wanted every time you see a
186:51 - page you've got the images in line so
186:52 - you scroll there are gone and so this is
186:54 - all not what we wanted is horribly
186:56 - complicated for the user and and it's
186:58 - not efficient but you know it was the
187:00 - easiest way to do it on the next system
187:03 - and so
187:04 - you know there you go so that thing
187:06 - spreads and
187:08 - and if you want to make you know there
187:09 - is a big difference between making an
187:11 - editor and something that just puts up a
187:14 - page and you can't do anything with that
187:15 - so um
187:17 - our system from 1990 was
187:20 - also the editor i mean i started it's
187:22 - only after next stop making hardware and
187:26 - i had to go back from a next to a
187:29 - macintosh
187:31 - that i had to learn html right i mean
187:33 - before we produced all the documentation
187:36 - and stuff but we never saw any we never
187:38 - in html we never saw any urls
187:41 - right because
187:43 - you linked
187:44 - by saying link this to that not by
187:47 - typing in the url there was a special
187:49 - window you could
187:50 - call up in which you could type a url if
187:53 - you needed to but it wasn't the usual
187:55 - thing i mean this navigation now which
187:57 - says http
187:58 - you know i learned all that
188:00 - the hard way afterwards that you have to
188:02 - use that because you've lost that system
188:04 - right the interesting thing though is
188:06 - that i
188:07 - see i find html a glorious language no
188:10 - i'm not i'm not the average user
188:12 - but i like to write it i mean i enjoy
188:14 - almost word processing it's like tech
188:16 - it's like yeah right right it's exactly
188:19 - as bad as tech that's exactly what it is
188:20 - it's exactly as bad as thing and can you
188:23 - imagine i mean the headings
188:25 - have levels which are absolute
188:27 - true
188:27 - you need a plus what um i mean come on
188:31 - html was we just didn't have must
188:33 - realize that we were never more than
188:34 - four people here tim and myself and a
188:36 - student each okay so things like uh
188:40 - putting in serious effort into
188:44 - thinking about html was a low priority
188:47 - business and on then of course by the
188:49 - time it
188:51 - there was time to do that it had spread
188:53 - beyond repair right
188:56 - that sort of like units right right but
188:58 - of course we had like a virus
189:00 - uh yeah uh in a sense we we um
189:04 - we have xml coming now fortunately so
189:06 - that'll that'll help
189:08 - this machine here uh it's um
189:12 - well it's more than 10 years old now
189:15 - it's
189:16 - got
189:17 - it runs
189:18 - unix
189:20 - but it has unix with a
189:22 - nice visual interface it had some other
189:24 - interesting things which was the which
189:27 - permitted us to
189:28 - do the development of the web in such a
189:30 - small time such a short time and that
189:33 - was it had a completely uh
189:36 - or it has a completely object-oriented
189:38 - development system in which there is
189:40 - already supplied as part of the library
189:42 - and editable text object and that was
189:44 - what tim used to make the first browser
189:48 - and this this was all nice because it
189:49 - got us there very quickly and then we
189:51 - realized that you know
189:53 - somehow the real world uses these
189:56 - horrible machines and you know porting
189:59 - it from here to make it available on
190:01 - these horrible machines
190:02 - in the same elegant way is
190:05 - an enormous amount of work about halfway
190:07 - through 93 i think
190:09 - we
190:10 - we made a last effort in outputting
190:12 - browsers that were also geared to
190:15 - becoming editors but then there was just
190:18 - no hope
190:20 - so i really like
190:21 - that video it's real precious to me i
190:23 - shot it in 1999. i don't know if you
190:25 - noticed but i got a ponytail in the back
190:27 - and i got a village people mustache
190:30 - um
190:31 - when i first came to university of
190:32 - michigan i thought i was pretty uh
190:33 - pretty special and so i grew the
190:35 - ponytail uh
190:36 - i don't have ponytail anymore
190:38 - i got all my hair's a little darker now
190:40 - um
190:43 - it was i really liked the moment where
190:46 - he started yelling at me because i liked
190:48 - html and html these days with html5 is
190:51 - so much better than html was he was
190:53 - exactly right that html wasn't elegant
190:55 - but it was
190:56 - amazingly powerful at the same time and
190:58 - the fact that we could see it
191:00 - meant that people believed in it and it
191:01 - was it wasn't magic
191:03 - um the other thing that you might have
191:05 - noticed is that he had some very strong
191:08 - opinions about the design of what a web
191:10 - browser should be and they might not
191:12 - have seemed logical when you first
191:13 - listened to them one thing he said was
191:16 - every image had to pop up in the same
191:18 - screen and mosaic had one page that
191:20 - replaced the whole thing and you saw the
191:22 - images in line which is not what we
191:24 - wanted to do that's what robert said
191:27 - that might sound illogical today with
191:29 - farmville and facebook and you know all
191:31 - these things but you have to understand
191:33 - that in 1990 the network was very
191:35 - different even than it was in 1995 it
191:38 - was a very slow network and if you put
191:41 - images on every page they would slow
191:43 - down terribly and so what that user
191:46 - interface looked like is you had a
191:47 - document that was the text bold italics
191:50 - these kinds of things and when you
191:52 - clicked on something you got a new page
191:54 - and then it would take a while for this
191:56 - page to display because the networks
191:57 - were really and truly slow and the
191:59 - computers were slow as well
192:01 - so that might sound to you as an
192:04 - irrational
192:06 - design choice
192:07 - but in the time of 1990 it was a
192:10 - completely rational design choice
192:12 - and one of the things that sort of
192:13 - changed over time
192:15 - was that became less and less a rational
192:16 - design choice as the networks became
192:18 - faster the computers became faster an
192:21 - image became images became more of a
192:23 - natural thing that the technology was
192:26 - capable of handling
192:28 - so continuing our story we started at
192:30 - university of illinois urbana-champaign
192:32 - we went to university of michigan we got
192:34 - the nsf net up in 1990 and cern creates
192:37 - the world wide web the web took a great
192:40 - step forward at stanford university when
192:42 - the very first web server in america
192:44 - came up now the fact that it's the very
192:47 - first web server is not actually all
192:49 - that important the what was important
192:51 - was what was on that web server
192:53 - um
192:54 - it was 300 000 physics papers at the
192:57 - slack stanford linear accelerator stored
193:00 - in the database on a mainframe and uh
193:02 - you met and caillou robert caillou
193:04 - mentioned this in his conversation about
193:07 - this
193:08 - now what happened was is paul coons who
193:10 - you meet just in a moment he
193:12 - you know he said i'll put my database
193:14 - the database was well known and people
193:15 - had many ways of using it but with the
193:17 - web it made it much more easily used
193:20 - and so i think in a way paul coons
193:21 - inadvertently created the first search
193:23 - engine the first reading of something
193:26 - that's mostly content that people read
193:28 - up to that point tim berners-lee and
193:30 - robert were really trying to build
193:31 - something that allowed collective
193:33 - editing of information stored on servers
193:35 - all around the world so let's take a
193:37 - listen to paul coons
193:41 - [Music]
194:00 - so
194:03 - [Music]
194:11 - well the database that was here at slack
194:13 - was used by people around the world but
194:15 - with great difficulty because they had
194:18 - to have an account on the mainframe
194:20 - most people weren't familiar with
194:22 - mainframes and second of all the
194:24 - database
194:26 - language that you type in was
194:29 - difficult
194:31 - so before there was a web i invented
194:34 - a way for people to
194:36 - do what's now called instant messaging
194:39 - and to do a query to the database
194:40 - without logging in
194:42 - and that improves access to the database
194:44 - but you still had this terrible
194:46 - language
194:47 - of the database machine
194:50 - to to
194:53 - type in in order to do your query
194:56 - a little later on people added an email
194:58 - interface so you could send your query
194:59 - by email and get your response back by
195:02 - email
195:03 - so when i was at cern in september 1991
195:07 - and tim demernos lee dragged me into his
195:09 - office to show me give me a demo of the
195:11 - web
195:14 - when he demonst at first i wasn't very
195:16 - interested but when he demonstrated
195:17 - doing a query to a help
195:20 - system database on a mainframe
195:23 - i immediately put two and two together
195:25 - and says well if you can query a help
195:26 - system on a mainframe you can query a
195:28 - database on the mainframe
195:30 - and i started getting interested
195:33 - the thing is that we couldn't change the
195:35 - query commands because that was built in
195:37 - the database but the web page could give
195:39 - you examples and remind you what the
195:41 - query would be
195:43 - so did you have to write it all from
195:45 - scratch i mean did you write it from the
195:46 - protocol or was there software that you
195:48 - reused to make your first web server
195:50 - well i used the cern
195:52 - server
195:53 - software which was written in c
195:55 - unfortunately we had a c compiler on the
195:57 - mainframe at that time that wasn't very
196:00 - long we had a mainframe of c compiler
196:02 - but we had one
196:03 - so all i had to do was to write some
196:06 - extra c code
196:07 - to uh
196:10 - get the the query that the user had made
196:12 - and turn it into the database query when
196:15 - it was december 12 1991 we installed our
196:18 - our web server
196:19 - and we
196:20 - we informed tim berners-lee
196:22 - that day to give it a try
196:25 - the big boost came about a month later
196:27 - in january in southern france where
196:29 - there was a workshop on computing topics
196:32 - for high energy and nuclear physics
196:34 - and at that workshop
196:36 - tim burnley had a preliminary talk
196:39 - so he gave his hour-long talk to about
196:42 - 200 physicists from
196:44 - around the world
196:47 - and
196:48 - as part of his talk he gave a demo
196:50 - and at the very end
196:52 - most people i think were bored most of
196:54 - the time i mean the worst thing that
196:56 - software people want to think about it
196:57 - is uh documentation and he was pitching
197:00 - documentation
197:02 - but at the end of the talk
197:03 - he connected to the slack web server
197:07 - and made a query
197:09 - and that really dropped a lot of draw
197:11 - jaws
197:12 - because
197:14 - everybody knew the database everybody
197:15 - knew how hard it was to access
197:17 - okay and here he just clicked away typed
197:19 - in a few things for the query term and
197:21 - bang the results came back and nicely
197:23 - formatted
197:24 - so i way i say the interest in the web
197:28 - went from about 20 people to 200 people
197:31 - in that hour
197:33 - okay
197:34 - now those 200 people went back home and
197:37 - if each one of them told 10 people
197:39 - then within a week the interest in the
197:41 - web brewed 2 000 people
197:44 - so uh that that was the big turning
197:46 - point and i think tim recognizes that
197:48 - that was really to kick off
197:50 - and i think the reason that the
197:53 - web took off so quickly once the
197:56 - comers
197:58 - appreciate it and started to realize it
198:00 - it's a win-win situation
198:02 - okay
198:03 - it's a win for the customer obviously
198:05 - because he can do price comparisons he
198:07 - can browse this airline schedules on his
198:10 - own and visualize what he wants to see
198:12 - quickly he can cut and try different
198:13 - things as much patient as he has to get
198:15 - the price down
198:16 - so it's much much better for the
198:18 - consumer
198:19 - but what about the provider the airlines
198:22 - well it's much better for them
198:23 - because just software is running on
198:25 - machines
198:27 - okay it's much lower cost
198:30 - for them
198:31 - and
198:32 - and so they're winning too
198:34 - i point out in my talk about the web
198:36 - near the end sort of a punchline
198:38 - that in doing big science
198:41 - we're
198:42 - solving we're finding solutions to
198:44 - problems that the general public don't
198:45 - know they have
198:47 - so who would predict that out of high
198:48 - geophysics research he would come
198:50 - something like the web would come up i
198:52 - think that would be unpredictable but in
198:54 - hindsight you can see that it was a
198:56 - natural place
198:57 - for uh for the web to have been invented
199:01 - so again i think paul really created for
199:03 - us the first search engine and showed
199:05 - that the web could be a mostly consume
199:08 - environment and be extremely useful when
199:10 - you think about it
199:12 - if there was no web and there was no
199:14 - content how would you know that the web
199:16 - is a great way to view content so paul
199:18 - coons had the advantage that he had a
199:19 - lot of content and it was content that
199:22 - at least the physicists found extremely
199:23 - valuable and then people go oh i can see
199:26 - in fact i remember when i first saw the
199:28 - web i was like okay fine it's got
199:31 - pictures who cares
199:32 - um because other things like gopher were
199:35 - just as good
199:36 - and then i saw the ability to go to
199:39 - federal express and track a package and
199:41 - go like now that's a cool idea right the
199:43 - go gopher couldn't do that as a matter
199:45 - of fact in 1993
199:47 - sort of three years after the web was
199:49 - created the web was actually not all
199:51 - that popular
199:53 - 1991 was the paul coons but that was
199:55 - mostly physicists and a few
199:57 - nerds myself included but in 1993 gopher
200:01 - was a much better product and it was a
200:03 - much more beloved product
200:05 - and the problem again went down to came
200:07 - down to the fact that the network was so
200:09 - slow that simple
200:11 - text-based things worked better than
200:13 - highly graphical things
200:15 - and there's an apocryphal story that
200:17 - happened in a march of 1993 where there
200:20 - was a meeting of the internet
200:21 - engineering task force that does
200:23 - standards for all these things
200:25 - and they had a bird of a feather session
200:27 - for gopher and a bird of a feather
200:28 - session for the world wide web and the
200:30 - gopher session was full of people and
200:32 - they couldn't have enough in the room
200:33 - and they were sitting on the floor and
200:35 - peeking in the door and then
200:37 - later
200:38 - i wasn't at this meeting by the way rich
200:40 - wiggins my co-host on the television
200:41 - show was at this meeting
200:43 - and what he tells me is at the birds of
200:46 - feather meeting there was almost nobody
200:47 - there and turned berners-lee was like
200:50 - i've been working on this thing for
200:51 - three years and it's better than gopher
200:53 - but nobody wants to use it and then
200:56 - people in the room at that point told
200:57 - him they said it's just too complex it's
201:00 - too hard to get working
201:01 - and so
201:03 - this is a long time ago and the web was
201:05 - not
201:07 - assured to be a success at that point it
201:09 - just wasn't really clear
201:11 - the university was getting the idea that
201:13 - we had spent a lot of money on
201:16 - a campus-wide network and
201:18 - that maybe we should use it for
201:19 - something besides connecting to the
201:21 - mainframe so most of the top of the
201:23 - computer center was saying maybe we
201:25 - should do something with publishing
201:26 - information that'd be an interesting
201:28 - sort of use of the network that more
201:30 - people could use than just the people
201:31 - who wanted to talk to the mainframe
201:34 - were you surprised at how fast gopher
201:36 - took off yeah absolutely shocked uh
201:39 - because we basically wrote something
201:40 - that we thought would be good enough for
201:42 - our campus
201:43 - and hoped that a few other places would
201:45 - use it because then if somebody at a
201:48 - different institution used it we'd have
201:49 - some credibility locally that hey we're
201:51 - not just saying it's good somebody else
201:53 - is saying it's good so
201:55 - that it was accepted is probably more a
201:57 - sign
201:58 - that it just happened to be the right
201:59 - thing at the right time the environment
202:01 - was ripe for something like that and we
202:02 - had an okay product at the right time
202:05 - yeah basically we put it up for
202:06 - anonymous ftp and sent out a couple
202:08 - announcements on using it saying hey
202:10 - here's a thing that does kind of a
202:12 - campus-wide information system the
202:14 - fashion back then was to say everybody
202:16 - needs to have a cwis a campus-wide
202:19 - information system and so gopher we
202:22 - thought made a pretty good one because
202:23 - you didn't have to centralize publishing
202:25 - on one machine you could let individual
202:27 - departments publish off their own
202:29 - machines and control their own content
202:32 - that model turned out to be a pretty
202:34 - good one so lots of other places started
202:36 - using it so we had kind of the right
202:38 - idea
202:39 - at the point where this particular issue
202:41 - campus-wide information system was
202:43 - something that all of the
202:45 - all the university computer centers were
202:47 - saying i've got to have one of these the
202:49 - technology we
202:50 - built gopher to work with were
202:53 - fairly slow machines with limited
202:55 - graphics and slow modems that was our
202:57 - design point because that's what people
202:58 - had six seven years ago
203:01 - and while we added graphics and movies
203:03 - and those sorts of things gopher wasn't
203:04 - designed to be hyper text and really
203:06 - media rich documents
203:08 - it was aimed more at run fast over
203:11 - limited bandwidth on slow machines
203:15 - so
203:17 - 1993 was kind of like
203:20 - it was a real there's a lot of things
203:21 - that could have been very different in
203:23 - 1993
203:25 - and
203:26 - i want to show you
203:28 - a
203:29 - commercial and there's a couple of these
203:31 - out there from 1993 that one of the
203:33 - large telecommunications vendors
203:36 - put out as a national ad campaign and
203:39 - this is what the telecommunications
203:40 - industry was thinking about
203:42 - they saw it all happening they saw this
203:44 - all happening they knew it was going to
203:45 - be big they knew it was going to allow
203:48 - interactions in many ways they knew it
203:50 - they
203:51 - they weren't dumb they it was like whoa
203:52 - what's going on no not at all they
203:55 - absolutely knew so this
203:58 - this really
204:00 - wonderful series of commercials
204:03 - is um
204:03 - [Music]
204:04 - it's just quite amazing so take a look
204:06 - at the end you'll see actually what the
204:09 - large telecommunications company's name
204:11 - is so take a quick look
204:15 - have you ever renewed your driver's
204:17 - license
204:19 - had a cash machine
204:20 - nice picture you will and the company
204:23 - that'll bring it to you a t
204:30 - have you ever watched the movie you
204:31 - wanted to
204:33 - the minute you wanted to
204:36 - learn special things that's all taken
204:38 - from jazz now any questions from far
204:41 - away places
204:42 - so where did jazz come from good
204:44 - question
204:46 - or tucked your baby in
204:47 - [Music]
204:49 - from a phone
204:53 - you booth
204:54 - and the company that will bring it to
204:56 - you a t and t
204:59 - so
205:00 - again sort of
205:01 - looking back at this and looking at
205:03 - things that might not have been
205:05 - um
205:06 - there's nobody that really makes the
205:07 - connection that steve jobs might have
205:09 - had some impact on the world wide web
205:14 - but
205:15 - in a way he was actually quite
205:17 - influential steve jobs of course founded
205:19 - apple and then was kicked out of apple
205:22 - um at after the macintosh um and he
205:25 - started a new company called next
205:27 - and if you listen closely to what robert
205:29 - caillou says and you listen to closely
205:31 - what paul kuhn says and the computer
205:33 - that was on my desk during this entire
205:34 - period of the 1990s to 93 were next
205:37 - computers
205:38 - next was a bold unix-based highly
205:41 - networked high-definition display
205:43 - high-performance computer that steve
205:45 - jobs built when he formed the company
205:48 - next after he got fired from apple of
205:50 - course he eventually came back to apple
205:52 - and the next technology is
205:55 - macintosh that's the macintosh operating
205:57 - system and so
205:59 - if you make a mistake in macintosh you
206:01 - might see a error message starts ns
206:03 - something that's called next step which
206:05 - is the operating system on these next
206:07 - computers
206:08 - for the first three years of the web
206:10 - it was pretty much only on the next
206:12 - computer people would even the server
206:14 - was you know on the next computer and
206:16 - the browser was on the next computer
206:18 - and and so it's the next computer really
206:20 - kind of did that i i wrote an article
206:23 - in uh sort of a couple months after
206:26 - steve jobs died for ieee computer
206:28 - magazine's
206:29 - january 2012 issue that really sort of
206:32 - tried to at least from a historical
206:34 - perspective
206:35 - point out how important steve jobs may
206:37 - have been
206:38 - in
206:39 - helping the internet get formed
206:42 - [Music]
207:04 - hello and welcome to conversations with
207:06 - computing
207:08 - in this column i take a look at some of
207:09 - the second order effects of the
207:10 - technology that steve jobs produced
207:12 - throughout his career and how those
207:15 - technologies from apple and next often
207:17 - served as an inspiration to many of the
207:19 - early innovators in the internet and
207:21 - world wide web
207:23 - i found out that we'd lost steve jobs on
207:25 - the evening of october 5th right in the
207:27 - middle of a lecture on using regular
207:29 - expressions in python
207:31 - i was recording the lecture for a later
207:33 - podcast
207:35 - because you might want to go down the
207:36 - nerd rabbit hole later and that's okay
207:38 - there's nothing wrong with avoiding the
207:40 - nerd rabbit hole but this is a nerdy
207:41 - thing
207:42 - it's extremely nerdy
207:45 - i think it's awesome
207:49 - a nerdy announcement
208:01 - [Music]
208:05 - the very next week in the same classroom
208:08 - i was giving my lecture on the inside
208:09 - story of the history of the internet and
208:11 - the world wide web
208:13 - sharing some of my interviews with early
208:15 - pioneers
208:16 - as i gave the lecture and watched my
208:18 - video interviews thinking about steve
208:20 - jobs i began to realize how important
208:22 - apple and next technology was to those
208:25 - early innovators
208:27 - in some ways the very existence of those
208:29 - technologies helped propel the internet
208:31 - and web revolution forward
208:34 - in my 1999 interview with robert caillou
208:36 - the co-inventor of the world wide web we
208:39 - are sitting in his office by the next
208:40 - cube that ran the very first web server
208:43 - as robert describes how the next stepped
208:45 - development environment allowed them to
208:47 - quickly build prototype versions of a
208:49 - web browser in
208:50 - 1990 you get the sense that their next
208:54 - hardware and software was very much an
208:56 - equal partner in their early visions of
208:58 - the web
208:59 - obviously the the whole of high energy
209:01 - physics has been the sort of miniature
209:03 - information society
209:04 - since way back when
209:07 - soon as they were networks essentially
209:09 - and so
209:10 - because we have this need for
209:13 - spreading documentation around
209:15 - we built these things like centralized
209:17 - databases there was certain dock you
209:19 - know you could use it but whatever uh we
209:22 - had a a well you still have a large
209:24 - database of um
209:26 - energy physics articles uh kept by
209:29 - stanford
209:30 - and you could get at it before the web
209:32 - by knowing exactly what computer to log
209:35 - into over the network blah blah blah
209:36 - blah but it was all very difficult and
209:38 - then so
209:39 - when tim invented to web and i had a
209:42 - separate proposal i dropped it because
209:44 - tim's proposal ran over the internet and
209:46 - that was clearly much more efficient
209:48 - um
209:49 - when when the web came all that
209:52 - necessity of knowing which computer to
209:54 - go to what to say to that computer and
209:57 - so forth just disappeared you know you
209:59 - people put up these pages with the links
210:00 - and you could just follow links and get
210:02 - to places where you wanted to be and
210:04 - find everything
210:05 - and it was also all in the same format
210:07 - so that was very important too that you
210:09 - know we broke this
210:11 - proprietary commercial system of
210:13 - vertical markets which you know don't
210:16 - let you get at anything except if you
210:17 - stay with this particular company or
210:20 - with that particular company so that
210:21 - that horizontal split that cut that we
210:23 - made between the browsers on top and the
210:27 - databases at the bottom was i think
210:29 - essential uh
210:31 - to make it useful for us but also to
210:33 - make it useful for everybody else right
210:35 - and uh so
210:37 - that was that was what it was like in
210:39 - the beginning and tim
210:41 - and i we did this all on this
210:43 - next machine here
210:46 - in about 1990 so the first server was up
210:49 - about 1990 the first
210:52 - end of 1990. the first
210:55 - server in the united states came up
210:57 - about a year later
210:59 - at stanford because of that database
211:02 - that i was talking about before the the
211:04 - real problem was that
211:08 - this
211:09 - development system is so much better
211:11 - than anything else that porting what we
211:14 - had here to any other platform took an
211:17 - order of magnitude more time
211:19 - and
211:20 - the
211:21 - for example every time you clicked here
211:23 - you had another window right every time
211:25 - you clicked on a diagram you had a
211:27 - diagram in another window when you
211:30 - clicked on the map you got the map in
211:32 - postscript scalable perfectly printable
211:34 - and so on and so forth it tried to port
211:36 - that to another system
211:37 - you go berserk you know there is a big
211:39 - difference between making an editor and
211:42 - something that just puts up a page and
211:43 - you can't do anything with that
211:45 - so
211:46 - our system from 1990 was
211:49 - also i mean i started it's only after
211:53 - next stop making hardware and i had to
211:56 - go back from a next to a macintosh
212:00 - that i had to learn html right i mean
212:03 - before we produced all the documentation
212:05 - and stuff but we never saw any we never
212:07 - though in html we never saw any urls
212:10 - right because
212:12 - you linked
212:13 - by saying link this to that not by
212:16 - typing in the url there was a special
212:18 - window you could
212:20 - call up in which you could type a url if
212:22 - you needed to but it wasn't the usual
212:24 - thing i mean this navigation bar which
212:26 - says http
212:27 - you know i learned all that
212:29 - the hard way afterwards that you had to
212:31 - use that because you've lost that system
212:34 - right
212:35 - steve jobs next workstations were
212:37 - essential to the creation of the
212:38 - earliest web software
212:40 - their advanced development environment
212:42 - and rich display capabilities led early
212:44 - innovators to think of the internet less
212:46 - as a text only and more as an engaging
212:49 - multimedia experience
212:51 - in my 2007 interview with paul coons who
212:54 - brought up the first web server in the
212:56 - united states on an ibm mainframe at the
212:58 - stanford linear accelerator in december
213:00 - 1991 we can see that he still has a
213:04 - working color next workstation in his
213:06 - office
213:08 - when paul was developing software for
213:09 - the ibm mainframe there are around 20
213:11 - web servers in the entire world
213:14 - if you wanted a web browser to test your
213:16 - server having a next workstation
213:18 - was essential
213:20 - so when i was at cern in september 1991
213:24 - and tim deverance lee dragged me into
213:26 - his office to show me give me a demo of
213:28 - the web
213:31 - when he demons at first i wasn't very
213:33 - interested but when he demonstrated
213:34 - doing a query to a help
213:37 - system database on a mainframe
213:40 - i immediately put two and two together
213:42 - and says well if you can query a help
213:44 - system on a mainframe you can query a
213:46 - database on a mainframe the database
213:47 - itself had about 300 000 entries
213:51 - and was it heavily used was it was it
213:54 - heavily used before you put it on the
213:55 - web and then continue oh yeah it was
213:56 - heavily used people
213:58 - had signed up for have computer accounts
214:01 - on the mainframe so they could do their
214:02 - queries
214:04 - and
214:07 - from all around the world i think there
214:08 - was some 4000 register
214:11 - so did you have to write it all from
214:12 - scratch i mean did you write it from the
214:14 - protocol or was there software that you
214:16 - were used to make your first web server
214:18 - well i used the cern
214:20 - server
214:21 - software which was written in c
214:23 - unfortunately we had a c compiler on the
214:25 - mainframe at that time that wasn't very
214:28 - long we had a mainframe of c compiler
214:30 - but we had one
214:31 - so all i had to do was to write some
214:33 - extra c code
214:35 - to
214:38 - get the query that the user had made and
214:41 - turn it into the database query
214:44 - now wasn't the original web server on a
214:45 - next
214:47 - and that's
214:49 - the the uh
214:50 - all the web software was originally
214:52 - developed on the next computer at cern
214:54 - while the web and web technologies were
214:56 - gaining traction in the academic and
214:57 - research communities who often had
214:59 - access to powerful unix workstations on
215:02 - their desks the rest of the world was
215:04 - browsing the internet using the text
215:05 - oriented gopher clients and servers
215:08 - in 1993 the national center for
215:10 - supercomputing applications at the
215:12 - university of illinois at
215:13 - urbana-champaign released ncsa mosaic
215:17 - mosaic was the first graphically rich
215:19 - web browser that ran on unix macintosh
215:22 - and windows in my 1997 interview with
215:25 - larry smarr he points out that the
215:27 - success of the ncsa mosaic browser
215:29 - occurred in part because of earlier work
215:32 - developing the ncsa image library to
215:34 - take advantage of the graphics
215:36 - capabilities of early apple macintosh
215:38 - computers what we basically did during
215:40 - that ladies period was
215:44 - to make the world safe for images
215:47 - what ncsa image did was basically we
215:50 - said we want to build a world of
215:53 - infrastructure in which
215:56 - it's as easy to move an image around as
215:59 - it is to move a word
216:03 - that was our design
216:04 - parameters back and and that's the way
216:07 - we talked about it back then so that
216:08 - meant we had to scale the network scale
216:11 - the disk drives scale the compute power
216:13 - we had to go to full color
216:15 - when the mac 2 first came out 256 color
216:18 - levels uh we got 50 of them apple gave
216:21 - us 50 mac twos which was like stunning
216:24 - uh in those days we were in fact we're
216:26 - the largest funded
216:29 - group in the academic group in the
216:30 - country for the apple advanced
216:31 - technology group
216:34 - ibm at that time was telling their
216:36 - customers you don't need color we've
216:38 - already provided it as i said you have
216:41 - four of them black white cyan and
216:42 - magenta
216:44 - why would you need more
216:46 - so what we did was we took
216:48 - things that were on 100 000
216:51 - computer graphics workstations of image
216:53 - processing that medical imaging people
216:55 - used satellite reconnaissance people
216:57 - used and we took all that put it into
217:00 - software and ncsa image on the mac
217:03 - and so you could just move the mouse and
217:05 - do what it would take you would have
217:07 - otherwise cost you a hundred thousand
217:08 - dollars to do and you'd have to be an
217:10 - elite specialist again taking things
217:12 - that elite people knew how to do could
217:14 - afford to do and making it available to
217:16 - the masses
217:17 - the day after i found out that steve was
217:19 - no longer with us i happened to have a
217:21 - morning meeting in new york city so i
217:23 - went to the apple store in manhattan to
217:25 - get a sense of our collective reaction
217:27 - to the loss of such a brilliant
217:29 - visionary who's affected us in so many
217:31 - ways
217:32 - hello everybody this is chuck i'm here
217:34 - at the apple store in manhattan i'll
217:36 - show you kind of what we're seeing
217:39 - we're seeing
217:40 - press we're seeing a
217:42 - impromptu memorial for steve jobs
217:45 - uh that's got apples it's got flowers
217:48 - it's got all kinds of really really cool
217:51 - stuff
217:52 - and
217:53 - but the the crowd seems really quiet
217:55 - there's a media that's interviewing all
217:57 - the people you can see uh
217:58 - see the media there grabbing people off
218:00 - the street and interviewing them sure
218:02 - i'm sure they're capturing their
218:03 - thoughts and so here we are sort of
218:06 - one day
218:07 - one day after
218:09 - uh the passing of steve jobs throughout
218:12 - his career at apple and next and then
218:15 - again at apple steve jobs was never
218:17 - interested in the least expensive nor
218:19 - the most profitable technology
218:22 - he pursued the best and most advanced
218:24 - technology
218:25 - in many of his designs and decisions he
218:27 - provided a road map for the entire
218:29 - consumer technology marketplace
218:31 - it's no wonder that many of us would
218:34 - wait with breathless anticipation for
218:36 - each and every apple announcement
218:38 - they were always an exciting glimpse
218:40 - into the future of technology
218:42 - over the past 30 years the products that
218:44 - came from jobs companies were a joy to
218:46 - use
218:47 - and perhaps more importantly they
218:49 - inspired many innovators to keep their
218:51 - focus on the exciting and unexplored
218:54 - future
218:55 - [Music]
219:15 - so we started our
219:17 - journey at university of illinois
219:18 - urbana-champaign
219:19 - we got the nsf created university of
219:22 - michigan we created the web we created
219:24 - the first web server and now we're going
219:26 - to come back to where we started
219:28 - we're going to go back to the university
219:30 - of illinois at urbana-champaign
219:32 - these are the folks that basically
219:35 - exploded the web
219:37 - moved the web from the academic space to
219:39 - the commercial and end user space
219:42 - and there's all kinds of things the
219:44 - network was growing things were getting
219:46 - faster
219:47 - personal computers were getting better a
219:49 - very rapid pace because
219:51 - the ibm pc is almost 10 years old and
219:53 - many computers they were getting quite
219:55 - fast in the in the 90s so the 1990s our
219:58 - computing and their display capabilities
220:00 - were getting better very rapidly
220:03 - and
220:05 - in this environment ncsa at
220:08 - urbana-champaign university illinois
220:10 - urbana champaign built an open source
220:12 - web browser that worked on mac
220:16 - windows and
220:17 - unix
220:18 - it was the first web browser that did
220:20 - this and it it was the thing that
220:24 - really made it so average people who had
220:26 - pcs or macs in their home could get a
220:28 - network connection and start enjoying
220:30 - all of this new content that was coming
220:32 - up on the world wide web
220:34 - hello my name is charles severance and i
220:36 - am showing you right now a desktop
220:38 - application that works on my macintosh
220:41 - called ncsa x mosaic this was a software
220:45 - released in 1993 and it was the first
220:49 - mosaic it was the x windows mosaic
220:52 - and i'm running it on my macintosh and
220:53 - you can download it from my github
220:56 - account uh csab is my github handle and
220:59 - it's the x mosaic dash 1.2
221:02 - so what we're looking at here is the
221:04 - original default home page at the
221:06 - national center for super computing
221:08 - applications at the university of
221:09 - illinois and we see it as we saw at
221:11 - circa
221:12 - 1993 we can scroll through we can see
221:15 - the old good old days the visited set
221:18 - links in purple and so if we scroll down
221:22 - you'll see some neat pictures and
221:25 - the wonderful gray background
221:28 - list tags were
221:29 - were real back then
221:32 - you know we can
221:34 - go see something about visualization at
221:36 - ncsa
221:38 - i've done a little tiny bit to this to
221:40 - teach it a few things you can see
221:43 - all that i've done on http
221:46 - um
221:47 - on my github site you can see everything
221:49 - i've done on my github site i try to
221:51 - stay as i just made a few more things
221:53 - work like png images and http 1.1 so you
221:57 - could visit more
221:59 - more pages another another wonderful
222:02 - page
222:03 - to uh
222:04 - another wonderful page to take a look at
222:07 - is the original
222:08 - first page on the world wide web the
222:10 - info.cern.ch
222:12 - and again we're experiencing it now
222:14 - circa 1993
222:16 - to see what's out there
222:19 - take a look at the people involved in
222:20 - the project so here's
222:23 - some of those pages tim berners-lee of
222:25 - course robert caillou of course
222:28 - and here's some of the other people that
222:30 - were working at cern
222:32 - so
222:33 - there you go
222:34 - that is a quick experience in how we
222:38 - surfed the web in 1993.
222:42 - after this the ncsa staff student
222:44 - programmers software developers
222:47 - all formed the company netscape in order
222:49 - to commercialize all this
222:50 - joseph harden was the supervisor of the
222:53 - software development group at ncsa
222:55 - that was responsible for building and
222:57 - releasing both the mosaic web browser
223:01 - and the httpd web server as open source
223:05 - and gave them way free
223:08 - [Music]
223:30 - the ncsa mosaic web browser was
223:32 - developed at the university of illinois
223:34 - starting in 1992
223:36 - ncsa mosaic brought the web to apple pc
223:39 - and unix systems
223:41 - joseph hardin managed the software
223:43 - development group at the national center
223:45 - for super computing applications
223:48 - [Music]
223:52 - ncsa was kind of a special place right
223:55 - one of those things that happens very
223:57 - infrequently where there's lots of
223:59 - energy a large amount of resources
224:02 - visionary leadership and a lot of free
224:04 - space for people to play
224:07 - and larry smar
224:09 - has to figure in any discussion of it
224:11 - quickly because he's the person that
224:13 - created that space
224:15 - and
224:16 - that gave a bunch of us people in
224:19 - visualization people in
224:21 - computational science people in
224:24 - collaboration technologies people in
224:27 - all kinds of stuff networking in the
224:30 - late middle and late 80s
224:33 - a space to just figure out what it was
224:35 - that we thought was fun and what was
224:36 - interesting you know what i thought was
224:38 - interesting
224:39 - was how people were using these new
224:42 - technologies to work together we've been
224:43 - working we started out working
224:46 - with
224:48 - tools that
224:50 - supported
224:52 - simulation and computations on the main
224:56 - supercomputing systems
224:58 - that's what the software development
225:00 - group did and there was a group before i
225:03 - joined it that did
225:04 - ncsa telnet
225:06 - right this is back when
225:09 - we were trying to convince the physicist
225:11 - that decnet wasn't such a great idea
225:13 - that we wanted this crazy
225:15 - open nobody owns it right ip
225:19 - um model for the network and
225:23 - that was kind of a bit of a struggle
225:26 - because if it was an open source type
225:29 - thing and nobody owns it why how's
225:31 - anybody going to have responsibility for
225:33 - it and why not use decnet which is this
225:36 - perfectly good proprietary
225:37 - well-developed you know system
225:41 - yada yada so it was a long time it took
225:43 - a while for us to
225:44 - explain to the physicists why we wanted
225:46 - an open model for um
225:49 - tcpip for the interconnection of all
225:51 - these networks
225:53 - and i spent time for a while with a
225:55 - program at ncsa called the affiliates
225:57 - program
225:58 - where we gave people mac ses
226:01 - and
226:02 - told them about tcp
226:05 - and put the ncsa telnet on the machine
226:08 - and said now here's how you get to the
226:09 - super computers
226:11 - larry recognized from the beginning and
226:13 - we all loved the idea
226:15 - that these small little things on the
226:17 - desktop were really the gateways for
226:19 - everybody to the big machines in the
226:20 - background and that all of this would
226:22 - turn into one cloud behind the the
226:25 - screen that we needed to figure out how
226:27 - to get the user involved in as much as
226:28 - possible
226:30 - so we were interested in building tools
226:32 - for end users that worked with pcs and
226:34 - that allowed them to do their work
226:36 - better
226:37 - in the computational science communities
226:39 - that they were part of on the super
226:41 - computers
226:42 - and it's an easy extension from that to
226:45 - think about collaborative technologies
226:46 - in the large how do people work together
226:49 - not only with these tools
226:52 - but also with
226:55 - simple communications
226:58 - email
227:00 - papers
227:02 - data sets that they want to share
227:04 - and how do they do that initially our
227:06 - interest was in
227:08 - synchronous tools
227:09 - um
227:10 - when we were thinking of collaboration
227:12 - tools so we were building something
227:14 - called ncsa collage
227:17 - which was
227:18 - a set of tools that worked
227:21 - and one of the big deals was that they
227:22 - worked across the three platforms
227:25 - the x windows for the unix people
227:28 - the windows environment and the mac and
227:32 - that was one of the things that was sort
227:34 - of part of the
227:36 - underlying culture there was we wanted
227:38 - to make them available to as large a
227:39 - community as possible so
227:41 - started working on collaborative tools
227:43 - and there was a set of people and each
227:45 - other on each of those machines that was
227:47 - working
227:48 - to make it possible for people to share
227:50 - in real time
227:51 - images of their data the spreadsheets of
227:55 - their data
227:56 - and
227:57 - papers that they had run across
227:59 - interesting references to uh with their
228:02 - colleagues who were remote from them
228:04 - geographically
228:05 - so that's the context in which dave
228:07 - thompson
228:09 - who was one of the developers one of the
228:10 - ex-windows developers the lead x-windows
228:12 - developer i think for the
228:14 - collage tool
228:16 - um pulled down
228:18 - one of the early
228:20 - um
228:21 - web browsers and it was the one from
228:23 - slack and i can't remember its name
228:27 - and he went through the effort of
228:30 - getting it working
228:31 - and brought it in and showed it to mark
228:34 - andreessen and i
228:35 - and both of us looked at the screen dave
228:38 - described what he had in front of us
228:41 - and we said
228:43 - we can do better than that
228:45 - that's a complicated system and the
228:47 - interface looks terrible
228:49 - and it dave said that it was a real pain
228:52 - for it
228:53 - for him to get it working for him to
228:55 - download it and install it and compile
228:57 - it and everything
228:58 - and it only works on the next windows
229:00 - box and wouldn't it be cool if it worked
229:03 - across all three of the boxes and if it
229:06 - was something that was just a plug and
229:08 - go like the rest of our tools so mark
229:10 - and
229:11 - another developer there
229:14 - ran with the idea dave wanted to work on
229:16 - it but i said dave please finish up with
229:18 - the collage stuff and this was before we
229:21 - really understood what was meant by open
229:23 - source
229:24 - so we just and we wanted everybody to be
229:27 - able to take the software and do
229:28 - whatever they wanted to with it we
229:30 - weren't that concerned with commercial
229:31 - advantage we were more interested in it
229:34 - being open and
229:36 - people being able to make contributions
229:38 - back to the code and taking the code and
229:40 - doing what they wanted to with it so we
229:42 - just put it all in the public domain
229:43 - which as the folks from apache will tell
229:47 - you
229:48 - was kind of ambiguous it's not clear
229:49 - what that means um but at least it got
229:53 - the code out there
229:54 - so
229:55 - mark and eric we're working on that
229:57 - um working on what mark and eric were
229:59 - working on what the first generation of
230:01 - ncsa mosaic
230:03 - and this was the next windows
230:05 - app
230:06 - and nobody was working yet on the
230:08 - windows or the mac version and we saw
230:11 - the first version of that come out when
230:13 - was it early 93 late 92
230:16 - and
230:17 - it was probably early 93 and
230:20 - the response of course was fantastic
230:23 - it's wonderful
230:24 - to be able to just click on something
230:26 - and see it right away and indeed the
230:30 - combination of
230:32 - um
230:34 - hyperlinks in a document as far as
230:36 - navigation and retrieval of documents
230:40 - as a user interface is just great and a
230:43 - lot of people
230:45 - got it immediately especially people
230:47 - that were working with
230:50 - the tools at ncsa and the companies i
230:53 - remember an hp exec coming in one time
230:55 - and
230:56 - mark and eric had written a little
230:58 - filter that took
230:59 - unix
231:00 - um documentation
231:03 - and
231:04 - made it into html and made all of the
231:07 - references into links
231:08 - and they went to they hit an hp site
231:12 - and the exec said where's this coming
231:13 - from
231:14 - because he was able to see all of his hp
231:16 - documentation there in the room at ncsa
231:18 - and navigate through it real easily and
231:19 - he said well you've got three or four
231:21 - folks back there that have put up
231:24 - httpd servers you may not know what
231:26 - those are yet he said i've never heard
231:27 - of this and we said but this is the kind
231:29 - of thing that um is probably going to be
231:31 - really useful in the future for people
231:33 - who are trying to manage documentation
231:35 - in a distributed fashion
231:37 - yada yada right we went on with a story
231:39 - like that and this guy was bouncing up
231:41 - and down in his seat and this was the
231:42 - kind of response that we got with it
231:46 - and
231:47 - for a while we tried to integrate the
231:49 - earlier work with collage
231:51 - with the work with mosaic and early
231:53 - versions of mosaic have a collaborate
231:55 - button at the top
231:57 - and that was something that would allow
231:59 - you to pull in something from a
232:01 - synchronous session
232:02 - on the idea was that you'd be working
232:04 - with your colleagues synchronously and
232:06 - then asynchronously go off and use the
232:09 - browser
232:10 - and pull something into
232:12 - the um
232:14 - the collage session or vice versa be
232:16 - working on something in the collage
232:18 - session and be able to access it through
232:20 - the browser or just use the browser as a
232:22 - component and uh in the session
232:25 - well
232:26 - um the browser of course took off
232:29 - we had tom redman who was the lead for
232:33 - the
232:36 - mac version
232:38 - though
232:39 - uh
232:40 - he was the person who really built it
232:42 - was alex toten
232:44 - who was a
232:46 - excellent developer and a lot of times
232:48 - ran ahead of the other people that were
232:50 - working on stuff especially on the mac
232:53 - and chris wilson and john
232:56 - they were working on the windows version
232:57 - so all of a sudden
232:59 - in 93 late 93
233:02 - early 94
233:03 - there's this full suite
233:06 - of mosaics that work across x windows
233:10 - the mac and the windows system and
233:13 - that's the point at which the guy who is
233:16 - the president at the time of the
233:18 - internet
233:20 - association said ncsa has fired a shot
233:23 - heard around the world because it's
233:25 - available now across all these platforms
233:28 - and anybody can use it
233:30 - we were convinced
233:32 - deep down inside that all of the new
233:35 - technologies and the digitalization of
233:37 - the world and everything was going to
233:39 - make a huge difference we just weren't
233:40 - sure exactly how
233:42 - at the same time
233:44 - when
233:45 - people would come to us early on in the
233:47 - mosaic experience and say we want to
233:49 - commercialize this and do this with it
233:52 - or do that with it there was a lot of
233:54 - you know we're not sure i remember
233:56 - sitting in rooms with
233:58 - commercial folks that came in and
234:00 - pitched to us
234:02 - and i bring the whole team in um
234:05 - the whole
234:06 - software development group and say
234:08 - listen to these guys and you know tell
234:10 - me what you think about this
234:11 - um
234:13 - and we were nobody was sure what it was
234:15 - gonna do and there were people who
234:18 - started off building browsers and just
234:21 - kind of never got off the ground it
234:23 - wasn't until
234:24 - the netscape
234:26 - effort started up
234:28 - that there was sufficient
234:30 - energy and sufficient resources
234:32 - i think to really
234:34 - get on and ride and push um
234:37 - and and
234:39 - you know crank up
234:41 - a
234:42 - group of
234:44 - x hundred developers
234:47 - uh in a matter of months
234:49 - and then they were you know
234:51 - quickly overshadowed by the effort
234:53 - that um microsoft put into it i remember
234:56 - one of the netscape guys
234:58 - saying um i came back from a meeting
235:01 - with some folks up in seattle and they
235:03 - said that microsoft now had
235:06 - this is when netscape is writing at the
235:08 - top of its form right top of the game
235:11 - this guy says
235:12 - microsoft just told me that there's
235:14 - somebody from microsoft just said that
235:16 - they've got like
235:17 - 2 000 developers working on this said at
235:20 - that point i realized that we were you
235:22 - know going to have some difficulties
235:24 - um and we of course always felt
235:28 - that
235:29 - there should be more than one browser
235:32 - um and so we wanted this because we were
235:34 - interested in standards and openness
235:35 - right at the time if one there's only
235:37 - one browser then that company gets to
235:40 - determine what the standards are there
235:41 - were all kinds of hassles early on
235:43 - about
235:44 - putting in different features and the
235:46 - browsers driving the standards rather
235:47 - than the standards driving the browsers
235:49 - and all this kind of stuff so we wanted
235:50 - some diversity
235:52 - there was a feeling very early on
235:55 - that this was
235:56 - going to be
235:58 - a real gas this was going to be hot that
236:00 - this was something that was the response
236:02 - was just so immediate
236:04 - if you go back and you ask people
236:08 - who were
236:09 - sitting in front of machines in 1993
236:13 - 94 or 95
236:15 - right and you say do you remember the
236:17 - first time that you used mosaic
236:19 - right you remember the first time you
236:20 - used a browser it wasn't mosaic and
236:23 - vast majority of them that i that i've
236:25 - run into say yeah
236:26 - i can remember
236:28 - and i remember one of the nsf program
236:30 - officers
236:31 - calling me up one day just out of the
236:33 - blue and saying
236:34 - i just wanted to tell you you know you
236:36 - guys probably this is like after we've
236:38 - been playing with this for months right
236:40 - not not years just months
236:42 - he said you know
236:44 - sometimes we just sit around and click
236:46 - on things because it's still such a
236:48 - surprise to have a picture or a whole
236:51 - other page of information pop up
236:54 - right and we don't know where it's
236:55 - coming from and we don't know who's
236:57 - putting it up but we still haven't
236:59 - gotten over the g wiz aspect of this yet
237:04 - [Music]
237:27 - so at the end joseph is really talking
237:29 - about how microsoft had to react to
237:32 - netscape and how all of a sudden the
237:34 - market begin to sort of crash together
237:36 - and tons of investment a lot of
237:39 - intensity
237:42 - triggered mostly by the release of the
237:44 - windows and the mac version of mosaic
237:47 - 1994 was distinctly different than 1993.
237:52 - the staff at ncsa went and founded
237:54 - netscape in april 1994.
237:56 - the first world wide web conference was
237:58 - held in switzerland shortly thereafter
238:01 - the other first world wide web
238:02 - conference was held in chicago there's
238:05 - some interesting stuff about that in
238:09 - these books
238:11 - the uh books robert caius and tim
238:14 - berners-lee's book talks a little bit
238:15 - about that
238:17 - in october 1994 tim left cern and went
238:21 - to form the world wide web consortium
238:23 - and and by the end of the year windows
238:26 - 95 beta 2 with an internet browser
238:29 - was there with tcpip built in and so
238:32 - if you really think about i mean it's
238:33 - not even a whole year it's almost six
238:35 - months where the world changed forever
238:39 - and so
238:40 - at this point now money is coming into
238:42 - it up to that point it was mostly ideas
238:45 - and research but now money is coming out
238:47 - and we start seeing a transition
238:49 - so netscape
238:51 - was on the forefront of doing this
238:53 - and
238:54 - netscape basically
238:56 - took the open source product
238:58 - they started
238:59 - kind of competing just to build a
239:01 - browser but they quickly decided that
239:02 - they would go
239:03 - turn the browser and their web server
239:05 - more proprietary and try to create
239:07 - distributed computing applications using
239:10 - proprietary things that netscape would
239:12 - build unique to themselves
239:15 - and they would attack microsoft
239:17 - the moment it became clear that netscape
239:19 - was going to produce a way to to to
239:21 - develop software on mac windows and
239:24 - linux
239:25 - portably then microsoft got worried
239:27 - because then the operating system
239:28 - wouldn't matter and window microsoft put
239:31 - so much into the windows operating
239:32 - system that if the operating system
239:35 - didn't matter it would really
239:36 - tremendously threaten microsoft's
239:38 - business hence windows 95 with tcp in a
239:41 - free web browser
239:43 - so
239:44 - netscape sort of scared
239:47 - well as
239:49 - microsoft tried to buy netscape netscape
239:52 - refused to sell wanting more money and
239:54 - then microsoft vowed to destroy it
239:57 - and as microsoft was coming after
239:59 - netscape
240:01 - first netscape tried to compete
240:03 - by building better and better software
240:06 - like the javascript language which will
240:08 - meet brandon ike in a moment
240:10 - and then after that they tried to sort
240:12 - of
240:12 - switch from being the proprietary bad
240:14 - guys and go become more the open source
240:16 - good guys and that kind of blew up in
240:18 - their face and they built this open
240:19 - source mozilla which eventually became
240:21 - the mozilla foundation which eventually
240:23 - began firefox
240:26 - so now what i want to do is i want to
240:28 - you to meet two people both of whom now
240:30 - are the senior leadership at the mozilla
240:33 - foundation brendan ike who's the cto of
240:35 - the mozilla foundation but he'll really
240:37 - tell us about
240:38 - the
240:39 - 1995 where he invented javascript in 10
240:42 - days as part of netscape and then we'll
240:45 - meet mitchell baker who was the founder
240:48 - of one of the founders of mozilla and
240:51 - she will talk about how netscape
240:54 - kind of fortunes declined got purchased
240:56 - by aol and fortunes declined even worse
241:00 - and how they basically pulled the
241:02 - netscape code base out to form the
241:04 - mozilla code base which then became
241:07 - firefox codebase and the firefox of
241:09 - course had this great idea that mitchell
241:13 - will tell you about of having a search
241:15 - box
241:16 - and they made
241:18 - tons and tons of money as mitchell will
241:21 - tell you about so
241:23 - up next brendan ike of the mozilla
241:25 - foundation and mitchell baker of the
241:27 - misilla foundation
241:30 - [Music]
241:54 - do
242:05 - i was hired at netscape in april 1995.
242:11 - netscape had already launched it's 1-0
242:14 - mosaic killer if you remember mosaic was
242:16 - the big ncc mosaic was the big browser
242:18 - until netscape took over so when i came
242:20 - to netscape
242:21 - they'd been going for about a year i
242:23 - actually had an option to go in at the
242:24 - beginning i passed that up but i went in
242:26 - in time to do what i was tempted to do
242:28 - which is a programming language for
242:31 - html for web designers and programmers
242:33 - to use embedded directly in the web page
242:35 - not something
242:36 - uh
242:37 - that was like coming along at the time
242:39 - called java which was a more of a
242:41 - professional's language where you would
242:42 - write
242:43 - real code with type declarations and
242:45 - you'd have to write
242:46 - that code in a way that compiled i was
242:49 - writing something
242:50 - javascript that could be used by people
242:52 - who didn't know what a compiler was they
242:53 - were just going to load it it was like
242:54 - basic and that was really the pitch that
242:56 - we would make
242:58 - two languages not one
243:00 - analogous to microsoft's visual basic
243:02 - for c plus plus so javascript for java
243:05 - bill joy of sun actually liked that idea
243:07 - and agreed with it and he was the guy
243:08 - that signed the trademark license by
243:10 - which what i had created became
243:12 - javascript the name is total lie it's
243:14 - not really related to java so much as to
243:17 - a common ancestor c in syntax
243:20 - and and to the extent that we made it
243:22 - easy to use and
243:24 - something you could copy paste program
243:26 - or start small from scripts and grow to
243:28 - programs javascript has succeeded
243:30 - massively it was also an incredible rush
243:33 - job so there were mistakes in it
243:35 - and uh something that i think is
243:39 - important about it is that it i knew
243:41 - there would be mistakes and there would
243:42 - be gaps so i made it very malleable as a
243:44 - language and that has enabled web
243:47 - developers to make it be what they want
243:49 - it to be to project their own style of
243:52 - not just api but almost language pattern
243:54 - on it
243:55 - and
243:56 - create their own innovation networks to
243:58 - use eric von hippel's phrase or
244:00 - innovation toolkits on top of it so it's
244:02 - not a language that tries to restrict
244:03 - you to one paradigm it's a
244:04 - multi-paradigm language i mean there's
244:06 - all these things where a language comes
244:08 - out and immediately trips and falls and
244:11 - you have to sort of it's okay at the
244:12 - same time
244:13 - but there wasn't really a trip and fall
244:15 - in javascript why
244:17 - so you could say that it hasn't been a
244:19 - version too and that's true because i've
244:20 - tried to work on what might be a big
244:22 - version too that was called the fourth
244:23 - edition and that failed uh there has
244:26 - been evolution the web is all about
244:27 - evolution people don't quite see this
244:29 - while you're in the midst of it because
244:30 - it's microevolution but web pages from
244:33 - the 90s don't all render properly these
244:35 - days they don't all work right and a lot
244:36 - of them are lost and only available
244:38 - through webarchive.org
244:41 - javascript
244:42 - had enough at the beginning enough good
244:45 - parts to use crockford's phrase or
244:46 - enough genetic material from other
244:48 - languages
244:49 - you know first class functions
244:52 - prototypal inheritance from self
244:55 - the inheritance of first class functions
244:56 - from scheme is really kind of a fraud
244:59 - because scheme is different in many ways
245:01 - and i couldn't make those
245:03 - uh differences manifest i couldn't do
245:06 - the scheme thing in javascript i was
245:07 - under these marching orders to make it
245:09 - look like java i had 10 days to
245:11 - prototype it so scheme was more of a
245:15 - spiritual than an actual influence but
245:18 - first class functions are very powerful
245:19 - and they
245:21 - fit with an event handling sort of
245:22 - programming model i was inspired by
245:24 - atkinson's hypercard so that's why you
245:26 - see on click in javascript and hypercar
245:28 - had this pattern for event handlers
245:30 - called on you know on page
245:32 - down or whatever
245:35 - so
245:36 - javascript had enough good at the
245:38 - beginning to survive now if you think
245:40 - back though to the mid 90s javascript
245:43 - was cursed because it was mainly used
245:44 - for annoyances like little scrolling
245:46 - messages in the status bar at the bottom
245:47 - of your browser or flashing images or
245:50 - things that popped up windows massively
245:52 - we could have put in controls for those
245:54 - we should eventually browsers firefox
245:56 - kind of championed this led this
245:58 - automatic suppression of annoyances that
246:00 - made it all much better and with moore's
246:03 - law compounding and with javascript
246:05 - getting some evolutionary improvements
246:06 - in the standards process it became
246:08 - really quite fast enough and good enough
246:10 - in 2004 and five to get the web 2.0
246:13 - revolution that was i think
246:16 - tied in with firefox's
246:18 - retaking market share from ie and
246:20 - developers realizing there was a client
246:22 - side to the programming stack that could
246:24 - be expressive and powerful and could be
246:26 - fast enough thanks to faster computers
246:28 - mainly you must have had some training
246:30 - some kind of oh i've done a lot of set
246:32 - experiences that kind of got to the
246:34 - point where you could pull from scheme
246:36 - and
246:38 - i had implemented uh i was sort of a
246:40 - language buff when i first started
246:42 - computer science i was a math physics
246:43 - major
246:44 - originally and ended up math computer
246:46 - science when i finally got my
246:47 - undergraduate degree so i i was
246:49 - programming uh
246:51 - formal language theory uh applied to
246:54 - recognizing languages like lexical
246:56 - analysis parsers
246:59 - automatically constructed parsers from
247:00 - grammars i love that stuff because it
247:02 - was all very pretty and clean
247:04 - theoretically and it it still is it
247:06 - hasn't changed a lot there's been only
247:08 - one or two innovations since my time in
247:11 - university in the early 80s so
247:13 - what um
247:14 - what that gave me was the ability to
247:16 - quickly knock out uh you know a sort of
247:18 - a
247:19 - a language interpreter i could do the
247:21 - the
247:22 - parser and the scanner i could generate
247:24 - bytecode because netscape wanted to do a
247:26 - server-side embedding in javascript even
247:27 - though it could have been a tree walker
247:30 - something that interpreted parse trees i
247:31 - made a byte code
247:33 - for it and it was an internal bytecode
247:35 - not the java by code that's become a
247:37 - handicap for java i think
247:39 - and i knocked all that out really
247:41 - quickly because i'd done it before i've
247:42 - done it at silicon graphics to build
247:44 - sort of network monitoring tools to
247:46 - capture packets based on expressions
247:47 - over fields at the various protocol
247:49 - headers i'd done it for fun just to make
247:51 - my own languages and finally i got to do
247:53 - it really quickly
247:55 - the the speed was an issue for me it was
247:59 - partly we were all feeling like
248:00 - microsoft was going to come after
248:02 - netscape because they had tried to buy
248:03 - netscape in late 94 for too long the
248:05 - money i heard about this before my time
248:07 - at netscape but we also were in a weird
248:10 - game theory with respect to java because
248:12 - even at netscape some people thought
248:14 - well if we have java do we really need a
248:15 - second language they didn't see the
248:18 - benefit of the visual basic companion
248:20 - language for a much larger cohort of
248:23 - programmers or amateurs designers
248:26 - beginners
248:27 - to write java as to write c for the
248:30 - microsoft platform that they took a lot
248:31 - of education and greater pay it was a
248:34 - higher price proposition to get
248:36 - people gluing components together and
248:38 - designing pages and filling gaps using
248:39 - javascript as they did with basic and
248:41 - visual basic in microsoft's windows was
248:44 - cheaper and wider spread it also
248:48 - enabled this uh user innovation toolkit
248:50 - approach uh to use vulnerable phrase
248:52 - again because javascript was malleable
248:54 - because
248:55 - there were so many web designers you
248:56 - would see different schools of thought
248:58 - on how to use it emerge and this has
249:00 - become quite clear over the last 10
249:02 - years with the various javascript
249:03 - libraries and i think that's actually an
249:04 - advantage as i said earlier to
249:05 - javascript that we're not telling you
249:07 - here's the one way to write it here's
249:09 - the one true object-oriented paradigm
249:11 - here's the only way you should ever make
249:12 - a reusable abstraction it's not unmixed
249:15 - right it's hard for beginners people
249:17 - reinvent certain wheels and make
249:18 - mistakes doing it or don't like having
249:20 - to acquire a library but you see jquery
249:22 - of great power library because it gives
249:24 - people this very sweet
249:26 - query and do paradigm and again it's not
249:30 - mandatory with javascript but a lot of
249:31 - people learn that they think that is
249:32 - javascript i think jquery is a language
249:34 - or they think
249:35 - you know jquery is the tale of like the
249:37 - dog jquery is great and john rezzy used
249:39 - to work with us in mozilla and but there
249:41 - are so many good libraries out there now
249:42 - and they're actually shrinking and
249:44 - becoming more compositional which is a
249:45 - good trend so javascript by being
249:48 - malleable and
249:49 - sort of fostering user innovation i
249:51 - think has
249:52 - uh played a unique role if i had done
249:54 - something more rigid i think
249:56 - the odds are greater would have failed
249:58 - i i just can't imagine how you would
250:00 - have escaped from
250:02 - the object-oriented pattern of c-plus
250:04 - plus partly i had to because if i'd
250:06 - done classes in javascript back in those
250:09 - 10 days in may in 1995 i think i would
250:11 - have been told this is too much like
250:13 - java you're competing with java you know
250:15 - somebody at sun would have yelled at
250:16 - bill joy more than they did and it might
250:18 - have killed the deal so
250:20 - i was definitely not only under time
250:22 - constraint but under marketing orders
250:24 - make it look like java but don't make it
250:25 - too big for its bridges it's just
250:28 - this sort of silly little brother
250:30 - language right the sidekick to java but
250:32 - then you you put in primitives i snapped
250:34 - himself in here you put some primitives
250:36 - you know like closures and all those
250:38 - other things that that it's like you can
250:40 - build what you want yes and and that
250:43 - kind of went under the radar for a lot
250:44 - of people and it wasn't all even there
250:46 - in a good working order in the first
250:47 - release but over the next few years it
250:49 - became
250:50 - not only well um known uh i would say
250:53 - more standardized and well known over
250:55 - the next 10 years it became evangelized
250:57 - like crop words are the exponent of the
250:58 - closure pattern and good uses you can
251:00 - make of closures so people find the
251:02 - malleability and the expressiveness and
251:04 - the power
251:05 - compelling enough that some people
251:06 - actually resist any version two they say
251:08 - i i don't want you to
251:10 - add cliches or common special forms for
251:15 - patterns that i'm more happy writing
251:17 - myself or
251:18 - acquiring as a library myself
251:21 - you you've created an abstraction that
251:22 - implementers can do crazy things with
251:24 - right and people can rethink what the
251:26 - interpreter is really supposed to do
251:28 - they can and they can just say okay here
251:30 - comes v8
251:31 - that's right differently right
251:32 - optimizations that haven't been tried i
251:36 - knew about these optimizations because i
251:37 - had studied small talk himself
251:39 - but nobody had gotten the time and the
251:41 - money google was maybe first there were
251:44 - other efforts going on in parallel and
251:45 - apple and mozilla have kept up as best
251:47 - they can but va deserves a lot of credit
251:50 - for pushing this forward it wasn't
251:51 - quite as as first on the scene as as
251:54 - they like to claim because it was all
251:55 - coming together in 2008 but it has been
251:57 - very helpful it has shown people what
251:59 - can be done what's interesting to me is
252:00 - that you then go and put different more
252:02 - intensive workloads on the language and
252:05 - you see the there's a new va that should
252:06 - come out of somewhere it may not come
252:08 - out of google because they may have
252:10 - tired of optimizing javascript in fact i
252:12 - believe dart is a response to that by
252:14 - the principals who did v8 they want to
252:16 - do a language where they don't have to
252:17 - worry about all this crazy compatibility
252:20 - may not succeed and it also doesn't give
252:22 - javascript the next level of performance
252:25 - but i believe that level is there and
252:27 - it's still improving in performance
252:29 - much more dramatically than a language
252:30 - like java where the the gains are
252:33 - percent or a fraction of a percent on
252:34 - the standard benchmarks but a lot of
252:36 - html5 development now quote-unquote
252:38 - html5 javascript css web apis beyond
252:41 - what's in html5 is taking off you're
252:44 - seeing like zynga doing html5 only games
252:47 - it's really coming faster than some
252:49 - thought and i talked to the venture
252:50 - capitalist fred wilson of union square
252:52 - in new york said yeah it's here he
252:54 - thought it would take years it's we've
252:55 - turned that corner and so you call it
252:57 - html5 what it really means is it's the
252:59 - web stack it's the same stack you use to
253:01 - write web pages and hosted web apps you
253:03 - can write
253:04 - apps that run in your device apps that
253:06 - are maybe hosted maybe offline maybe the
253:08 - line is blurred so that you can
253:10 - associate them with a url but you can
253:12 - also take them on the plane without any
253:13 - fear that you're going to lose anything
253:15 - by disconnecting from the internet
253:18 - [Music]
253:54 - landscape is of course known
253:56 - for its netscape navigator product first
253:59 - commercial browser on the web so
254:01 - first tool
254:02 - the first generation really used to get
254:04 - on the web
254:05 - and that was successful for a while
254:07 - and then
254:08 - competition became quite stiff from
254:11 - microsoft the different way to compete
254:13 - would be by building a shared asset
254:15 - instead of netscape versus microsoft
254:17 - that netscape would gather contributions
254:20 - of volunteers and other commercial
254:23 - commercial partners you know and build a
254:25 - product that would be shared and that
254:27 - group of people knew that
254:30 - to be open source you had to be real you
254:33 - couldn't just say oh we're open source
254:35 - love us
254:36 - you really had to manage it differently
254:39 - so at the time there were six or seven
254:41 - or eight of us who were employed by
254:43 - netscape as mozilla.org staff and
254:45 - another 100 or 150 employed by netscape
254:48 - as netscape engineers building the
254:50 - netscape product
254:52 - and contributing their work to the
254:54 - mozilla open source project so we are
254:57 - all in the same buildings we all went to
254:59 - many of the same meetings but we had
255:01 - slightly different goals because
255:04 - although we call it the netscape product
255:08 - netscape had been purchased by aol
255:10 - already
255:12 - and so the client itself was diminishing
255:14 - in importance and the importance of the
255:16 - netscape client was to push traffic
255:20 - to the aol websites but we of course at
255:23 - mozilla.org were an anomaly
255:25 - because our charter was to build a
255:27 - successful open source project and so
255:30 - that worked for quite a while you know
255:32 - there were tensions
255:34 - you know these were the dark years for
255:36 - mozilla
255:37 - we
255:38 - came to understand we needed to rebuild
255:40 - our core technology
255:42 - that took a long time
255:44 - while we were doing that market share
255:46 - continued to slide
255:48 - and there was a set of tensions over
255:50 - what does it mean to run a real open
255:51 - source project
255:53 - and as it turned out there were two
255:56 - competing views
255:57 - and one view was that
256:00 - open source is phenomenal we're very
256:02 - happy that the code is out there anyone
256:04 - is very welcome to take that code and
256:06 - use it we absolutely want to build a
256:08 - large and engaged contributor community
256:12 - but all decisions and all authority will
256:15 - be held by the managed equipment group
256:17 - and we'll make those decisions as we
256:19 - think best which is of course
256:21 - to benefit
256:22 - the client we're trying to build which
256:24 - was the nesgate browser
256:26 - we at mozilla.org were convinced it
256:29 - wouldn't be successful
256:30 - that
256:33 - building a product to benefit aol only
256:37 - wouldn't generate the kind of interest
256:39 - either from individual volunteers or
256:42 - from commercial partners that we needed
256:44 - to be successful
256:45 - and that we found the difference in
256:47 - perspective from the volunteers
256:50 - made the quality of the project much
256:52 - higher they were under immense pressure
256:54 - to ship this product because the company
256:57 - needed it
256:58 - and not only was it difficult
257:00 - technically and in an engineering sense
257:02 - but we at mozilla.org were saying and
257:05 - there's these other things
257:07 - right you may think it's good enough but
257:08 - we're telling you it's not because this
257:09 - is the feedback that we're getting
257:11 - and you need to change some of the
257:14 - development processes and management
257:16 - practices
257:17 - and so they
257:19 - thought well i'm not sure what they
257:21 - thought but we experienced it as no we
257:23 - really need to keep going on the way
257:24 - that we're going to get this product
257:26 - shipped
257:27 - but unfortunately
257:30 - you know the mozilla community was
257:32 - correct because when that product
257:33 - shipped it was a failure
257:36 - that was netscape 6
257:37 - universally acknowledged as a bad
257:39 - product and pretty universally
257:41 - acknowledged as the end of the netscape
257:43 - product line you know that all those
257:45 - people that had held on and hoped
257:47 - through the netscape four days and
257:49 - waited and waited and waited for the
257:50 - update once they got it pretty much gave
257:53 - up
257:54 - so that's what we experienced
257:56 - so that certainly didn't help us that
257:58 - was unfortunate
258:00 - it did reinforce our view that
258:03 - you know our view of the world wasn't
258:04 - crazy
258:06 - and
258:08 - so we continued on
258:10 - and it was still long and slow to get
258:13 - technology and products that we liked
258:17 - and the tensions continued the
258:18 - management tensions continued you know
258:20 - the failure of netscape 6 didn't make
258:21 - anything easier and certainly for the
258:24 - the aol folks it really didn't make
258:26 - things easier either
258:28 - and we fought a lot about the ui
258:32 - i think ui is a constant source of
258:34 - tension but in our case it was worse
258:37 - because some of these fights would be
258:40 - it makes sense to aol to put something
258:42 - in the product and the interface of the
258:44 - product either a button to an aol site
258:47 - or something that has an ad in it or
258:49 - some feature that a partner is paid for
258:51 - so it generates revenue we think
258:54 - it might send people to our site you
258:56 - know some of our users might really like
258:57 - it so it all made sense from their point
258:59 - of view but if you're not building the
259:01 - aol client to benefit aol and you're
259:03 - trying to build an open source product
259:05 - that
259:06 - is used for many people then of course
259:08 - those those features are a big negative
259:10 - and so those are very fierce fights
259:13 - because because the
259:15 - management of the client group had very
259:18 - clear
259:19 - opportunities in hand that they wanted
259:22 - to
259:23 - build into their product and we were
259:25 - this small group saying no
259:27 - diametrically
259:29 - we're pretty opposed in that case and we
259:31 - would say no you can't put it into the
259:32 - core product you're welcome to have a
259:34 - build system on your own and add it in
259:35 - later and that's how we ended up doing
259:37 - these things so so we did develop a
259:39 - system for but of course it's awkward
259:41 - and you're always rubbing against what
259:43 - should go where and it turned out even
259:46 - in the very early days that the open
259:48 - source mozilla versions of the product
259:52 - got a lot more testing than the netscape
259:53 - versions and we also tried to build in
259:56 - some
259:57 - quality mechanisms that again seem
260:00 - normal today
260:01 - so you can't
260:03 - you get hired as an employee
260:05 - you don't automatically get the right to
260:07 - check your
260:08 - code into the tree right someone has to
260:11 - you know look at your qualifications and
260:13 - say
260:14 - and mozilla and the way we work we
260:16 - understand
260:18 - your coding level we understand you know
260:20 - how we work we understand if something
260:22 - goes wrong with your code you know where
260:23 - you need to be all of these things and
260:25 - that's a very difficult setting for a
260:27 - hiring manager to say well i've just
260:28 - hired you
260:30 - and you can't be as efficient as you
260:32 - think you can because there's yet
260:33 - another vetting process by this other
260:35 - group so i understand you know why it
260:37 - was difficult but on the other hand as
260:39 - an open source project if you can't
260:41 - control the quality of the code and you
260:43 - don't have any say in it you're not very
260:46 - real
260:46 - aol
260:48 - client fortunes declined and the
260:50 - netscape browser declined and declined
260:53 - precipitously after this netscape six
260:56 - and so aol was interested in laying off
260:59 - people
261:00 - uh
261:01 - and in one of the big layoffs i was
261:04 - included
261:05 - and that was seen that was in 2001
261:10 - and that was seen as
261:13 - a power struggle as well
261:15 - because by that time
261:18 - the fights back and forth about
261:20 - what we were building and who was making
261:22 - decisions we're pretty well known within
261:24 - the engineering organization it's it's
261:26 - hard for them not to be
261:27 - i mean it's true anywhere right but but
261:29 - in some cases the fights and the bugs
261:31 - are all very public as well but
261:33 - uh and and so
261:37 - so i was laid off or fired depending on
261:40 - your you know how you want to describe
261:42 - it
261:43 - and as it turned out it wasn't really
261:45 - possible to take my place and i
261:48 - continued as a volunteer
261:50 - and the netscape engineering
261:53 - organization was very clear whose
261:54 - leadership they were most interested in
261:56 - following
261:57 - and so
261:59 - we had to work out a way in which
262:02 - the
262:03 - management at
262:05 - netscape aol that remained and i worked
262:07 - out a you know sort of a way to work
262:09 - together enough
262:11 - so that they could ship the product they
262:12 - wanted to ship but that i continued to
262:14 - lead the project
262:16 - and i think that was a surprise um
262:18 - not not so much to me
262:21 - i think
262:24 - and so i worked as a volunteer on the
262:26 - mozilla project you know for a number of
262:28 - years including the years in which we
262:30 - shipped our first product which we
262:31 - called mozilla
262:33 - and which we were very proud of
262:34 - technically
262:36 - and for its day many people were
262:38 - surprised at how good it was
262:40 - but it didn't have a good user
262:42 - experience but eventually i ended up
262:44 - working on another open source project
262:46 - with mitch kapoor for a while
262:48 - and that was
262:51 - lucky
262:52 - he had started this open project and
262:53 - reached out to talk to brendan and i
262:56 - about it to learn something
262:58 - and the day that he was scheduled to
263:00 - come down and talk with us was the day
263:01 - that i was laid off
263:03 - and so it was
263:05 - an odd time
263:07 - yeah that was chandler i was preaching
263:08 - on there but oh sad
263:10 - so i i worked on that for a while and
263:12 - and mitch was always a supporter of
263:14 - mozilla even before firefox when he
263:16 - didn't like the product
263:18 - but he recognized that we were an
263:20 - important part of the ecosystem and that
263:22 - went on until 2003
263:26 - when aol decided to stop investing in
263:29 - the client
263:30 - almost completely
263:32 - and fortunately they knew that just
263:34 - killing it wasn't good
263:36 - they knew enough about mozilla and the
263:38 - name and the brand to think it would be
263:40 - good to do something with it
263:43 - and
263:45 - so eventually
263:48 - i ended up
263:50 - working with them and and they
263:52 - some of the people there knew mitch as
263:54 - well and i was working with mitch and
263:56 - they knew him and so we all you know
263:58 - spent a chunk of time trying to figure
264:00 - out what was possible
264:01 - and my partner brendan was still at
264:04 - netscape
264:06 - very eager to make a move
264:08 - and many of the key people we wanted
264:10 - were also desperate to keep working on
264:12 - mozilla
264:13 - and so we ended up getting a two million
264:16 - dollar
264:17 - seed money from aol
264:20 - and mitch was helpful with that and a
264:22 - few other things trademark name mozilla
264:25 - and the four giant servers which were so
264:27 - important to us at the time and which
264:29 - had taken us almost 18 months to get
264:32 - through the purchase cycle at aol
264:34 - and so uh i think we still have those
264:36 - boxes sitting around because they were
264:38 - so important to us at the time
264:40 - and so in 2003
264:42 - the mozilla foundation was formed
264:44 - and mitch was the first chairman
264:46 - because he had done so much and had so
264:48 - much to offer
264:50 - and
264:51 - brian balendorf and
264:54 - and uh
264:55 - guy chris blizzard who worked on mozilla
264:57 - forever and and brendan and i were on
264:59 - the board
265:00 - and aol
265:03 - understood that there were three or four
265:05 - people that would be leaving
265:07 - when they they did uh some kind of reorg
265:09 - when they closed down the client group
265:11 - and that those people would be coming to
265:12 - join us
265:13 - and of all the people that we thought
265:15 - would be most helpful at mozilla they
265:17 - all came
265:19 - that was about nine or ten so we were
265:21 - and mitch continued to support me and uh
265:23 - one other person in mozilla part-time so
265:26 - we were maybe 10 or 11 people
265:28 - and i
265:30 - and brendan and i had always felt that
265:32 - we needed employees it was exciting it's
265:34 - a little scary
265:36 - because we knew that two million dollars
265:38 - wouldn't go that far and that we had a
265:40 - lot of work to do to make ourselves real
265:43 - we were still 18 months away from
265:44 - shipping 15 months away from shipping
265:47 - firefox
265:48 - so that part was scary but it was
265:50 - immensely exciting one of the friends of
265:52 - mozilla showed up and they had a big
265:55 - lease
265:56 - and a little bit of space they could
265:57 - sublease to us so we found a funky
265:59 - little room way in the back not even a
266:02 - sink
266:03 - very odd but but we were really happy
266:05 - with it
266:06 - and we worked away on building our
266:08 - product
266:10 - at that time we made what was a pretty
266:11 - fundamental change that that was
266:13 - critical and we decided unambiguously to
266:16 - be a consumer product
266:17 - that seems obvious but when you're a
266:19 - bunch of developers it's not that easy
266:21 - and it means that you have to strip out
266:23 - a lot of the
266:24 - things that are clunky for a general
266:26 - consumer you really have to be
266:28 - determined
266:30 - that you're building for a general
266:31 - consumer not yourself and i think many
266:33 - open source projects probably don't want
266:35 - to do that and shouldn't try if you
266:37 - don't want to because you have to keep
266:38 - at it so we started doing that out of
266:41 - the blue some visual designers appeared
266:43 - from
266:44 - prince edward island in canada and so we
266:47 - started to get nice looking logos which
266:49 - we'd never had before and visual
266:51 - elements
266:52 - and then we tried to figure out what to
266:54 - do with the start page
266:56 - because we knew that
266:58 - mozilla development tools weren't the
267:00 - right answer
267:02 - and we just
267:04 - took us forever
267:06 - and we looked at all sorts of things and
267:08 - finally decided
267:10 - the one thing we knew that everybody did
267:12 - was search
267:13 - you know we'd have people who say well
267:15 - it's obvious you should have the bbc at
267:17 - least in english language versions it's
267:18 - obvious and then you know our
267:20 - engineering guy would look up and say
267:21 - well it's not obvious to my 17 year old
267:23 - daughter that that's what she wants it's
267:25 - not obvious to my son either so
267:28 - but everybody used search
267:29 - so we thought we have the search box
267:32 - maybe we should put that on the start
267:34 - page too
267:35 - make it easier maybe it be more obvious
267:37 - to people
267:40 - search
267:41 - so
267:41 - we went to talk with the search
267:43 - providers
267:44 - we had a very fruitful discussion with
267:47 - google
267:48 - i think they also saw the value of
267:51 - having a mozilla browser in the world
267:53 - they're very explicit about that and i
267:55 - believe them
267:56 - and so
267:58 - they're also open to doing a a business
268:00 - arrangement
268:02 - and so often people ask how mozilla gets
268:04 - paid and would like most businesses on
268:06 - the web
268:07 - search search and ads
268:09 - you do a search you know you'll see ads
268:12 - if you follow those ads
268:14 - revenue is generated you know it goes
268:16 - through the system and we get a little
268:17 - piece of it as do other browser makers
268:19 - so it's very similar to the business
268:21 - model on the web
268:22 - and
268:23 - we did something that i believe had
268:25 - never been done before
268:27 - which was to make sure that google and
268:29 - yahoo were
268:30 - right there next to each other like you
268:32 - don't see them next to each other you
268:34 - have to click on the arrow but they're
268:36 - there
268:36 - and today people laugh at me when when i
268:39 - say that because you only see one but
268:40 - but i negotiated that and that was an
268:43 - absolute utter i will walk away from the
268:45 - deal
268:46 - term to everyone
268:48 - because i don't think i'd ever seen it
268:49 - before
268:50 - and i wasn't
268:52 - you know if you get on a plane and you
268:53 - want a diet coke but the plane only has
268:55 - diet pepsi because that's their deal
268:56 - you're angry and if you want to diet
268:58 - pepsi and you want to coke and i
269:00 - i used that example i said i'm not going
269:02 - to have firefox users angry at us
269:05 - because they wanted one or the other you
269:07 - know you have to agree you're both going
269:09 - to be in the product but it also is your
269:10 - values right it is
269:12 - yes your values front and center yes
269:14 - because
269:16 - the choice is there we can do it
269:20 - and to not do it would be to take away a
269:22 - choice that somebody really wants and it
269:24 - matters to someone so
269:26 - so
269:27 - uh we we have that
269:28 - choice in in the search box but we still
269:30 - didn't really know what to expect so we
269:31 - shipped firefox
269:34 - and our sense that we were onto
269:35 - something turned out to be far more too
269:37 - even than we knew we'd seen a
269:40 - rise in interest from 0.8 and 0.9 that
269:43 - was pretty noticeable but once we hit
269:45 - the release version it just exploded
269:48 - and part of that was it was the perfect
269:50 - product this time we had a product at
269:52 - the right time in the market the
269:54 - internet capabilities had grown enough
269:56 - people could actually download a browser
269:57 - easily
269:59 - and more people had bandwidth and
270:00 - ability to do so and a comfort level to
270:02 - try it so that was good we had a
270:04 - beautiful product
270:06 - and
270:07 - it was an important product
270:10 - and the alternative was horrendous and
270:12 - dangerous and awful and so all of that
270:14 - combined to create this giant excitement
270:17 - and so firefox market share climbed by
270:20 - you know a percentage point immediately
270:22 - and started moving in these huge numbers
270:24 - so it was a completely viral storm with
270:27 - nothing driving it other than you know
270:29 - the product and the need itself
270:31 - and so that took everyone by surprise
270:33 - you know we were hoping to
270:36 - be able to generate a few million
270:38 - dollars to support ourselves for the
270:39 - next year you know we had 10 or 11
270:41 - employees you start to add that up so we
270:43 - were hoping to make enough money to do
270:45 - that
270:46 - and it turned out you know we generated
270:48 - that amount of money before the end of
270:49 - the year
270:50 - the six weeks or eight weeks or whatever
270:52 - it was before the end of the year and so
270:55 - things actually things got even more
270:57 - stressful and more hectic at that point
270:59 - because now you've kind of got the
271:02 - proverbial tiger by the tail we're still
271:05 - 12 people right so that immediate need
271:08 - to grow and the sense of pressure and
271:10 - stress combined with elation and success
271:13 - is probably you know
271:15 - i don't know maybe it's like having a
271:16 - child right but it's it's that it's that
271:18 - combination doesn't immediately get
271:20 - easily to be anonymous
271:22 - purpose yes yes that's for sure we
271:25 - certainly see that
271:26 - and so by the end of
271:28 - firefox shipped in 2004 just actually we
271:31 - just passed the eight year anniversary
271:34 - and you know by the end of 2004 it was
271:36 - pretty clear that we are a different
271:38 - organization we were we were
271:41 - i would say still struggling with a
271:42 - different set of problems
271:44 - but we had changed the nature of the
271:47 - problems really quite fundamentally and
271:49 - you know we've done so in a way that
271:52 - that our users loved
271:53 - by
271:55 - 2005 we were in a really different world
271:59 - where
272:00 - we began to be able to actually
272:03 - influence others and that's always been
272:05 - the goal i mean market share is nice
272:08 - and it's nice when people love your
272:09 - product market share is a validation
272:11 - that you produce the right thing so
272:12 - that's awesome on its own but the more
272:14 - important i'm maybe not more important
272:16 - equally important goal is to be able to
272:19 - influence
272:21 - not only ourselves but others in the
272:23 - industry so that we start to see more of
272:25 - the things that we care about
272:28 - [Music]
272:47 - so that was a series of action-packed
272:49 - videos uh brendan and mitchell have done
272:52 - a great deal and if you look at the
272:53 - current
272:54 - html5
272:56 - javascript
272:58 - really some of the work that brendan and
273:00 - mitchell have done have created this new
273:03 - world that we live in right now with
273:05 - these highly interactive applications
273:07 - javascript ajax it can really all trace
273:09 - its
273:10 - moments back to
273:12 - its creational moments back to these
273:14 - folks who a created the clever
273:16 - technology and b fought to keep it from
273:19 - becoming too proprietary and so a lot of
273:21 - people
273:22 - gave up on say their own personal
273:24 - benefit to to believe in a cause that
273:27 - was the greater good of society through
273:30 - open source
273:31 - now the thing to also think about just
273:33 - kind of in the back your mind is
273:35 - if it wasn't for microsoft would
273:37 - netscape have been successful in its
273:39 - original strategy to make the web and
273:41 - both servers and the clients make them
273:44 - proprietary
273:46 - they were going to sell web browsers
273:47 - they were selling web browser from 70 to
273:49 - 100 you used to be able to go to a store
273:51 - and buy a web browser your your computer
273:53 - didn't come with a browser
273:55 - as a matter of fact the first time that
273:57 - microsoft put the browser in with their
273:59 - operating system they got sued for it
274:02 - but by microsoft trying to catch up they
274:04 - had to give their browser away free
274:06 - which made it impossible for netscape to
274:08 - charge for the browser and so in some
274:10 - ways not that microsoft was trying to
274:12 - make the world safe
274:14 - but they basically blunted the
274:17 - blunted put hundreds of millions of
274:19 - dollars into blunting netscape strategy
274:22 - and making sure that well they didn't
274:24 - make it but it the net result was the
274:26 - creation of firefox in mozilla and a
274:28 - much more and world wide web consortium
274:31 - and a much more fair marketplace
274:33 - so the world wide web consortium
274:35 - it was created in uh
274:37 - october of 1994
274:41 - cern
274:42 - made a conscious decision even though it
274:44 - knew that the web had been created there
274:46 - that the sort of future curation
274:48 - of the web and what the web meant was
274:50 - not something that a physics lab should
274:52 - take on
274:53 - and so tim berners-lee
274:55 - went to mit
274:57 - mit welcomed him with open arms they
274:59 - funded him they helped him create the
275:00 - world wide web consortium and have done
275:02 - a wonderful job in leading the charge in
275:05 - defining the standards that that me make
275:09 - that that that define the standards that
275:11 - define
275:13 - what html is what css is etcetera
275:17 - now in october 1994 there was no way to
275:19 - know if this was going to be successful
275:21 - again
275:22 - it was somewhat of a reaction to
275:23 - netscape who had this sort of like you
275:25 - know
275:26 - bunker mentality the netscape was going
275:28 - to take it all over and own it and push
275:30 - every all these open people away
275:33 - tim and mitchell and joseph and all
275:35 - these people did not want that to happen
275:37 - they felt it should be free for
275:38 - everybody and open and many browsers and
275:41 - many servers and everything should
275:42 - interoperate and standards were the key
275:44 - to that and the worldwide web consortium
275:45 - was going to be the vehicle through
275:47 - which that happened
275:49 - but they didn't have any power compared
275:50 - to netscape and netscape had all the
275:52 - money but
275:53 - ibm and microsoft were not particularly
275:56 - fans of netscape either and so they
275:58 - early on changed joined the world wide
276:00 - web consortium and gave it enough
276:02 - credibility to eventually sort of take
276:04 - over uh in terms of being very respected
276:08 - and the standards produced by the world
276:09 - web consortium are high quality and very
276:12 - respected and
276:14 - and they're they're guiding their
276:16 - shining light to keeping the web safe
276:19 - for the rest of us and let proprietary
276:21 - companies do their proprietary thing but
276:23 - the world wide web consortium is is a
276:25 - real important part of today's web
276:30 - and so we finally come to the point
276:31 - where you can assume the web where the
276:34 - web is just there there was a bunch of
276:35 - browsers there was a bunch of servers
276:36 - there were some open source stuff and
276:38 - non-open source stuff
276:39 - and um and and i want to briefly
276:42 - introduce you to tim berners-lee this
276:44 - footage was taken by richard wiggins not
276:46 - me
276:47 - um caught him at a conference and he's
276:50 - only we only got about a minute of his
276:51 - video
276:53 - last month i was off in
276:56 - boston for the fourth annual world wide
276:58 - web conference and i had the opportunity
276:59 - to talk to the inventor of the world
277:01 - wide web tim berners-lee and i asked him
277:03 - a little bit about where we going with
277:05 - this web stuff and we have just a little
277:07 - bit of footage from tim telling us where
277:09 - that's going to be
277:16 - you didn't see nothing yet but you wait
277:17 - until people
277:18 - assume the web when the web becomes
277:19 - something you can assume
277:21 - when the web or the infrastructure is
277:23 - all
277:24 - laid down or you have an information
277:26 - space then it will be time for the next
277:28 - revolution and who knows what that will
277:29 - be it's hard to imagine a greater
277:31 - revolution than what we've seen i mean i
277:33 - go to the smallest places and
277:35 - everybody's putting up a web page right
277:37 - the web could only take place the
277:38 - revolution the web revolution could only
277:40 - take place because the internet which
277:42 - had been a quieter smaller revolution
277:44 - but that had been an internet itself
277:46 - quietly
277:48 - being deployed throughout the world had
277:49 - happened because the internet was
277:50 - something people would assume
277:52 - the web revolution could take place when
277:54 - the web is something you can assume then
277:55 - maybe a cultural revolution a nicer
277:57 - cultural revolution any cultural
277:59 - revolution perhaps or maybe we'll find
278:01 - ways of doing things better than we
278:02 - hadn't imagined
278:05 - pretty neat rich one of the things that
278:06 - i i liked about it was he he just said
278:08 - we're gonna his idea was the next step
278:10 - is something completely different a
278:12 - cultural revolution is compared to just
278:14 - a little more technology i think you can
278:16 - see that tim berners-lee is a real
278:17 - bright guy with a real strong vision of
278:19 - the future and a real deep commitment
278:22 - to the the web and the internet being a
278:25 - agent of change
278:27 - in the world
278:28 - and uh and i think that it's going to
278:30 - continue to be that unless
278:33 - um
278:34 - proprietary companies can get an upper
278:36 - hand and so it's a it's really incumbent
278:38 - on all of us to protect
278:40 - the freedom of the internet and there's
278:42 - there's believe me there are
278:44 - organizations that think they should run
278:46 - the internet and the web they just are
278:49 - they never have stopped
278:51 - so we're at the point where the web is
278:55 - all here it's quite amazing and before
278:58 - we move on i want to i want to
278:59 - characterize just a little bit about the
279:01 - people you've met so far and talk about
279:04 - some of the common common things that
279:06 - that they
279:09 - they have between them and in a way this
279:11 - i got the book the wisdom of crowds here
279:12 - one of my favorite books
279:16 - each one of these people when you listen
279:17 - to them talk they would quite often talk
279:19 - about all the other people doing all the
279:21 - other work and and and they rarely
279:23 - consider themselves in any way heroes
279:25 - they rarely consider themselves as the
279:27 - great innovators they always see
279:29 - themselves as part of a collective
279:31 - curiosity and there were many things
279:33 - that i haven't told you about that were
279:36 - curious explorations that helped inform
279:39 - it and
279:40 - and this was really research and you
279:42 - know until sort of the late 90s it was
279:44 - just a question of how to do it
279:47 - and at some point
279:49 - after the late 90s it switched to
279:52 - what to do with it and at that point
279:55 - we have a whole different group of
279:57 - people that start
279:58 - really entering the world um and and one
280:02 - that's one of the earlier ones and and
280:05 - has benefited greatly from it is jeff
280:07 - bezos and he's the founder of amazon.com
280:10 - and
280:11 - if you listen to jeff you will hear that
280:13 - he talks very differently he comes at it
280:15 - from a business perspective
280:17 - he's not necessarily trying to make the
280:18 - world a worse place he's trying to make
280:20 - the world a better place the fact that
280:21 - you can get you know all these books
280:23 - like the next morning that's kind of
280:25 - cool um so what amazon does is really
280:28 - wonderful it's it's more efficient for
280:29 - society it's economically beneficial
280:32 - but he has a profit in mind he is saying
280:34 - this web exists browsers exist protocols
280:38 - exist how can i take best advantage of
280:40 - it
280:41 - uh richard wiggins caught up with jeff
280:44 - in 1997
280:47 - so just look at how smart this guy was
280:50 - in 1997.
280:53 - everyone else figured this out much
280:54 - later but jeff bezos is a really really
280:57 - bright person so here's jeff bezos
281:00 - hi there who are you i'm jeff bezos and
281:04 - what is your claim to fame
281:05 - i'm the founder of amazon.com
281:07 - where did you get an idea for amazon.com
281:10 - well three years ago i was in new york
281:12 - city working for a quantitative hedge
281:14 - fund when it came across the startling
281:16 - statistic that web usage was growing at
281:18 - 2300 a year so i decided i would try and
281:22 - find a business plan that made sense in
281:24 - the context of that growth and i picked
281:26 - books as the first best product to sell
281:28 - online for making a list of like 20
281:30 - different products that you might be
281:31 - able to sell and books were great as the
281:34 - first best because books are incredibly
281:36 - unusual in one respect and that is that
281:38 - there are more items in the book
281:40 - category and there are items in any
281:42 - other category by far music is number
281:44 - two they're about 200 000 active music
281:47 - cds at any given time but in the book
281:49 - space they're more than three million
281:51 - different books worldwide active and
281:53 - imprint at any given time across all
281:54 - languages what more than one and a half
281:56 - million in english alone
281:58 - so when you have that many items you can
282:00 - literally build a store online that
282:03 - couldn't exist any other way and that's
282:05 - important right now because the web is
282:07 - still an infant technology basically
282:09 - right now if you can do things using a
282:11 - more traditional method you probably
282:13 - should do them using the more
282:14 - traditional method
282:16 - what kind of inventory do you keep
282:18 - we inventory uh the best selling books
282:21 - at any given time we're inventorying in
282:23 - our own warehouse only a couple of
282:25 - thousand titles and then we have we do
282:27 - almost in time inventory for another
282:29 - four hundred thousand titles or so we
282:31 - get those from a network of electronic
282:33 - we
282:34 - order electronically from a network of
282:36 - wholesalers and distributors we order
282:38 - those today they're on our loading dock
282:40 - the next morning
282:42 - then for another
282:43 - 1.1 million titles we get those directly
282:46 - from 20 000 different publishers and
282:48 - those can take a couple of weeks to get
282:50 - and then
282:51 - the uh there are a million out of print
282:54 - books in our catalog we have a calendar
282:56 - two and a half million books all
282:57 - together those million out of print
282:59 - books some of them we can get and some
283:00 - of them we can't
283:02 - but we find them uh if we can and then
283:04 - we ship them to our customers we do kind
283:06 - of a search on those
283:08 - what's almost in time inventory almost
283:10 - in time inventory is the phrase we use
283:12 - to describe a whole selection of books
283:15 - that we offer it's basically the things
283:16 - that are you know below the 2000
283:19 - best-selling book up to the 400 000
283:22 - bestseller book those are titles that we
283:24 - can get from a network of more than a
283:26 - dozen different wholesalers so if a
283:28 - customer orders a book from us today we
283:30 - order that book from our wholesalers
283:32 - today and that book shows up on our
283:34 - loading dock the next morning
283:36 - and then we can ship it to the customer
283:38 - they say one of the toughest things to
283:40 - do on the internet is to capture mind
283:42 - share what was your secret how did you
283:43 - do that yeah
283:45 - even more generally i agree with you
283:47 - that you know capturing mind share on
283:49 - the internet is extremely difficult even
283:51 - more generally it's the late 20th
283:53 - century not just the internet you know
283:54 - capturing attention attention is the
283:56 - scarce commodity of the late 20th
283:58 - century and
284:00 - one of the ways that you can do that and
284:02 - it's the way that we did it was by doing
284:03 - something new and innovative for the
284:05 - first time that actually has
284:07 - real value for the customer that's a
284:10 - hard thing to do but if you do do that
284:12 - then newspapers will write about you
284:14 - what you're doing customers will tell
284:16 - other customers and you'll get a huge
284:18 - word of mouth fan out and and that can
284:21 - really drive and accelerate businesses
284:22 - and that's what happened with us in the
284:24 - first year of opening amazon.com to the
284:27 - public we didn't do any paid advertising
284:29 - and all of our growth was fueled by word
284:31 - of mouth and media exposure
284:34 - i saw a little ants at the bottom of the
284:36 - column of the new york times that was
284:37 - our very first advertising um we don't
284:40 - do that anymore but at the very very
284:41 - beginning we did little tiny ads at the
284:44 - bottom of the front page of the new york
284:46 - times
284:47 - i thought that was very clever it's sort
284:48 - of using a url as a macro because i read
284:51 - and it expands we're a bookstore click
284:54 - here right that's a great way to think
284:56 - of it and it worked very well
284:58 - apparently i don't know you know the
285:00 - problem with that kind of advertising is
285:02 - it's extremely difficult to track
285:04 - um
285:05 - put a different url for every uh
285:08 - that's the problem is you want people to
285:09 - start to learn your url so you don't
285:11 - want to actually use a different one and
285:13 - it's very
285:15 - easy one of the great things about
285:16 - online ads we do advertising today in
285:19 - maybe 40 different uh on
285:22 - different websites we do banner ads and
285:25 - that advertising is very easy to track
285:27 - in terms of knowing how effective it is
285:29 - so we know for each piece of creative in
285:32 - each venue not only how many
285:34 - click-throughs we get but how many
285:35 - sell-throughs we get how many dollars of
285:39 - revenue it generates per ad dollar spent
285:41 - on that creative in that venue and that
285:44 - is a sort of a marketer's uh you know
285:46 - nirvana in a certain sense
285:49 - well it's an exciting place to be on the
285:51 - web right now oh it absolutely is i mean
285:53 - it's just incredible this is what's
285:55 - really incredible about this is that
285:56 - this is day one this is the very
285:58 - beginning this is the kitty hawk stage
286:01 - of electronic commerce we're moving
286:03 - forward in so many different areas and
286:05 - lots of different companies are as well
286:06 - in the late 20th century it's just a
286:08 - great time to be
286:10 - alive you know we're going to find out
286:11 - that
286:12 - i think a millennia from now people are
286:14 - going to look back and say wow the late
286:16 - 20th century was really a great time to
286:18 - be alive on this planet
286:21 - so
286:22 - if you're a stockholder of amazon i
286:25 - think you're in good shape because he's
286:26 - a bright fella and he's always looking
286:28 - for how to really do the right thing and
286:31 - you know give us products that we really
286:33 - like now
286:35 - in this we sort of evolve the modern
286:37 - internet and and much like jeff jeff
286:39 - said that investment was growing at 3
286:42 - 000 a year or something like that
286:45 - there was this mania in 96 97 98 where
286:49 - people just bought and bought and bought
286:51 - and the notion that communications was
286:52 - going to be so valuable led to
286:55 - in the sense an overbuilding of the
286:57 - fiber optic plan we have
286:59 - a massive amount of fiber optic in the
287:01 - ground right now and our ability to send
287:04 - more data through the existing fibers by
287:06 - just upgrading the equipment at the two
287:07 - ends that's growing very rapidly as well
287:10 - and so we're in this really weird world
287:12 - now
287:13 - where a fiber optic between ann arbor
287:16 - and chicago 180 miles
287:18 - is not that much more expensive
287:21 - than a piece of copper wire
287:24 - that goes 30 miles
287:26 - in 1960
287:28 - and so
287:30 - distance is less and less important in
287:33 - the internet it's why long distance
287:35 - phone calls don't cost any money anymore
287:37 - because long distance and local are not
287:38 - that different because there's so much
287:40 - fiber in the ground but just one thing i
287:42 - want you to think about and wonder about
287:44 - is
287:45 - will we run out
287:48 - the we're living off of the overbuilding
287:51 - that happened in the late 90s and they
287:53 - put so much in and they've been able to
287:55 - upgrade it so effectively
287:57 - but we might run out and where will the
287:59 - money come from to dig the next set of
288:01 - trenches to put the next round of fiber
288:03 - in uh we'll have to see
288:06 - so
288:06 - if we take a quick look at this is a
288:09 - graph of the growth of the of the
288:12 - servers on the world wide web
288:14 - and if you take a look we start in 1990
288:18 - with one web server december 1990 uh
288:21 - with tim berners-lee having one web
288:23 - server
288:24 - and then it sort of doesn't grow and
288:25 - then you sort of see kind of like this
288:27 - take off in the last two years last late
288:30 - two years the 1990s where you go up to
288:32 - about uh you know 20 to 30 million uh
288:36 - you know from what i don't know
288:38 - 1996 is 200 less than a quarter of a
288:41 - million dollars and unless the quarter
288:42 - of a million hosts
288:44 - you see the uh kind of the crash
288:46 - the boom
288:47 - and the crash where it wasn't growing
288:50 - and then you sort of see another new
288:52 - graph which is really this is when
288:54 - everybody had to be on the internet
288:56 - every little store started being on the
288:58 - internet every web one had to be a web
289:00 - server this was kind of the big ones
289:02 - coming on and this was sort of like the
289:04 - flame out of the exuberant growth of the
289:06 - late 90s and this exuberant growth gets
289:10 - so exuberant that it really changes the
289:12 - stock market in the united states and
289:15 - the rest of the world to the point where
289:17 - you know from the early 90s to 2000 was
289:20 - the longest period of expansion
289:23 - and
289:24 - there's a lot of factors for this but
289:26 - one of the factors is
289:27 - as we began to use communication and
289:29 - computation to make
289:31 - commerce more efficient
289:34 - that triggered a great deal of growth it
289:37 - also triggered over speculation right
289:39 - and so the kind of um
289:42 - the uh this part here the the crash the
289:44 - dot-com crash was a bit of the over
289:47 - speculation working its way out probably
289:49 - if you know if they hadn't
289:50 - overspeculated it would go like this
289:51 - instead but it can't be like that you go
289:54 - crazy crazy crazy crazy crazy oops
289:58 - and then we sort of had a crappy economy
290:00 - for a while after that but again the web
290:03 - the internet and all the technology that
290:04 - i just talked about
290:06 - really put a stamp on the entire world's
290:09 - economy in the 1990s
290:12 - so i could go on and on and on and on
290:16 - about this stuff open source is a big
290:19 - part of this um i will put links up for
290:23 - uh these videos that i've got these are
290:26 - three open source luminaries that i've
290:28 - interviewed uh richard stallman is the
290:30 - free software foundation
290:34 - the gnu which is much of unix utilities
290:37 - are written this way the compilers are
290:38 - written this way
290:40 - he is a a tremendous advocate for open
290:42 - source software
290:44 - also we meet brian bellandor from the
290:47 - apache foundation and the apache
290:49 - foundation was formed
290:51 - based on the web server that was created
290:53 - at ncsa became the first web server that
290:56 - was the apache web server so that
290:58 - lineage goes all the way back to joseph
290:59 - harden and the team at ncsa and then
291:02 - rasmus lierdorf is the inventor of php
291:04 - in one of the many very popular web
291:07 - programming languages for building
291:08 - websites and so i'll put the links up
291:10 - for these and you can take a look at
291:12 - them
291:13 - [Music]
291:40 - we got our start in the early days of
291:42 - the web as a group of disaffected
291:44 - webmasters who were using a piece of
291:46 - freely available web software but i i
291:49 - had difficulty with it we were fixing
291:51 - bugs we were sharing these bug fixes
291:53 - with each other like a baseball trading
291:55 - cards if you will these these patches as
291:57 - it's called and uh one day we discovered
292:00 - the group that put out the web server
292:01 - that we were using uh basically folded
292:04 - when all their developers left to go
292:05 - join a brand new company called netscape
292:07 - so a bunch of us decided that hey we're
292:09 - dependent upon this software we don't
292:11 - want to become full-time web server
292:13 - developers but we want to be able to to
292:16 - to use this thing that we've had for
292:17 - free and be able to prove it and all
292:19 - that kind of stuff
292:20 - we looked at the license of the code and
292:22 - the license said here's the software do
292:24 - whatever you want with it uh don't blame
292:26 - us when it breaks right uh and uh we
292:28 - said hey that's a pretty good bargain
292:30 - why don't we pass the same bargain on to
292:31 - the next group of people right uh so we
292:34 - formed a a mailing list right uh and
292:36 - this was mostly again webmasters and
292:39 - people working at some early internet
292:41 - service providers or or website design
292:44 - companies or places like amazon or the
292:46 - internet movie database
292:48 - and we combined our patches together and
292:51 - decided to call it a apache server for
292:53 - that reason
292:55 - and uh it went forward and really the
292:57 - model of how we worked was based upon
293:00 - kind of us as a group as peers proposing
293:03 - ideas you know vetting each other's
293:05 - ideas and patches and fixing bugs you
293:08 - know as a group as a team
293:10 - none of us had met in person well some
293:11 - of us had met but as a as a group we
293:13 - didn't meet in person until 1998 really
293:16 - three years after we got our start and
293:18 - long after by the way we'd become the
293:20 - most predominant web server product
293:22 - on the planet um and yet at this time
293:25 - still no money no dime not direct to us
293:27 - from this piece of open source software
293:29 - but plenty of us you know
293:31 - made our living off of building things
293:33 - on top of this piece and that's really
293:35 - the story i think of of kind of
293:36 - successful open source projects writ
293:38 - large which is
293:40 - people working together on on common
293:42 - technologies to solve common problems so
293:44 - they can go off and make money on other
293:46 - places or so they can have fun they can
293:47 - try new ideas they can you know uh be
293:50 - experimental right um and that's that's
293:52 - really the same story of apache and of
293:55 - linux and all these other open source
293:57 - projects it turns out to be not that
293:58 - hard to to be able to work together when
294:00 - people have the same common goal which
294:02 - is
294:02 - let's build a product that that does all
294:04 - this great stuff um
294:06 - one thing that we did do that made it
294:09 - easy to make some of these decisions was
294:10 - to have a very uh modular api which made
294:14 - it easy for us to be able to say hey if
294:16 - you want that special cool feature do it
294:18 - as a separate thing and and make it
294:20 - successful and we'll decide whether to
294:22 - bring this into the product once it's
294:24 - become successful or not right another
294:26 - key thing that plays into this that is
294:29 - true of all open source projects is that
294:31 - an open source license like we had on
294:33 - ours uh that linux has etc carries with
294:37 - it something called the right to fork
294:39 - which means that if i were to go all you
294:41 - know colonel kurtz on on the project and
294:43 - started saying we're going to go here
294:45 - you know and no one else wanted to
294:46 - follow well all of those other people
294:48 - could decide to pick up the code and go
294:50 - start a different project somewhere else
294:52 - you know if they couldn't kick me out
294:53 - which is probably what they would have
294:54 - tried to do first right
294:57 - this right to fork you know means that
294:59 - you don't have to have any tolerance for
295:01 - dictators you don't have to deal with
295:03 - people who make bad technical decisions
295:05 - uh uh you know you can take that future
295:08 - into your hands and and if you find a
295:09 - group of other people who agree with you
295:11 - you can go on and create a new project
295:13 - around it
295:14 - so i think that
295:15 - rule that right to fork limits the kind
295:17 - of excesses that we see whenever we
295:19 - start to talk about how do groups make
295:21 - decisions and and conflict arises how do
295:24 - you deal with that conflict and it means
295:26 - that you
295:26 - your style of leadership isn't so much
295:29 - one of control and plotting you know
295:31 - moves ahead of time but instead one of
295:33 - um
295:34 - being able to to get people on your side
295:36 - convince them that that you're the
295:38 - you're going to value their efforts
295:39 - value their the the contributions that
295:41 - they make
295:43 - [Music]
295:58 - and up next we're going to start digging
295:59 - into how this all works rather than what
296:03 - it is uh how it came to be so we're
296:05 - going to talk about what it is rather
296:06 - than how it came to be and
296:09 - and so
296:10 - thank you for your time so far and i
296:12 - look forward to seeing you at the next
296:13 - lecture
296:18 - [Music]
296:30 - oh oh hi sorry i was uh
296:33 - i was in the forums
296:35 - i guess it's uh time for this week's
296:37 - video
296:38 - so uh
296:40 - this week we're moving from history to
296:42 - technology and and in a sense we're
296:44 - gonna tell the same story again
296:47 - uh you know we'll sort of start at the
296:49 - beginning but we're going to start from
296:50 - the bottom and work upwards so since
296:51 - we're kind of talking about the same
296:53 - things
296:54 - um but just from a more technical
296:56 - perspective don't worry you'll be fine
296:58 - um we're not going to over there's no
297:00 - math i promise there's no programming
297:02 - don't worry about that so of course i
297:04 - appreciate ieee computer magazine who i
297:06 - write for to let me use the articles
297:09 - that are associated with some of the
297:10 - videos
297:11 - as well as the folks from
297:13 - open michigan who have helped me so i'm
297:16 - gonna say
297:17 - no hang on got a phone call i'll be
297:19 - right back
297:21 - okay well that's been sent sorry for
297:23 - that interruption um again i thank
297:25 - everybody for the use of the copyright
297:27 - materials um part of my hidden agenda in
297:30 - this class is that you will be able to
297:33 - look at this xkcd comic and you'll
297:36 - understand the humor so i'm going to
297:37 - stop for a moment and let you look at it
297:39 - and see if you get the humor
297:48 - okay so maybe you did maybe didn't but
297:51 - hopefully by the time we're done you'll
297:53 - have a better chance of getting the
297:54 - humor
297:55 - so if you recall
297:56 - the most academics throughout the 60s
298:00 - 70s and 80s the best they had access to
298:03 - was this store and forward networking
298:05 - where you would send a message and it
298:06 - would go into a computer and it might
298:08 - sit for some time then it would find its
298:10 - way across on a network it would sit for
298:12 - a little while longer find it and and
298:14 - hop and there's these multiple hops we
298:17 - call these hops and each of these would
298:19 - be a couple hundred miles per house and
298:21 - to go from say uh michigan to stanford
298:24 - there might be 15 or 20 hops cops are as
298:28 - much defined by geography where we're
298:30 - all trying to
298:31 - optimize the cost of these long distance
298:34 - connections
298:35 - so the thing that really characterized
298:37 - store and forward networking was that
298:39 - there wasn't a lot of sharing one
298:42 - message was being sent across one of
298:44 - these links at a time and all the other
298:46 - messages just kind of waited in time in
298:48 - line
298:49 - now that the the innovation that
298:51 - happened
298:52 - in the research networks
298:54 - in the 60s through the 80s
298:57 - ultimately embodied in the arpanet was
298:59 - the fact that they were going to be
299:01 - packet networks
299:02 - first how do we share one link
299:04 - so that a long message doesn't clog it
299:07 - up and how do we deal with outages more
299:09 - dynamically
299:10 - with the idea that
299:12 - eventually you could send a packet
299:14 - across the country and back into a
299:16 - computer and back out maybe a half of a
299:18 - second and that was seen as something to
299:20 - do rather than
299:22 - somewhere between 10 minutes and a day
299:24 - or two
299:26 - so how to do this efficiently it was a
299:28 - research project and it was a research
299:30 - project that lasted almost 20 years well
299:33 - 20 years and
299:36 - 20 or more years and and it the one of
299:39 - the neatest things about this is they
299:40 - were able to throw it away and rewrite
299:42 - it a bunch of times so that they could
299:44 - put something in production see its
299:47 - flaws see what was good about it then
299:49 - they had the money from darpa to throw
299:52 - it away and rewrite it now by the late
299:55 - 1970s it had you know 100-ish computers
299:58 - on it here's a picture and these are not
300:01 - the schools these are the computers
300:04 - these are you know listing all of the
300:06 - computers that are there
300:09 - and so
300:10 - the engine the the innovation that they
300:13 - spent 20 years perfecting was the notion
300:16 - of packet swishing so how can we simply
300:19 - move data simultaneously across the
300:21 - connection
300:22 - and the essential brilliant idea is
300:26 - break the message into packets
300:28 - and again to sort of review here i have
300:31 - a message and i have postcards that only
300:34 - can handle 10 characters and i'm going
300:35 - to send
300:36 - this hello there have a nice day message
300:38 - to daphne in california
300:41 - and so i have three 10 character
300:43 - postcards i basically put a from address
300:46 - and a two address on each postcard
300:48 - and a sequence number on each postcard
300:50 - one two and three and i put ten
300:52 - characters on each and then i stick them
300:54 - in my mailbox i just put them in
300:56 - put the sign up and then i wait
300:59 - now
301:00 - let's just say
301:02 - um you know that the the post office
301:05 - person comes and picks this uh this
301:07 - first one up and uh it goes to chicago
301:10 - from a minnesota mini from michigan and
301:13 - then it goes to omaha goes to denver and
301:15 - then the second one kind of falls on the
301:18 - floor and it ends up going to charlotte
301:20 - north carolina and then they're like why
301:22 - is this here and then they sent it to
301:23 - atlanta to get checked and then they
301:25 - make sure and and this one goes and
301:28 - number three ends up going to st louis
301:31 - and then tulsa and then colorado
301:33 - and this one gets routed back to
301:35 - charlotte because they weren't sure why
301:36 - they sent it to them in the first place
301:39 - and then they sent it to memphis
301:40 - tennessee and then this one makes it to
301:42 - california and then this this other one
301:45 - sort of goes to phoenix and this one
301:48 - finally gets to dallas texas and this
301:50 - other one goes finally and then this
301:53 - third one goes to tucson arizona and
301:55 - then las vegas nevada and finally makes
301:58 - it right so these poor little postcards
302:00 - that i put in they have each a different
302:02 - journey right it's a little adventure
302:05 - for each of the postcards that they go
302:07 - through and so
302:10 - we don't i don't see how this works on
302:12 - my end i put in three postcards i
302:13 - numbered them one two three but on the
302:15 - far end in california daphne opens her
302:18 - mailbox and has scribbling all over her
302:20 - mailbox oh the shame no actually get rid
302:23 - of the scribbling so daphne opens up her
302:26 - mailbox and she doesn't know how these
302:28 - packets got there ivy postcards how they
302:31 - got their outcomes the first one she
302:32 - goes oh looks like i got a message from
302:34 - chuck but i've only got part of it then
302:36 - out comes the second one shortly
302:37 - thereafter and then after a long period
302:39 - of time
302:40 - finally the third one comes out but it's
302:42 - actually the second one and now she
302:44 - understands that she's got the entire
302:45 - message and she reassembles it and away
302:47 - we go and so this is the basic notion of
302:50 - how
302:51 - all those postcards can share the
302:53 - infrastructure all they can all be
302:55 - invited at the same time they can take
302:57 - different paths you don't have to
302:58 - connect them all together like trains
303:00 - basically
303:03 - and and this led to a shared network
303:06 - infrastructure and so the computers that
303:09 - were in a store and forward network went
303:11 - from sort of big powerful computers with
303:13 - disk drives to really tiny computers
303:15 - with a single purpose of forwarding
303:17 - packets
303:18 - rather than long storm storage of
303:20 - message and so so the the store and
303:23 - forward had
303:24 - long-term storage of messages in the
303:27 - routers so the
303:28 - but i mean not in the wrappers in the
303:30 - store and forward the old one long-term
303:32 - storage was somewhere in the network but
303:34 - this was only short-term right
303:36 - short-term storage short-term storage
303:38 - and so when a packet comes out it simply
303:41 - has to find its way through a series of
303:43 - cops it still hops and it's still
303:46 - connections but basically it has to find
303:48 - its way across the internet and then we
303:51 - would take whole campuses
303:52 - like university of michigan say or
303:54 - stanford for example
303:56 - and then we'd have sort of various kinds
303:58 - of local networks on those campuses and
304:00 - computers on the campuses and servers
304:02 - and various things and they would route
304:04 - all their packets all their data out to
304:06 - the internet and then the packets would
304:08 - find their way across the internet and
304:09 - then we might have a home connection as
304:11 - well that might connect and so the
304:13 - shared shared
304:14 - network infrastructure focuses
304:17 - only on packets not reliability or
304:19 - anything else
304:25 - so this notion of hops didn't go away as
304:27 - a matter of fact i don't know how many
304:29 - hops it took to get from ann arbor to
304:31 - palo alto in
304:32 - using bit net
304:35 - i'm going to guess it might have been
304:37 - 16 or 20 and these days it takes 16 or
304:39 - 20 hops the difference is is in the
304:41 - internet the 16 or 20 hops happens in a
304:44 - hundredth of a second or a tenth of a
304:45 - second
304:46 - so the notion of hops and the notion of
304:49 - intermediate computers is still present
304:51 - in the internet
304:52 - and the tcp networks that we use today
304:55 - and so your your message sort of
304:58 - leaves you the host that you're in
305:00 - hops to the first router and then hops
305:02 - to however many routers dot dot this is
305:04 - more of a dot dot dot thing and then
305:07 - finally hops its way out to the far host
305:09 - and so this is sort of either your
305:10 - computer maybe stanford's web server and
305:13 - then there's this series of routers in
305:15 - the middle that it hops through
305:17 - okay
305:18 - and so
305:19 - the problem of
305:23 - what data goes between here and here
305:27 - is you've got to solve a lot of problems
305:28 - right how to
305:30 - all kinds of problems and so in order to
305:32 - simplify the solution or break the
305:34 - solution into
305:35 - simpler more manageable parts
305:38 - they came up with a layered network
305:40 - model now
305:42 - this is a cartoon
305:44 - and
305:45 - computer people love drawing cartoons
305:47 - and saying this is our architecture this
305:49 - is our framework this is our approach
305:51 - sometimes they're helpful sometimes
305:52 - they're not helpful sometimes the
305:54 - cartoon is just kind of a cartoon
305:57 - but what's usually being communicated in
305:59 - these kinds of pictures is they're
306:01 - taking a big problem and breaking it
306:02 - down into some
306:04 - subset some set of smaller problems so
306:07 - the whole problem that they've got to
306:08 - solve of getting data reliability
306:10 - reliably across the whole country is
306:12 - that big
306:13 - and if we can break it into four pieces
306:16 - and work separately
306:18 - and come up with ways to let these
306:20 - pieces interact
306:22 - work separately with each one then maybe
306:24 - we'll have a better solution
306:26 - okay so
306:28 - take a problem that's so large and so
306:30 - complex that we might not be able to
306:32 - solve it and break it into four smaller
306:34 - problems
306:35 - gives us a better chance of solving the
306:37 - four problems now there's a certain art
306:39 - to picking how you break the problem up
306:42 - and there's more than one network model
306:44 - the one that we use in the internet is
306:45 - the tcp or internet protocol suite model
306:48 - and we'll meet some of the people who
306:50 - designed that uh there was also a model
306:52 - called the seven layer osi model open
306:55 - system interconnection model so there's
306:56 - a model out there that has
306:58 - one two three four five six
307:01 - seven layers and they all have names and
307:03 - they all have purposes now definitions
307:05 - uh this was not quite as power this was
307:08 - not very popular and i doubt that it's
307:11 - many places
307:12 - because the tcpi model is the one that
307:14 - kind of won
307:17 - and so that's the one that we're going
307:18 - to study but that doesn't mean that that
307:19 - has to be the only one but it is the one
307:21 - that has become popular on the internet
307:24 - so once you break the problem down from
307:26 - a big problem into four small problems
307:29 - you have to develop documents about how
307:31 - these layers work together how various
307:33 - computers work together how routers work
307:36 - all these things
307:37 - and so early in the process of the
307:40 - development of the arpanet they created
307:42 - an open process to build these
307:44 - specifications
307:46 - where they would invite invite engineers
307:47 - from all kinds of companies and
307:50 - universities and who knows what any
307:52 - expertise to show up at a meeting
307:54 - several times a year i mentioned the
307:56 - ietf meeting when i was talking about
307:58 - the history of the
307:59 - internet and the tim burner's leave off
308:01 - that only 15 people showed up to
308:04 - that's this meeting it's the internet
308:06 - engineering task force which is just a
308:07 - bunch of engineers that get in a room
308:10 - get in many rooms and solve a bunch of
308:12 - problems and so the standards that come
308:14 - out of this and you can go read them
308:15 - they're all open documents
308:17 - they're very throwback documents they've
308:18 - got this text thing and it's got all
308:20 - this like
308:22 - beautiful uppercase that reminds me of
308:24 - when back when printers didn't have
308:26 - lowercase
308:27 - and these are documents that describe
308:29 - how most of the components of the
308:31 - internet work together
308:37 - so
308:39 - the layered architecture that i just
308:41 - described
308:43 - where you have a computer and then it
308:45 - sends data out the back of it and then
308:47 - hop hop hop hop pop through routers then
308:49 - the data rises destination computer
308:52 - and then the destination sends it back
308:54 - it's hop hop hop hop hop coming back and
308:56 - it comes to you we're going to expand on
308:58 - this a little bit so each of these hosts
309:02 - on the two ends is going to expand to
309:04 - this much right here
309:05 - so that's one host that's another host
309:08 - and each of these routers is going to
309:10 - expand into this
309:12 - so this bottom picture is just an
309:15 - expanded version of this upper picture
309:18 - so that we can see how the internet
309:20 - layers work together
309:22 - so when you send a message
309:25 - in on your computer
309:27 - it's this is all software application
309:30 - transport internet
309:32 - link so this is all software and then it
309:34 - comes out the little plug on the back
309:36 - your computer right
309:40 - so maybe your computer has a little plug
309:42 - like this on the back of it right that's
309:44 - an ethernet plug and here's an ethernet
309:45 - wire
309:46 - and unplug my local area network in
309:48 - right and so
309:50 - this right here
309:52 - is that right there that's kind of the
309:54 - plug it might be wi-fi which means it's
309:56 - kind of like air but if you have a wire
309:59 - like this then it's a little more
310:00 - tangible
310:01 - and there's something on the other end
310:02 - of that wire
310:04 - this is a very short wire but there
310:06 - would be a router on the other end of
310:07 - that wire
310:09 - the router takes the data off the wire
310:12 - and then forwards it just like a post
310:14 - office intermediate post office would do
310:17 - on to the next link
310:18 - on to the next link and this would be
310:20 - multiple hops in here they're only
310:21 - showing two hops and then finally it's
310:24 - on the last link going to that computer
310:26 - at stanford and then it goes up through
310:28 - these four layers of software and then
310:31 - goes and does whatever it's going to do
310:33 - now when they send you the response back
310:35 - it kind of goes the other way
310:38 - and back up and back to you so if this
310:41 - was you in a web browser
310:43 - you know and then here's me
310:45 - and here's a slide i've got right this
310:47 - web browser and you move in your cursor
310:49 - in the web browser sending stuff back
310:51 - and forth to the coursera servers kind
310:53 - of here and that's what's happening
310:55 - right so
310:56 - if as we look at this picture over here
311:00 - this left column is the host you're
311:03 - coming from the right column is the host
311:05 - you're going to and the routers are
311:07 - these things in the middle okay
311:11 - okay
311:15 - so let's start looking at all four
311:17 - layers we're going to start
311:19 - at the bottom at the link layer and then
311:22 - we're going to move up
311:24 - so if you recall when i talked about the
311:26 - the the basic reason
311:28 - why we even have a layered architecture
311:31 - at all
311:32 - is to simplify the problem
311:34 - to simplify the problem
311:36 - so the idea of the link layer is the
311:38 - link layer is a
311:41 - it all only worries about getting the
311:43 - data across one hop right only worries
311:45 - about getting the data from across one
311:48 - piece of wire what like voltage goes on
311:51 - these little wires and
311:54 - how we send the stuff and if more than
311:56 - one computer is using the same wire how
311:58 - do we share
312:00 - it's a complex enough problem
312:02 - but we don't worry about the whole world
312:04 - we worry about this one link layer and
312:06 - so the link layer is sort of like the
312:08 - connection
312:10 - out of one computer and into another
312:12 - computer and and this might be fiber
312:15 - optic might be you know 40 miles or it
312:18 - might be 40 feet for all we know but
312:21 - it's one link okay and then a router
312:24 - pulls it off that link and then forwards
312:26 - it onto another link if you go to the
312:27 - post office
312:29 - you could think of
312:30 - the
312:31 - the person who picks your mail up from
312:33 - your house with the thing on their
312:35 - shoulder that's one link then they put
312:37 - it in a truck
312:38 - which takes it to a place that puts it
312:39 - in a semi truck and then it puts it to
312:42 - another place it puts it on a train
312:44 - and the semi truck and the train and the
312:47 - postman or post woman are these little
312:50 - link layers each
312:52 - person or semi truck is not taking it
312:54 - all the way they're just getting a
312:56 - little farther so that's the link layer
312:59 - so the link layer doesn't worry about
313:01 - the rest of this stuff it really
313:03 - the stuff that is defined on this wire
313:05 - really doesn't even care if there's a
313:06 - world wide web or anything
313:08 - its job is to get data across one foot
313:10 - that's what its job is is it up is it
313:13 - down how do we share it doesn't care
313:15 - it's got a very narrow view so
313:18 - what it means is we can zoom in on this
313:20 - problem right we can zoom in
313:22 - and focus and ignore everything else
313:26 - so the link layer
313:28 - basically asks questions like
313:30 - you know i've got some data inside the
313:32 - computer and i want to send it out
313:34 - how do i encapsulate it what if this is
313:37 - shared how do i deal with that and
313:39 - common link technologies that we see are
313:42 - like ethernet or wi-fi or cable modem
313:45 - dsl satellite or optical right these are
313:48 - all
313:49 - links layers of one form or another so
313:52 - if you're going back to this ethernet
313:53 - link layer which is one of our favorites
313:56 - because it's kind of ubiquitous
313:58 - other than wireless it's probably
313:59 - ethernet is the most ubiquitous link
314:01 - layer
314:05 - so
314:06 - when the manufacturer builds an ethernet
314:09 - or a wireless adapter
314:11 - they actually build into it which is
314:13 - probably right here i don't know it
314:15 - could be right here
314:16 - um they build into it a serial number so
314:19 - they they mark this as having a serial
314:21 - number
314:22 - and you can actually whether on windows
314:24 - or mac you can work your way down to
314:27 - find the serial number for your actual
314:29 - manufacturer piece of equipment so
314:31 - there's one on the mac that's an example
314:33 - one on the mac and that's an example one
314:34 - on the pc
314:35 - they tend to be
314:37 - six
314:38 - two digit
314:40 - numbers concatenated together often with
314:42 - colons in this case in windows it shows
314:44 - dashes
314:45 - and so this is a raspberry pi and all
314:47 - the raspberry pi's are going to actually
314:49 - have similar prefixes
314:52 - and then
314:53 - serial numbers within that prefix
314:55 - and so the raspberry pi's get
314:57 - manufactured they come out of the
314:58 - manufacturing line with this sequence
315:00 - number just kind of going
315:02 - up up up up up and um then they get
315:05 - shipped to all corners of the world
315:08 - and so these
315:09 - numbers are not the numbers for this to
315:12 - get across the world all the number all
315:15 - these serial numbers at the link layer
315:18 - are good for
315:19 - is
315:20 - to get across one connection in case
315:22 - that connection is shared and if you
315:24 - were to plug this into a hub and you're
315:26 - plugging other computers into that same
315:27 - hub well then you're sharing that
315:29 - connection
315:30 - and this computer might see the traffic
315:32 - for that other computer and so we use
315:34 - the physical addresses so that
315:36 - this computer knows which of the packets
315:38 - belong
315:39 - to it on the piece of wire so wired
315:42 - ethernet or wi-fi certainly if you're
315:44 - sitting in a room with a bunch of wi-fi
315:46 - computers you're sharing the air so you
315:48 - have to come up with rules
315:50 - how to share this how to share nicely
315:52 - and how to behave
315:55 - so the way it works
315:57 - is
315:58 - you could and this ethernet could easily
316:00 - have a bunch of other computers hooked
316:02 - to it right because it's really shared
316:04 - and so they're all sitting here they're
316:05 - all talking simultaneously
316:08 - you know but we have a we have a pair of
316:10 - computers that want to talk so it's not
316:12 - just one it's got a bunch of folks
316:14 - sitting here
316:15 - just draw a bunch of them bunches of
316:17 - folks
316:18 - they're all talking or all potentially
316:20 - talking and we got to figure out how in
316:22 - the shared medium like this is think of
316:24 - this as a hub and they're all connected
316:26 - into this hub
316:27 - including the two we want to talk
316:29 - they're all connected in the hub
316:31 - including the two that we want to talk
316:33 - and how can these two make sure that the
316:35 - data goes is this data that's sent with
316:38 - the intention of going to this computer
316:40 - this router
316:41 - how can it make sure that it gets there
316:44 - well
316:45 - if it knows the address of the sending
316:48 - and receiving unit it just encodes that
316:51 - in the packet
316:53 - and that way it sort of goes by all
316:55 - these folks
316:56 - let me change colors here
316:58 - the packet we send goes by all these
317:00 - folks
317:01 - and even if they all heard every one of
317:03 - the packets
317:04 - they all know that it doesn't belong to
317:05 - them because they all have a different
317:07 - number and this is the only one that
317:08 - responds to it so that allows them to
317:11 - share the wireless or the wire and
317:16 - share the wireless or the wire and have
317:18 - it all work out for them
317:20 - so so that's the idea of the link layer
317:23 - now again remember this might only be
317:26 - 50 feet or 50 yards or 50 meters will
317:29 - make it meters it's only 50 meters but
317:32 - you still have to share the network in
317:33 - that 50 meters
317:35 - and then the router takes it off of that
317:37 - and forwards it on a different link and
317:39 - that's how we get across the country
317:41 - but that's the next layer up and let's
317:43 - not worry about that for now so the idea
317:44 - is
317:45 - think about one link whether it's fiber
317:47 - optic or cable or wireless or wi-fi
317:51 - and so what are the kind of problems
317:52 - that you have to solve on this link
317:54 - layer
317:55 - well
317:56 - so one of the things that's cool about
317:58 - many link layers is like wireless and
318:00 - ethernet is they can be shared and it
318:03 - makes it really easy just plug new
318:04 - computers in so you just sort of like
318:06 - here's a hub and you just plug another
318:08 - computer and it's on the network
318:10 - but they have to come up with a way to
318:11 - avoid the chaos when they're sharing
318:14 - and so
318:15 - the the way ethernet
318:17 - does this
318:18 - is with a technique called carrier sense
318:21 - media access with collision detection
318:26 - and as you'll see a lot of the things
318:28 - that we do on the internet have a lot to
318:29 - do with courtesy
318:31 - meaning that
318:33 - we're just nice and if everybody's nice
318:35 - it all works out it's kind of like
318:36 - driving in a car
318:38 - just everyone can't run through the stop
318:40 - sign at the same time somebody's got to
318:41 - stop got a green light your turn my turn
318:44 - whatever this probably wouldn't work so
318:47 - well with cars
318:49 - because sometimes you do have a
318:50 - collision of packets you just have to
318:51 - wait
318:52 - packet collisions don't crush your car
318:54 - they just slow your data down
318:56 - so here we go
318:58 - this is basically carrier sense media
319:01 - access with collision detection the
319:03 - first thing you do if you want to send
319:04 - some data
319:05 - say we got some data inside a little
319:07 - computer we're going to send it out
319:09 - knowing that there might be other data
319:10 - going by
319:12 - the first thing we do is we listen
319:15 - we listen to what's on there
319:17 - if it's not silent we just wait until it
319:19 - goes silent and then we start sending
319:21 - so if someone's already using it why
319:24 - crash into their data and crush their
319:26 - data because there's it's shared there's
319:28 - only one you can't
319:30 - both be sending at the same time
319:32 - so first you listen
319:34 - once it's silent you begin transmitting
319:37 - data
319:39 - and then what you do is you also
319:42 - listen to your own data
319:44 - and if your own data is coming back
319:46 - then it's sounding pretty good
319:50 - and
319:52 - and then if if
319:53 - you if there is a collision because
319:55 - there's a chance that two computers will
319:57 - want to send at the same time and
319:59 - they'll collide then what they have to
320:00 - do is back off and they have a
320:02 - sophisticated random number calculation
320:05 - so that they back off not always the
320:07 - same amount each computer backs off a
320:09 - different amount
320:10 - and they make it so that it's fair so
320:12 - one computer is not always backing the
320:14 - most off so it's very fair so it's
320:17 - when you detect a collision
320:19 - you re-transmit
320:21 - after a random back off first you avoid
320:24 - collisions but in the in the rare case
320:27 - that you have a collision then you do
320:29 - this and so
320:31 - um
320:34 - i want to introduce you to
320:36 - the person who invented ethernet
320:39 - ethernet
320:43 - this is robert metcalf
320:44 - and he was
320:47 - working at xerox palo alto research
320:50 - center park everyone calls it park
320:52 - and they had they were building what is
320:55 - most considered the first computer the
320:56 - alto computers they were connecting line
320:59 - printers are
321:01 - fast printers to these
321:03 - xerox was building the first
321:06 - laser printers
321:09 - and they needed something faster and so
321:11 - they just started building it and they
321:13 - built this thing called ethernet now
321:15 - it's a little different than the
321:16 - ethernet that we see the first ethernet
321:18 - that they built is a little different
321:19 - you can see a picture of it down here if
321:21 - you ever go to xerox park and get in
321:23 - you'll go see this little museum they
321:24 - have
321:26 - it used a single piece of cable
321:29 - that ran along they just ran it down the
321:31 - hallway and they would connect a tap in
321:34 - and then they would use that to send the
321:36 - data so it would go down the hallway and
321:38 - the tap would come out in each office
321:40 - and they were truly sharing the media
321:43 - this is not shared except when you plug
321:45 - it into a hub that's what makes this
321:46 - shared
321:48 - and it was inspired by
321:50 - an earlier wireless network where they
321:53 - were doing
321:54 - not collision detection but
321:55 - re-transmission called aloha and a lot
321:58 - of early network packet network
322:00 - inspiration uh comes from the alola net
322:03 - in uh you come from university of hawaii
322:06 - and because
322:07 - they didn't have anything except
322:08 - wireless but they did have wireless they
322:10 - did a lot of really cool early research
322:12 - on wireless and so uh let's go ahead and
322:16 - meet bob metcalf
322:17 - the inventor one of the inventors of
322:20 - ethernet
322:24 - [Music]
322:33 - so
322:39 - [Music]
322:54 - i was extraordinarily lucky
322:56 - and happened to be at the xerox research
322:58 - xerox palo alto research center
323:00 - when a problem evolved that had never
323:03 - before occurred the problem had never
323:05 - occurred and that was the problem of
323:07 - having a building full of personal
323:09 - computers
323:11 - and i was a networking guy so they
323:13 - turned to me and said
323:15 - network these puppies and we had just
323:17 - finished
323:18 - starting the internet it was then called
323:21 - the arpanet
323:22 - which was packet switching
323:24 - and it was pretty clear we wanted this
323:26 - network to connect to the
323:28 - it wasn't yet called internet thing so
323:31 - it would be packet switched we're pretty
323:33 - sure
323:34 - at the same time we were building uh
323:36 - arguably i don't want to get into that
323:38 - argument the first laser printer
323:40 - which in our case the first one
323:43 - whose name was ears that's a whole other
323:46 - story
323:47 - it was a page per second 500 dots per
323:49 - inch and if you do the math that's about
323:51 - 20 megabits per second so the existing
323:54 - methods of interconnection
323:56 - had a a lot of problems one is they were
323:59 - all home run so all these wires one from
324:01 - every desk would all come to this one
324:03 - place in the building and put a big
324:06 - rat's nest we called it a rat's nest by
324:07 - the way
324:09 - two is they generally ran at 300 bits
324:12 - per second or
324:13 - if you really rev them up they go to 14
324:16 - 4 kilobits per second
324:18 - and that wasn't even close to 20
324:20 - megabits per second so and we wanted to
324:22 - be able to keep the printer busy by
324:23 - sending documents from all these
324:26 - pcs which hadn't been built yet accepted
324:28 - part
324:30 - well they hadn't been built even in park
324:31 - at that point so we were building the
324:33 - printer and we were building the
324:35 - pcs all at the same time
324:38 - so i um
324:40 - started work on this and there was a
324:42 - pre-see an effort before mine
324:45 - called cygnet at park and it was being
324:47 - done by charles simony my friend
324:51 - and uh but he wasn't a networking guy so
324:53 - they sent me in to pick up cignet from
324:55 - charles
324:57 - and he was going to go off and do
324:58 - something else and by the way the thing
325:00 - the other thing he did is he wrote a
325:02 - text editor
325:03 - a word processor called bravo
325:06 - which then became
325:08 - microsoft office wow
325:10 - so charles
325:12 - is a billionaire and he's been to the
325:14 - space station
325:15 - twice the international speed
325:18 - so maybe i shouldn't have kicked him off
325:20 - cignet maybe i should have done bravo i
325:22 - don't know anyway so i uh immediately
325:25 - decided that cygnet by the way cygnet
325:27 - stands for
325:28 - simoni's infinitely glorious network
325:32 - was in fact infinitely glorious and much
325:35 - had too many moving parts to
325:38 - be a lan
325:39 - by the way the word lan
325:42 - wasn't invented until 1990 and this is
325:44 - still 1973. so the word land was way in
325:47 - the future so that's an anachronism
325:49 - anyway the
325:50 - the cygnet had too many moving parts for
325:54 - a land
325:55 - and it was in the course of
325:57 - investigating how to organize this land
325:58 - that i ran into a packer by quite by
326:00 - accident by a packet radio network at
326:02 - the university of hawaii it was called
326:04 - the aloha net
326:06 - and what was beautiful about the aloha
326:08 - network is it had it solved a
326:10 - distributed problem
326:12 - that is how would we share a radio
326:14 - channel back to the mainframe in hawaii
326:17 - at the university
326:19 - if we were just a bunch of terminals
326:21 - scattered among the hawaiian islands
326:23 - and they couldn't really easily talk to
326:26 - each other
326:27 - to get coordinated how would they
326:29 - coordinate their sharing of this inbound
326:31 - radio channel
326:33 - and norm abramson there at the
326:34 - university of y devised this very simple
326:36 - randomized re-transmission procedure
326:39 - where
326:40 - a person would type
326:41 - by the way what they would type was a
326:43 - card image
326:44 - it was 80 columns wide
326:47 - back from the days of card
326:49 - batch processing
326:50 - so you would type in your card image and
326:52 - hit send
326:54 - and then your terminal would
326:57 - send it in toward the mainframe
326:59 - and then would wait
327:00 - a short time to see if there was an
327:02 - acknowledgement returned on the outbound
327:04 - channel
327:05 - and if there was everything was
327:06 - hunky-dory but if there wasn't that
327:08 - probably meant the two terminals had
327:10 - decided to send at the same time
327:13 - so then as many terminals as
327:15 - participated in that collision of
327:18 - transmissions
327:19 - would then
327:20 - randomize and and then re-transmit at a
327:23 - random time in the future thereby if
327:25 - they overlapped here they very likely
327:27 - would not overlap again in the future
327:29 - because they would choose different
327:30 - random numbers to count down
327:32 - so that's
327:34 - randomized retransmission multiple
327:36 - access
327:37 - so i since i was trying to avoid this
327:39 - big rat's nest of wires and only wanted
327:41 - to have one wire just one wire not 16 or
327:45 - 32 or whatever the
327:47 - alternatives were just one
327:49 - i wanted a distributed solution to how
327:52 - to share this cable and the aloha
327:54 - network produced that using randomized
327:57 - retransmissions so then i um
328:00 - actually you know
328:02 - there's sort of two stories here one is
328:04 - a hardware story we've learned about the
328:05 - hardware there's a hardware story and
328:07 - there's a software story and the
328:08 - hardware story is uh
328:11 - not that interesting but it's there
328:13 - so one of the first things i did was to
328:14 - buy a kilometer of cable or maybe a mile
328:18 - i don't know if i'd gone metric yet but
328:19 - i saw a spool of
328:22 - coax cable about this big with the two
328:24 - ends
328:25 - sticking up
328:26 - so i got a
328:28 - pulse generator and i hooked it up to
328:29 - one end and
328:31 - hooked it around back into the
328:32 - oscilloscope and started launching
328:34 - square waves down the cable and watching
328:37 - what came out i thought that would be
328:38 - good preparation for building a network
328:40 - and what came out the other side wasn't
328:42 - a square wave it was sort of
328:45 - sort of lazy rise times and lazy fall
328:48 - times
328:49 - but if you put a
328:51 - a digital gate
328:52 - you could recover the square wave that
328:54 - is you just said
328:56 - use the digital threshold and so out of
328:58 - this gate came a square way so you could
328:59 - recover
329:00 - at the end of a mile of cable this
329:03 - square wave so i kind of knew
329:05 - i kind of had some confidence then that
329:07 - we that various stations connected to
329:10 - this cable could inject their square
329:12 - waves
329:13 - and the other guys could recover them
329:16 - so
329:17 - that hardware
329:19 - wasn't that hard but it um
329:22 - it was a
329:23 - straightforward so the first hardware
329:24 - was kind of relatively straightforward
329:26 - very straightforward and the and the
329:28 - square wave by the way was called
329:29 - manchester u what we do is we take the
329:31 - bit we'd make a packet of bits
329:34 - and then we'd send them one at a time
329:36 - down this cable and we would encode them
329:39 - and the encoding was also simple it was
329:40 - manchester coding meaning
329:42 - for each bit the first half of the bit
329:45 - would be
329:46 - the complement of the bit and the second
329:48 - half of the bit would be the bit so you
329:50 - would have a transition in the middle of
329:52 - each bit cell
329:54 - which is a very simple modulation scheme
329:56 - so as you're sending the packet the
329:58 - cable's wiggling and you can recover the
330:00 - signal at the other end and clock those
330:02 - bits into a shift register then click to
330:04 - clock the shift register into the memory
330:06 - and collect the packet that way
330:08 - and that all took just some soldering to
330:10 - make that all happen basically well i
330:12 - don't wanna
330:13 - it got a little bit complicated when you
330:15 - wanted to put 255 of them on a mile of
330:18 - cable you had to be a little bit careful
330:19 - about the impedance of the taps
330:22 - because a square wave coming by a tap
330:24 - might generate reflections that would
330:25 - then interfere
330:27 - but the beauty of manchester encoding
330:29 - was that while you were sending a packet
330:31 - there were constant transitions so if
330:33 - you listened
330:35 - you could tell whether a packet was
330:37 - going by and you didn't have to listen
330:38 - for long you only had to listen for
330:40 - about a bit time and then you which
330:42 - which turned out to be 340 nanoseconds
330:45 - so you could wait that long and tell
330:47 - whether there was a packet going by
330:49 - so one of the first differences between
330:51 - the ethernet and the aloha now there are
330:53 - a lot of differences but one of the
330:54 - first ones was
330:57 - carrier sense
330:59 - in the aloha network
331:00 - you couldn't tell if somebody else was
331:02 - transmitting at the same time as you but
331:04 - on the ethernet you could and the
331:05 - advantage of that was you might as well
331:07 - if you're sending and somebody else is
331:09 - sending at the same time you might as
331:10 - well give up because you've destroyed
331:11 - each other's packets so punt then that
331:14 - recovers that bandwidth that would
331:16 - otherwise be lost to just
331:18 - continuing to transmit a damage packet
331:21 - and the
331:22 - the other thing was this this manchester
331:25 - code meant that the cable was on half
331:27 - the time and off half the time that is
331:29 - the the driver sort of an open what we
331:32 - used to call an open collector driver
331:34 - would either yank the cable up to
331:37 - three or four or five volts i even
331:38 - forget the voltage now
331:40 - but it was under five i'm sure that i
331:42 - had a rule i never won above five volts
331:44 - uh
331:45 - you would yank the cable up and then
331:47 - during the other half the bit when you
331:48 - weren't yanking you let go so
331:51 - so for example in each bit cell you got
331:54 - to look
331:55 - to see if anyone else was transmitting
331:57 - when you had stopped and if there was
331:58 - somebody else then you had a collision
332:00 - so that was the second feature so it was
332:02 - really a digital signal it was really a
332:04 - digital signal it wasn't modulated
332:05 - signal in any way right no well it was
332:08 - uh best you could send a digital signal
332:10 - over coax on off with the manchester
332:13 - encoding so the ink
332:14 - manchester encoding is akin to a
332:16 - modulation scheme but it's the simplest
332:18 - one you can think of it's very baseband
332:20 - yeah and it is very baseband but it's a
332:23 - sort of modulation scheme that a
332:24 - computer scientist would come up with as
332:26 - opposed to one of those fancy
332:28 - radio people right so and and by the way
332:31 - i took a lot of gas from all those radio
332:32 - people why did you use such a simple
332:34 - scheme you wasted
332:36 - you would have wasted all that ban you
332:38 - wasted all that bandwidth that capable
332:39 - that cable was capable of carrying
332:41 - hundreds of megabits per second and you
332:43 - only carried 2.94 what a waste of the
332:46 - cable
332:48 - well
332:51 - there was plenty of cable to waste so
332:53 - we've talked about carrier since
332:54 - inclusion detection
332:56 - and the scheme would be that each packet
332:58 - would carry
332:59 - two addresses the address of the
333:01 - destination and the
333:03 - the address of the source
333:05 - and each of these would be eight bits
333:06 - and so on the back plane of these little
333:08 - personal computers with wire app
333:12 - you would wire wrap in a code between 0
333:14 - and 255 and that would be the serial
333:16 - number of the machine and that and then
333:18 - you would read that off the back plane
333:19 - and put it in the packet
333:21 - so each packet had two addresses this is
333:23 - different from the loan incidentally
333:24 - which had one address because the
333:26 - channel was only going
333:29 - through two channels
333:31 - so two addresses and we added uh
333:34 - a cyclic redundancy checksum on the end
333:36 - of the packet which we implemented in
333:38 - hardware so that you in addition
333:42 - so you could tell if the packet had been
333:44 - damaged so if there was a collision
333:46 - and the
333:48 - terminal the contending stations backed
333:50 - off there would be a hunk of garbage on
333:52 - the cable zipping around but when it was
333:54 - received the checksum wouldn't add up
333:56 - and you just throw that chunk of garbage
333:57 - away the day that i was launching pulses
334:00 - down this spool of cable
334:02 - i was doing some soldering
334:05 - and i was doing some
334:08 - knife work to get the insulation off the
334:10 - copper and
334:12 - and across the room was a young grad
334:14 - student who was doing something else and
334:16 - he noticed me
334:18 - not being good at this
334:20 - and turns out he was very good at it
334:22 - because he had worked in a television
334:24 - studio and he had worked in cable
334:25 - television so he knew all about skinning
334:27 - wires and coaxes so he came over to help
334:30 - me and i was his name was david boggs
334:33 - and then we started working together
334:36 - and
334:37 - invented ethernet together
334:39 - so he was and he was
334:41 - he was
334:43 - slightly more hardware and i was
334:44 - slightly more software but there was
334:46 - then a third guy
334:48 - who was even more hardware than david
334:50 - who was the picofarad guy the guy who
334:52 - would put those last few passive
334:54 - components on the end just to be sure
334:56 - that that connection to the coaxial
334:59 - cable
335:02 - would be clean for transmissions you
335:04 - wouldn't every time you tapped into it
335:06 - you didn't put a big lump of impedance
335:07 - on the tapping seems like a
335:09 - counter-intuitive thing
335:10 - to me i mean think that i mean everyone
335:12 - would think that a star is the right
335:14 - thing but you were going to tap into
335:15 - that just
335:16 - well
335:17 - one of the problems we decided to solve
335:19 - was the rat's nest problem we did not
335:21 - want a rat's nest and every time we
335:22 - installed a new pc we didn't have to
335:24 - home run a cable back to the rat's nest
335:27 - so we wanted to put one cable down the
335:29 - middle of the corridor and then every
335:30 - time you want to put a pc you just run
335:32 - up and tap into it
335:33 - and we didn't want the network to go out
335:35 - and go down while you were tapping into
335:37 - it because we wanted 24x7 access to the
335:39 - network so there had to be a way to tap
335:41 - into the network without bringing it
335:43 - down
335:44 - so that led to a a device we found in
335:47 - the cable tv industry
335:49 - okay it was called a geralt tap and it
335:51 - was basically
335:53 - a vampire tap you'd you'd drill a little
335:55 - hole in the outer
335:58 - casing of the coax and then you would
336:00 - screw in this tap that would puncture
336:02 - the insulation and go right to the
336:04 - copper and tap in and you notice in that
336:06 - operation you're not breaking the copper
336:08 - so the network continues sending you tap
336:10 - in and you're now part of the network so
336:13 - that came from the cable industry it did
336:14 - oh so a guy named david liddell who had
336:17 - done cable tv installations
336:20 - when he was in grad school in toledo
336:23 - uh suggested that we use the gerald tap
336:25 - since it was already being made in
336:27 - volume and worked just fine as far as he
336:28 - was concerned and it allowed us to solve
336:31 - the rat's nest what we perceived to be
336:33 - an important problem the rats nest
336:35 - problem
336:36 - the aloha network ran in the kilobit per
336:39 - second range like 4 800 or
336:42 - i don't remember the numbers but
336:44 - kilobits per second ethernet then
336:46 - started at 2.94 megabit and in those
336:49 - days by the way t1
336:51 - was
336:52 - 1.544 megabits per second so in 1973
336:57 - he said it was already twice as fast as
336:59 - t1
337:01 - of course t1 still around
337:03 - oddly
337:04 - but then we went from
337:06 - 29 2.94
337:08 - we briefly went to 20 megabits per
337:10 - second inside of xerox
337:13 - and then when we bumped into deck and
337:15 - intel for the standardization process in
337:18 - 802 we decided on 10 we came down from
337:21 - 20 to 10 so the chips would work
337:24 - and then we went from 10 and later
337:27 - i helped found a company called grand
337:29 - junction networks that introduced the
337:30 - 100 meg ethernet and i remember being at
337:33 - my coffee table
337:35 - in palo alto i think it was
337:38 - i forget the year no maybe it was in
337:40 - woodside
337:42 - but we were trying to think of how we
337:44 - would make a faster ethernet
337:47 - and uh there's some math that shows that
337:50 - if you as you go faster the efficiency
337:52 - depends on the diameter of the network
337:54 - and as you go faster and faster the
337:56 - efficiency goes down
337:59 - the diameter network in bits
338:01 - and we're trying to go up a factor of 10
338:03 - and
338:04 - and then i don't know who it was
338:07 - one of us observed that wait a minute
338:09 - we've been assuming that ethernet is a
338:11 - kilometer in diameter
338:13 - but we're going we're all going to hubs
338:15 - now so that
338:16 - we only need 100 meters not a thousand
338:19 - meters and that was the factor of 10
338:20 - right there so by changing the
338:22 - collision interval
338:24 - you maintain the same efficiencies uh
338:27 - theoretical efficiencies
338:29 - by just
338:30 - assuming going 100 meters instead of a
338:32 - kilometer so that got us to 100 megabits
338:34 - per second and now gigabit
338:36 - 10 gigabit which i guess is the
338:38 - mainstream now and then 100 gigabit is
338:40 - now from beginning to run 100 gigabits
338:43 - per second you can't
338:46 - you can't be a computer scientist and
338:48 - build that kind of digital now you have
338:49 - to actually be an engine a hardware
338:51 - engineer to run at 100
338:53 - i think at that point you're pretty much
338:54 - a radio person
338:57 - yes but then after 100 gigabits comes
339:00 - terabit so i've already begun giving
339:02 - talks on terabit ethernet
339:04 - [Music]
339:24 - welcome back so i hope you uh enjoyed
339:26 - that now i want to make it real clear
339:28 - that
339:28 - when i give you a 15 minute video of an
339:31 - amazing
339:32 - inventor and computer scientist
339:35 - you don't have to remember every word
339:37 - that that person says okay
339:40 - it's more important to get the gist of
339:41 - it i try to cover the things i really
339:44 - want you to know in my slides
339:46 - and you might want to listen to it more
339:48 - than once or
339:49 - listen my slides and then go back but
339:52 - you're not i don't want you to memorize
339:53 - it i i wanted to give you
339:56 - smart people i want you to hear from the
339:58 - smart people who did all this cool work
340:00 - in their own words
340:02 - but when we hear from their own words
340:04 - they're
340:05 - sometimes pretty technical so
340:07 - just relax and enjoy listening to these
340:10 - people and understand that you're not
340:11 - going to get everything but hopefully
340:13 - you'll come back and you'll get more and
340:15 - more later so
340:18 - the idea was that he really started with
340:21 - this idea of wireless which which was
340:23 - we're going to share one medium and the
340:25 - wireless and the wire the ethernet wire
340:28 - that he built the coaxial cable that he
340:30 - built was like a giant
340:32 - radio except it ran in the ceiling
340:35 - and so the design ended up really simple
340:37 - and that's that's been good for ethernet
340:40 - over the years and later wi-fi is a
340:43 - variation of ethernet um and so it turns
340:46 - out to be
340:47 - uh sometimes it's best to build
340:49 - something simple but that just make it
340:50 - go really fast and make it really cheap
340:53 - he also formed the company 3com which
340:55 - was one of the first manufacturers of pc
340:59 - cards and so back in the day you would
341:00 - go buy a pc and you would go buy a 3com
341:04 - card and plug it in the back your
341:05 - computer and so
341:07 - there was a time when san francisco
341:10 - stadium candlestick park was named
341:12 - 3com stadium and
341:15 - our friend bob metcalf was involved in
341:17 - all of that so he's done many things
341:19 - throughout his life and we're honored to
341:21 - have met him
341:22 - so
341:24 - we started with this four-layer
341:26 - architecture that says we're going to
341:28 - break down a big problem of cooperating
341:30 - applications across various kinds of
341:32 - networks
341:33 - we're going to break it down and we just
341:34 - got done talking about the link layer
341:38 - it's literally 20 000 maybe 50 000
341:41 - engineers have spent the last 20 years
341:44 - figuring out how to make this work
341:46 - because the layered architecture lets
341:48 - them think
341:50 - although it was informed
341:52 - they have twenty thousand fifty thousand
341:55 - i don't know
341:56 - twenty thousand engineers that think
341:58 - about that problem and they ignore the
342:01 - rest of the problems okay they ignore
342:03 - the rest of the problems
342:06 - that's great because they've gotten
342:08 - really good at this one problem
342:10 - now we're going to go like you know i
342:12 - don't know how many engineers let's just
342:13 - make it up 5k engineers think about this
342:15 - next problem
342:17 - the next problem is called oh my color's
342:20 - got to change
342:21 - the inter network layer
342:23 - it is the notion of forwarding
342:29 - each of the postcards with a from in the
342:31 - two address
342:33 - forwarding enough times to get them all
342:35 - the way across the network that's the
342:37 - next problem we're going to solve
342:39 - we're going to stop thinking about the
342:41 - link layer we're just going to assume it
342:43 - works it's just magic that's what a
342:45 - layered architecture gives you you don't
342:47 - worry about the stuff above you you
342:48 - don't worry about the stuff below you
342:50 - you focus like crazy
342:53 - on the stuff that you're focusing on so
342:59 - the link layer
343:01 - only works on
343:03 - one link right it worries about one link
343:06 - and there might be 15 or so of these
343:08 - links
343:09 - but the internet layer worries about all
343:12 - the links and
343:14 - the proper sequence of links to follow
343:17 - to get from
343:18 - um to stanford
343:21 - that's a kind of complex problem
343:23 - we're not going to worry about
343:24 - reliability we're just going to worry
343:26 - about if i had a pack if i had a
343:28 - postcard with a from a2 address a packet
343:31 - can i get it there
343:33 - how will i forward it
343:34 - i assume the link layer is perfect so
343:37 - the internet layer is the first end to
343:39 - end because if you recall
343:40 - this vertical box set of boxes is the
343:43 - host starting computer and this vertical
343:45 - set of boxes is the destination computer
343:48 - so
343:49 - in this little raspberry pi
343:52 - all four of these things application
343:54 - transport ip
343:56 - and the link is all part of this one
343:59 - gadget okay
344:01 - so i p is best effort and it's okay to
344:03 - drop data if things go bad and that's
344:05 - one of its charming most charming
344:07 - features
344:08 - but what it had to introduce in addition
344:11 - to the ethernet addresses or the media
344:14 - access layer mac addresses
344:16 - is
344:17 - an address of the destination
344:20 - now if you remember the mac addresses
344:22 - the addresses for the link layer come
344:24 - from the manufacturer the moment this
344:26 - equipment is manufactured is burned in a
344:29 - serial number but these move all around
344:31 - the world
344:32 - if this runs here at the university of
344:34 - michigan it needs one address to connect
344:36 - to the network
344:37 - one ip address if it runs in stanford it
344:39 - needs a different ip address so we have
344:42 - to be able to change these they're
344:43 - assigned differently
344:45 - so it's the worldwide number
344:48 - that is your like postcard address it's
344:50 - like a phone number right so wherever
344:52 - i'm at you call my phone and this gadget
344:55 - rings
344:56 - so it's address
344:58 - well that's actually kind of a
345:00 - bad example because i use the same phone
345:02 - number okay ignore that
345:05 - phones use magic they use crazy magic
345:10 - so in computers they're not as cool as
345:12 - phones you have to change the address
345:14 - everywhere you go we'll talk about how
345:15 - you change the address everywhere you go
345:17 - the ip addresses are based on where the
345:19 - station is connected
345:22 - they do get reorganized once in a great
345:24 - while but not very often and you can
345:26 - even go to various websites on the
345:28 - internet
345:29 - and say i p address lookup is the most
345:31 - common search
345:34 - and it will tell you something about
345:35 - where you're coming from
345:37 - right and it'll kind of be sometimes
345:38 - really weird because you might be at a
345:40 - starbucks and it might send it all to st
345:42 - louis and it might say oh you're coming
345:43 - from st louis even if you're not so you
345:45 - can look it up and you can look up other
345:47 - address as well you can say oh here's an
345:49 - ip address i'm going to look this one up
345:51 - first it starts by looking yours up but
345:53 - you can put in different addresses like
345:55 - in this particular one if i put a
345:57 - different address in here it will
345:59 - actually go look that address up
346:03 - so the ip address format it's four
346:06 - numbers that are separated by dots each
346:08 - of the number
346:10 - can be between one and two thousand and
346:12 - 255 and it's just a representation of a
346:15 - 32-bit number
346:16 - back in the day they kept the numbers
346:19 - small because didn't want to use all the
346:20 - computer memory
346:24 - and so this is an example of an ip
346:26 - address
346:27 - four numbers between 0 and 255
346:30 - separated by dots
346:32 - okay now
346:35 - the concept the address is broken into
346:37 - two parts there is the network number
346:40 - part
346:41 - which is the prefix and then there is
346:43 - the computer number within network
346:45 - okay and it's kind of like phone numbers
346:48 - were before cell phones where the area
346:50 - code
346:52 - was
346:53 - where the phone was and then this was
346:56 - within that area code where to find it
346:58 - and even the older days these were
347:00 - actually geographic too right so these
347:02 - numbers would be neighborhoods or
347:04 - whatever
347:05 - these days it's all electronic so that
347:07 - the the precise mapping of a phone
347:10 - number to a geography is uh is less
347:13 - precise and that's why you get a cell
347:15 - phone number and you move to a whole new
347:16 - state you keep your old cell phone
347:18 - number because it's become electronic
347:20 - but in the early days when it was actual
347:22 - relays and switches making the phone
347:24 - numbers work
347:25 - they actually had to do with where
347:30 - it's actually kind of fascinating how
347:31 - phones work gotta how to teach a class
347:33 - on like how phone switches worked in the
347:36 - 1800s actually quite fascinating
347:40 - because they were surprisingly simple
347:42 - that's the interesting part how simple
347:45 - turn of the century well turn of last
347:46 - century phone numbers were
347:48 - so
347:49 - let's get back to ip addresses
347:52 - there's four numbers
347:54 - some part of those four numbers is a
347:56 - prefix we call that the network number
347:59 - and
348:01 - when the packet is in the middle of the
348:02 - network it doesn't really look at these
348:04 - numbers it only looks at the prefix so
348:06 - it kind of thinks of
348:07 - all the packets going to
348:09 - a piece of university of michigan as 141
348:12 - 211 star star and then we we design
348:14 - these numbers within michigan and then
348:16 - this number is assigned to us by the
348:19 - internet authority that assigns numbers
348:21 - so we say hey we need some more and they
348:23 - give us a prefix then within that prefix
348:25 - we get to set up all the other things
348:28 - so
348:30 - this network number which is the prefix
348:33 - of the ip address is the way that a
348:35 - packet is routed through the internet as
348:38 - it progresses through the internet
348:40 - and so it's sort of like if i start with
348:44 - if i start with
348:46 - my computer here at um and that's my
348:48 - number that's my actual number and
348:50 - here's the stanford computer and that's
348:52 - its number
348:53 - right and i send a packet and i say okay
348:57 - this i'm gonna i'm gonna send it from
348:59 - 141 to 11 144 188 269 67 149 yada yada
349:05 - as soon as the packet enters the network
349:09 - it doesn't throw the data away but it
349:10 - stops thinking about it only looks at
349:12 - the prefix
349:14 - and so it simplified greatly simplifies
349:16 - what the routers have to do as it goes
349:19 - across the hops in the internet it's
349:21 - greatly simplified because it only looks
349:23 - at the first part it doesn't have to
349:25 - look at the whole thing
349:27 - and then it starts making decisions as
349:29 - to how to get there says okay i'll hop
349:30 - it over here
349:32 - then it's like in kansas city and says
349:34 - ah what am i going to do here and
349:35 - i'll pick one of those two links and
349:37 - i'll go over here
349:38 - and then as it exits the network it
349:40 - dumps it somehow onto stanford's campus
349:43 - and then it finds its way oh didn't find
349:46 - it to this one it found its way to that
349:47 - one there you go unpredictable computers
349:50 - now it so within the stanford campus
349:52 - these numbers mean something and the
349:54 - stanford campus uses those numbers to
349:56 - get the thing to the actual real
349:58 - computer
349:59 - and so it's sort of use this prefix you
350:02 - know it has a real number but then it
350:04 - uses the prefix in the middle and then
350:06 - the real number reappears at the end so
350:09 - that's called a network number and it
350:11 - greatly simplifies
350:15 - it's complex enough
350:17 - to be in the middle
350:19 - and have to worry about all these things
350:20 - coming from
350:22 - kansas city and
350:23 - beijing and like where these things go
350:26 - to have to look at each one and know
350:27 - where every computer is is crazy
350:29 - so that's why they call it the inter
350:32 - network protocol because it says there's
350:34 - one network there's another network and
350:37 - the only thing i care about is the
350:39 - network number and i am the internetwork
350:42 - protocol i p
350:44 - internet work protocol i'm just getting
350:46 - these things from one network to another
350:48 - network and then it's up to that network
350:50 - to figure out how to get the darn thing
350:52 - to the right computer within it and it's
350:54 - up to stanford to figure out how to get
350:55 - it to the right computer at stanford so
350:58 - these things are called the network
351:00 - number it's the prefix of the ip address
351:03 - now the key thing that it's really a
351:05 - beautiful beautiful design because it
351:07 - because
351:08 - the center of the network is both
351:09 - exceedingly complex
351:11 - in one way that it's so big and so fast
351:14 - but exceedingly simple in the other it
351:16 - just has to move the data from point a
351:19 - to point b
351:20 - and if you think about it's even simpler
351:23 - if we look at it from the perspective
351:25 - of this router the router here i've got
351:27 - circled
351:29 - right it just received a packet it looks
351:32 - at the network number and it actually
351:34 - doesn't even care to some degree where
351:36 - it really belongs
351:37 - it only has one of two choices it's
351:40 - going to go this way it's going to go
351:42 - that way
351:43 - right
351:44 - which one's better
351:46 - and it turns out if you look at it
351:49 - either one would work
351:51 - turns out this one is better but if i
351:53 - went this way it would just take an
351:54 - extra
351:55 - tenth of a second or something right so
351:58 - it turns out the decisions that are made
352:00 - don't even have to be perfect
352:02 - you can make the wrong decision and the
352:04 - network automatically corrects that's
352:06 - part of the goal of the network and so
352:08 - it really simplifies and limits
352:11 - the
352:12 - the the need for each router to
352:15 - understand the entire network which
352:16 - makes these routers i draw them small on
352:18 - these diagrams on purpose because we
352:20 - think of them as small and fast and only
352:24 - solving a really tiny problem but doing
352:26 - it really super awesome
352:27 - so routers maintain
352:30 - what we call router tables
352:32 - and they maintain a list of network
352:35 - numbers and the best outbound route
352:39 - for each of the network numbers
352:41 - now the other thing that they do
352:43 - is they pass
352:44 - routes back and forth and this is how
352:46 - they adapt to errors right they get
352:49 - updated dynamically they ask each other
352:51 - for the best place if they see a network
352:54 - number they haven't seen before they ask
352:55 - their neighbors and their neighbors
352:57 - neighbors and they go oh god okay i got
352:59 - a good way to get to 67 149 and so
353:02 - there's all kinds of communication but
353:04 - it's relatively slow and it doesn't have
353:06 - to be perfect
353:08 - and so it's router tables are what
353:10 - routers have but they're indexed by the
353:12 - network number of the packets not the
353:14 - host of the destination so that's an
353:17 - amazing
353:18 - amazing improvement in the performance
353:20 - and efficiency of the
353:22 - internet core the ip core
353:25 - so it's really quite simple
353:28 - right you basically
353:29 - have a local area network on your campus
353:32 - this might actually be your house too
353:35 - house is kind of like a campus
353:37 - and you can do all the crazy things you
353:39 - want hundreds of computers thousands of
353:41 - hundreds of servers and thousands of
353:43 - laptops and you get one address that is
353:47 - the address
353:48 - of your campus
353:51 - it's the network number of your campus
353:53 - to the rest of the world
353:54 - and then all over the world people can
353:57 - send to you
353:58 - and by simply looking at the prefix
354:02 - data makes it to you
354:04 - keeps this really simple
354:06 - and really fast
354:08 - okay
354:09 - so it's beautiful
354:11 - that's what the network number one area
354:12 - code one network number it's the only
354:15 - thing has to be kept track of a whole
354:17 - um campus can be characterized within
354:20 - the core of the network as basically a
354:23 - single network number now the reality is
354:25 - it's usually
354:26 - a few of these because they get given to
354:28 - you in smaller chunks so you end up with
354:30 - you know 20 or 30 of these things for
354:32 - your campus if you're a medium to large
354:34 - campus
354:37 - okay
354:39 - so now i want to talk a little bit about
354:43 - the problem of
354:44 - computers that move around
354:47 - so you have a laptop
354:49 - and you use it at your local coffee shop
354:52 - and then you close the lid and you go
354:54 - home and open it
354:56 - and it works at home
354:58 - and then you close the lid and you go to
354:59 - school and you open it and talk to
355:00 - wireless at school and it works
355:03 - it's like
355:04 - hey dr chuck you just told me that i
355:06 - have to have this address and i can't
355:07 - talk on the internet if i don't have the
355:09 - right address and the packets are routed
355:12 - based on the prefix of this address why
355:14 - is it that i can be three places coffee
355:17 - shop home
355:18 - and school and it seems like everything
355:20 - works well
355:22 - that's because
355:24 - while your computer has an ethernet
355:26 - address that's baked in at the factory
355:29 - most computers are configured when they
355:31 - first open up and connect to a wi-fi to
355:34 - ask
355:35 - instead of having an ip address
355:36 - configured in your computer they send a
355:38 - request out to say
355:40 - hey
355:41 - i'm new here
355:43 - is there anyone who will give me an ip
355:45 - address that i might use for this
355:46 - particular location
355:49 - and
355:50 - if there is an access point say at your
355:52 - starbucks
355:53 - it says
355:54 - sure
355:55 - use this one you're at starbucks that's
355:58 - a good number for starbucks now it turns
356:01 - out that the prefix of this is exactly
356:03 - the prefix that the the world sees all
356:05 - this traffic to starbucks so there's
356:07 - actually kind of a real address
356:09 - okay
356:10 - and it gives you an address
356:13 - okay so you ask when your thing comes up
356:16 - it asks what can i get and then it's
356:19 - told what address to use so using one
356:21 - address while you're at starbucks a
356:23 - different address at home and a
356:24 - different address yet again at school
356:28 - so that's called the dynamic host
356:31 - configuration
356:32 - protocol now it turns out
356:35 - with schools and
356:37 - homes and
356:39 - there's just too many computers
356:44 - to give every computer
356:46 - a real address and so we have these
356:48 - special addresses
356:50 - they're called the non-routable
356:52 - addresses
356:54 - so you'll probably notice if you go to
356:55 - one person's house
356:57 - you will have a ip address of
356:59 - 192.168.something
357:02 - something go to different person's house
357:04 - it'll also be
357:04 - 192.168.something.something
357:07 - they go to your house it's
357:08 - 192.168.something.something
357:11 - and you're like how can that work
357:13 - i seem to have the same address well
357:16 - that's because of a technology called
357:18 - network address translation
357:20 - where
357:21 - each of the home routers actually has a
357:24 - unique and distinct address but you're
357:26 - not seeing it
357:27 - it's giving you a temporary address an
357:29 - address that really can't run at all on
357:31 - the internet it only lives within the
357:34 - house but then as your packets leave the
357:36 - house or leave the starbucks
357:38 - the real address is put in and then when
357:40 - it comes back the real address is taken
357:41 - out and your local address is put in so
357:44 - they're called non-routable addresses
357:46 - because if they ever escaped into the
357:47 - real internet they'd be like oh those
357:49 - are for your house they're only for
357:51 - they're not supposed to go very far and
357:52 - i don't even know where they go they go
357:54 - nowhere
357:56 - in the core of the internet but they go
357:58 - properly inside your house so the way
358:00 - this ends up working
358:02 - is if you are at
358:04 - your coffee shop
358:06 - the coffee shop has an address
358:09 - you associate with their base access
358:11 - point
358:13 - it gives you a non-routable address to
358:15 - use locally
358:17 - and then as your traffic gets sent
358:20 - this address is changed to the address
358:22 - that address you never see this
358:23 - happening it's done as the packet goes
358:26 - through the base station
358:28 - and then when the packet comes back it
358:30 - comes back with this address but then as
358:32 - it goes to the base station it switches
358:34 - back to this address
358:35 - so even though this address is not the
358:37 - real address the network sees they see
358:40 - you having this address here
358:42 - so if you would do an ip lookup from a
358:44 - coffee shop
358:45 - the coffee shop will be identified you
358:47 - will see the ip address here and if you
358:49 - looked at your laptop your laptop would
358:51 - not have that same address because it's
358:53 - being translated
358:58 - in
358:59 - the
359:00 - access point
359:04 - so then you go
359:06 - home
359:09 - and at home
359:13 - your access point has a different
359:15 - address
359:16 - but your computer asks your ass address
359:20 - asks your access point
359:22 - for an address
359:25 - and it gets a local address that's
359:26 - generated locally and again there's a
359:29 - mapping it's called nat
359:31 - n-a-t i'll change the color n-a-t
359:35 - network address translation so as the
359:38 - packet goes through
359:39 - it takes out the one address and puts in
359:41 - the second date comes back it takes the
359:43 - address out and puts the local one in
359:46 - and the same thing happens at school
359:47 - right so you're at school finally and
359:49 - you get a different address they're not
359:51 - the same but you look and the prefixes
359:53 - are the same it's like they should be
359:54 - the same place but they're completely
359:56 - different because your school has a
359:58 - different address and there's a
359:59 - translation that goes back and forth as
360:02 - the data goes around and round so just
360:04 - for the distance of the local wi-fi or
360:07 - whatever use these 192.168 numbers and
360:10 - then they're translated to the real
360:12 - numbers by your network access points
360:15 - so these are illegal
360:18 - inside this network so if it ever saw a
360:20 - 192.168
360:23 - it would just throw that packet away
360:27 - they're only
360:28 - for very local connections
360:32 - so with that
360:34 - i'm wondering if by now
360:37 - you know why
360:40 - this is funny
360:45 - i'll give you a minute
360:56 - okay so the reason this is funny
360:59 - is she traced the killer's ip address
361:03 - and it had a prefix of 192.168
361:08 - which means the killer had to be within
361:10 - a relatively short radius
361:13 - using likely the same wi-fi access point
361:17 - which means it was close
361:20 - very scary
361:23 - i hope you think it's funny
361:25 - it of course xkcd is never exactly funny
361:29 - but it hopefully makes you smile a
361:31 - little bit
361:34 - so up till now
361:37 - i've been talking about
361:43 - so up to now i've been talking about
361:46 - this cloud network that's magic and the
361:49 - packets take different routes and we
361:51 - don't know but they show up remember the
361:53 - mailbox like they just show up or don't
361:55 - show up right
361:57 - so
361:58 - it turns out
361:59 - that sometimes we as engineers want to
362:02 - take a look at what's going on inside
362:04 - the internet
362:05 - and it turned out that there was a
362:08 - feature they added early on to help
362:10 - diagnose problems in the internet that
362:12 - we still use today and it's so
362:15 - convenient that it's built right into
362:16 - your operating system if you have a
362:18 - macintosh or linux traceroute is built
362:21 - in and if you have windows you've got to
362:23 - install traceroute so just say windows
362:24 - install tracer out and you'll find
362:26 - something
362:27 - but
362:28 - there was a problem so if you recall i
362:31 - said that
362:34 - each router sees the world very narrowly
362:37 - and simply sees a packet and makes a
362:39 - decision
362:40 - on one place
362:41 - so let's say that
362:44 - here comes a packet on the way to
362:46 - stanford
362:47 - and these routers are sort of strangely
362:49 - configured
362:50 - this router thinks it should go there
362:53 - this router thinks it should go there
362:55 - and this router thinks it should go
362:56 - there
362:57 - well it comes in and goes like oh well i
362:59 - know where that one goes there
363:01 - so if you end up with this misconfigured
363:04 - router situation
363:06 - you end up with your data going round
363:09 - and round in circles
363:12 - it would actually like crush the network
363:14 - because it's like a whirlpool
363:17 - you can't even notice that it's
363:18 - happening because there might actually
363:20 - be
363:21 - you know
363:22 - 10
363:23 - you know there might be a bunch of them
363:25 - and then it comes back and you send it
363:26 - around again
363:28 - so you're filling up all your bandwidth
363:29 - it's never going to get there
363:31 - unless something changes and such
363:33 - something crashes
363:35 - it's not going to change because these
363:36 - routers think that's the best thing to
363:38 - do they're mistaken but they are they
363:40 - can be mistaken because they're they're
363:41 - operating with imperfect information
363:45 - so how would you solve this problem
363:48 - it's like
363:50 - routers are imperfect
363:52 - so they solve the problem with a thing
363:53 - called the time to live field
363:56 - so much like the network interest
363:58 - translation tweaks the addresses on the
364:00 - way in and on the way out the time to
364:02 - live is a field that routers change
364:05 - every time a packet goes through a
364:06 - router it subtracts one from this field
364:09 - and it starts with a number between 25
364:12 - it can be as high as 255 but it's
364:14 - usually like 25. and um
364:17 - what happens is every time the packet
364:20 - goes through a router the number goes
364:23 - down by one so if it was it would be
364:25 - come in here as 255
364:27 - then it would go through here 254
364:30 - and 253
364:31 - it would come back it'd be 252
364:33 - and what would happen is eventually
364:36 - it would get
364:37 - to one of these guys and it hit zero and
364:39 - they would decide
364:41 - okay
364:42 - you've been running around too long we
364:44 - will throw you away
364:46 - so the number goes down and it always
364:48 - goes down
364:50 - but then when it hits zero
364:52 - they throw the packet away they say we
364:54 - you have been through 255 hops chances
364:57 - are good you're never going to get to
364:59 - your destination
365:01 - so
365:02 - the traceroute command
365:04 - sort of cheats
365:05 - normal packets are sent with a ttl or
365:08 - time to live of like 30
365:10 - 30 hops or 40 hops
365:12 - but what trace route does it sends
365:14 - broken packets
365:18 - it turns out
365:19 - that when a router throws away your
365:21 - packet most of the time it is courteous
365:24 - and it sends you back a notification
365:26 - says hi
365:27 - i got your packet i decremented it
365:30 - subtracted one
365:31 - and it got to zero
365:33 - and i threw it away sorry about that
365:37 - here's here's who i am i mean i really
365:39 - feel bad about throwing your packet away
365:40 - maybe you want to figure something else
365:42 - out i don't know something must be
365:43 - messed up can't be my fault but i threw
365:45 - it away
365:46 - so what traceroute does is it first
365:48 - sends a packet with a time to live of
365:49 - one so the first router goes like whoa
365:52 - this has been around a long time set to
365:54 - zero throws it away then sends a note
365:56 - back
365:57 - then traceroute sends a packet of two
365:59 - across
366:00 - it goes hop hop and it gets thrown away
366:02 - a little note comes back
366:04 - so you can kind of build a map by
366:06 - sending enough packets and getting kind
366:08 - of a return
366:10 - rejection from one of the routers
366:13 - it would have got there
366:15 - so if for example i do a trace route
366:17 - from the university of michigan to
366:19 - stanford
366:21 - you'd if i did it now it'd be a
366:22 - different set of things
366:24 - i get this output
366:26 - and if i take a look at this
366:28 - this is the hop so there's the first one
366:30 - two three four through fourteen
366:33 - fourteen hops so it takes 14 hops now
366:35 - interestingly again i don't remember
366:37 - what the hop count was in the store and
366:38 - forward days but it's quite a few
366:41 - and that's because it's optimizing
366:43 - geography
366:45 - and so you can see the first top is on
366:49 - my campus
366:50 - then i the second and third hop are
366:53 - bouncing around my campus some more
366:56 - now we don't quite know where this one
366:57 - is but now it's on an on a national
367:00 - network called internet2 internet2
367:01 - internet2 this is probably going across
367:04 - the country
367:06 - and then it ends up on scenic
367:08 - which i think is sort of california's
367:11 - network it bounces through california a
367:13 - couple times
367:14 - let's see uh
367:16 - hpr lax so that's los angeles
367:20 - this is
367:21 - i don't know where that is los angeles
367:23 - now looks like it's making to oakland
367:26 - i don't know there's probably some
367:27 - meaning to these things so it's making
367:29 - it through oakland
367:30 - and then it's going to stanford from
367:33 - something oakland i don't know
367:36 - but now it's on stanford campus and now
367:38 - it has three more hops to get across the
367:40 - stanford campus to the stanford campuses
367:43 - web server now what's also going on here
367:46 - is keeping track of how long it's taking
367:49 - it sends each one a couple of times
367:51 - and so these are milliseconds so
367:54 - milliseconds or thousandths of a second
367:56 - so
367:57 - 534 milliseconds is a half a second 490
368:01 - is a half a second so these are like
368:04 - half a second half a second oh wait no
368:06 - no sorry not a half second that'd be
368:09 - four thousand well
368:11 - one thousand milliseconds would be one
368:13 - second so i got that all wrong
368:15 - so
368:16 - point four nine milliseconds is like
368:18 - half of a thousandth of a second so
368:20 - that's fast
368:22 - fast six milliseconds is six one
368:24 - thousandths of a second
368:27 - 76 milliseconds which is nine hops away
368:32 - that's seventy six thousands or seven
368:34 - one hundredths
368:36 - so it takes about seven one hundredths
368:41 - yeah
368:42 - so like
368:44 - 77 over a thousand
368:47 - so no seven one hundredths sorry seven
368:49 - one hundredths of a second
368:53 - it's less than a tenth of a second to
368:56 - get through
368:57 - fourteen routers from michigan to
368:59 - stanford
369:01 - less than a tenth of a second
369:03 - pretty impressive
369:06 - now if i do a trace route from ann arbor
369:10 - michigan to east lansing michigan
369:12 - michigan state university we have a very
369:15 - close connection i mentioned the merit
369:16 - network where we've had a close
369:18 - connection for a long time
369:24 - so not only
369:26 - is it fewer hops it's only eight hops to
369:28 - get to michigan state
369:30 - um if you look at the if you look at the
369:32 - hops here
369:33 - um i'm bouncing around the campus for
369:37 - three i'm bouncing through the state for
369:39 - two
369:40 - and bouncing on the michigan state
369:42 - campus
369:43 - for three so it's a total of eight
369:46 - two hops to get two three offs to get
369:48 - across my campus two hops to get across
369:50 - the state of michigan and three hops to
369:53 - get on campus and it's really fast
369:57 - it's nine one thousandths of a second
369:59 - which is
370:01 - less than a hundredth of a second
370:03 - so really fast you can kind of see it
370:06 - now if you ran this trace route more
370:07 - than once
370:08 - this might change it doesn't change too
370:11 - fast but
370:12 - legally it could change i mean it
370:14 - there's no guarantee it's going to be
370:16 - the same it's highly likely it's going
370:18 - to be the same because the most
370:19 - efficient way is not going to change
370:21 - within a few seconds but if you start in
370:23 - the middle of the day and you do it the
370:24 - next day it might change quite a bit so
370:26 - be something to play with
370:29 - run it
370:30 - print it out
370:32 - run it again at midnight run it's noon
370:35 - see if your trace route is different
370:37 - right be interesting
370:40 - so here's an example of a trace route
370:42 - from university of michigan to peking
370:44 - university in china
370:47 - and um
370:48 - and so it's again you know it's
370:52 - it bounces through the state of my
370:54 - campus for a couple of hops
370:57 - right my campus for a couple of hops it
370:59 - bounces around
371:01 - the united states for a couple of hops
371:04 - and then it starts crossing the pacific
371:07 - ocean
371:08 - it goes this there's traffic actually
371:10 - went through seoul korea
371:12 - and then it ended up in beijing
371:14 - now the interesting thing is you can see
371:16 - that it looks like it's taking about
371:18 - sixty one thousands or six one
371:20 - hundredths
371:22 - just over uh
371:23 - just almost well a half a tenth of a
371:25 - second
371:26 - to get across the country
371:28 - and then it starts taking longer and
371:30 - then by the time it's going all the way
371:33 - to china and back it's doing 256
371:36 - milliseconds which is about a quarter of
371:38 - a second
371:39 - now the big difference here
371:41 - is likely not traffic it is likely the
371:45 - speed of light
371:47 - it is how fast it takes light to get
371:50 - across the pacific ocean
371:53 - so it takes a while
371:56 - the reason i think it's most likely
371:59 - these numbers understand
372:10 - it's low traffic because these are very
372:12 - consistent
372:17 - pretty much all the time so that
372:19 - suggests that we're not waiting for any
372:21 - traffic we're getting through as fast as
372:22 - we physically can
372:24 - which is some combination of the speed
372:26 - of the length and the speed of light
372:34 - so
372:36 - we just got done talking about how we
372:39 - add to every packet this global number
372:42 - the ip address
372:44 - it has the prefix of the network number
372:46 - in the internet part the internetwork
372:49 - where it's really moving data from one
372:51 - network to another network and leaving
372:53 - it up to those destination networks how
372:55 - to how to move it
372:56 - um
372:58 - we end up really simplifying the
373:00 - postcard and the postcard ends up being
373:02 - a really apt example
373:05 - but the key thing
373:06 - especially when thinking about the
373:07 - four-layer architecture that the reason
373:09 - that i think tcpip succeeded was in this
373:12 - real complex problem of moving data
373:14 - between billions of computers
373:16 - it kept the part in the middle real
373:18 - simple
373:19 - it doesn't try to be perfect it doesn't
373:21 - try to re-transmit data don't try to
373:23 - store it it doesn't try to keep it in
373:25 - the right order it doesn't try to say
373:26 - that if this packet went here i'm gonna
373:28 - make sure the next one goes there
373:30 - the two packets one if one gets ahead we
373:32 - don't really care
373:34 - um it means it really fast and really
373:37 - scalable
373:38 - and um by keeping it simple and really
373:41 - fast um
373:43 - it solves really an amazing problem but
373:45 - we yet have other problems to solve
373:48 - so i want to close
373:50 - this lecture
373:52 - by introducing you to another person
373:55 - so vint cerf
373:57 - was a graduate student as the whole
373:59 - notion of packet switching was being
374:01 - sort of examined both in the federal
374:03 - government at the defense advanced
374:06 - research project agency darpa
374:08 - and
374:09 - in higher education
374:11 - both in the united states and europe
374:14 - uk and elsewhere
374:16 - and so vint cerf was kind of at the
374:18 - right place at the right time and we
374:20 - could be very thankful for that he's
374:22 - credited as being one of the fathers of
374:24 - the arpanet
374:26 - which of course begat
374:28 - the internet
374:30 - and so
374:31 - vint is going to talk to us
374:33 - in a sense going back even free arpanet
374:37 - and bring us up
374:39 - packets and what packets mean
374:41 - and then how that all flowed into the
374:42 - arpanet and how the arpanet evolved
374:46 - to become the internet
374:48 - enjoy
374:51 - [Music]
375:11 - packet switching was an idea which
375:14 - was specifically studied
375:17 - by len kleinrock at mit who was actually
375:20 - looking at message switching and he did
375:22 - a
375:22 - brilliant dissertation on the use of
375:25 - queuing theory to analyze what networks
375:27 - of cues would look like
375:29 - using this
375:30 - message switching approach
375:32 - and his analysis although we'd never use
375:35 - the word packet
375:37 - is as equally
375:39 - applicable to packet switching as it is
375:40 - to message switching so that's one
375:42 - important milestone in round 1961.
375:45 - in 62 or thereabouts paul barron
375:48 - is doing work for the rand corporation
375:50 - and is deeply concerned about the
375:52 - ability to preserve command and control
375:55 - in a post-nuclear environment we were
375:57 - seriously worried that the russians
375:59 - would actually launch and that we would
376:01 - suffer a nuclear attack and then we had
376:03 - to be able to respond and we needed
376:05 - command and control for that
376:07 - so paul in 1962 before the existence of
376:11 - integrated circuits or anything else
376:14 - is
376:15 - saying we really should be
376:18 - digitizing and packetizing voice
376:22 - and then using sort of the pole mounted
376:25 - radios that are able to transmit in all
376:27 - directions to create a highly connected
376:30 - environment so that if holes were
376:32 - knocked out of it by nuclear explosions
376:34 - you would still if it's a fabric that's
376:36 - in any way connected information could
376:38 - get from one end to the other
376:40 - so he envisioned the notion of a message
376:43 - block
376:44 - and it was dynamically routed he used
376:46 - hot potato routing if you got something
376:47 - he got rid of it as fast as he could he
376:49 - chopped up the speech into little 20
376:51 - millisecond pieces
376:52 - he didn't talk so much about data as i
376:55 - remember it and this was supposed to be
376:56 - a highly resilient voice network for
376:58 - command and control i may have just done
377:01 - him a disservice because later
377:03 - he was very much
377:05 - conscious of the importance of data
377:07 - communication too
377:08 - so that's around 1962 it gets documented
377:11 - in an 11 volume series called
377:13 - undistributed communications and he
377:15 - can't sell it to anybody
377:17 - the traditional telcos att in particular
377:20 - and the people at what was then the
377:22 - defense communication system or defense
377:25 - communications agency laughed him out of
377:27 - the room said this was a silly idea
377:28 - couldn't possibly work
377:30 - and so you know he should just go away
377:32 - so he never got anywhere with that in
377:34 - spite of all the documentation in 66
377:37 - larry roberts along with one other guy
377:40 - whose name i'm now not remembering does
377:42 - a point-to-point experiment to test
377:44 - packet switching it was between the
377:47 - ansfq
377:49 - seven machine at s
377:50 - system development corporation in santa
377:52 - monica
377:53 - and uh
377:54 - the uh tx2 machine at mit lincoln
377:57 - laboratories was where larry was they
378:00 - demonstrated on a 2400 you know bit line
378:02 - bit per second line that you can move
378:04 - packets back and forth then in the
378:07 - 64-65 time frame
378:09 - a man named donald w davies at the
378:11 - national physical laboratory in london
378:14 - also gets the bug tries to get money
378:17 - from the science research commission at
378:20 - uh
378:21 - in england and gets only enough to build
378:24 - one node you know he the one node
378:26 - network so he builds this packet net he
378:29 - invents the term packet to describe what
378:31 - these objects are and it works he's got
378:33 - a bunch of you know terminals and other
378:35 - things hanging off of this one node so
378:37 - in a funny way he built a local area
378:39 - network
378:40 - if you like
378:42 - but it was you know based on physical
378:43 - wires
378:44 - so those three guys introduced packet
378:46 - switching larry and uh whoever it was
378:49 - that he worked with um demonstrate that
378:51 - it's possible to get two very distinct
378:53 - kinds of computers to talk to each other
378:55 - using the standard way
378:58 - jcr lick glider is a
379:00 - psychologist actually at mit
379:02 - but he's convinced in the early 60s that
379:05 - computing is important to
379:07 - non-numeric processing that it will
379:09 - allow people to
379:11 - work together and collaborate in ways
379:12 - that they never could before
379:14 - he comes and starts the information
379:16 - processing techniques office at arpa
379:19 - with this being his bonnet and who does
379:21 - he encounter
379:22 - he encounters douglas engelbart
379:25 - at sri international and the two bond
379:27 - basically because engelbart was all
379:30 - about non-numeric computing and the
379:32 - ability of people to build up
379:34 - the superstructure of communications and
379:36 - documents and interact with each other
379:38 - hyperlinking the mouse the portrait mode
379:41 - display back on my black and white
379:43 - presentations i mean the guy had a world
379:46 - wide web in a box at sri
379:49 - and
379:50 - lick lighter understands that
379:52 - lick lighter is sending out notes to his
379:54 - little community of people talking about
379:56 - the intergalactic network you know maybe
379:58 - tony and cheek
380:00 - so
380:01 - he really gets credit for having put
380:03 - this meme in place at arpa
380:06 - then taylor comes along to pick up the
380:08 - the responsibility for running the ipto
380:10 - from lick lighter and is all hacked off
380:13 - because he's got three terminals in his
380:14 - office at the pentagon connected to
380:16 - three different machines and he can't
380:17 - through he says why can't there be one
380:19 - terminal talking to all three we need a
380:21 - network
380:22 - and so
380:24 - as he's pursuing this idea uh with
380:27 - charlie hertzfeld who's the head of arpa
380:28 - at the time charlie hands him a million
380:31 - bucks over a 20-minute conversation and
380:33 - now taylor's got the problem who's going
380:35 - to actually do this because taylor is
380:37 - not a technologist either he's
380:39 - another you know kind of psychologist
380:41 - type
380:42 - so he decides to get larry roberts from
380:45 - lincoln laboratories who did that packet
380:46 - thing and larry doesn't want to come
380:49 - so he goes and complains about this to
380:51 - charlie hertzfeld charlie calls up the
380:53 - guy that runs lincoln laboratories and
380:55 - says you know we pay for a significant
380:58 - fraction of your research budget every
380:59 - year you should
381:01 - you should tell larry he should show up
381:03 - and in fact
381:05 - i thought that maybe larry had been
381:07 - forced to do this you know by charlie i
381:09 - think it was probably a little less
381:10 - awful than that but
381:12 - larry was persuaded to come down
381:14 - eventually of course inherited the
381:16 - operation of the office from bob taylor
381:18 - but in the meantime is the guy
381:20 - responsible for doing the initiating the
381:22 - internet or the arpanet project
381:24 - so they write an rfc or an rfq request
381:28 - for quotation
381:29 - a bunch of responses come back probably
381:32 - on the order of a couple dozen i don't
381:34 - know personally for sure how many i know
381:36 - that i wrote one of them with my
381:38 - colleague
381:40 - steve crocker while we were still at
381:42 - ucla as graduate students but we were
381:44 - consulting with a company called jacobi
381:46 - systems in santa monica jacobi systems
381:48 - wrote one of the responses bull bear
381:50 - neck and newman wrote another response
381:52 - primarily written by bob khan who come
381:54 - to bbn from mit
381:56 - so
381:57 - the responses come back and they get
381:59 - evaluated and four of them end up
382:01 - and the jacobi systems one isn't one of
382:04 - them or if it was it didn't get selected
382:06 - bnn got selected
382:08 - so steve crocker and i kind of hiked
382:09 - back to ucla as graduate students
382:12 - and the next thing we know glenn
382:14 - kleinrock who's at ucla and who'd
382:16 - written you know this original
382:17 - dissertation work on packet switching
382:19 - has come to ucla to teach and explore um
382:22 - a queuing theory
382:24 - is uh a closed uh compatriot of larry
382:28 - roberts because they were both at
382:29 - lincoln labs together
382:31 - so he gets the network measurement
382:32 - center piece of the arpanet project
382:35 - and steve crocker and i and john postel
382:38 - all of us from the same high school in
382:40 - santa monica and the san fernando valley
382:42 - end up in lane kleinrock's
382:45 - operation
382:46 - running the network measurement center
382:48 - so i was the principal programmer for
382:50 - that steve crocker took the
382:51 - responsibility for managing and leading
382:54 - the network working group has led to the
382:55 - protocols host to host protocols
382:58 - and john postel eventually becomes the
383:00 - keeper of the documentation he's the rfc
383:03 - editor which steve crocker started
383:04 - request for comments he's the guy that
383:07 - becomes the numbers are which is keeping
383:09 - track of address spaces and allocations
383:11 - and eventually becomes the domain name
383:14 - manager or the internet assigned numbers
383:16 - authority when the internet happens that
383:18 - hasn't happened yet the this period of
383:20 - time of the arpanet
383:22 - program
383:23 - it brings us up to 1972. and this is an
383:26 - important moment in this whole history
383:28 - because the first demonstration of the
383:29 - arpanet happens
383:31 - in the washington hilton hotel basement
383:34 - in october of 72 a whole bunch of people
383:37 - from the networking
383:39 - interested networking community packet
383:41 - switching community attend not only in
383:43 - the us but from france and from england
383:45 - and italy and germany and elsewhere
383:49 - that group of about 25 or 30 people
383:52 - convenes sees the arpanet in operation
383:55 - sees applications that were being done
383:58 - including doug engelbart's stuff
384:01 - and then forms this international
384:03 - network working group modeled after the
384:05 - working group that steve crocker managed
384:07 - to build the arpanet system
384:09 - and at this point i become the chairman
384:11 - of that group because steve is busy at
384:13 - arpa doing artificial intelligence
384:17 - the next
384:18 - at the end of that year bob khan leaves
384:20 - bulk baron nick and newman and goes to
384:23 - arpa
384:24 - i leave ucla where i've been working
384:26 - with kleinrock and and crocker and
384:28 - pastel and i go to stanford so bob is at
384:31 - arpa i met at stanford and in the spring
384:33 - of 73 bob comes out
384:36 - from
384:37 - arpa and he says i have a problem he
384:39 - says what's your problem he says well we
384:40 - got this arpanet and he said yep
384:42 - but we also are working on
384:45 - other networking capability to make
384:47 - command and control work for the
384:49 - military if you're going to be serious
384:50 - about putting computers in command and
384:52 - control they have to be mobile they have
384:55 - to be in you know armored personnel
384:56 - vehicles and tanks and all these other
384:58 - things they have to be seabourn so we
385:00 - can ship the ship and ship to shore
385:02 - communications which means satellite
385:04 - and we so we need mobile radio we need
385:06 - satellite in addition to
385:08 - the fixed wire systems that are
385:11 - represented by the arpanet we have fixed
385:13 - installations that are not moving around
385:15 - so we have all these different
385:16 - technologies and bob's brilliant idea
385:19 - is not to build one network with all
385:21 - those technologies embedded in it
385:24 - instead he breaks them apart and says
385:26 - let's build a packet satellite network
385:28 - which optimizes the use of satellite
385:29 - takes into account that it's got a half
385:31 - a second round trip time let's build a
385:34 - packet radio network which optimizes a
385:36 - system whose connectivity is changing
385:38 - with time as things move around and you
385:40 - get variable delay and also variable
385:43 - interference
385:44 - so these were three different packet
385:46 - networks then the problem is how do you
385:48 - hook them together you wouldn't have
385:49 - this problem if you put all the
385:51 - technologies into one net but if you put
385:53 - them all into one net it makes it really
385:55 - hard to do control over all these highly
385:57 - variable parameters so instead he says
386:00 - break them into different networks and
386:01 - connect those together so we design and
386:03 - build a gateway which today we call a
386:06 - router
386:07 - and that concept
386:09 - also introduced a whole bunch of other
386:10 - things like how do you refer to another
386:12 - network each network thinks it's the
386:14 - only network in the universe this is
386:16 - true of the proprietary networks like
386:18 - sna and decnet and so on
386:20 - and
386:21 - you didn't have a vocabulary to say take
386:23 - this packet and move it to another
386:26 - computer on another network somewhere
386:27 - else that you might not even be
386:29 - connected to so we have to invent an
386:31 - internet address space in order to solve
386:33 - that problem
386:34 - we have to find a way to allow packet
386:37 - losses in this path to be recovered
386:40 - which is where tcp now becomes a manager
386:43 - of reliability on an end-to-end basis
386:46 - instead of relying on each net to be
386:47 - reliable the arpanet was built on the
386:50 - assumption you could build a reliable
386:51 - underlying man the internet was based on
386:53 - the assumption that no network was
386:55 - necessarily reliable and you had to do
386:56 - end-to-end re-transmissions to recover
386:59 - so
387:00 - during this
387:02 - 1973 period
387:04 - bob and i get the papers first paper
387:06 - written and published in ieee
387:08 - transactions on communications may of
387:11 - 1974.
387:12 - and i think mostly nobody paid too much
387:14 - attention to it
387:16 - meanwhile arpa is funding us to go make
387:18 - this actually work at stanford i am
387:20 - working with my graduate students some
387:23 - who are in xerox part summer
387:25 - at stanford
387:27 - on this detailed specifications of tcp
387:30 - we published that in december of 1974
387:32 - and it's the first time the word
387:34 - internet shows up in print anywhere
387:36 - because the first papers we talked about
387:38 - internetworking
387:39 - so internet shows up in a complete spec
387:42 - in december 74 and it's also got bugs
387:44 - but we don't know that yet
387:46 - until we start implementing it in 1975
387:48 - with two other organizations so bob khan
387:50 - says can't have just one implementation
387:53 - baltimore naked newman becomes one of
387:54 - the implementers
387:56 - university college london and peter
387:58 - kerstein's group in england is the
388:00 - second or third implementation so we
388:02 - have three implementations of tcpip in
388:05 - fact by this time it's only tcp we
388:06 - haven't broken off the ip part
388:09 - um three implementations are going we
388:11 - instantly find problems with the design
388:14 - and we start evolving
388:15 - so over a period from 1973 to 1978 we go
388:19 - through four iterations of the design
388:21 - and implementation and test until we
388:23 - have a fairly stable thing
388:25 - and then we standardize and so 78 we fix
388:28 - everything it's now by this time the
388:30 - internet protocol has been split off
388:32 - because people like david reed and danny
388:35 - cohen are saying
388:36 - we need to have
388:38 - real-time communications that is not
388:40 - necessarily reliable but which has low
388:42 - latency so voice communications radar
388:44 - tracks and all that you don't care where
388:46 - the missile was two seconds ago you want
388:48 - to know where is it now
388:50 - so and in the case of voice if you lose
388:52 - a packet you just say say that again i
388:54 - missed something
388:55 - so we split tcp into tcp and
388:58 - ip and we create something called user
389:01 - datagram protocol which is parallel to
389:03 - tcp and it is the real time low latency
389:06 - version of the reliable tcp
389:09 - all of those little components iptcp and
389:11 - udp now go into the internet
389:12 - architecture starting in 1978 and we
389:16 - start implementing for the next five
389:18 - years we start we
389:20 - do everything we can to get tcpip
389:23 - implemented on every operating system we
389:25 - can find it goes on to the ibm machines
389:27 - it goes under the digital machines hp
389:30 - goes into unix
389:31 - we have a unix version built by bolt
389:34 - bareneck and newman we send it out to
389:36 - berkeley to the berkeley bsd release
389:38 - guys and bill joyce's i don't like that
389:40 - code he writes his own puts it into bsd
389:43 - 4.2 and that's the version of
389:46 - unix that carries a lot of tcp to the
389:49 - academic world because at the same sort
389:51 - of time frame some microsystems comes
389:54 - along and builds these fantastic
389:56 - workstations and they want to use open
389:58 - source or at least open protocols
390:01 - and open operating systems so they adopt
390:03 - unix and the tcp comes with it
390:06 - and they use ethernet as a way of
390:08 - connecting workstations together so they
390:10 - are the engine that's driving the
390:12 - academic community which are all game
390:13 - busters for workstations and high-speed
390:15 - local networking
390:16 - so all of this of course places huge
390:18 - demands on the arpanet
390:20 - backbone which is only running at 50
390:22 - kilobits a second and eventually leads
390:24 - to the need for higher speed nsf jumps
390:27 - into the fray seeing how valuable all
390:29 - this is for the academic community and
390:31 - concludes that it should build a network
390:33 - that runs even faster and it does so
390:35 - it's called nsf net
390:38 - [Music]
390:56 - the domain name system
390:58 - it really doesn't have a great place to
391:00 - fit in this architecture it is the thing
391:03 - that converts user friendly names like
391:06 - www.umish.edu to to uh like a
391:08 - network-friendly address these network
391:11 - numbers and ip addresses are important
391:12 - because they are the they encode the
391:14 - geography of the connections of the
391:17 - internet but we humans really don't care
391:20 - about the geography of the
391:22 - interconnections of the internet
391:24 - www.edu or
391:26 - www.facebook.com is what we want to
391:28 - remember
391:29 - so i like to kind of think of the
391:31 - the uh the domain name system is kind of
391:34 - like sort of somewhere either between
391:36 - the internet and the transport or
391:38 - between the internet and the link or
391:41 - somewhere like in this area you know
391:42 - somewhere here and it's certainly not in
391:44 - the application layer it's not the link
391:46 - layer it uses the link layer
391:49 - but basically
391:50 - it's kind of a little add-on to the side
391:52 - so the domain name system
391:55 - is for user-friendly names okay so let's
391:58 - talk a little bit about just how it
392:00 - works because domain names are what we
392:04 - use all the time and i p addresses are
392:06 - what computers use all the time
392:09 - and routers use routers really have no
392:11 - knowledge of the domain names they
392:12 - simply move data based on the ip
392:14 - addresses numeric addresses are tough
392:17 - for people to remember i remember in the
392:19 - old days we would have little post-it
392:21 - notes on our computers and that's how i
392:23 - would keep track oh there's a new
392:25 - minnesota just put up a server let's put
392:27 - that number on my little post-it note so
392:29 - the fact that they were numbers didn't
392:30 - bother us at all because there was only
392:32 - 40 of them but quickly there was more
392:35 - than 40.
392:37 - and each campus even in the early days
392:39 - only would have one network number but
392:41 - now campuses have 20 or even 40 network
392:43 - numbers
392:44 - multiple groups of addresses they're
392:46 - groups of addresses but they're many of
392:47 - them
392:48 - they get reorganized you move a server
392:50 - from one place on campus to another like
392:52 - the the michigan web server it was on
392:54 - our north campus it would have one
392:55 - address it was on our main campus would
392:57 - have another address and so you don't
392:59 - want people to know what these ip
393:01 - addresses are
393:03 - so they invented this notion of a domain
393:05 - name system the name the the visible
393:08 - name that we could switch the mapping
393:10 - from the name to the ip address
393:12 - transparently
393:16 - and so the domain name system
393:19 - is like the internet's address book
393:21 - and it's a big distributed database
393:23 - that's fast it uses caching so that it's
393:26 - locally fast even if the network is
393:28 - partially down
393:29 - i p addresses reflect the technical
393:31 - geography and they read right to left at
393:34 - least to the point where the network
393:36 - number is kind of the physical
393:38 - attachment point for the campus or
393:40 - business and then this part is the
393:43 - attachment point within that campus or
393:45 - business and so the most specific the
393:48 - least specific to most specific goes
393:50 - from left to right domain names on the
393:53 - other hand are like organizational
393:55 - structure the least specific is on the
393:57 - far right and then it goes more specific
394:00 - as we go left
394:02 - so edu means educational institutions
394:05 - umich.edu means the particular
394:07 - educational institution university of
394:09 - michigan
394:10 - si.umich.edu means
394:12 - a school of information at the
394:14 - university of michigan not all schools
394:15 - is just a particular one and then dub
394:17 - dub dub is a particular server at that
394:20 - school and it reads like a postal
394:22 - address so if you think of
394:24 - where i teach 2455 north quad it's kind
394:27 - of on earth
394:29 - and it's on the country usa and it's in
394:31 - a zip code it's in the state of michigan
394:33 - it's in ann arbor and then this is the
394:35 - building and then this is the room
394:36 - number in the building so we go from
394:38 - very general
394:40 - to very specific
394:42 - so domain names read in a sense right to
394:45 - left
394:46 - phone numbers and ip addresses read left
394:48 - to right
394:52 - the other thing that's interesting about
394:53 - domain names is that they're owned
394:55 - they're owned from right to left and so
394:58 - there are sort of there's a hierarchy
395:01 - and basically an organization owns edu
395:05 - the organization's name is educause
395:08 - it has conferences and other things but
395:10 - one of the things that it does is it
395:11 - owns
395:13 - in the public trust the name edu
395:16 - so
395:17 - university of michigan could go to edu
395:18 - and say hey could i have umich.edu and
395:21 - they would say
395:23 - let me think about that and then maybe
395:24 - they would give it
395:26 - and they did because university of
395:27 - michigan nobody else had it and it
395:29 - seemed like a good name and university
395:32 - of michigan was like accredited
395:33 - institution of higher education so they
395:35 - would give it to them if i wanted to say
395:36 - like hey i'm dr chuck and i want to
395:38 - create dr chuck
395:40 - university i could have dr chuck.edu and
395:43 - they would go like
395:44 - no
395:45 - you can't
395:46 - you're not a university you're not
395:48 - you're not an educational institution so
395:50 - they might say yes they might say no
395:54 - things
395:55 - like.comand.org
395:57 - they're kind of a catches catch can and
395:59 - so the first one who gets there uh tends
396:02 - to win there's
396:03 - there's some situations where if
396:06 - if i got coca-cola.com
396:08 - and had no particular use for it and
396:10 - coca-cola owned the trademark coca-cola
396:13 - they could take it away from me unless i
396:14 - had a legitimate purpose for it
396:17 - it's harder for me to imagine a
396:18 - legitimate purchase coca-cola but
396:20 - target.com might be a club for target
396:23 - shooting and it would be difficult for
396:25 - target
396:26 - to say sorry i gotta take your your your
396:29 - target shooting club away
396:31 - because that's even though it's not as
396:33 - big as target's company it uh it's a
396:35 - legitimate use
396:37 - so
396:39 - at each level once the university of
396:41 - michigan is awarded the university of
396:43 - michigan it creates a mechanism to award
396:47 - sub domains within that
396:49 - and so there is actually a committee at
396:50 - the university of michigan and if we
396:53 - want like our learning management system
396:55 - is called ctools.umich.edu
396:58 - if we want that we have to go to the
396:59 - committee and convince them to give it
397:01 - to us a top-level domain within the
397:04 - university of michigan we got one the
397:06 - school of information where i'm a
397:07 - faculty member is si.umis.edu and they
397:10 - gave us that one
397:11 - i could go to that committee and i could
397:13 - say hey i'm going to be
397:15 - doctorchuck.umich.edu and they would say
397:18 - no
397:18 - you can't
397:21 - so then the school of information where
397:23 - i teach has si.umich.edu and they have a
397:27 - committee and they can give out sub
397:28 - domains within that so you get the
397:30 - picture right so i could go there and
397:32 - say hey
397:33 - can i have doctorchuck.umich.edu
397:36 - si.umich.edu doctortruck.site.iumish.edu
397:40 - and they would say
397:42 - no
397:42 - but you can have csev.people.si.umis.edu
397:47 - so once you own one of these things you
397:49 - can give out subdomains i do own
397:51 - doctorchuck.comchuck.com
397:53 - [Music]
397:55 - and if there was a high desire for
397:56 - something underneath doctorchuck.com
397:59 - then i could have my own little business
398:00 - selling domains under doctorchuck.com
398:03 - nobody seems to want any of those things
398:05 - but you know some people have mail.com
398:08 - and other things and so each one of
398:10 - these is a new potential for expansion
398:13 - and so that's kind of how the domain
398:15 - name works right it is this mapping
398:18 - between these names there is sort of
398:20 - this
398:21 - right to left ownership of these names
398:23 - and uh and you have to ask people to get
398:26 - those names and so that's a real quick
398:28 - overview of the domain name system
398:34 - [Music]
398:40 - hello and welcome to the transport layer
398:42 - we're working our way up from the bottom
398:44 - of our four layer architecture up to the
398:46 - top so we're kind of at the halfway
398:48 - point we've covered the link layer like
398:51 - ethernet and then we covered the
398:52 - internet work layer which is kind of
398:54 - like
398:54 - the postcard layer so let's let's review
398:57 - the magic of ip
398:59 - right the magic ip is this postcard
399:01 - layer that bounces these packets with
399:04 - from addresses and two addresses
399:06 - through
399:07 - you know 15 or so hops
399:10 - getting them there getting packets to
399:12 - their destination network from one
399:14 - network to another network as well as it
399:16 - can and when it gets to the destination
399:18 - network it finds the final computer on
399:19 - that network
399:22 - the magic of this is there is no
399:25 - interim long-term storage inside the
399:28 - network all the long-term storage is
399:30 - outside and now we're going to talk
399:31 - about that so one of the things that
399:33 - makes ip so fast is that it is not
399:35 - demanded to be perfect it is not
399:37 - demanded to deliver data in order and
399:39 - it's not demanded to it is there's no
399:42 - requirement that it doesn't lose data
399:44 - it's fast and barely ever loses data but
399:46 - when it does there's a layer to recover
399:48 - and that's we're going to talk about
399:50 - next
399:52 - so the internet protocol
399:54 - is this
399:55 - multi-hop
399:57 - packets can take multiple paths they can
400:00 - make use of all kinds of crazy links
400:02 - but now we're going to move up one
400:05 - right we're going to move up to the tcp
400:08 - layer
400:09 - so the tcp layer is both simple and
400:12 - complex
400:13 - the purpose of the tcp layer is to
400:15 - compensate for
400:16 - the possible errors in the ip layer as
400:19 - well as make best use of available
400:21 - resources
400:22 - so if the network if the overall network
400:26 - from
400:27 - the overall network from here to here is
400:30 - extremely fast we want to send data
400:32 - really fast right if on the other hand
400:34 - the overall network from here to here is
400:36 - really slow
400:37 - we want to send data slowly and be
400:39 - efficient because remember part of the
400:41 - goal of the tcp networking is to share
400:44 - effectively and so we need to be aware
400:46 - of whether our network is fast or slow
400:48 - and those are the kind of problems we
400:49 - solve the tcp layer how fast is the
400:52 - underlying network how reliable is it
400:57 - and if something goes wrong what do we
400:59 - do to deal with that
401:01 - so the key idea in tcp is that when we
401:04 - send
401:05 - some data we break it into packets and
401:08 - then we send each one
401:10 - and then we keep them
401:12 - until
401:14 - they get an acknowledgement from the
401:15 - other side and then and only then do we
401:17 - throw them away
401:19 - and at some point if a packet gets lost
401:21 - it can be sent again and again and again
401:24 - until it finally is acknowledged in the
401:27 - destination system and so that's
401:29 - basically what tcp does is it figures
401:32 - out which packets have or have not made
401:34 - it across the internet layer
401:37 - so here's an example scenario so we got
401:40 - a message it's broken up into five
401:41 - packets we've got sort of the first
401:44 - hundred characters the the
401:46 - you know first characters the second and
401:48 - third packet now
401:51 - what tcp does
401:53 - is it speculatively sends a few packets
401:56 - says okay let's let's get ahead because
401:58 - if you sent one and waited then you
402:00 - might not make best use the network so
402:01 - you kind of guess and dump a few packets
402:04 - out there
402:05 - and so you said let's say we send three
402:07 - packets cue them up for sending and as
402:09 - fast as we can send them out the back of
402:11 - our network we start spooling them out
402:13 - the back of their network and somehow
402:15 - two of them make it across the internet
402:17 - to the destination but somehow
402:20 - that poor second package just like every
402:22 - time i'm doing a lecture the poor second
402:24 - packet never gets it you don't want to
402:26 - be the second packet in one of my
402:27 - lectures because you're gonna get it but
402:29 - somehow the second packet
402:32 - has gotten vaporized
402:34 - now time passes
402:36 - and
402:37 - the receiver gets this
402:40 - this sensation that maybe maybe maybe
402:42 - something's missing
402:44 - and so it sends an acknowledgement back
402:46 - and it says i'm going to send a note
402:48 - back that says look
402:50 - i'm ready for 200. i do have 100 and i'm
402:52 - ready for for 200. matter of fact i
402:55 - might even throw away 300 because it's
402:57 - been so long
402:58 - so i want you to start me over at 200.
403:02 - but sender all of a sudden knows that
403:05 - 100 has been sent and so it knows that
403:07 - it can throw this one away now right
403:09 - it's been acknowledged so there's an
403:11 - acknowledgement stream that goes back
403:12 - and forth so now the sender
403:16 - says 200 and 300 and then they make it
403:19 - across
403:21 - the receiver says i've got 200. this is
403:24 - the 300 and then they send 400
403:26 - speculatively
403:27 - 300 makes it 400 makes it and the
403:30 - receiver says
403:31 - i got 400 which means now it can cross
403:34 - off 300 and 400 right check those off
403:37 - and throw them away and then send 500
403:40 - across and then at some point check
403:42 - those off it's got 500 and now the
403:44 - sender can sort of like empty check
403:46 - everything off everything's been sent
403:48 - and it's been acknowledged and we know
403:50 - and so that's kind of an oversimplified
403:52 - view of the kind of bookkeeping that's
403:53 - going on on both sides of a tcp
403:56 - connection
403:58 - and so
404:00 - this
404:01 - right here is in a sense the genius of
404:03 - the internet
404:04 - the
404:05 - storage requirements in the middle
404:08 - the routers
404:09 - this is the ip basically the the network
404:12 - of networks
404:14 - they we didn't design these to require a
404:16 - lot of storage we wanted them to be fast
404:18 - we wanted them to be agile we want to be
404:20 - dynamic we wanted to be clever
404:22 - but we also gave them right to fail so
404:25 - we didn't demand storage we didn't say
404:27 - hey to hold on to packets you know all
404:30 - over the place just store up piles of
404:32 - packets piles of packets would pile up
404:34 - in these we don't ask that
404:36 - no router has to keep the pack as a
404:38 - matter of fact
404:39 - routers are supposed to throw packets
404:41 - away to communicate back and forth
404:43 - between the system that maybe things
404:45 - aren't working so well and don't use me
404:47 - to get to california
404:49 - this on the other hand with hundreds uh
404:53 - maybe you know hundreds of thousands or
404:54 - millions of routers but billions of
404:57 - computers on the outside
404:59 - so we need a way to make this reliable
405:01 - so we need to have memory to store the
405:03 - packets while they're in flight so we
405:05 - can retransmit but we store the packets
405:08 - in the computers that are outside and
405:10 - there are billions of these computers
405:13 - there are billions of them every
405:15 - computer that you carry around every
405:17 - laptop
405:18 - yeah come here
405:21 - every time we add another computer to
405:23 - the network
405:25 - we add storage for packets that are
405:28 - being sent
405:29 - so when your computer or our phone is
405:32 - sending across the network
405:34 - it is responsible
405:36 - for retaining its own copies it does not
405:39 - expect the inner part of the network to
405:40 - do so
405:42 - and that is
405:43 - absolutely brilliant so the
405:46 - it's what really makes this work
405:49 - and so that's kind of a
405:51 - a great oversimplification of what's
405:53 - going on
405:54 - and it turns out that there
405:56 - is still a lot of engineering to make
405:58 - that happen
406:00 - so i'd like to introduce you to to
406:02 - another
406:03 - of the innovators in the that we meet in
406:05 - this class uh his name is van jacobson
406:09 - and i met up with him at xerox park uh
406:12 - he did the work we're going to talk
406:13 - about while he was at berkeley
406:15 - and
406:17 - in the late 1980s uh there was this
406:19 - prediction that the internet was going
406:21 - to die
406:22 - and uh it seems obvious that it was a
406:24 - it's a good idea now but back then there
406:27 - was a bunch of folks that felt like
406:29 - academics weren't smart enough to make a
406:31 - network
406:32 - and uh
406:34 - and they were like ibm and digital
406:36 - equipment that thought they the vendors
406:37 - should make the network and we should
406:39 - just pay them to use their network
406:42 - and um as the nsf net was coming up
406:46 - and more and more computers were being
406:47 - connected and the background was
406:49 - backbone was so slow it started to fail
406:52 - and it looked like the predictions of
406:54 - all of the computer vendors that said
406:55 - academics couldn't build a robust
406:57 - scalable network we're going to be true
407:00 - and
407:01 - so van jacons tells the story very
407:03 - differently but the way i saw the story
407:05 - happening and unfolding in 1987 is van
407:08 - jacobson saved us
407:10 - the network was crashing
407:12 - and we all installed van jacobs and
407:14 - patches and the network got better and
407:17 - it in my recollection this was the last
407:19 - time it appeared
407:21 - that the entire internet was going to
407:23 - crash
407:24 - so we named it the van jacobson protocol
407:26 - and he doesn't like to call it the van
407:28 - jacobson protocol because he's a
407:31 - shy and unassuming guy but i i
407:34 - think he saved us
407:36 - and so this interview is him describing
407:40 - sort of that moment back in the late 80s
407:43 - where
407:44 - he invented the slow start algorithm
407:46 - that really is part and parcel of every
407:49 - tcp implementation that you have on
407:51 - every computer that you use as a matter
407:53 - of fact it's being used to to flow
407:54 - control on this lecture right this
407:57 - second as we speak so here's van
407:59 - jacobson
408:03 - [Music]
408:13 - do
408:18 - [Music]
408:34 - there were lots of campus ethernets
408:36 - because they were really easy to deploy
408:38 - and you could put them
408:39 - in a department and
408:41 - then you could run a wire between two
408:43 - departments and you had a bigger network
408:44 - and
408:45 - so
408:46 - we'd grown up networks sort of by
408:48 - agglomeration
408:51 - in lots of different university
408:53 - campuses and
408:56 - nsf came up with some money
408:58 - said oh
409:00 - we've got a little bit in our budget
409:02 - where we could get some 56 kbit lines
409:05 - and tie those campuses together
409:07 - and
409:09 - they did that made the nsf met phase one
409:13 - but now you're tying together
409:15 - 10 megabit campus infrastructure with 56
409:19 - kilobit wires
409:20 - and
409:23 - it was
409:24 - wildly popular because people that
409:26 - couldn't talk could suddenly talk and
409:29 - they're
409:30 - sending emails and moving huge files and
409:33 - uh just everybody's really excited about
409:36 - this technology but um
409:40 - any one of those campuses could over
409:43 - subscribe the net by
409:45 - a factor of a thousand so
409:49 - we had a lot of packets piling up and
409:51 - getting dropped
409:52 - at the time i was a researcher at
409:55 - lawrence berkeley lab
409:57 - which is in the hills up above the
409:59 - berkeley campus
410:01 - and i was also teaching
410:04 - on the berkeley campus
410:06 - even
410:07 - back in those days which was mid 80s
410:11 - we had a
410:14 - for every class there was a
410:16 - messages group you know like a little
410:18 - news group that was set up all the
410:20 - assignments would be put online
410:22 - and i was trying to get course materials
410:26 - from my office in lbl
410:28 - down to a machine in uh evans hall at
410:30 - berkeley and
410:32 - uh
410:34 - there was like zero throughput in the
410:36 - net it was uh
410:38 - one packet every ten minutes or so
410:40 - and it seemed unbelievable would be
410:43 - unbelievably bad and i
410:47 - went down and talked to
410:50 - mike carrolls who was heading the
410:52 - bsd group the
410:54 - people that develop berkeley unix and
410:57 - he's getting reports of these problems
411:00 - from
411:01 - all over the country from
411:04 - in those days the easiest way to start
411:06 - running tcp was to bring up berkeley
411:08 - unix because there was a
411:10 - arka-funded very nice
411:13 - implementation in it
411:16 - and everybody was seeing
411:17 - poor performance so
411:20 - we talked for
411:23 - a long time that day and on succeeding
411:26 - days about well what's going wrong but
411:28 - is
411:29 - there some mistake in the protocol
411:30 - implementation is there some mistake in
411:32 - the protocol is
411:34 - this thing was working on smaller scale
411:39 - tests and then it suddenly fell apart
411:42 - i think we struggled for
411:45 - three or four months
411:47 - just
411:48 - going through
411:49 - the code
411:51 - writing tools to capture packet traces
411:54 - and looking at the packet traces and
411:56 - trying to
411:57 - to sort out
411:59 - what was breaking
412:01 - and i remember
412:03 - the two of us were sitting in mike's
412:04 - office
412:06 - after we've been pounding our head
412:08 - against the wall for for literally
412:09 - months
412:10 - and one of us i can't remember which one
412:12 - said you know
412:14 - the reason i can't figure out why it's
412:16 - breaking is i don't understand how it
412:17 - ever worked
412:19 - uh you know we're sending these bits out
412:22 - at 10 megabits
412:25 - they're zipping across campus they're
412:27 - running into this
412:28 - 56 kilobit wire
412:31 - we expect them to go through that wire
412:32 - pop out on the other side go through
412:36 - how could that function
412:38 - that turned out to be the
412:41 - the crucial starting point that
412:44 - at that point
412:46 - we started saying well
412:49 - what is there about this protocol that
412:51 - that makes it work how does it deal with
412:53 - all of those bandwidth changes how does
412:55 - it deal with the multiple hops
412:58 - so
413:00 - this picture that direction is time this
413:03 - direction is bandwidth so that's a fat
413:06 - pipe and that's a skinny pipe
413:08 - and uh
413:10 - the scale at the time is you know this
413:12 - is a 10 megabit pipe and this is a 56
413:14 - kilobit type so
413:17 - here the difference is about three to
413:19 - one it was really closer to 100 to one
413:23 - and
413:25 - so time
413:27 - seconds times bits per second equals
413:29 - bits
413:30 - so
413:31 - each of these little boxes in there
413:34 - is
413:35 - a packet it's the number of bits in a
413:37 - packet
413:38 - and
413:38 - if you
413:40 - scrunch it down in bandwidth it's got to
413:42 - spread out in time because the number of
413:44 - bits doesn't change
413:46 - and so
413:48 - uh
413:49 - see the
413:51 - burst of packets of windows worth of
413:52 - packets gets launched it's going to fly
413:55 - through the net until it hits this fast
413:57 - to slow transition
413:59 - and then because the packets have to
414:00 - stretch out in time
414:02 - they'll have to sit there and wait as
414:05 - they're fed into the slower wire
414:07 - and you
414:10 - they pop out
414:12 - the other side
414:14 - they get spread out by this bottleneck
414:16 - by the slower wire
414:18 - once they're spread out they stay spread
414:20 - out right there's nothing to push them
414:22 - back together again
414:24 - they hit a receiver it turns every
414:27 - data packet into an ack
414:29 - so you've got a bunch of acts that are
414:31 - going back towards the sender and they
414:33 - remember
414:34 - what's the right spacing for that
414:36 - bottleneck
414:38 - uh so the axe get back
414:40 - to
414:41 - the sender and every act gets turned
414:43 - into a data packet so we can see the
414:45 - data packets flowing back
414:48 - and
414:49 - this is
414:50 - after one round trip time
414:52 - now the packets are coming out perfectly
414:54 - spaced so they go by
414:56 - uh
414:58 - a new one goes into the net in exactly
415:01 - the time it takes a packet to exit from
415:03 - the bottleneck
415:04 - so these acts are sort of acting as a
415:06 - clock that
415:08 - tells you
415:09 - tells a sender when it's safe to inject
415:11 - every new packet
415:13 - and they're always going to be spaced by
415:15 - whatever is the slowest point in the net
415:17 - and the key thing is is how do you how
415:19 - quick how can you get the steady state
415:20 - sort of most quickly without wasting i
415:23 - yeah and
415:24 - the issue the failure we
415:26 - saw was this works perfectly
415:30 - after you've exchanged a round-trip time
415:32 - worth of packets
415:34 - but when you're starting up
415:38 - when you're here
415:39 - there's no clock
415:40 - and so the hard part on tcp
415:43 - is not getting it running it's getting
415:45 - it started
415:46 - because once you've got it running
415:47 - you've got a clock tells you exactly
415:49 - what to do
415:50 - so if you
415:51 - turn them on suddenly you get in this
415:53 - repetitive failure mode
415:55 - where you saturate the the buffering
415:58 - that was available at some gateway and
416:00 - then when you retransmit you do the same
416:02 - thing again so you're always losing
416:03 - packets
416:04 - but if you
416:06 - turned it on more gradually then you
416:08 - wouldn't overload the buffering and
416:09 - you'd get enough of a clock going so
416:12 - that you
416:13 - control the amount of
416:16 - backlog to fit the available buffer but
416:18 - you'd still be growing the number of
416:19 - packets in flight so that you'd
416:21 - eventually get a
416:22 - you start with a kind of sporadic clock
416:25 - but you'd eventually fill in the details
416:26 - and get it for pack o'clock
416:28 - how did you get it to the point where it
416:30 - was in all the tcp implementations on
416:33 - the planet because they kind of have to
416:34 - cooperate in a way so remember it was a
416:37 - much simpler time when you're talking
416:39 - about
416:40 - all the tcp implementations on the
416:42 - planet
416:43 - at that time there were like four
416:45 - so there was the berkeley unix one
416:47 - there's the mit pctcp there was a bbn
416:51 - one that was used in butterflies and
416:53 - imps
416:55 - and there was a multix one i
416:59 - took the
417:01 - couple of tcp kernel modules that we've
417:04 - been working on packaged them up in a
417:06 - tar
417:08 - i had this horrible driver hack that
417:09 - would let us nerf packets from
417:12 - the kernel and i mean it was really a
417:14 - horrible driver hack it was
417:16 - the way you said what you wanted to
417:18 - snarf was by adb in the kernel you you
417:20 - wrote
417:21 - in binary some new values
417:24 - these are the ports that i want to look
417:26 - at and the driver would capture those
417:27 - into a circular buffer and you'd read
417:29 - kernel memory to pull that buffer out
417:35 - craig larris and chris tork who were
417:38 - working in
417:39 - my group at
417:42 - lbl and
417:44 - we're both long-time colonel hackers
417:46 - we're just
417:48 - embarrassed at this and
417:50 - they put together a really nice clean
417:52 - driver
417:54 - thing called bpf the berkeley packet
417:56 - filter that
417:58 - would let you pull packets out of the
417:59 - kernel by a
418:01 - a very efficient i o control interface
418:04 - and
418:05 - so we bundled all of that up and um
418:09 - on
418:11 - the tcpip mailing list which in those
418:14 - days was
418:16 - you know tcp was very experimental it
418:18 - was very leading edge and
418:20 - pretty much everybody who was playing
418:22 - with it was on that mailing list to
418:24 - announce that this stuff was available
418:27 - a bunch of people ftp'd it
418:29 - uh
418:31 - tried it it blew up
418:33 - sent kernel core dumps and bug reports
418:35 - and
418:35 - fixed the bug reports and put new
418:38 - versions out and
418:40 - somebody would immediately come back and
418:42 - say panicked here do you want the
418:44 - k core and i go oh no
418:47 - embarrassed
418:48 - put out a new version go out somebody
418:50 - else would come back and say panicked
418:52 - here
418:53 - and
418:54 - fixed that and just cycled like that and
418:56 - after about a day we got a version that
418:58 - didn't immediately panic and then
419:00 - started working on the uh
419:03 - the actual algorithms and
419:05 - a little bit of tuning to make sure that
419:07 - it
419:07 - actually did
419:09 - good all the time and didn't do any harm
419:12 - just completely a community effort and
419:18 - you know sort of when the
419:20 - community was saying
419:22 - this uh
419:25 - mostly does good and never seems to do
419:27 - harm
419:28 - that's pretty what much what mike needed
419:31 - to put it into the kernel so he took
419:34 - that the community developed modules and
419:36 - rolled them into the bsd release
419:38 - [Music]
419:58 - so basically the transport control
419:59 - protocol has a responsibility of
420:01 - compensating for the imperfections of
420:03 - the ip layer data can arrive not out of
420:06 - order it can arrive not at all and so
420:08 - the tcp layer marks the data in a way
420:11 - and stores the data in the source
420:13 - computers until it is acknowledged by
420:15 - the destination computers and so tcp
420:18 - buffers this information and the buffers
420:20 - are kept on the edge and this allows the
420:22 - internet to grow in wonderful ways
420:27 - so
420:28 - this results in a layer
420:32 - that really provides us what seems to be
420:35 - an end-to-end connection
420:38 - so we can send data in one end a stream
420:41 - of data
420:43 - just send it in just
420:46 - roll it in
420:47 - and
420:48 - out comes a stream of data
420:50 - it comes out in the same order it comes
420:52 - out reliably
420:53 - and we can stop thinking about it again
420:55 - the whole goal of this layered
420:57 - architecture
420:59 - is so that
421:00 - we can pretend that the complexity
421:02 - inside this box
421:06 - is simple
421:08 - so it's not simple inside
421:10 - but we the applications we're going to
421:12 - make use of this transport layer can
421:14 - pretend it's simple
421:16 - okay and so we just i put in h
421:19 - and an h comes out and i put in an e and
421:21 - an e comes out and i put in an ll
421:24 - and ll comes out an o comes out
421:27 - and it's
421:28 - hundreds of thousands of engineers and
421:30 - billions of dollars of research that
421:32 - makes it work
421:33 - but
421:34 - it just is simple it's been
421:36 - oversimplified
421:38 - so now we've talked about the link layer
421:40 - the ip layer and the transport layer and
421:43 - up next
421:45 - we're going to talk about
421:46 - what we do once we have reliable pipes
421:50 - connecting one application to another
421:57 - [Music]
422:04 - so now we're going to talk about the
422:06 - application layer
422:07 - and up to now we've been talking about
422:09 - these bottom layers and we've been sort
422:11 - of working our way up we talked about
422:12 - the link layer the ip layer and the tcp
422:15 - layer and and and each of these layers
422:18 - works with the other the
422:20 - the ip
422:21 - depends on the link layer the tcp layer
422:24 - depends on and adds value to the ip
422:26 - layer and now we're going to talk about
422:27 - the application layer that is going to
422:29 - make use of the services of the tcp
422:32 - layer
422:33 - and the services of the tcp layer are
422:35 - basically to give us a reliable
422:38 - sequenced end-to-end stream that can
422:41 - start in one application in one computer
422:43 - and end in an application in a different
422:45 - computer and have a two-way
422:47 - communication so i can send the word
422:50 - hello
422:51 - hello
422:53 - from one application
422:55 - and then all kinds of
422:57 - billions of dollars of hardware hundreds
422:59 - of thousands of engineers 40 years of
423:02 - engineering design and out comes hello
423:05 - on the other end
423:07 - and what's beautiful and this is the
423:08 - beauty of the layer of the four layer
423:10 - architecture is we just pretend this is
423:13 - magic
423:14 - this is magic
423:18 - we send something and out it comes
423:21 - with that magic available with that
423:23 - billions of dollars and 40 years of
423:25 - research magic available now what would
423:28 - we do
423:29 - right now what would we do with that
423:32 - magic if we had it available to us
423:35 - so tcp is giving us this reliable pipe
423:38 - we're going to think about now we're
423:40 - going to ignore all the rest of it right
423:41 - we're going to ignore
423:43 - all this part we're going to all we're
423:45 - going to say is we have an application
423:46 - on this into our computer now remember
423:49 - this is your computer and say this is
423:51 - the server right so this is you
423:54 - and this is the server
423:56 - and all the software runs in it in in
423:58 - every all the software's running in your
424:00 - computer and all the software is running
424:02 - in the server
424:04 - so the question is what are we going to
424:05 - do between these two things okay what
424:07 - how we what how are we going to ask for
424:10 - data and this application is the client
424:12 - application and this application is the
424:15 - server application client and server are
424:17 - not necessarily the same very much the
424:19 - same
424:20 - client server are likely very different
424:22 - applications the client is like give me
424:24 - information and the server is
424:26 - responsible for giving
424:27 - giving the information to the client so
424:29 - client is often making a request and
424:31 - then the server is making a response
424:33 - back
424:34 - and so
424:35 - this client server mechanism this
424:38 - application to application communication
424:40 - we can build a mail system with it
424:41 - worldwide web or we can stream videos
424:44 - much like we'd be streaming this lecture
424:45 - back and forth but we're going to focus
424:47 - on the world wide web because it's
424:48 - really simple and really elegant and
424:50 - it's probably the easiest one to
424:52 - understand and it's the most popular
424:55 - but there are many other protocols going
424:57 - on file transfer and others but the
425:00 - world wide web protocol httpd
425:03 - is the protocol that is the most popular
425:07 - so
425:08 - the there are two basic questions that
425:10 - the application layer has to
425:13 - uh solve one is
425:15 - which application gets the data
425:18 - and this is done using a mechanism
425:20 - called ports
425:22 - and ports allow a ip address or a single
425:25 - computer or a single server to serve up
425:28 - multiple services and then for a client
425:31 - to be able to dial up much like a
425:33 - telephone extension
425:35 - and pick the service that they're
425:36 - interested in once you've connected to
425:39 - the service that you're interested in
425:41 - like the world wide web service then you
425:43 - have to know the protocol to talk to
425:45 - that
425:46 - ports in tcp are like a telephone
425:49 - extension number again like i said they
425:51 - you can connect to an ip address but
425:53 - then you can connect to a port within it
425:55 - and so if you think about a telephone
425:57 - number and an extension it's sort of a
425:59 - further refinement an ip address gives
426:02 - us a particular server a piece of
426:04 - hardware connected to the internet and
426:06 - then a port within that tells us what
426:08 - application we're going to talk to
426:12 - so let's talk about ports and
426:14 - connections
426:17 - so if i have a server and this is kind
426:20 - of a
426:21 - arbitrary server here's here is a single
426:23 - server www.mish.edu
426:26 - and it has one ip address connected into
426:28 - the cloud we can have many clients
426:30 - talking to it
426:32 - and we have many services running on
426:35 - this server like
426:37 - sending email or logging into that
426:40 - server or retrieving web pages or
426:42 - retrieving my mail from that server and
426:45 - there are ports so incoming email is
426:48 - done generally in port 25 remote login
426:50 - is 22 or 23.
426:52 - web servers depending on whether secure
426:54 - or not or 80 or 443
426:57 - and
426:59 - the personal mailbox is on ports 109 or
427:01 - 110 and so these computers don't just
427:04 - connect to an ip address but they
427:06 - connect to a port within an ip address
427:11 - so some common tcp ports that we have
427:14 - are the ones i just mentioned and you
427:16 - can take a look at these on the internet
427:18 - the various ports okay
427:21 - now
427:22 - once we have a connection to the web
427:24 - server or to the mail server or to the
427:26 - post office server we have to know how
427:28 - to talk to it and that's what's called
427:30 - an application protocol and that is the
427:32 - rules for conversation the rules for
427:35 - conversing
427:36 - so tcp gives us this reliable connection
427:40 - we now can connect to the server that we
427:42 - desire to connect to by using ports and
427:45 - the question is what are we going to say
427:47 - across that connection and what we say
427:50 - across that connection who talks first
427:52 - what do you send what comes back depends
427:55 - on the kind of server that you're
427:56 - talking to we're going to play mostly
427:58 - with the world what the world wide web
428:01 - click the wrong button there the world
428:03 - wide web server because it's the
428:05 - simplest and it's the most obvious as to
428:07 - what's going on
428:09 - so the world wide web clients and the
428:11 - worldwide which are otherwise known as
428:13 - browsers the world wide web clients and
428:16 - the world wide web servers communicate
428:18 - using a protocol called http as a matter
428:21 - of fact if you look at the top of your
428:23 - url it's http colon slash something
428:27 - right and
428:30 - and so basically
428:32 - there is a specification for how this is
428:34 - done so when they wrote down i'm going
428:36 - to write the first web browser the first
428:38 - web survey they also wrote a document
428:40 - about how that piece of software would
428:42 - talk to this other piece of software and
428:45 - it's a very simple concept http has a
428:47 - protocol where you make a connection to
428:49 - the from the client to the server the
428:51 - client requests the document the server
428:53 - feeds out the document and then the
428:55 - connection is dropped okay so it's very
428:57 - simple we'll actually simulate this
428:59 - this is called the http request response
429:03 - cycle
429:04 - okay and so the way it works is you're
429:07 - in a browser
429:08 - and you click on a link the browser is
429:10 - an application it's the client running
429:12 - on your computer so so this is kind of
429:15 - your computer down here
429:17 - okay
429:18 - you click on a link
429:20 - then the browser makes a connection to
429:22 - the web server
429:23 - and sends a request
429:25 - to for the document the web server looks
429:28 - up does whatever and sends the document
429:30 - back and then the document is displayed
429:33 - on your screen
429:34 - okay
429:35 - so let me show you sort of how this
429:37 - works
429:39 - with a web browser
429:41 - so here is a canonical web page so
429:45 - here's a browser here's the url that i
429:47 - went and got you can get this url as
429:49 - well you can even look at the source
429:50 - so if you look at this source there is
429:54 - my html but one of the things that's in
429:56 - this source is a link
429:58 - and if i hover over top of this link
430:01 - it's going to look like that to hover
430:03 - over top of the link you can see at the
430:05 - bottom of my screen you can see it's
430:07 - going to tell you that we're about to go
430:08 - retrieve page 2.htm
430:11 - now
430:12 - this browser
430:14 - is running on my laptop it is a web
430:17 - client it is an http
430:20 - client and i'm about to click
430:22 - on this piece of software running on my
430:24 - computer and then it is going to make a
430:27 - connection out the back of it retrieve a
430:29 - document and then show me the other
430:31 - document so it's gonna happen real fast
430:33 - i'll click on second page
430:36 - it requested and got a document back and
430:38 - showed me the document so that's the
430:39 - contents of the second document okay
430:42 - and so that is the request response
430:45 - cycle
430:46 - that is triggered
430:50 - that is triggered by me making a click
430:53 - somewhere in my browser
430:55 - the the browser sees the click it opens
430:57 - a connection this is sort of the
430:58 - internet over here it makes a connection
431:00 - request a document the document comes
431:02 - back and then the new document is
431:04 - displayed the request response cycle
431:08 - click request response display click
431:11 - request response display
431:13 - so let's take a look in some more detail
431:14 - as to what's really going on here
431:17 - so the command that is being sent
431:20 - up to the server
431:22 - across this connection remember this
431:23 - part here is the internet right there
431:25 - the command is a get command and the
431:28 - document is based on the url i clicked
431:30 - on that the browser knows about and says
431:32 - get
431:33 - page2.html and then it comes back
431:36 - is html
431:37 - and that is a markup language that
431:40 - describes how this doc this page is
431:42 - supposed to be shown
431:44 - so let's say that we wanted some more
431:46 - detail on how this really worked
431:49 - right let's say we want to write a web
431:51 - browser and we want to be a good citizen
431:52 - and we want to talk properly to
431:55 - the uh
431:56 - the web well we would go back to the
431:59 - ietf the internet engineering task force
432:03 - and we would go grab the document that
432:05 - says hey if you want to write a browser
432:07 - this is what you do
432:09 - this is what you do if you want to write
432:11 - a browser go grab rfc 1945
432:14 - which is the hypertext transport
432:16 - protocol version 1.0 now i'm sure
432:18 - there's more complex superseded versions
432:20 - of it
432:21 - but if we read it and read it and read
432:22 - it we spent a lot of time we get down to
432:24 - section 5.1.2 and it would say if you
432:28 - are making a request for a document this
432:31 - is the request line
432:33 - it has the letters g-e-t followed by a
432:35 - space
432:36 - followed by the url you're looking for
432:38 - followed by a space followed by the
432:40 - version
432:41 - okay
432:42 - so that is the rule that is what you're
432:44 - supposed to send down this connection
432:47 - i'm going to give us some more examples
432:49 - on page 24 and so we could read all this
432:52 - and we could write a web browser
432:55 - but what we're going to do is we're
432:56 - going to fake being a web browser we're
432:59 - going to cheat we're going to hack it
433:01 - we're going to pretend to be a web
433:02 - browser we're going to send the commands
433:05 - to the web browser
433:07 - now i'm going to do this on a macintosh
433:09 - you could also do it on windows if you
433:10 - installed a telnet client
433:12 - okay so the key is you install a telnet
433:15 - client now most people would say telnet
433:17 - is insecure and it is it's a very old
433:19 - protocol because all it does is it opens
433:22 - a tcp connection
433:24 - to a host on a port that i specify and
433:26 - whatever i type goes across that tcp
433:29 - connection so it's a great way to hack
433:31 - especially older less secure protocols
433:33 - so because http is generally a public
433:37 - protocol it's not really highly
433:38 - protected so it's much simpler to hack
433:40 - it hacking secure protocols is requires
433:43 - writing software rather than typing
433:44 - commands so if you're on windows you
433:46 - have to install telnet t-e-l-n-e-t
433:50 - so what i'm going to show you in a
433:51 - second is i'm going to show you hacking
433:54 - and i'm going to telnet to
433:57 - www.doctortruck.com port 80. what i'm
434:00 - saying is connect me to this server on
434:02 - the internet
434:03 - and connect me to port 80 because i want
434:05 - to do http connections
434:08 - and then i will send one command i'm
434:11 - going to send that command and then the
434:13 - web server will give me back the page
434:15 - okay
434:16 - it's probably easier for me to just
434:18 - do it
434:20 - so let's take a look
434:23 - i am going to simulate
434:26 - what the web browser does when it's
434:29 - requesting
434:30 - well actually we'll go to the second
434:31 - page and when it's requesting the first
434:34 - page it's doing a get
434:36 - for page one okay
434:38 - so that's what we're going to do except
434:39 - now we're going to do it
434:43 - in
434:44 - a terminal so my type telnet
434:48 - oops i always type this wrong
434:50 - t-e-l-n-e-t
434:52 - www.doctordashchuck.com
434:58 - port 80.
435:00 - okay
435:03 - so now
435:04 - i am connected to the web server on
435:06 - doctorchuck.com
435:08 - i could for example type
435:12 - yo
435:13 - what
435:15 - is up
435:21 - dude
435:23 - now that would suggest i have not read
435:24 - the protocol specification for the http
435:28 - protocol so i do not know that i'm
435:30 - supposed to type the word get here i'm
435:32 - going to type yo what is up dude
435:35 - and it goes
435:37 - you are not from my country you are not
435:40 - from my planet i do not know what you
435:42 - said of course that the way web servers
435:45 - are saying this is they're saying
435:47 - bad request
435:48 - your browser sent a request that this
435:50 - server could not understand it is the
435:53 - request header is missing a colon
435:54 - separator you do not comply
435:56 - go away
435:59 - but we did talk
436:00 - it just told us that
436:02 - whatever we were saying is gibberish to
436:04 - it and that's okay because we have read
436:07 - the document and so we can
436:09 - do it
436:10 - so let's do it
436:12 - so now i'm going to do a telnet to
436:13 - doctorchuck.com on port 80. go to dr
436:16 - chuck
436:17 - hook onto port 80 so we can talk to the
436:19 - web server
436:21 - and now i am going to behave i've read
436:24 - the specification i'm going to type
436:26 - gt get space one space http colon slash
436:34 - slash www.doctorchuck.com one dot htm
436:38 - http space one
436:40 - dot i think there's a slash there oops
436:42 - oh no no no get it right did you write
436:44 - slash one dot zero i think i got that
436:46 - right
436:47 - so that is what i'm supposed to type if
436:50 - i am a real browser now i have to
436:52 - actually type another new line
436:54 - so i'll type another new line
436:57 - and now
436:58 - whoa
437:00 - oh i gave it the wrong page look look
437:02 - look look look i wanted to do i told it
437:05 - to get page.htm so let's do it again do
437:08 - it again
437:09 - i'm not very good at this my browser is
437:11 - much better at it so i type get http
437:14 - colon slash www.drdashchuck.com
437:19 - page1.htm
437:22 - space http
437:24 - slash 1.0
437:26 - i believe that's it
437:28 - let's hope i got it right this time and
437:30 - then another enter and another enter
437:33 - yay
437:35 - i got it
437:36 - so this time
437:38 - i type you know i type this then i type
437:41 - this
437:42 - now it gave me some header information
437:44 - it's saying things like
437:46 - 200 okay means i like you
437:48 - uh what the time is when this file was
437:51 - last modified it's an html file and it
437:54 - actually shows me the html text
437:56 - and so we have just
437:58 - hacked
437:59 - a web server
438:01 - you can do this to like facebook.com and
438:04 - do a get
438:05 - if you get the right thing it'll give
438:07 - you stuff you could go to various sites
438:08 - you can fake browsers
438:10 - now you're only going to get so far
438:12 - because at some point these servers know
438:14 - that you're not a browser because the
438:16 - browser actually sends a little more
438:17 - stuff than what we just sent
438:19 - but you get the picture okay it's a
438:21 - protocol where we have rules and if we
438:24 - type the right thing
438:26 - if we type the right thing we know what
438:29 - the specification tells us to type we
438:31 - are rewarded
438:33 - with the information on that server if
438:35 - we comply with the server's request
438:39 - we can talk to it
438:41 - if we know how to talk to we know a port
438:43 - to talk to and we know what protocol to
438:44 - talk to that port we can write a client
438:48 - that meets the needs of that server and
438:50 - extract the data
438:52 - so this is i like i like command lines i
438:55 - like sort of old school user interfaces
438:58 - and this is a scene
439:01 - from one of the matrix movies
439:03 - that you may recall
439:05 - i can't put it in here because of
439:06 - copyright requirements i might have the
439:08 - url or maybe students will come up with
439:10 - the url you can probably search for the
439:12 - trinity hacking scene people put it up
439:14 - and then it gets taken down and someone
439:15 - else puts it up
439:16 - so let me tell you a little story about
439:18 - this scene
439:19 - this scene was actually written by a
439:21 - former student of mine who worked on all
439:23 - three matrix movies doing i t work on
439:26 - the movies and they were in australia
439:28 - shooting the the three the second
439:30 - set of three movies and he saw this
439:33 - scene and the scene was supposed to use
439:36 - a minority report style way for her to
439:38 - hack into the the power grid and shut it
439:41 - down he said
439:42 - that's not the way that you hack into
439:44 - computers
439:46 - all good hackers use a
439:48 - text based interp interface some old
439:50 - thing and that's a throwback interface
439:53 - so the wachowski brothers told him
439:56 - rewrite it
439:57 - so we actually downloaded
439:59 - the exact hacking software it's called
440:00 - nmap which stands for network map it is
440:03 - mapping the ports it's probes the ports
440:06 - and sees what's on the ports see what
440:08 - version of the software is on each of
440:09 - the ports figures out what the what the
440:11 - weaknesses of those things are and even
440:14 - automatically exploits the weaknesses
440:17 - so he wrote a script that downloaded
440:19 - this thing that automatically breaks
440:21 - into computers by the way the good guys
440:24 - use this and the bad guys use this same
440:26 - thing the good guys use it to test all
440:27 - the computers on their campus and make
440:29 - sure that they're okay
440:30 - and the bad guys use to break into the
440:32 - ones that the good guys aren't smart
440:33 - enough to fix
440:35 - and so
440:36 - this was kind of cool and and the people
440:38 - who wrote nmap were really quite amazed
440:40 - when they saw the movie they even
440:41 - figured out what version it was and
440:43 - things like that and so it actually
440:45 - triggered a series of uh follow-on
440:48 - scenes that used actual real hacking
440:51 - software uh nmap hacking software so
440:55 - i don't know if we've got a url for this
440:57 - or not whatever our url i come up with
440:59 - um even the one the nmap people come up
441:02 - with whatever it is it goes away because
441:04 - of copyright but you can find it because
441:07 - someone always puts it back up so okay
441:10 - so
441:11 - you can go and maybe the unmapped people
441:12 - will know it or maybe you just have to
441:14 - search for the trinity hacking scene so
441:17 - you can use telnet and you can hack
441:18 - legitimately hack a web server
441:23 - so
441:23 - basically the application layer is a
441:26 - rich place and there's lots of things
441:28 - that happen in the application layer we
441:31 - have this pipe abstraction it's kind of
441:32 - like a a string with two tin cans and we
441:35 - can shout into one end and stuff comes
441:37 - out the other end uh later we'll talk
441:39 - about adding security to that
441:41 - and we use these port numbers to allow
441:43 - to multiple different servers or
441:45 - services on a computer that we can
441:48 - connect to
441:51 - so we've kind of now reached the top of
441:53 - the architecture of the internet we've
441:55 - talked about ethernet the link layer and
441:58 - the fiber and all the diverse wireless
442:00 - all the wonderful things that happen
442:02 - there the internet work layer which is
442:04 - this kind of geographical hopping thing
442:07 - that's unreliable the tcp layer that
442:09 - retransmits automatically if necessary
442:12 - and then the application layer which is
442:14 - what we do with all this networks
442:17 - it's really impressive that this came
442:19 - out of research work from the 1970s and
442:22 - that
442:23 - most of the architectures that were
442:24 - really present most the ideas the
442:26 - architecture from the 70s are really
442:28 - still present with us today
442:35 - as the nsf net came out these
442:37 - architectures evolved a little bit the
442:39 - last few tweaks and there have been
442:41 - tweaks going on ever since but the
442:43 - really the last few critical tweaks
442:44 - happened in the late 1980s
442:48 - the uh
442:49 - the number of web hosts
442:51 - um or the number of hosts on the
442:53 - internet goes from
442:55 - six in 1969 to
442:57 - sort of a billion in 2011 and and it's
443:00 - pretty impressive that roughly the same
443:03 - architecture that was designed with six
443:05 - computers is still mostly functioning in
443:08 - in mostly the same patterns
443:11 - all these years later with the built
443:12 - billions of computers
443:15 - and so if you start looking at the
443:16 - network now it almost looks like a live
443:19 - creature with veins and
443:21 - nerves and
443:22 - and it sort of almost pulses
443:24 - and you see things like you can search
443:26 - on the internet for
443:28 - how the internet reacted to hurricane
443:30 - sandy when like new york city was just
443:33 - like shut off for three days the
443:35 - internet just kind of like
443:37 - routed around it
443:38 - yeah a lot of stuff went across the
443:40 - atlantic ocean from new york city and
443:43 - yeah i found different paths and you
443:45 - know yeah new york was down but the rest
443:47 - of it wasn't um
443:49 - in many ways pretty amazing and
443:52 - we certainly see other situations where
443:54 - governments try to shut the internet
443:56 - down by going into the server rooms and
443:58 - shutting off you know what they think is
444:00 - the only connections but then more
444:02 - connections pop up and so it's it's very
444:05 - much a uh almost a living thing
444:09 - it's billions of computers and hundreds
444:11 - of thousands of routers and and it's
444:14 - hundreds of millions of simultaneous
444:16 - connections going on all the time
444:17 - including the one we're doing right now
444:19 - probably
444:21 - and
444:22 - it's trillions of bytes of data moving
444:24 - across
444:26 - and it's
444:27 - it's it's not perfect it but it kind of
444:29 - works
444:30 - you can think of it as like the largest
444:32 - energy collective engineering thing that
444:35 - we've done together is humanity we built
444:38 - this
444:39 - it's all one thing and yet it's so many
444:41 - different pieces and we just kind of
444:43 - keep
444:43 - gluing them together and gluing more
444:45 - things on more things and it was it
444:48 - really was created almost like life
444:50 - itself it's very organic it's designed
444:52 - to heal itself
444:53 - rather than be perfect because things
444:55 - that try to be perfect are fragile and
444:57 - they break too easily but things that
444:59 - are designed to heal
445:01 - can heal and you're never perfectly
445:03 - correct you're never all the way up and
445:05 - you're never all the way down and so
445:06 - that's what's interesting
445:08 - about the internet
445:10 - oops went the wrong way
445:11 - and so we kind of come to the end of
445:13 - this where we started out with like
445:16 - machines and pulleys and gears and
445:18 - spraying oil at bletchley park and
445:20 - typing a few characters on a keyboard to
445:23 - this thing where we sort of just take
445:26 - for granted that we can watch basketball
445:28 - anywhere on the planet just with a
445:30 - couple of swipes of the of the key and
445:33 - and in a sense it's just that same human
445:35 - urge to communicate at a distance
445:39 - and so the last thing that i'll close
445:40 - with is another video from van jacobson
445:44 - now this is about a technique he calls
445:47 - content-centric networking
445:49 - and not everybody agrees with van
445:52 - jacobson on this you can ask people and
445:54 - they'll say it's a good idea
445:56 - that i don't present this as the future
445:59 - i present this more to get you thinking
446:03 - that there is a future that might be
446:05 - different than the present that what i
446:07 - just told you
446:08 - that seems
446:10 - seems like oh it's perfect and the and
446:13 - when and vince surf in 1969 he figured
446:16 - this out and yeah it was the perfect
446:18 - thing right and
446:20 - the answer is it might not be and we as
446:22 - engineers and we as the people of the
446:24 - internet we must understand that in 20
446:27 - years it might be all different because
446:28 - 20 years ago it was all different and 30
446:31 - years before that it was different yet
446:33 - again and so nothing's perfect and so we
446:35 - should never be complacent and assume
446:37 - that what we have is trivial or perfect
446:40 - or even the right answer so we should
446:42 - continue to question and so it's really
446:44 - interesting to hear again from van
446:46 - jacobson who sort of did this great
446:48 - innovation in 1987 saved us and yet he
446:51 - thinks
446:52 - that these are issues and they're issues
446:54 - that need to be saved again
446:56 - and i think in many ways he's right the
446:58 - question is not so much whether he's
446:59 - right or wrong the question is what will
447:02 - the ultimate solution that we pick uh be
447:05 - produced so
447:06 - so take a look at van jacobson and what
447:08 - he can what he is thinking about as
447:10 - terms of the issues in the future that
447:12 - we're going to need to solve
447:13 - when he talks about content-centered
447:15 - networking
447:19 - [Music]
447:26 - hello and welcome to our security
447:28 - lecture i'm charles severance
447:30 - and i encourage you to
447:32 - grab the power points and remix them and
447:35 - use them in your own courses use the
447:37 - videos use everything in your own
447:39 - courses i i you don't have to teach this
447:41 - whole course it's quite a bit
447:44 - so um
447:45 - so let's start out by meeting some nice
447:48 - people these uh people
447:50 - are alice and bob
447:53 - and they simply want to communicate some
447:55 - information you know
447:57 - left to their own devices and they don't
447:59 - want the rest of the world to know about
448:01 - what they're communicating and so they
448:03 - want to encrypt it some way now uh in
448:06 - the cryptograph cryptography world
448:09 - um they all all call these two people
448:12 - the good people uh alice and bob and
448:15 - they simply are a and b
448:17 - kind of a very computer-esque variable
448:19 - names a and b and alice and bob and then
448:22 - there's some bad guys
448:24 - right there's the bad guys
448:25 - and uh and often they are called c
448:28 - like carol or carlos or charlie or or
448:32 - something like that they're even chuck
448:34 - even chuck is a bad guy or dave or eve
448:37 - eve for the eavesdropper and the idea is
448:41 - somewhere in the middle here
448:43 - somewhere in the middle you have some
448:46 - person with bad intent here we have
448:48 - trinity from the matrix and she looks as
448:51 - she looks as bad as you can look right
448:53 - um so alice and bob seem to be real
448:56 - happy people they're just trying to get
448:58 - you know get things done and
449:00 - send some information without being
449:02 - bothered and then and the trinity's
449:04 - there eavesdropping and but there's
449:06 - other things you can eavesdrop you can
449:08 - sort of redirect the message and change
449:10 - it there's all kinds of things that the
449:12 - bad guy in the middle is going to do
449:14 - and so alice and bob
449:16 - are far away from each other and they
449:18 - have to communicate securely and they
449:20 - it's a it's a it's a literal gauntlet of
449:23 - problems that they have to face and
449:25 - various people with bad intent with bad
449:27 - purposes sometimes
449:29 - just wanting to see what's going on
449:31 - versus wanting to change what's going on
449:34 - versus completely redirect communication
449:36 - so alice bob and then a whole series of
449:39 - bad guys with various
449:41 - bad guys and gals with various evil
449:43 - intent
449:46 - [Music]
450:03 - you know i think computer security is
450:05 - the most exciting part of computing
450:07 - right now because it has something that
450:10 - nothing else has it has an adversary
450:13 - relationship when you do graphics or
450:15 - operating systems or anything there's no
450:18 - one trying to thwart you at every turn
450:20 - unless you have in security that's what
450:22 - makes it exciting and interesting and
450:24 - that's what makes it something that's
450:27 - forever changing and involves psychology
450:30 - and economics and computing and
450:33 - law and policy and so many things so i
450:36 - think it's a great uh area to be in to
450:39 - work in i think it's not going away
450:42 - right as long as we have adversaries as
450:44 - long as we have human beings and and
450:46 - their due wells and evil doers we're
450:48 - gonna need security
450:51 - so
450:51 - it's always going to be like that
450:53 - you know preparing is interesting in a
450:55 - lot of ways
450:57 - security is a mindset
450:59 - it's a way of thinking about the world
451:01 - and if you think about the original
451:02 - definition of a hacker
451:04 - someone who sort of cobbles stuff
451:05 - together you hacked this tool and it
451:07 - works and you put this piece together
451:09 - and this here and that and it all works
451:11 - and it's a great hack
451:13 - but i'm a security guy i'm going to say
451:15 - well turn this like that doesn't work
451:17 - anymore and you'll say well don't do
451:19 - that and i'll say no no i'm the attacker
451:22 - i get to do that i get to do that
451:24 - whenever i want i get you at the most
451:26 - inopportune time get to do that in a way
451:28 - that makes your system fail as badly as
451:30 - possible
451:32 - and you have to think that way
451:34 - not about how to build something how to
451:37 - make it work but how to make it fail
451:39 - and how to make it fail in precisely the
451:41 - right way to do precisely the right sort
451:44 - of damage
451:45 - and that's a way of thinking
451:47 - i mean there are some people who go
451:49 - through their lives looking at systems
451:52 - and figuring out oh i can break that oh
451:54 - here's how to break that you walk into a
451:56 - store and you see the purchasing system
451:58 - oh i can steal something here's how
452:00 - you walk into a voting booth oh i can
452:02 - sort of
452:03 - defeat this here's how you might not do
452:05 - it because of course that would be
452:06 - illegal but you think that way
452:09 - and that mindset i think is essential
452:11 - for security once you have that mindset
452:15 - then it's a matter of just learning the
452:17 - domain
452:18 - right learning the systems and whether
452:21 - it's a self-driving car or a voting
452:23 - system or a medical device and it's
452:25 - going to be embedded code interacting
452:28 - with the real world in a way that
452:30 - involves people and society
452:32 - and i can teach all that you can learn
452:35 - all that so i remember a class in
452:37 - security i forget who did this
452:40 - one of the assignments was come in
452:42 - tomorrow
452:44 - and write down the first thousand digits
452:46 - of pi
452:48 - okay so two things about this test one
452:52 - you can't memorize a thousand digits to
452:54 - pi you have to cheat and actually the
452:56 - students were expected to cheat
452:58 - but if they were court cheating they
453:00 - would fail
453:03 - okay that's interesting right that
453:05 - teaches
453:06 - that mindset
453:07 - allows you to think outside the box but
453:10 - how am i going to do this
453:12 - am i going and there are lots of ways
453:14 - people cheated and and i sort of urge
453:17 - people watching to go
453:18 - google this
453:19 - and to look at some of the stuff written
453:21 - it's a great way of
453:23 - trying to stimulate the mindset
453:25 - can you teach it formally i don't know
453:27 - it's kind of like it's a way of thinking
453:30 - and i think the more security classes
453:32 - you take the more you exercise that
453:34 - mindset a lot of the hacker conferences
453:37 - will have capture the flag
453:40 - contests i remember an early one where
453:42 - they had to build their own private
453:44 - network to cut down on both network
453:47 - license latency and federal
453:50 - violations right
453:51 - that's why you do it but you're going to
453:54 - learn a lot
453:55 - by breaking other people's systems and
453:58 - yeah that's probably going to involve
454:01 - illegal activity and
454:03 - agreed you know this isn't the best way
454:06 - or maybe it is the best way it's not the
454:07 - most socially acceptable way you know
454:09 - but here we have this clash between the
454:11 - tech imperative
454:13 - and what society wants so many of our
454:16 - systems are black boxes
454:19 - i mean you can go and try to hack this
454:22 - right your your smartphone or your
454:24 - computer
454:26 - and there's a lot of stuff you can learn
454:28 - but really it's gonna be more fun if you
454:30 - can hack
454:31 - somebody else's cell phone or somebody
454:32 - else's computer i want it to be
454:34 - open-ended i want it to be you know
454:37 - follow whatever it is you're interested
454:39 - in the neat thing about security is it
454:41 - can go wherever you want there are so
454:43 - many different
454:45 - sub-disciplines i'm often asked should i
454:48 - study
454:49 - forensics or cryptography or network
454:52 - security or protocols
454:55 - or embedded devices
454:57 - or scada systems study what you want
455:00 - and whatever interests you follow that
455:04 - because really what you're learning
455:07 - is how to think
455:09 - like a security expert and honestly if
455:11 - you get a job they make you do vpns you
455:14 - can pick up vpns that's easy and it's
455:16 - the way to think so do what you want
455:19 - and you know what we're learning right
455:21 - now is that demand is greatly
455:23 - outstripping supply
455:25 - right that people who have expertise in
455:27 - security have a guaranteed career
455:30 - because there is such a demand for it
455:32 - and there's such a lack of supply have
455:34 - you written any of your books kind of in
455:36 - aimed at
455:37 - those kind of you know pre-computer
455:40 - science students or early computer
455:41 - science students that would sort of be a
455:43 - good read i tend to write my books for
455:45 - general audience
455:47 - so i think of my parents my friends
455:52 - so computer experts yes but really for a
455:54 - more general audience
455:56 - so going back to something like secrets
455:58 - and lies i wrote in 2000 it's about how
456:01 - network security works right 15 years
456:03 - out of date but it's still a good
456:05 - introduction on the basic concepts of
456:08 - how to think about
456:09 - security
456:10 - you know later cryptography engineering
456:13 - how to engineer cryptosystems
456:16 - my book liars and outliers how to think
456:18 - about security as a way to enable trust
456:22 - very non-technical but very much here's
456:25 - how security is embedded in society
456:28 - my latest book is about surveillance and
456:32 - data in goliath talks about
456:35 - what's going on in the world of
456:36 - surveillance and how we can regain
456:38 - security so to me all of these books are
456:41 - for someone who might be interested in
456:42 - this field because what they're going to
456:44 - do is spark interest in different
456:46 - directions they're going to
456:48 - give people
456:49 - ideas they're going to go and research
456:51 - further and that's how you get
456:54 - your passion that's how you get your
456:55 - calling you know it's not that someone
456:57 - gives it to you that you notice it going
456:59 - by and saying hey that's kind of neat i
457:01 - want to do more there
457:04 - [Music]
457:21 - so it's always fun to talk about
457:23 - security because you know the question
457:25 - is is you and what does security mean to
457:27 - you and what does it mean to me
457:29 - and um
457:31 - and and when you're whenever you're
457:32 - thinking about security you got to
457:33 - figure out sort of who is out to get you
457:36 - and
457:37 - why are they out to get you
457:40 - and for us average people
457:42 - we are so boring that literally pretty
457:45 - much the only thing the world wants from
457:47 - us is they want to steal our
457:49 - you know they want to steal our credit
457:50 - card numbers and and then buy stuff with
457:53 - them for just a couple of days before
457:55 - the credit card company shuts them down
457:57 - now if you're running for public office
457:59 - uh there's a whole bunch of your
458:01 - opponents that are going to want to
458:02 - break into your email and
458:05 - and that happens right those kind of
458:06 - shenanigans happen so if you're
458:07 - interesting or influential or running
458:09 - for public office you have a different
458:11 - problem than if you're just kind of a
458:13 - mere civilian like us
458:15 - and so
458:17 - at the end of the day
458:19 - you can worry about security and you can
458:21 - kind of wear tin foil clothing or
458:23 - something but at the end of the day you
458:25 - and i are so boring that nobody really
458:27 - cares
458:28 - but
458:28 - it's good to assume that they're out to
458:31 - get you right that that you try to be as
458:33 - secure as you can and be aware of your
458:35 - environment and be as secure as you
458:37 - possibly can with your information
458:39 - and uh with your communications
458:43 - so who is out to get us well
458:47 - the government so now we're going to
458:49 - actually turn the tables right in the
458:51 - very first lecture we were the good guys
458:54 - the good guys were the ones who were
458:56 - trying to break the curtail free and the
458:58 - bad guys are the ones that are trying to
458:59 - hide their their their bad messages and
459:01 - the government were the good guys in
459:04 - bletchley park and they they broke the
459:06 - codes and they they saved western
459:08 - civilization yay good guys well now
459:12 - we're the germans
459:14 - we're the japanese
459:16 - we're trying to communicate
459:18 - people are watching
459:20 - and guess what it's the same people the
459:22 - government government's most likely
459:24 - interested in what you're doing um again
459:27 - most of us are so boring the government
459:29 - doesn't really care at all but the
459:31 - government has probably the best
459:33 - security breaking equipment on the
459:35 - planet right now better than the
459:36 - criminals and so it's just an
459:39 - interesting flip of the model right
459:40 - where now we are trying to communicate
459:43 - and the government with all of their
459:45 - bombas and little rotating devices
459:48 - sitting in some
459:50 - warehouse somewhere that we don't know
459:52 - is taking our private communications and
459:55 - they're trying to break them
459:57 - and we are
459:58 - in a war trying to make our
460:01 - communications more and more secure
460:03 - while the government says well we have
460:04 - to invent like electronic computers
460:08 - because we have to have bigger computers
460:10 - because the people that us us good guys
460:12 - now who are doing the encrypting we are
460:14 - trying to come up with more and more
460:16 - clever ways to encrypt and the
460:18 - government has to keep coming up with
460:20 - ways to decrypt and you could
460:23 - cast this as
460:24 - criminals versus good folks you could
460:26 - cast these governments versus
460:27 - governments at the end of the day it's
460:29 - an arms race
460:31 - and it's it's rather symmetric as to
460:33 - which side you're on right i mean we
460:35 - started out with
460:36 - the people trying to hide the
460:37 - information were the bad guys and now
460:39 - we're the good guys why are we the good
460:41 - guys because it's us as soon as we
460:43 - decide it's us
460:44 - we're the good guys
460:46 - here's a little here's a little picture
460:47 - i took
460:48 - a couple of years ago when i visited uh
460:51 - bletchley park
460:52 - this actually led to the video
460:54 - a year and a half later
460:57 - and in this
460:59 - my friend who works at the open
461:01 - university who also does massively open
461:03 - online courses uh that's joel he's now
461:06 - retired he's the tour guide there and
461:09 - a dear and personal friend and um and
461:11 - another of my dear and personal friends
461:13 - whose face you can't see
461:15 - is right here his name is chuck he
461:17 - currently works at shazam in london and
461:20 - um and he and i just got away for the
461:23 - weekend and went up to bletchley park
461:24 - and took a tour not just just a little
461:27 - interesting connection i sort of
461:28 - mentioned in a previous lecture about
461:30 - the matrix so you notice that chuck here
461:33 - is wearing a jacket from the movie
461:35 - matrix i mentioned he was the one that
461:38 - wrote the hacking scene
461:40 - with trinity
461:41 - so here we all are together we're at
461:43 - bletchley park alan turing had an office
461:45 - in this this is one of alan turing's
461:47 - offices at bletchley park here's joel
461:50 - open open teaching and learning here is
461:52 - chuck worked on the matrix and here's
461:54 - trinity
461:56 - right
461:57 - except that now trinity's our enemy
461:59 - instead of our friend although in the
462:00 - movie we're rooting for trinity but
462:02 - we're the ones trying to protect
462:05 - what we're doing from the trinities of
462:07 - the world we're the good guys now and
462:09 - trinity is the bad gal okay she's the
462:11 - bad lady trying to break into our stuff
462:14 - and we're protecting ourselves against
462:16 - trinity so tables have completely turned
462:19 - okay
462:21 - so
462:22 - before we go too far you know you'll run
462:25 - into your organizations with lots of
462:26 - people who are like security experts and
462:29 - i find security experts
462:30 - generally very
462:34 - annoying
462:35 - because they like think they're smarter
462:36 - than they are
462:39 - security experts have this theory that
462:41 - more security is better and the reality
462:43 - is is that perfect security is
462:46 - unachievable if you want perfect
462:48 - security
462:49 - like
462:50 - lock yourself in a room and whisper to
462:52 - somebody oh wait a sec and then the
462:54 - guard will come in and hear you or
462:56 - whatever there'll be a microphone
462:58 - so the notion that perfect security and
463:00 - that you your company can spend more and
463:02 - more and more money of its budget on
463:04 - security just because the security
463:06 - expert thinks that you should
463:07 - is really kind of a fallacy
463:10 - security is a cost benefit analysis and
463:12 - so if you think of credit card companies
463:15 - you know what's the security of this
463:16 - number
463:18 - i won't show you the number but what if
463:19 - i lose this number what's the
463:21 - consequences i've had many credit cards
463:24 - that got compromised i don't exactly
463:26 - know how
463:27 - they've got software inside of computer
463:28 - companies that catches like when all of
463:31 - a sudden i live in michigan and a bunch
463:33 - of charges at the new jersey walmart are
463:34 - showing up and i never got on a plane
463:37 - i'm amazed at how rare it is that your
463:40 - identity actually gets lost permanently
463:42 - so i'm really impressed with how the
463:44 - banks are capable
463:46 - and so they have this number that makes
463:48 - it real convenient for us to buy we can
463:50 - type it into a web form we can do all
463:51 - these things
463:52 - and one in a zillion times it gets
463:55 - compromised and so they lose 50 bucks
463:58 - but billions of dollars of commerce
464:00 - happen so there is always a security
464:02 - versus cost if basically for me to use
464:05 - this credit card i had to have sort of a
464:07 - a personal uh guard from the
464:10 - the company with me all the time it'd be
464:13 - very expensive for me to buy stuff on
464:15 - amazon and have it shipped to my house
464:17 - and so
464:18 - understand that when you start getting
464:20 - into conversations with security
464:25 - professionals
464:26 - sometimes they're the kind that
464:27 - understand that security is naturally
464:29 - imperfect and everything is a
464:31 - cost-benefit analysis rather than more
464:33 - security is always better so more is not
464:35 - always better that's just my little
464:38 - speech about security in case you get
464:39 - stuck in a conversation with some
464:41 - pompous security expert they're mostly
464:44 - pompous
464:45 - so
464:46 - database administrators are pompous too
464:48 - but hope you're not not you're not a
464:50 - database administrator security expert
464:52 - but um
464:54 - the best security experts that i've ever
464:56 - met are the ones that understand this
464:58 - and they can they can they can
465:00 - characterize every issue in terms of a
465:02 - cost benefit analysis and then you know
465:04 - you know that you've run into one that's
465:06 - really smart and bright
465:08 - so the terminology that we're going to
465:10 - use for the rest of uh segments of this
465:12 - lecture
465:13 - we're going to be solving two basic
465:15 - problems
465:16 - one is confidential confidentiality and
465:20 - the confidentiality is the
465:22 - the the leakage of information so
465:25 - if i was to want to send
465:28 - this credit card number to one of you
465:31 - watching right now without the rest of
465:33 - you seeing my credit card number
465:36 - the the mere revealing of that
465:37 - information is the problem
465:39 - so i want to come up with a way to send
465:42 - it to you
465:43 - so that no one except the one person
465:45 - that i want to see it gets it that's
465:47 - confidentiality
465:49 - the other problem is one of integrity
465:52 - and that is
465:53 - in a sense knowing that a
465:57 - that the information that you've got
465:59 - comes from who you thought it came from
466:02 - and b that it wasn't modified on the way
466:06 - so there are things like digital
466:07 - signatures that sort of fall into this
466:09 - category
466:10 - and uh other mechanisms that we'll talk
466:12 - about so these these two themes of
466:15 - confidentiality and integrity will run
466:18 - through the rest of the lectures that we
466:20 - have on security okay
466:22 - so coming up next we're just we're going
466:24 - to start diving right in
466:30 - [Music]
466:36 - so the first topic that we're going to
466:37 - talk about is confidentiality encryption
466:40 - and decryption and of course this was
466:42 - what was going on at bletchley park in
466:45 - world war ii so
466:46 - uh
466:47 - the terminology that we'll use in this
466:50 - is plain text and ciphertext and the
466:52 - idea is
466:53 - whether it's text or other information
466:55 - there is the information that we
466:57 - actually want to transmit whether it's a
466:59 - credit card number or something else and
467:01 - then there is the
467:02 - encrypted version of that and we'll call
467:04 - that the ciphertext and the ciphertext
467:06 - is what we assume
467:07 - is revealed to intermediate parties
467:10 - whether they are stopping it and
467:12 - changing it or they're just watching it
467:14 - it's still the cipher text is the stuff
467:16 - that we are um
467:19 - just by the nature of the communication
467:21 - we are forced to reveal it or there is a
467:23 - probability that we'll reveal it so it
467:26 - is hopefully unintelligible and
467:28 - hopefully it is difficult to go from the
467:30 - cipher text to the plain text except if
467:33 - you are the actual intended recipient
467:35 - or impossible
467:37 - encryption is the act of going from
467:40 - plain text to ciphertext and returning
467:43 - the ciphertext back to the plain text as
467:45 - decryption and there is a key some kind
467:48 - of a key which is really sort of a some
467:50 - data plus a technique
467:52 - plus an algorithm that goes back and
467:54 - forth
467:55 - so there are two kinds of systems that
467:57 - we'll talk about in the upcoming
467:58 - lectures
467:59 - one is called a
468:01 - secret key and the other is called a
468:03 - public key
468:04 - the secret key is the one we talked
468:07 - about at the very beginning the secret
468:08 - key was really used from
468:10 - uh the romans and caesar on up to world
468:14 - war ii
468:15 - uh the public key encryption really is
468:17 - uh much more recent in the 60s and the
468:20 - 70s and we'll talk about that
468:22 - later on so the first thing we'll talk
468:24 - about is the shared secret or secret key
468:27 - the secret key is also called symmetric
468:29 - key which means that uh both parties
468:32 - have to be in possession of the same
468:34 - information you basically use the same
468:37 - key material to encrypt as you do to
468:39 - decrypt the um the public key is
468:42 - asymmetric which means you use it one
468:44 - key to encrypt in a different key to
468:46 - decrypt we'll get to that later
468:49 - and so the problem that secret key has
468:51 - that led to the need to invent uh
468:54 - public key is the fact that you need to
468:57 - at some point have a secure
468:58 - communication whether you're sitting in
469:00 - room together and you hand each other
469:01 - code books whatever it is you have to
469:03 - have a way to distribute the key in a
469:06 - secure manner
469:08 - the public key which we'll get to later
469:09 - has a way of distributing the key in
469:12 - using insecure medium and you'll see
469:14 - when you're when we get there it's like
469:16 - so obvious and clever you wonder why
469:18 - nobody thought of it
469:20 - until you know
469:22 - very recently
469:23 - so
469:24 - here is the path right you have some
469:26 - plain text
469:28 - you uh you have say the word candy that
469:30 - you want to send you're going to encrypt
469:32 - with a shift where you you just go to
469:35 - the next later letter so c becomes d a
469:38 - becomes b and becomes o and so now we
469:41 - have the
469:42 - d b o z that is the plain text coming
469:45 - from alice alice sends it in the
469:48 - dangerous dangerous nasty wide world of
469:53 - you know routers or
469:55 - radio with uh
469:57 - with morse code or whatever it is we're
469:59 - going to do
470:01 - whatever is we're going to do
470:03 - where the message might be intercepted
470:04 - by somebody now they're not intercepting
470:06 - the plain text we assume that this part
470:08 - here is secure and this part here is
470:10 - secure it's only dangerous while it's in
470:12 - flight somehow in the middle and we only
470:14 - worry about eve getting it
470:16 - and
470:17 - and then at some point because
470:20 - uh bob has the key which is subtract one
470:23 - bob goes from each of the cyber text
470:25 - letters back to the plain text letters
470:28 - and voila
470:29 - out comes
470:30 - the plain text again and so
470:33 - eve's problem is i'm only eve is only
470:36 - handed
470:38 - well no sorry he is not eve is not given
470:40 - the key
470:41 - he is given the cipher text and nothing
470:43 - else and she must
470:45 - like bletchley park must derive whatever
470:48 - it is drive the key derive the plain
470:50 - text whatever it is that's eve's goal
470:54 - the caesar cipher
470:57 - is the kind of the oldest most widely
470:59 - used forms of encryption
471:02 - it uses the notion of a shift
471:05 - the shift number is just as i shown a
471:08 - shift of one means a becomes b and
471:11 - x becomes y and
471:13 - l becomes
471:15 - l m l l becomes m so
471:18 - you just take and move a fixed position
471:20 - down l this was used for a surprisingly
471:22 - long period of time and there's some
471:24 - pretty good youtube videos that kind of
471:25 - you can if you want to see more about
471:27 - sort of the the how this works and the
471:30 - math behind it and how you break it it's
471:32 - uh it's pretty fascinating i mean
471:34 - finally it's just it's completely
471:36 - breakable um and we'll actually going to
471:38 - break it here pretty soon
471:40 - ourselves so the caesar cipher
471:43 - so i want to pause and let you see uh
471:46 - youtube video uh here from
471:48 - uh
471:49 - beloved movie uh called the christmas
471:52 - story where little ralphie gets his uh
471:55 - little orphanage secret decoder ring
471:57 - and uh little orphan annie sends a
472:00 - decoded message an encoded
472:03 - ciphertext through the radio everyone
472:05 - can hear it but only those people who
472:07 - have the secret decoder ring can decrypt
472:09 - the message and you can see that it is a
472:12 - a caesar cipher it has a shift you'll
472:14 - note that
472:16 - the first thing they say before they say
472:18 - the encrypted message in the radio is
472:21 - that uh you're supposed to connect b and
472:23 - 13 or something like that and then you
472:25 - rotate the two wheels of the secret
472:27 - decoder ring to the b13 and then you can
472:31 - read across the secret decoder ring and
472:34 - decrypt the message as it's decrypted
472:36 - and then he slowly decrypts it and then
472:38 - of course there is the
472:40 - delightful moment where he realizes the
472:43 - crash crass commercialism uh that
472:47 - that
472:48 - or the complete lack of interesting
472:50 - meaning in in all of this so uh without
472:53 - further ado let's take a look at uh
472:54 - ralphie and uh christmas story be right
472:57 - back
473:02 - so i hope you like that i hope you like
473:03 - that um
473:05 - and so uh off we go um we're going to
473:09 - have a secret decoder ring for this
473:10 - class i would love to be able to send
473:12 - you all um
473:14 - oops come down i would love to be able
473:16 - to send you all a little mechanical
473:18 - wheel to move the stuff back and forth
473:20 - but instead i use the internet and i'm
473:22 - going to send you a a pdf and at this
473:25 - point you might want to pause the video
473:27 - and grab this pdf okay
473:31 - grab it
473:32 - secretdecoder.pdf
473:34 - doctortruck.com secret decoder.pdf and
473:37 - download it and you might even want to
473:39 - print it out because we're going to at
473:41 - this moment
473:43 - uh
473:43 - do a code breaking exercise
473:46 - okay
473:47 - and so let me tell you how to use this
473:49 - secret decoder ring
473:51 - so the top line here is the plain text
473:55 - and if you recall uh cesar shift has a a
473:58 - a shift number
474:00 - and um so to encode you go from a plain
474:03 - text let's say i want to do uh
474:08 - chuck i want to encode chuck
474:11 - and i want to encode it with a shift of
474:13 - 2.
474:14 - so shift to 2 means we select this
474:17 - and we basically go
474:20 - c
474:21 - is our plain text
474:22 - and then down we go e
474:25 - so then we go e is our first letter and
474:28 - then h
474:31 - is our second letter
474:33 - so we go down
474:34 - and that means h becomes j
474:37 - yeah and so u
474:40 - becomes w
474:43 - so now i'm doing my encryption so e h w
474:47 - is
474:47 - the encrypted
474:49 - ciphertext so let me clear that
474:52 - and write back down here
474:55 - different color
474:57 - e
474:58 - h w now to decrypt remember you need to
475:02 - know the shift so we somehow
475:03 - communicated separately and securely
475:05 - what the shift was
475:06 - and so now we want we have received our
475:09 - ciphertext
475:12 - we received our ciphertext and we need
475:14 - to decrypt it okay
475:16 - and so we know that the shift is two so
475:19 - we go to e we go in the shift row
475:22 - and then we go up to the plain text row
475:24 - and that says the first one is c
475:26 - then we go to h
475:27 - we go to the
475:29 - encoded text row and we go back up to
475:31 - the plain text row and so that's an h
475:34 - oh wait wait wait
475:38 - it's not h w what am i thinking this
475:40 - should have been a j
475:41 - i got this wrong sorry about that
475:43 - so that's wrong here's a j moves up to
475:46 - the h
475:47 - then the w let's see if i got w right
475:49 - yeah so w is my last ciphertext and it
475:53 - goes up to the u
475:55 - okay
475:56 - dot dot dot so you see the pattern that
475:59 - are in encoding is plain text
476:02 - down to shift position and our decoding
476:06 - is
476:07 - shift position back up to plain text
476:09 - okay so this is our secret decoder ring
476:12 - so go grab it and download it so that
476:15 - you can participate in the next exercise
476:19 - so now you are going to be cast in the
476:22 - role
476:23 - of
476:24 - bletchley park
476:26 - okay ready so here is your first code
476:29 - breaking exercise
476:32 - okay
476:34 - so here we go
476:36 - so you're bletchly parked right you just
476:38 - intercepted
476:40 - this ciphertext u
476:43 - b
476:44 - u p b t u
476:47 - whoa it's encrypted it's clearly
476:49 - meaningless
476:50 - so how are you going to decrypt it well
476:53 - the technique is
476:56 - take a look and decrypt it with all the
476:59 - all the shift numbers right you're going
477:01 - to do this by hand you're going to be a
477:02 - computer yourself you're going to do all
477:05 - the shifty cripping
477:08 - and just like in bletchley park you know
477:10 - you succeeded when the plaintext makes
477:12 - sense
477:13 - right when the plaintext makes no sense
477:16 - then you haven't succeeded but at some
477:18 - point the plain text makes sense
477:22 - so what you need to do is take your
477:24 - secret decoder ring and you need to
477:26 - decrypt it with a shift of one a shift
477:28 - to two a shift to three a shift to four
477:31 - and if you have your family members
477:33 - around you can print out multiple copies
477:35 - of the secret decoder ring and you can
477:36 - assign different shifts to different
477:38 - family members so you have to decrypt
477:40 - this 26 times
477:44 - have to decrypt it 26 times and then you
477:46 - look at all the 26 decryptions and then
477:48 - you decide which one makes the most
477:50 - sense
477:52 - okay
477:53 - so don't peek
477:56 - decrypt this one
477:57 - i made it easy on you okay
478:00 - so we'll stop now and give you a little
478:02 - bit of time to decrypt this one
478:05 - don't start pause until you actually
478:07 - have decrypted it okay
478:16 - okay this is your last chance for
478:18 - spoiler alert
478:20 - so here we are we're about to decrypt it
478:23 - here we go
478:24 - i did make it easy on you it was a shift
478:26 - of one
478:29 - it was a shift of one
478:32 - if you started at 12 you're kind of
478:34 - foolish right so you started at one and
478:36 - you go like oh great so now i'm gonna
478:40 - decrypt it i'll start at one
478:42 - here's the plain text this should be p p
478:44 - that's the plain text so i'll start with
478:46 - u
478:46 - if it's one
478:48 - then i go up and it's t
478:50 - and the second one is p
478:54 - so i go up and it's o t o keep going it
478:57 - says toast
478:59 - so you say to yourself well that's a
479:00 - word so it must be it
479:03 - well hello
479:06 - what are you doing here
479:08 - you want to say hi to my students
479:13 - this is a cat
479:15 - this is my eddie cat
479:16 - he likes to come up into my office
479:19 - and look
479:20 - so do you know anything about encryption
479:24 - anything about encryption so you use a
479:28 - shift of one
479:29 - and then you go from the christian text
479:31 - up to the plain text
479:34 - wow
479:35 - okay
479:36 - you are clearly not interested
479:39 - in my lecture so that was my cat
479:41 - hello
479:43 - sorry can't open the window for you
479:45 - because i'm doing a lecture
479:46 - okay
479:48 - um
479:49 - so
479:52 - you're going to like just keep
479:54 - bugging that window until i kick you out
479:55 - of my other room all right aren't you so
479:57 - you're going to get kicked out
480:03 - out you go
480:05 - he was gonna keep hitting that
480:07 - i'm gonna keep hitting that until uh i
480:09 - opened it for him
480:10 - okay
480:12 - so
480:13 - so now you've broken this code and again
480:15 - just like in bletchley park you only
480:17 - knew that you broke it if it made sense
480:19 - and um
480:20 - and so luckily the in blessedly parked
480:22 - the messages were longer and they were
480:24 - often looking for
480:26 - uh canonical things that they would say
480:28 - every day
480:29 - so um here we go
480:31 - and uh
480:33 - and so that's the
480:34 - breaking of
480:35 - that one
480:38 - and it turns out that shift of one was
480:39 - the thing that we did
480:41 - so here is
480:42 - your second task
480:45 - this one's longer and it's not a shift
480:47 - to one
480:49 - and so
480:51 - so this is a situation where you really
480:53 - would have to get your whole family
480:54 - going on this right where you got to do
480:56 - 26 decryptions of this
480:59 - and it will you know make sense to you
481:02 - you decrypt it 26 times right
481:05 - and so this one's going to be harder
481:07 - i guess you could just just decrypt one
481:09 - word but it's just not a shift of one
481:13 - but now we're going to do another trick
481:15 - okay
481:16 - so i don't want you to try all 26
481:20 - because there's there's a mistake in
481:21 - this there is a
481:23 - leakage of information that makes it so
481:26 - that you can figure out what the right
481:28 - decryption to try might be
481:31 - so this is english
481:33 - this is an english sentence
481:35 - so stare at for a while and find a more
481:39 - optimal way to decrypt it than trying
481:41 - all 26 shift patterns okay
481:44 - so there's a way to optimize this a way
481:47 - to cleverly figure out
481:50 - what might be the best shift or
481:52 - how not to have to decrypt the entire
481:54 - message 26 times to reduce the
481:57 - complexity
481:58 - and that's because we've leaked some
482:00 - information here that should be pretty
482:02 - obvious to you
482:03 - okay so let me give you a moment to
482:05 - break this one it shouldn't take you too
482:07 - long and you shouldn't have to force
482:08 - your whole family to decrypt this stuff
482:11 - okay
482:12 - so here we go give you a chance to
482:14 - decrypt it
482:22 - okay
482:23 - here's your last chance before the
482:24 - reveal you ready
482:26 - here we go
482:30 - so here is
482:32 - the decrypted text
482:35 - the shift turns out to be
482:38 - 13. it's a shift to 13.
482:41 - and the the weakness of this whole thing
482:45 - is this right here in the english
482:49 - language
482:50 - what is a single character we're not
482:52 - encrypting the spaces you'll notice
482:54 - because the spaces come across
482:56 - so what is the one single character
483:00 - word
483:01 - that we have in the english language
483:04 - that's
483:05 - capitalized
483:07 - well that's usually i
483:10 - i need a jet money and a jet what is the
483:14 - one
483:15 - thing
483:16 - that we do in the english language that
483:18 - is a single character word
483:21 - that is all lowercase that's lowercase
483:23 - typically unless at the beginning of the
483:24 - sentence and that is the letter a
483:28 - so basically you didn't have to decrypt
483:29 - the whole message you see some weird
483:32 - pattern and you go like this
483:34 - i just have to figure out
483:36 - and then you go look
483:38 - and you look in the row 13 the plain
483:40 - text
483:41 - and you go like oh
483:43 - where does you go look at the eye
483:44 - because you guessed to the plain text
483:46 - and then you just look down until you
483:48 - see the v and within seconds
483:50 - literally within seconds if you do it
483:52 - right within seconds you know it's a
483:54 - shift to 13 and then it's a trivial
483:56 - matter
483:57 - to convert it
484:00 - so you could figure out the shift code
484:01 - within seconds and these this was how
484:04 - bletchley park figured it out and this
484:06 - is why the
484:07 - known plain text was so important
484:10 - because you'd only have to figure out
484:11 - like one letter if you knew what the
484:12 - plain text was and often they would know
484:15 - by length
484:16 - and certain other things oh this is i i
484:19 - think we can guess what this plain text
484:21 - was that this particular operator would
484:23 - send and this has to do with the leakage
484:25 - of information it's not the it's not the
484:27 - mathematical perfection or lack of
484:29 - perfection in the security key it's some
484:31 - other leak some other thing where
484:34 - they're going like oh wait a sec i can
484:35 - take advantage
484:37 - of something it was just equally
484:39 - encrypted as any other message but
484:41 - because i gave you this clue of an
484:43 - uppercase single character word and a
484:45 - lowercase single character word
484:49 - upper lowercase single character word
484:50 - and uppercase single character word i
484:52 - greatly reduced the amount of effort
484:54 - that you had to put in okay
484:58 - now what's cool about this
485:00 - you go to this website www.com
485:04 - is that long ago before facebook and
485:06 - before twitter and before all these
485:08 - things we had these things called news
485:09 - groups
485:10 - and they were kind of this weird kind of
485:13 - uh collective email list that we had and
485:15 - this was like in the 80s
485:18 - and it was even used in store and
485:19 - forward networks where it was kind of
485:21 - like facebook and store and forward
485:22 - networks meaning that it might take
485:25 - four hours for you to see the status
485:27 - update but we kind of would subscribe to
485:29 - these collective things
485:31 - and there was one that was basically the
485:33 - dirty jokes
485:35 - and the thing about dirty jokes was part
485:37 - of the part of what we were trying to do
485:40 - in this thing was you weren't supposed
485:42 - to swear and there was software that
485:44 - would filter out swear words
485:47 - um
485:48 - from if you put a swear word in to a
485:51 - dirty joke
485:52 - um
485:54 - it would it would not forward the
485:56 - message and so we had to have a way to
485:58 - encrypt
485:59 - messages that included swear words
486:02 - so that we could tell dirty jokes to
486:04 - each other for those who wanted to
486:05 - subscribe to the dirty joke list
486:07 - and so they came up with this wrote 13.
486:09 - so we came up with a simple caesar
486:11 - cipher with a shift of 13. 13
486:14 - beautifully of course is 26 divided by
486:16 - 2.
486:17 - so it's a symmetric shift the shifting
486:20 - in by 13 is the same as shifting out so
486:23 - of all the sievers caesar ciphers a
486:25 - shift of 13
486:27 - the encryption and the decryption are
486:28 - exactly the same calculation
486:31 - and so we would um
486:33 - we would
486:34 - type our dirty joke into row 13 and
486:36 - convert it to row 13 and we would send
486:38 - it in row 13 and then we would if we
486:41 - wanted to decrypt it but what became
486:42 - funny after a while was we were so used
486:45 - to
486:46 - reading wrote 13 that it almost became
486:49 - like a second language right we could we
486:51 - could read second we could start reading
486:54 - the dirty jokes in row 13 and we would
486:56 - laugh before we translated them up so
486:59 - wrote 13 has an interesting sort of uh
487:02 - historical thing and you go to row 13
487:04 - and sort of like encrypt whatever you
487:06 - want to say and and i'll probably have
487:08 - some questions to ask you where you will
487:10 - have to
487:11 - do some rope 13 encryption
487:14 - and so that's the end of this lecture
487:15 - where we talk about uh caesar ciphers
487:18 - and the various techniques and how
487:20 - caesar ciphers work and so
487:22 - uh we'll be back and talk about
487:23 - cryptographic hashes
487:25 - so now we just finished talking about uh
487:28 - basic confidentiality using simple
487:30 - caesar cipher and we'll get better
487:32 - before we'll we'll be more sophisticated
487:34 - than that because caesar ciphers are
487:35 - trivially breakable obviously but now
487:37 - we're going to switch from
487:38 - confidentiality to integrity and we're
487:41 - worried about uh the the message uh just
487:45 - to review the confidentiality means
487:47 - we're hiding information we just don't
487:49 - want eve to see it because eve sees the
487:53 - cipher text and we want her to never be
487:56 - able to extract the plain text and as we
487:58 - saw in the last lecture uh you
488:01 - if i'm just using a caesar cipher i mean
488:03 - there was little or nothing i could do
488:05 - to stop you from doing it all you'd do
488:06 - is enough work and you would figure out
488:08 - the shift and then you'd have everything
488:11 - so it would take you you know you'd
488:13 - write a program it would take you like a
488:14 - thousandth of a second to check all
488:16 - possible things and you're done
488:19 - so that's confidentiality now we're
488:20 - going to talk about integrity right
488:24 - and we're going to kind of assume
488:25 - confidentiality or perhaps assume it's
488:27 - not necessary because we're transporting
488:28 - it in a locked box or in a you know
488:30 - whatever but let's just say i had some
488:33 - um
488:34 - some some piece of paper right
488:37 - and and and you wanted to know if this
488:39 - piece of paper really came from me well
488:41 - we would use
488:42 - uh things like a signature
488:45 - right or we would use uh
488:47 - a bit of wax where we would push the uh
488:50 - our seal on it and the seal only
488:52 - belonged to us
488:53 - but but really did signatures can be
488:56 - forged uh
488:57 - you know people can steal the wax
488:59 - imprint thing
489:01 - i mean in roman times they would wear it
489:02 - around their neck to make sure that no
489:04 - one stole it but you could also just
489:05 - create a fake one
489:07 - so you could seal your letter with the
489:08 - wax but
489:10 - and you break the wax seal
489:13 - but in the computer world we need
489:14 - something right we need a situation
489:17 - where
489:17 - um
489:19 - where perhaps i mean my wife had to get
489:21 - a prescription
489:22 - and they sent her an email with a
489:25 - prescription in it and this prescription
489:27 - had on the end of it a digital signature
489:29 - it was just a bunch of numbers and you
489:31 - think to yourself
489:32 - wow you know here's this prescription
489:35 - and at the end it just has a bunch of
489:36 - numbers and that's the digital signature
489:38 - from the doctor and how does that work
489:41 - well
489:42 - it it works surprisingly well and and
489:45 - that message can be forwarded she can
489:47 - print it out she can scan it she can
489:50 - send it to a
489:52 - pharmacist via email and as long as that
489:54 - signature's in there we can know that
489:56 - the data originally came from the doctor
489:59 - and that that you didn't know and
490:01 - modified it to be a different kind of
490:02 - prescription like a different amount or
490:05 - a different drug
490:07 - and and then that would invalidate the
490:08 - signature and how exactly is that done
490:11 - well
490:12 - it's done using a technique called
490:14 - cryptographic hashing and it is a bit of
490:18 - computer software a bit of code that
490:20 - takes a large amount of text
490:23 - and reduces it down to
490:26 - some small set of numbers a large block
490:28 - of data to a fixed length
490:30 - set of numbers
490:32 - in and the message is the big thing and
490:35 - the digest is the little thing it sort
490:37 - of it's like it digests it and sort of
490:40 - gives you this little tiny thing now the
490:42 - key is there are many different
490:45 - techniques to to map from a message to
490:48 - the hash or the digest
490:50 - and some are better than others and it
490:51 - turns out that there is a
490:53 - long-term whole field of mathematics and
490:56 - computer science that's dedicated to
490:58 - understanding
491:00 - what a good cryptographic hash might be
491:02 - and so there there are these well-known
491:04 - cryptographic hashes that you may have
491:06 - heard of like sha-1 or md5
491:09 - each of those as the result of
491:11 - many many years of research of thinking
491:14 - through
491:14 - what a good cryptographic hash is so for
491:17 - example one cryptographic hash might be
491:20 - i sign it with the number of characters
491:23 - in the message that would be something
491:24 - that says like well at least they didn't
491:26 - expand or contract the number of
491:27 - characters in the message but then at
491:29 - some point that would be such an obvious
491:30 - thing that you would change the
491:32 - signature as well
491:33 - so you want to make it so you can't
491:35 - change the message and change the
491:36 - signature because then you're sort of
491:38 - properly forging a signature so the hash
491:41 - function that takes the message to
491:42 - create the digest that's something that
491:45 - is a scientific mathematical research
491:48 - effort to get the thing right okay
491:52 - so here is an example of a hash function
491:56 - now this hash function takes as message
491:59 - input on one side right it takes message
492:02 - input of and this can be short medium or
492:05 - extremely long messages and the digest
492:07 - is always a fixed size
492:10 - it's always a fixed size right some get
492:12 - longer than others different message
492:15 - hashing functions give different length
492:17 - but they're all fixed and they're fixed
492:20 - even if the input is megabytes it can be
492:22 - megabytes hundreds of megabytes and you
492:24 - can still run all that through the hash
492:26 - function and get a digest okay and so
492:30 - the key thing is is it
492:34 - is to make it so that for any change in
492:37 - the input the digest also changes okay
492:40 - and so here we have the red fox jumps
492:42 - over the blue dog
492:44 - right and that's the hash that comes out
492:46 - and if we change one letter
492:48 - you know the v to a u
492:50 - the hash changes dramatically so this
492:52 - hash changes dramatically so this
492:54 - suggests this is a good cryptographic
492:56 - hash function
492:57 - right the length didn't change all the
493:00 - characters are the same but one
493:01 - character changed and the hash function
493:03 - changes completely okay and here is
493:06 - another
493:08 - flipping of characters right where the
493:10 - from here to here
493:12 - let's give you a better color here
493:14 - which color is that
493:17 - yeah from here here the v and the e were
493:20 - just toggled and yet from here to here
493:23 - the hash function is completely
493:24 - different and so the hash function needs
493:27 - to generate quite different hashes even
493:29 - with tiny perturbations of the input
493:31 - you're not even allowed to change one
493:33 - character add and remove character
493:35 - and they know when a cryptographic hash
493:37 - function is bad
493:39 - if they can take two different messages
493:41 - and send it through and get the same
493:43 - digest and so there's a lot of research
493:45 - to try to as soon as they come up with
493:47 - one of these things there is a massive
493:49 - amount of research to try to disprove it
493:51 - to say that's a bad one
493:53 - and the bad one is if two different
493:55 - messages come in and they come out with
493:57 - the same hash function then that's bad
494:00 - because it means that it's
494:01 - provable provably that the signature
494:04 - could use the same signature can be used
494:06 - to sign two different input messages
494:09 - okay so this hash function
494:12 - function
494:13 - is a bit of computer code
494:15 - right and you know shot one
494:18 - you can go look on wikipedia for shot
494:20 - one or md5
494:22 - these are kind of classic hash functions
494:24 - and when you read the sha1 or md5
494:27 - wikipedia they'll talk about
494:29 - the fact that it's been decided it's
494:31 - kind of flawed and so there's like sha-1
494:34 - don't use it it's not cool now you can
494:36 - use it for less critical things you just
494:37 - have to be aware of what its limitations
494:39 - are it's like sha-256 is better than
494:42 - sha-1 so what happens is there's
494:44 - continuous research and there's
494:45 - continuous improvement in the
494:48 - mathematics of these hashing functions
494:50 - and they're getting really good at it
494:51 - because we've been using these things
494:53 - for a very very very long time
494:56 - now if you want to play whoa and clear
494:59 - this up so um i've got a simple sha-1
495:03 - calculator and um you can you'll be
495:06 - using this in the homework
495:07 - the sha-1 calculator takes as input
495:11 - some kind of a plain text
495:13 - and it produces
495:16 - output when you hit the thing so you can
495:18 - you put in pony or fluffy or whatever or
495:22 - even a whole bunch of stuff and it
495:23 - produces
495:24 - a sha-1 okay so um
495:27 - so basically uh
495:29 - get ready to use this because the next
495:31 - upcoming exercises are going to use this
495:34 - and you can read sha one about sha one
495:36 - on wikipedia and you can find out like
495:38 - yeah it's seen as less than perfect and
495:40 - you should use sha-256 or whatever but
495:43 - actually lots of applications in less
495:44 - than critical situations
495:46 - know that you know for short and
495:48 - reasonably length strings you know the
495:50 - flaws are mathematically found but
495:53 - they're not commonly run into so sha-1
495:55 - is not
495:56 - horrible it's just been proven sort of
495:59 - less than ideal and so for highly
496:01 - sensitive information you would never
496:03 - use sha-1 but for simple things sha-1
496:06 - and even things like md5
496:09 - are commonly used like for hashing
496:11 - passwords
496:14 - [Music]
496:31 - one of the things we've learned from the
496:32 - snowden documents is that cryptography
496:36 - broadly applied
496:38 - gives the nsa trouble at least at scale
496:41 - so the nsa does a lot of cryptanalysis
496:44 - and they break a lot of systems but
496:47 - well-designed well-implemented
496:48 - cryptography
496:50 - does stymie them
496:52 - and it's important to understand how it
496:54 - does
496:55 - because if the nsa wanted to be
496:57 - in my computer
496:59 - they'd be in my computer done period
497:01 - no
497:02 - question about it
497:04 - they would hack into my computer they
497:06 - have a lot of tools to do that
497:08 - if they are not in my computer one of
497:10 - two things are true
497:11 - one
497:12 - it's against the law and the nsa is
497:14 - following the law and two
497:17 - i'm not high enough on their priorities
497:19 - list
497:20 - now what cryptography does
497:23 - is it forces the attacker whether the
497:25 - nsa or the chinese government or cyber
497:29 - criminals or whoever
497:31 - to have a priorities list
497:33 - and depending on their budget they'll go
497:36 - down the priorities list and the hope is
497:39 - you're not there right you are below
497:41 - their budget line
497:43 - without cryptography
497:45 - an organization organization like the
497:47 - nsa
497:49 - can
497:49 - bulk collect data on everybody
497:53 - with cryptography they are forced to
497:56 - target
497:57 - and that's extraordinarily valuable
498:00 - because it means the fbi will go after
498:03 - the criminals the nsa will go after the
498:07 - agents of a foreign power
498:09 - the chinese government will go after
498:13 - the u.s government officials that rise
498:16 - to whatever level they want to spy on
498:18 - the cyber criminals will just go after a
498:21 - few of us and the rest of us are
498:23 - protected
498:24 - that makes cryptography a very important
498:27 - tool
498:29 - now cryptography
498:31 - doesn't actually provide any security
498:34 - because cryptography is mathematics
498:36 - when we say we trust the cryptography
498:39 - what we're saying is we trust the
498:40 - mathematics
498:42 - and i think there's a lot of reason to
498:44 - say that i trust the mathematics
498:46 - everything i know about cryptography
498:49 - tells me the mathematics is good
498:52 - certainly there will be cryptographic
498:54 - advances certainly some things will be
498:56 - broken in the future but by and large
498:58 - the math works
499:00 - but math has no agency math can't do
499:04 - anything it's equations on a piece of
499:06 - paper in order for math to do something
499:10 - someone has to take that math
499:12 - and write code
499:14 - and embed that code in a program
499:17 - and embed that program in some bigger
499:19 - system and put that bigger system on a
499:21 - computer with an operating system on a
499:23 - network with a user and all of those
499:26 - things add in security
499:29 - when the nsa breaks cryptography by and
499:32 - large they don't break the mathematics
499:34 - they break something else they break the
499:36 - implementation they break the software
499:39 - they break the network they break the
499:41 - hardware the software is running on and
499:43 - they do something somewhere else
499:46 - and again and again we learn this lesson
499:48 - right the math works
499:50 - but putting stuff around it is much
499:53 - harder
499:54 - now there's an important corollary here
499:57 - that complexity is the worst enemy of
499:59 - security
500:00 - right what these things do is they add
500:02 - complexity the more complex you make
500:05 - your system
500:07 - the less secure it's going to be because
500:09 - the more vulnerabilities they'll you'll
500:11 - have
500:12 - the more mistakes you'll make
500:14 - somewhere
500:15 - in that system
500:17 - and we learn again and again when we see
500:20 - analyses of voting systems embedded
500:22 - systems your cell phone messaging
500:25 - systems email systems that it's always
500:27 - something around the crypto something
500:29 - that
500:30 - the designers the implementers the
500:32 - coders the users got wrong
500:35 - and the simpler we can make systems the
500:38 - more secure they are
500:40 - so what nist is doing
500:43 - is they're trying to build
500:44 - standards around as much as possible
500:48 - right so they have a standard for a
500:50 - crypto algorithm aes is the standard
500:53 - crypto algorithm it was a public process
500:57 - where
500:58 - multiple groups submitted algorithms and
501:00 - the community as a whole
501:03 - picked a winner
501:04 - and it wasn't dictated on high they
501:07 - weren't secret criteria
501:09 - the
501:09 - aes algorithm was the one that most of
501:12 - us thought should be aes actually there
501:15 - were several we thought were good
501:17 - candidates they picked one but there's a
501:19 - lot of trust in the process because
501:21 - there's a very public open international
501:24 - process right shah 3 the new secure hash
501:27 - standard the same sort of process
501:30 - now it's really fun as a cryptographer
501:32 - being involved in this process i mean i
501:33 - think of it as a great crypto demolition
501:35 - derby we all put our algorithms in the
501:37 - ring beat each other up the last one
501:38 - left standing wins it was kind of like
501:41 - that you know we would all publish
501:42 - papers analyzing each other
501:44 - and
501:45 - one of the ones left standing one
501:48 - but you know that's just a small part of
501:51 - what nist does they have standards of
501:53 - random number generation they have
501:54 - standards for
501:56 - key agreement for different protocols i
501:59 - mean trying to standardize these
502:01 - components
502:03 - so the implementers make fewer mistakes
502:06 - but still is a lot you can't standardize
502:09 - and those bigger pieces
502:11 - where you're going to still find most of
502:12 - your vulnerabilities i believe that's
502:14 - where the nsa finds most of its
502:16 - vulnerabilities
502:17 - that it's out there
502:19 - recently we learned about
502:20 - vulnerabilities
502:21 - in the key agreement protocols that are
502:23 - used to secure a lot of the vpns and
502:26 - internet connections right and if you
502:28 - look at where that vulnerability was
502:30 - it's because of a shortcut that was made
502:32 - and and copy that allowed for a massive
502:34 - precomputation the math worked great if
502:37 - you want to make a standard worse you
502:39 - make it super complex
502:41 - and and you're just building in
502:44 - vectors at that point and this is why
502:46 - the normal ietf process for internet
502:48 - standards doesn't really work for
502:49 - security
502:50 - because those standards are
502:53 - compromises right let's put in all the
502:56 - options make everyone happy let's put in
502:58 - as much flexibility as necessary to make
503:00 - the system as comprehensive as possible
503:02 - that is sort of anti-secure security
503:05 - security needs as few options as
503:07 - possible
503:08 - right as simple as possible you don't
503:10 - want to compromise you want one group to
503:13 - win
503:14 - because that group
503:15 - has a self-contained vision when you
503:17 - have a piece of this and a piece of that
503:18 - and a piece of that there's going to be
503:20 - some interaction you didn't notice
503:22 - and that interaction will be the
503:23 - interaction that breaks your system
503:25 - you didn't win aes right you were you
503:28 - were in it you were in the demolition
503:30 - derby with your helmet on
503:32 - tell me a little bit about what it's
503:33 - like to be in the demolition derby
503:34 - toward the end and what it's like to
503:36 - sort of not win the demolition derby
503:39 - so aes was an interesting process it
503:41 - started out with 64 algorithms
503:43 - which 56 met the submission criteria
503:47 - then nist whittled it down to i think it
503:50 - was 15 or 16
503:52 - and then in next round whittled it down
503:53 - to five and then chose one so it's a
503:56 - constant winnowing process
503:58 - and
503:59 - two fish which was my submission made it
504:02 - all the way into the top five
504:05 - and
504:06 - those top five were all good algorithms
504:08 - i mean there was no bad algorithms there
504:10 - and the arguments were more about
504:12 - security margin and implementability in
504:15 - hardware versus embedded systems versus
504:20 - constrained systems 8-bit 32-bit
504:23 - so we were making
504:25 - distinctions about how we thought it
504:27 - would be used
504:28 - and and to me it came down to i think
504:31 - three algorithms that i thought these
504:33 - were all good choices
504:35 - right two fischer's one ring doll the
504:37 - eventual winner was one and actually at
504:38 - this point i forget what the third is
504:41 - and
504:42 - what i said on my blog at the time is
504:45 - you know any of these three are good
504:48 - and sure it would have been great to
504:49 - have been the winner but they really
504:51 - know something there's a lot of value in
504:53 - nist picking a non-us algorithm
504:56 - right by picking an algorithm from
504:58 - belgium
505:00 - it said to the world that nist is
505:02 - picking what they thought was the best
505:04 - and not trying to pick american
505:07 - so
505:09 - that was an important consideration i
505:11 - hadn't thought of at the time
505:13 - so i i can't fault in this process at
505:15 - all been great to win it actually was
505:18 - really fun to participate
505:20 - and you know i would do it again and i
505:22 - participated in the shah 3
505:24 - competition which again
505:26 - was picked by uh i mean someone else won
505:28 - my my entry was called skein
505:32 - and you know the these are
505:34 - lots of fun for cryptographers and also
505:37 - for students because they give
505:39 - students a whole bunch of targets
505:41 - one of the hard things if you're a
505:43 - crypto student is you have to break
505:44 - stuff the only way you learn how to make
505:46 - things is by breaking things it's back
505:48 - to that security mindset right anybody
505:50 - can create a security system that he
505:52 - can't break
505:53 - so if you show up with a security system
505:54 - and say i can't break this my first
505:56 - question is well who are you
505:58 - why should i trust your attestation that
506:01 - you can't break it as something that's
506:03 - meaningful what else have you broken
506:06 - and these competitions give
506:08 - a whole bunch of targets so students can
506:11 - start breaking things that haven't been
506:13 - broken before get papers out of it get
506:16 - publications
506:17 - get cred
506:19 - in the field as someone who can break
506:22 - stuff and therefore as someone who can
506:24 - design stuff it's a it's a it's a source
506:27 - of new problems it's a source of new
506:29 - targets but this is what i said to start
506:32 - security is inherently
506:34 - adversarial and that adversarial nature
506:38 - makes it different
506:40 - unlike any other field in in computer
506:43 - science
506:44 - you go to a security conference a crypto
506:46 - conference and there are going to be
506:48 - papers of people who break each other's
506:50 - stuff and you have to
506:52 - get a thick skin
506:54 - you have to understand that we are all
506:57 - learning now if i produce a protocol and
507:00 - you break it
507:01 - sure i'm unhappy but i've learned
507:02 - something and so have you and so is
507:04 - everyone else
507:05 - and that knowledge is more important
507:08 - than
507:09 - my particular creation
507:12 - surviving
507:13 - and you have to understand that and
507:15 - accept that and that has to excite you
507:18 - [Music]
507:37 - the first application of this that we're
507:38 - going to talk about
507:40 - is
507:40 - hashing passwords
507:42 - so you go to a new site even
507:44 - coursera.org and it asks you to create
507:47 - an account and create a password
507:49 - now
507:50 - you're not supposed to but lots of
507:52 - people use the same password for lots of
507:54 - systems
507:55 - and so if your coursera password were
507:58 - somehow mistakenly revealed they might
508:00 - get your linkedin password as well
508:02 - and so
508:03 - it is considered very bad form very very
508:06 - bad form to actually ever store
508:10 - your password
508:12 - in the coursera database
508:14 - in plain text
508:16 - because if the database was somehow
508:18 - compromised then all the bad guys would
508:20 - get
508:20 - all of the plain text passwords and
508:23 - again maybe use them not just on
508:25 - coursera because you could change your
508:26 - password on coursera but use them on
508:28 - linkedin and twitter and whatever and
508:30 - youtube and steal all your accounts by
508:33 - compromising one account because you
508:34 - made the mistake
508:36 - that lots of people do of using the same
508:39 - password in a lot of different places
508:41 - because we're tired of making up a new
508:43 - password for each place
508:46 - so you're not allowed to store the plain
508:48 - text password in the database that's bad
508:51 - practice and we don't want to do that so
508:53 - the best practice is to store a hashed
508:56 - version of it to run take the plain text
508:59 - of the password when you're creating
509:00 - your account
509:02 - run a cryptographic hash on it
509:04 - store the cryptographic hash and then
509:06 - when you log in next you present to the
509:09 - system your plain text password and it
509:12 - runs your presented password through a
509:15 - cryptographic hash same cryptographic
509:17 - hash and then compares it with the
509:19 - hashed password in the database if they
509:21 - match you must have presented the same
509:24 - plain text both times this is a way that
509:26 - they can verify that you've represented
509:29 - the same plain text again
509:30 - without
509:32 - them ever storing the plain text okay
509:35 - that's why a respectable system we'll
509:37 - never send you your password
509:39 - it's
509:40 - i've almost started doing this where i
509:42 - as soon as i go to a new system and i
509:44 - set my password i set it to crap and i
509:46 - have them send me
509:47 - a message
509:49 - to reset my password and if they send me
509:52 - the actual plain text to the password
509:54 - it's like
509:56 - and i use some crap password i've
509:57 - actually got to the point where
510:00 - i'm tired of reusing my passwords and my
510:02 - technique i don't know if it's a good
510:03 - one or bad one is i just put crap in for
510:05 - my password and then every time i use
510:07 - this system i have it send me a new
510:09 - password to reset the password i mean
510:11 - that i really think we should just
510:13 - change it so that when you log in it
510:14 - just comes to your email and you click a
510:16 - link i don't know
510:18 - i'm not expert on this stuff you know so
510:21 - but a respectable computing system will
510:23 - never ever ever send you your plaintext
510:25 - password because they don't possess it
510:27 - and they can't derive it these
510:28 - cryptographic hashes are not backwards
510:31 - you can't make them go backwards let's
510:32 - go back here they're only a one-way hash
510:35 - because this might be one megabyte of
510:38 - data and this might be well let's see
510:40 - four times
510:41 - this is 40 characters 40 characters of
510:44 - data one megabyte squeezes down to 40
510:46 - characters there is no way to go
510:48 - backwards the information is lost
510:51 - the hash is you know distinct and unique
510:54 - right but you cannot go backwards it's a
510:56 - one-way operation you can go from the
510:58 - plain text to the hash but you can't go
511:00 - from the hash to the plain text which is
511:02 - very different than encryption and
511:03 - decryption right in decryption you had
511:06 - to be able to pull the plain text back
511:08 - out from the encrypted text this is not
511:10 - encryption this is calculating a special
511:13 - digest that is uniquely connected to the
511:16 - plain text message but you need to run
511:19 - the plain text through the hash again
511:20 - and then compare okay
511:23 - so
511:24 - let's do some homework
511:26 - well so now let me let me let me first
511:29 - show you uh the how this works in the
511:31 - hash passwords
511:32 - so
511:34 - so let's say for example you're logging
511:36 - into corsair.org and creating your
511:37 - profile for the first time and it says
511:39 - please give me your password
511:41 - and you choose a singularly bad password
511:45 - as fluffy
511:46 - okay so fluffy and you can type go type
511:49 - fluffy into doctorchuck.com
511:51 - sha1.php in another window if you type
511:54 - fluffy and you encrypt it with sha1
511:57 - you get this as the hash password
512:00 - and then this is what they store in in
512:02 - coursera's database
512:04 - and so that is they don't know they
512:05 - never store fluffy they they would not
512:07 - do that that would be so bad if they did
512:09 - that so they store this
512:11 - and if i get this it's very difficult to
512:13 - reverse engineer it to fluffy it also is
512:16 - even harder if you make your password
512:18 - long
512:19 - best passwords are like sentences not
512:22 - just eight characters but they're like
512:23 - long sentences
512:25 - of stuff that's rather difficult to
512:27 - predict
512:28 - so this is what's stored in the coursera
512:31 - databases some ugly
512:33 - string which is a a cryptographic hash
512:35 - digest of your password so now you log
512:39 - out and and this is gone that's only in
512:42 - your mind
512:43 - and this is sitting in the database
512:45 - so you log in you log back into coursera
512:48 - and you forget your password so you type
512:51 - in
512:52 - pony if you run pony through sha-1
512:56 - you get this as the cryptographic hash
512:58 - of the word pony
513:01 - and you look and you compare
513:03 - and you go nope
513:05 - that is not the right password i don't
513:07 - know what the right password is i can't
513:08 - give you a hint i can't tell you hey you
513:11 - you put shift on your password why don't
513:13 - you try taking that off you know you
513:15 - seem to have caps lock on because it
513:18 - doesn't know whether what your password
513:20 - is but it does know that pony is not
513:23 - your password then what it does
513:27 - right so this is what's stored in the
513:28 - database then you go oh my secretary
513:30 - that's right i use fluffy for my
513:32 - password on coursera so then coursera
513:34 - runs that through sha1
513:36 - it gets the cryptographic hash of the
513:38 - plain text that you entered and then it
513:40 - compares it to the what it has stored as
513:42 - the cryptograph the plain as the as your
513:45 - hashed password and it matches so then
513:48 - it says yay i'll let you back in
513:50 - the fluffy only existed in your mind
513:53 - unless you foolishly like wrote it on a
513:55 - post-it note and stuck it up on your
513:56 - computer which you shouldn't do as well
513:58 - but whatever it was
514:00 - coursera never stored my coursera never
514:03 - stored it coursera only stored this
514:06 - and that again is why coursera can never
514:09 - tell you what your password is or any
514:12 - reasonable site can never tell you what
514:14 - your password is it can only tell you it
514:18 - can only let you change it again which
514:20 - is easy changing it again you just it
514:22 - decides oh it sends you mail you give it
514:24 - a new password and it recomputes a sha
514:25 - one for that one and stores that sha-1
514:27 - so that's why you have to get password
514:30 - resets to happen
514:32 - okay
514:34 - okay so the next thing um that i want to
514:37 - talk about is i want to talk about
514:39 - digital signatures how we can use this
514:42 - for message integrity so we've got the
514:44 - notion of a cryptographic hash which is
514:45 - a calculation takes a large block of
514:47 - text so far we've only used it on small
514:50 - blocks of text okay but now we're going
514:53 - to use it on larger blocks of text where
514:55 - we're going to
514:57 - ensure message integrity which means
514:59 - we're going to figure out if this
515:01 - message actually came from the person we
515:04 - think that it came from okay so we're
515:05 - going to use
515:06 - integrity now i mean in a sense what the
515:09 - system was doing when you were typing in
515:11 - a password was it was ensuring that you
515:13 - were really the person on the other end
515:14 - of the line right hi i'm i'm logging in
515:17 - as dr chuck and here's my password
515:19 - fluffy that's by giving you the password
515:22 - i'm proving that to coursera that i'm
515:24 - really dr chuck so it's a form of
515:26 - integrity right author of
515:28 - identification is form of integrity
515:30 - right it's no different than showing
515:31 - your driver's license says yes this is
515:33 - really me okay but now we're going to do
515:36 - it in a way that we're going to send a
515:37 - message so it's not just a password
515:39 - we're not really solving just the
515:40 - password problem but we're actually
515:42 - going to use it to make sure that the
515:44 - message a came from the right person and
515:46 - b was not modified in transit this is
515:49 - kind of the
515:50 - doctor signing the prescription
515:52 - digitally and then sending you an email
515:54 - with your prescription that you can just
515:55 - print the email and take it take it to
515:57 - your uh take it to your pharmacist
515:59 - so again message integrity when you get
516:02 - a message did it come from who did it
516:04 - come from and do you come from who you
516:06 - really thought it came from or was it
516:08 - altered in transit
516:11 - okay
516:12 - so if you go back to our little example
516:15 - from the christmas story
516:16 - um
516:17 - the message from annie was eat more
516:20 - ovaltine
516:21 - now the question really becomes did it
516:23 - really come from annie
516:25 - right because little orphan annie didn't
516:28 - necessarily
516:29 - say it
516:30 - little orphanage handed the message to
516:32 - somebody else
516:33 - and then they read it
516:35 - so did that person change the message
516:38 - because maybe there was actually a
516:39 - secret message from annie and maybe
516:42 - annie wrote it and it really was an
516:44 - important secret message but then
516:46 - somebody like the advertiser changed it
516:49 - and sent it to you as if and it came
516:51 - from annie so that we're not really
516:53 - worried so much now about the plain text
516:56 - that is the fine plain text the question
516:58 - is
517:00 - did it really come from little orphan
517:01 - annie
517:02 - because we are receiving this from an
517:05 - insecure media
517:07 - like annie's so out here somewhere but
517:09 - annie handed somebody to hand it to
517:11 - somebody and to somebody to send across
517:13 - radio yada yada the question is did the
517:16 - message originally come from annie long
517:18 - long ago
517:20 - handed through many people or not
517:24 - this is again like the seal that you put
517:25 - on with the wax
517:27 - did it really come from that person or
517:30 - not
517:31 - is it really annie just saying yeah this
517:33 - is annie that's too easy you could say
517:35 - eat
517:36 - less ovaltine or or maybe annie wanted
517:39 - to say i hate ovaltine
517:41 - right that's my if but we don't know if
517:43 - annie said eat more ovaltine or not
517:45 - right because all we saw was eat more
517:47 - ovaltine and it seemed to counter manny
517:49 - but we gotta know you gotta know that it
517:51 - came from annie or not okay
517:54 - so
517:55 - simple message signing using uh shared
517:58 - secret and we'll move to a better
518:00 - technique later but we're going to start
518:02 - with a simple technique of shared secret
518:04 - is that we have a shared secret that
518:06 - we're going to use for message signing
518:11 - it'll probably be different than the
518:13 - crypt encryption secret okay so now we
518:16 - get together with annie in a shared room
518:19 - and she tells us what the shift is going
518:22 - to be and then she tells us what our
518:23 - shared signature secret is going to be
518:26 - and then we separate
518:28 - so the technique that you do is before
518:30 - we send the message we concatenate the
518:33 - secret to the message
518:34 - right so
518:36 - eat more ovaltine
518:39 - and then put the secret on the end of
518:40 - the message and then you compute
518:42 - the digest of the message plus the
518:44 - secret concatenated together
518:46 - then you remove the secret from the
518:49 - message and then you send the message
518:51 - plus the digest across the insecure
518:54 - and in my wife's example this was the
518:55 - little
518:56 - signature numbers that came from her
518:58 - doctor
518:59 - was the digest
519:00 - but it was the digest not just of the
519:02 - message but of the message plus the
519:04 - secret
519:06 - the secret didn't come across the
519:07 - message plus the digest came across so
519:09 - let's look at this
519:11 - when we look at how when we receive a
519:13 - message
519:14 - so we receive a message and we see a
519:16 - digest at the end of the message and
519:18 - it's across an insecure transport so we
519:21 - take the digest off the message
519:23 - take the digest off the message and we
519:25 - add the secret back on the message
519:28 - we know the secret annie knows the
519:29 - secret but the people in the middle who
519:31 - transported the mess do not know the
519:32 - secret so it's finally arrived in our
519:35 - location
519:36 - we see the digest we pull that off and
519:38 - hold on to it we add the secret to it we
519:41 - can take the concatenated message plus
519:43 - secret we run it through sha1 we get a
519:46 - digest locally
519:50 - and then
519:51 - we compare that digest to the receive
519:53 - digest
519:54 - and the only way to make the digest
519:56 - match is to know the secret now maybe
519:58 - somebody like
520:00 - made annie tell them the secret which
520:01 - means they could forge the messages but
520:04 - if the secret is not been compromised
520:07 - somehow their only way to create the
520:09 - digest is to know the secret
520:11 - right
520:12 - and so we can compare the received
520:14 - digest to the known uh the the the the
520:17 - known digest that we compute on rn in a
520:19 - secure way because we and annie are the
520:21 - only ones in possession of the secret
520:24 - so here we go
520:25 - so you can play with this on shaw one
520:27 - dot php dr chuck um and so if the
520:30 - message is
520:32 - that annie wants us to send or any wants
520:34 - us to get is eat more ovaltine and the
520:37 - secret is santa
520:38 - so what
520:39 - the what you do is you take the message
520:42 - concatenate the secret
520:44 - and then run that through sha-1 this is
520:46 - all happening in
520:48 - in annie's secure room and she comes up
520:52 - with a digest now i'm not there's it's
520:54 - longer than this but that's just the
520:55 - first uh
520:57 - six characters of it and then what she
520:59 - does is she removes the secret and then
521:02 - concatenates the digest okay
521:04 - and that's what gets sent across the
521:06 - insecure medium it could be many steps
521:08 - could be many people it could be on
521:10 - paper it could be morse code it could be
521:12 - phone call who knows radio
521:14 - but we we just this is the danger right
521:17 - this is we do not know
521:19 - if the message is harmed in any way as
521:22 - it moves across this medium
521:24 - okay
521:25 - so then what we do is we receive the
521:27 - message
521:29 - right we don't know if it's a good
521:31 - message or a bad message
521:33 - so we see that it's a message and it has
521:35 - a digest on the end of the message and
521:38 - we split that out
521:39 - we split the digest out and we hold on
521:42 - to the digest separately okay
521:45 - and now we have the message minus the
521:46 - digest and so then what we do is we add
521:49 - the secret back on because only annie
521:51 - and us know the secret
521:53 - right
521:54 - and
521:56 - annie and us know the secret we all know
521:58 - how to do shot one and so we take this
522:00 - message
522:01 - and we run it through sha1 and we get a
522:03 - digest that we've computed locally this
522:05 - is the receive digest that's the local
522:08 - digest and then we compare
522:10 - and we say
522:12 - this is great
522:14 - that musta came from annie and we know
522:16 - that it came from annie even if it came
522:18 - through a dangerous set of steps and we
522:21 - can't trust any of the people that
522:23 - transported the message we they're all
522:24 - untrustworthy but we know that no matter
522:27 - what happened that originally at that
522:29 - moment
522:31 - annie did this
522:32 - okay annie made this digest because
522:35 - without knowing the word santa there is
522:37 - nothing and this could be like megabytes
522:39 - of data
522:40 - and this is a real tiny you know 40
522:42 - character thing here
522:43 - the digest is small the message is large
522:46 - so you can't go backwards to get it
522:49 - there's no backwards here
522:51 - now if you can steal the secret from
522:53 - annie then all bets are off of course so
522:55 - we we have to assume that annie's okay
522:58 - and that you know annie was not
523:00 - compromised like in james bond movies
523:02 - for example
523:05 - but i was trying to get the secret from
523:06 - the good guy okay so let's go and do
523:09 - this again right
523:11 - so here we go
523:13 - we
523:14 - want to send the eat more oval team
523:16 - and the secret santa and so we do the
523:19 - same thing and we end up with
523:24 - end up with that and then she
523:25 - concatenates it and this is all done you
523:27 - know in annie's bedroom and secret thing
523:30 - and then she sends it okay she sends it
523:33 - to us
523:36 - but
523:37 - a diabolical diabolical courier
523:41 - says
523:43 - i
523:44 - have a thing about ovaltine and i'm
523:45 - going to change them more to less so i'm
523:48 - going to change this message to be eat
523:49 - less ovaltine
523:51 - right
523:52 - so eat less ovaltine bad
523:56 - evil
523:57 - err i don't know how to draw evil i'm a
524:00 - terrible artist
524:01 - can't draw evil
524:04 - so some untrusted courier has changed
524:07 - the word more to less so we see the
524:09 - thing that says and and we don't know
524:11 - right we didn't see the courier they was
524:14 - carrying the box who knows what they did
524:16 - but they changed it we gave us new copy
524:19 - so we receive this message from a
524:20 - untrusted medium there's our untrusted
524:22 - medium
524:23 - and it is our job to decide if we really
524:25 - think it came from annie or not
524:28 - so
524:29 - what we do is just like we did before we
524:32 - break the message and the digest into
524:34 - pieces
524:35 - and then we add the known secret to the
524:37 - end of it
524:38 - right so we've added the known secret to
524:40 - the end of it right here then we run it
524:42 - through the sha-1 calculation and you
524:45 - can take
524:50 - there we go and go ahead and try this if
524:52 - you want you maybe you have this up in a
524:54 - separate window sha one dot php put less
524:57 - ovaltine santa in and you will get
525:00 - a different signature because you change
525:02 - even a single character and sha 1 will
525:04 - give us a different digest that's
525:06 - cryptographic caches in action right
525:09 - even the tiniest change
525:11 - in megabytes of data will change the
525:14 - cryptographic hash
525:15 - that's the beauty of sha-1 and md5 and
525:17 - you know shot 256 and the others there
525:19 - is no match
525:21 - so we know
525:22 - that this
525:24 - message did not either did not come from
525:26 - annie or was modified in transit so we
525:29 - can tell the difference and we do not
525:31 - have to trust
525:33 - the medium
525:34 - right
525:36 - okay
525:37 - so um
525:38 - let's see what got coming up next here
525:41 - okay
525:43 - so here is the encryption technique
525:46 - and let let's just
525:48 - stop and let you do one of these on your
525:50 - own
525:56 - and say that we've got two messages from
525:59 - annie
526:00 - and i want you to stop and i want you to
526:02 - calculate santa is the santa is the
526:05 - secret
526:06 - okay
526:07 - santa is the secret
526:09 - and i want you to tell me
526:11 - if free cookies or free candy actually
526:14 - came from annie or not one of them is a
526:16 - valid message from annie
526:18 - and the other is not a valid message
526:20 - from annie okay
526:22 - so i want you to take a moment
526:24 - use the sha-1 calculator and i want you
526:27 - to try to figure out which of these is
526:29 - valid and which of these is not valid
526:32 - okay
526:33 - give you a minute
526:40 - okay
526:41 - one last chance before we do the reveal
526:44 - okay here we go
526:46 - so
526:48 - here comes a message from uh insecure
526:50 - medium free cookies
526:54 - with that as the message digest we
526:58 - and we got the other one free candy with
526:59 - that is the message digest
527:02 - so what we do is we take and
527:05 - take off the digest and add the word
527:07 - santa
527:08 - to each one
527:10 - and then we run the sha one on each one
527:14 - and then we get the two shah ones
527:17 - here's the one and here's the two
527:20 - and then what we do most importantly
527:23 - is we compare them with the received
527:26 - sha-1
527:27 - and when you compare them with the
527:28 - receive sha-1 or the received message
527:30 - digest or the receive message signature
527:32 - you see right away
527:34 - that one is good and one is bad it's as
527:37 - simple as that
527:38 - right one of these is good and one of
527:41 - these is bad
527:43 - so digital signatures are are actually
527:45 - really surprisingly simple and
527:47 - surprisingly easy to do without a lot of
527:50 - complex technology the only complex
527:52 - technology in here is really the the
527:54 - clever mathematics that makes these
527:56 - cryptographic hashes work effectively
527:58 - it the simple concatenation of a secret
528:01 - now you want your secrets to be kind of
528:02 - longer than this and more random than
528:04 - that but ultimately the notion of a
528:07 - digital signature is actually a simple
528:09 - and and rather elegant and beautiful
528:11 - notion that really leverages this notion
528:13 - of cryptographic hashes in a really cool
528:16 - manner so
528:18 - that kind of sums up our first half
528:21 - lecture where we really talk more about
528:24 - the techniques of
528:25 - both integrity and confidentiality
528:28 - but we've done it all with share a
528:30 - secret key right where we have the same
528:32 - key we have a moment
528:34 - where we're together in a secure manner
528:36 - and we exchange the code book whether
528:38 - it's annie or
528:39 - or the caesar or whatever where we know
528:41 - what the shift is right so every pair of
528:44 - communicating people or systems needs us
528:47 - a key
528:48 - now in the internet with everybody
528:50 - buying from everybody else and using
528:52 - credit cards it's just not practical you
528:55 - just could not have a secret key for
528:57 - amazon
528:59 - i guess it kind of works for the
529:00 - password now let's do it we'll get to
529:02 - that in a second and the password
529:03 - doesn't solve everything
529:05 - because then you would have to actually
529:06 - visit amazon to get your password set up
529:08 - and so the problem is is you you we have
529:10 - to use an insecure medium to establish
529:13 - the first
529:14 - secret as it were
529:16 - and so it just was never going to work
529:19 - so we need a different approach for the
529:20 - internet and that's we're going to talk
529:22 - about in the next lecture okay
529:25 - see you then
529:26 - so welcome to our lecture on public key
529:28 - encryption where we're going to go back
529:30 - to uh confidentiality
529:32 - and so
529:34 - so here we go if if you recall we've
529:36 - been having these two topics that have
529:38 - been our theme throughout uh just some
529:41 - grizzle
529:42 - oh sorry i'm starting to
529:44 - talk in row 13. let's translate this
529:46 - back to uh non-row 13. uh the
529:50 - terminology the two kind of themes we've
529:51 - been following over the last couple of
529:53 - lectures in this lecture are
529:55 - confidentiality and integrity and
529:57 - confidentiality
529:59 - is hiding right shielding information
530:02 - not leaking information to people that
530:03 - you don't want to show it to
530:05 - and integrity is making sure that you
530:07 - know who you're dealing with and then
530:08 - the previous lecture we really talked
530:10 - about kind of real light approachable
530:13 - ways of ensuring confidentiality with
530:15 - things like caesar cipher and then
530:17 - integrity using a simple message digest
530:20 - that based on a shared secret so the
530:22 - problem with all of those things that we
530:24 - just saw is that they require a shared
530:27 - secret and the problem in the world of
530:29 - the internet is it's just really
530:31 - difficult for every one of us before we
530:34 - establish um
530:37 - we before we can make any uh
530:40 - purchases or whatever at amazon that we
530:42 - somehow have to drive to amazon
530:44 - headquarters and
530:46 - and get a shared secret from amazon
530:48 - they'll open up a book and say okay
530:51 - hi chuck i see who you are and here's
530:53 - our shared secret and you walk away and
530:55 - as long as you carry that shared secret
530:57 - away you go and if the shared secret is
530:59 - lost it's uh difficult to revoke so as
531:02 - the internet and and frankly in general
531:04 - as uh security needed to be
531:07 - able to work at arm's length meaning
531:10 - that you couldn't always bring everybody
531:12 - together and hand out shared secrets and
531:14 - then have them go to the far reaches of
531:15 - the world and communicate
531:17 - public key encryption was identified
531:20 - as a extremely elegant solution to this
531:23 - problem
531:24 - and so it was proposed by uh diffie and
531:26 - hellman in 1976
531:29 - and it relies on two keys it's
531:31 - asymmetric meaning we're not using the
531:33 - same key to encrypt as decrypt the way
531:35 - we were in the previous lectures these
531:37 - are asymmetric there is a public key
531:39 - which is actually
531:41 - does not need any protection whatsoever
531:43 - in a private key and the idea is they're
531:45 - generated inside of a computer you
531:47 - generate the public key in the private
531:48 - key you send out the public key the
531:50 - public key is used to do the encryption
531:52 - and then private key is used to do the
531:54 - decryption and they're related
531:55 - mathematically in a way that's well
531:58 - understood
531:59 - but difficult to compute for a key
532:01 - length that's large enough so there's a
532:03 - public key and a private key
532:05 - so i'd like to you to take a look at
532:07 - this little video up on youtube of uh
532:10 - diffie hellman and merkel the the
532:12 - inventors of this
532:14 - and i think it's a great video um i
532:16 - would
532:17 - love it if this were my video but i
532:19 - didn't produce this video so uh so take
532:21 - a quick look
532:28 - so one of the things about this
532:30 - public private key encryption is now
532:32 - that we know about it it's like whoa
532:34 - it's pretty obvious and frankly
532:36 - caesar and the germans and everybody
532:37 - could have used this idea they just
532:39 - hadn't thought of it yet and the other
532:41 - thing that's kind of interesting if you
532:42 - look into the story of this is that
532:45 - the first reaction people got when they
532:47 - start thinking about this is like it
532:49 - can't be this easy no it's sort of both
532:51 - easy and hard but but the concept is
532:54 - real elegant and really beautiful and
532:56 - that is that we have this public key so
532:58 - the public key is part of a public
533:00 - private pair and it's used to do the
533:02 - encryption the beautiful beauty is it's
533:04 - computationally difficult to recover
533:06 - that private key from the public key and
533:09 - the encrypted text a key thing is it's
533:12 - not impossible
533:13 - and that's kind of one of the
533:14 - interesting
533:16 - philosophies of security that that we
533:18 - started at the very beginning talking
533:20 - about security the perfect security is
533:22 - kind of impossible to achieve unless you
533:24 - simply
533:25 - don't send anything
533:27 - and so
533:29 - public private key asymmetric keys is
533:31 - well understood as to how you would
533:33 - break it everyone knows how to break it
533:35 - the problem is is that computers aren't
533:37 - fast enough to break it and when
533:39 - computers get faster we'll just make the
533:41 - keys bigger so the mathematics of this
533:43 - makes it impractical to break i mean
533:46 - literally in practical break
533:48 - now i think we can safely assume that
533:50 - governments probably have enough
533:52 - computation to crack these once in a
533:55 - great while i mean if they're not
533:56 - cracking every transaction between you
533:58 - and target when you want to buy
534:00 - something but if they really have to
534:02 - they can record the encrypted
534:04 - transmissions and if they really had to
534:06 - it took a long time i have no idea how
534:08 - long it would be
534:09 - they can break it so that's actually
534:11 - kind of a
534:12 - neat way to think about this by
534:14 - revealing it all
534:16 - frankly any computer scientist could
534:18 - make
534:19 - a name for them their whole life if they
534:21 - proved that there was something wrong
534:23 - with this by revealing the algorithm
534:25 - revealing the cracking technique if
534:27 - someone can come up with a better
534:28 - cracking technique it is like
534:30 - fame and glory forever which means that
534:33 - we're pretty sure that there's no good
534:35 - way to crack this other than the brute
534:37 - force mechanism that requires a large
534:39 - amount of computation
534:41 - so
534:43 - if you're going to use
534:45 - public private key encryption you have
534:47 - to generate a pair
534:49 - and it starts by charging
534:51 - choosing two really large random numbers
534:55 - with
534:55 - hundreds if not thousands of digits that
534:58 - are prime
534:59 - so you kind of choose a choose a random
535:02 - number really big and then you kind of
535:03 - look around for a nearby prime number
535:05 - and you choose two of those and then you
535:07 - multiply them
535:09 - okay getting an even larger number
535:12 - and then
535:13 - through some steps through some
535:14 - calculations you compute the public and
535:16 - the private keys from that large number
535:19 - the essence of this are those two prime
535:21 - numbers prime numbers of course are
535:22 - numbers that you only divide by
535:24 - themselves in one which means they have
535:25 - no factors which means they're kind of
535:27 - like looking for a needle in a haystack
535:29 - and so the public and private key is
535:31 - really based on these two prime numbers
535:33 - if you could figure out what the prime
535:35 - numbers were
535:37 - you'd be okay but the computational
535:39 - difficulties finding the prime numbers
535:40 - that are extremely large and finding the
535:43 - right prime numbers that are extremely
535:44 - large
535:45 - so it's easy to do some calculations in
535:47 - one direction but not in other so for
535:50 - example what are the factors of fifty
535:52 - five million one hundred twenty four
535:53 - thousand one hundred and fifty nine
535:56 - quick
535:57 - but if i simply ask you what do you
535:59 - multiply
536:01 - 70
536:02 - 919 to get that 55 million number
536:05 - that's easy you do a division and it
536:08 - turns out that you can find out
536:10 - 69 61 really easy right so if i just say
536:15 - what are these two numbers
536:17 - that's hard
536:19 - if i say given this number what's the
536:22 - other number that's trivial so you can
536:24 - think of this as
536:26 - the decryption is where the receiver of
536:29 - the message knows kind of half of the
536:30 - calculation whereas the world doesn't
536:33 - know either half of it doesn't know the
536:34 - calculation so it has to figure out both
536:37 - halves whereas the receiver only has to
536:38 - figure out one half and so that's how
536:41 - asking the question of what are the
536:43 - factors
536:44 - versus given one what's the other so it
536:47 - takes a problem that's easy makes it
536:49 - computationally nearly impossible but
536:51 - again not impossible just nearly
536:53 - impossible
536:56 - okay so here's the notion so you're
536:58 - about to type your visa card into
537:00 - uh a credit card into like amazon's web
537:04 - page
537:04 - and so what happens is is that amazon
537:07 - will has a public key and a private key
537:10 - that they retain and they will send you
537:12 - the public key across a medium the
537:14 - internet they're going to send this to
537:15 - you
537:16 - somehow
537:18 - but
537:19 - the bad guys eve or charlie or whoever
537:22 - they are
537:24 - the bad guys
537:26 - this is
537:27 - alice and bob
537:29 - and eve and charlie are always looking
537:31 - so even charlie kids intercept it and
537:33 - you assume that they can this is the key
537:35 - don't don't try to pretend they can't
537:37 - even though it's very difficult for them
537:38 - to do it but you assume they can so the
537:40 - public key comes across it is simply
537:43 - sent to you as part of the beginning of
537:46 - establishing a cert secure connection
537:48 - and the bad guys see it too
537:51 - or gals
537:52 - they see it too so the public key comes
537:54 - to you
537:55 - and then what you do is you encrypt
537:58 - using that public key
538:00 - and create some encrypted text
538:02 - ciphertext which you then send back
538:05 - across the danger where eve and charlie
538:08 - are watching and it comes across they
538:10 - intercept the encrypted text they've
538:12 - intercepted the public key and they they
538:16 - can try as hard as they like with super
538:19 - computers to derive this and frankly
538:21 - like i said if they had months and
538:23 - months and months and really fast
538:24 - computers they could
538:26 - okay
538:27 - but because amazon is in sole possession
538:30 - the private key and it never left amazon
538:32 - servers it is a very simple matter for
538:35 - amazon to decrypt and get your plaintext
538:37 - it happens very quickly just like if you
538:40 - kind of know half of the prime number
538:42 - calculation figuring out the other prime
538:43 - number is really really easy okay so
538:47 - so again these people see all this
538:49 - information and yet is computationally
538:52 - virtually impossible for all practical
538:54 - purposes to do it and so it's beautiful
538:57 - because
538:58 - there was no need to protect the public
538:59 - key we never had to get in the same room
539:01 - and away it goes so you just amazon just
539:04 - blasts out its public key and we encrypt
539:06 - using amazon's public key we can't
539:09 - decrypt it but we don't need to decrypt
539:11 - it all we need to do is send it to
539:13 - amazon and voila it works so the
539:16 - beautiful thing is is the public keys
539:18 - can be distributed they can be
539:20 - intercepted and it does not matter
539:23 - so
539:25 - with this notion of public private key
539:28 - encryption in general we made a change
539:31 - to http
539:34 - a layer a mini layer is in the data
539:37 - model if you remember way back perhaps
539:39 - you even forgotten about the layered
539:41 - model remember that layered model
539:43 - application transport internet
539:47 - remember this is sort of one computer
539:49 - and this is the other computer
539:51 - these are the routers
539:53 - routers these are the hops
539:55 - there's like 15 of these remember
539:57 - remember all this
539:58 - so it comes back not on us
540:00 - okay so if you recall
540:03 - just sort of to briefly remember the the
540:06 - transport layer is responsible for the
540:08 - re-transmission it gives us the
540:10 - appearance of a reliable
540:12 - ordered connection between the our
540:14 - application and the far application
540:17 - uh http is one of the application
540:20 - protocols
540:21 - um and so there is a little mini layer
540:24 - that that is layered in sort of
540:26 - seamlessly
540:27 - on top of the transport layer
540:30 - that basically takes plain text and
540:32 - encrypts it and turns it into ciphertext
540:35 - and then ciphertext on the way out and
540:37 - turns it back into plain text okay
540:40 - and so what happens is these
540:42 - applications just send plain text and
540:44 - out comes plain text and there's a
540:46 - little bit of extra glue in the middle
540:48 - here that's sort of a secure transport
540:51 - secure sockets layer this is this thing
540:53 - here is often called a socket oop sock
540:57 - yeah it'd be good if i could spell
540:58 - socket so this is a socket and then the
541:01 - red part is a secure socket
541:04 - so the applications kind of don't
541:06 - encrypt the data at all there is a
541:08 - library that encrypts it and the other
541:10 - thing is is that all the rest of the
541:12 - internet the internet the link layer the
541:14 - routers
541:15 - nothing the ethernet the fiber they
541:18 - don't even know the difference between
541:20 - encrypted text and non-encrypted text
541:22 - because the encrypted text wanders
541:24 - around fully encrypted
541:26 - addresses are not encrypted and so it
541:28 - stays encrypted all the way through the
541:30 - entire network
541:32 - it actually if you then think about the
541:34 - fact that
541:36 - this is the moment that it leaves your
541:38 - computer
541:39 - the only thing so the plain text comes
541:41 - in here gets encrypted here encrypted
541:43 - comes down the only thing that leaves
541:45 - your computer is encrypted text and it
541:48 - makes it all the way across the
541:49 - encrypted text goes into amazon so this
541:51 - is amazon
541:53 - this is you
541:55 - the encrypted text
541:56 - finds its way through all these things
541:59 - and it comes in encrypted and it
542:01 - actually doesn't get encrypted until
542:04 - it's sort of right at the point where
542:06 - amazon's web server that's going to
542:08 - actually charge a credit card so this is
542:10 - actually beautifully elegant in that
542:14 - the rest of the network is blissfully
542:16 - unaware
542:19 - that any encryption is happening it's
542:21 - just moving the data so this did not
542:23 - require any change again the beauty of a
542:25 - layered architecture did not require any
542:27 - change sort of below the transport layer
542:29 - and as a matter of fact all of the
542:30 - sequencing and re-transmission that
542:32 - happens in the tcp layer that happens
542:34 - with the encrypted stuff too because
542:36 - it's just
542:37 - encrypted it's just text it's gibberish
542:40 - text it's not the original visa card
542:42 - number that you're sending you're
542:43 - sending one two three and out comes you
542:45 - know w x y
542:47 - the w x y just goes it's retransmitted
542:49 - all this crap just works it's like
542:53 - beautiful it's a beautiful thing it's
542:54 - absolutely beautiful thing
542:57 - and it's just like this mini layer kind
542:59 - of between the app it's like the top
543:01 - slice of the transport layer that's how
543:03 - i'm drawing it right here it's like this
543:04 - little kind of top extra little thing
543:06 - says you know what we're going to
543:07 - transport but actually help me out and
543:09 - give me some encryption while we're at
543:11 - it and there's all kinds of cool stuff
543:13 - that goes back and forth the public and
543:14 - private keys get exchanged that's all
543:16 - kind of stuff we don't worry about we
543:18 - just send data and get data back
543:21 - pretty cool huh
543:23 - so
543:24 - this really solves the problem
543:26 - of the fact that we basically should
543:28 - assume that everything between our
543:31 - computer and the destination computer
543:34 - this is you
543:36 - this is amazon
543:38 - right everything here this is all
543:40 - dangerous there's some like terrifyingly
543:43 - scary individual that's watching
543:45 - everything doing packet sniffing this
543:48 - might be eve the eavesdropper
543:50 - this looks like a little he he looks
543:52 - pretty tough right and and so that even
543:55 - the wireless right this is the wi-fi
543:57 - connection the wi-fi is dangerous now
544:00 - the reality is is these things aren't
544:01 - all that dangerous the wi-fi is probably
544:03 - the weakest link of this whole thing but
544:05 - we have to assume that it's dangerous
544:07 - right we we want to assume that the only
544:09 - thing that's safe and unfortunately if
544:12 - you put viruses in your computer then
544:14 - they can get it the plain text if amazon
544:16 - loses its data somehow then they get the
544:19 - plain text right but but basically you
544:22 - know we want to distrust
544:24 - all of this
544:26 - okay so this concept is called
544:29 - transport layer security also called ssl
544:33 - also known as https
544:36 - http
544:38 - for secure
544:40 - and it's kind of like between the tcp
544:42 - layer and the application layer or the
544:43 - top half the tcp layers the way i like
544:45 - to think about it
544:47 - it's because it's based on public
544:49 - private key encryption it's
544:51 - difficult but not impossible
544:53 - normal people
544:54 - don't have the kind of equipment to
544:56 - break it and even governments
544:59 - if they can break it i don't even know
545:00 - i'm not an expert i don't hang out with
545:02 - the government so i don't really know
545:04 - but assume that if they really put their
545:07 - mind to it in a very narrow situation
545:10 - if you become really interesting they
545:12 - will find your credit cards probably
545:13 - there's easier ways to get your credit
545:15 - cards than by decrypting your text so
545:18 - it's
545:19 - hard to decrypt
545:22 - and as i mentioned because of the
545:24 - layered architecture the tcp layer ip
545:26 - and link layers are completely unaware
545:31 - so you'll you you see this in the form
545:34 - of urls that start with https
545:38 - right they start with https
545:42 - www.facebook.com versus http and there
545:45 - was a time a few years back where
545:48 - you know they were it used to be a
545:50 - little more expensive inside of the
545:52 - servers to do https that still is
545:55 - and so some sites would try to do some
545:58 - of their activity without using secure
546:00 - protocols and others would use uh
546:04 - use non-secure and secure and then flip
546:06 - you back and forth like if you're typing
546:07 - your password the problem was is that
546:09 - there was actually still sensitive data
546:11 - being sent even across the insecure and
546:13 - there was a quite a famous uh
546:17 - thing where people could install a
546:18 - firefox plug-in and watch facebook
546:21 - non-secure facebook things go back and
546:23 - forth
546:24 - across like a starbucks and it would
546:26 - just show you all the people's facebook
546:28 - accounts and you could log in as them
546:30 - and post as them and so you've seen a
546:32 - situation where companies are just
546:34 - starting to use https for everything you
546:37 - as a user have to be aware to see if
546:40 - you're typing anything sensitive never
546:42 - type it into a url
546:44 - that doesn't say https okay never do
546:47 - that you're typing password uh credit
546:50 - card number any kind of personal
546:51 - information
546:52 - make sure you're doing https and make
546:55 - sure that
546:57 - that you know what it is we'll talk
546:58 - about that uh in a bit we'll talk a
547:00 - little bit more about that in a bit so
547:02 - so if we take a look and we think about
547:04 - where the bad guys are at the bad guys
547:06 - are kind of everything
547:08 - and this secure tcp
547:10 - runs is the one part of the layer of
547:13 - architecture that runs from within your
547:16 - laptop to within the server and so then
547:19 - if we kind of assume the worst
547:21 - the the the backbone is pretty safe the
547:24 - wi-fi is probably the most dangerous
547:26 - right
547:27 - but when we do secure system tcp
547:30 - secure
547:32 - system to system tcp we are doing the
547:34 - encryption
547:35 - right here inside your computer before
547:37 - it leaves and we're only doing the
547:39 - decryption right when it comes back in
547:41 - the computer so the decryption and
547:42 - encryption are happening inside of
547:44 - amazon's computer and inside of your
547:46 - computer and nothing else so secure
547:49 - sockets is pretty good now the place
547:52 - where you're still danger
547:54 - is there might be a virus that's
547:56 - watching your keystrokes right this is
547:57 - why virus checking is so important
547:59 - because at some point you're typing it
548:01 - into your computer and the greatest
548:03 - danger you have to losing your data is
548:06 - really two things one that you've got a
548:09 - virus or b
548:11 - somebody has redirected you
548:13 - not to talk to evil amazon instead of
548:16 - amazon and that's what we'll talk about
548:19 - in the next lecture
548:21 - how to know
548:22 - how does these browsers really know
548:23 - they're talking to the real amazon and
548:25 - that is not confidentiality
548:28 - confidentiality is stopping the bad guy
548:30 - from seeing what you're sending
548:32 - as their eavesdropping eve
548:35 - is eavesdropping
548:36 - okay
548:37 - now the next thing is the question of is
548:40 - this the real amazon or is this a fake
548:42 - amazon so we'll talk about that next
548:50 - [Music]
548:56 - so now we have a way
548:58 - to ensure the confidentiality using
549:00 - secure socket layer and public private
549:03 - key encryption
549:04 - and the only question now remaining
549:06 - is who are we talking to and are we
549:09 - talking to that server that we think
549:11 - we're talking to are we really talking
549:13 - to amazon are we talking to coursera
549:16 - how do we know now you'll notice if you
549:19 - take a look at the top of your browser
549:21 - perhaps right now even you can take a
549:23 - look at the top of your browser and
549:24 - usually when it's indicating that you
549:25 - have a secure connection you can click
549:27 - on this and see some information it's
549:30 - called the certificate information
549:32 - okay
549:34 - and so
549:34 - https has the notion of a public key we
549:39 - retrieve the public key when we make the
549:40 - connection but there are two kinds of
549:42 - keys there are
549:44 - public keys that are just made up that
549:47 - are sent to us and then there are public
549:49 - keys that are signed and validated by a
549:51 - third-party certification authority so
549:54 - this is a coursera
549:56 - and it is certified by godaddy
549:58 - certification authority so it's not just
550:00 - that we're getting the certificate from
550:02 - coursera we're actually getting the
550:04 - certificate
550:05 - signed
550:06 - by godaddy the godaddy has
550:08 - has
550:09 - has got checked the id of coursera
550:13 - said okay you must be the ceo of
550:14 - coursera or i'm not going to give you
550:16 - this sign signed private key so it's a
550:19 - it's a process to get private keys
550:21 - signed and it's a way to make sure you
550:24 - are talking to who you think you're
550:26 - talking to so this is called
550:29 - digital certificates
550:31 - also known as sort of signed private
550:34 - keys now if we go back and we talk about
550:36 - the integrity right we want to know who
550:39 - we're talking about and so we had this
550:41 - notion of a signature a signature is a
550:43 - way that you know that you're talking to
550:45 - who you're talking to so for example
550:48 - like if a guy comes to your office
550:50 - and says hi i'm dr chuck got like a
550:54 - beard and some white hair you can say
550:56 - hey if you're really dr chuck show me
550:58 - your tattoo and now you'll know
551:00 - that
551:01 - very few people will also look like this
551:04 - and have this tattoo right so this is my
551:07 - private key and this is my
551:09 - signature of my private key this is like
551:11 - my message digest so so people won't
551:14 - have this tattoo if they claim to be dr
551:15 - chuck so this is dr chuck this is my
551:18 - message digest
551:21 - so there's a difference between a
551:23 - private key and a private key that's
551:24 - been certified by one of these
551:27 - designated third parties these
551:29 - designated third parties are called
551:31 - certificate authorities
551:34 - now you could say i'm a certificate
551:36 - authority well some certificate
551:37 - authorities are more
551:39 - better certificate authorities than
551:41 - others okay so they're a trusted third
551:43 - party
551:45 - and so
551:46 - how did they start well
551:48 - some are more trusted than others and
551:50 - the more we trust them they kind of all
551:52 - work out so it's not everybody you can't
551:54 - become a trusted authority
551:56 - so
551:57 - one of the many trusted authorities and
552:00 - one of the oldest ones and one of the
552:01 - more popular ones and one of the more
552:03 - expensive ones
552:04 - it's pretty expensive to get your
552:06 - certificate signed it can be as
552:08 - inexpensive as a couple hundred dollars
552:09 - it can be thousands of dollars to get a
552:11 - certificate signed
552:13 - and verisign is one of the oldest and
552:16 - most well respected of these certificate
552:18 - authorities so the idea is is that
552:22 - i have this website called
552:24 - online.drchuck.com where i
552:26 - teach python classes and do various
552:28 - other things and i wanted a secure
552:29 - certificate because i would be handling
552:31 - people's data and i wanted to to be
552:33 - respectable and have a secure
552:34 - certificate
552:37 - so i had a public and a private key and
552:39 - then i sent it to a certificate
552:41 - authority i paid them money and then
552:43 - they send me back a signed private key
552:46 - okay so this is uh now now you might say
552:49 - oh this is kind of evil or this is
552:51 - really expensive because all they really
552:52 - are doing is like changing a few bits in
552:54 - the in my private key you're adding a
552:56 - few bits to my private key
552:58 - but they have a lot of responsibility
553:00 - and the good ones have a lot of
553:01 - credibility so they don't want to lose
553:04 - information they got to spend some time
553:06 - validating identity saying okay are you
553:09 - really
553:10 - the owner of doctorchuck.com they're not
553:12 - going to hand the certificate assigned
553:14 - certificate for drchuck.com to anybody
553:17 - except the true owner and so they spend
553:19 - some time checking to make sure that
553:21 - it's the true owner and they they do
553:22 - this by looking at the registration data
553:24 - on doctortruck.com et cetera et cetera
553:26 - et cetera and so there is a cost of
553:29 - verifying all this identity
553:32 - kind of like the signature track on
553:33 - coursera
553:35 - and that's kind of what's going on on
553:36 - the signature track of coursera there's
553:38 - a difference between a certificate
553:41 - and a certificate that corsair is going
553:42 - to assert that we have verified the
553:45 - identity and the cost is in the
553:46 - verification of the identity so
553:48 - certificate authorities are
553:50 - charging amazon
553:52 - but then ensuring that they don't
553:54 - mistakenly give the amazon.com
553:56 - certificate to a random bad guy because
553:59 - if they did
554:00 - that bad guy could pretend to be
554:02 - amazon.com
554:04 - so then you might ask
554:06 - who decides which of these certificate
554:09 - authorities to trust we use the
554:10 - certificate authorities to decide
554:12 - whether or not to trust amazon.com or
554:14 - coursera.org or doctorchuck.com or
554:17 - whatever how do we
554:20 - decide which of the certificate
554:22 - authorities we're going to trust well it
554:24 - turns out that apple microsoft and linux
554:27 - and other operating system vendors
554:30 - pre-install at the moment that you're
554:32 - either purchasing your computer or
554:34 - installing your operating system part of
554:36 - that operating system is actually a list
554:39 - of the public keys
554:41 - of the chosen certificate authority so
554:44 - if you look deep enough inside your
554:46 - computer this is my mac
554:47 - you can see the companies that have been
554:50 - included
554:52 - by apple as the manufacturer of the
554:54 - operating system and so you see that
554:56 - verisign is one of those companies that
554:59 - has been pre-included in apple macintosh
555:02 - which means that a certificate from
555:05 - verisign
555:06 - is going to be known right so let's so
555:09 - let's look a little bit more so so these
555:11 - come your browsers and your operating
555:13 - systems come with
555:15 - pre-built in public key certificates for
555:18 - certain certificate authorities
555:20 - like verison
555:22 - now that's a lot of trust that apple
555:24 - microsoft and linux have placed in
555:26 - verisign and that's because over the
555:28 - years verizon has earned that trust
555:30 - that says verisign doesn't just give out
555:33 - certificates without checking right if
555:35 - the verisign gave out an amazon.com
555:37 - certificate to somebody without checking
555:40 - they would lose a lot of credibility and
555:41 - then microsoft would like take them out
555:43 - right say well verisign seems to be kind
555:45 - of sleazy they seem not to be able to to
555:47 - handle their security but you know they
555:50 - have and so they remain in there and so
555:52 - we it's kind of a an interesting thing
555:54 - where they are motivated to keep their
555:55 - security high they're motivated to do a
555:58 - good job because the moment that they
556:00 - sort of fail they lose a lot of
556:02 - credibility and respect and their value
556:03 - of verisign brand and is all of the
556:06 - respect that we have for verisign
556:09 - so
556:10 - so
556:14 - so we mentioned public private key
556:15 - encryption we have the public key that
556:17 - goes across
556:19 - and i'm about to type my credit card in
556:21 - and so the problem now that we're going
556:22 - to solve is
556:24 - uh is this really amazon's key is it
556:27 - really amazon's public key i mean i got
556:29 - a public key from across this connection
556:31 - i made to a server and it claims that
556:33 - it's amazon.com but
556:36 - do i believe that it says it's
556:37 - amazon.com and so that's the integrity
556:39 - thing that's the security that's the do
556:41 - i believe it is it really got the uh
556:44 - verisign tattoo
556:45 - in addition to the amazon.com that's it
556:48 - represents that it's amazon.com public
556:50 - key
556:51 - so we can also use public keys to do
556:53 - signing and
556:55 - and basically verisign has a public and
556:58 - private key for verisign the public key
557:00 - for verisign is sitting in your browser
557:02 - right now
557:03 - and they use they do an encryption much
557:06 - like the message digest they do an
557:08 - encryption of amazon's certificate and
557:11 - then sort of create a digest and then
557:13 - add that digest to it so a certificate
557:16 - says i'm amazon.com and later it says oh
557:19 - yes and verisign signed this with
557:21 - verisign's private key
557:23 - okay so verisign's private key is used
557:26 - to sign amazon this is probably easiest
557:29 - if i just show you sort of a video
557:32 - wait ooh going the wrong way am i going
557:33 - the wrong way
557:36 - what's going on here how come i'm going
557:37 - the wrong way
557:39 - yeah i'm going the wrong way okay so
557:41 - here we go going backwards so here's how
557:43 - it works
557:45 - um
557:46 - this is how amazon gets a public key
557:49 - signed by
557:50 - uh verison
557:51 - right so
557:53 - in the beginning verisign makes a public
557:55 - and a private key
557:57 - somewhere in a bunker
557:59 - and they store the private key and
558:01 - they'll you can sometimes read up on how
558:04 - many how much effort they go to storing
558:06 - the private key and then they hand the
558:09 - public key
558:10 - to apple
558:13 - microsoft
558:14 - and linux
558:16 - and then they bundle that in with your
558:18 - laptop so your laptop that you buy you
558:20 - walk out
558:21 - and you have a laptop and it's got
558:23 - public keys in it
558:25 - from the vendor now amazon
558:28 - says you know what i'd like to do some
558:30 - commerce and i would like to be able to
558:33 - use ssl and us and have a certified
558:37 - private key
558:38 - so then what amazon does
558:41 - is amazon inside of its servers
558:44 - generates a pair a public private key
558:47 - pair
558:48 - so this private key is not leaving
558:50 - amazon servers it's it takes a while it
558:53 - takes minutes sometimes to generate
558:55 - the right random sufficiently random
558:57 - public and private key
558:59 - by looking at all the large prime
559:02 - numbers and then picking one and then
559:03 - bang making a public and private key
559:05 - then what amazon does at that point
559:08 - is it transports its public key to
559:11 - verizon now during that transport it
559:14 - might eve might have seen it but it's
559:16 - okay because it's just it's just a
559:18 - public key
559:19 - right so it's just the public key and so
559:22 - it actually can be sent across the
559:23 - internet and it's most commonly sent
559:25 - across the internet like when i got the
559:27 - online.doctorchuck.com certificates we
559:29 - just typed it in and sent it because
559:32 - if you get a hold of the public key all
559:34 - it means is you can encrypt it doesn't
559:35 - mean you can decrypt so then what
559:37 - happens is
559:38 - inside of verizon's servers
559:42 - verizon computes a message digest using
559:45 - its public it's private key
559:48 - right and then it adds basically a
559:51 - signature
559:52 - that says oh
559:55 - here's amazon's public key that i
559:56 - received from amazon verified the
559:58 - identity of the person and now i have
560:01 - signed it mr ver verisign i've signed it
560:04 - and that of course is just like message
560:06 - digest like information that is appended
560:09 - to the bits
560:11 - of the public key
560:13 - then that public key with signature
560:16 - is sent back
560:19 - bundled together and sent back to amazon
560:22 - and now amazon has not just any old
560:24 - public key it has a public key that says
560:27 - i am amazon.com and verisign is now
560:30 - asserting that i am really who i am
560:35 - and
560:36 - and
560:38 - again
560:39 - so eve saw that one
560:41 - who cares
560:42 - it's just a public key
560:44 - there's nothing about the verisign
560:46 - private key it never left the verisign
560:48 - servers the signature is public
560:49 - information you can use the verisign
560:53 - public key to verify that the signature
560:55 - is right
560:56 - but you can't forge the signature
560:59 - so eve can look at that eve could look
561:00 - going this way eve can look that way eve
561:03 - gets nothing
561:05 - he gets nothing so
561:07 - amazon now has a signed
561:10 - and certified private key
561:13 - then what happens
561:15 - is
561:17 - sooner or later
561:18 - many hours many days many months later
561:21 - you decide on your laptop remember this
561:24 - is you oops this is you
561:28 - you want to buy some shoes
561:30 - so you connect to amazon.com
561:33 - with your browser with an https
561:35 - connection
561:36 - and then what happens is
561:40 - amazon sends you its public key and eve
561:44 - of course is eavesdropping all the time
561:46 - eve sees it goes by
561:48 - it's worthless right it's worthless
561:52 - because it's just the encryption key
561:54 - it's not the decryption key the fact
561:56 - that it's signed it sees that but it
561:57 - can't do anything with that information
562:00 - now
562:01 - within your laptop
562:04 - within your laptop
562:06 - you have
562:07 - from the vendor
562:09 - the verisign public key
562:12 - from macintosh or apple or whatever so
562:15 - you can look with this quebec you can
562:18 - look with this public key at that
562:20 - signature and just like we did with the
562:22 - message digest before you can go yep
562:25 - that's good
562:27 - that really had to have been signed by
562:28 - verison and if you're if your computer's
562:31 - really conservative it can actually go
562:32 - check with verisign can send it up and
562:34 - say hey did you verify this and then
562:37 - verisign can verify it too but you
562:38 - actually don't need to connect because
562:40 - you have the public key the only way
562:41 - that the the you know whatever that
562:44 - message digest could be right would be
562:46 - is if verisign private key was used to
562:49 - generate the message digest just like we
562:51 - used to do santa in the other one okay
562:54 - the sand is just really simple but it's
562:55 - the same basic mechanism this
562:58 - is verifiable
563:00 - that it came from this private key now
563:02 - if somebody broke in and stole the
563:04 - private key that's a different story but
563:06 - if the private key is safe and secure
563:09 - hasn't been compromised the only way to
563:11 - generate that message digest is be in
563:13 - possession of the private key so now you
563:15 - are in a position
563:17 - where you are in a good mood right
563:20 - you see an https you can pop that little
563:23 - thing and say that was signed by
563:25 - verisign you can be assured that
563:27 - verisign is asserting that that key came
563:29 - really that public key came from amazon
563:31 - and now is time
563:33 - to encrypt
563:35 - your visa card
563:37 - and send it over an encrypted connection
563:40 - to amazon
563:42 - okay because you won't send your
563:43 - encrypted thing your your you won't send
563:46 - it unless you believe that the https is
563:48 - proper and your browser will pop up a
563:50 - little pop-up and say wait a sec this
563:52 - certificate looks a little funky
563:54 - claims to be from amazon.com but it's
563:56 - not signed by one of the signatures that
563:57 - i believe in
563:59 - so you send your data it is encrypted
564:02 - and eve is watching right eve is always
564:04 - watching but because it's encrypted with
564:06 - a public key unless he has super
564:08 - computers in a couple of months there's
564:10 - nothing that eve can do and then of
564:12 - course
564:12 - amazon decrypts it
564:15 - using the private key so the private key
564:17 - comes in
564:18 - and let me redo that
564:23 - right so in it comes
564:24 - eve watches but is helpless
564:28 - because they don't have enough computers
564:30 - eve doesn't have enough computers and
564:32 - your key is large enough so amazon then
564:35 - takes its private key and uses that to
564:37 - decrypt it and ends up with your plain
564:39 - text again
564:41 - so if you think this whole thing through
564:43 - this eve was watching the whole time
564:46 - we
564:46 - sent it public key we signed and
564:49 - returned a public key then we sent the
564:51 - public key to your laptop we verified
564:53 - the public key and the whole time eve is
564:55 - sort of watching all this information
564:58 - and she is powerless
565:00 - to break it
565:02 - pretty dang clever if you ask me
565:06 - and we can thank
565:09 - diffie-hellman and merkel for that
565:11 - pretty darn clever because eve sees it
565:14 - all
565:15 - just think what would happen if like the
565:17 - germans had this in world war ii
565:20 - would have been pretty cool
565:22 - of course they didn't have computers so
565:24 - it would have been difficult
565:26 - i don't know too much to think about
565:27 - right now okay continuing on so
565:30 - what we have is we have this thing
565:32 - called the certificate authority which
565:34 - is a trusted
565:36 - third party that signs these
565:39 - certificates right
565:41 - and so it's the it's entity that issues
565:43 - digital signatures on public keys so
565:46 - that we the public have a way of
565:48 - validating that an amazon.com
565:50 - certificate really came from amazon.com
565:54 - so if you then add this all together
565:56 - right if you add this all together we
565:59 - have basic public private key encryption
566:04 - that makes sure that this data can move
566:06 - across the internet out of your computer
566:09 - out back into the next one all encrypted
566:12 - that's just public private that does
566:13 - that and then we have this third-party
566:16 - certificate authority that your
566:18 - application can use to validate the
566:21 - certificate that comes out and so the
566:24 - combination of ssl or the secure sockets
566:27 - layer
566:28 - and the certificate authority gives us
566:30 - high confidence that when we're talking
566:33 - to something we know we're really
566:34 - talking to it so it's pretty
566:36 - non-intrusive security if your browser
566:39 - pops up with a little pop-up message
566:41 - that means it's got a certificate that
566:42 - it has no certificate of authority to
566:44 - validate and that's not a good time to
566:46 - be typing in sensitive information
566:48 - unless you know exactly what's going on
566:51 - so
566:52 - that sort of brings us to the conclusion
566:54 - of this
566:55 - this these last couple of lectures have
566:57 - been about message confidentiality and
566:59 - that is protecting the contents from
567:01 - being revealed
567:02 - we use encrypting and decrypting for
567:04 - that and then we have message digests
567:07 - and cert to sign things we've signed
567:09 - messages we've signed certificates we've
567:11 - signed many things and those are
567:12 - important and we talked about both sort
567:14 - of shared key and secret key where you
567:17 - have to get together and agree on a key
567:19 - which is a symmetric key that's used for
567:21 - encrypting and decrypting and then you
567:23 - have the public private key which is the
567:24 - asymmetric which is one key is used for
567:27 - encrypting and the other key is user for
567:28 - decrypting and you can freely show the
567:31 - encrypting key because it gives very
567:33 - little information although it is
567:34 - mathematically possible but difficult to
567:37 - decrypt a public private key message so
567:40 - that kind of sums up that kind of sums
567:42 - up our
567:43 - lecture on
567:45 - public private keys and i hope you find
567:47 - it valuable see you on the net
567:53 - [Music]
568:00 - you

Cleaned transcript:

dr chuck is one of the best people in the world to create an internet history and technology course he's lived through it and has interviewed many of the most important people that helped create the internet we know today you are going to learn so much in this course welcome to internet history technology and security my name is charles severance and i'm a faculty member at the university of michigan school of information i have been working on this course one way or another for nearly 20 years for me it actually goes back to when the internet first started that was in the mid 90s and in the mid 90s i had the good fortune to have some friends that decided to help me go on television uh john liske amy leahy and richard wiggins and we had a television show first it was called internet tci and then later it was called nothing but net and then we called it north coast digital but it gave me an excuse in the mid 90s to make a bunch of videos and film folks and just ultimately create a an interesting oral history of the internet this is in the 90s and we didn't even know how it was all going to turn out so i we were walking around rich wiggins and i were walking around and filming all kinds of things another thing that i did in the late 90s was to build a technology for teaching and learning on the internet i hold the distinction of being one of the first people to stream an entire semester online i streamed it so early that i couldn't even stream video i could stream audio using real audio and i had a set of slides that would flip every few minutes and you see a terrifying picture of me staring at you because there was no video in the upper left hand corner of the screen i went from the michigan state university to university of michigan in 1999 and i rebuilt a new lecture capture system that captured cameras and document cameras and screen capture and allowed for annotation and i called that clipboard 2000. everything back then was called something 2000. in 2010 i was part of a group that was going to convert ieee computer magazine from paper magazine to a digital magazine and one of the ideas was is we should have some videos so what i would do for about five years is add add a few days to a business trip and take my camera and go somewhere i had two cameras and a little backpack and some lighting kit back in 2010 11 12 13 um and interview various people and and that let me complete my uh set of interesting people uh in the internet so this this all culminated in 2013 when coursero was founded and i was invited to be one of the first six people at the university of michigan to to be on coursera and create a course and so i created this course internet history technology and security and back then we didn't know where this was all going to go but for me i just looked at it as a fun opportunity to share nearly 20 years of my oral history materials and also try to teach people something about the internet the idea is is that the course is supposed to hook you with a little bit of history but then teach you tcpip and other things and one of the things that i did i always sort of have a media bent to everything i do is i would go around the country there's you can go to find these at doctorchuck.com office and you can see 70 videos from all over the world of me meeting my students since 2013 when i first started teaching and so that leads us to this version of the class which is uh updated version but again this is part of the beginning of a technology oriented curriculum with very liberal arts kind of focus and you may have seen some of my other courses python for everybody django for everybody web applications for everybody postgres for everybody and you know who knows i've got a whole bunch of things in the hopper that i'm working on so by the time you're watching this this might be more and keep an eye on programming for everybody www.pr4e.com for this and upcoming materials so let's talk a little bit about the course at from at ihts.pr4e.com that's internet history technology and security programming for everybody so ihts.pr4e.com as i said the idea is that we can't look at technology without understanding history and i want those with a liberal arts background to have a way into understanding technology because technology is not exist in a vacuum technology has continued to change and is going to continue to change and if we don't take a look back we better we will have no good idea about how to deal with the future and so we need to understand the past as we look toward the future so this material came from a course i taught from 2009 to 2017. most of the course was a python course but about halfway through right after the midterm exam i gave everybody a break from python and taught a couple of weeks of internet history technology and security and so that's what this course is this course is the break from python now in my programming for everybody curriculum i kind of think of this as the first course the place that you start so the outline is starting with world war ii going through 1999 as our history then we look at the technology from the arpanet to the internet tcpip and all those protocols and then we take a look at the layer of security that makes all the kinds of commerce etc that we do on the internet possible so we start back in the beginning at i think of the beginning of computation communication that that is the internet and the technology we use on the internet is going back to bletchley park and so uh i love bletchley park i've often met my students at bletchley park and i look forward to the next time i get to go to bletchley park in the second part of the course we actually and believe me you'll be able to get it don't worry we're not going to teach you any math we're going to teach you things like what the layered network model is tcp and what's ethernet and what's wifi and how do those things work and how do i p addresses work and how do various applications work and so that's the middle part and then what we do is we figure out take a a look at what it takes to protect the information that's moving back and forth across the shared internet the key to the internet is that shared by all of us but we got to keep our data separate and then we got to keep our data secure from prying eyes so we talk about the technologies and math again now no big math but just like the basic concepts um there's a companion website ihts.pr4e.com and it gives you the same course material in a nice modular form with a bunch of links to all the references and quizzes to test your knowledge and if you want there's some threaded discussions if you log in that you can participate in so it's not practical for me to interact with the scalable class with hundreds if not millions of students and so my classes do have millions of students i mean i watch things but twitter is probably the best way to get me and i do want to know if something's broken i don't i don't i want to fix things as fast as possible so just a little bit about me if you're still listening i do have two tattoos these are real tattoos on my on my left shoulder is my research and on my right shoulder is my education and i've got three degrees from michigan state university and engineering and my faculty position is at the university of michigan in a in the school of library science that's currently called the school of information on my on my right shoulder is my research and my research since 1997 has been in uh building and using educational technology to teach and the the this all the logos are the what i call the learning tools interoperability ring of compliance and lti is how we plug in all of my auto graders etc into these teaching systems and so my research has been how to best teach with technology literally from 1995 until the present time i have a race car which is one of my hobbies and my other hobby is hockey and so that's a little bit about me i have a number of folks to thank a lot of the material here was the work i did for ieee computer magazine while i was a while i was a writer for ieee computer magazine they given me some permission to reuse some bits of it uh richard wiggins my lifelong friend who passed away sadly he has allowed me to use all of his video material and the copyright clearance is an important part of any free online course and open michigan helped me with all of that so with that let's go ahead and get started at ihts.pr4e.com hello and welcome to our first real lecture of internet history technology and security we're going to start of course with internet history and i'm charles severance and i'm your instructor we're going to start at the dawn of electronic computing i mean computing started you know early with abacuses and humans but we're going to start with the moment that electronic computing in particular because it was the moment where computing and conv con computing and communication sort of were sort of coborn at the same time then communication before the internet became normal uh then early internet research and then the internet itself that was academia and then of course for uh went went out into the real world and then the web which really took all this connectivity and made it easy to use for everybody it's really what their view now this network is very much through the web and then uh from that point forward we look at sort of the commercialization of it and the ubiquity of it the widespread use of it so the first picture the first video that i want to show you it's a little longer than most of the other videos it is about bletchley park and um there are many heroes at bletchley park of course this was a top secret code breaking effort by the british government during world war ii um world war ii i mean if you think about it in history perhaps there's no time in history uh quite like world war ii if you go back to what kind of technologies were using in 1910 and 1920 to the technologies we were using in 1940 it's an amazing difference you know jet airplanes radio radar so many things were invented and made made usable and made production quality during that period of time war of course is terrible but it does cause governments to fear for their lives and invest heavily very heavily in research and so we in some sense uh even though the war is a terrible thing we sort of benefit from the extensive research they were trying to solve wartime problems but they ultimately solve problems that have changed our peacetime world in wonderful ways so blessedly park is north of london between oxford and cambridge in england and it's uh it was a code breaking effort and at one point there were over ten thousand people working on top secret efforts to decode uh encrypted messages uh initially from germans uh as they were using radio so they call world war ii a world war mostly because it touched geographically more than any other war had ever touched that since before or since really um you know alaska united states italy africa russia japan philippines you know it just it truly was geographically distributed and it was necessary to do community unprecedented communications just to effectively pursue the war and this meant that communications had to be wireless and the problem with wireless is anyone can put up an antenna and listen to the wireless signal there's no way to hide the wireless signal unlike a wire that you could hide it and if no one had access to the wire you can't see what's in it but if you're using wireless and fast moving armies in long distances then someone can intercept the wireless signal and they can so the trick of course was to create an encrypted wireless signal so they could see everything you sent but it didn't make any sense to them it's all sounded like gibberish unless you of course know the code and so this was the a key technology was building codes and code making machines a good example this was the enigma made by germany which is uh we'll talk about these in this last part very last part of the class and the security part of the class how these codes and ciphers work but they scramble material in a way that's generally unintelligible and of course the really bright folks at bletchley park alan turing one of many really bright people at bletchley park um used you know mathematics to to say you know these codes may be more more crackable than we think uh there was folks from poland uh who also informed the them to say look we let me let's show what we did to crack it right before poland was involved they were working heavily on the mathematics of cracking and so then they built these machines and so in this video that i'm about to show you it's really what i try to do is i try to contrast the the two machines and one is an extremely fast mechanical computer with relays and switches and things that spin and gears that move back and forth it's a very physical computer that's uh that's looking for patterns and as it's spinning it's checking for possible encoding combinations to try to just do a brute force checking of lots of different possibilities and so it was a mechanical computer the bomba was a mechanical computer and then as the german encryption improved and they used different techniques with more sophisticated encryption they just couldn't decrypt it with a mechanical computer anymore so they just were forced to build something faster and that faster thing was the first truly powerful general purpose electronic computer in the world of course it was kept secret until the certainly kept secret until the 60s and the 70s and much of it was still kept secret until even the 90s and so its place in history is is kind of a recent uh recent understanding you can look at early history texts that talk about the first computer and they don't mention this one well that's because it was a secret until a long time so the bomba was a powerful mechanical computer the colossus was a powerful electronic computer but i had this picture that was drawn by an artist for me and um in addition to showcasing sort of the moment where a mechanical computer no matter how hard you tried wouldn't work fast enough and the electronic computer was sort of forcefully created out of a tremendous need what's also really interesting is the fact that bletchley park during this time with 10 000 people had all kinds of people you know language experts mathematicians engineers welders and it's a really crossdisciplinary activity and they were solving a problem of decrypting german transmissions but they ultimately solved a problem in the pursuit of that of electronic communications and computation and so this picture is really trying to show how you know a lot you know alan turing was really very critical and but there are other people like gordon welshman and doc keane and and the folks from poland that informed all of this university colleagues and this whole thing was a very much a connected collective group of really bright people highly motivated wellfunded and they created this so um so let me go ahead and uh and pause now and let you take a look at at this film do today we're at bletchley park in honor of alan turing's 100th birthday bletchley park just north of london in between cambridge and oxford was considered by many as the birthplace of modern computer science in 1938 uh again anticipation of war the government code and cyprus girl uh through an in in the main their operational director a gentleman called aleister dennison had drawn up a list he had sent two people out to troll through the uh people at oxford and primarily cambridge and some extent oxford and drew up a list of people who they approached who agreed in an event of war uh would uh report immediately the blood street park britain declared war on september 3rd 1939 the following day september 4th touring and several others reported to bletchley park as the requirement for more people was needed uh some predominantly a gentleman called gordon welchman who had all he had been on the initial list he'd arrived the same day as turing he went back to cambridge and he started recruiting all his best students and in effect what they created here was the world's first skunk works a secret innovative organization where there were no rules eventually uh their main benefactor became the prime minister winston churchill uh and they persuaded churchill that this place needed uh more resources churchill agreed and he wrote a famous uh a letter was written by welchman turing and the two deputies to churchill and one other number a gentleman called stuart milner berry actually delivered it in person the downing street churchill amazingly rece read the letter the same day it was delivered he put a famous action this day stamp on it with a handwritten note to his chief of staff a chap called general dismay which said expedite with extreme priority and report to me when it is done and really from that point september 1941 bletchley park got all the resources that they needed they threw in effect the smartest people together in britain and said here's the budget this is the end game and that's why they invented some of these technologies that probably wouldn't have been invented for years in many ways bletchley park was an early version of a multidisciplinary science center much like cern where ncsa is today many brilliant people with different skills and backgrounds were brought together to solve difficult problems the combination of the skills and collaborative environment resulted not in just solving the problems of cryptography that they were facing but in addition solved broader problems for all of computing in all of society when the people arrived here they knew when they arrived that the germans had taken a machine a a machine which we tend to call enigma enigma was a particular variant of an encryption machine that machine was modified from the commercial version and it allowed them to encrypt messages this was going to become a machine to be used for operational communications very short 200 250 character messages hitler had conceived and as generals a type of warfare never seen before which became known as blitzkrieg very fast movement 50 miles a day particularly when they invaded france and the latter stages of their invasion of poland you couldn't use fixed line communications you needed to use wireless communications here was a device which was portable weigh 25 pounds ran off a battery you could encrypt messages and then it's a separate process they could be sent using the fairly new technology of wireless radio it was the polls who were the first to recognize that the age of machine cryptography had arrived and the sort of people who would be good at dealing with it were mathematicians in fact they even went so far as to put on a course in cryptography at the university of pause man uh invited 20 or 30 young germanspeaking mathematicians to enroll it was very difficult course and by the time the course was finished there were really only three graduates who they recruited uh their names were mario rodriguevsky hendrick zakalski and yazzie orozinski and these three were the core of this team and they are the ones who really made the early breakthroughs they convened the conference at their secret headquarters this was actually july 39 and at that conference they gave the british everything they revealed what they had done they gave them a replica enigma machine and all of their work that information came back to bletchley park and once they were established in bletchley park they then used the polish method to break the enigma machine the polls had actually built some machines themselves one of which was called a bomba that machine the name apparently comes from a polish ice cream dessert of the same name it's an effect vanilla ice cream with chocolate sauce around it this machine was called bomb in honor of what the polls did but the polls technique was based on the particular way that at that time the germans incited their messages they at that point were repeating the message header and that was the attack which the polls developed on it they believed correctly that went when the war would start that the germans would change the way they were doing that and they called for help they told chewing and the people here everything they'd done which we are and should be very grateful but they also proved that it was possible and that i think was the spur that kicked the brits into actually doing something about it now turing understood the weaknesses of the way they'd done it and developed a clipbased mechanism based on the fact that every military organization in the world cannot stop itself sending stereotyped messages he then talked to a brilliant team of engineers led by dr keane who told him roughly the speed that it would be possible to examine potential stops for so between between them they then designed the machine called bomb which would look for that and do so in sensible time here is an example where we have intercepted this message snmkg we're pretty sure that that is because this particular operator always did this this is his morning weather forecast so here we have the guest german plain text vetter web forecast and the two are lined up at that point the enigmas ability or inability to encode letters itself is useful because you can make sure you've got no caches here and from these guest letters we that the crib makers would derive a picture like this called the menu where you'll notice that at position z e here g is encoded as e so we have g going to e at z p at the end here e goes to v this is reversible of course we can describe this other way up so here's e to v that's z g here s is going to a sorry s is going to be excuse me so here's another link and eventually we can go all the way around and we can close this loop like that it was the closed loops that they were looking for the operation of the bomb was simply that if there is a letter which you can feed in at this point and which comes around through a string of one two three four five six enigmas and comes back as that same letter then it's possible the position of these wheels match the position of the wheels when gunther started encoding his message on his enigma it turned out to be a bit more picky about loops and menus than um perhaps they had hoped although it worked and at that point welchman added a completely leftfield master stroke called the diagonal board which i think it is fair to say made the difference between success and failure to turing's original idea and here are my three diagonal boards that's one that's the other this is the third one coming in a place where you can't see it but can can you see z down to a okay um there's nothing connecting that to the machine it just bolted there for convenience the only connections to the machine are when you connect x into one of the enigmas what will happen is when we turn the machine on you'll see it will run up to speed okay um the motor will be running and the clutch will drop in then you'll see the various carry mechanisms happening and then when we stop the machine you'll see it slow down and then the clutch drops out so tony if you'd run it up for us please okay would you turn on carry hole okay so what you saw there was the middle carry then we switched on carry home to make the slow carry work all the time so these bars are just pushing around all the drums and you can see that all the 36 enigmas are just in step they're all just turning and they are a resource these are the very fast relays the three banks actually four for the chains that do the detection here this is the control logic okay and then these are this is the 26 bit register that notes a stop and then allows the machine to slow down before it stops allele our favorite statistic is the sheer amount of wire in the thing there's no we've lost count but it's somewhere between 10 and 12 miles of wire in each one of these germans really there was two main systems they were using enigma was their operational system that was being used for all specific operational communications again very short maximum of 250 characters uh instructions orders for panzer division to move from one location to other orders for a submarine to attack a convoy for aircraft to during the battle of britain to attack specific targets the germans started to introduce through probably 1941 a different system the intercept service which britain had put into place to intercept these messages started hearing traffic which was clearly not enigma traffic a negative traffic was morse code easily identifiable people can be trained fairly clear simply to transcribe to listen to morse code and transcribe the letters this was a totally different signal it was not discernible it was not transcribable this was adaf hitler's communication channel to his army general so very longwinded communications top secret uh and so this was an even more daunting task arguably than enigma because uh this encryption machine that was used with this system uh there were various uh ones of them hitler referred to these as heim his secret writers several companies siemens uh that exists today making we're making a machine haglin but there was also the lorenz company and that was the primary machine particularly lawrence said 42 that machine unlike enigma that had three encryption wheels had 12 encryption wheels they approached the post office research lab at dulles hill in london a young engineer called tommy flowers right into the project uh he was in effect told well go ahead if you can get approval flowers went back to the post office got approval put a small core team together and in less than a year had a working prototype uh quite a remarkable achievement the first class colossus as this machine became known the mark 1 had 1 500 valves or vacuum tubes in it they brought it to bletchley park it worked almost right away the people here were convinced they asked for a more powerful computer uh flowers already had anticipated this he already had it in production 2 500 valves in an era when no machine had more than that used valves had more than about 15 here is a machine with two and a half thousand flowers was told that they needed the mark ii by june 1st 1944 because there was a certain date in the diary june 5th 1944 was a scheduled day for operation overlord dday it actually ended up being june 6th because of bad weather flowers delivered the marked first mark to the bletchley park on june 1st they switch it on it worked straight away they immediately started decrypting messages between the german high command and much of the light the light they discovered that all of the subterfuge about the dday landings had worked hitler had believed that the main invasion was going to be at the pot of calais not at normandy that intelligence was fed back to general eisenhower at allied uh supreme command headquarters and there is reasonable evidence to conclude that the game i will not have gone ahead on june 6 1944 without the intelligence from bletchley park this is the colossus computer at fletcher park now we're in hutch 4 at bletchley park which was the one of the first purposebuilt computer centers and some 10 of these machines were installed here starting in january 1944. now in the years previously a new way of encrypting messages was discovered that was being used in germany and it was those highlevel messages between hitler and his generals and they were encrypted on a machine called lawrence machine and it used teleprinter traffic teleprinter codes to actually transmit those messages now by 43 it was taking some six hours sort of six weeks to actually decode those messages and decode those messages laboriously by hand the problem with that is within six weeks the usefulness of the intelligence that you gain from those messages is obviously gone so that process needed to be speeded up now some techniques have been tried from so many electronic techniques have been tried here at blue park um but this machine when it was put into use in early 44 reduced that six week period to decode the message down to six hours and that's really just a phenomenal jump the machines the messages themselves were received at various intercept stations around the country and were punched onto paper tape now there are two paper tapes on the machine here no one that we're running and one which is ready for the next run now this tape with two here if i take one each row across the tape are punched five holes and each of those is an alphanumeric character and that's the encrypted message that was received has been punched onto tape now although colossus has really all the elements of a modern electronic computer it doesn't have the memory that we expect in a stored program computer so what happens is that tape of that message some 5 000 characters that message is actually formed in a loop and is read over here with a series of photoelectric centers and lights and each character is red and the 5 000 characters are set up 5000 characters a second are red now each clunk of the machine we can hear there is another 5 000 characters being read into the machine so we're reading that same 5 000 characters each time this is the control panel of the colossus computer so it's this side of the machine that would actually be the the wrens and the wartime would actually be using now i can set up the particular algorithm i want to test and routines i want to test using these control panels and each clunk of the machine at the moment is another state where we're actually trying a new algorithm and repeating that algorithm on that repeating 5000 characters the results that the machine detects are presented here now we're doing a statistical analysis of that encrypted tape now the machine was run for some six hours uh there are two and a half thousand valves in this machine you can't see that many from the front but once we go between the acts of the machines you get an idea of the scale two and a half thousand valves each file has a heater a hot wire heat in the center of the valve and operates at about two three hundred volts dc now five and a half uh two and a half thousand valves plus the power supplies generates over eight kilowatts of uses over 8 kilowatts of electricity and by this point when we're standing in between the racks you can feel the heat coming off of these racks colossus is a combination of electronics and we can see the the electronics here in these valve chassis numbers and also electromechanical switch gear so there are backs of relay panels here these big single motion detectors are a sort of motorized switch that will actually spin around there's banks of those in the machine the technology is equipment that was well known for the british post office this machine was designed by a chap called tommy flowers and tommy flowers was an engineer at the research center in london for the british post office tommy was asked to look at the problem of how to automate this task this manual task and tommy came up the idea of using electronics to do this at the time the idea of using more than half a dozen valves in any circuit was just simply poohpooh valves had a bad reputation people had valves in their radios at home they failed when they switched the radios on so the idea of using two half thousand was just simply just phenomenal but tommy understood that it's probably it's almost certainly the thermal shock that kills valves in the first place so if you leave the machine on and don't subject it to that shock you won't have a problem now all the 10 colossus machines here at bletchley park were left on permanently the machines were operated by wrens in in three shifts throughout the day we have to be equally careful this is obviously this is a replica of the machine itself but the same problems apply we need to be careful in bringing the supply voltages up gradually so we don't suffer from thermal shock and that in the same way shutting the machine down tommy had the idea of generating the key because it's a key that we're comparing with that encrypted type generating that key electronically and these counters here that are called the thyrotron rings the thyrotron valves actually hold that that count now we describe colossus as not having a memory we say not having a memory in the sense that um modern computers have a a memory that's common for data and for programs well the program here is set on those control panels at the front and that's switch um switch and plug programmed much like say it's contemporary eniac machine um but these machines these valves at the back do act as a store in the sense of counters and they're actually counting the score that we're actually getting each passed through the algorithm the we can see at the back here well certainly some of the modern technology um i suspect the wartime guys that were building and debugging these machines would have given anything for a reliable oscilloscope and let alone a logic analyzer but if i look into the machine down here back you can see the projected image that's coming off the tape and that's shining onto five photo sensitive valves and it's those valves that are actually reading the 000 characters every second paper tape was used well into the 1960s and 70s at this speed was simply phenomenal and hadn't really been thought of before and our original museum director techno sale wanted to rebuild the colossus and build a replica of the glossary machine and this was done 20 years ago there's very little information out there there are a few pictures that were kept possibly illegally a few scraps of circuit diagrams and just the memories of some of the original pioneers who worked on the machine and when tony started the plan tommy flowers was still alive and remembered and was able to draw circuits of course finding the parts as well but the important thing is the machine was designed by a post office engineer at the time an engineer that was used to designing systems for telephone switching so a lot of the components here everything from the relay banks to the switches to the power supplies were common to british post offices in the prewar period so when tony then wants to find the components to rebuild the replica he's lucky in the sense that the last of those exchanges are being decommissioned from post offices around the country tony was therefore able to really back up a pickup truck at the back of the exchange and take away all of those components and dismantle all of those components and they are they were absolutely perfect and it was just that tiny really couldn't have been better so alan turing actually left bletchley park after about three and a half years his involvement really uh finished he went to the united states of turing became was not actually involved in the development of colossus some of the statistical work that he did was used by the people predominantly bill tutt who's the guy that actually reconstructed the lorentz machine quite remarkably a remarkable feat indeed uh cheering got involved in things like speech scrambling systems and went to the united states and was involved in other projects so he wasn't really involved in colossus at the end of the war trey went to work for the national physics laboratory again pursuing these sort of ideas and then of course he ended up at the university of manchester where max newman who had run the department were the colossus computers uh had been located but she parked also ended up as the head of mathematics and obviously then at that point turned became involved in the very early uh computer developments in britain uh gordon welchman immigrated to the united states at the end of the war in 1948 he immigrated to the united states and became involved in many of the early american competing developments project whirlwind weltzman worked at mit taught the first course in computing science at mit so cheering then was involved in things like the manchester baby in the franti mark one and the early uh competing developments uh i guess this is well known of course during tragically uh committed suicide in 1940 1954. do so i hope you enjoyed that again i tried to showcase the the juxtaposition of the mechanical computers moving to the electronic computers and how it was a collective effort by by many different people and so one of the things that happens sort of after this is um after the war they didn't need bletchley park anymore so they shut the bletchley park down and all these people who had worked on all these things and built all these things went to various academic places like mit manchester harvard and what happened was is what they had done was a secret and they could say nothing about it but they had realized and they couldn't forget that electronics could do computation and electronics due to computation far more rapidly than anything we've ever imagined before so a series of computers came up really fast after the war they kind of you know relaxed the war's over we feel good but let's start thinking about what we would build if we were going to do computations like weather or other kinds of cool computations instead of just a wartime computations and and so these next generation of computers that are often thought of as the first computers in the world which really kind of like the followon computers to the computers built at bletchley park and so the immediate postwar period in the 1940s took the us and uk code breaking there were similar things in the united states as well and i'm sure elsewhere where that pushed and the envelope of computation but the folks that had built all these things for wartime purposes switched and moved into academic and peacetime purposes and so they built i mean if you think about it they have less pressure but they already know it's feasible and they could kind of sit back and relax and be like okay that would be a little better we kind of compromised there so they built some really elegant computers and and you know they can they can all sort of fight over who's the first um but ultimately they all pretty much came out uh very quickly one after another because the idea had escaped and so this is the beginning of sort of electronic electronic computation right the fact that electricity can be used to represent data and that can be used to change data very rapidly as compared to other things that used physical storage for uh computer information so this was a great time electronic computation from the specialized to the general purpose and these people really built some exciting computers many of the architectures of which are kind of still sort of with us a lot of the architectures were innovative the innovative architectures that we still use today were conceived and imagined there but students get a better understanding of something if they know the history of it and know where it know where it's come from that's my my view so when i go to class when i go to the interface design class for instance i can take them down to the museum and show them what an early interface was you know we talk about interface design and they think of their their handheld computer their laptop their desktop and they look at the screen and they think that's that's an interface and sure it is but where did you know how did we get there what was the early interface with computers i'm going to take them down to the frankie sirius and they say well what's the interface here with the computer so it's it's um giving them the idea of what an interface is by by taking them back to something that's that looks very primitive and and then we look at the evolution of interfaces over time we look at the different um applications you know we go back and look at busy calc and word star and things like that and to progress through the the different versions of these different products and you actually have like running physically no we don't know it's also from the web but i i think it just broadens their outlook on it and i think it's a danger with computing students that they become very can become very focused on the latest and and quickly discard the technology they're using when the next one comes along and forget about it and even before we had the museum we were lucky we had here cyrax i've mentioned cyrax to the world's number four digital store program computer it's left over used till about 65 so about 72 or so it arrived on campus just for storage purposes but we put it in a display area when i first arrived from my teaching here in about 88 to teach i would always take my introduction to computer architecture students past that it had so much to tell students about the origin of operating systems the primary function of operating systems to allocate resources and the efficiency of use of resources with the programming students i can show them things like punch cards and things like this you know how do we get information into the computers and show them things like that so it might be part of one class in a semester that i use the museum in particular for from my classes and others use it too in similar ways but we do have school children coming on visits and then we have about an hour or two and we take them through the museum starting with the the calculating machines and we talk about what do people do before computers and i've got things like this what is the computer where did we get the name of computing from and i've got this picture of women using slide rules in 1948 i think it was in this is in america doing their calculations and the idea that the first computers were people okay and and often they were women so that's kind of an interesting bit of social history there so trying to connect the computers and state of the technology to what was happening in society the time the physical artifacts are very important that idea of the physical we still carry forward even today as we're looking to see what we can do with the full museum that we've created now we've toyed with ideas of a webbased series of exhibitions photographing all of the artifacts and making sure that people can sort of browse through and move through halls we feel that even with that webbased teaching methods we would still like to have physical artifacts we've toyed with um a box of artifacts that we would send out to schools that are working on our program that do an educational program so the physical handson is a very important thing museum curators understand it people who aren't museum curators tend not to we had a staff member in our in our school and when we started the museum i was talking to her and and said oh we will have slide rules in there now she had done an honors degree in maths and she had not heard she not that she hadn't seen a side well she didn't even know what one was and that to me was amazing because when i went to uni everyone carried a schedule you know we all had this my schedule from our universities we all had these as science students engineering students we all had these tools and she was probably 10 years younger than me and suddenly i had no idea what i was even talking about hadn't heard the word so i think that really made me realize that histories are so quickly forgotten and there's a danger that um we just um yeah we we forget about these things and if we um don't have them around for people to see they forget about the history of uh you know the the technology that they're using and i think that's a real danger so do also in the uh postwar period in the 1950s as a bit of an aside um there was a there was a realization by the certainly the federal government united states that academics were kind of useful right i mean uh the people that really had won the war for them were academics not just computer people but also people that built designed airplanes and radar and things like that and so there's a sense that the safest country was the country that had the smartest people and in many ways the entire us educational system was built to find really bright scientists and educate them very effectively and so um and so there was there was a a real boom in building science departments uh national science foundation was fun uh created right after the war and uh and so united states and and other governments really greatly invested in research and there's this movie a beautiful mind and i've got the url there at the bottom it's not required but i love the movie and it gives you a sense in particular the scene that i'm pointing to gives you a sense of how mathematicians were in many ways uh treated like celebrities so i'll pause just for a minute in case you want to pause this video and then go take a look at the john nash video so of course john nash was a real person he received his phd in mathematics at princeton at 22 years old he was a prodigy he was on the mathematics faculty at mit in 1951 through 1958 and he had adult onset schizophrenia uh right before he was 30 years old and uh and it was quite a severe case and it took it he he spent a number of years in sort of mental institutions homeless etc but in his work in princeton uh in an area called of economics called game theory he did something that was quite innovative and it really revolution revolutionized in many ways our understanding of economics and and he sort of he he got his schizophrenia under control in the mid 90s and uh and he was awarded the nobel prize for economics in 1994 and so this is just kind of this moment where this all this stuff was blossoming in the 40s and the 50s now in the 1960s we started seeing a different way of of computing this was moving from the research into the mathematics of building computers to the applications of the computers and we needed to have connectivity because you would build a computer and you know in 1955 there might be one computer available to a university researcher in the entire state and so you had to connect them together and so we would often end up with these things we call terminals in our office and they would use these dialup modems and they would connect perhaps for a local call to a local computer or even a long distance call a very expensive longdistance call to a remote computer but these computers were so central and so precious that we didn't care about the cost of phones and we couldn't share them i mean we didn't everybody didn't have a computer the way they do uh today and so there was a couple of different models one is that you had people doing their work connecting to computers over these modems um and then more rarely you had computer to computer connections using what are called leased lines these lease lines were very expensive they were kind of like making a long distance phone call 24 hours a day seven days a week they were rarely used in academic situations because they were so expensive it was more common for a bank to use them to say move all their data from their branch locations to the central locations once a day they were generally slow and very expensive and they were justifiable in certain situations and so that's kind of how our world was we we had something on our desk and then we used that to connect through the phone lines to a central computer that was shared with many different people who called it time sharing and so oops so this next video that i want to show you uh just the first part of it you have to watch the whole thing um is kind of in the 60s and in 70s when i became involved in computing this was kind of the way that we perceived our computers you know we would dial them up and they made these clunking noises uh this teletype that you're going to see in this video as a is a world war ii artifact basically um and and my first programming personally was on this kind of a computer making this exact noise that you're going to hear in this video and i i think the the key to to emphasize here is that you know you it's kind of fun to look back at this old guy with his horny rim glasses um but but we really were enjoying ourselves and you think well i got this fancy cell phone and it does all these wonderful things and i place angry birds on it and weren't these people not having fun and the answer is we were having a great time we were connecting communicating calculating computing doing all these wonderful things we just were doing it sort of more slowly with simpler equipment but but even from the beginning in the 60s and the 70s people talking to people were an important part of the use of this technology so uh take a quick look at this video and then come on back i'm going to show you the use of the michigan terminal system a large computing system at the university of michigan computing center using the ibm model 360 67 we will be using a standard teletype and we will be dialing in through the ordinary university centrix telephone system this system can be used by a telephone system anywhere in the world as long as one can dial directly into the computer these teletypes are not wired in but or use the ordinary telephone system we start by pushing the originate button which turns on the teletype then we will dial using the regular telephone dial here now there is a handset which is available with every teletype system you can dial this number if you like with the handset either one works but as soon as you are connected to the computer do not use the handset for any purpose at all now i'll push the originate button i can control the speaker volume with this little knob and so you can hear it now i will dial the number 763 o 300 or in the centric system just 30300 and now the computer is coming in i will turn the volume down the response from the computer is the identification of the system the who are you is the standard teletype communication identification and the teletype itself answers with its own builtin code number in this case the teletype at the tv center now i must sign on to the computer and identify myself the number sign at the beginning of the line is the indication that the michigan terminal system is waiting for me to communicate something to it the first thing i must do is issue the sign on command all commands in the system start with a dollar sign now the keyboard on the teletype is very much like the keyboard of a typewriter including a shift key for the characters on the top of the key we do not have upper and lowercase letters however so the shift key is only used to get an additional set of characters and in this case the dollar sign is a character above the number four now i will use the word signon which is the official command signon there must be a space at least one after every command and now i will give my own personal computing center number which happens to be w010 each user of this system is issued a computing center identification number through his instructor if he's a student or through the department for faculty now this line has been typed it is being held by the computer but i can if i see any errors in it do some editing and correcting we'll see that later i am satisfied with this line and now i will give the end of line character which must be given after every line and i will remind you each time that i'm doing it for a while the character for ending a line uses the control key on the keyboard which is a special key which indicates that i want to use even additional characters besides those that are added by the use of the shift key i hold the control key down and while i hold it down i can hit one of a number of other keys and in this case i will use the control with the letter q it's possible to use the letter s also but that's right next to another key which disconnects a teletype so i recommend using q i will use ctrl and q to terminate the line and now i'm asked to give my private password i'll give an incorrect password just some nonsense characters and of course end of line because i must indicate that i'm satisfied with that i'm prompted that i better give another password and now since i intend to give the correct password i will turn off the printing so that no one can see what mine is the to turn off printing we use this switch which is labeled hdx and fdx for half duplex and full duplex we normally operate this the teletype in half duplex mode if i push it to full duplex printing is suppressed and now i will give my correct password push to half duplex again and end of line character control q and it is accepted by the system and i am now signed on the information that's coming out here is time and date of the previous sign on and time of date of this signon hello and welcome back i just wanted to give you sort of a sense of the actual physical experience of connecting and communicating and computing in the 60s and the 70s the 70s was when i got my start and uh the lucky people got to use a teletype like was being used in that video and other people used punch cards um you also heard the squealing sound of the data being converted into sound and back and forth um you know it's the the key goal was there would be if you were lucky one computer within a 20 mile radius of where you were sitting so you could use a local phone call and you could be on all day and do things all day long and that was really exciting and a lot of fun um and this was sort of a common if you were sort of you know today you have a 2 000 laptop the fancy people had these teletypes right in their office because then they could conveniently sort of do computation and and and not have to go somewhere do that computation so that's a pretty exciting so dial up was kind of like the way the campus operated but you can also do data transfer with leased lines and the typical thing about lease lines is that their uh the the phone company if it's going between two cities um digs a hole and puts a cable in and has some number of copper wires in between those cities this is back then um of course it's fiber optic now but back then it was copper and every time you would make a call between those two cities it would have to find a free piece of wire and connect it up so that your call the audio of your call would go through that wire and if you wanted to you could pay them to lease one of those pieces of wire it meant that people couldn't use that wire for phone calls you would sort of take it out of service and if they had 500 wires between two cities and you leased one of them then they had 499 wires and so it was rather expensive and really very importantly the cost was based on distance right a mile versus 5 miles versus 20 miles versus 100 miles the cost would kind of go up linear based on distance and so that's a that's a key thing that distance is important in these very limited resource copper wires where you had to dedicate a wire either to a phone call or to data and so we ended up evolving in the academic world what we called stored in forward networking with the sole purpose of compromising everything so that we would keep our costs that we paid for our phone lines to a minimum we wanted to communicate in academia with people all around the country and all around the world so we had to keep the cost low and so we would lease a leased line you know so so so here would be us sitting with terminals in our offices and we would use dialup to get connected and so this might be a few miles like one to two miles or one to two kilometers um and that's what you had you had to be live near a computer or have an office near a computer and then you would use the local telephone network to dial and to do your work and then there would be one connection out the back of that computer to a another computer that would also have users on it and then other computers with users on it other computers with users on it so this might for example be michigan this might be stanford stanford would have a computer michigan would have a computer the stanford people be connected to the stanford computer stanford would have one little connection out its back end and to the rest of the world so you sitting here want to talk to somebody sitting here so this is how it worked you were sort of always connected so your data would be inside you know you type an email into the computer and then you'd say send that out to my colleague at stanford and so the problem is is everyone else was sending and so let's say for example that somebody sent a pretty big thing big purple circle is what they're sending and then somebody next to you in the office down sends a kind of mediumsized orange circle and they're sitting there being stored in the local computer and then you finally finish typing your email messages and it's kind of a small green circle and now the problem is is you're in a line the way this worked is the software would keep a cue or a line of those who are going to use the uh the line and then it would sort of start streaming this stuff out and once it started it just kept doing the same file over and over and over now if it died it would just start from the beginning again and so it takes some time for that thing to move across the network and then would move across the network the next message in line would start to be sent across the network and it would use that link um come on finish up there we go okay it takes a while for these things to move across the link and then finally and this could be ten minutes later finally it was your turn and your stuff would work its way through the network and get to the next computer the problem is is once it's in that computer you face the same problem because if all these messengers are going from uh michigan oh forgot to hit the button thing from michigan to stanford and they're all on the way they got to go through all these links because there wasn't a direct connection because the direct connection to stanford would be very expensive and so you're we're in us we find ourselves in a situation where it you're stored you set on these computers and if there was an outage of a network or say this one this might be hours you might be sitting on this computer for hours on their disk drive right not even in their memory you'd be sitting on their disk drive for an hour and then finally this would come back or maybe this computer was down they'd come back up and then the data would start flowing again so it was haphazard i keep telling you it was awesome it was just slow it was awesome but slow so don't don't don't feel sorry for us we loved it we enjoyed it it was great talking to colleagues all over the world so we ended up with a network architecture that encouraged more hops which means it encouraged more latency and encouraged the likelihood of getting stuck behind something large as it worked its way through the network so for example um we were going to send a message from east lansing to say the east coast somewhere and we would have two connections maybe we would have a connection between uh michigan state university and east lansing in ann arbor and then we'd have a the data would get stored in forward in ann arbor and then we get uh further sent to cleveland and if you think about it the the wire between ann arbor and cleveland goes like this right they probably buried wires under the ground and if we could actually convince toledo the cost of the big wire versus the cost of the two shorter wires the cost of the two shorter wires is almost exactly the cost of the big wire because it's not really a big wire and so if we can convince toledo to join our little club then we don't increase the cost of our communications because we're it's about the same right the the wire length is about the same but we've got one more school for the same cost and if you keep doing that and you keep saying oh well let's put a school here and put a school here and put a school here in the middle of a lake and put a school here in the middle of a forest the economics draw said that you could connect more schools with effectively fixed cost by shortening the distance every time you made a connection and sometimes they would sort of make two connections but the way it often worked was from the perspective of this whole thing is the data would sort of tend to go you know up to some central location and then kind of fan back out from the central location and uh and so these it there wasn't a lot of redundant links in this whole situation so we find ourselves in a situation where we can save more money saving money by just simply adding hops so in this environment we had a lot of email back in those days we didn't have a lot of images computers you know barely could do upper and lower case sometimes it was impressive when we finally got to upper lower case let alone images and so for the longest time everything we did was very text oriented sometimes we would send small files like programs to each other but it was either text and these days those are tiny it's almost like sms right it's almost like the size of an sms message was the size of a typical mail message back in those days images we didn't have computers that could even display them and so it hardly mattered so you focused your life on this one computer within a 20 mile radius and it had this connection to like a snakelike connection that sort of went over hill and dale and to somewhere and then i finally got to stanford or wherever your mail had to go but again it was awesome to be able to sit at a keyboard and talk to people all over the world even though it took four hours we didn't we didn't send as much email back then and a number of networks came up one of them that became sort of pretty widely used was a thing called bitnet and it was uh where everything kind of came back to princeton was one of the main hubs of bitnet and uh it worked really well and and you know we could there was a way to say oh i need one more school and we'd go find the ones that are closest and we'd make the connection and so that's pretty much how the average academic saw networking one campus computer and sort of this weird slow storm forward networking that worked well enough but during that exact same time from the 1960s to the 1980s the us department of defense was investing in a research network called arpanet and arpanet was funded by the military arpa defense advanced research projects agency um and we'll meet in the later in the lecture we'll meet vince cerf we'll tell the story much better than i can tell but i'll just tell you a short version right now a lot of people wonder why the department of defense started this project and a lot of people say oh it's because of the fear of nuclear war and the project was very long and there were various motivations throughout the various phases of the effort but if based on what i've been told and what i've read i think it's safe to say that the primary motivation was to improve the use of their computing equipment that they were used for military purposes make it easier to access them make it so people didn't have to travel as much made it so that people could work from their office on many different computers and also so that people could actually talk more effectively so they could send email real fast so that the email would move faster for military people so the first thing is really kind of an end user focus to make them more useful to people and get people working together more effectively that was the first kind of heavy motivation the second motivation was actually had to do with reliably reliability and redundancy and resistance to partial failure and that really wasn't so much about nuclear attack that was more about battlefield attacks so the notion that once you start having all these links and you make them wireless and you put them in trailers on a battlefield and you know you got a few hundred miles and the date is moving back and forth then we have to worry about in a battlefield situation one of those trailers might get hit and how would you keep the network running if one of those trailers got hit so the notion that we have sort of a whole nation and we are worried about communications i'm sure there was some worry about that but it wasn't really the main reason and i mean the exciting thing to me is the main reason was a very very peoplecentered reason of people working more effectively but this was a rather exclusive club rather exclusive network because it was only for the people who were either military or funded to build it so in 1969 there were four hosts on it again that's research and these were lease lines the same ones we were all using to do our email and they were expensive very expensive but because it was a large grant they just paid it because the research was not about the money the research was if you had these connections what would be the best way to use them and how to deal with redundancies and how to deal with multiple paths to the same place all that stuff is is interesting research questions that computer scientists spent many years conceiving of and so by 1972 looks like we got about 20. we got a couple of cross country links and multiple connections and and this looks like a great test bed to see you know so all of a sudden this part goes down how quickly can we reroute around the outage and literally these things these days reroute around outages in far less than a second um and so that's really impressive our current internet owes its history to the research that was done in the 1960s and 1970s but what was fundamentally different between the story and forward networks of bitnet and this arpanet research network was the notion of packet switching so the it's a real simple concept it just takes a little more complex software to solve the store and forward network would start date sending data across the link and then keep sending it until it was done that would seem to be very efficient you didn't want to like you wanted to use it as fast as you can and then put in the next one out put the next one out with the next one it was really simple and it dealt with outages in a simple manner by storing them all locally on the disk but what if instead you made it so you broke every message let me see if i can even draw this i should probably make a slide about this so if there's a network here and here's here's my computer and it's got a network connection it's got one really big message broken into pieces many pieces and it sends the pieces one at a time if you show up with a really short message with only three pieces all you have to do is wait for one piece to go and then your piece goes in and then you share for a while right you share for a while and then your have made it through because you only have three packets this has like 1000 packets and then once your message is through they resume sending this data in order and so you were able to sneak and bypass the traffic jam that was this large amount of data and so that's the idea of packets and packets are these chunks to say what we're going to send is a piece and then at the end of that we're going to maybe send a piece of a different message it was allowing simultaneously multiple message to be in flight at the same time that's packet switching and what happened then is we also ended up with these special purpose computers called routers they're still computers but they weren't doing storing in the same way they were just forwarding they weren't storing forward they were merely forwarding so we'll get back to that in a second do when you walk into the back entrance of boulter hall on the ucla campus you may notice a seemingly random pattern of floor tiles in the entrance if you spend a little time looking at the pattern it might dawn on me that the tiles represent zeros and ones and then you might even figure out the tiles represent ascii characters the characters in the floor tiles spell out low and behold to commemorate the building where l and o were the first two packets ever sent on the arpanet from ucla to stanford research institute on october 29th 1969. oppa wanted a network so that they could share the large computing resources they had given to their researchers across the country university of utah had a terrific graphics operating system so i had database we had simulation university of illinois had high performance computing and every time opera brought on a new researcher they'd offered to buy him a computer fine but the researcher would say i want the same capability all those other guys have i want the graphics the database and all the rest and office said we can't afford that if you want to do graphics you log on to the machine at utah through a network that we think we're going to make so the need for the network was to do resource sharing and not to protect the united states against a nuclear holocaust when bob taylor came in as a neck director and he recognized his need for sharing resources by the way notice the phrase i'm using sharing resources is exactly what i built into network design now they wanted to share the external resources same idea you have it you're not using it somebody else you'll be able to so they brought in larry roberts another classmate in mind in fact an officer made of mine at mit to manage this project he came to me because he knew my work he he watched me do the simulation in fact i used his compiler on the tx2 computer and said len we need to know if this thing is going to work he knew that i had the theory so i could show it to him it's going to work in fact he even says he would never have decided to spend millions of dollars of the us government's money he wasn't sure this thing would work so the design began to be laid out by a few of us in 1967 in 68 they sent out a request for proposal the end of 68 both baranek and newman a cambridge massachusetts firm won the contract to produce the first switch of the arpanet and we became the network measurement center early on so we could test it out during the design phase some great people were there throwing their ideas out herb baskin was there a time sharing expert and he said if this network can't deliver short messages within a half a second i can't use it for time sharing specifications half a second by the way we got 200 milliseconds and uh westclock said a separate computer from communications i said look if this is going to be an experiment and i was also interested in the research and experimentation we have to build software in so we can run experiments artificial traffic generators measurement hooks a place where the measurements can be evaluated with the software and so howie frank began to talk about network reliability he said this if anything fails the network shouldn't collapse so we built in we so we didn't say this should be five nines of uptime we weren't much more pragmatic we said if any single thing fails everybody else can still talk so to do that you need something called a two connected topology two independent pairs between every pair of nodes built in so all those specs went to bbn they built the dawn thing they delivered the switch here at ucla on schedule eight months after they got the contract they were to deliver this new technology new applications new device they did it on time on budget came here we plugged it in and bits began to move back and forth between our timeshare machine and that switch on the day after labor day september 2nd 1969 but that was just a one node network the schedule was that another one of these switches will be delivered at stanford research institute 400 miles to the north and they would connect that to their machine and that happened in october so in october we had a two node network my machine my switch another switch 400 miles away and the sli host okay and it wasn't one single line it was a gang of 4.8 kilo per second lines so now what do you do you have a two node network well now you can do something so we decided one night one night late in october programmer charlie klein and i were in the room and said look let's let's communicate between the two machines so we got a hold of bill duvall their program there and we said let's simply log in from a terminal connected to our host to that machine the idea is these are both time sharing systems they expect terminals to connect in and use the services of the machine the big thing was sit at the terminal here log on to your machine here and through this wonderful network log on here as if you're a local user well that's easy enough so we got all set got charlie down at the terminal over here and just to be sure this worked we had a telephone here instead in fact i actually think i've got the here it is i just happen to have it that was the telephone set that's the telephone that was a telephone we plugged it in we drove we derived a uh we weren't using skype for a knife plugged it in we used a piece of the high speed line for the for the phone connection but with the interesting thing is we were using the defunct circuit switching technology to prove out the new packet switching technology and it really helped us so we could understand what's going on so charlie typed the l who said you get the l bill said yup got the o type deal you get the o we're trying to do l o g for login get the o got the o type the g get the g crash so the first message ever on the network was low as in lo and behold yeah now that's especially interesting because if you go outside this hallway here down under the alley and come into another entrance to this building and you i just discovered this about a week ago you you walk on on a platform and there's a mosaic of tiles down there and they're a strange pattern it turns out it's the ascii code for lo and behold i have no idea who did that you know it's about a year and a half now some very clever person put that in that was the first message october 29 1969 to 10 30 at night entering 1969 right now we reproduced this room to look as it did and smell and feel like it did some 40odd years ago and if you look over here you're looking at the first piece of equipment ever on the internet this is that first interface message processor imp number one at ucla a honeywell mini computer adapted by both veronica newman bbn to operate as a switch which handles the functionality and this is the same physical four square feet where it served as the opening note of the internet the first piece of equipment ever on the internet and that's the actual one that's it i kept it for years i tried to throw it away many times most of the people who had imps have tossed them this was the one or two left around the world but this is number one this is the first piece if you open this machine you'll be privileged to smell it yeah it's got an unusual odor and just brings you right back yeah the emotion it's great you can't slow it through it this is a military hardware machine this this machine was essentially a stateoftheart mini computer which was adopted by bbn and i first saw it in 1968 at one of the joint computer conference shows thousands of people on the big big exhibit floor and you see these sky hooks up here they had one of these machines hanging from the from the ceiling swinging in the air running and there's a guy big guy stripped to the waist oil skin with a sledgehammer and he was going whack right whack to show that it was military and it was but the most important document of the internet the most important document of the entire internet is right here you talked about who is working with me well one of my software programs was john pastel in fact he's this picture and he was not a hippie even though he appears to be he was the one who basically disciplined my my staff to do things properly and keep records he said we have to keep a record of what's going on so beginning in october basically a month after the improvise arrived we started keeping an imp log you know this is an engineer's log this is not you know madison avenue a piece of doctor just scribbled we use an old sds log and in here we kept a record of what's going on and the most important entry happens to be right here on october 29 1969 at 10 30 at night charlie klein the programmer who's in the room with me made this entry talk to sri host to host this is the only record of the very first message ever on the internet right here you know we had the technology we started making measurements we were the first experimental node so we we saw things happening how come we have a 50 kilo per second line the routing procedure either goes one way or the other one at a time how can you get more than 50 kilos per second between two nodes if there's only one path at any time and we say oh it's obvious that path is on now when it gets backed up you change paths so this guy's empty and it's packed back up while you're sending this way they go close to 100 calibers per second right too so i think but we could break it in words i said and every time we did we would call bbn and say fix it we did this fix it because they wouldn't give us the code they kept it proprietary until officer said we paid for that code you have to open it they did we saw it every time we got it and it would take them six months to fix anything right we discovered a fault this time we had the code we showed them how to fix it still took six months one of the things i was very much interested in with design was distributed control why right when i was a student of shannon and shannon's great work came when you had a lot of things interactive long code words for example that's when these emergent properties arise so i said i want to design large networks it's not a large network you can't have a single point to control you have to distribute it right so what does it mean to distribute control you're delegating authority to all the peers when office started funding the principal investigators they had the same philosophy say look you're a smart guy here's some money go do the thing you do best we're not going to sit on top of you make good things happen so here we are i'm a recipient like kind of money what do i do with it i've got my graduate students they're billion kids look we need a host host protocol here i'm not gonna sit on top of you gonna run with it that is not a product mentality right that is a research and development to create them and it worked so well so my favorite analogy to talk about how packets work is postcards so let's say that i want to send a 30 character message to my friend daphne at stanford but all i have is 10 character postcards so off i go i break my message into three bits of ten characters i write each piece on a different postcard i address with a from and a two address from chuck to daphne and then i give a sequence number so that when she gets the postcards she knows what order to put them back together so i have to label each of these and these are fixed width and fixed length they you know it's like a packet right it's i'm breaking a long message that might be very long into nothing so that each piece is a certain size so that we can all share it right and so then what i do is i send these i put them all in my mailbox and then i wait and this magical thing called the post office picks them up puts them in buildings people sort them they end up on trucks they end up on planes on trains on donkeys by hand and each of my postcards might take a different route i mean one of my postcards i should have a map here you know one of my posts not that one oops do that one of my postcards you know goes from michigan to chicago to kansas city to san francisco another of my postcards goes from michigan to chicago to dallas to denver to kansas city to chicago to san francisco and my third postcard goes uh really crazy it goes to cleveland and it goes to atlanta then it goes to washington dc and then it goes to chicago and then it goes to kansas city and then it makes it to san francisco now the fact that they took different paths and they might not even arrive in order some might get past each other they might get stuck somewhere it doesn't matter because each one of these has been labeled both with the from and the two destination so each of these intermediate locations doesn't have to get it to the final destination they just have to get it closer they make choices and even if they make the wrong choice it can be sort of dealt with one way or the other okay so this is some big mystery it's called the post office it just takes these little cards with labels and moves them it doesn't know if that's a youtube video or if it's an email it doesn't really care it just has these little chunks to move around that have from and two addresses i mean that's the essence of the network the internet the cloud that's why that's why we draw this picture you'll see like oh it's a cloud and that's because it's don't worry about what's inside here it's all super mysterious and don't worry about it it just comes out so after all that happens daphne who happens to have the exact same mailbox as i do it's kind of rare we both have a mailbox that's copyright creative comments that's what's cool about this mailbox at some point later these things start appearing she goes like oh looks like chuck is sending me a note but because of his limitation of postcards he's only sent me one i know who it's from and i know who it's two and i know that's the first of some number of messages and then the next day out comes another one because that was the one that sort of went the more southerly route and she goes well i'm missing something i'll just sit and wait and see what happens and then finally many many days later the uh the one that took the circa two is most circuit most roundabout route um comes and now daphne can reassemble the messages because she has the sequences so she simply puts them back together one two three boom so she puts them back together she has it she sort of throws the postcards away and she has the ultimate final message that's packets packets are breaking a big message into small parts labeling each one of them individually and then throwing them into the shared network and so this is what it looks like the post office in this is called a gateway okay come on gateway okay so that's a gateway so here's michigan here's stanford stanford has a gateway too that's like their post office in the middle is the post office box right and the post office box basically the post office has intermediate locations and it has trucks and locations these are links and routers and messages can take different paths right and then they arrive and they're reassembled and we have like their ability to hook from home and stuff like that so there's a local area network lan lan and then there's a sort of like internet the network of networks it's like the post office and it still breaks things into packets they still come out as packets and then daphne has to reassemble them on her computer to create the message so so the research network arpanet solved a lot of engineering problems so so i was a student at mit and i was scheduled on the wonderful scholarship program supported by mit lincoln labs to get a master's degree and it was a very rigid schedule you're going to be done in two years get a job at lincoln lab and do research and so i was on the program and i was one of the few people who actually finished on time and as i was finishing i scheduled to have my first child the summer of 1958 when i'm going to be done in that summer my professor at the surfer mechanisms lab at mit said you have to get a phd i said i don't want to get a phd i've done this program i'm scheduled my child has just been born so you got to do it so i kept twisting my arm and finally i said okay i'll do it but i'm going to do it i want to work on something that's really significant and not piddle around for the next three or four years so i decided i'm going to work for the best professor i know at mit and that was claude shannon the infamous wonderful magnificent person claude channing so i called him up and invited me to his house and we chatted a bit decided yes we're going to work together first thing i started working on actually was a chess playing program just working with a man who was a delight he was a great engineer great mathematician smart as heck could solve a problem like that i looked around at my classmates most of whom were working for him and most of them were working on the kind of work he had developed namely the field of information theory and coding theory and i looked at them and i'd taken those courses and i said you know the work that they're doing is the work that he left behind those problems that are left over hard and probably not of great significance little bits and pieces left i said that's not what i signed up for i wanted something to be fun exciting challenging and have impact meanwhile being at mit and lincoln laboratory i was surrounded by computers and i recognize you know one day these computers are going to have to talk to each other because this is way early nobody was thinking about that at the time but if they're going to talk to each other what technology would support their communication and the interaction and the answer is there was nothing available so i had an approach i figured the way to provide the communications would be to provide the ability for shared communication links because i knew that computers when they talk they don't talk the way i am now continuously they go blast and they're quiet for a while although i let it suddenly come up and blast again and you can't afford to dedicate a communications connection for something which is almost never talking but when it wants to talk i want immediate access so we had to not use the telephone network which is designed for continuous talking the circuit switch network but something else and i had an approach using some mathematical thinking namely cueing theory there was a model i could develop and it just made sense to do that which we had done in time sharing and time sharing you have a big computer and a lot of people share it when you're using it i'm not when you're not i am so we sort of interlace each other why not use communications the same way we're going to set up communications capability let everybody jump in and share and they only get to use it when they have something to send this is a new technology so there's an approach i have a mathematical tool to do it it's clearly important it will have impact and nobody's looked at this yet so there's a lot of low hanging fruit around it's not that hard it's not that hard so it's perfect for me so i started working on that problem now this was years before anybody needed this technology in time sharing for example which is the underlying technology that i adapted to communications in time sharing you want to let the little jobs go before the big jobs yeah because why should little guy wait a long time for a big chat he's going to get in and get out so when jobs come in you ask them how long are you and they're all going to say i'm tiny so you say okay you're tiny i'll give you a little bit of time and if you're tiny you'll be out of there no i'll send you to the back of the queue and you get another tiny shot the notion of round robin so you get a little bit of the time we're going to break you into little chunks you got a chunk at a time i said that's a great idea for sharing communications will give everybody a little bit of communications time the little ones will filter out the short jobs to filter out when i say job i mean message a short message will filter out and the long ones will take a little longer and they don't mind being interrupted by the little guys the important thing in this technology was not to make the very short messages wait behind very long messages this automatic round robin which is now called packet switching you chop things into fixed lengths you give them a little bit it's not that's not enough give it another piece and they go flying to the network on their own so the idea of packetizing was important the idea of distributed control the idea of large shared systems in which you get some terrific design benefits came along and so this got published mcgrawhill book nobody cared i published early yeah this is published my dissertation ended in december 62 i graduated in june 63 this book was published in 1964. and nobody cared nobody cared in fact i went to at t the biggest network of the time and i explained to them you guys ought to give us good data communications and their answer was what are you talking about the united states is a copper mine it's full of telephone wires use that i said no no you don't understand it takes you 35 seconds to set up a call you charge me a minimum of three minutes and i want to send 100 milliseconds of data and their answer was little boy go away so little boy went away and with others developed this technology which ate their lunch but nobody cared and they said it wouldn't work and even if it did work they want nothing to do with it so that was the environment we faced it wasn't until years later when the government decided they needed a network that suddenly i saw a way in which i could implement the technology i had but getting back to what i said earlier i set up this mathematical model it was analytically intractable and still is by the way i had two choices one is give up and find something else or two make an assumption which allows them to move forward so i introduced a mathematical assumption which cracked the problem wide open from that point i could just sail through the solution get the get the performance behavior get the design principles going forward but then the question is was that assumption any good what was the assumption the assumption was what i call the independence assumption and it's absolutely a false assumption it says when a message travels through the network it changes its length independently every time it hits a new node on the top through the network right mathematically that creates an independence which allows you to proceed with the analysis but it's clearly not true right so what i had to do was to simulate a network with and without the assumption i simulated many networks on a machine at lincoln laboratory on the tx2 transistorized computer there and i spent four months writing the simulation program without debugging a single line of it at a 2500 line assembly language simulation and i knew if i didn't get that simulation right i would get no dissertation ran it tested with and without the assumption and the results were amazingly close so i had my solution i could prove it work the package wouldn't fall on the floor i could tell when things would work well and when they wouldn't got published again still nobody cared about it as i said lincoln laboratory sent me for my master's dissertation they also resent me for my phd so they supported me for years wonderful economic financial research environment support and i felt an obligation to work for them and i was prepared to take a job at lincoln laboratory which is a great institution and so i went when i went to work there the first thing they said is look len why don't you look outside before you can commit to work here make sure there's nothing out there that you really would like better this was a gen a magnificent step on their part so i took a trip to the west coast i went to some of the aerospace companies i was not interested in university position at all really but it turns out when i was going up to san francisco to look at some of the hightech companies up there a friend of mine suggested i interview with berkeley so i did i interviewed i came back they lost my case they changed the uh the chairman i never heard from them but on sabbatical one of the professors that interviewed me came to mit while i was just finishing myself my phd then and he sees me and he'll says klein rock how are you and he thinks that i'm looking for a p a an academic position he contacts one of his friends here at ucla who then invites me out here offers me a job and now i've got a dilemma do i want to teach do i want to cross the united states it's almost like on a wagon train 3000 miles away from the east coast where the world is family is for a job paying half that i could earn back at at mit lincoln labs and try something i'd never tried before so i went to the box at lincoln lab and i said look i've got this offer it looks attractive it's it's a new challenge what should i do and there was a wonderful answer they gave they said len try it if you don't like it come back wow wow it's right yeah well i came here in august of 63 50 years ago and i'm still here so here is an example problem to solve now none of the mailbox run of the routers none of the post office offices know exactly where the thing is going and they don't transport it to the final destination all they do is they transport it to the future to a further down destination but what if they get it wrong what if one this is like michigan this is chicago this is dallas and what if michigan thinks sending to chicago is a good idea chicago thinks sending to dallas is a good idea and the dallas thinks sending to michigan is a good idea well then michigan is going to get it again and send it back to chicago and so then what you end up with is this situation where your packet your data is in a loop right this wouldn't be good for the post office and it's not good for the internet so you have to say how do we solve this problem when something's wrong right it's you wish it were perfect but it's not and so this is the kind of research question as to how to solve this kind of problem and we'll talk more about this in a bit uh when we get into a little more technical detail but i just wanted to sort of say that's the kind of research in engineering that took literally 20 years and four different versions of it of the arpanet to get right there was this whole world of of coders and hardware guys in the 60s and i thought to myself i bet there's a really interesting story here so my editor at simon and inchester was totally 100 behind it uh we the working title was really bad it was called building cyberspace so we knew we needed a new title and so and matt my late husband didn't come in on the project uh he was actually a better writer than i am and a wonderful just had an absolutely incredible mind and could grasp anything and uh he didn't come in on the project until about maybe a year into it when i was getting overwhelmed i had this new baby and i was working at newsweek and i was uh and i realized that there was just more to the story than i could do myself it would have taken me like double double the time so um that's when he came in on the project and i found indeed that there was this incredible untold story of not so much the internet so we have to keep it really clear the arpanet and how that started and um in fact matt's the one who wrote the chapter the fastest million dollars which is about how it got funded um at ipto the information processing techniques office at what was then derpa and then became urban and darpan and arpagon and uh these people were all as i had hoped incredibly interesting really smart and uh and had this new idea for how computers could talk to each other and um one of the most amazing things was uh visiting um larry roberts who was running ipto at the time that this whole thing was drawn out we were at his house in woodside and we went out into the garage this is how unresearched this topic was because you know huda thunk right and we go out into his garage and there are all these boxes of old mildewy papers and he starts pulling them out and they're old letters between him and people at mit and then he pulls out this amazing set of sketches of him just it's like remember when um trudeau doonsbury did inside reagan's brain this was like inside larry robert's brain he was like just sketching out all the possible configurations of um what this network could look like and i've got these pictures in the book which you can show but here you know you know these these are all his very early diagrams um just sort of popping out of his head this is when this is you know the the early nodes on the arpanet and i just loved finding all this incredible primary source material and it was a it was uh i felt like i should have been paying somebody to be able to do this rather than right because it's just in a it's in a garage that millions of people drive by right and it's also this important artifact yeah of the what we're living right now right and we were able to sort of you know capture it and bulk baranika newman was a big force behind the book the book was in part their idea and so these guys because what we tend to forget is that bbn they built the first amp and the interface message processor in fact there's a very funny story in the book where ted kennedy you know senator from massachusetts sends a letter to bbn congratulating them on getting the contract for the interfaith message process i know uh so a completely uncharted territory and they had to build this piece of hardware which they did and program it which they did a whole new thing and uh it was uh so i spent a lot of time with the folks at bbn got to know them well and that group they were completely on school in talking to you know reporters or a book researcher and there's this one guy ray tomlinson everybody said oh you should go talk to ray because he uh came up with the at sign i said oh really okay and so you know there's this wonderful really quiet guy ray tomlinson sitting in his office and i knocked on his door i said i understand you came up with the outside he goes oh yeah yeah and then he explains to me you know how it is that he did this and then you know and now it's a huge legend that ray tomlinson did this and uh and uh other and some the software guys uh really i have this image if you sort of just driving and driving and going and going back and forth i mean what how long was the research how long did you research this was this i think yeah the research took a couple of years and it wasn't so much driving that the hacker book was like driving all over all over the place because that was three different stories of three different hackers this was more in fact email between the hacker book and this book and the and wizards so 1988 and like when i started this book 1990 email had come it was much more popular so there were a lot of we did a lot of emailing back and forth i spent a lot of time i did go from i was living in austin at the time i did go from um uh austin to boston a lot and i spent a lot of time actually i did fly to la and spent a lot of time with john pastel who came up with the domain name system and um uh and he died in 90 i want to say 98 99. that was shocking uh i spent a lot of time with him tell me about it um tell me about john well john uh so anyone who's ever seen a picture of john maybe you have one you can dig up this very long kind of santa claus like beard and what's amazing is so i spent a lot of time at his house he lived in a teeny tiny little house in uh in the la area and uh with his girlfriend this very nice woman named susan and uh on the refrigerator there were all these family photos and they all they were all like these uh people with long beards long white beards and i thought one of an interesting family and he drove i think this kind of beat up volvo or something like that you know something completely unpretentious and lived so unpretentiously and uh and had all his files like right in his study in this little house all this history and also at isi where he worked in marina del rey and uh and we spent hours and hours and hours together first in boston um at where we were both at a an anniversary party of the um of the arpanet and we spent a lot of time together and i thought you know this guy is key and he was so quiet that sort of getting him to open up really meant spending a lot of time with him and he was oh and we met at one of the very first inec conferences in 1995 in hawaii and spent a lot of time there and he just was so patiently trying to explain to me um things but i'll never forget this one thing that happened with him in hawaii at the inec conference it's the internet society conference one of the very early ones and uh and i just was asking him some questions and he goes uh he looked completely disturbed and distracted and he said no no there's someone over across the room i have to talk to and it was someone from a very small country sort of wanting to talk to john about their domain the country's domain name or something but to john it was far more important that he deal with this person's problem then you know then cement his place in history in this arpanet history in fact when i was working on the book i sent him an email i'll never forget this i think i don't have the email anymore and i said just out of curiosity why haven't you ever like wanted to get rich because that's when people were just starting to get rich so this was in 95 and he said it just that's just not what this is about isn't that a wonderful thing it is yeah and that's who john was one of the things that i've been curious about is how this got by att right how this made it past 18 i know talk about no vision right and uh well you know paul barron had happened he had couldn't convince at t to build the very uh marvelous network that he uh designed and then these other guys the next guys the next crew that came in uh and they just they were very very you know think about it back then it was they had a monopoly what did they really care they had um they had the um bell uh research labs and they it was a noninvented here kind of syndrome and they they didn't see they didn't see it i mean talk about no vision they simply didn't see it but i think the fact that not invented here part of it was um like what would we need uh what would we possibly need this for yeah they were in a context they were in their own context yeah but thank goodness i mean thank goodness they didn't get their hands on this thing the same with ibm sorry you know just we don't we didn't want corporate america or deck for that matter um the original hardware was um based on a honeywell machine and thank goodness honeywell doesn't exist anymore uh it sounds terrible that i'm saying this but it's but it was all kind of happy accidental sort of coincidences i think al gore is oh what oh totally underestimated and underappreciated is that what you were going to say oh yeah i mean why mock him every time every time i tell people i wrote a history of the origins of the internet um people say very mockingly oh did al gore invented and i won't play into that he played a huge role in terms of policy and direction and uh and when uh clinton was uh running for president you know they were out there with this very important uh technology white paper that uh uh i mean you can't do things like this unless you have the support that people like al gore provided by the end of the 1970s there was quite a sophisticated network like i said they'd rewritten it four times it had gotten to be very sophisticated there'd been a good investment they had been careful about understanding how to improve it each time they rebuilt it and so it was a really a fine working piece of software and the people who used it at these research universities and um at the military it was kind of like a futuristic world right you could send email and a second later it would appear right it was really quick and everything was nice and you could even have instant message like interactions where it went right then and the problem was is this was a small group of people this is maybe looks like 60 or so that was all the computers on the entire internet right i mean now we have our cell phones and we got billions of them right but this is like 60. um so real question is how did this go from 60 computers of a very narrow group to a much larger group and the answer to that question is at urbanachampaign illinois and so at the same time that this kind of goes back to bletchley park right where the computers were part of science throughout the 50s and 60s and 70s scientists much like the military realizing the computers were mighty useful to advance scientific research and so the national science foundation would fund universities to buy computers and they'd say give me 10 million dollars to buy a computer and another universe would be like give me 10 million to buy a computer and then three years later the first university said my computer's obviously i needed another 10 million dollars now the research questions were good research questions and they were important to society but the national science foundation got tired of giving 10 million dollars to every everybody i was part of this because i used to be a high performance computer guy this is a convex c3800 supercomputer uh i would be about this tall on this super computer this is a lovely and very expensive model that i was given after afterwards they were going to throw it away because this is from like 1987. um and and basically i wanted one of these terribly badly each one of these is about two million dollars this is like two four six eight ten million dollars and i so badly wanted this and i thought that i i deserved a ten million dollar toy and i could do such great research but unfortunately everybody else wanted the exact same thing and they were important too so the national science foundation said to themselves hey this isn't going to work very well if i can't find my pen um you know we're not going to we're going to make a network how about we put a few of these things in and then make a network and connect them together of course it's never as simple as that so now we're going to meet larry smarr at the national center for super computing applications ncsa at the university of illinois urbanachampaign and larry was the director of ncsa and one of them one of the many people but one of the most instrumental people in creating the national network that we now think of as the internet and getting it moving it from being a research project to being a project that we all both academics and regular people that we all can can make really good use of and so let's take a look at larry smar well i am a trained relavistic astrophysicist and i got my phds always in physics departments working on astrophysics problems involving general relativity gas dynamics and so forth and so in the 70s when i was developing what is now called numerical gene relativity which is the way to solve line sense equations for dynamics of black holes colliding black holes or in astrophysics that require generality like supernova events and so on uh i had uh to go and get a top secret nuclear weapons clearance to get access to supercomputers because in the mid 70s the only place to get a supercomputer was either at livermore los alamos or uh in one area which was weather now astronomy has always been a driver of supercomputing and in fact on johnny von neumann's computer that was built by the institute half of that and went to army to aberdeen half of that was used of course for the army for trajectory calculations but the other half was used for stellar evolution so astronomy and von neumann's interest in weather meant that astronomy and weather for 50 years basically have been dominant drivers of supercomputing usage and yet uh to do pure astrophysics you're having to get a topsecret nuclear weapons clearance now nobody seemed to think there was anything unusual about this um and so i just went ahead as a postdoc and i would get a few months in the summer work 100 hours a week and then the last of the year i'd have to live off that go back to harvard where i was a junior fellow try to explain to them about you know one could solve the laws of physics that we had been laying down for 300 years and incredible detail for engineering devices like nuclear weapons that put on earth temperatures of the center of the sun stresses beyond anything that we could imagine in academic problems that we're trying to solve in lots of disciplines so this thing could revolutionize academic research well nobody got it it was like i really felt like i was transitioning in a flying saucer between this advanced civilization at livermore and the stone age culture at harvard and harvard was as advanced as any place and thinking about this so it was a what i did not figure this out until it was in the early 80s and by then the first cray had gone into the continent of europe in an open scientific institute the box plonk institute of physics and astrophysics so i'm over there in the summer along with people like dave arnett who is one of the great supernova super computer guys in our country and people in chemistry and it was like paris in the 20s with all these expatriates sitting over there and and we're like trying to figure this out like it's an americanbuilt supercomputer right why are we in munich right i mean this is very strange so um but you know in america we don't question the infrastructure somehow i mean it's just like it's either there or it isn't there or that's just the way it is but i was having a moss of beer late one night actually think it was a second masa beer with my german host who had also been born like i was postwar and he finally turns to me and he says aren't you ashamed of yourself you big rich occupying country you come over here in our little country and and we finally get enough money scraped together after world war ii to buy one of these super computers and you americans come over here and use up our time it says how did you guys ever win the war you know what what is going on here and so this finally sort of just stimulated me to say what is going on here this is nuts and i went back and i found out for instance that after the sputnik program the federal government had funded the universities built the science buildings started the supercomputer centers ibm would go around and give away almost the mainframes and and so the scientists in the 60s took it for granted that they had the fastest computers in the world in academia but about 1970 with the starting the vietnam war and with all kinds of guns and butters issues and everything else that stopped and in fact to give an example by 78 half the number of phds and engineers in engineering was being generated in our country as there were in 1970. so there was this complete severing of the sputnik era partnership with the federal government and it was particularly bad in computing to give you an example when i was at livermore in in the 70s there were four cdc 7600s which were just one of the finest supercomputers ever built no american university ever took delivery of a single cdc 7600 in fact the university of illinois when i first got here had a cyber 175 which was a retread a second design manufacturing of of this thing and we were one of the first universities that had it and people all thought that you know illinois naturally was way ahead of everybody else so it's like we were just completely divorced from the private sector that was generating these wonderful machines because of federal policy which was to say these things are only are so valuable that we can only afford to put them into war environments so after this german encounter i came back and i said well gee i wonder how many other scientists like me are there so at the university of illinois i started calling cold calling my colleagues and saying hi you don't know me i'm a little assistant professor but i bet you that your research is blocked by lack of access to super computers uh and they'd sort of say like who crack wreck who is this you know grant call and but we'd start talking in chemistry and biology and agriculture and so on and sure enough it turns out that that that was true they knew how to do the science they just didn't have access so i said well send me a little prospectus of what science you could do if you had a supercomputer well i ended up with 65 faculty in 15 departments on one campus and i thought this has got to be this way all over the country so it was i really started saying well gee somebody's got to raise this issue and about that time there had been a lacks report that had the federal government had done to begin to undercover some of this stuff but they still weren't i remember peter lax he was one of the greatest mathematicians uh head of one of the top people in the kron institute a long time advocate of things computational and i had this long long battle with peter because in the draft report of the lax report it was not it was going to say well yeah we ought to get one of these super computers and make it available to the universities but you know let's put it livermore put it somewhere that people know how to do this stuff and a university was not on the list of what the lacks report considered to be appropriate sites for a supercomputer so i had this long battle over the telephone i remember with peter lacks sort of david and goliath because i mean he was this giant of the field i'm nobody and um i i finally convinced him not to exclude universities as a possibility even though he felt that it was fairly unlikely that any of them would be able to play with sharp instruments and not hurt themselves so i mean you gotta understand the world was totally different when the supercomputer centers program was coming into being and people it's so hard for people now on the web and everything to go back to that time there was no internet you know there was there was these wonderful people vince cerf and bob khan and all these people bill joy who had developed tcp and and and embodied it in the arpanet this was a few computer science departments and military okay nobody in a physics department or chemistry department ever heard of the arpanet much less had any access to it but it was obviously the right idea and so once we got the congress to put through money for a national supercomputer program then there was a national competition and and and so on and the five centers were selected the first thing then the nsf realized well okay now we put these in place to be providing access to academic scientists and yet uh like they have to fly to champaignurbana like i had to fly to livermore okay this isn't right so there were a lot of discussions then but the trouble was that the telecom lobbyist in washington would block any discussion of the federal government putting in the kind of network we have today which is what people wanted i mean everybody knew that they wanted to have a ubiquitous email persontoperson network but as soon as they'd start talking about that the telecom lobbyist would come up and say no way guys that's private sector don't get the federal government involved in that stay out of it so what we learned early on is real interesting it's like if we had argued instead of the super computer program let's get the federal government to buy everybody a personal computer which was ibm personal computer was two years old in 1985 and put on people's desk okay again this would be an interference with the private sector um so but we said oh we'll just take a few of these esoteric supercomputers and they said okay that's right there's no market there that's okay the federal government has a role well the same thing with networking what we said is we just want to put a highspeed backbone across the country to connect the five centers and and the telecom people said okay that's cool you know 56 kilobits was the national highspeed backbone less than isdn today yeah that's not a market okay and and we said we got a few of these weird super computer types who are out universities who want to hook into that they say yeah that's okay that's not a market you can do that well that was the nsf net backbone then the regionals got funded and then the campuses were afraid that if they didn't dig up their quad and put in some fiber then the professors who wanted to get access to supercomputers would go to a university that would do that so gradually the whole internet emerged out of the the the sort of policy vice you get into washington where you can't do the right thing you have to do something that seems irrelevant but has a logic to it that will gradually bring the market forces into play that will spin out ultimately a whole industry so i hope you got from that that it wasn't trivial it wasn't like somebody just walked out and said hey make a network i mean there were forces powerful forces the telecom lobbyists that did not want this to happen and we will we will see these telecom lobbyists a couple times as we progress through this lecture so larry smart and the folks that made the supercomputers convince congress to authorize the the giving of a grant to build the national science foundation's network it was going to use the tcp protocol that the arpanet had built it was supposed to be inclusive at least for research academics and it was you know research universities would we want to get them connected and so our story now leads from the university of illinois urbanachampaign to my university the university of michigan now if you take a look at this arpanet picture that was sort of right before well 1972 but if you look at all of the arpanet pictures there is a glaring omission from my perspective declaring a mission on all of these i wonder why aren't we there well there's a very good reason why the university of michigan is not on any of the arpanet pictures and that's because we build our own network we build a network using lease lines a threenode network between michigan state university university of michigan and wayne state university we were sharing each other's compute resources we were using each other's computers interactively we were playing online multiuser games we called them adventure they were all based on text but they were great fun and they were great community building we had chat forums we had all kinds of things and we used each other's software and it was a is a cool little world and the arpanet wasn't seen by many is all that significant it was kind of a experiment right it was a research project and we were a researcher we were production merit was production and arpanet was research so there you go right so there was actually a lot of these sort of like nascent networks out there early days and so the university of michigan sort of never really was significantly involved in the arpanet work but the university of michigan being a large university did want to get a supercomputer center and because of some strategic blunders as doug van hollen will soon explain to you um michigan didn't get a super computer center and so the idea was is we would do what it was going to take to get the network because that might be more fun so doug van hollen at the time was the chief information officer at the university of michigan having recently arrived from carnegie mellon university and he was also the chief of the merit network the network that connected our three schools and so they they figured that once they didn't get a super computer center they better really pull out the stops so to get so that they would get the nsf net and of course they did get the nsf net and doug van hollen was the principal investigator for the nsf net starting in 1988. so let's let doug van gaaling talk to tell you the story and i'll be back in a moment back in the mid 80s the national science foundation decided to establish super computing centers and the university of michigan was one of the organizations that made a proposal for a national super computing center the michigan proposal had as a as its primary hardware artifact a machine that was built in japan and i explained to my colleagues my new colleagues the university of michigan having just arrived that it was highly unlikely that the proposal would be funded a short while later i was visiting the national science foundation and i had gotten to know not well but had gotten to know eric block who was then director of the national science foundation and eric and i had a conversation about michigan's proposal and um it was clear to me from my conversation with eric that there was no prospect that the michigan proposal would be funded i said to eric i said well it occurs to me that what might be even better for the university of michigan than having a supercomputing center is to run the network that connects all of the supercomputing centers together i had an old friend who worked for ibm research by the name of al weiss who's in charge of all of ibm research's computing facilities and i called al and i said al uh this is a great opportunity but ibm is going to uh is is not going to be successful here and um i need your help and so i also rallied some folks from ibm research where there actually was work going on in tcpi protocols we got tentatively an agreement from ibm that they would contribute the hardware and the software to create the routing structure for the network but we still needed the communications facilities and at that time the cfo at ibm was a gentleman i think i remember the name correctly by his last name was crow and um so through ibm we went to him and he had contacts with a former ibm employee who is now the network that chief technical officer and essentially the chief network operations officer for mci his name was dick lee paper and so ibm approached dick lee paper and asked him if mci would be interested in providing the communications facilities for this network well as you may recall at that time mci was this fledgling organization some people had described it really as as a as a law office trying to create an environment where they could actually offer telecommunications services up against att's lobbying efforts and they were they had just been successful in that they were establishing uh facilities across the united states and uh and dick lebhaver saw this as an opportunity to sort of move mci into the big time um to be part of this nsf net proposal and so we wound up with an agreement that we would file a joint proposal with merit as the principal organization in partnership with ibm who would build all the routing hardware and software and with mci who would provide the nationwide communications facilities and while we were and then we got governor blanchard to commit a million dollars a year from state funds in addition so we wound up being able to submit a proposal to the national science foundation i think for something like 14.7 million dollars because we knew the ceiling was 15 but in fact by including all this inkind uh activity it was actually more like a 55 million dollar proposal it was designed to start at t1 or 1.5 megabits uh with planned upgrades over the over the period of the network network's life um we've subsequently learned that uh the proposal was received with considerable skepticism by the reviewers of the national science foundation uh people really wondered about our technical ability to pull this off but uh the that review was conducted without reference to the actual funding pattern and then when the raps got pulled off of the amount of resource that was being committed by the partners to this proposal it immediately went to the top of the list at the nsf and and a short period later we received uh informal word that they wanted to negotiate with us about sort of working this all out but we had to do a lot of innovation uh the border gateway protocols had to be developed to allow multiple networks to interact with one another and we had to build increasingly more capable routing and communications facilities when we started the network we had t1 circuits but there were no cards for computers that would go at one and a half megabits we used the t1 circuits we subdivided and built a mesh network among all of the routers that we put in place it wasn't for about a year ibm was actually to build prototype cards that would go at one and a half uh megabits when we put those when we put those cards in our test network we discovered they they worked just fine we put them in the production network the network started failing on us and we discovered after uh after a very tough period that the folks who had built the t1 hardware for mci had planned on using certain bit patterns to do diagnosis on the network and it never anticipated the notion that anybody would ever use a full and a half megabits as a single channel they had always thought that it would be broken up into a set of voice uh circuits at 64 kilobits each and so they didn't have any worry about these patterns ever appearing on their network well it turned out that that happened with some frequency uh on the nsf net and it took the communications line down when it did so they had to reengineer their hardware to undertake this we actually had for a short period of time put some translation circuits in our routers that actually looked for these bit patterns took them out and replaced them with something else uh and then reinsert them at the other end uh to make it work over these t1 circuits so we had a lot of adventure finally in i think it was around 1990 network was growing so fast that it was clear that these t1 circuits were not going to we're not going to enable what we needed to do so we had to go to the next step which was ds3 or from one and a half megabits to 45 megabits which was a very large step a 30fold increase in capacity and in order to do that um we wound up creating another notforprofit organization called advanced network and services merit was still the principal investigator on the grant but it subcontracted the development of this new network this 45 megabit network to advanced network and services which was headquartered in armonk and uh and ibm mci and uh nortel who uh all contributed three million dollars to the founding of this new uh organization so it had the uh the staff and the facilities to do the innovation that required us to go up to 45 megabits that did accommodate our capacity needs over the life of the nsf net the nsf net was the fastest internet network to the end it finally was decommissioned in 1995 when the congress decided that the federal government should not be in the business of supporting something that by that time in their view should have been become a commercial facility i'll not ever forget sitting in a house hearing room in the capitol and next to mitch kapoor and um some internet uh some small internet company uh startup ceos who were complaining uh to the congress that it was inappropriate for the nsf net to be funded by by the national science foundation when they could provide this service as a commercial service at the very same time they were making that complaint they were using nsfnet as their backup network to carry traffic when their much less reliable networks failed on a national scale mci of course turned out to be a major internet service provider also using the same technology in a in a classic um innovators curse moment ibm who was at that time the leader in routing technology for uh internet for internet backbones managed to decide that they should kill all of the work they had done in developing these routers because it would threaten their proprietary network efforts it's probably almost singlehandedly responsible for the fact that cisco became the dominant router company in the united states rather than ibm so so as you can see none of this is easy it wasn't easy for larry smart and now we basically have the lobbyist once again the lobbyists are deciding that there's only going to be 15 million dollars because if it's 15 million dollars they can only build a 56 kilobit line but michigan thought outside the box some people might say we cheated other universities wanted to get the grant kind of thought we did cheat we didn't play by the rules like in star trek we rewrote the rules so we got it and we slid underneath the nose of a t a one and a half megabit network that started started large and started fast and got faster and as doug talked it was a very very very successful network and it it didn't it had followon effects just like larry talked about it had these followon effects of causing campuses to build networking because in would come this really fast national network so you better fix the oncampus networking so it was really quite wonderful and the partners ibm mci the other thing is is a t was being beat up by mci at the time and maybe they weren't noticing so we might have been lucky it could easily have been two years earlier or two years later it might not have worked so whatever it did work and and we can be very grateful so the university of michigan was sort of the center of they ran the network operating asian center and did the network design worked on the software with ibm and built the network and um it had a very exponential growth as it went forward this building right here is on our north campus and it was for me personally the very first place that i typed the first characters that went across the internet i walked in this door to i wasn't at the university at that time but i had friends here and so i came in and i was typing on you know hello on the internet so this building was where the network operation center was and um where i touched the internet for the the nsf net for the first time so it started out real simple but its goal its goal was to enable connections to other networks the regional networks got formed larry smart mentioned that and so then the backbone became sort of a forcing function to get more campuses on and more and more states etc etc do in the case of ghana private sector led government was not aware government was not interested and so the private sector took it out but the private sector we're discussing is me i'm not exactly private sector i'm academic only i did this job through the private sector meaning that i realized that you can wait for the university forever because they depend on government and you can wait for the government forever they have no clue so i actually have been known to have said publicly that i cannot wait for the government to do it for the country so i know how to do it i would do it no matter how small it is just to make the point that we are able to do it in so doing maybe i can create an avalanche that will carry through the momentum and that is what i try to do in the case of them now on the continent as a whole they have variety like in the case of egypt where the minister there happens to be one of our counterparts from internet society isak and that's tara camel and so there was a heavy government success built in other places like south africa there was good academic dose so it has varied depending on on the settlements but i think in much of west africa the trust had been principally from private sector because i also went around helping togo private sector helping gambia private sector and so even nigeria giving them intellectual property so they could also begin to do it so it became privacy helping private sector but for the common good because we really felt that we had to go together otherwise things would just disappear i allow some countries to transit their data through me and togo was an example but in other places i actually sent engineers to install notes for them and gambia was an example in other cases i actually trained people like swaziland they brought the telco people to me to be trained in other cases we did consulting services to help ethiopia and so on and so forth so that was roughly the progression in that the names had to confess but i was meaningful and we had to move mail and so we had to do that and then the next bit was get the capacities connected and download was a madras but it was a good community activity in the sense that we wanted to help each other and that has continued till now because now i actually run the african network operators group and the principal function of this group is to sort of help operators support themselves and usually we support ourselves with building our capacity in many different areas mostly in infrastructure related things like routing type of issues or server services type of issues for those who want to build information resources um the afnog has now become the meeting place for most of the technical community and we meet only once a year and when we meet his life for a product of two weeks within which we spend one week to train whoever has been admitted into the into the workshops and we run four workshops in parallel now it didn't start as four it started as just two and then we've added as we went along we even have a french track in the in the routing side of things um and when we meet after the workshops for the students then we try to sort of induct the students into what the real world is so we follow the workshop with meetings and the meetings including lots of parallel sessions those who are following the affiliate meetings will get to do that those who may be discussing some tutorials maybe in security we'll also get to do that and then we also have a day for like conference presentations or 20 30 minutes from a variety of different areas and so that has now become a major meeting place for the engineers and once a year we all congregate and it's supposed to be service to community type of thing in that nobody gets paid but we try to raise money for the student participants to come and we've been getting funding cisco has been a regular funding source and we've got funding from idrc internet society francophone and a whole number of others but over time we're trying to change our programs so that we become more selfsustaining so participants who are coming in from let's say operators telcos and so on we insist that they pay more of their way so that we can raise funding for academic and research people to participate and so on and that was really how how things are and it still continues to be a major meeting point for for many of our operators of course once we've got the connectivity in then there's a whole host of other issues that began to show up but we thought all of them can be solved within the same environment so you have necessity issues oh you have aftld let afj focus that you have a research and educational network challenge or build a consensus around the same meeting place so to understand afnoc has moved from being a workshop type of thing to a meeting place where many new things could be incubated and allowed to blossom and take on their own life now the particular case about the was interesting in that we it took us 10 years to get to accreditation of course in the beginning we actually knew what it was we knew was very important and for engineers we knew that that was what to focus on none of the other things so we began to build consensus around it you know a proposal was made first in 95 then 97 a formal document and then we moved on but we realized that we had to build something more than just casual meetings so we went deliberately to tottenham to agree on specifics and the specifics was who becomes a member of the board and we decided to do it geographically okay so that we don't get too much caught into why is that there are so many people from the north and nobody from the south so okay each one of the sub regions gets to elect one person so if the members who elect that person and that person would save for a period of one to three years depending on the staggering and that is how that one was okay but the the difficult thing with that was as we're learning that meant more and more were coming so when whenever we thought we had an agreement on something we're about to move forward like in operation then more people come one case was very disturbing and then that's uh sort of a moment and that one john kuster was also there this was very early and he had agreed that me just do it you have to do it has to happen so i invited them all to a meeting with the african engineers and everything and suddenly somebody got up and said no no no why don't we share it up into the countries and have this all go our separate ways and i mean at that point i thought that was the end of the world and to be honest with you i've never felt so ashamed because i was a bit of an interface between the african technical community and the global community i knew young poster myself personally and they've come to sort of help me and my people were not ready so all john could say to me was get your people ready and you will have it so i had to continue until i was able to build sufficient consensus and in 205 began and at that point was also evident that if he has taken so long there are maybe two factors i have to consider in 10 years i would have upset a lot of people and this could be real in the sense that the regis three registries had to give up something for affiliate to exist so it's inevitable that i would have made a number of people in those three registries uncomfortable so for me it was obvious i could not continue in the same capacity of course i didn't tell my colleagues that this was my real feeling but it was also true that if i were to stay there i'll get less participation i'll have less motivation for people to you know make an effort and what i needed more was more people making effort than just one person driving things because i knew that the space was so large that even if i had nothing to do with these things there was plenty for me to do so the strategic thinking was find a way to exit without telling anybody make sure you don't give up too much information for people to capitalize and game on it so everybody thought i was indeed going to be the next official chair not the you know startup chair but official chair and i let them think so but when it came to the board meeting i decided to dissolve the board and i got vote for it and then i decided i would not run again and at the same time certain people have been you might say controversial in their contribution i try to urge them not to and in some cases i even told them that if you tried i would martial the community to vote you out and in some cases they tried and they were voted out but that created a certain flow of uh maybe new entrants wanted to contribute service to the community and that has continued till now and and i think that that has been a very good thing and of course we also observe in the case of afrin that the ability to make local policy uh does affect the effectiveness of you know the task at hand so for example we know that uh soon after accreditation the type of membership we had begin to skew more towards the smaller size because majority of the operators were actually small operators and they were trying to fit into a large markets a large operator community environment when we were working with right and arranging and so on and that wasn't working so well so by us changing the policy to recognize the size the two sides of our operators were able to increase the membership and beyond that we realized that our location also we changed the policy so that our location sizes were smaller than the normal that a person a typical operator will get so by knowing the community and making the policies the community making the policy to suit itself you're able to get a better match to the needs of the community and and that has shown in the growth and uptake of at least ipv4 addresses from affirmative now one of the things that was quite interesting is we in the academic field had the right to use this network but when it first started out it was supposed to be academic only and then once it was established in the late 80s and early 90s there were some people that started sort of like bending those rules or bypassing those rules or ignoring those rules and it wasn't really clear who was supposed to police those rules and the people like at the university of michigan they their heart wasn't in reducing who would use the internet they wanted to expand right and so there were places um often bulletin board systems uh would somehow get a connection to the internet and then they would give internet access to a bunch of nonacademics and so it became increasingly in the late eighties understood by everyone around the world but this is pretty much nerds right they can sit with a screen with a command line interface with the text based screen and they can get excited about that i'm i'm like that i can get excited about things that are nongraphical because i just make it up in my head but we needed something to pop this into the collective consciousness of all humanity rather than just academics first and then nerds second but that was about to change so i started our picture where we had super computers at university illinois we went to university of michigan we got the nsf net funded and now we're going to fly across the ocean to cern cern of course is a high energy physics laboratory they do this 26 mile circle and smash particles and take pictures of the smashing particles and looking for the higgs boson or found the higgs boson um it's a really cool place i recommend that you visit the cern is a place that physicists from all over the world visit live at and collaborate with for experimental physics it really revolves around those experimental facilities and so regardless of whether you live in russia or australia or germany or america or japan if you're an energy nuclear physicist you have got to work with cern or spend time at cern and those who spend time at cern tend to make the best discoveries and so these projects have such long lead times and they take so many different kinds of talented people you know they're metallurgy welders physicists engineers designers project managers there's a ton of people involved in it and it's a pretty well funded operation and everyone's pretty smart so one of the things that they do is they have fun they have these clubs like the softball club the cricket club the blues club and and it's kind of like these people are somewhat away from home a lot and so they just have fun with each other this is a picture that i will show you of the cernettes they are famous for being the first band photo on the web some people wonder if they're the very first photo on the web but they uh are a doowop group and they sing sort of 50 style doowop songs they are very fun to watch but their songs are about like particles and internet and modems and stuff like that stuff that i care a lot about um they sadly they've been they've been doing this since the 1990s um you know 1991 92 kind of time frame um and they all grew up and their kids grew up and their kids were all in college and so they they did their farewell tour in 2011 and i and one of them's moved to australia so we don't know if the cernettes are ever going to get back together and sing but for now they're on permanent hiatus but for your viewing pleasure take a quick look at one or more of the cernette songs so like i said you should go visit cern i have had the great fortune to visit cern i have visited cern with an on professional uh in a professional role i help them record lectures with my synchromatic software that you may have heard me talk about um i i have visited sort of in helping other technology things and i uh teaching and learning with technology and things like that and so they've got a a wonderful cafe and if you're working with people you get to go in the back and hang out that's pretty cool they also have a wonderful museum that you can go see the first web server and all kinds of other cool stuff and uh in 2006 06 i was lucky enough to have an invited talk at cern where i talked about sakai and how they might use sakai to do collaborative work and i brought my family with me and so my wife theresa and my daughter mandy and my son brent and there is me we are in the pit and this pit is like like eight or nine stories underground it is six stories tall this is where the beam comes in right here it's three stories from the bottom of the pit the pit is six stories tall at this point the it was only less than onethird complete and so we could go on a tour and so i have a family photo with hard hats in the cern pit and uh that's pretty cool another time i visited um i went and sang with one of our university michigan physicists and that would be this guy right here his name is stephen goldfarb and he's a physicist that works on the atlas project um but he also is the bandleader of an all physicist band called the cernettes of the canettes blues band and he let me sing a song i i was coming to do some video work for him i happened to be in the area and i just stopped by on one of my trips and me and another michigan staffer we grabbed a couple of cameras we made some music videos for him and put the cernette some of the cernette's music videos up on the web and then they let me sing one song called i got got my mojo working and so i've got i'll share with you the video i've got my mojo working this just oh so everybody in this band is a physicist and pretty much everybody dancing is a physicist too now the reason i'm showing you all this is to give you a sense of the energy and joy in addition to the hard work that goes on at cern you guys are all going to be on youtube soon this guy's got more channel than that though he tells me he doesn't just do the gym i'm going to get him up here if you guys help me you make him come up here southern michigan bluesman's mom you can do the mojo let's go so oh i oh i wanna do so oh i wanna love you so much just good oh my he's got that knowledge oh okay so i don't know if you noticed halfway through i i knew that song by heart but i had still written the lyrics on my hand and so halfway through i you can see me look at my hand to check the lyrics that i knew made me look like a dork i'm not i really want to sing i'm just not a very good singer and thankfully steve let me sing with the band so back to the topic at hand in 1999 i visited cern uh as one of my first tasks at the university of michigan to help them with lecture recording and uh i said hey i got a camera you know is are the inventors of the world wide web here and we still had a little bit of the television show going back then so i went and interviewed uh robert caillou who was still at cern he was just sort of across the street from the cafeteria and we uh walked into his office and gave him a microphone and just started talking about the beginnings of the world wide web and robert caillou is the coinventor of the world wide web along with tim bernerslee who who built it at cern so let's take a listen to robert caillou hi charles severance here i'm at cern in geneva switzerland one of the world's preeminent high energy physics facilities we were lucky enough to talk to robert caillou one of the cofounders of the world wide web the big collaborations at cern and steven uh is a member of one of them uh had people spread all over the world and use cern as the infrastructure to do the experiments and so um obviously the the whole of high energy physics has been the sort of miniature information society since way back when as soon as there were networks essentially and so because we have this need for spreading documentation around we built these things like centralized databases there was certain dock you know you could use it but whatever and we had a lot well we still have a large database of energy physics articles uh kept by stanford and you could get at it before the web by knowing exactly what computer to log into over the network blah blah blah blah when when the web came all that necessity of knowing which computer to go to what to say to that computer and so forth just disappeared you know you people put up these pages with the links and you could just follow links and get to places where you wanted to be and find everything and it was also all in the same format so that was very important too that you know we broke this proprietary commercial system of vertical markets which you know don't let you get at anything except if you stay with this particular company or with that particular company so that that horizontal split that cut that we made between the browsers on top and the databases at the bottom was i think essential uh to make it useful for us but also to make it useful for everybody else right and so that was that was what it was like in the beginning and tim and i we did this all on this next machine here uh in about 1990 so the first server was up about 1990 the first uh end of 1990 the first uh server in the united states came up about a year later uh at stanford because of that database that i was talking about before you and tim feel like this was the big one or it was just well in a sense of course as i always say we called it world wide web in 1990 and and tim had in fact a name like that just before that so there was in fact no way of building it smaller than the internet already was and the internet was everywhere so there was no way we could build it smaller but the thing that we probably did not expect or did not aim for definitely in the beginning at least was to have this be useful outside the community of academics and internet people that existed then see the internet came outside the academic world only what after i would say also after 94 right roughly what i think at the beginning of the yeah 94 is what i call the the the year of the web it's when we had the first conferences where when you know mosaic got off the ground really and and when commerce started to notice it and companies began to be formed and so forth exclusively with that in mind and that was only then before that it was mainly universities and academics gopher was simpler and easier to install and easy to populate and that explained its easier success for a while because both took off at about the same time and because the web was somewhat more difficult it took somewhat longer but gopher became also integrated in the web browsers almost instantaneously and so you know after that after after short while you saw what you could do with together what you could do with gopher you went for the web but it was easy much easier to install gopher this is a very which is why it had a sort of bump where it it went ahead of the web for a while the same is true of mosaic mosaic was just no good but easier to install right and so it went ahead of what we were trying to do we were completely killed in the browser environment because what we tried to do with our browsers was more difficult than what mosaic was trying to do and so you know this proves that a better thing sometimes gets killed or takes much much longer to come up because the easier thing so like a virus outgrows the other one i think the the real problem was that this development system is so much better than anything else that porting what we had here to any other platform took an order of magnitude more time and the for example every time you clicked here you had another window right every time you clicked on a diagram you had a diagram in another window when you clicked on the map you got the map in postscript scalable perfectly printable and so on and so forth and try to port that to another system you go berserk and this is the reason why in mosaic you had only one window and every time you clicked you replaced the content of that one window which was not what we wanted every time you see a page you've got the images in line so you scroll there are gone and so this is all not what we wanted is horribly complicated for the user and and it's not efficient but you know it was the easiest way to do it on the next system and so you know there you go so that thing spreads and and if you want to make you know there is a big difference between making an editor and something that just puts up a page and you can't do anything with that so um our system from 1990 was also the editor i mean i started it's only after next stop making hardware and i had to go back from a next to a macintosh that i had to learn html right i mean before we produced all the documentation and stuff but we never saw any we never in html we never saw any urls right because you linked by saying link this to that not by typing in the url there was a special window you could call up in which you could type a url if you needed to but it wasn't the usual thing i mean this navigation now which says http you know i learned all that the hard way afterwards that you have to use that because you've lost that system right the interesting thing though is that i see i find html a glorious language no i'm not i'm not the average user but i like to write it i mean i enjoy almost word processing it's like tech it's like yeah right right it's exactly as bad as tech that's exactly what it is it's exactly as bad as thing and can you imagine i mean the headings have levels which are absolute true you need a plus what um i mean come on html was we just didn't have must realize that we were never more than four people here tim and myself and a student each okay so things like uh putting in serious effort into thinking about html was a low priority business and on then of course by the time it there was time to do that it had spread beyond repair right that sort of like units right right but of course we had like a virus uh yeah uh in a sense we we um we have xml coming now fortunately so that'll that'll help this machine here uh it's um well it's more than 10 years old now it's got it runs unix but it has unix with a nice visual interface it had some other interesting things which was the which permitted us to do the development of the web in such a small time such a short time and that was it had a completely uh or it has a completely objectoriented development system in which there is already supplied as part of the library and editable text object and that was what tim used to make the first browser and this this was all nice because it got us there very quickly and then we realized that you know somehow the real world uses these horrible machines and you know porting it from here to make it available on these horrible machines in the same elegant way is an enormous amount of work about halfway through 93 i think we we made a last effort in outputting browsers that were also geared to becoming editors but then there was just no hope so i really like that video it's real precious to me i shot it in 1999. i don't know if you noticed but i got a ponytail in the back and i got a village people mustache um when i first came to university of michigan i thought i was pretty uh pretty special and so i grew the ponytail uh i don't have ponytail anymore i got all my hair's a little darker now um it was i really liked the moment where he started yelling at me because i liked html and html these days with html5 is so much better than html was he was exactly right that html wasn't elegant but it was amazingly powerful at the same time and the fact that we could see it meant that people believed in it and it was it wasn't magic um the other thing that you might have noticed is that he had some very strong opinions about the design of what a web browser should be and they might not have seemed logical when you first listened to them one thing he said was every image had to pop up in the same screen and mosaic had one page that replaced the whole thing and you saw the images in line which is not what we wanted to do that's what robert said that might sound illogical today with farmville and facebook and you know all these things but you have to understand that in 1990 the network was very different even than it was in 1995 it was a very slow network and if you put images on every page they would slow down terribly and so what that user interface looked like is you had a document that was the text bold italics these kinds of things and when you clicked on something you got a new page and then it would take a while for this page to display because the networks were really and truly slow and the computers were slow as well so that might sound to you as an irrational design choice but in the time of 1990 it was a completely rational design choice and one of the things that sort of changed over time was that became less and less a rational design choice as the networks became faster the computers became faster an image became images became more of a natural thing that the technology was capable of handling so continuing our story we started at university of illinois urbanachampaign we went to university of michigan we got the nsf net up in 1990 and cern creates the world wide web the web took a great step forward at stanford university when the very first web server in america came up now the fact that it's the very first web server is not actually all that important the what was important was what was on that web server um it was 300 000 physics papers at the slack stanford linear accelerator stored in the database on a mainframe and uh you met and caillou robert caillou mentioned this in his conversation about this now what happened was is paul coons who you meet just in a moment he you know he said i'll put my database the database was well known and people had many ways of using it but with the web it made it much more easily used and so i think in a way paul coons inadvertently created the first search engine the first reading of something that's mostly content that people read up to that point tim bernerslee and robert were really trying to build something that allowed collective editing of information stored on servers all around the world so let's take a listen to paul coons so well the database that was here at slack was used by people around the world but with great difficulty because they had to have an account on the mainframe most people weren't familiar with mainframes and second of all the database language that you type in was difficult so before there was a web i invented a way for people to do what's now called instant messaging and to do a query to the database without logging in and that improves access to the database but you still had this terrible language of the database machine to to type in in order to do your query a little later on people added an email interface so you could send your query by email and get your response back by email so when i was at cern in september 1991 and tim demernos lee dragged me into his office to show me give me a demo of the web when he demonst at first i wasn't very interested but when he demonstrated doing a query to a help system database on a mainframe i immediately put two and two together and says well if you can query a help system on a mainframe you can query a database on the mainframe and i started getting interested the thing is that we couldn't change the query commands because that was built in the database but the web page could give you examples and remind you what the query would be so did you have to write it all from scratch i mean did you write it from the protocol or was there software that you reused to make your first web server well i used the cern server software which was written in c unfortunately we had a c compiler on the mainframe at that time that wasn't very long we had a mainframe of c compiler but we had one so all i had to do was to write some extra c code to uh get the the query that the user had made and turn it into the database query when it was december 12 1991 we installed our our web server and we we informed tim bernerslee that day to give it a try the big boost came about a month later in january in southern france where there was a workshop on computing topics for high energy and nuclear physics and at that workshop tim burnley had a preliminary talk so he gave his hourlong talk to about 200 physicists from around the world and as part of his talk he gave a demo and at the very end most people i think were bored most of the time i mean the worst thing that software people want to think about it is uh documentation and he was pitching documentation but at the end of the talk he connected to the slack web server and made a query and that really dropped a lot of draw jaws because everybody knew the database everybody knew how hard it was to access okay and here he just clicked away typed in a few things for the query term and bang the results came back and nicely formatted so i way i say the interest in the web went from about 20 people to 200 people in that hour okay now those 200 people went back home and if each one of them told 10 people then within a week the interest in the web brewed 2 000 people so uh that that was the big turning point and i think tim recognizes that that was really to kick off and i think the reason that the web took off so quickly once the comers appreciate it and started to realize it it's a winwin situation okay it's a win for the customer obviously because he can do price comparisons he can browse this airline schedules on his own and visualize what he wants to see quickly he can cut and try different things as much patient as he has to get the price down so it's much much better for the consumer but what about the provider the airlines well it's much better for them because just software is running on machines okay it's much lower cost for them and and so they're winning too i point out in my talk about the web near the end sort of a punchline that in doing big science we're solving we're finding solutions to problems that the general public don't know they have so who would predict that out of high geophysics research he would come something like the web would come up i think that would be unpredictable but in hindsight you can see that it was a natural place for uh for the web to have been invented so again i think paul really created for us the first search engine and showed that the web could be a mostly consume environment and be extremely useful when you think about it if there was no web and there was no content how would you know that the web is a great way to view content so paul coons had the advantage that he had a lot of content and it was content that at least the physicists found extremely valuable and then people go oh i can see in fact i remember when i first saw the web i was like okay fine it's got pictures who cares um because other things like gopher were just as good and then i saw the ability to go to federal express and track a package and go like now that's a cool idea right the go gopher couldn't do that as a matter of fact in 1993 sort of three years after the web was created the web was actually not all that popular 1991 was the paul coons but that was mostly physicists and a few nerds myself included but in 1993 gopher was a much better product and it was a much more beloved product and the problem again went down to came down to the fact that the network was so slow that simple textbased things worked better than highly graphical things and there's an apocryphal story that happened in a march of 1993 where there was a meeting of the internet engineering task force that does standards for all these things and they had a bird of a feather session for gopher and a bird of a feather session for the world wide web and the gopher session was full of people and they couldn't have enough in the room and they were sitting on the floor and peeking in the door and then later i wasn't at this meeting by the way rich wiggins my cohost on the television show was at this meeting and what he tells me is at the birds of feather meeting there was almost nobody there and turned bernerslee was like i've been working on this thing for three years and it's better than gopher but nobody wants to use it and then people in the room at that point told him they said it's just too complex it's too hard to get working and so this is a long time ago and the web was not assured to be a success at that point it just wasn't really clear the university was getting the idea that we had spent a lot of money on a campuswide network and that maybe we should use it for something besides connecting to the mainframe so most of the top of the computer center was saying maybe we should do something with publishing information that'd be an interesting sort of use of the network that more people could use than just the people who wanted to talk to the mainframe were you surprised at how fast gopher took off yeah absolutely shocked uh because we basically wrote something that we thought would be good enough for our campus and hoped that a few other places would use it because then if somebody at a different institution used it we'd have some credibility locally that hey we're not just saying it's good somebody else is saying it's good so that it was accepted is probably more a sign that it just happened to be the right thing at the right time the environment was ripe for something like that and we had an okay product at the right time yeah basically we put it up for anonymous ftp and sent out a couple announcements on using it saying hey here's a thing that does kind of a campuswide information system the fashion back then was to say everybody needs to have a cwis a campuswide information system and so gopher we thought made a pretty good one because you didn't have to centralize publishing on one machine you could let individual departments publish off their own machines and control their own content that model turned out to be a pretty good one so lots of other places started using it so we had kind of the right idea at the point where this particular issue campuswide information system was something that all of the all the university computer centers were saying i've got to have one of these the technology we built gopher to work with were fairly slow machines with limited graphics and slow modems that was our design point because that's what people had six seven years ago and while we added graphics and movies and those sorts of things gopher wasn't designed to be hyper text and really media rich documents it was aimed more at run fast over limited bandwidth on slow machines so 1993 was kind of like it was a real there's a lot of things that could have been very different in 1993 and i want to show you a commercial and there's a couple of these out there from 1993 that one of the large telecommunications vendors put out as a national ad campaign and this is what the telecommunications industry was thinking about they saw it all happening they saw this all happening they knew it was going to be big they knew it was going to allow interactions in many ways they knew it they they weren't dumb they it was like whoa what's going on no not at all they absolutely knew so this this really wonderful series of commercials is um it's just quite amazing so take a look at the end you'll see actually what the large telecommunications company's name is so take a quick look have you ever renewed your driver's license had a cash machine nice picture you will and the company that'll bring it to you a t have you ever watched the movie you wanted to the minute you wanted to learn special things that's all taken from jazz now any questions from far away places so where did jazz come from good question or tucked your baby in from a phone you booth and the company that will bring it to you a t and t so again sort of looking back at this and looking at things that might not have been um there's nobody that really makes the connection that steve jobs might have had some impact on the world wide web but in a way he was actually quite influential steve jobs of course founded apple and then was kicked out of apple um at after the macintosh um and he started a new company called next and if you listen closely to what robert caillou says and you listen to closely what paul kuhn says and the computer that was on my desk during this entire period of the 1990s to 93 were next computers next was a bold unixbased highly networked highdefinition display highperformance computer that steve jobs built when he formed the company next after he got fired from apple of course he eventually came back to apple and the next technology is macintosh that's the macintosh operating system and so if you make a mistake in macintosh you might see a error message starts ns something that's called next step which is the operating system on these next computers for the first three years of the web it was pretty much only on the next computer people would even the server was you know on the next computer and the browser was on the next computer and and so it's the next computer really kind of did that i i wrote an article in uh sort of a couple months after steve jobs died for ieee computer magazine's january 2012 issue that really sort of tried to at least from a historical perspective point out how important steve jobs may have been in helping the internet get formed hello and welcome to conversations with computing in this column i take a look at some of the second order effects of the technology that steve jobs produced throughout his career and how those technologies from apple and next often served as an inspiration to many of the early innovators in the internet and world wide web i found out that we'd lost steve jobs on the evening of october 5th right in the middle of a lecture on using regular expressions in python i was recording the lecture for a later podcast because you might want to go down the nerd rabbit hole later and that's okay there's nothing wrong with avoiding the nerd rabbit hole but this is a nerdy thing it's extremely nerdy i think it's awesome a nerdy announcement the very next week in the same classroom i was giving my lecture on the inside story of the history of the internet and the world wide web sharing some of my interviews with early pioneers as i gave the lecture and watched my video interviews thinking about steve jobs i began to realize how important apple and next technology was to those early innovators in some ways the very existence of those technologies helped propel the internet and web revolution forward in my 1999 interview with robert caillou the coinventor of the world wide web we are sitting in his office by the next cube that ran the very first web server as robert describes how the next stepped development environment allowed them to quickly build prototype versions of a web browser in 1990 you get the sense that their next hardware and software was very much an equal partner in their early visions of the web obviously the the whole of high energy physics has been the sort of miniature information society since way back when soon as they were networks essentially and so because we have this need for spreading documentation around we built these things like centralized databases there was certain dock you know you could use it but whatever uh we had a a well you still have a large database of um energy physics articles uh kept by stanford and you could get at it before the web by knowing exactly what computer to log into over the network blah blah blah blah but it was all very difficult and then so when tim invented to web and i had a separate proposal i dropped it because tim's proposal ran over the internet and that was clearly much more efficient um when when the web came all that necessity of knowing which computer to go to what to say to that computer and so forth just disappeared you know you people put up these pages with the links and you could just follow links and get to places where you wanted to be and find everything and it was also all in the same format so that was very important too that you know we broke this proprietary commercial system of vertical markets which you know don't let you get at anything except if you stay with this particular company or with that particular company so that that horizontal split that cut that we made between the browsers on top and the databases at the bottom was i think essential uh to make it useful for us but also to make it useful for everybody else right and uh so that was that was what it was like in the beginning and tim and i we did this all on this next machine here in about 1990 so the first server was up about 1990 the first end of 1990. the first server in the united states came up about a year later at stanford because of that database that i was talking about before the the real problem was that this development system is so much better than anything else that porting what we had here to any other platform took an order of magnitude more time and the for example every time you clicked here you had another window right every time you clicked on a diagram you had a diagram in another window when you clicked on the map you got the map in postscript scalable perfectly printable and so on and so forth it tried to port that to another system you go berserk you know there is a big difference between making an editor and something that just puts up a page and you can't do anything with that so our system from 1990 was also i mean i started it's only after next stop making hardware and i had to go back from a next to a macintosh that i had to learn html right i mean before we produced all the documentation and stuff but we never saw any we never though in html we never saw any urls right because you linked by saying link this to that not by typing in the url there was a special window you could call up in which you could type a url if you needed to but it wasn't the usual thing i mean this navigation bar which says http you know i learned all that the hard way afterwards that you had to use that because you've lost that system right steve jobs next workstations were essential to the creation of the earliest web software their advanced development environment and rich display capabilities led early innovators to think of the internet less as a text only and more as an engaging multimedia experience in my 2007 interview with paul coons who brought up the first web server in the united states on an ibm mainframe at the stanford linear accelerator in december 1991 we can see that he still has a working color next workstation in his office when paul was developing software for the ibm mainframe there are around 20 web servers in the entire world if you wanted a web browser to test your server having a next workstation was essential so when i was at cern in september 1991 and tim deverance lee dragged me into his office to show me give me a demo of the web when he demons at first i wasn't very interested but when he demonstrated doing a query to a help system database on a mainframe i immediately put two and two together and says well if you can query a help system on a mainframe you can query a database on a mainframe the database itself had about 300 000 entries and was it heavily used was it was it heavily used before you put it on the web and then continue oh yeah it was heavily used people had signed up for have computer accounts on the mainframe so they could do their queries and from all around the world i think there was some 4000 register so did you have to write it all from scratch i mean did you write it from the protocol or was there software that you were used to make your first web server well i used the cern server software which was written in c unfortunately we had a c compiler on the mainframe at that time that wasn't very long we had a mainframe of c compiler but we had one so all i had to do was to write some extra c code to get the query that the user had made and turn it into the database query now wasn't the original web server on a next and that's the the uh all the web software was originally developed on the next computer at cern while the web and web technologies were gaining traction in the academic and research communities who often had access to powerful unix workstations on their desks the rest of the world was browsing the internet using the text oriented gopher clients and servers in 1993 the national center for supercomputing applications at the university of illinois at urbanachampaign released ncsa mosaic mosaic was the first graphically rich web browser that ran on unix macintosh and windows in my 1997 interview with larry smarr he points out that the success of the ncsa mosaic browser occurred in part because of earlier work developing the ncsa image library to take advantage of the graphics capabilities of early apple macintosh computers what we basically did during that ladies period was to make the world safe for images what ncsa image did was basically we said we want to build a world of infrastructure in which it's as easy to move an image around as it is to move a word that was our design parameters back and and that's the way we talked about it back then so that meant we had to scale the network scale the disk drives scale the compute power we had to go to full color when the mac 2 first came out 256 color levels uh we got 50 of them apple gave us 50 mac twos which was like stunning uh in those days we were in fact we're the largest funded group in the academic group in the country for the apple advanced technology group ibm at that time was telling their customers you don't need color we've already provided it as i said you have four of them black white cyan and magenta why would you need more so what we did was we took things that were on 100 000 computer graphics workstations of image processing that medical imaging people used satellite reconnaissance people used and we took all that put it into software and ncsa image on the mac and so you could just move the mouse and do what it would take you would have otherwise cost you a hundred thousand dollars to do and you'd have to be an elite specialist again taking things that elite people knew how to do could afford to do and making it available to the masses the day after i found out that steve was no longer with us i happened to have a morning meeting in new york city so i went to the apple store in manhattan to get a sense of our collective reaction to the loss of such a brilliant visionary who's affected us in so many ways hello everybody this is chuck i'm here at the apple store in manhattan i'll show you kind of what we're seeing we're seeing press we're seeing a impromptu memorial for steve jobs uh that's got apples it's got flowers it's got all kinds of really really cool stuff and but the the crowd seems really quiet there's a media that's interviewing all the people you can see uh see the media there grabbing people off the street and interviewing them sure i'm sure they're capturing their thoughts and so here we are sort of one day one day after uh the passing of steve jobs throughout his career at apple and next and then again at apple steve jobs was never interested in the least expensive nor the most profitable technology he pursued the best and most advanced technology in many of his designs and decisions he provided a road map for the entire consumer technology marketplace it's no wonder that many of us would wait with breathless anticipation for each and every apple announcement they were always an exciting glimpse into the future of technology over the past 30 years the products that came from jobs companies were a joy to use and perhaps more importantly they inspired many innovators to keep their focus on the exciting and unexplored future so we started our journey at university of illinois urbanachampaign we got the nsf created university of michigan we created the web we created the first web server and now we're going to come back to where we started we're going to go back to the university of illinois at urbanachampaign these are the folks that basically exploded the web moved the web from the academic space to the commercial and end user space and there's all kinds of things the network was growing things were getting faster personal computers were getting better a very rapid pace because the ibm pc is almost 10 years old and many computers they were getting quite fast in the in the 90s so the 1990s our computing and their display capabilities were getting better very rapidly and in this environment ncsa at urbanachampaign university illinois urbana champaign built an open source web browser that worked on mac windows and unix it was the first web browser that did this and it it was the thing that really made it so average people who had pcs or macs in their home could get a network connection and start enjoying all of this new content that was coming up on the world wide web hello my name is charles severance and i am showing you right now a desktop application that works on my macintosh called ncsa x mosaic this was a software released in 1993 and it was the first mosaic it was the x windows mosaic and i'm running it on my macintosh and you can download it from my github account uh csab is my github handle and it's the x mosaic dash 1.2 so what we're looking at here is the original default home page at the national center for super computing applications at the university of illinois and we see it as we saw at circa 1993 we can scroll through we can see the old good old days the visited set links in purple and so if we scroll down you'll see some neat pictures and the wonderful gray background list tags were were real back then you know we can go see something about visualization at ncsa i've done a little tiny bit to this to teach it a few things you can see all that i've done on http um on my github site you can see everything i've done on my github site i try to stay as i just made a few more things work like png images and http 1.1 so you could visit more more pages another another wonderful page to uh another wonderful page to take a look at is the original first page on the world wide web the info.cern.ch and again we're experiencing it now circa 1993 to see what's out there take a look at the people involved in the project so here's some of those pages tim bernerslee of course robert caillou of course and here's some of the other people that were working at cern so there you go that is a quick experience in how we surfed the web in 1993. after this the ncsa staff student programmers software developers all formed the company netscape in order to commercialize all this joseph harden was the supervisor of the software development group at ncsa that was responsible for building and releasing both the mosaic web browser and the httpd web server as open source and gave them way free the ncsa mosaic web browser was developed at the university of illinois starting in 1992 ncsa mosaic brought the web to apple pc and unix systems joseph hardin managed the software development group at the national center for super computing applications ncsa was kind of a special place right one of those things that happens very infrequently where there's lots of energy a large amount of resources visionary leadership and a lot of free space for people to play and larry smar has to figure in any discussion of it quickly because he's the person that created that space and that gave a bunch of us people in visualization people in computational science people in collaboration technologies people in all kinds of stuff networking in the late middle and late 80s a space to just figure out what it was that we thought was fun and what was interesting you know what i thought was interesting was how people were using these new technologies to work together we've been working we started out working with tools that supported simulation and computations on the main supercomputing systems that's what the software development group did and there was a group before i joined it that did ncsa telnet right this is back when we were trying to convince the physicist that decnet wasn't such a great idea that we wanted this crazy open nobody owns it right ip um model for the network and that was kind of a bit of a struggle because if it was an open source type thing and nobody owns it why how's anybody going to have responsibility for it and why not use decnet which is this perfectly good proprietary welldeveloped you know system yada yada so it was a long time it took a while for us to explain to the physicists why we wanted an open model for um tcpip for the interconnection of all these networks and i spent time for a while with a program at ncsa called the affiliates program where we gave people mac ses and told them about tcp and put the ncsa telnet on the machine and said now here's how you get to the super computers larry recognized from the beginning and we all loved the idea that these small little things on the desktop were really the gateways for everybody to the big machines in the background and that all of this would turn into one cloud behind the the screen that we needed to figure out how to get the user involved in as much as possible so we were interested in building tools for end users that worked with pcs and that allowed them to do their work better in the computational science communities that they were part of on the super computers and it's an easy extension from that to think about collaborative technologies in the large how do people work together not only with these tools but also with simple communications email papers data sets that they want to share and how do they do that initially our interest was in synchronous tools um when we were thinking of collaboration tools so we were building something called ncsa collage which was a set of tools that worked and one of the big deals was that they worked across the three platforms the x windows for the unix people the windows environment and the mac and that was one of the things that was sort of part of the underlying culture there was we wanted to make them available to as large a community as possible so started working on collaborative tools and there was a set of people and each other on each of those machines that was working to make it possible for people to share in real time images of their data the spreadsheets of their data and papers that they had run across interesting references to uh with their colleagues who were remote from them geographically so that's the context in which dave thompson who was one of the developers one of the exwindows developers the lead xwindows developer i think for the collage tool um pulled down one of the early um web browsers and it was the one from slack and i can't remember its name and he went through the effort of getting it working and brought it in and showed it to mark andreessen and i and both of us looked at the screen dave described what he had in front of us and we said we can do better than that that's a complicated system and the interface looks terrible and it dave said that it was a real pain for it for him to get it working for him to download it and install it and compile it and everything and it only works on the next windows box and wouldn't it be cool if it worked across all three of the boxes and if it was something that was just a plug and go like the rest of our tools so mark and another developer there ran with the idea dave wanted to work on it but i said dave please finish up with the collage stuff and this was before we really understood what was meant by open source so we just and we wanted everybody to be able to take the software and do whatever they wanted to with it we weren't that concerned with commercial advantage we were more interested in it being open and people being able to make contributions back to the code and taking the code and doing what they wanted to with it so we just put it all in the public domain which as the folks from apache will tell you was kind of ambiguous it's not clear what that means um but at least it got the code out there so mark and eric we're working on that um working on what mark and eric were working on what the first generation of ncsa mosaic and this was the next windows app and nobody was working yet on the windows or the mac version and we saw the first version of that come out when was it early 93 late 92 and it was probably early 93 and the response of course was fantastic it's wonderful to be able to just click on something and see it right away and indeed the combination of um hyperlinks in a document as far as navigation and retrieval of documents as a user interface is just great and a lot of people got it immediately especially people that were working with the tools at ncsa and the companies i remember an hp exec coming in one time and mark and eric had written a little filter that took unix um documentation and made it into html and made all of the references into links and they went to they hit an hp site and the exec said where's this coming from because he was able to see all of his hp documentation there in the room at ncsa and navigate through it real easily and he said well you've got three or four folks back there that have put up httpd servers you may not know what those are yet he said i've never heard of this and we said but this is the kind of thing that um is probably going to be really useful in the future for people who are trying to manage documentation in a distributed fashion yada yada right we went on with a story like that and this guy was bouncing up and down in his seat and this was the kind of response that we got with it and for a while we tried to integrate the earlier work with collage with the work with mosaic and early versions of mosaic have a collaborate button at the top and that was something that would allow you to pull in something from a synchronous session on the idea was that you'd be working with your colleagues synchronously and then asynchronously go off and use the browser and pull something into the um the collage session or vice versa be working on something in the collage session and be able to access it through the browser or just use the browser as a component and uh in the session well um the browser of course took off we had tom redman who was the lead for the mac version though uh he was the person who really built it was alex toten who was a excellent developer and a lot of times ran ahead of the other people that were working on stuff especially on the mac and chris wilson and john they were working on the windows version so all of a sudden in 93 late 93 early 94 there's this full suite of mosaics that work across x windows the mac and the windows system and that's the point at which the guy who is the president at the time of the internet association said ncsa has fired a shot heard around the world because it's available now across all these platforms and anybody can use it we were convinced deep down inside that all of the new technologies and the digitalization of the world and everything was going to make a huge difference we just weren't sure exactly how at the same time when people would come to us early on in the mosaic experience and say we want to commercialize this and do this with it or do that with it there was a lot of you know we're not sure i remember sitting in rooms with commercial folks that came in and pitched to us and i bring the whole team in um the whole software development group and say listen to these guys and you know tell me what you think about this um and we were nobody was sure what it was gonna do and there were people who started off building browsers and just kind of never got off the ground it wasn't until the netscape effort started up that there was sufficient energy and sufficient resources i think to really get on and ride and push um and and you know crank up a group of x hundred developers uh in a matter of months and then they were you know quickly overshadowed by the effort that um microsoft put into it i remember one of the netscape guys saying um i came back from a meeting with some folks up in seattle and they said that microsoft now had this is when netscape is writing at the top of its form right top of the game this guy says microsoft just told me that there's somebody from microsoft just said that they've got like 2 000 developers working on this said at that point i realized that we were you know going to have some difficulties um and we of course always felt that there should be more than one browser um and so we wanted this because we were interested in standards and openness right at the time if one there's only one browser then that company gets to determine what the standards are there were all kinds of hassles early on about putting in different features and the browsers driving the standards rather than the standards driving the browsers and all this kind of stuff so we wanted some diversity there was a feeling very early on that this was going to be a real gas this was going to be hot that this was something that was the response was just so immediate if you go back and you ask people who were sitting in front of machines in 1993 94 or 95 right and you say do you remember the first time that you used mosaic right you remember the first time you used a browser it wasn't mosaic and vast majority of them that i that i've run into say yeah i can remember and i remember one of the nsf program officers calling me up one day just out of the blue and saying i just wanted to tell you you know you guys probably this is like after we've been playing with this for months right not not years just months he said you know sometimes we just sit around and click on things because it's still such a surprise to have a picture or a whole other page of information pop up right and we don't know where it's coming from and we don't know who's putting it up but we still haven't gotten over the g wiz aspect of this yet so at the end joseph is really talking about how microsoft had to react to netscape and how all of a sudden the market begin to sort of crash together and tons of investment a lot of intensity triggered mostly by the release of the windows and the mac version of mosaic 1994 was distinctly different than 1993. the staff at ncsa went and founded netscape in april 1994. the first world wide web conference was held in switzerland shortly thereafter the other first world wide web conference was held in chicago there's some interesting stuff about that in these books the uh books robert caius and tim bernerslee's book talks a little bit about that in october 1994 tim left cern and went to form the world wide web consortium and and by the end of the year windows 95 beta 2 with an internet browser was there with tcpip built in and so if you really think about i mean it's not even a whole year it's almost six months where the world changed forever and so at this point now money is coming into it up to that point it was mostly ideas and research but now money is coming out and we start seeing a transition so netscape was on the forefront of doing this and netscape basically took the open source product they started kind of competing just to build a browser but they quickly decided that they would go turn the browser and their web server more proprietary and try to create distributed computing applications using proprietary things that netscape would build unique to themselves and they would attack microsoft the moment it became clear that netscape was going to produce a way to to to develop software on mac windows and linux portably then microsoft got worried because then the operating system wouldn't matter and window microsoft put so much into the windows operating system that if the operating system didn't matter it would really tremendously threaten microsoft's business hence windows 95 with tcp in a free web browser so netscape sort of scared well as microsoft tried to buy netscape netscape refused to sell wanting more money and then microsoft vowed to destroy it and as microsoft was coming after netscape first netscape tried to compete by building better and better software like the javascript language which will meet brandon ike in a moment and then after that they tried to sort of switch from being the proprietary bad guys and go become more the open source good guys and that kind of blew up in their face and they built this open source mozilla which eventually became the mozilla foundation which eventually began firefox so now what i want to do is i want to you to meet two people both of whom now are the senior leadership at the mozilla foundation brendan ike who's the cto of the mozilla foundation but he'll really tell us about the 1995 where he invented javascript in 10 days as part of netscape and then we'll meet mitchell baker who was the founder of one of the founders of mozilla and she will talk about how netscape kind of fortunes declined got purchased by aol and fortunes declined even worse and how they basically pulled the netscape code base out to form the mozilla code base which then became firefox codebase and the firefox of course had this great idea that mitchell will tell you about of having a search box and they made tons and tons of money as mitchell will tell you about so up next brendan ike of the mozilla foundation and mitchell baker of the misilla foundation do i was hired at netscape in april 1995. netscape had already launched it's 10 mosaic killer if you remember mosaic was the big ncc mosaic was the big browser until netscape took over so when i came to netscape they'd been going for about a year i actually had an option to go in at the beginning i passed that up but i went in in time to do what i was tempted to do which is a programming language for html for web designers and programmers to use embedded directly in the web page not something uh that was like coming along at the time called java which was a more of a professional's language where you would write real code with type declarations and you'd have to write that code in a way that compiled i was writing something javascript that could be used by people who didn't know what a compiler was they were just going to load it it was like basic and that was really the pitch that we would make two languages not one analogous to microsoft's visual basic for c plus plus so javascript for java bill joy of sun actually liked that idea and agreed with it and he was the guy that signed the trademark license by which what i had created became javascript the name is total lie it's not really related to java so much as to a common ancestor c in syntax and and to the extent that we made it easy to use and something you could copy paste program or start small from scripts and grow to programs javascript has succeeded massively it was also an incredible rush job so there were mistakes in it and uh something that i think is important about it is that it i knew there would be mistakes and there would be gaps so i made it very malleable as a language and that has enabled web developers to make it be what they want it to be to project their own style of not just api but almost language pattern on it and create their own innovation networks to use eric von hippel's phrase or innovation toolkits on top of it so it's not a language that tries to restrict you to one paradigm it's a multiparadigm language i mean there's all these things where a language comes out and immediately trips and falls and you have to sort of it's okay at the same time but there wasn't really a trip and fall in javascript why so you could say that it hasn't been a version too and that's true because i've tried to work on what might be a big version too that was called the fourth edition and that failed uh there has been evolution the web is all about evolution people don't quite see this while you're in the midst of it because it's microevolution but web pages from the 90s don't all render properly these days they don't all work right and a lot of them are lost and only available through webarchive.org javascript had enough at the beginning enough good parts to use crockford's phrase or enough genetic material from other languages you know first class functions prototypal inheritance from self the inheritance of first class functions from scheme is really kind of a fraud because scheme is different in many ways and i couldn't make those uh differences manifest i couldn't do the scheme thing in javascript i was under these marching orders to make it look like java i had 10 days to prototype it so scheme was more of a spiritual than an actual influence but first class functions are very powerful and they fit with an event handling sort of programming model i was inspired by atkinson's hypercard so that's why you see on click in javascript and hypercar had this pattern for event handlers called on you know on page down or whatever so javascript had enough good at the beginning to survive now if you think back though to the mid 90s javascript was cursed because it was mainly used for annoyances like little scrolling messages in the status bar at the bottom of your browser or flashing images or things that popped up windows massively we could have put in controls for those we should eventually browsers firefox kind of championed this led this automatic suppression of annoyances that made it all much better and with moore's law compounding and with javascript getting some evolutionary improvements in the standards process it became really quite fast enough and good enough in 2004 and five to get the web 2.0 revolution that was i think tied in with firefox's retaking market share from ie and developers realizing there was a client side to the programming stack that could be expressive and powerful and could be fast enough thanks to faster computers mainly you must have had some training some kind of oh i've done a lot of set experiences that kind of got to the point where you could pull from scheme and i had implemented uh i was sort of a language buff when i first started computer science i was a math physics major originally and ended up math computer science when i finally got my undergraduate degree so i i was programming uh formal language theory uh applied to recognizing languages like lexical analysis parsers automatically constructed parsers from grammars i love that stuff because it was all very pretty and clean theoretically and it it still is it hasn't changed a lot there's been only one or two innovations since my time in university in the early 80s so what um what that gave me was the ability to quickly knock out uh you know a sort of a a language interpreter i could do the the parser and the scanner i could generate bytecode because netscape wanted to do a serverside embedding in javascript even though it could have been a tree walker something that interpreted parse trees i made a byte code for it and it was an internal bytecode not the java by code that's become a handicap for java i think and i knocked all that out really quickly because i'd done it before i've done it at silicon graphics to build sort of network monitoring tools to capture packets based on expressions over fields at the various protocol headers i'd done it for fun just to make my own languages and finally i got to do it really quickly the the speed was an issue for me it was partly we were all feeling like microsoft was going to come after netscape because they had tried to buy netscape in late 94 for too long the money i heard about this before my time at netscape but we also were in a weird game theory with respect to java because even at netscape some people thought well if we have java do we really need a second language they didn't see the benefit of the visual basic companion language for a much larger cohort of programmers or amateurs designers beginners to write java as to write c for the microsoft platform that they took a lot of education and greater pay it was a higher price proposition to get people gluing components together and designing pages and filling gaps using javascript as they did with basic and visual basic in microsoft's windows was cheaper and wider spread it also enabled this uh user innovation toolkit approach uh to use vulnerable phrase again because javascript was malleable because there were so many web designers you would see different schools of thought on how to use it emerge and this has become quite clear over the last 10 years with the various javascript libraries and i think that's actually an advantage as i said earlier to javascript that we're not telling you here's the one way to write it here's the one true objectoriented paradigm here's the only way you should ever make a reusable abstraction it's not unmixed right it's hard for beginners people reinvent certain wheels and make mistakes doing it or don't like having to acquire a library but you see jquery of great power library because it gives people this very sweet query and do paradigm and again it's not mandatory with javascript but a lot of people learn that they think that is javascript i think jquery is a language or they think you know jquery is the tale of like the dog jquery is great and john rezzy used to work with us in mozilla and but there are so many good libraries out there now and they're actually shrinking and becoming more compositional which is a good trend so javascript by being malleable and sort of fostering user innovation i think has uh played a unique role if i had done something more rigid i think the odds are greater would have failed i i just can't imagine how you would have escaped from the objectoriented pattern of cplus plus partly i had to because if i'd done classes in javascript back in those 10 days in may in 1995 i think i would have been told this is too much like java you're competing with java you know somebody at sun would have yelled at bill joy more than they did and it might have killed the deal so i was definitely not only under time constraint but under marketing orders make it look like java but don't make it too big for its bridges it's just this sort of silly little brother language right the sidekick to java but then you you put in primitives i snapped himself in here you put some primitives you know like closures and all those other things that that it's like you can build what you want yes and and that kind of went under the radar for a lot of people and it wasn't all even there in a good working order in the first release but over the next few years it became not only well um known uh i would say more standardized and well known over the next 10 years it became evangelized like crop words are the exponent of the closure pattern and good uses you can make of closures so people find the malleability and the expressiveness and the power compelling enough that some people actually resist any version two they say i i don't want you to add cliches or common special forms for patterns that i'm more happy writing myself or acquiring as a library myself you you've created an abstraction that implementers can do crazy things with right and people can rethink what the interpreter is really supposed to do they can and they can just say okay here comes v8 that's right differently right optimizations that haven't been tried i knew about these optimizations because i had studied small talk himself but nobody had gotten the time and the money google was maybe first there were other efforts going on in parallel and apple and mozilla have kept up as best they can but va deserves a lot of credit for pushing this forward it wasn't quite as as first on the scene as as they like to claim because it was all coming together in 2008 but it has been very helpful it has shown people what can be done what's interesting to me is that you then go and put different more intensive workloads on the language and you see the there's a new va that should come out of somewhere it may not come out of google because they may have tired of optimizing javascript in fact i believe dart is a response to that by the principals who did v8 they want to do a language where they don't have to worry about all this crazy compatibility may not succeed and it also doesn't give javascript the next level of performance but i believe that level is there and it's still improving in performance much more dramatically than a language like java where the the gains are percent or a fraction of a percent on the standard benchmarks but a lot of html5 development now quoteunquote html5 javascript css web apis beyond what's in html5 is taking off you're seeing like zynga doing html5 only games it's really coming faster than some thought and i talked to the venture capitalist fred wilson of union square in new york said yeah it's here he thought it would take years it's we've turned that corner and so you call it html5 what it really means is it's the web stack it's the same stack you use to write web pages and hosted web apps you can write apps that run in your device apps that are maybe hosted maybe offline maybe the line is blurred so that you can associate them with a url but you can also take them on the plane without any fear that you're going to lose anything by disconnecting from the internet landscape is of course known for its netscape navigator product first commercial browser on the web so first tool the first generation really used to get on the web and that was successful for a while and then competition became quite stiff from microsoft the different way to compete would be by building a shared asset instead of netscape versus microsoft that netscape would gather contributions of volunteers and other commercial commercial partners you know and build a product that would be shared and that group of people knew that to be open source you had to be real you couldn't just say oh we're open source love us you really had to manage it differently so at the time there were six or seven or eight of us who were employed by netscape as mozilla.org staff and another 100 or 150 employed by netscape as netscape engineers building the netscape product and contributing their work to the mozilla open source project so we are all in the same buildings we all went to many of the same meetings but we had slightly different goals because although we call it the netscape product netscape had been purchased by aol already and so the client itself was diminishing in importance and the importance of the netscape client was to push traffic to the aol websites but we of course at mozilla.org were an anomaly because our charter was to build a successful open source project and so that worked for quite a while you know there were tensions you know these were the dark years for mozilla we came to understand we needed to rebuild our core technology that took a long time while we were doing that market share continued to slide and there was a set of tensions over what does it mean to run a real open source project and as it turned out there were two competing views and one view was that open source is phenomenal we're very happy that the code is out there anyone is very welcome to take that code and use it we absolutely want to build a large and engaged contributor community but all decisions and all authority will be held by the managed equipment group and we'll make those decisions as we think best which is of course to benefit the client we're trying to build which was the nesgate browser we at mozilla.org were convinced it wouldn't be successful that building a product to benefit aol only wouldn't generate the kind of interest either from individual volunteers or from commercial partners that we needed to be successful and that we found the difference in perspective from the volunteers made the quality of the project much higher they were under immense pressure to ship this product because the company needed it and not only was it difficult technically and in an engineering sense but we at mozilla.org were saying and there's these other things right you may think it's good enough but we're telling you it's not because this is the feedback that we're getting and you need to change some of the development processes and management practices and so they thought well i'm not sure what they thought but we experienced it as no we really need to keep going on the way that we're going to get this product shipped but unfortunately you know the mozilla community was correct because when that product shipped it was a failure that was netscape 6 universally acknowledged as a bad product and pretty universally acknowledged as the end of the netscape product line you know that all those people that had held on and hoped through the netscape four days and waited and waited and waited for the update once they got it pretty much gave up so that's what we experienced so that certainly didn't help us that was unfortunate it did reinforce our view that you know our view of the world wasn't crazy and so we continued on and it was still long and slow to get technology and products that we liked and the tensions continued the management tensions continued you know the failure of netscape 6 didn't make anything easier and certainly for the the aol folks it really didn't make things easier either and we fought a lot about the ui i think ui is a constant source of tension but in our case it was worse because some of these fights would be it makes sense to aol to put something in the product and the interface of the product either a button to an aol site or something that has an ad in it or some feature that a partner is paid for so it generates revenue we think it might send people to our site you know some of our users might really like it so it all made sense from their point of view but if you're not building the aol client to benefit aol and you're trying to build an open source product that is used for many people then of course those those features are a big negative and so those are very fierce fights because because the management of the client group had very clear opportunities in hand that they wanted to build into their product and we were this small group saying no diametrically we're pretty opposed in that case and we would say no you can't put it into the core product you're welcome to have a build system on your own and add it in later and that's how we ended up doing these things so so we did develop a system for but of course it's awkward and you're always rubbing against what should go where and it turned out even in the very early days that the open source mozilla versions of the product got a lot more testing than the netscape versions and we also tried to build in some quality mechanisms that again seem normal today so you can't you get hired as an employee you don't automatically get the right to check your code into the tree right someone has to you know look at your qualifications and say and mozilla and the way we work we understand your coding level we understand you know how we work we understand if something goes wrong with your code you know where you need to be all of these things and that's a very difficult setting for a hiring manager to say well i've just hired you and you can't be as efficient as you think you can because there's yet another vetting process by this other group so i understand you know why it was difficult but on the other hand as an open source project if you can't control the quality of the code and you don't have any say in it you're not very real aol client fortunes declined and the netscape browser declined and declined precipitously after this netscape six and so aol was interested in laying off people uh and in one of the big layoffs i was included and that was seen that was in 2001 and that was seen as a power struggle as well because by that time the fights back and forth about what we were building and who was making decisions we're pretty well known within the engineering organization it's it's hard for them not to be i mean it's true anywhere right but but in some cases the fights and the bugs are all very public as well but uh and and so so i was laid off or fired depending on your you know how you want to describe it and as it turned out it wasn't really possible to take my place and i continued as a volunteer and the netscape engineering organization was very clear whose leadership they were most interested in following and so we had to work out a way in which the management at netscape aol that remained and i worked out a you know sort of a way to work together enough so that they could ship the product they wanted to ship but that i continued to lead the project and i think that was a surprise um not not so much to me i think and so i worked as a volunteer on the mozilla project you know for a number of years including the years in which we shipped our first product which we called mozilla and which we were very proud of technically and for its day many people were surprised at how good it was but it didn't have a good user experience but eventually i ended up working on another open source project with mitch kapoor for a while and that was lucky he had started this open project and reached out to talk to brendan and i about it to learn something and the day that he was scheduled to come down and talk with us was the day that i was laid off and so it was an odd time yeah that was chandler i was preaching on there but oh sad so i i worked on that for a while and and mitch was always a supporter of mozilla even before firefox when he didn't like the product but he recognized that we were an important part of the ecosystem and that went on until 2003 when aol decided to stop investing in the client almost completely and fortunately they knew that just killing it wasn't good they knew enough about mozilla and the name and the brand to think it would be good to do something with it and so eventually i ended up working with them and and they some of the people there knew mitch as well and i was working with mitch and they knew him and so we all you know spent a chunk of time trying to figure out what was possible and my partner brendan was still at netscape very eager to make a move and many of the key people we wanted were also desperate to keep working on mozilla and so we ended up getting a two million dollar seed money from aol and mitch was helpful with that and a few other things trademark name mozilla and the four giant servers which were so important to us at the time and which had taken us almost 18 months to get through the purchase cycle at aol and so uh i think we still have those boxes sitting around because they were so important to us at the time and so in 2003 the mozilla foundation was formed and mitch was the first chairman because he had done so much and had so much to offer and brian balendorf and and uh guy chris blizzard who worked on mozilla forever and and brendan and i were on the board and aol understood that there were three or four people that would be leaving when they they did uh some kind of reorg when they closed down the client group and that those people would be coming to join us and of all the people that we thought would be most helpful at mozilla they all came that was about nine or ten so we were and mitch continued to support me and uh one other person in mozilla parttime so we were maybe 10 or 11 people and i and brendan and i had always felt that we needed employees it was exciting it's a little scary because we knew that two million dollars wouldn't go that far and that we had a lot of work to do to make ourselves real we were still 18 months away from shipping 15 months away from shipping firefox so that part was scary but it was immensely exciting one of the friends of mozilla showed up and they had a big lease and a little bit of space they could sublease to us so we found a funky little room way in the back not even a sink very odd but but we were really happy with it and we worked away on building our product at that time we made what was a pretty fundamental change that that was critical and we decided unambiguously to be a consumer product that seems obvious but when you're a bunch of developers it's not that easy and it means that you have to strip out a lot of the things that are clunky for a general consumer you really have to be determined that you're building for a general consumer not yourself and i think many open source projects probably don't want to do that and shouldn't try if you don't want to because you have to keep at it so we started doing that out of the blue some visual designers appeared from prince edward island in canada and so we started to get nice looking logos which we'd never had before and visual elements and then we tried to figure out what to do with the start page because we knew that mozilla development tools weren't the right answer and we just took us forever and we looked at all sorts of things and finally decided the one thing we knew that everybody did was search you know we'd have people who say well it's obvious you should have the bbc at least in english language versions it's obvious and then you know our engineering guy would look up and say well it's not obvious to my 17 year old daughter that that's what she wants it's not obvious to my son either so but everybody used search so we thought we have the search box maybe we should put that on the start page too make it easier maybe it be more obvious to people search so we went to talk with the search providers we had a very fruitful discussion with google i think they also saw the value of having a mozilla browser in the world they're very explicit about that and i believe them and so they're also open to doing a a business arrangement and so often people ask how mozilla gets paid and would like most businesses on the web search search and ads you do a search you know you'll see ads if you follow those ads revenue is generated you know it goes through the system and we get a little piece of it as do other browser makers so it's very similar to the business model on the web and we did something that i believe had never been done before which was to make sure that google and yahoo were right there next to each other like you don't see them next to each other you have to click on the arrow but they're there and today people laugh at me when when i say that because you only see one but but i negotiated that and that was an absolute utter i will walk away from the deal term to everyone because i don't think i'd ever seen it before and i wasn't you know if you get on a plane and you want a diet coke but the plane only has diet pepsi because that's their deal you're angry and if you want to diet pepsi and you want to coke and i i used that example i said i'm not going to have firefox users angry at us because they wanted one or the other you know you have to agree you're both going to be in the product but it also is your values right it is yes your values front and center yes because the choice is there we can do it and to not do it would be to take away a choice that somebody really wants and it matters to someone so so uh we we have that choice in in the search box but we still didn't really know what to expect so we shipped firefox and our sense that we were onto something turned out to be far more too even than we knew we'd seen a rise in interest from 0.8 and 0.9 that was pretty noticeable but once we hit the release version it just exploded and part of that was it was the perfect product this time we had a product at the right time in the market the internet capabilities had grown enough people could actually download a browser easily and more people had bandwidth and ability to do so and a comfort level to try it so that was good we had a beautiful product and it was an important product and the alternative was horrendous and dangerous and awful and so all of that combined to create this giant excitement and so firefox market share climbed by you know a percentage point immediately and started moving in these huge numbers so it was a completely viral storm with nothing driving it other than you know the product and the need itself and so that took everyone by surprise you know we were hoping to be able to generate a few million dollars to support ourselves for the next year you know we had 10 or 11 employees you start to add that up so we were hoping to make enough money to do that and it turned out you know we generated that amount of money before the end of the year the six weeks or eight weeks or whatever it was before the end of the year and so things actually things got even more stressful and more hectic at that point because now you've kind of got the proverbial tiger by the tail we're still 12 people right so that immediate need to grow and the sense of pressure and stress combined with elation and success is probably you know i don't know maybe it's like having a child right but it's it's that it's that combination doesn't immediately get easily to be anonymous purpose yes yes that's for sure we certainly see that and so by the end of firefox shipped in 2004 just actually we just passed the eight year anniversary and you know by the end of 2004 it was pretty clear that we are a different organization we were we were i would say still struggling with a different set of problems but we had changed the nature of the problems really quite fundamentally and you know we've done so in a way that that our users loved by 2005 we were in a really different world where we began to be able to actually influence others and that's always been the goal i mean market share is nice and it's nice when people love your product market share is a validation that you produce the right thing so that's awesome on its own but the more important i'm maybe not more important equally important goal is to be able to influence not only ourselves but others in the industry so that we start to see more of the things that we care about so that was a series of actionpacked videos uh brendan and mitchell have done a great deal and if you look at the current html5 javascript really some of the work that brendan and mitchell have done have created this new world that we live in right now with these highly interactive applications javascript ajax it can really all trace its moments back to its creational moments back to these folks who a created the clever technology and b fought to keep it from becoming too proprietary and so a lot of people gave up on say their own personal benefit to to believe in a cause that was the greater good of society through open source now the thing to also think about just kind of in the back your mind is if it wasn't for microsoft would netscape have been successful in its original strategy to make the web and both servers and the clients make them proprietary they were going to sell web browsers they were selling web browser from 70 to 100 you used to be able to go to a store and buy a web browser your your computer didn't come with a browser as a matter of fact the first time that microsoft put the browser in with their operating system they got sued for it but by microsoft trying to catch up they had to give their browser away free which made it impossible for netscape to charge for the browser and so in some ways not that microsoft was trying to make the world safe but they basically blunted the blunted put hundreds of millions of dollars into blunting netscape strategy and making sure that well they didn't make it but it the net result was the creation of firefox in mozilla and a much more and world wide web consortium and a much more fair marketplace so the world wide web consortium it was created in uh october of 1994 cern made a conscious decision even though it knew that the web had been created there that the sort of future curation of the web and what the web meant was not something that a physics lab should take on and so tim bernerslee went to mit mit welcomed him with open arms they funded him they helped him create the world wide web consortium and have done a wonderful job in leading the charge in defining the standards that that me make that that that define the standards that define what html is what css is etcetera now in october 1994 there was no way to know if this was going to be successful again it was somewhat of a reaction to netscape who had this sort of like you know bunker mentality the netscape was going to take it all over and own it and push every all these open people away tim and mitchell and joseph and all these people did not want that to happen they felt it should be free for everybody and open and many browsers and many servers and everything should interoperate and standards were the key to that and the worldwide web consortium was going to be the vehicle through which that happened but they didn't have any power compared to netscape and netscape had all the money but ibm and microsoft were not particularly fans of netscape either and so they early on changed joined the world wide web consortium and gave it enough credibility to eventually sort of take over uh in terms of being very respected and the standards produced by the world web consortium are high quality and very respected and and they're they're guiding their shining light to keeping the web safe for the rest of us and let proprietary companies do their proprietary thing but the world wide web consortium is is a real important part of today's web and so we finally come to the point where you can assume the web where the web is just there there was a bunch of browsers there was a bunch of servers there were some open source stuff and nonopen source stuff and um and and i want to briefly introduce you to tim bernerslee this footage was taken by richard wiggins not me um caught him at a conference and he's only we only got about a minute of his video last month i was off in boston for the fourth annual world wide web conference and i had the opportunity to talk to the inventor of the world wide web tim bernerslee and i asked him a little bit about where we going with this web stuff and we have just a little bit of footage from tim telling us where that's going to be you didn't see nothing yet but you wait until people assume the web when the web becomes something you can assume when the web or the infrastructure is all laid down or you have an information space then it will be time for the next revolution and who knows what that will be it's hard to imagine a greater revolution than what we've seen i mean i go to the smallest places and everybody's putting up a web page right the web could only take place the revolution the web revolution could only take place because the internet which had been a quieter smaller revolution but that had been an internet itself quietly being deployed throughout the world had happened because the internet was something people would assume the web revolution could take place when the web is something you can assume then maybe a cultural revolution a nicer cultural revolution any cultural revolution perhaps or maybe we'll find ways of doing things better than we hadn't imagined pretty neat rich one of the things that i i liked about it was he he just said we're gonna his idea was the next step is something completely different a cultural revolution is compared to just a little more technology i think you can see that tim bernerslee is a real bright guy with a real strong vision of the future and a real deep commitment to the the web and the internet being a agent of change in the world and uh and i think that it's going to continue to be that unless um proprietary companies can get an upper hand and so it's a it's really incumbent on all of us to protect the freedom of the internet and there's there's believe me there are organizations that think they should run the internet and the web they just are they never have stopped so we're at the point where the web is all here it's quite amazing and before we move on i want to i want to characterize just a little bit about the people you've met so far and talk about some of the common common things that that they they have between them and in a way this i got the book the wisdom of crowds here one of my favorite books each one of these people when you listen to them talk they would quite often talk about all the other people doing all the other work and and and they rarely consider themselves in any way heroes they rarely consider themselves as the great innovators they always see themselves as part of a collective curiosity and there were many things that i haven't told you about that were curious explorations that helped inform it and and this was really research and you know until sort of the late 90s it was just a question of how to do it and at some point after the late 90s it switched to what to do with it and at that point we have a whole different group of people that start really entering the world um and and one that's one of the earlier ones and and has benefited greatly from it is jeff bezos and he's the founder of amazon.com and if you listen to jeff you will hear that he talks very differently he comes at it from a business perspective he's not necessarily trying to make the world a worse place he's trying to make the world a better place the fact that you can get you know all these books like the next morning that's kind of cool um so what amazon does is really wonderful it's it's more efficient for society it's economically beneficial but he has a profit in mind he is saying this web exists browsers exist protocols exist how can i take best advantage of it uh richard wiggins caught up with jeff in 1997 so just look at how smart this guy was in 1997. everyone else figured this out much later but jeff bezos is a really really bright person so here's jeff bezos hi there who are you i'm jeff bezos and what is your claim to fame i'm the founder of amazon.com where did you get an idea for amazon.com well three years ago i was in new york city working for a quantitative hedge fund when it came across the startling statistic that web usage was growing at 2300 a year so i decided i would try and find a business plan that made sense in the context of that growth and i picked books as the first best product to sell online for making a list of like 20 different products that you might be able to sell and books were great as the first best because books are incredibly unusual in one respect and that is that there are more items in the book category and there are items in any other category by far music is number two they're about 200 000 active music cds at any given time but in the book space they're more than three million different books worldwide active and imprint at any given time across all languages what more than one and a half million in english alone so when you have that many items you can literally build a store online that couldn't exist any other way and that's important right now because the web is still an infant technology basically right now if you can do things using a more traditional method you probably should do them using the more traditional method what kind of inventory do you keep we inventory uh the best selling books at any given time we're inventorying in our own warehouse only a couple of thousand titles and then we have we do almost in time inventory for another four hundred thousand titles or so we get those from a network of electronic we order electronically from a network of wholesalers and distributors we order those today they're on our loading dock the next morning then for another 1.1 million titles we get those directly from 20 000 different publishers and those can take a couple of weeks to get and then the uh there are a million out of print books in our catalog we have a calendar two and a half million books all together those million out of print books some of them we can get and some of them we can't but we find them uh if we can and then we ship them to our customers we do kind of a search on those what's almost in time inventory almost in time inventory is the phrase we use to describe a whole selection of books that we offer it's basically the things that are you know below the 2000 bestselling book up to the 400 000 bestseller book those are titles that we can get from a network of more than a dozen different wholesalers so if a customer orders a book from us today we order that book from our wholesalers today and that book shows up on our loading dock the next morning and then we can ship it to the customer they say one of the toughest things to do on the internet is to capture mind share what was your secret how did you do that yeah even more generally i agree with you that you know capturing mind share on the internet is extremely difficult even more generally it's the late 20th century not just the internet you know capturing attention attention is the scarce commodity of the late 20th century and one of the ways that you can do that and it's the way that we did it was by doing something new and innovative for the first time that actually has real value for the customer that's a hard thing to do but if you do do that then newspapers will write about you what you're doing customers will tell other customers and you'll get a huge word of mouth fan out and and that can really drive and accelerate businesses and that's what happened with us in the first year of opening amazon.com to the public we didn't do any paid advertising and all of our growth was fueled by word of mouth and media exposure i saw a little ants at the bottom of the column of the new york times that was our very first advertising um we don't do that anymore but at the very very beginning we did little tiny ads at the bottom of the front page of the new york times i thought that was very clever it's sort of using a url as a macro because i read and it expands we're a bookstore click here right that's a great way to think of it and it worked very well apparently i don't know you know the problem with that kind of advertising is it's extremely difficult to track um put a different url for every uh that's the problem is you want people to start to learn your url so you don't want to actually use a different one and it's very easy one of the great things about online ads we do advertising today in maybe 40 different uh on different websites we do banner ads and that advertising is very easy to track in terms of knowing how effective it is so we know for each piece of creative in each venue not only how many clickthroughs we get but how many sellthroughs we get how many dollars of revenue it generates per ad dollar spent on that creative in that venue and that is a sort of a marketer's uh you know nirvana in a certain sense well it's an exciting place to be on the web right now oh it absolutely is i mean it's just incredible this is what's really incredible about this is that this is day one this is the very beginning this is the kitty hawk stage of electronic commerce we're moving forward in so many different areas and lots of different companies are as well in the late 20th century it's just a great time to be alive you know we're going to find out that i think a millennia from now people are going to look back and say wow the late 20th century was really a great time to be alive on this planet so if you're a stockholder of amazon i think you're in good shape because he's a bright fella and he's always looking for how to really do the right thing and you know give us products that we really like now in this we sort of evolve the modern internet and and much like jeff jeff said that investment was growing at 3 000 a year or something like that there was this mania in 96 97 98 where people just bought and bought and bought and the notion that communications was going to be so valuable led to in the sense an overbuilding of the fiber optic plan we have a massive amount of fiber optic in the ground right now and our ability to send more data through the existing fibers by just upgrading the equipment at the two ends that's growing very rapidly as well and so we're in this really weird world now where a fiber optic between ann arbor and chicago 180 miles is not that much more expensive than a piece of copper wire that goes 30 miles in 1960 and so distance is less and less important in the internet it's why long distance phone calls don't cost any money anymore because long distance and local are not that different because there's so much fiber in the ground but just one thing i want you to think about and wonder about is will we run out the we're living off of the overbuilding that happened in the late 90s and they put so much in and they've been able to upgrade it so effectively but we might run out and where will the money come from to dig the next set of trenches to put the next round of fiber in uh we'll have to see so if we take a quick look at this is a graph of the growth of the of the servers on the world wide web and if you take a look we start in 1990 with one web server december 1990 uh with tim bernerslee having one web server and then it sort of doesn't grow and then you sort of see kind of like this take off in the last two years last late two years the 1990s where you go up to about uh you know 20 to 30 million uh you know from what i don't know 1996 is 200 less than a quarter of a million dollars and unless the quarter of a million hosts you see the uh kind of the crash the boom and the crash where it wasn't growing and then you sort of see another new graph which is really this is when everybody had to be on the internet every little store started being on the internet every web one had to be a web server this was kind of the big ones coming on and this was sort of like the flame out of the exuberant growth of the late 90s and this exuberant growth gets so exuberant that it really changes the stock market in the united states and the rest of the world to the point where you know from the early 90s to 2000 was the longest period of expansion and there's a lot of factors for this but one of the factors is as we began to use communication and computation to make commerce more efficient that triggered a great deal of growth it also triggered over speculation right and so the kind of um the uh this part here the the crash the dotcom crash was a bit of the over speculation working its way out probably if you know if they hadn't overspeculated it would go like this instead but it can't be like that you go crazy crazy crazy crazy crazy oops and then we sort of had a crappy economy for a while after that but again the web the internet and all the technology that i just talked about really put a stamp on the entire world's economy in the 1990s so i could go on and on and on and on about this stuff open source is a big part of this um i will put links up for uh these videos that i've got these are three open source luminaries that i've interviewed uh richard stallman is the free software foundation the gnu which is much of unix utilities are written this way the compilers are written this way he is a a tremendous advocate for open source software also we meet brian bellandor from the apache foundation and the apache foundation was formed based on the web server that was created at ncsa became the first web server that was the apache web server so that lineage goes all the way back to joseph harden and the team at ncsa and then rasmus lierdorf is the inventor of php in one of the many very popular web programming languages for building websites and so i'll put the links up for these and you can take a look at them we got our start in the early days of the web as a group of disaffected webmasters who were using a piece of freely available web software but i i had difficulty with it we were fixing bugs we were sharing these bug fixes with each other like a baseball trading cards if you will these these patches as it's called and uh one day we discovered the group that put out the web server that we were using uh basically folded when all their developers left to go join a brand new company called netscape so a bunch of us decided that hey we're dependent upon this software we don't want to become fulltime web server developers but we want to be able to to to use this thing that we've had for free and be able to prove it and all that kind of stuff we looked at the license of the code and the license said here's the software do whatever you want with it uh don't blame us when it breaks right uh and uh we said hey that's a pretty good bargain why don't we pass the same bargain on to the next group of people right uh so we formed a a mailing list right uh and this was mostly again webmasters and people working at some early internet service providers or or website design companies or places like amazon or the internet movie database and we combined our patches together and decided to call it a apache server for that reason and uh it went forward and really the model of how we worked was based upon kind of us as a group as peers proposing ideas you know vetting each other's ideas and patches and fixing bugs you know as a group as a team none of us had met in person well some of us had met but as a as a group we didn't meet in person until 1998 really three years after we got our start and long after by the way we'd become the most predominant web server product on the planet um and yet at this time still no money no dime not direct to us from this piece of open source software but plenty of us you know made our living off of building things on top of this piece and that's really the story i think of of kind of successful open source projects writ large which is people working together on on common technologies to solve common problems so they can go off and make money on other places or so they can have fun they can try new ideas they can you know uh be experimental right um and that's that's really the same story of apache and of linux and all these other open source projects it turns out to be not that hard to to be able to work together when people have the same common goal which is let's build a product that that does all this great stuff um one thing that we did do that made it easy to make some of these decisions was to have a very uh modular api which made it easy for us to be able to say hey if you want that special cool feature do it as a separate thing and and make it successful and we'll decide whether to bring this into the product once it's become successful or not right another key thing that plays into this that is true of all open source projects is that an open source license like we had on ours uh that linux has etc carries with it something called the right to fork which means that if i were to go all you know colonel kurtz on on the project and started saying we're going to go here you know and no one else wanted to follow well all of those other people could decide to pick up the code and go start a different project somewhere else you know if they couldn't kick me out which is probably what they would have tried to do first right this right to fork you know means that you don't have to have any tolerance for dictators you don't have to deal with people who make bad technical decisions uh uh you know you can take that future into your hands and and if you find a group of other people who agree with you you can go on and create a new project around it so i think that rule that right to fork limits the kind of excesses that we see whenever we start to talk about how do groups make decisions and and conflict arises how do you deal with that conflict and it means that you your style of leadership isn't so much one of control and plotting you know moves ahead of time but instead one of um being able to to get people on your side convince them that that you're the you're going to value their efforts value their the the contributions that they make and up next we're going to start digging into how this all works rather than what it is uh how it came to be so we're going to talk about what it is rather than how it came to be and and so thank you for your time so far and i look forward to seeing you at the next lecture oh oh hi sorry i was uh i was in the forums i guess it's uh time for this week's video so uh this week we're moving from history to technology and and in a sense we're gonna tell the same story again uh you know we'll sort of start at the beginning but we're going to start from the bottom and work upwards so since we're kind of talking about the same things um but just from a more technical perspective don't worry you'll be fine um we're not going to over there's no math i promise there's no programming don't worry about that so of course i appreciate ieee computer magazine who i write for to let me use the articles that are associated with some of the videos as well as the folks from open michigan who have helped me so i'm gonna say no hang on got a phone call i'll be right back okay well that's been sent sorry for that interruption um again i thank everybody for the use of the copyright materials um part of my hidden agenda in this class is that you will be able to look at this xkcd comic and you'll understand the humor so i'm going to stop for a moment and let you look at it and see if you get the humor okay so maybe you did maybe didn't but hopefully by the time we're done you'll have a better chance of getting the humor so if you recall the most academics throughout the 60s 70s and 80s the best they had access to was this store and forward networking where you would send a message and it would go into a computer and it might sit for some time then it would find its way across on a network it would sit for a little while longer find it and and hop and there's these multiple hops we call these hops and each of these would be a couple hundred miles per house and to go from say uh michigan to stanford there might be 15 or 20 hops cops are as much defined by geography where we're all trying to optimize the cost of these long distance connections so the thing that really characterized store and forward networking was that there wasn't a lot of sharing one message was being sent across one of these links at a time and all the other messages just kind of waited in time in line now that the the innovation that happened in the research networks in the 60s through the 80s ultimately embodied in the arpanet was the fact that they were going to be packet networks first how do we share one link so that a long message doesn't clog it up and how do we deal with outages more dynamically with the idea that eventually you could send a packet across the country and back into a computer and back out maybe a half of a second and that was seen as something to do rather than somewhere between 10 minutes and a day or two so how to do this efficiently it was a research project and it was a research project that lasted almost 20 years well 20 years and 20 or more years and and it the one of the neatest things about this is they were able to throw it away and rewrite it a bunch of times so that they could put something in production see its flaws see what was good about it then they had the money from darpa to throw it away and rewrite it now by the late 1970s it had you know 100ish computers on it here's a picture and these are not the schools these are the computers these are you know listing all of the computers that are there and so the engine the the innovation that they spent 20 years perfecting was the notion of packet swishing so how can we simply move data simultaneously across the connection and the essential brilliant idea is break the message into packets and again to sort of review here i have a message and i have postcards that only can handle 10 characters and i'm going to send this hello there have a nice day message to daphne in california and so i have three 10 character postcards i basically put a from address and a two address on each postcard and a sequence number on each postcard one two and three and i put ten characters on each and then i stick them in my mailbox i just put them in put the sign up and then i wait now let's just say um you know that the the post office person comes and picks this uh this first one up and uh it goes to chicago from a minnesota mini from michigan and then it goes to omaha goes to denver and then the second one kind of falls on the floor and it ends up going to charlotte north carolina and then they're like why is this here and then they sent it to atlanta to get checked and then they make sure and and this one goes and number three ends up going to st louis and then tulsa and then colorado and this one gets routed back to charlotte because they weren't sure why they sent it to them in the first place and then they sent it to memphis tennessee and then this one makes it to california and then this this other one sort of goes to phoenix and this one finally gets to dallas texas and this other one goes finally and then this third one goes to tucson arizona and then las vegas nevada and finally makes it right so these poor little postcards that i put in they have each a different journey right it's a little adventure for each of the postcards that they go through and so we don't i don't see how this works on my end i put in three postcards i numbered them one two three but on the far end in california daphne opens her mailbox and has scribbling all over her mailbox oh the shame no actually get rid of the scribbling so daphne opens up her mailbox and she doesn't know how these packets got there ivy postcards how they got their outcomes the first one she goes oh looks like i got a message from chuck but i've only got part of it then out comes the second one shortly thereafter and then after a long period of time finally the third one comes out but it's actually the second one and now she understands that she's got the entire message and she reassembles it and away we go and so this is the basic notion of how all those postcards can share the infrastructure all they can all be invited at the same time they can take different paths you don't have to connect them all together like trains basically and and this led to a shared network infrastructure and so the computers that were in a store and forward network went from sort of big powerful computers with disk drives to really tiny computers with a single purpose of forwarding packets rather than long storm storage of message and so so the the store and forward had longterm storage of messages in the routers so the but i mean not in the wrappers in the store and forward the old one longterm storage was somewhere in the network but this was only shortterm right shortterm storage shortterm storage and so when a packet comes out it simply has to find its way through a series of cops it still hops and it's still connections but basically it has to find its way across the internet and then we would take whole campuses like university of michigan say or stanford for example and then we'd have sort of various kinds of local networks on those campuses and computers on the campuses and servers and various things and they would route all their packets all their data out to the internet and then the packets would find their way across the internet and then we might have a home connection as well that might connect and so the shared shared network infrastructure focuses only on packets not reliability or anything else so this notion of hops didn't go away as a matter of fact i don't know how many hops it took to get from ann arbor to palo alto in using bit net i'm going to guess it might have been 16 or 20 and these days it takes 16 or 20 hops the difference is is in the internet the 16 or 20 hops happens in a hundredth of a second or a tenth of a second so the notion of hops and the notion of intermediate computers is still present in the internet and the tcp networks that we use today and so your your message sort of leaves you the host that you're in hops to the first router and then hops to however many routers dot dot this is more of a dot dot dot thing and then finally hops its way out to the far host and so this is sort of either your computer maybe stanford's web server and then there's this series of routers in the middle that it hops through okay and so the problem of what data goes between here and here is you've got to solve a lot of problems right how to all kinds of problems and so in order to simplify the solution or break the solution into simpler more manageable parts they came up with a layered network model now this is a cartoon and computer people love drawing cartoons and saying this is our architecture this is our framework this is our approach sometimes they're helpful sometimes they're not helpful sometimes the cartoon is just kind of a cartoon but what's usually being communicated in these kinds of pictures is they're taking a big problem and breaking it down into some subset some set of smaller problems so the whole problem that they've got to solve of getting data reliability reliably across the whole country is that big and if we can break it into four pieces and work separately and come up with ways to let these pieces interact work separately with each one then maybe we'll have a better solution okay so take a problem that's so large and so complex that we might not be able to solve it and break it into four smaller problems gives us a better chance of solving the four problems now there's a certain art to picking how you break the problem up and there's more than one network model the one that we use in the internet is the tcp or internet protocol suite model and we'll meet some of the people who designed that uh there was also a model called the seven layer osi model open system interconnection model so there's a model out there that has one two three four five six seven layers and they all have names and they all have purposes now definitions uh this was not quite as power this was not very popular and i doubt that it's many places because the tcpi model is the one that kind of won and so that's the one that we're going to study but that doesn't mean that that has to be the only one but it is the one that has become popular on the internet so once you break the problem down from a big problem into four small problems you have to develop documents about how these layers work together how various computers work together how routers work all these things and so early in the process of the development of the arpanet they created an open process to build these specifications where they would invite invite engineers from all kinds of companies and universities and who knows what any expertise to show up at a meeting several times a year i mentioned the ietf meeting when i was talking about the history of the internet and the tim burner's leave off that only 15 people showed up to that's this meeting it's the internet engineering task force which is just a bunch of engineers that get in a room get in many rooms and solve a bunch of problems and so the standards that come out of this and you can go read them they're all open documents they're very throwback documents they've got this text thing and it's got all this like beautiful uppercase that reminds me of when back when printers didn't have lowercase and these are documents that describe how most of the components of the internet work together so the layered architecture that i just described where you have a computer and then it sends data out the back of it and then hop hop hop hop pop through routers then the data rises destination computer and then the destination sends it back it's hop hop hop hop hop coming back and it comes to you we're going to expand on this a little bit so each of these hosts on the two ends is going to expand to this much right here so that's one host that's another host and each of these routers is going to expand into this so this bottom picture is just an expanded version of this upper picture so that we can see how the internet layers work together so when you send a message in on your computer it's this is all software application transport internet link so this is all software and then it comes out the little plug on the back your computer right so maybe your computer has a little plug like this on the back of it right that's an ethernet plug and here's an ethernet wire and unplug my local area network in right and so this right here is that right there that's kind of the plug it might be wifi which means it's kind of like air but if you have a wire like this then it's a little more tangible and there's something on the other end of that wire this is a very short wire but there would be a router on the other end of that wire the router takes the data off the wire and then forwards it just like a post office intermediate post office would do on to the next link on to the next link and this would be multiple hops in here they're only showing two hops and then finally it's on the last link going to that computer at stanford and then it goes up through these four layers of software and then goes and does whatever it's going to do now when they send you the response back it kind of goes the other way and back up and back to you so if this was you in a web browser you know and then here's me and here's a slide i've got right this web browser and you move in your cursor in the web browser sending stuff back and forth to the coursera servers kind of here and that's what's happening right so if as we look at this picture over here this left column is the host you're coming from the right column is the host you're going to and the routers are these things in the middle okay okay so let's start looking at all four layers we're going to start at the bottom at the link layer and then we're going to move up so if you recall when i talked about the the the basic reason why we even have a layered architecture at all is to simplify the problem to simplify the problem so the idea of the link layer is the link layer is a it all only worries about getting the data across one hop right only worries about getting the data from across one piece of wire what like voltage goes on these little wires and how we send the stuff and if more than one computer is using the same wire how do we share it's a complex enough problem but we don't worry about the whole world we worry about this one link layer and so the link layer is sort of like the connection out of one computer and into another computer and and this might be fiber optic might be you know 40 miles or it might be 40 feet for all we know but it's one link okay and then a router pulls it off that link and then forwards it onto another link if you go to the post office you could think of the the person who picks your mail up from your house with the thing on their shoulder that's one link then they put it in a truck which takes it to a place that puts it in a semi truck and then it puts it to another place it puts it on a train and the semi truck and the train and the postman or post woman are these little link layers each person or semi truck is not taking it all the way they're just getting a little farther so that's the link layer so the link layer doesn't worry about the rest of this stuff it really the stuff that is defined on this wire really doesn't even care if there's a world wide web or anything its job is to get data across one foot that's what its job is is it up is it down how do we share it doesn't care it's got a very narrow view so what it means is we can zoom in on this problem right we can zoom in and focus and ignore everything else so the link layer basically asks questions like you know i've got some data inside the computer and i want to send it out how do i encapsulate it what if this is shared how do i deal with that and common link technologies that we see are like ethernet or wifi or cable modem dsl satellite or optical right these are all links layers of one form or another so if you're going back to this ethernet link layer which is one of our favorites because it's kind of ubiquitous other than wireless it's probably ethernet is the most ubiquitous link layer so when the manufacturer builds an ethernet or a wireless adapter they actually build into it which is probably right here i don't know it could be right here um they build into it a serial number so they they mark this as having a serial number and you can actually whether on windows or mac you can work your way down to find the serial number for your actual manufacturer piece of equipment so there's one on the mac that's an example one on the mac and that's an example one on the pc they tend to be six two digit numbers concatenated together often with colons in this case in windows it shows dashes and so this is a raspberry pi and all the raspberry pi's are going to actually have similar prefixes and then serial numbers within that prefix and so the raspberry pi's get manufactured they come out of the manufacturing line with this sequence number just kind of going up up up up up and um then they get shipped to all corners of the world and so these numbers are not the numbers for this to get across the world all the number all these serial numbers at the link layer are good for is to get across one connection in case that connection is shared and if you were to plug this into a hub and you're plugging other computers into that same hub well then you're sharing that connection and this computer might see the traffic for that other computer and so we use the physical addresses so that this computer knows which of the packets belong to it on the piece of wire so wired ethernet or wifi certainly if you're sitting in a room with a bunch of wifi computers you're sharing the air so you have to come up with rules how to share this how to share nicely and how to behave so the way it works is you could and this ethernet could easily have a bunch of other computers hooked to it right because it's really shared and so they're all sitting here they're all talking simultaneously you know but we have a we have a pair of computers that want to talk so it's not just one it's got a bunch of folks sitting here just draw a bunch of them bunches of folks they're all talking or all potentially talking and we got to figure out how in the shared medium like this is think of this as a hub and they're all connected into this hub including the two we want to talk they're all connected in the hub including the two that we want to talk and how can these two make sure that the data goes is this data that's sent with the intention of going to this computer this router how can it make sure that it gets there well if it knows the address of the sending and receiving unit it just encodes that in the packet and that way it sort of goes by all these folks let me change colors here the packet we send goes by all these folks and even if they all heard every one of the packets they all know that it doesn't belong to them because they all have a different number and this is the only one that responds to it so that allows them to share the wireless or the wire and share the wireless or the wire and have it all work out for them so so that's the idea of the link layer now again remember this might only be 50 feet or 50 yards or 50 meters will make it meters it's only 50 meters but you still have to share the network in that 50 meters and then the router takes it off of that and forwards it on a different link and that's how we get across the country but that's the next layer up and let's not worry about that for now so the idea is think about one link whether it's fiber optic or cable or wireless or wifi and so what are the kind of problems that you have to solve on this link layer well so one of the things that's cool about many link layers is like wireless and ethernet is they can be shared and it makes it really easy just plug new computers in so you just sort of like here's a hub and you just plug another computer and it's on the network but they have to come up with a way to avoid the chaos when they're sharing and so the the way ethernet does this is with a technique called carrier sense media access with collision detection and as you'll see a lot of the things that we do on the internet have a lot to do with courtesy meaning that we're just nice and if everybody's nice it all works out it's kind of like driving in a car just everyone can't run through the stop sign at the same time somebody's got to stop got a green light your turn my turn whatever this probably wouldn't work so well with cars because sometimes you do have a collision of packets you just have to wait packet collisions don't crush your car they just slow your data down so here we go this is basically carrier sense media access with collision detection the first thing you do if you want to send some data say we got some data inside a little computer we're going to send it out knowing that there might be other data going by the first thing we do is we listen we listen to what's on there if it's not silent we just wait until it goes silent and then we start sending so if someone's already using it why crash into their data and crush their data because there's it's shared there's only one you can't both be sending at the same time so first you listen once it's silent you begin transmitting data and then what you do is you also listen to your own data and if your own data is coming back then it's sounding pretty good and and then if if you if there is a collision because there's a chance that two computers will want to send at the same time and they'll collide then what they have to do is back off and they have a sophisticated random number calculation so that they back off not always the same amount each computer backs off a different amount and they make it so that it's fair so one computer is not always backing the most off so it's very fair so it's when you detect a collision you retransmit after a random back off first you avoid collisions but in the in the rare case that you have a collision then you do this and so um i want to introduce you to the person who invented ethernet ethernet this is robert metcalf and he was working at xerox palo alto research center park everyone calls it park and they had they were building what is most considered the first computer the alto computers they were connecting line printers are fast printers to these xerox was building the first laser printers and they needed something faster and so they just started building it and they built this thing called ethernet now it's a little different than the ethernet that we see the first ethernet that they built is a little different you can see a picture of it down here if you ever go to xerox park and get in you'll go see this little museum they have it used a single piece of cable that ran along they just ran it down the hallway and they would connect a tap in and then they would use that to send the data so it would go down the hallway and the tap would come out in each office and they were truly sharing the media this is not shared except when you plug it into a hub that's what makes this shared and it was inspired by an earlier wireless network where they were doing not collision detection but retransmission called aloha and a lot of early network packet network inspiration uh comes from the alola net in uh you come from university of hawaii and because they didn't have anything except wireless but they did have wireless they did a lot of really cool early research on wireless and so uh let's go ahead and meet bob metcalf the inventor one of the inventors of ethernet so i was extraordinarily lucky and happened to be at the xerox research xerox palo alto research center when a problem evolved that had never before occurred the problem had never occurred and that was the problem of having a building full of personal computers and i was a networking guy so they turned to me and said network these puppies and we had just finished starting the internet it was then called the arpanet which was packet switching and it was pretty clear we wanted this network to connect to the it wasn't yet called internet thing so it would be packet switched we're pretty sure at the same time we were building uh arguably i don't want to get into that argument the first laser printer which in our case the first one whose name was ears that's a whole other story it was a page per second 500 dots per inch and if you do the math that's about 20 megabits per second so the existing methods of interconnection had a a lot of problems one is they were all home run so all these wires one from every desk would all come to this one place in the building and put a big rat's nest we called it a rat's nest by the way two is they generally ran at 300 bits per second or if you really rev them up they go to 14 4 kilobits per second and that wasn't even close to 20 megabits per second so and we wanted to be able to keep the printer busy by sending documents from all these pcs which hadn't been built yet accepted part well they hadn't been built even in park at that point so we were building the printer and we were building the pcs all at the same time so i um started work on this and there was a presee an effort before mine called cygnet at park and it was being done by charles simony my friend and uh but he wasn't a networking guy so they sent me in to pick up cignet from charles and he was going to go off and do something else and by the way the thing the other thing he did is he wrote a text editor a word processor called bravo which then became microsoft office wow so charles is a billionaire and he's been to the space station twice the international speed so maybe i shouldn't have kicked him off cignet maybe i should have done bravo i don't know anyway so i uh immediately decided that cygnet by the way cygnet stands for simoni's infinitely glorious network was in fact infinitely glorious and much had too many moving parts to be a lan by the way the word lan wasn't invented until 1990 and this is still 1973. so the word land was way in the future so that's an anachronism anyway the the cygnet had too many moving parts for a land and it was in the course of investigating how to organize this land that i ran into a packer by quite by accident by a packet radio network at the university of hawaii it was called the aloha net and what was beautiful about the aloha network is it had it solved a distributed problem that is how would we share a radio channel back to the mainframe in hawaii at the university if we were just a bunch of terminals scattered among the hawaiian islands and they couldn't really easily talk to each other to get coordinated how would they coordinate their sharing of this inbound radio channel and norm abramson there at the university of y devised this very simple randomized retransmission procedure where a person would type by the way what they would type was a card image it was 80 columns wide back from the days of card batch processing so you would type in your card image and hit send and then your terminal would send it in toward the mainframe and then would wait a short time to see if there was an acknowledgement returned on the outbound channel and if there was everything was hunkydory but if there wasn't that probably meant the two terminals had decided to send at the same time so then as many terminals as participated in that collision of transmissions would then randomize and and then retransmit at a random time in the future thereby if they overlapped here they very likely would not overlap again in the future because they would choose different random numbers to count down so that's randomized retransmission multiple access so i since i was trying to avoid this big rat's nest of wires and only wanted to have one wire just one wire not 16 or 32 or whatever the alternatives were just one i wanted a distributed solution to how to share this cable and the aloha network produced that using randomized retransmissions so then i um actually you know there's sort of two stories here one is a hardware story we've learned about the hardware there's a hardware story and there's a software story and the hardware story is uh not that interesting but it's there so one of the first things i did was to buy a kilometer of cable or maybe a mile i don't know if i'd gone metric yet but i saw a spool of coax cable about this big with the two ends sticking up so i got a pulse generator and i hooked it up to one end and hooked it around back into the oscilloscope and started launching square waves down the cable and watching what came out i thought that would be good preparation for building a network and what came out the other side wasn't a square wave it was sort of sort of lazy rise times and lazy fall times but if you put a a digital gate you could recover the square wave that is you just said use the digital threshold and so out of this gate came a square way so you could recover at the end of a mile of cable this square wave so i kind of knew i kind of had some confidence then that we that various stations connected to this cable could inject their square waves and the other guys could recover them so that hardware wasn't that hard but it um it was a straightforward so the first hardware was kind of relatively straightforward very straightforward and the and the square wave by the way was called manchester u what we do is we take the bit we'd make a packet of bits and then we'd send them one at a time down this cable and we would encode them and the encoding was also simple it was manchester coding meaning for each bit the first half of the bit would be the complement of the bit and the second half of the bit would be the bit so you would have a transition in the middle of each bit cell which is a very simple modulation scheme so as you're sending the packet the cable's wiggling and you can recover the signal at the other end and clock those bits into a shift register then click to clock the shift register into the memory and collect the packet that way and that all took just some soldering to make that all happen basically well i don't wanna it got a little bit complicated when you wanted to put 255 of them on a mile of cable you had to be a little bit careful about the impedance of the taps because a square wave coming by a tap might generate reflections that would then interfere but the beauty of manchester encoding was that while you were sending a packet there were constant transitions so if you listened you could tell whether a packet was going by and you didn't have to listen for long you only had to listen for about a bit time and then you which which turned out to be 340 nanoseconds so you could wait that long and tell whether there was a packet going by so one of the first differences between the ethernet and the aloha now there are a lot of differences but one of the first ones was carrier sense in the aloha network you couldn't tell if somebody else was transmitting at the same time as you but on the ethernet you could and the advantage of that was you might as well if you're sending and somebody else is sending at the same time you might as well give up because you've destroyed each other's packets so punt then that recovers that bandwidth that would otherwise be lost to just continuing to transmit a damage packet and the the other thing was this this manchester code meant that the cable was on half the time and off half the time that is the the driver sort of an open what we used to call an open collector driver would either yank the cable up to three or four or five volts i even forget the voltage now but it was under five i'm sure that i had a rule i never won above five volts uh you would yank the cable up and then during the other half the bit when you weren't yanking you let go so so for example in each bit cell you got to look to see if anyone else was transmitting when you had stopped and if there was somebody else then you had a collision so that was the second feature so it was really a digital signal it was really a digital signal it wasn't modulated signal in any way right no well it was uh best you could send a digital signal over coax on off with the manchester encoding so the ink manchester encoding is akin to a modulation scheme but it's the simplest one you can think of it's very baseband yeah and it is very baseband but it's a sort of modulation scheme that a computer scientist would come up with as opposed to one of those fancy radio people right so and and by the way i took a lot of gas from all those radio people why did you use such a simple scheme you wasted you would have wasted all that ban you wasted all that bandwidth that capable that cable was capable of carrying hundreds of megabits per second and you only carried 2.94 what a waste of the cable well there was plenty of cable to waste so we've talked about carrier since inclusion detection and the scheme would be that each packet would carry two addresses the address of the destination and the the address of the source and each of these would be eight bits and so on the back plane of these little personal computers with wire app you would wire wrap in a code between 0 and 255 and that would be the serial number of the machine and that and then you would read that off the back plane and put it in the packet so each packet had two addresses this is different from the loan incidentally which had one address because the channel was only going through two channels so two addresses and we added uh a cyclic redundancy checksum on the end of the packet which we implemented in hardware so that you in addition so you could tell if the packet had been damaged so if there was a collision and the terminal the contending stations backed off there would be a hunk of garbage on the cable zipping around but when it was received the checksum wouldn't add up and you just throw that chunk of garbage away the day that i was launching pulses down this spool of cable i was doing some soldering and i was doing some knife work to get the insulation off the copper and and across the room was a young grad student who was doing something else and he noticed me not being good at this and turns out he was very good at it because he had worked in a television studio and he had worked in cable television so he knew all about skinning wires and coaxes so he came over to help me and i was his name was david boggs and then we started working together and invented ethernet together so he was and he was he was slightly more hardware and i was slightly more software but there was then a third guy who was even more hardware than david who was the picofarad guy the guy who would put those last few passive components on the end just to be sure that that connection to the coaxial cable would be clean for transmissions you wouldn't every time you tapped into it you didn't put a big lump of impedance on the tapping seems like a counterintuitive thing to me i mean think that i mean everyone would think that a star is the right thing but you were going to tap into that just well one of the problems we decided to solve was the rat's nest problem we did not want a rat's nest and every time we installed a new pc we didn't have to home run a cable back to the rat's nest so we wanted to put one cable down the middle of the corridor and then every time you want to put a pc you just run up and tap into it and we didn't want the network to go out and go down while you were tapping into it because we wanted 24x7 access to the network so there had to be a way to tap into the network without bringing it down so that led to a a device we found in the cable tv industry okay it was called a geralt tap and it was basically a vampire tap you'd you'd drill a little hole in the outer casing of the coax and then you would screw in this tap that would puncture the insulation and go right to the copper and tap in and you notice in that operation you're not breaking the copper so the network continues sending you tap in and you're now part of the network so that came from the cable industry it did oh so a guy named david liddell who had done cable tv installations when he was in grad school in toledo uh suggested that we use the gerald tap since it was already being made in volume and worked just fine as far as he was concerned and it allowed us to solve the rat's nest what we perceived to be an important problem the rats nest problem the aloha network ran in the kilobit per second range like 4 800 or i don't remember the numbers but kilobits per second ethernet then started at 2.94 megabit and in those days by the way t1 was 1.544 megabits per second so in 1973 he said it was already twice as fast as t1 of course t1 still around oddly but then we went from 29 2.94 we briefly went to 20 megabits per second inside of xerox and then when we bumped into deck and intel for the standardization process in 802 we decided on 10 we came down from 20 to 10 so the chips would work and then we went from 10 and later i helped found a company called grand junction networks that introduced the 100 meg ethernet and i remember being at my coffee table in palo alto i think it was i forget the year no maybe it was in woodside but we were trying to think of how we would make a faster ethernet and uh there's some math that shows that if you as you go faster the efficiency depends on the diameter of the network and as you go faster and faster the efficiency goes down the diameter network in bits and we're trying to go up a factor of 10 and and then i don't know who it was one of us observed that wait a minute we've been assuming that ethernet is a kilometer in diameter but we're going we're all going to hubs now so that we only need 100 meters not a thousand meters and that was the factor of 10 right there so by changing the collision interval you maintain the same efficiencies uh theoretical efficiencies by just assuming going 100 meters instead of a kilometer so that got us to 100 megabits per second and now gigabit 10 gigabit which i guess is the mainstream now and then 100 gigabit is now from beginning to run 100 gigabits per second you can't you can't be a computer scientist and build that kind of digital now you have to actually be an engine a hardware engineer to run at 100 i think at that point you're pretty much a radio person yes but then after 100 gigabits comes terabit so i've already begun giving talks on terabit ethernet welcome back so i hope you uh enjoyed that now i want to make it real clear that when i give you a 15 minute video of an amazing inventor and computer scientist you don't have to remember every word that that person says okay it's more important to get the gist of it i try to cover the things i really want you to know in my slides and you might want to listen to it more than once or listen my slides and then go back but you're not i don't want you to memorize it i i wanted to give you smart people i want you to hear from the smart people who did all this cool work in their own words but when we hear from their own words they're sometimes pretty technical so just relax and enjoy listening to these people and understand that you're not going to get everything but hopefully you'll come back and you'll get more and more later so the idea was that he really started with this idea of wireless which which was we're going to share one medium and the wireless and the wire the ethernet wire that he built the coaxial cable that he built was like a giant radio except it ran in the ceiling and so the design ended up really simple and that's that's been good for ethernet over the years and later wifi is a variation of ethernet um and so it turns out to be uh sometimes it's best to build something simple but that just make it go really fast and make it really cheap he also formed the company 3com which was one of the first manufacturers of pc cards and so back in the day you would go buy a pc and you would go buy a 3com card and plug it in the back your computer and so there was a time when san francisco stadium candlestick park was named 3com stadium and our friend bob metcalf was involved in all of that so he's done many things throughout his life and we're honored to have met him so we started with this fourlayer architecture that says we're going to break down a big problem of cooperating applications across various kinds of networks we're going to break it down and we just got done talking about the link layer it's literally 20 000 maybe 50 000 engineers have spent the last 20 years figuring out how to make this work because the layered architecture lets them think although it was informed they have twenty thousand fifty thousand i don't know twenty thousand engineers that think about that problem and they ignore the rest of the problems okay they ignore the rest of the problems that's great because they've gotten really good at this one problem now we're going to go like you know i don't know how many engineers let's just make it up 5k engineers think about this next problem the next problem is called oh my color's got to change the inter network layer it is the notion of forwarding each of the postcards with a from in the two address forwarding enough times to get them all the way across the network that's the next problem we're going to solve we're going to stop thinking about the link layer we're just going to assume it works it's just magic that's what a layered architecture gives you you don't worry about the stuff above you you don't worry about the stuff below you you focus like crazy on the stuff that you're focusing on so the link layer only works on one link right it worries about one link and there might be 15 or so of these links but the internet layer worries about all the links and the proper sequence of links to follow to get from um to stanford that's a kind of complex problem we're not going to worry about reliability we're just going to worry about if i had a pack if i had a postcard with a from a2 address a packet can i get it there how will i forward it i assume the link layer is perfect so the internet layer is the first end to end because if you recall this vertical box set of boxes is the host starting computer and this vertical set of boxes is the destination computer so in this little raspberry pi all four of these things application transport ip and the link is all part of this one gadget okay so i p is best effort and it's okay to drop data if things go bad and that's one of its charming most charming features but what it had to introduce in addition to the ethernet addresses or the media access layer mac addresses is an address of the destination now if you remember the mac addresses the addresses for the link layer come from the manufacturer the moment this equipment is manufactured is burned in a serial number but these move all around the world if this runs here at the university of michigan it needs one address to connect to the network one ip address if it runs in stanford it needs a different ip address so we have to be able to change these they're assigned differently so it's the worldwide number that is your like postcard address it's like a phone number right so wherever i'm at you call my phone and this gadget rings so it's address well that's actually kind of a bad example because i use the same phone number okay ignore that phones use magic they use crazy magic so in computers they're not as cool as phones you have to change the address everywhere you go we'll talk about how you change the address everywhere you go the ip addresses are based on where the station is connected they do get reorganized once in a great while but not very often and you can even go to various websites on the internet and say i p address lookup is the most common search and it will tell you something about where you're coming from right and it'll kind of be sometimes really weird because you might be at a starbucks and it might send it all to st louis and it might say oh you're coming from st louis even if you're not so you can look it up and you can look up other address as well you can say oh here's an ip address i'm going to look this one up first it starts by looking yours up but you can put in different addresses like in this particular one if i put a different address in here it will actually go look that address up so the ip address format it's four numbers that are separated by dots each of the number can be between one and two thousand and 255 and it's just a representation of a 32bit number back in the day they kept the numbers small because didn't want to use all the computer memory and so this is an example of an ip address four numbers between 0 and 255 separated by dots okay now the concept the address is broken into two parts there is the network number part which is the prefix and then there is the computer number within network okay and it's kind of like phone numbers were before cell phones where the area code was where the phone was and then this was within that area code where to find it and even the older days these were actually geographic too right so these numbers would be neighborhoods or whatever these days it's all electronic so that the the precise mapping of a phone number to a geography is uh is less precise and that's why you get a cell phone number and you move to a whole new state you keep your old cell phone number because it's become electronic but in the early days when it was actual relays and switches making the phone numbers work they actually had to do with where it's actually kind of fascinating how phones work gotta how to teach a class on like how phone switches worked in the 1800s actually quite fascinating because they were surprisingly simple that's the interesting part how simple turn of the century well turn of last century phone numbers were so let's get back to ip addresses there's four numbers some part of those four numbers is a prefix we call that the network number and when the packet is in the middle of the network it doesn't really look at these numbers it only looks at the prefix so it kind of thinks of all the packets going to a piece of university of michigan as 141 211 star star and then we we design these numbers within michigan and then this number is assigned to us by the internet authority that assigns numbers so we say hey we need some more and they give us a prefix then within that prefix we get to set up all the other things so this network number which is the prefix of the ip address is the way that a packet is routed through the internet as it progresses through the internet and so it's sort of like if i start with if i start with my computer here at um and that's my number that's my actual number and here's the stanford computer and that's its number right and i send a packet and i say okay this i'm gonna i'm gonna send it from 141 to 11 144 188 269 67 149 yada yada as soon as the packet enters the network it doesn't throw the data away but it stops thinking about it only looks at the prefix and so it simplified greatly simplifies what the routers have to do as it goes across the hops in the internet it's greatly simplified because it only looks at the first part it doesn't have to look at the whole thing and then it starts making decisions as to how to get there says okay i'll hop it over here then it's like in kansas city and says ah what am i going to do here and i'll pick one of those two links and i'll go over here and then as it exits the network it dumps it somehow onto stanford's campus and then it finds its way oh didn't find it to this one it found its way to that one there you go unpredictable computers now it so within the stanford campus these numbers mean something and the stanford campus uses those numbers to get the thing to the actual real computer and so it's sort of use this prefix you know it has a real number but then it uses the prefix in the middle and then the real number reappears at the end so that's called a network number and it greatly simplifies it's complex enough to be in the middle and have to worry about all these things coming from kansas city and beijing and like where these things go to have to look at each one and know where every computer is is crazy so that's why they call it the inter network protocol because it says there's one network there's another network and the only thing i care about is the network number and i am the internetwork protocol i p internet work protocol i'm just getting these things from one network to another network and then it's up to that network to figure out how to get the darn thing to the right computer within it and it's up to stanford to figure out how to get it to the right computer at stanford so these things are called the network number it's the prefix of the ip address now the key thing that it's really a beautiful beautiful design because it because the center of the network is both exceedingly complex in one way that it's so big and so fast but exceedingly simple in the other it just has to move the data from point a to point b and if you think about it's even simpler if we look at it from the perspective of this router the router here i've got circled right it just received a packet it looks at the network number and it actually doesn't even care to some degree where it really belongs it only has one of two choices it's going to go this way it's going to go that way right which one's better and it turns out if you look at it either one would work turns out this one is better but if i went this way it would just take an extra tenth of a second or something right so it turns out the decisions that are made don't even have to be perfect you can make the wrong decision and the network automatically corrects that's part of the goal of the network and so it really simplifies and limits the the the need for each router to understand the entire network which makes these routers i draw them small on these diagrams on purpose because we think of them as small and fast and only solving a really tiny problem but doing it really super awesome so routers maintain what we call router tables and they maintain a list of network numbers and the best outbound route for each of the network numbers now the other thing that they do is they pass routes back and forth and this is how they adapt to errors right they get updated dynamically they ask each other for the best place if they see a network number they haven't seen before they ask their neighbors and their neighbors neighbors and they go oh god okay i got a good way to get to 67 149 and so there's all kinds of communication but it's relatively slow and it doesn't have to be perfect and so it's router tables are what routers have but they're indexed by the network number of the packets not the host of the destination so that's an amazing amazing improvement in the performance and efficiency of the internet core the ip core so it's really quite simple right you basically have a local area network on your campus this might actually be your house too house is kind of like a campus and you can do all the crazy things you want hundreds of computers thousands of hundreds of servers and thousands of laptops and you get one address that is the address of your campus it's the network number of your campus to the rest of the world and then all over the world people can send to you and by simply looking at the prefix data makes it to you keeps this really simple and really fast okay so it's beautiful that's what the network number one area code one network number it's the only thing has to be kept track of a whole um campus can be characterized within the core of the network as basically a single network number now the reality is it's usually a few of these because they get given to you in smaller chunks so you end up with you know 20 or 30 of these things for your campus if you're a medium to large campus okay so now i want to talk a little bit about the problem of computers that move around so you have a laptop and you use it at your local coffee shop and then you close the lid and you go home and open it and it works at home and then you close the lid and you go to school and you open it and talk to wireless at school and it works it's like hey dr chuck you just told me that i have to have this address and i can't talk on the internet if i don't have the right address and the packets are routed based on the prefix of this address why is it that i can be three places coffee shop home and school and it seems like everything works well that's because while your computer has an ethernet address that's baked in at the factory most computers are configured when they first open up and connect to a wifi to ask instead of having an ip address configured in your computer they send a request out to say hey i'm new here is there anyone who will give me an ip address that i might use for this particular location and if there is an access point say at your starbucks it says sure use this one you're at starbucks that's a good number for starbucks now it turns out that the prefix of this is exactly the prefix that the the world sees all this traffic to starbucks so there's actually kind of a real address okay and it gives you an address okay so you ask when your thing comes up it asks what can i get and then it's told what address to use so using one address while you're at starbucks a different address at home and a different address yet again at school so that's called the dynamic host configuration protocol now it turns out with schools and homes and there's just too many computers to give every computer a real address and so we have these special addresses they're called the nonroutable addresses so you'll probably notice if you go to one person's house you will have a ip address of 192.168.something something go to different person's house it'll also be 192.168.something.something they go to your house it's 192.168.something.something and you're like how can that work i seem to have the same address well that's because of a technology called network address translation where each of the home routers actually has a unique and distinct address but you're not seeing it it's giving you a temporary address an address that really can't run at all on the internet it only lives within the house but then as your packets leave the house or leave the starbucks the real address is put in and then when it comes back the real address is taken out and your local address is put in so they're called nonroutable addresses because if they ever escaped into the real internet they'd be like oh those are for your house they're only for they're not supposed to go very far and i don't even know where they go they go nowhere in the core of the internet but they go properly inside your house so the way this ends up working is if you are at your coffee shop the coffee shop has an address you associate with their base access point it gives you a nonroutable address to use locally and then as your traffic gets sent this address is changed to the address that address you never see this happening it's done as the packet goes through the base station and then when the packet comes back it comes back with this address but then as it goes to the base station it switches back to this address so even though this address is not the real address the network sees they see you having this address here so if you would do an ip lookup from a coffee shop the coffee shop will be identified you will see the ip address here and if you looked at your laptop your laptop would not have that same address because it's being translated in the access point so then you go home and at home your access point has a different address but your computer asks your ass address asks your access point for an address and it gets a local address that's generated locally and again there's a mapping it's called nat nat i'll change the color nat network address translation so as the packet goes through it takes out the one address and puts in the second date comes back it takes the address out and puts the local one in and the same thing happens at school right so you're at school finally and you get a different address they're not the same but you look and the prefixes are the same it's like they should be the same place but they're completely different because your school has a different address and there's a translation that goes back and forth as the data goes around and round so just for the distance of the local wifi or whatever use these 192.168 numbers and then they're translated to the real numbers by your network access points so these are illegal inside this network so if it ever saw a 192.168 it would just throw that packet away they're only for very local connections so with that i'm wondering if by now you know why this is funny i'll give you a minute okay so the reason this is funny is she traced the killer's ip address and it had a prefix of 192.168 which means the killer had to be within a relatively short radius using likely the same wifi access point which means it was close very scary i hope you think it's funny it of course xkcd is never exactly funny but it hopefully makes you smile a little bit so up till now i've been talking about so up to now i've been talking about this cloud network that's magic and the packets take different routes and we don't know but they show up remember the mailbox like they just show up or don't show up right so it turns out that sometimes we as engineers want to take a look at what's going on inside the internet and it turned out that there was a feature they added early on to help diagnose problems in the internet that we still use today and it's so convenient that it's built right into your operating system if you have a macintosh or linux traceroute is built in and if you have windows you've got to install traceroute so just say windows install tracer out and you'll find something but there was a problem so if you recall i said that each router sees the world very narrowly and simply sees a packet and makes a decision on one place so let's say that here comes a packet on the way to stanford and these routers are sort of strangely configured this router thinks it should go there this router thinks it should go there and this router thinks it should go there well it comes in and goes like oh well i know where that one goes there so if you end up with this misconfigured router situation you end up with your data going round and round in circles it would actually like crush the network because it's like a whirlpool you can't even notice that it's happening because there might actually be you know 10 you know there might be a bunch of them and then it comes back and you send it around again so you're filling up all your bandwidth it's never going to get there unless something changes and such something crashes it's not going to change because these routers think that's the best thing to do they're mistaken but they are they can be mistaken because they're they're operating with imperfect information so how would you solve this problem it's like routers are imperfect so they solve the problem with a thing called the time to live field so much like the network interest translation tweaks the addresses on the way in and on the way out the time to live is a field that routers change every time a packet goes through a router it subtracts one from this field and it starts with a number between 25 it can be as high as 255 but it's usually like 25. and um what happens is every time the packet goes through a router the number goes down by one so if it was it would be come in here as 255 then it would go through here 254 and 253 it would come back it'd be 252 and what would happen is eventually it would get to one of these guys and it hit zero and they would decide okay you've been running around too long we will throw you away so the number goes down and it always goes down but then when it hits zero they throw the packet away they say we you have been through 255 hops chances are good you're never going to get to your destination so the traceroute command sort of cheats normal packets are sent with a ttl or time to live of like 30 30 hops or 40 hops but what trace route does it sends broken packets it turns out that when a router throws away your packet most of the time it is courteous and it sends you back a notification says hi i got your packet i decremented it subtracted one and it got to zero and i threw it away sorry about that here's here's who i am i mean i really feel bad about throwing your packet away maybe you want to figure something else out i don't know something must be messed up can't be my fault but i threw it away so what traceroute does is it first sends a packet with a time to live of one so the first router goes like whoa this has been around a long time set to zero throws it away then sends a note back then traceroute sends a packet of two across it goes hop hop and it gets thrown away a little note comes back so you can kind of build a map by sending enough packets and getting kind of a return rejection from one of the routers it would have got there so if for example i do a trace route from the university of michigan to stanford you'd if i did it now it'd be a different set of things i get this output and if i take a look at this this is the hop so there's the first one two three four through fourteen fourteen hops so it takes 14 hops now interestingly again i don't remember what the hop count was in the store and forward days but it's quite a few and that's because it's optimizing geography and so you can see the first top is on my campus then i the second and third hop are bouncing around my campus some more now we don't quite know where this one is but now it's on an on a national network called internet2 internet2 internet2 this is probably going across the country and then it ends up on scenic which i think is sort of california's network it bounces through california a couple times let's see uh hpr lax so that's los angeles this is i don't know where that is los angeles now looks like it's making to oakland i don't know there's probably some meaning to these things so it's making it through oakland and then it's going to stanford from something oakland i don't know but now it's on stanford campus and now it has three more hops to get across the stanford campus to the stanford campuses web server now what's also going on here is keeping track of how long it's taking it sends each one a couple of times and so these are milliseconds so milliseconds or thousandths of a second so 534 milliseconds is a half a second 490 is a half a second so these are like half a second half a second oh wait no no sorry not a half second that'd be four thousand well one thousand milliseconds would be one second so i got that all wrong so point four nine milliseconds is like half of a thousandth of a second so that's fast fast six milliseconds is six one thousandths of a second 76 milliseconds which is nine hops away that's seventy six thousands or seven one hundredths so it takes about seven one hundredths yeah so like 77 over a thousand so no seven one hundredths sorry seven one hundredths of a second it's less than a tenth of a second to get through fourteen routers from michigan to stanford less than a tenth of a second pretty impressive now if i do a trace route from ann arbor michigan to east lansing michigan michigan state university we have a very close connection i mentioned the merit network where we've had a close connection for a long time so not only is it fewer hops it's only eight hops to get to michigan state um if you look at the if you look at the hops here um i'm bouncing around the campus for three i'm bouncing through the state for two and bouncing on the michigan state campus for three so it's a total of eight two hops to get two three offs to get across my campus two hops to get across the state of michigan and three hops to get on campus and it's really fast it's nine one thousandths of a second which is less than a hundredth of a second so really fast you can kind of see it now if you ran this trace route more than once this might change it doesn't change too fast but legally it could change i mean it there's no guarantee it's going to be the same it's highly likely it's going to be the same because the most efficient way is not going to change within a few seconds but if you start in the middle of the day and you do it the next day it might change quite a bit so be something to play with run it print it out run it again at midnight run it's noon see if your trace route is different right be interesting so here's an example of a trace route from university of michigan to peking university in china and um and so it's again you know it's it bounces through the state of my campus for a couple of hops right my campus for a couple of hops it bounces around the united states for a couple of hops and then it starts crossing the pacific ocean it goes this there's traffic actually went through seoul korea and then it ended up in beijing now the interesting thing is you can see that it looks like it's taking about sixty one thousands or six one hundredths just over uh just almost well a half a tenth of a second to get across the country and then it starts taking longer and then by the time it's going all the way to china and back it's doing 256 milliseconds which is about a quarter of a second now the big difference here is likely not traffic it is likely the speed of light it is how fast it takes light to get across the pacific ocean so it takes a while the reason i think it's most likely these numbers understand it's low traffic because these are very consistent pretty much all the time so that suggests that we're not waiting for any traffic we're getting through as fast as we physically can which is some combination of the speed of the length and the speed of light so we just got done talking about how we add to every packet this global number the ip address it has the prefix of the network number in the internet part the internetwork where it's really moving data from one network to another network and leaving it up to those destination networks how to how to move it um we end up really simplifying the postcard and the postcard ends up being a really apt example but the key thing especially when thinking about the fourlayer architecture that the reason that i think tcpip succeeded was in this real complex problem of moving data between billions of computers it kept the part in the middle real simple it doesn't try to be perfect it doesn't try to retransmit data don't try to store it it doesn't try to keep it in the right order it doesn't try to say that if this packet went here i'm gonna make sure the next one goes there the two packets one if one gets ahead we don't really care um it means it really fast and really scalable and um by keeping it simple and really fast um it solves really an amazing problem but we yet have other problems to solve so i want to close this lecture by introducing you to another person so vint cerf was a graduate student as the whole notion of packet switching was being sort of examined both in the federal government at the defense advanced research project agency darpa and in higher education both in the united states and europe uk and elsewhere and so vint cerf was kind of at the right place at the right time and we could be very thankful for that he's credited as being one of the fathers of the arpanet which of course begat the internet and so vint is going to talk to us in a sense going back even free arpanet and bring us up packets and what packets mean and then how that all flowed into the arpanet and how the arpanet evolved to become the internet enjoy packet switching was an idea which was specifically studied by len kleinrock at mit who was actually looking at message switching and he did a brilliant dissertation on the use of queuing theory to analyze what networks of cues would look like using this message switching approach and his analysis although we'd never use the word packet is as equally applicable to packet switching as it is to message switching so that's one important milestone in round 1961. in 62 or thereabouts paul barron is doing work for the rand corporation and is deeply concerned about the ability to preserve command and control in a postnuclear environment we were seriously worried that the russians would actually launch and that we would suffer a nuclear attack and then we had to be able to respond and we needed command and control for that so paul in 1962 before the existence of integrated circuits or anything else is saying we really should be digitizing and packetizing voice and then using sort of the pole mounted radios that are able to transmit in all directions to create a highly connected environment so that if holes were knocked out of it by nuclear explosions you would still if it's a fabric that's in any way connected information could get from one end to the other so he envisioned the notion of a message block and it was dynamically routed he used hot potato routing if you got something he got rid of it as fast as he could he chopped up the speech into little 20 millisecond pieces he didn't talk so much about data as i remember it and this was supposed to be a highly resilient voice network for command and control i may have just done him a disservice because later he was very much conscious of the importance of data communication too so that's around 1962 it gets documented in an 11 volume series called undistributed communications and he can't sell it to anybody the traditional telcos att in particular and the people at what was then the defense communication system or defense communications agency laughed him out of the room said this was a silly idea couldn't possibly work and so you know he should just go away so he never got anywhere with that in spite of all the documentation in 66 larry roberts along with one other guy whose name i'm now not remembering does a pointtopoint experiment to test packet switching it was between the ansfq seven machine at s system development corporation in santa monica and uh the uh tx2 machine at mit lincoln laboratories was where larry was they demonstrated on a 2400 you know bit line bit per second line that you can move packets back and forth then in the 6465 time frame a man named donald w davies at the national physical laboratory in london also gets the bug tries to get money from the science research commission at uh in england and gets only enough to build one node you know he the one node network so he builds this packet net he invents the term packet to describe what these objects are and it works he's got a bunch of you know terminals and other things hanging off of this one node so in a funny way he built a local area network if you like but it was you know based on physical wires so those three guys introduced packet switching larry and uh whoever it was that he worked with um demonstrate that it's possible to get two very distinct kinds of computers to talk to each other using the standard way jcr lick glider is a psychologist actually at mit but he's convinced in the early 60s that computing is important to nonnumeric processing that it will allow people to work together and collaborate in ways that they never could before he comes and starts the information processing techniques office at arpa with this being his bonnet and who does he encounter he encounters douglas engelbart at sri international and the two bond basically because engelbart was all about nonnumeric computing and the ability of people to build up the superstructure of communications and documents and interact with each other hyperlinking the mouse the portrait mode display back on my black and white presentations i mean the guy had a world wide web in a box at sri and lick lighter understands that lick lighter is sending out notes to his little community of people talking about the intergalactic network you know maybe tony and cheek so he really gets credit for having put this meme in place at arpa then taylor comes along to pick up the the responsibility for running the ipto from lick lighter and is all hacked off because he's got three terminals in his office at the pentagon connected to three different machines and he can't through he says why can't there be one terminal talking to all three we need a network and so as he's pursuing this idea uh with charlie hertzfeld who's the head of arpa at the time charlie hands him a million bucks over a 20minute conversation and now taylor's got the problem who's going to actually do this because taylor is not a technologist either he's another you know kind of psychologist type so he decides to get larry roberts from lincoln laboratories who did that packet thing and larry doesn't want to come so he goes and complains about this to charlie hertzfeld charlie calls up the guy that runs lincoln laboratories and says you know we pay for a significant fraction of your research budget every year you should you should tell larry he should show up and in fact i thought that maybe larry had been forced to do this you know by charlie i think it was probably a little less awful than that but larry was persuaded to come down eventually of course inherited the operation of the office from bob taylor but in the meantime is the guy responsible for doing the initiating the internet or the arpanet project so they write an rfc or an rfq request for quotation a bunch of responses come back probably on the order of a couple dozen i don't know personally for sure how many i know that i wrote one of them with my colleague steve crocker while we were still at ucla as graduate students but we were consulting with a company called jacobi systems in santa monica jacobi systems wrote one of the responses bull bear neck and newman wrote another response primarily written by bob khan who come to bbn from mit so the responses come back and they get evaluated and four of them end up and the jacobi systems one isn't one of them or if it was it didn't get selected bnn got selected so steve crocker and i kind of hiked back to ucla as graduate students and the next thing we know glenn kleinrock who's at ucla and who'd written you know this original dissertation work on packet switching has come to ucla to teach and explore um a queuing theory is uh a closed uh compatriot of larry roberts because they were both at lincoln labs together so he gets the network measurement center piece of the arpanet project and steve crocker and i and john postel all of us from the same high school in santa monica and the san fernando valley end up in lane kleinrock's operation running the network measurement center so i was the principal programmer for that steve crocker took the responsibility for managing and leading the network working group has led to the protocols host to host protocols and john postel eventually becomes the keeper of the documentation he's the rfc editor which steve crocker started request for comments he's the guy that becomes the numbers are which is keeping track of address spaces and allocations and eventually becomes the domain name manager or the internet assigned numbers authority when the internet happens that hasn't happened yet the this period of time of the arpanet program it brings us up to 1972. and this is an important moment in this whole history because the first demonstration of the arpanet happens in the washington hilton hotel basement in october of 72 a whole bunch of people from the networking interested networking community packet switching community attend not only in the us but from france and from england and italy and germany and elsewhere that group of about 25 or 30 people convenes sees the arpanet in operation sees applications that were being done including doug engelbart's stuff and then forms this international network working group modeled after the working group that steve crocker managed to build the arpanet system and at this point i become the chairman of that group because steve is busy at arpa doing artificial intelligence the next at the end of that year bob khan leaves bulk baron nick and newman and goes to arpa i leave ucla where i've been working with kleinrock and and crocker and pastel and i go to stanford so bob is at arpa i met at stanford and in the spring of 73 bob comes out from arpa and he says i have a problem he says what's your problem he says well we got this arpanet and he said yep but we also are working on other networking capability to make command and control work for the military if you're going to be serious about putting computers in command and control they have to be mobile they have to be in you know armored personnel vehicles and tanks and all these other things they have to be seabourn so we can ship the ship and ship to shore communications which means satellite and we so we need mobile radio we need satellite in addition to the fixed wire systems that are represented by the arpanet we have fixed installations that are not moving around so we have all these different technologies and bob's brilliant idea is not to build one network with all those technologies embedded in it instead he breaks them apart and says let's build a packet satellite network which optimizes the use of satellite takes into account that it's got a half a second round trip time let's build a packet radio network which optimizes a system whose connectivity is changing with time as things move around and you get variable delay and also variable interference so these were three different packet networks then the problem is how do you hook them together you wouldn't have this problem if you put all the technologies into one net but if you put them all into one net it makes it really hard to do control over all these highly variable parameters so instead he says break them into different networks and connect those together so we design and build a gateway which today we call a router and that concept also introduced a whole bunch of other things like how do you refer to another network each network thinks it's the only network in the universe this is true of the proprietary networks like sna and decnet and so on and you didn't have a vocabulary to say take this packet and move it to another computer on another network somewhere else that you might not even be connected to so we have to invent an internet address space in order to solve that problem we have to find a way to allow packet losses in this path to be recovered which is where tcp now becomes a manager of reliability on an endtoend basis instead of relying on each net to be reliable the arpanet was built on the assumption you could build a reliable underlying man the internet was based on the assumption that no network was necessarily reliable and you had to do endtoend retransmissions to recover so during this 1973 period bob and i get the papers first paper written and published in ieee transactions on communications may of 1974. and i think mostly nobody paid too much attention to it meanwhile arpa is funding us to go make this actually work at stanford i am working with my graduate students some who are in xerox part summer at stanford on this detailed specifications of tcp we published that in december of 1974 and it's the first time the word internet shows up in print anywhere because the first papers we talked about internetworking so internet shows up in a complete spec in december 74 and it's also got bugs but we don't know that yet until we start implementing it in 1975 with two other organizations so bob khan says can't have just one implementation baltimore naked newman becomes one of the implementers university college london and peter kerstein's group in england is the second or third implementation so we have three implementations of tcpip in fact by this time it's only tcp we haven't broken off the ip part um three implementations are going we instantly find problems with the design and we start evolving so over a period from 1973 to 1978 we go through four iterations of the design and implementation and test until we have a fairly stable thing and then we standardize and so 78 we fix everything it's now by this time the internet protocol has been split off because people like david reed and danny cohen are saying we need to have realtime communications that is not necessarily reliable but which has low latency so voice communications radar tracks and all that you don't care where the missile was two seconds ago you want to know where is it now so and in the case of voice if you lose a packet you just say say that again i missed something so we split tcp into tcp and ip and we create something called user datagram protocol which is parallel to tcp and it is the real time low latency version of the reliable tcp all of those little components iptcp and udp now go into the internet architecture starting in 1978 and we start implementing for the next five years we start we do everything we can to get tcpip implemented on every operating system we can find it goes on to the ibm machines it goes under the digital machines hp goes into unix we have a unix version built by bolt bareneck and newman we send it out to berkeley to the berkeley bsd release guys and bill joyce's i don't like that code he writes his own puts it into bsd 4.2 and that's the version of unix that carries a lot of tcp to the academic world because at the same sort of time frame some microsystems comes along and builds these fantastic workstations and they want to use open source or at least open protocols and open operating systems so they adopt unix and the tcp comes with it and they use ethernet as a way of connecting workstations together so they are the engine that's driving the academic community which are all game busters for workstations and highspeed local networking so all of this of course places huge demands on the arpanet backbone which is only running at 50 kilobits a second and eventually leads to the need for higher speed nsf jumps into the fray seeing how valuable all this is for the academic community and concludes that it should build a network that runs even faster and it does so it's called nsf net the domain name system it really doesn't have a great place to fit in this architecture it is the thing that converts user friendly names like www.umish.edu to to uh like a networkfriendly address these network numbers and ip addresses are important because they are the they encode the geography of the connections of the internet but we humans really don't care about the geography of the interconnections of the internet www.edu or www.facebook.com is what we want to remember so i like to kind of think of the the uh the domain name system is kind of like sort of somewhere either between the internet and the transport or between the internet and the link or somewhere like in this area you know somewhere here and it's certainly not in the application layer it's not the link layer it uses the link layer but basically it's kind of a little addon to the side so the domain name system is for userfriendly names okay so let's talk a little bit about just how it works because domain names are what we use all the time and i p addresses are what computers use all the time and routers use routers really have no knowledge of the domain names they simply move data based on the ip addresses numeric addresses are tough for people to remember i remember in the old days we would have little postit notes on our computers and that's how i would keep track oh there's a new minnesota just put up a server let's put that number on my little postit note so the fact that they were numbers didn't bother us at all because there was only 40 of them but quickly there was more than 40. and each campus even in the early days only would have one network number but now campuses have 20 or even 40 network numbers multiple groups of addresses they're groups of addresses but they're many of them they get reorganized you move a server from one place on campus to another like the the michigan web server it was on our north campus it would have one address it was on our main campus would have another address and so you don't want people to know what these ip addresses are so they invented this notion of a domain name system the name the the visible name that we could switch the mapping from the name to the ip address transparently and so the domain name system is like the internet's address book and it's a big distributed database that's fast it uses caching so that it's locally fast even if the network is partially down i p addresses reflect the technical geography and they read right to left at least to the point where the network number is kind of the physical attachment point for the campus or business and then this part is the attachment point within that campus or business and so the most specific the least specific to most specific goes from left to right domain names on the other hand are like organizational structure the least specific is on the far right and then it goes more specific as we go left so edu means educational institutions umich.edu means the particular educational institution university of michigan si.umich.edu means a school of information at the university of michigan not all schools is just a particular one and then dub dub dub is a particular server at that school and it reads like a postal address so if you think of where i teach 2455 north quad it's kind of on earth and it's on the country usa and it's in a zip code it's in the state of michigan it's in ann arbor and then this is the building and then this is the room number in the building so we go from very general to very specific so domain names read in a sense right to left phone numbers and ip addresses read left to right the other thing that's interesting about domain names is that they're owned they're owned from right to left and so there are sort of there's a hierarchy and basically an organization owns edu the organization's name is educause it has conferences and other things but one of the things that it does is it owns in the public trust the name edu so university of michigan could go to edu and say hey could i have umich.edu and they would say let me think about that and then maybe they would give it and they did because university of michigan nobody else had it and it seemed like a good name and university of michigan was like accredited institution of higher education so they would give it to them if i wanted to say like hey i'm dr chuck and i want to create dr chuck university i could have dr chuck.edu and they would go like no you can't you're not a university you're not you're not an educational institution so they might say yes they might say no things like.comand.org they're kind of a catches catch can and so the first one who gets there uh tends to win there's there's some situations where if if i got cocacola.com and had no particular use for it and cocacola owned the trademark cocacola they could take it away from me unless i had a legitimate purpose for it it's harder for me to imagine a legitimate purchase cocacola but target.com might be a club for target shooting and it would be difficult for target to say sorry i gotta take your your your target shooting club away because that's even though it's not as big as target's company it uh it's a legitimate use so at each level once the university of michigan is awarded the university of michigan it creates a mechanism to award sub domains within that and so there is actually a committee at the university of michigan and if we want like our learning management system is called ctools.umich.edu if we want that we have to go to the committee and convince them to give it to us a toplevel domain within the university of michigan we got one the school of information where i'm a faculty member is si.umis.edu and they gave us that one i could go to that committee and i could say hey i'm going to be doctorchuck.umich.edu and they would say no you can't so then the school of information where i teach has si.umich.edu and they have a committee and they can give out sub domains within that so you get the picture right so i could go there and say hey can i have doctorchuck.umich.edu si.umich.edu doctortruck.site.iumish.edu and they would say no but you can have csev.people.si.umis.edu so once you own one of these things you can give out subdomains i do own doctorchuck.comchuck.com and if there was a high desire for something underneath doctorchuck.com then i could have my own little business selling domains under doctorchuck.com nobody seems to want any of those things but you know some people have mail.com and other things and so each one of these is a new potential for expansion and so that's kind of how the domain name works right it is this mapping between these names there is sort of this right to left ownership of these names and uh and you have to ask people to get those names and so that's a real quick overview of the domain name system hello and welcome to the transport layer we're working our way up from the bottom of our four layer architecture up to the top so we're kind of at the halfway point we've covered the link layer like ethernet and then we covered the internet work layer which is kind of like the postcard layer so let's let's review the magic of ip right the magic ip is this postcard layer that bounces these packets with from addresses and two addresses through you know 15 or so hops getting them there getting packets to their destination network from one network to another network as well as it can and when it gets to the destination network it finds the final computer on that network the magic of this is there is no interim longterm storage inside the network all the longterm storage is outside and now we're going to talk about that so one of the things that makes ip so fast is that it is not demanded to be perfect it is not demanded to deliver data in order and it's not demanded to it is there's no requirement that it doesn't lose data it's fast and barely ever loses data but when it does there's a layer to recover and that's we're going to talk about next so the internet protocol is this multihop packets can take multiple paths they can make use of all kinds of crazy links but now we're going to move up one right we're going to move up to the tcp layer so the tcp layer is both simple and complex the purpose of the tcp layer is to compensate for the possible errors in the ip layer as well as make best use of available resources so if the network if the overall network from the overall network from here to here is extremely fast we want to send data really fast right if on the other hand the overall network from here to here is really slow we want to send data slowly and be efficient because remember part of the goal of the tcp networking is to share effectively and so we need to be aware of whether our network is fast or slow and those are the kind of problems we solve the tcp layer how fast is the underlying network how reliable is it and if something goes wrong what do we do to deal with that so the key idea in tcp is that when we send some data we break it into packets and then we send each one and then we keep them until they get an acknowledgement from the other side and then and only then do we throw them away and at some point if a packet gets lost it can be sent again and again and again until it finally is acknowledged in the destination system and so that's basically what tcp does is it figures out which packets have or have not made it across the internet layer so here's an example scenario so we got a message it's broken up into five packets we've got sort of the first hundred characters the the you know first characters the second and third packet now what tcp does is it speculatively sends a few packets says okay let's let's get ahead because if you sent one and waited then you might not make best use the network so you kind of guess and dump a few packets out there and so you said let's say we send three packets cue them up for sending and as fast as we can send them out the back of our network we start spooling them out the back of their network and somehow two of them make it across the internet to the destination but somehow that poor second package just like every time i'm doing a lecture the poor second packet never gets it you don't want to be the second packet in one of my lectures because you're gonna get it but somehow the second packet has gotten vaporized now time passes and the receiver gets this this sensation that maybe maybe maybe something's missing and so it sends an acknowledgement back and it says i'm going to send a note back that says look i'm ready for 200. i do have 100 and i'm ready for for 200. matter of fact i might even throw away 300 because it's been so long so i want you to start me over at 200. but sender all of a sudden knows that 100 has been sent and so it knows that it can throw this one away now right it's been acknowledged so there's an acknowledgement stream that goes back and forth so now the sender says 200 and 300 and then they make it across the receiver says i've got 200. this is the 300 and then they send 400 speculatively 300 makes it 400 makes it and the receiver says i got 400 which means now it can cross off 300 and 400 right check those off and throw them away and then send 500 across and then at some point check those off it's got 500 and now the sender can sort of like empty check everything off everything's been sent and it's been acknowledged and we know and so that's kind of an oversimplified view of the kind of bookkeeping that's going on on both sides of a tcp connection and so this right here is in a sense the genius of the internet the storage requirements in the middle the routers this is the ip basically the the network of networks they we didn't design these to require a lot of storage we wanted them to be fast we wanted them to be agile we want to be dynamic we wanted to be clever but we also gave them right to fail so we didn't demand storage we didn't say hey to hold on to packets you know all over the place just store up piles of packets piles of packets would pile up in these we don't ask that no router has to keep the pack as a matter of fact routers are supposed to throw packets away to communicate back and forth between the system that maybe things aren't working so well and don't use me to get to california this on the other hand with hundreds uh maybe you know hundreds of thousands or millions of routers but billions of computers on the outside so we need a way to make this reliable so we need to have memory to store the packets while they're in flight so we can retransmit but we store the packets in the computers that are outside and there are billions of these computers there are billions of them every computer that you carry around every laptop yeah come here every time we add another computer to the network we add storage for packets that are being sent so when your computer or our phone is sending across the network it is responsible for retaining its own copies it does not expect the inner part of the network to do so and that is absolutely brilliant so the it's what really makes this work and so that's kind of a a great oversimplification of what's going on and it turns out that there is still a lot of engineering to make that happen so i'd like to introduce you to to another of the innovators in the that we meet in this class uh his name is van jacobson and i met up with him at xerox park uh he did the work we're going to talk about while he was at berkeley and in the late 1980s uh there was this prediction that the internet was going to die and uh it seems obvious that it was a it's a good idea now but back then there was a bunch of folks that felt like academics weren't smart enough to make a network and uh and they were like ibm and digital equipment that thought they the vendors should make the network and we should just pay them to use their network and um as the nsf net was coming up and more and more computers were being connected and the background was backbone was so slow it started to fail and it looked like the predictions of all of the computer vendors that said academics couldn't build a robust scalable network we're going to be true and so van jacons tells the story very differently but the way i saw the story happening and unfolding in 1987 is van jacobson saved us the network was crashing and we all installed van jacobs and patches and the network got better and it in my recollection this was the last time it appeared that the entire internet was going to crash so we named it the van jacobson protocol and he doesn't like to call it the van jacobson protocol because he's a shy and unassuming guy but i i think he saved us and so this interview is him describing sort of that moment back in the late 80s where he invented the slow start algorithm that really is part and parcel of every tcp implementation that you have on every computer that you use as a matter of fact it's being used to to flow control on this lecture right this second as we speak so here's van jacobson do there were lots of campus ethernets because they were really easy to deploy and you could put them in a department and then you could run a wire between two departments and you had a bigger network and so we'd grown up networks sort of by agglomeration in lots of different university campuses and nsf came up with some money said oh we've got a little bit in our budget where we could get some 56 kbit lines and tie those campuses together and they did that made the nsf met phase one but now you're tying together 10 megabit campus infrastructure with 56 kilobit wires and it was wildly popular because people that couldn't talk could suddenly talk and they're sending emails and moving huge files and uh just everybody's really excited about this technology but um any one of those campuses could over subscribe the net by a factor of a thousand so we had a lot of packets piling up and getting dropped at the time i was a researcher at lawrence berkeley lab which is in the hills up above the berkeley campus and i was also teaching on the berkeley campus even back in those days which was mid 80s we had a for every class there was a messages group you know like a little news group that was set up all the assignments would be put online and i was trying to get course materials from my office in lbl down to a machine in uh evans hall at berkeley and uh there was like zero throughput in the net it was uh one packet every ten minutes or so and it seemed unbelievable would be unbelievably bad and i went down and talked to mike carrolls who was heading the bsd group the people that develop berkeley unix and he's getting reports of these problems from all over the country from in those days the easiest way to start running tcp was to bring up berkeley unix because there was a arkafunded very nice implementation in it and everybody was seeing poor performance so we talked for a long time that day and on succeeding days about well what's going wrong but is there some mistake in the protocol implementation is there some mistake in the protocol is this thing was working on smaller scale tests and then it suddenly fell apart i think we struggled for three or four months just going through the code writing tools to capture packet traces and looking at the packet traces and trying to to sort out what was breaking and i remember the two of us were sitting in mike's office after we've been pounding our head against the wall for for literally months and one of us i can't remember which one said you know the reason i can't figure out why it's breaking is i don't understand how it ever worked uh you know we're sending these bits out at 10 megabits they're zipping across campus they're running into this 56 kilobit wire we expect them to go through that wire pop out on the other side go through how could that function that turned out to be the the crucial starting point that at that point we started saying well what is there about this protocol that that makes it work how does it deal with all of those bandwidth changes how does it deal with the multiple hops so this picture that direction is time this direction is bandwidth so that's a fat pipe and that's a skinny pipe and uh the scale at the time is you know this is a 10 megabit pipe and this is a 56 kilobit type so here the difference is about three to one it was really closer to 100 to one and so time seconds times bits per second equals bits so each of these little boxes in there is a packet it's the number of bits in a packet and if you scrunch it down in bandwidth it's got to spread out in time because the number of bits doesn't change and so uh see the burst of packets of windows worth of packets gets launched it's going to fly through the net until it hits this fast to slow transition and then because the packets have to stretch out in time they'll have to sit there and wait as they're fed into the slower wire and you they pop out the other side they get spread out by this bottleneck by the slower wire once they're spread out they stay spread out right there's nothing to push them back together again they hit a receiver it turns every data packet into an ack so you've got a bunch of acts that are going back towards the sender and they remember what's the right spacing for that bottleneck uh so the axe get back to the sender and every act gets turned into a data packet so we can see the data packets flowing back and this is after one round trip time now the packets are coming out perfectly spaced so they go by uh a new one goes into the net in exactly the time it takes a packet to exit from the bottleneck so these acts are sort of acting as a clock that tells you tells a sender when it's safe to inject every new packet and they're always going to be spaced by whatever is the slowest point in the net and the key thing is is how do you how quick how can you get the steady state sort of most quickly without wasting i yeah and the issue the failure we saw was this works perfectly after you've exchanged a roundtrip time worth of packets but when you're starting up when you're here there's no clock and so the hard part on tcp is not getting it running it's getting it started because once you've got it running you've got a clock tells you exactly what to do so if you turn them on suddenly you get in this repetitive failure mode where you saturate the the buffering that was available at some gateway and then when you retransmit you do the same thing again so you're always losing packets but if you turned it on more gradually then you wouldn't overload the buffering and you'd get enough of a clock going so that you control the amount of backlog to fit the available buffer but you'd still be growing the number of packets in flight so that you'd eventually get a you start with a kind of sporadic clock but you'd eventually fill in the details and get it for pack o'clock how did you get it to the point where it was in all the tcp implementations on the planet because they kind of have to cooperate in a way so remember it was a much simpler time when you're talking about all the tcp implementations on the planet at that time there were like four so there was the berkeley unix one there's the mit pctcp there was a bbn one that was used in butterflies and imps and there was a multix one i took the couple of tcp kernel modules that we've been working on packaged them up in a tar i had this horrible driver hack that would let us nerf packets from the kernel and i mean it was really a horrible driver hack it was the way you said what you wanted to snarf was by adb in the kernel you you wrote in binary some new values these are the ports that i want to look at and the driver would capture those into a circular buffer and you'd read kernel memory to pull that buffer out craig larris and chris tork who were working in my group at lbl and we're both longtime colonel hackers we're just embarrassed at this and they put together a really nice clean driver thing called bpf the berkeley packet filter that would let you pull packets out of the kernel by a a very efficient i o control interface and so we bundled all of that up and um on the tcpip mailing list which in those days was you know tcp was very experimental it was very leading edge and pretty much everybody who was playing with it was on that mailing list to announce that this stuff was available a bunch of people ftp'd it uh tried it it blew up sent kernel core dumps and bug reports and fixed the bug reports and put new versions out and somebody would immediately come back and say panicked here do you want the k core and i go oh no embarrassed put out a new version go out somebody else would come back and say panicked here and fixed that and just cycled like that and after about a day we got a version that didn't immediately panic and then started working on the uh the actual algorithms and a little bit of tuning to make sure that it actually did good all the time and didn't do any harm just completely a community effort and you know sort of when the community was saying this uh mostly does good and never seems to do harm that's pretty what much what mike needed to put it into the kernel so he took that the community developed modules and rolled them into the bsd release so basically the transport control protocol has a responsibility of compensating for the imperfections of the ip layer data can arrive not out of order it can arrive not at all and so the tcp layer marks the data in a way and stores the data in the source computers until it is acknowledged by the destination computers and so tcp buffers this information and the buffers are kept on the edge and this allows the internet to grow in wonderful ways so this results in a layer that really provides us what seems to be an endtoend connection so we can send data in one end a stream of data just send it in just roll it in and out comes a stream of data it comes out in the same order it comes out reliably and we can stop thinking about it again the whole goal of this layered architecture is so that we can pretend that the complexity inside this box is simple so it's not simple inside but we the applications we're going to make use of this transport layer can pretend it's simple okay and so we just i put in h and an h comes out and i put in an e and an e comes out and i put in an ll and ll comes out an o comes out and it's hundreds of thousands of engineers and billions of dollars of research that makes it work but it just is simple it's been oversimplified so now we've talked about the link layer the ip layer and the transport layer and up next we're going to talk about what we do once we have reliable pipes connecting one application to another so now we're going to talk about the application layer and up to now we've been talking about these bottom layers and we've been sort of working our way up we talked about the link layer the ip layer and the tcp layer and and and each of these layers works with the other the the ip depends on the link layer the tcp layer depends on and adds value to the ip layer and now we're going to talk about the application layer that is going to make use of the services of the tcp layer and the services of the tcp layer are basically to give us a reliable sequenced endtoend stream that can start in one application in one computer and end in an application in a different computer and have a twoway communication so i can send the word hello hello from one application and then all kinds of billions of dollars of hardware hundreds of thousands of engineers 40 years of engineering design and out comes hello on the other end and what's beautiful and this is the beauty of the layer of the four layer architecture is we just pretend this is magic this is magic we send something and out it comes with that magic available with that billions of dollars and 40 years of research magic available now what would we do right now what would we do with that magic if we had it available to us so tcp is giving us this reliable pipe we're going to think about now we're going to ignore all the rest of it right we're going to ignore all this part we're going to all we're going to say is we have an application on this into our computer now remember this is your computer and say this is the server right so this is you and this is the server and all the software runs in it in in every all the software's running in your computer and all the software is running in the server so the question is what are we going to do between these two things okay what how we what how are we going to ask for data and this application is the client application and this application is the server application client and server are not necessarily the same very much the same client server are likely very different applications the client is like give me information and the server is responsible for giving giving the information to the client so client is often making a request and then the server is making a response back and so this client server mechanism this application to application communication we can build a mail system with it worldwide web or we can stream videos much like we'd be streaming this lecture back and forth but we're going to focus on the world wide web because it's really simple and really elegant and it's probably the easiest one to understand and it's the most popular but there are many other protocols going on file transfer and others but the world wide web protocol httpd is the protocol that is the most popular so the there are two basic questions that the application layer has to uh solve one is which application gets the data and this is done using a mechanism called ports and ports allow a ip address or a single computer or a single server to serve up multiple services and then for a client to be able to dial up much like a telephone extension and pick the service that they're interested in once you've connected to the service that you're interested in like the world wide web service then you have to know the protocol to talk to that ports in tcp are like a telephone extension number again like i said they you can connect to an ip address but then you can connect to a port within it and so if you think about a telephone number and an extension it's sort of a further refinement an ip address gives us a particular server a piece of hardware connected to the internet and then a port within that tells us what application we're going to talk to so let's talk about ports and connections so if i have a server and this is kind of a arbitrary server here's here is a single server www.mish.edu and it has one ip address connected into the cloud we can have many clients talking to it and we have many services running on this server like sending email or logging into that server or retrieving web pages or retrieving my mail from that server and there are ports so incoming email is done generally in port 25 remote login is 22 or 23. web servers depending on whether secure or not or 80 or 443 and the personal mailbox is on ports 109 or 110 and so these computers don't just connect to an ip address but they connect to a port within an ip address so some common tcp ports that we have are the ones i just mentioned and you can take a look at these on the internet the various ports okay now once we have a connection to the web server or to the mail server or to the post office server we have to know how to talk to it and that's what's called an application protocol and that is the rules for conversation the rules for conversing so tcp gives us this reliable connection we now can connect to the server that we desire to connect to by using ports and the question is what are we going to say across that connection and what we say across that connection who talks first what do you send what comes back depends on the kind of server that you're talking to we're going to play mostly with the world what the world wide web click the wrong button there the world wide web server because it's the simplest and it's the most obvious as to what's going on so the world wide web clients and the worldwide which are otherwise known as browsers the world wide web clients and the world wide web servers communicate using a protocol called http as a matter of fact if you look at the top of your url it's http colon slash something right and and so basically there is a specification for how this is done so when they wrote down i'm going to write the first web browser the first web survey they also wrote a document about how that piece of software would talk to this other piece of software and it's a very simple concept http has a protocol where you make a connection to the from the client to the server the client requests the document the server feeds out the document and then the connection is dropped okay so it's very simple we'll actually simulate this this is called the http request response cycle okay and so the way it works is you're in a browser and you click on a link the browser is an application it's the client running on your computer so so this is kind of your computer down here okay you click on a link then the browser makes a connection to the web server and sends a request to for the document the web server looks up does whatever and sends the document back and then the document is displayed on your screen okay so let me show you sort of how this works with a web browser so here is a canonical web page so here's a browser here's the url that i went and got you can get this url as well you can even look at the source so if you look at this source there is my html but one of the things that's in this source is a link and if i hover over top of this link it's going to look like that to hover over top of the link you can see at the bottom of my screen you can see it's going to tell you that we're about to go retrieve page 2.htm now this browser is running on my laptop it is a web client it is an http client and i'm about to click on this piece of software running on my computer and then it is going to make a connection out the back of it retrieve a document and then show me the other document so it's gonna happen real fast i'll click on second page it requested and got a document back and showed me the document so that's the contents of the second document okay and so that is the request response cycle that is triggered that is triggered by me making a click somewhere in my browser the the browser sees the click it opens a connection this is sort of the internet over here it makes a connection request a document the document comes back and then the new document is displayed the request response cycle click request response display click request response display so let's take a look in some more detail as to what's really going on here so the command that is being sent up to the server across this connection remember this part here is the internet right there the command is a get command and the document is based on the url i clicked on that the browser knows about and says get page2.html and then it comes back is html and that is a markup language that describes how this doc this page is supposed to be shown so let's say that we wanted some more detail on how this really worked right let's say we want to write a web browser and we want to be a good citizen and we want to talk properly to the uh the web well we would go back to the ietf the internet engineering task force and we would go grab the document that says hey if you want to write a browser this is what you do this is what you do if you want to write a browser go grab rfc 1945 which is the hypertext transport protocol version 1.0 now i'm sure there's more complex superseded versions of it but if we read it and read it and read it we spent a lot of time we get down to section 5.1.2 and it would say if you are making a request for a document this is the request line it has the letters get followed by a space followed by the url you're looking for followed by a space followed by the version okay so that is the rule that is what you're supposed to send down this connection i'm going to give us some more examples on page 24 and so we could read all this and we could write a web browser but what we're going to do is we're going to fake being a web browser we're going to cheat we're going to hack it we're going to pretend to be a web browser we're going to send the commands to the web browser now i'm going to do this on a macintosh you could also do it on windows if you installed a telnet client okay so the key is you install a telnet client now most people would say telnet is insecure and it is it's a very old protocol because all it does is it opens a tcp connection to a host on a port that i specify and whatever i type goes across that tcp connection so it's a great way to hack especially older less secure protocols so because http is generally a public protocol it's not really highly protected so it's much simpler to hack it hacking secure protocols is requires writing software rather than typing commands so if you're on windows you have to install telnet telnet so what i'm going to show you in a second is i'm going to show you hacking and i'm going to telnet to www.doctortruck.com port 80. what i'm saying is connect me to this server on the internet and connect me to port 80 because i want to do http connections and then i will send one command i'm going to send that command and then the web server will give me back the page okay it's probably easier for me to just do it so let's take a look i am going to simulate what the web browser does when it's requesting well actually we'll go to the second page and when it's requesting the first page it's doing a get for page one okay so that's what we're going to do except now we're going to do it in a terminal so my type telnet oops i always type this wrong telnet www.doctordashchuck.com port 80. okay so now i am connected to the web server on doctorchuck.com i could for example type yo what is up dude now that would suggest i have not read the protocol specification for the http protocol so i do not know that i'm supposed to type the word get here i'm going to type yo what is up dude and it goes you are not from my country you are not from my planet i do not know what you said of course that the way web servers are saying this is they're saying bad request your browser sent a request that this server could not understand it is the request header is missing a colon separator you do not comply go away but we did talk it just told us that whatever we were saying is gibberish to it and that's okay because we have read the document and so we can do it so let's do it so now i'm going to do a telnet to doctorchuck.com on port 80. go to dr chuck hook onto port 80 so we can talk to the web server and now i am going to behave i've read the specification i'm going to type gt get space one space http colon slash slash www.doctorchuck.com one dot htm http space one dot i think there's a slash there oops oh no no no get it right did you write slash one dot zero i think i got that right so that is what i'm supposed to type if i am a real browser now i have to actually type another new line so i'll type another new line and now whoa oh i gave it the wrong page look look look look look i wanted to do i told it to get page.htm so let's do it again do it again i'm not very good at this my browser is much better at it so i type get http colon slash www.drdashchuck.com page1.htm space http slash 1.0 i believe that's it let's hope i got it right this time and then another enter and another enter yay i got it so this time i type you know i type this then i type this now it gave me some header information it's saying things like 200 okay means i like you uh what the time is when this file was last modified it's an html file and it actually shows me the html text and so we have just hacked a web server you can do this to like facebook.com and do a get if you get the right thing it'll give you stuff you could go to various sites you can fake browsers now you're only going to get so far because at some point these servers know that you're not a browser because the browser actually sends a little more stuff than what we just sent but you get the picture okay it's a protocol where we have rules and if we type the right thing if we type the right thing we know what the specification tells us to type we are rewarded with the information on that server if we comply with the server's request we can talk to it if we know how to talk to we know a port to talk to and we know what protocol to talk to that port we can write a client that meets the needs of that server and extract the data so this is i like i like command lines i like sort of old school user interfaces and this is a scene from one of the matrix movies that you may recall i can't put it in here because of copyright requirements i might have the url or maybe students will come up with the url you can probably search for the trinity hacking scene people put it up and then it gets taken down and someone else puts it up so let me tell you a little story about this scene this scene was actually written by a former student of mine who worked on all three matrix movies doing i t work on the movies and they were in australia shooting the the three the second set of three movies and he saw this scene and the scene was supposed to use a minority report style way for her to hack into the the power grid and shut it down he said that's not the way that you hack into computers all good hackers use a text based interp interface some old thing and that's a throwback interface so the wachowski brothers told him rewrite it so we actually downloaded the exact hacking software it's called nmap which stands for network map it is mapping the ports it's probes the ports and sees what's on the ports see what version of the software is on each of the ports figures out what the what the weaknesses of those things are and even automatically exploits the weaknesses so he wrote a script that downloaded this thing that automatically breaks into computers by the way the good guys use this and the bad guys use this same thing the good guys use it to test all the computers on their campus and make sure that they're okay and the bad guys use to break into the ones that the good guys aren't smart enough to fix and so this was kind of cool and and the people who wrote nmap were really quite amazed when they saw the movie they even figured out what version it was and things like that and so it actually triggered a series of uh followon scenes that used actual real hacking software uh nmap hacking software so i don't know if we've got a url for this or not whatever our url i come up with um even the one the nmap people come up with whatever it is it goes away because of copyright but you can find it because someone always puts it back up so okay so you can go and maybe the unmapped people will know it or maybe you just have to search for the trinity hacking scene so you can use telnet and you can hack legitimately hack a web server so basically the application layer is a rich place and there's lots of things that happen in the application layer we have this pipe abstraction it's kind of like a a string with two tin cans and we can shout into one end and stuff comes out the other end uh later we'll talk about adding security to that and we use these port numbers to allow to multiple different servers or services on a computer that we can connect to so we've kind of now reached the top of the architecture of the internet we've talked about ethernet the link layer and the fiber and all the diverse wireless all the wonderful things that happen there the internet work layer which is this kind of geographical hopping thing that's unreliable the tcp layer that retransmits automatically if necessary and then the application layer which is what we do with all this networks it's really impressive that this came out of research work from the 1970s and that most of the architectures that were really present most the ideas the architecture from the 70s are really still present with us today as the nsf net came out these architectures evolved a little bit the last few tweaks and there have been tweaks going on ever since but the really the last few critical tweaks happened in the late 1980s the uh the number of web hosts um or the number of hosts on the internet goes from six in 1969 to sort of a billion in 2011 and and it's pretty impressive that roughly the same architecture that was designed with six computers is still mostly functioning in in mostly the same patterns all these years later with the built billions of computers and so if you start looking at the network now it almost looks like a live creature with veins and nerves and and it sort of almost pulses and you see things like you can search on the internet for how the internet reacted to hurricane sandy when like new york city was just like shut off for three days the internet just kind of like routed around it yeah a lot of stuff went across the atlantic ocean from new york city and yeah i found different paths and you know yeah new york was down but the rest of it wasn't um in many ways pretty amazing and we certainly see other situations where governments try to shut the internet down by going into the server rooms and shutting off you know what they think is the only connections but then more connections pop up and so it's it's very much a uh almost a living thing it's billions of computers and hundreds of thousands of routers and and it's hundreds of millions of simultaneous connections going on all the time including the one we're doing right now probably and it's trillions of bytes of data moving across and it's it's it's not perfect it but it kind of works you can think of it as like the largest energy collective engineering thing that we've done together is humanity we built this it's all one thing and yet it's so many different pieces and we just kind of keep gluing them together and gluing more things on more things and it was it really was created almost like life itself it's very organic it's designed to heal itself rather than be perfect because things that try to be perfect are fragile and they break too easily but things that are designed to heal can heal and you're never perfectly correct you're never all the way up and you're never all the way down and so that's what's interesting about the internet oops went the wrong way and so we kind of come to the end of this where we started out with like machines and pulleys and gears and spraying oil at bletchley park and typing a few characters on a keyboard to this thing where we sort of just take for granted that we can watch basketball anywhere on the planet just with a couple of swipes of the of the key and and in a sense it's just that same human urge to communicate at a distance and so the last thing that i'll close with is another video from van jacobson now this is about a technique he calls contentcentric networking and not everybody agrees with van jacobson on this you can ask people and they'll say it's a good idea that i don't present this as the future i present this more to get you thinking that there is a future that might be different than the present that what i just told you that seems seems like oh it's perfect and the and when and vince surf in 1969 he figured this out and yeah it was the perfect thing right and the answer is it might not be and we as engineers and we as the people of the internet we must understand that in 20 years it might be all different because 20 years ago it was all different and 30 years before that it was different yet again and so nothing's perfect and so we should never be complacent and assume that what we have is trivial or perfect or even the right answer so we should continue to question and so it's really interesting to hear again from van jacobson who sort of did this great innovation in 1987 saved us and yet he thinks that these are issues and they're issues that need to be saved again and i think in many ways he's right the question is not so much whether he's right or wrong the question is what will the ultimate solution that we pick uh be produced so so take a look at van jacobson and what he can what he is thinking about as terms of the issues in the future that we're going to need to solve when he talks about contentcentered networking hello and welcome to our security lecture i'm charles severance and i encourage you to grab the power points and remix them and use them in your own courses use the videos use everything in your own courses i i you don't have to teach this whole course it's quite a bit so um so let's start out by meeting some nice people these uh people are alice and bob and they simply want to communicate some information you know left to their own devices and they don't want the rest of the world to know about what they're communicating and so they want to encrypt it some way now uh in the cryptograph cryptography world um they all all call these two people the good people uh alice and bob and they simply are a and b kind of a very computeresque variable names a and b and alice and bob and then there's some bad guys right there's the bad guys and uh and often they are called c like carol or carlos or charlie or or something like that they're even chuck even chuck is a bad guy or dave or eve eve for the eavesdropper and the idea is somewhere in the middle here somewhere in the middle you have some person with bad intent here we have trinity from the matrix and she looks as she looks as bad as you can look right um so alice and bob seem to be real happy people they're just trying to get you know get things done and send some information without being bothered and then and the trinity's there eavesdropping and but there's other things you can eavesdrop you can sort of redirect the message and change it there's all kinds of things that the bad guy in the middle is going to do and so alice and bob are far away from each other and they have to communicate securely and they it's a it's a it's a literal gauntlet of problems that they have to face and various people with bad intent with bad purposes sometimes just wanting to see what's going on versus wanting to change what's going on versus completely redirect communication so alice bob and then a whole series of bad guys with various bad guys and gals with various evil intent you know i think computer security is the most exciting part of computing right now because it has something that nothing else has it has an adversary relationship when you do graphics or operating systems or anything there's no one trying to thwart you at every turn unless you have in security that's what makes it exciting and interesting and that's what makes it something that's forever changing and involves psychology and economics and computing and law and policy and so many things so i think it's a great uh area to be in to work in i think it's not going away right as long as we have adversaries as long as we have human beings and and their due wells and evil doers we're gonna need security so it's always going to be like that you know preparing is interesting in a lot of ways security is a mindset it's a way of thinking about the world and if you think about the original definition of a hacker someone who sort of cobbles stuff together you hacked this tool and it works and you put this piece together and this here and that and it all works and it's a great hack but i'm a security guy i'm going to say well turn this like that doesn't work anymore and you'll say well don't do that and i'll say no no i'm the attacker i get to do that i get to do that whenever i want i get you at the most inopportune time get to do that in a way that makes your system fail as badly as possible and you have to think that way not about how to build something how to make it work but how to make it fail and how to make it fail in precisely the right way to do precisely the right sort of damage and that's a way of thinking i mean there are some people who go through their lives looking at systems and figuring out oh i can break that oh here's how to break that you walk into a store and you see the purchasing system oh i can steal something here's how you walk into a voting booth oh i can sort of defeat this here's how you might not do it because of course that would be illegal but you think that way and that mindset i think is essential for security once you have that mindset then it's a matter of just learning the domain right learning the systems and whether it's a selfdriving car or a voting system or a medical device and it's going to be embedded code interacting with the real world in a way that involves people and society and i can teach all that you can learn all that so i remember a class in security i forget who did this one of the assignments was come in tomorrow and write down the first thousand digits of pi okay so two things about this test one you can't memorize a thousand digits to pi you have to cheat and actually the students were expected to cheat but if they were court cheating they would fail okay that's interesting right that teaches that mindset allows you to think outside the box but how am i going to do this am i going and there are lots of ways people cheated and and i sort of urge people watching to go google this and to look at some of the stuff written it's a great way of trying to stimulate the mindset can you teach it formally i don't know it's kind of like it's a way of thinking and i think the more security classes you take the more you exercise that mindset a lot of the hacker conferences will have capture the flag contests i remember an early one where they had to build their own private network to cut down on both network license latency and federal violations right that's why you do it but you're going to learn a lot by breaking other people's systems and yeah that's probably going to involve illegal activity and agreed you know this isn't the best way or maybe it is the best way it's not the most socially acceptable way you know but here we have this clash between the tech imperative and what society wants so many of our systems are black boxes i mean you can go and try to hack this right your your smartphone or your computer and there's a lot of stuff you can learn but really it's gonna be more fun if you can hack somebody else's cell phone or somebody else's computer i want it to be openended i want it to be you know follow whatever it is you're interested in the neat thing about security is it can go wherever you want there are so many different subdisciplines i'm often asked should i study forensics or cryptography or network security or protocols or embedded devices or scada systems study what you want and whatever interests you follow that because really what you're learning is how to think like a security expert and honestly if you get a job they make you do vpns you can pick up vpns that's easy and it's the way to think so do what you want and you know what we're learning right now is that demand is greatly outstripping supply right that people who have expertise in security have a guaranteed career because there is such a demand for it and there's such a lack of supply have you written any of your books kind of in aimed at those kind of you know precomputer science students or early computer science students that would sort of be a good read i tend to write my books for general audience so i think of my parents my friends so computer experts yes but really for a more general audience so going back to something like secrets and lies i wrote in 2000 it's about how network security works right 15 years out of date but it's still a good introduction on the basic concepts of how to think about security you know later cryptography engineering how to engineer cryptosystems my book liars and outliers how to think about security as a way to enable trust very nontechnical but very much here's how security is embedded in society my latest book is about surveillance and data in goliath talks about what's going on in the world of surveillance and how we can regain security so to me all of these books are for someone who might be interested in this field because what they're going to do is spark interest in different directions they're going to give people ideas they're going to go and research further and that's how you get your passion that's how you get your calling you know it's not that someone gives it to you that you notice it going by and saying hey that's kind of neat i want to do more there so it's always fun to talk about security because you know the question is is you and what does security mean to you and what does it mean to me and um and and when you're whenever you're thinking about security you got to figure out sort of who is out to get you and why are they out to get you and for us average people we are so boring that literally pretty much the only thing the world wants from us is they want to steal our you know they want to steal our credit card numbers and and then buy stuff with them for just a couple of days before the credit card company shuts them down now if you're running for public office uh there's a whole bunch of your opponents that are going to want to break into your email and and that happens right those kind of shenanigans happen so if you're interesting or influential or running for public office you have a different problem than if you're just kind of a mere civilian like us and so at the end of the day you can worry about security and you can kind of wear tin foil clothing or something but at the end of the day you and i are so boring that nobody really cares but it's good to assume that they're out to get you right that that you try to be as secure as you can and be aware of your environment and be as secure as you possibly can with your information and uh with your communications so who is out to get us well the government so now we're going to actually turn the tables right in the very first lecture we were the good guys the good guys were the ones who were trying to break the curtail free and the bad guys are the ones that are trying to hide their their their bad messages and the government were the good guys in bletchley park and they they broke the codes and they they saved western civilization yay good guys well now we're the germans we're the japanese we're trying to communicate people are watching and guess what it's the same people the government government's most likely interested in what you're doing um again most of us are so boring the government doesn't really care at all but the government has probably the best security breaking equipment on the planet right now better than the criminals and so it's just an interesting flip of the model right where now we are trying to communicate and the government with all of their bombas and little rotating devices sitting in some warehouse somewhere that we don't know is taking our private communications and they're trying to break them and we are in a war trying to make our communications more and more secure while the government says well we have to invent like electronic computers because we have to have bigger computers because the people that us us good guys now who are doing the encrypting we are trying to come up with more and more clever ways to encrypt and the government has to keep coming up with ways to decrypt and you could cast this as criminals versus good folks you could cast these governments versus governments at the end of the day it's an arms race and it's it's rather symmetric as to which side you're on right i mean we started out with the people trying to hide the information were the bad guys and now we're the good guys why are we the good guys because it's us as soon as we decide it's us we're the good guys here's a little here's a little picture i took a couple of years ago when i visited uh bletchley park this actually led to the video a year and a half later and in this my friend who works at the open university who also does massively open online courses uh that's joel he's now retired he's the tour guide there and a dear and personal friend and um and another of my dear and personal friends whose face you can't see is right here his name is chuck he currently works at shazam in london and um and he and i just got away for the weekend and went up to bletchley park and took a tour not just just a little interesting connection i sort of mentioned in a previous lecture about the matrix so you notice that chuck here is wearing a jacket from the movie matrix i mentioned he was the one that wrote the hacking scene with trinity so here we all are together we're at bletchley park alan turing had an office in this this is one of alan turing's offices at bletchley park here's joel open open teaching and learning here is chuck worked on the matrix and here's trinity right except that now trinity's our enemy instead of our friend although in the movie we're rooting for trinity but we're the ones trying to protect what we're doing from the trinities of the world we're the good guys now and trinity is the bad gal okay she's the bad lady trying to break into our stuff and we're protecting ourselves against trinity so tables have completely turned okay so before we go too far you know you'll run into your organizations with lots of people who are like security experts and i find security experts generally very annoying because they like think they're smarter than they are security experts have this theory that more security is better and the reality is is that perfect security is unachievable if you want perfect security like lock yourself in a room and whisper to somebody oh wait a sec and then the guard will come in and hear you or whatever there'll be a microphone so the notion that perfect security and that you your company can spend more and more and more money of its budget on security just because the security expert thinks that you should is really kind of a fallacy security is a cost benefit analysis and so if you think of credit card companies you know what's the security of this number i won't show you the number but what if i lose this number what's the consequences i've had many credit cards that got compromised i don't exactly know how they've got software inside of computer companies that catches like when all of a sudden i live in michigan and a bunch of charges at the new jersey walmart are showing up and i never got on a plane i'm amazed at how rare it is that your identity actually gets lost permanently so i'm really impressed with how the banks are capable and so they have this number that makes it real convenient for us to buy we can type it into a web form we can do all these things and one in a zillion times it gets compromised and so they lose 50 bucks but billions of dollars of commerce happen so there is always a security versus cost if basically for me to use this credit card i had to have sort of a a personal uh guard from the the company with me all the time it'd be very expensive for me to buy stuff on amazon and have it shipped to my house and so understand that when you start getting into conversations with security professionals sometimes they're the kind that understand that security is naturally imperfect and everything is a costbenefit analysis rather than more security is always better so more is not always better that's just my little speech about security in case you get stuck in a conversation with some pompous security expert they're mostly pompous so database administrators are pompous too but hope you're not not you're not a database administrator security expert but um the best security experts that i've ever met are the ones that understand this and they can they can they can characterize every issue in terms of a cost benefit analysis and then you know you know that you've run into one that's really smart and bright so the terminology that we're going to use for the rest of uh segments of this lecture we're going to be solving two basic problems one is confidential confidentiality and the confidentiality is the the the leakage of information so if i was to want to send this credit card number to one of you watching right now without the rest of you seeing my credit card number the the mere revealing of that information is the problem so i want to come up with a way to send it to you so that no one except the one person that i want to see it gets it that's confidentiality the other problem is one of integrity and that is in a sense knowing that a that the information that you've got comes from who you thought it came from and b that it wasn't modified on the way so there are things like digital signatures that sort of fall into this category and uh other mechanisms that we'll talk about so these these two themes of confidentiality and integrity will run through the rest of the lectures that we have on security okay so coming up next we're just we're going to start diving right in so the first topic that we're going to talk about is confidentiality encryption and decryption and of course this was what was going on at bletchley park in world war ii so uh the terminology that we'll use in this is plain text and ciphertext and the idea is whether it's text or other information there is the information that we actually want to transmit whether it's a credit card number or something else and then there is the encrypted version of that and we'll call that the ciphertext and the ciphertext is what we assume is revealed to intermediate parties whether they are stopping it and changing it or they're just watching it it's still the cipher text is the stuff that we are um just by the nature of the communication we are forced to reveal it or there is a probability that we'll reveal it so it is hopefully unintelligible and hopefully it is difficult to go from the cipher text to the plain text except if you are the actual intended recipient or impossible encryption is the act of going from plain text to ciphertext and returning the ciphertext back to the plain text as decryption and there is a key some kind of a key which is really sort of a some data plus a technique plus an algorithm that goes back and forth so there are two kinds of systems that we'll talk about in the upcoming lectures one is called a secret key and the other is called a public key the secret key is the one we talked about at the very beginning the secret key was really used from uh the romans and caesar on up to world war ii uh the public key encryption really is uh much more recent in the 60s and the 70s and we'll talk about that later on so the first thing we'll talk about is the shared secret or secret key the secret key is also called symmetric key which means that uh both parties have to be in possession of the same information you basically use the same key material to encrypt as you do to decrypt the um the public key is asymmetric which means you use it one key to encrypt in a different key to decrypt we'll get to that later and so the problem that secret key has that led to the need to invent uh public key is the fact that you need to at some point have a secure communication whether you're sitting in room together and you hand each other code books whatever it is you have to have a way to distribute the key in a secure manner the public key which we'll get to later has a way of distributing the key in using insecure medium and you'll see when you're when we get there it's like so obvious and clever you wonder why nobody thought of it until you know very recently so here is the path right you have some plain text you uh you have say the word candy that you want to send you're going to encrypt with a shift where you you just go to the next later letter so c becomes d a becomes b and becomes o and so now we have the d b o z that is the plain text coming from alice alice sends it in the dangerous dangerous nasty wide world of you know routers or radio with uh with morse code or whatever it is we're going to do whatever is we're going to do where the message might be intercepted by somebody now they're not intercepting the plain text we assume that this part here is secure and this part here is secure it's only dangerous while it's in flight somehow in the middle and we only worry about eve getting it and and then at some point because uh bob has the key which is subtract one bob goes from each of the cyber text letters back to the plain text letters and voila out comes the plain text again and so eve's problem is i'm only eve is only handed well no sorry he is not eve is not given the key he is given the cipher text and nothing else and she must like bletchley park must derive whatever it is drive the key derive the plain text whatever it is that's eve's goal the caesar cipher is the kind of the oldest most widely used forms of encryption it uses the notion of a shift the shift number is just as i shown a shift of one means a becomes b and x becomes y and l becomes l m l l becomes m so you just take and move a fixed position down l this was used for a surprisingly long period of time and there's some pretty good youtube videos that kind of you can if you want to see more about sort of the the how this works and the math behind it and how you break it it's uh it's pretty fascinating i mean finally it's just it's completely breakable um and we'll actually going to break it here pretty soon ourselves so the caesar cipher so i want to pause and let you see uh youtube video uh here from uh beloved movie uh called the christmas story where little ralphie gets his uh little orphanage secret decoder ring and uh little orphan annie sends a decoded message an encoded ciphertext through the radio everyone can hear it but only those people who have the secret decoder ring can decrypt the message and you can see that it is a a caesar cipher it has a shift you'll note that the first thing they say before they say the encrypted message in the radio is that uh you're supposed to connect b and 13 or something like that and then you rotate the two wheels of the secret decoder ring to the b13 and then you can read across the secret decoder ring and decrypt the message as it's decrypted and then he slowly decrypts it and then of course there is the delightful moment where he realizes the crash crass commercialism uh that that or the complete lack of interesting meaning in in all of this so uh without further ado let's take a look at uh ralphie and uh christmas story be right back so i hope you like that i hope you like that um and so uh off we go um we're going to have a secret decoder ring for this class i would love to be able to send you all um oops come down i would love to be able to send you all a little mechanical wheel to move the stuff back and forth but instead i use the internet and i'm going to send you a a pdf and at this point you might want to pause the video and grab this pdf okay grab it secretdecoder.pdf doctortruck.com secret decoder.pdf and download it and you might even want to print it out because we're going to at this moment uh do a code breaking exercise okay and so let me tell you how to use this secret decoder ring so the top line here is the plain text and if you recall uh cesar shift has a a a shift number and um so to encode you go from a plain text let's say i want to do uh chuck i want to encode chuck and i want to encode it with a shift of 2. so shift to 2 means we select this and we basically go c is our plain text and then down we go e so then we go e is our first letter and then h is our second letter so we go down and that means h becomes j yeah and so u becomes w so now i'm doing my encryption so e h w is the encrypted ciphertext so let me clear that and write back down here different color e h w now to decrypt remember you need to know the shift so we somehow communicated separately and securely what the shift was and so now we want we have received our ciphertext we received our ciphertext and we need to decrypt it okay and so we know that the shift is two so we go to e we go in the shift row and then we go up to the plain text row and that says the first one is c then we go to h we go to the encoded text row and we go back up to the plain text row and so that's an h oh wait wait wait it's not h w what am i thinking this should have been a j i got this wrong sorry about that so that's wrong here's a j moves up to the h then the w let's see if i got w right yeah so w is my last ciphertext and it goes up to the u okay dot dot dot so you see the pattern that are in encoding is plain text down to shift position and our decoding is shift position back up to plain text okay so this is our secret decoder ring so go grab it and download it so that you can participate in the next exercise so now you are going to be cast in the role of bletchley park okay ready so here is your first code breaking exercise okay so here we go so you're bletchly parked right you just intercepted this ciphertext u b u p b t u whoa it's encrypted it's clearly meaningless so how are you going to decrypt it well the technique is take a look and decrypt it with all the all the shift numbers right you're going to do this by hand you're going to be a computer yourself you're going to do all the shifty cripping and just like in bletchley park you know you succeeded when the plaintext makes sense right when the plaintext makes no sense then you haven't succeeded but at some point the plain text makes sense so what you need to do is take your secret decoder ring and you need to decrypt it with a shift of one a shift to two a shift to three a shift to four and if you have your family members around you can print out multiple copies of the secret decoder ring and you can assign different shifts to different family members so you have to decrypt this 26 times have to decrypt it 26 times and then you look at all the 26 decryptions and then you decide which one makes the most sense okay so don't peek decrypt this one i made it easy on you okay so we'll stop now and give you a little bit of time to decrypt this one don't start pause until you actually have decrypted it okay okay this is your last chance for spoiler alert so here we are we're about to decrypt it here we go i did make it easy on you it was a shift of one it was a shift of one if you started at 12 you're kind of foolish right so you started at one and you go like oh great so now i'm gonna decrypt it i'll start at one here's the plain text this should be p p that's the plain text so i'll start with u if it's one then i go up and it's t and the second one is p so i go up and it's o t o keep going it says toast so you say to yourself well that's a word so it must be it well hello what are you doing here you want to say hi to my students this is a cat this is my eddie cat he likes to come up into my office and look so do you know anything about encryption anything about encryption so you use a shift of one and then you go from the christian text up to the plain text wow okay you are clearly not interested in my lecture so that was my cat hello sorry can't open the window for you because i'm doing a lecture okay um so you're going to like just keep bugging that window until i kick you out of my other room all right aren't you so you're going to get kicked out out you go he was gonna keep hitting that i'm gonna keep hitting that until uh i opened it for him okay so so now you've broken this code and again just like in bletchley park you only knew that you broke it if it made sense and um and so luckily the in blessedly parked the messages were longer and they were often looking for uh canonical things that they would say every day so um here we go and uh and so that's the breaking of that one and it turns out that shift of one was the thing that we did so here is your second task this one's longer and it's not a shift to one and so so this is a situation where you really would have to get your whole family going on this right where you got to do 26 decryptions of this and it will you know make sense to you you decrypt it 26 times right and so this one's going to be harder i guess you could just just decrypt one word but it's just not a shift of one but now we're going to do another trick okay so i don't want you to try all 26 because there's there's a mistake in this there is a leakage of information that makes it so that you can figure out what the right decryption to try might be so this is english this is an english sentence so stare at for a while and find a more optimal way to decrypt it than trying all 26 shift patterns okay so there's a way to optimize this a way to cleverly figure out what might be the best shift or how not to have to decrypt the entire message 26 times to reduce the complexity and that's because we've leaked some information here that should be pretty obvious to you okay so let me give you a moment to break this one it shouldn't take you too long and you shouldn't have to force your whole family to decrypt this stuff okay so here we go give you a chance to decrypt it okay here's your last chance before the reveal you ready here we go so here is the decrypted text the shift turns out to be 13. it's a shift to 13. and the the weakness of this whole thing is this right here in the english language what is a single character we're not encrypting the spaces you'll notice because the spaces come across so what is the one single character word that we have in the english language that's capitalized well that's usually i i need a jet money and a jet what is the one thing that we do in the english language that is a single character word that is all lowercase that's lowercase typically unless at the beginning of the sentence and that is the letter a so basically you didn't have to decrypt the whole message you see some weird pattern and you go like this i just have to figure out and then you go look and you look in the row 13 the plain text and you go like oh where does you go look at the eye because you guessed to the plain text and then you just look down until you see the v and within seconds literally within seconds if you do it right within seconds you know it's a shift to 13 and then it's a trivial matter to convert it so you could figure out the shift code within seconds and these this was how bletchley park figured it out and this is why the known plain text was so important because you'd only have to figure out like one letter if you knew what the plain text was and often they would know by length and certain other things oh this is i i think we can guess what this plain text was that this particular operator would send and this has to do with the leakage of information it's not the it's not the mathematical perfection or lack of perfection in the security key it's some other leak some other thing where they're going like oh wait a sec i can take advantage of something it was just equally encrypted as any other message but because i gave you this clue of an uppercase single character word and a lowercase single character word upper lowercase single character word and uppercase single character word i greatly reduced the amount of effort that you had to put in okay now what's cool about this you go to this website www.com is that long ago before facebook and before twitter and before all these things we had these things called news groups and they were kind of this weird kind of uh collective email list that we had and this was like in the 80s and it was even used in store and forward networks where it was kind of like facebook and store and forward networks meaning that it might take four hours for you to see the status update but we kind of would subscribe to these collective things and there was one that was basically the dirty jokes and the thing about dirty jokes was part of the part of what we were trying to do in this thing was you weren't supposed to swear and there was software that would filter out swear words um from if you put a swear word in to a dirty joke um it would it would not forward the message and so we had to have a way to encrypt messages that included swear words so that we could tell dirty jokes to each other for those who wanted to subscribe to the dirty joke list and so they came up with this wrote 13. so we came up with a simple caesar cipher with a shift of 13. 13 beautifully of course is 26 divided by 2. so it's a symmetric shift the shifting in by 13 is the same as shifting out so of all the sievers caesar ciphers a shift of 13 the encryption and the decryption are exactly the same calculation and so we would um we would type our dirty joke into row 13 and convert it to row 13 and we would send it in row 13 and then we would if we wanted to decrypt it but what became funny after a while was we were so used to reading wrote 13 that it almost became like a second language right we could we could read second we could start reading the dirty jokes in row 13 and we would laugh before we translated them up so wrote 13 has an interesting sort of uh historical thing and you go to row 13 and sort of like encrypt whatever you want to say and and i'll probably have some questions to ask you where you will have to do some rope 13 encryption and so that's the end of this lecture where we talk about uh caesar ciphers and the various techniques and how caesar ciphers work and so uh we'll be back and talk about cryptographic hashes so now we just finished talking about uh basic confidentiality using simple caesar cipher and we'll get better before we'll we'll be more sophisticated than that because caesar ciphers are trivially breakable obviously but now we're going to switch from confidentiality to integrity and we're worried about uh the the message uh just to review the confidentiality means we're hiding information we just don't want eve to see it because eve sees the cipher text and we want her to never be able to extract the plain text and as we saw in the last lecture uh you if i'm just using a caesar cipher i mean there was little or nothing i could do to stop you from doing it all you'd do is enough work and you would figure out the shift and then you'd have everything so it would take you you know you'd write a program it would take you like a thousandth of a second to check all possible things and you're done so that's confidentiality now we're going to talk about integrity right and we're going to kind of assume confidentiality or perhaps assume it's not necessary because we're transporting it in a locked box or in a you know whatever but let's just say i had some um some some piece of paper right and and and you wanted to know if this piece of paper really came from me well we would use uh things like a signature right or we would use uh a bit of wax where we would push the uh our seal on it and the seal only belonged to us but but really did signatures can be forged uh you know people can steal the wax imprint thing i mean in roman times they would wear it around their neck to make sure that no one stole it but you could also just create a fake one so you could seal your letter with the wax but and you break the wax seal but in the computer world we need something right we need a situation where um where perhaps i mean my wife had to get a prescription and they sent her an email with a prescription in it and this prescription had on the end of it a digital signature it was just a bunch of numbers and you think to yourself wow you know here's this prescription and at the end it just has a bunch of numbers and that's the digital signature from the doctor and how does that work well it it works surprisingly well and and that message can be forwarded she can print it out she can scan it she can send it to a pharmacist via email and as long as that signature's in there we can know that the data originally came from the doctor and that that you didn't know and modified it to be a different kind of prescription like a different amount or a different drug and and then that would invalidate the signature and how exactly is that done well it's done using a technique called cryptographic hashing and it is a bit of computer software a bit of code that takes a large amount of text and reduces it down to some small set of numbers a large block of data to a fixed length set of numbers in and the message is the big thing and the digest is the little thing it sort of it's like it digests it and sort of gives you this little tiny thing now the key is there are many different techniques to to map from a message to the hash or the digest and some are better than others and it turns out that there is a longterm whole field of mathematics and computer science that's dedicated to understanding what a good cryptographic hash might be and so there there are these wellknown cryptographic hashes that you may have heard of like sha1 or md5 each of those as the result of many many years of research of thinking through what a good cryptographic hash is so for example one cryptographic hash might be i sign it with the number of characters in the message that would be something that says like well at least they didn't expand or contract the number of characters in the message but then at some point that would be such an obvious thing that you would change the signature as well so you want to make it so you can't change the message and change the signature because then you're sort of properly forging a signature so the hash function that takes the message to create the digest that's something that is a scientific mathematical research effort to get the thing right okay so here is an example of a hash function now this hash function takes as message input on one side right it takes message input of and this can be short medium or extremely long messages and the digest is always a fixed size it's always a fixed size right some get longer than others different message hashing functions give different length but they're all fixed and they're fixed even if the input is megabytes it can be megabytes hundreds of megabytes and you can still run all that through the hash function and get a digest okay and so the key thing is is it is to make it so that for any change in the input the digest also changes okay and so here we have the red fox jumps over the blue dog right and that's the hash that comes out and if we change one letter you know the v to a u the hash changes dramatically so this hash changes dramatically so this suggests this is a good cryptographic hash function right the length didn't change all the characters are the same but one character changed and the hash function changes completely okay and here is another flipping of characters right where the from here to here let's give you a better color here which color is that yeah from here here the v and the e were just toggled and yet from here to here the hash function is completely different and so the hash function needs to generate quite different hashes even with tiny perturbations of the input you're not even allowed to change one character add and remove character and they know when a cryptographic hash function is bad if they can take two different messages and send it through and get the same digest and so there's a lot of research to try to as soon as they come up with one of these things there is a massive amount of research to try to disprove it to say that's a bad one and the bad one is if two different messages come in and they come out with the same hash function then that's bad because it means that it's provable provably that the signature could use the same signature can be used to sign two different input messages okay so this hash function function is a bit of computer code right and you know shot one you can go look on wikipedia for shot one or md5 these are kind of classic hash functions and when you read the sha1 or md5 wikipedia they'll talk about the fact that it's been decided it's kind of flawed and so there's like sha1 don't use it it's not cool now you can use it for less critical things you just have to be aware of what its limitations are it's like sha256 is better than sha1 so what happens is there's continuous research and there's continuous improvement in the mathematics of these hashing functions and they're getting really good at it because we've been using these things for a very very very long time now if you want to play whoa and clear this up so um i've got a simple sha1 calculator and um you can you'll be using this in the homework the sha1 calculator takes as input some kind of a plain text and it produces output when you hit the thing so you can you put in pony or fluffy or whatever or even a whole bunch of stuff and it produces a sha1 okay so um so basically uh get ready to use this because the next upcoming exercises are going to use this and you can read sha one about sha one on wikipedia and you can find out like yeah it's seen as less than perfect and you should use sha256 or whatever but actually lots of applications in less than critical situations know that you know for short and reasonably length strings you know the flaws are mathematically found but they're not commonly run into so sha1 is not horrible it's just been proven sort of less than ideal and so for highly sensitive information you would never use sha1 but for simple things sha1 and even things like md5 are commonly used like for hashing passwords one of the things we've learned from the snowden documents is that cryptography broadly applied gives the nsa trouble at least at scale so the nsa does a lot of cryptanalysis and they break a lot of systems but welldesigned wellimplemented cryptography does stymie them and it's important to understand how it does because if the nsa wanted to be in my computer they'd be in my computer done period no question about it they would hack into my computer they have a lot of tools to do that if they are not in my computer one of two things are true one it's against the law and the nsa is following the law and two i'm not high enough on their priorities list now what cryptography does is it forces the attacker whether the nsa or the chinese government or cyber criminals or whoever to have a priorities list and depending on their budget they'll go down the priorities list and the hope is you're not there right you are below their budget line without cryptography an organization organization like the nsa can bulk collect data on everybody with cryptography they are forced to target and that's extraordinarily valuable because it means the fbi will go after the criminals the nsa will go after the agents of a foreign power the chinese government will go after the u.s government officials that rise to whatever level they want to spy on the cyber criminals will just go after a few of us and the rest of us are protected that makes cryptography a very important tool now cryptography doesn't actually provide any security because cryptography is mathematics when we say we trust the cryptography what we're saying is we trust the mathematics and i think there's a lot of reason to say that i trust the mathematics everything i know about cryptography tells me the mathematics is good certainly there will be cryptographic advances certainly some things will be broken in the future but by and large the math works but math has no agency math can't do anything it's equations on a piece of paper in order for math to do something someone has to take that math and write code and embed that code in a program and embed that program in some bigger system and put that bigger system on a computer with an operating system on a network with a user and all of those things add in security when the nsa breaks cryptography by and large they don't break the mathematics they break something else they break the implementation they break the software they break the network they break the hardware the software is running on and they do something somewhere else and again and again we learn this lesson right the math works but putting stuff around it is much harder now there's an important corollary here that complexity is the worst enemy of security right what these things do is they add complexity the more complex you make your system the less secure it's going to be because the more vulnerabilities they'll you'll have the more mistakes you'll make somewhere in that system and we learn again and again when we see analyses of voting systems embedded systems your cell phone messaging systems email systems that it's always something around the crypto something that the designers the implementers the coders the users got wrong and the simpler we can make systems the more secure they are so what nist is doing is they're trying to build standards around as much as possible right so they have a standard for a crypto algorithm aes is the standard crypto algorithm it was a public process where multiple groups submitted algorithms and the community as a whole picked a winner and it wasn't dictated on high they weren't secret criteria the aes algorithm was the one that most of us thought should be aes actually there were several we thought were good candidates they picked one but there's a lot of trust in the process because there's a very public open international process right shah 3 the new secure hash standard the same sort of process now it's really fun as a cryptographer being involved in this process i mean i think of it as a great crypto demolition derby we all put our algorithms in the ring beat each other up the last one left standing wins it was kind of like that you know we would all publish papers analyzing each other and one of the ones left standing one but you know that's just a small part of what nist does they have standards of random number generation they have standards for key agreement for different protocols i mean trying to standardize these components so the implementers make fewer mistakes but still is a lot you can't standardize and those bigger pieces where you're going to still find most of your vulnerabilities i believe that's where the nsa finds most of its vulnerabilities that it's out there recently we learned about vulnerabilities in the key agreement protocols that are used to secure a lot of the vpns and internet connections right and if you look at where that vulnerability was it's because of a shortcut that was made and and copy that allowed for a massive precomputation the math worked great if you want to make a standard worse you make it super complex and and you're just building in vectors at that point and this is why the normal ietf process for internet standards doesn't really work for security because those standards are compromises right let's put in all the options make everyone happy let's put in as much flexibility as necessary to make the system as comprehensive as possible that is sort of antisecure security security needs as few options as possible right as simple as possible you don't want to compromise you want one group to win because that group has a selfcontained vision when you have a piece of this and a piece of that and a piece of that there's going to be some interaction you didn't notice and that interaction will be the interaction that breaks your system you didn't win aes right you were you were in it you were in the demolition derby with your helmet on tell me a little bit about what it's like to be in the demolition derby toward the end and what it's like to sort of not win the demolition derby so aes was an interesting process it started out with 64 algorithms which 56 met the submission criteria then nist whittled it down to i think it was 15 or 16 and then in next round whittled it down to five and then chose one so it's a constant winnowing process and two fish which was my submission made it all the way into the top five and those top five were all good algorithms i mean there was no bad algorithms there and the arguments were more about security margin and implementability in hardware versus embedded systems versus constrained systems 8bit 32bit so we were making distinctions about how we thought it would be used and and to me it came down to i think three algorithms that i thought these were all good choices right two fischer's one ring doll the eventual winner was one and actually at this point i forget what the third is and what i said on my blog at the time is you know any of these three are good and sure it would have been great to have been the winner but they really know something there's a lot of value in nist picking a nonus algorithm right by picking an algorithm from belgium it said to the world that nist is picking what they thought was the best and not trying to pick american so that was an important consideration i hadn't thought of at the time so i i can't fault in this process at all been great to win it actually was really fun to participate and you know i would do it again and i participated in the shah 3 competition which again was picked by uh i mean someone else won my my entry was called skein and you know the these are lots of fun for cryptographers and also for students because they give students a whole bunch of targets one of the hard things if you're a crypto student is you have to break stuff the only way you learn how to make things is by breaking things it's back to that security mindset right anybody can create a security system that he can't break so if you show up with a security system and say i can't break this my first question is well who are you why should i trust your attestation that you can't break it as something that's meaningful what else have you broken and these competitions give a whole bunch of targets so students can start breaking things that haven't been broken before get papers out of it get publications get cred in the field as someone who can break stuff and therefore as someone who can design stuff it's a it's a it's a source of new problems it's a source of new targets but this is what i said to start security is inherently adversarial and that adversarial nature makes it different unlike any other field in in computer science you go to a security conference a crypto conference and there are going to be papers of people who break each other's stuff and you have to get a thick skin you have to understand that we are all learning now if i produce a protocol and you break it sure i'm unhappy but i've learned something and so have you and so is everyone else and that knowledge is more important than my particular creation surviving and you have to understand that and accept that and that has to excite you the first application of this that we're going to talk about is hashing passwords so you go to a new site even coursera.org and it asks you to create an account and create a password now you're not supposed to but lots of people use the same password for lots of systems and so if your coursera password were somehow mistakenly revealed they might get your linkedin password as well and so it is considered very bad form very very bad form to actually ever store your password in the coursera database in plain text because if the database was somehow compromised then all the bad guys would get all of the plain text passwords and again maybe use them not just on coursera because you could change your password on coursera but use them on linkedin and twitter and whatever and youtube and steal all your accounts by compromising one account because you made the mistake that lots of people do of using the same password in a lot of different places because we're tired of making up a new password for each place so you're not allowed to store the plain text password in the database that's bad practice and we don't want to do that so the best practice is to store a hashed version of it to run take the plain text of the password when you're creating your account run a cryptographic hash on it store the cryptographic hash and then when you log in next you present to the system your plain text password and it runs your presented password through a cryptographic hash same cryptographic hash and then compares it with the hashed password in the database if they match you must have presented the same plain text both times this is a way that they can verify that you've represented the same plain text again without them ever storing the plain text okay that's why a respectable system we'll never send you your password it's i've almost started doing this where i as soon as i go to a new system and i set my password i set it to crap and i have them send me a message to reset my password and if they send me the actual plain text to the password it's like and i use some crap password i've actually got to the point where i'm tired of reusing my passwords and my technique i don't know if it's a good one or bad one is i just put crap in for my password and then every time i use this system i have it send me a new password to reset the password i mean that i really think we should just change it so that when you log in it just comes to your email and you click a link i don't know i'm not expert on this stuff you know so but a respectable computing system will never ever ever send you your plaintext password because they don't possess it and they can't derive it these cryptographic hashes are not backwards you can't make them go backwards let's go back here they're only a oneway hash because this might be one megabyte of data and this might be well let's see four times this is 40 characters 40 characters of data one megabyte squeezes down to 40 characters there is no way to go backwards the information is lost the hash is you know distinct and unique right but you cannot go backwards it's a oneway operation you can go from the plain text to the hash but you can't go from the hash to the plain text which is very different than encryption and decryption right in decryption you had to be able to pull the plain text back out from the encrypted text this is not encryption this is calculating a special digest that is uniquely connected to the plain text message but you need to run the plain text through the hash again and then compare okay so let's do some homework well so now let me let me let me first show you uh the how this works in the hash passwords so so let's say for example you're logging into corsair.org and creating your profile for the first time and it says please give me your password and you choose a singularly bad password as fluffy okay so fluffy and you can type go type fluffy into doctorchuck.com sha1.php in another window if you type fluffy and you encrypt it with sha1 you get this as the hash password and then this is what they store in in coursera's database and so that is they don't know they never store fluffy they they would not do that that would be so bad if they did that so they store this and if i get this it's very difficult to reverse engineer it to fluffy it also is even harder if you make your password long best passwords are like sentences not just eight characters but they're like long sentences of stuff that's rather difficult to predict so this is what's stored in the coursera databases some ugly string which is a a cryptographic hash digest of your password so now you log out and and this is gone that's only in your mind and this is sitting in the database so you log in you log back into coursera and you forget your password so you type in pony if you run pony through sha1 you get this as the cryptographic hash of the word pony and you look and you compare and you go nope that is not the right password i don't know what the right password is i can't give you a hint i can't tell you hey you you put shift on your password why don't you try taking that off you know you seem to have caps lock on because it doesn't know whether what your password is but it does know that pony is not your password then what it does right so this is what's stored in the database then you go oh my secretary that's right i use fluffy for my password on coursera so then coursera runs that through sha1 it gets the cryptographic hash of the plain text that you entered and then it compares it to the what it has stored as the cryptograph the plain as the as your hashed password and it matches so then it says yay i'll let you back in the fluffy only existed in your mind unless you foolishly like wrote it on a postit note and stuck it up on your computer which you shouldn't do as well but whatever it was coursera never stored my coursera never stored it coursera only stored this and that again is why coursera can never tell you what your password is or any reasonable site can never tell you what your password is it can only tell you it can only let you change it again which is easy changing it again you just it decides oh it sends you mail you give it a new password and it recomputes a sha one for that one and stores that sha1 so that's why you have to get password resets to happen okay okay so the next thing um that i want to talk about is i want to talk about digital signatures how we can use this for message integrity so we've got the notion of a cryptographic hash which is a calculation takes a large block of text so far we've only used it on small blocks of text okay but now we're going to use it on larger blocks of text where we're going to ensure message integrity which means we're going to figure out if this message actually came from the person we think that it came from okay so we're going to use integrity now i mean in a sense what the system was doing when you were typing in a password was it was ensuring that you were really the person on the other end of the line right hi i'm i'm logging in as dr chuck and here's my password fluffy that's by giving you the password i'm proving that to coursera that i'm really dr chuck so it's a form of integrity right author of identification is form of integrity right it's no different than showing your driver's license says yes this is really me okay but now we're going to do it in a way that we're going to send a message so it's not just a password we're not really solving just the password problem but we're actually going to use it to make sure that the message a came from the right person and b was not modified in transit this is kind of the doctor signing the prescription digitally and then sending you an email with your prescription that you can just print the email and take it take it to your uh take it to your pharmacist so again message integrity when you get a message did it come from who did it come from and do you come from who you really thought it came from or was it altered in transit okay so if you go back to our little example from the christmas story um the message from annie was eat more ovaltine now the question really becomes did it really come from annie right because little orphan annie didn't necessarily say it little orphanage handed the message to somebody else and then they read it so did that person change the message because maybe there was actually a secret message from annie and maybe annie wrote it and it really was an important secret message but then somebody like the advertiser changed it and sent it to you as if and it came from annie so that we're not really worried so much now about the plain text that is the fine plain text the question is did it really come from little orphan annie because we are receiving this from an insecure media like annie's so out here somewhere but annie handed somebody to hand it to somebody and to somebody to send across radio yada yada the question is did the message originally come from annie long long ago handed through many people or not this is again like the seal that you put on with the wax did it really come from that person or not is it really annie just saying yeah this is annie that's too easy you could say eat less ovaltine or or maybe annie wanted to say i hate ovaltine right that's my if but we don't know if annie said eat more ovaltine or not right because all we saw was eat more ovaltine and it seemed to counter manny but we gotta know you gotta know that it came from annie or not okay so simple message signing using uh shared secret and we'll move to a better technique later but we're going to start with a simple technique of shared secret is that we have a shared secret that we're going to use for message signing it'll probably be different than the crypt encryption secret okay so now we get together with annie in a shared room and she tells us what the shift is going to be and then she tells us what our shared signature secret is going to be and then we separate so the technique that you do is before we send the message we concatenate the secret to the message right so eat more ovaltine and then put the secret on the end of the message and then you compute the digest of the message plus the secret concatenated together then you remove the secret from the message and then you send the message plus the digest across the insecure and in my wife's example this was the little signature numbers that came from her doctor was the digest but it was the digest not just of the message but of the message plus the secret the secret didn't come across the message plus the digest came across so let's look at this when we look at how when we receive a message so we receive a message and we see a digest at the end of the message and it's across an insecure transport so we take the digest off the message take the digest off the message and we add the secret back on the message we know the secret annie knows the secret but the people in the middle who transported the mess do not know the secret so it's finally arrived in our location we see the digest we pull that off and hold on to it we add the secret to it we can take the concatenated message plus secret we run it through sha1 we get a digest locally and then we compare that digest to the receive digest and the only way to make the digest match is to know the secret now maybe somebody like made annie tell them the secret which means they could forge the messages but if the secret is not been compromised somehow their only way to create the digest is to know the secret right and so we can compare the received digest to the known uh the the the the known digest that we compute on rn in a secure way because we and annie are the only ones in possession of the secret so here we go so you can play with this on shaw one dot php dr chuck um and so if the message is that annie wants us to send or any wants us to get is eat more ovaltine and the secret is santa so what the what you do is you take the message concatenate the secret and then run that through sha1 this is all happening in in annie's secure room and she comes up with a digest now i'm not there's it's longer than this but that's just the first uh six characters of it and then what she does is she removes the secret and then concatenates the digest okay and that's what gets sent across the insecure medium it could be many steps could be many people it could be on paper it could be morse code it could be phone call who knows radio but we we just this is the danger right this is we do not know if the message is harmed in any way as it moves across this medium okay so then what we do is we receive the message right we don't know if it's a good message or a bad message so we see that it's a message and it has a digest on the end of the message and we split that out we split the digest out and we hold on to the digest separately okay and now we have the message minus the digest and so then what we do is we add the secret back on because only annie and us know the secret right and annie and us know the secret we all know how to do shot one and so we take this message and we run it through sha1 and we get a digest that we've computed locally this is the receive digest that's the local digest and then we compare and we say this is great that musta came from annie and we know that it came from annie even if it came through a dangerous set of steps and we can't trust any of the people that transported the message we they're all untrustworthy but we know that no matter what happened that originally at that moment annie did this okay annie made this digest because without knowing the word santa there is nothing and this could be like megabytes of data and this is a real tiny you know 40 character thing here the digest is small the message is large so you can't go backwards to get it there's no backwards here now if you can steal the secret from annie then all bets are off of course so we we have to assume that annie's okay and that you know annie was not compromised like in james bond movies for example but i was trying to get the secret from the good guy okay so let's go and do this again right so here we go we want to send the eat more oval team and the secret santa and so we do the same thing and we end up with end up with that and then she concatenates it and this is all done you know in annie's bedroom and secret thing and then she sends it okay she sends it to us but a diabolical diabolical courier says i have a thing about ovaltine and i'm going to change them more to less so i'm going to change this message to be eat less ovaltine right so eat less ovaltine bad evil err i don't know how to draw evil i'm a terrible artist can't draw evil so some untrusted courier has changed the word more to less so we see the thing that says and and we don't know right we didn't see the courier they was carrying the box who knows what they did but they changed it we gave us new copy so we receive this message from a untrusted medium there's our untrusted medium and it is our job to decide if we really think it came from annie or not so what we do is just like we did before we break the message and the digest into pieces and then we add the known secret to the end of it right so we've added the known secret to the end of it right here then we run it through the sha1 calculation and you can take there we go and go ahead and try this if you want you maybe you have this up in a separate window sha one dot php put less ovaltine santa in and you will get a different signature because you change even a single character and sha 1 will give us a different digest that's cryptographic caches in action right even the tiniest change in megabytes of data will change the cryptographic hash that's the beauty of sha1 and md5 and you know shot 256 and the others there is no match so we know that this message did not either did not come from annie or was modified in transit so we can tell the difference and we do not have to trust the medium right okay so um let's see what got coming up next here okay so here is the encryption technique and let let's just stop and let you do one of these on your own and say that we've got two messages from annie and i want you to stop and i want you to calculate santa is the santa is the secret okay santa is the secret and i want you to tell me if free cookies or free candy actually came from annie or not one of them is a valid message from annie and the other is not a valid message from annie okay so i want you to take a moment use the sha1 calculator and i want you to try to figure out which of these is valid and which of these is not valid okay give you a minute okay one last chance before we do the reveal okay here we go so here comes a message from uh insecure medium free cookies with that as the message digest we and we got the other one free candy with that is the message digest so what we do is we take and take off the digest and add the word santa to each one and then we run the sha one on each one and then we get the two shah ones here's the one and here's the two and then what we do most importantly is we compare them with the received sha1 and when you compare them with the receive sha1 or the received message digest or the receive message signature you see right away that one is good and one is bad it's as simple as that right one of these is good and one of these is bad so digital signatures are are actually really surprisingly simple and surprisingly easy to do without a lot of complex technology the only complex technology in here is really the the clever mathematics that makes these cryptographic hashes work effectively it the simple concatenation of a secret now you want your secrets to be kind of longer than this and more random than that but ultimately the notion of a digital signature is actually a simple and and rather elegant and beautiful notion that really leverages this notion of cryptographic hashes in a really cool manner so that kind of sums up our first half lecture where we really talk more about the techniques of both integrity and confidentiality but we've done it all with share a secret key right where we have the same key we have a moment where we're together in a secure manner and we exchange the code book whether it's annie or or the caesar or whatever where we know what the shift is right so every pair of communicating people or systems needs us a key now in the internet with everybody buying from everybody else and using credit cards it's just not practical you just could not have a secret key for amazon i guess it kind of works for the password now let's do it we'll get to that in a second and the password doesn't solve everything because then you would have to actually visit amazon to get your password set up and so the problem is is you you we have to use an insecure medium to establish the first secret as it were and so it just was never going to work so we need a different approach for the internet and that's we're going to talk about in the next lecture okay see you then so welcome to our lecture on public key encryption where we're going to go back to uh confidentiality and so so here we go if if you recall we've been having these two topics that have been our theme throughout uh just some grizzle oh sorry i'm starting to talk in row 13. let's translate this back to uh nonrow 13. uh the terminology the two kind of themes we've been following over the last couple of lectures in this lecture are confidentiality and integrity and confidentiality is hiding right shielding information not leaking information to people that you don't want to show it to and integrity is making sure that you know who you're dealing with and then the previous lecture we really talked about kind of real light approachable ways of ensuring confidentiality with things like caesar cipher and then integrity using a simple message digest that based on a shared secret so the problem with all of those things that we just saw is that they require a shared secret and the problem in the world of the internet is it's just really difficult for every one of us before we establish um we before we can make any uh purchases or whatever at amazon that we somehow have to drive to amazon headquarters and and get a shared secret from amazon they'll open up a book and say okay hi chuck i see who you are and here's our shared secret and you walk away and as long as you carry that shared secret away you go and if the shared secret is lost it's uh difficult to revoke so as the internet and and frankly in general as uh security needed to be able to work at arm's length meaning that you couldn't always bring everybody together and hand out shared secrets and then have them go to the far reaches of the world and communicate public key encryption was identified as a extremely elegant solution to this problem and so it was proposed by uh diffie and hellman in 1976 and it relies on two keys it's asymmetric meaning we're not using the same key to encrypt as decrypt the way we were in the previous lectures these are asymmetric there is a public key which is actually does not need any protection whatsoever in a private key and the idea is they're generated inside of a computer you generate the public key in the private key you send out the public key the public key is used to do the encryption and then private key is used to do the decryption and they're related mathematically in a way that's well understood but difficult to compute for a key length that's large enough so there's a public key and a private key so i'd like to you to take a look at this little video up on youtube of uh diffie hellman and merkel the the inventors of this and i think it's a great video um i would love it if this were my video but i didn't produce this video so uh so take a quick look so one of the things about this public private key encryption is now that we know about it it's like whoa it's pretty obvious and frankly caesar and the germans and everybody could have used this idea they just hadn't thought of it yet and the other thing that's kind of interesting if you look into the story of this is that the first reaction people got when they start thinking about this is like it can't be this easy no it's sort of both easy and hard but but the concept is real elegant and really beautiful and that is that we have this public key so the public key is part of a public private pair and it's used to do the encryption the beautiful beauty is it's computationally difficult to recover that private key from the public key and the encrypted text a key thing is it's not impossible and that's kind of one of the interesting philosophies of security that that we started at the very beginning talking about security the perfect security is kind of impossible to achieve unless you simply don't send anything and so public private key asymmetric keys is well understood as to how you would break it everyone knows how to break it the problem is is that computers aren't fast enough to break it and when computers get faster we'll just make the keys bigger so the mathematics of this makes it impractical to break i mean literally in practical break now i think we can safely assume that governments probably have enough computation to crack these once in a great while i mean if they're not cracking every transaction between you and target when you want to buy something but if they really have to they can record the encrypted transmissions and if they really had to it took a long time i have no idea how long it would be they can break it so that's actually kind of a neat way to think about this by revealing it all frankly any computer scientist could make a name for them their whole life if they proved that there was something wrong with this by revealing the algorithm revealing the cracking technique if someone can come up with a better cracking technique it is like fame and glory forever which means that we're pretty sure that there's no good way to crack this other than the brute force mechanism that requires a large amount of computation so if you're going to use public private key encryption you have to generate a pair and it starts by charging choosing two really large random numbers with hundreds if not thousands of digits that are prime so you kind of choose a choose a random number really big and then you kind of look around for a nearby prime number and you choose two of those and then you multiply them okay getting an even larger number and then through some steps through some calculations you compute the public and the private keys from that large number the essence of this are those two prime numbers prime numbers of course are numbers that you only divide by themselves in one which means they have no factors which means they're kind of like looking for a needle in a haystack and so the public and private key is really based on these two prime numbers if you could figure out what the prime numbers were you'd be okay but the computational difficulties finding the prime numbers that are extremely large and finding the right prime numbers that are extremely large so it's easy to do some calculations in one direction but not in other so for example what are the factors of fifty five million one hundred twenty four thousand one hundred and fifty nine quick but if i simply ask you what do you multiply 70 919 to get that 55 million number that's easy you do a division and it turns out that you can find out 69 61 really easy right so if i just say what are these two numbers that's hard if i say given this number what's the other number that's trivial so you can think of this as the decryption is where the receiver of the message knows kind of half of the calculation whereas the world doesn't know either half of it doesn't know the calculation so it has to figure out both halves whereas the receiver only has to figure out one half and so that's how asking the question of what are the factors versus given one what's the other so it takes a problem that's easy makes it computationally nearly impossible but again not impossible just nearly impossible okay so here's the notion so you're about to type your visa card into uh a credit card into like amazon's web page and so what happens is is that amazon will has a public key and a private key that they retain and they will send you the public key across a medium the internet they're going to send this to you somehow but the bad guys eve or charlie or whoever they are the bad guys this is alice and bob and eve and charlie are always looking so even charlie kids intercept it and you assume that they can this is the key don't don't try to pretend they can't even though it's very difficult for them to do it but you assume they can so the public key comes across it is simply sent to you as part of the beginning of establishing a cert secure connection and the bad guys see it too or gals they see it too so the public key comes to you and then what you do is you encrypt using that public key and create some encrypted text ciphertext which you then send back across the danger where eve and charlie are watching and it comes across they intercept the encrypted text they've intercepted the public key and they they can try as hard as they like with super computers to derive this and frankly like i said if they had months and months and months and really fast computers they could okay but because amazon is in sole possession the private key and it never left amazon servers it is a very simple matter for amazon to decrypt and get your plaintext it happens very quickly just like if you kind of know half of the prime number calculation figuring out the other prime number is really really easy okay so so again these people see all this information and yet is computationally virtually impossible for all practical purposes to do it and so it's beautiful because there was no need to protect the public key we never had to get in the same room and away it goes so you just amazon just blasts out its public key and we encrypt using amazon's public key we can't decrypt it but we don't need to decrypt it all we need to do is send it to amazon and voila it works so the beautiful thing is is the public keys can be distributed they can be intercepted and it does not matter so with this notion of public private key encryption in general we made a change to http a layer a mini layer is in the data model if you remember way back perhaps you even forgotten about the layered model remember that layered model application transport internet remember this is sort of one computer and this is the other computer these are the routers routers these are the hops there's like 15 of these remember remember all this so it comes back not on us okay so if you recall just sort of to briefly remember the the transport layer is responsible for the retransmission it gives us the appearance of a reliable ordered connection between the our application and the far application uh http is one of the application protocols um and so there is a little mini layer that that is layered in sort of seamlessly on top of the transport layer that basically takes plain text and encrypts it and turns it into ciphertext and then ciphertext on the way out and turns it back into plain text okay and so what happens is these applications just send plain text and out comes plain text and there's a little bit of extra glue in the middle here that's sort of a secure transport secure sockets layer this is this thing here is often called a socket oop sock yeah it'd be good if i could spell socket so this is a socket and then the red part is a secure socket so the applications kind of don't encrypt the data at all there is a library that encrypts it and the other thing is is that all the rest of the internet the internet the link layer the routers nothing the ethernet the fiber they don't even know the difference between encrypted text and nonencrypted text because the encrypted text wanders around fully encrypted addresses are not encrypted and so it stays encrypted all the way through the entire network it actually if you then think about the fact that this is the moment that it leaves your computer the only thing so the plain text comes in here gets encrypted here encrypted comes down the only thing that leaves your computer is encrypted text and it makes it all the way across the encrypted text goes into amazon so this is amazon this is you the encrypted text finds its way through all these things and it comes in encrypted and it actually doesn't get encrypted until it's sort of right at the point where amazon's web server that's going to actually charge a credit card so this is actually beautifully elegant in that the rest of the network is blissfully unaware that any encryption is happening it's just moving the data so this did not require any change again the beauty of a layered architecture did not require any change sort of below the transport layer and as a matter of fact all of the sequencing and retransmission that happens in the tcp layer that happens with the encrypted stuff too because it's just encrypted it's just text it's gibberish text it's not the original visa card number that you're sending you're sending one two three and out comes you know w x y the w x y just goes it's retransmitted all this crap just works it's like beautiful it's a beautiful thing it's absolutely beautiful thing and it's just like this mini layer kind of between the app it's like the top slice of the transport layer that's how i'm drawing it right here it's like this little kind of top extra little thing says you know what we're going to transport but actually help me out and give me some encryption while we're at it and there's all kinds of cool stuff that goes back and forth the public and private keys get exchanged that's all kind of stuff we don't worry about we just send data and get data back pretty cool huh so this really solves the problem of the fact that we basically should assume that everything between our computer and the destination computer this is you this is amazon right everything here this is all dangerous there's some like terrifyingly scary individual that's watching everything doing packet sniffing this might be eve the eavesdropper this looks like a little he he looks pretty tough right and and so that even the wireless right this is the wifi connection the wifi is dangerous now the reality is is these things aren't all that dangerous the wifi is probably the weakest link of this whole thing but we have to assume that it's dangerous right we we want to assume that the only thing that's safe and unfortunately if you put viruses in your computer then they can get it the plain text if amazon loses its data somehow then they get the plain text right but but basically you know we want to distrust all of this okay so this concept is called transport layer security also called ssl also known as https http for secure and it's kind of like between the tcp layer and the application layer or the top half the tcp layers the way i like to think about it it's because it's based on public private key encryption it's difficult but not impossible normal people don't have the kind of equipment to break it and even governments if they can break it i don't even know i'm not an expert i don't hang out with the government so i don't really know but assume that if they really put their mind to it in a very narrow situation if you become really interesting they will find your credit cards probably there's easier ways to get your credit cards than by decrypting your text so it's hard to decrypt and as i mentioned because of the layered architecture the tcp layer ip and link layers are completely unaware so you'll you you see this in the form of urls that start with https right they start with https www.facebook.com versus http and there was a time a few years back where you know they were it used to be a little more expensive inside of the servers to do https that still is and so some sites would try to do some of their activity without using secure protocols and others would use uh use nonsecure and secure and then flip you back and forth like if you're typing your password the problem was is that there was actually still sensitive data being sent even across the insecure and there was a quite a famous uh thing where people could install a firefox plugin and watch facebook nonsecure facebook things go back and forth across like a starbucks and it would just show you all the people's facebook accounts and you could log in as them and post as them and so you've seen a situation where companies are just starting to use https for everything you as a user have to be aware to see if you're typing anything sensitive never type it into a url that doesn't say https okay never do that you're typing password uh credit card number any kind of personal information make sure you're doing https and make sure that that you know what it is we'll talk about that uh in a bit we'll talk a little bit more about that in a bit so so if we take a look and we think about where the bad guys are at the bad guys are kind of everything and this secure tcp runs is the one part of the layer of architecture that runs from within your laptop to within the server and so then if we kind of assume the worst the the the backbone is pretty safe the wifi is probably the most dangerous right but when we do secure system tcp secure system to system tcp we are doing the encryption right here inside your computer before it leaves and we're only doing the decryption right when it comes back in the computer so the decryption and encryption are happening inside of amazon's computer and inside of your computer and nothing else so secure sockets is pretty good now the place where you're still danger is there might be a virus that's watching your keystrokes right this is why virus checking is so important because at some point you're typing it into your computer and the greatest danger you have to losing your data is really two things one that you've got a virus or b somebody has redirected you not to talk to evil amazon instead of amazon and that's what we'll talk about in the next lecture how to know how does these browsers really know they're talking to the real amazon and that is not confidentiality confidentiality is stopping the bad guy from seeing what you're sending as their eavesdropping eve is eavesdropping okay now the next thing is the question of is this the real amazon or is this a fake amazon so we'll talk about that next so now we have a way to ensure the confidentiality using secure socket layer and public private key encryption and the only question now remaining is who are we talking to and are we talking to that server that we think we're talking to are we really talking to amazon are we talking to coursera how do we know now you'll notice if you take a look at the top of your browser perhaps right now even you can take a look at the top of your browser and usually when it's indicating that you have a secure connection you can click on this and see some information it's called the certificate information okay and so https has the notion of a public key we retrieve the public key when we make the connection but there are two kinds of keys there are public keys that are just made up that are sent to us and then there are public keys that are signed and validated by a thirdparty certification authority so this is a coursera and it is certified by godaddy certification authority so it's not just that we're getting the certificate from coursera we're actually getting the certificate signed by godaddy the godaddy has has has got checked the id of coursera said okay you must be the ceo of coursera or i'm not going to give you this sign signed private key so it's a it's a process to get private keys signed and it's a way to make sure you are talking to who you think you're talking to so this is called digital certificates also known as sort of signed private keys now if we go back and we talk about the integrity right we want to know who we're talking about and so we had this notion of a signature a signature is a way that you know that you're talking to who you're talking to so for example like if a guy comes to your office and says hi i'm dr chuck got like a beard and some white hair you can say hey if you're really dr chuck show me your tattoo and now you'll know that very few people will also look like this and have this tattoo right so this is my private key and this is my signature of my private key this is like my message digest so so people won't have this tattoo if they claim to be dr chuck so this is dr chuck this is my message digest so there's a difference between a private key and a private key that's been certified by one of these designated third parties these designated third parties are called certificate authorities now you could say i'm a certificate authority well some certificate authorities are more better certificate authorities than others okay so they're a trusted third party and so how did they start well some are more trusted than others and the more we trust them they kind of all work out so it's not everybody you can't become a trusted authority so one of the many trusted authorities and one of the oldest ones and one of the more popular ones and one of the more expensive ones it's pretty expensive to get your certificate signed it can be as inexpensive as a couple hundred dollars it can be thousands of dollars to get a certificate signed and verisign is one of the oldest and most well respected of these certificate authorities so the idea is is that i have this website called online.drchuck.com where i teach python classes and do various other things and i wanted a secure certificate because i would be handling people's data and i wanted to to be respectable and have a secure certificate so i had a public and a private key and then i sent it to a certificate authority i paid them money and then they send me back a signed private key okay so this is uh now now you might say oh this is kind of evil or this is really expensive because all they really are doing is like changing a few bits in the in my private key you're adding a few bits to my private key but they have a lot of responsibility and the good ones have a lot of credibility so they don't want to lose information they got to spend some time validating identity saying okay are you really the owner of doctorchuck.com they're not going to hand the certificate assigned certificate for drchuck.com to anybody except the true owner and so they spend some time checking to make sure that it's the true owner and they they do this by looking at the registration data on doctortruck.com et cetera et cetera et cetera and so there is a cost of verifying all this identity kind of like the signature track on coursera and that's kind of what's going on on the signature track of coursera there's a difference between a certificate and a certificate that corsair is going to assert that we have verified the identity and the cost is in the verification of the identity so certificate authorities are charging amazon but then ensuring that they don't mistakenly give the amazon.com certificate to a random bad guy because if they did that bad guy could pretend to be amazon.com so then you might ask who decides which of these certificate authorities to trust we use the certificate authorities to decide whether or not to trust amazon.com or coursera.org or doctorchuck.com or whatever how do we decide which of the certificate authorities we're going to trust well it turns out that apple microsoft and linux and other operating system vendors preinstall at the moment that you're either purchasing your computer or installing your operating system part of that operating system is actually a list of the public keys of the chosen certificate authority so if you look deep enough inside your computer this is my mac you can see the companies that have been included by apple as the manufacturer of the operating system and so you see that verisign is one of those companies that has been preincluded in apple macintosh which means that a certificate from verisign is going to be known right so let's so let's look a little bit more so so these come your browsers and your operating systems come with prebuilt in public key certificates for certain certificate authorities like verison now that's a lot of trust that apple microsoft and linux have placed in verisign and that's because over the years verizon has earned that trust that says verisign doesn't just give out certificates without checking right if the verisign gave out an amazon.com certificate to somebody without checking they would lose a lot of credibility and then microsoft would like take them out right say well verisign seems to be kind of sleazy they seem not to be able to to handle their security but you know they have and so they remain in there and so we it's kind of a an interesting thing where they are motivated to keep their security high they're motivated to do a good job because the moment that they sort of fail they lose a lot of credibility and respect and their value of verisign brand and is all of the respect that we have for verisign so so so we mentioned public private key encryption we have the public key that goes across and i'm about to type my credit card in and so the problem now that we're going to solve is uh is this really amazon's key is it really amazon's public key i mean i got a public key from across this connection i made to a server and it claims that it's amazon.com but do i believe that it says it's amazon.com and so that's the integrity thing that's the security that's the do i believe it is it really got the uh verisign tattoo in addition to the amazon.com that's it represents that it's amazon.com public key so we can also use public keys to do signing and and basically verisign has a public and private key for verisign the public key for verisign is sitting in your browser right now and they use they do an encryption much like the message digest they do an encryption of amazon's certificate and then sort of create a digest and then add that digest to it so a certificate says i'm amazon.com and later it says oh yes and verisign signed this with verisign's private key okay so verisign's private key is used to sign amazon this is probably easiest if i just show you sort of a video wait ooh going the wrong way am i going the wrong way what's going on here how come i'm going the wrong way yeah i'm going the wrong way okay so here we go going backwards so here's how it works um this is how amazon gets a public key signed by uh verison right so in the beginning verisign makes a public and a private key somewhere in a bunker and they store the private key and they'll you can sometimes read up on how many how much effort they go to storing the private key and then they hand the public key to apple microsoft and linux and then they bundle that in with your laptop so your laptop that you buy you walk out and you have a laptop and it's got public keys in it from the vendor now amazon says you know what i'd like to do some commerce and i would like to be able to use ssl and us and have a certified private key so then what amazon does is amazon inside of its servers generates a pair a public private key pair so this private key is not leaving amazon servers it's it takes a while it takes minutes sometimes to generate the right random sufficiently random public and private key by looking at all the large prime numbers and then picking one and then bang making a public and private key then what amazon does at that point is it transports its public key to verizon now during that transport it might eve might have seen it but it's okay because it's just it's just a public key right so it's just the public key and so it actually can be sent across the internet and it's most commonly sent across the internet like when i got the online.doctorchuck.com certificates we just typed it in and sent it because if you get a hold of the public key all it means is you can encrypt it doesn't mean you can decrypt so then what happens is inside of verizon's servers verizon computes a message digest using its public it's private key right and then it adds basically a signature that says oh here's amazon's public key that i received from amazon verified the identity of the person and now i have signed it mr ver verisign i've signed it and that of course is just like message digest like information that is appended to the bits of the public key then that public key with signature is sent back bundled together and sent back to amazon and now amazon has not just any old public key it has a public key that says i am amazon.com and verisign is now asserting that i am really who i am and and again so eve saw that one who cares it's just a public key there's nothing about the verisign private key it never left the verisign servers the signature is public information you can use the verisign public key to verify that the signature is right but you can't forge the signature so eve can look at that eve could look going this way eve can look that way eve gets nothing he gets nothing so amazon now has a signed and certified private key then what happens is sooner or later many hours many days many months later you decide on your laptop remember this is you oops this is you you want to buy some shoes so you connect to amazon.com with your browser with an https connection and then what happens is amazon sends you its public key and eve of course is eavesdropping all the time eve sees it goes by it's worthless right it's worthless because it's just the encryption key it's not the decryption key the fact that it's signed it sees that but it can't do anything with that information now within your laptop within your laptop you have from the vendor the verisign public key from macintosh or apple or whatever so you can look with this quebec you can look with this public key at that signature and just like we did with the message digest before you can go yep that's good that really had to have been signed by verison and if you're if your computer's really conservative it can actually go check with verisign can send it up and say hey did you verify this and then verisign can verify it too but you actually don't need to connect because you have the public key the only way that the the you know whatever that message digest could be right would be is if verisign private key was used to generate the message digest just like we used to do santa in the other one okay the sand is just really simple but it's the same basic mechanism this is verifiable that it came from this private key now if somebody broke in and stole the private key that's a different story but if the private key is safe and secure hasn't been compromised the only way to generate that message digest is be in possession of the private key so now you are in a position where you are in a good mood right you see an https you can pop that little thing and say that was signed by verisign you can be assured that verisign is asserting that that key came really that public key came from amazon and now is time to encrypt your visa card and send it over an encrypted connection to amazon okay because you won't send your encrypted thing your your you won't send it unless you believe that the https is proper and your browser will pop up a little popup and say wait a sec this certificate looks a little funky claims to be from amazon.com but it's not signed by one of the signatures that i believe in so you send your data it is encrypted and eve is watching right eve is always watching but because it's encrypted with a public key unless he has super computers in a couple of months there's nothing that eve can do and then of course amazon decrypts it using the private key so the private key comes in and let me redo that right so in it comes eve watches but is helpless because they don't have enough computers eve doesn't have enough computers and your key is large enough so amazon then takes its private key and uses that to decrypt it and ends up with your plain text again so if you think this whole thing through this eve was watching the whole time we sent it public key we signed and returned a public key then we sent the public key to your laptop we verified the public key and the whole time eve is sort of watching all this information and she is powerless to break it pretty dang clever if you ask me and we can thank diffiehellman and merkel for that pretty darn clever because eve sees it all just think what would happen if like the germans had this in world war ii would have been pretty cool of course they didn't have computers so it would have been difficult i don't know too much to think about right now okay continuing on so what we have is we have this thing called the certificate authority which is a trusted third party that signs these certificates right and so it's the it's entity that issues digital signatures on public keys so that we the public have a way of validating that an amazon.com certificate really came from amazon.com so if you then add this all together right if you add this all together we have basic public private key encryption that makes sure that this data can move across the internet out of your computer out back into the next one all encrypted that's just public private that does that and then we have this thirdparty certificate authority that your application can use to validate the certificate that comes out and so the combination of ssl or the secure sockets layer and the certificate authority gives us high confidence that when we're talking to something we know we're really talking to it so it's pretty nonintrusive security if your browser pops up with a little popup message that means it's got a certificate that it has no certificate of authority to validate and that's not a good time to be typing in sensitive information unless you know exactly what's going on so that sort of brings us to the conclusion of this this these last couple of lectures have been about message confidentiality and that is protecting the contents from being revealed we use encrypting and decrypting for that and then we have message digests and cert to sign things we've signed messages we've signed certificates we've signed many things and those are important and we talked about both sort of shared key and secret key where you have to get together and agree on a key which is a symmetric key that's used for encrypting and decrypting and then you have the public private key which is the asymmetric which is one key is used for encrypting and the other key is user for decrypting and you can freely show the encrypting key because it gives very little information although it is mathematically possible but difficult to decrypt a public private key message so that kind of sums up that kind of sums up our lecture on public private keys and i hope you find it valuable see you on the net you
