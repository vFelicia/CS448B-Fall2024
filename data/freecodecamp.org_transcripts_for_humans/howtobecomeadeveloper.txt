With timestamps:

00:04 - all right
00:05 - thanks everyone for coming out i know
00:07 - there's
00:08 - probably a lot of other things you want
00:09 - to do on your weekends a lot of sports
00:11 - ball to be watched but
00:13 - you also want to be a developer and i
00:14 - mean you're here and that's that's a
00:16 - really great first step there's a lot of
00:17 - people who are not here and not doing
00:18 - anything and
00:20 - you're actively doing it so that's
00:21 - that's awesome
00:23 - uh the title of this talk is how to
00:25 - become a developer it's a collection of
00:27 - a lot of the experiences that i've had
00:30 - some of the things i think i did right
00:31 - and almost everything i did wrong as
00:33 - well as
00:35 - the experiences of some
00:37 - people that i've helped mentor through
00:39 - this process just recently there was a
00:41 - guy who
00:42 - had no programming experience at all
00:44 - just got his first job two months ago
00:46 - and so this is really fresh on my mind
00:48 - and i
00:49 - know the great things that tech has done
00:50 - for my life and so i'm really
00:52 - really happy to share with you guys um
00:55 - maybe help you
00:56 - learn some things that um the easy way
00:59 - so
01:00 - i'm john
01:01 - i'm a developer and a consultant and i
01:04 - like doing things outside of computers
01:06 - sometimes
01:07 - and this talk is based on
01:09 - a series that i wrote on my blog
01:12 - also called how to become a developer
01:14 - siri no
01:15 - why are you doing that
01:18 - and the goal here
01:19 - is to become fully employed as a
01:21 - software developer like that's where we
01:22 - want to go
01:23 - and so the structure for this talk is
01:25 - we're going to talk about
01:27 - why you might want to become a developer
01:29 - what skills you might need what kind of
01:31 - developer what type of development
01:34 - talk about like okay how do you actually
01:35 - do that and also talk about how to get
01:38 - your first job
01:39 - with a little bonus of how to be an
01:41 - outstanding junior developer
01:44 - so i imagine you have some reasons why
01:46 - you wouldn't become a developer
01:47 - otherwise you wouldn't be here and to me
01:49 - there's really two groups and i think
01:51 - there are practical reasons i think
01:52 - there are personal reasons
01:54 - i mean the biggest practical one just
01:56 - right up front like it pays pretty good
01:58 - i mean if you look up the median
02:00 - developer salary in your area
02:02 - it's pretty good
02:04 - and the rate at which you can increase
02:05 - that is probably higher than about any
02:07 - other field out there
02:10 - secondly i think there's huge market
02:12 - potential
02:13 - still to be had for development i mean
02:15 - everything has programming in it you can
02:17 - tweet from your fridge if that's a thing
02:19 - that you would want to do
02:20 - and so programming has given us such
02:22 - incredible scale and efficiency in
02:25 - business like it's here to stay and
02:27 - while there may be some type of super ai
02:29 - that can program itself and take over
02:31 - the world i mean somebody's got to make
02:32 - that muzzle b
02:34 - why not
02:36 - is anybody here who has an app idea or a
02:38 - business idea that involves technology
02:42 - if you do
02:44 - learning to program is a great way to
02:46 - bootstrap those ideas
02:48 - i've talked to a lot of people who have
02:49 - business ideas and
02:52 - they are almost helplessly lost trying
02:54 - to find programmers figure out what they
02:56 - need like project manage it's incredibly
02:59 - tough and so getting this skill set
03:02 - is incredibly beneficial if you actually
03:04 - want to make something with it yourself
03:06 - and then lastly here i think
03:08 - it's important to know that this is a
03:10 - known path okay we're not finding cures
03:12 - for cancer we're solving mathematical
03:15 - theorems that have been unsolved for 500
03:16 - years like there's a way to do this
03:18 - and i don't want to underestimate the
03:20 - amount of hard work that it takes
03:22 - because it does take a lot of hard work
03:24 - but it's not hard and i think that's a
03:26 - really important distinction it is not
03:28 - hard it is very doable
03:29 - but it does take a lot of hard work
03:33 - so moving on to some personal reasons
03:36 - i think
03:37 - some people are surprised when they
03:38 - start programming because
03:40 - they do it for all those practical
03:42 - things and then they find that they
03:43 - really just love it for what it is and
03:45 - one of those reasons i think
03:47 - is that programming to me
03:49 - is pure creation and if you have a
03:51 - creative itch it will scratch that itch
03:54 - a lot of people think about
03:56 - oh you know creativity is art or music
03:59 - or dance or something like that but
04:02 - to me creativity is anything
04:04 - where you have made something that was
04:06 - no longer there or that was not there
04:08 - before you started
04:10 - there's this tweet going around recently
04:12 - by a conference that said what five
04:13 - words best describe programming and i
04:16 - really like ryan's answer here making
04:18 - invisible robots from words like when
04:21 - you program things you're commanding
04:23 - bits of matter to do stuff based on
04:26 - secret keywords that you type on your
04:27 - computer like that's kind of crazy if
04:28 - you think about like what actually
04:30 - happens when you program something
04:33 - to me i also like programming because
04:35 - it's a domain-less tool
04:37 - programming is a very good tool
04:39 - and it's great at what it does but you
04:42 - can like programming
04:44 - and at the same time not do it for
04:46 - programming like if you like cats or you
04:48 - like music you can apply programming to
04:50 - those things
04:52 - so real quick let's talk about
04:54 - some reasons why you may not want to
04:56 - become a developer
04:57 - and to me there you don't like computers
05:00 - notice i didn't say you were not good at
05:01 - computers i said you do not like them
05:03 - you don't like desk jobs sitting at a
05:05 - desk sucks i mean
05:07 - it's awful for your health and it can
05:09 - start to be kind of painful over time
05:12 - and also if you don't like learning new
05:13 - things programming is not for you the
05:14 - world of programming adapts so quickly
05:17 - and changes so fast
05:18 - if you're not learning
05:20 - you're going to get left behind
05:22 - now there's a notable exclusion there i
05:24 - think some of you might be thinking oh
05:26 - i'm not good at math or i'm not smart
05:29 - and these are just silly things we tell
05:30 - ourselves based on a teacher we had in
05:32 - high school or an experience we had this
05:36 - is just not true like you don't have to
05:37 - be smart you are smart enough you don't
05:39 - have to be good at math there's really
05:40 - not that much math in programming
05:43 - okay so moving on to what skills do we
05:46 - need
05:47 - you might be surprised that i only put
05:49 - one thing in this list
05:50 - and to me that is pure and utter
05:54 - determination
05:56 - like you have to know that you're going
05:57 - to beat this little piece of metal and
05:59 - it may kick you down a couple times but
06:01 - in the end you're going to triumph and
06:03 - learn this and you can do it that's all
06:05 - you need
06:06 - so when i started programming it was the
06:09 - first day
06:10 - my freshman year in college the computer
06:12 - science program and i had done no
06:15 - programming had absolutely no idea and
06:17 - it kicked my butt continually
06:19 - and it was awful and i had no idea what
06:21 - i was doing every tuesday we got a
06:23 - project every tuesday i got depressed
06:25 - and i felt like i couldn't find the help
06:27 - i couldn't figure it out but i kept
06:29 - going
06:30 - and
06:30 - sophomore year picked up a couple more
06:32 - things junior year picked up a couple
06:34 - more things again felt like okay i've
06:36 - got some fundamentals you know i can
06:37 - make some programs
06:39 - and so i finally graduated the program i
06:41 - know some things
06:42 - and i got my first job as a web
06:43 - developer
06:44 - and computer science and web development
06:46 - are very different
06:48 - and so i felt like the ground was ripped
06:50 - under out from underneath me again and i
06:52 - was hopelessly lost because they're just
06:54 - totally different concepts
06:56 - but after my first job i got my second
06:58 - one
06:59 - and i noticed that i learned some things
07:01 - and
07:03 - um third job i learned some more things
07:05 - you know i'm not getting stuck as often
07:06 - i'm not getting stuck for as long when i
07:08 - do get stuck and so over time you build
07:10 - up these skills you build up this
07:11 - knowledge
07:12 - and you can get there the path is no
07:16 - so skills you don't need
07:18 - tech savviness
07:19 - good at math and science
07:21 - a computer science degree i'm sure there
07:23 - are a lot of people to see that
07:25 - if you have questions about that we can
07:27 - talk about after the talk but you don't
07:28 - need a computer science degree i had a
07:31 - friend of mine who
07:33 - gave me an analogy that i really liked
07:35 - and he talked about being a welder
07:37 - versus a material scientist and to me
07:40 - programming is like being a welder you
07:42 - have tools it's a skill and a craft that
07:45 - you
07:46 - learn how to do
07:47 - now if you want a computer science
07:49 - degree i i relate that more to material
07:51 - science you're discovering new materials
07:53 - you're worried about the theory of how
07:54 - things work now would a material science
07:56 - degree help you as a welder probably but
07:59 - it's not required and so if that's
08:01 - something that interests you go for that
08:02 - degree
08:03 - but it's not something it's not a
08:05 - prerequisite
08:07 - again it's not hard
08:09 - but takes a lot of hard work
08:12 - there's this blog that i found
08:14 - that said this is why learning rails is
08:16 - hard and they had this mind map of
08:18 - skills you have to pick up
08:20 - and that's kind of daunting and i don't
08:21 - show you that to freak you out
08:23 - but there's a lot of things there but
08:24 - the thing is you don't start
08:27 - you know eating the whole elephant you
08:28 - do it one bite at a time and so you pick
08:30 - up the first node maybe on each of those
08:33 - things and maybe you get the second one
08:34 - in the third and over time you build up
08:36 - this really impressive knowledge of
08:38 - skills
08:39 - because the web is continually evolving
08:40 - and it's
08:42 - is much there's much more to learn than
08:44 - there was five ten years ago
08:48 - so let's talk about what kind of
08:49 - developer we want to be
08:53 - development is kind of like music in
08:55 - that music has genres and instruments
08:58 - you might if you want to be a musician
09:00 - you say i want to be an electric
09:01 - guitarist in a rock band or i want to
09:03 - play bass in a jazz trio and development
09:06 - has very similar things just like music
09:08 - has genres
09:10 - programming has types of applications
09:13 - and before somebody gets really angry in
09:15 - the chat there's a simplified view
09:17 - there's probably like more things are
09:18 - left out but just for our sake of
09:19 - conversation i put them in these four
09:21 - groups
09:23 - the first one i'm calling websites this
09:26 - term might
09:26 - confuse you but to me this is what a
09:29 - website is you can actually go to this
09:30 - link it's still up
09:32 - it's just like you would have a filing
09:34 - cabinet with physical drawers a website
09:36 - is just virtual documents with links to
09:39 - flip the pages
09:41 - now we kind of colloquially use this
09:43 - term
09:44 - for things like this which i'm calling
09:45 - web apps so facebook gmail slack
09:49 - and
09:50 - web apps are things that are interactive
09:53 - so you have an account you're submitting
09:55 - data the data you get back is
09:56 - contextualized to use specifically
10:00 - next we have native apps you know what
10:02 - these are this is your slack client for
10:04 - your desktop these are the things on
10:05 - your phone
10:07 - and the fourth one i'm just calling
10:09 - generic internet of things this is more
10:10 - the like device sensory kind of
10:12 - communication stuff
10:14 - so out of all of these
10:16 - you want to make web apps and the reason
10:19 - you want to do this is because web apps
10:21 - are really at the core of all these
10:22 - other things the skills you pick up
10:24 - making a web app
10:26 - will either directly or indirectly
10:27 - transfer to whatever you're doing if you
10:29 - want to make a mobile app
10:31 - that data is coming from somewhere it's
10:32 - coming from an api it's coming from a
10:34 - web app you do internet of things that's
10:36 - like all apis like things talking to
10:38 - each other
10:39 - so web apps is an amazing place to start
10:42 - don't make websites
10:44 - websites are dead and you don't want to
10:46 - you don't want to do that
10:48 - okay so what kind of development do we
10:50 - want to do
10:52 - in this i've broken it kind of into two
10:53 - categories
10:55 - first one is the front end this is the
10:56 - thing
10:57 - that you interact with this is the
10:59 - presentation layer it's the thing that
11:01 - takes the data and then makes it in a
11:03 - human readable workable way and so a
11:05 - front-end developer is concerned with
11:07 - things like
11:08 - how does it look how does it feel how do
11:10 - you interact with it you probably use
11:12 - technologies like html css js react
11:16 - angular ember
11:18 - in the contrast to that we have
11:20 - the back end
11:22 - and for this slide i googled back in
11:24 - cloud architecture and this was the
11:25 - first image i got which is perfect but i
11:27 - love it especially on the side how it
11:29 - says the back end goes to the front end
11:32 - through internet connection
11:35 - just take that in okay but seriously the
11:37 - back end powers the front end this is
11:39 - stuff like servers network requests
11:41 - databases you're
11:44 - dealing with things like how do you
11:45 - store and retrieve data properly how do
11:47 - you authenticate users
11:49 - you use something maybe like ruby python
11:51 - rails node
11:53 - and so do you want to be frontend or
11:54 - backend that's a good question the
11:56 - answer is yes you want to be what we
11:58 - call full stack
12:00 - by learning this incredible breadth of
12:02 - skills
12:03 - you'll have everything you need to
12:04 - specialize in whatever you end up
12:06 - wanting to do
12:07 - if you saw ryan's talk a couple weeks
12:09 - ago in interviewing you talked about
12:10 - t-shaped people you want to build the
12:12 - top of your tee you want to have
12:14 - exposure to this wide variety of things
12:17 - and over time you'll be like you know i
12:19 - really like building reactive front-ends
12:21 - or i really like doing database stuff
12:23 - and so you'll build the oops you'll
12:25 - build the stem of your tea
12:27 - and really start to specialize down in
12:29 - one particular area
12:32 - okay that's enough theory
12:34 - you guys want to know like how like how
12:35 - do i actually do this so let's talk
12:37 - about that first thing you need to do is
12:39 - choose
12:40 - your tool
12:42 - now this can be kind of daunting there
12:43 - are a lot of programming languages out
12:44 - there it's a lot of information but
12:47 - there really is not a bad choice
12:49 - unless you didn't pick bulbasaur in
12:51 - which case
12:52 - you chose poorly
12:54 - the thing is is any experience is good
12:56 - experience when you start
12:58 - there's kind of this weird phenomena
13:00 - with
13:01 - weightlifting where somebody came to you
13:02 - and said i want to raise my bench press
13:05 - if you told them to go run
13:07 - every day a mile for four weeks it would
13:10 - raise their bench press which makes no
13:12 - sense but when you're in such an
13:13 - unadapted state any experience moves you
13:16 - towards where you want to go so
13:18 - especially in the beginning don't worry
13:19 - about it just pick something do
13:21 - something it will become clear how to
13:23 - move and pivot as you go along the way
13:26 - okay but seriously well english just
13:28 - tell me a language please
13:31 - before i do that i have to give you a
13:32 - disclaimer
13:34 - so
13:35 - asking a programmer what language you
13:37 - should use
13:38 - is incredibly biased like people have
13:40 - chosen languages and based their entire
13:43 - career around these things
13:44 - okay this is like asking
13:47 - try not to offend people somebody in a
13:48 - multi-level marketing scheme like
13:50 - which should i use your competitor the
13:52 - other one like you're getting a pitch
13:53 - you're getting a really strong pitch
13:54 - you're signing up right there okay so
13:57 - if you talk to somebody
13:59 - and they don't give you this disclaimer
14:00 - you should not listen to this person
14:02 - like they're obviously so biased they
14:03 - cannot see it
14:05 - so with all that being said
14:07 - you guys are all doing html javascript
14:09 - css keep it up those are great you need
14:11 - those
14:12 - for a backend language i recommend ruby
14:15 - and there's a big asterisk here that
14:17 - i'll talk about later
14:19 - but you want to pick a language
14:21 - that is stable
14:23 - if you're trying to learn it
14:24 - and the
14:25 - components of the language are changing
14:27 - out from under you between versions
14:28 - you're not gonna have a good time cough
14:30 - angular one to two you want to be
14:32 - beginner friendly
14:33 - c and c plus plus are amazing powerful
14:36 - languages but they're not beginner
14:37 - friendly like don't give yourself more
14:39 - pain than you have to at the beginning
14:41 - you want something that has a large
14:43 - community
14:44 - okay you want something where when you
14:46 - go to google
14:48 - the first 10 hits are for that language
14:51 - you don't want to start learning
14:52 - something and then
14:54 - you go to get that job and they're like
14:55 - i've never heard of that like you picked
14:57 - randomnound.js like five people use that
15:00 - in the world
15:01 - you want something that has a web
15:02 - framework because you want to make web
15:03 - apps
15:04 - and you want something that has been
15:06 - around for a while
15:07 - but it's still being maintained
15:09 - and it's kind of a balance that you have
15:11 - to to work
15:12 - but it's important that it's continually
15:15 - being improved but it's not changing so
15:17 - fast that it's going to blow you out of
15:19 - the water
15:20 - so all that being said
15:22 - i think all these are good
15:24 - languages to choose from
15:26 - someone is angry in the chat saying.net
15:28 - note or not a language
15:29 - we can't hear you so stop yelling
15:32 - just don't pick php just please
15:34 - pick one on the left
15:36 - if you pick php that's fine like you
15:38 - you'll learn eventually sometimes bad
15:39 - experience points you towards good
15:41 - experience
15:42 - pick something you can make web things
15:44 - with that's like the general point
15:47 - okay so how you picked a language how do
15:49 - we do this step one
15:51 - is to learn the language itself
15:53 - if i said
15:54 - okay we're going to write a passionate
15:56 - political essay in german but you don't
15:58 - know any german you're going to have a
16:00 - bad time so you want to learn the
16:02 - grammar you want to learn the words
16:04 - themselves how to put them together then
16:05 - we'll talk about sentences then we'll
16:07 - talk about ideas and themes
16:09 - you've got to learn the language
16:10 - yourself or you're going to be tripping
16:12 - over yourself trying to do stuff
16:14 - so work through the language
16:16 - and then
16:18 - make crud apps
16:19 - this is both a description of the
16:21 - quality of your apps and the type of app
16:23 - itself
16:24 - if you didn't know crud stands for
16:26 - create read update destroy okay this is
16:29 - like a facebook feed you make posts you
16:31 - edit posts you get your posts back and
16:33 - you can delete them
16:36 - after you do that you're learning the
16:37 - language you're learning the tools
16:39 - around the language
16:40 - third there's some concepts outside of
16:42 - crud that you need to become familiar
16:44 - with these are things like apis database
16:48 - css and js frameworks
16:50 - bootstrap foundation react all that kind
16:52 - of stuff
16:53 - um i made this dock for somebody who is
16:55 - trying to go through this process
16:57 - um and it's it's not complete for sure
16:59 - but there's some extra stuff in there if
17:01 - you're interested you want to go look at
17:02 - it
17:02 - and i don't think you have to do these
17:04 - things these three things like in order
17:06 - like do them at the same time learn some
17:08 - language stuff make some crud apps
17:10 - investigate something you don't know and
17:11 - repeat and just keep building and
17:13 - building on your knowledge
17:16 - okay let's talk about getting your first
17:18 - job
17:20 - now i'm going to quote myself being
17:21 - quoted by ryan who was quoting me
17:23 - originally when i say
17:25 - this is probably the hardest part in the
17:26 - whole process because there are a lot of
17:28 - things outside of your control with
17:30 - company logistics
17:32 - the person that's interviewing you where
17:34 - you're at in the world and where you're
17:35 - applying like there's a lot of things
17:37 - out of your control here but there are a
17:38 - lot of things that you can do
17:41 - so here's some to-do's
17:43 - get a developer social media presence
17:45 - okay this is twitter
17:47 - you are
17:48 - following major people in your framework
17:50 - you're following the framework itself if
17:52 - the framework has a new release bam
17:54 - smashing that retweet button if i go to
17:56 - the internet and i put in your name
17:58 - i want to see
17:59 - oh this person is in the developer world
18:01 - like not that they're good or they're
18:03 - bad but like they're at least in the
18:04 - same world that i am
18:06 - if you don't have a blog or personal
18:08 - site this is a great first thing to make
18:10 - as a crud app
18:13 - attend meetups like a fiend you're
18:16 - already doing that so congrats find the
18:19 - language that you're doing if you're
18:20 - doing python ruby js go to that meet up
18:23 - every single time and talk to people
18:25 - okay networking is like this big scary
18:28 - word like find a nice person and go be
18:30 - nice to them and talk about development
18:31 - stuff that's all you have to do
18:34 - if you can contribute to open source uh
18:36 - this is
18:38 - it can be a little intimidating and
18:40 - tough to get into
18:41 - but people you think like oh how am i
18:43 - going to work on rails like the
18:45 - framework that sounds insane
18:47 - but go read their documentation and fix
18:49 - typos
18:50 - people love this if you're like hey fix
18:52 - some typos this is grammatically wrong
18:54 - they love that kind of stuff and it
18:56 - looks good on your github if someone's
18:58 - looking at your github they're not gonna
18:59 - go look at what you did there's like oh
19:00 - he forked rails that's amazing like he's
19:02 - working in rails
19:05 - next step have a github
19:07 - these are the big three github twitter
19:09 - blog or personal site
19:11 - answer questions on stack overflow
19:14 - now i don't know a lot of people who are
19:16 - looking at stack overflow rep as like a
19:18 - metric
19:19 - but it's hard enough to solve your own
19:21 - problems
19:22 - reading someone else's description and
19:24 - solving their problem is even harder so
19:26 - if you get good at that when you jump
19:28 - into a random code base at your new job
19:30 - you'll be right at home
19:32 - and then lastly and probably the most
19:33 - important make as many stupid apps as
19:35 - possible like as many like dozens
19:38 - hundreds if you can
19:39 - and just absolutely dumb stuff like when
19:42 - trump tweets it emails your grandma just
19:43 - like literally anything you can think of
19:46 - make an app out of it
19:48 - okay so getting back to the first job
19:50 - we've done all that stuff we're prepping
19:52 - what do we do
19:53 - step one talk to recruiters i got my
19:56 - first job through recruiter i don't even
19:57 - know how they found my email she could
19:59 - help me up one day and i got my first
20:00 - job through her so that's great
20:02 - the recruiters that come to a lot of
20:04 - these meetups like go talk to them see
20:07 - you know who's hiring what stack are
20:09 - they hiring for what kind of roles are
20:11 - you seeing in this city
20:13 - do all the normal job stuff i mean
20:15 - you're making resumes and cover letters
20:18 - and sending out cold emails applying on
20:20 - job boards just do all those extra
20:21 - things you you know as the conventional
20:23 - job wisdom
20:25 - watch ryan's talk on interviewing
20:26 - interviewing is an important part of the
20:27 - process
20:29 - tap your network
20:30 - i hate this race but go talk to the
20:33 - people that you talk to at the meetups
20:34 - that's really as easy as it is like ryan
20:37 - also mentioned some of my best well all
20:39 - my best jobs have come
20:41 - from a friend of mine telling me about
20:42 - it like i had no idea it even existed
20:45 - and like hey john would be good for this
20:46 - and
20:47 - it works this is how you're gonna get
20:49 - your best job
20:51 - okay now coming back to
20:53 - the asterisk
20:56 - in all transparency
20:58 - ruby is not big in the oklahoma scene
21:00 - right now company wise
21:03 - if your goal is to get a job in oklahoma
21:05 - city you're probably better off as much
21:07 - as it pains me to say
21:08 - doing.net or java
21:10 - something js based just because that's
21:13 - who's here in the city and if you want
21:15 - to get your first job it's probably you
21:17 - know you should be learning the things
21:18 - that are here
21:19 - i will say that i think the quality of
21:21 - jobs
21:22 - is higher in tools like ruby like if you
21:25 - want to be sitting at a coffee shop
21:27 - downtown with your macbook
21:28 - you're not going to do that at like
21:30 - bigcorporation.js that's just not going
21:31 - to be how it is but
21:33 - getting your first job is really
21:35 - important it's really easy to pivot
21:36 - after that and remember
21:38 - any experience is good experience
21:43 - okay let's talk about how to be an
21:45 - outstanding junior developer so you got
21:47 - your first job you're really excited
21:50 - step one communicate
21:52 - really really really really well
21:55 - communication covers a multitude of sins
21:57 - you're probably going to be working with
21:59 - some senior developer or a boss who's
22:01 - trying to coach you along the way
22:03 - communicate really well with them
22:06 - does anybody remember this
22:08 - we're gonna do a little good idea bad
22:09 - idea
22:10 - for communication it errored
22:13 - the page won't load
22:15 - i'm stuck
22:16 - all these things require the person to
22:18 - ask you a question again to get more
22:20 - information when you're communicating
22:22 - try to give them all the information you
22:24 - have so they can immediately start on
22:25 - your problem it'll save time and also
22:28 - help from frustrating both you
22:31 - so i made a little mad lib for us it
22:33 - goes like this i'm working on blank but
22:36 - when i try blank blank happens instead
22:38 - i've tried blank blank and blank and
22:40 - looked at blank and blank
22:42 - example this i'm working on the user
22:44 - password
22:46 - password reset bug when i try to
22:48 - generate a password reset link the
22:50 - user's token is already empty i've
22:51 - looked at where the token is set and i
22:53 - can see the token in the database but
22:55 - the token is missing on line x if you
22:57 - send me this i know what you're doing i
22:59 - know what you've tried i know where
23:01 - you're at and like telling me hey it's
23:03 - on this line we can jump right there and
23:05 - start working on the problem
23:07 - the next thing
23:09 - is to hone your google foo
23:11 - you think you can google but you cannot
23:13 - you will learn
23:14 - googling well
23:15 - is a skill as much as
23:17 - being able to write ruby
23:19 - okay sometimes you just want to paste
23:21 - that whole bad boy in there just copy
23:23 - paste bam first hit
23:25 - that works well
23:27 - now you want to remove project specific
23:29 - info
23:30 - google does not know what undefined
23:32 - function who's that pokemon its pikachu
23:33 - is except that i already googled it to
23:35 - make the slide so it does so you want to
23:37 - remove that kind of stuff undefined
23:38 - function ruby much better results
23:42 - next use a try timer
23:45 - i've worked places where this is
23:46 - specifically said in other places where
23:49 - it's kind of up in the air but this is
23:51 - the amount of time you work on something
23:52 - before you ask for help this could be 15
23:54 - minutes 30 minutes an hour whatever it
23:56 - is and you basically you want to give it
23:58 - your best shot and try and figure it out
24:00 - before you ask for help
24:03 - now the important thing is
24:05 - let's say you hit a problem hit a
24:06 - problem hit a problem you get help
24:08 - you're frustrated but you move on and
24:10 - then bam a new error
24:12 - what the tendency is
24:14 - is to go ask for help immediately again
24:16 - but reset the timer
24:19 - try it again remember to relax take
24:21 - breaks if you need to because the
24:23 - important part is you learning how to
24:25 - solve your problems not finishing the
24:27 - task at hand like when you finish task a
24:29 - they'll give you task b after task b is
24:31 - task c like that happens forever so for
24:34 - you to really grow as a developer you
24:36 - want to learn how to fix your own
24:38 - problems
24:40 - couple miscellaneous tips
24:43 - ask the duck
24:44 - has anyone heard of rubber duck
24:46 - debugging
24:48 - this is common in the programming world
24:49 - i don't remember the exact origin but
24:51 - there's a boss or professor
24:54 - who put a literal rubber duck on his
24:56 - desk and before people could ask him
24:58 - questions they had to walk up and
24:59 - audibly ask the duck the question
25:02 - and what they found is that when they
25:03 - asked the duck the question they figured
25:05 - out the answer and there's something
25:07 - about saying your question out loud
25:09 - organizing it in a cohesive way where
25:11 - you have to explain to someone else that
25:13 - trains it uses your brain in a different
25:15 - way you usually figure it out so before
25:17 - you ask for help
25:18 - ask the duck like
25:20 - if you need to literally do that that
25:21 - would be great if i was a developer
25:24 - trying to mentor you and i saw you had a
25:25 - duck like i would love that
25:29 - next take notes
25:30 - if you figure something out
25:32 - just keep a little file open when at my
25:34 - first job i literally had stickies that
25:36 - i stuck to my monitor if you figure out
25:38 - oh how do i add a new database column in
25:40 - a migration you know drop some notes
25:42 - down you're going to be referring to
25:44 - these things a lot and it it's
25:46 - impressive to see that when i see
25:47 - somebody that has taken notes and is
25:49 - really trying to learn and remember
25:51 - versus someone who's just like
25:53 - hey how do i do this and it's like we've
25:54 - done this six times like you know gotta
25:57 - keep progressing
25:59 - lastly fight impostor syndrome if you
26:02 - don't know what this is this is this
26:03 - feeling that you'll experience at
26:05 - various points in your career
26:07 - where
26:08 - it seems like everyone else has it
26:09 - figured out
26:10 - but you're faking it and you don't have
26:12 - it and you could be feeling that right
26:14 - now like i'm not a developer like how do
26:15 - i do this and this is absolute garbage i
26:18 - love this picture because it shows that
26:20 - we all have different experiences and
26:22 - skills
26:23 - and we overlap but nobody just like
26:26 - completely bulldozes over you like you
26:28 - have valuable experience especially
26:29 - coming outside of the programming world
26:32 - you can bring to whatever you're doing
26:35 - so lastly i want to talk about closing
26:38 - the junior senior gap
26:40 - and a lot of people when they think
26:41 - about
26:42 - you know these loose terms of junior and
26:43 - senior developer they think oh the
26:45 - senior has all this knowledge they have
26:47 - all this experience where they just know
26:50 - the answer like they see something as
26:51 - boom they know it
26:52 - and
26:53 - that is true to an extent like you will
26:55 - gain knowledge but the thing that really
26:58 - separates someone who's a i think a
27:00 - great developer and a good one is that
27:03 - great developers have a problem-solving
27:05 - system
27:06 - they have honed and polished this system
27:09 - to where
27:10 - yes they may get stuck but they are so
27:12 - fast at figuring out because they go
27:14 - straight to the problem they research
27:16 - they implement it and it works and so
27:19 - i'm going to give you five debugging
27:20 - tips you can use this from day one all
27:22 - the way throughout your career
27:24 - number one when you run into a problem
27:26 - don't thrash your code
27:28 - most people when they run to a problem
27:30 - they just go crazy changing stuff and
27:33 - you introduce like five new problems on
27:35 - top of the problem you already have so
27:37 - don't thrash your code use your system
27:40 - number two read the error message
27:42 - okay no but actually read it i've seen a
27:45 - lot of people it's like oh that's
27:47 - garbage like computer barf not going to
27:49 - read it like that is computer barf and
27:51 - part of that is just like nonsense but
27:54 - part of this is vitally helpful tells
27:56 - you what the error is
27:58 - and the exact file in line that it
28:00 - happens so instead of just going crazy
28:03 - in your code go straight to that line it
28:05 - will save you so much time
28:08 - next
28:09 - don't waste time on the impossible or at
28:12 - least the improbable
28:14 - there is a chance although it is
28:16 - extremely low that you will run into
28:18 - a core framework or language bug or a
28:21 - browser bug or an os level bug but the
28:24 - chances are
28:25 - you did something wrong
28:27 - so i see a lot of people who they're
28:30 - like well i set this thing to true but
28:32 - it's still false but i set it to true
28:33 - and their mind is just like blown like
28:35 - how could it not be true
28:37 - and so instead of saying how could this
28:39 - not be true
28:40 - say how could this not be true thinking
28:43 - emoji like engage your brain and start
28:45 - to work through the system of like okay
28:47 - it's not true accepted how do i make it
28:50 - true
28:52 - this next tip if you took anything away
28:54 - you take one thing this would be it when
28:56 - in doubt print more out
28:59 - i do this every single day
29:02 - print stuff in your code this shows you
29:05 - line by line
29:06 - what's happening what's the data coming
29:08 - in what's the data going out
29:10 - countless times somebody will be like
29:12 - just doesn't work doesn't work doesn't
29:13 - work i'm like okay print the print the
29:15 - first line of your function they're like
29:17 - oh it's not being called it's like you
29:19 - spend so much time and it's like your
29:20 - function is not even being called so
29:21 - like see exactly where you are what's
29:24 - the data going in what's the data going
29:25 - out
29:26 - this will drastically speed up what
29:28 - you're doing
29:30 - okay lastly
29:32 - take it one step at a time
29:34 - even to this day if i'm going to
29:36 - implement say a new feature in a web app
29:38 - i will set up the route and the template
29:40 - and print the word hi to myself and i
29:43 - will see that i can see the word high on
29:44 - the screen before i do anything else
29:47 - there's this tendency to like just going
29:49 - crazy in the code i did this in school
29:52 - all the time i'd get a project and three
29:54 - hours just going hard but all right time
29:57 - to run fails it's like
29:59 - what did i expect i typed for three
30:00 - hours and didn't check anything take it
30:03 - one step at a time and print it out
30:06 - trust me print it out
30:08 - so to wrap up i know i've thrown a lot
30:10 - of things at you
30:12 - but i hope there's some direction
30:14 - and some belief you can get that you can
30:16 - do this
30:18 - lots of people have done it i did it and
30:20 - struggled terribly hopefully you can
30:22 - learn from my mistakes but in the end
30:24 - you just gotta believe you can do it and
30:26 - just get after it every day
30:29 - a couple references for you if you want
30:30 - to try ruby that's a great link
30:32 - the rails tutorial that i mentioned like
30:35 - every rails developer in the world has
30:36 - gone through that book and it's amazing
30:38 - even if you don't end up with choosing
30:40 - rails like that's probably still a good
30:41 - book to go through that's the link to my
30:44 - extras doc and then to ryan's interview
30:46 - if you didn't see that talk
30:49 - i'm at john mosesman about everywhere on
30:51 - the web if you want to talk
30:53 - i'd be happy to talk with you help you
30:55 - in any way i can
30:57 - and with that
30:59 - let's have some questions
31:03 - yes
31:30 - that is
31:44 - it's a good question so you're saying
31:47 - you've learned ruby but there's not a
31:48 - great scene here for that yet how like
31:50 - what should you do next
31:53 - i would say
31:54 - i think
31:55 - picking another language is probably
31:57 - good i think you'll find that
31:59 - a lot of the things you didn't read
32:00 - people directly transfer like the syntax
32:02 - is a little different but
32:03 - the concepts are there
32:06 - like i said in the talk i don't think it
32:07 - really
32:08 - matters which one you pick i would talk
32:10 - to recruiters and see
32:12 - you know who's hiring whether that's
32:14 - dot net or something javascript based or
32:16 - whatever
32:19 - in the meantime
32:20 - so let me ask what was
32:24 - what do you think the problem was in
32:25 - finding a ruby job were you not able to
32:27 - find enough things to apply to or you
32:29 - weren't able to get far enough
32:44 - um
32:56 - oklahoma is or at least oklahoma city is
32:59 - very.net centric
33:01 - so i don't think that is a bad career
33:03 - move like you're not going to regret
33:04 - learning.net to work here um i think you
33:08 - can also
33:09 - depending upon your level of experience
33:10 - like you could keep making things like
33:12 - maybe
33:14 - there's a job out there that you could
33:15 - get if you had a little more exposure a
33:16 - little more experience
33:19 - but picking up something like
33:21 - javascript
33:22 - whether that's angular angular or react
33:24 - or something like that like
33:27 - that's going to directly translate into
33:29 - any other job you do
33:30 - so i don't think there's a bad option i
33:33 - think you have to kind of pick something
33:34 - but definitely go talk to the recruiters
33:36 - and see just what's out there
33:47 - anyone else
33:49 - yes
33:52 - ready for
33:53 - the first job or
33:56 - um
33:57 - i don't think you ever
34:00 - hit a point where you're like yeah now
34:01 - i'm ready i think it's just about
34:04 - continually growing and over time like
34:07 - things will line up because the job
34:09 - thing
34:09 - is tough because it
34:11 - like i said there's so many things
34:12 - outside of your control
34:14 - um i think you just have to it's kind of
34:17 - like when people say
34:18 - as i quote go the hard-working people
34:21 - are always lucky or something like that
34:23 - it's like
34:24 - you know like oh they got such a big
34:25 - break that's like really they were just
34:27 - you know on their grind
34:29 - for like two years and they were just
34:31 - getting after it and so it's like oh
34:32 - they got this amazing thing um i think
34:35 - there's definitely kind of a checklist
34:36 - of like can i make crud apps do i know
34:39 - what apis are have i made them you know
34:41 - can i do some sql stuff have i used all
34:43 - the major
34:44 - javascript css frameworks
34:47 - there's some checkboxes like that but i
34:49 - really think it's just about
34:51 - continuing to grow
34:53 - until something lines up
34:55 - or
34:56 - on the other kind of flip side is
34:59 - and it sounds bad but like the stronger
35:00 - your network is the more people you know
35:03 - like if i know you really well and i'm
35:04 - working in a place where it's like hey
35:05 - we could really
35:07 - you know we could take on another
35:08 - developer right now like those people
35:09 - are going to be at the top of my list to
35:11 - pull in
35:28 - the question is
35:29 - have
35:30 - have it's a good question have i ever uh
35:32 - based on my computer science background
35:34 - basically have i ever like directly used
35:36 - that in a job
35:38 - i got
35:39 - so close to using it
35:42 - i'm dead serious one time i got so close
35:45 - i was like yes
35:47 - i got this i don't remember what it was
35:48 - and then i was like actually there's a
35:49 - better way to do this and i scrapped it
35:51 - so like
35:52 - the answer is basically no
35:54 - you want to go work for amazon google
35:56 - facebook where they're solving like
35:58 - crazy problems yeah you probably need
35:59 - computer science but the average
36:01 - programming gig no
36:03 - honestly you don't
36:05 - well
36:07 - yeah so like the us specifically have
36:09 - you ever used recursion and it's like i
36:11 - mean like you said recursion and loops
36:13 - can generally be kind of interchanged um
36:16 - but so here's another great thing i
36:18 - should mention there's this
36:19 - there's so many resources online now i
36:21 - think stanford has an online class
36:24 - where they basically they put their cs
36:26 - class online and so if you need to learn
36:28 - about
36:30 - see don't you learn about those things
36:31 - but if you're like oh i don't really
36:32 - understand recursion there's tons of
36:34 - stuff online to go see
36:37 - and there's also a book it costs it
36:39 - costs money but it's called the imposter
36:41 - handbook it's by a guy named rob connery
36:43 - who
36:45 - basically
36:46 - breaks down all the important cs
36:48 - concepts you know
36:50 - how do you make
36:51 - state machines and how do compilers work
36:53 - and all this kind of stuff which is
36:54 - really not
36:56 - like i said very applicable but
36:58 - if that is interesting to you like go
37:00 - get that book and work through it
37:01 - there's a lot of i think the big overall
37:03 - point is there's a lot of resources out
37:05 - there
37:06 - that weren't there five years ago
37:08 - definitely weren't there 10 years ago
37:09 - it's where like just the time and money
37:11 - it takes to go through that degree
37:13 - it's not the fastest path to get where
37:15 - you want to go if you want to do
37:16 - development i guess is the overall point
37:18 - good question
37:24 - anybody else
37:28 - all right thank you
37:32 - [Applause]

Cleaned transcript:

all right thanks everyone for coming out i know there's probably a lot of other things you want to do on your weekends a lot of sports ball to be watched but you also want to be a developer and i mean you're here and that's that's a really great first step there's a lot of people who are not here and not doing anything and you're actively doing it so that's that's awesome uh the title of this talk is how to become a developer it's a collection of a lot of the experiences that i've had some of the things i think i did right and almost everything i did wrong as well as the experiences of some people that i've helped mentor through this process just recently there was a guy who had no programming experience at all just got his first job two months ago and so this is really fresh on my mind and i know the great things that tech has done for my life and so i'm really really happy to share with you guys um maybe help you learn some things that um the easy way so i'm john i'm a developer and a consultant and i like doing things outside of computers sometimes and this talk is based on a series that i wrote on my blog also called how to become a developer siri no why are you doing that and the goal here is to become fully employed as a software developer like that's where we want to go and so the structure for this talk is we're going to talk about why you might want to become a developer what skills you might need what kind of developer what type of development talk about like okay how do you actually do that and also talk about how to get your first job with a little bonus of how to be an outstanding junior developer so i imagine you have some reasons why you wouldn't become a developer otherwise you wouldn't be here and to me there's really two groups and i think there are practical reasons i think there are personal reasons i mean the biggest practical one just right up front like it pays pretty good i mean if you look up the median developer salary in your area it's pretty good and the rate at which you can increase that is probably higher than about any other field out there secondly i think there's huge market potential still to be had for development i mean everything has programming in it you can tweet from your fridge if that's a thing that you would want to do and so programming has given us such incredible scale and efficiency in business like it's here to stay and while there may be some type of super ai that can program itself and take over the world i mean somebody's got to make that muzzle b why not is anybody here who has an app idea or a business idea that involves technology if you do learning to program is a great way to bootstrap those ideas i've talked to a lot of people who have business ideas and they are almost helplessly lost trying to find programmers figure out what they need like project manage it's incredibly tough and so getting this skill set is incredibly beneficial if you actually want to make something with it yourself and then lastly here i think it's important to know that this is a known path okay we're not finding cures for cancer we're solving mathematical theorems that have been unsolved for 500 years like there's a way to do this and i don't want to underestimate the amount of hard work that it takes because it does take a lot of hard work but it's not hard and i think that's a really important distinction it is not hard it is very doable but it does take a lot of hard work so moving on to some personal reasons i think some people are surprised when they start programming because they do it for all those practical things and then they find that they really just love it for what it is and one of those reasons i think is that programming to me is pure creation and if you have a creative itch it will scratch that itch a lot of people think about oh you know creativity is art or music or dance or something like that but to me creativity is anything where you have made something that was no longer there or that was not there before you started there's this tweet going around recently by a conference that said what five words best describe programming and i really like ryan's answer here making invisible robots from words like when you program things you're commanding bits of matter to do stuff based on secret keywords that you type on your computer like that's kind of crazy if you think about like what actually happens when you program something to me i also like programming because it's a domainless tool programming is a very good tool and it's great at what it does but you can like programming and at the same time not do it for programming like if you like cats or you like music you can apply programming to those things so real quick let's talk about some reasons why you may not want to become a developer and to me there you don't like computers notice i didn't say you were not good at computers i said you do not like them you don't like desk jobs sitting at a desk sucks i mean it's awful for your health and it can start to be kind of painful over time and also if you don't like learning new things programming is not for you the world of programming adapts so quickly and changes so fast if you're not learning you're going to get left behind now there's a notable exclusion there i think some of you might be thinking oh i'm not good at math or i'm not smart and these are just silly things we tell ourselves based on a teacher we had in high school or an experience we had this is just not true like you don't have to be smart you are smart enough you don't have to be good at math there's really not that much math in programming okay so moving on to what skills do we need you might be surprised that i only put one thing in this list and to me that is pure and utter determination like you have to know that you're going to beat this little piece of metal and it may kick you down a couple times but in the end you're going to triumph and learn this and you can do it that's all you need so when i started programming it was the first day my freshman year in college the computer science program and i had done no programming had absolutely no idea and it kicked my butt continually and it was awful and i had no idea what i was doing every tuesday we got a project every tuesday i got depressed and i felt like i couldn't find the help i couldn't figure it out but i kept going and sophomore year picked up a couple more things junior year picked up a couple more things again felt like okay i've got some fundamentals you know i can make some programs and so i finally graduated the program i know some things and i got my first job as a web developer and computer science and web development are very different and so i felt like the ground was ripped under out from underneath me again and i was hopelessly lost because they're just totally different concepts but after my first job i got my second one and i noticed that i learned some things and um third job i learned some more things you know i'm not getting stuck as often i'm not getting stuck for as long when i do get stuck and so over time you build up these skills you build up this knowledge and you can get there the path is no so skills you don't need tech savviness good at math and science a computer science degree i'm sure there are a lot of people to see that if you have questions about that we can talk about after the talk but you don't need a computer science degree i had a friend of mine who gave me an analogy that i really liked and he talked about being a welder versus a material scientist and to me programming is like being a welder you have tools it's a skill and a craft that you learn how to do now if you want a computer science degree i i relate that more to material science you're discovering new materials you're worried about the theory of how things work now would a material science degree help you as a welder probably but it's not required and so if that's something that interests you go for that degree but it's not something it's not a prerequisite again it's not hard but takes a lot of hard work there's this blog that i found that said this is why learning rails is hard and they had this mind map of skills you have to pick up and that's kind of daunting and i don't show you that to freak you out but there's a lot of things there but the thing is you don't start you know eating the whole elephant you do it one bite at a time and so you pick up the first node maybe on each of those things and maybe you get the second one in the third and over time you build up this really impressive knowledge of skills because the web is continually evolving and it's is much there's much more to learn than there was five ten years ago so let's talk about what kind of developer we want to be development is kind of like music in that music has genres and instruments you might if you want to be a musician you say i want to be an electric guitarist in a rock band or i want to play bass in a jazz trio and development has very similar things just like music has genres programming has types of applications and before somebody gets really angry in the chat there's a simplified view there's probably like more things are left out but just for our sake of conversation i put them in these four groups the first one i'm calling websites this term might confuse you but to me this is what a website is you can actually go to this link it's still up it's just like you would have a filing cabinet with physical drawers a website is just virtual documents with links to flip the pages now we kind of colloquially use this term for things like this which i'm calling web apps so facebook gmail slack and web apps are things that are interactive so you have an account you're submitting data the data you get back is contextualized to use specifically next we have native apps you know what these are this is your slack client for your desktop these are the things on your phone and the fourth one i'm just calling generic internet of things this is more the like device sensory kind of communication stuff so out of all of these you want to make web apps and the reason you want to do this is because web apps are really at the core of all these other things the skills you pick up making a web app will either directly or indirectly transfer to whatever you're doing if you want to make a mobile app that data is coming from somewhere it's coming from an api it's coming from a web app you do internet of things that's like all apis like things talking to each other so web apps is an amazing place to start don't make websites websites are dead and you don't want to you don't want to do that okay so what kind of development do we want to do in this i've broken it kind of into two categories first one is the front end this is the thing that you interact with this is the presentation layer it's the thing that takes the data and then makes it in a human readable workable way and so a frontend developer is concerned with things like how does it look how does it feel how do you interact with it you probably use technologies like html css js react angular ember in the contrast to that we have the back end and for this slide i googled back in cloud architecture and this was the first image i got which is perfect but i love it especially on the side how it says the back end goes to the front end through internet connection just take that in okay but seriously the back end powers the front end this is stuff like servers network requests databases you're dealing with things like how do you store and retrieve data properly how do you authenticate users you use something maybe like ruby python rails node and so do you want to be frontend or backend that's a good question the answer is yes you want to be what we call full stack by learning this incredible breadth of skills you'll have everything you need to specialize in whatever you end up wanting to do if you saw ryan's talk a couple weeks ago in interviewing you talked about tshaped people you want to build the top of your tee you want to have exposure to this wide variety of things and over time you'll be like you know i really like building reactive frontends or i really like doing database stuff and so you'll build the oops you'll build the stem of your tea and really start to specialize down in one particular area okay that's enough theory you guys want to know like how like how do i actually do this so let's talk about that first thing you need to do is choose your tool now this can be kind of daunting there are a lot of programming languages out there it's a lot of information but there really is not a bad choice unless you didn't pick bulbasaur in which case you chose poorly the thing is is any experience is good experience when you start there's kind of this weird phenomena with weightlifting where somebody came to you and said i want to raise my bench press if you told them to go run every day a mile for four weeks it would raise their bench press which makes no sense but when you're in such an unadapted state any experience moves you towards where you want to go so especially in the beginning don't worry about it just pick something do something it will become clear how to move and pivot as you go along the way okay but seriously well english just tell me a language please before i do that i have to give you a disclaimer so asking a programmer what language you should use is incredibly biased like people have chosen languages and based their entire career around these things okay this is like asking try not to offend people somebody in a multilevel marketing scheme like which should i use your competitor the other one like you're getting a pitch you're getting a really strong pitch you're signing up right there okay so if you talk to somebody and they don't give you this disclaimer you should not listen to this person like they're obviously so biased they cannot see it so with all that being said you guys are all doing html javascript css keep it up those are great you need those for a backend language i recommend ruby and there's a big asterisk here that i'll talk about later but you want to pick a language that is stable if you're trying to learn it and the components of the language are changing out from under you between versions you're not gonna have a good time cough angular one to two you want to be beginner friendly c and c plus plus are amazing powerful languages but they're not beginner friendly like don't give yourself more pain than you have to at the beginning you want something that has a large community okay you want something where when you go to google the first 10 hits are for that language you don't want to start learning something and then you go to get that job and they're like i've never heard of that like you picked randomnound.js like five people use that in the world you want something that has a web framework because you want to make web apps and you want something that has been around for a while but it's still being maintained and it's kind of a balance that you have to to work but it's important that it's continually being improved but it's not changing so fast that it's going to blow you out of the water so all that being said i think all these are good languages to choose from someone is angry in the chat saying.net note or not a language we can't hear you so stop yelling just don't pick php just please pick one on the left if you pick php that's fine like you you'll learn eventually sometimes bad experience points you towards good experience pick something you can make web things with that's like the general point okay so how you picked a language how do we do this step one is to learn the language itself if i said okay we're going to write a passionate political essay in german but you don't know any german you're going to have a bad time so you want to learn the grammar you want to learn the words themselves how to put them together then we'll talk about sentences then we'll talk about ideas and themes you've got to learn the language yourself or you're going to be tripping over yourself trying to do stuff so work through the language and then make crud apps this is both a description of the quality of your apps and the type of app itself if you didn't know crud stands for create read update destroy okay this is like a facebook feed you make posts you edit posts you get your posts back and you can delete them after you do that you're learning the language you're learning the tools around the language third there's some concepts outside of crud that you need to become familiar with these are things like apis database css and js frameworks bootstrap foundation react all that kind of stuff um i made this dock for somebody who is trying to go through this process um and it's it's not complete for sure but there's some extra stuff in there if you're interested you want to go look at it and i don't think you have to do these things these three things like in order like do them at the same time learn some language stuff make some crud apps investigate something you don't know and repeat and just keep building and building on your knowledge okay let's talk about getting your first job now i'm going to quote myself being quoted by ryan who was quoting me originally when i say this is probably the hardest part in the whole process because there are a lot of things outside of your control with company logistics the person that's interviewing you where you're at in the world and where you're applying like there's a lot of things out of your control here but there are a lot of things that you can do so here's some todo's get a developer social media presence okay this is twitter you are following major people in your framework you're following the framework itself if the framework has a new release bam smashing that retweet button if i go to the internet and i put in your name i want to see oh this person is in the developer world like not that they're good or they're bad but like they're at least in the same world that i am if you don't have a blog or personal site this is a great first thing to make as a crud app attend meetups like a fiend you're already doing that so congrats find the language that you're doing if you're doing python ruby js go to that meet up every single time and talk to people okay networking is like this big scary word like find a nice person and go be nice to them and talk about development stuff that's all you have to do if you can contribute to open source uh this is it can be a little intimidating and tough to get into but people you think like oh how am i going to work on rails like the framework that sounds insane but go read their documentation and fix typos people love this if you're like hey fix some typos this is grammatically wrong they love that kind of stuff and it looks good on your github if someone's looking at your github they're not gonna go look at what you did there's like oh he forked rails that's amazing like he's working in rails next step have a github these are the big three github twitter blog or personal site answer questions on stack overflow now i don't know a lot of people who are looking at stack overflow rep as like a metric but it's hard enough to solve your own problems reading someone else's description and solving their problem is even harder so if you get good at that when you jump into a random code base at your new job you'll be right at home and then lastly and probably the most important make as many stupid apps as possible like as many like dozens hundreds if you can and just absolutely dumb stuff like when trump tweets it emails your grandma just like literally anything you can think of make an app out of it okay so getting back to the first job we've done all that stuff we're prepping what do we do step one talk to recruiters i got my first job through recruiter i don't even know how they found my email she could help me up one day and i got my first job through her so that's great the recruiters that come to a lot of these meetups like go talk to them see you know who's hiring what stack are they hiring for what kind of roles are you seeing in this city do all the normal job stuff i mean you're making resumes and cover letters and sending out cold emails applying on job boards just do all those extra things you you know as the conventional job wisdom watch ryan's talk on interviewing interviewing is an important part of the process tap your network i hate this race but go talk to the people that you talk to at the meetups that's really as easy as it is like ryan also mentioned some of my best well all my best jobs have come from a friend of mine telling me about it like i had no idea it even existed and like hey john would be good for this and it works this is how you're gonna get your best job okay now coming back to the asterisk in all transparency ruby is not big in the oklahoma scene right now company wise if your goal is to get a job in oklahoma city you're probably better off as much as it pains me to say doing.net or java something js based just because that's who's here in the city and if you want to get your first job it's probably you know you should be learning the things that are here i will say that i think the quality of jobs is higher in tools like ruby like if you want to be sitting at a coffee shop downtown with your macbook you're not going to do that at like bigcorporation.js that's just not going to be how it is but getting your first job is really important it's really easy to pivot after that and remember any experience is good experience okay let's talk about how to be an outstanding junior developer so you got your first job you're really excited step one communicate really really really really well communication covers a multitude of sins you're probably going to be working with some senior developer or a boss who's trying to coach you along the way communicate really well with them does anybody remember this we're gonna do a little good idea bad idea for communication it errored the page won't load i'm stuck all these things require the person to ask you a question again to get more information when you're communicating try to give them all the information you have so they can immediately start on your problem it'll save time and also help from frustrating both you so i made a little mad lib for us it goes like this i'm working on blank but when i try blank blank happens instead i've tried blank blank and blank and looked at blank and blank example this i'm working on the user password password reset bug when i try to generate a password reset link the user's token is already empty i've looked at where the token is set and i can see the token in the database but the token is missing on line x if you send me this i know what you're doing i know what you've tried i know where you're at and like telling me hey it's on this line we can jump right there and start working on the problem the next thing is to hone your google foo you think you can google but you cannot you will learn googling well is a skill as much as being able to write ruby okay sometimes you just want to paste that whole bad boy in there just copy paste bam first hit that works well now you want to remove project specific info google does not know what undefined function who's that pokemon its pikachu is except that i already googled it to make the slide so it does so you want to remove that kind of stuff undefined function ruby much better results next use a try timer i've worked places where this is specifically said in other places where it's kind of up in the air but this is the amount of time you work on something before you ask for help this could be 15 minutes 30 minutes an hour whatever it is and you basically you want to give it your best shot and try and figure it out before you ask for help now the important thing is let's say you hit a problem hit a problem hit a problem you get help you're frustrated but you move on and then bam a new error what the tendency is is to go ask for help immediately again but reset the timer try it again remember to relax take breaks if you need to because the important part is you learning how to solve your problems not finishing the task at hand like when you finish task a they'll give you task b after task b is task c like that happens forever so for you to really grow as a developer you want to learn how to fix your own problems couple miscellaneous tips ask the duck has anyone heard of rubber duck debugging this is common in the programming world i don't remember the exact origin but there's a boss or professor who put a literal rubber duck on his desk and before people could ask him questions they had to walk up and audibly ask the duck the question and what they found is that when they asked the duck the question they figured out the answer and there's something about saying your question out loud organizing it in a cohesive way where you have to explain to someone else that trains it uses your brain in a different way you usually figure it out so before you ask for help ask the duck like if you need to literally do that that would be great if i was a developer trying to mentor you and i saw you had a duck like i would love that next take notes if you figure something out just keep a little file open when at my first job i literally had stickies that i stuck to my monitor if you figure out oh how do i add a new database column in a migration you know drop some notes down you're going to be referring to these things a lot and it it's impressive to see that when i see somebody that has taken notes and is really trying to learn and remember versus someone who's just like hey how do i do this and it's like we've done this six times like you know gotta keep progressing lastly fight impostor syndrome if you don't know what this is this is this feeling that you'll experience at various points in your career where it seems like everyone else has it figured out but you're faking it and you don't have it and you could be feeling that right now like i'm not a developer like how do i do this and this is absolute garbage i love this picture because it shows that we all have different experiences and skills and we overlap but nobody just like completely bulldozes over you like you have valuable experience especially coming outside of the programming world you can bring to whatever you're doing so lastly i want to talk about closing the junior senior gap and a lot of people when they think about you know these loose terms of junior and senior developer they think oh the senior has all this knowledge they have all this experience where they just know the answer like they see something as boom they know it and that is true to an extent like you will gain knowledge but the thing that really separates someone who's a i think a great developer and a good one is that great developers have a problemsolving system they have honed and polished this system to where yes they may get stuck but they are so fast at figuring out because they go straight to the problem they research they implement it and it works and so i'm going to give you five debugging tips you can use this from day one all the way throughout your career number one when you run into a problem don't thrash your code most people when they run to a problem they just go crazy changing stuff and you introduce like five new problems on top of the problem you already have so don't thrash your code use your system number two read the error message okay no but actually read it i've seen a lot of people it's like oh that's garbage like computer barf not going to read it like that is computer barf and part of that is just like nonsense but part of this is vitally helpful tells you what the error is and the exact file in line that it happens so instead of just going crazy in your code go straight to that line it will save you so much time next don't waste time on the impossible or at least the improbable there is a chance although it is extremely low that you will run into a core framework or language bug or a browser bug or an os level bug but the chances are you did something wrong so i see a lot of people who they're like well i set this thing to true but it's still false but i set it to true and their mind is just like blown like how could it not be true and so instead of saying how could this not be true say how could this not be true thinking emoji like engage your brain and start to work through the system of like okay it's not true accepted how do i make it true this next tip if you took anything away you take one thing this would be it when in doubt print more out i do this every single day print stuff in your code this shows you line by line what's happening what's the data coming in what's the data going out countless times somebody will be like just doesn't work doesn't work doesn't work i'm like okay print the print the first line of your function they're like oh it's not being called it's like you spend so much time and it's like your function is not even being called so like see exactly where you are what's the data going in what's the data going out this will drastically speed up what you're doing okay lastly take it one step at a time even to this day if i'm going to implement say a new feature in a web app i will set up the route and the template and print the word hi to myself and i will see that i can see the word high on the screen before i do anything else there's this tendency to like just going crazy in the code i did this in school all the time i'd get a project and three hours just going hard but all right time to run fails it's like what did i expect i typed for three hours and didn't check anything take it one step at a time and print it out trust me print it out so to wrap up i know i've thrown a lot of things at you but i hope there's some direction and some belief you can get that you can do this lots of people have done it i did it and struggled terribly hopefully you can learn from my mistakes but in the end you just gotta believe you can do it and just get after it every day a couple references for you if you want to try ruby that's a great link the rails tutorial that i mentioned like every rails developer in the world has gone through that book and it's amazing even if you don't end up with choosing rails like that's probably still a good book to go through that's the link to my extras doc and then to ryan's interview if you didn't see that talk i'm at john mosesman about everywhere on the web if you want to talk i'd be happy to talk with you help you in any way i can and with that let's have some questions yes that is it's a good question so you're saying you've learned ruby but there's not a great scene here for that yet how like what should you do next i would say i think picking another language is probably good i think you'll find that a lot of the things you didn't read people directly transfer like the syntax is a little different but the concepts are there like i said in the talk i don't think it really matters which one you pick i would talk to recruiters and see you know who's hiring whether that's dot net or something javascript based or whatever in the meantime so let me ask what was what do you think the problem was in finding a ruby job were you not able to find enough things to apply to or you weren't able to get far enough um oklahoma is or at least oklahoma city is very.net centric so i don't think that is a bad career move like you're not going to regret learning.net to work here um i think you can also depending upon your level of experience like you could keep making things like maybe there's a job out there that you could get if you had a little more exposure a little more experience but picking up something like javascript whether that's angular angular or react or something like that like that's going to directly translate into any other job you do so i don't think there's a bad option i think you have to kind of pick something but definitely go talk to the recruiters and see just what's out there anyone else yes ready for the first job or um i don't think you ever hit a point where you're like yeah now i'm ready i think it's just about continually growing and over time like things will line up because the job thing is tough because it like i said there's so many things outside of your control um i think you just have to it's kind of like when people say as i quote go the hardworking people are always lucky or something like that it's like you know like oh they got such a big break that's like really they were just you know on their grind for like two years and they were just getting after it and so it's like oh they got this amazing thing um i think there's definitely kind of a checklist of like can i make crud apps do i know what apis are have i made them you know can i do some sql stuff have i used all the major javascript css frameworks there's some checkboxes like that but i really think it's just about continuing to grow until something lines up or on the other kind of flip side is and it sounds bad but like the stronger your network is the more people you know like if i know you really well and i'm working in a place where it's like hey we could really you know we could take on another developer right now like those people are going to be at the top of my list to pull in the question is have have it's a good question have i ever uh based on my computer science background basically have i ever like directly used that in a job i got so close to using it i'm dead serious one time i got so close i was like yes i got this i don't remember what it was and then i was like actually there's a better way to do this and i scrapped it so like the answer is basically no you want to go work for amazon google facebook where they're solving like crazy problems yeah you probably need computer science but the average programming gig no honestly you don't well yeah so like the us specifically have you ever used recursion and it's like i mean like you said recursion and loops can generally be kind of interchanged um but so here's another great thing i should mention there's this there's so many resources online now i think stanford has an online class where they basically they put their cs class online and so if you need to learn about see don't you learn about those things but if you're like oh i don't really understand recursion there's tons of stuff online to go see and there's also a book it costs it costs money but it's called the imposter handbook it's by a guy named rob connery who basically breaks down all the important cs concepts you know how do you make state machines and how do compilers work and all this kind of stuff which is really not like i said very applicable but if that is interesting to you like go get that book and work through it there's a lot of i think the big overall point is there's a lot of resources out there that weren't there five years ago definitely weren't there 10 years ago it's where like just the time and money it takes to go through that degree it's not the fastest path to get where you want to go if you want to do development i guess is the overall point good question anybody else all right thank you
